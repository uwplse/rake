#lang s-exp "../../lang/main.rkt"

; Scalar kernel for the Sobel filter.  See the loop body of the sobelFilter reference 
; implementation in host.rkt.
(kernel void (sobelFilterScalarKernel [int* inputImage] [int* outputImage] [int w])
  (: int x y i i00 i01 i02 i10 i11 i12 i20 i21 i22 gx gy)
  (= x (get_global_id 0))
  (= y (get_global_id 1))
  (= i (+ (* y w) x))
  (= i00 [inputImage (- i 4 w)])
  (= i01 [inputImage (- i w)])
  (= i02 [inputImage (- (+ i 4) w)])
  (= i10 [inputImage (- i 4)])
  (= i11 [inputImage i])
  (= i12 [inputImage (+ i 4)])
  (= i20 [inputImage (+ (- i 4) w)])
  (= i21 [inputImage (+ i w)])
  (= i22 [inputImage (+ i 4 w)])
  (= gx (+ i00 (* 2 i01) i02 (* -1 i20) (* -2 i21) (* -1 i22)))
  (= gy (+ i00 (* -1 i02) (* 2 i10) (* -2 i12) i20 (* -1 i22)))
  (= [outputImage i] ((int) (/ (sqrt (+ (* ((float) gx) gx) (* ((float) gy) gy))) 2))))

; Sketch of the vector kernel for the Sobel filter.  The sketch expresses the hypothesis 
; that the vectorized kernel will look pretty much the same as the scalar one, except for the offset from i.
(kernel void (sobelFilterVectorKernelSketch [int4* inputImage] [int4* outputImage] [int w])
  (: int x y i offset)
  (: int4 i00 i01 i02 i10 i11 i12 i20 i21 i22)
  (: float4 gx gy)
  (= x (get_global_id 0))
  (= y (get_global_id 1))
  (= i (+ (* y w) x))
  (= offset (?? int)) 
  (= i00 [inputImage (- i offset w)])
  (= i01 [inputImage (- i w)])
  (= i02 [inputImage (- (+ i offset) w)])
  (= i10 [inputImage (- i offset)])
  (= i11 [inputImage i])
  (= i12 [inputImage (+ i offset)])
  (= i20 [inputImage (+ (- i offset) w)])
  (= i21 [inputImage (+ i w)])
  (= i22 [inputImage (+ i offset w)])
  (= gx (convert_float4 (+ i00 (* 2 i01) i02 (* -1 i20) (* -2 i21) (* -1 i22))))
  (= gy (convert_float4 (+ i00 (* -1 i02) (* 2 i10) (* -2 i12) i20 (* -1 i22))))
  (= [outputImage i] (convert_int4 (/ (sqrt (+ (* gx gx) (* gy gy))) ((float4) 2)))))

; Vector kernel for the Sobel filter.  
(kernel void (sobelFilterVectorKernel [int4* inputImage] [int4* outputImage] [int w])
  (: int x y i off)
  (: int4 i00 i01 i02 i10 i11 i12 i20 i21 i22)
  (: float4 gx gy)
  (= x (get_global_id 0))
  (= y (get_global_id 1))
  (= i (+ (* y w) x))
  (= off 1)    
  (= i00 [inputImage (- i off w)])
  (= i01 [inputImage (- i w)])
  (= i02 [inputImage (- (+ i off) w)])
  (= i10 [inputImage (- i off)])
  (= i11 [inputImage i])
  (= i12 [inputImage (+ i off)])
  (= i20 [inputImage (+ (- i off) w)])
  (= i21 [inputImage (+ i w)])
  (= i22 [inputImage (+ i off w)])
  (= gx (convert_float4 (+ i00 (* 2 i01) i02 (* -1 i20) (* -2 i21) (* -1 i22))))
  (= gy (convert_float4 (+ i00 (* -1 i02) (* 2 i10) (* -2 i12) i20 (* -1 i22))))
  (= [outputImage i] (convert_int4 (/ (sqrt (+ (* gx gx) (* gy gy))) ((float4) 2)))))

