pragma options "--bnd-cbits 1";
pragma options "--bnd-inbits 2";
pragma options "--bnd-arr-size 1024";
//pragma options "--bnd-inline-amnt 1901";
//pragma options "--fe-fpencoding AS_FIXPOINT";

include "casting.sk";
include "vector.sk";

int ARRAY_LEN = 1024;

vector orig (int[ARRAY_LEN] input, int x, int t20) {
    return vec_add(vec_add(vec_mul(cast_uint8vec_to_int16vec(ramp(input, ((x*128) + t20), 1, 128)), broadcast(cast_int32_to_int16(3), 128)), vec_mul(cast_uint8vec_to_int16vec(ramp(input, (((x*128) + t20) + 1), 1, 128)), broadcast(cast_int32_to_int16(2), 128))), cast_uint8vec_to_int16vec(ramp(input, (((x*128) + t20) + 2), 1, 128)));
}

generator int index_gen ([int N], int[N] exprs) {
    int i = ??(3);
    int c = ??(3);

    int expr = exprs[i];
    return {| expr | expr + c | expr - c |};
}

generator vector vdmpy_gen (int[ARRAY_LEN] input, int x, int t20) {
    int base = index_gen({((x*128) + t20), ((x*128) + t20) + 1, ((x*128) + t20) + 2});
    int stride = 1;
    int lanes = 128;
    int[2] kernel = {};
    repeat(i : 2) {
        kernel[i] = {| 3 | 2 |};
    };
    return vdmpy(input, base, stride, lanes, kernel);
}

generator vector vtmpy_gen (int[ARRAY_LEN] input, int x, int t20) {
    int base = index_gen({((x*128) + t20), ((x*128) + t20) + 1, ((x*128) + t20) + 2});
    int stride = 1;
    int lanes = 128;
    int[2] kernel = {};
    repeat(i : 2) {
        kernel[i] = {| 3 | 2 |};
    };
    return vtmpy(input, base, stride, lanes, kernel);
}

generator vector vrmpy_gen (int[ARRAY_LEN] input, int x, int t20) {
    int base = index_gen({((x*128) + t20), ((x*128) + t20) + 1, ((x*128) + t20) + 2});
    int stride = 1;
    int lanes = 128;
    int[4] kernel = {};
    repeat(i : 4) {
        kernel[i] = {| 3 | 2 |};
    };
    return vrmpy(input, base, stride, lanes, kernel);
}

generator vector synth (int[ARRAY_LEN] input, int x, int t20) {
    if (??)
        return vdmpy_gen(input, x, t20);
    else if (??)
        return vtmpy_gen(input, x, t20);
    else
        return vrmpy_gen(input, x, t20);
}

harness void main (int x, int t20, int[ARRAY_LEN] input) {
    vector original_expr = orig(input, x, t20);
    vector synthesized_expr = synth(input, x, t20);

    assert vec_eq(original_expr, synthesized_expr): "Original and synthesized expressions do not match.";
}