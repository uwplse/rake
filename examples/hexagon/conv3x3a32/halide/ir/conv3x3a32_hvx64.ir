+ ./tmp/conv3x3a32_generator -o tmp -e o,h,assembly,bitcode -g conv3x3a32 -f conv3x3a32_hvx64 target=hexagon-32-noos-no_bounds_query-no_asserts-hvx_64
assert((reinterpret(uint64, output.buffer) != (uint64)0), halide_error_buffer_argument_is_null("output"))
assert((reinterpret(uint64, mask.buffer) != (uint64)0), halide_error_buffer_argument_is_null("mask"))
assert((reinterpret(uint64, input.buffer) != (uint64)0), halide_error_buffer_argument_is_null("input"))
let input = _halide_buffer_get_host(input.buffer)
let input.min.0 = _halide_buffer_get_min(input.buffer, 0)
let input.stride.0 = _halide_buffer_get_stride(input.buffer, 0)
let input.min.1 = _halide_buffer_get_min(input.buffer, 1)
let input.stride.1 = _halide_buffer_get_stride(input.buffer, 1)
let mask = _halide_buffer_get_host(mask.buffer)
let mask.min.0 = _halide_buffer_get_min(mask.buffer, 0)
let mask.stride.0 = _halide_buffer_get_stride(mask.buffer, 0)
let mask.min.1 = _halide_buffer_get_min(mask.buffer, 1)
let mask.stride.1 = _halide_buffer_get_stride(mask.buffer, 1)
let output = _halide_buffer_get_host(output.buffer)
let output.min.0 = _halide_buffer_get_min(output.buffer, 0)
let output.extent.0 = _halide_buffer_get_extent(output.buffer, 0)
let output.stride.0 = _halide_buffer_get_stride(output.buffer, 0)
let output.min.1 = _halide_buffer_get_min(output.buffer, 1)
let output.extent.1 = _halide_buffer_get_extent(output.buffer, 1)
let output.stride.1 = _halide_buffer_get_stride(output.buffer, 1)
assert((input.stride.0 == 1), 0)
assert((input.min.0 == 0), 0)
assert(((input.stride.1 % 64) == 0), 0)
assert((input.min.1 == 0), 0)
assert((mask.stride.0 == 1), 0)
assert((output.stride.0 == 1), 0)
assert((output.min.0 == 0), 0)
assert(((output.stride.1 % 64) == 0), 0)
assert((output.min.1 == 0), 0)
let output.s0.y.yo.loop_extent.s = ((output.extent.1 + -1)/(output.extent.1/2))
produce output {
  let t51 = (output.extent.1 - (output.extent.1/2))
  for<Hexagon> (output.s0.__outermost, 0, 1) {
    let t68.s = (2 - (mask.min.1*mask.stride.1))
    let t66.s = (1 - (mask.min.1*mask.stride.1))
    let t64.s = (0 - (mask.min.1*mask.stride.1))
    parallel (output.s0.y.yo, 0, (output.s0.y.yo.loop_extent.s + 1)) {
      let output.s0.y.y.base = min(((output.extent.1/2)*output.s0.y.yo), t51)
      for (output.s0.y.y.y, 0, ((output.extent.1 + 6)/8)) {
        for (output.s0.x.x, 0, ((output.extent.0 + 63)/64)) {
          output[ramp(((output.s0.x.x*64) + (((output.s0.y.y.y*4) + output.s0.y.y.base)*output.stride.1)), 1, 64) aligned(64, 0)] = (let t101 = ((output.s0.x.x*64) + (((output.s0.y.y.y*4) + output.s0.y.y.base)*input.stride.1)) in halide.hexagon.pack_satub.vh(halide.hexagon.trunc_sath_shr.vw.uw(halide.hexagon.deinterleave.vw(halide.hexagon.acc_add_4mpy.vw.vub.b(halide.hexagon.acc_add_4mpy.vw.vub.b(halide.hexagon.unpack.vh(halide.hexagon.interleave.vh(halide.hexagon.mpy.vub.b(input[ramp(((input.stride.1 + t101) + 1), 1, 64) aligned(64, 1)], mask[((((2 - mask.min.1)*mask.stride.1) - mask.min.0) + 2)]))), interleave_vectors(input[ramp(((t101 - input.stride.1) + -1), 1, 64) aligned(64, 63)], input[ramp((t101 + -1), 1, 64) aligned(64, 63)], input[ramp(((input.stride.1 + t101) + -1), 1, 64) aligned(64, 63)], input[ramp((t101 - input.stride.1), 1, 64) aligned(64, 0)]), reinterpret(int32, concat_vectors(mask[(t64.s - mask.min.0)], mask[(((1 - mask.min.1)*mask.stride.1) - mask.min.0)], mask[(((2 - mask.min.1)*mask.stride.1) - mask.min.0)], mask[(t66.s - mask.min.0)]))), interleave_vectors(input[ramp(t101, 1, 64) aligned(64, 0)], input[ramp((input.stride.1 + t101), 1, 64) aligned(64, 0)], input[ramp(((t101 - input.stride.1) + 1), 1, 64) aligned(64, 1)], input[ramp((t101 + 1), 1, 64) aligned(64, 1)]), reinterpret(int32, concat_vectors(mask[((((1 - mask.min.1)*mask.stride.1) - mask.min.0) + 1)], mask[((((2 - mask.min.1)*mask.stride.1) - mask.min.0) + 1)], mask[(t68.s - mask.min.0)], mask[((((1 - mask.min.1)*mask.stride.1) - mask.min.0) + 2)])))), 4)))
          output[ramp(((output.s0.x.x*64) + ((((output.s0.y.y.y*4) + output.s0.y.y.base) + 1)*output.stride.1)), 1, 64) aligned(64, 0)] = (let t104 = ((output.s0.x.x*64) + ((((output.s0.y.y.y*4) + output.s0.y.y.base) + 1)*input.stride.1)) in halide.hexagon.pack_satub.vh(halide.hexagon.trunc_sath_shr.vw.uw(halide.hexagon.deinterleave.vw(halide.hexagon.acc_add_4mpy.vw.vub.b(halide.hexagon.acc_add_4mpy.vw.vub.b(halide.hexagon.unpack.vh(halide.hexagon.interleave.vh(halide.hexagon.mpy.vub.b(input[ramp(((input.stride.1 + t104) + 1), 1, 64) aligned(64, 1)], mask[((((2 - mask.min.1)*mask.stride.1) - mask.min.0) + 2)]))), interleave_vectors(input[ramp(((t104 - input.stride.1) + -1), 1, 64) aligned(64, 63)], input[ramp((t104 + -1), 1, 64) aligned(64, 63)], input[ramp(((input.stride.1 + t104) + -1), 1, 64) aligned(64, 63)], input[ramp((t104 - input.stride.1), 1, 64) aligned(64, 0)]), reinterpret(int32, concat_vectors(mask[(t64.s - mask.min.0)], mask[(((1 - mask.min.1)*mask.stride.1) - mask.min.0)], mask[(((2 - mask.min.1)*mask.stride.1) - mask.min.0)], mask[(t66.s - mask.min.0)]))), interleave_vectors(input[ramp(t104, 1, 64) aligned(64, 0)], input[ramp((input.stride.1 + t104), 1, 64) aligned(64, 0)], input[ramp(((t104 - input.stride.1) + 1), 1, 64) aligned(64, 1)], input[ramp((t104 + 1), 1, 64) aligned(64, 1)]), reinterpret(int32, concat_vectors(mask[((((1 - mask.min.1)*mask.stride.1) - mask.min.0) + 1)], mask[((((2 - mask.min.1)*mask.stride.1) - mask.min.0) + 1)], mask[(t68.s - mask.min.0)], mask[((((1 - mask.min.1)*mask.stride.1) - mask.min.0) + 2)])))), 4)))
          output[ramp(((output.s0.x.x*64) + ((((output.s0.y.y.y*4) + output.s0.y.y.base) + 2)*output.stride.1)), 1, 64) aligned(64, 0)] = (let t107 = ((output.s0.x.x*64) + ((((output.s0.y.y.y*4) + output.s0.y.y.base) + 2)*input.stride.1)) in halide.hexagon.pack_satub.vh(halide.hexagon.trunc_sath_shr.vw.uw(halide.hexagon.deinterleave.vw(halide.hexagon.acc_add_4mpy.vw.vub.b(halide.hexagon.acc_add_4mpy.vw.vub.b(halide.hexagon.unpack.vh(halide.hexagon.interleave.vh(halide.hexagon.mpy.vub.b(input[ramp(((input.stride.1 + t107) + 1), 1, 64) aligned(64, 1)], mask[((((2 - mask.min.1)*mask.stride.1) - mask.min.0) + 2)]))), interleave_vectors(input[ramp(((t107 - input.stride.1) + -1), 1, 64) aligned(64, 63)], input[ramp((t107 + -1), 1, 64) aligned(64, 63)], input[ramp(((input.stride.1 + t107) + -1), 1, 64) aligned(64, 63)], input[ramp((t107 - input.stride.1), 1, 64) aligned(64, 0)]), reinterpret(int32, concat_vectors(mask[(t64.s - mask.min.0)], mask[(((1 - mask.min.1)*mask.stride.1) - mask.min.0)], mask[(((2 - mask.min.1)*mask.stride.1) - mask.min.0)], mask[(t66.s - mask.min.0)]))), interleave_vectors(input[ramp(t107, 1, 64) aligned(64, 0)], input[ramp((input.stride.1 + t107), 1, 64) aligned(64, 0)], input[ramp(((t107 - input.stride.1) + 1), 1, 64) aligned(64, 1)], input[ramp((t107 + 1), 1, 64) aligned(64, 1)]), reinterpret(int32, concat_vectors(mask[((((1 - mask.min.1)*mask.stride.1) - mask.min.0) + 1)], mask[((((2 - mask.min.1)*mask.stride.1) - mask.min.0) + 1)], mask[(t68.s - mask.min.0)], mask[((((1 - mask.min.1)*mask.stride.1) - mask.min.0) + 2)])))), 4)))
          output[ramp(((output.s0.x.x*64) + ((((output.s0.y.y.y*4) + output.s0.y.y.base) + 3)*output.stride.1)), 1, 64) aligned(64, 0)] = (let t110 = ((output.s0.x.x*64) + ((((output.s0.y.y.y*4) + output.s0.y.y.base) + 3)*input.stride.1)) in halide.hexagon.pack_satub.vh(halide.hexagon.trunc_sath_shr.vw.uw(halide.hexagon.deinterleave.vw(halide.hexagon.acc_add_4mpy.vw.vub.b(halide.hexagon.acc_add_4mpy.vw.vub.b(halide.hexagon.unpack.vh(halide.hexagon.interleave.vh(halide.hexagon.mpy.vub.b(input[ramp(((input.stride.1 + t110) + 1), 1, 64) aligned(64, 1)], mask[((((2 - mask.min.1)*mask.stride.1) - mask.min.0) + 2)]))), interleave_vectors(input[ramp(((t110 - input.stride.1) + -1), 1, 64) aligned(64, 63)], input[ramp((t110 + -1), 1, 64) aligned(64, 63)], input[ramp(((input.stride.1 + t110) + -1), 1, 64) aligned(64, 63)], input[ramp((t110 - input.stride.1), 1, 64) aligned(64, 0)]), reinterpret(int32, concat_vectors(mask[(t64.s - mask.min.0)], mask[(((1 - mask.min.1)*mask.stride.1) - mask.min.0)], mask[(((2 - mask.min.1)*mask.stride.1) - mask.min.0)], mask[(t66.s - mask.min.0)]))), interleave_vectors(input[ramp(t110, 1, 64) aligned(64, 0)], input[ramp((input.stride.1 + t110), 1, 64) aligned(64, 0)], input[ramp(((t110 - input.stride.1) + 1), 1, 64) aligned(64, 1)], input[ramp((t110 + 1), 1, 64) aligned(64, 1)]), reinterpret(int32, concat_vectors(mask[((((1 - mask.min.1)*mask.stride.1) - mask.min.0) + 1)], mask[((((2 - mask.min.1)*mask.stride.1) - mask.min.0) + 1)], mask[(t68.s - mask.min.0)], mask[((((1 - mask.min.1)*mask.stride.1) - mask.min.0) + 2)])))), 4)))
        }
      }
    }
  }
}

