pragma options "--bnd-cbits 1";
pragma options "--bnd-inbits 2";
pragma options "--bnd-int-range 150";
pragma options "--bnd-arr-size 1024";
pragma options "--bnd-unroll-amnt 10";
pragma options "--bnd-inline-amnt 9";
pragma options "--slv-parallel";
pragma options "--slv-p-cpus 28";
pragma options "--slv-lightverif";

include "casting.sk";
include "vector.sk";
include "grammar.sk";

int ARRAY_LEN = 1024;

// Try graph top-down abstraction algorithm
// Try TASO with CEGIS optimizations
// Spend 1 day porting C++ frontend to Metalift
// Hanlde types properly

generator Vector synth (Buffer input, int x, int t20) {
    // Create vec
    int base = index_gen({((x*128) + t20), ((x*128) + t20) + 1, ((x*128) + t20) + 2});
    int stride = 1;
    int lanes = 128;
    Vector v = ramp(input, base, stride, lanes);
    return convolve_x_gen(v, {2, 3, 4, 5});
}

harness void main (int x, int t51, int[ARRAY_LEN] input_data) {
    Buffer input = new Buffer(data=input_data);

    Vector original_expr = vec_add(vec_add(vec_mul(cast_uint8vec_to_int16vec(ramp(input, (((x*128) + t51) + 3), 1, 128)), broadcast(cast_int32_to_int16(3), 128)), vec_add(vec_mul(cast_uint8vec_to_int16vec(ramp(input, (((x*128) + t51) + 2), 1, 128)), broadcast(cast_int32_to_int16(2), 128)), vec_add(vec_mul(vec_add(vec_add(vec_mul(cast_uint8vec_to_int16vec(ramp(input, ((x*128) + t51), 1, 128)), broadcast(cast_int32_to_int16(2), 128)), vec_mul(cast_uint8vec_to_int16vec(ramp(input, (((x*128) + t51) + 1), 1, 128)), broadcast(cast_int32_to_int16(3), 128))), cast_uint8vec_to_int16vec(ramp(input, (((x*128) + t51) + 2), 1, 128))), broadcast(cast_int32_to_int16(4), 128)), vec_mul(vec_add(vec_add(vec_mul(cast_uint8vec_to_int16vec(ramp(input, (((x*128) + t51) + 1), 1, 128)), broadcast(cast_int32_to_int16(2), 128)), vec_mul(cast_uint8vec_to_int16vec(ramp(input, (((x*128) + t51) + 2), 1, 128)), broadcast(cast_int32_to_int16(3), 128))), cast_uint8vec_to_int16vec(ramp(input, (((x*128) + t51) + 3), 1, 128))), broadcast(cast_int32_to_int16(5), 128))))), cast_uint8vec_to_int16vec(ramp(input, (((x*128) + t51) + 4), 1, 128)));
    Vector synthesized_expr = synth(input, x, t51);

    assert vec_eq(original_expr, synthesized_expr): "Original and synthesized expressions do not match.";
}