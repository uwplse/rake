generator int index_gen ([int N], int[N] exprs) {
    int i = ??(3);
    int c = ??(2);

    assert i < N;
    assert c > 0;

    int expr = exprs[i];
    return {| expr | expr + c | expr - c |};
}

generator int int_expr_gen ([int N], int[N] terms) {
    assert N <= 32 : "Too many terms given to the generator";

    int[32] exprs = terms;

    int steps = ??(2);

    int idx = N;

    repeat (steps) {
        int idx_e1 = ??(4);
        int idx_e2 = ??(4);

        assert idx_e1 < idx;
        assert idx_e2 < idx;
        assert idx_e1 < idx_e2;

        int e1 = exprs[idx_e1];
        int e2 = exprs[idx_e2];
        int c = ??(3);

        exprs[idx] = {| e1 +- c | e1 + e2 | e1 * e2 |};

        idx++;
    }

    minimize(steps);

    return exprs[idx-1];
}

generator Vector convolve_x_gen ([int N], Vector v, int[N] scalars) {
    int kwidth = ??(3);
    assert kwidth > 1;

    int[kwidth] kernel = {};
    repeat(i : kwidth) {
        if (??(1))
            kernel[i] = {| 0 | 1 |};
        else
            kernel[i] = int_expr_gen(scalars);
    }

    int z = 0;
    int o = 0;
    for (int i=0; i<kwidth && i<8; i++) {
        if (kernel[i] == 0)
            z += 1;
        else if (kernel[i] == 1)
            o += 1;
    }

    assert kwidth - z > 1;
    assert kwidth - z != 2 || o != 2;

    return convolve_x(v, kwidth, kernel);
}