#lang rosette

(require rosette/lib/synthax)

(require "lib/cpp.rkt")
(require "lib/halide.rkt")
(require "lib/hexagon.rkt")

;; Model buffers as uninterpreted functions
(define-symbolic input (~> integer? (bitvector 8)))

;; Declare scope vars
(define-symbolic t53 integer?)

;; Define original expression
(define original-expr
  (vec-add
   (vec-add
    (vec-mul
     (castvec (ramp input t53 1) 'uint8 'int32)
     (broadcast (bv 2 32)))
    (vec-mul
     (castvec (ramp input (+ t53 1) 1) 'uint8 'int32)
     (broadcast (bv 3 32))))
   (castvec (ramp input (+ t53 2) 1) 'uint8 'int32)))

;; Define synthesized expression
(define-synthax (int_expr depth)
 #:base (choose (bv 0 8) (bv 1 8) (cast (int_expr 3) 'int16 'int8))
 #:else (choose
         (cast (bv 2 32) 'int32 'int16) (cast (bv 3 32) 'int32 'int16)
         ((choose bvadd bvmul) (int_expr (- depth 1)) (int_expr (- depth 1)))))

(define c
  (choose 1 2 3))
(define opt
  (choose t53 (+ t53 1) (+ t53 2)))
(define index_gen
  (choose opt (+ opt c) (- opt c)))

(define _buf (choose input))
(define _base index_gen)
(define _stride (choose 0 1 2 3))

(define kernel
  (vector-immutable
   (choose
    (bv 0 8) (bv 1 8) (cast (int_expr 1) 'int16 'int8))
   (choose
    (bv 0 8) (bv 1 8) (cast (int_expr 1) 'int16 'int8))
   (choose
    (bv 0 8) (bv 1 8) (cast (int_expr 1) 'int16 'int8))))

(define synthesized-expr
  (castvec (convolve-x (ramp _buf _base _stride kernel)) 'int16 'int32))

(define (bounded-eq? oe se)
  (for ([i 2])
    (assert (eq? (oe i) (se i)))))

(define sol (synthesize #:forall (list input t53)
                        #:guarantee (bounded-eq? original-expr synthesized-expr)))

(print-forms sol)
;(evaluate kernel sol)