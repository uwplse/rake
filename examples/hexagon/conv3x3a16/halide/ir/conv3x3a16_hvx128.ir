+ ./tmp/conv3x3a16_generator -o tmp -e o,h,assembly,bitcode -g conv3x3a16 -f conv3x3a16_hvx128 target=hexagon-32-noos-no_bounds_query-no_asserts-hvx_128
assert((reinterpret(uint64, output.buffer) != (uint64)0), halide_error_buffer_argument_is_null("output"))
assert((reinterpret(uint64, mask.buffer) != (uint64)0), halide_error_buffer_argument_is_null("mask"))
assert((reinterpret(uint64, input.buffer) != (uint64)0), halide_error_buffer_argument_is_null("input"))
let input = _halide_buffer_get_host(input.buffer)
let input.min.0 = _halide_buffer_get_min(input.buffer, 0)
let input.stride.0 = _halide_buffer_get_stride(input.buffer, 0)
let input.min.1 = _halide_buffer_get_min(input.buffer, 1)
let input.stride.1 = _halide_buffer_get_stride(input.buffer, 1)
let mask = _halide_buffer_get_host(mask.buffer)
let mask.min.0 = _halide_buffer_get_min(mask.buffer, 0)
let mask.stride.0 = _halide_buffer_get_stride(mask.buffer, 0)
let mask.min.1 = _halide_buffer_get_min(mask.buffer, 1)
let mask.stride.1 = _halide_buffer_get_stride(mask.buffer, 1)
let output = _halide_buffer_get_host(output.buffer)
let output.min.0 = _halide_buffer_get_min(output.buffer, 0)
let output.extent.0 = _halide_buffer_get_extent(output.buffer, 0)
let output.stride.0 = _halide_buffer_get_stride(output.buffer, 0)
let output.min.1 = _halide_buffer_get_min(output.buffer, 1)
let output.extent.1 = _halide_buffer_get_extent(output.buffer, 1)
let output.stride.1 = _halide_buffer_get_stride(output.buffer, 1)
assert((input.stride.0 == 1), 0)
assert((input.min.0 == 0), 0)
assert(((input.stride.1 % 128) == 0), 0)
assert((input.min.1 == 0), 0)
assert((mask.stride.0 == 1), 0)
assert((output.stride.0 == 1), 0)
assert((output.min.0 == 0), 0)
assert(((output.stride.1 % 128) == 0), 0)
assert((output.min.1 == 0), 0)
let output.s0.y.yo.loop_extent.s = ((output.extent.1 + -1)/(output.extent.1/2))
produce output {
  let t59 = (output.extent.1 - (output.extent.1/2))
  for<Hexagon> (output.s0.__outermost, 0, 1) {
    let t73.s = (2 - (mask.min.1*mask.stride.1))
    let t74.s = (1 - (mask.min.1*mask.stride.1))
    let t77.s = (0 - (mask.min.1*mask.stride.1))
    parallel (output.s0.y.yo, 0, (output.s0.y.yo.loop_extent.s + 1)) {
      let output.s0.y.y.base = min(((output.extent.1/2)*output.s0.y.yo), t59)
      for (output.s0.y.y.y, 0, ((output.extent.1 + 6)/8)) {
        for (output.s0.x.x, 0, ((output.extent.0 + 127)/128)) {
          output[ramp(((output.s0.x.x*128) + (((output.s0.y.y.y*4) + output.s0.y.y.base)*output.stride.1)), 1, 128) aligned(128, 0)] = (let t109 = ((output.s0.x.x*128) + (((output.s0.y.y.y*4) + output.s0.y.y.base)*input.stride.1)) in halide.hexagon.trunc_satub_shr.vh.uh(halide.hexagon.acc_add_2mpy.vh.vub.vub.b.b(halide.hexagon.add_mpy.vh.vub.b(halide.hexagon.acc_add_2mpy.vh.vub.vub.b.b(halide.hexagon.acc_add_2mpy.vh.vub.vub.b.b(halide.hexagon.add_2mpy.vub.vub.b.b(input[ramp(t109, 1, 128) aligned(128, 0)], input[ramp((input.stride.1 + t109), 1, 128) aligned(128, 0)], mask[((((1 - mask.min.1)*mask.stride.1) - mask.min.0) + 1)], mask[((((2 - mask.min.1)*mask.stride.1) - mask.min.0) + 1)]), input[ramp(((input.stride.1 + t109) + -1), 1, 128) aligned(128, 127)], input[ramp((t109 - input.stride.1), 1, 128) aligned(128, 0)], mask[(((2 - mask.min.1)*mask.stride.1) - mask.min.0)], mask[(t74.s - mask.min.0)]), input[ramp((t109 + -1), 1, 128) aligned(128, 127)], input[ramp(((t109 - input.stride.1) + -1), 1, 128) aligned(128, 127)], mask[(((1 - mask.min.1)*mask.stride.1) - mask.min.0)], mask[(t77.s - mask.min.0)]), input[ramp((t109 + 1), 1, 128) aligned(128, 1)], mask[((((1 - mask.min.1)*mask.stride.1) - mask.min.0) + 2)]), input[ramp(((t109 - input.stride.1) + 1), 1, 128) aligned(128, 1)], input[ramp(((input.stride.1 + t109) + 1), 1, 128) aligned(128, 1)], mask[(t73.s - mask.min.0)], mask[((((2 - mask.min.1)*mask.stride.1) - mask.min.0) + 2)]), (int16)4))
          output[ramp(((output.s0.x.x*128) + ((((output.s0.y.y.y*4) + output.s0.y.y.base) + 1)*output.stride.1)), 1, 128) aligned(128, 0)] = (let t112 = ((output.s0.x.x*128) + ((((output.s0.y.y.y*4) + output.s0.y.y.base) + 1)*input.stride.1)) in halide.hexagon.trunc_satub_shr.vh.uh(halide.hexagon.acc_add_2mpy.vh.vub.vub.b.b(halide.hexagon.add_mpy.vh.vub.b(halide.hexagon.acc_add_2mpy.vh.vub.vub.b.b(halide.hexagon.acc_add_2mpy.vh.vub.vub.b.b(halide.hexagon.add_2mpy.vub.vub.b.b(input[ramp(t112, 1, 128) aligned(128, 0)], input[ramp((input.stride.1 + t112), 1, 128) aligned(128, 0)], mask[((((1 - mask.min.1)*mask.stride.1) - mask.min.0) + 1)], mask[((((2 - mask.min.1)*mask.stride.1) - mask.min.0) + 1)]), input[ramp(((input.stride.1 + t112) + -1), 1, 128) aligned(128, 127)], input[ramp((t112 - input.stride.1), 1, 128) aligned(128, 0)], mask[(((2 - mask.min.1)*mask.stride.1) - mask.min.0)], mask[(t74.s - mask.min.0)]), input[ramp((t112 + -1), 1, 128) aligned(128, 127)], input[ramp(((t112 - input.stride.1) + -1), 1, 128) aligned(128, 127)], mask[(((1 - mask.min.1)*mask.stride.1) - mask.min.0)], mask[(t77.s - mask.min.0)]), input[ramp((t112 + 1), 1, 128) aligned(128, 1)], mask[((((1 - mask.min.1)*mask.stride.1) - mask.min.0) + 2)]), input[ramp(((t112 - input.stride.1) + 1), 1, 128) aligned(128, 1)], input[ramp(((input.stride.1 + t112) + 1), 1, 128) aligned(128, 1)], mask[(t73.s - mask.min.0)], mask[((((2 - mask.min.1)*mask.stride.1) - mask.min.0) + 2)]), (int16)4))
          output[ramp(((output.s0.x.x*128) + ((((output.s0.y.y.y*4) + output.s0.y.y.base) + 2)*output.stride.1)), 1, 128) aligned(128, 0)] = (let t115 = ((output.s0.x.x*128) + ((((output.s0.y.y.y*4) + output.s0.y.y.base) + 2)*input.stride.1)) in halide.hexagon.trunc_satub_shr.vh.uh(halide.hexagon.acc_add_2mpy.vh.vub.vub.b.b(halide.hexagon.add_mpy.vh.vub.b(halide.hexagon.acc_add_2mpy.vh.vub.vub.b.b(halide.hexagon.acc_add_2mpy.vh.vub.vub.b.b(halide.hexagon.add_2mpy.vub.vub.b.b(input[ramp(t115, 1, 128) aligned(128, 0)], input[ramp((input.stride.1 + t115), 1, 128) aligned(128, 0)], mask[((((1 - mask.min.1)*mask.stride.1) - mask.min.0) + 1)], mask[((((2 - mask.min.1)*mask.stride.1) - mask.min.0) + 1)]), input[ramp(((input.stride.1 + t115) + -1), 1, 128) aligned(128, 127)], input[ramp((t115 - input.stride.1), 1, 128) aligned(128, 0)], mask[(((2 - mask.min.1)*mask.stride.1) - mask.min.0)], mask[(t74.s - mask.min.0)]), input[ramp((t115 + -1), 1, 128) aligned(128, 127)], input[ramp(((t115 - input.stride.1) + -1), 1, 128) aligned(128, 127)], mask[(((1 - mask.min.1)*mask.stride.1) - mask.min.0)], mask[(t77.s - mask.min.0)]), input[ramp((t115 + 1), 1, 128) aligned(128, 1)], mask[((((1 - mask.min.1)*mask.stride.1) - mask.min.0) + 2)]), input[ramp(((t115 - input.stride.1) + 1), 1, 128) aligned(128, 1)], input[ramp(((input.stride.1 + t115) + 1), 1, 128) aligned(128, 1)], mask[(t73.s - mask.min.0)], mask[((((2 - mask.min.1)*mask.stride.1) - mask.min.0) + 2)]), (int16)4))
          output[ramp(((output.s0.x.x*128) + ((((output.s0.y.y.y*4) + output.s0.y.y.base) + 3)*output.stride.1)), 1, 128) aligned(128, 0)] = (let t118 = ((output.s0.x.x*128) + ((((output.s0.y.y.y*4) + output.s0.y.y.base) + 3)*input.stride.1)) in halide.hexagon.trunc_satub_shr.vh.uh(halide.hexagon.acc_add_2mpy.vh.vub.vub.b.b(halide.hexagon.add_mpy.vh.vub.b(halide.hexagon.acc_add_2mpy.vh.vub.vub.b.b(halide.hexagon.acc_add_2mpy.vh.vub.vub.b.b(halide.hexagon.add_2mpy.vub.vub.b.b(input[ramp(t118, 1, 128) aligned(128, 0)], input[ramp((input.stride.1 + t118), 1, 128) aligned(128, 0)], mask[((((1 - mask.min.1)*mask.stride.1) - mask.min.0) + 1)], mask[((((2 - mask.min.1)*mask.stride.1) - mask.min.0) + 1)]), input[ramp(((input.stride.1 + t118) + -1), 1, 128) aligned(128, 127)], input[ramp((t118 - input.stride.1), 1, 128) aligned(128, 0)], mask[(((2 - mask.min.1)*mask.stride.1) - mask.min.0)], mask[(t74.s - mask.min.0)]), input[ramp((t118 + -1), 1, 128) aligned(128, 127)], input[ramp(((t118 - input.stride.1) + -1), 1, 128) aligned(128, 127)], mask[(((1 - mask.min.1)*mask.stride.1) - mask.min.0)], mask[(t77.s - mask.min.0)]), input[ramp((t118 + 1), 1, 128) aligned(128, 1)], mask[((((1 - mask.min.1)*mask.stride.1) - mask.min.0) + 2)]), input[ramp(((t118 - input.stride.1) + 1), 1, 128) aligned(128, 1)], input[ramp(((input.stride.1 + t118) + 1), 1, 128) aligned(128, 1)], mask[(t73.s - mask.min.0)], mask[((((2 - mask.min.1)*mask.stride.1) - mask.min.0) + 2)]), (int16)4))
        }
      }
    }
  }
}

