let scalar_indices = _halide_hexagon_buffer_get_host(scalar_indices.buffer)
assert(((reinterpret(uint64, scalar_indices) % (uint64)128) == (uint64)0), halide_error_unaligned_host_ptr("scalar_indices", 128))
let output = _halide_hexagon_buffer_get_host(output.buffer)
assert(((reinterpret(uint64, output) % (uint64)128) == (uint64)0), halide_error_unaligned_host_ptr("output", 128))
let input = _halide_hexagon_buffer_get_host(input.buffer)
assert(((reinterpret(uint64, input) % (uint64)128) == (uint64)0), halide_error_unaligned_host_ptr("input", 128))
let t249 = scalar_indices[14]
let t248 = scalar_indices[13]
let t247 = scalar_indices[12]
let t246 = scalar_indices[11]
let t239 = scalar_indices[10]
let t236 = scalar_indices[9]
let t233 = scalar_indices[8]
let t232 = scalar_indices[7]
let t223 = scalar_indices[6]
let t220 = scalar_indices[5]
let t219 = scalar_indices[4]
let output.stride.1 = scalar_indices[3]
let output.min.1 = scalar_indices[2]
let input.stride.1 = scalar_indices[1]
let input.extent.1 = scalar_indices[0]
parallel (output.s0.y.y.yo, 0, t219) {
  let output.s0.y.y.y.base = min((output.s0.y.y.yo*128), t220)
  let t289 = min((output.s0.y.y.yo*128), t220)
  let t272.s = (t249 - max(t223, 1))
  for (output.s0.y.y.y, 0, 128) {
    if (((max(min(((((output.s0.y.y.y + output.s0.y.y.y.base)*4) + output.min.1) + 13), input.extent.1), 1) <= input.extent.1) && t221)) {
      let t146 = ((output.s0.y.y.y*4) + ((t289*4) + output.min.1))
      prefetch(input, (((max(min(((((output.s0.y.y.y + output.s0.y.y.y.base)*4) + output.min.1) + 8), input.extent.1), 1)*input.stride.1) + (max(t223, 1) - input.stride.1)) + -1), (t272.s + 1), 1, ((max(min((t146 + 13), input.extent.1), 1) - max(min((t146 + 8), input.extent.1), 1)) + 1), input.stride.1)
    }
    allocate bounded_input[uint8 * (t246*128) * 6]
    produce bounded_input {
      let bounded_input.s0.y.prologue.s = min(max((((output.s0.y.y.y + output.s0.y.y.y.base)*4) + output.min.1), 1), ((((output.s0.y.y.y + output.s0.y.y.y.base)*4) + output.min.1) + 6))
      let bounded_input.s0.y.epilogue = max(min(((((output.s0.y.y.y + output.s0.y.y.y.base)*4) + output.min.1) + 5), input.extent.1), (min(max((((output.s0.y.y.y + output.s0.y.y.y.base)*4) + output.min.1), 1), ((((output.s0.y.y.y + output.s0.y.y.y.base)*4) + output.min.1) + 6)) + -1))
      let t454 = ((output.s0.y.y.y*4) + ((t289*4) + output.min.1))
      let t291 = ((min(max(t454, 1), (t454 + 6)) - ((t289*4) + output.min.1)) - (output.s0.y.y.y*4))
      let t293 = ((1 - output.min.1) - ((output.s0.y.y.y + output.s0.y.y.y.base)*4))
      for (bounded_input.s0.y, ((((output.s0.y.y.y + output.s0.y.y.y.base)*4) + output.min.1) + -1), t291) {
        let t297.s = min((input.extent.1 + -1), bounded_input.s0.y)
        for (bounded_input.s0.x.x, 0, t246) {
          bounded_input[ramp(((((bounded_input.s0.y + t293)*t246) + bounded_input.s0.x.x)*128), 1, 128) aligned(128, 0)] = (let t363 = (max(min(((bounded_input.s0.x.x*128) + t232), t233), 0) + (max(t297.s, 0)*input.stride.1)) in dynamic_shuffle(input[ramp(t363, 1, 128)], halide.hexagon.pack.vh(halide.hexagon.pack.vw(((max(min(ramp(((bounded_input.s0.x.x*128) + t232), 1, 128), x128(t233)), x128(0)) + x128((max(t297.s, 0)*input.stride.1))) - x128(t363)))), 0, 127))
        }
      }
      let t301 = ((1 - output.min.1) - ((output.s0.y.y.y + output.s0.y.y.y.base)*4))
      let t300.s = (min((t454 + 5), input.extent.1) - min(max(t454, 1), (t454 + 6)))
      for (bounded_input.s0.y, (bounded_input.s0.y.prologue.s + -1), (max(t300.s, -1) + 1)) {
        for (bounded_input.s0.x.x, 0, t248) {
          bounded_input[ramp(((((bounded_input.s0.y + t301)*t246) + bounded_input.s0.x.x)*128), 1, 128) aligned(128, 0)] = (let t365 = (max(min(((bounded_input.s0.x.x*128) + t232), t233), 0) + (bounded_input.s0.y*input.stride.1)) in dynamic_shuffle(input[ramp(t365, 1, 128)], halide.hexagon.pack.vh(halide.hexagon.pack.vw(((max(min(ramp(((bounded_input.s0.x.x*128) + t232), 1, 128), x128(t233)), x128(0)) + x128((bounded_input.s0.y*input.stride.1))) - x128(t365)))), 0, 127))
        }
        for (bounded_input.s0.x.x, t248, (t236 - t248)) {
          bounded_input[ramp(((((bounded_input.s0.y + t301)*t246) + bounded_input.s0.x.x)*128), 1, 128) aligned(128, 0)] = input[ramp(((bounded_input.s0.x.x*128) + ((bounded_input.s0.y*input.stride.1) + t232)), 1, 128)]
        }
        for (bounded_input.s0.x.x, t236, (t246 - t236)) {
          bounded_input[ramp(((((bounded_input.s0.y + t301)*t246) + bounded_input.s0.x.x)*128), 1, 128) aligned(128, 0)] = (let t367 = (max(min(((bounded_input.s0.x.x*128) + t232), t233), 0) + (bounded_input.s0.y*input.stride.1)) in dynamic_shuffle(input[ramp(t367, 1, 128)], halide.hexagon.pack.vh(halide.hexagon.pack.vw(((max(min(ramp(((bounded_input.s0.x.x*128) + t232), 1, 128), x128(t233)), x128(0)) + x128((bounded_input.s0.y*input.stride.1))) - x128(t367)))), 0, 127))
        }
      }
      let t313.s = (t454 - max(min((t454 + 5), input.extent.1), (min(max(t454, 1), (t454 + 6)) + -1)))
      let t315 = ((1 - output.min.1) - ((output.s0.y.y.y + output.s0.y.y.y.base)*4))
      for (bounded_input.s0.y, bounded_input.s0.y.epilogue, (t313.s + 5)) {
        let t317.s = min((input.extent.1 + -1), bounded_input.s0.y)
        for (bounded_input.s0.x.x, 0, t246) {
          bounded_input[ramp(((((bounded_input.s0.y + t315)*t246) + bounded_input.s0.x.x)*128), 1, 128) aligned(128, 0)] = (let t369 = (max(min(((bounded_input.s0.x.x*128) + t232), t233), 0) + (max(t317.s, 0)*input.stride.1)) in dynamic_shuffle(input[ramp(t369, 1, 128)], halide.hexagon.pack.vh(halide.hexagon.pack.vw(((max(min(ramp(((bounded_input.s0.x.x*128) + t232), 1, 128), x128(t233)), x128(0)) + x128((max(t317.s, 0)*input.stride.1))) - x128(t369)))), 0, 127))
        }
      }
    }
    consume bounded_input {
      if ((0 < t247)) {
        allocate c7[uint8 * 256] in Stack
        c7[ramp(0, 1, 128)] = bounded_input[ramp((t246*640), 1, 128) aligned(640, 0)]
        allocate c6[uint8 * 256] in Stack
        c6[ramp(0, 1, 128)] = bounded_input[ramp((t246*512), 1, 128) aligned(512, 0)]
        allocate c5[uint8 * 256] in Stack
        c5[ramp(0, 1, 128)] = bounded_input[ramp((t246*384), 1, 128) aligned(384, 0)]
        allocate c4[uint8 * 256] in Stack
        c4[ramp(0, 1, 128)] = bounded_input[ramp((t246*128), 1, 128) aligned(128, 0)]
        allocate c3[uint8 * 256] in Stack
        c3[ramp(0, 1, 128)] = bounded_input[ramp((t246*256), 1, 128) aligned(256, 0)]
        allocate c2[uint8 * 256] in Stack
        c2[ramp(0, 1, 128)] = bounded_input[ramp(0, 1, 128)]
        for (output.s0.x.x, 0, t247) {
          c2[ramp(128, 1, 128)] = bounded_input[ramp(((output.s0.x.x*128) + 128), 1, 128) aligned(128, 0)]
          c3[ramp(128, 1, 128)] = bounded_input[ramp(((((t246*2) + output.s0.x.x)*128) + 128), 1, 128) aligned(128, 0)]
          c4[ramp(128, 1, 128)] = bounded_input[ramp((((output.s0.x.x + t246)*128) + 128), 1, 128) aligned(128, 0)]
          c5[ramp(128, 1, 128)] = bounded_input[ramp(((((t246*3) + output.s0.x.x)*128) + 128), 1, 128) aligned(128, 0)]
          c6[ramp(128, 1, 128)] = bounded_input[ramp(((((t246*4) + output.s0.x.x)*128) + 128), 1, 128) aligned(128, 0)]
          c7[ramp(128, 1, 128)] = bounded_input[ramp(((((t246*5) + output.s0.x.x)*128) + 128), 1, 128) aligned(128, 0)]
          output[ramp(((output.s0.x.x*128) + (((((output.s0.y.y.y + output.s0.y.y.y.base)*4) + output.min.1)*output.stride.1) + t239)), 1, 128)] = (let t417 = c2[ramp(0, 1, 128)] in (let t418.s = c2[ramp(128, 1, 128)] in (let t420.s = concat_vectors(t417, t418.s) in (let t421 = c3[ramp(0, 1, 128)] in (let t422.s = c3[ramp(128, 1, 128)] in (let t424.s = concat_vectors(t421, t422.s) in (let t425 = c4[ramp(0, 1, 128)] in halide.hexagon.trunc.vh(min((absd((halide.hexagon.add_2mpy.vub.vub.b.b(slice_vectors(concat_vectors(t417, t418.s), 1, 1, 128), t417, (int8)2, (int8)1) + halide.hexagon.zxt.vub(slice_vectors(t420.s, 2, 1, 128))), (halide.hexagon.add_2mpy.vub.vub.b.b(slice_vectors(concat_vectors(t421, t422.s), 1, 1, 128), t421, (int8)2, (int8)1) + halide.hexagon.zxt.vub(slice_vectors(t424.s, 2, 1, 128)))) + absd((halide.hexagon.add_2mpy.vub.vub.b.b(t425, t417, (int8)2, (int8)1) + halide.hexagon.zxt.vub(t421)), (halide.hexagon.add_2mpy.vub.vub.b.b(slice_vectors(concat_vectors(t425, c4[ramp(128, 1, 128)]), 2, 1, 128), slice_vectors(t420.s, 2, 1, 128), (int8)2, (int8)1) + halide.hexagon.zxt.vub(slice_vectors(t424.s, 2, 1, 128))))), x128((uint16)255))))))))))
          output[ramp(((output.s0.x.x*128) + ((((((output.s0.y.y.y + output.s0.y.y.y.base)*4) + output.min.1) + 1)*output.stride.1) + t239)), 1, 128)] = (let t426 = c4[ramp(0, 1, 128)] in (let t427.s = c4[ramp(128, 1, 128)] in (let t429.s = concat_vectors(t426, t427.s) in (let t430 = c5[ramp(0, 1, 128)] in (let t431.s = c5[ramp(128, 1, 128)] in (let t433.s = concat_vectors(t430, t431.s) in (let t434 = c3[ramp(0, 1, 128)] in halide.hexagon.trunc.vh(min((absd((halide.hexagon.add_2mpy.vub.vub.b.b(slice_vectors(concat_vectors(t426, t427.s), 1, 1, 128), t426, (int8)2, (int8)1) + halide.hexagon.zxt.vub(slice_vectors(t429.s, 2, 1, 128))), (halide.hexagon.add_2mpy.vub.vub.b.b(slice_vectors(concat_vectors(t430, t431.s), 1, 1, 128), t430, (int8)2, (int8)1) + halide.hexagon.zxt.vub(slice_vectors(t433.s, 2, 1, 128)))) + absd((halide.hexagon.add_2mpy.vub.vub.b.b(t434, t426, (int8)2, (int8)1) + halide.hexagon.zxt.vub(t430)), (halide.hexagon.add_2mpy.vub.vub.b.b(slice_vectors(concat_vectors(t434, c3[ramp(128, 1, 128)]), 2, 1, 128), slice_vectors(t429.s, 2, 1, 128), (int8)2, (int8)1) + halide.hexagon.zxt.vub(slice_vectors(t433.s, 2, 1, 128))))), x128((uint16)255))))))))))
          output[ramp(((output.s0.x.x*128) + ((((((output.s0.y.y.y + output.s0.y.y.y.base)*4) + output.min.1) + 2)*output.stride.1) + t239)), 1, 128)] = (let t435 = c3[ramp(0, 1, 128)] in (let t436.s = c3[ramp(128, 1, 128)] in (let t438.s = concat_vectors(t435, t436.s) in (let t439 = c6[ramp(0, 1, 128)] in (let t440.s = c6[ramp(128, 1, 128)] in (let t442.s = concat_vectors(t439, t440.s) in (let t443 = c5[ramp(0, 1, 128)] in halide.hexagon.trunc.vh(min((absd((halide.hexagon.add_2mpy.vub.vub.b.b(slice_vectors(concat_vectors(t435, t436.s), 1, 1, 128), t435, (int8)2, (int8)1) + halide.hexagon.zxt.vub(slice_vectors(t438.s, 2, 1, 128))), (halide.hexagon.add_2mpy.vub.vub.b.b(slice_vectors(concat_vectors(t439, t440.s), 1, 1, 128), t439, (int8)2, (int8)1) + halide.hexagon.zxt.vub(slice_vectors(t442.s, 2, 1, 128)))) + absd((halide.hexagon.add_2mpy.vub.vub.b.b(t443, t435, (int8)2, (int8)1) + halide.hexagon.zxt.vub(t439)), (halide.hexagon.add_2mpy.vub.vub.b.b(slice_vectors(concat_vectors(t443, c5[ramp(128, 1, 128)]), 2, 1, 128), slice_vectors(t438.s, 2, 1, 128), (int8)2, (int8)1) + halide.hexagon.zxt.vub(slice_vectors(t442.s, 2, 1, 128))))), x128((uint16)255))))))))))
          output[ramp(((output.s0.x.x*128) + ((((((output.s0.y.y.y + output.s0.y.y.y.base)*4) + output.min.1) + 3)*output.stride.1) + t239)), 1, 128)] = (let t444 = c5[ramp(0, 1, 128)] in (let t445.s = c5[ramp(128, 1, 128)] in (let t447.s = concat_vectors(t444, t445.s) in (let t448 = c7[ramp(0, 1, 128)] in (let t449.s = c7[ramp(128, 1, 128)] in (let t451.s = concat_vectors(t448, t449.s) in (let t452 = c6[ramp(0, 1, 128)] in halide.hexagon.trunc.vh(min((absd((halide.hexagon.add_2mpy.vub.vub.b.b(slice_vectors(concat_vectors(t444, t445.s), 1, 1, 128), t444, (int8)2, (int8)1) + halide.hexagon.zxt.vub(slice_vectors(t447.s, 2, 1, 128))), (halide.hexagon.add_2mpy.vub.vub.b.b(slice_vectors(concat_vectors(t448, t449.s), 1, 1, 128), t448, (int8)2, (int8)1) + halide.hexagon.zxt.vub(slice_vectors(t451.s, 2, 1, 128)))) + absd((halide.hexagon.add_2mpy.vub.vub.b.b(t452, t444, (int8)2, (int8)1) + halide.hexagon.zxt.vub(t448)), (halide.hexagon.add_2mpy.vub.vub.b.b(slice_vectors(concat_vectors(t452, c6[ramp(128, 1, 128)]), 2, 1, 128), slice_vectors(t447.s, 2, 1, 128), (int8)2, (int8)1) + halide.hexagon.zxt.vub(slice_vectors(t451.s, 2, 1, 128))))), x128((uint16)255))))))))))
          c2[ramp(0, 1, 128)] = c2[ramp(128, 1, 128)]
          c3[ramp(0, 1, 128)] = c3[ramp(128, 1, 128)]
          c4[ramp(0, 1, 128)] = c4[ramp(128, 1, 128)]
          c5[ramp(0, 1, 128)] = c5[ramp(128, 1, 128)]
          c6[ramp(0, 1, 128)] = c6[ramp(128, 1, 128)]
          c7[ramp(0, 1, 128)] = c7[ramp(128, 1, 128)]
        }
      }
    }
    free bounded_input
  }
}