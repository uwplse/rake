let scalar_indices = _halide_hexagon_buffer_get_host(scalar_indices.buffer)
assert(((reinterpret(uint64, scalar_indices) % (uint64)128) == (uint64)0), halide_error_unaligned_host_ptr("scalar_indices", 128))
let output = _halide_hexagon_buffer_get_host(output.buffer)
assert(((reinterpret(uint64, output) % (uint64)128) == (uint64)0), halide_error_unaligned_host_ptr("output", 128))
let mat_b = _halide_hexagon_buffer_get_host(mat_b.buffer)
assert(((reinterpret(uint64, mat_b) % (uint64)128) == (uint64)0), halide_error_unaligned_host_ptr("mat_b", 128))
let mat_a = _halide_hexagon_buffer_get_host(mat_a.buffer)
assert(((reinterpret(uint64, mat_a) % (uint64)128) == (uint64)0), halide_error_unaligned_host_ptr("mat_a", 128))
let t21 = scalar_indices[6]
let t19 = scalar_indices[5]
let t17 = scalar_indices[4]
let output.stride.1 = scalar_indices[3]
let mat_b.stride.1 = scalar_indices[2]
let mat_a.stride.1 = scalar_indices[1]
let mat_a.extent.1 = scalar_indices[0]
parallel (output.s0.x.xo, 0, t17) {
  allocate mat_b_swizzled[uint8 * 128 * t21 * 4]
  produce mat_b_swizzled {
    for (mat_b_swizzled.s0.y, 0, t21) {
      mat_b_swizzled[ramp((mat_b_swizzled.s0.y*512), 1, 512) aligned(512, 0)] = interleave_vectors(mat_b[ramp((((mat_b.stride.1*mat_b_swizzled.s0.y) + (output.s0.x.xo*32))*4), 1, 128) aligned(4, 0)], mat_b[ramp(((((mat_b_swizzled.s0.y*4) + 1)*mat_b.stride.1) + (output.s0.x.xo*128)), 1, 128)], mat_b[ramp(((((mat_b_swizzled.s0.y*4) + 2)*mat_b.stride.1) + (output.s0.x.xo*128)), 1, 128) aligned(2, 0)], mat_b[ramp(((((mat_b_swizzled.s0.y*4) + 3)*mat_b.stride.1) + (output.s0.x.xo*128)), 1, 128)])
    }
  }
  consume mat_b_swizzled {
    for (output.s0.y.yo, 0, t19) {
      if ((((output.s0.y.yo*4) + 8) <= mat_a.extent.1)) {
        prefetch(mat_a, (((output.s0.y.yo + 1)*mat_a.stride.1)*4), (t21*4), 1, 4, mat_a.stride.1)
      }
      allocate multiplied[uint32 * 128 * 4]
      produce multiplied {
        multiplied[ramp(0, 1, 128)] = x128((uint32)0)
        multiplied[ramp(128, 1, 128)] = x128((uint32)0)
        multiplied[ramp(256, 1, 128)] = x128((uint32)0)
        multiplied[ramp(384, 1, 128)] = x128((uint32)0)
        for (multiplied.s1.k$x, 0, t21) {
          multiplied[ramp(0, 1, 128)] = ((((multiplied[ramp(0, 1, 128)] + uint32x128((uint16x128(mat_b_swizzled[ramp((multiplied.s1.k$x*512), 4, 128) aligned(512, 0)])*x128(uint16(mat_a[(((mat_a.stride.1*output.s0.y.yo) + multiplied.s1.k$x)*4)]))))) + uint32x128((uint16x128(mat_b_swizzled[ramp(((multiplied.s1.k$x*512) + 1), 4, 128) aligned(512, 1)])*x128(uint16(mat_a[((((mat_a.stride.1*output.s0.y.yo) + multiplied.s1.k$x)*4) + 1)]))))) + uint32x128((uint16x128(mat_b_swizzled[ramp(((multiplied.s1.k$x*512) + 2), 4, 128) aligned(512, 2)])*x128(uint16(mat_a[((((mat_a.stride.1*output.s0.y.yo) + multiplied.s1.k$x)*4) + 2)]))))) + uint32x128((uint16x128(mat_b_swizzled[ramp(((multiplied.s1.k$x*512) + 3), 4, 128) aligned(512, 3)])*x128(uint16(mat_a[((((mat_a.stride.1*output.s0.y.yo) + multiplied.s1.k$x)*4) + 3)])))))
          multiplied[ramp(128, 1, 128)] = (let t34 = ((multiplied.s1.k$x*4) + (((output.s0.y.yo*4) + 1)*mat_a.stride.1)) in ((((multiplied[ramp(128, 1, 128)] + uint32x128((uint16x128(mat_b_swizzled[ramp((multiplied.s1.k$x*512), 4, 128) aligned(512, 0)])*x128(uint16(mat_a[t34]))))) + uint32x128((uint16x128(mat_b_swizzled[ramp(((multiplied.s1.k$x*512) + 1), 4, 128) aligned(512, 1)])*x128(uint16(mat_a[(t34 + 1)]))))) + uint32x128((uint16x128(mat_b_swizzled[ramp(((multiplied.s1.k$x*512) + 2), 4, 128) aligned(512, 2)])*x128(uint16(mat_a[(t34 + 2)]))))) + uint32x128((uint16x128(mat_b_swizzled[ramp(((multiplied.s1.k$x*512) + 3), 4, 128) aligned(512, 3)])*x128(uint16(mat_a[(t34 + 3)]))))))
          multiplied[ramp(256, 1, 128)] = (let t35 = ((multiplied.s1.k$x*4) + (((output.s0.y.yo*4) + 2)*mat_a.stride.1)) in ((((multiplied[ramp(256, 1, 128)] + uint32x128((uint16x128(mat_b_swizzled[ramp((multiplied.s1.k$x*512), 4, 128) aligned(512, 0)])*x128(uint16(mat_a[t35]))))) + uint32x128((uint16x128(mat_b_swizzled[ramp(((multiplied.s1.k$x*512) + 1), 4, 128) aligned(512, 1)])*x128(uint16(mat_a[(t35 + 1)]))))) + uint32x128((uint16x128(mat_b_swizzled[ramp(((multiplied.s1.k$x*512) + 2), 4, 128) aligned(512, 2)])*x128(uint16(mat_a[(t35 + 2)]))))) + uint32x128((uint16x128(mat_b_swizzled[ramp(((multiplied.s1.k$x*512) + 3), 4, 128) aligned(512, 3)])*x128(uint16(mat_a[(t35 + 3)]))))))
          multiplied[ramp(384, 1, 128)] = (let t36 = ((multiplied.s1.k$x*4) + (((output.s0.y.yo*4) + 3)*mat_a.stride.1)) in ((((multiplied[ramp(384, 1, 128)] + uint32x128((uint16x128(mat_b_swizzled[ramp((multiplied.s1.k$x*512), 4, 128) aligned(512, 0)])*x128(uint16(mat_a[t36]))))) + uint32x128((uint16x128(mat_b_swizzled[ramp(((multiplied.s1.k$x*512) + 1), 4, 128) aligned(512, 1)])*x128(uint16(mat_a[(t36 + 1)]))))) + uint32x128((uint16x128(mat_b_swizzled[ramp(((multiplied.s1.k$x*512) + 2), 4, 128) aligned(512, 2)])*x128(uint16(mat_a[(t36 + 2)]))))) + uint32x128((uint16x128(mat_b_swizzled[ramp(((multiplied.s1.k$x*512) + 3), 4, 128) aligned(512, 3)])*x128(uint16(mat_a[(t36 + 3)]))))))
        }
      }
      consume multiplied {
        output[ramp((((output.s0.y.yo*output.stride.1) + (output.s0.x.xo*32))*4), 1, 128) aligned(16, 0)] = uint8x128(min(multiplied[ramp(0, 1, 128)], x128((uint32)255)))
        output[ramp(((((output.s0.y.yo*4) + 1)*output.stride.1) + (output.s0.x.xo*128)), 1, 128) aligned(4, 0)] = uint8x128(min(multiplied[ramp(128, 1, 128)], x128((uint32)255)))
        output[ramp(((((output.s0.y.yo*4) + 2)*output.stride.1) + (output.s0.x.xo*128)), 1, 128) aligned(8, 0)] = uint8x128(min(multiplied[ramp(256, 1, 128)], x128((uint32)255)))
        output[ramp(((((output.s0.y.yo*4) + 3)*output.stride.1) + (output.s0.x.xo*128)), 1, 128) aligned(4, 0)] = uint8x128(min(multiplied[ramp(384, 1, 128)], x128((uint32)255)))
        free multiplied
      }
    }
  }
  free mat_b_swizzled
}