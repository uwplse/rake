PS D:\Repos\rake\benchmarks\hexagon\performance\rake> Racket.exe .\expr_0.rkt                                                                                                                Lifting input expression to IR...
=================================

Expr so far: (#<load-data> . #<procedure:sat-model>)

Ran synthesizer for 0 seconds.
Ran synthesizer for 0 seconds.
Expr so far: (#(struct:cast #<load-data> int16) . (model
 [get-idx (fv integer?~>integer?)]))

Expr so far: (#(struct:broadcast #(struct:int16_t (bv #x0002 16))) . #<procedure:sat-model>)

Ran synthesizer for 0 seconds.
Ran synthesizer for 0 seconds.
Ran synthesizer for 0 seconds.
Expr so far: (#(struct:convolve #<load-data> #(struct:weight-matrix 1 (#(struct:int16_t (bv #x0002 16))) 0) #<procedure:nop> int16) . (model
 [get-idx (fv integer?~>integer?)]
 [x?$0 #t]))

Expr so far: (#<load-data> . #<procedure:sat-model>)

Ran synthesizer for 0 seconds.
Ran synthesizer for 0 seconds.
Expr so far: (#(struct:cast #<load-data> int16) . (model
 [get-idx (fv integer?~>integer?)]))

Expr so far: (#(struct:broadcast #(struct:int16_t (bv #x0002 16))) . #<procedure:sat-model>)

Ran synthesizer for 0 seconds.
Ran synthesizer for 0 seconds.
Ran synthesizer for 0 seconds.
Expr so far: (#(struct:convolve #<load-data> #(struct:weight-matrix 1 (#(struct:int16_t (bv #x0002 16))) 0) #<procedure:nop> int16) . (model
 [get-idx (fv integer?~>integer?)]
 [x?$2 #t]))

Expr so far: (#<load-data> . #<procedure:sat-model>)

Ran synthesizer for 0 seconds.
Ran synthesizer for 0 seconds.
Expr so far: (#(struct:cast #<load-data> int16) . (model
 [get-idx (fv integer?~>integer?)]))

Ran synthesizer for 1 seconds.
Expr so far: (#(struct:convolve #<load-data> #(struct:weight-matrix 2 (#(struct:int16_t (bv #x0002 16)) #(struct:int8_t (bv #x01 8))) 0) #<procedure:nop> int16) . (model
 [get-idx (fv integer?~>integer?)]
 [x?$4 #t]
 [xi?$5 #t]
 [xi?$6 #f]
 [x?$7 #f]))

Expr so far: (#<load-data> . #<procedure:sat-model>)

Ran synthesizer for 0 seconds.
Ran synthesizer for 0 seconds.
Expr so far: (#(struct:cast #<load-data> int16) . (model
 [get-idx (fv integer?~>integer?)]))

Ran synthesizer for 0 seconds.
Expr so far: (#(struct:convolve #<load-data> #(struct:weight-matrix 3 (#(struct:int16_t (bv #x0002 16)) #(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) 0) #<procedure:nop> int16) . (model
 [get-idx (fv integer?~>integer?)]
 [x?$10 #t]
 [xi?$11 #t]
 [xi?$12 #f]
 [x?$13 #f]))

Expr so far: (#<load-data> . #<procedure:sat-model>)

Ran synthesizer for 0 seconds.
Ran synthesizer for 0 seconds.
Expr so far: (#(struct:cast #<load-data> int16) . (model
 [get-idx (fv integer?~>integer?)]))

Ran synthesizer for 0 seconds.
Expr so far: (#(struct:convolve #<load-data> #(struct:weight-matrix 4 (#(struct:int16_t (bv #x0002 16)) #(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) 0) #<procedure:nop> int16) . (model
 [get-idx (fv integer?~>integer?)]
 [x?$16 #t]
 [xi?$17 #t]
 [xi?$18 #f]
 [x?$19 #f]))

Expr so far: (#(struct:broadcast #(struct:int16_t (bv #x0002 16))) . #<procedure:sat-model>)

Ran synthesizer for 1 seconds.
Expr so far: (#(struct:convolve #<load-data> #(struct:weight-matrix 4 (#(struct:int8_t (bv #x04 8)) #(struct:int8_t (bv #x02 8)) #(struct:int8_t (bv #x02 8)) #(struct:int8_t (bv #x02 8))) 0) #<procedure:nop> int16) . (model
 [get-idx (fv integer?~>integer?)]
 [x?$22 #f]
 [x?$23 #f]
 [xi?$24 #t]
 [xi?$25 #f]
 [x?$26 #t]))

Expr so far: (#<load-data> . #<procedure:sat-model>)

Ran synthesizer for 0 seconds.
Ran synthesizer for 0 seconds.
Expr so far: (#(struct:cast #<load-data> int16) . (model
 [get-idx (fv integer?~>integer?)]))

Ran synthesizer for 0 seconds.
Expr so far: (#(struct:convolve #<load-data> #(struct:weight-matrix 5 (#(struct:int8_t (bv #x04 8)) #(struct:int8_t (bv #x02 8)) #(struct:int8_t (bv #x02 8)) #(struct:int8_t (bv #x02 8)) #(struct:int8_t (bv #x01 8))) 0) #<procedure:nop> int16) . (model
 [get-idx (fv integer?~>integer?)]
 [x?$29 #t]
 [xi?$30 #t]
 [xi?$31 #f]
 [x?$32 #f]))

Expr so far: (#<load-data> . #<procedure:sat-model>)

Ran synthesizer for 0 seconds.
Ran synthesizer for 0 seconds.
Expr so far: (#(struct:cast #<load-data> int16) . (model
 [get-idx (fv integer?~>integer?)]))

Ran synthesizer for 1 seconds.
Expr so far: (#(struct:convolve #<load-data> #(struct:weight-matrix 6 (#(struct:int8_t (bv #x04 8)) #(struct:int8_t (bv #x02 8)) #(struct:int8_t (bv #x02 8)) #(struct:int8_t (bv #x02 8)) #(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) 0) #<procedure:nop> int16) . (model
 [get-idx (fv integer?~>integer?)]
 [x?$35 #t]
 [xi?$36 #t]
 [xi?$37 #f]
 [x?$38 #f]))

Ran synthesizer for 0 seconds.
Ran synthesizer for 0 seconds.
Expr so far: (#(struct:convolve #<load-data> #(struct:weight-matrix 7 (#(struct:int8_t (bv #x04 8)) #(struct:int8_t (bv #x02 8)) #(struct:int8_t (bv #x02 8)) #(struct:int8_t (bv #x02 8)) #(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0002 16))) 0) #<procedure:nop> int16) . (model
 [get-idx (fv integer?~>integer?)]
 [x?$45 #f]
 [xi?$46 #t]
 [xi?$47 #f]
 [x?$48 #f]))

Expr so far: (#<load-data> . #<procedure:sat-model>)

Ran synthesizer for 0 seconds.
Ran synthesizer for 0 seconds.
Expr so far: (#(struct:cast #<load-data> int16) . (model
 [get-idx (fv integer?~>integer?)]))

Ran synthesizer for 1 seconds.
Expr so far: (#(struct:convolve #<load-data> #(struct:weight-matrix 8 (#(struct:int8_t (bv #x04 8)) #(struct:int8_t (bv #x02 8)) #(struct:int8_t (bv #x02 8)) #(struct:int8_t (bv #x02 8)) #(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0002 16)) #(struct:int8_t (bv #x01 8))) 0) #<procedure:nop> int16) . (model
 [get-idx (fv integer?~>integer?)]
 [x?$51 #t]
 [xi?$52 #t]
 [xi?$53 #f]
 [x?$54 #f]))

Expr so far: (#<load-data> . #<procedure:sat-model>)

Ran synthesizer for 0 seconds.
Ran synthesizer for 0 seconds.
Expr so far: (#(struct:cast #<load-data> int16) . (model
 [get-idx (fv integer?~>integer?)]))

Ran synthesizer for 1 seconds.
Expr so far: (#(struct:convolve #<load-data> #(struct:weight-matrix 9 (#(struct:int8_t (bv #x04 8)) #(struct:int8_t (bv #x02 8)) #(struct:int8_t (bv #x02 8)) #(struct:int8_t (bv #x02 8)) #(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0002 16)) #(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) 0) #<procedure:nop> int16) . (model
 [get-idx (fv integer?~>integer?)]
 [x?$57 #t]
 [xi?$58 #t]
 [xi?$59 #f]
 [x?$60 #f]))

Expr so far: (#(struct:broadcast #(struct:int16_t (bv #x0008 16))) . #<procedure:sat-model>)

Ran synthesizer for 1 seconds.
Ran synthesizer for 0 seconds.
Ran synthesizer for 0 seconds.
Ran synthesizer for 5 seconds.
Ran synthesizer for 1 seconds.
Expr so far: (#(struct:const-add #(struct:convolve #<load-data> #(struct:weight-matrix 9 (#(struct:int8_t (bv #x04 8)) #(struct:int8_t (bv #x02 8)) #(struct:int8_t (bv #x02 8)) #(struct:int8_t (bv #x02 8)) #(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0002 16)) #(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) 0) #<procedure:nop> int16) #(struct:int16_t (bv #x0008 16)) #<procedure:nop> int16) . (model
 [get-idx (fv integer?~>integer?)]
 [x?$75 #t]))

Expr so far: (#(struct:broadcast #(struct:uint16_t (bv #x0004 16))) . #<procedure:sat-model>)

Ran synthesizer for 0 seconds.
Ran synthesizer for 0 seconds.
Ran synthesizer for 0 seconds.
Ran synthesizer for 0 seconds.
Ran synthesizer for 55 seconds.
Ran synthesizer for 0 seconds.
Ran synthesizer for 0 seconds.
Ran synthesizer for 2 seconds.
Expr so far: (#(struct:arith-shift-right #(struct:const-add #(struct:convolve #<load-data> #(struct:weight-matrix 9 (#(struct:int8_t (bv #x04 8)) #(struct:int8_t (bv #x02 8)) #(struct:int8_t (bv #x02 8)) #(struct:int8_t (bv #x02 8)) #(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0002 16)) #(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) 0) #<procedure:nop> int16) #(struct:int16_t (bv #x0008 16)) #<procedure:nop> int16) #(struct:uint16_t (bv #x0004 16)) x?$87 int16) . (model
 [get-idx (fv integer?~>integer?)]
 [x?$85 #t]))

Ran synthesizer for 6 seconds.
Expr so far: (#(struct:arith-shift-right #(struct:const-add #(struct:convolve #<load-data> #(struct:weight-matrix 9 (#(struct:int8_t (bv #x04 8)) #(struct:int8_t (bv #x02 8)) #(struct:int8_t (bv #x02 8)) #(struct:int8_t (bv #x02 8)) #(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0002 16)) #(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) 0) #<procedure:nop> int16) #(struct:int16_t (bv #x0008 16)) #<procedure:nop> int16) #(struct:uint16_t (bv #x0004 16)) x?$88 int16) . (model
 [get-idx (fv integer?~>integer?)]
 [x?$89 #t]))

Ran synthesizer for 0 seconds.
Ran synthesizer for 5 seconds.
Ran synthesizer for 2 seconds.
Expr so far: (#(struct:arith-shift-right #(struct:convolve #<load-data> #(struct:weight-matrix 9 (#(struct:int8_t (bv #x04 8)) #(struct:int8_t (bv #x02 8)) #(struct:int8_t (bv #x02 8)) #(struct:int8_t (bv #x02 8)) #(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0002 16)) #(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) 0) #<procedure:nop> int16) #(struct:uint16_t (bv #x0004 16)) #t uint8) . (model
 [get-idx (fv integer?~>integer?)]
 [xi?$96 #t]
 [xi?$97 #f]
 [xi?$98 #f]
 [xi?$99 #f]
 [xi?$100 #f]
 [xi?$101 #f]))

Successfully found an equivalent IR expression.

#(struct:arith-shift-right
  #(struct:convolve
    #<load-data>
    #(struct:weight-matrix
      9
      (#(struct:int8_t (bv #x04 8))
       #(struct:int8_t (bv #x02 8))
       #(struct:int8_t (bv #x02 8))
       #(struct:int8_t (bv #x02 8))
       #(struct:int8_t (bv #x01 8))
       #(struct:int8_t (bv #x01 8))
       #(struct:int16_t (bv #x0002 16))
       #(struct:int8_t (bv #x01 8))
       #(struct:int8_t (bv #x01 8)))
      0)
    #<procedure:nop>
    int16)
  #(struct:uint16_t (bv #x0004 16))
  #t
  uint8)

Synthesis time: 82 seconds

Lifting IR to HVX...
====================

IR Operation:

#<load-data>

Successfully found an equivalent HVX expression.

#<gather*>

Synthesis time: 0 seconds

Lifting IR to HVX...
====================

IR Operation:

(convolve
 #<load-data>
 (weight-matrix
  9
  (list
   (int8_t (bv #x04 8))
   (int8_t (bv #x02 8))
   (int8_t (bv #x02 8))
   (int8_t (bv #x02 8))
   (int8_t (bv #x01 8))
   (int8_t (bv #x01 8))
   (int16_t (bv #x0002 16))
   (int8_t (bv #x01 8))
   (int8_t (bv #x01 8)))
  0)
 #<procedure:nop>
 'int16)

cpu time: 296 real time: 288 gc time: 15
Enumerating HVX Expressions...

Scanning expressions with cost: 2


Scanning expressions with cost: 3


Scanning expressions with cost: 4


Scanning expressions with cost: 5


Scanning expressions with cost: 6

(vtmpy-acc
 (vtmpy-acc
  (vtmpy
   #<gather-vecp>
   (cons
    (int8_t
     (ite* (⊢ (&& (! xi?$14226) (&& (! xi?$14227) (! xi?$14228))) (bv #x02 8)) (⊢ (|| xi?$14226 (&& (! xi?$14226) (|| xi?$14227 (&& xi?$14228 (! xi?$14227))))) (ite* (⊢ xi?$14226 (bv #x04 8)) (⊢ (&& (! xi?$14226) (|| xi?$14227 (&& xi?$14228 (! xi?$14227)))) (ite* (⊢ xi?$14227 (bv #x02 8)) (⊢ (&& xi?$14228 (! xi?$14227)) (bv #x01 8))))))))
    (int8_t
     (ite* (⊢ (&& (! xi?$14229) (&& (! xi?$14230) (! xi?$14231))) (bv #x02 8)) (⊢ (|| xi?$14229 (&& (! xi?$14229) (|| xi?$14230 (&& xi?$14231 (! xi?$14230))))) (ite* (⊢ xi?$14229 (bv #x04 8)) (⊢ (&& (! xi?$14229) (|| xi?$14230 (&& xi?$14231 (! xi?$14230)))) (ite* (⊢ xi?$14230 (bv #x02 8)) (⊢ (&& xi?$14231 (! xi?$14230)) (bv #x01 8))))))))))
  #<gather-vecp>
  (cons
   (int8_t
    (ite* (⊢ (&& (! xi?$14232) (&& (! xi?$14233) (! xi?$14234))) (bv #x02 8)) (⊢ (|| xi?$14232 (&& (! xi?$14232) (|| xi?$14233 (&& xi?$14234 (! xi?$14233))))) (ite* (⊢ xi?$14232 (bv #x04 8)) (⊢ (&& (! xi?$14232) (|| xi?$14233 (&& xi?$14234 (! xi?$14233)))) (ite* (⊢ xi?$14233 (bv #x02 8)) (⊢ (&& xi?$14234 (! xi?$14233)) (bv #x01 8))))))))
   (int8_t
    (ite* (⊢ (&& (! xi?$14235) (&& (! xi?$14236) (! xi?$14237))) (bv #x02 8)) (⊢ (|| xi?$14235 (&& (! xi?$14235) (|| xi?$14236 (&& xi?$14237 (! xi?$14236))))) (ite* (⊢ xi?$14235 (bv #x04 8)) (⊢ (&& (! xi?$14235) (|| xi?$14236 (&& xi?$14237 (! xi?$14236)))) (ite* (⊢ xi?$14236 (bv #x02 8)) (⊢ (&& xi?$14237 (! xi?$14236)) (bv #x01 8))))))))))
 #<gather-vecp>
 (cons
  (int8_t
   (ite* (⊢ (&& (! xi?$14238) (&& (! xi?$14239) (! xi?$14240))) (bv #x02 8)) (⊢ (|| xi?$14238 (&& (! xi?$14238) (|| xi?$14239 (&& xi?$14240 (! xi?$14239))))) (ite* (⊢ xi?$14238 (bv #x04 8)) (⊢ (&& (! xi?$14238) (|| xi?$14239 (&& xi?$14240 (! xi?$14239)))) (ite* (⊢ xi?$14239 (bv #x02 8)) (⊢ (&& xi?$14240 (! xi?$14239)) (bv #x01 8))))))))
  (int8_t
   (ite* (⊢ (&& (! xi?$14241) (&& (! xi?$14242) (! xi?$14243))) (bv #x02 8)) (⊢ (|| xi?$14241 (&& (! xi?$14241) (|| xi?$14242 (&& xi?$14243 (! xi?$14242))))) (ite* (⊢ xi?$14241 (bv #x04 8)) (⊢ (&& (! xi?$14241) (|| xi?$14242 (&& xi?$14243 (! xi?$14242)))) (ite* (⊢ xi?$14242 (bv #x02 8)) (⊢ (&& xi?$14243 (! xi?$14242)) (bv #x01 8))))))))))
Trying 2 lanes
Synthesis time: 16704ms

Scanning expressions with cost: 7


Scanning expressions with cost: 8

(vmpa-acc
 (vtmpy-acc
  (vtmpy-acc
   (vzxt #<gather-vec> #t)
   #<gather-vecp>
   (cons
    (int8_t
     (ite* (⊢ (&& (! xi?$8787) (&& (! xi?$8788) (! xi?$8789))) (bv #x02 8)) (⊢ (|| xi?$8787 (&& (! xi?$8787) (|| xi?$8788 (&& xi?$8789 (! xi?$8788))))) (ite* (⊢ xi?$8787 (bv #x04 8)) (⊢ (&& (! xi?$8787) (|| xi?$8788 (&& xi?$8789 (! xi?$8788)))) (ite* (⊢ xi?$8788 (bv #x02 8)) (⊢ (&& xi?$8789 (! xi?$8788)) (bv #x01 8))))))))
    (int8_t
     (ite* (⊢ (&& (! xi?$8790) (&& (! xi?$8791) (! xi?$8792))) (bv #x02 8)) (⊢ (|| xi?$8790 (&& (! xi?$8790) (|| xi?$8791 (&& xi?$8792 (! xi?$8791))))) (ite* (⊢ xi?$8790 (bv #x04 8)) (⊢ (&& (! xi?$8790) (|| xi?$8791 (&& xi?$8792 (! xi?$8791)))) (ite* (⊢ xi?$8791 (bv #x02 8)) (⊢ (&& xi?$8792 (! xi?$8791)) (bv #x01 8))))))))))
  #<gather-vecp>
  (cons
   (int8_t
    (ite* (⊢ (&& (! xi?$8793) (&& (! xi?$8794) (! xi?$8795))) (bv #x02 8)) (⊢ (|| xi?$8793 (&& (! xi?$8793) (|| xi?$8794 (&& xi?$8795 (! xi?$8794))))) (ite* (⊢ xi?$8793 (bv #x04 8)) (⊢ (&& (! xi?$8793) (|| xi?$8794 (&& xi?$8795 (! xi?$8794)))) (ite* (⊢ xi?$8794 (bv #x02 8)) (⊢ (&& xi?$8795 (! xi?$8794)) (bv #x01 8))))))))
   (int8_t
    (ite* (⊢ (&& (! xi?$8796) (&& (! xi?$8797) (! xi?$8798))) (bv #x02 8)) (⊢ (|| xi?$8796 (&& (! xi?$8796) (|| xi?$8797 (&& xi?$8798 (! xi?$8797))))) (ite* (⊢ xi?$8796 (bv #x04 8)) (⊢ (&& (! xi?$8796) (|| xi?$8797 (&& xi?$8798 (! xi?$8797)))) (ite* (⊢ xi?$8797 (bv #x02 8)) (⊢ (&& xi?$8798 (! xi?$8797)) (bv #x01 8))))))))))
 #<gather-vecp>
 (cons
  (int8_t
   (ite* (⊢ (&& (! xi?$8799) (&& (! xi?$8800) (! xi?$8801))) (bv #x02 8)) (⊢ (|| xi?$8799 (&& (! xi?$8799) (|| xi?$8800 (&& xi?$8801 (! xi?$8800))))) (ite* (⊢ xi?$8799 (bv #x04 8)) (⊢ (&& (! xi?$8799) (|| xi?$8800 (&& xi?$8801 (! xi?$8800)))) (ite* (⊢ xi?$8800 (bv #x02 8)) (⊢ (&& xi?$8801 (! xi?$8800)) (bv #x01 8))))))))
  (int8_t
   (ite* (⊢ (&& (! xi?$8802) (&& (! xi?$8803) (! xi?$8804))) (bv #x02 8)) (⊢ (|| xi?$8802 (&& (! xi?$8802) (|| xi?$8803 (&& xi?$8804 (! xi?$8803))))) (ite* (⊢ xi?$8802 (bv #x04 8)) (⊢ (&& (! xi?$8802) (|| xi?$8803 (&& xi?$8804 (! xi?$8803)))) (ite* (⊢ xi?$8803 (bv #x02 8)) (⊢ (&& xi?$8804 (! xi?$8803)) (bv #x01 8))))))))))
Trying 2 lanes
Synthesis time: 16460ms
(vmpa-acc
 (vtmpy-acc
  (vtmpy-acc
   (vzxt #<gather-vec> #t)
   #<gather-vecp>
   (cons (int8_t (bv #x02 8)) (int8_t (bv #x02 8))))
  #<gather-vecp>
  (cons (int8_t (bv #x01 8)) (int8_t (bv #x02 8))))
 #<gather-vecp>
 (cons (int8_t (bv #x02 8)) (int8_t (bv #x04 8))))
Trying 4 lanes!
Synthesis time: 5567ms
Trying 2 lanes
Synthesis time: 24441ms
(vmpa-acc
 (vtmpy-acc
  (vtmpy-acc
   (vzxt #<gather-vec> #t)
   #<gather-vecp>
   (cons (int8_t (bv #x01 8)) (int8_t (bv #x02 8))))
  #<gather-vecp>
  (cons (int8_t (bv #x02 8)) (int8_t (bv #x02 8))))
 #<gather-vecp>
 (cons (int8_t (bv #x02 8)) (int8_t (bv #x04 8))))
Trying 4 lanes!
Synthesis time: 4984ms
Trying 2 lanes
Time-out: 5mins
(vmpa-acc
 (vtmpy-acc
  (vtmpy-acc
   (vsxt #<gather-vec> #t)
   #<gather-vecp>
   (cons
    (int8_t
     (ite* (⊢ (&& (! xi?$633) (&& (! xi?$634) (! xi?$635))) (bv #x02 8)) (⊢ (|| xi?$633 (&& (! xi?$633) (|| xi?$634 (&& xi?$635 (! xi?$634))))) (ite* (⊢ xi?$633 (bv #x04 8)) (⊢ (&& (! xi?$633) (|| xi?$634 (&& xi?$635 (! xi?$634)))) (ite* (⊢ xi?$634 (bv #x02 8)) (⊢ (&& xi?$635 (! xi?$634)) (bv #x01 8))))))))
    (int8_t
     (ite* (⊢ (&& (! xi?$636) (&& (! xi?$637) (! xi?$638))) (bv #x02 8)) (⊢ (|| xi?$636 (&& (! xi?$636) (|| xi?$637 (&& xi?$638 (! xi?$637))))) (ite* (⊢ xi?$636 (bv #x04 8)) (⊢ (&& (! xi?$636) (|| xi?$637 (&& xi?$638 (! xi?$637)))) (ite* (⊢ xi?$637 (bv #x02 8)) (⊢ (&& xi?$638 (! xi?$637)) (bv #x01 8))))))))))
  #<gather-vecp>
  (cons
   (int8_t
    (ite* (⊢ (&& (! xi?$639) (&& (! xi?$640) (! xi?$641))) (bv #x02 8)) (⊢ (|| xi?$639 (&& (! xi?$639) (|| xi?$640 (&& xi?$641 (! xi?$640))))) (ite* (⊢ xi?$639 (bv #x04 8)) (⊢ (&& (! xi?$639) (|| xi?$640 (&& xi?$641 (! xi?$640)))) (ite* (⊢ xi?$640 (bv #x02 8)) (⊢ (&& xi?$641 (! xi?$640)) (bv #x01 8))))))))
   (int8_t
    (ite* (⊢ (&& (! xi?$642) (&& (! xi?$643) (! xi?$644))) (bv #x02 8)) (⊢ (|| xi?$642 (&& (! xi?$642) (|| xi?$643 (&& xi?$644 (! xi?$643))))) (ite* (⊢ xi?$642 (bv #x04 8)) (⊢ (&& (! xi?$642) (|| xi?$643 (&& xi?$644 (! xi?$643)))) (ite* (⊢ xi?$643 (bv #x02 8)) (⊢ (&& xi?$644 (! xi?$643)) (bv #x01 8))))))))))
 #<gather-vecp>
 (cons
  (uint8_t
   (ite* (⊢ (&& (! xi?$645) (&& (! xi?$646) (! xi?$647))) (bv #x02 8)) (⊢ (|| xi?$645 (&& (! xi?$645) (|| xi?$646 (&& xi?$647 (! xi?$646))))) (ite* (⊢ xi?$645 (bv #x04 8)) (⊢ (&& (! xi?$645) (|| xi?$646 (&& xi?$647 (! xi?$646)))) (ite* (⊢ xi?$646 (bv #x02 8)) (⊢ (&& xi?$647 (! xi?$646)) (bv #x01 8))))))))
  (uint8_t
   (ite* (⊢ (&& (! xi?$648) (&& (! xi?$649) (! xi?$650))) (bv #x02 8)) (⊢ (|| xi?$648 (&& (! xi?$648) (|| xi?$649 (&& xi?$650 (! xi?$649))))) (ite* (⊢ xi?$648 (bv #x04 8)) (⊢ (&& (! xi?$648) (|| xi?$649 (&& xi?$650 (! xi?$649)))) (ite* (⊢ xi?$649 (bv #x02 8)) (⊢ (&& xi?$650 (! xi?$649)) (bv #x01 8))))))))))
Trying 2 lanes
Synthesis time: 120998ms
(vmpa-acc
 (vtmpy-acc
  (vtmpy-acc
   (vsxt #<gather-vec> #t)
   #<gather-vecp>
   (cons
    (int8_t
     (ite* (⊢ (&& (! xi?$8769) (&& (! xi?$8770) (! xi?$8771))) (bv #x02 8)) (⊢ (|| xi?$8769 (&& (! xi?$8769) (|| xi?$8770 (&& xi?$8771 (! xi?$8770))))) (ite* (⊢ xi?$8769 (bv #x04 8)) (⊢ (&& (! xi?$8769) (|| xi?$8770 (&& xi?$8771 (! xi?$8770)))) (ite* (⊢ xi?$8770 (bv #x02 8)) (⊢ (&& xi?$8771 (! xi?$8770)) (bv #x01 8))))))))
    (int8_t
     (ite* (⊢ (&& (! xi?$8772) (&& (! xi?$8773) (! xi?$8774))) (bv #x02 8)) (⊢ (|| xi?$8772 (&& (! xi?$8772) (|| xi?$8773 (&& xi?$8774 (! xi?$8773))))) (ite* (⊢ xi?$8772 (bv #x04 8)) (⊢ (&& (! xi?$8772) (|| xi?$8773 (&& xi?$8774 (! xi?$8773)))) (ite* (⊢ xi?$8773 (bv #x02 8)) (⊢ (&& xi?$8774 (! xi?$8773)) (bv #x01 8))))))))))
  #<gather-vecp>
  (cons
   (int8_t
    (ite* (⊢ (&& (! xi?$8775) (&& (! xi?$8776) (! xi?$8777))) (bv #x02 8)) (⊢ (|| xi?$8775 (&& (! xi?$8775) (|| xi?$8776 (&& xi?$8777 (! xi?$8776))))) (ite* (⊢ xi?$8775 (bv #x04 8)) (⊢ (&& (! xi?$8775) (|| xi?$8776 (&& xi?$8777 (! xi?$8776)))) (ite* (⊢ xi?$8776 (bv #x02 8)) (⊢ (&& xi?$8777 (! xi?$8776)) (bv #x01 8))))))))
   (int8_t
    (ite* (⊢ (&& (! xi?$8778) (&& (! xi?$8779) (! xi?$8780))) (bv #x02 8)) (⊢ (|| xi?$8778 (&& (! xi?$8778) (|| xi?$8779 (&& xi?$8780 (! xi?$8779))))) (ite* (⊢ xi?$8778 (bv #x04 8)) (⊢ (&& (! xi?$8778) (|| xi?$8779 (&& xi?$8780 (! xi?$8779)))) (ite* (⊢ xi?$8779 (bv #x02 8)) (⊢ (&& xi?$8780 (! xi?$8779)) (bv #x01 8))))))))))
 #<gather-vecp>
 (cons
  (int8_t
   (ite* (⊢ (&& (! xi?$8781) (&& (! xi?$8782) (! xi?$8783))) (bv #x02 8)) (⊢ (|| xi?$8781 (&& (! xi?$8781) (|| xi?$8782 (&& xi?$8783 (! xi?$8782))))) (ite* (⊢ xi?$8781 (bv #x04 8)) (⊢ (&& (! xi?$8781) (|| xi?$8782 (&& xi?$8783 (! xi?$8782)))) (ite* (⊢ xi?$8782 (bv #x02 8)) (⊢ (&& xi?$8783 (! xi?$8782)) (bv #x01 8))))))))
  (int8_t
   (ite* (⊢ (&& (! xi?$8784) (&& (! xi?$8785) (! xi?$8786))) (bv #x02 8)) (⊢ (|| xi?$8784 (&& (! xi?$8784) (|| xi?$8785 (&& xi?$8786 (! xi?$8785))))) (ite* (⊢ xi?$8784 (bv #x04 8)) (⊢ (&& (! xi?$8784) (|| xi?$8785 (&& xi?$8786 (! xi?$8785)))) (ite* (⊢ xi?$8785 (bv #x02 8)) (⊢ (&& xi?$8786 (! xi?$8785)) (bv #x01 8))))))))))
Trying 2 lanes
Time-out: 5mins
(vmpa-acc
 (vtmpy-acc
  (vtmpy-acc
   (vzxt #<gather-vec> #t)
   #<gather-vecp>
   (cons
    (int8_t
     (ite* (⊢ (&& (! xi?$651) (&& (! xi?$652) (! xi?$653))) (bv #x02 8)) (⊢ (|| xi?$651 (&& (! xi?$651) (|| xi?$652 (&& xi?$653 (! xi?$652))))) (ite* (⊢ xi?$651 (bv #x04 8)) (⊢ (&& (! xi?$651) (|| xi?$652 (&& xi?$653 (! xi?$652)))) (ite* (⊢ xi?$652 (bv #x02 8)) (⊢ (&& xi?$653 (! xi?$652)) (bv #x01 8))))))))
    (int8_t
     (ite* (⊢ (&& (! xi?$654) (&& (! xi?$655) (! xi?$656))) (bv #x02 8)) (⊢ (|| xi?$654 (&& (! xi?$654) (|| xi?$655 (&& xi?$656 (! xi?$655))))) (ite* (⊢ xi?$654 (bv #x04 8)) (⊢ (&& (! xi?$654) (|| xi?$655 (&& xi?$656 (! xi?$655)))) (ite* (⊢ xi?$655 (bv #x02 8)) (⊢ (&& xi?$656 (! xi?$655)) (bv #x01 8))))))))))
  #<gather-vecp>
  (cons
   (int8_t
    (ite* (⊢ (&& (! xi?$657) (&& (! xi?$658) (! xi?$659))) (bv #x02 8)) (⊢ (|| xi?$657 (&& (! xi?$657) (|| xi?$658 (&& xi?$659 (! xi?$658))))) (ite* (⊢ xi?$657 (bv #x04 8)) (⊢ (&& (! xi?$657) (|| xi?$658 (&& xi?$659 (! xi?$658)))) (ite* (⊢ xi?$658 (bv #x02 8)) (⊢ (&& xi?$659 (! xi?$658)) (bv #x01 8))))))))
   (int8_t
    (ite* (⊢ (&& (! xi?$660) (&& (! xi?$661) (! xi?$662))) (bv #x02 8)) (⊢ (|| xi?$660 (&& (! xi?$660) (|| xi?$661 (&& xi?$662 (! xi?$661))))) (ite* (⊢ xi?$660 (bv #x04 8)) (⊢ (&& (! xi?$660) (|| xi?$661 (&& xi?$662 (! xi?$661)))) (ite* (⊢ xi?$661 (bv #x02 8)) (⊢ (&& xi?$662 (! xi?$661)) (bv #x01 8))))))))))
 #<gather-vecp>
 (cons
  (uint8_t
   (ite* (⊢ (&& (! xi?$663) (&& (! xi?$664) (! xi?$665))) (bv #x02 8)) (⊢ (|| xi?$663 (&& (! xi?$663) (|| xi?$664 (&& xi?$665 (! xi?$664))))) (ite* (⊢ xi?$663 (bv #x04 8)) (⊢ (&& (! xi?$663) (|| xi?$664 (&& xi?$665 (! xi?$664)))) (ite* (⊢ xi?$664 (bv #x02 8)) (⊢ (&& xi?$665 (! xi?$664)) (bv #x01 8))))))))
  (uint8_t
   (ite* (⊢ (&& (! xi?$666) (&& (! xi?$667) (! xi?$668))) (bv #x02 8)) (⊢ (|| xi?$666 (&& (! xi?$666) (|| xi?$667 (&& xi?$668 (! xi?$667))))) (ite* (⊢ xi?$666 (bv #x04 8)) (⊢ (&& (! xi?$666) (|| xi?$667 (&& xi?$668 (! xi?$667)))) (ite* (⊢ xi?$667 (bv #x02 8)) (⊢ (&& xi?$668 (! xi?$667)) (bv #x01 8))))))))))
Trying 2 lanes
Synthesis time: 9680ms
(vmpa-acc
 (vtmpy-acc
  (vtmpy-acc
   (vzxt #<gather-vec> #t)
   #<gather-vecp>
   (cons (int8_t (bv #x02 8)) (int8_t (bv #x02 8))))
  #<gather-vecp>
  (cons (int8_t (bv #x01 8)) (int8_t (bv #x02 8))))
 #<gather-vecp>
 (cons (uint8_t (bv #x02 8)) (uint8_t (bv #x04 8))))
Trying 4 lanes!
Synthesis time: 8435ms
Trying 2 lanes
Synthesis time: 30029ms
(vmpa-acc
 (vtmpy-acc
  (vtmpy-acc
   (vzxt #<gather-vec> #t)
   #<gather-vecp>
   (cons (int8_t (bv #x01 8)) (int8_t (bv #x02 8))))
  #<gather-vecp>
  (cons (int8_t (bv #x02 8)) (int8_t (bv #x02 8))))
 #<gather-vecp>
 (cons (uint8_t (bv #x02 8)) (uint8_t (bv #x04 8))))
Trying 4 lanes!
Synthesis time: 5926ms
Trying 2 lanes
Time-out: 5mins
(vmpa-acc
 (vmpa-acc
  (vmpa-acc
   (vtmpy
    #<gather-vecp>
    (cons
     (int8_t
      (ite* (⊢ (&& (! xi?$8349) (&& (! xi?$8350) (! xi?$8351))) (bv #x02 8)) (⊢ (|| xi?$8349 (&& (! xi?$8349) (|| xi?$8350 (&& xi?$8351 (! xi?$8350))))) (ite* (⊢ xi?$8349 (bv #x04 8)) (⊢ (&& (! xi?$8349) (|| xi?$8350 (&& xi?$8351 (! xi?$8350)))) (ite* (⊢ xi?$8350 (bv #x02 8)) (⊢ (&& xi?$8351 (! xi?$8350)) (bv #x01 8))))))))
     (int8_t
      (ite* (⊢ (&& (! xi?$8352) (&& (! xi?$8353) (! xi?$8354))) (bv #x02 8)) (⊢ (|| xi?$8352 (&& (! xi?$8352) (|| xi?$8353 (&& xi?$8354 (! xi?$8353))))) (ite* (⊢ xi?$8352 (bv #x04 8)) (⊢ (&& (! xi?$8352) (|| xi?$8353 (&& xi?$8354 (! xi?$8353)))) (ite* (⊢ xi?$8353 (bv #x02 8)) (⊢ (&& xi?$8354 (! xi?$8353)) (bv #x01 8))))))))))
   #<gather-vecp>
   (cons
    (uint8_t
     (ite* (⊢ (&& (! xi?$8355) (&& (! xi?$8356) (! xi?$8357))) (bv #x02 8)) (⊢ (|| xi?$8355 (&& (! xi?$8355) (|| xi?$8356 (&& xi?$8357 (! xi?$8356))))) (ite* (⊢ xi?$8355 (bv #x04 8)) (⊢ (&& (! xi?$8355) (|| xi?$8356 (&& xi?$8357 (! xi?$8356)))) (ite* (⊢ xi?$8356 (bv #x02 8)) (⊢ (&& xi?$8357 (! xi?$8356)) (bv #x01 8))))))))
    (uint8_t
     (ite* (⊢ (&& (! xi?$8358) (&& (! xi?$8359) (! xi?$8360))) (bv #x02 8)) (⊢ (|| xi?$8358 (&& (! xi?$8358) (|| xi?$8359 (&& xi?$8360 (! xi?$8359))))) (ite* (⊢ xi?$8358 (bv #x04 8)) (⊢ (&& (! xi?$8358) (|| xi?$8359 (&& xi?$8360 (! xi?$8359)))) (ite* (⊢ xi?$8359 (bv #x02 8)) (⊢ (&& xi?$8360 (! xi?$8359)) (bv #x01 8))))))))))
  #<gather-vecp>
  (cons
   (int8_t
    (ite* (⊢ (&& (! xi?$8361) (&& (! xi?$8362) (! xi?$8363))) (bv #x02 8)) (⊢ (|| xi?$8361 (&& (! xi?$8361) (|| xi?$8362 (&& xi?$8363 (! xi?$8362))))) (ite* (⊢ xi?$8361 (bv #x04 8)) (⊢ (&& (! xi?$8361) (|| xi?$8362 (&& xi?$8363 (! xi?$8362)))) (ite* (⊢ xi?$8362 (bv #x02 8)) (⊢ (&& xi?$8363 (! xi?$8362)) (bv #x01 8))))))))
   (int8_t
    (ite* (⊢ (&& (! xi?$8364) (&& (! xi?$8365) (! xi?$8366))) (bv #x02 8)) (⊢ (|| xi?$8364 (&& (! xi?$8364) (|| xi?$8365 (&& xi?$8366 (! xi?$8365))))) (ite* (⊢ xi?$8364 (bv #x04 8)) (⊢ (&& (! xi?$8364) (|| xi?$8365 (&& xi?$8366 (! xi?$8365)))) (ite* (⊢ xi?$8365 (bv #x02 8)) (⊢ (&& xi?$8366 (! xi?$8365)) (bv #x01 8))))))))))
 #<gather-vecp>
 (cons
  (uint8_t
   (ite* (⊢ (&& (! xi?$8367) (&& (! xi?$8368) (! xi?$8369))) (bv #x02 8)) (⊢ (|| xi?$8367 (&& (! xi?$8367) (|| xi?$8368 (&& xi?$8369 (! xi?$8368))))) (ite* (⊢ xi?$8367 (bv #x04 8)) (⊢ (&& (! xi?$8367) (|| xi?$8368 (&& xi?$8369 (! xi?$8368)))) (ite* (⊢ xi?$8368 (bv #x02 8)) (⊢ (&& xi?$8369 (! xi?$8368)) (bv #x01 8))))))))
  (uint8_t
   (ite* (⊢ (&& (! xi?$8370) (&& (! xi?$8371) (! xi?$8372))) (bv #x02 8)) (⊢ (|| xi?$8370 (&& (! xi?$8370) (|| xi?$8371 (&& xi?$8372 (! xi?$8371))))) (ite* (⊢ xi?$8370 (bv #x04 8)) (⊢ (&& (! xi?$8370) (|| xi?$8371 (&& xi?$8372 (! xi?$8371)))) (ite* (⊢ xi?$8371 (bv #x02 8)) (⊢ (&& xi?$8372 (! xi?$8371)) (bv #x01 8))))))))))
Trying 2 lanes
Synthesis time: 119773ms
(vmpa-acc
 (vmpa-acc
  (vmpa-acc
   (vtmpy #<gather-vecp> (cons (int8_t (bv #x01 8)) (int8_t (bv #x02 8))))
   #<gather-vecp>
   (cons (uint8_t (bv #x01 8)) (uint8_t (bv #x01 8))))
  #<gather-vecp>
  (cons (int8_t (bv #x02 8)) (int8_t (bv #x02 8))))
 #<gather-vecp>
 (cons (uint8_t (bv #x04 8)) (uint8_t (bv #x02 8))))
Trying 4 lanes!
Synthesis time: 5924ms

Successfully found an equivalent HVX expression.

(vmpa-acc
 (vmpa-acc
  (vmpa-acc
   (vtmpy #<gather-vecp> (cons (int8_t (bv #x01 8)) (int8_t (bv #x02 8))))
   #<gather-vecp>
   (cons (uint8_t (bv #x01 8)) (uint8_t (bv #x01 8))))
  #<gather-vecp>
  (cons (int8_t (bv #x02 8)) (int8_t (bv #x02 8))))
 #<gather-vecp>
 (cons (uint8_t (bv #x04 8)) (uint8_t (bv #x02 8))))

Lifting IR to HVX...
====================

IR Operation:

(arith-shift-right
 (convolve
  #<load-data>
  (weight-matrix
   9
   (list
    (int8_t (bv #x04 8))
    (int8_t (bv #x02 8))
    (int8_t (bv #x02 8))
    (int8_t (bv #x02 8))
    (int8_t (bv #x01 8))
    (int8_t (bv #x01 8))
    (int16_t (bv #x0002 16))
    (int8_t (bv #x01 8))
    (int8_t (bv #x01 8)))
   0)
  #<procedure:nop>
  'int16)
 (uint16_t (bv #x0004 16))
 #t
 'uint8)

Generating HVX Grammar...
Number of instructions: 1
Set of instructions: Specialized

Successfully found an equivalent HVX expression.

(let-expr
 't0
 (vmpa-acc
  (vmpa-acc
   (vmpa-acc
    (vtmpy #<gather-vecp> (cons (int8_t (bv #x01 8)) (int8_t (bv #x02 8))))
    #<gather-vecp>
    (cons (uint8_t (bv #x01 8)) (uint8_t (bv #x01 8))))
   #<gather-vecp>
   (cons (int8_t (bv #x02 8)) (int8_t (bv #x02 8))))
  #<gather-vecp>
  (cons (uint8_t (bv #x04 8)) (uint8_t (bv #x02 8))))
 (vasr-n (hi 't0) (lo 't0) (int8_t (bv #x04 8)) #t b$16322 #t))

Expression cost: 9.2

Synthesis time: 24 seconds

Searching for a more optimal solution...

Failed to find an equivalent HVX expression with cost lower than 9.2.

Synthesis time: 0 seconds

Synthesizing Swizzle implementations...
=======================================

## Swizzle node id: 1

Enumerating Swizzle Expressions...

Scanning swizzle templates with cost: 1

Synthesis time: 16629ms

Scanning swizzle templates with cost: 3

Synthesis time: 8018ms
(let-expr
 't0
 (vmpa-acc
  (vmpa-acc
   (vmpa-acc
    (vtmpy
     (vcombine
      (vread
       input
       (+ -1 (+ (+ (* input.stride.1 (+ output.s0.y.yi (* 4 output.s0.y.y))) (* 128 output.s0.x.x)) (- input.stride.1)))
       (aligned 1 0))
      (vread
       input
       (+ 1 (+ input.stride.1 (+ (* input.stride.1 (+ output.s0.y.yi (* 4 output.s0.y.y))) (* 128 output.s0.x.x))))
       (aligned 128 1)))
     (cons (int8_t (bv #x01 8)) (int8_t (bv #x02 8))))
    #<gather-vecp>
    (cons (uint8_t (bv #x01 8)) (uint8_t (bv #x01 8))))
   #<gather-vecp>
   (cons (int8_t (bv #x02 8)) (int8_t (bv #x02 8))))
  #<gather-vecp>
  (cons (uint8_t (bv #x04 8)) (uint8_t (bv #x02 8))))
 (vasr-n (hi 't0) (lo 't0) (int8_t (bv #x04 8)) #t b$16322 #t))

Successfully found a swizzle implementation.

## Swizzle node id: 2

Enumerating Swizzle Expressions...

Scanning swizzle templates with cost: 1

Synthesis time: 378ms

Scanning swizzle templates with cost: 3

Synthesis time: 682ms
Synthesis time: 1938ms
(let-expr
 't0
 (vmpa-acc
  (vmpa-acc
   (vmpa-acc
    (vtmpy
     (vcombine
      (vread
       input
       (+ -1 (+ (+ (* input.stride.1 (+ output.s0.y.yi (* 4 output.s0.y.y))) (* 128 output.s0.x.x)) (- input.stride.1)))
       (aligned 1 0))
      (vread
       input
       (+ 1 (+ input.stride.1 (+ (* input.stride.1 (+ output.s0.y.yi (* 4 output.s0.y.y))) (* 128 output.s0.x.x))))
       (aligned 128 1)))
     (cons (int8_t (bv #x01 8)) (int8_t (bv #x02 8))))
    (vcombine
     (vread
      input
      (+ 1 (+ (+ (* input.stride.1 (+ output.s0.y.yi (* 4 output.s0.y.y))) (* 128 output.s0.x.x)) (- input.stride.1)))
      (aligned 1 0))
     (vread
      input
      (+ -1 (+ input.stride.1 (+ (* input.stride.1 (+ output.s0.y.yi (* 4 output.s0.y.y))) (* 128 output.s0.x.x))))
      (aligned 128 127)))
    (cons (uint8_t (bv #x01 8)) (uint8_t (bv #x01 8))))
   #<gather-vecp>
   (cons (int8_t (bv #x02 8)) (int8_t (bv #x02 8))))
  #<gather-vecp>
  (cons (uint8_t (bv #x04 8)) (uint8_t (bv #x02 8))))
 (vasr-n (hi 't0) (lo 't0) (int8_t (bv #x04 8)) #t b$16322 #t))

Successfully found a swizzle implementation.

## Swizzle node id: 3

Enumerating Swizzle Expressions...

Scanning swizzle templates with cost: 1

Synthesis time: 223ms

Scanning swizzle templates with cost: 3

Synthesis time: 231ms
Synthesis time: 2749ms
(let-expr
 't0
 (vmpa-acc
  (vmpa-acc
   (vmpa-acc
    (vtmpy
     (vcombine
      (vread
       input
       (+ -1 (+ (+ (* input.stride.1 (+ output.s0.y.yi (* 4 output.s0.y.y))) (* 128 output.s0.x.x)) (- input.stride.1)))
       (aligned 1 0))
      (vread
       input
       (+ 1 (+ input.stride.1 (+ (* input.stride.1 (+ output.s0.y.yi (* 4 output.s0.y.y))) (* 128 output.s0.x.x))))
       (aligned 128 1)))
     (cons (int8_t (bv #x01 8)) (int8_t (bv #x02 8))))
    (vcombine
     (vread
      input
      (+ 1 (+ (+ (* input.stride.1 (+ output.s0.y.yi (* 4 output.s0.y.y))) (* 128 output.s0.x.x)) (- input.stride.1)))
      (aligned 1 0))
     (vread
      input
      (+ -1 (+ input.stride.1 (+ (* input.stride.1 (+ output.s0.y.yi (* 4 output.s0.y.y))) (* 128 output.s0.x.x))))
      (aligned 128 127)))
    (cons (uint8_t (bv #x01 8)) (uint8_t (bv #x01 8))))
   (vcombine
    (vread
     input
     (+ -1 (+ (* input.stride.1 (+ output.s0.y.yi (* 4 output.s0.y.y))) (* 128 output.s0.x.x)))
     (aligned 128 127))
    (vread
     input
     (+ 1 (+ (* input.stride.1 (+ output.s0.y.yi (* 4 output.s0.y.y))) (* 128 output.s0.x.x)))
     (aligned 128 1)))
   (cons (int8_t (bv #x02 8)) (int8_t (bv #x02 8))))
  #<gather-vecp>
  (cons (uint8_t (bv #x04 8)) (uint8_t (bv #x02 8))))
 (vasr-n (hi 't0) (lo 't0) (int8_t (bv #x04 8)) #t b$16322 #t))

Successfully found a swizzle implementation.

## Swizzle node id: 4

Enumerating Swizzle Expressions...

Scanning swizzle templates with cost: 1

Synthesis time: 143ms

Scanning swizzle templates with cost: 3

Synthesis time: 146ms
Synthesis time: 481ms

Failed to find a swizzle implementation -- Search space exhausted.

Total synthesis time: 770ms

Backtracking. Attempting to synthesize a different implementation for swizzle node with id: 3

## Swizzle node id: 3

Enumerating Swizzle Expressions...

Scanning swizzle templates with cost: 1


Scanning swizzle templates with cost: 3

Synthesis time: 3116ms
(let-expr
 't0
 (vmpa-acc
  (vmpa-acc
   (vmpa-acc
    (vtmpy
     (vcombine
      (vread
       input
       (+ -1 (+ (+ (* input.stride.1 (+ output.s0.y.yi (* 4 output.s0.y.y))) (* 128 output.s0.x.x)) (- input.stride.1)))
       (aligned 1 0))
      (vread
       input
       (+ 1 (+ input.stride.1 (+ (* input.stride.1 (+ output.s0.y.yi (* 4 output.s0.y.y))) (* 128 output.s0.x.x))))
       (aligned 128 1)))
     (cons (int8_t (bv #x01 8)) (int8_t (bv #x02 8))))
    (vcombine
     (vread
      input
      (+ 1 (+ (+ (* input.stride.1 (+ output.s0.y.yi (* 4 output.s0.y.y))) (* 128 output.s0.x.x)) (- input.stride.1)))
      (aligned 1 0))
     (vread
      input
      (+ -1 (+ input.stride.1 (+ (* input.stride.1 (+ output.s0.y.yi (* 4 output.s0.y.y))) (* 128 output.s0.x.x))))
      (aligned 128 127)))
    (cons (uint8_t (bv #x01 8)) (uint8_t (bv #x01 8))))
   (vcombine
    (vread
     input
     (+ 1 (+ (* input.stride.1 (+ output.s0.y.yi (* 4 output.s0.y.y))) (* 128 output.s0.x.x)))
     (aligned 128 1))
    (vread
     input
     (+ -1 (+ (* input.stride.1 (+ output.s0.y.yi (* 4 output.s0.y.y))) (* 128 output.s0.x.x)))
     (aligned 128 127)))
   (cons (int8_t (bv #x02 8)) (int8_t (bv #x02 8))))
  #<gather-vecp>
  (cons (uint8_t (bv #x04 8)) (uint8_t (bv #x02 8))))
 (vasr-n (hi 't0) (lo 't0) (int8_t (bv #x04 8)) #t b$16322 #t))

Successfully found a swizzle implementation.

## Swizzle node id: 4

Enumerating Swizzle Expressions...

Scanning swizzle templates with cost: 1

Synthesis time: 141ms

Scanning swizzle templates with cost: 3

Synthesis time: 144ms
Synthesis time: 490ms

Failed to find a swizzle implementation -- Search space exhausted.

Total synthesis time: 775ms

Backtracking. Attempting to synthesize a different implementation for swizzle node with id: 3

## Swizzle node id: 3

Enumerating Swizzle Expressions...

Scanning swizzle templates with cost: 1


Scanning swizzle templates with cost: 3

Synthesis time: 2201ms

Failed to find a swizzle implementation -- Search space exhausted.

Total synthesis time: 2201ms

Backtracking. Attempting to synthesize a different implementation for swizzle node with id: 2

## Swizzle node id: 2

Enumerating Swizzle Expressions...

Scanning swizzle templates with cost: 1


Scanning swizzle templates with cost: 3

Synthesis time: 2088ms
(let-expr
 't0
 (vmpa-acc
  (vmpa-acc
   (vmpa-acc
    (vtmpy
     (vcombine
      (vread
       input
       (+ -1 (+ (+ (* input.stride.1 (+ output.s0.y.yi (* 4 output.s0.y.y))) (* 128 output.s0.x.x)) (- input.stride.1)))
       (aligned 1 0))
      (vread
       input
       (+ 1 (+ input.stride.1 (+ (* input.stride.1 (+ output.s0.y.yi (* 4 output.s0.y.y))) (* 128 output.s0.x.x))))
       (aligned 128 1)))
     (cons (int8_t (bv #x01 8)) (int8_t (bv #x02 8))))
    (vcombine
     (vread
      input
      (+ -1 (+ input.stride.1 (+ (* input.stride.1 (+ output.s0.y.yi (* 4 output.s0.y.y))) (* 128 output.s0.x.x))))
      (aligned 128 127))
     (vread
      input
      (+ 1 (+ (+ (* input.stride.1 (+ output.s0.y.yi (* 4 output.s0.y.y))) (* 128 output.s0.x.x)) (- input.stride.1)))
      (aligned 1 0)))
    (cons (uint8_t (bv #x01 8)) (uint8_t (bv #x01 8))))
   #<gather-vecp>
   (cons (int8_t (bv #x02 8)) (int8_t (bv #x02 8))))
  #<gather-vecp>
  (cons (uint8_t (bv #x04 8)) (uint8_t (bv #x02 8))))
 (vasr-n (hi 't0) (lo 't0) (int8_t (bv #x04 8)) #t b$16322 #t))

Successfully found a swizzle implementation.

## Swizzle node id: 3

Enumerating Swizzle Expressions...

Scanning swizzle templates with cost: 1

Synthesis time: 234ms

Scanning swizzle templates with cost: 3

Synthesis time: 232ms
Synthesis time: 1257ms
(let-expr
 't0
 (vmpa-acc
  (vmpa-acc
   (vmpa-acc
    (vtmpy
     (vcombine
      (vread
       input
       (+ -1 (+ (+ (* input.stride.1 (+ output.s0.y.yi (* 4 output.s0.y.y))) (* 128 output.s0.x.x)) (- input.stride.1)))
       (aligned 1 0))
      (vread
       input
       (+ 1 (+ input.stride.1 (+ (* input.stride.1 (+ output.s0.y.yi (* 4 output.s0.y.y))) (* 128 output.s0.x.x))))
       (aligned 128 1)))
     (cons (int8_t (bv #x01 8)) (int8_t (bv #x02 8))))
    (vcombine
     (vread
      input
      (+ -1 (+ input.stride.1 (+ (* input.stride.1 (+ output.s0.y.yi (* 4 output.s0.y.y))) (* 128 output.s0.x.x))))
      (aligned 128 127))
     (vread
      input
      (+ 1 (+ (+ (* input.stride.1 (+ output.s0.y.yi (* 4 output.s0.y.y))) (* 128 output.s0.x.x)) (- input.stride.1)))
      (aligned 1 0)))
    (cons (uint8_t (bv #x01 8)) (uint8_t (bv #x01 8))))
   (vcombine
    (vread
     input
     (+ -1 (+ (* input.stride.1 (+ output.s0.y.yi (* 4 output.s0.y.y))) (* 128 output.s0.x.x)))
     (aligned 128 127))
    (vread
     input
     (+ 1 (+ (* input.stride.1 (+ output.s0.y.yi (* 4 output.s0.y.y))) (* 128 output.s0.x.x)))
     (aligned 128 1)))
   (cons (int8_t (bv #x02 8)) (int8_t (bv #x02 8))))
  #<gather-vecp>
  (cons (uint8_t (bv #x04 8)) (uint8_t (bv #x02 8))))
 (vasr-n (hi 't0) (lo 't0) (int8_t (bv #x04 8)) #t b$16322 #t))

Successfully found a swizzle implementation.

## Swizzle node id: 4

Enumerating Swizzle Expressions...

Scanning swizzle templates with cost: 1

Synthesis time: 138ms

Scanning swizzle templates with cost: 3

Synthesis time: 144ms
Synthesis time: 490ms

Failed to find a swizzle implementation -- Search space exhausted.

Total synthesis time: 772ms

Backtracking. Attempting to synthesize a different implementation for swizzle node with id: 3

## Swizzle node id: 3

Enumerating Swizzle Expressions...

Scanning swizzle templates with cost: 1


Scanning swizzle templates with cost: 3

Synthesis time: 1697ms
(let-expr
 't0
 (vmpa-acc
  (vmpa-acc
   (vmpa-acc
    (vtmpy
     (vcombine
      (vread
       input
       (+ -1 (+ (+ (* input.stride.1 (+ output.s0.y.yi (* 4 output.s0.y.y))) (* 128 output.s0.x.x)) (- input.stride.1)))
       (aligned 1 0))
      (vread
       input
       (+ 1 (+ input.stride.1 (+ (* input.stride.1 (+ output.s0.y.yi (* 4 output.s0.y.y))) (* 128 output.s0.x.x))))
       (aligned 128 1)))
     (cons (int8_t (bv #x01 8)) (int8_t (bv #x02 8))))
    (vcombine
     (vread
      input
      (+ -1 (+ input.stride.1 (+ (* input.stride.1 (+ output.s0.y.yi (* 4 output.s0.y.y))) (* 128 output.s0.x.x))))
      (aligned 128 127))
     (vread
      input
      (+ 1 (+ (+ (* input.stride.1 (+ output.s0.y.yi (* 4 output.s0.y.y))) (* 128 output.s0.x.x)) (- input.stride.1)))
      (aligned 1 0)))
    (cons (uint8_t (bv #x01 8)) (uint8_t (bv #x01 8))))
   (vcombine
    (vread
     input
     (+ 1 (+ (* input.stride.1 (+ output.s0.y.yi (* 4 output.s0.y.y))) (* 128 output.s0.x.x)))
     (aligned 128 1))
    (vread
     input
     (+ -1 (+ (* input.stride.1 (+ output.s0.y.yi (* 4 output.s0.y.y))) (* 128 output.s0.x.x)))
     (aligned 128 127)))
   (cons (int8_t (bv #x02 8)) (int8_t (bv #x02 8))))
  #<gather-vecp>
  (cons (uint8_t (bv #x04 8)) (uint8_t (bv #x02 8))))
 (vasr-n (hi 't0) (lo 't0) (int8_t (bv #x04 8)) #t b$16322 #t))

Successfully found a swizzle implementation.

## Swizzle node id: 4

Enumerating Swizzle Expressions...

Scanning swizzle templates with cost: 1

Synthesis time: 135ms

Scanning swizzle templates with cost: 3

Synthesis time: 146ms
Synthesis time: 491ms

Failed to find a swizzle implementation -- Search space exhausted.

Total synthesis time: 772ms

Backtracking. Attempting to synthesize a different implementation for swizzle node with id: 3

## Swizzle node id: 3

Enumerating Swizzle Expressions...

Scanning swizzle templates with cost: 1


Scanning swizzle templates with cost: 3

Synthesis time: 2429ms

Failed to find a swizzle implementation -- Search space exhausted.

Total synthesis time: 2429ms

Backtracking. Attempting to synthesize a different implementation for swizzle node with id: 2

## Swizzle node id: 2

Enumerating Swizzle Expressions...

Scanning swizzle templates with cost: 1


Scanning swizzle templates with cost: 3

Synthesis time: 673ms

Failed to find a swizzle implementation -- Search space exhausted.

Total synthesis time: 673ms

Backtracking. Attempting to synthesize a different implementation for swizzle node with id: 1

## Swizzle node id: 1

Enumerating Swizzle Expressions...

Scanning swizzle templates with cost: 1


Scanning swizzle templates with cost: 3

Synthesis time: 5340ms
(let-expr
 't0
 (vmpa-acc
  (vmpa-acc
   (vmpa-acc
    (vtmpy
     (vcombine
      (vread
       input
       (+ -1 (+ (+ (* input.stride.1 (+ output.s0.y.yi (* 4 output.s0.y.y))) (* 128 output.s0.x.x)) (- input.stride.1)))
       (aligned 1 0))
      (vread
       input
       (+ 1 (+ (+ (* input.stride.1 (+ output.s0.y.yi (* 4 output.s0.y.y))) (* 128 output.s0.x.x)) (- input.stride.1)))
       (aligned 1 0)))
     (cons (int8_t (bv #x01 8)) (int8_t (bv #x02 8))))
    #<gather-vecp>
    (cons (uint8_t (bv #x01 8)) (uint8_t (bv #x01 8))))
   #<gather-vecp>
   (cons (int8_t (bv #x02 8)) (int8_t (bv #x02 8))))
  #<gather-vecp>
  (cons (uint8_t (bv #x04 8)) (uint8_t (bv #x02 8))))
 (vasr-n (hi 't0) (lo 't0) (int8_t (bv #x04 8)) #t b$16322 #t))

Successfully found a swizzle implementation.

## Swizzle node id: 2

Enumerating Swizzle Expressions...

Scanning swizzle templates with cost: 1

Synthesis time: 703ms

Scanning swizzle templates with cost: 3

Synthesis time: 862ms
Synthesis time: 2113ms
(let-expr
 't0
 (vmpa-acc
  (vmpa-acc
   (vmpa-acc
    (vtmpy
     (vcombine
      (vread
       input
       (+ -1 (+ (+ (* input.stride.1 (+ output.s0.y.yi (* 4 output.s0.y.y))) (* 128 output.s0.x.x)) (- input.stride.1)))
       (aligned 1 0))
      (vread
       input
       (+ 1 (+ (+ (* input.stride.1 (+ output.s0.y.yi (* 4 output.s0.y.y))) (* 128 output.s0.x.x)) (- input.stride.1)))
       (aligned 1 0)))
     (cons (int8_t (bv #x01 8)) (int8_t (bv #x02 8))))
    (vcombine
     (vread
      input
      (+ -1 (+ input.stride.1 (+ (* input.stride.1 (+ output.s0.y.yi (* 4 output.s0.y.y))) (* 128 output.s0.x.x))))
      (aligned 128 127))
     (vread
      input
      (+ 1 (+ input.stride.1 (+ (* input.stride.1 (+ output.s0.y.yi (* 4 output.s0.y.y))) (* 128 output.s0.x.x))))
      (aligned 128 1)))
    (cons (uint8_t (bv #x01 8)) (uint8_t (bv #x01 8))))
   #<gather-vecp>
   (cons (int8_t (bv #x02 8)) (int8_t (bv #x02 8))))
  #<gather-vecp>
  (cons (uint8_t (bv #x04 8)) (uint8_t (bv #x02 8))))
 (vasr-n (hi 't0) (lo 't0) (int8_t (bv #x04 8)) #t b$16322 #t))

Successfully found a swizzle implementation.

## Swizzle node id: 3

Enumerating Swizzle Expressions...

Scanning swizzle templates with cost: 1

Synthesis time: 207ms

Scanning swizzle templates with cost: 3

Synthesis time: 217ms
Synthesis time: 1206ms
(let-expr
 't0
 (vmpa-acc
  (vmpa-acc
   (vmpa-acc
    (vtmpy
     (vcombine
      (vread
       input
       (+ -1 (+ (+ (* input.stride.1 (+ output.s0.y.yi (* 4 output.s0.y.y))) (* 128 output.s0.x.x)) (- input.stride.1)))
       (aligned 1 0))
      (vread
       input
       (+ 1 (+ (+ (* input.stride.1 (+ output.s0.y.yi (* 4 output.s0.y.y))) (* 128 output.s0.x.x)) (- input.stride.1)))
       (aligned 1 0)))
     (cons (int8_t (bv #x01 8)) (int8_t (bv #x02 8))))
    (vcombine
     (vread
      input
      (+ -1 (+ input.stride.1 (+ (* input.stride.1 (+ output.s0.y.yi (* 4 output.s0.y.y))) (* 128 output.s0.x.x))))
      (aligned 128 127))
     (vread
      input
      (+ 1 (+ input.stride.1 (+ (* input.stride.1 (+ output.s0.y.yi (* 4 output.s0.y.y))) (* 128 output.s0.x.x))))
      (aligned 128 1)))
    (cons (uint8_t (bv #x01 8)) (uint8_t (bv #x01 8))))
   (vcombine
    (vread
     input
     (+ 1 (+ (* input.stride.1 (+ output.s0.y.yi (* 4 output.s0.y.y))) (* 128 output.s0.x.x)))
     (aligned 128 1))
    (vread
     input
     (+ input.stride.1 (+ (* input.stride.1 (+ output.s0.y.yi (* 4 output.s0.y.y))) (* 128 output.s0.x.x)))
     (aligned 128 0)))
   (cons (int8_t (bv #x02 8)) (int8_t (bv #x02 8))))
  #<gather-vecp>
  (cons (uint8_t (bv #x04 8)) (uint8_t (bv #x02 8))))
 (vasr-n (hi 't0) (lo 't0) (int8_t (bv #x04 8)) #t b$16322 #t))

Successfully found a swizzle implementation.

## Swizzle node id: 4

Enumerating Swizzle Expressions...

Scanning swizzle templates with cost: 1

Synthesis time: 138ms

Scanning swizzle templates with cost: 3

Synthesis time: 138ms
Synthesis time: 711ms
(let-expr
 't0
 (vmpa-acc
  (vmpa-acc
   (vmpa-acc
    (vtmpy
     (vcombine
      (vread
       input
       (+ -1 (+ (+ (* input.stride.1 (+ output.s0.y.yi (* 4 output.s0.y.y))) (* 128 output.s0.x.x)) (- input.stride.1)))
       (aligned 1 0))
      (vread
       input
       (+ 1 (+ (+ (* input.stride.1 (+ output.s0.y.yi (* 4 output.s0.y.y))) (* 128 output.s0.x.x)) (- input.stride.1)))
       (aligned 1 0)))
     (cons (int8_t (bv #x01 8)) (int8_t (bv #x02 8))))
    (vcombine
     (vread
      input
      (+ -1 (+ input.stride.1 (+ (* input.stride.1 (+ output.s0.y.yi (* 4 output.s0.y.y))) (* 128 output.s0.x.x))))
      (aligned 128 127))
     (vread
      input
      (+ 1 (+ input.stride.1 (+ (* input.stride.1 (+ output.s0.y.yi (* 4 output.s0.y.y))) (* 128 output.s0.x.x))))
      (aligned 128 1)))
    (cons (uint8_t (bv #x01 8)) (uint8_t (bv #x01 8))))
   (vcombine
    (vread
     input
     (+ 1 (+ (* input.stride.1 (+ output.s0.y.yi (* 4 output.s0.y.y))) (* 128 output.s0.x.x)))
     (aligned 128 1))
    (vread
     input
     (+ input.stride.1 (+ (* input.stride.1 (+ output.s0.y.yi (* 4 output.s0.y.y))) (* 128 output.s0.x.x)))
     (aligned 128 0)))
   (cons (int8_t (bv #x02 8)) (int8_t (bv #x02 8))))
  (vcombine
   (vread
    input
    (+ (* input.stride.1 (+ output.s0.y.yi (* 4 output.s0.y.y))) (* 128 output.s0.x.x))
    (aligned 128 0))
   (vread
    input
    (+ -1 (+ (* input.stride.1 (+ output.s0.y.yi (* 4 output.s0.y.y))) (* 128 output.s0.x.x)))
    (aligned 128 127)))
  (cons (uint8_t (bv #x04 8)) (uint8_t (bv #x02 8))))
 (vasr-n (hi 't0) (lo 't0) (int8_t (bv #x04 8)) #t b$16322 #t))

Successfully found a swizzle implementation.

Implementations found for all swizzle nodes!

Final expression:

(let-expr
 't0
 (vmpa-acc
  (vmpa-acc
   (vmpa-acc
    (vtmpy
     (vcombine
      (vread
       input
       (+ -1 (+ (+ (* input.stride.1 (+ output.s0.y.yi (* 4 output.s0.y.y))) (* 128 output.s0.x.x)) (- input.stride.1)))
       (aligned 1 0))
      (vread
       input
       (+ 1 (+ (+ (* input.stride.1 (+ output.s0.y.yi (* 4 output.s0.y.y))) (* 128 output.s0.x.x)) (- input.stride.1)))
       (aligned 1 0)))
     (cons (int8_t (bv #x01 8)) (int8_t (bv #x02 8))))
    (vcombine
     (vread
      input
      (+ -1 (+ input.stride.1 (+ (* input.stride.1 (+ output.s0.y.yi (* 4 output.s0.y.y))) (* 128 output.s0.x.x))))
      (aligned 128 127))
     (vread
      input
      (+ 1 (+ input.stride.1 (+ (* input.stride.1 (+ output.s0.y.yi (* 4 output.s0.y.y))) (* 128 output.s0.x.x))))
      (aligned 128 1)))
    (cons (uint8_t (bv #x01 8)) (uint8_t (bv #x01 8))))
   (vcombine
    (vread
     input
     (+ 1 (+ (* input.stride.1 (+ output.s0.y.yi (* 4 output.s0.y.y))) (* 128 output.s0.x.x)))
     (aligned 128 1))
    (vread
     input
     (+ input.stride.1 (+ (* input.stride.1 (+ output.s0.y.yi (* 4 output.s0.y.y))) (* 128 output.s0.x.x)))
     (aligned 128 0)))
   (cons (int8_t (bv #x02 8)) (int8_t (bv #x02 8))))
  (vcombine
   (vread
    input
    (+ (* input.stride.1 (+ output.s0.y.yi (* 4 output.s0.y.y))) (* 128 output.s0.x.x))
    (aligned 128 0))
   (vread
    input
    (+ -1 (+ (* input.stride.1 (+ output.s0.y.yi (* 4 output.s0.y.y))) (* 128 output.s0.x.x)))
    (aligned 128 127)))
  (cons (uint8_t (bv #x04 8)) (uint8_t (bv #x02 8))))
 (vasr-n (hi 't0) (lo 't0) (int8_t (bv #x04 8)) #t b$16322 #t))

Verifying expression equivalence over full-length vectors...
============================================================
Verification time: 14 seconds


Synthesized solution is correct.