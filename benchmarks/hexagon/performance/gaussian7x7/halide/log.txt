Section: 
Section: .interp
Section: .note.ABI-tag
Section: .note.gnu.build-id
Section: .gnu.hash
Section: .dynsym
Section: .dynstr
Section: .gnu.version
Section: .gnu.version_r
Section: .rela.dyn
Section: .rela.plt
Section: .init
Section: .plt
Section: .text
Section: .fini
Section: .rodata
Section: .eh_frame_hdr
Section: .eh_frame
Section: .gcc_except_table
Section: .init_array
Section: .fini_array
Section: .jcr
Section: .data.rel.ro
Section: .dynamic
Section: .got
Section: .got.plt
Section: .data
Section: .bss
Section: .comment
Section: .debug_aranges
Section: .debug_info
Section: .debug_abbrev
Section: .debug_line
Section: .debug_str
Section: .debug_loc
Section: .debug_ranges
Section: .symtab
Section: .strtab
Section: .shstrtab
Generator gaussian5x5 has base_path bin/gaussian5x5_hvx64
Creating initial loop nests...
Injecting realization of output
for (.__root, 0, 1) {
  produce output {
    let output.s0.y.loop_max = output.s0.y.max
    let output.s0.y.loop_min = output.s0.y.min
    let output.s0.y.loop_extent = ((output.s0.y.max + 1) - output.s0.y.min)
    let output.s0.x.loop_max = output.s0.x.max
    let output.s0.x.loop_min = output.s0.x.min
    let output.s0.x.loop_extent = ((output.s0.x.max + 1) - output.s0.x.min)
    let output.s0.__outermost.loop_extent = 1
    let output.s0.__outermost.loop_max = 0
    let output.s0.__outermost.loop_min = 0
    let output.s0.y.y.loop_extent = (((output.s0.y.loop_max - output.s0.y.loop_min) + 4)/4)
    let output.s0.y.y.loop_max = ((((output.s0.y.loop_max - output.s0.y.loop_min) + 4)/4) - 1)
    let output.s0.y.y.loop_min = 0
    let output.s0.y.yi.loop_extent = 4
    let output.s0.y.yi.loop_max = (4 - 1)
    let output.s0.y.yi.loop_min = 0
    let output.s0.x.x.loop_extent = (((output.s0.x.loop_max - output.s0.x.loop_min) + 64)/64)
    let output.s0.x.x.loop_max = ((((output.s0.x.loop_max - output.s0.x.loop_min) + 64)/64) - 1)
    let output.s0.x.x.loop_min = 0
    let output.s0.x.v16.loop_extent = 64
    let output.s0.x.v16.loop_max = (64 - 1)
    let output.s0.x.v16.loop_min = 0
    for<Hexagon> (output.s0.__outermost, output.s0.__outermost.loop_min, output.s0.__outermost.loop_extent) {
      for (output.s0.y.y, output.s0.y.y.loop_min, output.s0.y.y.loop_extent) {
        prefetch input()
        let output.s0.y.yi.base = ((output.s0.y.y*4) + output.s0.y.loop_min)
        for (output.s0.y.yi, output.s0.y.yi.loop_min, output.s0.y.yi.loop_extent) {
          let output.s0.y = (output.s0.y.yi.base + output.s0.y.yi)
          for (output.s0.x.x, output.s0.x.x.loop_min, output.s0.x.x.loop_extent) {
            let output.s0.x.v16.base = ((output.s0.x.x*64) + output.s0.x.loop_min)
            vectorized (output.s0.x.v16, output.s0.x.v16.loop_min, output.s0.x.v16.loop_extent) {
              let output.s0.x = (output.s0.x.v16.base + output.s0.x.v16)
              output((output.s0.x.v16.base + output.s0.x.v16), (output.s0.y.yi.base + output.s0.y.yi)) = uint8(shift_right(cols((output.s0.x.v16.base + output.s0.x.v16), (output.s0.y.yi.base + output.s0.y.yi)), (int16)8))
            }
          }
        }
      }
    }
  }
}

Inlining cols
for (.__root, 0, 1) {
  produce output {
    let output.s0.y.loop_max = output.s0.y.max
    let output.s0.y.loop_min = output.s0.y.min
    let output.s0.y.loop_extent = ((output.s0.y.max + 1) - output.s0.y.min)
    let output.s0.x.loop_max = output.s0.x.max
    let output.s0.x.loop_min = output.s0.x.min
    let output.s0.x.loop_extent = ((output.s0.x.max + 1) - output.s0.x.min)
    let output.s0.__outermost.loop_extent = 1
    let output.s0.__outermost.loop_max = 0
    let output.s0.__outermost.loop_min = 0
    let output.s0.y.y.loop_extent = (((output.s0.y.loop_max - output.s0.y.loop_min) + 4)/4)
    let output.s0.y.y.loop_max = ((((output.s0.y.loop_max - output.s0.y.loop_min) + 4)/4) - 1)
    let output.s0.y.y.loop_min = 0
    let output.s0.y.yi.loop_extent = 4
    let output.s0.y.yi.loop_max = (4 - 1)
    let output.s0.y.yi.loop_min = 0
    let output.s0.x.x.loop_extent = (((output.s0.x.loop_max - output.s0.x.loop_min) + 64)/64)
    let output.s0.x.x.loop_max = ((((output.s0.x.loop_max - output.s0.x.loop_min) + 64)/64) - 1)
    let output.s0.x.x.loop_min = 0
    let output.s0.x.v16.loop_extent = 64
    let output.s0.x.v16.loop_max = (64 - 1)
    let output.s0.x.v16.loop_min = 0
    for<Hexagon> (output.s0.__outermost, output.s0.__outermost.loop_min, output.s0.__outermost.loop_extent) {
      for (output.s0.y.y, output.s0.y.y.loop_min, output.s0.y.y.loop_extent) {
        prefetch input()
        let output.s0.y.yi.base = ((output.s0.y.y*4) + output.s0.y.loop_min)
        for (output.s0.y.yi, output.s0.y.yi.loop_min, output.s0.y.yi.loop_extent) {
          let output.s0.y = (output.s0.y.yi.base + output.s0.y.yi)
          for (output.s0.x.x, output.s0.x.x.loop_min, output.s0.x.x.loop_extent) {
            let output.s0.x.v16.base = ((output.s0.x.x*64) + output.s0.x.loop_min)
            vectorized (output.s0.x.v16, output.s0.x.v16.loop_min, output.s0.x.v16.loop_extent) {
              let output.s0.x = (output.s0.x.v16.base + output.s0.x.v16)
              output((output.s0.x.v16.base + output.s0.x.v16), (output.s0.y.yi.base + output.s0.y.yi)) = (let t0 = (output.s0.y.yi.base + output.s0.y.yi) in (let t1 = (output.s0.x.v16.base + output.s0.x.v16) in uint8(shift_right(((((rows((t1 - 2), t0) + ((int16)4*rows((t1 - 1), t0))) + ((int16)6*rows(t1, t0))) + ((int16)4*rows((t1 + 1), t0))) + rows((t1 + 2), t0)), (int16)8))))
            }
          }
        }
      }
    }
  }
}

Injecting realization of rows
for (.__root, 0, 1) {
  produce output {
    let output.s0.y.loop_max = output.s0.y.max
    let output.s0.y.loop_min = output.s0.y.min
    let output.s0.y.loop_extent = ((output.s0.y.max + 1) - output.s0.y.min)
    let output.s0.x.loop_max = output.s0.x.max
    let output.s0.x.loop_min = output.s0.x.min
    let output.s0.x.loop_extent = ((output.s0.x.max + 1) - output.s0.x.min)
    let output.s0.__outermost.loop_extent = 1
    let output.s0.__outermost.loop_max = 0
    let output.s0.__outermost.loop_min = 0
    let output.s0.y.y.loop_extent = (((output.s0.y.loop_max - output.s0.y.loop_min) + 4)/4)
    let output.s0.y.y.loop_max = ((((output.s0.y.loop_max - output.s0.y.loop_min) + 4)/4) - 1)
    let output.s0.y.y.loop_min = 0
    let output.s0.y.yi.loop_extent = 4
    let output.s0.y.yi.loop_max = (4 - 1)
    let output.s0.y.yi.loop_min = 0
    let output.s0.x.x.loop_extent = (((output.s0.x.loop_max - output.s0.x.loop_min) + 64)/64)
    let output.s0.x.x.loop_max = ((((output.s0.x.loop_max - output.s0.x.loop_min) + 64)/64) - 1)
    let output.s0.x.x.loop_min = 0
    let output.s0.x.v16.loop_extent = 64
    let output.s0.x.v16.loop_max = (64 - 1)
    let output.s0.x.v16.loop_min = 0
    for<Hexagon> (output.s0.__outermost, output.s0.__outermost.loop_min, output.s0.__outermost.loop_extent) {
      for (output.s0.y.y, output.s0.y.y.loop_min, output.s0.y.y.loop_extent) {
        prefetch input()
        let output.s0.y.yi.base = ((output.s0.y.y*4) + output.s0.y.loop_min)
        for (output.s0.y.yi, output.s0.y.yi.loop_min, output.s0.y.yi.loop_extent) {
          let output.s0.y = (output.s0.y.yi.base + output.s0.y.yi)
          realize rows([rows.x.min_realized, rows.x.extent_realized], [rows.y.min_realized, rows.y.extent_realized]) {
            for (output.s0.x.x, output.s0.x.x.loop_min, output.s0.x.x.loop_extent) {
              let output.s0.x.v16.base = ((output.s0.x.x*64) + output.s0.x.loop_min)
              produce rows {
                let rows.s0.y.loop_max = rows.s0.y.max
                let rows.s0.y.loop_min = rows.s0.y.min
                let rows.s0.y.loop_extent = ((rows.s0.y.max + 1) - rows.s0.y.min)
                let rows.s0.x.loop_max = rows.s0.x.max
                let rows.s0.x.loop_min = rows.s0.x.min
                let rows.s0.x.loop_extent = ((rows.s0.x.max + 1) - rows.s0.x.min)
                let rows.s0.__outermost.loop_extent = 1
                let rows.s0.__outermost.loop_max = 0
                let rows.s0.__outermost.loop_min = 0
                let rows.s0.x.x.loop_extent = (((rows.s0.x.loop_max - rows.s0.x.loop_min) + 64)/64)
                let rows.s0.x.x.loop_max = ((((rows.s0.x.loop_max - rows.s0.x.loop_min) + 64)/64) - 1)
                let rows.s0.x.x.loop_min = 0
                let rows.s0.x.v19.loop_extent = 64
                let rows.s0.x.v19.loop_max = (64 - 1)
                let rows.s0.x.v19.loop_min = 0
                for (rows.s0.__outermost, rows.s0.__outermost.loop_min, rows.s0.__outermost.loop_extent) {
                  for (rows.s0.y, rows.s0.y.loop_min, rows.s0.y.loop_extent) {
                    for (rows.s0.x.x, rows.s0.x.x.loop_min, rows.s0.x.x.loop_extent) {
                      let rows.s0.x.v19.base = ((rows.s0.x.x*64) + rows.s0.x.loop_min)
                      vectorized (rows.s0.x.v19, rows.s0.x.v19.loop_min, rows.s0.x.v19.loop_extent) {
                        let rows.s0.x = (rows.s0.x.v19.base + rows.s0.x.v19)
                        rows((rows.s0.x.v19.base + rows.s0.x.v19), rows.s0.y) = ((((input_16((rows.s0.x.v19.base + rows.s0.x.v19), (rows.s0.y - 2)) + ((int16)4*input_16((rows.s0.x.v19.base + rows.s0.x.v19), (rows.s0.y - 1)))) + ((int16)6*input_16((rows.s0.x.v19.base + rows.s0.x.v19), rows.s0.y))) + ((int16)4*input_16((rows.s0.x.v19.base + rows.s0.x.v19), (rows.s0.y + 1)))) + input_16((rows.s0.x.v19.base + rows.s0.x.v19), (rows.s0.y + 2)))
                      }
                    }
                  }
                }
              }
              consume rows {
                vectorized (output.s0.x.v16, output.s0.x.v16.loop_min, output.s0.x.v16.loop_extent) {
                  let output.s0.x = (output.s0.x.v16.base + output.s0.x.v16)
                  output((output.s0.x.v16.base + output.s0.x.v16), (output.s0.y.yi.base + output.s0.y.yi)) = (let t0 = (output.s0.y.yi.base + output.s0.y.yi) in (let t1 = (output.s0.x.v16.base + output.s0.x.v16) in uint8(shift_right(((((rows((t1 - 2), t0) + ((int16)4*rows((t1 - 1), t0))) + ((int16)6*rows(t1, t0))) + ((int16)4*rows((t1 + 1), t0))) + rows((t1 + 2), t0)), (int16)8))))
                }
              }
            }
          }
        }
      }
    }
  }
}

Inlining input_16
for (.__root, 0, 1) {
  produce output {
    let output.s0.y.loop_max = output.s0.y.max
    let output.s0.y.loop_min = output.s0.y.min
    let output.s0.y.loop_extent = ((output.s0.y.max + 1) - output.s0.y.min)
    let output.s0.x.loop_max = output.s0.x.max
    let output.s0.x.loop_min = output.s0.x.min
    let output.s0.x.loop_extent = ((output.s0.x.max + 1) - output.s0.x.min)
    let output.s0.__outermost.loop_extent = 1
    let output.s0.__outermost.loop_max = 0
    let output.s0.__outermost.loop_min = 0
    let output.s0.y.y.loop_extent = (((output.s0.y.loop_max - output.s0.y.loop_min) + 4)/4)
    let output.s0.y.y.loop_max = ((((output.s0.y.loop_max - output.s0.y.loop_min) + 4)/4) - 1)
    let output.s0.y.y.loop_min = 0
    let output.s0.y.yi.loop_extent = 4
    let output.s0.y.yi.loop_max = (4 - 1)
    let output.s0.y.yi.loop_min = 0
    let output.s0.x.x.loop_extent = (((output.s0.x.loop_max - output.s0.x.loop_min) + 64)/64)
    let output.s0.x.x.loop_max = ((((output.s0.x.loop_max - output.s0.x.loop_min) + 64)/64) - 1)
    let output.s0.x.x.loop_min = 0
    let output.s0.x.v16.loop_extent = 64
    let output.s0.x.v16.loop_max = (64 - 1)
    let output.s0.x.v16.loop_min = 0
    for<Hexagon> (output.s0.__outermost, output.s0.__outermost.loop_min, output.s0.__outermost.loop_extent) {
      for (output.s0.y.y, output.s0.y.y.loop_min, output.s0.y.y.loop_extent) {
        prefetch input()
        let output.s0.y.yi.base = ((output.s0.y.y*4) + output.s0.y.loop_min)
        for (output.s0.y.yi, output.s0.y.yi.loop_min, output.s0.y.yi.loop_extent) {
          let output.s0.y = (output.s0.y.yi.base + output.s0.y.yi)
          realize rows([rows.x.min_realized, rows.x.extent_realized], [rows.y.min_realized, rows.y.extent_realized]) {
            for (output.s0.x.x, output.s0.x.x.loop_min, output.s0.x.x.loop_extent) {
              let output.s0.x.v16.base = ((output.s0.x.x*64) + output.s0.x.loop_min)
              produce rows {
                let rows.s0.y.loop_max = rows.s0.y.max
                let rows.s0.y.loop_min = rows.s0.y.min
                let rows.s0.y.loop_extent = ((rows.s0.y.max + 1) - rows.s0.y.min)
                let rows.s0.x.loop_max = rows.s0.x.max
                let rows.s0.x.loop_min = rows.s0.x.min
                let rows.s0.x.loop_extent = ((rows.s0.x.max + 1) - rows.s0.x.min)
                let rows.s0.__outermost.loop_extent = 1
                let rows.s0.__outermost.loop_max = 0
                let rows.s0.__outermost.loop_min = 0
                let rows.s0.x.x.loop_extent = (((rows.s0.x.loop_max - rows.s0.x.loop_min) + 64)/64)
                let rows.s0.x.x.loop_max = ((((rows.s0.x.loop_max - rows.s0.x.loop_min) + 64)/64) - 1)
                let rows.s0.x.x.loop_min = 0
                let rows.s0.x.v19.loop_extent = 64
                let rows.s0.x.v19.loop_max = (64 - 1)
                let rows.s0.x.v19.loop_min = 0
                for (rows.s0.__outermost, rows.s0.__outermost.loop_min, rows.s0.__outermost.loop_extent) {
                  for (rows.s0.y, rows.s0.y.loop_min, rows.s0.y.loop_extent) {
                    for (rows.s0.x.x, rows.s0.x.x.loop_min, rows.s0.x.x.loop_extent) {
                      let rows.s0.x.v19.base = ((rows.s0.x.x*64) + rows.s0.x.loop_min)
                      vectorized (rows.s0.x.v19, rows.s0.x.v19.loop_min, rows.s0.x.v19.loop_extent) {
                        let rows.s0.x = (rows.s0.x.v19.base + rows.s0.x.v19)
                        rows((rows.s0.x.v19.base + rows.s0.x.v19), rows.s0.y) = (let t2 = (rows.s0.x.v19.base + rows.s0.x.v19) in ((((int16(input_im(t2, (rows.s0.y - 2))) + ((int16)4*int16(input_im(t2, (rows.s0.y - 1))))) + ((int16)6*int16(input_im(t2, rows.s0.y)))) + ((int16)4*int16(input_im(t2, (rows.s0.y + 1))))) + int16(input_im(t2, (rows.s0.y + 2)))))
                      }
                    }
                  }
                }
              }
              consume rows {
                vectorized (output.s0.x.v16, output.s0.x.v16.loop_min, output.s0.x.v16.loop_extent) {
                  let output.s0.x = (output.s0.x.v16.base + output.s0.x.v16)
                  output((output.s0.x.v16.base + output.s0.x.v16), (output.s0.y.yi.base + output.s0.y.yi)) = (let t0 = (output.s0.y.yi.base + output.s0.y.yi) in (let t1 = (output.s0.x.v16.base + output.s0.x.v16) in uint8(shift_right(((((rows((t1 - 2), t0) + ((int16)4*rows((t1 - 1), t0))) + ((int16)6*rows(t1, t0))) + ((int16)4*rows((t1 + 1), t0))) + rows((t1 + 2), t0)), (int16)8))))
                }
              }
            }
          }
        }
      }
    }
  }
}

Inlining input_im
for (.__root, 0, 1) {
  produce output {
    let output.s0.y.loop_max = output.s0.y.max
    let output.s0.y.loop_min = output.s0.y.min
    let output.s0.y.loop_extent = ((output.s0.y.max + 1) - output.s0.y.min)
    let output.s0.x.loop_max = output.s0.x.max
    let output.s0.x.loop_min = output.s0.x.min
    let output.s0.x.loop_extent = ((output.s0.x.max + 1) - output.s0.x.min)
    let output.s0.__outermost.loop_extent = 1
    let output.s0.__outermost.loop_max = 0
    let output.s0.__outermost.loop_min = 0
    let output.s0.y.y.loop_extent = (((output.s0.y.loop_max - output.s0.y.loop_min) + 4)/4)
    let output.s0.y.y.loop_max = ((((output.s0.y.loop_max - output.s0.y.loop_min) + 4)/4) - 1)
    let output.s0.y.y.loop_min = 0
    let output.s0.y.yi.loop_extent = 4
    let output.s0.y.yi.loop_max = (4 - 1)
    let output.s0.y.yi.loop_min = 0
    let output.s0.x.x.loop_extent = (((output.s0.x.loop_max - output.s0.x.loop_min) + 64)/64)
    let output.s0.x.x.loop_max = ((((output.s0.x.loop_max - output.s0.x.loop_min) + 64)/64) - 1)
    let output.s0.x.x.loop_min = 0
    let output.s0.x.v16.loop_extent = 64
    let output.s0.x.v16.loop_max = (64 - 1)
    let output.s0.x.v16.loop_min = 0
    for<Hexagon> (output.s0.__outermost, output.s0.__outermost.loop_min, output.s0.__outermost.loop_extent) {
      for (output.s0.y.y, output.s0.y.y.loop_min, output.s0.y.y.loop_extent) {
        prefetch input()
        let output.s0.y.yi.base = ((output.s0.y.y*4) + output.s0.y.loop_min)
        for (output.s0.y.yi, output.s0.y.yi.loop_min, output.s0.y.yi.loop_extent) {
          let output.s0.y = (output.s0.y.yi.base + output.s0.y.yi)
          realize rows([rows.x.min_realized, rows.x.extent_realized], [rows.y.min_realized, rows.y.extent_realized]) {
            for (output.s0.x.x, output.s0.x.x.loop_min, output.s0.x.x.loop_extent) {
              let output.s0.x.v16.base = ((output.s0.x.x*64) + output.s0.x.loop_min)
              produce rows {
                let rows.s0.y.loop_max = rows.s0.y.max
                let rows.s0.y.loop_min = rows.s0.y.min
                let rows.s0.y.loop_extent = ((rows.s0.y.max + 1) - rows.s0.y.min)
                let rows.s0.x.loop_max = rows.s0.x.max
                let rows.s0.x.loop_min = rows.s0.x.min
                let rows.s0.x.loop_extent = ((rows.s0.x.max + 1) - rows.s0.x.min)
                let rows.s0.__outermost.loop_extent = 1
                let rows.s0.__outermost.loop_max = 0
                let rows.s0.__outermost.loop_min = 0
                let rows.s0.x.x.loop_extent = (((rows.s0.x.loop_max - rows.s0.x.loop_min) + 64)/64)
                let rows.s0.x.x.loop_max = ((((rows.s0.x.loop_max - rows.s0.x.loop_min) + 64)/64) - 1)
                let rows.s0.x.x.loop_min = 0
                let rows.s0.x.v19.loop_extent = 64
                let rows.s0.x.v19.loop_max = (64 - 1)
                let rows.s0.x.v19.loop_min = 0
                for (rows.s0.__outermost, rows.s0.__outermost.loop_min, rows.s0.__outermost.loop_extent) {
                  for (rows.s0.y, rows.s0.y.loop_min, rows.s0.y.loop_extent) {
                    for (rows.s0.x.x, rows.s0.x.x.loop_min, rows.s0.x.x.loop_extent) {
                      let rows.s0.x.v19.base = ((rows.s0.x.x*64) + rows.s0.x.loop_min)
                      vectorized (rows.s0.x.v19, rows.s0.x.v19.loop_min, rows.s0.x.v19.loop_extent) {
                        let rows.s0.x = (rows.s0.x.v19.base + rows.s0.x.v19)
                        rows((rows.s0.x.v19.base + rows.s0.x.v19), rows.s0.y) = (let t3 = (rows.s0.x.v19.base + rows.s0.x.v19) in ((((int16(input(t3, (rows.s0.y - 2))) + ((int16)4*int16(input(t3, (rows.s0.y - 1))))) + ((int16)6*int16(input(t3, rows.s0.y)))) + ((int16)4*int16(input(t3, (rows.s0.y + 1))))) + int16(input(t3, (rows.s0.y + 2)))))
                      }
                    }
                  }
                }
              }
              consume rows {
                vectorized (output.s0.x.v16, output.s0.x.v16.loop_min, output.s0.x.v16.loop_extent) {
                  let output.s0.x = (output.s0.x.v16.base + output.s0.x.v16)
                  output((output.s0.x.v16.base + output.s0.x.v16), (output.s0.y.yi.base + output.s0.y.yi)) = (let t0 = (output.s0.y.yi.base + output.s0.y.yi) in (let t1 = (output.s0.x.v16.base + output.s0.x.v16) in uint8(shift_right(((((rows((t1 - 2), t0) + ((int16)4*rows((t1 - 1), t0))) + ((int16)6*rows(t1, t0))) + ((int16)4*rows((t1 + 1), t0))) + rows((t1 + 2), t0)), (int16)8))))
                }
              }
            }
          }
        }
      }
    }
  }
}

Lowering after creating initial loop nests:
produce output {
  let output.s0.y.loop_max = output.s0.y.max
  let output.s0.y.loop_min = output.s0.y.min
  let output.s0.y.loop_extent = ((output.s0.y.max + 1) - output.s0.y.min)
  let output.s0.x.loop_max = output.s0.x.max
  let output.s0.x.loop_min = output.s0.x.min
  let output.s0.x.loop_extent = ((output.s0.x.max + 1) - output.s0.x.min)
  let output.s0.y.y.loop_extent = (((output.s0.y.loop_max - output.s0.y.loop_min) + 4)/4)
  let output.s0.y.y.loop_max = ((((output.s0.y.loop_max - output.s0.y.loop_min) + 4)/4) - 1)
  let output.s0.y.y.loop_min = 0
  let output.s0.y.yi.loop_extent = 4
  let output.s0.y.yi.loop_max = (4 - 1)
  let output.s0.y.yi.loop_min = 0
  let output.s0.x.x.loop_extent = (((output.s0.x.loop_max - output.s0.x.loop_min) + 64)/64)
  let output.s0.x.x.loop_max = ((((output.s0.x.loop_max - output.s0.x.loop_min) + 64)/64) - 1)
  let output.s0.x.x.loop_min = 0
  let output.s0.x.v16.loop_extent = 64
  let output.s0.x.v16.loop_max = (64 - 1)
  let output.s0.x.v16.loop_min = 0
  for<Hexagon> (output.s0.__outermost, 0, 1) {
    for (output.s0.y.y, output.s0.y.y.loop_min, output.s0.y.y.loop_extent) {
      prefetch input()
      let output.s0.y.yi.base = ((output.s0.y.y*4) + output.s0.y.loop_min)
      for (output.s0.y.yi, output.s0.y.yi.loop_min, output.s0.y.yi.loop_extent) {
        let output.s0.y = (output.s0.y.yi.base + output.s0.y.yi)
        realize rows([rows.x.min_realized, rows.x.extent_realized], [rows.y.min_realized, rows.y.extent_realized]) {
          for (output.s0.x.x, output.s0.x.x.loop_min, output.s0.x.x.loop_extent) {
            let output.s0.x.v16.base = ((output.s0.x.x*64) + output.s0.x.loop_min)
            produce rows {
              let rows.s0.y.loop_max = rows.s0.y.max
              let rows.s0.y.loop_min = rows.s0.y.min
              let rows.s0.y.loop_extent = ((rows.s0.y.max + 1) - rows.s0.y.min)
              let rows.s0.x.loop_max = rows.s0.x.max
              let rows.s0.x.loop_min = rows.s0.x.min
              let rows.s0.x.loop_extent = ((rows.s0.x.max + 1) - rows.s0.x.min)
              let rows.s0.x.x.loop_extent = (((rows.s0.x.loop_max - rows.s0.x.loop_min) + 64)/64)
              let rows.s0.x.x.loop_max = ((((rows.s0.x.loop_max - rows.s0.x.loop_min) + 64)/64) - 1)
              let rows.s0.x.x.loop_min = 0
              let rows.s0.x.v19.loop_extent = 64
              let rows.s0.x.v19.loop_max = (64 - 1)
              let rows.s0.x.v19.loop_min = 0
              for (rows.s0.y, rows.s0.y.loop_min, rows.s0.y.loop_extent) {
                for (rows.s0.x.x, rows.s0.x.x.loop_min, rows.s0.x.x.loop_extent) {
                  let rows.s0.x.v19.base = ((rows.s0.x.x*64) + rows.s0.x.loop_min)
                  vectorized (rows.s0.x.v19, rows.s0.x.v19.loop_min, rows.s0.x.v19.loop_extent) {
                    let rows.s0.x = (rows.s0.x.v19.base + rows.s0.x.v19)
                    rows((rows.s0.x.v19.base + rows.s0.x.v19), rows.s0.y) = (let t3 = (rows.s0.x.v19.base + rows.s0.x.v19) in ((((int16(input(t3, (rows.s0.y - 2))) + ((int16)4*int16(input(t3, (rows.s0.y - 1))))) + ((int16)6*int16(input(t3, rows.s0.y)))) + ((int16)4*int16(input(t3, (rows.s0.y + 1))))) + int16(input(t3, (rows.s0.y + 2)))))
                  }
                }
              }
            }
            consume rows {
              vectorized (output.s0.x.v16, output.s0.x.v16.loop_min, output.s0.x.v16.loop_extent) {
                let output.s0.x = (output.s0.x.v16.base + output.s0.x.v16)
                output((output.s0.x.v16.base + output.s0.x.v16), (output.s0.y.yi.base + output.s0.y.yi)) = (let t0 = (output.s0.y.yi.base + output.s0.y.yi) in (let t1 = (output.s0.x.v16.base + output.s0.x.v16) in uint8(shift_right(((((rows((t1 - 2), t0) + ((int16)4*rows((t1 - 1), t0))) + ((int16)6*rows(t1, t0))) + ((int16)4*rows((t1 + 1), t0))) + rows((t1 + 2), t0)), (int16)8))))
              }
            }
          }
        }
      }
    }
  }
}

Canonicalizing GPU var names...
Lowering after canonicalizing GPU var names:
produce output {
  let output.s0.y.loop_max = output.s0.y.max
  let output.s0.y.loop_min = output.s0.y.min
  let output.s0.y.loop_extent = ((output.s0.y.max + 1) - output.s0.y.min)
  let output.s0.x.loop_max = output.s0.x.max
  let output.s0.x.loop_min = output.s0.x.min
  let output.s0.x.loop_extent = ((output.s0.x.max + 1) - output.s0.x.min)
  let output.s0.y.y.loop_extent = (((output.s0.y.loop_max - output.s0.y.loop_min) + 4)/4)
  let output.s0.y.y.loop_max = ((((output.s0.y.loop_max - output.s0.y.loop_min) + 4)/4) - 1)
  let output.s0.y.y.loop_min = 0
  let output.s0.y.yi.loop_extent = 4
  let output.s0.y.yi.loop_max = (4 - 1)
  let output.s0.y.yi.loop_min = 0
  let output.s0.x.x.loop_extent = (((output.s0.x.loop_max - output.s0.x.loop_min) + 64)/64)
  let output.s0.x.x.loop_max = ((((output.s0.x.loop_max - output.s0.x.loop_min) + 64)/64) - 1)
  let output.s0.x.x.loop_min = 0
  let output.s0.x.v16.loop_extent = 64
  let output.s0.x.v16.loop_max = (64 - 1)
  let output.s0.x.v16.loop_min = 0
  for<Hexagon> (output.s0.__outermost, 0, 1) {
    for (output.s0.y.y, output.s0.y.y.loop_min, output.s0.y.y.loop_extent) {
      prefetch input()
      let output.s0.y.yi.base = ((output.s0.y.y*4) + output.s0.y.loop_min)
      for (output.s0.y.yi, output.s0.y.yi.loop_min, output.s0.y.yi.loop_extent) {
        let output.s0.y = (output.s0.y.yi.base + output.s0.y.yi)
        realize rows([rows.x.min_realized, rows.x.extent_realized], [rows.y.min_realized, rows.y.extent_realized]) {
          for (output.s0.x.x, output.s0.x.x.loop_min, output.s0.x.x.loop_extent) {
            let output.s0.x.v16.base = ((output.s0.x.x*64) + output.s0.x.loop_min)
            produce rows {
              let rows.s0.y.loop_max = rows.s0.y.max
              let rows.s0.y.loop_min = rows.s0.y.min
              let rows.s0.y.loop_extent = ((rows.s0.y.max + 1) - rows.s0.y.min)
              let rows.s0.x.loop_max = rows.s0.x.max
              let rows.s0.x.loop_min = rows.s0.x.min
              let rows.s0.x.loop_extent = ((rows.s0.x.max + 1) - rows.s0.x.min)
              let rows.s0.x.x.loop_extent = (((rows.s0.x.loop_max - rows.s0.x.loop_min) + 64)/64)
              let rows.s0.x.x.loop_max = ((((rows.s0.x.loop_max - rows.s0.x.loop_min) + 64)/64) - 1)
              let rows.s0.x.x.loop_min = 0
              let rows.s0.x.v19.loop_extent = 64
              let rows.s0.x.v19.loop_max = (64 - 1)
              let rows.s0.x.v19.loop_min = 0
              for (rows.s0.y, rows.s0.y.loop_min, rows.s0.y.loop_extent) {
                for (rows.s0.x.x, rows.s0.x.x.loop_min, rows.s0.x.x.loop_extent) {
                  let rows.s0.x.v19.base = ((rows.s0.x.x*64) + rows.s0.x.loop_min)
                  vectorized (rows.s0.x.v19, rows.s0.x.v19.loop_min, rows.s0.x.v19.loop_extent) {
                    let rows.s0.x = (rows.s0.x.v19.base + rows.s0.x.v19)
                    rows((rows.s0.x.v19.base + rows.s0.x.v19), rows.s0.y) = (let t3 = (rows.s0.x.v19.base + rows.s0.x.v19) in ((((int16(input(t3, (rows.s0.y - 2))) + ((int16)4*int16(input(t3, (rows.s0.y - 1))))) + ((int16)6*int16(input(t3, rows.s0.y)))) + ((int16)4*int16(input(t3, (rows.s0.y + 1))))) + int16(input(t3, (rows.s0.y + 2)))))
                  }
                }
              }
            }
            consume rows {
              vectorized (output.s0.x.v16, output.s0.x.v16.loop_min, output.s0.x.v16.loop_extent) {
                let output.s0.x = (output.s0.x.v16.base + output.s0.x.v16)
                output((output.s0.x.v16.base + output.s0.x.v16), (output.s0.y.yi.base + output.s0.y.yi)) = (let t0 = (output.s0.y.yi.base + output.s0.y.yi) in (let t1 = (output.s0.x.v16.base + output.s0.x.v16) in uint8(shift_right(((((rows((t1 - 2), t0) + ((int16)4*rows((t1 - 1), t0))) + ((int16)6*rows(t1, t0))) + ((int16)4*rows((t1 + 1), t0))) + rows((t1 + 2), t0)), (int16)8))))
              }
            }
          }
        }
      }
    }
  }
}

Skipping injecting memoization...
Injecting tracing...
Lowering after injecting tracing:
produce output {
  let output.s0.y.loop_max = output.s0.y.max
  let output.s0.y.loop_min = output.s0.y.min
  let output.s0.y.loop_extent = ((output.s0.y.max + 1) - output.s0.y.min)
  let output.s0.x.loop_max = output.s0.x.max
  let output.s0.x.loop_min = output.s0.x.min
  let output.s0.x.loop_extent = ((output.s0.x.max + 1) - output.s0.x.min)
  let output.s0.y.y.loop_extent = (((output.s0.y.loop_max - output.s0.y.loop_min) + 4)/4)
  let output.s0.y.y.loop_max = ((((output.s0.y.loop_max - output.s0.y.loop_min) + 4)/4) - 1)
  let output.s0.y.y.loop_min = 0
  let output.s0.y.yi.loop_extent = 4
  let output.s0.y.yi.loop_max = (4 - 1)
  let output.s0.y.yi.loop_min = 0
  let output.s0.x.x.loop_extent = (((output.s0.x.loop_max - output.s0.x.loop_min) + 64)/64)
  let output.s0.x.x.loop_max = ((((output.s0.x.loop_max - output.s0.x.loop_min) + 64)/64) - 1)
  let output.s0.x.x.loop_min = 0
  let output.s0.x.v16.loop_extent = 64
  let output.s0.x.v16.loop_max = (64 - 1)
  let output.s0.x.v16.loop_min = 0
  for<Hexagon> (output.s0.__outermost, 0, 1) {
    for (output.s0.y.y, output.s0.y.y.loop_min, output.s0.y.y.loop_extent) {
      prefetch input()
      let output.s0.y.yi.base = ((output.s0.y.y*4) + output.s0.y.loop_min)
      for (output.s0.y.yi, output.s0.y.yi.loop_min, output.s0.y.yi.loop_extent) {
        let output.s0.y = (output.s0.y.yi.base + output.s0.y.yi)
        realize rows([rows.x.min_realized, rows.x.extent_realized], [rows.y.min_realized, rows.y.extent_realized]) {
          for (output.s0.x.x, output.s0.x.x.loop_min, output.s0.x.x.loop_extent) {
            let output.s0.x.v16.base = ((output.s0.x.x*64) + output.s0.x.loop_min)
            produce rows {
              let rows.s0.y.loop_max = rows.s0.y.max
              let rows.s0.y.loop_min = rows.s0.y.min
              let rows.s0.y.loop_extent = ((rows.s0.y.max + 1) - rows.s0.y.min)
              let rows.s0.x.loop_max = rows.s0.x.max
              let rows.s0.x.loop_min = rows.s0.x.min
              let rows.s0.x.loop_extent = ((rows.s0.x.max + 1) - rows.s0.x.min)
              let rows.s0.x.x.loop_extent = (((rows.s0.x.loop_max - rows.s0.x.loop_min) + 64)/64)
              let rows.s0.x.x.loop_max = ((((rows.s0.x.loop_max - rows.s0.x.loop_min) + 64)/64) - 1)
              let rows.s0.x.x.loop_min = 0
              let rows.s0.x.v19.loop_extent = 64
              let rows.s0.x.v19.loop_max = (64 - 1)
              let rows.s0.x.v19.loop_min = 0
              for (rows.s0.y, rows.s0.y.loop_min, rows.s0.y.loop_extent) {
                for (rows.s0.x.x, rows.s0.x.x.loop_min, rows.s0.x.x.loop_extent) {
                  let rows.s0.x.v19.base = ((rows.s0.x.x*64) + rows.s0.x.loop_min)
                  vectorized (rows.s0.x.v19, rows.s0.x.v19.loop_min, rows.s0.x.v19.loop_extent) {
                    let rows.s0.x = (rows.s0.x.v19.base + rows.s0.x.v19)
                    rows((rows.s0.x.v19.base + rows.s0.x.v19), rows.s0.y) = (let t3 = (rows.s0.x.v19.base + rows.s0.x.v19) in ((((int16(input(t3, (rows.s0.y - 2))) + ((int16)4*int16(input(t3, (rows.s0.y - 1))))) + ((int16)6*int16(input(t3, rows.s0.y)))) + ((int16)4*int16(input(t3, (rows.s0.y + 1))))) + int16(input(t3, (rows.s0.y + 2)))))
                  }
                }
              }
            }
            consume rows {
              vectorized (output.s0.x.v16, output.s0.x.v16.loop_min, output.s0.x.v16.loop_extent) {
                let output.s0.x = (output.s0.x.v16.base + output.s0.x.v16)
                output((output.s0.x.v16.base + output.s0.x.v16), (output.s0.y.yi.base + output.s0.y.yi)) = (let t0 = (output.s0.y.yi.base + output.s0.y.yi) in (let t1 = (output.s0.x.v16.base + output.s0.x.v16) in uint8(shift_right(((((rows((t1 - 2), t0) + ((int16)4*rows((t1 - 1), t0))) + ((int16)6*rows(t1, t0))) + ((int16)4*rows((t1 + 1), t0))) + rows((t1 + 2), t0)), (int16)8))))
              }
            }
          }
        }
      }
    }
  }
}

Adding checks for parameters
Lowering after injecting parameter checks:
produce output {
  let output.s0.y.loop_max = output.s0.y.max
  let output.s0.y.loop_min = output.s0.y.min
  let output.s0.y.loop_extent = ((output.s0.y.max + 1) - output.s0.y.min)
  let output.s0.x.loop_max = output.s0.x.max
  let output.s0.x.loop_min = output.s0.x.min
  let output.s0.x.loop_extent = ((output.s0.x.max + 1) - output.s0.x.min)
  let output.s0.y.y.loop_extent = (((output.s0.y.loop_max - output.s0.y.loop_min) + 4)/4)
  let output.s0.y.y.loop_max = ((((output.s0.y.loop_max - output.s0.y.loop_min) + 4)/4) - 1)
  let output.s0.y.y.loop_min = 0
  let output.s0.y.yi.loop_extent = 4
  let output.s0.y.yi.loop_max = (4 - 1)
  let output.s0.y.yi.loop_min = 0
  let output.s0.x.x.loop_extent = (((output.s0.x.loop_max - output.s0.x.loop_min) + 64)/64)
  let output.s0.x.x.loop_max = ((((output.s0.x.loop_max - output.s0.x.loop_min) + 64)/64) - 1)
  let output.s0.x.x.loop_min = 0
  let output.s0.x.v16.loop_extent = 64
  let output.s0.x.v16.loop_max = (64 - 1)
  let output.s0.x.v16.loop_min = 0
  for<Hexagon> (output.s0.__outermost, 0, 1) {
    for (output.s0.y.y, output.s0.y.y.loop_min, output.s0.y.y.loop_extent) {
      prefetch input()
      let output.s0.y.yi.base = ((output.s0.y.y*4) + output.s0.y.loop_min)
      for (output.s0.y.yi, output.s0.y.yi.loop_min, output.s0.y.yi.loop_extent) {
        let output.s0.y = (output.s0.y.yi.base + output.s0.y.yi)
        realize rows([rows.x.min_realized, rows.x.extent_realized], [rows.y.min_realized, rows.y.extent_realized]) {
          for (output.s0.x.x, output.s0.x.x.loop_min, output.s0.x.x.loop_extent) {
            let output.s0.x.v16.base = ((output.s0.x.x*64) + output.s0.x.loop_min)
            produce rows {
              let rows.s0.y.loop_max = rows.s0.y.max
              let rows.s0.y.loop_min = rows.s0.y.min
              let rows.s0.y.loop_extent = ((rows.s0.y.max + 1) - rows.s0.y.min)
              let rows.s0.x.loop_max = rows.s0.x.max
              let rows.s0.x.loop_min = rows.s0.x.min
              let rows.s0.x.loop_extent = ((rows.s0.x.max + 1) - rows.s0.x.min)
              let rows.s0.x.x.loop_extent = (((rows.s0.x.loop_max - rows.s0.x.loop_min) + 64)/64)
              let rows.s0.x.x.loop_max = ((((rows.s0.x.loop_max - rows.s0.x.loop_min) + 64)/64) - 1)
              let rows.s0.x.x.loop_min = 0
              let rows.s0.x.v19.loop_extent = 64
              let rows.s0.x.v19.loop_max = (64 - 1)
              let rows.s0.x.v19.loop_min = 0
              for (rows.s0.y, rows.s0.y.loop_min, rows.s0.y.loop_extent) {
                for (rows.s0.x.x, rows.s0.x.x.loop_min, rows.s0.x.x.loop_extent) {
                  let rows.s0.x.v19.base = ((rows.s0.x.x*64) + rows.s0.x.loop_min)
                  vectorized (rows.s0.x.v19, rows.s0.x.v19.loop_min, rows.s0.x.v19.loop_extent) {
                    let rows.s0.x = (rows.s0.x.v19.base + rows.s0.x.v19)
                    rows((rows.s0.x.v19.base + rows.s0.x.v19), rows.s0.y) = (let t3 = (rows.s0.x.v19.base + rows.s0.x.v19) in ((((int16(input(t3, (rows.s0.y - 2))) + ((int16)4*int16(input(t3, (rows.s0.y - 1))))) + ((int16)6*int16(input(t3, rows.s0.y)))) + ((int16)4*int16(input(t3, (rows.s0.y + 1))))) + int16(input(t3, (rows.s0.y + 2)))))
                  }
                }
              }
            }
            consume rows {
              vectorized (output.s0.x.v16, output.s0.x.v16.loop_min, output.s0.x.v16.loop_extent) {
                let output.s0.x = (output.s0.x.v16.base + output.s0.x.v16)
                output((output.s0.x.v16.base + output.s0.x.v16), (output.s0.y.yi.base + output.s0.y.yi)) = (let t0 = (output.s0.y.yi.base + output.s0.y.yi) in (let t1 = (output.s0.x.v16.base + output.s0.x.v16) in uint8(shift_right(((((rows((t1 - 2), t0) + ((int16)4*rows((t1 - 1), t0))) + ((int16)6*rows(t1, t0))) + ((int16)4*rows((t1 + 1), t0))) + rows((t1 + 2), t0)), (int16)8))))
              }
            }
          }
        }
      }
    }
  }
}

Computing bounds of each function's value
Bounds on value 0 for func input_im are: (uint8)0, (uint8)255
Bounds on value 0 for func input_16 are: (int16)0, (int16)255
Bounds on value 0 for func rows are: (int16)0, (int16)4080
Bounds on value 0 for func cols are: (int16)-32768, (int16)32767
Bounds on value 0 for func output are: (uint8)0, (uint8)255
Adding checks for images
Injecting constraints for input.0
Injecting constraints for input.1
Injecting constraints for output.0
Injecting constraints for output.1
Lowering after injecting image checks:
let input.extent.0.required = (((((((rows.s0.x.max - rows.s0.x.min)/64)*64) + rows.s0.x.min) + 63) + 1) - rows.s0.x.min)
let input.min.0.required = rows.s0.x.min
let input.stride.0.required = 1
let input.extent.1.required = (((rows.s0.y.max + 2) + 1) - (rows.s0.y.min + -2))
let input.min.1.required = (rows.s0.y.min + -2)
let input.stride.1.required = (input.stride.0.required*input.extent.0.required)
let output.extent.0.required = (((((((output.s0.x.max - output.s0.x.min)/64)*64) + output.s0.x.min) + 63) + 1) - (output.s0.x.min + 0))
let output.min.0.required = (output.s0.x.min + 0)
let output.stride.0.required = 1
let output.extent.1.required = (((((((output.s0.y.max - output.s0.y.min)/4)*4) + output.s0.y.min) + 3) + 1) - (output.s0.y.min + 0))
let output.min.1.required = (output.s0.y.min + 0)
let output.stride.1.required = (output.stride.0.required*output.extent.0.required)
let input.stride.0.constrained = 1
let input.min.0.constrained = 0
let input.stride.1.constrained = ((input.stride.1/64)*64)
let input.min.1.constrained = 0
let output.stride.0.constrained = 1
let output.min.0.constrained = 0
let output.stride.1.constrained = ((output.stride.1/64)*64)
let output.min.1.constrained = 0
let input.stride.0.proposed = 1
let input.min.0.proposed = 0
let input.extent.0.proposed = input.extent.0.required
let input.stride.1.proposed = ((input.stride.1.required/64)*64)
let input.min.1.proposed = 0
let input.extent.1.proposed = input.extent.1.required
let output.stride.0.proposed = 1
let output.min.0.proposed = 0
let output.extent.0.proposed = output.extent.0.required
let output.stride.1.proposed = ((output.stride.1.required/64)*64)
let output.min.1.proposed = 0
let output.extent.1.proposed = output.extent.1.required
assert((input.stride.0 == input.stride.0.constrained), 0)
assert((input.min.0 == input.min.0.constrained), 0)
assert((input.stride.1 == input.stride.1.constrained), 0)
assert((input.min.1 == input.min.1.constrained), 0)
assert((output.stride.0 == output.stride.0.constrained), 0)
assert((output.min.0 == output.min.0.constrained), 0)
assert((output.stride.1 == output.stride.1.constrained), 0)
assert((output.min.1 == output.min.1.constrained), 0)
produce output {
  let output.s0.y.loop_max = output.s0.y.max
  let output.s0.y.loop_min = output.s0.y.min
  let output.s0.y.loop_extent = ((output.s0.y.max + 1) - output.s0.y.min)
  let output.s0.x.loop_max = output.s0.x.max
  let output.s0.x.loop_min = output.s0.x.min
  let output.s0.x.loop_extent = ((output.s0.x.max + 1) - output.s0.x.min)
  let output.s0.y.y.loop_extent = (((output.s0.y.loop_max - output.s0.y.loop_min) + 4)/4)
  let output.s0.y.y.loop_max = ((((output.s0.y.loop_max - output.s0.y.loop_min) + 4)/4) - 1)
  let output.s0.y.y.loop_min = 0
  let output.s0.y.yi.loop_extent = 4
  let output.s0.y.yi.loop_max = (4 - 1)
  let output.s0.y.yi.loop_min = 0
  let output.s0.x.x.loop_extent = (((output.s0.x.loop_max - output.s0.x.loop_min) + 64)/64)
  let output.s0.x.x.loop_max = ((((output.s0.x.loop_max - output.s0.x.loop_min) + 64)/64) - 1)
  let output.s0.x.x.loop_min = 0
  let output.s0.x.v16.loop_extent = 64
  let output.s0.x.v16.loop_max = (64 - 1)
  let output.s0.x.v16.loop_min = 0
  for<Hexagon> (output.s0.__outermost, 0, 1) {
    for (output.s0.y.y, output.s0.y.y.loop_min, output.s0.y.y.loop_extent) {
      prefetch input()
      let output.s0.y.yi.base = ((output.s0.y.y*4) + output.s0.y.loop_min)
      for (output.s0.y.yi, output.s0.y.yi.loop_min, output.s0.y.yi.loop_extent) {
        let output.s0.y = (output.s0.y.yi.base + output.s0.y.yi)
        realize rows([rows.x.min_realized, rows.x.extent_realized], [rows.y.min_realized, rows.y.extent_realized]) {
          for (output.s0.x.x, output.s0.x.x.loop_min, output.s0.x.x.loop_extent) {
            let output.s0.x.v16.base = ((output.s0.x.x*64) + output.s0.x.loop_min)
            produce rows {
              let rows.s0.y.loop_max = rows.s0.y.max
              let rows.s0.y.loop_min = rows.s0.y.min
              let rows.s0.y.loop_extent = ((rows.s0.y.max + 1) - rows.s0.y.min)
              let rows.s0.x.loop_max = rows.s0.x.max
              let rows.s0.x.loop_min = rows.s0.x.min
              let rows.s0.x.loop_extent = ((rows.s0.x.max + 1) - rows.s0.x.min)
              let rows.s0.x.x.loop_extent = (((rows.s0.x.loop_max - rows.s0.x.loop_min) + 64)/64)
              let rows.s0.x.x.loop_max = ((((rows.s0.x.loop_max - rows.s0.x.loop_min) + 64)/64) - 1)
              let rows.s0.x.x.loop_min = 0
              let rows.s0.x.v19.loop_extent = 64
              let rows.s0.x.v19.loop_max = (64 - 1)
              let rows.s0.x.v19.loop_min = 0
              for (rows.s0.y, rows.s0.y.loop_min, rows.s0.y.loop_extent) {
                for (rows.s0.x.x, rows.s0.x.x.loop_min, rows.s0.x.x.loop_extent) {
                  let rows.s0.x.v19.base = ((rows.s0.x.x*64) + rows.s0.x.loop_min)
                  vectorized (rows.s0.x.v19, rows.s0.x.v19.loop_min, rows.s0.x.v19.loop_extent) {
                    let rows.s0.x = (rows.s0.x.v19.base + rows.s0.x.v19)
                    rows((rows.s0.x.v19.base + rows.s0.x.v19), rows.s0.y) = (let t3 = (rows.s0.x.v19.base + rows.s0.x.v19) in ((((int16(input(t3, (rows.s0.y - 2))) + ((int16)4*int16(input(t3, (rows.s0.y - 1))))) + ((int16)6*int16(input(t3, rows.s0.y)))) + ((int16)4*int16(input(t3, (rows.s0.y + 1))))) + int16(input(t3, (rows.s0.y + 2)))))
                  }
                }
              }
            }
            consume rows {
              vectorized (output.s0.x.v16, output.s0.x.v16.loop_min, output.s0.x.v16.loop_extent) {
                let output.s0.x = (output.s0.x.v16.base + output.s0.x.v16)
                output((output.s0.x.v16.base + output.s0.x.v16), (output.s0.y.yi.base + output.s0.y.yi)) = (let t0 = (output.s0.y.yi.base + output.s0.y.yi) in (let t1 = (output.s0.x.v16.base + output.s0.x.v16) in uint8(shift_right(((((rows((t1 - 2), t0) + ((int16)4*rows((t1 - 1), t0))) + ((int16)6*rows(t1, t0))) + ((int16)4*rows((t1 + 1), t0))) + rows((t1 + 2), t0)), (int16)8))))
              }
            }
          }
        }
      }
    }
  }
}

Performing computation bounds inference...
Lowering after computation bounds inference:
let output.s0.y.max = ((0 + output.extent.1) - 1)
let output.s0.y.min = 0
let output.s0.x.max = ((0 + output.extent.0) - 1)
let output.s0.x.min = 0
let rows.s0.y.max = output.s0.y.max
let rows.s0.y.min = output.s0.y.min
let rows.s0.x.max = (output.s0.x.max + 2)
let rows.s0.x.min = (output.s0.x.min + -2)
let input.extent.0.required = (((((((rows.s0.x.max - rows.s0.x.min)/64)*64) + rows.s0.x.min) + 63) + 1) - rows.s0.x.min)
let input.min.0.required = rows.s0.x.min
let input.stride.0.required = 1
let input.extent.1.required = (((rows.s0.y.max + 2) + 1) - (rows.s0.y.min + -2))
let input.min.1.required = (rows.s0.y.min + -2)
let input.stride.1.required = (input.stride.0.required*input.extent.0.required)
let output.extent.0.required = (((((((output.s0.x.max - output.s0.x.min)/64)*64) + output.s0.x.min) + 63) + 1) - (output.s0.x.min + 0))
let output.min.0.required = (output.s0.x.min + 0)
let output.stride.0.required = 1
let output.extent.1.required = (((((((output.s0.y.max - output.s0.y.min)/4)*4) + output.s0.y.min) + 3) + 1) - (output.s0.y.min + 0))
let output.min.1.required = (output.s0.y.min + 0)
let output.stride.1.required = (output.stride.0.required*output.extent.0.required)
let input.stride.0.constrained = 1
let input.min.0.constrained = 0
let input.stride.1.constrained = ((input.stride.1/64)*64)
let input.min.1.constrained = 0
let output.stride.0.constrained = 1
let output.min.0.constrained = 0
let output.stride.1.constrained = ((output.stride.1/64)*64)
let output.min.1.constrained = 0
let input.stride.0.proposed = 1
let input.min.0.proposed = 0
let input.extent.0.proposed = input.extent.0.required
let input.stride.1.proposed = ((input.stride.1.required/64)*64)
let input.min.1.proposed = 0
let input.extent.1.proposed = input.extent.1.required
let output.stride.0.proposed = 1
let output.min.0.proposed = 0
let output.extent.0.proposed = output.extent.0.required
let output.stride.1.proposed = ((output.stride.1.required/64)*64)
let output.min.1.proposed = 0
let output.extent.1.proposed = output.extent.1.required
assert((input.stride.0 == input.stride.0.constrained), 0)
assert((input.min.0 == input.min.0.constrained), 0)
assert((input.stride.1 == input.stride.1.constrained), 0)
assert((input.min.1 == input.min.1.constrained), 0)
assert((output.stride.0 == output.stride.0.constrained), 0)
assert((output.min.0 == output.min.0.constrained), 0)
assert((output.stride.1 == output.stride.1.constrained), 0)
assert((output.min.1 == output.min.1.constrained), 0)
produce output {
  let output.s0.y.loop_max = output.s0.y.max
  let output.s0.y.loop_min = output.s0.y.min
  let output.s0.y.loop_extent = ((output.s0.y.max + 1) - output.s0.y.min)
  let output.s0.x.loop_max = output.s0.x.max
  let output.s0.x.loop_min = output.s0.x.min
  let output.s0.x.loop_extent = ((output.s0.x.max + 1) - output.s0.x.min)
  let output.s0.y.y.loop_extent = (((output.s0.y.loop_max - output.s0.y.loop_min) + 4)/4)
  let output.s0.y.y.loop_max = ((((output.s0.y.loop_max - output.s0.y.loop_min) + 4)/4) - 1)
  let output.s0.y.y.loop_min = 0
  let output.s0.y.yi.loop_extent = 4
  let output.s0.y.yi.loop_max = (4 - 1)
  let output.s0.y.yi.loop_min = 0
  let output.s0.x.x.loop_extent = (((output.s0.x.loop_max - output.s0.x.loop_min) + 64)/64)
  let output.s0.x.x.loop_max = ((((output.s0.x.loop_max - output.s0.x.loop_min) + 64)/64) - 1)
  let output.s0.x.x.loop_min = 0
  let output.s0.x.v16.loop_extent = 64
  let output.s0.x.v16.loop_max = (64 - 1)
  let output.s0.x.v16.loop_min = 0
  for<Hexagon> (output.s0.__outermost, 0, 1) {
    for (output.s0.y.y, output.s0.y.y.loop_min, output.s0.y.y.loop_extent) {
      let output.s0.y.min = (((output.s0.y.y*4) + output.s0.y.loop_min) + output.s0.y.yi.loop_min)
      let output.s0.y.max = (((output.s0.y.y*4) + output.s0.y.loop_min) + ((output.s0.y.yi.loop_extent + output.s0.y.yi.loop_min) - 1))
      let output.s0.x.min = (((output.s0.x.x.loop_min*64) + output.s0.x.loop_min) + output.s0.x.v16.loop_min)
      let output.s0.x.max = (((((output.s0.x.x.loop_extent + output.s0.x.x.loop_min)*64) + output.s0.x.loop_min) + -64) + ((output.s0.x.v16.loop_extent + output.s0.x.v16.loop_min) - 1))
      let rows.s0.y.max = output.s0.y.max
      let rows.s0.y.min = output.s0.y.min
      let rows.s0.x.max = (output.s0.x.max + 2)
      let rows.s0.x.min = (output.s0.x.min + -2)
      prefetch input()
      let output.s0.y.yi.base = ((output.s0.y.y*4) + output.s0.y.loop_min)
      for (output.s0.y.yi, output.s0.y.yi.loop_min, output.s0.y.yi.loop_extent) {
        let output.s0.y = (output.s0.y.yi.base + output.s0.y.yi)
        let output.s0.y.min = (output.s0.y.yi.base + output.s0.y.yi)
        let output.s0.y.max = output.s0.y.min
        let output.s0.x.min = (((output.s0.x.x.loop_min*64) + output.s0.x.loop_min) + output.s0.x.v16.loop_min)
        let output.s0.x.max = (((((output.s0.x.x.loop_extent + output.s0.x.x.loop_min)*64) + output.s0.x.loop_min) + -64) + ((output.s0.x.v16.loop_extent + output.s0.x.v16.loop_min) - 1))
        let rows.s0.y.max = output.s0.y.max
        let rows.s0.y.min = output.s0.y.min
        let rows.s0.x.max = (output.s0.x.max + 2)
        let rows.s0.x.min = (output.s0.x.min + -2)
        realize rows([rows.x.min_realized, rows.x.extent_realized], [rows.y.min_realized, rows.y.extent_realized]) {
          for (output.s0.x.x, output.s0.x.x.loop_min, output.s0.x.x.loop_extent) {
            let output.s0.x.v16.base = ((output.s0.x.x*64) + output.s0.x.loop_min)
            let output.s0.y.min = (output.s0.y.yi.base + output.s0.y.yi)
            let output.s0.y.max = output.s0.y.min
            let output.s0.x.min = (output.s0.x.v16.base + output.s0.x.v16.loop_min)
            let output.s0.x.max = (output.s0.x.v16.base + ((output.s0.x.v16.loop_extent + output.s0.x.v16.loop_min) - 1))
            let rows.s0.y.max = output.s0.y.max
            let rows.s0.y.min = output.s0.y.min
            let rows.s0.x.max = (output.s0.x.max + 2)
            let rows.s0.x.min = (output.s0.x.min + -2)
            produce rows {
              let rows.s0.y.loop_max = rows.s0.y.max
              let rows.s0.y.loop_min = rows.s0.y.min
              let rows.s0.y.loop_extent = ((rows.s0.y.max + 1) - rows.s0.y.min)
              let rows.s0.x.loop_max = rows.s0.x.max
              let rows.s0.x.loop_min = rows.s0.x.min
              let rows.s0.x.loop_extent = ((rows.s0.x.max + 1) - rows.s0.x.min)
              let rows.s0.x.x.loop_extent = (((rows.s0.x.loop_max - rows.s0.x.loop_min) + 64)/64)
              let rows.s0.x.x.loop_max = ((((rows.s0.x.loop_max - rows.s0.x.loop_min) + 64)/64) - 1)
              let rows.s0.x.x.loop_min = 0
              let rows.s0.x.v19.loop_extent = 64
              let rows.s0.x.v19.loop_max = (64 - 1)
              let rows.s0.x.v19.loop_min = 0
              for (rows.s0.y, rows.s0.y.loop_min, rows.s0.y.loop_extent) {
                for (rows.s0.x.x, rows.s0.x.x.loop_min, rows.s0.x.x.loop_extent) {
                  let rows.s0.x.v19.base = ((rows.s0.x.x*64) + rows.s0.x.loop_min)
                  vectorized (rows.s0.x.v19, rows.s0.x.v19.loop_min, rows.s0.x.v19.loop_extent) {
                    let rows.s0.x = (rows.s0.x.v19.base + rows.s0.x.v19)
                    rows((rows.s0.x.v19.base + rows.s0.x.v19), rows.s0.y) = (let t3 = (rows.s0.x.v19.base + rows.s0.x.v19) in ((((int16(input(t3, (rows.s0.y - 2))) + ((int16)4*int16(input(t3, (rows.s0.y - 1))))) + ((int16)6*int16(input(t3, rows.s0.y)))) + ((int16)4*int16(input(t3, (rows.s0.y + 1))))) + int16(input(t3, (rows.s0.y + 2)))))
                  }
                }
              }
            }
            consume rows {
              vectorized (output.s0.x.v16, output.s0.x.v16.loop_min, output.s0.x.v16.loop_extent) {
                let output.s0.x = (output.s0.x.v16.base + output.s0.x.v16)
                output((output.s0.x.v16.base + output.s0.x.v16), (output.s0.y.yi.base + output.s0.y.yi)) = (let t0 = (output.s0.y.yi.base + output.s0.y.yi) in (let t1 = (output.s0.x.v16.base + output.s0.x.v16) in uint8(shift_right(((((rows((t1 - 2), t0) + ((int16)4*rows((t1 - 1), t0))) + ((int16)6*rows(t1, t0))) + ((int16)4*rows((t1 + 1), t0))) + rows((t1 + 2), t0)), (int16)8))))
              }
            }
          }
        }
      }
    }
  }
}

Removing extern loops...
Lowering after removing extern loops:
let output.s0.y.max = ((0 + output.extent.1) - 1)
let output.s0.y.min = 0
let output.s0.x.max = ((0 + output.extent.0) - 1)
let output.s0.x.min = 0
let rows.s0.y.max = output.s0.y.max
let rows.s0.y.min = output.s0.y.min
let rows.s0.x.max = (output.s0.x.max + 2)
let rows.s0.x.min = (output.s0.x.min + -2)
let input.extent.0.required = (((((((rows.s0.x.max - rows.s0.x.min)/64)*64) + rows.s0.x.min) + 63) + 1) - rows.s0.x.min)
let input.min.0.required = rows.s0.x.min
let input.stride.0.required = 1
let input.extent.1.required = (((rows.s0.y.max + 2) + 1) - (rows.s0.y.min + -2))
let input.min.1.required = (rows.s0.y.min + -2)
let input.stride.1.required = (input.stride.0.required*input.extent.0.required)
let output.extent.0.required = (((((((output.s0.x.max - output.s0.x.min)/64)*64) + output.s0.x.min) + 63) + 1) - (output.s0.x.min + 0))
let output.min.0.required = (output.s0.x.min + 0)
let output.stride.0.required = 1
let output.extent.1.required = (((((((output.s0.y.max - output.s0.y.min)/4)*4) + output.s0.y.min) + 3) + 1) - (output.s0.y.min + 0))
let output.min.1.required = (output.s0.y.min + 0)
let output.stride.1.required = (output.stride.0.required*output.extent.0.required)
let input.stride.0.constrained = 1
let input.min.0.constrained = 0
let input.stride.1.constrained = ((input.stride.1/64)*64)
let input.min.1.constrained = 0
let output.stride.0.constrained = 1
let output.min.0.constrained = 0
let output.stride.1.constrained = ((output.stride.1/64)*64)
let output.min.1.constrained = 0
let input.stride.0.proposed = 1
let input.min.0.proposed = 0
let input.extent.0.proposed = input.extent.0.required
let input.stride.1.proposed = ((input.stride.1.required/64)*64)
let input.min.1.proposed = 0
let input.extent.1.proposed = input.extent.1.required
let output.stride.0.proposed = 1
let output.min.0.proposed = 0
let output.extent.0.proposed = output.extent.0.required
let output.stride.1.proposed = ((output.stride.1.required/64)*64)
let output.min.1.proposed = 0
let output.extent.1.proposed = output.extent.1.required
assert((input.stride.0 == input.stride.0.constrained), 0)
assert((input.min.0 == input.min.0.constrained), 0)
assert((input.stride.1 == input.stride.1.constrained), 0)
assert((input.min.1 == input.min.1.constrained), 0)
assert((output.stride.0 == output.stride.0.constrained), 0)
assert((output.min.0 == output.min.0.constrained), 0)
assert((output.stride.1 == output.stride.1.constrained), 0)
assert((output.min.1 == output.min.1.constrained), 0)
produce output {
  let output.s0.y.loop_max = output.s0.y.max
  let output.s0.y.loop_min = output.s0.y.min
  let output.s0.y.loop_extent = ((output.s0.y.max + 1) - output.s0.y.min)
  let output.s0.x.loop_max = output.s0.x.max
  let output.s0.x.loop_min = output.s0.x.min
  let output.s0.x.loop_extent = ((output.s0.x.max + 1) - output.s0.x.min)
  let output.s0.y.y.loop_extent = (((output.s0.y.loop_max - output.s0.y.loop_min) + 4)/4)
  let output.s0.y.y.loop_max = ((((output.s0.y.loop_max - output.s0.y.loop_min) + 4)/4) - 1)
  let output.s0.y.y.loop_min = 0
  let output.s0.y.yi.loop_extent = 4
  let output.s0.y.yi.loop_max = (4 - 1)
  let output.s0.y.yi.loop_min = 0
  let output.s0.x.x.loop_extent = (((output.s0.x.loop_max - output.s0.x.loop_min) + 64)/64)
  let output.s0.x.x.loop_max = ((((output.s0.x.loop_max - output.s0.x.loop_min) + 64)/64) - 1)
  let output.s0.x.x.loop_min = 0
  let output.s0.x.v16.loop_extent = 64
  let output.s0.x.v16.loop_max = (64 - 1)
  let output.s0.x.v16.loop_min = 0
  for<Hexagon> (output.s0.__outermost, 0, 1) {
    for (output.s0.y.y, output.s0.y.y.loop_min, output.s0.y.y.loop_extent) {
      let output.s0.y.min = (((output.s0.y.y*4) + output.s0.y.loop_min) + output.s0.y.yi.loop_min)
      let output.s0.y.max = (((output.s0.y.y*4) + output.s0.y.loop_min) + ((output.s0.y.yi.loop_extent + output.s0.y.yi.loop_min) - 1))
      let output.s0.x.min = (((output.s0.x.x.loop_min*64) + output.s0.x.loop_min) + output.s0.x.v16.loop_min)
      let output.s0.x.max = (((((output.s0.x.x.loop_extent + output.s0.x.x.loop_min)*64) + output.s0.x.loop_min) + -64) + ((output.s0.x.v16.loop_extent + output.s0.x.v16.loop_min) - 1))
      let rows.s0.y.max = output.s0.y.max
      let rows.s0.y.min = output.s0.y.min
      let rows.s0.x.max = (output.s0.x.max + 2)
      let rows.s0.x.min = (output.s0.x.min + -2)
      prefetch input()
      let output.s0.y.yi.base = ((output.s0.y.y*4) + output.s0.y.loop_min)
      for (output.s0.y.yi, output.s0.y.yi.loop_min, output.s0.y.yi.loop_extent) {
        let output.s0.y = (output.s0.y.yi.base + output.s0.y.yi)
        let output.s0.y.min = (output.s0.y.yi.base + output.s0.y.yi)
        let output.s0.y.max = output.s0.y.min
        let output.s0.x.min = (((output.s0.x.x.loop_min*64) + output.s0.x.loop_min) + output.s0.x.v16.loop_min)
        let output.s0.x.max = (((((output.s0.x.x.loop_extent + output.s0.x.x.loop_min)*64) + output.s0.x.loop_min) + -64) + ((output.s0.x.v16.loop_extent + output.s0.x.v16.loop_min) - 1))
        let rows.s0.y.max = output.s0.y.max
        let rows.s0.y.min = output.s0.y.min
        let rows.s0.x.max = (output.s0.x.max + 2)
        let rows.s0.x.min = (output.s0.x.min + -2)
        realize rows([rows.x.min_realized, rows.x.extent_realized], [rows.y.min_realized, rows.y.extent_realized]) {
          for (output.s0.x.x, output.s0.x.x.loop_min, output.s0.x.x.loop_extent) {
            let output.s0.x.v16.base = ((output.s0.x.x*64) + output.s0.x.loop_min)
            let output.s0.y.min = (output.s0.y.yi.base + output.s0.y.yi)
            let output.s0.y.max = output.s0.y.min
            let output.s0.x.min = (output.s0.x.v16.base + output.s0.x.v16.loop_min)
            let output.s0.x.max = (output.s0.x.v16.base + ((output.s0.x.v16.loop_extent + output.s0.x.v16.loop_min) - 1))
            let rows.s0.y.max = output.s0.y.max
            let rows.s0.y.min = output.s0.y.min
            let rows.s0.x.max = (output.s0.x.max + 2)
            let rows.s0.x.min = (output.s0.x.min + -2)
            produce rows {
              let rows.s0.y.loop_max = rows.s0.y.max
              let rows.s0.y.loop_min = rows.s0.y.min
              let rows.s0.y.loop_extent = ((rows.s0.y.max + 1) - rows.s0.y.min)
              let rows.s0.x.loop_max = rows.s0.x.max
              let rows.s0.x.loop_min = rows.s0.x.min
              let rows.s0.x.loop_extent = ((rows.s0.x.max + 1) - rows.s0.x.min)
              let rows.s0.x.x.loop_extent = (((rows.s0.x.loop_max - rows.s0.x.loop_min) + 64)/64)
              let rows.s0.x.x.loop_max = ((((rows.s0.x.loop_max - rows.s0.x.loop_min) + 64)/64) - 1)
              let rows.s0.x.x.loop_min = 0
              let rows.s0.x.v19.loop_extent = 64
              let rows.s0.x.v19.loop_max = (64 - 1)
              let rows.s0.x.v19.loop_min = 0
              for (rows.s0.y, rows.s0.y.loop_min, rows.s0.y.loop_extent) {
                for (rows.s0.x.x, rows.s0.x.x.loop_min, rows.s0.x.x.loop_extent) {
                  let rows.s0.x.v19.base = ((rows.s0.x.x*64) + rows.s0.x.loop_min)
                  vectorized (rows.s0.x.v19, rows.s0.x.v19.loop_min, rows.s0.x.v19.loop_extent) {
                    let rows.s0.x = (rows.s0.x.v19.base + rows.s0.x.v19)
                    rows((rows.s0.x.v19.base + rows.s0.x.v19), rows.s0.y) = (let t3 = (rows.s0.x.v19.base + rows.s0.x.v19) in ((((int16(input(t3, (rows.s0.y - 2))) + ((int16)4*int16(input(t3, (rows.s0.y - 1))))) + ((int16)6*int16(input(t3, rows.s0.y)))) + ((int16)4*int16(input(t3, (rows.s0.y + 1))))) + int16(input(t3, (rows.s0.y + 2)))))
                  }
                }
              }
            }
            consume rows {
              vectorized (output.s0.x.v16, output.s0.x.v16.loop_min, output.s0.x.v16.loop_extent) {
                let output.s0.x = (output.s0.x.v16.base + output.s0.x.v16)
                output((output.s0.x.v16.base + output.s0.x.v16), (output.s0.y.yi.base + output.s0.y.yi)) = (let t0 = (output.s0.y.yi.base + output.s0.y.yi) in (let t1 = (output.s0.x.v16.base + output.s0.x.v16) in uint8(shift_right(((((rows((t1 - 2), t0) + ((int16)4*rows((t1 - 1), t0))) + ((int16)6*rows(t1, t0))) + ((int16)4*rows((t1 + 1), t0))) + rows((t1 + 2), t0)), (int16)8))))
              }
            }
          }
        }
      }
    }
  }
}

Performing sliding window optimization...
Lowering after sliding window:
let output.s0.y.max = ((0 + output.extent.1) - 1)
let output.s0.y.min = 0
let output.s0.x.max = ((0 + output.extent.0) - 1)
let output.s0.x.min = 0
let rows.s0.y.max = output.s0.y.max
let rows.s0.y.min = output.s0.y.min
let rows.s0.x.max = (output.s0.x.max + 2)
let rows.s0.x.min = (output.s0.x.min + -2)
let input.extent.0.required = (((((((rows.s0.x.max - rows.s0.x.min)/64)*64) + rows.s0.x.min) + 63) + 1) - rows.s0.x.min)
let input.min.0.required = rows.s0.x.min
let input.stride.0.required = 1
let input.extent.1.required = (((rows.s0.y.max + 2) + 1) - (rows.s0.y.min + -2))
let input.min.1.required = (rows.s0.y.min + -2)
let input.stride.1.required = (input.stride.0.required*input.extent.0.required)
let output.extent.0.required = (((((((output.s0.x.max - output.s0.x.min)/64)*64) + output.s0.x.min) + 63) + 1) - (output.s0.x.min + 0))
let output.min.0.required = (output.s0.x.min + 0)
let output.stride.0.required = 1
let output.extent.1.required = (((((((output.s0.y.max - output.s0.y.min)/4)*4) + output.s0.y.min) + 3) + 1) - (output.s0.y.min + 0))
let output.min.1.required = (output.s0.y.min + 0)
let output.stride.1.required = (output.stride.0.required*output.extent.0.required)
let input.stride.0.constrained = 1
let input.min.0.constrained = 0
let input.stride.1.constrained = ((input.stride.1/64)*64)
let input.min.1.constrained = 0
let output.stride.0.constrained = 1
let output.min.0.constrained = 0
let output.stride.1.constrained = ((output.stride.1/64)*64)
let output.min.1.constrained = 0
let input.stride.0.proposed = 1
let input.min.0.proposed = 0
let input.extent.0.proposed = input.extent.0.required
let input.stride.1.proposed = ((input.stride.1.required/64)*64)
let input.min.1.proposed = 0
let input.extent.1.proposed = input.extent.1.required
let output.stride.0.proposed = 1
let output.min.0.proposed = 0
let output.extent.0.proposed = output.extent.0.required
let output.stride.1.proposed = ((output.stride.1.required/64)*64)
let output.min.1.proposed = 0
let output.extent.1.proposed = output.extent.1.required
assert((input.stride.0 == input.stride.0.constrained), 0)
assert((input.min.0 == input.min.0.constrained), 0)
assert((input.stride.1 == input.stride.1.constrained), 0)
assert((input.min.1 == input.min.1.constrained), 0)
assert((output.stride.0 == output.stride.0.constrained), 0)
assert((output.min.0 == output.min.0.constrained), 0)
assert((output.stride.1 == output.stride.1.constrained), 0)
assert((output.min.1 == output.min.1.constrained), 0)
produce output {
  let output.s0.y.loop_max = output.s0.y.max
  let output.s0.y.loop_min = output.s0.y.min
  let output.s0.y.loop_extent = ((output.s0.y.max + 1) - output.s0.y.min)
  let output.s0.x.loop_max = output.s0.x.max
  let output.s0.x.loop_min = output.s0.x.min
  let output.s0.x.loop_extent = ((output.s0.x.max + 1) - output.s0.x.min)
  let output.s0.y.y.loop_extent = (((output.s0.y.loop_max - output.s0.y.loop_min) + 4)/4)
  let output.s0.y.y.loop_max = ((((output.s0.y.loop_max - output.s0.y.loop_min) + 4)/4) - 1)
  let output.s0.y.y.loop_min = 0
  let output.s0.y.yi.loop_extent = 4
  let output.s0.y.yi.loop_max = (4 - 1)
  let output.s0.y.yi.loop_min = 0
  let output.s0.x.x.loop_extent = (((output.s0.x.loop_max - output.s0.x.loop_min) + 64)/64)
  let output.s0.x.x.loop_max = ((((output.s0.x.loop_max - output.s0.x.loop_min) + 64)/64) - 1)
  let output.s0.x.x.loop_min = 0
  let output.s0.x.v16.loop_extent = 64
  let output.s0.x.v16.loop_max = (64 - 1)
  let output.s0.x.v16.loop_min = 0
  for<Hexagon> (output.s0.__outermost, 0, 1) {
    for (output.s0.y.y, output.s0.y.y.loop_min, output.s0.y.y.loop_extent) {
      let output.s0.y.min = (((output.s0.y.y*4) + output.s0.y.loop_min) + output.s0.y.yi.loop_min)
      let output.s0.y.max = (((output.s0.y.y*4) + output.s0.y.loop_min) + ((output.s0.y.yi.loop_extent + output.s0.y.yi.loop_min) - 1))
      let output.s0.x.min = (((output.s0.x.x.loop_min*64) + output.s0.x.loop_min) + output.s0.x.v16.loop_min)
      let output.s0.x.max = (((((output.s0.x.x.loop_extent + output.s0.x.x.loop_min)*64) + output.s0.x.loop_min) + -64) + ((output.s0.x.v16.loop_extent + output.s0.x.v16.loop_min) - 1))
      let rows.s0.y.max = output.s0.y.max
      let rows.s0.y.min = output.s0.y.min
      let rows.s0.x.max = (output.s0.x.max + 2)
      let rows.s0.x.min = (output.s0.x.min + -2)
      prefetch input()
      let output.s0.y.yi.base = ((output.s0.y.y*4) + output.s0.y.loop_min)
      for (output.s0.y.yi, output.s0.y.yi.loop_min, output.s0.y.yi.loop_extent) {
        let output.s0.y = (output.s0.y.yi.base + output.s0.y.yi)
        let output.s0.y.min = (output.s0.y.yi.base + output.s0.y.yi)
        let output.s0.y.max = output.s0.y.min
        let output.s0.x.min = (((output.s0.x.x.loop_min*64) + output.s0.x.loop_min) + output.s0.x.v16.loop_min)
        let output.s0.x.max = (((((output.s0.x.x.loop_extent + output.s0.x.x.loop_min)*64) + output.s0.x.loop_min) + -64) + ((output.s0.x.v16.loop_extent + output.s0.x.v16.loop_min) - 1))
        let rows.s0.y.max = output.s0.y.max
        let rows.s0.y.min = output.s0.y.min
        let rows.s0.x.max = (output.s0.x.max + 2)
        let rows.s0.x.min = (output.s0.x.min + -2)
        realize rows([rows.x.min_realized, rows.x.extent_realized], [rows.y.min_realized, rows.y.extent_realized]) {
          for (output.s0.x.x, output.s0.x.x.loop_min, output.s0.x.x.loop_extent) {
            let output.s0.x.v16.base = ((output.s0.x.x*64) + output.s0.x.loop_min)
            let output.s0.y.min = (output.s0.y.yi.base + output.s0.y.yi)
            let output.s0.y.max = output.s0.y.min
            let output.s0.x.min = (output.s0.x.v16.base + output.s0.x.v16.loop_min)
            let output.s0.x.max = (output.s0.x.v16.base + ((output.s0.x.v16.loop_extent + output.s0.x.v16.loop_min) - 1))
            let rows.s0.y.max = output.s0.y.max
            let rows.s0.y.min = output.s0.y.min
            let rows.s0.x.max = (output.s0.x.max + 2)
            let rows.s0.x.min = select((output.s0.x.x <= output.s0.x.x.loop_min), ((((output.s0.x.x*64) + output.s0.x.loop_min) + output.s0.x.v16.loop_min) + -2), likely_if_innermost(((((((output.s0.x.x - 1)*64) + output.s0.x.loop_min) + (output.s0.x.v16.loop_extent + output.s0.x.v16.loop_min)) + 1) + 1)))
            produce rows {
              let rows.s0.y.loop_max = rows.s0.y.max
              let rows.s0.y.loop_min = rows.s0.y.min
              let rows.s0.y.loop_extent = ((rows.s0.y.max + 1) - rows.s0.y.min)
              let rows.s0.x.loop_max = rows.s0.x.max
              let rows.s0.x.loop_min = rows.s0.x.min
              let rows.s0.x.loop_extent = ((rows.s0.x.max + 1) - rows.s0.x.min)
              let rows.s0.x.x.loop_extent = (((rows.s0.x.loop_max - rows.s0.x.loop_min) + 64)/64)
              let rows.s0.x.x.loop_max = ((((rows.s0.x.loop_max - rows.s0.x.loop_min) + 64)/64) - 1)
              let rows.s0.x.x.loop_min = 0
              let rows.s0.x.v19.loop_extent = 64
              let rows.s0.x.v19.loop_max = (64 - 1)
              let rows.s0.x.v19.loop_min = 0
              for (rows.s0.y, rows.s0.y.loop_min, rows.s0.y.loop_extent) {
                for (rows.s0.x.x, rows.s0.x.x.loop_min, rows.s0.x.x.loop_extent) {
                  let rows.s0.x.v19.base = ((rows.s0.x.x*64) + rows.s0.x.loop_min)
                  vectorized (rows.s0.x.v19, rows.s0.x.v19.loop_min, rows.s0.x.v19.loop_extent) {
                    let rows.s0.x = (rows.s0.x.v19.base + rows.s0.x.v19)
                    rows((rows.s0.x.v19.base + rows.s0.x.v19), rows.s0.y) = (let t3 = (rows.s0.x.v19.base + rows.s0.x.v19) in ((((int16(input(t3, (rows.s0.y - 2))) + ((int16)4*int16(input(t3, (rows.s0.y - 1))))) + ((int16)6*int16(input(t3, rows.s0.y)))) + ((int16)4*int16(input(t3, (rows.s0.y + 1))))) + int16(input(t3, (rows.s0.y + 2)))))
                  }
                }
              }
            }
            consume rows {
              vectorized (output.s0.x.v16, output.s0.x.v16.loop_min, output.s0.x.v16.loop_extent) {
                let output.s0.x = (output.s0.x.v16.base + output.s0.x.v16)
                output((output.s0.x.v16.base + output.s0.x.v16), (output.s0.y.yi.base + output.s0.y.yi)) = (let t0 = (output.s0.y.yi.base + output.s0.y.yi) in (let t1 = (output.s0.x.v16.base + output.s0.x.v16) in uint8(shift_right(((((rows((t1 - 2), t0) + ((int16)4*rows((t1 - 1), t0))) + ((int16)6*rows(t1, t0))) + ((int16)4*rows((t1 + 1), t0))) + rows((t1 + 2), t0)), (int16)8))))
              }
            }
          }
        }
      }
    }
  }
}

Performing allocation bounds inference...
Lowering after allocation bounds inference:
let output.s0.y.max = ((0 + output.extent.1) - 1)
let output.s0.y.min = 0
let output.s0.x.max = ((0 + output.extent.0) - 1)
let output.s0.x.min = 0
let rows.s0.y.max = output.s0.y.max
let rows.s0.y.min = output.s0.y.min
let rows.s0.x.max = (output.s0.x.max + 2)
let rows.s0.x.min = (output.s0.x.min + -2)
let input.extent.0.required = (((((((rows.s0.x.max - rows.s0.x.min)/64)*64) + rows.s0.x.min) + 63) + 1) - rows.s0.x.min)
let input.min.0.required = rows.s0.x.min
let input.stride.0.required = 1
let input.extent.1.required = (((rows.s0.y.max + 2) + 1) - (rows.s0.y.min + -2))
let input.min.1.required = (rows.s0.y.min + -2)
let input.stride.1.required = (input.stride.0.required*input.extent.0.required)
let output.extent.0.required = (((((((output.s0.x.max - output.s0.x.min)/64)*64) + output.s0.x.min) + 63) + 1) - (output.s0.x.min + 0))
let output.min.0.required = (output.s0.x.min + 0)
let output.stride.0.required = 1
let output.extent.1.required = (((((((output.s0.y.max - output.s0.y.min)/4)*4) + output.s0.y.min) + 3) + 1) - (output.s0.y.min + 0))
let output.min.1.required = (output.s0.y.min + 0)
let output.stride.1.required = (output.stride.0.required*output.extent.0.required)
let input.stride.0.constrained = 1
let input.min.0.constrained = 0
let input.stride.1.constrained = ((input.stride.1/64)*64)
let input.min.1.constrained = 0
let output.stride.0.constrained = 1
let output.min.0.constrained = 0
let output.stride.1.constrained = ((output.stride.1/64)*64)
let output.min.1.constrained = 0
let input.stride.0.proposed = 1
let input.min.0.proposed = 0
let input.extent.0.proposed = input.extent.0.required
let input.stride.1.proposed = ((input.stride.1.required/64)*64)
let input.min.1.proposed = 0
let input.extent.1.proposed = input.extent.1.required
let output.stride.0.proposed = 1
let output.min.0.proposed = 0
let output.extent.0.proposed = output.extent.0.required
let output.stride.1.proposed = ((output.stride.1.required/64)*64)
let output.min.1.proposed = 0
let output.extent.1.proposed = output.extent.1.required
assert((input.stride.0 == input.stride.0.constrained), 0)
assert((input.min.0 == input.min.0.constrained), 0)
assert((input.stride.1 == input.stride.1.constrained), 0)
assert((input.min.1 == input.min.1.constrained), 0)
assert((output.stride.0 == output.stride.0.constrained), 0)
assert((output.min.0 == output.min.0.constrained), 0)
assert((output.stride.1 == output.stride.1.constrained), 0)
assert((output.min.1 == output.min.1.constrained), 0)
produce output {
  let output.s0.y.loop_max = output.s0.y.max
  let output.s0.y.loop_min = output.s0.y.min
  let output.s0.y.loop_extent = ((output.s0.y.max + 1) - output.s0.y.min)
  let output.s0.x.loop_max = output.s0.x.max
  let output.s0.x.loop_min = output.s0.x.min
  let output.s0.x.loop_extent = ((output.s0.x.max + 1) - output.s0.x.min)
  let output.s0.y.y.loop_extent = (((output.s0.y.loop_max - output.s0.y.loop_min) + 4)/4)
  let output.s0.y.y.loop_max = ((((output.s0.y.loop_max - output.s0.y.loop_min) + 4)/4) - 1)
  let output.s0.y.y.loop_min = 0
  let output.s0.y.yi.loop_extent = 4
  let output.s0.y.yi.loop_max = (4 - 1)
  let output.s0.y.yi.loop_min = 0
  let output.s0.x.x.loop_extent = (((output.s0.x.loop_max - output.s0.x.loop_min) + 64)/64)
  let output.s0.x.x.loop_max = ((((output.s0.x.loop_max - output.s0.x.loop_min) + 64)/64) - 1)
  let output.s0.x.x.loop_min = 0
  let output.s0.x.v16.loop_extent = 64
  let output.s0.x.v16.loop_max = (64 - 1)
  let output.s0.x.v16.loop_min = 0
  for<Hexagon> (output.s0.__outermost, 0, 1) {
    for (output.s0.y.y, output.s0.y.y.loop_min, output.s0.y.y.loop_extent) {
      let output.s0.y.min = (((output.s0.y.y*4) + output.s0.y.loop_min) + output.s0.y.yi.loop_min)
      let output.s0.y.max = (((output.s0.y.y*4) + output.s0.y.loop_min) + ((output.s0.y.yi.loop_extent + output.s0.y.yi.loop_min) - 1))
      let output.s0.x.min = (((output.s0.x.x.loop_min*64) + output.s0.x.loop_min) + output.s0.x.v16.loop_min)
      let output.s0.x.max = (((((output.s0.x.x.loop_extent + output.s0.x.x.loop_min)*64) + output.s0.x.loop_min) + -64) + ((output.s0.x.v16.loop_extent + output.s0.x.v16.loop_min) - 1))
      let rows.s0.y.max = output.s0.y.max
      let rows.s0.y.min = output.s0.y.min
      let rows.s0.x.max = (output.s0.x.max + 2)
      let rows.s0.x.min = (output.s0.x.min + -2)
      prefetch input()
      let output.s0.y.yi.base = ((output.s0.y.y*4) + output.s0.y.loop_min)
      for (output.s0.y.yi, output.s0.y.yi.loop_min, output.s0.y.yi.loop_extent) {
        let output.s0.y = (output.s0.y.yi.base + output.s0.y.yi)
        let output.s0.y.min = (output.s0.y.yi.base + output.s0.y.yi)
        let output.s0.y.max = output.s0.y.min
        let output.s0.x.min = (((output.s0.x.x.loop_min*64) + output.s0.x.loop_min) + output.s0.x.v16.loop_min)
        let output.s0.x.max = (((((output.s0.x.x.loop_extent + output.s0.x.x.loop_min)*64) + output.s0.x.loop_min) + -64) + ((output.s0.x.v16.loop_extent + output.s0.x.v16.loop_min) - 1))
        let rows.s0.y.max = output.s0.y.max
        let rows.s0.y.min = output.s0.y.min
        let rows.s0.x.max = (output.s0.x.max + 2)
        let rows.s0.x.min = (output.s0.x.min + -2)
        let rows.y.max_realized = (output.s0.y.yi + output.s0.y.yi.base)
        let rows.y.min_realized = (output.s0.y.yi + output.s0.y.yi.base)
        let rows.y.extent_realized = 1
        let rows.x.max_realized = max((let t17 = (let t13.s = (((output.s0.x.x.loop_min*64) + output.s0.x.loop_min) + (output.s0.x.v16.loop_extent + output.s0.x.v16.loop_min)) in min(select((output.s0.x.x.loop_min < ((output.s0.x.x.loop_extent + output.s0.x.x.loop_min) + -1)), (t13.s + -62), ((((output.s0.x.x.loop_min*64) + output.s0.x.loop_min) + output.s0.x.v16.loop_min) + -2)), ((((output.s0.x.x.loop_min*64) + output.s0.x.loop_min) + output.s0.x.v16.loop_min) + -2))) in (let t16 = (let t15.s = ((((output.s0.x.x.loop_extent + output.s0.x.x.loop_min)*64) + output.s0.x.loop_min) + (output.s0.x.v16.loop_extent + output.s0.x.v16.loop_min)) in max(select((output.s0.x.x.loop_min < ((output.s0.x.x.loop_extent + output.s0.x.x.loop_min) + -1)), (t15.s + -126), (((((output.s0.x.x.loop_extent + output.s0.x.x.loop_min)*64) + output.s0.x.loop_min) + output.s0.x.v16.loop_min) + -66)), (((((output.s0.x.x.loop_extent + output.s0.x.x.loop_min)*64) + output.s0.x.loop_min) + output.s0.x.v16.loop_min) + -66))) in ((((((((((output.s0.x.x.loop_extent + output.s0.x.x.loop_min)*64) + output.s0.x.loop_min) + (output.s0.x.v16.loop_extent + output.s0.x.v16.loop_min)) - t17) + -63)/64)*64) + t16) + 63))), (((((output.s0.x.x.loop_extent + output.s0.x.x.loop_min)*64) + output.s0.x.loop_min) + (output.s0.x.v16.loop_extent + output.s0.x.v16.loop_min)) + -63))
        let rows.x.min_realized = min((let t17 = (let t13.s = (((output.s0.x.x.loop_min*64) + output.s0.x.loop_min) + (output.s0.x.v16.loop_extent + output.s0.x.v16.loop_min)) in min(select((output.s0.x.x.loop_min < ((output.s0.x.x.loop_extent + output.s0.x.x.loop_min) + -1)), (t13.s + -62), ((((output.s0.x.x.loop_min*64) + output.s0.x.loop_min) + output.s0.x.v16.loop_min) + -2)), ((((output.s0.x.x.loop_min*64) + output.s0.x.loop_min) + output.s0.x.v16.loop_min) + -2))) in t17), ((((output.s0.x.x.loop_min*64) + output.s0.x.loop_min) + output.s0.x.v16.loop_min) + -2))
        let rows.x.extent_realized = ((max((let t17 = (let t13.s = (((output.s0.x.x.loop_min*64) + output.s0.x.loop_min) + (output.s0.x.v16.loop_extent + output.s0.x.v16.loop_min)) in min(select((output.s0.x.x.loop_min < ((output.s0.x.x.loop_extent + output.s0.x.x.loop_min) + -1)), (t13.s + -62), ((((output.s0.x.x.loop_min*64) + output.s0.x.loop_min) + output.s0.x.v16.loop_min) + -2)), ((((output.s0.x.x.loop_min*64) + output.s0.x.loop_min) + output.s0.x.v16.loop_min) + -2))) in (let t16 = (let t15.s = ((((output.s0.x.x.loop_extent + output.s0.x.x.loop_min)*64) + output.s0.x.loop_min) + (output.s0.x.v16.loop_extent + output.s0.x.v16.loop_min)) in max(select((output.s0.x.x.loop_min < ((output.s0.x.x.loop_extent + output.s0.x.x.loop_min) + -1)), (t15.s + -126), (((((output.s0.x.x.loop_extent + output.s0.x.x.loop_min)*64) + output.s0.x.loop_min) + output.s0.x.v16.loop_min) + -66)), (((((output.s0.x.x.loop_extent + output.s0.x.x.loop_min)*64) + output.s0.x.loop_min) + output.s0.x.v16.loop_min) + -66))) in ((((((((((output.s0.x.x.loop_extent + output.s0.x.x.loop_min)*64) + output.s0.x.loop_min) + (output.s0.x.v16.loop_extent + output.s0.x.v16.loop_min)) - t17) + -63)/64)*64) + t16) + 63))), (((((output.s0.x.x.loop_extent + output.s0.x.x.loop_min)*64) + output.s0.x.loop_min) + (output.s0.x.v16.loop_extent + output.s0.x.v16.loop_min)) + -63)) - min((let t17 = (let t13.s = (((output.s0.x.x.loop_min*64) + output.s0.x.loop_min) + (output.s0.x.v16.loop_extent + output.s0.x.v16.loop_min)) in min(select((output.s0.x.x.loop_min < ((output.s0.x.x.loop_extent + output.s0.x.x.loop_min) + -1)), (t13.s + -62), ((((output.s0.x.x.loop_min*64) + output.s0.x.loop_min) + output.s0.x.v16.loop_min) + -2)), ((((output.s0.x.x.loop_min*64) + output.s0.x.loop_min) + output.s0.x.v16.loop_min) + -2))) in t17), ((((output.s0.x.x.loop_min*64) + output.s0.x.loop_min) + output.s0.x.v16.loop_min) + -2))) + 1)
        realize rows([rows.x.min_realized, rows.x.extent_realized], [rows.y.min_realized, rows.y.extent_realized]) {
          for (output.s0.x.x, output.s0.x.x.loop_min, output.s0.x.x.loop_extent) {
            let output.s0.x.v16.base = ((output.s0.x.x*64) + output.s0.x.loop_min)
            let output.s0.y.min = (output.s0.y.yi.base + output.s0.y.yi)
            let output.s0.y.max = output.s0.y.min
            let output.s0.x.min = (output.s0.x.v16.base + output.s0.x.v16.loop_min)
            let output.s0.x.max = (output.s0.x.v16.base + ((output.s0.x.v16.loop_extent + output.s0.x.v16.loop_min) - 1))
            let rows.s0.y.max = output.s0.y.max
            let rows.s0.y.min = output.s0.y.min
            let rows.s0.x.max = (output.s0.x.max + 2)
            let rows.s0.x.min = select((output.s0.x.x <= output.s0.x.x.loop_min), ((((output.s0.x.x*64) + output.s0.x.loop_min) + output.s0.x.v16.loop_min) + -2), likely_if_innermost(((((((output.s0.x.x - 1)*64) + output.s0.x.loop_min) + (output.s0.x.v16.loop_extent + output.s0.x.v16.loop_min)) + 1) + 1)))
            produce rows {
              let rows.s0.y.loop_max = rows.s0.y.max
              let rows.s0.y.loop_min = rows.s0.y.min
              let rows.s0.y.loop_extent = ((rows.s0.y.max + 1) - rows.s0.y.min)
              let rows.s0.x.loop_max = rows.s0.x.max
              let rows.s0.x.loop_min = rows.s0.x.min
              let rows.s0.x.loop_extent = ((rows.s0.x.max + 1) - rows.s0.x.min)
              let rows.s0.x.x.loop_extent = (((rows.s0.x.loop_max - rows.s0.x.loop_min) + 64)/64)
              let rows.s0.x.x.loop_max = ((((rows.s0.x.loop_max - rows.s0.x.loop_min) + 64)/64) - 1)
              let rows.s0.x.x.loop_min = 0
              let rows.s0.x.v19.loop_extent = 64
              let rows.s0.x.v19.loop_max = (64 - 1)
              let rows.s0.x.v19.loop_min = 0
              for (rows.s0.y, rows.s0.y.loop_min, rows.s0.y.loop_extent) {
                for (rows.s0.x.x, rows.s0.x.x.loop_min, rows.s0.x.x.loop_extent) {
                  let rows.s0.x.v19.base = ((rows.s0.x.x*64) + rows.s0.x.loop_min)
                  vectorized (rows.s0.x.v19, rows.s0.x.v19.loop_min, rows.s0.x.v19.loop_extent) {
                    let rows.s0.x = (rows.s0.x.v19.base + rows.s0.x.v19)
                    rows((rows.s0.x.v19.base + rows.s0.x.v19), rows.s0.y) = (let t3 = (rows.s0.x.v19.base + rows.s0.x.v19) in ((((int16(input(t3, (rows.s0.y - 2))) + ((int16)4*int16(input(t3, (rows.s0.y - 1))))) + ((int16)6*int16(input(t3, rows.s0.y)))) + ((int16)4*int16(input(t3, (rows.s0.y + 1))))) + int16(input(t3, (rows.s0.y + 2)))))
                  }
                }
              }
            }
            consume rows {
              vectorized (output.s0.x.v16, output.s0.x.v16.loop_min, output.s0.x.v16.loop_extent) {
                let output.s0.x = (output.s0.x.v16.base + output.s0.x.v16)
                output((output.s0.x.v16.base + output.s0.x.v16), (output.s0.y.yi.base + output.s0.y.yi)) = (let t0 = (output.s0.y.yi.base + output.s0.y.yi) in (let t1 = (output.s0.x.v16.base + output.s0.x.v16) in uint8(shift_right(((((rows((t1 - 2), t0) + ((int16)4*rows((t1 - 1), t0))) + ((int16)6*rows(t1, t0))) + ((int16)4*rows((t1 + 1), t0))) + rows((t1 + 2), t0)), (int16)8))))
              }
            }
          }
        }
      }
    }
  }
}

Removing code that depends on undef values...
Lowering after removing code that depends on undef values:
let output.s0.y.max = ((0 + output.extent.1) - 1)
let output.s0.y.min = 0
let output.s0.x.max = ((0 + output.extent.0) - 1)
let output.s0.x.min = 0
let rows.s0.y.max = output.s0.y.max
let rows.s0.y.min = output.s0.y.min
let rows.s0.x.max = (output.s0.x.max + 2)
let rows.s0.x.min = (output.s0.x.min + -2)
let input.extent.0.required = (((((((rows.s0.x.max - rows.s0.x.min)/64)*64) + rows.s0.x.min) + 63) + 1) - rows.s0.x.min)
let input.min.0.required = rows.s0.x.min
let input.stride.0.required = 1
let input.extent.1.required = (((rows.s0.y.max + 2) + 1) - (rows.s0.y.min + -2))
let input.min.1.required = (rows.s0.y.min + -2)
let input.stride.1.required = (input.stride.0.required*input.extent.0.required)
let output.extent.0.required = (((((((output.s0.x.max - output.s0.x.min)/64)*64) + output.s0.x.min) + 63) + 1) - (output.s0.x.min + 0))
let output.min.0.required = (output.s0.x.min + 0)
let output.stride.0.required = 1
let output.extent.1.required = (((((((output.s0.y.max - output.s0.y.min)/4)*4) + output.s0.y.min) + 3) + 1) - (output.s0.y.min + 0))
let output.min.1.required = (output.s0.y.min + 0)
let output.stride.1.required = (output.stride.0.required*output.extent.0.required)
let input.stride.0.constrained = 1
let input.min.0.constrained = 0
let input.stride.1.constrained = ((input.stride.1/64)*64)
let input.min.1.constrained = 0
let output.stride.0.constrained = 1
let output.min.0.constrained = 0
let output.stride.1.constrained = ((output.stride.1/64)*64)
let output.min.1.constrained = 0
let input.stride.0.proposed = 1
let input.min.0.proposed = 0
let input.extent.0.proposed = input.extent.0.required
let input.stride.1.proposed = ((input.stride.1.required/64)*64)
let input.min.1.proposed = 0
let input.extent.1.proposed = input.extent.1.required
let output.stride.0.proposed = 1
let output.min.0.proposed = 0
let output.extent.0.proposed = output.extent.0.required
let output.stride.1.proposed = ((output.stride.1.required/64)*64)
let output.min.1.proposed = 0
let output.extent.1.proposed = output.extent.1.required
assert((input.stride.0 == input.stride.0.constrained), 0)
assert((input.min.0 == input.min.0.constrained), 0)
assert((input.stride.1 == input.stride.1.constrained), 0)
assert((input.min.1 == input.min.1.constrained), 0)
assert((output.stride.0 == output.stride.0.constrained), 0)
assert((output.min.0 == output.min.0.constrained), 0)
assert((output.stride.1 == output.stride.1.constrained), 0)
assert((output.min.1 == output.min.1.constrained), 0)
produce output {
  let output.s0.y.loop_max = output.s0.y.max
  let output.s0.y.loop_min = output.s0.y.min
  let output.s0.y.loop_extent = ((output.s0.y.max + 1) - output.s0.y.min)
  let output.s0.x.loop_max = output.s0.x.max
  let output.s0.x.loop_min = output.s0.x.min
  let output.s0.x.loop_extent = ((output.s0.x.max + 1) - output.s0.x.min)
  let output.s0.y.y.loop_extent = (((output.s0.y.loop_max - output.s0.y.loop_min) + 4)/4)
  let output.s0.y.y.loop_max = ((((output.s0.y.loop_max - output.s0.y.loop_min) + 4)/4) - 1)
  let output.s0.y.y.loop_min = 0
  let output.s0.y.yi.loop_extent = 4
  let output.s0.y.yi.loop_max = (4 - 1)
  let output.s0.y.yi.loop_min = 0
  let output.s0.x.x.loop_extent = (((output.s0.x.loop_max - output.s0.x.loop_min) + 64)/64)
  let output.s0.x.x.loop_max = ((((output.s0.x.loop_max - output.s0.x.loop_min) + 64)/64) - 1)
  let output.s0.x.x.loop_min = 0
  let output.s0.x.v16.loop_extent = 64
  let output.s0.x.v16.loop_max = (64 - 1)
  let output.s0.x.v16.loop_min = 0
  for<Hexagon> (output.s0.__outermost, 0, 1) {
    for (output.s0.y.y, output.s0.y.y.loop_min, output.s0.y.y.loop_extent) {
      let output.s0.y.min = (((output.s0.y.y*4) + output.s0.y.loop_min) + output.s0.y.yi.loop_min)
      let output.s0.y.max = (((output.s0.y.y*4) + output.s0.y.loop_min) + ((output.s0.y.yi.loop_extent + output.s0.y.yi.loop_min) - 1))
      let output.s0.x.min = (((output.s0.x.x.loop_min*64) + output.s0.x.loop_min) + output.s0.x.v16.loop_min)
      let output.s0.x.max = (((((output.s0.x.x.loop_extent + output.s0.x.x.loop_min)*64) + output.s0.x.loop_min) + -64) + ((output.s0.x.v16.loop_extent + output.s0.x.v16.loop_min) - 1))
      let rows.s0.y.max = output.s0.y.max
      let rows.s0.y.min = output.s0.y.min
      let rows.s0.x.max = (output.s0.x.max + 2)
      let rows.s0.x.min = (output.s0.x.min + -2)
      prefetch input()
      let output.s0.y.yi.base = ((output.s0.y.y*4) + output.s0.y.loop_min)
      for (output.s0.y.yi, output.s0.y.yi.loop_min, output.s0.y.yi.loop_extent) {
        let output.s0.y = (output.s0.y.yi.base + output.s0.y.yi)
        let output.s0.y.min = (output.s0.y.yi.base + output.s0.y.yi)
        let output.s0.y.max = output.s0.y.min
        let output.s0.x.min = (((output.s0.x.x.loop_min*64) + output.s0.x.loop_min) + output.s0.x.v16.loop_min)
        let output.s0.x.max = (((((output.s0.x.x.loop_extent + output.s0.x.x.loop_min)*64) + output.s0.x.loop_min) + -64) + ((output.s0.x.v16.loop_extent + output.s0.x.v16.loop_min) - 1))
        let rows.s0.y.max = output.s0.y.max
        let rows.s0.y.min = output.s0.y.min
        let rows.s0.x.max = (output.s0.x.max + 2)
        let rows.s0.x.min = (output.s0.x.min + -2)
        let rows.y.max_realized = (output.s0.y.yi + output.s0.y.yi.base)
        let rows.y.min_realized = (output.s0.y.yi + output.s0.y.yi.base)
        let rows.y.extent_realized = 1
        let rows.x.max_realized = max((let t17 = (let t13.s = (((output.s0.x.x.loop_min*64) + output.s0.x.loop_min) + (output.s0.x.v16.loop_extent + output.s0.x.v16.loop_min)) in min(select((output.s0.x.x.loop_min < ((output.s0.x.x.loop_extent + output.s0.x.x.loop_min) + -1)), (t13.s + -62), ((((output.s0.x.x.loop_min*64) + output.s0.x.loop_min) + output.s0.x.v16.loop_min) + -2)), ((((output.s0.x.x.loop_min*64) + output.s0.x.loop_min) + output.s0.x.v16.loop_min) + -2))) in (let t16 = (let t15.s = ((((output.s0.x.x.loop_extent + output.s0.x.x.loop_min)*64) + output.s0.x.loop_min) + (output.s0.x.v16.loop_extent + output.s0.x.v16.loop_min)) in max(select((output.s0.x.x.loop_min < ((output.s0.x.x.loop_extent + output.s0.x.x.loop_min) + -1)), (t15.s + -126), (((((output.s0.x.x.loop_extent + output.s0.x.x.loop_min)*64) + output.s0.x.loop_min) + output.s0.x.v16.loop_min) + -66)), (((((output.s0.x.x.loop_extent + output.s0.x.x.loop_min)*64) + output.s0.x.loop_min) + output.s0.x.v16.loop_min) + -66))) in ((((((((((output.s0.x.x.loop_extent + output.s0.x.x.loop_min)*64) + output.s0.x.loop_min) + (output.s0.x.v16.loop_extent + output.s0.x.v16.loop_min)) - t17) + -63)/64)*64) + t16) + 63))), (((((output.s0.x.x.loop_extent + output.s0.x.x.loop_min)*64) + output.s0.x.loop_min) + (output.s0.x.v16.loop_extent + output.s0.x.v16.loop_min)) + -63))
        let rows.x.min_realized = min((let t17 = (let t13.s = (((output.s0.x.x.loop_min*64) + output.s0.x.loop_min) + (output.s0.x.v16.loop_extent + output.s0.x.v16.loop_min)) in min(select((output.s0.x.x.loop_min < ((output.s0.x.x.loop_extent + output.s0.x.x.loop_min) + -1)), (t13.s + -62), ((((output.s0.x.x.loop_min*64) + output.s0.x.loop_min) + output.s0.x.v16.loop_min) + -2)), ((((output.s0.x.x.loop_min*64) + output.s0.x.loop_min) + output.s0.x.v16.loop_min) + -2))) in t17), ((((output.s0.x.x.loop_min*64) + output.s0.x.loop_min) + output.s0.x.v16.loop_min) + -2))
        let rows.x.extent_realized = ((max((let t17 = (let t13.s = (((output.s0.x.x.loop_min*64) + output.s0.x.loop_min) + (output.s0.x.v16.loop_extent + output.s0.x.v16.loop_min)) in min(select((output.s0.x.x.loop_min < ((output.s0.x.x.loop_extent + output.s0.x.x.loop_min) + -1)), (t13.s + -62), ((((output.s0.x.x.loop_min*64) + output.s0.x.loop_min) + output.s0.x.v16.loop_min) + -2)), ((((output.s0.x.x.loop_min*64) + output.s0.x.loop_min) + output.s0.x.v16.loop_min) + -2))) in (let t16 = (let t15.s = ((((output.s0.x.x.loop_extent + output.s0.x.x.loop_min)*64) + output.s0.x.loop_min) + (output.s0.x.v16.loop_extent + output.s0.x.v16.loop_min)) in max(select((output.s0.x.x.loop_min < ((output.s0.x.x.loop_extent + output.s0.x.x.loop_min) + -1)), (t15.s + -126), (((((output.s0.x.x.loop_extent + output.s0.x.x.loop_min)*64) + output.s0.x.loop_min) + output.s0.x.v16.loop_min) + -66)), (((((output.s0.x.x.loop_extent + output.s0.x.x.loop_min)*64) + output.s0.x.loop_min) + output.s0.x.v16.loop_min) + -66))) in ((((((((((output.s0.x.x.loop_extent + output.s0.x.x.loop_min)*64) + output.s0.x.loop_min) + (output.s0.x.v16.loop_extent + output.s0.x.v16.loop_min)) - t17) + -63)/64)*64) + t16) + 63))), (((((output.s0.x.x.loop_extent + output.s0.x.x.loop_min)*64) + output.s0.x.loop_min) + (output.s0.x.v16.loop_extent + output.s0.x.v16.loop_min)) + -63)) - min((let t17 = (let t13.s = (((output.s0.x.x.loop_min*64) + output.s0.x.loop_min) + (output.s0.x.v16.loop_extent + output.s0.x.v16.loop_min)) in min(select((output.s0.x.x.loop_min < ((output.s0.x.x.loop_extent + output.s0.x.x.loop_min) + -1)), (t13.s + -62), ((((output.s0.x.x.loop_min*64) + output.s0.x.loop_min) + output.s0.x.v16.loop_min) + -2)), ((((output.s0.x.x.loop_min*64) + output.s0.x.loop_min) + output.s0.x.v16.loop_min) + -2))) in t17), ((((output.s0.x.x.loop_min*64) + output.s0.x.loop_min) + output.s0.x.v16.loop_min) + -2))) + 1)
        realize rows([rows.x.min_realized, rows.x.extent_realized], [rows.y.min_realized, rows.y.extent_realized]) {
          for (output.s0.x.x, output.s0.x.x.loop_min, output.s0.x.x.loop_extent) {
            let output.s0.x.v16.base = ((output.s0.x.x*64) + output.s0.x.loop_min)
            let output.s0.y.min = (output.s0.y.yi.base + output.s0.y.yi)
            let output.s0.y.max = output.s0.y.min
            let output.s0.x.min = (output.s0.x.v16.base + output.s0.x.v16.loop_min)
            let output.s0.x.max = (output.s0.x.v16.base + ((output.s0.x.v16.loop_extent + output.s0.x.v16.loop_min) - 1))
            let rows.s0.y.max = output.s0.y.max
            let rows.s0.y.min = output.s0.y.min
            let rows.s0.x.max = (output.s0.x.max + 2)
            let rows.s0.x.min = select((output.s0.x.x <= output.s0.x.x.loop_min), ((((output.s0.x.x*64) + output.s0.x.loop_min) + output.s0.x.v16.loop_min) + -2), likely_if_innermost(((((((output.s0.x.x - 1)*64) + output.s0.x.loop_min) + (output.s0.x.v16.loop_extent + output.s0.x.v16.loop_min)) + 1) + 1)))
            produce rows {
              let rows.s0.y.loop_max = rows.s0.y.max
              let rows.s0.y.loop_min = rows.s0.y.min
              let rows.s0.y.loop_extent = ((rows.s0.y.max + 1) - rows.s0.y.min)
              let rows.s0.x.loop_max = rows.s0.x.max
              let rows.s0.x.loop_min = rows.s0.x.min
              let rows.s0.x.loop_extent = ((rows.s0.x.max + 1) - rows.s0.x.min)
              let rows.s0.x.x.loop_extent = (((rows.s0.x.loop_max - rows.s0.x.loop_min) + 64)/64)
              let rows.s0.x.x.loop_max = ((((rows.s0.x.loop_max - rows.s0.x.loop_min) + 64)/64) - 1)
              let rows.s0.x.x.loop_min = 0
              let rows.s0.x.v19.loop_extent = 64
              let rows.s0.x.v19.loop_max = (64 - 1)
              let rows.s0.x.v19.loop_min = 0
              for (rows.s0.y, rows.s0.y.loop_min, rows.s0.y.loop_extent) {
                for (rows.s0.x.x, rows.s0.x.x.loop_min, rows.s0.x.x.loop_extent) {
                  let rows.s0.x.v19.base = ((rows.s0.x.x*64) + rows.s0.x.loop_min)
                  vectorized (rows.s0.x.v19, rows.s0.x.v19.loop_min, rows.s0.x.v19.loop_extent) {
                    let rows.s0.x = (rows.s0.x.v19.base + rows.s0.x.v19)
                    rows((rows.s0.x.v19.base + rows.s0.x.v19), rows.s0.y) = (let t3 = (rows.s0.x.v19.base + rows.s0.x.v19) in ((((int16(input(t3, (rows.s0.y - 2))) + ((int16)4*int16(input(t3, (rows.s0.y - 1))))) + ((int16)6*int16(input(t3, rows.s0.y)))) + ((int16)4*int16(input(t3, (rows.s0.y + 1))))) + int16(input(t3, (rows.s0.y + 2)))))
                  }
                }
              }
            }
            consume rows {
              vectorized (output.s0.x.v16, output.s0.x.v16.loop_min, output.s0.x.v16.loop_extent) {
                let output.s0.x = (output.s0.x.v16.base + output.s0.x.v16)
                output((output.s0.x.v16.base + output.s0.x.v16), (output.s0.y.yi.base + output.s0.y.yi)) = (let t0 = (output.s0.y.yi.base + output.s0.y.yi) in (let t1 = (output.s0.x.v16.base + output.s0.x.v16) in uint8(shift_right(((((rows((t1 - 2), t0) + ((int16)4*rows((t1 - 1), t0))) + ((int16)6*rows(t1, t0))) + ((int16)4*rows((t1 + 1), t0))) + rows((t1 + 2), t0)), (int16)8))))
              }
            }
          }
        }
      }
    }
  }
}


Uniquifying variable names...
Lowering after uniquifying variable names:
let output.s0.y.max = ((0 + output.extent.1) - 1)
let output.s0.y.min = 0
let output.s0.x.max = ((0 + output.extent.0) - 1)
let output.s0.x.min = 0
let rows.s0.y.max = output.s0.y.max
let rows.s0.y.min = output.s0.y.min
let rows.s0.x.max = (output.s0.x.max + 2)
let rows.s0.x.min = (output.s0.x.min + -2)
let input.extent.0.required = (((((((rows.s0.x.max - rows.s0.x.min)/64)*64) + rows.s0.x.min) + 63) + 1) - rows.s0.x.min)
let input.min.0.required = rows.s0.x.min
let input.stride.0.required = 1
let input.extent.1.required = (((rows.s0.y.max + 2) + 1) - (rows.s0.y.min + -2))
let input.min.1.required = (rows.s0.y.min + -2)
let input.stride.1.required = (input.stride.0.required*input.extent.0.required)
let output.extent.0.required = (((((((output.s0.x.max - output.s0.x.min)/64)*64) + output.s0.x.min) + 63) + 1) - (output.s0.x.min + 0))
let output.min.0.required = (output.s0.x.min + 0)
let output.stride.0.required = 1
let output.extent.1.required = (((((((output.s0.y.max - output.s0.y.min)/4)*4) + output.s0.y.min) + 3) + 1) - (output.s0.y.min + 0))
let output.min.1.required = (output.s0.y.min + 0)
let output.stride.1.required = (output.stride.0.required*output.extent.0.required)
let input.stride.0.constrained = 1
let input.min.0.constrained = 0
let input.stride.1.constrained = ((input.stride.1/64)*64)
let input.min.1.constrained = 0
let output.stride.0.constrained = 1
let output.min.0.constrained = 0
let output.stride.1.constrained = ((output.stride.1/64)*64)
let output.min.1.constrained = 0
let input.stride.0.proposed = 1
let input.min.0.proposed = 0
let input.extent.0.proposed = input.extent.0.required
let input.stride.1.proposed = ((input.stride.1.required/64)*64)
let input.min.1.proposed = 0
let input.extent.1.proposed = input.extent.1.required
let output.stride.0.proposed = 1
let output.min.0.proposed = 0
let output.extent.0.proposed = output.extent.0.required
let output.stride.1.proposed = ((output.stride.1.required/64)*64)
let output.min.1.proposed = 0
let output.extent.1.proposed = output.extent.1.required
assert((input.stride.0 == input.stride.0.constrained), 0)
assert((input.min.0 == input.min.0.constrained), 0)
assert((input.stride.1 == input.stride.1.constrained), 0)
assert((input.min.1 == input.min.1.constrained), 0)
assert((output.stride.0 == output.stride.0.constrained), 0)
assert((output.min.0 == output.min.0.constrained), 0)
assert((output.stride.1 == output.stride.1.constrained), 0)
assert((output.min.1 == output.min.1.constrained), 0)
produce output {
  let output.s0.y.loop_max = output.s0.y.max
  let output.s0.y.loop_min = output.s0.y.min
  let output.s0.y.loop_extent = ((output.s0.y.max + 1) - output.s0.y.min)
  let output.s0.x.loop_max = output.s0.x.max
  let output.s0.x.loop_min = output.s0.x.min
  let output.s0.x.loop_extent = ((output.s0.x.max + 1) - output.s0.x.min)
  let output.s0.y.y.loop_extent = (((output.s0.y.loop_max - output.s0.y.loop_min) + 4)/4)
  let output.s0.y.y.loop_max = ((((output.s0.y.loop_max - output.s0.y.loop_min) + 4)/4) - 1)
  let output.s0.y.y.loop_min = 0
  let output.s0.y.yi.loop_extent = 4
  let output.s0.y.yi.loop_max = (4 - 1)
  let output.s0.y.yi.loop_min = 0
  let output.s0.x.x.loop_extent = (((output.s0.x.loop_max - output.s0.x.loop_min) + 64)/64)
  let output.s0.x.x.loop_max = ((((output.s0.x.loop_max - output.s0.x.loop_min) + 64)/64) - 1)
  let output.s0.x.x.loop_min = 0
  let output.s0.x.v16.loop_extent = 64
  let output.s0.x.v16.loop_max = (64 - 1)
  let output.s0.x.v16.loop_min = 0
  for<Hexagon> (output.s0.__outermost, 0, 1) {
    for (output.s0.y.y, output.s0.y.y.loop_min, output.s0.y.y.loop_extent) {
      let output.s0.y.min_1 = (((output.s0.y.y*4) + output.s0.y.loop_min) + output.s0.y.yi.loop_min)
      let output.s0.y.max_1 = (((output.s0.y.y*4) + output.s0.y.loop_min) + ((output.s0.y.yi.loop_extent + output.s0.y.yi.loop_min) - 1))
      let output.s0.x.min_1 = (((output.s0.x.x.loop_min*64) + output.s0.x.loop_min) + output.s0.x.v16.loop_min)
      let output.s0.x.max_1 = (((((output.s0.x.x.loop_extent + output.s0.x.x.loop_min)*64) + output.s0.x.loop_min) + -64) + ((output.s0.x.v16.loop_extent + output.s0.x.v16.loop_min) - 1))
      let rows.s0.y.max_1 = output.s0.y.max_1
      let rows.s0.y.min_1 = output.s0.y.min_1
      let rows.s0.x.max_1 = (output.s0.x.max_1 + 2)
      let rows.s0.x.min_1 = (output.s0.x.min_1 + -2)
      prefetch input()
      let output.s0.y.yi.base = ((output.s0.y.y*4) + output.s0.y.loop_min)
      for (output.s0.y.yi, output.s0.y.yi.loop_min, output.s0.y.yi.loop_extent) {
        let output.s0.y = (output.s0.y.yi.base + output.s0.y.yi)
        let output.s0.y.min_2 = (output.s0.y.yi.base + output.s0.y.yi)
        let output.s0.y.max_2 = output.s0.y.min_2
        let output.s0.x.min_2 = (((output.s0.x.x.loop_min*64) + output.s0.x.loop_min) + output.s0.x.v16.loop_min)
        let output.s0.x.max_2 = (((((output.s0.x.x.loop_extent + output.s0.x.x.loop_min)*64) + output.s0.x.loop_min) + -64) + ((output.s0.x.v16.loop_extent + output.s0.x.v16.loop_min) - 1))
        let rows.s0.y.max_2 = output.s0.y.max_2
        let rows.s0.y.min_2 = output.s0.y.min_2
        let rows.s0.x.max_2 = (output.s0.x.max_2 + 2)
        let rows.s0.x.min_2 = (output.s0.x.min_2 + -2)
        let rows.y.max_realized = (output.s0.y.yi + output.s0.y.yi.base)
        let rows.y.min_realized = (output.s0.y.yi + output.s0.y.yi.base)
        let rows.y.extent_realized = 1
        let rows.x.max_realized = max((let t17 = (let t13.s = (((output.s0.x.x.loop_min*64) + output.s0.x.loop_min) + (output.s0.x.v16.loop_extent + output.s0.x.v16.loop_min)) in min(select((output.s0.x.x.loop_min < ((output.s0.x.x.loop_extent + output.s0.x.x.loop_min) + -1)), (t13.s + -62), ((((output.s0.x.x.loop_min*64) + output.s0.x.loop_min) + output.s0.x.v16.loop_min) + -2)), ((((output.s0.x.x.loop_min*64) + output.s0.x.loop_min) + output.s0.x.v16.loop_min) + -2))) in (let t16 = (let t15.s = ((((output.s0.x.x.loop_extent + output.s0.x.x.loop_min)*64) + output.s0.x.loop_min) + (output.s0.x.v16.loop_extent + output.s0.x.v16.loop_min)) in max(select((output.s0.x.x.loop_min < ((output.s0.x.x.loop_extent + output.s0.x.x.loop_min) + -1)), (t15.s + -126), (((((output.s0.x.x.loop_extent + output.s0.x.x.loop_min)*64) + output.s0.x.loop_min) + output.s0.x.v16.loop_min) + -66)), (((((output.s0.x.x.loop_extent + output.s0.x.x.loop_min)*64) + output.s0.x.loop_min) + output.s0.x.v16.loop_min) + -66))) in ((((((((((output.s0.x.x.loop_extent + output.s0.x.x.loop_min)*64) + output.s0.x.loop_min) + (output.s0.x.v16.loop_extent + output.s0.x.v16.loop_min)) - t17) + -63)/64)*64) + t16) + 63))), (((((output.s0.x.x.loop_extent + output.s0.x.x.loop_min)*64) + output.s0.x.loop_min) + (output.s0.x.v16.loop_extent + output.s0.x.v16.loop_min)) + -63))
        let rows.x.min_realized = min((let t17 = (let t13.s = (((output.s0.x.x.loop_min*64) + output.s0.x.loop_min) + (output.s0.x.v16.loop_extent + output.s0.x.v16.loop_min)) in min(select((output.s0.x.x.loop_min < ((output.s0.x.x.loop_extent + output.s0.x.x.loop_min) + -1)), (t13.s + -62), ((((output.s0.x.x.loop_min*64) + output.s0.x.loop_min) + output.s0.x.v16.loop_min) + -2)), ((((output.s0.x.x.loop_min*64) + output.s0.x.loop_min) + output.s0.x.v16.loop_min) + -2))) in t17), ((((output.s0.x.x.loop_min*64) + output.s0.x.loop_min) + output.s0.x.v16.loop_min) + -2))
        let rows.x.extent_realized = ((max((let t17 = (let t13.s = (((output.s0.x.x.loop_min*64) + output.s0.x.loop_min) + (output.s0.x.v16.loop_extent + output.s0.x.v16.loop_min)) in min(select((output.s0.x.x.loop_min < ((output.s0.x.x.loop_extent + output.s0.x.x.loop_min) + -1)), (t13.s + -62), ((((output.s0.x.x.loop_min*64) + output.s0.x.loop_min) + output.s0.x.v16.loop_min) + -2)), ((((output.s0.x.x.loop_min*64) + output.s0.x.loop_min) + output.s0.x.v16.loop_min) + -2))) in (let t16 = (let t15.s = ((((output.s0.x.x.loop_extent + output.s0.x.x.loop_min)*64) + output.s0.x.loop_min) + (output.s0.x.v16.loop_extent + output.s0.x.v16.loop_min)) in max(select((output.s0.x.x.loop_min < ((output.s0.x.x.loop_extent + output.s0.x.x.loop_min) + -1)), (t15.s + -126), (((((output.s0.x.x.loop_extent + output.s0.x.x.loop_min)*64) + output.s0.x.loop_min) + output.s0.x.v16.loop_min) + -66)), (((((output.s0.x.x.loop_extent + output.s0.x.x.loop_min)*64) + output.s0.x.loop_min) + output.s0.x.v16.loop_min) + -66))) in ((((((((((output.s0.x.x.loop_extent + output.s0.x.x.loop_min)*64) + output.s0.x.loop_min) + (output.s0.x.v16.loop_extent + output.s0.x.v16.loop_min)) - t17) + -63)/64)*64) + t16) + 63))), (((((output.s0.x.x.loop_extent + output.s0.x.x.loop_min)*64) + output.s0.x.loop_min) + (output.s0.x.v16.loop_extent + output.s0.x.v16.loop_min)) + -63)) - min((let t17 = (let t13.s = (((output.s0.x.x.loop_min*64) + output.s0.x.loop_min) + (output.s0.x.v16.loop_extent + output.s0.x.v16.loop_min)) in min(select((output.s0.x.x.loop_min < ((output.s0.x.x.loop_extent + output.s0.x.x.loop_min) + -1)), (t13.s + -62), ((((output.s0.x.x.loop_min*64) + output.s0.x.loop_min) + output.s0.x.v16.loop_min) + -2)), ((((output.s0.x.x.loop_min*64) + output.s0.x.loop_min) + output.s0.x.v16.loop_min) + -2))) in t17), ((((output.s0.x.x.loop_min*64) + output.s0.x.loop_min) + output.s0.x.v16.loop_min) + -2))) + 1)
        realize rows([rows.x.min_realized, rows.x.extent_realized], [rows.y.min_realized, rows.y.extent_realized]) {
          for (output.s0.x.x, output.s0.x.x.loop_min, output.s0.x.x.loop_extent) {
            let output.s0.x.v16.base = ((output.s0.x.x*64) + output.s0.x.loop_min)
            let output.s0.y.min_3 = (output.s0.y.yi.base + output.s0.y.yi)
            let output.s0.y.max_3 = output.s0.y.min_3
            let output.s0.x.min_3 = (output.s0.x.v16.base + output.s0.x.v16.loop_min)
            let output.s0.x.max_3 = (output.s0.x.v16.base + ((output.s0.x.v16.loop_extent + output.s0.x.v16.loop_min) - 1))
            let rows.s0.y.max_3 = output.s0.y.max_3
            let rows.s0.y.min_3 = output.s0.y.min_3
            let rows.s0.x.max_3 = (output.s0.x.max_3 + 2)
            let rows.s0.x.min_3 = select((output.s0.x.x <= output.s0.x.x.loop_min), ((((output.s0.x.x*64) + output.s0.x.loop_min) + output.s0.x.v16.loop_min) + -2), likely_if_innermost(((((((output.s0.x.x - 1)*64) + output.s0.x.loop_min) + (output.s0.x.v16.loop_extent + output.s0.x.v16.loop_min)) + 1) + 1)))
            produce rows {
              let rows.s0.y.loop_max = rows.s0.y.max_3
              let rows.s0.y.loop_min = rows.s0.y.min_3
              let rows.s0.y.loop_extent = ((rows.s0.y.max_3 + 1) - rows.s0.y.min_3)
              let rows.s0.x.loop_max = rows.s0.x.max_3
              let rows.s0.x.loop_min = rows.s0.x.min_3
              let rows.s0.x.loop_extent = ((rows.s0.x.max_3 + 1) - rows.s0.x.min_3)
              let rows.s0.x.x.loop_extent = (((rows.s0.x.loop_max - rows.s0.x.loop_min) + 64)/64)
              let rows.s0.x.x.loop_max = ((((rows.s0.x.loop_max - rows.s0.x.loop_min) + 64)/64) - 1)
              let rows.s0.x.x.loop_min = 0
              let rows.s0.x.v19.loop_extent = 64
              let rows.s0.x.v19.loop_max = (64 - 1)
              let rows.s0.x.v19.loop_min = 0
              for (rows.s0.y, rows.s0.y.loop_min, rows.s0.y.loop_extent) {
                for (rows.s0.x.x, rows.s0.x.x.loop_min, rows.s0.x.x.loop_extent) {
                  let rows.s0.x.v19.base = ((rows.s0.x.x*64) + rows.s0.x.loop_min)
                  vectorized (rows.s0.x.v19, rows.s0.x.v19.loop_min, rows.s0.x.v19.loop_extent) {
                    let rows.s0.x = (rows.s0.x.v19.base + rows.s0.x.v19)
                    rows((rows.s0.x.v19.base + rows.s0.x.v19), rows.s0.y) = (let t3 = (rows.s0.x.v19.base + rows.s0.x.v19) in ((((int16(input(t3, (rows.s0.y - 2))) + ((int16)4*int16(input(t3, (rows.s0.y - 1))))) + ((int16)6*int16(input(t3, rows.s0.y)))) + ((int16)4*int16(input(t3, (rows.s0.y + 1))))) + int16(input(t3, (rows.s0.y + 2)))))
                  }
                }
              }
            }
            consume rows {
              vectorized (output.s0.x.v16, output.s0.x.v16.loop_min, output.s0.x.v16.loop_extent) {
                let output.s0.x = (output.s0.x.v16.base + output.s0.x.v16)
                output((output.s0.x.v16.base + output.s0.x.v16), (output.s0.y.yi.base + output.s0.y.yi)) = (let t0 = (output.s0.y.yi.base + output.s0.y.yi) in (let t1 = (output.s0.x.v16.base + output.s0.x.v16) in uint8(shift_right(((((rows((t1 - 2), t0) + ((int16)4*rows((t1 - 1), t0))) + ((int16)6*rows(t1, t0))) + ((int16)4*rows((t1 + 1), t0))) + rows((t1 + 2), t0)), (int16)8))))
              }
            }
          }
        }
      }
    }
  }
}


Simplifying...
Lowering after first simplification:
let output.s0.y.max = (output.extent.1 + -1)
let output.s0.y.min = 0
let output.s0.x.max = (output.extent.0 + -1)
let output.s0.x.min = 0
let rows.s0.y.max = (output.extent.1 + -1)
let rows.s0.y.min = 0
let rows.s0.x.max = (output.extent.0 + 1)
let rows.s0.x.min = -2
let input.extent.0.required = ((((output.extent.0 + 3)/64)*64) + 64)
let input.min.0.required = -2
let input.stride.0.required = 1
let input.extent.1.required = (output.extent.1 + 4)
let input.min.1.required = -2
let input.stride.1.required = ((((output.extent.0 + 3)/64)*64) + 64)
let output.extent.0.required = ((((output.extent.0 + -1)/64)*64) + 64)
let output.min.0.required = 0
let output.stride.0.required = 1
let output.extent.1.required = ((((output.extent.1 + -1)/4)*4) + 4)
let output.min.1.required = 0
let output.stride.1.required = ((((output.extent.0 + -1)/64)*64) + 64)
let input.stride.0.constrained = 1
let input.min.0.constrained = 0
let input.stride.1.constrained = ((input.stride.1/64)*64)
let input.min.1.constrained = 0
let output.stride.0.constrained = 1
let output.min.0.constrained = 0
let output.stride.1.constrained = ((output.stride.1/64)*64)
let output.min.1.constrained = 0
let input.stride.0.proposed = 1
let input.min.0.proposed = 0
let input.extent.0.proposed = ((((output.extent.0 + 3)/64)*64) + 64)
let input.stride.1.proposed = (((output.extent.0 + 67)/64)*64)
let input.min.1.proposed = 0
let input.extent.1.proposed = (output.extent.1 + 4)
let output.stride.0.proposed = 1
let output.min.0.proposed = 0
let output.extent.0.proposed = ((((output.extent.0 + -1)/64)*64) + 64)
let output.stride.1.proposed = (((output.extent.0 + 63)/64)*64)
let output.min.1.proposed = 0
let output.extent.1.proposed = ((((output.extent.1 + -1)/4)*4) + 4)
assert((input.stride.0 == 1), 0)
assert((input.min.0 == 0), 0)
assert(((input.stride.1 % 64) == 0), 0)
assert((input.min.1 == 0), 0)
assert((output.stride.0 == 1), 0)
assert((output.min.0 == 0), 0)
assert(((output.stride.1 % 64) == 0), 0)
assert((output.min.1 == 0), 0)
produce output {
  let output.s0.y.loop_max = (output.extent.1 + -1)
  let output.s0.y.loop_min = 0
  let output.s0.y.loop_extent = output.extent.1
  let output.s0.x.loop_max = (output.extent.0 + -1)
  let output.s0.x.loop_min = 0
  let output.s0.x.loop_extent = output.extent.0
  let output.s0.y.y.loop_extent = ((output.extent.1 + 3)/4)
  let output.s0.y.y.loop_max = ((output.extent.1 + -1)/4)
  let output.s0.y.y.loop_min = 0
  let output.s0.y.yi.loop_extent = 4
  let output.s0.y.yi.loop_max = 3
  let output.s0.y.yi.loop_min = 0
  let output.s0.x.x.loop_extent = ((output.extent.0 + 63)/64)
  let output.s0.x.x.loop_max = ((output.extent.0 + -1)/64)
  let output.s0.x.x.loop_min = 0
  let output.s0.x.v16.loop_extent = 64
  let output.s0.x.v16.loop_max = 63
  let output.s0.x.v16.loop_min = 0
  for<Hexagon> (output.s0.__outermost, 0, 1) {
    for (output.s0.y.y, 0, ((output.extent.1 + 3)/4)) {
      let output.s0.y.min_1 = (output.s0.y.y*4)
      let output.s0.y.max_1 = ((output.s0.y.y*4) + 3)
      let output.s0.x.min_1 = 0
      let output.s0.x.max_1 = ((((output.extent.0 + 63)/64)*64) + -1)
      let rows.s0.y.max_1 = ((output.s0.y.y*4) + 3)
      let rows.s0.y.min_1 = (output.s0.y.y*4)
      let rows.s0.x.max_1 = ((((output.extent.0 + 63)/64)*64) + 1)
      let rows.s0.x.min_1 = -2
      prefetch input()
      let output.s0.y.yi.base = (output.s0.y.y*4)
      for (output.s0.y.yi, 0, 4) {
        let output.s0.y = ((output.s0.y.y*4) + output.s0.y.yi)
        let output.s0.y.min_2 = ((output.s0.y.y*4) + output.s0.y.yi)
        let output.s0.y.max_2 = ((output.s0.y.y*4) + output.s0.y.yi)
        let output.s0.x.min_2 = 0
        let output.s0.x.max_2 = ((((output.extent.0 + 63)/64)*64) + -1)
        let rows.s0.y.max_2 = ((output.s0.y.y*4) + output.s0.y.yi)
        let rows.s0.y.min_2 = ((output.s0.y.y*4) + output.s0.y.yi)
        let rows.s0.x.max_2 = ((((output.extent.0 + 63)/64)*64) + 1)
        let rows.s0.x.min_2 = -2
        let rows.y.max_realized = ((output.s0.y.y*4) + output.s0.y.yi)
        let rows.y.min_realized = ((output.s0.y.y*4) + output.s0.y.yi)
        let rows.y.extent_realized = 1
        let rows.x.max_realized = max((let t17 = (let t13.s = 64 in -2) in (let t16 = (let t15.s = ((((output.extent.0 + 63)/64)*64) + 64) in (select((64 < output.extent.0), -62, -66) + (((output.extent.0 + 63)/64)*64))) in (((((output.extent.0 + 63)/64)*64) + t16) + 63))), ((((output.extent.0 + 63)/64)*64) + 1))
        let rows.x.min_realized = (let t17 = (let t13.s = 64 in -2) in -2)
        let rows.x.extent_realized = ((max((let t17 = (let t13.s = 64 in -2) in (let t16 = (let t15.s = ((((output.extent.0 + 63)/64)*64) + 64) in (select((64 < output.extent.0), -62, -66) + (((output.extent.0 + 63)/64)*64))) in (((((output.extent.0 + 63)/64)*64) + t16) + 63))), ((((output.extent.0 + 63)/64)*64) + 1)) - (let t17 = (let t13.s = 64 in -2) in -2)) + 1)
        let rows.x.extent_realized.s = (max((let t17 = (let t13.s = 64 in -2) in (let t16 = (let t15.s = ((((output.extent.0 + 63)/64)*64) + 64) in (select((64 < output.extent.0), -62, -66) + (((output.extent.0 + 63)/64)*64))) in (((((output.extent.0 + 63)/64)*64) + t16) + 63))), ((((output.extent.0 + 63)/64)*64) + 1)) - (let t17 = (let t13.s = 64 in -2) in -2))
        realize rows([-2, (rows.x.extent_realized.s + 1)], [((output.s0.y.y*4) + output.s0.y.yi), 1]) {
          for (output.s0.x.x, 0, ((output.extent.0 + 63)/64)) {
            let output.s0.x.v16.base = (output.s0.x.x*64)
            let output.s0.y.min_3 = ((output.s0.y.y*4) + output.s0.y.yi)
            let output.s0.y.max_3 = ((output.s0.y.y*4) + output.s0.y.yi)
            let output.s0.x.min_3 = (output.s0.x.x*64)
            let output.s0.x.max_3 = ((output.s0.x.x*64) + 63)
            let rows.s0.y.max_3 = ((output.s0.y.y*4) + output.s0.y.yi)
            let rows.s0.y.min_3 = ((output.s0.y.y*4) + output.s0.y.yi)
            let rows.s0.x.max_3 = ((output.s0.x.x*64) + 65)
            let rows.s0.x.min_3 = select((0 < output.s0.x.x), likely_if_innermost(((output.s0.x.x*64) + 2)), ((output.s0.x.x*64) + -2))
            produce rows {
              let rows.s0.y.loop_max = ((output.s0.y.y*4) + output.s0.y.yi)
              let rows.s0.y.loop_min = ((output.s0.y.y*4) + output.s0.y.yi)
              let rows.s0.y.loop_extent = 1
              let rows.s0.x.loop_max = ((output.s0.x.x*64) + 65)
              let rows.s0.x.loop_min = rows.s0.x.min_3
              let rows.s0.x.loop_extent = (((output.s0.x.x*64) - rows.s0.x.min_3) + 66)
              let rows.s0.x.x.loop_extent = (((129 - rows.s0.x.min_3)/64) + output.s0.x.x)
              let rows.s0.x.x.loop_max = ((((129 - rows.s0.x.min_3)/64) + output.s0.x.x) + -1)
              let rows.s0.x.x.loop_min = 0
              let rows.s0.x.v19.loop_extent = 64
              let rows.s0.x.v19.loop_max = 63
              let rows.s0.x.v19.loop_min = 0
              for (rows.s0.y, ((output.s0.y.y*4) + output.s0.y.yi), 1) {
                for (rows.s0.x.x, 0, (((129 - rows.s0.x.min_3)/64) + output.s0.x.x)) {
                  let rows.s0.x.v19.base = ((rows.s0.x.x*64) + rows.s0.x.min_3)
                  vectorized (rows.s0.x.v19, 0, 64) {
                    let rows.s0.x = (((rows.s0.x.x*64) + rows.s0.x.min_3) + rows.s0.x.v19)
                    rows((((rows.s0.x.x*64) + rows.s0.x.min_3) + rows.s0.x.v19), rows.s0.y) = (let t3 = (((rows.s0.x.x*64) + rows.s0.x.min_3) + rows.s0.x.v19) in (((int16(input((((rows.s0.x.x*64) + rows.s0.x.min_3) + rows.s0.x.v19), (rows.s0.y + 1)))*(int16)4) + ((int16(input((((rows.s0.x.x*64) + rows.s0.x.min_3) + rows.s0.x.v19), rows.s0.y))*(int16)6) + ((int16(input((((rows.s0.x.x*64) + rows.s0.x.min_3) + rows.s0.x.v19), (rows.s0.y + -1)))*(int16)4) + int16(input((((rows.s0.x.x*64) + rows.s0.x.min_3) + rows.s0.x.v19), (rows.s0.y + -2)))))) + int16(input((((rows.s0.x.x*64) + rows.s0.x.min_3) + rows.s0.x.v19), (rows.s0.y + 2)))))
                  }
                }
              }
            }
            consume rows {
              vectorized (output.s0.x.v16, 0, 64) {
                let output.s0.x = ((output.s0.x.x*64) + output.s0.x.v16)
                output(((output.s0.x.x*64) + output.s0.x.v16), ((output.s0.y.y*4) + output.s0.y.yi)) = (let t0 = ((output.s0.y.y*4) + output.s0.y.yi) in (let t1 = ((output.s0.x.x*64) + output.s0.x.v16) in uint8(((rows((((output.s0.x.x*64) + output.s0.x.v16) + 2), ((output.s0.y.y*4) + output.s0.y.yi)) + ((rows((((output.s0.x.x*64) + output.s0.x.v16) + 1), ((output.s0.y.y*4) + output.s0.y.yi))*(int16)4) + ((rows(((output.s0.x.x*64) + output.s0.x.v16), ((output.s0.y.y*4) + output.s0.y.yi))*(int16)6) + (rows((((output.s0.x.x*64) + output.s0.x.v16) + -2), ((output.s0.y.y*4) + output.s0.y.yi)) + (rows((((output.s0.x.x*64) + output.s0.x.v16) + -1), ((output.s0.y.y*4) + output.s0.y.yi))*(int16)4)))))/(int16)256))))
              }
            }
          }
        }
      }
    }
  }
}


Performing storage folding optimization...
Lowering after storage folding:
let output.s0.y.max = (output.extent.1 + -1)
let output.s0.y.min = 0
let output.s0.x.max = (output.extent.0 + -1)
let output.s0.x.min = 0
let rows.s0.y.max = (output.extent.1 + -1)
let rows.s0.y.min = 0
let rows.s0.x.max = (output.extent.0 + 1)
let rows.s0.x.min = -2
let input.extent.0.required = ((((output.extent.0 + 3)/64)*64) + 64)
let input.min.0.required = -2
let input.stride.0.required = 1
let input.extent.1.required = (output.extent.1 + 4)
let input.min.1.required = -2
let input.stride.1.required = ((((output.extent.0 + 3)/64)*64) + 64)
let output.extent.0.required = ((((output.extent.0 + -1)/64)*64) + 64)
let output.min.0.required = 0
let output.stride.0.required = 1
let output.extent.1.required = ((((output.extent.1 + -1)/4)*4) + 4)
let output.min.1.required = 0
let output.stride.1.required = ((((output.extent.0 + -1)/64)*64) + 64)
let input.stride.0.constrained = 1
let input.min.0.constrained = 0
let input.stride.1.constrained = ((input.stride.1/64)*64)
let input.min.1.constrained = 0
let output.stride.0.constrained = 1
let output.min.0.constrained = 0
let output.stride.1.constrained = ((output.stride.1/64)*64)
let output.min.1.constrained = 0
let input.stride.0.proposed = 1
let input.min.0.proposed = 0
let input.extent.0.proposed = ((((output.extent.0 + 3)/64)*64) + 64)
let input.stride.1.proposed = (((output.extent.0 + 67)/64)*64)
let input.min.1.proposed = 0
let input.extent.1.proposed = (output.extent.1 + 4)
let output.stride.0.proposed = 1
let output.min.0.proposed = 0
let output.extent.0.proposed = ((((output.extent.0 + -1)/64)*64) + 64)
let output.stride.1.proposed = (((output.extent.0 + 63)/64)*64)
let output.min.1.proposed = 0
let output.extent.1.proposed = ((((output.extent.1 + -1)/4)*4) + 4)
assert((input.stride.0 == 1), 0)
assert((input.min.0 == 0), 0)
assert(((input.stride.1 % 64) == 0), 0)
assert((input.min.1 == 0), 0)
assert((output.stride.0 == 1), 0)
assert((output.min.0 == 0), 0)
assert(((output.stride.1 % 64) == 0), 0)
assert((output.min.1 == 0), 0)
produce output {
  let output.s0.y.loop_max = (output.extent.1 + -1)
  let output.s0.y.loop_min = 0
  let output.s0.y.loop_extent = output.extent.1
  let output.s0.x.loop_max = (output.extent.0 + -1)
  let output.s0.x.loop_min = 0
  let output.s0.x.loop_extent = output.extent.0
  let output.s0.y.y.loop_extent = ((output.extent.1 + 3)/4)
  let output.s0.y.y.loop_max = ((output.extent.1 + -1)/4)
  let output.s0.y.y.loop_min = 0
  let output.s0.y.yi.loop_extent = 4
  let output.s0.y.yi.loop_max = 3
  let output.s0.y.yi.loop_min = 0
  let output.s0.x.x.loop_extent = ((output.extent.0 + 63)/64)
  let output.s0.x.x.loop_max = ((output.extent.0 + -1)/64)
  let output.s0.x.x.loop_min = 0
  let output.s0.x.v16.loop_extent = 64
  let output.s0.x.v16.loop_max = 63
  let output.s0.x.v16.loop_min = 0
  for<Hexagon> (output.s0.__outermost, 0, 1) {
    for (output.s0.y.y, 0, ((output.extent.1 + 3)/4)) {
      let output.s0.y.min_1 = (output.s0.y.y*4)
      let output.s0.y.max_1 = ((output.s0.y.y*4) + 3)
      let output.s0.x.min_1 = 0
      let output.s0.x.max_1 = ((((output.extent.0 + 63)/64)*64) + -1)
      let rows.s0.y.max_1 = ((output.s0.y.y*4) + 3)
      let rows.s0.y.min_1 = (output.s0.y.y*4)
      let rows.s0.x.max_1 = ((((output.extent.0 + 63)/64)*64) + 1)
      let rows.s0.x.min_1 = -2
      prefetch input()
      let output.s0.y.yi.base = (output.s0.y.y*4)
      for (output.s0.y.yi, 0, 4) {
        let output.s0.y = ((output.s0.y.y*4) + output.s0.y.yi)
        let output.s0.y.min_2 = ((output.s0.y.y*4) + output.s0.y.yi)
        let output.s0.y.max_2 = ((output.s0.y.y*4) + output.s0.y.yi)
        let output.s0.x.min_2 = 0
        let output.s0.x.max_2 = ((((output.extent.0 + 63)/64)*64) + -1)
        let rows.s0.y.max_2 = ((output.s0.y.y*4) + output.s0.y.yi)
        let rows.s0.y.min_2 = ((output.s0.y.y*4) + output.s0.y.yi)
        let rows.s0.x.max_2 = ((((output.extent.0 + 63)/64)*64) + 1)
        let rows.s0.x.min_2 = -2
        let rows.y.max_realized = ((output.s0.y.y*4) + output.s0.y.yi)
        let rows.y.min_realized = ((output.s0.y.y*4) + output.s0.y.yi)
        let rows.y.extent_realized = 1
        let rows.x.max_realized = max((let t16 = (select((64 < output.extent.0), -62, -66) + (((output.extent.0 + 63)/64)*64)) in (((((output.extent.0 + 63)/64)*64) + t16) + 63)), ((((output.extent.0 + 63)/64)*64) + 1))
        let rows.x.min_realized = -2
        let rows.x.extent_realized = (max((let t16 = (select((64 < output.extent.0), -62, -66) + (((output.extent.0 + 63)/64)*64)) in (((((output.extent.0 + 63)/64)*64) + t16) + 63)), ((((output.extent.0 + 63)/64)*64) + 1)) + 3)
        let rows.x.extent_realized.s = (max((let t16 = (select((64 < output.extent.0), -62, -66) + (((output.extent.0 + 63)/64)*64)) in (((((output.extent.0 + 63)/64)*64) + t16) + 63)), ((((output.extent.0 + 63)/64)*64) + 1)) + 2)
        realize rows([0, 384], [((output.s0.y.y*4) + output.s0.y.yi), 1]) {
          for (output.s0.x.x, 0, ((output.extent.0 + 63)/64)) {
            assert((128 <= 384), halide_error_fold_factor_too_small("rows", "x", 384, "output.s0.x.x", 128))
            let output.s0.x.v16.base = (output.s0.x.x*64)
            let output.s0.y.min_3 = ((output.s0.y.y*4) + output.s0.y.yi)
            let output.s0.y.max_3 = ((output.s0.y.y*4) + output.s0.y.yi)
            let output.s0.x.min_3 = (output.s0.x.x*64)
            let output.s0.x.max_3 = ((output.s0.x.x*64) + 63)
            let rows.s0.y.max_3 = ((output.s0.y.y*4) + output.s0.y.yi)
            let rows.s0.y.min_3 = ((output.s0.y.y*4) + output.s0.y.yi)
            let rows.s0.x.max_3 = ((output.s0.x.x*64) + 65)
            let rows.s0.x.min_3 = select((0 < output.s0.x.x), likely_if_innermost(((output.s0.x.x*64) + 2)), ((output.s0.x.x*64) + -2))
            produce rows {
              let rows.s0.y.loop_max = ((output.s0.y.y*4) + output.s0.y.yi)
              let rows.s0.y.loop_min = ((output.s0.y.y*4) + output.s0.y.yi)
              let rows.s0.y.loop_extent = 1
              let rows.s0.x.loop_max = ((output.s0.x.x*64) + 65)
              let rows.s0.x.loop_min = rows.s0.x.min_3
              let rows.s0.x.loop_extent = (((output.s0.x.x*64) - rows.s0.x.min_3) + 66)
              let rows.s0.x.x.loop_extent = (((129 - rows.s0.x.min_3)/64) + output.s0.x.x)
              let rows.s0.x.x.loop_max = ((((129 - rows.s0.x.min_3)/64) + output.s0.x.x) + -1)
              let rows.s0.x.x.loop_min = 0
              let rows.s0.x.v19.loop_extent = 64
              let rows.s0.x.v19.loop_max = 63
              let rows.s0.x.v19.loop_min = 0
              for (rows.s0.y, ((output.s0.y.y*4) + output.s0.y.yi), 1) {
                for (rows.s0.x.x, 0, (((129 - rows.s0.x.min_3)/64) + output.s0.x.x)) {
                  let rows.s0.x.v19.base = ((rows.s0.x.x*64) + rows.s0.x.min_3)
                  vectorized (rows.s0.x.v19, 0, 64) {
                    let rows.s0.x = (((rows.s0.x.x*64) + rows.s0.x.min_3) + rows.s0.x.v19)
                    rows(((((rows.s0.x.x*64) + rows.s0.x.min_3) + rows.s0.x.v19) % 384), rows.s0.y) = (let t3 = (((rows.s0.x.x*64) + rows.s0.x.min_3) + rows.s0.x.v19) in (((int16(input((((rows.s0.x.x*64) + rows.s0.x.min_3) + rows.s0.x.v19), (rows.s0.y + 1)))*(int16)4) + ((int16(input((((rows.s0.x.x*64) + rows.s0.x.min_3) + rows.s0.x.v19), rows.s0.y))*(int16)6) + ((int16(input((((rows.s0.x.x*64) + rows.s0.x.min_3) + rows.s0.x.v19), (rows.s0.y + -1)))*(int16)4) + int16(input((((rows.s0.x.x*64) + rows.s0.x.min_3) + rows.s0.x.v19), (rows.s0.y + -2)))))) + int16(input((((rows.s0.x.x*64) + rows.s0.x.min_3) + rows.s0.x.v19), (rows.s0.y + 2)))))
                  }
                }
              }
            }
            consume rows {
              vectorized (output.s0.x.v16, 0, 64) {
                let output.s0.x = ((output.s0.x.x*64) + output.s0.x.v16)
                output(((output.s0.x.x*64) + output.s0.x.v16), ((output.s0.y.y*4) + output.s0.y.yi)) = (let t0 = ((output.s0.y.y*4) + output.s0.y.yi) in (let t1 = ((output.s0.x.x*64) + output.s0.x.v16) in uint8(((rows(((((output.s0.x.x*64) + output.s0.x.v16) + 2) % 384), ((output.s0.y.y*4) + output.s0.y.yi)) + ((rows(((((output.s0.x.x*64) + output.s0.x.v16) + 1) % 384), ((output.s0.y.y*4) + output.s0.y.yi))*(int16)4) + ((rows((((output.s0.x.x*64) + output.s0.x.v16) % 384), ((output.s0.y.y*4) + output.s0.y.yi))*(int16)6) + (rows(((((output.s0.x.x*64) + output.s0.x.v16) + -2) % 384), ((output.s0.y.y*4) + output.s0.y.yi)) + (rows(((((output.s0.x.x*64) + output.s0.x.v16) + -1) % 384), ((output.s0.y.y*4) + output.s0.y.yi))*(int16)4)))))/(int16)256))))
              }
            }
          }
        }
      }
    }
  }
}

Injecting debug_to_file calls...
Lowering after injecting debug_to_file calls:
let output.s0.y.max = (output.extent.1 + -1)
let output.s0.y.min = 0
let output.s0.x.max = (output.extent.0 + -1)
let output.s0.x.min = 0
let rows.s0.y.max = (output.extent.1 + -1)
let rows.s0.y.min = 0
let rows.s0.x.max = (output.extent.0 + 1)
let rows.s0.x.min = -2
let input.extent.0.required = ((((output.extent.0 + 3)/64)*64) + 64)
let input.min.0.required = -2
let input.stride.0.required = 1
let input.extent.1.required = (output.extent.1 + 4)
let input.min.1.required = -2
let input.stride.1.required = ((((output.extent.0 + 3)/64)*64) + 64)
let output.extent.0.required = ((((output.extent.0 + -1)/64)*64) + 64)
let output.min.0.required = 0
let output.stride.0.required = 1
let output.extent.1.required = ((((output.extent.1 + -1)/4)*4) + 4)
let output.min.1.required = 0
let output.stride.1.required = ((((output.extent.0 + -1)/64)*64) + 64)
let input.stride.0.constrained = 1
let input.min.0.constrained = 0
let input.stride.1.constrained = ((input.stride.1/64)*64)
let input.min.1.constrained = 0
let output.stride.0.constrained = 1
let output.min.0.constrained = 0
let output.stride.1.constrained = ((output.stride.1/64)*64)
let output.min.1.constrained = 0
let input.stride.0.proposed = 1
let input.min.0.proposed = 0
let input.extent.0.proposed = ((((output.extent.0 + 3)/64)*64) + 64)
let input.stride.1.proposed = (((output.extent.0 + 67)/64)*64)
let input.min.1.proposed = 0
let input.extent.1.proposed = (output.extent.1 + 4)
let output.stride.0.proposed = 1
let output.min.0.proposed = 0
let output.extent.0.proposed = ((((output.extent.0 + -1)/64)*64) + 64)
let output.stride.1.proposed = (((output.extent.0 + 63)/64)*64)
let output.min.1.proposed = 0
let output.extent.1.proposed = ((((output.extent.1 + -1)/4)*4) + 4)
assert((input.stride.0 == 1), 0)
assert((input.min.0 == 0), 0)
assert(((input.stride.1 % 64) == 0), 0)
assert((input.min.1 == 0), 0)
assert((output.stride.0 == 1), 0)
assert((output.min.0 == 0), 0)
assert(((output.stride.1 % 64) == 0), 0)
assert((output.min.1 == 0), 0)
produce output {
  let output.s0.y.loop_max = (output.extent.1 + -1)
  let output.s0.y.loop_min = 0
  let output.s0.y.loop_extent = output.extent.1
  let output.s0.x.loop_max = (output.extent.0 + -1)
  let output.s0.x.loop_min = 0
  let output.s0.x.loop_extent = output.extent.0
  let output.s0.y.y.loop_extent = ((output.extent.1 + 3)/4)
  let output.s0.y.y.loop_max = ((output.extent.1 + -1)/4)
  let output.s0.y.y.loop_min = 0
  let output.s0.y.yi.loop_extent = 4
  let output.s0.y.yi.loop_max = 3
  let output.s0.y.yi.loop_min = 0
  let output.s0.x.x.loop_extent = ((output.extent.0 + 63)/64)
  let output.s0.x.x.loop_max = ((output.extent.0 + -1)/64)
  let output.s0.x.x.loop_min = 0
  let output.s0.x.v16.loop_extent = 64
  let output.s0.x.v16.loop_max = 63
  let output.s0.x.v16.loop_min = 0
  for<Hexagon> (output.s0.__outermost, 0, 1) {
    for (output.s0.y.y, 0, ((output.extent.1 + 3)/4)) {
      let output.s0.y.min_1 = (output.s0.y.y*4)
      let output.s0.y.max_1 = ((output.s0.y.y*4) + 3)
      let output.s0.x.min_1 = 0
      let output.s0.x.max_1 = ((((output.extent.0 + 63)/64)*64) + -1)
      let rows.s0.y.max_1 = ((output.s0.y.y*4) + 3)
      let rows.s0.y.min_1 = (output.s0.y.y*4)
      let rows.s0.x.max_1 = ((((output.extent.0 + 63)/64)*64) + 1)
      let rows.s0.x.min_1 = -2
      prefetch input()
      let output.s0.y.yi.base = (output.s0.y.y*4)
      for (output.s0.y.yi, 0, 4) {
        let output.s0.y = ((output.s0.y.y*4) + output.s0.y.yi)
        let output.s0.y.min_2 = ((output.s0.y.y*4) + output.s0.y.yi)
        let output.s0.y.max_2 = ((output.s0.y.y*4) + output.s0.y.yi)
        let output.s0.x.min_2 = 0
        let output.s0.x.max_2 = ((((output.extent.0 + 63)/64)*64) + -1)
        let rows.s0.y.max_2 = ((output.s0.y.y*4) + output.s0.y.yi)
        let rows.s0.y.min_2 = ((output.s0.y.y*4) + output.s0.y.yi)
        let rows.s0.x.max_2 = ((((output.extent.0 + 63)/64)*64) + 1)
        let rows.s0.x.min_2 = -2
        let rows.y.max_realized = ((output.s0.y.y*4) + output.s0.y.yi)
        let rows.y.min_realized = ((output.s0.y.y*4) + output.s0.y.yi)
        let rows.y.extent_realized = 1
        let rows.x.max_realized = max((let t16 = (select((64 < output.extent.0), -62, -66) + (((output.extent.0 + 63)/64)*64)) in (((((output.extent.0 + 63)/64)*64) + t16) + 63)), ((((output.extent.0 + 63)/64)*64) + 1))
        let rows.x.min_realized = -2
        let rows.x.extent_realized = (max((let t16 = (select((64 < output.extent.0), -62, -66) + (((output.extent.0 + 63)/64)*64)) in (((((output.extent.0 + 63)/64)*64) + t16) + 63)), ((((output.extent.0 + 63)/64)*64) + 1)) + 3)
        let rows.x.extent_realized.s = (max((let t16 = (select((64 < output.extent.0), -62, -66) + (((output.extent.0 + 63)/64)*64)) in (((((output.extent.0 + 63)/64)*64) + t16) + 63)), ((((output.extent.0 + 63)/64)*64) + 1)) + 2)
        realize rows([0, 384], [((output.s0.y.y*4) + output.s0.y.yi), 1]) {
          for (output.s0.x.x, 0, ((output.extent.0 + 63)/64)) {
            assert((128 <= 384), halide_error_fold_factor_too_small("rows", "x", 384, "output.s0.x.x", 128))
            let output.s0.x.v16.base = (output.s0.x.x*64)
            let output.s0.y.min_3 = ((output.s0.y.y*4) + output.s0.y.yi)
            let output.s0.y.max_3 = ((output.s0.y.y*4) + output.s0.y.yi)
            let output.s0.x.min_3 = (output.s0.x.x*64)
            let output.s0.x.max_3 = ((output.s0.x.x*64) + 63)
            let rows.s0.y.max_3 = ((output.s0.y.y*4) + output.s0.y.yi)
            let rows.s0.y.min_3 = ((output.s0.y.y*4) + output.s0.y.yi)
            let rows.s0.x.max_3 = ((output.s0.x.x*64) + 65)
            let rows.s0.x.min_3 = select((0 < output.s0.x.x), likely_if_innermost(((output.s0.x.x*64) + 2)), ((output.s0.x.x*64) + -2))
            produce rows {
              let rows.s0.y.loop_max = ((output.s0.y.y*4) + output.s0.y.yi)
              let rows.s0.y.loop_min = ((output.s0.y.y*4) + output.s0.y.yi)
              let rows.s0.y.loop_extent = 1
              let rows.s0.x.loop_max = ((output.s0.x.x*64) + 65)
              let rows.s0.x.loop_min = rows.s0.x.min_3
              let rows.s0.x.loop_extent = (((output.s0.x.x*64) - rows.s0.x.min_3) + 66)
              let rows.s0.x.x.loop_extent = (((129 - rows.s0.x.min_3)/64) + output.s0.x.x)
              let rows.s0.x.x.loop_max = ((((129 - rows.s0.x.min_3)/64) + output.s0.x.x) + -1)
              let rows.s0.x.x.loop_min = 0
              let rows.s0.x.v19.loop_extent = 64
              let rows.s0.x.v19.loop_max = 63
              let rows.s0.x.v19.loop_min = 0
              for (rows.s0.y, ((output.s0.y.y*4) + output.s0.y.yi), 1) {
                for (rows.s0.x.x, 0, (((129 - rows.s0.x.min_3)/64) + output.s0.x.x)) {
                  let rows.s0.x.v19.base = ((rows.s0.x.x*64) + rows.s0.x.min_3)
                  vectorized (rows.s0.x.v19, 0, 64) {
                    let rows.s0.x = (((rows.s0.x.x*64) + rows.s0.x.min_3) + rows.s0.x.v19)
                    rows(((((rows.s0.x.x*64) + rows.s0.x.min_3) + rows.s0.x.v19) % 384), rows.s0.y) = (let t3 = (((rows.s0.x.x*64) + rows.s0.x.min_3) + rows.s0.x.v19) in (((int16(input((((rows.s0.x.x*64) + rows.s0.x.min_3) + rows.s0.x.v19), (rows.s0.y + 1)))*(int16)4) + ((int16(input((((rows.s0.x.x*64) + rows.s0.x.min_3) + rows.s0.x.v19), rows.s0.y))*(int16)6) + ((int16(input((((rows.s0.x.x*64) + rows.s0.x.min_3) + rows.s0.x.v19), (rows.s0.y + -1)))*(int16)4) + int16(input((((rows.s0.x.x*64) + rows.s0.x.min_3) + rows.s0.x.v19), (rows.s0.y + -2)))))) + int16(input((((rows.s0.x.x*64) + rows.s0.x.min_3) + rows.s0.x.v19), (rows.s0.y + 2)))))
                  }
                }
              }
            }
            consume rows {
              vectorized (output.s0.x.v16, 0, 64) {
                let output.s0.x = ((output.s0.x.x*64) + output.s0.x.v16)
                output(((output.s0.x.x*64) + output.s0.x.v16), ((output.s0.y.y*4) + output.s0.y.yi)) = (let t0 = ((output.s0.y.y*4) + output.s0.y.yi) in (let t1 = ((output.s0.x.x*64) + output.s0.x.v16) in uint8(((rows(((((output.s0.x.x*64) + output.s0.x.v16) + 2) % 384), ((output.s0.y.y*4) + output.s0.y.yi)) + ((rows(((((output.s0.x.x*64) + output.s0.x.v16) + 1) % 384), ((output.s0.y.y*4) + output.s0.y.yi))*(int16)4) + ((rows((((output.s0.x.x*64) + output.s0.x.v16) % 384), ((output.s0.y.y*4) + output.s0.y.yi))*(int16)6) + (rows(((((output.s0.x.x*64) + output.s0.x.v16) + -2) % 384), ((output.s0.y.y*4) + output.s0.y.yi)) + (rows(((((output.s0.x.x*64) + output.s0.x.v16) + -1) % 384), ((output.s0.y.y*4) + output.s0.y.yi))*(int16)4)))))/(int16)256))))
              }
            }
          }
        }
      }
    }
  }
}

Injecting prefetches...
Lowering after injecting prefetches:
let output.s0.y.max = (output.extent.1 + -1)
let output.s0.y.min = 0
let output.s0.x.max = (output.extent.0 + -1)
let output.s0.x.min = 0
let rows.s0.y.max = (output.extent.1 + -1)
let rows.s0.y.min = 0
let rows.s0.x.max = (output.extent.0 + 1)
let rows.s0.x.min = -2
let input.extent.0.required = ((((output.extent.0 + 3)/64)*64) + 64)
let input.min.0.required = -2
let input.stride.0.required = 1
let input.extent.1.required = (output.extent.1 + 4)
let input.min.1.required = -2
let input.stride.1.required = ((((output.extent.0 + 3)/64)*64) + 64)
let output.extent.0.required = ((((output.extent.0 + -1)/64)*64) + 64)
let output.min.0.required = 0
let output.stride.0.required = 1
let output.extent.1.required = ((((output.extent.1 + -1)/4)*4) + 4)
let output.min.1.required = 0
let output.stride.1.required = ((((output.extent.0 + -1)/64)*64) + 64)
let input.stride.0.constrained = 1
let input.min.0.constrained = 0
let input.stride.1.constrained = ((input.stride.1/64)*64)
let input.min.1.constrained = 0
let output.stride.0.constrained = 1
let output.min.0.constrained = 0
let output.stride.1.constrained = ((output.stride.1/64)*64)
let output.min.1.constrained = 0
let input.stride.0.proposed = 1
let input.min.0.proposed = 0
let input.extent.0.proposed = ((((output.extent.0 + 3)/64)*64) + 64)
let input.stride.1.proposed = (((output.extent.0 + 67)/64)*64)
let input.min.1.proposed = 0
let input.extent.1.proposed = (output.extent.1 + 4)
let output.stride.0.proposed = 1
let output.min.0.proposed = 0
let output.extent.0.proposed = ((((output.extent.0 + -1)/64)*64) + 64)
let output.stride.1.proposed = (((output.extent.0 + 63)/64)*64)
let output.min.1.proposed = 0
let output.extent.1.proposed = ((((output.extent.1 + -1)/4)*4) + 4)
assert((input.stride.0 == 1), 0)
assert((input.min.0 == 0), 0)
assert(((input.stride.1 % 64) == 0), 0)
assert((input.min.1 == 0), 0)
assert((output.stride.0 == 1), 0)
assert((output.min.0 == 0), 0)
assert(((output.stride.1 % 64) == 0), 0)
assert((output.min.1 == 0), 0)
produce output {
  let output.s0.y.loop_max = (output.extent.1 + -1)
  let output.s0.y.loop_min = 0
  let output.s0.y.loop_extent = output.extent.1
  let output.s0.x.loop_max = (output.extent.0 + -1)
  let output.s0.x.loop_min = 0
  let output.s0.x.loop_extent = output.extent.0
  let output.s0.y.y.loop_extent = ((output.extent.1 + 3)/4)
  let output.s0.y.y.loop_max = ((output.extent.1 + -1)/4)
  let output.s0.y.y.loop_min = 0
  let output.s0.y.yi.loop_extent = 4
  let output.s0.y.yi.loop_max = 3
  let output.s0.y.yi.loop_min = 0
  let output.s0.x.x.loop_extent = ((output.extent.0 + 63)/64)
  let output.s0.x.x.loop_max = ((output.extent.0 + -1)/64)
  let output.s0.x.x.loop_min = 0
  let output.s0.x.v16.loop_extent = 64
  let output.s0.x.v16.loop_max = 63
  let output.s0.x.v16.loop_min = 0
  for<Hexagon> (output.s0.__outermost, 0, 1) {
    for (output.s0.y.y, 0, ((output.extent.1 + 3)/4)) {
      let output.s0.y.min_1 = (output.s0.y.y*4)
      let output.s0.y.max_1 = ((output.s0.y.y*4) + 3)
      let output.s0.x.min_1 = 0
      let output.s0.x.max_1 = ((((output.extent.0 + 63)/64)*64) + -1)
      let rows.s0.y.max_1 = ((output.s0.y.y*4) + 3)
      let rows.s0.y.min_1 = (output.s0.y.y*4)
      let rows.s0.x.max_1 = ((((output.extent.0 + 63)/64)*64) + 1)
      let rows.s0.x.min_1 = -2
      prefetch input([-2, (((((output.extent.0 + 63)/64)*64) + (select((64 < output.extent.0), 2, -2) + (((output.extent.0 + -1)/64)*64))) + 66)], [((output.s0.y.y*4) + 6), 8])
      let output.s0.y.yi.base = (output.s0.y.y*4)
      for (output.s0.y.yi, 0, 4) {
        let output.s0.y = ((output.s0.y.y*4) + output.s0.y.yi)
        let output.s0.y.min_2 = ((output.s0.y.y*4) + output.s0.y.yi)
        let output.s0.y.max_2 = ((output.s0.y.y*4) + output.s0.y.yi)
        let output.s0.x.min_2 = 0
        let output.s0.x.max_2 = ((((output.extent.0 + 63)/64)*64) + -1)
        let rows.s0.y.max_2 = ((output.s0.y.y*4) + output.s0.y.yi)
        let rows.s0.y.min_2 = ((output.s0.y.y*4) + output.s0.y.yi)
        let rows.s0.x.max_2 = ((((output.extent.0 + 63)/64)*64) + 1)
        let rows.s0.x.min_2 = -2
        let rows.y.max_realized = ((output.s0.y.y*4) + output.s0.y.yi)
        let rows.y.min_realized = ((output.s0.y.y*4) + output.s0.y.yi)
        let rows.y.extent_realized = 1
        let rows.x.max_realized = max((let t16 = (select((64 < output.extent.0), -62, -66) + (((output.extent.0 + 63)/64)*64)) in (((((output.extent.0 + 63)/64)*64) + t16) + 63)), ((((output.extent.0 + 63)/64)*64) + 1))
        let rows.x.min_realized = -2
        let rows.x.extent_realized = (max((let t16 = (select((64 < output.extent.0), -62, -66) + (((output.extent.0 + 63)/64)*64)) in (((((output.extent.0 + 63)/64)*64) + t16) + 63)), ((((output.extent.0 + 63)/64)*64) + 1)) + 3)
        let rows.x.extent_realized.s = (max((let t16 = (select((64 < output.extent.0), -62, -66) + (((output.extent.0 + 63)/64)*64)) in (((((output.extent.0 + 63)/64)*64) + t16) + 63)), ((((output.extent.0 + 63)/64)*64) + 1)) + 2)
        realize rows([0, 384], [((output.s0.y.y*4) + output.s0.y.yi), 1]) {
          for (output.s0.x.x, 0, ((output.extent.0 + 63)/64)) {
            assert((128 <= 384), halide_error_fold_factor_too_small("rows", "x", 384, "output.s0.x.x", 128))
            let output.s0.x.v16.base = (output.s0.x.x*64)
            let output.s0.y.min_3 = ((output.s0.y.y*4) + output.s0.y.yi)
            let output.s0.y.max_3 = ((output.s0.y.y*4) + output.s0.y.yi)
            let output.s0.x.min_3 = (output.s0.x.x*64)
            let output.s0.x.max_3 = ((output.s0.x.x*64) + 63)
            let rows.s0.y.max_3 = ((output.s0.y.y*4) + output.s0.y.yi)
            let rows.s0.y.min_3 = ((output.s0.y.y*4) + output.s0.y.yi)
            let rows.s0.x.max_3 = ((output.s0.x.x*64) + 65)
            let rows.s0.x.min_3 = select((0 < output.s0.x.x), likely_if_innermost(((output.s0.x.x*64) + 2)), ((output.s0.x.x*64) + -2))
            produce rows {
              let rows.s0.y.loop_max = ((output.s0.y.y*4) + output.s0.y.yi)
              let rows.s0.y.loop_min = ((output.s0.y.y*4) + output.s0.y.yi)
              let rows.s0.y.loop_extent = 1
              let rows.s0.x.loop_max = ((output.s0.x.x*64) + 65)
              let rows.s0.x.loop_min = rows.s0.x.min_3
              let rows.s0.x.loop_extent = (((output.s0.x.x*64) - rows.s0.x.min_3) + 66)
              let rows.s0.x.x.loop_extent = (((129 - rows.s0.x.min_3)/64) + output.s0.x.x)
              let rows.s0.x.x.loop_max = ((((129 - rows.s0.x.min_3)/64) + output.s0.x.x) + -1)
              let rows.s0.x.x.loop_min = 0
              let rows.s0.x.v19.loop_extent = 64
              let rows.s0.x.v19.loop_max = 63
              let rows.s0.x.v19.loop_min = 0
              for (rows.s0.y, ((output.s0.y.y*4) + output.s0.y.yi), 1) {
                for (rows.s0.x.x, 0, (((129 - rows.s0.x.min_3)/64) + output.s0.x.x)) {
                  let rows.s0.x.v19.base = ((rows.s0.x.x*64) + rows.s0.x.min_3)
                  vectorized (rows.s0.x.v19, 0, 64) {
                    let rows.s0.x = (((rows.s0.x.x*64) + rows.s0.x.min_3) + rows.s0.x.v19)
                    rows(((((rows.s0.x.x*64) + rows.s0.x.min_3) + rows.s0.x.v19) % 384), rows.s0.y) = (let t3 = (((rows.s0.x.x*64) + rows.s0.x.min_3) + rows.s0.x.v19) in (((int16(input((((rows.s0.x.x*64) + rows.s0.x.min_3) + rows.s0.x.v19), (rows.s0.y + 1)))*(int16)4) + ((int16(input((((rows.s0.x.x*64) + rows.s0.x.min_3) + rows.s0.x.v19), rows.s0.y))*(int16)6) + ((int16(input((((rows.s0.x.x*64) + rows.s0.x.min_3) + rows.s0.x.v19), (rows.s0.y + -1)))*(int16)4) + int16(input((((rows.s0.x.x*64) + rows.s0.x.min_3) + rows.s0.x.v19), (rows.s0.y + -2)))))) + int16(input((((rows.s0.x.x*64) + rows.s0.x.min_3) + rows.s0.x.v19), (rows.s0.y + 2)))))
                  }
                }
              }
            }
            consume rows {
              vectorized (output.s0.x.v16, 0, 64) {
                let output.s0.x = ((output.s0.x.x*64) + output.s0.x.v16)
                output(((output.s0.x.x*64) + output.s0.x.v16), ((output.s0.y.y*4) + output.s0.y.yi)) = (let t0 = ((output.s0.y.y*4) + output.s0.y.yi) in (let t1 = ((output.s0.x.x*64) + output.s0.x.v16) in uint8(((rows(((((output.s0.x.x*64) + output.s0.x.v16) + 2) % 384), ((output.s0.y.y*4) + output.s0.y.yi)) + ((rows(((((output.s0.x.x*64) + output.s0.x.v16) + 1) % 384), ((output.s0.y.y*4) + output.s0.y.yi))*(int16)4) + ((rows((((output.s0.x.x*64) + output.s0.x.v16) % 384), ((output.s0.y.y*4) + output.s0.y.yi))*(int16)6) + (rows(((((output.s0.x.x*64) + output.s0.x.v16) + -2) % 384), ((output.s0.y.y*4) + output.s0.y.yi)) + (rows(((((output.s0.x.x*64) + output.s0.x.v16) + -1) % 384), ((output.s0.y.y*4) + output.s0.y.yi))*(int16)4)))))/(int16)256))))
              }
            }
          }
        }
      }
    }
  }
}


Dynamically skipping stages...
skip_stages checking cols
skip_stages checking rows
skip_stages checking input_16
skip_stages checking input_im
Lowering after dynamically skipping stages:
let output.s0.y.max = (output.extent.1 + -1)
let output.s0.y.min = 0
let output.s0.x.max = (output.extent.0 + -1)
let output.s0.x.min = 0
let rows.s0.y.max = (output.extent.1 + -1)
let rows.s0.y.min = 0
let rows.s0.x.max = (output.extent.0 + 1)
let rows.s0.x.min = -2
let input.extent.0.required = ((((output.extent.0 + 3)/64)*64) + 64)
let input.min.0.required = -2
let input.stride.0.required = 1
let input.extent.1.required = (output.extent.1 + 4)
let input.min.1.required = -2
let input.stride.1.required = ((((output.extent.0 + 3)/64)*64) + 64)
let output.extent.0.required = ((((output.extent.0 + -1)/64)*64) + 64)
let output.min.0.required = 0
let output.stride.0.required = 1
let output.extent.1.required = ((((output.extent.1 + -1)/4)*4) + 4)
let output.min.1.required = 0
let output.stride.1.required = ((((output.extent.0 + -1)/64)*64) + 64)
let input.stride.0.constrained = 1
let input.min.0.constrained = 0
let input.stride.1.constrained = ((input.stride.1/64)*64)
let input.min.1.constrained = 0
let output.stride.0.constrained = 1
let output.min.0.constrained = 0
let output.stride.1.constrained = ((output.stride.1/64)*64)
let output.min.1.constrained = 0
let input.stride.0.proposed = 1
let input.min.0.proposed = 0
let input.extent.0.proposed = ((((output.extent.0 + 3)/64)*64) + 64)
let input.stride.1.proposed = (((output.extent.0 + 67)/64)*64)
let input.min.1.proposed = 0
let input.extent.1.proposed = (output.extent.1 + 4)
let output.stride.0.proposed = 1
let output.min.0.proposed = 0
let output.extent.0.proposed = ((((output.extent.0 + -1)/64)*64) + 64)
let output.stride.1.proposed = (((output.extent.0 + 63)/64)*64)
let output.min.1.proposed = 0
let output.extent.1.proposed = ((((output.extent.1 + -1)/4)*4) + 4)
assert((input.stride.0 == 1), 0)
assert((input.min.0 == 0), 0)
assert(((input.stride.1 % 64) == 0), 0)
assert((input.min.1 == 0), 0)
assert((output.stride.0 == 1), 0)
assert((output.min.0 == 0), 0)
assert(((output.stride.1 % 64) == 0), 0)
assert((output.min.1 == 0), 0)
produce output {
  let output.s0.y.loop_max = (output.extent.1 + -1)
  let output.s0.y.loop_min = 0
  let output.s0.y.loop_extent = output.extent.1
  let output.s0.x.loop_max = (output.extent.0 + -1)
  let output.s0.x.loop_min = 0
  let output.s0.x.loop_extent = output.extent.0
  let output.s0.y.y.loop_extent = ((output.extent.1 + 3)/4)
  let output.s0.y.y.loop_max = ((output.extent.1 + -1)/4)
  let output.s0.y.y.loop_min = 0
  let output.s0.y.yi.loop_extent = 4
  let output.s0.y.yi.loop_max = 3
  let output.s0.y.yi.loop_min = 0
  let output.s0.x.x.loop_extent = ((output.extent.0 + 63)/64)
  let output.s0.x.x.loop_max = ((output.extent.0 + -1)/64)
  let output.s0.x.x.loop_min = 0
  let output.s0.x.v16.loop_extent = 64
  let output.s0.x.v16.loop_max = 63
  let output.s0.x.v16.loop_min = 0
  for<Hexagon> (output.s0.__outermost, 0, 1) {
    for (output.s0.y.y, 0, ((output.extent.1 + 3)/4)) {
      let output.s0.y.min_1 = (output.s0.y.y*4)
      let output.s0.y.max_1 = ((output.s0.y.y*4) + 3)
      let output.s0.x.min_1 = 0
      let output.s0.x.max_1 = ((((output.extent.0 + 63)/64)*64) + -1)
      let rows.s0.y.max_1 = ((output.s0.y.y*4) + 3)
      let rows.s0.y.min_1 = (output.s0.y.y*4)
      let rows.s0.x.max_1 = ((((output.extent.0 + 63)/64)*64) + 1)
      let rows.s0.x.min_1 = -2
      prefetch input([-2, (((((output.extent.0 + 63)/64)*64) + (select((64 < output.extent.0), 2, -2) + (((output.extent.0 + -1)/64)*64))) + 66)], [((output.s0.y.y*4) + 6), 8])
      let output.s0.y.yi.base = (output.s0.y.y*4)
      for (output.s0.y.yi, 0, 4) {
        let output.s0.y = ((output.s0.y.y*4) + output.s0.y.yi)
        let output.s0.y.min_2 = ((output.s0.y.y*4) + output.s0.y.yi)
        let output.s0.y.max_2 = ((output.s0.y.y*4) + output.s0.y.yi)
        let output.s0.x.min_2 = 0
        let output.s0.x.max_2 = ((((output.extent.0 + 63)/64)*64) + -1)
        let rows.s0.y.max_2 = ((output.s0.y.y*4) + output.s0.y.yi)
        let rows.s0.y.min_2 = ((output.s0.y.y*4) + output.s0.y.yi)
        let rows.s0.x.max_2 = ((((output.extent.0 + 63)/64)*64) + 1)
        let rows.s0.x.min_2 = -2
        let rows.y.max_realized = ((output.s0.y.y*4) + output.s0.y.yi)
        let rows.y.min_realized = ((output.s0.y.y*4) + output.s0.y.yi)
        let rows.y.extent_realized = 1
        let rows.x.max_realized = max((let t16 = (select((64 < output.extent.0), -62, -66) + (((output.extent.0 + 63)/64)*64)) in (((((output.extent.0 + 63)/64)*64) + t16) + 63)), ((((output.extent.0 + 63)/64)*64) + 1))
        let rows.x.min_realized = -2
        let rows.x.extent_realized = (max((let t16 = (select((64 < output.extent.0), -62, -66) + (((output.extent.0 + 63)/64)*64)) in (((((output.extent.0 + 63)/64)*64) + t16) + 63)), ((((output.extent.0 + 63)/64)*64) + 1)) + 3)
        let rows.x.extent_realized.s = (max((let t16 = (select((64 < output.extent.0), -62, -66) + (((output.extent.0 + 63)/64)*64)) in (((((output.extent.0 + 63)/64)*64) + t16) + 63)), ((((output.extent.0 + 63)/64)*64) + 1)) + 2)
        realize rows([0, 384], [((output.s0.y.y*4) + output.s0.y.yi), 1]) {
          for (output.s0.x.x, 0, ((output.extent.0 + 63)/64)) {
            assert((128 <= 384), halide_error_fold_factor_too_small("rows", "x", 384, "output.s0.x.x", 128))
            let output.s0.x.v16.base = (output.s0.x.x*64)
            let output.s0.y.min_3 = ((output.s0.y.y*4) + output.s0.y.yi)
            let output.s0.y.max_3 = ((output.s0.y.y*4) + output.s0.y.yi)
            let output.s0.x.min_3 = (output.s0.x.x*64)
            let output.s0.x.max_3 = ((output.s0.x.x*64) + 63)
            let rows.s0.y.max_3 = ((output.s0.y.y*4) + output.s0.y.yi)
            let rows.s0.y.min_3 = ((output.s0.y.y*4) + output.s0.y.yi)
            let rows.s0.x.max_3 = ((output.s0.x.x*64) + 65)
            let rows.s0.x.min_3 = select((0 < output.s0.x.x), likely_if_innermost(((output.s0.x.x*64) + 2)), ((output.s0.x.x*64) + -2))
            produce rows {
              let rows.s0.y.loop_max = ((output.s0.y.y*4) + output.s0.y.yi)
              let rows.s0.y.loop_min = ((output.s0.y.y*4) + output.s0.y.yi)
              let rows.s0.y.loop_extent = 1
              let rows.s0.x.loop_max = ((output.s0.x.x*64) + 65)
              let rows.s0.x.loop_min = rows.s0.x.min_3
              let rows.s0.x.loop_extent = (((output.s0.x.x*64) - rows.s0.x.min_3) + 66)
              let rows.s0.x.x.loop_extent = (((129 - rows.s0.x.min_3)/64) + output.s0.x.x)
              let rows.s0.x.x.loop_max = ((((129 - rows.s0.x.min_3)/64) + output.s0.x.x) + -1)
              let rows.s0.x.x.loop_min = 0
              let rows.s0.x.v19.loop_extent = 64
              let rows.s0.x.v19.loop_max = 63
              let rows.s0.x.v19.loop_min = 0
              for (rows.s0.y, ((output.s0.y.y*4) + output.s0.y.yi), 1) {
                for (rows.s0.x.x, 0, (((129 - rows.s0.x.min_3)/64) + output.s0.x.x)) {
                  let rows.s0.x.v19.base = ((rows.s0.x.x*64) + rows.s0.x.min_3)
                  vectorized (rows.s0.x.v19, 0, 64) {
                    let rows.s0.x = (((rows.s0.x.x*64) + rows.s0.x.min_3) + rows.s0.x.v19)
                    rows(((((rows.s0.x.x*64) + rows.s0.x.min_3) + rows.s0.x.v19) % 384), rows.s0.y) = (let t3 = (((rows.s0.x.x*64) + rows.s0.x.min_3) + rows.s0.x.v19) in (((int16(input((((rows.s0.x.x*64) + rows.s0.x.min_3) + rows.s0.x.v19), (rows.s0.y + 1)))*(int16)4) + ((int16(input((((rows.s0.x.x*64) + rows.s0.x.min_3) + rows.s0.x.v19), rows.s0.y))*(int16)6) + ((int16(input((((rows.s0.x.x*64) + rows.s0.x.min_3) + rows.s0.x.v19), (rows.s0.y + -1)))*(int16)4) + int16(input((((rows.s0.x.x*64) + rows.s0.x.min_3) + rows.s0.x.v19), (rows.s0.y + -2)))))) + int16(input((((rows.s0.x.x*64) + rows.s0.x.min_3) + rows.s0.x.v19), (rows.s0.y + 2)))))
                  }
                }
              }
            }
            consume rows {
              vectorized (output.s0.x.v16, 0, 64) {
                let output.s0.x = ((output.s0.x.x*64) + output.s0.x.v16)
                output(((output.s0.x.x*64) + output.s0.x.v16), ((output.s0.y.y*4) + output.s0.y.yi)) = (let t0 = ((output.s0.y.y*4) + output.s0.y.yi) in (let t1 = ((output.s0.x.x*64) + output.s0.x.v16) in uint8(((rows(((((output.s0.x.x*64) + output.s0.x.v16) + 2) % 384), ((output.s0.y.y*4) + output.s0.y.yi)) + ((rows(((((output.s0.x.x*64) + output.s0.x.v16) + 1) % 384), ((output.s0.y.y*4) + output.s0.y.yi))*(int16)4) + ((rows((((output.s0.x.x*64) + output.s0.x.v16) % 384), ((output.s0.y.y*4) + output.s0.y.yi))*(int16)6) + (rows(((((output.s0.x.x*64) + output.s0.x.v16) + -2) % 384), ((output.s0.y.y*4) + output.s0.y.yi)) + (rows(((((output.s0.x.x*64) + output.s0.x.v16) + -1) % 384), ((output.s0.y.y*4) + output.s0.y.yi))*(int16)4)))))/(int16)256))))
              }
            }
          }
        }
      }
    }
  }
}


Forking asynchronous producers...
Lowering after forking asynchronous producers:
let output.s0.y.max = (output.extent.1 + -1)
let output.s0.y.min = 0
let output.s0.x.max = (output.extent.0 + -1)
let output.s0.x.min = 0
let rows.s0.y.max = (output.extent.1 + -1)
let rows.s0.y.min = 0
let rows.s0.x.max = (output.extent.0 + 1)
let rows.s0.x.min = -2
let input.extent.0.required = ((((output.extent.0 + 3)/64)*64) + 64)
let input.min.0.required = -2
let input.stride.0.required = 1
let input.extent.1.required = (output.extent.1 + 4)
let input.min.1.required = -2
let input.stride.1.required = ((((output.extent.0 + 3)/64)*64) + 64)
let output.extent.0.required = ((((output.extent.0 + -1)/64)*64) + 64)
let output.min.0.required = 0
let output.stride.0.required = 1
let output.extent.1.required = ((((output.extent.1 + -1)/4)*4) + 4)
let output.min.1.required = 0
let output.stride.1.required = ((((output.extent.0 + -1)/64)*64) + 64)
let input.stride.0.constrained = 1
let input.min.0.constrained = 0
let input.stride.1.constrained = ((input.stride.1/64)*64)
let input.min.1.constrained = 0
let output.stride.0.constrained = 1
let output.min.0.constrained = 0
let output.stride.1.constrained = ((output.stride.1/64)*64)
let output.min.1.constrained = 0
let input.stride.0.proposed = 1
let input.min.0.proposed = 0
let input.extent.0.proposed = ((((output.extent.0 + 3)/64)*64) + 64)
let input.stride.1.proposed = (((output.extent.0 + 67)/64)*64)
let input.min.1.proposed = 0
let input.extent.1.proposed = (output.extent.1 + 4)
let output.stride.0.proposed = 1
let output.min.0.proposed = 0
let output.extent.0.proposed = ((((output.extent.0 + -1)/64)*64) + 64)
let output.stride.1.proposed = (((output.extent.0 + 63)/64)*64)
let output.min.1.proposed = 0
let output.extent.1.proposed = ((((output.extent.1 + -1)/4)*4) + 4)
assert((input.stride.0 == 1), 0)
assert((input.min.0 == 0), 0)
assert(((input.stride.1 % 64) == 0), 0)
assert((input.min.1 == 0), 0)
assert((output.stride.0 == 1), 0)
assert((output.min.0 == 0), 0)
assert(((output.stride.1 % 64) == 0), 0)
assert((output.min.1 == 0), 0)
let output.s0.y.loop_max = (output.extent.1 + -1)
let output.s0.y.loop_min = 0
let output.s0.y.loop_extent = output.extent.1
let output.s0.x.loop_max = (output.extent.0 + -1)
let output.s0.x.loop_min = 0
let output.s0.x.loop_extent = output.extent.0
let output.s0.y.y.loop_extent = ((output.extent.1 + 3)/4)
let output.s0.y.y.loop_max = ((output.extent.1 + -1)/4)
let output.s0.y.y.loop_min = 0
let output.s0.y.yi.loop_extent = 4
let output.s0.y.yi.loop_max = 3
let output.s0.y.yi.loop_min = 0
let output.s0.x.x.loop_extent = ((output.extent.0 + 63)/64)
let output.s0.x.x.loop_max = ((output.extent.0 + -1)/64)
let output.s0.x.x.loop_min = 0
let output.s0.x.v16.loop_extent = 64
let output.s0.x.v16.loop_max = 63
let output.s0.x.v16.loop_min = 0
produce output {
  for<Hexagon> (output.s0.__outermost, 0, 1) {
    for (output.s0.y.y, 0, ((output.extent.1 + 3)/4)) {
      let output.s0.y.min_1 = (output.s0.y.y*4)
      let output.s0.y.max_1 = ((output.s0.y.y*4) + 3)
      let output.s0.x.min_1 = 0
      let output.s0.x.max_1 = ((((output.extent.0 + 63)/64)*64) + -1)
      let rows.s0.y.max_1 = ((output.s0.y.y*4) + 3)
      let rows.s0.y.min_1 = (output.s0.y.y*4)
      let rows.s0.x.max_1 = ((((output.extent.0 + 63)/64)*64) + 1)
      let rows.s0.x.min_1 = -2
      prefetch input([-2, (((((output.extent.0 + 63)/64)*64) + (select((64 < output.extent.0), 2, -2) + (((output.extent.0 + -1)/64)*64))) + 66)], [((output.s0.y.y*4) + 6), 8])
      let output.s0.y.yi.base = (output.s0.y.y*4)
      for (output.s0.y.yi, 0, 4) {
        let output.s0.y = ((output.s0.y.y*4) + output.s0.y.yi)
        let output.s0.y.min_2 = ((output.s0.y.y*4) + output.s0.y.yi)
        let output.s0.y.max_2 = ((output.s0.y.y*4) + output.s0.y.yi)
        let output.s0.x.min_2 = 0
        let output.s0.x.max_2 = ((((output.extent.0 + 63)/64)*64) + -1)
        let rows.s0.y.max_2 = ((output.s0.y.y*4) + output.s0.y.yi)
        let rows.s0.y.min_2 = ((output.s0.y.y*4) + output.s0.y.yi)
        let rows.s0.x.max_2 = ((((output.extent.0 + 63)/64)*64) + 1)
        let rows.s0.x.min_2 = -2
        let rows.y.max_realized = ((output.s0.y.y*4) + output.s0.y.yi)
        let rows.y.min_realized = ((output.s0.y.y*4) + output.s0.y.yi)
        let rows.y.extent_realized = 1
        let rows.x.max_realized = max((let t16 = (select((64 < output.extent.0), -62, -66) + (((output.extent.0 + 63)/64)*64)) in (((((output.extent.0 + 63)/64)*64) + t16) + 63)), ((((output.extent.0 + 63)/64)*64) + 1))
        let rows.x.min_realized = -2
        let rows.x.extent_realized = (max((let t16 = (select((64 < output.extent.0), -62, -66) + (((output.extent.0 + 63)/64)*64)) in (((((output.extent.0 + 63)/64)*64) + t16) + 63)), ((((output.extent.0 + 63)/64)*64) + 1)) + 3)
        let rows.x.extent_realized.s = (max((let t16 = (select((64 < output.extent.0), -62, -66) + (((output.extent.0 + 63)/64)*64)) in (((((output.extent.0 + 63)/64)*64) + t16) + 63)), ((((output.extent.0 + 63)/64)*64) + 1)) + 2)
        realize rows([0, 384], [((output.s0.y.y*4) + output.s0.y.yi), 1]) {
          for (output.s0.x.x, 0, ((output.extent.0 + 63)/64)) {
            assert((128 <= 384), halide_error_fold_factor_too_small("rows", "x", 384, "output.s0.x.x", 128))
            let output.s0.x.v16.base = (output.s0.x.x*64)
            let output.s0.y.min_3 = ((output.s0.y.y*4) + output.s0.y.yi)
            let output.s0.y.max_3 = ((output.s0.y.y*4) + output.s0.y.yi)
            let output.s0.x.min_3 = (output.s0.x.x*64)
            let output.s0.x.max_3 = ((output.s0.x.x*64) + 63)
            let rows.s0.y.max_3 = ((output.s0.y.y*4) + output.s0.y.yi)
            let rows.s0.y.min_3 = ((output.s0.y.y*4) + output.s0.y.yi)
            let rows.s0.x.max_3 = ((output.s0.x.x*64) + 65)
            let rows.s0.x.min_3 = select((0 < output.s0.x.x), likely_if_innermost(((output.s0.x.x*64) + 2)), ((output.s0.x.x*64) + -2))
            let rows.s0.y.loop_max = ((output.s0.y.y*4) + output.s0.y.yi)
            let rows.s0.y.loop_min = ((output.s0.y.y*4) + output.s0.y.yi)
            let rows.s0.y.loop_extent = 1
            let rows.s0.x.loop_max = ((output.s0.x.x*64) + 65)
            let rows.s0.x.loop_min = rows.s0.x.min_3
            let rows.s0.x.loop_extent = (((output.s0.x.x*64) - rows.s0.x.min_3) + 66)
            let rows.s0.x.x.loop_extent = (((129 - rows.s0.x.min_3)/64) + output.s0.x.x)
            let rows.s0.x.x.loop_max = ((((129 - rows.s0.x.min_3)/64) + output.s0.x.x) + -1)
            let rows.s0.x.x.loop_min = 0
            let rows.s0.x.v19.loop_extent = 64
            let rows.s0.x.v19.loop_max = 63
            let rows.s0.x.v19.loop_min = 0
            produce rows {
              for (rows.s0.y, ((output.s0.y.y*4) + output.s0.y.yi), 1) {
                for (rows.s0.x.x, 0, (((129 - rows.s0.x.min_3)/64) + output.s0.x.x)) {
                  let rows.s0.x.v19.base = ((rows.s0.x.x*64) + rows.s0.x.min_3)
                  vectorized (rows.s0.x.v19, 0, 64) {
                    let rows.s0.x = (((rows.s0.x.x*64) + rows.s0.x.min_3) + rows.s0.x.v19)
                    rows(((((rows.s0.x.x*64) + rows.s0.x.min_3) + rows.s0.x.v19) % 384), rows.s0.y) = (let t3 = (((rows.s0.x.x*64) + rows.s0.x.min_3) + rows.s0.x.v19) in (((int16(input((((rows.s0.x.x*64) + rows.s0.x.min_3) + rows.s0.x.v19), (rows.s0.y + 1)))*(int16)4) + ((int16(input((((rows.s0.x.x*64) + rows.s0.x.min_3) + rows.s0.x.v19), rows.s0.y))*(int16)6) + ((int16(input((((rows.s0.x.x*64) + rows.s0.x.min_3) + rows.s0.x.v19), (rows.s0.y + -1)))*(int16)4) + int16(input((((rows.s0.x.x*64) + rows.s0.x.min_3) + rows.s0.x.v19), (rows.s0.y + -2)))))) + int16(input((((rows.s0.x.x*64) + rows.s0.x.min_3) + rows.s0.x.v19), (rows.s0.y + 2)))))
                  }
                }
              }
            }
            consume rows {
              vectorized (output.s0.x.v16, 0, 64) {
                let output.s0.x = ((output.s0.x.x*64) + output.s0.x.v16)
                output(((output.s0.x.x*64) + output.s0.x.v16), ((output.s0.y.y*4) + output.s0.y.yi)) = (let t0 = ((output.s0.y.y*4) + output.s0.y.yi) in (let t1 = ((output.s0.x.x*64) + output.s0.x.v16) in uint8(((rows(((((output.s0.x.x*64) + output.s0.x.v16) + 2) % 384), ((output.s0.y.y*4) + output.s0.y.yi)) + ((rows(((((output.s0.x.x*64) + output.s0.x.v16) + 1) % 384), ((output.s0.y.y*4) + output.s0.y.yi))*(int16)4) + ((rows((((output.s0.x.x*64) + output.s0.x.v16) % 384), ((output.s0.y.y*4) + output.s0.y.yi))*(int16)6) + (rows(((((output.s0.x.x*64) + output.s0.x.v16) + -2) % 384), ((output.s0.y.y*4) + output.s0.y.yi)) + (rows(((((output.s0.x.x*64) + output.s0.x.v16) + -1) % 384), ((output.s0.y.y*4) + output.s0.y.yi))*(int16)4)))))/(int16)256))))
              }
            }
          }
        }
      }
    }
  }
}

Destructuring tuple-valued realizations...
Lowering after destructuring tuple-valued realizations:
let output.s0.y.max = (output.extent.1 + -1)
let output.s0.y.min = 0
let output.s0.x.max = (output.extent.0 + -1)
let output.s0.x.min = 0
let rows.s0.y.max = (output.extent.1 + -1)
let rows.s0.y.min = 0
let rows.s0.x.max = (output.extent.0 + 1)
let rows.s0.x.min = -2
let input.extent.0.required = ((((output.extent.0 + 3)/64)*64) + 64)
let input.min.0.required = -2
let input.stride.0.required = 1
let input.extent.1.required = (output.extent.1 + 4)
let input.min.1.required = -2
let input.stride.1.required = ((((output.extent.0 + 3)/64)*64) + 64)
let output.extent.0.required = ((((output.extent.0 + -1)/64)*64) + 64)
let output.min.0.required = 0
let output.stride.0.required = 1
let output.extent.1.required = ((((output.extent.1 + -1)/4)*4) + 4)
let output.min.1.required = 0
let output.stride.1.required = ((((output.extent.0 + -1)/64)*64) + 64)
let input.stride.0.constrained = 1
let input.min.0.constrained = 0
let input.stride.1.constrained = ((input.stride.1/64)*64)
let input.min.1.constrained = 0
let output.stride.0.constrained = 1
let output.min.0.constrained = 0
let output.stride.1.constrained = ((output.stride.1/64)*64)
let output.min.1.constrained = 0
let input.stride.0.proposed = 1
let input.min.0.proposed = 0
let input.extent.0.proposed = ((((output.extent.0 + 3)/64)*64) + 64)
let input.stride.1.proposed = (((output.extent.0 + 67)/64)*64)
let input.min.1.proposed = 0
let input.extent.1.proposed = (output.extent.1 + 4)
let output.stride.0.proposed = 1
let output.min.0.proposed = 0
let output.extent.0.proposed = ((((output.extent.0 + -1)/64)*64) + 64)
let output.stride.1.proposed = (((output.extent.0 + 63)/64)*64)
let output.min.1.proposed = 0
let output.extent.1.proposed = ((((output.extent.1 + -1)/4)*4) + 4)
assert((input.stride.0 == 1), 0)
assert((input.min.0 == 0), 0)
assert(((input.stride.1 % 64) == 0), 0)
assert((input.min.1 == 0), 0)
assert((output.stride.0 == 1), 0)
assert((output.min.0 == 0), 0)
assert(((output.stride.1 % 64) == 0), 0)
assert((output.min.1 == 0), 0)
let output.s0.y.loop_max = (output.extent.1 + -1)
let output.s0.y.loop_min = 0
let output.s0.y.loop_extent = output.extent.1
let output.s0.x.loop_max = (output.extent.0 + -1)
let output.s0.x.loop_min = 0
let output.s0.x.loop_extent = output.extent.0
let output.s0.y.y.loop_extent = ((output.extent.1 + 3)/4)
let output.s0.y.y.loop_max = ((output.extent.1 + -1)/4)
let output.s0.y.y.loop_min = 0
let output.s0.y.yi.loop_extent = 4
let output.s0.y.yi.loop_max = 3
let output.s0.y.yi.loop_min = 0
let output.s0.x.x.loop_extent = ((output.extent.0 + 63)/64)
let output.s0.x.x.loop_max = ((output.extent.0 + -1)/64)
let output.s0.x.x.loop_min = 0
let output.s0.x.v16.loop_extent = 64
let output.s0.x.v16.loop_max = 63
let output.s0.x.v16.loop_min = 0
produce output {
  for<Hexagon> (output.s0.__outermost, 0, 1) {
    for (output.s0.y.y, 0, ((output.extent.1 + 3)/4)) {
      let output.s0.y.min_1 = (output.s0.y.y*4)
      let output.s0.y.max_1 = ((output.s0.y.y*4) + 3)
      let output.s0.x.min_1 = 0
      let output.s0.x.max_1 = ((((output.extent.0 + 63)/64)*64) + -1)
      let rows.s0.y.max_1 = ((output.s0.y.y*4) + 3)
      let rows.s0.y.min_1 = (output.s0.y.y*4)
      let rows.s0.x.max_1 = ((((output.extent.0 + 63)/64)*64) + 1)
      let rows.s0.x.min_1 = -2
      prefetch input([-2, (((((output.extent.0 + 63)/64)*64) + (select((64 < output.extent.0), 2, -2) + (((output.extent.0 + -1)/64)*64))) + 66)], [((output.s0.y.y*4) + 6), 8])
      let output.s0.y.yi.base = (output.s0.y.y*4)
      for (output.s0.y.yi, 0, 4) {
        let output.s0.y = ((output.s0.y.y*4) + output.s0.y.yi)
        let output.s0.y.min_2 = ((output.s0.y.y*4) + output.s0.y.yi)
        let output.s0.y.max_2 = ((output.s0.y.y*4) + output.s0.y.yi)
        let output.s0.x.min_2 = 0
        let output.s0.x.max_2 = ((((output.extent.0 + 63)/64)*64) + -1)
        let rows.s0.y.max_2 = ((output.s0.y.y*4) + output.s0.y.yi)
        let rows.s0.y.min_2 = ((output.s0.y.y*4) + output.s0.y.yi)
        let rows.s0.x.max_2 = ((((output.extent.0 + 63)/64)*64) + 1)
        let rows.s0.x.min_2 = -2
        let rows.y.max_realized = ((output.s0.y.y*4) + output.s0.y.yi)
        let rows.y.min_realized = ((output.s0.y.y*4) + output.s0.y.yi)
        let rows.y.extent_realized = 1
        let rows.x.max_realized = max((let t16 = (select((64 < output.extent.0), -62, -66) + (((output.extent.0 + 63)/64)*64)) in (((((output.extent.0 + 63)/64)*64) + t16) + 63)), ((((output.extent.0 + 63)/64)*64) + 1))
        let rows.x.min_realized = -2
        let rows.x.extent_realized = (max((let t16 = (select((64 < output.extent.0), -62, -66) + (((output.extent.0 + 63)/64)*64)) in (((((output.extent.0 + 63)/64)*64) + t16) + 63)), ((((output.extent.0 + 63)/64)*64) + 1)) + 3)
        let rows.x.extent_realized.s = (max((let t16 = (select((64 < output.extent.0), -62, -66) + (((output.extent.0 + 63)/64)*64)) in (((((output.extent.0 + 63)/64)*64) + t16) + 63)), ((((output.extent.0 + 63)/64)*64) + 1)) + 2)
        realize rows([0, 384], [((output.s0.y.y*4) + output.s0.y.yi), 1]) {
          for (output.s0.x.x, 0, ((output.extent.0 + 63)/64)) {
            assert((128 <= 384), halide_error_fold_factor_too_small("rows", "x", 384, "output.s0.x.x", 128))
            let output.s0.x.v16.base = (output.s0.x.x*64)
            let output.s0.y.min_3 = ((output.s0.y.y*4) + output.s0.y.yi)
            let output.s0.y.max_3 = ((output.s0.y.y*4) + output.s0.y.yi)
            let output.s0.x.min_3 = (output.s0.x.x*64)
            let output.s0.x.max_3 = ((output.s0.x.x*64) + 63)
            let rows.s0.y.max_3 = ((output.s0.y.y*4) + output.s0.y.yi)
            let rows.s0.y.min_3 = ((output.s0.y.y*4) + output.s0.y.yi)
            let rows.s0.x.max_3 = ((output.s0.x.x*64) + 65)
            let rows.s0.x.min_3 = select((0 < output.s0.x.x), likely_if_innermost(((output.s0.x.x*64) + 2)), ((output.s0.x.x*64) + -2))
            let rows.s0.y.loop_max = ((output.s0.y.y*4) + output.s0.y.yi)
            let rows.s0.y.loop_min = ((output.s0.y.y*4) + output.s0.y.yi)
            let rows.s0.y.loop_extent = 1
            let rows.s0.x.loop_max = ((output.s0.x.x*64) + 65)
            let rows.s0.x.loop_min = rows.s0.x.min_3
            let rows.s0.x.loop_extent = (((output.s0.x.x*64) - rows.s0.x.min_3) + 66)
            let rows.s0.x.x.loop_extent = (((129 - rows.s0.x.min_3)/64) + output.s0.x.x)
            let rows.s0.x.x.loop_max = ((((129 - rows.s0.x.min_3)/64) + output.s0.x.x) + -1)
            let rows.s0.x.x.loop_min = 0
            let rows.s0.x.v19.loop_extent = 64
            let rows.s0.x.v19.loop_max = 63
            let rows.s0.x.v19.loop_min = 0
            produce rows {
              for (rows.s0.y, ((output.s0.y.y*4) + output.s0.y.yi), 1) {
                for (rows.s0.x.x, 0, (((129 - rows.s0.x.min_3)/64) + output.s0.x.x)) {
                  let rows.s0.x.v19.base = ((rows.s0.x.x*64) + rows.s0.x.min_3)
                  vectorized (rows.s0.x.v19, 0, 64) {
                    let rows.s0.x = (((rows.s0.x.x*64) + rows.s0.x.min_3) + rows.s0.x.v19)
                    rows(((((rows.s0.x.x*64) + rows.s0.x.min_3) + rows.s0.x.v19) % 384), rows.s0.y) = (let t3 = (((rows.s0.x.x*64) + rows.s0.x.min_3) + rows.s0.x.v19) in (((int16(input((((rows.s0.x.x*64) + rows.s0.x.min_3) + rows.s0.x.v19), (rows.s0.y + 1)))*(int16)4) + ((int16(input((((rows.s0.x.x*64) + rows.s0.x.min_3) + rows.s0.x.v19), rows.s0.y))*(int16)6) + ((int16(input((((rows.s0.x.x*64) + rows.s0.x.min_3) + rows.s0.x.v19), (rows.s0.y + -1)))*(int16)4) + int16(input((((rows.s0.x.x*64) + rows.s0.x.min_3) + rows.s0.x.v19), (rows.s0.y + -2)))))) + int16(input((((rows.s0.x.x*64) + rows.s0.x.min_3) + rows.s0.x.v19), (rows.s0.y + 2)))))
                  }
                }
              }
            }
            consume rows {
              vectorized (output.s0.x.v16, 0, 64) {
                let output.s0.x = ((output.s0.x.x*64) + output.s0.x.v16)
                output(((output.s0.x.x*64) + output.s0.x.v16), ((output.s0.y.y*4) + output.s0.y.yi)) = (let t0 = ((output.s0.y.y*4) + output.s0.y.yi) in (let t1 = ((output.s0.x.x*64) + output.s0.x.v16) in uint8(((rows(((((output.s0.x.x*64) + output.s0.x.v16) + 2) % 384), ((output.s0.y.y*4) + output.s0.y.yi)) + ((rows(((((output.s0.x.x*64) + output.s0.x.v16) + 1) % 384), ((output.s0.y.y*4) + output.s0.y.yi))*(int16)4) + ((rows((((output.s0.x.x*64) + output.s0.x.v16) % 384), ((output.s0.y.y*4) + output.s0.y.yi))*(int16)6) + (rows(((((output.s0.x.x*64) + output.s0.x.v16) + -2) % 384), ((output.s0.y.y*4) + output.s0.y.yi)) + (rows(((((output.s0.x.x*64) + output.s0.x.v16) + -1) % 384), ((output.s0.y.y*4) + output.s0.y.yi))*(int16)4)))))/(int16)256))))
              }
            }
          }
        }
      }
    }
  }
}


Performing storage flattening...
Lowering after storage flattening:
let output.s0.y.max = (output.extent.1 + -1)
let output.s0.y.min = 0
let output.s0.x.max = (output.extent.0 + -1)
let output.s0.x.min = 0
let rows.s0.y.max = (output.extent.1 + -1)
let rows.s0.y.min = 0
let rows.s0.x.max = (output.extent.0 + 1)
let rows.s0.x.min = -2
let input.extent.0.required = ((((output.extent.0 + 3)/64)*64) + 64)
let input.min.0.required = -2
let input.stride.0.required = 1
let input.extent.1.required = (output.extent.1 + 4)
let input.min.1.required = -2
let input.stride.1.required = ((((output.extent.0 + 3)/64)*64) + 64)
let output.extent.0.required = ((((output.extent.0 + -1)/64)*64) + 64)
let output.min.0.required = 0
let output.stride.0.required = 1
let output.extent.1.required = ((((output.extent.1 + -1)/4)*4) + 4)
let output.min.1.required = 0
let output.stride.1.required = ((((output.extent.0 + -1)/64)*64) + 64)
let input.stride.0.constrained = 1
let input.min.0.constrained = 0
let input.stride.1.constrained = ((input.stride.1/64)*64)
let input.min.1.constrained = 0
let output.stride.0.constrained = 1
let output.min.0.constrained = 0
let output.stride.1.constrained = ((output.stride.1/64)*64)
let output.min.1.constrained = 0
let input.stride.0.proposed = 1
let input.min.0.proposed = 0
let input.extent.0.proposed = ((((output.extent.0 + 3)/64)*64) + 64)
let input.stride.1.proposed = (((output.extent.0 + 67)/64)*64)
let input.min.1.proposed = 0
let input.extent.1.proposed = (output.extent.1 + 4)
let output.stride.0.proposed = 1
let output.min.0.proposed = 0
let output.extent.0.proposed = ((((output.extent.0 + -1)/64)*64) + 64)
let output.stride.1.proposed = (((output.extent.0 + 63)/64)*64)
let output.min.1.proposed = 0
let output.extent.1.proposed = ((((output.extent.1 + -1)/4)*4) + 4)
assert((input.stride.0 == 1), 0)
assert((input.min.0 == 0), 0)
assert(((input.stride.1 % 64) == 0), 0)
assert((input.min.1 == 0), 0)
assert((output.stride.0 == 1), 0)
assert((output.min.0 == 0), 0)
assert(((output.stride.1 % 64) == 0), 0)
assert((output.min.1 == 0), 0)
let output.s0.y.loop_max = (output.extent.1 + -1)
let output.s0.y.loop_min = 0
let output.s0.y.loop_extent = output.extent.1
let output.s0.x.loop_max = (output.extent.0 + -1)
let output.s0.x.loop_min = 0
let output.s0.x.loop_extent = output.extent.0
let output.s0.y.y.loop_extent = ((output.extent.1 + 3)/4)
let output.s0.y.y.loop_max = ((output.extent.1 + -1)/4)
let output.s0.y.y.loop_min = 0
let output.s0.y.yi.loop_extent = 4
let output.s0.y.yi.loop_max = 3
let output.s0.y.yi.loop_min = 0
let output.s0.x.x.loop_extent = ((output.extent.0 + 63)/64)
let output.s0.x.x.loop_max = ((output.extent.0 + -1)/64)
let output.s0.x.x.loop_min = 0
let output.s0.x.v16.loop_extent = 64
let output.s0.x.v16.loop_max = 63
let output.s0.x.v16.loop_min = 0
produce output {
  for<Hexagon> (output.s0.__outermost, 0, 1) {
    for (output.s0.y.y, 0, ((output.extent.1 + 3)/4)) {
      let output.s0.y.min_1 = (output.s0.y.y*4)
      let output.s0.y.max_1 = ((output.s0.y.y*4) + 3)
      let output.s0.x.min_1 = 0
      let output.s0.x.max_1 = ((((output.extent.0 + 63)/64)*64) + -1)
      let rows.s0.y.max_1 = ((output.s0.y.y*4) + 3)
      let rows.s0.y.min_1 = (output.s0.y.y*4)
      let rows.s0.x.max_1 = ((((output.extent.0 + 63)/64)*64) + 1)
      let rows.s0.x.min_1 = -2
      prefetch(input, (((0 + (-2*input.stride.0.constrained)) + (((output.s0.y.y*4) + 6)*input.stride.1.constrained)) - ((0 + (input.min.0.constrained*input.stride.0.constrained)) + (input.min.1.constrained*input.stride.1.constrained))), (((((output.extent.0 + 63)/64)*64) + (select((64 < output.extent.0), 2, -2) + (((output.extent.0 + -1)/64)*64))) + 66), input.stride.0, 8, input.stride.1)
      let output.s0.y.yi.base = (output.s0.y.y*4)
      for (output.s0.y.yi, 0, 4) {
        let output.s0.y = ((output.s0.y.y*4) + output.s0.y.yi)
        let output.s0.y.min_2 = ((output.s0.y.y*4) + output.s0.y.yi)
        let output.s0.y.max_2 = ((output.s0.y.y*4) + output.s0.y.yi)
        let output.s0.x.min_2 = 0
        let output.s0.x.max_2 = ((((output.extent.0 + 63)/64)*64) + -1)
        let rows.s0.y.max_2 = ((output.s0.y.y*4) + output.s0.y.yi)
        let rows.s0.y.min_2 = ((output.s0.y.y*4) + output.s0.y.yi)
        let rows.s0.x.max_2 = ((((output.extent.0 + 63)/64)*64) + 1)
        let rows.s0.x.min_2 = -2
        let rows.y.max_realized = ((output.s0.y.y*4) + output.s0.y.yi)
        let rows.y.min_realized = ((output.s0.y.y*4) + output.s0.y.yi)
        let rows.y.extent_realized = 1
        let rows.x.max_realized = max((let t16 = (select((64 < output.extent.0), -62, -66) + (((output.extent.0 + 63)/64)*64)) in (((((output.extent.0 + 63)/64)*64) + t16) + 63)), ((((output.extent.0 + 63)/64)*64) + 1))
        let rows.x.min_realized = -2
        let rows.x.extent_realized = (max((let t16 = (select((64 < output.extent.0), -62, -66) + (((output.extent.0 + 63)/64)*64)) in (((((output.extent.0 + 63)/64)*64) + t16) + 63)), ((((output.extent.0 + 63)/64)*64) + 1)) + 3)
        let rows.x.extent_realized.s = (max((let t16 = (select((64 < output.extent.0), -62, -66) + (((output.extent.0 + 63)/64)*64)) in (((((output.extent.0 + 63)/64)*64) + t16) + 63)), ((((output.extent.0 + 63)/64)*64) + 1)) + 2)
        let rows.extent.0 = 384
        let rows.min.0 = 0
        let rows.extent.1 = 1
        let rows.min.1 = ((output.s0.y.y*4) + output.s0.y.yi)
        let rows.stride.0 = 1
        let rows.stride.1 = (rows.stride.0*((((384 + 64) - 1)/64)*64))
        allocate rows[int16 * ((((384 + 64) - 1)/64)*64) * 1]
        let rows.buffer = (let t82 = make_struct((halide_dimension_t *), rows.min.0, rows.extent.0, rows.stride.0, 0, rows.min.1, rows.extent.1, rows.stride.1, 0) in _halide_buffer_init(alloca(size_of_halide_buffer_t()), t82, rows, (uint64)0, reinterpret((halide_device_interface_t *), (uint64)0), 0, 16, 2, t82, (uint64)0))
        for (output.s0.x.x, 0, ((output.extent.0 + 63)/64)) {
          assert((128 <= 384), halide_error_fold_factor_too_small("rows", "x", 384, "output.s0.x.x", 128))
          let output.s0.x.v16.base = (output.s0.x.x*64)
          let output.s0.y.min_3 = ((output.s0.y.y*4) + output.s0.y.yi)
          let output.s0.y.max_3 = ((output.s0.y.y*4) + output.s0.y.yi)
          let output.s0.x.min_3 = (output.s0.x.x*64)
          let output.s0.x.max_3 = ((output.s0.x.x*64) + 63)
          let rows.s0.y.max_3 = ((output.s0.y.y*4) + output.s0.y.yi)
          let rows.s0.y.min_3 = ((output.s0.y.y*4) + output.s0.y.yi)
          let rows.s0.x.max_3 = ((output.s0.x.x*64) + 65)
          let rows.s0.x.min_3 = select((0 < output.s0.x.x), likely_if_innermost(((output.s0.x.x*64) + 2)), ((output.s0.x.x*64) + -2))
          let rows.s0.y.loop_max = ((output.s0.y.y*4) + output.s0.y.yi)
          let rows.s0.y.loop_min = ((output.s0.y.y*4) + output.s0.y.yi)
          let rows.s0.y.loop_extent = 1
          let rows.s0.x.loop_max = ((output.s0.x.x*64) + 65)
          let rows.s0.x.loop_min = rows.s0.x.min_3
          let rows.s0.x.loop_extent = (((output.s0.x.x*64) - rows.s0.x.min_3) + 66)
          let rows.s0.x.x.loop_extent = (((129 - rows.s0.x.min_3)/64) + output.s0.x.x)
          let rows.s0.x.x.loop_max = ((((129 - rows.s0.x.min_3)/64) + output.s0.x.x) + -1)
          let rows.s0.x.x.loop_min = 0
          let rows.s0.x.v19.loop_extent = 64
          let rows.s0.x.v19.loop_max = 63
          let rows.s0.x.v19.loop_min = 0
          produce rows {
            for (rows.s0.y, ((output.s0.y.y*4) + output.s0.y.yi), 1) {
              for (rows.s0.x.x, 0, (((129 - rows.s0.x.min_3)/64) + output.s0.x.x)) {
                let rows.s0.x.v19.base = ((rows.s0.x.x*64) + rows.s0.x.min_3)
                vectorized (rows.s0.x.v19, 0, 64) {
                  let rows.s0.x = (((rows.s0.x.x*64) + rows.s0.x.min_3) + rows.s0.x.v19)
                  rows[((0 + ((((((rows.s0.x.x*64) + rows.s0.x.min_3) + rows.s0.x.v19) % 384) - rows.min.0)*rows.stride.0)) + ((rows.s0.y - rows.min.1)*rows.stride.1))] = (let t3 = (((rows.s0.x.x*64) + rows.s0.x.min_3) + rows.s0.x.v19) in (((int16(input[(((0 + ((((rows.s0.x.x*64) + rows.s0.x.min_3) + rows.s0.x.v19)*input.stride.0.constrained)) + ((rows.s0.y + 1)*input.stride.1.constrained)) - ((0 + (input.min.0.constrained*input.stride.0.constrained)) + (input.min.1.constrained*input.stride.1.constrained)))])*(int16)4) + ((int16(input[(((0 + ((((rows.s0.x.x*64) + rows.s0.x.min_3) + rows.s0.x.v19)*input.stride.0.constrained)) + (rows.s0.y*input.stride.1.constrained)) - ((0 + (input.min.0.constrained*input.stride.0.constrained)) + (input.min.1.constrained*input.stride.1.constrained)))])*(int16)6) + ((int16(input[(((0 + ((((rows.s0.x.x*64) + rows.s0.x.min_3) + rows.s0.x.v19)*input.stride.0.constrained)) + ((rows.s0.y + -1)*input.stride.1.constrained)) - ((0 + (input.min.0.constrained*input.stride.0.constrained)) + (input.min.1.constrained*input.stride.1.constrained)))])*(int16)4) + int16(input[(((0 + ((((rows.s0.x.x*64) + rows.s0.x.min_3) + rows.s0.x.v19)*input.stride.0.constrained)) + ((rows.s0.y + -2)*input.stride.1.constrained)) - ((0 + (input.min.0.constrained*input.stride.0.constrained)) + (input.min.1.constrained*input.stride.1.constrained)))])))) + int16(input[(((0 + ((((rows.s0.x.x*64) + rows.s0.x.min_3) + rows.s0.x.v19)*input.stride.0.constrained)) + ((rows.s0.y + 2)*input.stride.1.constrained)) - ((0 + (input.min.0.constrained*input.stride.0.constrained)) + (input.min.1.constrained*input.stride.1.constrained)))])))
                }
              }
            }
          }
          consume rows {
            vectorized (output.s0.x.v16, 0, 64) {
              let output.s0.x = ((output.s0.x.x*64) + output.s0.x.v16)
              output[(((0 + (((output.s0.x.x*64) + output.s0.x.v16)*output.stride.0.constrained)) + (((output.s0.y.y*4) + output.s0.y.yi)*output.stride.1.constrained)) - ((0 + (output.min.0.constrained*output.stride.0.constrained)) + (output.min.1.constrained*output.stride.1.constrained)))] = (let t0 = ((output.s0.y.y*4) + output.s0.y.yi) in (let t1 = ((output.s0.x.x*64) + output.s0.x.v16) in uint8(((rows[((0 + ((((((output.s0.x.x*64) + output.s0.x.v16) + 2) % 384) - rows.min.0)*rows.stride.0)) + ((((output.s0.y.y*4) + output.s0.y.yi) - rows.min.1)*rows.stride.1))] + ((rows[((0 + ((((((output.s0.x.x*64) + output.s0.x.v16) + 1) % 384) - rows.min.0)*rows.stride.0)) + ((((output.s0.y.y*4) + output.s0.y.yi) - rows.min.1)*rows.stride.1))]*(int16)4) + ((rows[((0 + (((((output.s0.x.x*64) + output.s0.x.v16) % 384) - rows.min.0)*rows.stride.0)) + ((((output.s0.y.y*4) + output.s0.y.yi) - rows.min.1)*rows.stride.1))]*(int16)6) + (rows[((0 + ((((((output.s0.x.x*64) + output.s0.x.v16) + -2) % 384) - rows.min.0)*rows.stride.0)) + ((((output.s0.y.y*4) + output.s0.y.yi) - rows.min.1)*rows.stride.1))] + (rows[((0 + ((((((output.s0.x.x*64) + output.s0.x.v16) + -1) % 384) - rows.min.0)*rows.stride.0)) + ((((output.s0.y.y*4) + output.s0.y.yi) - rows.min.1)*rows.stride.1))]*(int16)4)))))/(int16)256))))
            }
          }
        }
      }
    }
  }
}


Unpacking buffer arguments...
Lowering after unpacking buffer arguments...
assert((reinterpret(uint64, output.buffer) != (uint64)0), halide_error_buffer_argument_is_null("output"))
assert((reinterpret(uint64, input.buffer) != (uint64)0), halide_error_buffer_argument_is_null("input"))
let input = _halide_buffer_get_host(input.buffer)
let input.min.0 = _halide_buffer_get_min(input.buffer, 0)
let input.stride.0 = _halide_buffer_get_stride(input.buffer, 0)
let input.min.1 = _halide_buffer_get_min(input.buffer, 1)
let input.stride.1 = _halide_buffer_get_stride(input.buffer, 1)
let output = _halide_buffer_get_host(output.buffer)
let output.min.0 = _halide_buffer_get_min(output.buffer, 0)
let output.extent.0 = _halide_buffer_get_extent(output.buffer, 0)
let output.stride.0 = _halide_buffer_get_stride(output.buffer, 0)
let output.min.1 = _halide_buffer_get_min(output.buffer, 1)
let output.extent.1 = _halide_buffer_get_extent(output.buffer, 1)
let output.stride.1 = _halide_buffer_get_stride(output.buffer, 1)
let output.s0.y.max = (output.extent.1 + -1)
let output.s0.y.min = 0
let output.s0.x.max = (output.extent.0 + -1)
let output.s0.x.min = 0
let rows.s0.y.max = (output.extent.1 + -1)
let rows.s0.y.min = 0
let rows.s0.x.max = (output.extent.0 + 1)
let rows.s0.x.min = -2
let input.extent.0.required = ((((output.extent.0 + 3)/64)*64) + 64)
let input.min.0.required = -2
let input.stride.0.required = 1
let input.extent.1.required = (output.extent.1 + 4)
let input.min.1.required = -2
let input.stride.1.required = ((((output.extent.0 + 3)/64)*64) + 64)
let output.extent.0.required = ((((output.extent.0 + -1)/64)*64) + 64)
let output.min.0.required = 0
let output.stride.0.required = 1
let output.extent.1.required = ((((output.extent.1 + -1)/4)*4) + 4)
let output.min.1.required = 0
let output.stride.1.required = ((((output.extent.0 + -1)/64)*64) + 64)
let input.stride.0.constrained = 1
let input.min.0.constrained = 0
let input.stride.1.constrained = ((input.stride.1/64)*64)
let input.min.1.constrained = 0
let output.stride.0.constrained = 1
let output.min.0.constrained = 0
let output.stride.1.constrained = ((output.stride.1/64)*64)
let output.min.1.constrained = 0
let input.stride.0.proposed = 1
let input.min.0.proposed = 0
let input.extent.0.proposed = ((((output.extent.0 + 3)/64)*64) + 64)
let input.stride.1.proposed = (((output.extent.0 + 67)/64)*64)
let input.min.1.proposed = 0
let input.extent.1.proposed = (output.extent.1 + 4)
let output.stride.0.proposed = 1
let output.min.0.proposed = 0
let output.extent.0.proposed = ((((output.extent.0 + -1)/64)*64) + 64)
let output.stride.1.proposed = (((output.extent.0 + 63)/64)*64)
let output.min.1.proposed = 0
let output.extent.1.proposed = ((((output.extent.1 + -1)/4)*4) + 4)
assert((input.stride.0 == 1), 0)
assert((input.min.0 == 0), 0)
assert(((input.stride.1 % 64) == 0), 0)
assert((input.min.1 == 0), 0)
assert((output.stride.0 == 1), 0)
assert((output.min.0 == 0), 0)
assert(((output.stride.1 % 64) == 0), 0)
assert((output.min.1 == 0), 0)
let output.s0.y.loop_max = (output.extent.1 + -1)
let output.s0.y.loop_min = 0
let output.s0.y.loop_extent = output.extent.1
let output.s0.x.loop_max = (output.extent.0 + -1)
let output.s0.x.loop_min = 0
let output.s0.x.loop_extent = output.extent.0
let output.s0.y.y.loop_extent = ((output.extent.1 + 3)/4)
let output.s0.y.y.loop_max = ((output.extent.1 + -1)/4)
let output.s0.y.y.loop_min = 0
let output.s0.y.yi.loop_extent = 4
let output.s0.y.yi.loop_max = 3
let output.s0.y.yi.loop_min = 0
let output.s0.x.x.loop_extent = ((output.extent.0 + 63)/64)
let output.s0.x.x.loop_max = ((output.extent.0 + -1)/64)
let output.s0.x.x.loop_min = 0
let output.s0.x.v16.loop_extent = 64
let output.s0.x.v16.loop_max = 63
let output.s0.x.v16.loop_min = 0
produce output {
  for<Hexagon> (output.s0.__outermost, 0, 1) {
    for (output.s0.y.y, 0, ((output.extent.1 + 3)/4)) {
      let output.s0.y.min_1 = (output.s0.y.y*4)
      let output.s0.y.max_1 = ((output.s0.y.y*4) + 3)
      let output.s0.x.min_1 = 0
      let output.s0.x.max_1 = ((((output.extent.0 + 63)/64)*64) + -1)
      let rows.s0.y.max_1 = ((output.s0.y.y*4) + 3)
      let rows.s0.y.min_1 = (output.s0.y.y*4)
      let rows.s0.x.max_1 = ((((output.extent.0 + 63)/64)*64) + 1)
      let rows.s0.x.min_1 = -2
      prefetch(input, (((0 + (-2*input.stride.0.constrained)) + (((output.s0.y.y*4) + 6)*input.stride.1.constrained)) - ((0 + (input.min.0.constrained*input.stride.0.constrained)) + (input.min.1.constrained*input.stride.1.constrained))), (((((output.extent.0 + 63)/64)*64) + (select((64 < output.extent.0), 2, -2) + (((output.extent.0 + -1)/64)*64))) + 66), input.stride.0, 8, input.stride.1)
      let output.s0.y.yi.base = (output.s0.y.y*4)
      for (output.s0.y.yi, 0, 4) {
        let output.s0.y = ((output.s0.y.y*4) + output.s0.y.yi)
        let output.s0.y.min_2 = ((output.s0.y.y*4) + output.s0.y.yi)
        let output.s0.y.max_2 = ((output.s0.y.y*4) + output.s0.y.yi)
        let output.s0.x.min_2 = 0
        let output.s0.x.max_2 = ((((output.extent.0 + 63)/64)*64) + -1)
        let rows.s0.y.max_2 = ((output.s0.y.y*4) + output.s0.y.yi)
        let rows.s0.y.min_2 = ((output.s0.y.y*4) + output.s0.y.yi)
        let rows.s0.x.max_2 = ((((output.extent.0 + 63)/64)*64) + 1)
        let rows.s0.x.min_2 = -2
        let rows.y.max_realized = ((output.s0.y.y*4) + output.s0.y.yi)
        let rows.y.min_realized = ((output.s0.y.y*4) + output.s0.y.yi)
        let rows.y.extent_realized = 1
        let rows.x.max_realized = max((let t16 = (select((64 < output.extent.0), -62, -66) + (((output.extent.0 + 63)/64)*64)) in (((((output.extent.0 + 63)/64)*64) + t16) + 63)), ((((output.extent.0 + 63)/64)*64) + 1))
        let rows.x.min_realized = -2
        let rows.x.extent_realized = (max((let t16 = (select((64 < output.extent.0), -62, -66) + (((output.extent.0 + 63)/64)*64)) in (((((output.extent.0 + 63)/64)*64) + t16) + 63)), ((((output.extent.0 + 63)/64)*64) + 1)) + 3)
        let rows.x.extent_realized.s = (max((let t16 = (select((64 < output.extent.0), -62, -66) + (((output.extent.0 + 63)/64)*64)) in (((((output.extent.0 + 63)/64)*64) + t16) + 63)), ((((output.extent.0 + 63)/64)*64) + 1)) + 2)
        let rows.extent.0 = 384
        let rows.min.0 = 0
        let rows.extent.1 = 1
        let rows.min.1 = ((output.s0.y.y*4) + output.s0.y.yi)
        let rows.stride.0 = 1
        let rows.stride.1 = (rows.stride.0*((((384 + 64) - 1)/64)*64))
        allocate rows[int16 * ((((384 + 64) - 1)/64)*64) * 1]
        let rows.buffer = (let t82 = make_struct((halide_dimension_t *), rows.min.0, rows.extent.0, rows.stride.0, 0, rows.min.1, rows.extent.1, rows.stride.1, 0) in _halide_buffer_init(alloca(size_of_halide_buffer_t()), t82, rows, (uint64)0, reinterpret((halide_device_interface_t *), (uint64)0), 0, 16, 2, t82, (uint64)0))
        for (output.s0.x.x, 0, ((output.extent.0 + 63)/64)) {
          assert((128 <= 384), halide_error_fold_factor_too_small("rows", "x", 384, "output.s0.x.x", 128))
          let output.s0.x.v16.base = (output.s0.x.x*64)
          let output.s0.y.min_3 = ((output.s0.y.y*4) + output.s0.y.yi)
          let output.s0.y.max_3 = ((output.s0.y.y*4) + output.s0.y.yi)
          let output.s0.x.min_3 = (output.s0.x.x*64)
          let output.s0.x.max_3 = ((output.s0.x.x*64) + 63)
          let rows.s0.y.max_3 = ((output.s0.y.y*4) + output.s0.y.yi)
          let rows.s0.y.min_3 = ((output.s0.y.y*4) + output.s0.y.yi)
          let rows.s0.x.max_3 = ((output.s0.x.x*64) + 65)
          let rows.s0.x.min_3 = select((0 < output.s0.x.x), likely_if_innermost(((output.s0.x.x*64) + 2)), ((output.s0.x.x*64) + -2))
          let rows.s0.y.loop_max = ((output.s0.y.y*4) + output.s0.y.yi)
          let rows.s0.y.loop_min = ((output.s0.y.y*4) + output.s0.y.yi)
          let rows.s0.y.loop_extent = 1
          let rows.s0.x.loop_max = ((output.s0.x.x*64) + 65)
          let rows.s0.x.loop_min = rows.s0.x.min_3
          let rows.s0.x.loop_extent = (((output.s0.x.x*64) - rows.s0.x.min_3) + 66)
          let rows.s0.x.x.loop_extent = (((129 - rows.s0.x.min_3)/64) + output.s0.x.x)
          let rows.s0.x.x.loop_max = ((((129 - rows.s0.x.min_3)/64) + output.s0.x.x) + -1)
          let rows.s0.x.x.loop_min = 0
          let rows.s0.x.v19.loop_extent = 64
          let rows.s0.x.v19.loop_max = 63
          let rows.s0.x.v19.loop_min = 0
          produce rows {
            for (rows.s0.y, ((output.s0.y.y*4) + output.s0.y.yi), 1) {
              for (rows.s0.x.x, 0, (((129 - rows.s0.x.min_3)/64) + output.s0.x.x)) {
                let rows.s0.x.v19.base = ((rows.s0.x.x*64) + rows.s0.x.min_3)
                vectorized (rows.s0.x.v19, 0, 64) {
                  let rows.s0.x = (((rows.s0.x.x*64) + rows.s0.x.min_3) + rows.s0.x.v19)
                  rows[((0 + ((((((rows.s0.x.x*64) + rows.s0.x.min_3) + rows.s0.x.v19) % 384) - rows.min.0)*rows.stride.0)) + ((rows.s0.y - rows.min.1)*rows.stride.1))] = (let t3 = (((rows.s0.x.x*64) + rows.s0.x.min_3) + rows.s0.x.v19) in (((int16(input[(((0 + ((((rows.s0.x.x*64) + rows.s0.x.min_3) + rows.s0.x.v19)*input.stride.0.constrained)) + ((rows.s0.y + 1)*input.stride.1.constrained)) - ((0 + (input.min.0.constrained*input.stride.0.constrained)) + (input.min.1.constrained*input.stride.1.constrained)))])*(int16)4) + ((int16(input[(((0 + ((((rows.s0.x.x*64) + rows.s0.x.min_3) + rows.s0.x.v19)*input.stride.0.constrained)) + (rows.s0.y*input.stride.1.constrained)) - ((0 + (input.min.0.constrained*input.stride.0.constrained)) + (input.min.1.constrained*input.stride.1.constrained)))])*(int16)6) + ((int16(input[(((0 + ((((rows.s0.x.x*64) + rows.s0.x.min_3) + rows.s0.x.v19)*input.stride.0.constrained)) + ((rows.s0.y + -1)*input.stride.1.constrained)) - ((0 + (input.min.0.constrained*input.stride.0.constrained)) + (input.min.1.constrained*input.stride.1.constrained)))])*(int16)4) + int16(input[(((0 + ((((rows.s0.x.x*64) + rows.s0.x.min_3) + rows.s0.x.v19)*input.stride.0.constrained)) + ((rows.s0.y + -2)*input.stride.1.constrained)) - ((0 + (input.min.0.constrained*input.stride.0.constrained)) + (input.min.1.constrained*input.stride.1.constrained)))])))) + int16(input[(((0 + ((((rows.s0.x.x*64) + rows.s0.x.min_3) + rows.s0.x.v19)*input.stride.0.constrained)) + ((rows.s0.y + 2)*input.stride.1.constrained)) - ((0 + (input.min.0.constrained*input.stride.0.constrained)) + (input.min.1.constrained*input.stride.1.constrained)))])))
                }
              }
            }
          }
          consume rows {
            vectorized (output.s0.x.v16, 0, 64) {
              let output.s0.x = ((output.s0.x.x*64) + output.s0.x.v16)
              output[(((0 + (((output.s0.x.x*64) + output.s0.x.v16)*output.stride.0.constrained)) + (((output.s0.y.y*4) + output.s0.y.yi)*output.stride.1.constrained)) - ((0 + (output.min.0.constrained*output.stride.0.constrained)) + (output.min.1.constrained*output.stride.1.constrained)))] = (let t0 = ((output.s0.y.y*4) + output.s0.y.yi) in (let t1 = ((output.s0.x.x*64) + output.s0.x.v16) in uint8(((rows[((0 + ((((((output.s0.x.x*64) + output.s0.x.v16) + 2) % 384) - rows.min.0)*rows.stride.0)) + ((((output.s0.y.y*4) + output.s0.y.yi) - rows.min.1)*rows.stride.1))] + ((rows[((0 + ((((((output.s0.x.x*64) + output.s0.x.v16) + 1) % 384) - rows.min.0)*rows.stride.0)) + ((((output.s0.y.y*4) + output.s0.y.yi) - rows.min.1)*rows.stride.1))]*(int16)4) + ((rows[((0 + (((((output.s0.x.x*64) + output.s0.x.v16) % 384) - rows.min.0)*rows.stride.0)) + ((((output.s0.y.y*4) + output.s0.y.yi) - rows.min.1)*rows.stride.1))]*(int16)6) + (rows[((0 + ((((((output.s0.x.x*64) + output.s0.x.v16) + -2) % 384) - rows.min.0)*rows.stride.0)) + ((((output.s0.y.y*4) + output.s0.y.yi) - rows.min.1)*rows.stride.1))] + (rows[((0 + ((((((output.s0.x.x*64) + output.s0.x.v16) + -1) % 384) - rows.min.0)*rows.stride.0)) + ((((output.s0.y.y*4) + output.s0.y.yi) - rows.min.1)*rows.stride.1))]*(int16)4)))))/(int16)256))))
            }
          }
        }
      }
    }
  }
}


Skipping rewriting memoized allocations...
Simplifying...
Lowering after second simplifcation:
assert((reinterpret(uint64, output.buffer) != (uint64)0), halide_error_buffer_argument_is_null("output"))
assert((reinterpret(uint64, input.buffer) != (uint64)0), halide_error_buffer_argument_is_null("input"))
let input = _halide_buffer_get_host(input.buffer)
let input.min.0 = _halide_buffer_get_min(input.buffer, 0)
let input.stride.0 = _halide_buffer_get_stride(input.buffer, 0)
let input.min.1 = _halide_buffer_get_min(input.buffer, 1)
let input.stride.1 = _halide_buffer_get_stride(input.buffer, 1)
let output = _halide_buffer_get_host(output.buffer)
let output.min.0 = _halide_buffer_get_min(output.buffer, 0)
let output.extent.0 = _halide_buffer_get_extent(output.buffer, 0)
let output.stride.0 = _halide_buffer_get_stride(output.buffer, 0)
let output.min.1 = _halide_buffer_get_min(output.buffer, 1)
let output.extent.1 = _halide_buffer_get_extent(output.buffer, 1)
let output.stride.1 = _halide_buffer_get_stride(output.buffer, 1)
assert((input.stride.0 == 1), 0)
assert((input.min.0 == 0), 0)
assert(((input.stride.1 % 64) == 0), 0)
assert((input.min.1 == 0), 0)
assert((output.stride.0 == 1), 0)
assert((output.min.0 == 0), 0)
assert(((output.stride.1 % 64) == 0), 0)
assert((output.min.1 == 0), 0)
produce output {
  for<Hexagon> (output.s0.__outermost, 0, 1) {
    for (output.s0.y.y, 0, ((output.extent.1 + 3)/4)) {
      prefetch(input, ((((input.stride.1/64)*((output.s0.y.y*4) + 6))*64) + -2), (((((output.extent.0 + 63)/64)*64) + (select((64 < output.extent.0), 2, -2) + (((output.extent.0 + -1)/64)*64))) + 66), 1, 8, input.stride.1)
      for (output.s0.y.yi, 0, 4) {
        allocate rows[int16 * 384 * 1]
        for (output.s0.x.x, 0, ((output.extent.0 + 63)/64)) {
          let rows.s0.x.min_3 = select((0 < output.s0.x.x), likely_if_innermost(((output.s0.x.x*64) + 2)), ((output.s0.x.x*64) + -2))
          produce rows {
            let rows.s0.y = ((output.s0.y.y*4) + output.s0.y.yi)
            for (rows.s0.x.x, 0, (((129 - rows.s0.x.min_3)/64) + output.s0.x.x)) {
              vectorized (rows.s0.x.v19, 0, 64) {
                rows[(((rows.s0.y - ((output.s0.y.y*4) + output.s0.y.yi))*384) + ((((rows.s0.x.x*64) + rows.s0.x.min_3) + rows.s0.x.v19) % 384))] = (((int16(input[((((input.stride.1/64)*(rows.s0.y + 1))*64) + (((rows.s0.x.x*64) + rows.s0.x.min_3) + rows.s0.x.v19))])*(int16)4) + ((int16(input[((((input.stride.1/64)*rows.s0.y)*64) + (((rows.s0.x.x*64) + rows.s0.x.min_3) + rows.s0.x.v19))])*(int16)6) + ((int16(input[((((input.stride.1/64)*(rows.s0.y + -1))*64) + (((rows.s0.x.x*64) + rows.s0.x.min_3) + rows.s0.x.v19))])*(int16)4) + int16(input[((((input.stride.1/64)*(rows.s0.y + -2))*64) + (((rows.s0.x.x*64) + rows.s0.x.min_3) + rows.s0.x.v19))])))) + int16(input[((((input.stride.1/64)*(rows.s0.y + 2))*64) + (((rows.s0.x.x*64) + rows.s0.x.min_3) + rows.s0.x.v19))]))
              }
            }
          }
          consume rows {
            vectorized (output.s0.x.v16, 0, 64) {
              output[((((output.stride.1/64)*((output.s0.y.y*4) + output.s0.y.yi))*64) + ((output.s0.x.x*64) + output.s0.x.v16))] = uint8(((rows[((((output.s0.x.x*64) + output.s0.x.v16) + 2) % 384)] + ((rows[((((output.s0.x.x*64) + output.s0.x.v16) + 1) % 384)]*(int16)4) + ((rows[(((output.s0.x.x*64) + output.s0.x.v16) % 384)]*(int16)6) + (rows[((((output.s0.x.x*64) + output.s0.x.v16) + 382) % 384)] + (rows[((((output.s0.x.x*64) + output.s0.x.v16) + 383) % 384)]*(int16)4)))))/(int16)256))
            }
          }
        }
      }
    }
  }
}


Reduce prefetch dimension...
Lowering after reduce prefetch dimension:
assert((reinterpret(uint64, output.buffer) != (uint64)0), halide_error_buffer_argument_is_null("output"))
assert((reinterpret(uint64, input.buffer) != (uint64)0), halide_error_buffer_argument_is_null("input"))
let input = _halide_buffer_get_host(input.buffer)
let input.min.0 = _halide_buffer_get_min(input.buffer, 0)
let input.stride.0 = _halide_buffer_get_stride(input.buffer, 0)
let input.min.1 = _halide_buffer_get_min(input.buffer, 1)
let input.stride.1 = _halide_buffer_get_stride(input.buffer, 1)
let output = _halide_buffer_get_host(output.buffer)
let output.min.0 = _halide_buffer_get_min(output.buffer, 0)
let output.extent.0 = _halide_buffer_get_extent(output.buffer, 0)
let output.stride.0 = _halide_buffer_get_stride(output.buffer, 0)
let output.min.1 = _halide_buffer_get_min(output.buffer, 1)
let output.extent.1 = _halide_buffer_get_extent(output.buffer, 1)
let output.stride.1 = _halide_buffer_get_stride(output.buffer, 1)
assert((input.stride.0 == 1), 0)
assert((input.min.0 == 0), 0)
assert(((input.stride.1 % 64) == 0), 0)
assert((input.min.1 == 0), 0)
assert((output.stride.0 == 1), 0)
assert((output.min.0 == 0), 0)
assert(((output.stride.1 % 64) == 0), 0)
assert((output.min.1 == 0), 0)
produce output {
  for<Hexagon> (output.s0.__outermost, 0, 1) {
    for (output.s0.y.y, 0, ((output.extent.1 + 3)/4)) {
      prefetch(input, ((((input.stride.1/64)*((output.s0.y.y*4) + 6))*64) + -2), (((((output.extent.0 + 63)/64)*64) + (select((64 < output.extent.0), 2, -2) + (((output.extent.0 + -1)/64)*64))) + 66), 1, 8, input.stride.1)
      for (output.s0.y.yi, 0, 4) {
        allocate rows[int16 * 384 * 1]
        for (output.s0.x.x, 0, ((output.extent.0 + 63)/64)) {
          let rows.s0.x.min_3 = select((0 < output.s0.x.x), likely_if_innermost(((output.s0.x.x*64) + 2)), ((output.s0.x.x*64) + -2))
          produce rows {
            let rows.s0.y = ((output.s0.y.y*4) + output.s0.y.yi)
            for (rows.s0.x.x, 0, (((129 - rows.s0.x.min_3)/64) + output.s0.x.x)) {
              vectorized (rows.s0.x.v19, 0, 64) {
                rows[(((rows.s0.y - ((output.s0.y.y*4) + output.s0.y.yi))*384) + ((((rows.s0.x.x*64) + rows.s0.x.min_3) + rows.s0.x.v19) % 384))] = (((int16(input[((((input.stride.1/64)*(rows.s0.y + 1))*64) + (((rows.s0.x.x*64) + rows.s0.x.min_3) + rows.s0.x.v19))])*(int16)4) + ((int16(input[((((input.stride.1/64)*rows.s0.y)*64) + (((rows.s0.x.x*64) + rows.s0.x.min_3) + rows.s0.x.v19))])*(int16)6) + ((int16(input[((((input.stride.1/64)*(rows.s0.y + -1))*64) + (((rows.s0.x.x*64) + rows.s0.x.min_3) + rows.s0.x.v19))])*(int16)4) + int16(input[((((input.stride.1/64)*(rows.s0.y + -2))*64) + (((rows.s0.x.x*64) + rows.s0.x.min_3) + rows.s0.x.v19))])))) + int16(input[((((input.stride.1/64)*(rows.s0.y + 2))*64) + (((rows.s0.x.x*64) + rows.s0.x.min_3) + rows.s0.x.v19))]))
              }
            }
          }
          consume rows {
            vectorized (output.s0.x.v16, 0, 64) {
              output[((((output.stride.1/64)*((output.s0.y.y*4) + output.s0.y.yi))*64) + ((output.s0.x.x*64) + output.s0.x.v16))] = uint8(((rows[((((output.s0.x.x*64) + output.s0.x.v16) + 2) % 384)] + ((rows[((((output.s0.x.x*64) + output.s0.x.v16) + 1) % 384)]*(int16)4) + ((rows[(((output.s0.x.x*64) + output.s0.x.v16) % 384)]*(int16)6) + (rows[((((output.s0.x.x*64) + output.s0.x.v16) + 382) % 384)] + (rows[((((output.s0.x.x*64) + output.s0.x.v16) + 383) % 384)]*(int16)4)))))/(int16)256))
            }
          }
        }
      }
    }
  }
}

Unrolling...
Lowering after unrolling:
assert((reinterpret(uint64, output.buffer) != (uint64)0), halide_error_buffer_argument_is_null("output"))
assert((reinterpret(uint64, input.buffer) != (uint64)0), halide_error_buffer_argument_is_null("input"))
let input = _halide_buffer_get_host(input.buffer)
let input.min.0 = _halide_buffer_get_min(input.buffer, 0)
let input.stride.0 = _halide_buffer_get_stride(input.buffer, 0)
let input.min.1 = _halide_buffer_get_min(input.buffer, 1)
let input.stride.1 = _halide_buffer_get_stride(input.buffer, 1)
let output = _halide_buffer_get_host(output.buffer)
let output.min.0 = _halide_buffer_get_min(output.buffer, 0)
let output.extent.0 = _halide_buffer_get_extent(output.buffer, 0)
let output.stride.0 = _halide_buffer_get_stride(output.buffer, 0)
let output.min.1 = _halide_buffer_get_min(output.buffer, 1)
let output.extent.1 = _halide_buffer_get_extent(output.buffer, 1)
let output.stride.1 = _halide_buffer_get_stride(output.buffer, 1)
assert((input.stride.0 == 1), 0)
assert((input.min.0 == 0), 0)
assert(((input.stride.1 % 64) == 0), 0)
assert((input.min.1 == 0), 0)
assert((output.stride.0 == 1), 0)
assert((output.min.0 == 0), 0)
assert(((output.stride.1 % 64) == 0), 0)
assert((output.min.1 == 0), 0)
produce output {
  for<Hexagon> (output.s0.__outermost, 0, 1) {
    for (output.s0.y.y, 0, ((output.extent.1 + 3)/4)) {
      prefetch(input, ((((input.stride.1/64)*((output.s0.y.y*4) + 6))*64) + -2), (((((output.extent.0 + 63)/64)*64) + (select((64 < output.extent.0), 2, -2) + (((output.extent.0 + -1)/64)*64))) + 66), 1, 8, input.stride.1)
      for (output.s0.y.yi, 0, 4) {
        allocate rows[int16 * 384 * 1]
        for (output.s0.x.x, 0, ((output.extent.0 + 63)/64)) {
          let rows.s0.x.min_3 = select((0 < output.s0.x.x), likely_if_innermost(((output.s0.x.x*64) + 2)), ((output.s0.x.x*64) + -2))
          produce rows {
            for (rows.s0.x.x, 0, (((129 - rows.s0.x.min_3)/64) + output.s0.x.x)) {
              vectorized (rows.s0.x.v19, 0, 64) {
                rows[((((rows.s0.x.x*64) + rows.s0.x.min_3) + rows.s0.x.v19) % 384)] = (((int16(input[((((input.stride.1/64)*(((output.s0.y.y*4) + output.s0.y.yi) + 1))*64) + (((rows.s0.x.x*64) + rows.s0.x.min_3) + rows.s0.x.v19))])*(int16)4) + ((int16(input[((((input.stride.1/64)*((output.s0.y.y*4) + output.s0.y.yi))*64) + (((rows.s0.x.x*64) + rows.s0.x.min_3) + rows.s0.x.v19))])*(int16)6) + ((int16(input[((((input.stride.1/64)*(((output.s0.y.y*4) + output.s0.y.yi) + -1))*64) + (((rows.s0.x.x*64) + rows.s0.x.min_3) + rows.s0.x.v19))])*(int16)4) + int16(input[((((input.stride.1/64)*(((output.s0.y.y*4) + output.s0.y.yi) + -2))*64) + (((rows.s0.x.x*64) + rows.s0.x.min_3) + rows.s0.x.v19))])))) + int16(input[((((input.stride.1/64)*(((output.s0.y.y*4) + output.s0.y.yi) + 2))*64) + (((rows.s0.x.x*64) + rows.s0.x.min_3) + rows.s0.x.v19))]))
              }
            }
          }
          consume rows {
            vectorized (output.s0.x.v16, 0, 64) {
              output[((((output.stride.1/64)*((output.s0.y.y*4) + output.s0.y.yi))*64) + ((output.s0.x.x*64) + output.s0.x.v16))] = uint8(((rows[((((output.s0.x.x*64) + output.s0.x.v16) + 2) % 384)] + ((rows[((((output.s0.x.x*64) + output.s0.x.v16) + 1) % 384)]*(int16)4) + ((rows[(((output.s0.x.x*64) + output.s0.x.v16) % 384)]*(int16)6) + (rows[((((output.s0.x.x*64) + output.s0.x.v16) + 382) % 384)] + (rows[((((output.s0.x.x*64) + output.s0.x.v16) + 383) % 384)]*(int16)4)))))/(int16)256))
            }
          }
        }
      }
    }
  }
}


Vectorizing...
Lowering after vectorizing:
assert((reinterpret(uint64, output.buffer) != (uint64)0), halide_error_buffer_argument_is_null("output"))
assert((reinterpret(uint64, input.buffer) != (uint64)0), halide_error_buffer_argument_is_null("input"))
let input = _halide_buffer_get_host(input.buffer)
let input.min.0 = _halide_buffer_get_min(input.buffer, 0)
let input.stride.0 = _halide_buffer_get_stride(input.buffer, 0)
let input.min.1 = _halide_buffer_get_min(input.buffer, 1)
let input.stride.1 = _halide_buffer_get_stride(input.buffer, 1)
let output = _halide_buffer_get_host(output.buffer)
let output.min.0 = _halide_buffer_get_min(output.buffer, 0)
let output.extent.0 = _halide_buffer_get_extent(output.buffer, 0)
let output.stride.0 = _halide_buffer_get_stride(output.buffer, 0)
let output.min.1 = _halide_buffer_get_min(output.buffer, 1)
let output.extent.1 = _halide_buffer_get_extent(output.buffer, 1)
let output.stride.1 = _halide_buffer_get_stride(output.buffer, 1)
assert((input.stride.0 == 1), 0)
assert((input.min.0 == 0), 0)
assert(((input.stride.1 % 64) == 0), 0)
assert((input.min.1 == 0), 0)
assert((output.stride.0 == 1), 0)
assert((output.min.0 == 0), 0)
assert(((output.stride.1 % 64) == 0), 0)
assert((output.min.1 == 0), 0)
produce output {
  for<Hexagon> (output.s0.__outermost, 0, 1) {
    for (output.s0.y.y, 0, ((output.extent.1 + 3)/4)) {
      prefetch(input, ((((input.stride.1/64)*((output.s0.y.y*4) + 6))*64) + -2), (((((output.extent.0 + 63)/64)*64) + (select((64 < output.extent.0), 2, -2) + (((output.extent.0 + -1)/64)*64))) + 66), 1, 8, input.stride.1)
      for (output.s0.y.yi, 0, 4) {
        allocate rows[int16 * 384 * 1]
        for (output.s0.x.x, 0, ((output.extent.0 + 63)/64)) {
          let rows.s0.x.min_3 = select((0 < output.s0.x.x), likely_if_innermost(((output.s0.x.x*64) + 2)), ((output.s0.x.x*64) + -2))
          produce rows {
            for (rows.s0.x.x, 0, (((129 - rows.s0.x.min_3)/64) + output.s0.x.x)) {
              rows[(ramp(((rows.s0.x.x*64) + rows.s0.x.min_3), 1, 64) % x64(384))] = (((int16x64(input[ramp(((((input.stride.1/64)*(((output.s0.y.y*4) + output.s0.y.yi) + 1))*64) + ((rows.s0.x.x*64) + rows.s0.x.min_3)), 1, 64)])*x64((int16)4)) + ((int16x64(input[ramp(((((input.stride.1/64)*((output.s0.y.y*4) + output.s0.y.yi))*64) + ((rows.s0.x.x*64) + rows.s0.x.min_3)), 1, 64)])*x64((int16)6)) + ((int16x64(input[ramp(((((input.stride.1/64)*(((output.s0.y.y*4) + output.s0.y.yi) + -1))*64) + ((rows.s0.x.x*64) + rows.s0.x.min_3)), 1, 64)])*x64((int16)4)) + int16x64(input[ramp(((((input.stride.1/64)*(((output.s0.y.y*4) + output.s0.y.yi) + -2))*64) + ((rows.s0.x.x*64) + rows.s0.x.min_3)), 1, 64)])))) + int16x64(input[ramp(((((input.stride.1/64)*(((output.s0.y.y*4) + output.s0.y.yi) + 2))*64) + ((rows.s0.x.x*64) + rows.s0.x.min_3)), 1, 64)]))
            }
          }
          consume rows {
            output[ramp(((((output.stride.1/64)*((output.s0.y.y*4) + output.s0.y.yi)) + output.s0.x.x)*64), 1, 64)] = uint8x64(((rows[(ramp(((output.s0.x.x*64) + 2), 1, 64) % x64(384))] + ((rows[(ramp(((output.s0.x.x*64) + 1), 1, 64) % x64(384))]*x64((int16)4)) + ((rows[ramp(((output.s0.x.x % 6)*64), 1, 64)]*x64((int16)6)) + (rows[(ramp(((output.s0.x.x*64) + 382), 1, 64) % x64(384))] + (rows[(ramp(((output.s0.x.x*64) + 383), 1, 64) % x64(384))]*x64((int16)4))))))/x64((int16)256)))
          }
        }
      }
    }
  }
}


Detecting vector interleavings...
Lowering after rewriting vector interleavings:
assert((reinterpret(uint64, output.buffer) != (uint64)0), halide_error_buffer_argument_is_null("output"))
assert((reinterpret(uint64, input.buffer) != (uint64)0), halide_error_buffer_argument_is_null("input"))
let input = _halide_buffer_get_host(input.buffer)
let input.min.0 = _halide_buffer_get_min(input.buffer, 0)
let input.stride.0 = _halide_buffer_get_stride(input.buffer, 0)
let input.min.1 = _halide_buffer_get_min(input.buffer, 1)
let input.stride.1 = _halide_buffer_get_stride(input.buffer, 1)
let output = _halide_buffer_get_host(output.buffer)
let output.min.0 = _halide_buffer_get_min(output.buffer, 0)
let output.extent.0 = _halide_buffer_get_extent(output.buffer, 0)
let output.stride.0 = _halide_buffer_get_stride(output.buffer, 0)
let output.min.1 = _halide_buffer_get_min(output.buffer, 1)
let output.extent.1 = _halide_buffer_get_extent(output.buffer, 1)
let output.stride.1 = _halide_buffer_get_stride(output.buffer, 1)
assert((input.stride.0 == 1), 0)
assert((input.min.0 == 0), 0)
assert(((input.stride.1 % 64) == 0), 0)
assert((input.min.1 == 0), 0)
assert((output.stride.0 == 1), 0)
assert((output.min.0 == 0), 0)
assert(((output.stride.1 % 64) == 0), 0)
assert((output.min.1 == 0), 0)
produce output {
  for<Hexagon> (output.s0.__outermost, 0, 1) {
    for (output.s0.y.y, 0, ((output.extent.1 + 3)/4)) {
      prefetch(input, ((((input.stride.1/64)*((output.s0.y.y*4) + 6))*64) + -2), (((((output.extent.0 + 63)/64)*64) + (select((64 < output.extent.0), 2, -2) + (((output.extent.0 + -1)/64)*64))) + 66), 1, 8, input.stride.1)
      for (output.s0.y.yi, 0, 4) {
        allocate rows[int16 * 384 * 1]
        for (output.s0.x.x, 0, ((output.extent.0 + 63)/64)) {
          let rows.s0.x.min_3 = select((0 < output.s0.x.x), likely_if_innermost(((output.s0.x.x*64) + 2)), ((output.s0.x.x*64) + -2))
          produce rows {
            for (rows.s0.x.x, 0, (((129 - rows.s0.x.min_3)/64) + output.s0.x.x)) {
              rows[(ramp(((rows.s0.x.x*64) + rows.s0.x.min_3), 1, 64) % x64(384))] = (((int16x64(input[ramp(((((input.stride.1/64)*(((output.s0.y.y*4) + output.s0.y.yi) + 1))*64) + ((rows.s0.x.x*64) + rows.s0.x.min_3)), 1, 64)])*x64((int16)4)) + ((int16x64(input[ramp(((((input.stride.1/64)*((output.s0.y.y*4) + output.s0.y.yi))*64) + ((rows.s0.x.x*64) + rows.s0.x.min_3)), 1, 64)])*x64((int16)6)) + ((int16x64(input[ramp(((((input.stride.1/64)*(((output.s0.y.y*4) + output.s0.y.yi) + -1))*64) + ((rows.s0.x.x*64) + rows.s0.x.min_3)), 1, 64)])*x64((int16)4)) + int16x64(input[ramp(((((input.stride.1/64)*(((output.s0.y.y*4) + output.s0.y.yi) + -2))*64) + ((rows.s0.x.x*64) + rows.s0.x.min_3)), 1, 64)])))) + int16x64(input[ramp(((((input.stride.1/64)*(((output.s0.y.y*4) + output.s0.y.yi) + 2))*64) + ((rows.s0.x.x*64) + rows.s0.x.min_3)), 1, 64)]))
            }
          }
          consume rows {
            output[ramp(((((output.stride.1/64)*((output.s0.y.y*4) + output.s0.y.yi)) + output.s0.x.x)*64), 1, 64)] = uint8x64(((rows[(ramp(((output.s0.x.x*64) + 2), 1, 64) % x64(384))] + ((rows[(ramp(((output.s0.x.x*64) + 1), 1, 64) % x64(384))]*x64((int16)4)) + ((rows[ramp(((output.s0.x.x % 6)*64), 1, 64)]*x64((int16)6)) + (rows[(ramp(((output.s0.x.x*64) + 382), 1, 64) % x64(384))] + (rows[(ramp(((output.s0.x.x*64) + 383), 1, 64) % x64(384))]*x64((int16)4))))))/x64((int16)256)))
          }
        }
      }
    }
  }
}


Partitioning loops to simplify boundary conditions...
Lowering after partitioning loops:
assert((reinterpret(uint64, output.buffer) != (uint64)0), halide_error_buffer_argument_is_null("output"))
assert((reinterpret(uint64, input.buffer) != (uint64)0), halide_error_buffer_argument_is_null("input"))
let input = _halide_buffer_get_host(input.buffer)
let input.min.0 = _halide_buffer_get_min(input.buffer, 0)
let input.stride.0 = _halide_buffer_get_stride(input.buffer, 0)
let input.min.1 = _halide_buffer_get_min(input.buffer, 1)
let input.stride.1 = _halide_buffer_get_stride(input.buffer, 1)
let output = _halide_buffer_get_host(output.buffer)
let output.min.0 = _halide_buffer_get_min(output.buffer, 0)
let output.extent.0 = _halide_buffer_get_extent(output.buffer, 0)
let output.stride.0 = _halide_buffer_get_stride(output.buffer, 0)
let output.min.1 = _halide_buffer_get_min(output.buffer, 1)
let output.extent.1 = _halide_buffer_get_extent(output.buffer, 1)
let output.stride.1 = _halide_buffer_get_stride(output.buffer, 1)
assert((input.stride.0 == 1), 0)
assert((input.min.0 == 0), 0)
assert(((input.stride.1 % 64) == 0), 0)
assert((input.min.1 == 0), 0)
assert((output.stride.0 == 1), 0)
assert((output.min.0 == 0), 0)
assert(((output.stride.1 % 64) == 0), 0)
assert((output.min.1 == 0), 0)
produce output {
  for<Hexagon> (output.s0.__outermost, 0, 1) {
    for (output.s0.y.y, 0, ((output.extent.1 + 3)/4)) {
      prefetch(input, ((((input.stride.1/64)*((output.s0.y.y*4) + 6))*64) + -2), (((((output.extent.0 + 63)/64)*64) + (select((64 < output.extent.0), 2, -2) + (((output.extent.0 + -1)/64)*64))) + 66), 1, 8, input.stride.1)
      for (output.s0.y.yi, 0, 4) {
        allocate rows[int16 * 384 * 1]
        for (output.s0.x.x, 0, ((output.extent.0 + 63)/64)) {
          let rows.s0.x.min_3 = (select((0 < output.s0.x.x), 2, -2) + (output.s0.x.x*64))
          produce rows {
            for (rows.s0.x.x, 0, (((129 - rows.s0.x.min_3)/64) + output.s0.x.x)) {
              rows[(ramp(((rows.s0.x.x*64) + rows.s0.x.min_3), 1, 64) % x64(384))] = (((int16x64(input[ramp(((((input.stride.1/64)*(((output.s0.y.y*4) + output.s0.y.yi) + 1))*64) + ((rows.s0.x.x*64) + rows.s0.x.min_3)), 1, 64)])*x64((int16)4)) + ((int16x64(input[ramp(((((input.stride.1/64)*((output.s0.y.y*4) + output.s0.y.yi))*64) + ((rows.s0.x.x*64) + rows.s0.x.min_3)), 1, 64)])*x64((int16)6)) + ((int16x64(input[ramp(((((input.stride.1/64)*(((output.s0.y.y*4) + output.s0.y.yi) + -1))*64) + ((rows.s0.x.x*64) + rows.s0.x.min_3)), 1, 64)])*x64((int16)4)) + int16x64(input[ramp(((((input.stride.1/64)*(((output.s0.y.y*4) + output.s0.y.yi) + -2))*64) + ((rows.s0.x.x*64) + rows.s0.x.min_3)), 1, 64)])))) + int16x64(input[ramp(((((input.stride.1/64)*(((output.s0.y.y*4) + output.s0.y.yi) + 2))*64) + ((rows.s0.x.x*64) + rows.s0.x.min_3)), 1, 64)]))
            }
          }
          consume rows {
            output[ramp(((((output.stride.1/64)*((output.s0.y.y*4) + output.s0.y.yi)) + output.s0.x.x)*64), 1, 64)] = uint8x64(((rows[(ramp(((output.s0.x.x*64) + 2), 1, 64) % x64(384))] + ((rows[(ramp(((output.s0.x.x*64) + 1), 1, 64) % x64(384))]*x64((int16)4)) + ((rows[ramp(((output.s0.x.x % 6)*64), 1, 64)]*x64((int16)6)) + (rows[(ramp(((output.s0.x.x*64) + 382), 1, 64) % x64(384))] + (rows[(ramp(((output.s0.x.x*64) + 383), 1, 64) % x64(384))]*x64((int16)4))))))/x64((int16)256)))
          }
        }
      }
    }
  }
}


Trimming loops to the region over which they do something...
Lowering after loop trimming:
assert((reinterpret(uint64, output.buffer) != (uint64)0), halide_error_buffer_argument_is_null("output"))
assert((reinterpret(uint64, input.buffer) != (uint64)0), halide_error_buffer_argument_is_null("input"))
let input = _halide_buffer_get_host(input.buffer)
let input.min.0 = _halide_buffer_get_min(input.buffer, 0)
let input.stride.0 = _halide_buffer_get_stride(input.buffer, 0)
let input.min.1 = _halide_buffer_get_min(input.buffer, 1)
let input.stride.1 = _halide_buffer_get_stride(input.buffer, 1)
let output = _halide_buffer_get_host(output.buffer)
let output.min.0 = _halide_buffer_get_min(output.buffer, 0)
let output.extent.0 = _halide_buffer_get_extent(output.buffer, 0)
let output.stride.0 = _halide_buffer_get_stride(output.buffer, 0)
let output.min.1 = _halide_buffer_get_min(output.buffer, 1)
let output.extent.1 = _halide_buffer_get_extent(output.buffer, 1)
let output.stride.1 = _halide_buffer_get_stride(output.buffer, 1)
assert((input.stride.0 == 1), 0)
assert((input.min.0 == 0), 0)
assert(((input.stride.1 % 64) == 0), 0)
assert((input.min.1 == 0), 0)
assert((output.stride.0 == 1), 0)
assert((output.min.0 == 0), 0)
assert(((output.stride.1 % 64) == 0), 0)
assert((output.min.1 == 0), 0)
produce output {
  for<Hexagon> (output.s0.__outermost, 0, 1) {
    for (output.s0.y.y, 0, ((output.extent.1 + 3)/4)) {
      prefetch(input, ((((input.stride.1/64)*((output.s0.y.y*4) + 6))*64) + -2), (((((output.extent.0 + 63)/64)*64) + (select((64 < output.extent.0), 2, -2) + (((output.extent.0 + -1)/64)*64))) + 66), 1, 8, input.stride.1)
      for (output.s0.y.yi, 0, 4) {
        allocate rows[int16 * 384 * 1]
        for (output.s0.x.x, 0, ((output.extent.0 + 63)/64)) {
          let rows.s0.x.min_3 = (select((0 < output.s0.x.x), 2, -2) + (output.s0.x.x*64))
          produce rows {
            for (rows.s0.x.x, 0, (((129 - rows.s0.x.min_3)/64) + output.s0.x.x)) {
              rows[(ramp(((rows.s0.x.x*64) + rows.s0.x.min_3), 1, 64) % x64(384))] = (((int16x64(input[ramp(((((input.stride.1/64)*(((output.s0.y.y*4) + output.s0.y.yi) + 1))*64) + ((rows.s0.x.x*64) + rows.s0.x.min_3)), 1, 64)])*x64((int16)4)) + ((int16x64(input[ramp(((((input.stride.1/64)*((output.s0.y.y*4) + output.s0.y.yi))*64) + ((rows.s0.x.x*64) + rows.s0.x.min_3)), 1, 64)])*x64((int16)6)) + ((int16x64(input[ramp(((((input.stride.1/64)*(((output.s0.y.y*4) + output.s0.y.yi) + -1))*64) + ((rows.s0.x.x*64) + rows.s0.x.min_3)), 1, 64)])*x64((int16)4)) + int16x64(input[ramp(((((input.stride.1/64)*(((output.s0.y.y*4) + output.s0.y.yi) + -2))*64) + ((rows.s0.x.x*64) + rows.s0.x.min_3)), 1, 64)])))) + int16x64(input[ramp(((((input.stride.1/64)*(((output.s0.y.y*4) + output.s0.y.yi) + 2))*64) + ((rows.s0.x.x*64) + rows.s0.x.min_3)), 1, 64)]))
            }
          }
          consume rows {
            output[ramp(((((output.stride.1/64)*((output.s0.y.y*4) + output.s0.y.yi)) + output.s0.x.x)*64), 1, 64)] = uint8x64(((rows[(ramp(((output.s0.x.x*64) + 2), 1, 64) % x64(384))] + ((rows[(ramp(((output.s0.x.x*64) + 1), 1, 64) % x64(384))]*x64((int16)4)) + ((rows[ramp(((output.s0.x.x % 6)*64), 1, 64)]*x64((int16)6)) + (rows[(ramp(((output.s0.x.x*64) + 382), 1, 64) % x64(384))] + (rows[(ramp(((output.s0.x.x*64) + 383), 1, 64) % x64(384))]*x64((int16)4))))))/x64((int16)256)))
          }
        }
      }
    }
  }
}


Injecting early frees...
Lowering after injecting early frees:
assert((reinterpret(uint64, output.buffer) != (uint64)0), halide_error_buffer_argument_is_null("output"))
assert((reinterpret(uint64, input.buffer) != (uint64)0), halide_error_buffer_argument_is_null("input"))
let input = _halide_buffer_get_host(input.buffer)
let input.min.0 = _halide_buffer_get_min(input.buffer, 0)
let input.stride.0 = _halide_buffer_get_stride(input.buffer, 0)
let input.min.1 = _halide_buffer_get_min(input.buffer, 1)
let input.stride.1 = _halide_buffer_get_stride(input.buffer, 1)
let output = _halide_buffer_get_host(output.buffer)
let output.min.0 = _halide_buffer_get_min(output.buffer, 0)
let output.extent.0 = _halide_buffer_get_extent(output.buffer, 0)
let output.stride.0 = _halide_buffer_get_stride(output.buffer, 0)
let output.min.1 = _halide_buffer_get_min(output.buffer, 1)
let output.extent.1 = _halide_buffer_get_extent(output.buffer, 1)
let output.stride.1 = _halide_buffer_get_stride(output.buffer, 1)
assert((input.stride.0 == 1), 0)
assert((input.min.0 == 0), 0)
assert(((input.stride.1 % 64) == 0), 0)
assert((input.min.1 == 0), 0)
assert((output.stride.0 == 1), 0)
assert((output.min.0 == 0), 0)
assert(((output.stride.1 % 64) == 0), 0)
assert((output.min.1 == 0), 0)
produce output {
  for<Hexagon> (output.s0.__outermost, 0, 1) {
    for (output.s0.y.y, 0, ((output.extent.1 + 3)/4)) {
      prefetch(input, ((((input.stride.1/64)*((output.s0.y.y*4) + 6))*64) + -2), (((((output.extent.0 + 63)/64)*64) + (select((64 < output.extent.0), 2, -2) + (((output.extent.0 + -1)/64)*64))) + 66), 1, 8, input.stride.1)
      for (output.s0.y.yi, 0, 4) {
        allocate rows[int16 * 384 * 1]
        for (output.s0.x.x, 0, ((output.extent.0 + 63)/64)) {
          let rows.s0.x.min_3 = (select((0 < output.s0.x.x), 2, -2) + (output.s0.x.x*64))
          produce rows {
            for (rows.s0.x.x, 0, (((129 - rows.s0.x.min_3)/64) + output.s0.x.x)) {
              rows[(ramp(((rows.s0.x.x*64) + rows.s0.x.min_3), 1, 64) % x64(384))] = (((int16x64(input[ramp(((((input.stride.1/64)*(((output.s0.y.y*4) + output.s0.y.yi) + 1))*64) + ((rows.s0.x.x*64) + rows.s0.x.min_3)), 1, 64)])*x64((int16)4)) + ((int16x64(input[ramp(((((input.stride.1/64)*((output.s0.y.y*4) + output.s0.y.yi))*64) + ((rows.s0.x.x*64) + rows.s0.x.min_3)), 1, 64)])*x64((int16)6)) + ((int16x64(input[ramp(((((input.stride.1/64)*(((output.s0.y.y*4) + output.s0.y.yi) + -1))*64) + ((rows.s0.x.x*64) + rows.s0.x.min_3)), 1, 64)])*x64((int16)4)) + int16x64(input[ramp(((((input.stride.1/64)*(((output.s0.y.y*4) + output.s0.y.yi) + -2))*64) + ((rows.s0.x.x*64) + rows.s0.x.min_3)), 1, 64)])))) + int16x64(input[ramp(((((input.stride.1/64)*(((output.s0.y.y*4) + output.s0.y.yi) + 2))*64) + ((rows.s0.x.x*64) + rows.s0.x.min_3)), 1, 64)]))
            }
          }
          consume rows {
            output[ramp(((((output.stride.1/64)*((output.s0.y.y*4) + output.s0.y.yi)) + output.s0.x.x)*64), 1, 64)] = uint8x64(((rows[(ramp(((output.s0.x.x*64) + 2), 1, 64) % x64(384))] + ((rows[(ramp(((output.s0.x.x*64) + 1), 1, 64) % x64(384))]*x64((int16)4)) + ((rows[ramp(((output.s0.x.x % 6)*64), 1, 64)]*x64((int16)6)) + (rows[(ramp(((output.s0.x.x*64) + 382), 1, 64) % x64(384))] + (rows[(ramp(((output.s0.x.x*64) + 383), 1, 64) % x64(384))]*x64((int16)4))))))/x64((int16)256)))
          }
        }
        free rows
      }
    }
  }
}


Bounding small allocations...
Lowering after bounding small allocations:
assert((reinterpret(uint64, output.buffer) != (uint64)0), halide_error_buffer_argument_is_null("output"))
assert((reinterpret(uint64, input.buffer) != (uint64)0), halide_error_buffer_argument_is_null("input"))
let input = _halide_buffer_get_host(input.buffer)
let input.min.0 = _halide_buffer_get_min(input.buffer, 0)
let input.stride.0 = _halide_buffer_get_stride(input.buffer, 0)
let input.min.1 = _halide_buffer_get_min(input.buffer, 1)
let input.stride.1 = _halide_buffer_get_stride(input.buffer, 1)
let output = _halide_buffer_get_host(output.buffer)
let output.min.0 = _halide_buffer_get_min(output.buffer, 0)
let output.extent.0 = _halide_buffer_get_extent(output.buffer, 0)
let output.stride.0 = _halide_buffer_get_stride(output.buffer, 0)
let output.min.1 = _halide_buffer_get_min(output.buffer, 1)
let output.extent.1 = _halide_buffer_get_extent(output.buffer, 1)
let output.stride.1 = _halide_buffer_get_stride(output.buffer, 1)
assert((input.stride.0 == 1), 0)
assert((input.min.0 == 0), 0)
assert(((input.stride.1 % 64) == 0), 0)
assert((input.min.1 == 0), 0)
assert((output.stride.0 == 1), 0)
assert((output.min.0 == 0), 0)
assert(((output.stride.1 % 64) == 0), 0)
assert((output.min.1 == 0), 0)
produce output {
  for<Hexagon> (output.s0.__outermost, 0, 1) {
    for (output.s0.y.y, 0, ((output.extent.1 + 3)/4)) {
      prefetch(input, ((((input.stride.1/64)*((output.s0.y.y*4) + 6))*64) + -2), (((((output.extent.0 + 63)/64)*64) + (select((64 < output.extent.0), 2, -2) + (((output.extent.0 + -1)/64)*64))) + 66), 1, 8, input.stride.1)
      for (output.s0.y.yi, 0, 4) {
        allocate rows[int16 * 384 * 1]
        for (output.s0.x.x, 0, ((output.extent.0 + 63)/64)) {
          let rows.s0.x.min_3 = (select((0 < output.s0.x.x), 2, -2) + (output.s0.x.x*64))
          produce rows {
            for (rows.s0.x.x, 0, (((129 - rows.s0.x.min_3)/64) + output.s0.x.x)) {
              rows[(ramp(((rows.s0.x.x*64) + rows.s0.x.min_3), 1, 64) % x64(384))] = (((int16x64(input[ramp(((((input.stride.1/64)*(((output.s0.y.y*4) + output.s0.y.yi) + 1))*64) + ((rows.s0.x.x*64) + rows.s0.x.min_3)), 1, 64)])*x64((int16)4)) + ((int16x64(input[ramp(((((input.stride.1/64)*((output.s0.y.y*4) + output.s0.y.yi))*64) + ((rows.s0.x.x*64) + rows.s0.x.min_3)), 1, 64)])*x64((int16)6)) + ((int16x64(input[ramp(((((input.stride.1/64)*(((output.s0.y.y*4) + output.s0.y.yi) + -1))*64) + ((rows.s0.x.x*64) + rows.s0.x.min_3)), 1, 64)])*x64((int16)4)) + int16x64(input[ramp(((((input.stride.1/64)*(((output.s0.y.y*4) + output.s0.y.yi) + -2))*64) + ((rows.s0.x.x*64) + rows.s0.x.min_3)), 1, 64)])))) + int16x64(input[ramp(((((input.stride.1/64)*(((output.s0.y.y*4) + output.s0.y.yi) + 2))*64) + ((rows.s0.x.x*64) + rows.s0.x.min_3)), 1, 64)]))
            }
          }
          consume rows {
            output[ramp(((((output.stride.1/64)*((output.s0.y.y*4) + output.s0.y.yi)) + output.s0.x.x)*64), 1, 64)] = uint8x64(((rows[(ramp(((output.s0.x.x*64) + 2), 1, 64) % x64(384))] + ((rows[(ramp(((output.s0.x.x*64) + 1), 1, 64) % x64(384))]*x64((int16)4)) + ((rows[ramp(((output.s0.x.x % 6)*64), 1, 64)]*x64((int16)6)) + (rows[(ramp(((output.s0.x.x*64) + 382), 1, 64) % x64(384))] + (rows[(ramp(((output.s0.x.x*64) + 383), 1, 64) % x64(384))]*x64((int16)4))))))/x64((int16)256)))
          }
        }
        free rows
      }
    }
  }
}


Simplifying...
Lowering unsafe promises...
Lowering after lowering unsafe promises:
assert((reinterpret(uint64, output.buffer) != (uint64)0), halide_error_buffer_argument_is_null("output"))
assert((reinterpret(uint64, input.buffer) != (uint64)0), halide_error_buffer_argument_is_null("input"))
let input = _halide_buffer_get_host(input.buffer)
let input.min.0 = _halide_buffer_get_min(input.buffer, 0)
let input.stride.0 = _halide_buffer_get_stride(input.buffer, 0)
let input.min.1 = _halide_buffer_get_min(input.buffer, 1)
let input.stride.1 = _halide_buffer_get_stride(input.buffer, 1)
let output = _halide_buffer_get_host(output.buffer)
let output.min.0 = _halide_buffer_get_min(output.buffer, 0)
let output.extent.0 = _halide_buffer_get_extent(output.buffer, 0)
let output.stride.0 = _halide_buffer_get_stride(output.buffer, 0)
let output.min.1 = _halide_buffer_get_min(output.buffer, 1)
let output.extent.1 = _halide_buffer_get_extent(output.buffer, 1)
let output.stride.1 = _halide_buffer_get_stride(output.buffer, 1)
assert((input.stride.0 == 1), 0)
assert((input.min.0 == 0), 0)
assert(((input.stride.1 % 64) == 0), 0)
assert((input.min.1 == 0), 0)
assert((output.stride.0 == 1), 0)
assert((output.min.0 == 0), 0)
assert(((output.stride.1 % 64) == 0), 0)
assert((output.min.1 == 0), 0)
produce output {
  for<Hexagon> (output.s0.__outermost, 0, 1) {
    for (output.s0.y.y, 0, ((output.extent.1 + 3)/4)) {
      prefetch(input, ((((input.stride.1/64)*((output.s0.y.y*4) + 6))*64) + -2), (((((output.extent.0 + 63)/64)*64) + (select((64 < output.extent.0), 2, -2) + (((output.extent.0 + -1)/64)*64))) + 66), 1, 8, input.stride.1)
      for (output.s0.y.yi, 0, 4) {
        allocate rows[int16 * 384 * 1]
        for (output.s0.x.x, 0, ((output.extent.0 + 63)/64)) {
          let rows.s0.x.min_3 = (select((0 < output.s0.x.x), 2, -2) + (output.s0.x.x*64))
          produce rows {
            for (rows.s0.x.x, 0, (((129 - rows.s0.x.min_3)/64) + output.s0.x.x)) {
              rows[(ramp(((rows.s0.x.x*64) + rows.s0.x.min_3), 1, 64) % x64(384))] = (let t83 = ((output.s0.y.y*4) + output.s0.y.yi) in (let t84 = ((rows.s0.x.x*64) + rows.s0.x.min_3) in (((int16x64(input[ramp(((((input.stride.1/64)*(t83 + 1))*64) + t84), 1, 64)])*x64((int16)4)) + ((int16x64(input[ramp(((((input.stride.1/64)*t83)*64) + t84), 1, 64)])*x64((int16)6)) + ((int16x64(input[ramp(((((input.stride.1/64)*(t83 + -1))*64) + t84), 1, 64)])*x64((int16)4)) + int16x64(input[ramp(((((input.stride.1/64)*(t83 + -2))*64) + t84), 1, 64)])))) + int16x64(input[ramp(((((input.stride.1/64)*(t83 + 2))*64) + t84), 1, 64)]))))
            }
          }
          consume rows {
            output[ramp(((((output.stride.1/64)*((output.s0.y.y*4) + output.s0.y.yi)) + output.s0.x.x)*64), 1, 64)] = uint8x64(((rows[(ramp(((output.s0.x.x*64) + 2), 1, 64) % x64(384))] + ((rows[(ramp(((output.s0.x.x*64) + 1), 1, 64) % x64(384))]*x64((int16)4)) + ((rows[ramp(((output.s0.x.x % 6)*64), 1, 64)]*x64((int16)6)) + (rows[(ramp(((output.s0.x.x*64) + 382), 1, 64) % x64(384))] + (rows[(ramp(((output.s0.x.x*64) + 383), 1, 64) % x64(384))]*x64((int16)4))))))/x64((int16)256)))
          }
        }
        free rows
      }
    }
  }
}


Lowering after final simplification:
assert((reinterpret(uint64, output.buffer) != (uint64)0), halide_error_buffer_argument_is_null("output"))
assert((reinterpret(uint64, input.buffer) != (uint64)0), halide_error_buffer_argument_is_null("input"))
let input = _halide_buffer_get_host(input.buffer)
let input.min.0 = _halide_buffer_get_min(input.buffer, 0)
let input.stride.0 = _halide_buffer_get_stride(input.buffer, 0)
let input.min.1 = _halide_buffer_get_min(input.buffer, 1)
let input.stride.1 = _halide_buffer_get_stride(input.buffer, 1)
let output = _halide_buffer_get_host(output.buffer)
let output.min.0 = _halide_buffer_get_min(output.buffer, 0)
let output.extent.0 = _halide_buffer_get_extent(output.buffer, 0)
let output.stride.0 = _halide_buffer_get_stride(output.buffer, 0)
let output.min.1 = _halide_buffer_get_min(output.buffer, 1)
let output.extent.1 = _halide_buffer_get_extent(output.buffer, 1)
let output.stride.1 = _halide_buffer_get_stride(output.buffer, 1)
assert((input.stride.0 == 1), 0)
assert((input.min.0 == 0), 0)
assert(((input.stride.1 % 64) == 0), 0)
assert((input.min.1 == 0), 0)
assert((output.stride.0 == 1), 0)
assert((output.min.0 == 0), 0)
assert(((output.stride.1 % 64) == 0), 0)
assert((output.min.1 == 0), 0)
produce output {
  let t92 = ((output.extent.0 + 63)/64)
  let t87 = ((output.extent.1 + 3)/4)
  let t91 = (output.stride.1/64)
  let t88 = (input.stride.1/64)
  let t89 = (((t92*64) + (select((64 < output.extent.0), 2, -2) + (((output.extent.0 + -1)/64)*64))) + 66)
  for<Hexagon> (output.s0.__outermost, 0, 1) {
    for (output.s0.y.y, 0, t87) {
      prefetch(input, (((((output.s0.y.y*4) + 6)*t88)*64) + -2), t89, 1, 8, input.stride.1)
      let t93 = (output.s0.y.y*4)
      for (output.s0.y.yi, 0, 4) {
        allocate rows[int16 * 384 * 1]
        let t96 = (output.s0.y.yi + t93)
        let t95 = (t91*t96)
        for (output.s0.x.x, 0, t92) {
          let rows.s0.x.min_3 = (select((0 < output.s0.x.x), 2, -2) + (output.s0.x.x*64))
          produce rows {
            let t102 = (((t96 + 2)*t88)*64)
            let t98 = (((t96 + 1)*t88)*64)
            let t100 = (((t96 + -1)*t88)*64)
            let t101 = (((t96 + -2)*t88)*64)
            let t99 = ((t88*t96)*64)
            let t97 = (((129 - rows.s0.x.min_3)/64) + output.s0.x.x)
            for (rows.s0.x.x, 0, t97) {
              rows[(ramp(((rows.s0.x.x*64) + rows.s0.x.min_3), 1, 64) % x64(384))] = (((int16x64(input[ramp((((rows.s0.x.x*64) + rows.s0.x.min_3) + t98), 1, 64)])*x64((int16)4)) + ((int16x64(input[ramp((((rows.s0.x.x*64) + rows.s0.x.min_3) + t99), 1, 64)])*x64((int16)6)) + ((int16x64(input[ramp((((rows.s0.x.x*64) + rows.s0.x.min_3) + t100), 1, 64)])*x64((int16)4)) + int16x64(input[ramp((((rows.s0.x.x*64) + rows.s0.x.min_3) + t101), 1, 64)])))) + int16x64(input[ramp((((rows.s0.x.x*64) + rows.s0.x.min_3) + t102), 1, 64)]))
            }
          }
          consume rows {
            output[ramp(((output.s0.x.x + t95)*64), 1, 64)] = uint8x64(((rows[(ramp(((output.s0.x.x*64) + 2), 1, 64) % x64(384))] + ((rows[(ramp(((output.s0.x.x*64) + 1), 1, 64) % x64(384))]*x64((int16)4)) + ((rows[ramp(((output.s0.x.x % 6)*64), 1, 64)]*x64((int16)6)) + (rows[(ramp(((output.s0.x.x*64) + 382), 1, 64) % x64(384))] + (rows[(ramp(((output.s0.x.x*64) + 383), 1, 64) % x64(384))]*x64((int16)4))))))/x64((int16)256)))
          }
        }
        free rows
      }
    }
  }
}


Skipping Hexagon offload...
Body after wrapping extern calls:
assert((reinterpret(uint64, output.buffer) != (uint64)0), halide_error_buffer_argument_is_null("output"))
assert((reinterpret(uint64, input.buffer) != (uint64)0), halide_error_buffer_argument_is_null("input"))
let input = _halide_buffer_get_host(input.buffer)
let input.min.0 = _halide_buffer_get_min(input.buffer, 0)
let input.stride.0 = _halide_buffer_get_stride(input.buffer, 0)
let input.min.1 = _halide_buffer_get_min(input.buffer, 1)
let input.stride.1 = _halide_buffer_get_stride(input.buffer, 1)
let output = _halide_buffer_get_host(output.buffer)
let output.min.0 = _halide_buffer_get_min(output.buffer, 0)
let output.extent.0 = _halide_buffer_get_extent(output.buffer, 0)
let output.stride.0 = _halide_buffer_get_stride(output.buffer, 0)
let output.min.1 = _halide_buffer_get_min(output.buffer, 1)
let output.extent.1 = _halide_buffer_get_extent(output.buffer, 1)
let output.stride.1 = _halide_buffer_get_stride(output.buffer, 1)
assert((input.stride.0 == 1), 0)
assert((input.min.0 == 0), 0)
assert(((input.stride.1 % 64) == 0), 0)
assert((input.min.1 == 0), 0)
assert((output.stride.0 == 1), 0)
assert((output.min.0 == 0), 0)
assert(((output.stride.1 % 64) == 0), 0)
assert((output.min.1 == 0), 0)
produce output {
  let t92 = ((output.extent.0 + 63)/64)
  let t87 = ((output.extent.1 + 3)/4)
  let t91 = (output.stride.1/64)
  let t88 = (input.stride.1/64)
  let t89 = (((t92*64) + (select((64 < output.extent.0), 2, -2) + (((output.extent.0 + -1)/64)*64))) + 66)
  for<Hexagon> (output.s0.__outermost, 0, 1) {
    for (output.s0.y.y, 0, t87) {
      prefetch(input, (((((output.s0.y.y*4) + 6)*t88)*64) + -2), t89, 1, 8, input.stride.1)
      let t93 = (output.s0.y.y*4)
      for (output.s0.y.yi, 0, 4) {
        allocate rows[int16 * 384 * 1]
        let t96 = (output.s0.y.yi + t93)
        let t95 = (t91*t96)
        for (output.s0.x.x, 0, t92) {
          let rows.s0.x.min_3 = (select((0 < output.s0.x.x), 2, -2) + (output.s0.x.x*64))
          produce rows {
            let t102 = (((t96 + 2)*t88)*64)
            let t98 = (((t96 + 1)*t88)*64)
            let t100 = (((t96 + -1)*t88)*64)
            let t101 = (((t96 + -2)*t88)*64)
            let t99 = ((t88*t96)*64)
            let t97 = (((129 - rows.s0.x.min_3)/64) + output.s0.x.x)
            for (rows.s0.x.x, 0, t97) {
              rows[(ramp(((rows.s0.x.x*64) + rows.s0.x.min_3), 1, 64) % x64(384))] = (((int16x64(input[ramp((((rows.s0.x.x*64) + rows.s0.x.min_3) + t98), 1, 64)])*x64((int16)4)) + ((int16x64(input[ramp((((rows.s0.x.x*64) + rows.s0.x.min_3) + t99), 1, 64)])*x64((int16)6)) + ((int16x64(input[ramp((((rows.s0.x.x*64) + rows.s0.x.min_3) + t100), 1, 64)])*x64((int16)4)) + int16x64(input[ramp((((rows.s0.x.x*64) + rows.s0.x.min_3) + t101), 1, 64)])))) + int16x64(input[ramp((((rows.s0.x.x*64) + rows.s0.x.min_3) + t102), 1, 64)]))
            }
          }
          consume rows {
            output[ramp(((output.s0.x.x + t95)*64), 1, 64)] = uint8x64(((rows[(ramp(((output.s0.x.x*64) + 2), 1, 64) % x64(384))] + ((rows[(ramp(((output.s0.x.x*64) + 1), 1, 64) % x64(384))]*x64((int16)4)) + ((rows[ramp(((output.s0.x.x % 6)*64), 1, 64)]*x64((int16)6)) + (rows[(ramp(((output.s0.x.x*64) + 382), 1, 64) % x64(384))] + (rows[(ramp(((output.s0.x.x*64) + 383), 1, 64) % x64(384))]*x64((int16)4))))))/x64((int16)256)))
          }
        }
        free rows
      }
    }
  }
}


Target triple of initial module: hexagon-unknown--elf
Generating llvm bitcode...
Generating llvm bitcode prolog for function gaussian5x5_hvx64...
Unpredicating loads and stores...
Lowering after unpredicating loads/stores:
assert((reinterpret(uint64, output.buffer) != (uint64)0), halide_error_buffer_argument_is_null("output"))
assert((reinterpret(uint64, input.buffer) != (uint64)0), halide_error_buffer_argument_is_null("input"))
let input = _halide_buffer_get_host(input.buffer)
let input.min.0 = _halide_buffer_get_min(input.buffer, 0)
let input.stride.0 = _halide_buffer_get_stride(input.buffer, 0)
let input.min.1 = _halide_buffer_get_min(input.buffer, 1)
let input.stride.1 = _halide_buffer_get_stride(input.buffer, 1)
let output = _halide_buffer_get_host(output.buffer)
let output.min.0 = _halide_buffer_get_min(output.buffer, 0)
let output.extent.0 = _halide_buffer_get_extent(output.buffer, 0)
let output.stride.0 = _halide_buffer_get_stride(output.buffer, 0)
let output.min.1 = _halide_buffer_get_min(output.buffer, 1)
let output.extent.1 = _halide_buffer_get_extent(output.buffer, 1)
let output.stride.1 = _halide_buffer_get_stride(output.buffer, 1)
assert((input.stride.0 == 1), 0)
assert((input.min.0 == 0), 0)
assert(((input.stride.1 % 64) == 0), 0)
assert((input.min.1 == 0), 0)
assert((output.stride.0 == 1), 0)
assert((output.min.0 == 0), 0)
assert(((output.stride.1 % 64) == 0), 0)
assert((output.min.1 == 0), 0)
produce output {
  let t92 = ((output.extent.0 + 63)/64)
  let t87 = ((output.extent.1 + 3)/4)
  let t91 = (output.stride.1/64)
  let t88 = (input.stride.1/64)
  let t89 = (((t92*64) + (select((64 < output.extent.0), 2, -2) + (((output.extent.0 + -1)/64)*64))) + 66)
  for<Hexagon> (output.s0.__outermost, 0, 1) {
    for (output.s0.y.y, 0, t87) {
      prefetch(input, (((((output.s0.y.y*4) + 6)*t88)*64) + -2), t89, 1, 8, input.stride.1)
      let t93 = (output.s0.y.y*4)
      for (output.s0.y.yi, 0, 4) {
        allocate rows[int16 * 384 * 1]
        let t96 = (output.s0.y.yi + t93)
        let t95 = (t91*t96)
        for (output.s0.x.x, 0, t92) {
          let rows.s0.x.min_3 = (select((0 < output.s0.x.x), 2, -2) + (output.s0.x.x*64))
          produce rows {
            let t102 = (((t96 + 2)*t88)*64)
            let t98 = (((t96 + 1)*t88)*64)
            let t100 = (((t96 + -1)*t88)*64)
            let t101 = (((t96 + -2)*t88)*64)
            let t99 = ((t88*t96)*64)
            let t97 = (((129 - rows.s0.x.min_3)/64) + output.s0.x.x)
            for (rows.s0.x.x, 0, t97) {
              rows[(ramp(((rows.s0.x.x*64) + rows.s0.x.min_3), 1, 64) % x64(384))] = (((int16x64(input[ramp((((rows.s0.x.x*64) + rows.s0.x.min_3) + t98), 1, 64)])*x64((int16)4)) + ((int16x64(input[ramp((((rows.s0.x.x*64) + rows.s0.x.min_3) + t99), 1, 64)])*x64((int16)6)) + ((int16x64(input[ramp((((rows.s0.x.x*64) + rows.s0.x.min_3) + t100), 1, 64)])*x64((int16)4)) + int16x64(input[ramp((((rows.s0.x.x*64) + rows.s0.x.min_3) + t101), 1, 64)])))) + int16x64(input[ramp((((rows.s0.x.x*64) + rows.s0.x.min_3) + t102), 1, 64)]))
            }
          }
          consume rows {
            output[ramp(((output.s0.x.x + t95)*64), 1, 64)] = uint8x64(((rows[(ramp(((output.s0.x.x*64) + 2), 1, 64) % x64(384))] + ((rows[(ramp(((output.s0.x.x*64) + 1), 1, 64) % x64(384))]*x64((int16)4)) + ((rows[ramp(((output.s0.x.x % 6)*64), 1, 64)]*x64((int16)6)) + (rows[(ramp(((output.s0.x.x*64) + 382), 1, 64) % x64(384))] + (rows[(ramp(((output.s0.x.x*64) + 383), 1, 64) % x64(384))]*x64((int16)4))))))/x64((int16)256)))
          }
        }
        free rows
      }
    }
  }
}


Optimizing shuffles...
Lowering after optimizing shuffles:
assert((reinterpret(uint64, output.buffer) != (uint64)0), halide_error_buffer_argument_is_null("output"))
assert((reinterpret(uint64, input.buffer) != (uint64)0), halide_error_buffer_argument_is_null("input"))
let input = _halide_buffer_get_host(input.buffer)
let input.min.0 = _halide_buffer_get_min(input.buffer, 0)
let input.stride.0 = _halide_buffer_get_stride(input.buffer, 0)
let input.min.1 = _halide_buffer_get_min(input.buffer, 1)
let input.stride.1 = _halide_buffer_get_stride(input.buffer, 1)
let output = _halide_buffer_get_host(output.buffer)
let output.min.0 = _halide_buffer_get_min(output.buffer, 0)
let output.extent.0 = _halide_buffer_get_extent(output.buffer, 0)
let output.stride.0 = _halide_buffer_get_stride(output.buffer, 0)
let output.min.1 = _halide_buffer_get_min(output.buffer, 1)
let output.extent.1 = _halide_buffer_get_extent(output.buffer, 1)
let output.stride.1 = _halide_buffer_get_stride(output.buffer, 1)
assert((input.stride.0 == 1), 0)
assert((input.min.0 == 0), 0)
assert(((input.stride.1 % 64) == 0), 0)
assert((input.min.1 == 0), 0)
assert((output.stride.0 == 1), 0)
assert((output.min.0 == 0), 0)
assert(((output.stride.1 % 64) == 0), 0)
assert((output.min.1 == 0), 0)
produce output {
  let t92 = ((output.extent.0 + 63)/64)
  let t87 = ((output.extent.1 + 3)/4)
  let t91 = (output.stride.1/64)
  let t88 = (input.stride.1/64)
  let t89 = (((t92*64) + (select((64 < output.extent.0), 2, -2) + (((output.extent.0 + -1)/64)*64))) + 66)
  for<Hexagon> (output.s0.__outermost, 0, 1) {
    for (output.s0.y.y, 0, t87) {
      prefetch(input, (((((output.s0.y.y*4) + 6)*t88)*64) + -2), t89, 1, 8, input.stride.1)
      let t93 = (output.s0.y.y*4)
      for (output.s0.y.yi, 0, 4) {
        allocate rows[int16 * 384 * 1]
        let t96 = (output.s0.y.yi + t93)
        let t95 = (t91*t96)
        for (output.s0.x.x, 0, t92) {
          let rows.s0.x.min_3 = (select((0 < output.s0.x.x), 2, -2) + (output.s0.x.x*64))
          produce rows {
            let t102 = (((t96 + 2)*t88)*64)
            let t98 = (((t96 + 1)*t88)*64)
            let t100 = (((t96 + -1)*t88)*64)
            let t101 = (((t96 + -2)*t88)*64)
            let t99 = ((t88*t96)*64)
            let t97 = (((129 - rows.s0.x.min_3)/64) + output.s0.x.x)
            for (rows.s0.x.x, 0, t97) {
              rows[(ramp(((rows.s0.x.x*64) + rows.s0.x.min_3), 1, 64) % x64(384))] = (((int16x64(input[ramp((((rows.s0.x.x*64) + rows.s0.x.min_3) + t98), 1, 64)])*x64((int16)4)) + ((int16x64(input[ramp((((rows.s0.x.x*64) + rows.s0.x.min_3) + t99), 1, 64)])*x64((int16)6)) + ((int16x64(input[ramp((((rows.s0.x.x*64) + rows.s0.x.min_3) + t100), 1, 64)])*x64((int16)4)) + int16x64(input[ramp((((rows.s0.x.x*64) + rows.s0.x.min_3) + t101), 1, 64)])))) + int16x64(input[ramp((((rows.s0.x.x*64) + rows.s0.x.min_3) + t102), 1, 64)]))
            }
          }
          consume rows {
            output[ramp(((output.s0.x.x + t95)*64), 1, 64)] = uint8x64(((rows[(ramp(((output.s0.x.x*64) + 2), 1, 64) % x64(384))] + ((rows[(ramp(((output.s0.x.x*64) + 1), 1, 64) % x64(384))]*x64((int16)4)) + ((rows[ramp(((output.s0.x.x % 6)*64), 1, 64)]*x64((int16)6)) + (rows[(ramp(((output.s0.x.x*64) + 382), 1, 64) % x64(384))] + (rows[(ramp(((output.s0.x.x*64) + 383), 1, 64) % x64(384))]*x64((int16)4))))))/x64((int16)256)))
          }
        }
        free rows
      }
    }
  }
}


Generating vtmpy/vrmpy...
Lowering after generating vtmpy/vrmpy:
assert((reinterpret(uint64, output.buffer) != (uint64)0), halide_error_buffer_argument_is_null("output"))
assert((reinterpret(uint64, input.buffer) != (uint64)0), halide_error_buffer_argument_is_null("input"))
let input = _halide_buffer_get_host(input.buffer)
let input.min.0 = _halide_buffer_get_min(input.buffer, 0)
let input.stride.0 = _halide_buffer_get_stride(input.buffer, 0)
let input.min.1 = _halide_buffer_get_min(input.buffer, 1)
let input.stride.1 = _halide_buffer_get_stride(input.buffer, 1)
let output = _halide_buffer_get_host(output.buffer)
let output.min.0 = _halide_buffer_get_min(output.buffer, 0)
let output.extent.0 = _halide_buffer_get_extent(output.buffer, 0)
let output.stride.0 = _halide_buffer_get_stride(output.buffer, 0)
let output.min.1 = _halide_buffer_get_min(output.buffer, 1)
let output.extent.1 = _halide_buffer_get_extent(output.buffer, 1)
let output.stride.1 = _halide_buffer_get_stride(output.buffer, 1)
assert((input.stride.0 == 1), 0)
assert((input.min.0 == 0), 0)
assert(((input.stride.1 % 64) == 0), 0)
assert((input.min.1 == 0), 0)
assert((output.stride.0 == 1), 0)
assert((output.min.0 == 0), 0)
assert(((output.stride.1 % 64) == 0), 0)
assert((output.min.1 == 0), 0)
produce output {
  let t92 = ((output.extent.0 + 63)/64)
  let t87 = ((output.extent.1 + 3)/4)
  let t91 = (output.stride.1/64)
  let t88 = (input.stride.1/64)
  let t89 = (((t92*64) + (select((64 < output.extent.0), 2, -2) + (((output.extent.0 + -1)/64)*64))) + 66)
  for<Hexagon> (output.s0.__outermost, 0, 1) {
    for (output.s0.y.y, 0, t87) {
      prefetch(input, (((((output.s0.y.y*4) + 6)*t88)*64) + -2), t89, 1, 8, input.stride.1)
      let t93 = (output.s0.y.y*4)
      for (output.s0.y.yi, 0, 4) {
        allocate rows[int16 * 384 * 1]
        let t96 = (output.s0.y.yi + t93)
        let t95 = (t91*t96)
        for (output.s0.x.x, 0, t92) {
          let rows.s0.x.min_3 = (select((0 < output.s0.x.x), 2, -2) + (output.s0.x.x*64))
          produce rows {
            let t102 = (((t96 + 2)*t88)*64)
            let t98 = (((t96 + 1)*t88)*64)
            let t100 = (((t96 + -1)*t88)*64)
            let t101 = (((t96 + -2)*t88)*64)
            let t99 = ((t88*t96)*64)
            let t97 = (((129 - rows.s0.x.min_3)/64) + output.s0.x.x)
            for (rows.s0.x.x, 0, t97) {
              rows[(ramp(((rows.s0.x.x*64) + rows.s0.x.min_3), 1, 64) % x64(384))] = (let t107 = ((rows.s0.x.x*64) + rows.s0.x.min_3) in (((int16x64(input[ramp((t107 + t98), 1, 64)])*x64((int16)4)) + ((int16x64(input[ramp((t107 + t99), 1, 64)])*x64((int16)6)) + ((int16x64(input[ramp((t107 + t100), 1, 64)])*x64((int16)4)) + int16x64(input[ramp((t107 + t101), 1, 64)])))) + int16x64(input[ramp((t107 + t102), 1, 64)])))
            }
          }
          consume rows {
            output[ramp(((output.s0.x.x + t95)*64), 1, 64)] = uint8x64(((rows[(ramp(((output.s0.x.x*64) + 2), 1, 64) % x64(384))] + ((rows[(ramp(((output.s0.x.x*64) + 1), 1, 64) % x64(384))]*x64((int16)4)) + ((rows[ramp(((output.s0.x.x % 6)*64), 1, 64)]*x64((int16)6)) + (rows[(ramp(((output.s0.x.x*64) + 382), 1, 64) % x64(384))] + (rows[(ramp(((output.s0.x.x*64) + 383), 1, 64) % x64(384))]*x64((int16)4))))))/x64((int16)256)))
          }
        }
        free rows
      }
    }
  }
}


Aligning loads for HVX....
Lowering after aligning loads:
assert((reinterpret(uint64, output.buffer) != (uint64)0), halide_error_buffer_argument_is_null("output"))
assert((reinterpret(uint64, input.buffer) != (uint64)0), halide_error_buffer_argument_is_null("input"))
let input = _halide_buffer_get_host(input.buffer)
let input.min.0 = _halide_buffer_get_min(input.buffer, 0)
let input.stride.0 = _halide_buffer_get_stride(input.buffer, 0)
let input.min.1 = _halide_buffer_get_min(input.buffer, 1)
let input.stride.1 = _halide_buffer_get_stride(input.buffer, 1)
let output = _halide_buffer_get_host(output.buffer)
let output.min.0 = _halide_buffer_get_min(output.buffer, 0)
let output.extent.0 = _halide_buffer_get_extent(output.buffer, 0)
let output.stride.0 = _halide_buffer_get_stride(output.buffer, 0)
let output.min.1 = _halide_buffer_get_min(output.buffer, 1)
let output.extent.1 = _halide_buffer_get_extent(output.buffer, 1)
let output.stride.1 = _halide_buffer_get_stride(output.buffer, 1)
assert((input.stride.0 == 1), 0)
assert((input.min.0 == 0), 0)
assert(((input.stride.1 % 64) == 0), 0)
assert((input.min.1 == 0), 0)
assert((output.stride.0 == 1), 0)
assert((output.min.0 == 0), 0)
assert(((output.stride.1 % 64) == 0), 0)
assert((output.min.1 == 0), 0)
produce output {
  let t92 = ((output.extent.0 + 63)/64)
  let t87 = ((output.extent.1 + 3)/4)
  let t91 = (output.stride.1/64)
  let t88 = (input.stride.1/64)
  let t89 = (((t92*64) + (select((64 < output.extent.0), 2, -2) + (((output.extent.0 + -1)/64)*64))) + 66)
  for<Hexagon> (output.s0.__outermost, 0, 1) {
    for (output.s0.y.y, 0, t87) {
      prefetch(input, (((((output.s0.y.y*4) + 6)*t88)*64) + -2), t89, 1, 8, input.stride.1)
      let t93 = (output.s0.y.y*4)
      for (output.s0.y.yi, 0, 4) {
        allocate rows[int16 * 384 * 1]
        let t96 = (output.s0.y.yi + t93)
        let t95 = (t91*t96)
        for (output.s0.x.x, 0, t92) {
          let rows.s0.x.min_3 = (select((0 < output.s0.x.x), 2, -2) + (output.s0.x.x*64))
          produce rows {
            let t102 = (((t96 + 2)*t88)*64)
            let t98 = (((t96 + 1)*t88)*64)
            let t100 = (((t96 + -1)*t88)*64)
            let t101 = (((t96 + -2)*t88)*64)
            let t99 = ((t88*t96)*64)
            let t97 = (((129 - rows.s0.x.min_3)/64) + output.s0.x.x)
            for (rows.s0.x.x, 0, t97) {
              rows[(ramp(((rows.s0.x.x*64) + rows.s0.x.min_3), 1, 64) % x64(384))] = (let t108 = ((rows.s0.x.x*64) + rows.s0.x.min_3) in (((int16x64(input[ramp((t108 + t98), 1, 64)])*x64((int16)4)) + ((int16x64(input[ramp((t108 + t99), 1, 64)])*x64((int16)6)) + ((int16x64(input[ramp((t108 + t100), 1, 64)])*x64((int16)4)) + int16x64(input[ramp((t108 + t101), 1, 64)])))) + int16x64(input[ramp((t108 + t102), 1, 64)])))
            }
          }
          consume rows {
            output[ramp(((output.s0.x.x + t95)*64), 1, 64)] = (let t109 = (output.s0.x.x % 6) in uint8x64(((rows[(ramp(((output.s0.x.x*64) + 2), 1, 64) % x64(384))] + ((rows[(ramp(((output.s0.x.x*64) + 1), 1, 64) % x64(384))]*x64((int16)4)) + ((concat_vectors(rows[ramp((t109*64), 1, 32)], rows[ramp(((t109*64) + 32), 1, 32)])*x64((int16)6)) + (rows[(ramp(((output.s0.x.x*64) + 382), 1, 64) % x64(384))] + (rows[(ramp(((output.s0.x.x*64) + 383), 1, 64) % x64(384))]*x64((int16)4))))))/x64((int16)256))))
          }
        }
        free rows
      }
    }
  }
}


Carrying values across loop iterations...
Lowering after forwarding stores:
assert((reinterpret(uint64, output.buffer) != (uint64)0), halide_error_buffer_argument_is_null("output"))
assert((reinterpret(uint64, input.buffer) != (uint64)0), halide_error_buffer_argument_is_null("input"))
let input = _halide_buffer_get_host(input.buffer)
let input.min.0 = _halide_buffer_get_min(input.buffer, 0)
let input.stride.0 = _halide_buffer_get_stride(input.buffer, 0)
let input.min.1 = _halide_buffer_get_min(input.buffer, 1)
let input.stride.1 = _halide_buffer_get_stride(input.buffer, 1)
let output = _halide_buffer_get_host(output.buffer)
let output.min.0 = _halide_buffer_get_min(output.buffer, 0)
let output.extent.0 = _halide_buffer_get_extent(output.buffer, 0)
let output.stride.0 = _halide_buffer_get_stride(output.buffer, 0)
let output.min.1 = _halide_buffer_get_min(output.buffer, 1)
let output.extent.1 = _halide_buffer_get_extent(output.buffer, 1)
let output.stride.1 = _halide_buffer_get_stride(output.buffer, 1)
assert((input.stride.0 == 1), 0)
assert((input.min.0 == 0), 0)
assert(((input.stride.1 % 64) == 0), 0)
assert((input.min.1 == 0), 0)
assert((output.stride.0 == 1), 0)
assert((output.min.0 == 0), 0)
assert(((output.stride.1 % 64) == 0), 0)
assert((output.min.1 == 0), 0)
produce output {
  let t89.s = ((((output.extent.0 + 63)/64)*64) + (select((64 < output.extent.0), 2, -2) + (((output.extent.0 + -1)/64)*64)))
  for<Hexagon> (output.s0.__outermost, 0, 1) {
    for (output.s0.y.y, 0, ((output.extent.1 + 3)/4)) {
      prefetch(input, ((((input.stride.1/64)*((output.s0.y.y*4) + 6))*64) + -2), (t89.s + 66), 1, 8, input.stride.1)
      for (output.s0.y.yi, 0, 4) {
        allocate rows[int16 * 384 * 1]
        let t95 = ((output.stride.1/64)*((output.s0.y.y*4) + output.s0.y.yi))
        for (output.s0.x.x, 0, ((output.extent.0 + 63)/64)) {
          let rows.s0.x.min_3 = (select((0 < output.s0.x.x), 2, -2) + (output.s0.x.x*64))
          produce rows {
            let t102.s = ((input.stride.1/64)*(((output.s0.y.y*4) + output.s0.y.yi) + 2))
            let t98.s = ((input.stride.1/64)*(((output.s0.y.y*4) + output.s0.y.yi) + 1))
            let t100.s = ((input.stride.1/64)*(((output.s0.y.y*4) + output.s0.y.yi) + -1))
            let t101.s = ((input.stride.1/64)*(((output.s0.y.y*4) + output.s0.y.yi) + -2))
            let t99.s = ((input.stride.1/64)*((output.s0.y.y*4) + output.s0.y.yi))
            for (rows.s0.x.x, 0, (((129 - rows.s0.x.min_3)/64) + output.s0.x.x)) {
              rows[(ramp(((rows.s0.x.x*64) + rows.s0.x.min_3), 1, 64) % x64(384))] = (((int16x64(input[ramp(((t98.s*64) + ((rows.s0.x.x*64) + rows.s0.x.min_3)), 1, 64)])*x64((int16)4)) + ((int16x64(input[ramp(((t99.s*64) + ((rows.s0.x.x*64) + rows.s0.x.min_3)), 1, 64)])*x64((int16)6)) + ((int16x64(input[ramp(((t100.s*64) + ((rows.s0.x.x*64) + rows.s0.x.min_3)), 1, 64)])*x64((int16)4)) + int16x64(input[ramp(((t101.s*64) + ((rows.s0.x.x*64) + rows.s0.x.min_3)), 1, 64)])))) + int16x64(input[ramp(((t102.s*64) + ((rows.s0.x.x*64) + rows.s0.x.min_3)), 1, 64)]))
            }
          }
          consume rows {
            output[ramp(((output.s0.x.x + t95)*64), 1, 64)] = uint8x64(((rows[(ramp(((output.s0.x.x*64) + 2), 1, 64) % x64(384))] + ((rows[(ramp(((output.s0.x.x*64) + 1), 1, 64) % x64(384))]*x64((int16)4)) + ((rows[ramp(((output.s0.x.x % 6)*64), 1, 64)]*x64((int16)6)) + (rows[(ramp(((output.s0.x.x*64) + 382), 1, 64) % x64(384))] + (rows[(ramp(((output.s0.x.x*64) + 383), 1, 64) % x64(384))]*x64((int16)4))))))/x64((int16)256)))
          }
        }
        free rows
      }
    }
  }
}


Eliminating boolean vectors from Hexagon code...
Lowering after eliminating boolean vectors: assert((reinterpret(uint64, output.buffer) != (uint64)0), halide_error_buffer_argument_is_null("output"))
assert((reinterpret(uint64, input.buffer) != (uint64)0), halide_error_buffer_argument_is_null("input"))
let input = _halide_buffer_get_host(input.buffer)
let input.min.0 = _halide_buffer_get_min(input.buffer, 0)
let input.stride.0 = _halide_buffer_get_stride(input.buffer, 0)
let input.min.1 = _halide_buffer_get_min(input.buffer, 1)
let input.stride.1 = _halide_buffer_get_stride(input.buffer, 1)
let output = _halide_buffer_get_host(output.buffer)
let output.min.0 = _halide_buffer_get_min(output.buffer, 0)
let output.extent.0 = _halide_buffer_get_extent(output.buffer, 0)
let output.stride.0 = _halide_buffer_get_stride(output.buffer, 0)
let output.min.1 = _halide_buffer_get_min(output.buffer, 1)
let output.extent.1 = _halide_buffer_get_extent(output.buffer, 1)
let output.stride.1 = _halide_buffer_get_stride(output.buffer, 1)
assert((input.stride.0 == 1), 0)
assert((input.min.0 == 0), 0)
assert(((input.stride.1 % 64) == 0), 0)
assert((input.min.1 == 0), 0)
assert((output.stride.0 == 1), 0)
assert((output.min.0 == 0), 0)
assert(((output.stride.1 % 64) == 0), 0)
assert((output.min.1 == 0), 0)
produce output {
  let t89.s = ((((output.extent.0 + 63)/64)*64) + (select((64 < output.extent.0), 2, -2) + (((output.extent.0 + -1)/64)*64)))
  for<Hexagon> (output.s0.__outermost, 0, 1) {
    for (output.s0.y.y, 0, ((output.extent.1 + 3)/4)) {
      prefetch(input, ((((input.stride.1/64)*((output.s0.y.y*4) + 6))*64) + -2), (t89.s + 66), 1, 8, input.stride.1)
      for (output.s0.y.yi, 0, 4) {
        allocate rows[int16 * 384 * 1]
        let t95 = ((output.stride.1/64)*((output.s0.y.y*4) + output.s0.y.yi))
        for (output.s0.x.x, 0, ((output.extent.0 + 63)/64)) {
          let rows.s0.x.min_3 = (select((0 < output.s0.x.x), 2, -2) + (output.s0.x.x*64))
          produce rows {
            let t102.s = ((input.stride.1/64)*(((output.s0.y.y*4) + output.s0.y.yi) + 2))
            let t98.s = ((input.stride.1/64)*(((output.s0.y.y*4) + output.s0.y.yi) + 1))
            let t100.s = ((input.stride.1/64)*(((output.s0.y.y*4) + output.s0.y.yi) + -1))
            let t101.s = ((input.stride.1/64)*(((output.s0.y.y*4) + output.s0.y.yi) + -2))
            let t99.s = ((input.stride.1/64)*((output.s0.y.y*4) + output.s0.y.yi))
            for (rows.s0.x.x, 0, (((129 - rows.s0.x.min_3)/64) + output.s0.x.x)) {
              rows[(ramp(((rows.s0.x.x*64) + rows.s0.x.min_3), 1, 64) % x64(384))] = (((int16x64(input[ramp(((t98.s*64) + ((rows.s0.x.x*64) + rows.s0.x.min_3)), 1, 64)])*x64((int16)4)) + ((int16x64(input[ramp(((t99.s*64) + ((rows.s0.x.x*64) + rows.s0.x.min_3)), 1, 64)])*x64((int16)6)) + ((int16x64(input[ramp(((t100.s*64) + ((rows.s0.x.x*64) + rows.s0.x.min_3)), 1, 64)])*x64((int16)4)) + int16x64(input[ramp(((t101.s*64) + ((rows.s0.x.x*64) + rows.s0.x.min_3)), 1, 64)])))) + int16x64(input[ramp(((t102.s*64) + ((rows.s0.x.x*64) + rows.s0.x.min_3)), 1, 64)]))
            }
          }
          consume rows {
            output[ramp(((output.s0.x.x + t95)*64), 1, 64)] = uint8x64(((rows[(ramp(((output.s0.x.x*64) + 2), 1, 64) % x64(384))] + ((rows[(ramp(((output.s0.x.x*64) + 1), 1, 64) % x64(384))]*x64((int16)4)) + ((rows[ramp(((output.s0.x.x % 6)*64), 1, 64)]*x64((int16)6)) + (rows[(ramp(((output.s0.x.x*64) + 382), 1, 64) % x64(384))] + (rows[(ramp(((output.s0.x.x*64) + 383), 1, 64) % x64(384))]*x64((int16)4))))))/x64((int16)256)))
          }
        }
        free rows
      }
    }
  }
}


Lowering after fixing hoist shuffles: assert((reinterpret(uint64, output.buffer) != (uint64)0), halide_error_buffer_argument_is_null("output"))
assert((reinterpret(uint64, input.buffer) != (uint64)0), halide_error_buffer_argument_is_null("input"))
let input = _halide_buffer_get_host(input.buffer)
let input.min.0 = _halide_buffer_get_min(input.buffer, 0)
let input.stride.0 = _halide_buffer_get_stride(input.buffer, 0)
let input.min.1 = _halide_buffer_get_min(input.buffer, 1)
let input.stride.1 = _halide_buffer_get_stride(input.buffer, 1)
let output = _halide_buffer_get_host(output.buffer)
let output.min.0 = _halide_buffer_get_min(output.buffer, 0)
let output.extent.0 = _halide_buffer_get_extent(output.buffer, 0)
let output.stride.0 = _halide_buffer_get_stride(output.buffer, 0)
let output.min.1 = _halide_buffer_get_min(output.buffer, 1)
let output.extent.1 = _halide_buffer_get_extent(output.buffer, 1)
let output.stride.1 = _halide_buffer_get_stride(output.buffer, 1)
assert((input.stride.0 == 1), 0)
assert((input.min.0 == 0), 0)
assert(((input.stride.1 % 64) == 0), 0)
assert((input.min.1 == 0), 0)
assert((output.stride.0 == 1), 0)
assert((output.min.0 == 0), 0)
assert(((output.stride.1 % 64) == 0), 0)
assert((output.min.1 == 0), 0)
produce output {
  let t89.s = ((((output.extent.0 + 63)/64)*64) + (select((64 < output.extent.0), 2, -2) + (((output.extent.0 + -1)/64)*64)))
  for<Hexagon> (output.s0.__outermost, 0, 1) {
    for (output.s0.y.y, 0, ((output.extent.1 + 3)/4)) {
      prefetch(input, ((((input.stride.1/64)*((output.s0.y.y*4) + 6))*64) + -2), (t89.s + 66), 1, 8, input.stride.1)
      for (output.s0.y.yi, 0, 4) {
        allocate rows[int16 * 384 * 1]
        let t95 = ((output.stride.1/64)*((output.s0.y.y*4) + output.s0.y.yi))
        for (output.s0.x.x, 0, ((output.extent.0 + 63)/64)) {
          let rows.s0.x.min_3 = (select((0 < output.s0.x.x), 2, -2) + (output.s0.x.x*64))
          produce rows {
            let t102.s = ((input.stride.1/64)*(((output.s0.y.y*4) + output.s0.y.yi) + 2))
            let t98.s = ((input.stride.1/64)*(((output.s0.y.y*4) + output.s0.y.yi) + 1))
            let t100.s = ((input.stride.1/64)*(((output.s0.y.y*4) + output.s0.y.yi) + -1))
            let t101.s = ((input.stride.1/64)*(((output.s0.y.y*4) + output.s0.y.yi) + -2))
            let t99.s = ((input.stride.1/64)*((output.s0.y.y*4) + output.s0.y.yi))
            for (rows.s0.x.x, 0, (((129 - rows.s0.x.min_3)/64) + output.s0.x.x)) {
              rows[(ramp(((rows.s0.x.x*64) + rows.s0.x.min_3), 1, 64) % x64(384))] = (((int16x64(input[ramp(((t98.s*64) + ((rows.s0.x.x*64) + rows.s0.x.min_3)), 1, 64)])*x64((int16)4)) + ((int16x64(input[ramp(((t99.s*64) + ((rows.s0.x.x*64) + rows.s0.x.min_3)), 1, 64)])*x64((int16)6)) + ((int16x64(input[ramp(((t100.s*64) + ((rows.s0.x.x*64) + rows.s0.x.min_3)), 1, 64)])*x64((int16)4)) + int16x64(input[ramp(((t101.s*64) + ((rows.s0.x.x*64) + rows.s0.x.min_3)), 1, 64)])))) + int16x64(input[ramp(((t102.s*64) + ((rows.s0.x.x*64) + rows.s0.x.min_3)), 1, 64)]))
            }
          }
          consume rows {
            output[ramp(((output.s0.x.x + t95)*64), 1, 64)] = uint8x64(((rows[(ramp(((output.s0.x.x*64) + 2), 1, 64) % x64(384))] + ((rows[(ramp(((output.s0.x.x*64) + 1), 1, 64) % x64(384))]*x64((int16)4)) + ((rows[ramp(((output.s0.x.x % 6)*64), 1, 64)]*x64((int16)6)) + (rows[(ramp(((output.s0.x.x*64) + 382), 1, 64) % x64(384))] + (rows[(ramp(((output.s0.x.x*64) + 383), 1, 64) % x64(384))]*x64((int16)4))))))/x64((int16)256)))
          }
        }
        free rows
      }
    }
  }
}


Optimizing Hexagon instructions...
Adding calls to qurt_hvx_lock, if necessary...
Hexagon function body:
let hvx_lock_result = halide_qurt_hvx_lock(64)
assert((hvx_lock_result == 0), hvx_lock_result)
register_destructor("halide_qurt_hvx_unlock_as_destructor", reinterpret((void *), (uint64)1))
assert((reinterpret(uint64, output.buffer) != (uint64)0), halide_error_buffer_argument_is_null("output"))
assert((reinterpret(uint64, input.buffer) != (uint64)0), halide_error_buffer_argument_is_null("input"))
let input = _halide_buffer_get_host(input.buffer)
let input.min.0 = _halide_buffer_get_min(input.buffer, 0)
let input.stride.0 = _halide_buffer_get_stride(input.buffer, 0)
let input.min.1 = _halide_buffer_get_min(input.buffer, 1)
let input.stride.1 = _halide_buffer_get_stride(input.buffer, 1)
let output = _halide_buffer_get_host(output.buffer)
let output.min.0 = _halide_buffer_get_min(output.buffer, 0)
let output.extent.0 = _halide_buffer_get_extent(output.buffer, 0)
let output.stride.0 = _halide_buffer_get_stride(output.buffer, 0)
let output.min.1 = _halide_buffer_get_min(output.buffer, 1)
let output.extent.1 = _halide_buffer_get_extent(output.buffer, 1)
let output.stride.1 = _halide_buffer_get_stride(output.buffer, 1)
assert((input.stride.0 == 1), 0)
assert((input.min.0 == 0), 0)
assert(((input.stride.1 % 64) == 0), 0)
assert((input.min.1 == 0), 0)
assert((output.stride.0 == 1), 0)
assert((output.min.0 == 0), 0)
assert(((output.stride.1 % 64) == 0), 0)
assert((output.min.1 == 0), 0)
produce output {
  let t89.s = ((((output.extent.0 + 63)/64)*64) + (select((64 < output.extent.0), 2, -2) + (((output.extent.0 + -1)/64)*64)))
  for<Hexagon> (output.s0.__outermost, 0, 1) {
    for (output.s0.y.y, 0, ((output.extent.1 + 3)/4)) {
      prefetch(input, ((((input.stride.1/64)*((output.s0.y.y*4) + 6))*64) + -2), (t89.s + 66), 1, 8, input.stride.1)
      for (output.s0.y.yi, 0, 4) {
        allocate rows[int16 * 384 * 1]
        let t95 = ((output.stride.1/64)*((output.s0.y.y*4) + output.s0.y.yi))
        for (output.s0.x.x, 0, ((output.extent.0 + 63)/64)) {
          let rows.s0.x.min_3 = (select((0 < output.s0.x.x), 2, -2) + (output.s0.x.x*64))
          produce rows {
            let t102.s = ((input.stride.1/64)*(((output.s0.y.y*4) + output.s0.y.yi) + 2))
            let t98.s = ((input.stride.1/64)*(((output.s0.y.y*4) + output.s0.y.yi) + 1))
            let t100.s = ((input.stride.1/64)*(((output.s0.y.y*4) + output.s0.y.yi) + -1))
            let t101.s = ((input.stride.1/64)*(((output.s0.y.y*4) + output.s0.y.yi) + -2))
            let t99.s = ((input.stride.1/64)*((output.s0.y.y*4) + output.s0.y.yi))
            for (rows.s0.x.x, 0, (((129 - rows.s0.x.min_3)/64) + output.s0.x.x)) {
              rows[(ramp(((rows.s0.x.x*64) + rows.s0.x.min_3), 1, 64) % x64(384))] = halide.hexagon.interleave.vh(halide.hexagon.acc_add_2mpy.vh.vub.vub.b.b(halide.hexagon.acc_add_2mpy.vh.vub.vub.b.b(halide.hexagon.zxt.vub(input[ramp(((t102.s*64) + ((rows.s0.x.x*64) + rows.s0.x.min_3)), 1, 64)]), input[ramp(((t98.s*64) + ((rows.s0.x.x*64) + rows.s0.x.min_3)), 1, 64)], input[ramp(((t99.s*64) + ((rows.s0.x.x*64) + rows.s0.x.min_3)), 1, 64)], (int8)4, (int8)6), input[ramp(((t100.s*64) + ((rows.s0.x.x*64) + rows.s0.x.min_3)), 1, 64)], input[ramp(((t101.s*64) + ((rows.s0.x.x*64) + rows.s0.x.min_3)), 1, 64)], (int8)4, (int8)1))
            }
          }
          consume rows {
            output[ramp(((output.s0.x.x + t95)*64), 1, 64)] = 

            halide.hexagon.packhi.vh(
              (
                halide.hexagon.add_mul.vh.vh.b(halide.hexagon.add_mul.vh.vh.b(halide.hexagon.add_mul.vh.vh.b(rows[(ramp(((output.s0.x.x*64) + 382), 1, 64) % x64(384))], rows[(ramp(((output.s0.x.x*64) + 383), 1, 64) % x64(384))], (int8)4), rows[ramp(((output.s0.x.x % 6)*64), 1, 64)], (int8)6), rows[(ramp(((output.s0.x.x*64) + 1), 1, 64) % x64(384))], (int8)4)
                + 
                rows[(ramp(((output.s0.x.x*64) + 2), 1, 64) % x64(384))]))
          }
        }
        free rows
      }
    }
  }
}

0x1e3ac20
Done generating llvm bitcode
Adding module pass: Target Transform Information
Adding function pass: Target Transform Information
Adding function pass: Instrument function entry/exit with calls to e.g. mcount() (pre inlining)
Adding function pass: Type-Based Alias Analysis
Adding function pass: Scoped NoAlias Alias Analysis
Adding function pass: Simplify the CFG
Adding function pass: SROA
Adding function pass: Jump Threading
Adding function pass: Selection Conversion
Adding function pass: Simplify the CFG
Adding function pass: Early CSE
Adding function pass: Lower 'expect' Intrinsics
Adding module pass: Unnamed pass: implement Pass::getPassName()
Adding module pass: Read trampoline markers from file
Adding module pass: Force set function attributes
Adding module pass: Remove QCLTO linker options
Adding module pass: Type-Based Alias Analysis
Adding module pass: Scoped NoAlias Alias Analysis
Adding module pass: Infer set function attributes
Adding module pass: Call-site splitting
Adding module pass: Interprocedural Sparse Conditional Constant Propagation
Adding module pass: Called Value Propagation
Adding module pass: Global Variable Optimizer
Adding module pass: Localize Function Globals
Adding module pass: Promote Memory to Register
Adding module pass: Dead Argument Elimination
Adding module pass: Combine redundant instructions
Adding module pass: Simplify the CFG
Adding module pass: IR Tail Duplication
Adding module pass: Specialize Indirect Function Calls
Adding module pass: Simplify the CFG
Adding module pass: Early CSE
Adding module pass: Globals Alias Analysis
Adding module pass: Remove unused exception handling info
Adding module pass: Function Integration/Inlining
Adding module pass: Deduce function attributes
Adding module pass: Promote 'by reference' arguments to scalars
Adding module pass: Simplify the CFG
Adding module pass: Combine redundant instructions
Adding module pass: Transpose switches
Adding module pass: Simplify the CFG
Adding module pass: Combine redundant instructions
Adding module pass: Aggressive Dead Code Elimination
Adding module pass: Simplify the CFG
Adding module pass: Combine redundant instructions
Adding module pass: SROA
Adding module pass: Early CSE w/ MemorySSA
Adding module pass: Speculatively execute instructions if target has divergent branches
Adding module pass: Jump Threading
Adding module pass: Value Propagation
Adding module pass: Simplify the CFG
Adding module pass: Combine pattern based expressions
Adding module pass: Combine redundant instructions
Adding module pass: Conditionally eliminate dead library calls
Adding module pass: PGOMemOPSize
Adding module pass: Tail Call Elimination
Adding module pass: Simplify the CFG
Adding module pass: Reassociate expressions
Adding module pass: Rotate Loops
Adding module pass: Precomputing Loop Expressions
Adding module pass: Loop Invariant Code Motion
Adding module pass: Unswitch loops
Adding module pass: Simplify the CFG
Adding module pass: Combine redundant instructions
Adding module pass: type promotion
Adding module pass: Aggressive Dead Code Elimination
Adding module pass: aggressive type promotion
Adding module pass: Induction Variable Simplification
Adding module pass: Simple Loop Fusion
Adding module pass: Post Increment
Adding module pass: Aggressive Dead Code Elimination
Adding module pass: Promote Memory to Register
Adding module pass: Simplify the CFG
Adding module pass: Recognize loop idioms
Adding module pass: Recognize Hexagon-specific loop idioms
Adding module pass: Delete dead loops
Adding module pass: Global Value Numbering
Adding module pass: Simplify the CFG
Adding module pass: Unroll loops
Adding module pass: Loop Scalar Replacement
Adding module pass: Hexagon-specific loop carried reuse for HVX vectors
Adding module pass: MergedLoadStoreMotion
Adding module pass: Global Value Numbering
Adding module pass: Loop Invariant Code Motion
Adding module pass: MemCpy Optimization
Adding module pass: Sparse Conditional Constant Propagation
Adding module pass: Bit-Tracking Dead Code Elimination
Adding module pass: Combine redundant instructions
Adding module pass: Jump Threading
Adding module pass: Value Propagation
Adding module pass: Dead Store Elimination
Adding module pass: Loop Invariant Code Motion
Adding module pass: Aggressive Dead Code Elimination
Adding module pass: Simplify the CFG
Adding module pass: Combine redundant instructions
Adding module pass: A No-Op Barrier Pass
Adding module pass: Eliminate Available Externally Globals
Adding module pass: Deduce function attributes in RPO
Adding module pass: Global Variable Optimizer
Adding module pass: Dead Global Elimination
Adding module pass: Globals Alias Analysis
Adding module pass: Float to int
Adding module pass: Rotate Loops
Adding module pass: Loop Distribution
Adding module pass: Loop Vectorization
Adding module pass: Loop Load Elimination
Adding module pass: Combine redundant instructions
Adding module pass: Simplify the CFG
Adding module pass: SLP Vectorizer
Adding module pass: Combine redundant instructions
Adding module pass: Unroll loops
Adding module pass: Combine redundant instructions
Adding module pass: Loop Invariant Code Motion
Adding module pass: Alignment from assumptions
Adding module pass: Strip Unused Function Prototypes
Adding module pass: Dead Global Elimination
Adding module pass: Merge Duplicate Global Constants
Adding module pass: Read trampoline markers from file
Adding module pass: Loop Sink
Adding module pass: Remove redundant instructions
Adding module pass: Hoist/decompose integer division and remainder
Adding module pass: Simplify the CFG
; ModuleID = 'gaussian5x5_hvx64'
source_filename = "/local/mnt/workspace/bots/hexbotmaster_aus-05/halide-22/src/halide/src/runtime/qurt_allocator.cpp"
target datalayout = "e-m:e-p:32:32:32-a:0-n16:32-i64:64:64-i32:32:32-i16:16:16-i1:8:8-f32:32:32-f64:64:64-v32:32:32-v64:64:64-v512:512:512-v1024:1024:1024-v2048:2048:2048"
target triple = "hexagon-unknown--elf"

%struct.halide_mutex = type { [1 x i32] }
%struct.halide_filter_argument_t = type { i8*, i32, i32, %struct.halide_type_t, %struct.halide_scalar_value_t*, %struct.halide_scalar_value_t*, %struct.halide_scalar_value_t* }
%struct.halide_type_t = type { i8, i8, i16 }
%struct.halide_scalar_value_t = type { %union.anon }
%union.anon = type { i64 }
%struct.halide_filter_metadata_t = type { i32, i32, %struct.halide_filter_argument_t*, i8*, i8* }
%struct.halide_thread = type opaque
%struct.halide_buffer_t = type { i64, %struct.halide_device_interface_t*, i8*, i64, i64, i64, i64, %struct.halide_type_t, i32, %struct.halide_dimension_t*, i8* }
%struct.halide_device_interface_t = type { i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, void (i8*, %struct.halide_device_interface_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, i32, i32, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, i64, %struct.halide_device_interface_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, i32*, i32*)*, %struct.halide_device_interface_impl_t* }
%struct.halide_device_interface_impl_t = type { void ()*, void ()*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, i32, i32, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, i64)*, i32 (i8*, %struct.halide_buffer_t*)* }
%struct.halide_dimension_t = type { i32, i32, i32, i32 }
%"struct.Halide::Runtime::Internal::device_copy" = type { i64, i64, i64, [16 x i64], [16 x i64], [16 x i64], i64 }
%struct.buffer_t = type { i64, i8*, [4 x i32], [4 x i32], [4 x i32], i32, i8, i8, [6 x i8] }
%"struct.Halide::Runtime::Internal::old_dev_wrapper" = type { i64, %struct.halide_device_interface_t* }
%"struct.Halide::Runtime::Internal::CpuFeatures" = type { [1 x i64], [1 x i64] }

@malloc_tracing = linkonce local_unnamed_addr global i32 0, align 4
@_ZN6Halide7Runtime8Internal9mem_traceE = linkonce local_unnamed_addr global i32 0, align 4
@_ZN6Halide7Runtime8Internal6my_ptrE = linkonce local_unnamed_addr global [1000 x i8*] zeroinitializer, align 4
@_ZN6Halide7Runtime8Internal8my_sizesE = linkonce local_unnamed_addr global [1000 x i32] zeroinitializer, align 4
@.str = private unnamed_addr constant [36 x i8] c"Malloc returned null in Qurt: size(\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c")\0A\00", align 1
@.str.2 = private unnamed_addr constant [18 x i8] c"total_allocation(\00", align 1
@.str.3 = private unnamed_addr constant [14 x i8] c"Malloc: size(\00", align 1
@.str.4 = private unnamed_addr constant [21 x i8] c"), total_allocation(\00", align 1
@.str.5 = private unnamed_addr constant [7 x i8] c") ptr=\00", align 1
@.str.6 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.7 = private unnamed_addr constant [12 x i8] c"Free: size(\00", align 1
@_ZN6Halide7Runtime8Internal11buf_is_usedE = linkonce global [10 x i32] zeroinitializer, align 4
@_ZN6Halide7Runtime8Internal7mem_bufE = linkonce local_unnamed_addr global [10 x i8*] zeroinitializer, align 4
@_ZN6Halide7Runtime8Internal13custom_mallocE = linkonce local_unnamed_addr global i8* (i8*, i32)* @halide_default_malloc, align 4
@_ZN6Halide7Runtime8Internal11custom_freeE = linkonce local_unnamed_addr global void (i8*, i8*)* @halide_default_free, align 4
@.str.8 = private unnamed_addr constant [45 x i8] c"custom allocators not supported on Hexagon.\0A\00", align 1
@.str.9 = private unnamed_addr constant [17 x i8] c"Buffer(?), size(\00", align 1
@llvm.global_dtors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_ZN6Halide7Runtime8Internal24halide_allocator_cleanupEv, i8* null }]
@_ZN6Halide7Runtime8Internal14custom_do_taskE = linkonce local_unnamed_addr global i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* @halide_default_do_task, align 4
@_ZN6Halide7Runtime8Internal17custom_do_par_forE = linkonce local_unnamed_addr global i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* @halide_default_do_par_for, align 4
@.str.10 = private unnamed_addr constant [54 x i8] c"halide_spawn_thread not implemented on this platform.\00", align 1
@.str.1.11 = private unnamed_addr constant [38 x i8] c"halide_set_num_threads: must be >= 0.\00", align 1
@_ZN6Halide7Runtime8Internal17halide_gpu_deviceE = linkonce local_unnamed_addr global i32 0, align 4
@_ZN6Halide7Runtime8Internal22halide_gpu_device_lockE = linkonce global i32 0, align 4
@_ZN6Halide7Runtime8Internal29halide_gpu_device_initializedE = linkonce local_unnamed_addr global i8 0, align 1
@.str.12 = private unnamed_addr constant [14 x i8] c"HL_GPU_DEVICE\00", align 1
@.str.13 = private unnamed_addr constant [5 x i8] c"-nan\00", align 1
@.str.1.14 = private unnamed_addr constant [4 x i8] c"nan\00", align 1
@.str.2.15 = private unnamed_addr constant [5 x i8] c"-inf\00", align 1
@.str.3.16 = private unnamed_addr constant [4 x i8] c"inf\00", align 1
@.str.4.17 = private unnamed_addr constant [14 x i8] c"-0.000000e+00\00", align 1
@.str.5.18 = private unnamed_addr constant [13 x i8] c"0.000000e+00\00", align 1
@.str.6.19 = private unnamed_addr constant [10 x i8] c"-0.000000\00", align 1
@.str.7.20 = private unnamed_addr constant [9 x i8] c"0.000000\00", align 1
@.str.8.21 = private unnamed_addr constant [2 x i8] c"-\00", align 1
@.str.10.23 = private unnamed_addr constant [3 x i8] c"e+\00", align 1
@.str.11 = private unnamed_addr constant [3 x i8] c"e-\00", align 1
@.str.12.24 = private unnamed_addr constant [17 x i8] c"0123456789abcdef\00", align 1
@.str.17 = private unnamed_addr constant [14 x i8] c"bad_type_code\00", align 1
@.str.16 = private unnamed_addr constant [7 x i8] c"handle\00", align 1
@.str.15 = private unnamed_addr constant [6 x i8] c"float\00", align 1
@.str.14 = private unnamed_addr constant [5 x i8] c"uint\00", align 1
@.str.13.25 = private unnamed_addr constant [4 x i8] c"int\00", align 1
@.str.18 = private unnamed_addr constant [2 x i8] c"x\00", align 1
@.str.19 = private unnamed_addr constant [5 x i8] c"NULL\00", align 1
@.str.20 = private unnamed_addr constant [8 x i8] c"buffer(\00", align 1
@.str.22 = private unnamed_addr constant [4 x i8] c", {\00", align 1
@.str.23 = private unnamed_addr constant [2 x i8] c"}\00", align 1
@_ZN6Halide7Runtime8Internal17device_copy_mutexE = linkonce global %struct.halide_mutex zeroinitializer, align 4
@.str.9.26 = private unnamed_addr constant [20 x i8] c"halide_copy_to_host\00", align 1
@.str.10.27 = private unnamed_addr constant [22 x i8] c"halide_copy_to_device\00", align 1
@.str.12.28 = private unnamed_addr constant [61 x i8] c"halide_copy_to_device does not support switching interfaces\0A\00", align 1
@.str.18.29 = private unnamed_addr constant [21 x i8] c"halide_device_malloc\00", align 1
@.str.20.30 = private unnamed_addr constant [59 x i8] c"halide_device_malloc doesn't support switching interfaces\0A\00", align 1
@.str.17.31 = private unnamed_addr constant [19 x i8] c"halide_device_sync\00", align 1
@.str.21.32 = private unnamed_addr constant [19 x i8] c"halide_device_free\00", align 1
@.str.22.33 = private unnamed_addr constant [137 x i8] c"/local/mnt/workspace/bots/hexbotmaster_aus-05/halide-22/src/halide/src/runtime/device_interface.cpp:247 Assert failed: buf->device == 0\0A\00", align 1
@.str.23.34 = private unnamed_addr constant [30 x i8] c"halide_device_and_host_malloc\00", align 1
@.str.25 = private unnamed_addr constant [68 x i8] c"halide_device_and_host_malloc doesn't support switching interfaces\0A\00", align 1
@.str.26 = private unnamed_addr constant [42 x i8] c"allocating host and device memory failed\0A\00", align 1
@.str.27 = private unnamed_addr constant [28 x i8] c"halide_device_and_host_free\00", align 1
@.str.28 = private unnamed_addr constant [137 x i8] c"/local/mnt/workspace/bots/hexbotmaster_aus-05/halide-22/src/halide/src/runtime/device_interface.cpp:317 Assert failed: buf->device == 0\0A\00", align 1
@.str.29 = private unnamed_addr constant [38 x i8] c"halide_default_device_and_host_malloc\00", align 1
@.str.30 = private unnamed_addr constant [36 x i8] c"halide_default_device_and_host_free\00", align 1
@.str.31 = private unnamed_addr constant [26 x i8] c"halide_device_wrap_native\00", align 1
@.str.32 = private unnamed_addr constant [64 x i8] c"halide_device_wrap_native doesn't support switching interfaces\0A\00", align 1
@.str.33 = private unnamed_addr constant [28 x i8] c"halide_device_detach_native\00", align 1
@.str.34 = private unnamed_addr constant [137 x i8] c"/local/mnt/workspace/bots/hexbotmaster_aus-05/halide-22/src/halide/src/runtime/device_interface.cpp:404 Assert failed: buf->device == 0\0A\00", align 1
@.str.35 = private unnamed_addr constant [34 x i8] c"halide_default_device_wrap_native\00", align 1
@.str.36 = private unnamed_addr constant [36 x i8] c"halide_default_device_detach_native\00", align 1
@.str.42 = private unnamed_addr constant [64 x i8] c"halide_buffer_copy does not support switching device interfaces\00", align 1
@.str.58 = private unnamed_addr constant [44 x i8] c"device_interface does not support cropping\0A\00", align 1
@.str.59 = private unnamed_addr constant [43 x i8] c"device_interface does not support slicing\0A\00", align 1
@.str.60 = private unnamed_addr constant [52 x i8] c"destination buffer already has a device allocation\0A\00", align 1
@.str.61 = private unnamed_addr constant [48 x i8] c"src and dst must have identical dimensionality\0A\00", align 1
@.str.64 = private unnamed_addr constant [52 x i8] c"dst must have exactly one fewer dimension than src\0A\00", align 1
@halide_error_mask = linkonce local_unnamed_addr global i64 0, align 8
@.str.37 = private unnamed_addr constant [41 x i8] c"Bounds inference call to external stage \00", align 1
@.str.78 = private unnamed_addr constant [7 x i8] c"<NULL>\00", align 1
@.str.1.38 = private unnamed_addr constant [27 x i8] c" returned non-zero value: \00", align 1
@.str.2.39 = private unnamed_addr constant [24 x i8] c"Call to external stage \00", align 1
@.str.3.40 = private unnamed_addr constant [18 x i8] c"Bounds given for \00", align 1
@.str.4.41 = private unnamed_addr constant [5 x i8] c" in \00", align 1
@.str.5.42 = private unnamed_addr constant [8 x i8] c" (from \00", align 1
@.str.6.43 = private unnamed_addr constant [5 x i8] c" to \00", align 1
@.str.7.44 = private unnamed_addr constant [38 x i8] c") do not cover required region (from \00", align 1
@.str.9.46 = private unnamed_addr constant [11 x i8] c" has type \00", align 1
@.str.10.47 = private unnamed_addr constant [38 x i8] c" but type of the buffer passed in is \00", align 1
@.str.11.48 = private unnamed_addr constant [31 x i8] c" requires a buffer of exactly \00", align 1
@.str.12.49 = private unnamed_addr constant [43 x i8] c" dimensions, but the buffer passed in has \00", align 1
@.str.13.50 = private unnamed_addr constant [12 x i8] c" dimensions\00", align 1
@.str.14.51 = private unnamed_addr constant [17 x i8] c" is accessed at \00", align 1
@.str.15.52 = private unnamed_addr constant [28 x i8] c", which is before the min (\00", align 1
@.str.16.53 = private unnamed_addr constant [16 x i8] c") in dimension \00", align 1
@.str.17.54 = private unnamed_addr constant [28 x i8] c", which is beyond the max (\00", align 1
@.str.18.55 = private unnamed_addr constant [29 x i8] c"Total allocation for buffer \00", align 1
@.str.19.56 = private unnamed_addr constant [5 x i8] c" is \00", align 1
@.str.20.57 = private unnamed_addr constant [37 x i8] c", which exceeds the maximum size of \00", align 1
@.str.21.58 = private unnamed_addr constant [24 x i8] c"The extents for buffer \00", align 1
@.str.22.59 = private unnamed_addr constant [12 x i8] c" dimension \00", align 1
@.str.23.60 = private unnamed_addr constant [15 x i8] c" is negative (\00", align 1
@.str.24.61 = private unnamed_addr constant [31 x i8] c"Product of extents for buffer \00", align 1
@.str.25.62 = private unnamed_addr constant [29 x i8] c"Applying the constraints on \00", align 1
@.str.26.63 = private unnamed_addr constant [42 x i8] c" to the required region made it smaller. \00", align 1
@.str.27.64 = private unnamed_addr constant [16 x i8] c"Required size: \00", align 1
@.str.28.65 = private unnamed_addr constant [3 x i8] c". \00", align 1
@.str.29.66 = private unnamed_addr constant [19 x i8] c"Constrained size: \00", align 1
@.str.30.67 = private unnamed_addr constant [2 x i8] c".\00", align 1
@.str.31.68 = private unnamed_addr constant [22 x i8] c"Constraint violated: \00", align 1
@.str.32.69 = private unnamed_addr constant [3 x i8] c" (\00", align 1
@.str.33.70 = private unnamed_addr constant [6 x i8] c") == \00", align 1
@.str.34.71 = private unnamed_addr constant [11 x i8] c"Parameter \00", align 1
@.str.35.72 = private unnamed_addr constant [23 x i8] c" but must be at least \00", align 1
@.str.36.73 = private unnamed_addr constant [22 x i8] c" but must be at most \00", align 1
@.str.37.74 = private unnamed_addr constant [44 x i8] c"Out of memory (halide_malloc returned NULL)\00", align 1
@.str.38 = private unnamed_addr constant [54 x i8] c"Out of VTCM memory (halide_vtcm_malloc returned NULL)\00", align 1
@.str.39 = private unnamed_addr constant [70 x i8] c"Out of LOCKED_CACHE memory (halide_locked_cache_malloc returned NULL)\00", align 1
@.str.40 = private unnamed_addr constant [54 x i8] c"Out of GPUShared memory (halide_malloc returned NULL)\00", align 1
@.str.41 = private unnamed_addr constant [17 x i8] c"Buffer argument \00", align 1
@.str.42.75 = private unnamed_addr constant [9 x i8] c" is NULL\00", align 1
@.str.43 = private unnamed_addr constant [25 x i8] c"Failed to dump function \00", align 1
@.str.44 = private unnamed_addr constant [10 x i8] c" to file \00", align 1
@.str.45 = private unnamed_addr constant [13 x i8] c" with error \00", align 1
@.str.46 = private unnamed_addr constant [51 x i8] c"Failed to upgrade buffer_t to halide_buffer_t for \00", align 1
@.str.47 = private unnamed_addr constant [3 x i8] c": \00", align 1
@.str.48 = private unnamed_addr constant [53 x i8] c"Failed to downgrade halide_buffer_t to buffer_t for \00", align 1
@.str.49 = private unnamed_addr constant [21 x i8] c"The host pointer of \00", align 1
@.str.50 = private unnamed_addr constant [22 x i8] c" is not aligned to a \00", align 1
@.str.51 = private unnamed_addr constant [17 x i8] c" bytes boundary.\00", align 1
@.str.52 = private unnamed_addr constant [55 x i8] c" is null, but the pipeline will access it on the host.\00", align 1
@.str.53 = private unnamed_addr constant [30 x i8] c"The folded storage dimension \00", align 1
@.str.54 = private unnamed_addr constant [5 x i8] c" of \00", align 1
@.str.55 = private unnamed_addr constant [36 x i8] c" was accessed out of order by loop \00", align 1
@.str.56 = private unnamed_addr constant [23 x i8] c"Cannot fold dimension \00", align 1
@.str.57 = private unnamed_addr constant [36 x i8] c" because an extern stage accesses [\00", align 1
@.str.58.76 = private unnamed_addr constant [3 x i8] c", \00", align 1
@.str.59.77 = private unnamed_addr constant [3 x i8] c"],\00", align 1
@.str.60.78 = private unnamed_addr constant [47 x i8] c" which is outside the range currently valid: [\00", align 1
@.str.61.79 = private unnamed_addr constant [3 x i8] c"].\00", align 1
@.str.62 = private unnamed_addr constant [47 x i8] c" which wraps around the boundary of the fold, \00", align 1
@.str.63 = private unnamed_addr constant [30 x i8] c"which occurs at multiples of \00", align 1
@.str.64.80 = private unnamed_addr constant [18 x i8] c"The fold factor (\00", align 1
@.str.65 = private unnamed_addr constant [16 x i8] c") of dimension \00", align 1
@.str.66 = private unnamed_addr constant [61 x i8] c" is too small to store the required region accessed by loop \00", align 1
@.str.67 = private unnamed_addr constant [3 x i8] c").\00", align 1
@.str.68 = private unnamed_addr constant [22 x i8] c"Requirement Failed: (\00", align 1
@.str.70 = private unnamed_addr constant [59 x i8] c"A schedule specialized with specialize_fail() was chosen: \00", align 1
@.str.71 = private unnamed_addr constant [55 x i8] c"Buffer has a non-zero device but no device interface.\0A\00", align 1
@.str.72 = private unnamed_addr constant [56 x i8] c"Buffer has a non-null devie_interface but device is 0.\0A\00", align 1
@.str.73 = private unnamed_addr constant [49 x i8] c"Buffer has both host and device dirty bits set.\0A\00", align 1
@.str.74 = private unnamed_addr constant [26 x i8] c"Buffer pointer passed to \00", align 1
@.str.75 = private unnamed_addr constant [11 x i8] c" is null.\0A\00", align 1
@.str.76 = private unnamed_addr constant [37 x i8] c"Integer division or modulo by zero.\0A\00", align 1
@.str.89 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.1.90 = private unnamed_addr constant [44 x i8] c"elem_size of buffer was not in [1, 2, 4, 8]\00", align 1
@.str.2.91 = private unnamed_addr constant [33 x i8] c"buffer has incorrect elem_size (\00", align 1
@.str.3.92 = private unnamed_addr constant [3 x i8] c") \00", align 1
@.str.4.93 = private unnamed_addr constant [20 x i8] c"for expected type (\00", align 1
@.str.5.94 = private unnamed_addr constant [2 x i8] c")\00", align 1
@.str.6.96 = private unnamed_addr constant [65 x i8] c"Internal error: buffer host mismatch in halide_upgrade_buffer_t.\00", align 1
@.str.7.97 = private unnamed_addr constant [37 x i8] c"buffer has more than four dimensions\00", align 1
@.str.102 = private unnamed_addr constant [34 x i8] c"HVX lock size must be 64 or 128.\0A\00", align 1
@.str.8.103 = private unnamed_addr constant [35 x i8] c"Printer buffer allocation failed.\0A\00", align 1
@.str.5.104 = private unnamed_addr constant [22 x i8] c"qurt_hvx_lock failed\0A\00", align 1
@.str.7.105 = private unnamed_addr constant [24 x i8] c"qurt_hvx_unlock failed\0A\00", align 1
@_ZN6Halide7Runtime8Internal30custom_can_use_target_featuresE = linkonce local_unnamed_addr global i32 (i32, i64*)* @halide_default_can_use_target_features, align 4
@_ZZ38halide_default_can_use_target_featuresE11initialized = internal unnamed_addr global i1 false, align 1
@_ZZ38halide_default_can_use_target_featuresE20cpu_features_storage = internal global [2 x i64] zeroinitializer, align 8
@.str.106 = private unnamed_addr constant [81 x i8] c"Internal error: wrong structure size passed to halide_can_use_target_features()\0A\00", align 1
@str = private constant [6 x i8] c"input\00", align 32
@str.110 = private constant [7 x i8] c"output\00", align 32
@0 = private constant [2 x %struct.halide_filter_argument_t] [%struct.halide_filter_argument_t { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str, i32 0, i32 0), i32 1, i32 2, %struct.halide_type_t { i8 1, i8 8, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str.110, i32 0, i32 0), i32 2, i32 2, %struct.halide_type_t { i8 1, i8 8, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null }]
@str.111 = private constant [50 x i8] c"hexagon-32-noos-hvx_64-no_asserts-no_bounds_query\00", align 64
@str.112 = private constant [18 x i8] c"gaussian5x5_hvx64\00", align 32
@gaussian5x5_hvx64_metadata_storage = private constant %struct.halide_filter_metadata_t { i32 0, i32 2, %struct.halide_filter_argument_t* getelementptr inbounds ([2 x %struct.halide_filter_argument_t], [2 x %struct.halide_filter_argument_t]* @0, i32 0, i32 0), i8* getelementptr inbounds ([50 x i8], [50 x i8]* @str.111, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @str.112, i32 0, i32 0) }
@switch.table.halide_type_to_string = private unnamed_addr constant [4 x i8*] [i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.13.25, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.14, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.15, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.16, i32 0, i32 0)], align 4

; Function Attrs: nounwind
define linkonce i8* @_ZN6Halide7Runtime8Internal9to_stringEj(i32 %a) local_unnamed_addr #0 {
entry:
  %call = tail call i8* @malloc(i32 16) #11
  %cmp49 = icmp eq i32 %a, 0
  br i1 %cmp49, label %for.body15.preheader, label %while.body

for.cond.preheader:                               ; preds = %while.body
  %div1 = lshr i32 %inc, 1
  %cmp247 = icmp eq i32 %div1, 0
  br i1 %cmp247, label %for.cond12.preheader, label %for.body.preheader

for.body.preheader:                               ; preds = %for.cond.preheader
  %arrayidx5.gep = getelementptr i8, i8* %call, i32 %i.050
  br label %for.body

while.body:                                       ; preds = %entry, %while.body
  %a.addr.051 = phi i32 [ %div, %while.body ], [ %a, %entry ]
  %arrayidx.phi = phi i8* [ %arrayidx.inc, %while.body ], [ %call, %entry ]
  %i.050 = phi i32 [ %inc, %while.body ], [ 0, %entry ]
  %div = udiv i32 %a.addr.051, 10
  %0 = mul i32 %div, -10
  %1 = add i32 %0, %a.addr.051
  %2 = trunc i32 %1 to i8
  %conv = or i8 %2, 48
  %inc = add nuw nsw i32 %i.050, 1
  store i8 %conv, i8* %arrayidx.phi, align 1, !tbaa !7
  %3 = icmp ult i32 %a.addr.051, 10
  %arrayidx.inc = getelementptr i8, i8* %arrayidx.phi, i32 1
  br i1 %3, label %for.cond.preheader, label %while.body

for.cond12.preheader:                             ; preds = %for.body, %for.cond.preheader
  %cmp1345 = icmp ult i32 %inc, 16
  br i1 %cmp1345, label %for.body15.preheader, label %for.cond.cleanup14

for.body15.preheader:                             ; preds = %for.cond12.preheader, %entry
  %j11.046.ph = phi i32 [ 0, %entry ], [ %inc, %for.cond12.preheader ]
  %scevgep = getelementptr i8, i8* %call, i32 %j11.046.ph
  %4 = add i32 %j11.046.ph, 1
  %5 = icmp ugt i32 %4, 16
  %umax = select i1 %5, i32 %4, i32 16
  %6 = sub i32 %umax, %j11.046.ph
  call void @llvm.memset.p0i8.i32(i8* align 1 %scevgep, i8 0, i32 %6, i1 false)
  br label %for.cond.cleanup14

for.body:                                         ; preds = %for.body, %for.body.preheader
  %arrayidx3.phi = phi i8* [ %arrayidx3.inc, %for.body ], [ %call, %for.body.preheader ]
  %arrayidx5.phi = phi i8* [ %arrayidx5.inc, %for.body ], [ %arrayidx5.gep, %for.body.preheader ]
  %j.048 = phi i32 [ %inc10, %for.body ], [ 0, %for.body.preheader ]
  %7 = load i8, i8* %arrayidx3.phi, align 1, !tbaa !7
  %8 = load i8, i8* %arrayidx5.phi, align 1, !tbaa !7
  store i8 %8, i8* %arrayidx3.phi, align 1, !tbaa !7
  store i8 %7, i8* %arrayidx5.phi, align 1, !tbaa !7
  %inc10 = add nuw nsw i32 %j.048, 1
  %arrayidx3.inc = getelementptr i8, i8* %arrayidx3.phi, i32 1
  %exitcond = icmp eq i32 %inc10, %div1
  %arrayidx5.inc = getelementptr i8, i8* %arrayidx5.phi, i32 -1
  br i1 %exitcond, label %for.cond12.preheader, label %for.body

for.cond.cleanup14:                               ; preds = %for.body15.preheader, %for.cond12.preheader
  ret i8* %call
}

; Function Attrs: nounwind
declare noalias i8* @malloc(i32) local_unnamed_addr #1

; Function Attrs: nounwind
define linkonce i8* @_ZN6Halide7Runtime8Internal14aligned_mallocEjj(i32 %alignment, i32 %size) local_unnamed_addr #0 {
entry:
  %add = add i32 %alignment, -1
  %sub = add i32 %add, %size
  %neg = sub i32 0, %alignment
  %and = and i32 %sub, %neg
  %add2 = add i32 %and, %alignment
  %call = tail call i8* @malloc(i32 %add2) #11
  %cmp = icmp eq i8* %call, null
  %0 = load i32, i32* @malloc_tracing, align 4
  %tobool = icmp ne i32 %0, 0
  %or.cond = and i1 %cmp, %tobool
  br i1 %or.cond, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @halide_print(i8* null, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str, i32 0, i32 0)) #11
  %call4 = tail call i8* @_ZN6Halide7Runtime8Internal9to_stringEj(i32 %add2) #12
  tail call void @halide_print(i8* null, i8* %call4) #11
  tail call void @halide_print(i8* null, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0)) #11
  tail call void @halide_print(i8* null, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i32 0, i32 0)) #11
  %1 = load i32, i32* @_ZN6Halide7Runtime8Internal9mem_traceE, align 4, !tbaa !10
  %call5 = tail call i8* @_ZN6Halide7Runtime8Internal9to_stringEj(i32 %1) #12
  tail call void @halide_print(i8* null, i8* %call5) #11
  tail call void @halide_print(i8* null, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0)) #11
  br label %cleanup27

if.end:                                           ; preds = %entry
  %2 = ptrtoint i8* %call to i32
  %add6 = add i32 %alignment, 3
  %sub8 = add i32 %add6, %2
  %and11 = and i32 %sub8, %neg
  %3 = inttoptr i32 %and11 to i8*
  %4 = inttoptr i32 %and11 to i8**
  %arrayidx = getelementptr inbounds i8*, i8** %4, i32 -1
  store i8* %call, i8** %arrayidx, align 4, !tbaa !12
  %tobool12 = icmp eq i32 %0, 0
  br i1 %tobool12, label %cleanup27, label %for.body

for.body:                                         ; preds = %if.end, %for.inc.24
  %i.051 = phi i32 [ %inc.24, %for.inc.24 ], [ 0, %if.end ]
  %arrayidx15 = getelementptr inbounds [1000 x i8*], [1000 x i8*]* @_ZN6Halide7Runtime8Internal6my_ptrE, i32 0, i32 %i.051
  %5 = load i8*, i8** %arrayidx15, align 4, !tbaa !12
  %tobool16 = icmp eq i8* %5, null
  br i1 %tobool16, label %if.then17, label %for.inc

if.then17:                                        ; preds = %for.inc.23, %for.inc.22, %for.inc.21, %for.inc.20, %for.inc.19, %for.inc.18, %for.inc.17, %for.inc.16, %for.inc.15, %for.inc.14, %for.inc.13, %for.inc.12, %for.inc.11, %for.inc.10, %for.inc.9, %for.inc.8, %for.inc.7, %for.inc.6, %for.inc.5, %for.inc.4, %for.inc.3, %for.inc.2, %for.inc.1, %for.inc, %for.body
  %i.051.lcssa = phi i32 [ %i.051, %for.body ], [ %inc, %for.inc ], [ %inc.1, %for.inc.1 ], [ %inc.2, %for.inc.2 ], [ %inc.3, %for.inc.3 ], [ %inc.4, %for.inc.4 ], [ %inc.5, %for.inc.5 ], [ %inc.6, %for.inc.6 ], [ %inc.7, %for.inc.7 ], [ %inc.8, %for.inc.8 ], [ %inc.9, %for.inc.9 ], [ %inc.10, %for.inc.10 ], [ %inc.11, %for.inc.11 ], [ %inc.12, %for.inc.12 ], [ %inc.13, %for.inc.13 ], [ %inc.14, %for.inc.14 ], [ %inc.15, %for.inc.15 ], [ %inc.16, %for.inc.16 ], [ %inc.17, %for.inc.17 ], [ %inc.18, %for.inc.18 ], [ %inc.19, %for.inc.19 ], [ %inc.20, %for.inc.20 ], [ %inc.21, %for.inc.21 ], [ %inc.22, %for.inc.22 ], [ %inc.23, %for.inc.23 ]
  %arrayidx15.lcssa = phi i8** [ %arrayidx15, %for.body ], [ %arrayidx15.1, %for.inc ], [ %arrayidx15.2, %for.inc.1 ], [ %arrayidx15.3, %for.inc.2 ], [ %arrayidx15.4, %for.inc.3 ], [ %arrayidx15.5, %for.inc.4 ], [ %arrayidx15.6, %for.inc.5 ], [ %arrayidx15.7, %for.inc.6 ], [ %arrayidx15.8, %for.inc.7 ], [ %arrayidx15.9, %for.inc.8 ], [ %arrayidx15.10, %for.inc.9 ], [ %arrayidx15.11, %for.inc.10 ], [ %arrayidx15.12, %for.inc.11 ], [ %arrayidx15.13, %for.inc.12 ], [ %arrayidx15.14, %for.inc.13 ], [ %arrayidx15.15, %for.inc.14 ], [ %arrayidx15.16, %for.inc.15 ], [ %arrayidx15.17, %for.inc.16 ], [ %arrayidx15.18, %for.inc.17 ], [ %arrayidx15.19, %for.inc.18 ], [ %arrayidx15.20, %for.inc.19 ], [ %arrayidx15.21, %for.inc.20 ], [ %arrayidx15.22, %for.inc.21 ], [ %arrayidx15.23, %for.inc.22 ], [ %arrayidx15.24, %for.inc.23 ]
  store i8* %3, i8** %arrayidx15.lcssa, align 4, !tbaa !12
  %arrayidx19 = getelementptr inbounds [1000 x i32], [1000 x i32]* @_ZN6Halide7Runtime8Internal8my_sizesE, i32 0, i32 %i.051.lcssa
  store i32 %and, i32* %arrayidx19, align 4, !tbaa !10
  br label %cleanup

for.inc:                                          ; preds = %for.body
  %inc = add nuw nsw i32 %i.051, 1
  %arrayidx15.1 = getelementptr inbounds [1000 x i8*], [1000 x i8*]* @_ZN6Halide7Runtime8Internal6my_ptrE, i32 0, i32 %inc
  %6 = load i8*, i8** %arrayidx15.1, align 4, !tbaa !12
  %tobool16.1 = icmp eq i8* %6, null
  br i1 %tobool16.1, label %if.then17, label %for.inc.1

cleanup:                                          ; preds = %for.inc.24, %if.then17
  %7 = load i32, i32* @_ZN6Halide7Runtime8Internal9mem_traceE, align 4, !tbaa !10
  %add21 = add i32 %7, %and
  store i32 %add21, i32* @_ZN6Halide7Runtime8Internal9mem_traceE, align 4, !tbaa !10
  tail call void @halide_print(i8* null, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i32 0, i32 0)) #11
  %call22 = tail call i8* @_ZN6Halide7Runtime8Internal9to_stringEj(i32 %and) #12
  tail call void @halide_print(i8* null, i8* %call22) #11
  tail call void @halide_print(i8* null, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.4, i32 0, i32 0)) #11
  %8 = load i32, i32* @_ZN6Halide7Runtime8Internal9mem_traceE, align 4, !tbaa !10
  %call23 = tail call i8* @_ZN6Halide7Runtime8Internal9to_stringEj(i32 %8) #12
  tail call void @halide_print(i8* null, i8* %call23) #11
  tail call void @halide_print(i8* null, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.5, i32 0, i32 0)) #11
  %call24 = tail call i8* @_ZN6Halide7Runtime8Internal9to_stringEj(i32 %and11) #12
  tail call void @halide_print(i8* null, i8* %call24) #11
  tail call void @halide_print(i8* null, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.6, i32 0, i32 0)) #11
  br label %cleanup27

cleanup27:                                        ; preds = %cleanup, %if.end, %if.then
  %retval.0 = phi i8* [ null, %if.then ], [ %3, %cleanup ], [ %3, %if.end ]
  ret i8* %retval.0

for.inc.1:                                        ; preds = %for.inc
  %inc.1 = add nuw nsw i32 %i.051, 2
  %arrayidx15.2 = getelementptr inbounds [1000 x i8*], [1000 x i8*]* @_ZN6Halide7Runtime8Internal6my_ptrE, i32 0, i32 %inc.1
  %9 = load i8*, i8** %arrayidx15.2, align 4, !tbaa !12
  %tobool16.2 = icmp eq i8* %9, null
  br i1 %tobool16.2, label %if.then17, label %for.inc.2

for.inc.2:                                        ; preds = %for.inc.1
  %inc.2 = add nuw nsw i32 %i.051, 3
  %arrayidx15.3 = getelementptr inbounds [1000 x i8*], [1000 x i8*]* @_ZN6Halide7Runtime8Internal6my_ptrE, i32 0, i32 %inc.2
  %10 = load i8*, i8** %arrayidx15.3, align 4, !tbaa !12
  %tobool16.3 = icmp eq i8* %10, null
  br i1 %tobool16.3, label %if.then17, label %for.inc.3

for.inc.3:                                        ; preds = %for.inc.2
  %inc.3 = add nuw nsw i32 %i.051, 4
  %arrayidx15.4 = getelementptr inbounds [1000 x i8*], [1000 x i8*]* @_ZN6Halide7Runtime8Internal6my_ptrE, i32 0, i32 %inc.3
  %11 = load i8*, i8** %arrayidx15.4, align 4, !tbaa !12
  %tobool16.4 = icmp eq i8* %11, null
  br i1 %tobool16.4, label %if.then17, label %for.inc.4

for.inc.4:                                        ; preds = %for.inc.3
  %inc.4 = add nuw nsw i32 %i.051, 5
  %arrayidx15.5 = getelementptr inbounds [1000 x i8*], [1000 x i8*]* @_ZN6Halide7Runtime8Internal6my_ptrE, i32 0, i32 %inc.4
  %12 = load i8*, i8** %arrayidx15.5, align 4, !tbaa !12
  %tobool16.5 = icmp eq i8* %12, null
  br i1 %tobool16.5, label %if.then17, label %for.inc.5

for.inc.5:                                        ; preds = %for.inc.4
  %inc.5 = add nuw nsw i32 %i.051, 6
  %arrayidx15.6 = getelementptr inbounds [1000 x i8*], [1000 x i8*]* @_ZN6Halide7Runtime8Internal6my_ptrE, i32 0, i32 %inc.5
  %13 = load i8*, i8** %arrayidx15.6, align 4, !tbaa !12
  %tobool16.6 = icmp eq i8* %13, null
  br i1 %tobool16.6, label %if.then17, label %for.inc.6

for.inc.6:                                        ; preds = %for.inc.5
  %inc.6 = add nuw nsw i32 %i.051, 7
  %arrayidx15.7 = getelementptr inbounds [1000 x i8*], [1000 x i8*]* @_ZN6Halide7Runtime8Internal6my_ptrE, i32 0, i32 %inc.6
  %14 = load i8*, i8** %arrayidx15.7, align 4, !tbaa !12
  %tobool16.7 = icmp eq i8* %14, null
  br i1 %tobool16.7, label %if.then17, label %for.inc.7

for.inc.7:                                        ; preds = %for.inc.6
  %inc.7 = add nuw nsw i32 %i.051, 8
  %arrayidx15.8 = getelementptr inbounds [1000 x i8*], [1000 x i8*]* @_ZN6Halide7Runtime8Internal6my_ptrE, i32 0, i32 %inc.7
  %15 = load i8*, i8** %arrayidx15.8, align 4, !tbaa !12
  %tobool16.8 = icmp eq i8* %15, null
  br i1 %tobool16.8, label %if.then17, label %for.inc.8

for.inc.8:                                        ; preds = %for.inc.7
  %inc.8 = add nuw nsw i32 %i.051, 9
  %arrayidx15.9 = getelementptr inbounds [1000 x i8*], [1000 x i8*]* @_ZN6Halide7Runtime8Internal6my_ptrE, i32 0, i32 %inc.8
  %16 = load i8*, i8** %arrayidx15.9, align 4, !tbaa !12
  %tobool16.9 = icmp eq i8* %16, null
  br i1 %tobool16.9, label %if.then17, label %for.inc.9

for.inc.9:                                        ; preds = %for.inc.8
  %inc.9 = add nuw nsw i32 %i.051, 10
  %arrayidx15.10 = getelementptr inbounds [1000 x i8*], [1000 x i8*]* @_ZN6Halide7Runtime8Internal6my_ptrE, i32 0, i32 %inc.9
  %17 = load i8*, i8** %arrayidx15.10, align 4, !tbaa !12
  %tobool16.10 = icmp eq i8* %17, null
  br i1 %tobool16.10, label %if.then17, label %for.inc.10

for.inc.10:                                       ; preds = %for.inc.9
  %inc.10 = add nuw nsw i32 %i.051, 11
  %arrayidx15.11 = getelementptr inbounds [1000 x i8*], [1000 x i8*]* @_ZN6Halide7Runtime8Internal6my_ptrE, i32 0, i32 %inc.10
  %18 = load i8*, i8** %arrayidx15.11, align 4, !tbaa !12
  %tobool16.11 = icmp eq i8* %18, null
  br i1 %tobool16.11, label %if.then17, label %for.inc.11

for.inc.11:                                       ; preds = %for.inc.10
  %inc.11 = add nuw nsw i32 %i.051, 12
  %arrayidx15.12 = getelementptr inbounds [1000 x i8*], [1000 x i8*]* @_ZN6Halide7Runtime8Internal6my_ptrE, i32 0, i32 %inc.11
  %19 = load i8*, i8** %arrayidx15.12, align 4, !tbaa !12
  %tobool16.12 = icmp eq i8* %19, null
  br i1 %tobool16.12, label %if.then17, label %for.inc.12

for.inc.12:                                       ; preds = %for.inc.11
  %inc.12 = add nuw nsw i32 %i.051, 13
  %arrayidx15.13 = getelementptr inbounds [1000 x i8*], [1000 x i8*]* @_ZN6Halide7Runtime8Internal6my_ptrE, i32 0, i32 %inc.12
  %20 = load i8*, i8** %arrayidx15.13, align 4, !tbaa !12
  %tobool16.13 = icmp eq i8* %20, null
  br i1 %tobool16.13, label %if.then17, label %for.inc.13

for.inc.13:                                       ; preds = %for.inc.12
  %inc.13 = add nuw nsw i32 %i.051, 14
  %arrayidx15.14 = getelementptr inbounds [1000 x i8*], [1000 x i8*]* @_ZN6Halide7Runtime8Internal6my_ptrE, i32 0, i32 %inc.13
  %21 = load i8*, i8** %arrayidx15.14, align 4, !tbaa !12
  %tobool16.14 = icmp eq i8* %21, null
  br i1 %tobool16.14, label %if.then17, label %for.inc.14

for.inc.14:                                       ; preds = %for.inc.13
  %inc.14 = add nuw nsw i32 %i.051, 15
  %arrayidx15.15 = getelementptr inbounds [1000 x i8*], [1000 x i8*]* @_ZN6Halide7Runtime8Internal6my_ptrE, i32 0, i32 %inc.14
  %22 = load i8*, i8** %arrayidx15.15, align 4, !tbaa !12
  %tobool16.15 = icmp eq i8* %22, null
  br i1 %tobool16.15, label %if.then17, label %for.inc.15

for.inc.15:                                       ; preds = %for.inc.14
  %inc.15 = add nuw nsw i32 %i.051, 16
  %arrayidx15.16 = getelementptr inbounds [1000 x i8*], [1000 x i8*]* @_ZN6Halide7Runtime8Internal6my_ptrE, i32 0, i32 %inc.15
  %23 = load i8*, i8** %arrayidx15.16, align 4, !tbaa !12
  %tobool16.16 = icmp eq i8* %23, null
  br i1 %tobool16.16, label %if.then17, label %for.inc.16

for.inc.16:                                       ; preds = %for.inc.15
  %inc.16 = add nuw nsw i32 %i.051, 17
  %arrayidx15.17 = getelementptr inbounds [1000 x i8*], [1000 x i8*]* @_ZN6Halide7Runtime8Internal6my_ptrE, i32 0, i32 %inc.16
  %24 = load i8*, i8** %arrayidx15.17, align 4, !tbaa !12
  %tobool16.17 = icmp eq i8* %24, null
  br i1 %tobool16.17, label %if.then17, label %for.inc.17

for.inc.17:                                       ; preds = %for.inc.16
  %inc.17 = add nuw nsw i32 %i.051, 18
  %arrayidx15.18 = getelementptr inbounds [1000 x i8*], [1000 x i8*]* @_ZN6Halide7Runtime8Internal6my_ptrE, i32 0, i32 %inc.17
  %25 = load i8*, i8** %arrayidx15.18, align 4, !tbaa !12
  %tobool16.18 = icmp eq i8* %25, null
  br i1 %tobool16.18, label %if.then17, label %for.inc.18

for.inc.18:                                       ; preds = %for.inc.17
  %inc.18 = add nuw nsw i32 %i.051, 19
  %arrayidx15.19 = getelementptr inbounds [1000 x i8*], [1000 x i8*]* @_ZN6Halide7Runtime8Internal6my_ptrE, i32 0, i32 %inc.18
  %26 = load i8*, i8** %arrayidx15.19, align 4, !tbaa !12
  %tobool16.19 = icmp eq i8* %26, null
  br i1 %tobool16.19, label %if.then17, label %for.inc.19

for.inc.19:                                       ; preds = %for.inc.18
  %inc.19 = add nuw nsw i32 %i.051, 20
  %arrayidx15.20 = getelementptr inbounds [1000 x i8*], [1000 x i8*]* @_ZN6Halide7Runtime8Internal6my_ptrE, i32 0, i32 %inc.19
  %27 = load i8*, i8** %arrayidx15.20, align 4, !tbaa !12
  %tobool16.20 = icmp eq i8* %27, null
  br i1 %tobool16.20, label %if.then17, label %for.inc.20

for.inc.20:                                       ; preds = %for.inc.19
  %inc.20 = add nuw nsw i32 %i.051, 21
  %arrayidx15.21 = getelementptr inbounds [1000 x i8*], [1000 x i8*]* @_ZN6Halide7Runtime8Internal6my_ptrE, i32 0, i32 %inc.20
  %28 = load i8*, i8** %arrayidx15.21, align 4, !tbaa !12
  %tobool16.21 = icmp eq i8* %28, null
  br i1 %tobool16.21, label %if.then17, label %for.inc.21

for.inc.21:                                       ; preds = %for.inc.20
  %inc.21 = add nuw nsw i32 %i.051, 22
  %arrayidx15.22 = getelementptr inbounds [1000 x i8*], [1000 x i8*]* @_ZN6Halide7Runtime8Internal6my_ptrE, i32 0, i32 %inc.21
  %29 = load i8*, i8** %arrayidx15.22, align 4, !tbaa !12
  %tobool16.22 = icmp eq i8* %29, null
  br i1 %tobool16.22, label %if.then17, label %for.inc.22

for.inc.22:                                       ; preds = %for.inc.21
  %inc.22 = add nuw nsw i32 %i.051, 23
  %arrayidx15.23 = getelementptr inbounds [1000 x i8*], [1000 x i8*]* @_ZN6Halide7Runtime8Internal6my_ptrE, i32 0, i32 %inc.22
  %30 = load i8*, i8** %arrayidx15.23, align 4, !tbaa !12
  %tobool16.23 = icmp eq i8* %30, null
  br i1 %tobool16.23, label %if.then17, label %for.inc.23

for.inc.23:                                       ; preds = %for.inc.22
  %inc.23 = add nuw nsw i32 %i.051, 24
  %arrayidx15.24 = getelementptr inbounds [1000 x i8*], [1000 x i8*]* @_ZN6Halide7Runtime8Internal6my_ptrE, i32 0, i32 %inc.23
  %31 = load i8*, i8** %arrayidx15.24, align 4, !tbaa !12
  %tobool16.24 = icmp eq i8* %31, null
  br i1 %tobool16.24, label %if.then17, label %for.inc.24

for.inc.24:                                       ; preds = %for.inc.23
  %inc.24 = add nuw nsw i32 %i.051, 25
  %cmp14.24 = icmp ult i32 %inc.24, 1000
  br i1 %cmp14.24, label %for.body, label %cleanup, !llvm.loop !14
}

declare extern_weak void @halide_print(i8*, i8*) local_unnamed_addr #2

; Function Attrs: nounwind
define linkonce void @_ZN6Halide7Runtime8Internal12aligned_freeEPv(i8* %ptr) local_unnamed_addr #0 {
entry:
  %tobool = icmp eq i8* %ptr, null
  br i1 %tobool, label %if.end12, label %if.then

if.then:                                          ; preds = %entry
  %0 = load i32, i32* @malloc_tracing, align 4, !tbaa !10
  %tobool1 = icmp eq i32 %0, 0
  br i1 %tobool1, label %if.end10, label %for.body

for.body:                                         ; preds = %if.then, %for.inc.24
  %i.024 = phi i32 [ %inc.24, %for.inc.24 ], [ 0, %if.then ]
  %arrayidx = getelementptr inbounds [1000 x i8*], [1000 x i8*]* @_ZN6Halide7Runtime8Internal6my_ptrE, i32 0, i32 %i.024
  %1 = load i8*, i8** %arrayidx, align 4, !tbaa !12
  %cmp3 = icmp eq i8* %1, %ptr
  br i1 %cmp3, label %if.then4, label %for.inc

if.then4:                                         ; preds = %for.inc.23, %for.inc.22, %for.inc.21, %for.inc.20, %for.inc.19, %for.inc.18, %for.inc.17, %for.inc.16, %for.inc.15, %for.inc.14, %for.inc.13, %for.inc.12, %for.inc.11, %for.inc.10, %for.inc.9, %for.inc.8, %for.inc.7, %for.inc.6, %for.inc.5, %for.inc.4, %for.inc.3, %for.inc.2, %for.inc.1, %for.inc, %for.body
  %i.024.lcssa = phi i32 [ %i.024, %for.body ], [ %inc, %for.inc ], [ %inc.1, %for.inc.1 ], [ %inc.2, %for.inc.2 ], [ %inc.3, %for.inc.3 ], [ %inc.4, %for.inc.4 ], [ %inc.5, %for.inc.5 ], [ %inc.6, %for.inc.6 ], [ %inc.7, %for.inc.7 ], [ %inc.8, %for.inc.8 ], [ %inc.9, %for.inc.9 ], [ %inc.10, %for.inc.10 ], [ %inc.11, %for.inc.11 ], [ %inc.12, %for.inc.12 ], [ %inc.13, %for.inc.13 ], [ %inc.14, %for.inc.14 ], [ %inc.15, %for.inc.15 ], [ %inc.16, %for.inc.16 ], [ %inc.17, %for.inc.17 ], [ %inc.18, %for.inc.18 ], [ %inc.19, %for.inc.19 ], [ %inc.20, %for.inc.20 ], [ %inc.21, %for.inc.21 ], [ %inc.22, %for.inc.22 ], [ %inc.23, %for.inc.23 ]
  %arrayidx.lcssa = phi i8** [ %arrayidx, %for.body ], [ %arrayidx.1, %for.inc ], [ %arrayidx.2, %for.inc.1 ], [ %arrayidx.3, %for.inc.2 ], [ %arrayidx.4, %for.inc.3 ], [ %arrayidx.5, %for.inc.4 ], [ %arrayidx.6, %for.inc.5 ], [ %arrayidx.7, %for.inc.6 ], [ %arrayidx.8, %for.inc.7 ], [ %arrayidx.9, %for.inc.8 ], [ %arrayidx.10, %for.inc.9 ], [ %arrayidx.11, %for.inc.10 ], [ %arrayidx.12, %for.inc.11 ], [ %arrayidx.13, %for.inc.12 ], [ %arrayidx.14, %for.inc.13 ], [ %arrayidx.15, %for.inc.14 ], [ %arrayidx.16, %for.inc.15 ], [ %arrayidx.17, %for.inc.16 ], [ %arrayidx.18, %for.inc.17 ], [ %arrayidx.19, %for.inc.18 ], [ %arrayidx.20, %for.inc.19 ], [ %arrayidx.21, %for.inc.20 ], [ %arrayidx.22, %for.inc.21 ], [ %arrayidx.23, %for.inc.22 ], [ %arrayidx.24, %for.inc.23 ]
  %arrayidx5 = getelementptr inbounds [1000 x i32], [1000 x i32]* @_ZN6Halide7Runtime8Internal8my_sizesE, i32 0, i32 %i.024.lcssa
  %2 = load i32, i32* %arrayidx5, align 4, !tbaa !10
  store i8* null, i8** %arrayidx.lcssa, align 4, !tbaa !12
  store i32 0, i32* %arrayidx5, align 4, !tbaa !10
  br label %cleanup

for.inc:                                          ; preds = %for.body
  %inc = add nuw nsw i32 %i.024, 1
  %arrayidx.1 = getelementptr inbounds [1000 x i8*], [1000 x i8*]* @_ZN6Halide7Runtime8Internal6my_ptrE, i32 0, i32 %inc
  %3 = load i8*, i8** %arrayidx.1, align 4, !tbaa !12
  %cmp3.1 = icmp eq i8* %3, %ptr
  br i1 %cmp3.1, label %if.then4, label %for.inc.1

cleanup:                                          ; preds = %for.inc.24, %if.then4
  %allocation_size.0 = phi i32 [ %2, %if.then4 ], [ 0, %for.inc.24 ]
  %4 = load i32, i32* @_ZN6Halide7Runtime8Internal9mem_traceE, align 4, !tbaa !10
  %sub = sub i32 %4, %allocation_size.0
  store i32 %sub, i32* @_ZN6Halide7Runtime8Internal9mem_traceE, align 4, !tbaa !10
  tail call void @halide_print(i8* null, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.7, i32 0, i32 0)) #11
  %call = tail call i8* @_ZN6Halide7Runtime8Internal9to_stringEj(i32 %allocation_size.0) #12
  tail call void @halide_print(i8* null, i8* %call) #11
  tail call void @halide_print(i8* null, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.4, i32 0, i32 0)) #11
  %5 = load i32, i32* @_ZN6Halide7Runtime8Internal9mem_traceE, align 4, !tbaa !10
  %call8 = tail call i8* @_ZN6Halide7Runtime8Internal9to_stringEj(i32 %5) #12
  tail call void @halide_print(i8* null, i8* %call8) #11
  tail call void @halide_print(i8* null, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.5, i32 0, i32 0)) #11
  %6 = ptrtoint i8* %ptr to i32
  %call9 = tail call i8* @_ZN6Halide7Runtime8Internal9to_stringEj(i32 %6) #12
  tail call void @halide_print(i8* null, i8* %call9) #11
  tail call void @halide_print(i8* null, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.6, i32 0, i32 0)) #11
  br label %if.end10

if.end10:                                         ; preds = %cleanup, %if.then
  %arrayidx11 = getelementptr inbounds i8, i8* %ptr, i32 -4
  %7 = bitcast i8* %arrayidx11 to i8**
  %8 = load i8*, i8** %7, align 4, !tbaa !12
  tail call void @free(i8* %8) #11
  br label %if.end12

if.end12:                                         ; preds = %if.end10, %entry
  ret void

for.inc.1:                                        ; preds = %for.inc
  %inc.1 = add nuw nsw i32 %i.024, 2
  %arrayidx.2 = getelementptr inbounds [1000 x i8*], [1000 x i8*]* @_ZN6Halide7Runtime8Internal6my_ptrE, i32 0, i32 %inc.1
  %9 = load i8*, i8** %arrayidx.2, align 4, !tbaa !12
  %cmp3.2 = icmp eq i8* %9, %ptr
  br i1 %cmp3.2, label %if.then4, label %for.inc.2

for.inc.2:                                        ; preds = %for.inc.1
  %inc.2 = add nuw nsw i32 %i.024, 3
  %arrayidx.3 = getelementptr inbounds [1000 x i8*], [1000 x i8*]* @_ZN6Halide7Runtime8Internal6my_ptrE, i32 0, i32 %inc.2
  %10 = load i8*, i8** %arrayidx.3, align 4, !tbaa !12
  %cmp3.3 = icmp eq i8* %10, %ptr
  br i1 %cmp3.3, label %if.then4, label %for.inc.3

for.inc.3:                                        ; preds = %for.inc.2
  %inc.3 = add nuw nsw i32 %i.024, 4
  %arrayidx.4 = getelementptr inbounds [1000 x i8*], [1000 x i8*]* @_ZN6Halide7Runtime8Internal6my_ptrE, i32 0, i32 %inc.3
  %11 = load i8*, i8** %arrayidx.4, align 4, !tbaa !12
  %cmp3.4 = icmp eq i8* %11, %ptr
  br i1 %cmp3.4, label %if.then4, label %for.inc.4

for.inc.4:                                        ; preds = %for.inc.3
  %inc.4 = add nuw nsw i32 %i.024, 5
  %arrayidx.5 = getelementptr inbounds [1000 x i8*], [1000 x i8*]* @_ZN6Halide7Runtime8Internal6my_ptrE, i32 0, i32 %inc.4
  %12 = load i8*, i8** %arrayidx.5, align 4, !tbaa !12
  %cmp3.5 = icmp eq i8* %12, %ptr
  br i1 %cmp3.5, label %if.then4, label %for.inc.5

for.inc.5:                                        ; preds = %for.inc.4
  %inc.5 = add nuw nsw i32 %i.024, 6
  %arrayidx.6 = getelementptr inbounds [1000 x i8*], [1000 x i8*]* @_ZN6Halide7Runtime8Internal6my_ptrE, i32 0, i32 %inc.5
  %13 = load i8*, i8** %arrayidx.6, align 4, !tbaa !12
  %cmp3.6 = icmp eq i8* %13, %ptr
  br i1 %cmp3.6, label %if.then4, label %for.inc.6

for.inc.6:                                        ; preds = %for.inc.5
  %inc.6 = add nuw nsw i32 %i.024, 7
  %arrayidx.7 = getelementptr inbounds [1000 x i8*], [1000 x i8*]* @_ZN6Halide7Runtime8Internal6my_ptrE, i32 0, i32 %inc.6
  %14 = load i8*, i8** %arrayidx.7, align 4, !tbaa !12
  %cmp3.7 = icmp eq i8* %14, %ptr
  br i1 %cmp3.7, label %if.then4, label %for.inc.7

for.inc.7:                                        ; preds = %for.inc.6
  %inc.7 = add nuw nsw i32 %i.024, 8
  %arrayidx.8 = getelementptr inbounds [1000 x i8*], [1000 x i8*]* @_ZN6Halide7Runtime8Internal6my_ptrE, i32 0, i32 %inc.7
  %15 = load i8*, i8** %arrayidx.8, align 4, !tbaa !12
  %cmp3.8 = icmp eq i8* %15, %ptr
  br i1 %cmp3.8, label %if.then4, label %for.inc.8

for.inc.8:                                        ; preds = %for.inc.7
  %inc.8 = add nuw nsw i32 %i.024, 9
  %arrayidx.9 = getelementptr inbounds [1000 x i8*], [1000 x i8*]* @_ZN6Halide7Runtime8Internal6my_ptrE, i32 0, i32 %inc.8
  %16 = load i8*, i8** %arrayidx.9, align 4, !tbaa !12
  %cmp3.9 = icmp eq i8* %16, %ptr
  br i1 %cmp3.9, label %if.then4, label %for.inc.9

for.inc.9:                                        ; preds = %for.inc.8
  %inc.9 = add nuw nsw i32 %i.024, 10
  %arrayidx.10 = getelementptr inbounds [1000 x i8*], [1000 x i8*]* @_ZN6Halide7Runtime8Internal6my_ptrE, i32 0, i32 %inc.9
  %17 = load i8*, i8** %arrayidx.10, align 4, !tbaa !12
  %cmp3.10 = icmp eq i8* %17, %ptr
  br i1 %cmp3.10, label %if.then4, label %for.inc.10

for.inc.10:                                       ; preds = %for.inc.9
  %inc.10 = add nuw nsw i32 %i.024, 11
  %arrayidx.11 = getelementptr inbounds [1000 x i8*], [1000 x i8*]* @_ZN6Halide7Runtime8Internal6my_ptrE, i32 0, i32 %inc.10
  %18 = load i8*, i8** %arrayidx.11, align 4, !tbaa !12
  %cmp3.11 = icmp eq i8* %18, %ptr
  br i1 %cmp3.11, label %if.then4, label %for.inc.11

for.inc.11:                                       ; preds = %for.inc.10
  %inc.11 = add nuw nsw i32 %i.024, 12
  %arrayidx.12 = getelementptr inbounds [1000 x i8*], [1000 x i8*]* @_ZN6Halide7Runtime8Internal6my_ptrE, i32 0, i32 %inc.11
  %19 = load i8*, i8** %arrayidx.12, align 4, !tbaa !12
  %cmp3.12 = icmp eq i8* %19, %ptr
  br i1 %cmp3.12, label %if.then4, label %for.inc.12

for.inc.12:                                       ; preds = %for.inc.11
  %inc.12 = add nuw nsw i32 %i.024, 13
  %arrayidx.13 = getelementptr inbounds [1000 x i8*], [1000 x i8*]* @_ZN6Halide7Runtime8Internal6my_ptrE, i32 0, i32 %inc.12
  %20 = load i8*, i8** %arrayidx.13, align 4, !tbaa !12
  %cmp3.13 = icmp eq i8* %20, %ptr
  br i1 %cmp3.13, label %if.then4, label %for.inc.13

for.inc.13:                                       ; preds = %for.inc.12
  %inc.13 = add nuw nsw i32 %i.024, 14
  %arrayidx.14 = getelementptr inbounds [1000 x i8*], [1000 x i8*]* @_ZN6Halide7Runtime8Internal6my_ptrE, i32 0, i32 %inc.13
  %21 = load i8*, i8** %arrayidx.14, align 4, !tbaa !12
  %cmp3.14 = icmp eq i8* %21, %ptr
  br i1 %cmp3.14, label %if.then4, label %for.inc.14

for.inc.14:                                       ; preds = %for.inc.13
  %inc.14 = add nuw nsw i32 %i.024, 15
  %arrayidx.15 = getelementptr inbounds [1000 x i8*], [1000 x i8*]* @_ZN6Halide7Runtime8Internal6my_ptrE, i32 0, i32 %inc.14
  %22 = load i8*, i8** %arrayidx.15, align 4, !tbaa !12
  %cmp3.15 = icmp eq i8* %22, %ptr
  br i1 %cmp3.15, label %if.then4, label %for.inc.15

for.inc.15:                                       ; preds = %for.inc.14
  %inc.15 = add nuw nsw i32 %i.024, 16
  %arrayidx.16 = getelementptr inbounds [1000 x i8*], [1000 x i8*]* @_ZN6Halide7Runtime8Internal6my_ptrE, i32 0, i32 %inc.15
  %23 = load i8*, i8** %arrayidx.16, align 4, !tbaa !12
  %cmp3.16 = icmp eq i8* %23, %ptr
  br i1 %cmp3.16, label %if.then4, label %for.inc.16

for.inc.16:                                       ; preds = %for.inc.15
  %inc.16 = add nuw nsw i32 %i.024, 17
  %arrayidx.17 = getelementptr inbounds [1000 x i8*], [1000 x i8*]* @_ZN6Halide7Runtime8Internal6my_ptrE, i32 0, i32 %inc.16
  %24 = load i8*, i8** %arrayidx.17, align 4, !tbaa !12
  %cmp3.17 = icmp eq i8* %24, %ptr
  br i1 %cmp3.17, label %if.then4, label %for.inc.17

for.inc.17:                                       ; preds = %for.inc.16
  %inc.17 = add nuw nsw i32 %i.024, 18
  %arrayidx.18 = getelementptr inbounds [1000 x i8*], [1000 x i8*]* @_ZN6Halide7Runtime8Internal6my_ptrE, i32 0, i32 %inc.17
  %25 = load i8*, i8** %arrayidx.18, align 4, !tbaa !12
  %cmp3.18 = icmp eq i8* %25, %ptr
  br i1 %cmp3.18, label %if.then4, label %for.inc.18

for.inc.18:                                       ; preds = %for.inc.17
  %inc.18 = add nuw nsw i32 %i.024, 19
  %arrayidx.19 = getelementptr inbounds [1000 x i8*], [1000 x i8*]* @_ZN6Halide7Runtime8Internal6my_ptrE, i32 0, i32 %inc.18
  %26 = load i8*, i8** %arrayidx.19, align 4, !tbaa !12
  %cmp3.19 = icmp eq i8* %26, %ptr
  br i1 %cmp3.19, label %if.then4, label %for.inc.19

for.inc.19:                                       ; preds = %for.inc.18
  %inc.19 = add nuw nsw i32 %i.024, 20
  %arrayidx.20 = getelementptr inbounds [1000 x i8*], [1000 x i8*]* @_ZN6Halide7Runtime8Internal6my_ptrE, i32 0, i32 %inc.19
  %27 = load i8*, i8** %arrayidx.20, align 4, !tbaa !12
  %cmp3.20 = icmp eq i8* %27, %ptr
  br i1 %cmp3.20, label %if.then4, label %for.inc.20

for.inc.20:                                       ; preds = %for.inc.19
  %inc.20 = add nuw nsw i32 %i.024, 21
  %arrayidx.21 = getelementptr inbounds [1000 x i8*], [1000 x i8*]* @_ZN6Halide7Runtime8Internal6my_ptrE, i32 0, i32 %inc.20
  %28 = load i8*, i8** %arrayidx.21, align 4, !tbaa !12
  %cmp3.21 = icmp eq i8* %28, %ptr
  br i1 %cmp3.21, label %if.then4, label %for.inc.21

for.inc.21:                                       ; preds = %for.inc.20
  %inc.21 = add nuw nsw i32 %i.024, 22
  %arrayidx.22 = getelementptr inbounds [1000 x i8*], [1000 x i8*]* @_ZN6Halide7Runtime8Internal6my_ptrE, i32 0, i32 %inc.21
  %29 = load i8*, i8** %arrayidx.22, align 4, !tbaa !12
  %cmp3.22 = icmp eq i8* %29, %ptr
  br i1 %cmp3.22, label %if.then4, label %for.inc.22

for.inc.22:                                       ; preds = %for.inc.21
  %inc.22 = add nuw nsw i32 %i.024, 23
  %arrayidx.23 = getelementptr inbounds [1000 x i8*], [1000 x i8*]* @_ZN6Halide7Runtime8Internal6my_ptrE, i32 0, i32 %inc.22
  %30 = load i8*, i8** %arrayidx.23, align 4, !tbaa !12
  %cmp3.23 = icmp eq i8* %30, %ptr
  br i1 %cmp3.23, label %if.then4, label %for.inc.23

for.inc.23:                                       ; preds = %for.inc.22
  %inc.23 = add nuw nsw i32 %i.024, 24
  %arrayidx.24 = getelementptr inbounds [1000 x i8*], [1000 x i8*]* @_ZN6Halide7Runtime8Internal6my_ptrE, i32 0, i32 %inc.23
  %31 = load i8*, i8** %arrayidx.24, align 4, !tbaa !12
  %cmp3.24 = icmp eq i8* %31, %ptr
  br i1 %cmp3.24, label %if.then4, label %for.inc.24

for.inc.24:                                       ; preds = %for.inc.23
  %inc.24 = add nuw nsw i32 %i.024, 25
  %cmp.24 = icmp ult i32 %inc.24, 1000
  br i1 %cmp.24, label %for.body, label %cleanup, !llvm.loop !16
}

; Function Attrs: nounwind
declare void @free(i8* nocapture) local_unnamed_addr #1

; Function Attrs: nounwind
define linkonce void @_ZN6Halide7Runtime8Internal24halide_allocator_cleanupEv() #0 {
entry:
  %0 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 0), align 4, !tbaa !12
  tail call void @_ZN6Halide7Runtime8Internal12aligned_freeEPv(i8* %0) #12
  %1 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 1), align 4, !tbaa !12
  tail call void @_ZN6Halide7Runtime8Internal12aligned_freeEPv(i8* %1) #12
  %2 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 2), align 4, !tbaa !12
  tail call void @_ZN6Halide7Runtime8Internal12aligned_freeEPv(i8* %2) #12
  %3 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 3), align 4, !tbaa !12
  tail call void @_ZN6Halide7Runtime8Internal12aligned_freeEPv(i8* %3) #12
  %4 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 4), align 4, !tbaa !12
  tail call void @_ZN6Halide7Runtime8Internal12aligned_freeEPv(i8* %4) #12
  %5 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 5), align 4, !tbaa !12
  tail call void @_ZN6Halide7Runtime8Internal12aligned_freeEPv(i8* %5) #12
  %6 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 6), align 4, !tbaa !12
  tail call void @_ZN6Halide7Runtime8Internal12aligned_freeEPv(i8* %6) #12
  %7 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 7), align 4, !tbaa !12
  tail call void @_ZN6Halide7Runtime8Internal12aligned_freeEPv(i8* %7) #12
  %8 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 8), align 4, !tbaa !12
  tail call void @_ZN6Halide7Runtime8Internal12aligned_freeEPv(i8* %8) #12
  %9 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 9), align 4, !tbaa !12
  tail call void @_ZN6Halide7Runtime8Internal12aligned_freeEPv(i8* %9) #12
  ret void
}

; Function Attrs: nounwind
define weak i8* @halide_default_malloc(i8* %user_context, i32 %x) #0 {
entry:
  %cmp = icmp ult i32 %x, 65537
  br i1 %cmp, label %for.body.preheader, label %if.end9

for.body.preheader:                               ; preds = %entry
  %0 = cmpxchg i32* getelementptr inbounds ([10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 0), i32 0, i32 1 seq_cst seq_cst
  %cmp2 = extractvalue { i32, i1 } %0, 1
  br i1 %cmp2, label %if.then3, label %for.inc

if.then3:                                         ; preds = %for.inc.8, %for.inc.7, %for.inc.6, %for.inc.5, %for.inc.4, %for.inc.3, %for.inc.2, %for.inc.1, %for.inc, %for.body.preheader
  %i.021.lcssa = phi i32 [ 0, %for.body.preheader ], [ 1, %for.inc ], [ 2, %for.inc.1 ], [ 3, %for.inc.2 ], [ 4, %for.inc.3 ], [ 5, %for.inc.4 ], [ 6, %for.inc.5 ], [ 7, %for.inc.6 ], [ 8, %for.inc.7 ], [ 9, %for.inc.8 ]
  %arrayidx = getelementptr inbounds [10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 %i.021.lcssa
  %1 = load i8*, i8** %arrayidx, align 4, !tbaa !12
  %cmp4 = icmp eq i8* %1, null
  br i1 %cmp4, label %if.then5, label %cleanup11

if.then5:                                         ; preds = %if.then3
  %call = tail call i8* @_ZN6Halide7Runtime8Internal14aligned_mallocEjj(i32 128, i32 65536) #12
  store i8* %call, i8** %arrayidx, align 4, !tbaa !12
  br label %cleanup11

for.inc:                                          ; preds = %for.body.preheader
  %2 = cmpxchg i32* getelementptr inbounds ([10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 1), i32 0, i32 1 seq_cst seq_cst
  %cmp2.1 = extractvalue { i32, i1 } %2, 1
  br i1 %cmp2.1, label %if.then3, label %for.inc.1

if.end9:                                          ; preds = %for.inc.8, %entry
  %call10 = tail call i8* @_ZN6Halide7Runtime8Internal14aligned_mallocEjj(i32 128, i32 %x) #12
  br label %cleanup11

cleanup11:                                        ; preds = %if.end9, %if.then5, %if.then3
  %retval.1 = phi i8* [ %call10, %if.end9 ], [ %1, %if.then3 ], [ %call, %if.then5 ]
  ret i8* %retval.1

for.inc.1:                                        ; preds = %for.inc
  %3 = cmpxchg i32* getelementptr inbounds ([10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 2), i32 0, i32 1 seq_cst seq_cst
  %cmp2.2 = extractvalue { i32, i1 } %3, 1
  br i1 %cmp2.2, label %if.then3, label %for.inc.2

for.inc.2:                                        ; preds = %for.inc.1
  %4 = cmpxchg i32* getelementptr inbounds ([10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 3), i32 0, i32 1 seq_cst seq_cst
  %cmp2.3 = extractvalue { i32, i1 } %4, 1
  br i1 %cmp2.3, label %if.then3, label %for.inc.3

for.inc.3:                                        ; preds = %for.inc.2
  %5 = cmpxchg i32* getelementptr inbounds ([10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 4), i32 0, i32 1 seq_cst seq_cst
  %cmp2.4 = extractvalue { i32, i1 } %5, 1
  br i1 %cmp2.4, label %if.then3, label %for.inc.4

for.inc.4:                                        ; preds = %for.inc.3
  %6 = cmpxchg i32* getelementptr inbounds ([10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 5), i32 0, i32 1 seq_cst seq_cst
  %cmp2.5 = extractvalue { i32, i1 } %6, 1
  br i1 %cmp2.5, label %if.then3, label %for.inc.5

for.inc.5:                                        ; preds = %for.inc.4
  %7 = cmpxchg i32* getelementptr inbounds ([10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 6), i32 0, i32 1 seq_cst seq_cst
  %cmp2.6 = extractvalue { i32, i1 } %7, 1
  br i1 %cmp2.6, label %if.then3, label %for.inc.6

for.inc.6:                                        ; preds = %for.inc.5
  %8 = cmpxchg i32* getelementptr inbounds ([10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 7), i32 0, i32 1 seq_cst seq_cst
  %cmp2.7 = extractvalue { i32, i1 } %8, 1
  br i1 %cmp2.7, label %if.then3, label %for.inc.7

for.inc.7:                                        ; preds = %for.inc.6
  %9 = cmpxchg i32* getelementptr inbounds ([10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 8), i32 0, i32 1 seq_cst seq_cst
  %cmp2.8 = extractvalue { i32, i1 } %9, 1
  br i1 %cmp2.8, label %if.then3, label %for.inc.8

for.inc.8:                                        ; preds = %for.inc.7
  %10 = cmpxchg i32* getelementptr inbounds ([10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 9), i32 0, i32 1 seq_cst seq_cst
  %cmp2.9 = extractvalue { i32, i1 } %10, 1
  br i1 %cmp2.9, label %if.then3, label %if.end9
}

; Function Attrs: nounwind
define weak void @halide_default_free(i8* %user_context, i8* %ptr) #0 {
entry:
  %0 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 0), align 4, !tbaa !12
  %cmp1 = icmp eq i8* %0, %ptr
  br i1 %cmp1, label %cleanup, label %for.inc

for.inc:                                          ; preds = %entry
  %1 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 1), align 4, !tbaa !12
  %cmp1.1 = icmp eq i8* %1, %ptr
  br i1 %cmp1.1, label %cleanup, label %for.inc.1

cleanup:                                          ; preds = %for.inc.8, %for.inc.7, %for.inc.6, %for.inc.5, %for.inc.4, %for.inc.3, %for.inc.2, %for.inc.1, %for.inc, %entry
  %i.010.lcssa = phi i32 [ 0, %entry ], [ 1, %for.inc ], [ 2, %for.inc.1 ], [ 3, %for.inc.2 ], [ 4, %for.inc.3 ], [ 5, %for.inc.4 ], [ 6, %for.inc.5 ], [ 7, %for.inc.6 ], [ 8, %for.inc.7 ], [ 9, %for.inc.8 ]
  %arrayidx2 = getelementptr inbounds [10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 %i.010.lcssa
  store i32 0, i32* %arrayidx2, align 4, !tbaa !10
  br label %return

return:                                           ; preds = %for.inc.9, %cleanup
  ret void

for.inc.1:                                        ; preds = %for.inc
  %2 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 2), align 4, !tbaa !12
  %cmp1.2 = icmp eq i8* %2, %ptr
  br i1 %cmp1.2, label %cleanup, label %for.inc.2

for.inc.2:                                        ; preds = %for.inc.1
  %3 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 3), align 4, !tbaa !12
  %cmp1.3 = icmp eq i8* %3, %ptr
  br i1 %cmp1.3, label %cleanup, label %for.inc.3

for.inc.3:                                        ; preds = %for.inc.2
  %4 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 4), align 4, !tbaa !12
  %cmp1.4 = icmp eq i8* %4, %ptr
  br i1 %cmp1.4, label %cleanup, label %for.inc.4

for.inc.4:                                        ; preds = %for.inc.3
  %5 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 5), align 4, !tbaa !12
  %cmp1.5 = icmp eq i8* %5, %ptr
  br i1 %cmp1.5, label %cleanup, label %for.inc.5

for.inc.5:                                        ; preds = %for.inc.4
  %6 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 6), align 4, !tbaa !12
  %cmp1.6 = icmp eq i8* %6, %ptr
  br i1 %cmp1.6, label %cleanup, label %for.inc.6

for.inc.6:                                        ; preds = %for.inc.5
  %7 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 7), align 4, !tbaa !12
  %cmp1.7 = icmp eq i8* %7, %ptr
  br i1 %cmp1.7, label %cleanup, label %for.inc.7

for.inc.7:                                        ; preds = %for.inc.6
  %8 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 8), align 4, !tbaa !12
  %cmp1.8 = icmp eq i8* %8, %ptr
  br i1 %cmp1.8, label %cleanup, label %for.inc.8

for.inc.8:                                        ; preds = %for.inc.7
  %9 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 9), align 4, !tbaa !12
  %cmp1.9 = icmp eq i8* %9, %ptr
  br i1 %cmp1.9, label %cleanup, label %for.inc.9

for.inc.9:                                        ; preds = %for.inc.8
  tail call void @_ZN6Halide7Runtime8Internal12aligned_freeEPv(i8* %ptr) #12
  br label %return
}

; Function Attrs: nounwind
define weak i8* (i8*, i32)* @halide_set_custom_malloc(i8* (i8*, i32)* %user_malloc) local_unnamed_addr #0 {
entry:
  tail call void @halide_print(i8* null, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.8, i32 0, i32 0)) #11
  %0 = load i8* (i8*, i32)*, i8* (i8*, i32)** @_ZN6Halide7Runtime8Internal13custom_mallocE, align 4, !tbaa !12
  store i8* (i8*, i32)* %user_malloc, i8* (i8*, i32)** @_ZN6Halide7Runtime8Internal13custom_mallocE, align 4, !tbaa !12
  ret i8* (i8*, i32)* %0
}

; Function Attrs: nounwind
define weak void (i8*, i8*)* @halide_set_custom_free(void (i8*, i8*)* %user_free) local_unnamed_addr #0 {
entry:
  tail call void @halide_print(i8* null, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.8, i32 0, i32 0)) #11
  %0 = load void (i8*, i8*)*, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal11custom_freeE, align 4, !tbaa !12
  store void (i8*, i8*)* %user_free, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal11custom_freeE, align 4, !tbaa !12
  ret void (i8*, i8*)* %0
}

; Function Attrs: nounwind
define weak i8* @halide_malloc(i8* %user_context, i32 %x) local_unnamed_addr #0 {
entry:
  %0 = load i32, i32* @malloc_tracing, align 4, !tbaa !10
  %cmp = icmp sgt i32 %0, 1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @halide_print(i8* null, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.9, i32 0, i32 0)) #11
  %call = tail call i8* @_ZN6Halide7Runtime8Internal9to_stringEj(i32 %x) #12
  tail call void @halide_print(i8* null, i8* %call) #11
  tail call void @halide_print(i8* null, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0)) #11
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %call1 = tail call i8* @halide_default_malloc(i8* %user_context, i32 %x) #12
  ret i8* %call1
}

; Function Attrs: nounwind
define weak void @halide_free(i8* %user_context, i8* %ptr) local_unnamed_addr #0 {
entry:
  tail call void @halide_default_free(i8* %user_context, i8* %ptr) #12
  ret void
}

; Function Attrs: nounwind
define weak i32 @halide_default_do_task(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %idx, i8* %closure) #0 {
entry:
  %call = tail call i32 %f(i8* %user_context, i32 %idx, i8* %closure) #11
  ret i32 %call
}

; Function Attrs: nounwind
define weak i32 @halide_default_do_par_for(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %min, i32 %size, i8* %closure) #0 {
entry:
  %add = add nsw i32 %size, %min
  %cmp14 = icmp sgt i32 %size, 0
  br i1 %cmp14, label %for.body, label %return

for.cond:                                         ; preds = %for.body
  %cmp = icmp slt i32 %inc, %add
  br i1 %cmp, label %for.body, label %return

for.body:                                         ; preds = %entry, %for.cond
  %x.015 = phi i32 [ %inc, %for.cond ], [ %min, %entry ]
  %call = tail call i32 @halide_do_task(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %x.015, i8* %closure) #12
  %tobool = icmp eq i32 %call, 0
  %inc = add nsw i32 %x.015, 1
  br i1 %tobool, label %for.cond, label %return

return:                                           ; preds = %for.body, %for.cond, %entry
  %retval.3 = phi i32 [ 0, %entry ], [ 0, %for.cond ], [ %call, %for.body ]
  ret i32 %retval.3
}

; Function Attrs: nounwind
define weak i32 @halide_do_task(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %idx, i8* %closure) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)*, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)** @_ZN6Halide7Runtime8Internal14custom_do_taskE, align 4, !tbaa !12
  %call = tail call i32 %0(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %idx, i8* %closure) #11
  ret i32 %call
}

; Function Attrs: nounwind
define weak %struct.halide_thread* @halide_spawn_thread(void (i8*)* %f, i8* %closure) local_unnamed_addr #0 {
entry:
  tail call void @halide_error(i8* null, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.10, i32 0, i32 0)) #11
  ret %struct.halide_thread* null
}

declare extern_weak void @halide_error(i8*, i8*) local_unnamed_addr #2

; Function Attrs: norecurse nounwind
define weak void @halide_mutex_lock(%struct.halide_mutex* %mutex) local_unnamed_addr #3 {
entry:
  ret void
}

; Function Attrs: norecurse nounwind
define weak void @halide_mutex_unlock(%struct.halide_mutex* %mutex) local_unnamed_addr #3 {
entry:
  ret void
}

; Function Attrs: norecurse nounwind
define weak void @halide_shutdown_thread_pool() local_unnamed_addr #3 {
entry:
  ret void
}

; Function Attrs: nounwind
define weak i32 @halide_set_num_threads(i32 %n) local_unnamed_addr #0 {
entry:
  %cmp = icmp slt i32 %n, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @halide_error(i8* null, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.1.11, i32 0, i32 0)) #11
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret i32 1
}

; Function Attrs: norecurse nounwind
define weak i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* @halide_set_custom_do_task(i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* %f) local_unnamed_addr #3 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)*, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)** @_ZN6Halide7Runtime8Internal14custom_do_taskE, align 4, !tbaa !12
  store i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* %f, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)** @_ZN6Halide7Runtime8Internal14custom_do_taskE, align 4, !tbaa !12
  ret i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* %0
}

; Function Attrs: norecurse nounwind
define weak i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* @halide_set_custom_do_par_for(i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* %f) local_unnamed_addr #3 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)*, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)** @_ZN6Halide7Runtime8Internal17custom_do_par_forE, align 4, !tbaa !12
  store i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* %f, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)** @_ZN6Halide7Runtime8Internal17custom_do_par_forE, align 4, !tbaa !12
  ret i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* %0
}

; Function Attrs: nounwind
define weak i32 @halide_do_par_for(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %min, i32 %size, i8* %closure) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)*, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)** @_ZN6Halide7Runtime8Internal17custom_do_par_forE, align 4, !tbaa !12
  %call = tail call i32 %0(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %min, i32 %size, i8* %closure) #11
  ret i32 %call
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* nocapture writeonly, i8* nocapture readonly, i32, i1) #4

; Function Attrs: norecurse nounwind
define weak void @halide_set_gpu_device(i32 %d) local_unnamed_addr #3 {
entry:
  store i32 %d, i32* @_ZN6Halide7Runtime8Internal17halide_gpu_deviceE, align 4, !tbaa !10
  store i8 1, i8* @_ZN6Halide7Runtime8Internal29halide_gpu_device_initializedE, align 1, !tbaa !17
  ret void
}

; Function Attrs: nounwind
define weak i32 @halide_get_gpu_device(i8* %user_context) local_unnamed_addr #0 {
entry:
  br label %while.cond.i

while.cond.i:                                     ; preds = %while.cond.i, %entry
  %0 = atomicrmw xchg i32* @_ZN6Halide7Runtime8Internal22halide_gpu_device_lockE, i32 1 seq_cst
  %tobool.i = icmp eq i32 %0, 0
  br i1 %tobool.i, label %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVi.exit, label %while.cond.i

_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVi.exit: ; preds = %while.cond.i
  %1 = load i8, i8* @_ZN6Halide7Runtime8Internal29halide_gpu_device_initializedE, align 1, !tbaa !17, !range !19
  %tobool = icmp eq i8 %1, 0
  br i1 %tobool, label %if.then, label %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVi.exit.if.end4_crit_edge

_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVi.exit.if.end4_crit_edge: ; preds = %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVi.exit
  %.pre = load i32, i32* @_ZN6Halide7Runtime8Internal17halide_gpu_deviceE, align 4, !tbaa !10
  br label %if.end4

if.then:                                          ; preds = %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVi.exit
  %call = tail call i8* @getenv(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.12, i32 0, i32 0)) #11
  %tobool1 = icmp eq i8* %call, null
  br i1 %tobool1, label %if.end, label %if.then2

if.then2:                                         ; preds = %if.then
  %call3 = tail call i32 @atoi(i8* nonnull %call) #11
  br label %if.end

if.end:                                           ; preds = %if.then2, %if.then
  %storemerge = phi i32 [ %call3, %if.then2 ], [ -1, %if.then ]
  store i32 %storemerge, i32* @_ZN6Halide7Runtime8Internal17halide_gpu_deviceE, align 4, !tbaa !10
  store i8 1, i8* @_ZN6Halide7Runtime8Internal29halide_gpu_device_initializedE, align 1, !tbaa !17
  br label %if.end4

if.end4:                                          ; preds = %if.end, %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVi.exit.if.end4_crit_edge
  %2 = phi i32 [ %.pre, %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVi.exit.if.end4_crit_edge ], [ %storemerge, %if.end ]
  store atomic i32 0, i32* @_ZN6Halide7Runtime8Internal22halide_gpu_device_lockE release, align 4
  ret i32 %2
}

; Function Attrs: nounwind readonly
declare i8* @getenv(i8* nocapture) local_unnamed_addr #5

; Function Attrs: nounwind readonly
declare i32 @atoi(i8* nocapture) local_unnamed_addr #5

; Function Attrs: norecurse nounwind
define weak i8* @halide_string_to_string(i8* %dst, i8* %end, i8* %arg) local_unnamed_addr #3 {
entry:
  %cmp = icmp ult i8* %dst, %end
  br i1 %cmp, label %if.end3, label %return

if.then2:                                         ; preds = %if.end6
  store i8 0, i8* %dst.addr.019, align 1, !tbaa !7
  br label %return

if.end3:                                          ; preds = %entry, %if.end6
  %arg.addr.020 = phi i8* [ %incdec.ptr7, %if.end6 ], [ %arg, %entry ]
  %dst.addr.019 = phi i8* [ %incdec.ptr, %if.end6 ], [ %dst, %entry ]
  %0 = load i8, i8* %arg.addr.020, align 1, !tbaa !7
  store i8 %0, i8* %dst.addr.019, align 1, !tbaa !7
  %cmp4 = icmp eq i8 %0, 0
  br i1 %cmp4, label %return, label %if.end6

if.end6:                                          ; preds = %if.end3
  %incdec.ptr = getelementptr inbounds i8, i8* %dst.addr.019, i32 1
  %incdec.ptr7 = getelementptr inbounds i8, i8* %arg.addr.020, i32 1
  %cmp1 = icmp eq i8* %incdec.ptr, %end
  br i1 %cmp1, label %if.then2, label %if.end3

return:                                           ; preds = %if.end3, %if.then2, %entry
  %retval.0 = phi i8* [ %end, %if.then2 ], [ %dst, %entry ], [ %dst.addr.019, %if.end3 ]
  ret i8* %retval.0
}

; Function Attrs: nounwind
define weak i8* @halide_uint64_to_string(i8* %dst, i8* %end, i64 %arg, i32 %min_digits) local_unnamed_addr #0 {
entry:
  %buf = alloca [32 x i8], align 1
  %0 = getelementptr inbounds [32 x i8], [32 x i8]* %buf, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %0) #9
  %arrayidx = getelementptr inbounds [32 x i8], [32 x i8]* %buf, i32 0, i32 31
  store i8 0, i8* %arrayidx, align 1, !tbaa !7
  %add.ptr = getelementptr inbounds [32 x i8], [32 x i8]* %buf, i32 0, i32 30
  %cmp13 = icmp sgt i32 %min_digits, 0
  %tobool14 = icmp ne i64 %arg, 0
  %1 = or i1 %tobool14, %cmp13
  br i1 %1, label %for.body, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.body, %entry
  %digits.0.lcssa = phi i8* [ %add.ptr, %entry ], [ %incdec.ptr, %for.body ]
  %incdec.ptr1 = getelementptr inbounds i8, i8* %digits.0.lcssa, i32 1
  %call = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* nonnull %incdec.ptr1) #12
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %0) #9
  ret i8* %call

for.body:                                         ; preds = %entry, %for.body
  %arg.addr.017 = phi i64 [ %div, %for.body ], [ %arg, %entry ]
  %digits.016 = phi i8* [ %incdec.ptr, %for.body ], [ %add.ptr, %entry ]
  %i.015 = phi i32 [ %inc, %for.body ], [ 0, %entry ]
  %div = udiv i64 %arg.addr.017, 10
  %2 = mul i64 %div, -10
  %sub = add i64 %2, %arg.addr.017
  %3 = trunc i64 %sub to i8
  %conv = add i8 %3, 48
  store i8 %conv, i8* %digits.016, align 1, !tbaa !7
  %incdec.ptr = getelementptr inbounds i8, i8* %digits.016, i32 -1
  %inc = add nuw nsw i32 %i.015, 1
  %cmp = icmp slt i32 %inc, %min_digits
  %4 = icmp ugt i64 %arg.addr.017, 9
  %5 = or i1 %4, %cmp
  br i1 %5, label %for.body, label %for.cond.cleanup
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64, i8* nocapture) #4

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64, i8* nocapture) #4

; Function Attrs: nounwind
define weak i8* @halide_int64_to_string(i8* %dst, i8* %end, i64 %arg, i32 %min_digits) local_unnamed_addr #0 {
entry:
  %cmp = icmp slt i64 %arg, 0
  %cmp1 = icmp ult i8* %dst, %end
  %or.cond = and i1 %cmp1, %cmp
  br i1 %or.cond, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %incdec.ptr = getelementptr inbounds i8, i8* %dst, i32 1
  store i8 45, i8* %dst, align 1, !tbaa !7
  %sub = sub nsw i64 0, %arg
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %arg.addr.0 = phi i64 [ %sub, %if.then ], [ %arg, %entry ]
  %dst.addr.0 = phi i8* [ %incdec.ptr, %if.then ], [ %dst, %entry ]
  %call = tail call i8* @halide_uint64_to_string(i8* %dst.addr.0, i8* %end, i64 %arg.addr.0, i32 %min_digits) #12
  ret i8* %call
}

; Function Attrs: nounwind
define weak i8* @halide_double_to_string(i8* %dst, i8* %end, double %arg, i32 %scientific) local_unnamed_addr #0 {
entry:
  %arg.addr = alloca double, align 8
  %bits = alloca i64, align 8
  %buf = alloca [512 x i8], align 1
  store double %arg, double* %arg.addr, align 8, !tbaa !20
  %0 = bitcast i64* %bits to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %0) #9
  store i64 0, i64* %bits, align 8, !tbaa !22
  %1 = bitcast double* %arg.addr to i8*
  %call = call i8* @memcpy(i8* nonnull %0, i8* nonnull %1, i32 8) #11
  %2 = load i64, i64* %bits, align 8, !tbaa !22
  %and = and i64 %2, 4503599627370495
  %shr = lshr i64 %2, 52
  %3 = trunc i64 %shr to i32
  %conv = and i32 %3, 2047
  %shr2 = lshr i64 %2, 63
  %conv3 = trunc i64 %shr2 to i32
  %cmp = icmp eq i32 %conv, 2047
  br i1 %cmp, label %if.then, label %if.else15

if.then:                                          ; preds = %entry
  %tobool = icmp eq i64 %and, 0
  %tobool5 = icmp ne i32 %conv3, 0
  br i1 %tobool, label %if.else9, label %if.then4

if.then4:                                         ; preds = %if.then
  br i1 %tobool5, label %if.then6, label %if.else

if.then6:                                         ; preds = %if.then4
  %call7 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.13, i32 0, i32 0)) #12
  br label %cleanup148

if.else:                                          ; preds = %if.then4
  %call8 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1.14, i32 0, i32 0)) #12
  br label %cleanup148

if.else9:                                         ; preds = %if.then
  br i1 %tobool5, label %if.then11, label %if.else13

if.then11:                                        ; preds = %if.else9
  %call12 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2.15, i32 0, i32 0)) #12
  br label %cleanup148

if.else13:                                        ; preds = %if.else9
  %call14 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3.16, i32 0, i32 0)) #12
  br label %cleanup148

if.else15:                                        ; preds = %entry
  %cmp16 = icmp eq i32 %conv, 0
  %cmp17 = icmp eq i64 %and, 0
  %or.cond = and i1 %cmp17, %cmp16
  br i1 %or.cond, label %if.then18, label %if.end32

if.then18:                                        ; preds = %if.else15
  %tobool19 = icmp eq i32 %scientific, 0
  %tobool21 = icmp ne i32 %conv3, 0
  br i1 %tobool19, label %if.else26, label %if.then20

if.then20:                                        ; preds = %if.then18
  br i1 %tobool21, label %if.then22, label %if.else24

if.then22:                                        ; preds = %if.then20
  %call23 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.4.17, i32 0, i32 0)) #12
  br label %cleanup148

if.else24:                                        ; preds = %if.then20
  %call25 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.5.18, i32 0, i32 0)) #12
  br label %cleanup148

if.else26:                                        ; preds = %if.then18
  br i1 %tobool21, label %if.then28, label %if.else30

if.then28:                                        ; preds = %if.else26
  %call29 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.6.19, i32 0, i32 0)) #12
  br label %cleanup148

if.else30:                                        ; preds = %if.else26
  %call31 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.7.20, i32 0, i32 0)) #12
  br label %cleanup148

if.end32:                                         ; preds = %if.else15
  %tobool33 = icmp eq i32 %conv3, 0
  br i1 %tobool33, label %if.end37, label %if.then34

if.then34:                                        ; preds = %if.end32
  %call35 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8.21, i32 0, i32 0)) #12
  %sub36 = fsub double -0.000000e+00, %arg
  store double %sub36, double* %arg.addr, align 8, !tbaa !20
  br label %if.end37

if.end37:                                         ; preds = %if.then34, %if.end32
  %.pr = phi double [ %sub36, %if.then34 ], [ %arg, %if.end32 ]
  %dst.addr.0 = phi i8* [ %call35, %if.then34 ], [ %dst, %if.end32 ]
  %tobool38 = icmp eq i32 %scientific, 0
  br i1 %tobool38, label %if.else62, label %if.then39

if.then39:                                        ; preds = %if.end37
  %cmp40262 = fcmp olt double %.pr, 1.000000e+00
  br i1 %cmp40262, label %while.body, label %while.cond41.preheader

while.cond.while.cond41.preheader_crit_edge:      ; preds = %while.body
  store double %mul, double* %arg.addr, align 8, !tbaa !20
  br label %while.cond41.preheader

while.cond41.preheader:                           ; preds = %while.cond.while.cond41.preheader_crit_edge, %if.then39
  %exponent_base_10.0.lcssa = phi i32 [ %dec, %while.cond.while.cond41.preheader_crit_edge ], [ 0, %if.then39 ]
  %4 = phi double [ %mul, %while.cond.while.cond41.preheader_crit_edge ], [ %.pr, %if.then39 ]
  %cmp42258 = fcmp ult double %4, 1.000000e+01
  br i1 %cmp42258, label %while.end44, label %while.body43

while.body:                                       ; preds = %if.then39, %while.body
  %5 = phi double [ %mul, %while.body ], [ %.pr, %if.then39 ]
  %exponent_base_10.0263 = phi i32 [ %dec, %while.body ], [ 0, %if.then39 ]
  %mul = fmul double %5, 1.000000e+01
  %dec = add nsw i32 %exponent_base_10.0263, -1
  %cmp40 = fcmp olt double %mul, 1.000000e+00
  br i1 %cmp40, label %while.body, label %while.cond.while.cond41.preheader_crit_edge

while.body43:                                     ; preds = %while.cond41.preheader, %while.body43
  %6 = phi double [ %div, %while.body43 ], [ %4, %while.cond41.preheader ]
  %exponent_base_10.1259 = phi i32 [ %inc, %while.body43 ], [ %exponent_base_10.0.lcssa, %while.cond41.preheader ]
  %div = fdiv double %6, 1.000000e+01
  %inc = add nsw i32 %exponent_base_10.1259, 1
  %cmp42 = fcmp ult double %div, 1.000000e+01
  br i1 %cmp42, label %while.cond41.while.end44_crit_edge, label %while.body43

while.cond41.while.end44_crit_edge:               ; preds = %while.body43
  store double %div, double* %arg.addr, align 8, !tbaa !20
  br label %while.end44

while.end44:                                      ; preds = %while.cond41.while.end44_crit_edge, %while.cond41.preheader
  %exponent_base_10.1.lcssa = phi i32 [ %inc, %while.cond41.while.end44_crit_edge ], [ %exponent_base_10.0.lcssa, %while.cond41.preheader ]
  %.lcssa = phi double [ %div, %while.cond41.while.end44_crit_edge ], [ %4, %while.cond41.preheader ]
  %mul45 = fmul double %.lcssa, 1.000000e+06
  %add = fadd double %mul45, 5.000000e-01
  %conv46 = fptoui double %add to i64
  %div47 = udiv i64 %conv46, 1000000
  %7 = mul i64 %div47, -1000000
  %sub49 = add i64 %7, %conv46
  %call50 = call i8* @halide_int64_to_string(i8* %dst.addr.0, i8* %end, i64 %div47, i32 1) #12
  %call51 = call i8* @halide_string_to_string(i8* %call50, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.67, i32 0, i32 0)) #12
  %call52 = call i8* @halide_int64_to_string(i8* %call51, i8* %end, i64 %sub49, i32 6) #12
  %cmp53 = icmp sgt i32 %exponent_base_10.1.lcssa, -1
  br i1 %cmp53, label %if.then54, label %if.else56

if.then54:                                        ; preds = %while.end44
  %call55 = call i8* @halide_string_to_string(i8* %call52, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.10.23, i32 0, i32 0)) #12
  br label %if.end59

if.else56:                                        ; preds = %while.end44
  %call57 = call i8* @halide_string_to_string(i8* %call52, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.11, i32 0, i32 0)) #12
  %sub58 = sub nsw i32 0, %exponent_base_10.1.lcssa
  br label %if.end59

if.end59:                                         ; preds = %if.else56, %if.then54
  %exponent_base_10.2 = phi i32 [ %exponent_base_10.1.lcssa, %if.then54 ], [ %sub58, %if.else56 ]
  %dst.addr.1 = phi i8* [ %call55, %if.then54 ], [ %call57, %if.else56 ]
  %conv60 = sext i32 %exponent_base_10.2 to i64
  %call61 = call i8* @halide_int64_to_string(i8* %dst.addr.1, i8* %end, i64 %conv60, i32 2) #12
  br label %cleanup148

if.else62:                                        ; preds = %if.end37
  br i1 %cmp16, label %if.then64, label %if.end66

if.then64:                                        ; preds = %if.else62
  %call65 = call i8* @halide_double_to_string(i8* %dst.addr.0, i8* %end, double 0.000000e+00, i32 0) #12
  br label %cleanup148

if.end66:                                         ; preds = %if.else62
  %add68 = or i64 %and, 4503599627370496
  %sub70 = add nsw i32 %conv, -1075
  %cmp71 = icmp ult i32 %conv, 1075
  br i1 %cmp71, label %if.then72, label %if.end105

if.then72:                                        ; preds = %if.end66
  %cmp73 = icmp ult i32 %conv, 1023
  br i1 %cmp73, label %if.end84, label %if.else76

if.else76:                                        ; preds = %if.then72
  %sub77 = sub nsw i32 1075, %conv
  %sh_prom = zext i32 %sub77 to i64
  %shr78 = lshr i64 %add68, %sh_prom
  %shl81 = shl i64 %shr78, %sh_prom
  %sub82 = sub i64 %add68, %shl81
  br label %if.end84

if.end84:                                         ; preds = %if.else76, %if.then72
  %integer_part.0 = phi i64 [ %shr78, %if.else76 ], [ 0, %if.then72 ]
  %f.0.in = phi i64 [ %sub82, %if.else76 ], [ %add68, %if.then72 ]
  %f.0 = uitofp i64 %f.0.in to double
  %conv85242 = zext i32 %sub70 to i64
  %shl86 = shl i64 %conv85242, 52
  %add88 = add i64 %shl86, 4696837146684686336
  %8 = bitcast i64 %add88 to double
  %mul90 = fmul double %8, %f.0
  %add91 = fadd double %mul90, 5.000000e-01
  %conv92 = fptoui double %add91 to i64
  %conv93 = uitofp i64 %conv92 to double
  %cmp94 = fcmp oeq double %add91, %conv93
  %and96 = and i64 %conv92, 1
  %tobool97 = icmp ne i64 %and96, 0
  %not.or.cond243 = and i1 %tobool97, %cmp94
  %dec99 = sext i1 %not.or.cond243 to i64
  %fractional_part.0 = add i64 %dec99, %conv92
  %cmp101 = icmp eq i64 %fractional_part.0, 1000000
  %inc103 = zext i1 %cmp101 to i64
  %spec.select = add i64 %integer_part.0, %inc103
  %spec.select244 = select i1 %cmp101, i64 0, i64 %fractional_part.0
  br label %if.end105

if.end105:                                        ; preds = %if.end84, %if.end66
  %integer_part.2 = phi i64 [ %add68, %if.end66 ], [ %spec.select, %if.end84 ]
  %integer_exponent.0 = phi i32 [ %sub70, %if.end66 ], [ 0, %if.end84 ]
  %fractional_part.2 = phi i64 [ 0, %if.end66 ], [ %spec.select244, %if.end84 ]
  %9 = getelementptr inbounds [512 x i8], [512 x i8]* %buf, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %9) #9
  %add.ptr = getelementptr inbounds [512 x i8], [512 x i8]* %buf, i32 0, i32 512
  %add.ptr106 = getelementptr inbounds [512 x i8], [512 x i8]* %buf, i32 0, i32 480
  %call109 = call i8* @halide_int64_to_string(i8* nonnull %add.ptr106, i8* nonnull %add.ptr, i64 %integer_part.2, i32 1) #12
  %cmp110253 = icmp sgt i32 %integer_exponent.0, 0
  br i1 %cmp110253, label %for.cond112.preheader, label %for.cond.cleanup

for.cond112.preheader:                            ; preds = %if.end105, %if.end138
  %i.0256 = phi i32 [ %inc140, %if.end138 ], [ 0, %if.end105 ]
  %int_part_ptr.0254 = phi i8* [ %int_part_ptr.1, %if.end138 ], [ %add.ptr106, %if.end105 ]
  %add.ptr113 = getelementptr inbounds i8, i8* %int_part_ptr.0254, i32 -1
  %cmp114249 = icmp eq i8* %call109, %int_part_ptr.0254
  br i1 %cmp114249, label %if.end138, label %for.body116

for.cond.cleanup:                                 ; preds = %if.end138, %if.end105
  %int_part_ptr.0.lcssa = phi i8* [ %add.ptr106, %if.end105 ], [ %int_part_ptr.1, %if.end138 ]
  %call142 = call i8* @halide_string_to_string(i8* %dst.addr.0, i8* %end, i8* %int_part_ptr.0.lcssa) #12
  %call143 = call i8* @halide_string_to_string(i8* %call142, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.67, i32 0, i32 0)) #12
  %call144 = call i8* @halide_int64_to_string(i8* %call143, i8* %end, i64 %fractional_part.2, i32 6) #12
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %9) #9
  br label %cleanup148

for.cond.cleanup115:                              ; preds = %for.body116
  br i1 %cmp125, label %if.then136, label %if.end138

for.body116:                                      ; preds = %for.cond112.preheader, %for.body116
  %p.0251.pn = phi i8* [ %p.0251, %for.body116 ], [ %call109, %for.cond112.preheader ]
  %carry.0250 = phi i8 [ %spec.select245, %for.body116 ], [ 0, %for.cond112.preheader ]
  %p.0251 = getelementptr inbounds i8, i8* %p.0251.pn, i32 -1
  %10 = load i8, i8* %p.0251, align 1, !tbaa !7
  %sub118 = shl i8 %10, 1
  %mul121 = add i8 %sub118, -96
  %add122 = or i8 %mul121, %carry.0250
  %cmp125 = icmp sgt i8 %add122, 9
  %sub128 = add i8 %add122, -10
  %spec.select245 = zext i1 %cmp125 to i8
  %spec.select246 = select i1 %cmp125, i8 %sub128, i8 %add122
  %add133 = add i8 %spec.select246, 48
  store i8 %add133, i8* %p.0251, align 1, !tbaa !7
  %cmp114 = icmp eq i8* %p.0251, %int_part_ptr.0254
  br i1 %cmp114, label %for.cond.cleanup115, label %for.body116

if.then136:                                       ; preds = %for.cond.cleanup115
  store i8 49, i8* %add.ptr113, align 1, !tbaa !7
  br label %if.end138

if.end138:                                        ; preds = %if.then136, %for.cond.cleanup115, %for.cond112.preheader
  %int_part_ptr.1 = phi i8* [ %add.ptr113, %if.then136 ], [ %int_part_ptr.0254, %for.cond.cleanup115 ], [ %call109, %for.cond112.preheader ]
  %inc140 = add nuw nsw i32 %i.0256, 1
  %exitcond = icmp eq i32 %inc140, %integer_exponent.0
  br i1 %exitcond, label %for.cond.cleanup, label %for.cond112.preheader

cleanup148:                                       ; preds = %for.cond.cleanup, %if.then64, %if.end59, %if.else30, %if.then28, %if.else24, %if.then22, %if.else13, %if.then11, %if.else, %if.then6
  %retval.1 = phi i8* [ %call7, %if.then6 ], [ %call8, %if.else ], [ %call12, %if.then11 ], [ %call14, %if.else13 ], [ %call23, %if.then22 ], [ %call25, %if.else24 ], [ %call29, %if.then28 ], [ %call31, %if.else30 ], [ %call65, %if.then64 ], [ %call61, %if.end59 ], [ %call144, %for.cond.cleanup ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %0) #9
  ret i8* %retval.1
}

; Function Attrs: nounwind
declare i8* @memcpy(i8*, i8* nocapture readonly, i32) local_unnamed_addr #1

; Function Attrs: nounwind
define weak i8* @halide_pointer_to_string(i8* %dst, i8* %end, i8* %arg) local_unnamed_addr #0 {
entry:
  %buf = alloca [20 x i8], align 1
  %0 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 20, i8* nonnull %0) #9
  call void @llvm.memset.p0i8.i32(i8* nonnull align 1 %0, i8 0, i32 20, i1 false)
  %add.ptr = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i32 0, i32 18
  %1 = ptrtoint i8* %arg to i32
  %2 = zext i32 %1 to i64
  br label %for.body

for.body:                                         ; preds = %for.body, %entry
  %i.018 = phi i32 [ 0, %entry ], [ %inc, %for.body ]
  %bits.017 = phi i64 [ %2, %entry ], [ %shr, %for.body ]
  %buf_ptr.016 = phi i8* [ %add.ptr, %entry ], [ %incdec.ptr, %for.body ]
  %3 = trunc i64 %bits.017 to i32
  %idxprom = and i32 %3, 15
  %arrayidx = getelementptr inbounds [17 x i8], [17 x i8]* @.str.12.24, i32 0, i32 %idxprom
  %4 = load i8, i8* %arrayidx, align 1, !tbaa !7
  %incdec.ptr = getelementptr inbounds i8, i8* %buf_ptr.016, i32 -1
  store i8 %4, i8* %buf_ptr.016, align 1, !tbaa !7
  %shr = lshr i64 %bits.017, 4
  %tobool = icmp ne i64 %shr, 0
  %inc = add nuw nsw i32 %i.018, 1
  %cmp = icmp ult i32 %inc, 16
  %or.cond = and i1 %cmp, %tobool
  br i1 %or.cond, label %for.body, label %cleanup

cleanup:                                          ; preds = %for.body
  %incdec.ptr1 = getelementptr inbounds i8, i8* %buf_ptr.016, i32 -2
  store i8 120, i8* %incdec.ptr, align 1, !tbaa !7
  store i8 48, i8* %incdec.ptr1, align 1, !tbaa !7
  %call = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* nonnull %incdec.ptr1) #12
  call void @llvm.lifetime.end.p0i8(i64 20, i8* nonnull %0) #9
  ret i8* %call
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly, i8, i32, i1) #4

; Function Attrs: nounwind
define weak i8* @halide_type_to_string(i8* %dst, i8* %end, %struct.halide_type_t* %t) local_unnamed_addr #0 {
entry:
  %code = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %t, i32 0, i32 0
  %0 = load i8, i8* %code, align 2, !tbaa !24
  %1 = icmp ult i8 %0, 4
  br i1 %1, label %switch.lookup, label %sw.epilog

switch.lookup:                                    ; preds = %entry
  %2 = sext i8 %0 to i32
  %switch.gep = getelementptr inbounds [4 x i8*], [4 x i8*]* @switch.table.halide_type_to_string, i32 0, i32 %2
  %switch.load = load i8*, i8** %switch.gep, align 4
  br label %sw.epilog

sw.epilog:                                        ; preds = %entry, %switch.lookup
  %code_name.0 = phi i8* [ %switch.load, %switch.lookup ], [ getelementptr inbounds ([14 x i8], [14 x i8]* @.str.17, i32 0, i32 0), %entry ]
  %call = tail call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* nonnull %code_name.0) #12
  %bits = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %t, i32 0, i32 1
  %3 = load i8, i8* %bits, align 1, !tbaa !27
  %conv4 = zext i8 %3 to i64
  %call5 = tail call i8* @halide_uint64_to_string(i8* %call, i8* %end, i64 %conv4, i32 1) #12
  %lanes = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %t, i32 0, i32 2
  %4 = load i16, i16* %lanes, align 2, !tbaa !28
  %cmp = icmp eq i16 %4, 1
  br i1 %cmp, label %if.end, label %if.then

if.then:                                          ; preds = %sw.epilog
  %call7 = tail call i8* @halide_string_to_string(i8* %call5, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.18, i32 0, i32 0)) #12
  %5 = load i16, i16* %lanes, align 2, !tbaa !28
  %conv9 = zext i16 %5 to i64
  %call10 = tail call i8* @halide_uint64_to_string(i8* %call7, i8* %end, i64 %conv9, i32 1) #12
  br label %if.end

if.end:                                           ; preds = %if.then, %sw.epilog
  %dst.addr.0 = phi i8* [ %call10, %if.then ], [ %call5, %sw.epilog ]
  ret i8* %dst.addr.0
}

; Function Attrs: nounwind
define weak i8* @halide_buffer_to_string(i8* %dst, i8* %end, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call = tail call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19, i32 0, i32 0)) #12
  br label %return

if.end:                                           ; preds = %entry
  %call1 = tail call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.20, i32 0, i32 0)) #12
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !29
  %call2 = tail call i8* @halide_uint64_to_string(i8* %call1, i8* %end, i64 %0, i32 1) #12
  %call3 = tail call i8* @halide_string_to_string(i8* %call2, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.58.76, i32 0, i32 0)) #12
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %1 = bitcast %struct.halide_device_interface_t** %device_interface to i8**
  %2 = load i8*, i8** %1, align 8, !tbaa !31
  %call4 = tail call i8* @halide_pointer_to_string(i8* %call3, i8* %end, i8* %2) #12
  %call5 = tail call i8* @halide_string_to_string(i8* %call4, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.58.76, i32 0, i32 0)) #12
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 2
  %3 = load i8*, i8** %host, align 4, !tbaa !32
  %call6 = tail call i8* @halide_pointer_to_string(i8* %call5, i8* %end, i8* %3) #12
  %call7 = tail call i8* @halide_string_to_string(i8* %call6, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.58.76, i32 0, i32 0)) #12
  %flags = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %4 = load i64, i64* %flags, align 8, !tbaa !33
  %call8 = tail call i8* @halide_uint64_to_string(i8* %call7, i8* %end, i64 %4, i32 1) #12
  %call9 = tail call i8* @halide_string_to_string(i8* %call8, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.58.76, i32 0, i32 0)) #12
  %type = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 7
  %call10 = tail call i8* @halide_type_to_string(i8* %call9, i8* %end, %struct.halide_type_t* nonnull %type) #12
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 8
  %5 = load i32, i32* %dimensions, align 4, !tbaa !34
  %cmp1175 = icmp sgt i32 %5, 0
  br i1 %cmp1175, label %for.body.lr.ph, label %for.cond.cleanup

for.body.lr.ph:                                   ; preds = %if.end
  %dim = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 9
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body, %if.end
  %dst.addr.0.lcssa = phi i8* [ %call10, %if.end ], [ %call24, %for.body ]
  %call25 = tail call i8* @halide_string_to_string(i8* %dst.addr.0.lcssa, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5.94, i32 0, i32 0)) #12
  br label %return

for.body:                                         ; preds = %for.body, %for.body.lr.ph
  %i.077 = phi i32 [ 0, %for.body.lr.ph ], [ %inc, %for.body ]
  %dst.addr.076 = phi i8* [ %call10, %for.body.lr.ph ], [ %call24, %for.body ]
  %call12 = tail call i8* @halide_string_to_string(i8* %dst.addr.076, i8* %end, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.22, i32 0, i32 0)) #12
  %6 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !35
  %min = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %6, i32 %i.077, i32 0
  %7 = load i32, i32* %min, align 4, !tbaa !36
  %conv = sext i32 %7 to i64
  %call13 = tail call i8* @halide_int64_to_string(i8* %call12, i8* %end, i64 %conv, i32 1) #12
  %call14 = tail call i8* @halide_string_to_string(i8* %call13, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.58.76, i32 0, i32 0)) #12
  %8 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !35
  %extent = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %8, i32 %i.077, i32 1
  %9 = load i32, i32* %extent, align 4, !tbaa !38
  %conv17 = sext i32 %9 to i64
  %call18 = tail call i8* @halide_int64_to_string(i8* %call14, i8* %end, i64 %conv17, i32 1) #12
  %call19 = tail call i8* @halide_string_to_string(i8* %call18, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.58.76, i32 0, i32 0)) #12
  %10 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !35
  %stride = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %10, i32 %i.077, i32 2
  %11 = load i32, i32* %stride, align 4, !tbaa !39
  %conv22 = sext i32 %11 to i64
  %call23 = tail call i8* @halide_int64_to_string(i8* %call19, i8* %end, i64 %conv22, i32 1) #12
  %call24 = tail call i8* @halide_string_to_string(i8* %call23, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.23, i32 0, i32 0)) #12
  %inc = add nuw nsw i32 %i.077, 1
  %12 = load i32, i32* %dimensions, align 4, !tbaa !34
  %cmp11 = icmp slt i32 %inc, %12
  br i1 %cmp11, label %for.body, label %for.cond.cleanup

return:                                           ; preds = %for.cond.cleanup, %if.then
  %retval.0 = phi i8* [ %call, %if.then ], [ %call25, %for.cond.cleanup ]
  ret i8* %retval.0
}

; Function Attrs: nounwind
define linkonce void @_ZN6Halide7Runtime8Internal18copy_memory_helperERKNS1_11device_copyEixx(%"struct.Halide::Runtime::Internal::device_copy"* dereferenceable(416) %copy, i32 %d, i64 %src_off, i64 %dst_off) local_unnamed_addr #0 {
entry:
  %cmp41 = icmp sgt i32 %d, -1
  br i1 %cmp41, label %land.end, label %while.end

land.end:                                         ; preds = %entry, %while.body
  %d.addr.042 = phi i32 [ %dec, %while.body ], [ %d, %entry ]
  %arrayidx = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i32 0, i32 3, i32 %d.addr.042
  %0 = load i64, i64* %arrayidx, align 8, !tbaa !22
  %cmp1 = icmp eq i64 %0, 1
  br i1 %cmp1, label %while.body, label %if.else

while.body:                                       ; preds = %land.end
  %dec = add nsw i32 %d.addr.042, -1
  %cmp = icmp sgt i32 %d.addr.042, 0
  br i1 %cmp, label %land.end, label %while.end

while.end:                                        ; preds = %while.body, %entry
  %d.addr.0.lcssa = phi i32 [ %d, %entry ], [ %dec, %while.body ]
  %cmp2 = icmp eq i32 %d.addr.0.lcssa, -1
  br i1 %cmp2, label %if.then, label %while.end.if.else_crit_edge

while.end.if.else_crit_edge:                      ; preds = %while.end
  %arrayidx7.phi.trans.insert = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i32 0, i32 3, i32 %d.addr.0.lcssa
  %.pre = load i64, i64* %arrayidx7.phi.trans.insert, align 8, !tbaa !22
  br label %if.else

if.then:                                          ; preds = %while.end
  %src = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i32 0, i32 0
  %1 = load i64, i64* %src, align 8, !tbaa !40
  %add = add i64 %1, %src_off
  %conv = trunc i64 %add to i32
  %2 = inttoptr i32 %conv to i8*
  %dst = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i32 0, i32 1
  %3 = load i64, i64* %dst, align 8, !tbaa !42
  %add3 = add i64 %3, %dst_off
  %conv4 = trunc i64 %add3 to i32
  %4 = inttoptr i32 %conv4 to i8*
  %chunk_size = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i32 0, i32 6
  %5 = load i64, i64* %chunk_size, align 8, !tbaa !43
  %conv5 = trunc i64 %5 to i32
  %call = tail call i8* @memcpy(i8* %4, i8* %2, i32 %conv5) #11
  br label %if.end

if.else:                                          ; preds = %land.end, %while.end.if.else_crit_edge
  %6 = phi i64 [ %.pre, %while.end.if.else_crit_edge ], [ %0, %land.end ]
  %d.addr.036 = phi i32 [ %d.addr.0.lcssa, %while.end.if.else_crit_edge ], [ %d.addr.042, %land.end ]
  %arrayidx7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i32 0, i32 3, i32 %d.addr.036
  %cmp837 = icmp eq i64 %6, 0
  br i1 %cmp837, label %if.end, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %if.else
  %sub = add nsw i32 %d.addr.036, -1
  %arrayidx9 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i32 0, i32 4, i32 %d.addr.036
  %arrayidx11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i32 0, i32 5, i32 %d.addr.036
  br label %for.body

for.body:                                         ; preds = %for.body, %for.body.lr.ph
  %i.040 = phi i64 [ 0, %for.body.lr.ph ], [ %inc, %for.body ]
  %src_off.addr.039 = phi i64 [ %src_off, %for.body.lr.ph ], [ %add10, %for.body ]
  %dst_off.addr.038 = phi i64 [ %dst_off, %for.body.lr.ph ], [ %add12, %for.body ]
  tail call void @_ZN6Halide7Runtime8Internal18copy_memory_helperERKNS1_11device_copyEixx(%"struct.Halide::Runtime::Internal::device_copy"* nonnull dereferenceable(416) %copy, i32 %sub, i64 %src_off.addr.039, i64 %dst_off.addr.038) #12
  %7 = load i64, i64* %arrayidx9, align 8, !tbaa !22
  %add10 = add i64 %7, %src_off.addr.039
  %8 = load i64, i64* %arrayidx11, align 8, !tbaa !22
  %add12 = add i64 %8, %dst_off.addr.038
  %inc = add nuw i64 %i.040, 1
  %9 = load i64, i64* %arrayidx7, align 8, !tbaa !22
  %cmp8 = icmp ult i64 %inc, %9
  br i1 %cmp8, label %for.body, label %if.end

if.end:                                           ; preds = %for.body, %if.else, %if.then
  ret void
}

; Function Attrs: nounwind
define linkonce void @_ZN6Halide7Runtime8Internal11copy_memoryERKNS1_11device_copyEPv(%"struct.Halide::Runtime::Internal::device_copy"* dereferenceable(416) %copy, i8* %user_context) local_unnamed_addr #0 {
entry:
  %src = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i32 0, i32 0
  %0 = load i64, i64* %src, align 8, !tbaa !40
  %dst = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i32 0, i32 1
  %1 = load i64, i64* %dst, align 8, !tbaa !42
  %cmp = icmp eq i64 %0, %1
  br i1 %cmp, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %src_begin = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i32 0, i32 2
  %2 = load i64, i64* %src_begin, align 8, !tbaa !44
  tail call void @_ZN6Halide7Runtime8Internal18copy_memory_helperERKNS1_11device_copyEixx(%"struct.Halide::Runtime::Internal::device_copy"* nonnull dereferenceable(416) %copy, i32 15, i64 %2, i64 0) #12
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind
define linkonce void @_ZN6Halide7Runtime8Internal16make_buffer_copyEPK15halide_buffer_tbS4_b(%"struct.Halide::Runtime::Internal::device_copy"* noalias sret %agg.result, %struct.halide_buffer_t* %src, i1 zeroext %src_host, %struct.halide_buffer_t* %dst, i1 zeroext %dst_host) local_unnamed_addr #0 {
entry:
  %c = alloca %"struct.Halide::Runtime::Internal::device_copy", align 8
  %0 = bitcast %"struct.Halide::Runtime::Internal::device_copy"* %c to i8*
  call void @llvm.lifetime.start.p0i8(i64 416, i8* nonnull %0) #9
  br i1 %src_host, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 2
  %1 = bitcast i8** %host to i32*
  %2 = load i32, i32* %1, align 4, !tbaa !32
  %3 = zext i32 %2 to i64
  br label %cond.end

cond.false:                                       ; preds = %entry
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 0
  %4 = load i64, i64* %device, align 8, !tbaa !29
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %3, %cond.true ], [ %4, %cond.false ]
  %src2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 0
  store i64 %cond, i64* %src2, align 8, !tbaa !40
  br i1 %dst_host, label %cond.true4, label %cond.false6

cond.true4:                                       ; preds = %cond.end
  %host5 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 2
  %5 = bitcast i8** %host5 to i32*
  %6 = load i32, i32* %5, align 4, !tbaa !32
  %7 = zext i32 %6 to i64
  br label %cond.end8

cond.false6:                                      ; preds = %cond.end
  %device7 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 0
  %8 = load i64, i64* %device7, align 8, !tbaa !29
  br label %cond.end8

cond.end8:                                        ; preds = %cond.false6, %cond.true4
  %cond9 = phi i64 [ %7, %cond.true4 ], [ %8, %cond.false6 ]
  %dst10 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 1
  store i64 %cond9, i64* %dst10, align 8, !tbaa !42
  %bits.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 7, i32 1
  %9 = load i8, i8* %bits.i, align 1, !tbaa !27
  %conv.i = zext i8 %9 to i32
  %add.i = add nuw nsw i32 %conv.i, 7
  %div.i = lshr i32 %add.i, 3
  %10 = zext i32 %div.i to i64
  %chunk_size = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 6
  store i64 %10, i64* %chunk_size, align 8, !tbaa !43
  %arrayidx = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 0
  store i64 1, i64* %arrayidx, align 8, !tbaa !22
  %arrayidx11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 0
  store i64 0, i64* %arrayidx11, align 8, !tbaa !22
  %arrayidx12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 0
  store i64 0, i64* %arrayidx12, align 8, !tbaa !22
  %arrayidx.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 1
  store i64 1, i64* %arrayidx.1, align 8, !tbaa !22
  %arrayidx11.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 1
  store i64 0, i64* %arrayidx11.1, align 8, !tbaa !22
  %arrayidx12.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 1
  store i64 0, i64* %arrayidx12.1, align 8, !tbaa !22
  %arrayidx.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 2
  store i64 1, i64* %arrayidx.2, align 8, !tbaa !22
  %arrayidx11.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 2
  store i64 0, i64* %arrayidx11.2, align 8, !tbaa !22
  %arrayidx12.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 2
  store i64 0, i64* %arrayidx12.2, align 8, !tbaa !22
  %arrayidx.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 3
  store i64 1, i64* %arrayidx.3, align 8, !tbaa !22
  %arrayidx11.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 3
  store i64 0, i64* %arrayidx11.3, align 8, !tbaa !22
  %arrayidx12.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 3
  store i64 0, i64* %arrayidx12.3, align 8, !tbaa !22
  %arrayidx.4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 4
  store i64 1, i64* %arrayidx.4, align 8, !tbaa !22
  %arrayidx11.4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 4
  store i64 0, i64* %arrayidx11.4, align 8, !tbaa !22
  %arrayidx12.4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 4
  store i64 0, i64* %arrayidx12.4, align 8, !tbaa !22
  %arrayidx.5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 5
  store i64 1, i64* %arrayidx.5, align 8, !tbaa !22
  %arrayidx11.5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 5
  store i64 0, i64* %arrayidx11.5, align 8, !tbaa !22
  %arrayidx12.5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 5
  store i64 0, i64* %arrayidx12.5, align 8, !tbaa !22
  %arrayidx.6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 6
  store i64 1, i64* %arrayidx.6, align 8, !tbaa !22
  %arrayidx11.6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 6
  store i64 0, i64* %arrayidx11.6, align 8, !tbaa !22
  %arrayidx12.6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 6
  store i64 0, i64* %arrayidx12.6, align 8, !tbaa !22
  %arrayidx.7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 7
  store i64 1, i64* %arrayidx.7, align 8, !tbaa !22
  %arrayidx11.7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 7
  store i64 0, i64* %arrayidx11.7, align 8, !tbaa !22
  %arrayidx12.7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 7
  store i64 0, i64* %arrayidx12.7, align 8, !tbaa !22
  %arrayidx.8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 8
  store i64 1, i64* %arrayidx.8, align 8, !tbaa !22
  %arrayidx11.8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 8
  store i64 0, i64* %arrayidx11.8, align 8, !tbaa !22
  %arrayidx12.8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 8
  store i64 0, i64* %arrayidx12.8, align 8, !tbaa !22
  %arrayidx.9 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 9
  store i64 1, i64* %arrayidx.9, align 8, !tbaa !22
  %arrayidx11.9 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 9
  store i64 0, i64* %arrayidx11.9, align 8, !tbaa !22
  %arrayidx12.9 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 9
  store i64 0, i64* %arrayidx12.9, align 8, !tbaa !22
  %arrayidx.10 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 10
  store i64 1, i64* %arrayidx.10, align 8, !tbaa !22
  %arrayidx11.10 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 10
  store i64 0, i64* %arrayidx11.10, align 8, !tbaa !22
  %arrayidx12.10 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 10
  store i64 0, i64* %arrayidx12.10, align 8, !tbaa !22
  %arrayidx.11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 11
  store i64 1, i64* %arrayidx.11, align 8, !tbaa !22
  %arrayidx11.11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 11
  store i64 0, i64* %arrayidx11.11, align 8, !tbaa !22
  %arrayidx12.11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 11
  store i64 0, i64* %arrayidx12.11, align 8, !tbaa !22
  %arrayidx.12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 12
  store i64 1, i64* %arrayidx.12, align 8, !tbaa !22
  %arrayidx11.12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 12
  store i64 0, i64* %arrayidx11.12, align 8, !tbaa !22
  %arrayidx12.12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 12
  store i64 0, i64* %arrayidx12.12, align 8, !tbaa !22
  %arrayidx.13 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 13
  store i64 1, i64* %arrayidx.13, align 8, !tbaa !22
  %arrayidx11.13 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 13
  store i64 0, i64* %arrayidx11.13, align 8, !tbaa !22
  %arrayidx12.13 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 13
  store i64 0, i64* %arrayidx12.13, align 8, !tbaa !22
  %arrayidx.14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 14
  store i64 1, i64* %arrayidx.14, align 8, !tbaa !22
  %arrayidx11.14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 14
  store i64 0, i64* %arrayidx11.14, align 8, !tbaa !22
  %arrayidx12.14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 14
  store i64 0, i64* %arrayidx12.14, align 8, !tbaa !22
  %arrayidx.15 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 15
  store i64 1, i64* %arrayidx.15, align 8, !tbaa !22
  %arrayidx11.15 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 15
  store i64 0, i64* %arrayidx11.15, align 8, !tbaa !22
  %arrayidx12.15 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 15
  store i64 0, i64* %arrayidx12.15, align 8, !tbaa !22
  %src_begin = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 2
  store i64 0, i64* %src_begin, align 8, !tbaa !44
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 8
  %11 = load i32, i32* %dimensions, align 4, !tbaa !34
  %cmp15251 = icmp sgt i32 %11, 0
  br i1 %cmp15251, label %for.body17.lr.ph, label %for.cond.cleanup16

for.body17.lr.ph:                                 ; preds = %cond.end8
  %dim = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 9
  %12 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !35
  %dim19 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 9
  %13 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim19, align 8, !tbaa !35
  br label %for.body17

for.cond14.for.cond.cleanup16_crit_edge:          ; preds = %for.body17
  store i64 %add, i64* %src_begin, align 8, !tbaa !44
  br label %for.cond.cleanup16

for.cond.cleanup16:                               ; preds = %for.cond14.for.cond.cleanup16_crit_edge, %cond.end8
  %14 = phi i64 [ %add, %for.cond14.for.cond.cleanup16_crit_edge ], [ 0, %cond.end8 ]
  %mul31 = mul i64 %14, %10
  store i64 %mul31, i64* %src_begin, align 8, !tbaa !44
  %dimensions33 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 8
  %15 = load i32, i32* %dimensions33, align 4, !tbaa !34
  %cmp34 = icmp eq i32 %11, %15
  br i1 %cmp34, label %lor.lhs.false, label %if.then

for.body17:                                       ; preds = %for.body17, %for.body17.lr.ph
  %16 = phi i64 [ 0, %for.body17.lr.ph ], [ %add, %for.body17 ]
  %i13.0252 = phi i32 [ 0, %for.body17.lr.ph ], [ %inc27, %for.body17 ]
  %stride = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %12, i32 %i13.0252, i32 2
  %17 = load i32, i32* %stride, align 4, !tbaa !39
  %min = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %13, i32 %i13.0252, i32 0
  %18 = load i32, i32* %min, align 4, !tbaa !36
  %min23 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %12, i32 %i13.0252, i32 0
  %19 = load i32, i32* %min23, align 4, !tbaa !36
  %sub = sub nsw i32 %18, %19
  %mul = mul nsw i32 %sub, %17
  %conv24 = sext i32 %mul to i64
  %add = add i64 %16, %conv24
  %inc27 = add nuw nsw i32 %i13.0252, 1
  %exitcond1 = icmp eq i32 %inc27, %11
  br i1 %exitcond1, label %for.cond14.for.cond.cleanup16_crit_edge, label %for.body17

lor.lhs.false:                                    ; preds = %for.cond.cleanup16
  %bits.i233 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 7, i32 1
  %20 = load i8, i8* %bits.i233, align 1, !tbaa !27
  %conv.i234 = zext i8 %20 to i32
  %add.i235 = add nuw nsw i32 %conv.i234, 7
  %cmp39.unshifted = xor i32 %add.i235, %add.i
  %cmp39 = icmp ugt i32 %cmp39.unshifted, 7
  %cmp42 = icmp sgt i32 %11, 16
  %or.cond241 = or i1 %cmp42, %cmp39
  br i1 %or.cond241, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %for.cond.cleanup16
  %21 = bitcast %"struct.Halide::Runtime::Internal::device_copy"* %agg.result to i8*
  tail call void @llvm.memset.p0i8.i32(i8* align 8 %21, i8 0, i32 416, i1 false)
  br label %cleanup

if.end:                                           ; preds = %lor.lhs.false
  %cmp44 = icmp eq i32 %div.i, 0
  br i1 %cmp44, label %if.then45, label %for.cond48.preheader

for.cond48.preheader:                             ; preds = %if.end
  br i1 %cmp15251, label %for.body52.lr.ph, label %while.end

for.body52.lr.ph:                                 ; preds = %for.cond48.preheader
  %dim54 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 9
  %22 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim54, align 8, !tbaa !35
  %div.i232 = lshr i32 %add.i235, 3
  %dim62 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 9
  %23 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim62, align 8, !tbaa !35
  br label %for.body52

if.then45:                                        ; preds = %if.end
  %24 = bitcast %"struct.Halide::Runtime::Internal::device_copy"* %agg.result to i8*
  tail call void @llvm.memset.p0i8.i32(i8* align 8 %24, i8 0, i32 416, i1 false)
  br label %cleanup

while.cond.preheader:                             ; preds = %for.cond.cleanup83
  %.pre = load i64, i64* %chunk_size, align 8, !tbaa !43
  %.pre257 = load i64, i64* %arrayidx11, align 8, !tbaa !22
  %cmp125243 = icmp eq i64 %.pre, %.pre257
  br i1 %cmp125243, label %land.rhs.lr.ph, label %while.end

land.rhs.lr.ph:                                   ; preds = %while.cond.preheader
  %.pre258 = load i64, i64* %arrayidx12, align 8, !tbaa !22
  br label %land.rhs

for.body52:                                       ; preds = %for.cond.cleanup83, %for.body52.lr.ph
  %i47.0250 = phi i32 [ 0, %for.body52.lr.ph ], [ %inc120, %for.cond.cleanup83 ]
  %stride56 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i32 %i47.0250, i32 2
  %25 = load i32, i32* %stride56, align 4, !tbaa !39
  %mul59 = mul nsw i32 %25, %div.i232
  %conv60 = sext i32 %mul59 to i64
  %stride64 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %23, i32 %i47.0250, i32 2
  %26 = load i32, i32* %stride64, align 4, !tbaa !39
  %mul67 = mul nsw i32 %26, %div.i
  %conv68 = sext i32 %mul67 to i64
  %cmp70244 = icmp eq i32 %i47.0250, 0
  br i1 %cmp70244, label %for.end80, label %for.body71.lr.ph

for.body71.lr.ph:                                 ; preds = %for.body52
  %cmp75 = icmp eq i32 %mul59, 0
  br i1 %cmp75, label %for.end80, label %for.body71.us

for.body71.us:                                    ; preds = %for.body71.lr.ph, %for.inc78.us
  %insert.0245.us = phi i32 [ %inc79.us, %for.inc78.us ], [ 0, %for.body71.lr.ph ]
  %arrayidx73.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %insert.0245.us
  %27 = load i64, i64* %arrayidx73.us, align 8, !tbaa !22
  %cmp74.us = icmp ugt i64 %27, %conv60
  br i1 %cmp74.us, label %for.end80, label %for.inc78.us

for.inc78.us:                                     ; preds = %for.body71.us
  %inc79.us = add nuw nsw i32 %insert.0245.us, 1
  %cmp70.us = icmp ult i32 %inc79.us, %i47.0250
  br i1 %cmp70.us, label %for.body71.us, label %for.end80

for.end80:                                        ; preds = %for.inc78.us, %for.body71.us, %for.body71.lr.ph, %for.body52
  %insert.0.lcssa = phi i32 [ 0, %for.body52 ], [ %i47.0250, %for.body71.lr.ph ], [ %inc79.us, %for.inc78.us ], [ %insert.0245.us, %for.body71.us ]
  %cmp82247 = icmp ugt i32 %i47.0250, %insert.0.lcssa
  br i1 %cmp82247, label %for.body84, label %for.cond.cleanup83

for.cond.cleanup83:                               ; preds = %for.body84, %for.end80
  %extent104 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i32 %i47.0250, i32 1
  %28 = load i32, i32* %extent104, align 4, !tbaa !38
  %conv105 = sext i32 %28 to i64
  %arrayidx107 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %insert.0.lcssa
  store i64 %conv105, i64* %arrayidx107, align 8, !tbaa !22
  %arrayidx116 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %insert.0.lcssa
  store i64 %conv60, i64* %arrayidx116, align 8, !tbaa !22
  %arrayidx118 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %insert.0.lcssa
  store i64 %conv68, i64* %arrayidx118, align 8, !tbaa !22
  %inc120 = add nuw nsw i32 %i47.0250, 1
  %exitcond = icmp eq i32 %inc120, %11
  br i1 %exitcond, label %while.cond.preheader, label %for.body52

for.body84:                                       ; preds = %for.end80, %for.body84
  %j.0248 = phi i32 [ %sub86, %for.body84 ], [ %i47.0250, %for.end80 ]
  %sub86 = add nsw i32 %j.0248, -1
  %arrayidx87 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %sub86
  %29 = load i64, i64* %arrayidx87, align 8, !tbaa !22
  %arrayidx89 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %j.0248
  store i64 %29, i64* %arrayidx89, align 8, !tbaa !22
  %arrayidx92 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %sub86
  %30 = load i64, i64* %arrayidx92, align 8, !tbaa !22
  %arrayidx94 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %j.0248
  store i64 %30, i64* %arrayidx94, align 8, !tbaa !22
  %arrayidx97 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %sub86
  %31 = load i64, i64* %arrayidx97, align 8, !tbaa !22
  %arrayidx99 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %j.0248
  store i64 %31, i64* %arrayidx99, align 8, !tbaa !22
  %cmp82 = icmp sgt i32 %sub86, %insert.0.lcssa
  br i1 %cmp82, label %for.body84, label %for.cond.cleanup83

land.rhs:                                         ; preds = %while.body, %land.rhs.lr.ph
  %32 = phi i64 [ %.pre258, %land.rhs.lr.ph ], [ %37, %while.body ]
  %33 = phi i64 [ %.pre, %land.rhs.lr.ph ], [ %mul133, %while.body ]
  %cmp129 = icmp eq i64 %33, %32
  br i1 %cmp129, label %while.body, label %while.end

while.body:                                       ; preds = %land.rhs
  %34 = load i64, i64* %arrayidx, align 8, !tbaa !22
  %mul133 = mul i64 %34, %32
  store i64 %mul133, i64* %chunk_size, align 8, !tbaa !43
  %35 = load i64, i64* %arrayidx.1, align 8, !tbaa !22
  store i64 %35, i64* %arrayidx, align 8, !tbaa !22
  %36 = load i64, i64* %arrayidx11.1, align 8, !tbaa !22
  store i64 %36, i64* %arrayidx11, align 8, !tbaa !22
  %37 = load i64, i64* %arrayidx12.1, align 8, !tbaa !22
  store i64 %37, i64* %arrayidx12, align 8, !tbaa !22
  %38 = load i64, i64* %arrayidx.2, align 8, !tbaa !22
  store i64 %38, i64* %arrayidx.1, align 8, !tbaa !22
  %39 = load i64, i64* %arrayidx11.2, align 8, !tbaa !22
  store i64 %39, i64* %arrayidx11.1, align 8, !tbaa !22
  %40 = load i64, i64* %arrayidx12.2, align 8, !tbaa !22
  store i64 %40, i64* %arrayidx12.1, align 8, !tbaa !22
  %41 = load i64, i64* %arrayidx.3, align 8, !tbaa !22
  store i64 %41, i64* %arrayidx.2, align 8, !tbaa !22
  %42 = load i64, i64* %arrayidx11.3, align 8, !tbaa !22
  store i64 %42, i64* %arrayidx11.2, align 8, !tbaa !22
  %43 = load i64, i64* %arrayidx12.3, align 8, !tbaa !22
  store i64 %43, i64* %arrayidx12.2, align 8, !tbaa !22
  %44 = load i64, i64* %arrayidx.4, align 8, !tbaa !22
  store i64 %44, i64* %arrayidx.3, align 8, !tbaa !22
  %45 = load i64, i64* %arrayidx11.4, align 8, !tbaa !22
  store i64 %45, i64* %arrayidx11.3, align 8, !tbaa !22
  %46 = load i64, i64* %arrayidx12.4, align 8, !tbaa !22
  store i64 %46, i64* %arrayidx12.3, align 8, !tbaa !22
  %47 = load i64, i64* %arrayidx.5, align 8, !tbaa !22
  store i64 %47, i64* %arrayidx.4, align 8, !tbaa !22
  %48 = load i64, i64* %arrayidx11.5, align 8, !tbaa !22
  store i64 %48, i64* %arrayidx11.4, align 8, !tbaa !22
  %49 = load i64, i64* %arrayidx12.5, align 8, !tbaa !22
  store i64 %49, i64* %arrayidx12.4, align 8, !tbaa !22
  %50 = load i64, i64* %arrayidx.6, align 8, !tbaa !22
  store i64 %50, i64* %arrayidx.5, align 8, !tbaa !22
  %51 = load i64, i64* %arrayidx11.6, align 8, !tbaa !22
  store i64 %51, i64* %arrayidx11.5, align 8, !tbaa !22
  %52 = load i64, i64* %arrayidx12.6, align 8, !tbaa !22
  store i64 %52, i64* %arrayidx12.5, align 8, !tbaa !22
  %53 = load i64, i64* %arrayidx.7, align 8, !tbaa !22
  store i64 %53, i64* %arrayidx.6, align 8, !tbaa !22
  %54 = load i64, i64* %arrayidx11.7, align 8, !tbaa !22
  store i64 %54, i64* %arrayidx11.6, align 8, !tbaa !22
  %55 = load i64, i64* %arrayidx12.7, align 8, !tbaa !22
  store i64 %55, i64* %arrayidx12.6, align 8, !tbaa !22
  %56 = load i64, i64* %arrayidx.8, align 8, !tbaa !22
  store i64 %56, i64* %arrayidx.7, align 8, !tbaa !22
  %57 = load i64, i64* %arrayidx11.8, align 8, !tbaa !22
  store i64 %57, i64* %arrayidx11.7, align 8, !tbaa !22
  %58 = load i64, i64* %arrayidx12.8, align 8, !tbaa !22
  store i64 %58, i64* %arrayidx12.7, align 8, !tbaa !22
  %59 = load i64, i64* %arrayidx.9, align 8, !tbaa !22
  store i64 %59, i64* %arrayidx.8, align 8, !tbaa !22
  %60 = load i64, i64* %arrayidx11.9, align 8, !tbaa !22
  store i64 %60, i64* %arrayidx11.8, align 8, !tbaa !22
  %61 = load i64, i64* %arrayidx12.9, align 8, !tbaa !22
  store i64 %61, i64* %arrayidx12.8, align 8, !tbaa !22
  %62 = load i64, i64* %arrayidx.10, align 8, !tbaa !22
  store i64 %62, i64* %arrayidx.9, align 8, !tbaa !22
  %63 = load i64, i64* %arrayidx11.10, align 8, !tbaa !22
  store i64 %63, i64* %arrayidx11.9, align 8, !tbaa !22
  %64 = load i64, i64* %arrayidx12.10, align 8, !tbaa !22
  store i64 %64, i64* %arrayidx12.9, align 8, !tbaa !22
  %65 = load i64, i64* %arrayidx.11, align 8, !tbaa !22
  store i64 %65, i64* %arrayidx.10, align 8, !tbaa !22
  %66 = load i64, i64* %arrayidx11.11, align 8, !tbaa !22
  store i64 %66, i64* %arrayidx11.10, align 8, !tbaa !22
  %67 = load i64, i64* %arrayidx12.11, align 8, !tbaa !22
  store i64 %67, i64* %arrayidx12.10, align 8, !tbaa !22
  %68 = load i64, i64* %arrayidx.12, align 8, !tbaa !22
  store i64 %68, i64* %arrayidx.11, align 8, !tbaa !22
  %69 = load i64, i64* %arrayidx11.12, align 8, !tbaa !22
  store i64 %69, i64* %arrayidx11.11, align 8, !tbaa !22
  %70 = load i64, i64* %arrayidx12.12, align 8, !tbaa !22
  store i64 %70, i64* %arrayidx12.11, align 8, !tbaa !22
  %71 = load i64, i64* %arrayidx.13, align 8, !tbaa !22
  store i64 %71, i64* %arrayidx.12, align 8, !tbaa !22
  %72 = load i64, i64* %arrayidx11.13, align 8, !tbaa !22
  store i64 %72, i64* %arrayidx11.12, align 8, !tbaa !22
  %73 = load i64, i64* %arrayidx12.13, align 8, !tbaa !22
  store i64 %73, i64* %arrayidx12.12, align 8, !tbaa !22
  %74 = load i64, i64* %arrayidx.14, align 8, !tbaa !22
  store i64 %74, i64* %arrayidx.13, align 8, !tbaa !22
  %75 = load i64, i64* %arrayidx11.14, align 8, !tbaa !22
  store i64 %75, i64* %arrayidx11.13, align 8, !tbaa !22
  %76 = load i64, i64* %arrayidx12.14, align 8, !tbaa !22
  store i64 %76, i64* %arrayidx12.13, align 8, !tbaa !22
  %77 = load i64, i64* %arrayidx.15, align 8, !tbaa !22
  store i64 %77, i64* %arrayidx.14, align 8, !tbaa !22
  %78 = load i64, i64* %arrayidx11.15, align 8, !tbaa !22
  store i64 %78, i64* %arrayidx11.14, align 8, !tbaa !22
  %79 = load i64, i64* %arrayidx12.15, align 8, !tbaa !22
  store i64 %79, i64* %arrayidx12.14, align 8, !tbaa !22
  store i64 1, i64* %arrayidx.15, align 8, !tbaa !22
  store i64 0, i64* %arrayidx11.15, align 8, !tbaa !22
  store i64 0, i64* %arrayidx12.15, align 8, !tbaa !22
  %cmp125 = icmp eq i64 %mul133, %36
  br i1 %cmp125, label %land.rhs, label %while.end

while.end:                                        ; preds = %while.body, %land.rhs, %while.cond.preheader, %for.cond48.preheader
  %80 = bitcast %"struct.Halide::Runtime::Internal::device_copy"* %agg.result to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %80, i8* nonnull align 8 %0, i32 416, i1 false), !tbaa.struct !45
  br label %cleanup

cleanup:                                          ; preds = %while.end, %if.then45, %if.then
  call void @llvm.lifetime.end.p0i8(i64 416, i8* nonnull %0) #9
  ret void
}

; Function Attrs: nounwind
define linkonce i32 @_ZN6Halide7Runtime8Internal27copy_to_host_already_lockedEPvP15halide_buffer_t(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %flags.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %0 = load i64, i64* %flags.i.i, align 8, !tbaa !33
  %and.i.i = and i64 %0, 2
  %cmp.i.i = icmp eq i64 %and.i.i, 0
  br i1 %cmp.i.i, label %return, label %if.end

if.end:                                           ; preds = %entry
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %1 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !31
  %and.i.i46 = and i64 %0, 1
  %cmp.i.i47 = icmp eq i64 %and.i.i46, 0
  br i1 %cmp.i.i47, label %if.end9, label %return

if.end9:                                          ; preds = %if.end
  %cmp = icmp eq %struct.halide_device_interface_t* %1, null
  br i1 %cmp, label %return, label %if.end15

if.end15:                                         ; preds = %if.end9
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %1, i32 0, i32 15
  %2 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !46
  %copy_to_host = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %2, i32 0, i32 6
  %3 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %copy_to_host, align 4, !tbaa !48
  %call16 = tail call i32 %3(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #11
  %cmp17 = icmp eq i32 %call16, 0
  br i1 %cmp17, label %if.end23, label %return

if.end23:                                         ; preds = %if.end15
  %4 = load i64, i64* %flags.i.i, align 8, !tbaa !33
  %and.i.i44 = and i64 %4, -3
  store i64 %and.i.i44, i64* %flags.i.i, align 8, !tbaa !33
  tail call void @halide_msan_annotate_buffer_is_initialized(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #11
  br label %return

return:                                           ; preds = %if.end23, %if.end15, %if.end9, %if.end, %entry
  %retval.2 = phi i32 [ 0, %entry ], [ 0, %if.end23 ], [ -14, %if.end ], [ -19, %if.end9 ], [ -14, %if.end15 ]
  ret i32 %retval.2
}

; Function Attrs: nounwind
define weak void @halide_device_release(i8* %user_context, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %device_interface, i32 0, i32 15
  %0 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !46
  %device_release = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %0, i32 0, i32 5
  %1 = load i32 (i8*)*, i32 (i8*)** %device_release, align 4, !tbaa !50
  %call = tail call i32 %1(i8* %user_context) #11
  ret void
}

; Function Attrs: nounwind
define weak i32 @halide_copy_to_host(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #11
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.9.26, i32 0, i32 0)) #11
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !31
  %cmp4.i = icmp ne %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !29
  %cmp5.i = icmp ne i64 %1, 0
  %cmp5.not.i = xor i1 %cmp5.i, true
  %brmerge.i = or i1 %cmp4.i, %cmp5.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #11
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp4.not.i = xor i1 %cmp4.i, true
  %brmerge44.i = or i1 %cmp5.i, %cmp4.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #11
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !33
  %3 = and i64 %2, 3
  %4 = icmp eq i64 %3, 3
  br i1 %4, label %if.then24.i, label %if.end16.i.split

if.end16.i.split:                                 ; preds = %if.end16.i
  %call11 = tail call i32 @_ZN6Halide7Runtime8Internal27copy_to_host_already_lockedEPvP15halide_buffer_t(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #12
  br label %cleanup

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #11
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp = icmp eq i32 %retval.2.i, 0
  br i1 %cmp, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split, label %cleanup

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %call12 = tail call i32 @_ZN6Halide7Runtime8Internal27copy_to_host_already_lockedEPvP15halide_buffer_t(i8* %user_context, %struct.halide_buffer_t* %buf) #12
  br label %cleanup

cleanup:                                          ; preds = %if.end16.i.split, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.0 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ %call11, %if.end16.i.split ], [ %call12, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #11
  ret i32 %retval.0
}

; Function Attrs: nounwind
define linkonce i32 @copy_to_device_already_locked(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.10.27, i32 0, i32 0)) #11
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !31
  %cmp4.i = icmp ne %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !29
  %cmp5.i = icmp ne i64 %1, 0
  %cmp5.not.i = xor i1 %cmp5.i, true
  %brmerge.i = or i1 %cmp4.i, %cmp5.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #11
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp4.not.i = xor i1 %cmp4.i, true
  %brmerge44.i = or i1 %cmp5.i, %cmp4.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #11
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !33
  %3 = and i64 %2, 3
  %4 = icmp eq i64 %3, 3
  br i1 %4, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #11
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp = icmp eq i32 %retval.2.i, 0
  br i1 %cmp, label %if.end, label %cleanup

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit, %if.end16.i
  %cmp1 = icmp eq %struct.halide_device_interface_t* %device_interface, null
  br i1 %cmp1, label %if.then2, label %if.end11

if.then2:                                         ; preds = %if.end
  %device_interface5 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %5 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface5, align 8, !tbaa !31
  %cmp6 = icmp eq %struct.halide_device_interface_t* %5, null
  br i1 %cmp6, label %if.then7, label %if.end11

if.then7:                                         ; preds = %if.then2
  %call8 = tail call i32 @halide_error_no_device_interface(i8* %user_context) #11
  br label %cleanup

if.end11:                                         ; preds = %if.then2, %if.end
  %device_interface.addr.0 = phi %struct.halide_device_interface_t* [ %device_interface, %if.end ], [ %5, %if.then2 ]
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %6 = load i64, i64* %device, align 8, !tbaa !29
  %tobool = icmp eq i64 %6, 0
  br i1 %tobool, label %if.then18, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.end11
  %device_interface12 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %7 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface12, align 8, !tbaa !31
  %cmp13 = icmp eq %struct.halide_device_interface_t* %7, %device_interface.addr.0
  br i1 %cmp13, label %if.end27, label %if.then14

if.then14:                                        ; preds = %land.lhs.true
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.12.28, i32 0, i32 0)) #11
  br label %cleanup

if.then18:                                        ; preds = %if.end11
  %call19 = tail call i32 @halide_device_malloc(i8* %user_context, %struct.halide_buffer_t* nonnull %buf, %struct.halide_device_interface_t* nonnull %device_interface.addr.0) #12
  %cmp20 = icmp eq i32 %call19, 0
  br i1 %cmp20, label %if.end27, label %cleanup

if.end27:                                         ; preds = %if.then18, %land.lhs.true
  %flags.i.i85 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %8 = load i64, i64* %flags.i.i85, align 8, !tbaa !33
  %and.i.i86 = and i64 %8, 1
  %cmp.i.i87 = icmp eq i64 %and.i.i86, 0
  br i1 %cmp.i.i87, label %cleanup, label %if.then29

if.then29:                                        ; preds = %if.end27
  %and.i.i84 = and i64 %8, 2
  %cmp.i.i = icmp eq i64 %and.i.i84, 0
  br i1 %cmp.i.i, label %if.else, label %cleanup

if.else:                                          ; preds = %if.then29
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %device_interface.addr.0, i32 0, i32 15
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !46
  %copy_to_device = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i32 0, i32 7
  %10 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %copy_to_device, align 4, !tbaa !51
  %call40 = tail call i32 %10(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #11
  %cmp41 = icmp eq i32 %call40, 0
  br i1 %cmp41, label %if.then42, label %cleanup

if.then42:                                        ; preds = %if.else
  %11 = load i64, i64* %flags.i.i85, align 8, !tbaa !33
  %and.i.i = and i64 %11, -2
  store i64 %and.i.i, i64* %flags.i.i85, align 8, !tbaa !33
  br label %cleanup

cleanup:                                          ; preds = %if.then42, %if.else, %if.then29, %if.end27, %if.then18, %if.then14, %if.then7, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.0 = phi i32 [ %call8, %if.then7 ], [ -42, %if.then14 ], [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ 0, %if.then42 ], [ 0, %if.end27 ], [ %call19, %if.then18 ], [ -15, %if.then29 ], [ -15, %if.else ]
  ret i32 %retval.0
}

; Function Attrs: nounwind
define weak i32 @halide_device_malloc(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.18.29, i32 0, i32 0)) #11
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !31
  %cmp4.i = icmp ne %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !29
  %cmp5.i = icmp ne i64 %1, 0
  %cmp5.not.i = xor i1 %cmp5.i, true
  %brmerge.i = or i1 %cmp4.i, %cmp5.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #11
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp4.not.i = xor i1 %cmp4.i, true
  %brmerge44.i = or i1 %cmp5.i, %cmp4.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #11
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !33
  %3 = and i64 %2, 3
  %4 = icmp eq i64 %3, 3
  br i1 %4, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #11
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp = icmp eq i32 %retval.2.i, 0
  br i1 %cmp, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup12

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface3.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface3.phi.trans.insert, align 8, !tbaa !31
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %5 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp4 = icmp eq %struct.halide_device_interface_t* %5, null
  %cmp5 = icmp eq %struct.halide_device_interface_t* %5, %device_interface
  %or.cond = or i1 %cmp4, %cmp5
  br i1 %or.cond, label %if.end7, label %if.then6

if.then6:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.20.30, i32 0, i32 0)) #11
  br label %cleanup12

if.end7:                                          ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %device_interface, i32 0, i32 15
  %6 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !46
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %6, i32 0, i32 0
  %7 = load void ()*, void ()** %use_module, align 4, !tbaa !52
  tail call void %7() #11
  %8 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !46
  %device_malloc = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %8, i32 0, i32 2
  %9 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_malloc, align 4, !tbaa !53
  %call9 = tail call i32 %9(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #11
  %10 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !46
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %10, i32 0, i32 1
  %11 = load void ()*, void ()** %release_module, align 4, !tbaa !54
  tail call void %11() #11
  %tobool = icmp eq i32 %call9, 0
  %selv = select i1 %tobool, i32 0, i32 -16
  br label %cleanup12

cleanup12:                                        ; preds = %if.end7, %if.then6, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ -42, %if.then6 ], [ %selv, %if.end7 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind
define weak i32 @halide_copy_to_device(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #11
  %call = tail call i32 @copy_to_device_already_locked(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) #12
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #11
  ret i32 %call
}

; Function Attrs: nounwind
define weak i32 @halide_device_sync(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.17.31, i32 0, i32 0)) #11
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !31
  %cmp4.i = icmp ne %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !29
  %cmp5.i = icmp ne i64 %1, 0
  %cmp5.not.i = xor i1 %cmp5.i, true
  %brmerge.i = or i1 %cmp4.i, %cmp5.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #11
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp4.not.i = xor i1 %cmp4.i, true
  %brmerge44.i = or i1 %cmp5.i, %cmp4.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #11
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !33
  %3 = and i64 %2, 3
  %4 = icmp eq i64 %3, 3
  br i1 %4, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #11
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp = icmp eq i32 %retval.2.i, 0
  br i1 %cmp, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup8

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface1.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface1.phi.trans.insert, align 8, !tbaa !31
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %5 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp2 = icmp eq %struct.halide_device_interface_t* %5, null
  br i1 %cmp2, label %if.then3, label %if.end5

if.then3:                                         ; preds = %if.end
  %call4 = tail call i32 @halide_error_no_device_interface(i8* %user_context) #11
  br label %cleanup8

if.end5:                                          ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %5, i32 0, i32 15
  %6 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !46
  %device_sync = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %6, i32 0, i32 4
  %7 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_sync, align 4, !tbaa !55
  %call6 = tail call i32 %7(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #11
  %tobool = icmp eq i32 %call6, 0
  %selv = select i1 %tobool, i32 0, i32 -17
  br label %cleanup8

cleanup8:                                         ; preds = %if.end5, %if.then3, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ %call4, %if.then3 ], [ %selv, %if.end5 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind
define weak i32 @halide_device_free(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.21.32, i32 0, i32 0)) #11
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !31
  %cmp4.i = icmp ne %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !29
  %cmp5.i = icmp ne i64 %1, 0
  %cmp5.not.i = xor i1 %cmp5.i, true
  %brmerge.i = or i1 %cmp4.i, %cmp5.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #11
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp4.not.i = xor i1 %cmp4.i, true
  %brmerge44.i = or i1 %cmp5.i, %cmp4.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #11
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !33
  %3 = and i64 %2, 3
  %4 = icmp eq i64 %3, 3
  br i1 %4, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #11
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp = icmp eq i32 %retval.2.i, 0
  br i1 %cmp, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup12

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface1.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface1.phi.trans.insert, align 8, !tbaa !31
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %5 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp2 = icmp eq %struct.halide_device_interface_t* %5, null
  br i1 %cmp2, label %if.end11, label %if.then3

if.then3:                                         ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %5, i32 0, i32 15
  %6 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !46
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %6, i32 0, i32 0
  %7 = load void ()*, void ()** %use_module, align 4, !tbaa !52
  tail call void %7() #11
  %8 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !46
  %device_free = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %8, i32 0, i32 3
  %9 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_free, align 4, !tbaa !56
  %call5 = tail call i32 %9(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #11
  %10 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !46
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %10, i32 0, i32 1
  %11 = load void ()*, void ()** %release_module, align 4, !tbaa !54
  tail call void %11() #11
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %12 = load i64, i64* %device, align 8, !tbaa !29
  %cmp7 = icmp eq i64 %12, 0
  br i1 %cmp7, label %if.end9, label %if.then8

if.then8:                                         ; preds = %if.then3
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([137 x i8], [137 x i8]* @.str.22.33, i32 0, i32 0)) #11
  tail call void @abort() #11
  br label %if.end9

if.end9:                                          ; preds = %if.then8, %if.then3
  %tobool = icmp eq i32 %call5, 0
  %selv = select i1 %tobool, i32 0, i32 -18
  br label %cleanup12

if.end11:                                         ; preds = %if.end
  %flags.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %13 = load i64, i64* %flags.i.i, align 8, !tbaa !33
  %and.i.i = and i64 %13, -3
  store i64 %and.i.i, i64* %flags.i.i, align 8, !tbaa !33
  br label %cleanup12

cleanup12:                                        ; preds = %if.end11, %if.end9, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ %selv, %if.end9 ], [ 0, %if.end11 ]
  ret i32 %retval.1
}

declare void @abort() local_unnamed_addr #2

; Function Attrs: nounwind
define weak void @halide_device_free_as_destructor(i8* %user_context, i8* %obj) local_unnamed_addr #0 {
entry:
  %0 = bitcast i8* %obj to %struct.halide_buffer_t*
  %call = tail call i32 @halide_device_free(i8* %user_context, %struct.halide_buffer_t* %0) #12
  ret void
}

; Function Attrs: nounwind
define weak i32 @halide_device_and_host_malloc(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.23.34, i32 0, i32 0)) #11
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !31
  %cmp4.i = icmp ne %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !29
  %cmp5.i = icmp ne i64 %1, 0
  %cmp5.not.i = xor i1 %cmp5.i, true
  %brmerge.i = or i1 %cmp4.i, %cmp5.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #11
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp4.not.i = xor i1 %cmp4.i, true
  %brmerge44.i = or i1 %cmp5.i, %cmp4.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #11
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !33
  %3 = and i64 %2, 3
  %4 = icmp eq i64 %3, 3
  br i1 %4, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #11
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp = icmp eq i32 %retval.2.i, 0
  br i1 %cmp, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup14

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface3.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface3.phi.trans.insert, align 8, !tbaa !31
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %5 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %use_host_ptr_extension = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 4
  %cmp4 = icmp eq %struct.halide_device_interface_t* %5, null
  %cmp5 = icmp eq %struct.halide_device_interface_t* %5, %device_interface
  %or.cond = or i1 %cmp4, %cmp5
  %6 = bitcast i64* %use_host_ptr_extension to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 0, i64 24, i1 false)
  br i1 %or.cond, label %if.end7, label %if.then6

if.then6:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.25, i32 0, i32 0)) #11
  br label %cleanup14

if.end7:                                          ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %device_interface, i32 0, i32 15
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !46
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i32 0, i32 0
  %8 = load void ()*, void ()** %use_module, align 4, !tbaa !52
  tail call void %8() #11
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !46
  %device_and_host_malloc = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i32 0, i32 8
  %10 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_and_host_malloc, align 4, !tbaa !57
  %call9 = tail call i32 %10(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #11
  %11 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !46
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %11, i32 0, i32 1
  %12 = load void ()*, void ()** %release_module, align 4, !tbaa !54
  tail call void %12() #11
  %cmp11 = icmp eq i32 %call9, 0
  br i1 %cmp11, label %cleanup14, label %if.then12

if.then12:                                        ; preds = %if.end7
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.26, i32 0, i32 0)) #11
  br label %cleanup14

cleanup14:                                        ; preds = %if.then12, %if.end7, %if.then6, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ -42, %if.then6 ], [ -16, %if.then12 ], [ 0, %if.end7 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind
define weak i32 @halide_device_and_host_free(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.27, i32 0, i32 0)) #11
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !31
  %cmp4.i = icmp ne %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !29
  %cmp5.i = icmp ne i64 %1, 0
  %cmp5.not.i = xor i1 %cmp5.i, true
  %brmerge.i = or i1 %cmp4.i, %cmp5.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #11
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp4.not.i = xor i1 %cmp4.i, true
  %brmerge44.i = or i1 %cmp5.i, %cmp4.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #11
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !33
  %3 = and i64 %2, 3
  %4 = icmp eq i64 %3, 3
  br i1 %4, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #11
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp = icmp eq i32 %retval.2.i, 0
  br i1 %cmp, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup18

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface1.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface1.phi.trans.insert, align 8, !tbaa !31
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %5 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp2 = icmp eq %struct.halide_device_interface_t* %5, null
  br i1 %cmp2, label %if.else11, label %if.then3

if.then3:                                         ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %5, i32 0, i32 15
  %6 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !46
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %6, i32 0, i32 0
  %7 = load void ()*, void ()** %use_module, align 4, !tbaa !52
  tail call void %7() #11
  %8 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !46
  %device_and_host_free = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %8, i32 0, i32 9
  %9 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_and_host_free, align 4, !tbaa !58
  %call5 = tail call i32 %9(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #11
  %10 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !46
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %10, i32 0, i32 1
  %11 = load void ()*, void ()** %release_module, align 4, !tbaa !54
  tail call void %11() #11
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %12 = load i64, i64* %device, align 8, !tbaa !29
  %cmp7 = icmp eq i64 %12, 0
  br i1 %cmp7, label %if.end9, label %if.then8

if.then8:                                         ; preds = %if.then3
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([137 x i8], [137 x i8]* @.str.28, i32 0, i32 0)) #11
  tail call void @abort() #11
  br label %if.end9

if.end9:                                          ; preds = %if.then8, %if.then3
  %tobool = icmp eq i32 %call5, 0
  %selv = select i1 %tobool, i32 0, i32 -18
  br label %cleanup18

if.else11:                                        ; preds = %if.end
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 2
  %13 = load i8*, i8** %host, align 4, !tbaa !32
  %tobool12 = icmp eq i8* %13, null
  br i1 %tobool12, label %if.end17, label %if.then13

if.then13:                                        ; preds = %if.else11
  tail call void @halide_free(i8* %user_context, i8* nonnull %13) #11
  store i8* null, i8** %host, align 4, !tbaa !32
  br label %if.end17

if.end17:                                         ; preds = %if.then13, %if.else11
  %flags.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %14 = load i64, i64* %flags.i.i, align 8, !tbaa !33
  %and.i.i = and i64 %14, -3
  store i64 %and.i.i, i64* %flags.i.i, align 8, !tbaa !33
  br label %cleanup18

cleanup18:                                        ; preds = %if.end17, %if.end9, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ %selv, %if.end9 ], [ 0, %if.end17 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind
define weak i32 @halide_default_device_and_host_malloc(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.29, i32 0, i32 0)) #11
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !31
  %cmp4.i = icmp ne %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !29
  %cmp5.i = icmp ne i64 %1, 0
  %cmp5.not.i = xor i1 %cmp5.i, true
  %brmerge.i = or i1 %cmp4.i, %cmp5.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #11
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp4.not.i = xor i1 %cmp4.i, true
  %brmerge44.i = or i1 %cmp5.i, %cmp4.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #11
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !33
  %3 = and i64 %2, 3
  %4 = icmp eq i64 %3, 3
  br i1 %4, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #11
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp = icmp eq i32 %retval.2.i, 0
  br i1 %cmp, label %if.end, label %cleanup13

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit, %if.end16.i
  %dimensions.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 8
  %5 = load i32, i32* %dimensions.i.i, align 4, !tbaa !34
  %cmp18.i.i = icmp sgt i32 %5, 0
  br i1 %cmp18.i.i, label %for.body.lr.ph.i.i, label %_ZNK15halide_buffer_t3endEv.exit.thread.i

_ZNK15halide_buffer_t3endEv.exit.thread.i:        ; preds = %if.end
  %bits.i.i27.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 7, i32 1
  %6 = load i8, i8* %bits.i.i27.i, align 1, !tbaa !27
  br label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

for.body.lr.ph.i.i:                               ; preds = %if.end
  %dim.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 9
  %7 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i.i, align 8, !tbaa !35
  br label %for.body.i.i

for.body.i.i:                                     ; preds = %for.inc.i.i, %for.body.lr.ph.i.i
  %i.020.i.i = phi i32 [ 0, %for.body.lr.ph.i.i ], [ %inc.i.i, %for.inc.i.i ]
  %index.019.i.i = phi i32 [ 0, %for.body.lr.ph.i.i ], [ %index.1.i.i, %for.inc.i.i ]
  %stride.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %7, i32 %i.020.i.i, i32 2
  %8 = load i32, i32* %stride.i.i, align 4, !tbaa !39
  %cmp2.i.i = icmp sgt i32 %8, 0
  br i1 %cmp2.i.i, label %if.then.i.i, label %for.inc.i.i

if.then.i.i:                                      ; preds = %for.body.i.i
  %extent.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %7, i32 %i.020.i.i, i32 1
  %9 = load i32, i32* %extent.i.i, align 4, !tbaa !38
  %sub.i.i = add nsw i32 %9, -1
  %mul.i.i = mul nsw i32 %sub.i.i, %8
  %add.i.i = add nsw i32 %mul.i.i, %index.019.i.i
  br label %for.inc.i.i

for.inc.i.i:                                      ; preds = %if.then.i.i, %for.body.i.i
  %index.1.i.i = phi i32 [ %add.i.i, %if.then.i.i ], [ %index.019.i.i, %for.body.i.i ]
  %inc.i.i = add nuw nsw i32 %i.020.i.i, 1
  %exitcond1 = icmp eq i32 %inc.i.i, %5
  br i1 %exitcond1, label %for.body.lr.ph.i5.i, label %for.body.i.i

for.body.lr.ph.i5.i:                              ; preds = %for.inc.i.i
  %bits.i.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 7, i32 1
  %10 = load i8, i8* %bits.i.i.i, align 1, !tbaa !27
  br label %for.body.i15.i

for.body.i15.i:                                   ; preds = %for.inc.i24.i, %for.body.lr.ph.i5.i
  %i.018.i.i = phi i32 [ 0, %for.body.lr.ph.i5.i ], [ %inc.i22.i, %for.inc.i24.i ]
  %index.017.i.i = phi i32 [ 0, %for.body.lr.ph.i5.i ], [ %index.1.i21.i, %for.inc.i24.i ]
  %stride.i13.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %7, i32 %i.018.i.i, i32 2
  %11 = load i32, i32* %stride.i13.i, align 4, !tbaa !39
  %cmp2.i14.i = icmp slt i32 %11, 0
  br i1 %cmp2.i14.i, label %if.then.i20.i, label %for.inc.i24.i

if.then.i20.i:                                    ; preds = %for.body.i15.i
  %extent.i16.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %7, i32 %i.018.i.i, i32 1
  %12 = load i32, i32* %extent.i16.i, align 4, !tbaa !38
  %sub.i17.i = add nsw i32 %12, -1
  %mul.i18.i = mul nsw i32 %sub.i17.i, %11
  %add.i19.i = add nsw i32 %mul.i18.i, %index.017.i.i
  br label %for.inc.i24.i

for.inc.i24.i:                                    ; preds = %if.then.i20.i, %for.body.i15.i
  %index.1.i21.i = phi i32 [ %add.i19.i, %if.then.i20.i ], [ %index.017.i.i, %for.body.i15.i ]
  %inc.i22.i = add nuw nsw i32 %i.018.i.i, 1
  %exitcond = icmp eq i32 %inc.i22.i, %5
  br i1 %exitcond, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, label %for.body.i15.i

_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit: ; preds = %for.inc.i24.i
  %add8.i.i = add nsw i32 %index.1.i.i, 1
  br label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

_ZNK15halide_buffer_t13size_in_bytesEv.exit:      ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, %_ZNK15halide_buffer_t3endEv.exit.thread.i
  %div.i.i32.i.in.in.in = phi i8 [ %6, %_ZNK15halide_buffer_t3endEv.exit.thread.i ], [ %10, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %add8.i31.i = phi i32 [ 1, %_ZNK15halide_buffer_t3endEv.exit.thread.i ], [ %add8.i.i, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %index.0.lcssa.i6.i = phi i32 [ 0, %_ZNK15halide_buffer_t3endEv.exit.thread.i ], [ %index.1.i21.i, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %div.i.i32.i.in.in = zext i8 %div.i.i32.i.in.in.in to i32
  %div.i.i32.i.in = add nuw nsw i32 %div.i.i32.i.in.in, 7
  %div.i.i32.i = lshr i32 %div.i.i32.i.in, 3
  %mul8.i25.i = sub i32 %add8.i31.i, %index.0.lcssa.i6.i
  %13 = mul i32 %mul8.i25.i, %div.i.i32.i
  %call2 = tail call i8* @halide_malloc(i8* %user_context, i32 %13) #11
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 2
  store i8* %call2, i8** %host, align 4, !tbaa !32
  %cmp4 = icmp eq i8* %call2, null
  br i1 %cmp4, label %cleanup13, label %if.end6

if.end6:                                          ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit
  %call7 = tail call i32 @halide_device_malloc(i8* %user_context, %struct.halide_buffer_t* nonnull %buf, %struct.halide_device_interface_t* %device_interface) #12
  %cmp8 = icmp eq i32 %call7, 0
  br i1 %cmp8, label %cleanup13, label %if.then9

if.then9:                                         ; preds = %if.end6
  %14 = load i8*, i8** %host, align 4, !tbaa !32
  tail call void @halide_free(i8* %user_context, i8* %14) #11
  store i8* null, i8** %host, align 4, !tbaa !32
  br label %cleanup13

cleanup13:                                        ; preds = %if.then9, %if.end6, %_ZNK15halide_buffer_t13size_in_bytesEv.exit, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ -1, %_ZNK15halide_buffer_t13size_in_bytesEv.exit ], [ %call7, %if.then9 ], [ 0, %if.end6 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind
define weak i32 @halide_default_device_and_host_free(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.30, i32 0, i32 0)) #11
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !31
  %cmp4.i = icmp ne %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !29
  %cmp5.i = icmp ne i64 %1, 0
  %cmp5.not.i = xor i1 %cmp5.i, true
  %brmerge.i = or i1 %cmp4.i, %cmp5.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #11
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp4.not.i = xor i1 %cmp4.i, true
  %brmerge44.i = or i1 %cmp5.i, %cmp4.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #11
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !33
  %3 = and i64 %2, 3
  %4 = icmp eq i64 %3, 3
  br i1 %4, label %if.then24.i, label %if.end16.i.split

if.end16.i.split:                                 ; preds = %if.end16.i
  %call11 = tail call i32 @halide_device_free(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #12
  br label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #11
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp = icmp eq i32 %retval.2.i, 0
  br i1 %cmp, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split, label %cleanup

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %call12 = tail call i32 @halide_device_free(i8* %user_context, %struct.halide_buffer_t* %buf) #12
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split, %if.end16.i.split
  %phi.call = phi i32 [ %call11, %if.end16.i.split ], [ %call12, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split ]
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 2
  %5 = load i8*, i8** %host, align 4, !tbaa !32
  %tobool = icmp eq i8* %5, null
  br i1 %tobool, label %if.end5, label %if.then2

if.then2:                                         ; preds = %if.end
  tail call void @halide_free(i8* %user_context, i8* nonnull %5) #11
  store i8* null, i8** %host, align 4, !tbaa !32
  br label %if.end5

if.end5:                                          ; preds = %if.then2, %if.end
  %flags.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %6 = load i64, i64* %flags.i.i, align 8, !tbaa !33
  %and.i.i19 = and i64 %6, -4
  store i64 %and.i.i19, i64* %flags.i.i, align 8, !tbaa !33
  br label %cleanup

cleanup:                                          ; preds = %if.end5, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.0 = phi i32 [ %phi.call, %if.end5 ], [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ]
  ret i32 %retval.0
}

; Function Attrs: nounwind
define weak i32 @halide_device_wrap_native(i8* %user_context, %struct.halide_buffer_t* %buf, i64 %handle, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.31, i32 0, i32 0)) #11
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !31
  %cmp4.i = icmp ne %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !29
  %cmp5.i = icmp ne i64 %1, 0
  %cmp5.not.i = xor i1 %cmp5.i, true
  %brmerge.i = or i1 %cmp4.i, %cmp5.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #11
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp4.not.i = xor i1 %cmp4.i, true
  %brmerge44.i = or i1 %cmp5.i, %cmp4.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #11
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !33
  %3 = and i64 %2, 3
  %4 = icmp eq i64 %3, 3
  br i1 %4, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #11
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp = icmp eq i32 %retval.2.i, 0
  br i1 %cmp, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup12

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface1.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface1.phi.trans.insert, align 8, !tbaa !31
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %5 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp2 = icmp eq %struct.halide_device_interface_t* %5, null
  %cmp3 = icmp eq %struct.halide_device_interface_t* %5, %device_interface
  %or.cond = or i1 %cmp2, %cmp3
  br i1 %or.cond, label %if.end5, label %if.then4

if.then4:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.32, i32 0, i32 0)) #11
  br label %cleanup12

if.end5:                                          ; preds = %if.end
  %device_interface1 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %device_interface, i32 0, i32 15
  %6 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !46
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %6, i32 0, i32 0
  %7 = load void ()*, void ()** %use_module, align 4, !tbaa !52
  tail call void %7() #11
  store %struct.halide_device_interface_t* %device_interface, %struct.halide_device_interface_t** %device_interface1, align 8, !tbaa !31
  %8 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !46
  %wrap_native = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %8, i32 0, i32 14
  %9 = load i32 (i8*, %struct.halide_buffer_t*, i64)*, i32 (i8*, %struct.halide_buffer_t*, i64)** %wrap_native, align 4, !tbaa !59
  %call8 = tail call i32 %9(i8* %user_context, %struct.halide_buffer_t* nonnull %buf, i64 %handle) #11
  %10 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !46
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %10, i32 0, i32 1
  %11 = load void ()*, void ()** %release_module, align 4, !tbaa !54
  tail call void %11() #11
  %tobool = icmp eq i32 %call8, 0
  %selv = select i1 %tobool, i32 0, i32 -16
  br label %cleanup12

cleanup12:                                        ; preds = %if.end5, %if.then4, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ -42, %if.then4 ], [ %selv, %if.end5 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind
define weak i32 @halide_device_detach_native(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.33, i32 0, i32 0)) #11
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !31
  %cmp4.i = icmp ne %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !29
  %cmp5.i = icmp ne i64 %1, 0
  %cmp5.not.i = xor i1 %cmp5.i, true
  %brmerge.i = or i1 %cmp4.i, %cmp5.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #11
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp4.not.i = xor i1 %cmp4.i, true
  %brmerge44.i = or i1 %cmp5.i, %cmp4.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #11
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !33
  %3 = and i64 %2, 3
  %4 = icmp eq i64 %3, 3
  br i1 %4, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #11
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp = icmp eq i32 %retval.2.i, 0
  br i1 %cmp, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface1.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface1.phi.trans.insert, align 8, !tbaa !31
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %5 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp2 = icmp eq %struct.halide_device_interface_t* %5, null
  br i1 %cmp2, label %cleanup, label %if.then3

if.then3:                                         ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %5, i32 0, i32 15
  %6 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !46
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %6, i32 0, i32 0
  %7 = load void ()*, void ()** %use_module, align 4, !tbaa !52
  tail call void %7() #11
  %8 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !46
  %detach_native = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %8, i32 0, i32 15
  %9 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %detach_native, align 4, !tbaa !60
  %call5 = tail call i32 %9(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #11
  %10 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !46
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %10, i32 0, i32 1
  %11 = load void ()*, void ()** %release_module, align 4, !tbaa !54
  tail call void %11() #11
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %12 = load i64, i64* %device, align 8, !tbaa !29
  %cmp7 = icmp eq i64 %12, 0
  br i1 %cmp7, label %if.end9, label %if.then8

if.then8:                                         ; preds = %if.then3
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([137 x i8], [137 x i8]* @.str.34, i32 0, i32 0)) #11
  tail call void @abort() #11
  br label %if.end9

if.end9:                                          ; preds = %if.then8, %if.then3
  %tobool = icmp eq i32 %call5, 0
  %spec.select = select i1 %tobool, i32 0, i32 -33
  ret i32 %spec.select

cleanup:                                          ; preds = %if.end, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.2.i27 = phi i32 [ 0, %if.end ], [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ]
  ret i32 %retval.2.i27
}

; Function Attrs: nounwind
define weak i32 @halide_default_device_wrap_native(i8* %user_context, %struct.halide_buffer_t* %buf, i64 %handle) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.35, i32 0, i32 0)) #11
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !31
  %cmp4.i = icmp ne %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !29
  %cmp5.i = icmp ne i64 %1, 0
  %cmp5.not.i = xor i1 %cmp5.i, true
  %brmerge.i = or i1 %cmp4.i, %cmp5.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #11
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp4.not.i = xor i1 %cmp4.i, true
  %brmerge44.i = or i1 %cmp5.i, %cmp4.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #11
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !33
  %3 = and i64 %2, 3
  %4 = icmp eq i64 %3, 3
  br i1 %4, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #11
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp = icmp eq i32 %retval.2.i, 0
  br i1 %cmp, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.phi.trans.insert, align 8, !tbaa !31
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %5 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %5, i32 0, i32 15
  %6 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !46
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %6, i32 0, i32 0
  %7 = load void ()*, void ()** %use_module, align 4, !tbaa !52
  tail call void %7() #11
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  store i64 %handle, i64* %device, align 8, !tbaa !29
  br label %cleanup

cleanup:                                          ; preds = %if.end, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.0 = phi i32 [ 0, %if.end ], [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ]
  ret i32 %retval.0
}

; Function Attrs: nounwind
define weak i32 @halide_default_device_detach_native(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.36, i32 0, i32 0)) #11
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !31
  %cmp4.i = icmp ne %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !29
  %cmp5.i = icmp ne i64 %1, 0
  %cmp5.not.i = xor i1 %cmp5.i, true
  %brmerge.i = or i1 %cmp4.i, %cmp5.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #11
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp4.not.i = xor i1 %cmp4.i, true
  %brmerge44.i = or i1 %cmp5.i, %cmp4.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #11
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !33
  %3 = and i64 %2, 3
  %4 = icmp eq i64 %3, 3
  br i1 %4, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #11
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp = icmp eq i32 %retval.2.i, 0
  br i1 %cmp, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %.pre = load i64, i64* %device.phi.trans.insert, align 8, !tbaa !29
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %5 = phi i64 [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %1, %if.end16.i ]
  %cmp1 = icmp eq i64 %5, 0
  br i1 %cmp1, label %cleanup, label %if.end3

if.end3:                                          ; preds = %if.end
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %6 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !31
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %6, i32 0, i32 15
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !46
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i32 0, i32 1
  %8 = load void ()*, void ()** %release_module, align 4, !tbaa !54
  tail call void %8() #11
  store i64 0, i64* %device, align 8, !tbaa !29
  store %struct.halide_device_interface_t* null, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !31
  br label %cleanup

cleanup:                                          ; preds = %if.end3, %if.end, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.0 = phi i32 [ 0, %if.end3 ], [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ 0, %if.end ]
  ret i32 %retval.0
}

; Function Attrs: nounwind
define weak void @halide_device_and_host_free_as_destructor(i8* %user_context, i8* %obj) local_unnamed_addr #0 {
entry:
  %0 = bitcast i8* %obj to %struct.halide_buffer_t*
  %call = tail call i32 @halide_device_and_host_free(i8* %user_context, %struct.halide_buffer_t* %0) #12
  ret void
}

; Function Attrs: norecurse nounwind
define weak void @halide_device_host_nop_free(i8* %user_context, i8* %obj) local_unnamed_addr #3 {
entry:
  ret void
}

; Function Attrs: norecurse nounwind
define weak i32 @halide_default_buffer_copy(i8* %user_context, %struct.halide_buffer_t* %src, %struct.halide_device_interface_t* %dst_device_interface, %struct.halide_buffer_t* %dst) local_unnamed_addr #3 {
entry:
  ret i32 -39
}

; Function Attrs: nounwind
define weak i32 @halide_buffer_copy_already_locked(i8* %user_context, %struct.halide_buffer_t* %src, %struct.halide_device_interface_t* %dst_device_interface, %struct.halide_buffer_t* %dst) local_unnamed_addr #0 {
entry:
  %c = alloca %"struct.Halide::Runtime::Internal::device_copy", align 8
  %tobool = icmp ne %struct.halide_device_interface_t* %dst_device_interface, null
  br i1 %tobool, label %land.lhs.true, label %if.end13

land.lhs.true:                                    ; preds = %entry
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !31
  %tobool1 = icmp eq %struct.halide_device_interface_t* %0, null
  %cmp = icmp eq %struct.halide_device_interface_t* %0, %dst_device_interface
  %or.cond = or i1 %tobool1, %cmp
  br i1 %or.cond, label %land.lhs.true5, label %if.then

if.then:                                          ; preds = %land.lhs.true
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.42, i32 0, i32 0)) #11
  br label %cleanup135

land.lhs.true5:                                   ; preds = %land.lhs.true
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 0
  %1 = load i64, i64* %device, align 8, !tbaa !29
  %tobool6 = icmp eq i64 %1, 0
  br i1 %tobool6, label %if.then7, label %if.end13

if.then7:                                         ; preds = %land.lhs.true5
  %call = tail call i32 @halide_device_malloc(i8* %user_context, %struct.halide_buffer_t* nonnull %dst, %struct.halide_device_interface_t* nonnull %dst_device_interface) #12
  %tobool10 = icmp eq i32 %call, 0
  br i1 %tobool10, label %if.end13, label %cleanup135

if.end13:                                         ; preds = %if.then7, %land.lhs.true5, %entry
  %device14 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 0
  %2 = load i64, i64* %device14, align 8, !tbaa !29
  %cmp15 = icmp eq i64 %2, 0
  %host22.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 2
  %.pre = load i8*, i8** %host22.phi.trans.insert, align 4, !tbaa !32
  br i1 %cmp15, label %land.end, label %land.rhs

land.rhs:                                         ; preds = %if.end13
  %cmp16 = icmp eq i8* %.pre, null
  br i1 %cmp16, label %land.end.thread258, label %land.end.thread

land.end.thread258:                               ; preds = %land.rhs
  %cmp20259 = icmp eq %struct.halide_device_interface_t* %dst_device_interface, null
  br label %land.end32

land.end.thread:                                  ; preds = %land.rhs
  %flags.i.i241 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 3
  %3 = load i64, i64* %flags.i.i241, align 8, !tbaa !33
  %and.i.i242 = and i64 %3, 1
  %cmp.i.i = icmp ne i64 %and.i.i242, 0
  %cmp20252 = icmp eq %struct.halide_device_interface_t* %dst_device_interface, null
  br label %land.rhs26

land.end:                                         ; preds = %if.end13
  %cmp20 = icmp eq %struct.halide_device_interface_t* %dst_device_interface, null
  %cmp23 = icmp eq i8* %.pre, null
  br i1 %cmp23, label %land.end32, label %land.end.land.rhs26_crit_edge

land.end.land.rhs26_crit_edge:                    ; preds = %land.end
  %flags.i.i246.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 3
  %.pre1 = load i64, i64* %flags.i.i246.phi.trans.insert, align 8, !tbaa !33
  br label %land.rhs26

land.rhs26:                                       ; preds = %land.end.land.rhs26_crit_edge, %land.end.thread
  %4 = phi i64 [ %3, %land.end.thread ], [ %.pre1, %land.end.land.rhs26_crit_edge ]
  %cmp20255 = phi i1 [ %cmp20252, %land.end.thread ], [ %cmp20, %land.end.land.rhs26_crit_edge ]
  %5 = phi i1 [ %cmp.i.i, %land.end.thread ], [ true, %land.end.land.rhs26_crit_edge ]
  %and.i.i247 = and i64 %4, 2
  %cmp.i.i248 = icmp eq i64 %and.i.i247, 0
  br i1 %cmp.i.i248, label %land.end32, label %lor.rhs28

lor.rhs28:                                        ; preds = %land.rhs26
  %device_interface29 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 1
  %6 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface29, align 8, !tbaa !31
  %cmp30 = icmp ne %struct.halide_device_interface_t* %6, null
  br label %land.end32

land.end32:                                       ; preds = %lor.rhs28, %land.rhs26, %land.end, %land.end.thread258
  %cmp23256 = phi i1 [ false, %land.end ], [ true, %land.rhs26 ], [ true, %lor.rhs28 ], [ false, %land.end.thread258 ]
  %cmp20254 = phi i1 [ %cmp20, %land.end ], [ %cmp20255, %land.rhs26 ], [ %cmp20255, %lor.rhs28 ], [ %cmp20259, %land.end.thread258 ]
  %7 = phi i1 [ true, %land.end ], [ %5, %land.rhs26 ], [ %5, %lor.rhs28 ], [ false, %land.end.thread258 ]
  %8 = phi i1 [ true, %land.end ], [ false, %land.rhs26 ], [ %cmp30, %lor.rhs28 ], [ true, %land.end.thread258 ]
  %host34 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 2
  %9 = load i8*, i8** %host34, align 4, !tbaa !32
  %cmp35 = icmp ne i8* %9, null
  %cmp20.not = xor i1 %cmp20254, true
  %brmerge = or i1 %cmp35, %cmp20.not
  br i1 %brmerge, label %if.end41, label %cleanup135

if.end41:                                         ; preds = %land.end32
  %tobool.not = xor i1 %tobool, true
  %brmerge228 = or i1 %7, %tobool.not
  br i1 %brmerge228, label %if.then51, label %if.end49

if.end49:                                         ; preds = %if.end41
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %dst_device_interface, i32 0, i32 15
  %10 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !46
  %buffer_copy = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %10, i32 0, i32 10
  %11 = load i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)** %buffer_copy, align 4, !tbaa !61
  %call48 = tail call i32 %11(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* nonnull %dst_device_interface, %struct.halide_buffer_t* nonnull %dst) #11
  %cmp50 = icmp eq i32 %call48, -42
  br i1 %cmp50, label %if.then51, label %if.end109

if.then51:                                        ; preds = %if.end49, %if.end41
  %brmerge229 = or i1 %cmp23256, %cmp35
  br i1 %brmerge229, label %if.end58, label %cleanup135

if.end58:                                         ; preds = %if.then51
  %brmerge232 = or i1 %8, %cmp20.not
  br i1 %brmerge232, label %if.else, label %if.end109.thread223

if.end109.thread223:                              ; preds = %if.end58
  %12 = bitcast %"struct.Halide::Runtime::Internal::device_copy"* %c to i8*
  call void @llvm.lifetime.start.p0i8(i64 416, i8* nonnull %12) #9
  call void @_ZN6Halide7Runtime8Internal16make_buffer_copyEPK15halide_buffer_tbS4_b(%"struct.Halide::Runtime::Internal::device_copy"* nonnull sret %c, %struct.halide_buffer_t* nonnull %src, i1 zeroext true, %struct.halide_buffer_t* nonnull %dst, i1 zeroext true) #12
  call void @_ZN6Halide7Runtime8Internal11copy_memoryERKNS1_11device_copyEPv(%"struct.Halide::Runtime::Internal::device_copy"* nonnull dereferenceable(416) %c, i8* %user_context) #12
  call void @llvm.lifetime.end.p0i8(i64 416, i8* nonnull %12) #9
  br label %land.lhs.true118

if.else:                                          ; preds = %if.end58
  br i1 %cmp20254, label %if.then64, label %if.else79

if.then64:                                        ; preds = %if.else
  %device_interface67 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 1
  %13 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface67, align 8, !tbaa !31
  %impl68 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %13, i32 0, i32 15
  %14 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl68, align 4, !tbaa !46
  %buffer_copy69 = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %14, i32 0, i32 10
  %15 = load i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)** %buffer_copy69, align 4, !tbaa !61
  %call70 = tail call i32 %15(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* null, %struct.halide_buffer_t* nonnull %dst) #11
  %cmp71 = icmp eq i32 %call70, -42
  br i1 %cmp71, label %if.then72, label %if.end109

if.then72:                                        ; preds = %if.then64
  %call73 = tail call i32 @_ZN6Halide7Runtime8Internal27copy_to_host_already_lockedEPvP15halide_buffer_t(i8* %user_context, %struct.halide_buffer_t* nonnull %src) #12
  %tobool74 = icmp eq i32 %call73, 0
  br i1 %tobool74, label %if.then75, label %cleanup135

if.then75:                                        ; preds = %if.then72
  %call76 = tail call i32 @halide_buffer_copy_already_locked(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* null, %struct.halide_buffer_t* nonnull %dst) #12
  br label %if.end109

if.else79:                                        ; preds = %if.else
  %cmp35.not = xor i1 %cmp35, true
  %brmerge234 = or i1 %7, %cmp35.not
  br i1 %brmerge234, label %if.else96, label %if.then83

if.then83:                                        ; preds = %if.else79
  %device_interface88 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 1
  %16 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface88, align 8, !tbaa !31
  %impl89 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %16, i32 0, i32 15
  %17 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl89, align 4, !tbaa !46
  %buffer_copy90 = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %17, i32 0, i32 10
  %18 = load i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)** %buffer_copy90, align 4, !tbaa !61
  %call91 = tail call i32 %18(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* null, %struct.halide_buffer_t* nonnull %dst) #11
  %cmp92 = icmp eq i32 %call91, 0
  br i1 %cmp92, label %if.then93, label %cleanup135

if.then93:                                        ; preds = %if.then83
  %flags.i.i243 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 3
  %19 = load i64, i64* %flags.i.i243, align 8, !tbaa !33
  %or.i.i244 = or i64 %19, 1
  store i64 %or.i.i244, i64* %flags.i.i243, align 8, !tbaa !33
  %call94 = tail call i32 @copy_to_device_already_locked(i8* %user_context, %struct.halide_buffer_t* nonnull %dst, %struct.halide_device_interface_t* nonnull %dst_device_interface) #12
  br label %if.end109

if.else96:                                        ; preds = %if.else79
  %call99 = tail call i32 @_ZN6Halide7Runtime8Internal27copy_to_host_already_lockedEPvP15halide_buffer_t(i8* %user_context, %struct.halide_buffer_t* nonnull %src) #12
  %cmp100 = icmp eq i32 %call99, 0
  br i1 %cmp100, label %if.then101, label %cleanup135

if.then101:                                       ; preds = %if.else96
  %impl102 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %dst_device_interface, i32 0, i32 15
  %20 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl102, align 4, !tbaa !46
  %buffer_copy103 = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %20, i32 0, i32 10
  %21 = load i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)** %buffer_copy103, align 4, !tbaa !61
  %call104 = tail call i32 %21(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* nonnull %dst_device_interface, %struct.halide_buffer_t* nonnull %dst) #11
  br label %if.end109

if.end109:                                        ; preds = %if.then101, %if.then93, %if.then75, %if.then64, %if.end49
  %err.1 = phi i32 [ %call76, %if.then75 ], [ %call70, %if.then64 ], [ %call94, %if.then93 ], [ %call104, %if.then101 ], [ %call48, %if.end49 ]
  %cmp110 = icmp eq i32 %err.1, 0
  br i1 %cmp110, label %land.lhs.true118, label %cleanup135

land.lhs.true118:                                 ; preds = %if.end109, %if.end109.thread223
  %cmp119 = icmp eq %struct.halide_buffer_t* %dst, %src
  br i1 %cmp119, label %cleanup135, label %if.then120

if.then120:                                       ; preds = %land.lhs.true118
  %flags.i.i238 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 3
  %22 = load i64, i64* %flags.i.i238, align 8, !tbaa !33
  %and.i.i240 = and i64 %22, -4
  %selv.v = select i1 %tobool, i64 2, i64 1
  %selv = or i64 %and.i.i240, %selv.v
  store i64 %selv, i64* %flags.i.i238, align 8, !tbaa !33
  br label %cleanup135

cleanup135:                                       ; preds = %if.then120, %land.lhs.true118, %if.end109, %if.else96, %if.then83, %if.then72, %if.then51, %land.end32, %if.then7, %if.then
  %retval.1 = phi i32 [ -42, %if.then ], [ %call, %if.then7 ], [ 0, %land.lhs.true118 ], [ -34, %land.end32 ], [ -42, %if.then51 ], [ %err.1, %if.end109 ], [ %call99, %if.else96 ], [ %call91, %if.then83 ], [ %call73, %if.then72 ], [ 0, %if.then120 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind
define weak i32 @halide_buffer_copy(i8* %user_context, %struct.halide_buffer_t* %src, %struct.halide_device_interface_t* %dst_device_interface, %struct.halide_buffer_t* %dst) local_unnamed_addr #0 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #11
  %tobool = icmp ne %struct.halide_device_interface_t* %dst_device_interface, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %dst_device_interface, i32 0, i32 15
  %0 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !46
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %0, i32 0, i32 0
  %1 = load void ()*, void ()** %use_module, align 4, !tbaa !52
  tail call void %1() #11
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 1
  %2 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !31
  %tobool11 = icmp eq %struct.halide_device_interface_t* %2, null
  br i1 %tobool11, label %if.end16, label %if.then12

if.then12:                                        ; preds = %if.end
  %impl14 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %2, i32 0, i32 15
  %3 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl14, align 4, !tbaa !46
  %use_module15 = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %3, i32 0, i32 0
  %4 = load void ()*, void ()** %use_module15, align 4, !tbaa !52
  tail call void %4() #11
  br label %if.end16

if.end16:                                         ; preds = %if.then12, %if.end
  %call = tail call i32 @halide_buffer_copy_already_locked(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* %dst_device_interface, %struct.halide_buffer_t* %dst) #12
  br i1 %tobool, label %if.then18, label %if.end20

if.then18:                                        ; preds = %if.end16
  %impl19 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %dst_device_interface, i32 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl19, align 4, !tbaa !46
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i32 0, i32 1
  %6 = load void ()*, void ()** %release_module, align 4, !tbaa !54
  tail call void %6() #11
  br label %if.end20

if.end20:                                         ; preds = %if.then18, %if.end16
  %7 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !31
  %tobool22 = icmp eq %struct.halide_device_interface_t* %7, null
  br i1 %tobool22, label %if.end27, label %if.then23

if.then23:                                        ; preds = %if.end20
  %impl25 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %7, i32 0, i32 15
  %8 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl25, align 4, !tbaa !46
  %release_module26 = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %8, i32 0, i32 1
  %9 = load void ()*, void ()** %release_module26, align 4, !tbaa !54
  tail call void %9() #11
  br label %if.end27

if.end27:                                         ; preds = %if.then23, %if.end20
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #11
  ret i32 %call
}

; Function Attrs: nounwind
define weak i32 @halide_default_device_crop(i8* %user_context, %struct.halide_buffer_t* %src, %struct.halide_buffer_t* %dst) local_unnamed_addr #0 {
entry:
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.58, i32 0, i32 0)) #11
  ret i32 -40
}

; Function Attrs: nounwind
define weak i32 @halide_default_device_slice(i8* %user_context, %struct.halide_buffer_t* %src, i32 %slice_dim, i32 %slice_pos, %struct.halide_buffer_t* %dst) local_unnamed_addr #0 {
entry:
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.59, i32 0, i32 0)) #11
  ret i32 -40
}

; Function Attrs: nounwind
define weak i32 @halide_device_crop(i8* %user_context, %struct.halide_buffer_t* %src, %struct.halide_buffer_t* %dst) local_unnamed_addr #0 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #11
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !29
  %tobool = icmp eq i64 %0, 0
  br i1 %tobool, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %device1 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 0
  %1 = load i64, i64* %device1, align 8, !tbaa !29
  %tobool2 = icmp eq i64 %1, 0
  br i1 %tobool2, label %if.end4, label %if.then3

if.then3:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.60, i32 0, i32 0)) #11
  br label %cleanup

if.end4:                                          ; preds = %if.end
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 8
  %2 = load i32, i32* %dimensions, align 4, !tbaa !34
  %dimensions5 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 8
  %3 = load i32, i32* %dimensions5, align 4, !tbaa !34
  %cmp = icmp eq i32 %2, %3
  br i1 %cmp, label %if.end7, label %if.then6

if.then6:                                         ; preds = %if.end4
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.61, i32 0, i32 0)) #11
  br label %cleanup

if.end7:                                          ; preds = %if.end4
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 1
  %4 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !31
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i32 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !46
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i32 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 4, !tbaa !52
  tail call void %6() #11
  %7 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !31
  %impl9 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %7, i32 0, i32 15
  %8 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl9, align 4, !tbaa !46
  %device_crop = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %8, i32 0, i32 11
  %9 = load i32 (i8*, %struct.halide_buffer_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_buffer_t*)** %device_crop, align 4, !tbaa !62
  %call = tail call i32 %9(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_buffer_t* nonnull %dst) #11
  br label %cleanup

cleanup:                                          ; preds = %if.end7, %if.then6, %if.then3, %entry
  %retval.0 = phi i32 [ -41, %if.then3 ], [ -41, %if.then6 ], [ %call, %if.end7 ], [ 0, %entry ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #11
  ret i32 %retval.0
}

; Function Attrs: nounwind
define weak i32 @halide_device_slice(i8* %user_context, %struct.halide_buffer_t* %src, i32 %slice_dim, i32 %slice_pos, %struct.halide_buffer_t* %dst) local_unnamed_addr #0 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #11
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !29
  %tobool = icmp eq i64 %0, 0
  br i1 %tobool, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %device1 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 0
  %1 = load i64, i64* %device1, align 8, !tbaa !29
  %tobool2 = icmp eq i64 %1, 0
  br i1 %tobool2, label %if.end4, label %if.then3

if.then3:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.60, i32 0, i32 0)) #11
  br label %cleanup

if.end4:                                          ; preds = %if.end
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 8
  %2 = load i32, i32* %dimensions, align 4, !tbaa !34
  %dimensions5 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 8
  %3 = load i32, i32* %dimensions5, align 4, !tbaa !34
  %add = add nsw i32 %3, 1
  %cmp = icmp eq i32 %2, %add
  br i1 %cmp, label %if.end7, label %if.then6

if.then6:                                         ; preds = %if.end4
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.64, i32 0, i32 0)) #11
  br label %cleanup

if.end7:                                          ; preds = %if.end4
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 1
  %4 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !31
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i32 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !46
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i32 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 4, !tbaa !52
  tail call void %6() #11
  %7 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !31
  %impl9 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %7, i32 0, i32 15
  %8 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl9, align 4, !tbaa !46
  %device_slice = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %8, i32 0, i32 12
  %9 = load i32 (i8*, %struct.halide_buffer_t*, i32, i32, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, i32, i32, %struct.halide_buffer_t*)** %device_slice, align 4, !tbaa !63
  %call = tail call i32 %9(i8* %user_context, %struct.halide_buffer_t* nonnull %src, i32 %slice_dim, i32 %slice_pos, %struct.halide_buffer_t* nonnull %dst) #11
  br label %cleanup

cleanup:                                          ; preds = %if.end7, %if.then6, %if.then3, %entry
  %retval.0 = phi i32 [ -41, %if.then3 ], [ -41, %if.then6 ], [ %call, %if.end7 ], [ 0, %entry ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #11
  ret i32 %retval.0
}

; Function Attrs: nounwind
define weak i32 @halide_default_device_release_crop(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !29
  %tobool = icmp eq i64 %0, 0
  br i1 %tobool, label %return, label %if.end

if.end:                                           ; preds = %entry
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.58, i32 0, i32 0)) #11
  br label %return

return:                                           ; preds = %if.end, %entry
  %retval.0 = phi i32 [ -40, %if.end ], [ 0, %entry ]
  ret i32 %retval.0
}

; Function Attrs: nounwind
define weak i32 @halide_device_release_crop(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !29
  %tobool = icmp eq i64 %0, 0
  br i1 %tobool, label %return, label %if.then

if.then:                                          ; preds = %entry
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #11
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %1 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !31
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %1, i32 0, i32 15
  %2 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !46
  %device_release_crop = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %2, i32 0, i32 13
  %3 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_release_crop, align 4, !tbaa !64
  %call = tail call i32 %3(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #11
  store i64 0, i64* %device, align 8, !tbaa !29
  %4 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !46
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %4, i32 0, i32 1
  %5 = load void ()*, void ()** %release_module, align 4, !tbaa !54
  tail call void %5() #11
  store %struct.halide_device_interface_t* null, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !31
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #11
  br label %return

return:                                           ; preds = %if.then, %entry
  %retval.0 = phi i32 [ %call, %if.then ], [ 0, %entry ]
  ret i32 %retval.0
}

; Function Attrs: nounwind
define weak float @halide_float16_bits_to_float(i16 zeroext %bits) local_unnamed_addr #0 {
entry:
  %conv = zext i16 %bits to i32
  %and = shl nuw i32 %conv, 16
  %shl = and i32 %and, -2147483648
  %and2 = and i32 %conv, 1023
  %and4 = lshr i32 %conv, 10
  %0 = and i32 %and4, 31
  %cmp = icmp eq i32 %0, 0
  %cmp5 = icmp ne i32 %and2, 0
  %or.cond = and i1 %cmp5, %cmp
  br i1 %or.cond, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = tail call i32 @llvm.ctlz.i32(i32 %and2, i1 true), !range !65
  %sub6 = xor i32 %1, 31
  %shl7 = shl i32 1, %sub6
  %neg = xor i32 %shl7, -1
  %and8 = and i32 %and2, %neg
  %sub9 = sub nsw i32 23, %sub6
  %shl10 = shl i32 %and8, %sub9
  %add11 = shl nuw nsw i32 %sub6, 23
  %shl12 = add nuw nsw i32 %add11, 864026624
  br label %if.end28

if.else:                                          ; preds = %entry
  %shl14 = shl nuw nsw i32 %and2, 13
  br i1 %cmp, label %if.end28, label %if.else18

if.else18:                                        ; preds = %if.else
  %cmp19 = icmp eq i32 %0, 31
  %add22 = shl nuw nsw i32 %0, 23
  %add22.op = add nuw nsw i32 %add22, 939524096
  %phitmp = select i1 %cmp19, i32 2139095040, i32 %add22.op
  br label %if.end28

if.end28:                                         ; preds = %if.else18, %if.else, %if.then
  %shl14.sink = phi i32 [ %shl12, %if.then ], [ %shl14, %if.else ], [ %shl14, %if.else18 ]
  %reEncodedExponent15.0.sink = phi i32 [ %shl10, %if.then ], [ 0, %if.else ], [ %phitmp, %if.else18 ]
  %or25 = or i32 %shl14.sink, %shl
  %or26 = or i32 %or25, %reEncodedExponent15.0.sink
  %2 = bitcast i32 %or26 to float
  ret float %2
}

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.ctlz.i32(i32, i1) #6

; Function Attrs: nounwind
define weak double @halide_float16_bits_to_double(i16 zeroext %bits) local_unnamed_addr #0 {
entry:
  %call = tail call float @halide_float16_bits_to_float(i16 zeroext %bits) #12
  %conv = fpext float %call to double
  ret double %conv
}

; Function Attrs: norecurse nounwind
define weak i32 @halide_error_check_fault_and_return(i8* %user_context, i32 %err_code) local_unnamed_addr #3 {
entry:
  %sub = sub nsw i32 0, %err_code
  %shl = shl i32 1, %sub
  %conv = sext i32 %shl to i64
  %0 = load i64, i64* @halide_error_mask, align 8, !tbaa !22
  %and = and i64 %0, %conv
  %tobool = icmp eq i64 %and, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store volatile i32 -559038737, i32* null, align 536870912, !tbaa !10
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret i32 %err_code
}

; Function Attrs: nounwind
define weak i32 @halide_error_bounds_inference_call_failed(i8* %user_context, i8* %extern_stage_name, i32 %result) local_unnamed_addr #0 {
entry:
  %call.i = tail call i8* @halide_malloc(i8* %user_context, i32 1024) #11
  %0 = ptrtoint i8* %call.i to i32
  %tobool5.i = icmp eq i8* %call.i, null
  br i1 %tobool5.i, label %entry.split, label %if.then.i

entry.split:                                      ; preds = %entry
  %call5.i1 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* nonnull getelementptr inbounds ([41 x i8], [41 x i8]* @.str.37, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit

if.then.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !7
  %call5.i2 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* nonnull getelementptr inbounds ([41 x i8], [41 x i8]* @.str.37, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then.i
  %phi.call = phi i8* [ %call5.i1, %entry.split ], [ %call5.i2, %if.then.i ]
  %ref.tmp.sroa.13.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then.i ]
  %cmp.i = icmp eq i8* %extern_stage_name, null
  br i1 %cmp.i, label %if.then.i11, label %if.else.i13

if.then.i11:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit
  %call.i10 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.13.0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.78, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit

if.else.i13:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit
  %call5.i12 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.13.0, i8* nonnull %extern_stage_name) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit: ; preds = %if.else.i13, %if.then.i11
  %storemerge.i = phi i8* [ %call5.i12, %if.else.i13 ], [ %call.i10, %if.then.i11 ]
  %call5.i16 = tail call i8* @halide_string_to_string(i8* %storemerge.i, i8* %ref.tmp.sroa.13.0, i8* nonnull getelementptr inbounds ([27 x i8], [27 x i8]* @.str.1.38, i32 0, i32 0)) #11
  %conv.i = sext i32 %result to i64
  %call.i21 = tail call i8* @halide_int64_to_string(i8* %call5.i16, i8* %ref.tmp.sroa.13.0, i64 %conv.i, i32 1) #11
  br i1 %tobool5.i, label %if.then.i24, label %if.else.i25

if.then.i24:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.8.103, i32 0, i32 0)) #11
  tail call void @halide_free(i8* %user_context, i8* null) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit

if.else.i25:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit
  %1 = ptrtoint i8* %call.i21 to i32
  %sub.ptr.sub.i.i = sub i32 1, %0
  %add.i.i = add i32 %sub.ptr.sub.i.i, %1
  %conv.i.i = sext i32 %add.i.i to i64
  tail call void @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #11
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #11
  tail call void @halide_free(i8* %user_context, i8* nonnull %call.i) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit: ; preds = %if.else.i25, %if.then.i24
  ret i32 %result
}

; Function Attrs: nounwind
define weak i32 @halide_error_extern_stage_failed(i8* %user_context, i8* %extern_stage_name, i32 %result) local_unnamed_addr #0 {
entry:
  %call.i = tail call i8* @halide_malloc(i8* %user_context, i32 1024) #11
  %0 = ptrtoint i8* %call.i to i32
  %tobool5.i = icmp eq i8* %call.i, null
  br i1 %tobool5.i, label %entry.split, label %if.then.i

entry.split:                                      ; preds = %entry
  %call5.i1 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* nonnull getelementptr inbounds ([24 x i8], [24 x i8]* @.str.2.39, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit

if.then.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !7
  %call5.i2 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* nonnull getelementptr inbounds ([24 x i8], [24 x i8]* @.str.2.39, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then.i
  %phi.call = phi i8* [ %call5.i1, %entry.split ], [ %call5.i2, %if.then.i ]
  %ref.tmp.sroa.13.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then.i ]
  %cmp.i = icmp eq i8* %extern_stage_name, null
  br i1 %cmp.i, label %if.then.i11, label %if.else.i13

if.then.i11:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit
  %call.i10 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.13.0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.78, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit

if.else.i13:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit
  %call5.i12 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.13.0, i8* nonnull %extern_stage_name) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit: ; preds = %if.else.i13, %if.then.i11
  %storemerge.i = phi i8* [ %call5.i12, %if.else.i13 ], [ %call.i10, %if.then.i11 ]
  %call5.i16 = tail call i8* @halide_string_to_string(i8* %storemerge.i, i8* %ref.tmp.sroa.13.0, i8* nonnull getelementptr inbounds ([27 x i8], [27 x i8]* @.str.1.38, i32 0, i32 0)) #11
  %conv.i = sext i32 %result to i64
  %call.i21 = tail call i8* @halide_int64_to_string(i8* %call5.i16, i8* %ref.tmp.sroa.13.0, i64 %conv.i, i32 1) #11
  br i1 %tobool5.i, label %if.then.i24, label %if.else.i25

if.then.i24:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.8.103, i32 0, i32 0)) #11
  tail call void @halide_free(i8* %user_context, i8* null) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit

if.else.i25:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit
  %1 = ptrtoint i8* %call.i21 to i32
  %sub.ptr.sub.i.i = sub i32 1, %0
  %add.i.i = add i32 %sub.ptr.sub.i.i, %1
  %conv.i.i = sext i32 %add.i.i to i64
  tail call void @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #11
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #11
  tail call void @halide_free(i8* %user_context, i8* nonnull %call.i) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit: ; preds = %if.else.i25, %if.then.i24
  ret i32 %result
}

; Function Attrs: nounwind
define weak i32 @halide_error_explicit_bounds_too_small(i8* %user_context, i8* %func_name, i8* %var_name, i32 %min_bound, i32 %max_bound, i32 %min_required, i32 %max_required) local_unnamed_addr #0 {
entry:
  %call.i = tail call i8* @halide_malloc(i8* %user_context, i32 1024) #11
  %0 = ptrtoint i8* %call.i to i32
  %tobool5.i = icmp eq i8* %call.i, null
  br i1 %tobool5.i, label %entry.split, label %if.then.i

entry.split:                                      ; preds = %entry
  %call5.i1 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* nonnull getelementptr inbounds ([18 x i8], [18 x i8]* @.str.3.40, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit

if.then.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !7
  %call5.i2 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* nonnull getelementptr inbounds ([18 x i8], [18 x i8]* @.str.3.40, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then.i
  %phi.call = phi i8* [ %call5.i1, %entry.split ], [ %call5.i2, %if.then.i ]
  %ref.tmp.sroa.22.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then.i ]
  %cmp.i = icmp eq i8* %var_name, null
  br i1 %cmp.i, label %if.then.i21, label %if.else.i23

if.then.i21:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit
  %call.i20 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.78, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit

if.else.i23:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit
  %call5.i22 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.22.0, i8* nonnull %var_name) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit: ; preds = %if.else.i23, %if.then.i21
  %storemerge.i = phi i8* [ %call5.i22, %if.else.i23 ], [ %call.i20, %if.then.i21 ]
  %call5.i26 = tail call i8* @halide_string_to_string(i8* %storemerge.i, i8* %ref.tmp.sroa.22.0, i8* nonnull getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4.41, i32 0, i32 0)) #11
  %cmp.i29 = icmp eq i8* %func_name, null
  br i1 %cmp.i29, label %if.then.i33, label %if.else.i35

if.then.i33:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit
  %call.i32 = tail call i8* @halide_string_to_string(i8* %call5.i26, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.78, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit37

if.else.i35:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit
  %call5.i34 = tail call i8* @halide_string_to_string(i8* %call5.i26, i8* %ref.tmp.sroa.22.0, i8* nonnull %func_name) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit37

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit37: ; preds = %if.else.i35, %if.then.i33
  %storemerge.i36 = phi i8* [ %call5.i34, %if.else.i35 ], [ %call.i32, %if.then.i33 ]
  %call5.i40 = tail call i8* @halide_string_to_string(i8* %storemerge.i36, i8* %ref.tmp.sroa.22.0, i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.5.42, i32 0, i32 0)) #11
  %conv.i = sext i32 %min_bound to i64
  %call.i45 = tail call i8* @halide_int64_to_string(i8* %call5.i40, i8* %ref.tmp.sroa.22.0, i64 %conv.i, i32 1) #11
  %call5.i48 = tail call i8* @halide_string_to_string(i8* %call.i45, i8* %ref.tmp.sroa.22.0, i8* nonnull getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6.43, i32 0, i32 0)) #11
  %conv.i53 = sext i32 %max_bound to i64
  %call.i54 = tail call i8* @halide_int64_to_string(i8* %call5.i48, i8* %ref.tmp.sroa.22.0, i64 %conv.i53, i32 1) #11
  %call5.i57 = tail call i8* @halide_string_to_string(i8* %call.i54, i8* %ref.tmp.sroa.22.0, i8* nonnull getelementptr inbounds ([38 x i8], [38 x i8]* @.str.7.44, i32 0, i32 0)) #11
  %conv.i62 = sext i32 %min_required to i64
  %call.i63 = tail call i8* @halide_int64_to_string(i8* %call5.i57, i8* %ref.tmp.sroa.22.0, i64 %conv.i62, i32 1) #11
  %call5.i66 = tail call i8* @halide_string_to_string(i8* %call.i63, i8* %ref.tmp.sroa.22.0, i8* nonnull getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6.43, i32 0, i32 0)) #11
  %conv.i71 = sext i32 %max_required to i64
  %call.i72 = tail call i8* @halide_int64_to_string(i8* %call5.i66, i8* %ref.tmp.sroa.22.0, i64 %conv.i71, i32 1) #11
  %call5.i75 = tail call i8* @halide_string_to_string(i8* %call.i72, i8* %ref.tmp.sroa.22.0, i8* nonnull getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5.94, i32 0, i32 0)) #11
  br i1 %tobool5.i, label %if.then.i80, label %if.else.i81

if.then.i80:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit37
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.8.103, i32 0, i32 0)) #11
  tail call void @halide_free(i8* %user_context, i8* null) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit

if.else.i81:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit37
  %1 = ptrtoint i8* %call5.i75 to i32
  %sub.ptr.sub.i.i = sub i32 1, %0
  %add.i.i = add i32 %sub.ptr.sub.i.i, %1
  %conv.i.i = sext i32 %add.i.i to i64
  tail call void @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #11
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #11
  tail call void @halide_free(i8* %user_context, i8* nonnull %call.i) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit: ; preds = %if.else.i81, %if.then.i80
  %call13 = tail call i32 @halide_error_check_fault_and_return(i8* %user_context, i32 -2) #12
  ret i32 %call13
}

; Function Attrs: nounwind
define weak i32 @halide_error_bad_type(i8* %user_context, i8* %func_name, i8 zeroext %code_given, i8 zeroext %correct_code, i8 zeroext %bits_given, i8 zeroext %correct_bits, i16 zeroext %lanes_given, i16 zeroext %correct_lanes) local_unnamed_addr #0 {
entry:
  %correct_type = alloca %struct.halide_type_t, align 2
  %type_given = alloca %struct.halide_type_t, align 2
  %0 = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %correct_type, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %0) #9
  store i8 %correct_code, i8* %0, align 2, !tbaa !24
  %bits3.i = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %correct_type, i32 0, i32 1
  store i8 %correct_bits, i8* %bits3.i, align 1, !tbaa !27
  %lanes4.i = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %correct_type, i32 0, i32 2
  store i16 %correct_lanes, i16* %lanes4.i, align 2, !tbaa !28
  %1 = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %type_given, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %1) #9
  store i8 %code_given, i8* %1, align 2, !tbaa !24
  %bits3.i9 = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %type_given, i32 0, i32 1
  store i8 %bits_given, i8* %bits3.i9, align 1, !tbaa !27
  %lanes4.i10 = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %type_given, i32 0, i32 2
  store i16 %lanes_given, i16* %lanes4.i10, align 2, !tbaa !28
  %call.i = tail call i8* @halide_malloc(i8* %user_context, i32 1024) #11
  %2 = ptrtoint i8* %call.i to i32
  %tobool5.i = icmp eq i8* %call.i, null
  br i1 %tobool5.i, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit, label %if.then.i14

if.then.i14:                                      ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !7
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit: ; preds = %if.then.i14, %entry
  %ref.tmp.sroa.14.0 = phi i8* [ %add.ptr.i, %if.then.i14 ], [ null, %entry ]
  %cmp.i = icmp eq i8* %func_name, null
  br i1 %cmp.i, label %if.then.i20, label %if.else.i21

if.then.i20:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit
  %call.i19 = tail call i8* @halide_string_to_string(i8* %call.i, i8* %ref.tmp.sroa.14.0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.78, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit

if.else.i21:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit
  %call5.i = tail call i8* @halide_string_to_string(i8* %call.i, i8* %ref.tmp.sroa.14.0, i8* nonnull %func_name) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit: ; preds = %if.else.i21, %if.then.i20
  %storemerge.i = phi i8* [ %call5.i, %if.else.i21 ], [ %call.i19, %if.then.i20 ]
  %call5.i25 = tail call i8* @halide_string_to_string(i8* %storemerge.i, i8* %ref.tmp.sroa.14.0, i8* nonnull getelementptr inbounds ([11 x i8], [11 x i8]* @.str.9.46, i32 0, i32 0)) #11
  %call.i31 = call i8* @halide_type_to_string(i8* %call5.i25, i8* %ref.tmp.sroa.14.0, %struct.halide_type_t* nonnull %correct_type) #11
  %call5.i34 = call i8* @halide_string_to_string(i8* %call.i31, i8* %ref.tmp.sroa.14.0, i8* nonnull getelementptr inbounds ([38 x i8], [38 x i8]* @.str.10.47, i32 0, i32 0)) #11
  %call.i40 = call i8* @halide_type_to_string(i8* %call5.i34, i8* %ref.tmp.sroa.14.0, %struct.halide_type_t* nonnull %type_given) #11
  br i1 %tobool5.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit
  call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.8.103, i32 0, i32 0)) #11
  call void @halide_free(i8* %user_context, i8* null) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit
  %3 = ptrtoint i8* %call.i40 to i32
  %sub.ptr.sub.i.i = sub i32 1, %2
  %add.i.i = add i32 %sub.ptr.sub.i.i, %3
  %conv.i.i = sext i32 %add.i.i to i64
  call void @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #11
  call void @halide_error(i8* %user_context, i8* nonnull %call.i) #11
  call void @halide_free(i8* %user_context, i8* nonnull %call.i) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  %call6 = call i32 @halide_error_check_fault_and_return(i8* %user_context, i32 -3) #12
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1) #9
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %0) #9
  ret i32 %call6
}

; Function Attrs: nounwind
define weak i32 @halide_error_bad_dimensions(i8* %user_context, i8* %func_name, i32 %dimensions_given, i32 %correct_dimensions) local_unnamed_addr #0 {
entry:
  %call.i = tail call i8* @halide_malloc(i8* %user_context, i32 1024) #11
  %0 = ptrtoint i8* %call.i to i32
  %tobool5.i = icmp eq i8* %call.i, null
  br i1 %tobool5.i, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit, label %if.then.i

if.then.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !7
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit: ; preds = %if.then.i, %entry
  %ref.tmp.sroa.15.0 = phi i8* [ %add.ptr.i, %if.then.i ], [ null, %entry ]
  %cmp.i = icmp eq i8* %func_name, null
  br i1 %cmp.i, label %if.then.i11, label %if.else.i12

if.then.i11:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit
  %call.i10 = tail call i8* @halide_string_to_string(i8* %call.i, i8* %ref.tmp.sroa.15.0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.78, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit

if.else.i12:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit
  %call5.i = tail call i8* @halide_string_to_string(i8* %call.i, i8* %ref.tmp.sroa.15.0, i8* nonnull %func_name) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit: ; preds = %if.else.i12, %if.then.i11
  %storemerge.i = phi i8* [ %call5.i, %if.else.i12 ], [ %call.i10, %if.then.i11 ]
  %call5.i15 = tail call i8* @halide_string_to_string(i8* %storemerge.i, i8* %ref.tmp.sroa.15.0, i8* nonnull getelementptr inbounds ([31 x i8], [31 x i8]* @.str.11.48, i32 0, i32 0)) #11
  %conv.i = sext i32 %correct_dimensions to i64
  %call.i20 = tail call i8* @halide_int64_to_string(i8* %call5.i15, i8* %ref.tmp.sroa.15.0, i64 %conv.i, i32 1) #11
  %call5.i23 = tail call i8* @halide_string_to_string(i8* %call.i20, i8* %ref.tmp.sroa.15.0, i8* nonnull getelementptr inbounds ([43 x i8], [43 x i8]* @.str.12.49, i32 0, i32 0)) #11
  %conv.i28 = sext i32 %dimensions_given to i64
  %call.i29 = tail call i8* @halide_int64_to_string(i8* %call5.i23, i8* %ref.tmp.sroa.15.0, i64 %conv.i28, i32 1) #11
  %call5.i32 = tail call i8* @halide_string_to_string(i8* %call.i29, i8* %ref.tmp.sroa.15.0, i8* nonnull getelementptr inbounds ([12 x i8], [12 x i8]* @.str.13.50, i32 0, i32 0)) #11
  br i1 %tobool5.i, label %if.then.i37, label %if.else.i38

if.then.i37:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.8.103, i32 0, i32 0)) #11
  tail call void @halide_free(i8* %user_context, i8* null) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit

if.else.i38:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit
  %1 = ptrtoint i8* %call5.i32 to i32
  %sub.ptr.sub.i.i = sub i32 1, %0
  %add.i.i = add i32 %sub.ptr.sub.i.i, %1
  %conv.i.i = sext i32 %add.i.i to i64
  tail call void @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #11
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #11
  tail call void @halide_free(i8* %user_context, i8* nonnull %call.i) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit: ; preds = %if.else.i38, %if.then.i37
  %call6 = tail call i32 @halide_error_check_fault_and_return(i8* %user_context, i32 -43) #12
  ret i32 %call6
}

; Function Attrs: nounwind
define weak i32 @halide_error_access_out_of_bounds(i8* %user_context, i8* %func_name, i32 %dimension, i32 %min_touched, i32 %max_touched, i32 %min_valid, i32 %max_valid) local_unnamed_addr #0 {
entry:
  %cmp = icmp slt i32 %min_touched, %min_valid
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call.i = tail call i8* @halide_malloc(i8* %user_context, i32 1024) #11
  %0 = ptrtoint i8* %call.i to i32
  %tobool5.i = icmp eq i8* %call.i, null
  br i1 %tobool5.i, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit, label %if.then.i

if.then.i:                                        ; preds = %if.then
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !7
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit: ; preds = %if.then.i, %if.then
  %ref.tmp.sroa.16.0 = phi i8* [ %add.ptr.i, %if.then.i ], [ null, %if.then ]
  %cmp.i = icmp eq i8* %func_name, null
  br i1 %cmp.i, label %if.then.i30, label %if.else.i31

if.then.i30:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit
  %call.i29 = tail call i8* @halide_string_to_string(i8* %call.i, i8* %ref.tmp.sroa.16.0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.78, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit

if.else.i31:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit
  %call5.i = tail call i8* @halide_string_to_string(i8* %call.i, i8* %ref.tmp.sroa.16.0, i8* nonnull %func_name) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit: ; preds = %if.else.i31, %if.then.i30
  %storemerge.i = phi i8* [ %call5.i, %if.else.i31 ], [ %call.i29, %if.then.i30 ]
  %call5.i34 = tail call i8* @halide_string_to_string(i8* %storemerge.i, i8* %ref.tmp.sroa.16.0, i8* nonnull getelementptr inbounds ([17 x i8], [17 x i8]* @.str.14.51, i32 0, i32 0)) #11
  %conv.i = sext i32 %min_touched to i64
  %call.i39 = tail call i8* @halide_int64_to_string(i8* %call5.i34, i8* %ref.tmp.sroa.16.0, i64 %conv.i, i32 1) #11
  %call5.i42 = tail call i8* @halide_string_to_string(i8* %call.i39, i8* %ref.tmp.sroa.16.0, i8* nonnull getelementptr inbounds ([28 x i8], [28 x i8]* @.str.15.52, i32 0, i32 0)) #11
  %conv.i47 = sext i32 %min_valid to i64
  %call.i48 = tail call i8* @halide_int64_to_string(i8* %call5.i42, i8* %ref.tmp.sroa.16.0, i64 %conv.i47, i32 1) #11
  %call5.i51 = tail call i8* @halide_string_to_string(i8* %call.i48, i8* %ref.tmp.sroa.16.0, i8* nonnull getelementptr inbounds ([16 x i8], [16 x i8]* @.str.16.53, i32 0, i32 0)) #11
  %conv.i56 = sext i32 %dimension to i64
  %call.i57 = tail call i8* @halide_int64_to_string(i8* %call5.i51, i8* %ref.tmp.sroa.16.0, i64 %conv.i56, i32 1) #11
  br i1 %tobool5.i, label %if.then.i60, label %if.else.i61

if.then.i60:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.8.103, i32 0, i32 0)) #11
  tail call void @halide_free(i8* %user_context, i8* null) #11
  br label %if.end17

if.else.i61:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit
  %1 = ptrtoint i8* %call.i57 to i32
  %sub.ptr.sub.i.i = sub i32 1, %0
  %add.i.i = add i32 %sub.ptr.sub.i.i, %1
  %conv.i.i = sext i32 %add.i.i to i64
  tail call void @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #11
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #11
  tail call void @halide_free(i8* %user_context, i8* nonnull %call.i) #11
  br label %if.end17

if.else:                                          ; preds = %entry
  %cmp7 = icmp sgt i32 %max_touched, %max_valid
  br i1 %cmp7, label %if.then8, label %if.end17

if.then8:                                         ; preds = %if.else
  %call.i65 = tail call i8* @halide_malloc(i8* %user_context, i32 1024) #11
  %2 = ptrtoint i8* %call.i65 to i32
  %tobool5.i68 = icmp eq i8* %call.i65, null
  br i1 %tobool5.i68, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit75, label %if.then.i71

if.then.i71:                                      ; preds = %if.then8
  %add.ptr.i69 = getelementptr inbounds i8, i8* %call.i65, i32 1023
  store i8 0, i8* %add.ptr.i69, align 1, !tbaa !7
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit75

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit75: ; preds = %if.then.i71, %if.then8
  %ref.tmp9.sroa.16.0 = phi i8* [ %add.ptr.i69, %if.then.i71 ], [ null, %if.then8 ]
  %cmp.i76 = icmp eq i8* %func_name, null
  br i1 %cmp.i76, label %if.then.i80, label %if.else.i82

if.then.i80:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit75
  %call.i79 = tail call i8* @halide_string_to_string(i8* %call.i65, i8* %ref.tmp9.sroa.16.0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.78, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit85

if.else.i82:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit75
  %call5.i81 = tail call i8* @halide_string_to_string(i8* %call.i65, i8* %ref.tmp9.sroa.16.0, i8* nonnull %func_name) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit85

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit85: ; preds = %if.else.i82, %if.then.i80
  %storemerge.i83 = phi i8* [ %call5.i81, %if.else.i82 ], [ %call.i79, %if.then.i80 ]
  %call5.i88 = tail call i8* @halide_string_to_string(i8* %storemerge.i83, i8* %ref.tmp9.sroa.16.0, i8* nonnull getelementptr inbounds ([17 x i8], [17 x i8]* @.str.14.51, i32 0, i32 0)) #11
  %conv.i94 = sext i32 %max_touched to i64
  %call.i95 = tail call i8* @halide_int64_to_string(i8* %call5.i88, i8* %ref.tmp9.sroa.16.0, i64 %conv.i94, i32 1) #11
  %call5.i98 = tail call i8* @halide_string_to_string(i8* %call.i95, i8* %ref.tmp9.sroa.16.0, i8* nonnull getelementptr inbounds ([28 x i8], [28 x i8]* @.str.17.54, i32 0, i32 0)) #11
  %conv.i104 = sext i32 %max_valid to i64
  %call.i105 = tail call i8* @halide_int64_to_string(i8* %call5.i98, i8* %ref.tmp9.sroa.16.0, i64 %conv.i104, i32 1) #11
  %call5.i108 = tail call i8* @halide_string_to_string(i8* %call.i105, i8* %ref.tmp9.sroa.16.0, i8* nonnull getelementptr inbounds ([16 x i8], [16 x i8]* @.str.16.53, i32 0, i32 0)) #11
  %conv.i114 = sext i32 %dimension to i64
  %call.i115 = tail call i8* @halide_int64_to_string(i8* %call5.i108, i8* %ref.tmp9.sroa.16.0, i64 %conv.i114, i32 1) #11
  br i1 %tobool5.i68, label %if.then.i119, label %if.else.i125

if.then.i119:                                     ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit85
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.8.103, i32 0, i32 0)) #11
  tail call void @halide_free(i8* %user_context, i8* null) #11
  br label %if.end17

if.else.i125:                                     ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit85
  %3 = ptrtoint i8* %call.i115 to i32
  %sub.ptr.sub.i.i122 = sub i32 1, %2
  %add.i.i123 = add i32 %sub.ptr.sub.i.i122, %3
  %conv.i.i124 = sext i32 %add.i.i123 to i64
  tail call void @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i65, i64 %conv.i.i124) #11
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i65) #11
  tail call void @halide_free(i8* %user_context, i8* nonnull %call.i65) #11
  br label %if.end17

if.end17:                                         ; preds = %if.then.i119, %if.else.i125, %if.then.i60, %if.else.i61, %if.else
  %call18 = tail call i32 @halide_error_check_fault_and_return(i8* %user_context, i32 -4) #12
  ret i32 %call18
}

; Function Attrs: nounwind
define weak i32 @halide_error_buffer_allocation_too_large(i8* %user_context, i8* %buffer_name, i64 %allocation_size, i64 %max_size) local_unnamed_addr #0 {
entry:
  %call.i = tail call i8* @halide_malloc(i8* %user_context, i32 1024) #11
  %0 = ptrtoint i8* %call.i to i32
  %tobool5.i = icmp eq i8* %call.i, null
  br i1 %tobool5.i, label %entry.split, label %if.then.i

entry.split:                                      ; preds = %entry
  %call5.i1 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* nonnull getelementptr inbounds ([29 x i8], [29 x i8]* @.str.18.55, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit

if.then.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !7
  %call5.i2 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* nonnull getelementptr inbounds ([29 x i8], [29 x i8]* @.str.18.55, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then.i
  %phi.call = phi i8* [ %call5.i1, %entry.split ], [ %call5.i2, %if.then.i ]
  %ref.tmp.sroa.15.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then.i ]
  %cmp.i = icmp eq i8* %buffer_name, null
  br i1 %cmp.i, label %if.then.i14, label %if.else.i16

if.then.i14:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit
  %call.i13 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.15.0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.78, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit

if.else.i16:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit
  %call5.i15 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.15.0, i8* nonnull %buffer_name) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit: ; preds = %if.else.i16, %if.then.i14
  %storemerge.i = phi i8* [ %call5.i15, %if.else.i16 ], [ %call.i13, %if.then.i14 ]
  %call5.i19 = tail call i8* @halide_string_to_string(i8* %storemerge.i, i8* %ref.tmp.sroa.15.0, i8* nonnull getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.56, i32 0, i32 0)) #11
  %call.i24 = tail call i8* @halide_uint64_to_string(i8* %call5.i19, i8* %ref.tmp.sroa.15.0, i64 %allocation_size, i32 1) #11
  %call5.i27 = tail call i8* @halide_string_to_string(i8* %call.i24, i8* %ref.tmp.sroa.15.0, i8* nonnull getelementptr inbounds ([37 x i8], [37 x i8]* @.str.20.57, i32 0, i32 0)) #11
  %call.i32 = tail call i8* @halide_uint64_to_string(i8* %call5.i27, i8* %ref.tmp.sroa.15.0, i64 %max_size, i32 1) #11
  br i1 %tobool5.i, label %if.then.i35, label %if.else.i36

if.then.i35:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.8.103, i32 0, i32 0)) #11
  tail call void @halide_free(i8* %user_context, i8* null) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit

if.else.i36:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit
  %1 = ptrtoint i8* %call.i32 to i32
  %sub.ptr.sub.i.i = sub i32 1, %0
  %add.i.i = add i32 %sub.ptr.sub.i.i, %1
  %conv.i.i = sext i32 %add.i.i to i64
  tail call void @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #11
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #11
  tail call void @halide_free(i8* %user_context, i8* nonnull %call.i) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit: ; preds = %if.else.i36, %if.then.i35
  %call6 = tail call i32 @halide_error_check_fault_and_return(i8* %user_context, i32 -5) #12
  ret i32 %call6
}

; Function Attrs: nounwind
define weak i32 @halide_error_buffer_extents_negative(i8* %user_context, i8* %buffer_name, i32 %dimension, i32 %extent) local_unnamed_addr #0 {
entry:
  %call.i = tail call i8* @halide_malloc(i8* %user_context, i32 1024) #11
  %0 = ptrtoint i8* %call.i to i32
  %tobool5.i = icmp eq i8* %call.i, null
  br i1 %tobool5.i, label %entry.split, label %if.then.i

entry.split:                                      ; preds = %entry
  %call5.i1 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* nonnull getelementptr inbounds ([24 x i8], [24 x i8]* @.str.21.58, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit

if.then.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !7
  %call5.i2 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* nonnull getelementptr inbounds ([24 x i8], [24 x i8]* @.str.21.58, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then.i
  %phi.call = phi i8* [ %call5.i1, %entry.split ], [ %call5.i2, %if.then.i ]
  %ref.tmp.sroa.16.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then.i ]
  %cmp.i = icmp eq i8* %buffer_name, null
  br i1 %cmp.i, label %if.then.i15, label %if.else.i17

if.then.i15:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit
  %call.i14 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.16.0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.78, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit

if.else.i17:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit
  %call5.i16 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.16.0, i8* nonnull %buffer_name) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit: ; preds = %if.else.i17, %if.then.i15
  %storemerge.i = phi i8* [ %call5.i16, %if.else.i17 ], [ %call.i14, %if.then.i15 ]
  %call5.i20 = tail call i8* @halide_string_to_string(i8* %storemerge.i, i8* %ref.tmp.sroa.16.0, i8* nonnull getelementptr inbounds ([12 x i8], [12 x i8]* @.str.22.59, i32 0, i32 0)) #11
  %conv.i = sext i32 %dimension to i64
  %call.i25 = tail call i8* @halide_int64_to_string(i8* %call5.i20, i8* %ref.tmp.sroa.16.0, i64 %conv.i, i32 1) #11
  %call5.i28 = tail call i8* @halide_string_to_string(i8* %call.i25, i8* %ref.tmp.sroa.16.0, i8* nonnull getelementptr inbounds ([15 x i8], [15 x i8]* @.str.23.60, i32 0, i32 0)) #11
  %conv.i33 = sext i32 %extent to i64
  %call.i34 = tail call i8* @halide_int64_to_string(i8* %call5.i28, i8* %ref.tmp.sroa.16.0, i64 %conv.i33, i32 1) #11
  %call5.i37 = tail call i8* @halide_string_to_string(i8* %call.i34, i8* %ref.tmp.sroa.16.0, i8* nonnull getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5.94, i32 0, i32 0)) #11
  br i1 %tobool5.i, label %if.then.i42, label %if.else.i43

if.then.i42:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.8.103, i32 0, i32 0)) #11
  tail call void @halide_free(i8* %user_context, i8* null) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit

if.else.i43:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit
  %1 = ptrtoint i8* %call5.i37 to i32
  %sub.ptr.sub.i.i = sub i32 1, %0
  %add.i.i = add i32 %sub.ptr.sub.i.i, %1
  %conv.i.i = sext i32 %add.i.i to i64
  tail call void @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #11
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #11
  tail call void @halide_free(i8* %user_context, i8* nonnull %call.i) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit: ; preds = %if.else.i43, %if.then.i42
  %call7 = tail call i32 @halide_error_check_fault_and_return(i8* %user_context, i32 -28) #12
  ret i32 %call7
}

; Function Attrs: nounwind
define weak i32 @halide_error_buffer_extents_too_large(i8* %user_context, i8* %buffer_name, i64 %actual_size, i64 %max_size) local_unnamed_addr #0 {
entry:
  %call.i = tail call i8* @halide_malloc(i8* %user_context, i32 1024) #11
  %0 = ptrtoint i8* %call.i to i32
  %tobool5.i = icmp eq i8* %call.i, null
  br i1 %tobool5.i, label %entry.split, label %if.then.i

entry.split:                                      ; preds = %entry
  %call5.i1 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* nonnull getelementptr inbounds ([31 x i8], [31 x i8]* @.str.24.61, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit

if.then.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !7
  %call5.i2 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* nonnull getelementptr inbounds ([31 x i8], [31 x i8]* @.str.24.61, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then.i
  %phi.call = phi i8* [ %call5.i1, %entry.split ], [ %call5.i2, %if.then.i ]
  %ref.tmp.sroa.15.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then.i ]
  %cmp.i = icmp eq i8* %buffer_name, null
  br i1 %cmp.i, label %if.then.i14, label %if.else.i16

if.then.i14:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit
  %call.i13 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.15.0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.78, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit

if.else.i16:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit
  %call5.i15 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.15.0, i8* nonnull %buffer_name) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit: ; preds = %if.else.i16, %if.then.i14
  %storemerge.i = phi i8* [ %call5.i15, %if.else.i16 ], [ %call.i13, %if.then.i14 ]
  %call5.i19 = tail call i8* @halide_string_to_string(i8* %storemerge.i, i8* %ref.tmp.sroa.15.0, i8* nonnull getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.56, i32 0, i32 0)) #11
  %call.i24 = tail call i8* @halide_int64_to_string(i8* %call5.i19, i8* %ref.tmp.sroa.15.0, i64 %actual_size, i32 1) #11
  %call5.i27 = tail call i8* @halide_string_to_string(i8* %call.i24, i8* %ref.tmp.sroa.15.0, i8* nonnull getelementptr inbounds ([37 x i8], [37 x i8]* @.str.20.57, i32 0, i32 0)) #11
  %call.i32 = tail call i8* @halide_int64_to_string(i8* %call5.i27, i8* %ref.tmp.sroa.15.0, i64 %max_size, i32 1) #11
  br i1 %tobool5.i, label %if.then.i35, label %if.else.i36

if.then.i35:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.8.103, i32 0, i32 0)) #11
  tail call void @halide_free(i8* %user_context, i8* null) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit

if.else.i36:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit
  %1 = ptrtoint i8* %call.i32 to i32
  %sub.ptr.sub.i.i = sub i32 1, %0
  %add.i.i = add i32 %sub.ptr.sub.i.i, %1
  %conv.i.i = sext i32 %add.i.i to i64
  tail call void @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #11
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #11
  tail call void @halide_free(i8* %user_context, i8* nonnull %call.i) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit: ; preds = %if.else.i36, %if.then.i35
  %call6 = tail call i32 @halide_error_check_fault_and_return(i8* %user_context, i32 -6) #12
  ret i32 %call6
}

; Function Attrs: nounwind
define weak i32 @halide_error_constraints_make_required_region_smaller(i8* %user_context, i8* %buffer_name, i32 %dimension, i32 %constrained_min, i32 %constrained_extent, i32 %required_min, i32 %required_extent) local_unnamed_addr #0 {
entry:
  %add = add i32 %required_extent, -1
  %sub = add i32 %add, %required_min
  %sub2 = add i32 %add, %constrained_min
  %call.i = tail call i8* @halide_malloc(i8* %user_context, i32 1024) #11
  %0 = ptrtoint i8* %call.i to i32
  %tobool5.i = icmp eq i8* %call.i, null
  br i1 %tobool5.i, label %entry.split, label %if.then.i

entry.split:                                      ; preds = %entry
  %call5.i1 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* nonnull getelementptr inbounds ([29 x i8], [29 x i8]* @.str.25.62, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit

if.then.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !7
  %call5.i2 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* nonnull getelementptr inbounds ([29 x i8], [29 x i8]* @.str.25.62, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then.i
  %phi.call = phi i8* [ %call5.i1, %entry.split ], [ %call5.i2, %if.then.i ]
  %ref.tmp.sroa.22.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then.i ]
  %cmp.i = icmp eq i8* %buffer_name, null
  br i1 %cmp.i, label %if.then.i28, label %if.else.i30

if.then.i28:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit
  %call.i27 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.78, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit

if.else.i30:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit
  %call5.i29 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.22.0, i8* nonnull %buffer_name) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit: ; preds = %if.else.i30, %if.then.i28
  %storemerge.i = phi i8* [ %call5.i29, %if.else.i30 ], [ %call.i27, %if.then.i28 ]
  %call5.i33 = tail call i8* @halide_string_to_string(i8* %storemerge.i, i8* %ref.tmp.sroa.22.0, i8* nonnull getelementptr inbounds ([42 x i8], [42 x i8]* @.str.26.63, i32 0, i32 0)) #11
  %call5.i38 = tail call i8* @halide_string_to_string(i8* %call5.i33, i8* %ref.tmp.sroa.22.0, i8* nonnull getelementptr inbounds ([16 x i8], [16 x i8]* @.str.27.64, i32 0, i32 0)) #11
  %conv.i = sext i32 %required_min to i64
  %call.i43 = tail call i8* @halide_int64_to_string(i8* %call5.i38, i8* %ref.tmp.sroa.22.0, i64 %conv.i, i32 1) #11
  %call5.i46 = tail call i8* @halide_string_to_string(i8* %call.i43, i8* %ref.tmp.sroa.22.0, i8* nonnull getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6.43, i32 0, i32 0)) #11
  %conv.i51 = sext i32 %sub to i64
  %call.i52 = tail call i8* @halide_int64_to_string(i8* %call5.i46, i8* %ref.tmp.sroa.22.0, i64 %conv.i51, i32 1) #11
  %call5.i55 = tail call i8* @halide_string_to_string(i8* %call.i52, i8* %ref.tmp.sroa.22.0, i8* nonnull getelementptr inbounds ([3 x i8], [3 x i8]* @.str.28.65, i32 0, i32 0)) #11
  %call5.i60 = tail call i8* @halide_string_to_string(i8* %call5.i55, i8* %ref.tmp.sroa.22.0, i8* nonnull getelementptr inbounds ([19 x i8], [19 x i8]* @.str.29.66, i32 0, i32 0)) #11
  %conv.i65 = sext i32 %constrained_min to i64
  %call.i66 = tail call i8* @halide_int64_to_string(i8* %call5.i60, i8* %ref.tmp.sroa.22.0, i64 %conv.i65, i32 1) #11
  %call5.i69 = tail call i8* @halide_string_to_string(i8* %call.i66, i8* %ref.tmp.sroa.22.0, i8* nonnull getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6.43, i32 0, i32 0)) #11
  %conv.i74 = sext i32 %sub2 to i64
  %call.i75 = tail call i8* @halide_int64_to_string(i8* %call5.i69, i8* %ref.tmp.sroa.22.0, i64 %conv.i74, i32 1) #11
  %call5.i78 = tail call i8* @halide_string_to_string(i8* %call.i75, i8* %ref.tmp.sroa.22.0, i8* nonnull getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.67, i32 0, i32 0)) #11
  br i1 %tobool5.i, label %if.then.i83, label %if.else.i84

if.then.i83:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.8.103, i32 0, i32 0)) #11
  tail call void @halide_free(i8* %user_context, i8* null) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit

if.else.i84:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit
  %1 = ptrtoint i8* %call5.i78 to i32
  %sub.ptr.sub.i.i = sub i32 1, %0
  %add.i.i = add i32 %sub.ptr.sub.i.i, %1
  %conv.i.i = sext i32 %add.i.i to i64
  tail call void @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #11
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #11
  tail call void @halide_free(i8* %user_context, i8* nonnull %call.i) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit: ; preds = %if.else.i84, %if.then.i83
  %call15 = tail call i32 @halide_error_check_fault_and_return(i8* %user_context, i32 -7) #12
  ret i32 %call15
}

; Function Attrs: nounwind
define weak i32 @halide_error_constraint_violated(i8* %user_context, i8* %var, i32 %val, i8* %constrained_var, i32 %constrained_val) local_unnamed_addr #0 {
entry:
  %call.i = tail call i8* @halide_malloc(i8* %user_context, i32 1024) #11
  %0 = ptrtoint i8* %call.i to i32
  %tobool5.i = icmp eq i8* %call.i, null
  br i1 %tobool5.i, label %entry.split, label %if.then.i

entry.split:                                      ; preds = %entry
  %call5.i1 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* nonnull getelementptr inbounds ([22 x i8], [22 x i8]* @.str.31.68, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit

if.then.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !7
  %call5.i2 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* nonnull getelementptr inbounds ([22 x i8], [22 x i8]* @.str.31.68, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then.i
  %phi.call = phi i8* [ %call5.i1, %entry.split ], [ %call5.i2, %if.then.i ]
  %ref.tmp.sroa.18.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then.i ]
  %cmp.i = icmp eq i8* %var, null
  br i1 %cmp.i, label %if.then.i17, label %if.else.i19

if.then.i17:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit
  %call.i16 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.18.0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.78, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit

if.else.i19:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit
  %call5.i18 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.18.0, i8* nonnull %var) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit: ; preds = %if.else.i19, %if.then.i17
  %storemerge.i = phi i8* [ %call5.i18, %if.else.i19 ], [ %call.i16, %if.then.i17 ]
  %call5.i22 = tail call i8* @halide_string_to_string(i8* %storemerge.i, i8* %ref.tmp.sroa.18.0, i8* nonnull getelementptr inbounds ([3 x i8], [3 x i8]* @.str.32.69, i32 0, i32 0)) #11
  %conv.i = sext i32 %val to i64
  %call.i27 = tail call i8* @halide_int64_to_string(i8* %call5.i22, i8* %ref.tmp.sroa.18.0, i64 %conv.i, i32 1) #11
  %call5.i30 = tail call i8* @halide_string_to_string(i8* %call.i27, i8* %ref.tmp.sroa.18.0, i8* nonnull getelementptr inbounds ([6 x i8], [6 x i8]* @.str.33.70, i32 0, i32 0)) #11
  %cmp.i33 = icmp eq i8* %constrained_var, null
  br i1 %cmp.i33, label %if.then.i37, label %if.else.i39

if.then.i37:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit
  %call.i36 = tail call i8* @halide_string_to_string(i8* %call5.i30, i8* %ref.tmp.sroa.18.0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.78, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit41

if.else.i39:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit
  %call5.i38 = tail call i8* @halide_string_to_string(i8* %call5.i30, i8* %ref.tmp.sroa.18.0, i8* nonnull %constrained_var) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit41

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit41: ; preds = %if.else.i39, %if.then.i37
  %storemerge.i40 = phi i8* [ %call5.i38, %if.else.i39 ], [ %call.i36, %if.then.i37 ]
  %call5.i44 = tail call i8* @halide_string_to_string(i8* %storemerge.i40, i8* %ref.tmp.sroa.18.0, i8* nonnull getelementptr inbounds ([3 x i8], [3 x i8]* @.str.32.69, i32 0, i32 0)) #11
  %conv.i49 = sext i32 %constrained_val to i64
  %call.i50 = tail call i8* @halide_int64_to_string(i8* %call5.i44, i8* %ref.tmp.sroa.18.0, i64 %conv.i49, i32 1) #11
  %call5.i53 = tail call i8* @halide_string_to_string(i8* %call.i50, i8* %ref.tmp.sroa.18.0, i8* nonnull getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5.94, i32 0, i32 0)) #11
  br i1 %tobool5.i, label %if.then.i58, label %if.else.i59

if.then.i58:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit41
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.8.103, i32 0, i32 0)) #11
  tail call void @halide_free(i8* %user_context, i8* null) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit

if.else.i59:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit41
  %1 = ptrtoint i8* %call5.i53 to i32
  %sub.ptr.sub.i.i = sub i32 1, %0
  %add.i.i = add i32 %sub.ptr.sub.i.i, %1
  %conv.i.i = sext i32 %add.i.i to i64
  tail call void @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #11
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #11
  tail call void @halide_free(i8* %user_context, i8* nonnull %call.i) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit: ; preds = %if.else.i59, %if.then.i58
  %call9 = tail call i32 @halide_error_check_fault_and_return(i8* %user_context, i32 -8) #12
  ret i32 %call9
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_small_i64(i8* %user_context, i8* %param_name, i64 %val, i64 %min_val) local_unnamed_addr #0 {
entry:
  %call.i = tail call i8* @halide_malloc(i8* %user_context, i32 1024) #11
  %0 = ptrtoint i8* %call.i to i32
  %tobool5.i = icmp eq i8* %call.i, null
  br i1 %tobool5.i, label %entry.split, label %if.then.i

entry.split:                                      ; preds = %entry
  %call5.i1 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* nonnull getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.71, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit

if.then.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !7
  %call5.i2 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* nonnull getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.71, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then.i
  %phi.call = phi i8* [ %call5.i1, %entry.split ], [ %call5.i2, %if.then.i ]
  %ref.tmp.sroa.15.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then.i ]
  %cmp.i = icmp eq i8* %param_name, null
  br i1 %cmp.i, label %if.then.i14, label %if.else.i16

if.then.i14:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit
  %call.i13 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.15.0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.78, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit

if.else.i16:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit
  %call5.i15 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.15.0, i8* nonnull %param_name) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit: ; preds = %if.else.i16, %if.then.i14
  %storemerge.i = phi i8* [ %call5.i15, %if.else.i16 ], [ %call.i13, %if.then.i14 ]
  %call5.i19 = tail call i8* @halide_string_to_string(i8* %storemerge.i, i8* %ref.tmp.sroa.15.0, i8* nonnull getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.56, i32 0, i32 0)) #11
  %call.i24 = tail call i8* @halide_int64_to_string(i8* %call5.i19, i8* %ref.tmp.sroa.15.0, i64 %val, i32 1) #11
  %call5.i27 = tail call i8* @halide_string_to_string(i8* %call.i24, i8* %ref.tmp.sroa.15.0, i8* nonnull getelementptr inbounds ([23 x i8], [23 x i8]* @.str.35.72, i32 0, i32 0)) #11
  %call.i32 = tail call i8* @halide_int64_to_string(i8* %call5.i27, i8* %ref.tmp.sroa.15.0, i64 %min_val, i32 1) #11
  br i1 %tobool5.i, label %if.then.i35, label %if.else.i36

if.then.i35:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.8.103, i32 0, i32 0)) #11
  tail call void @halide_free(i8* %user_context, i8* null) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit

if.else.i36:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit
  %1 = ptrtoint i8* %call.i32 to i32
  %sub.ptr.sub.i.i = sub i32 1, %0
  %add.i.i = add i32 %sub.ptr.sub.i.i, %1
  %conv.i.i = sext i32 %add.i.i to i64
  tail call void @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #11
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #11
  tail call void @halide_free(i8* %user_context, i8* nonnull %call.i) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit: ; preds = %if.else.i36, %if.then.i35
  %call6 = tail call i32 @halide_error_check_fault_and_return(i8* %user_context, i32 -9) #12
  ret i32 %call6
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_small_u64(i8* %user_context, i8* %param_name, i64 %val, i64 %min_val) local_unnamed_addr #0 {
entry:
  %call.i = tail call i8* @halide_malloc(i8* %user_context, i32 1024) #11
  %0 = ptrtoint i8* %call.i to i32
  %tobool5.i = icmp eq i8* %call.i, null
  br i1 %tobool5.i, label %entry.split, label %if.then.i

entry.split:                                      ; preds = %entry
  %call5.i1 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* nonnull getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.71, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit

if.then.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !7
  %call5.i2 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* nonnull getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.71, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then.i
  %phi.call = phi i8* [ %call5.i1, %entry.split ], [ %call5.i2, %if.then.i ]
  %ref.tmp.sroa.15.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then.i ]
  %cmp.i = icmp eq i8* %param_name, null
  br i1 %cmp.i, label %if.then.i14, label %if.else.i16

if.then.i14:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit
  %call.i13 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.15.0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.78, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit

if.else.i16:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit
  %call5.i15 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.15.0, i8* nonnull %param_name) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit: ; preds = %if.else.i16, %if.then.i14
  %storemerge.i = phi i8* [ %call5.i15, %if.else.i16 ], [ %call.i13, %if.then.i14 ]
  %call5.i19 = tail call i8* @halide_string_to_string(i8* %storemerge.i, i8* %ref.tmp.sroa.15.0, i8* nonnull getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.56, i32 0, i32 0)) #11
  %call.i24 = tail call i8* @halide_uint64_to_string(i8* %call5.i19, i8* %ref.tmp.sroa.15.0, i64 %val, i32 1) #11
  %call5.i27 = tail call i8* @halide_string_to_string(i8* %call.i24, i8* %ref.tmp.sroa.15.0, i8* nonnull getelementptr inbounds ([23 x i8], [23 x i8]* @.str.35.72, i32 0, i32 0)) #11
  %call.i32 = tail call i8* @halide_uint64_to_string(i8* %call5.i27, i8* %ref.tmp.sroa.15.0, i64 %min_val, i32 1) #11
  br i1 %tobool5.i, label %if.then.i35, label %if.else.i36

if.then.i35:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.8.103, i32 0, i32 0)) #11
  tail call void @halide_free(i8* %user_context, i8* null) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit

if.else.i36:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit
  %1 = ptrtoint i8* %call.i32 to i32
  %sub.ptr.sub.i.i = sub i32 1, %0
  %add.i.i = add i32 %sub.ptr.sub.i.i, %1
  %conv.i.i = sext i32 %add.i.i to i64
  tail call void @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #11
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #11
  tail call void @halide_free(i8* %user_context, i8* nonnull %call.i) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit: ; preds = %if.else.i36, %if.then.i35
  %call6 = tail call i32 @halide_error_check_fault_and_return(i8* %user_context, i32 -9) #12
  ret i32 %call6
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_small_f64(i8* %user_context, i8* %param_name, double %val, double %min_val) local_unnamed_addr #0 {
entry:
  %call.i = tail call i8* @halide_malloc(i8* %user_context, i32 1024) #11
  %0 = ptrtoint i8* %call.i to i32
  %tobool5.i = icmp eq i8* %call.i, null
  br i1 %tobool5.i, label %entry.split, label %if.then.i

entry.split:                                      ; preds = %entry
  %call5.i1 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* nonnull getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.71, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit

if.then.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !7
  %call5.i2 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* nonnull getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.71, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then.i
  %phi.call = phi i8* [ %call5.i1, %entry.split ], [ %call5.i2, %if.then.i ]
  %ref.tmp.sroa.15.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then.i ]
  %cmp.i = icmp eq i8* %param_name, null
  br i1 %cmp.i, label %if.then.i14, label %if.else.i16

if.then.i14:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit
  %call.i13 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.15.0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.78, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit

if.else.i16:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit
  %call5.i15 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.15.0, i8* nonnull %param_name) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit: ; preds = %if.else.i16, %if.then.i14
  %storemerge.i = phi i8* [ %call5.i15, %if.else.i16 ], [ %call.i13, %if.then.i14 ]
  %call5.i19 = tail call i8* @halide_string_to_string(i8* %storemerge.i, i8* %ref.tmp.sroa.15.0, i8* nonnull getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.56, i32 0, i32 0)) #11
  %call.i24 = tail call i8* @halide_double_to_string(i8* %call5.i19, i8* %ref.tmp.sroa.15.0, double %val, i32 1) #11
  %call5.i27 = tail call i8* @halide_string_to_string(i8* %call.i24, i8* %ref.tmp.sroa.15.0, i8* nonnull getelementptr inbounds ([23 x i8], [23 x i8]* @.str.35.72, i32 0, i32 0)) #11
  %call.i32 = tail call i8* @halide_double_to_string(i8* %call5.i27, i8* %ref.tmp.sroa.15.0, double %min_val, i32 1) #11
  br i1 %tobool5.i, label %if.then.i35, label %if.else.i36

if.then.i35:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.8.103, i32 0, i32 0)) #11
  tail call void @halide_free(i8* %user_context, i8* null) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit

if.else.i36:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit
  %1 = ptrtoint i8* %call.i32 to i32
  %sub.ptr.sub.i.i = sub i32 1, %0
  %add.i.i = add i32 %sub.ptr.sub.i.i, %1
  %conv.i.i = sext i32 %add.i.i to i64
  tail call void @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #11
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #11
  tail call void @halide_free(i8* %user_context, i8* nonnull %call.i) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit: ; preds = %if.else.i36, %if.then.i35
  %call6 = tail call i32 @halide_error_check_fault_and_return(i8* %user_context, i32 -9) #12
  ret i32 %call6
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_large_i64(i8* %user_context, i8* %param_name, i64 %val, i64 %max_val) local_unnamed_addr #0 {
entry:
  %call.i = tail call i8* @halide_malloc(i8* %user_context, i32 1024) #11
  %0 = ptrtoint i8* %call.i to i32
  %tobool5.i = icmp eq i8* %call.i, null
  br i1 %tobool5.i, label %entry.split, label %if.then.i

entry.split:                                      ; preds = %entry
  %call5.i1 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* nonnull getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.71, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit

if.then.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !7
  %call5.i2 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* nonnull getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.71, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then.i
  %phi.call = phi i8* [ %call5.i1, %entry.split ], [ %call5.i2, %if.then.i ]
  %ref.tmp.sroa.15.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then.i ]
  %cmp.i = icmp eq i8* %param_name, null
  br i1 %cmp.i, label %if.then.i14, label %if.else.i16

if.then.i14:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit
  %call.i13 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.15.0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.78, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit

if.else.i16:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit
  %call5.i15 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.15.0, i8* nonnull %param_name) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit: ; preds = %if.else.i16, %if.then.i14
  %storemerge.i = phi i8* [ %call5.i15, %if.else.i16 ], [ %call.i13, %if.then.i14 ]
  %call5.i19 = tail call i8* @halide_string_to_string(i8* %storemerge.i, i8* %ref.tmp.sroa.15.0, i8* nonnull getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.56, i32 0, i32 0)) #11
  %call.i24 = tail call i8* @halide_int64_to_string(i8* %call5.i19, i8* %ref.tmp.sroa.15.0, i64 %val, i32 1) #11
  %call5.i27 = tail call i8* @halide_string_to_string(i8* %call.i24, i8* %ref.tmp.sroa.15.0, i8* nonnull getelementptr inbounds ([22 x i8], [22 x i8]* @.str.36.73, i32 0, i32 0)) #11
  %call.i32 = tail call i8* @halide_int64_to_string(i8* %call5.i27, i8* %ref.tmp.sroa.15.0, i64 %max_val, i32 1) #11
  br i1 %tobool5.i, label %if.then.i35, label %if.else.i36

if.then.i35:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.8.103, i32 0, i32 0)) #11
  tail call void @halide_free(i8* %user_context, i8* null) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit

if.else.i36:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit
  %1 = ptrtoint i8* %call.i32 to i32
  %sub.ptr.sub.i.i = sub i32 1, %0
  %add.i.i = add i32 %sub.ptr.sub.i.i, %1
  %conv.i.i = sext i32 %add.i.i to i64
  tail call void @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #11
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #11
  tail call void @halide_free(i8* %user_context, i8* nonnull %call.i) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit: ; preds = %if.else.i36, %if.then.i35
  %call6 = tail call i32 @halide_error_check_fault_and_return(i8* %user_context, i32 -10) #12
  ret i32 %call6
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_large_u64(i8* %user_context, i8* %param_name, i64 %val, i64 %max_val) local_unnamed_addr #0 {
entry:
  %call.i = tail call i8* @halide_malloc(i8* %user_context, i32 1024) #11
  %0 = ptrtoint i8* %call.i to i32
  %tobool5.i = icmp eq i8* %call.i, null
  br i1 %tobool5.i, label %entry.split, label %if.then.i

entry.split:                                      ; preds = %entry
  %call5.i1 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* nonnull getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.71, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit

if.then.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !7
  %call5.i2 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* nonnull getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.71, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then.i
  %phi.call = phi i8* [ %call5.i1, %entry.split ], [ %call5.i2, %if.then.i ]
  %ref.tmp.sroa.15.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then.i ]
  %cmp.i = icmp eq i8* %param_name, null
  br i1 %cmp.i, label %if.then.i14, label %if.else.i16

if.then.i14:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit
  %call.i13 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.15.0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.78, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit

if.else.i16:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit
  %call5.i15 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.15.0, i8* nonnull %param_name) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit: ; preds = %if.else.i16, %if.then.i14
  %storemerge.i = phi i8* [ %call5.i15, %if.else.i16 ], [ %call.i13, %if.then.i14 ]
  %call5.i19 = tail call i8* @halide_string_to_string(i8* %storemerge.i, i8* %ref.tmp.sroa.15.0, i8* nonnull getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.56, i32 0, i32 0)) #11
  %call.i24 = tail call i8* @halide_uint64_to_string(i8* %call5.i19, i8* %ref.tmp.sroa.15.0, i64 %val, i32 1) #11
  %call5.i27 = tail call i8* @halide_string_to_string(i8* %call.i24, i8* %ref.tmp.sroa.15.0, i8* nonnull getelementptr inbounds ([22 x i8], [22 x i8]* @.str.36.73, i32 0, i32 0)) #11
  %call.i32 = tail call i8* @halide_uint64_to_string(i8* %call5.i27, i8* %ref.tmp.sroa.15.0, i64 %max_val, i32 1) #11
  br i1 %tobool5.i, label %if.then.i35, label %if.else.i36

if.then.i35:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.8.103, i32 0, i32 0)) #11
  tail call void @halide_free(i8* %user_context, i8* null) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit

if.else.i36:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit
  %1 = ptrtoint i8* %call.i32 to i32
  %sub.ptr.sub.i.i = sub i32 1, %0
  %add.i.i = add i32 %sub.ptr.sub.i.i, %1
  %conv.i.i = sext i32 %add.i.i to i64
  tail call void @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #11
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #11
  tail call void @halide_free(i8* %user_context, i8* nonnull %call.i) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit: ; preds = %if.else.i36, %if.then.i35
  %call6 = tail call i32 @halide_error_check_fault_and_return(i8* %user_context, i32 -10) #12
  ret i32 %call6
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_large_f64(i8* %user_context, i8* %param_name, double %val, double %max_val) local_unnamed_addr #0 {
entry:
  %call.i = tail call i8* @halide_malloc(i8* %user_context, i32 1024) #11
  %0 = ptrtoint i8* %call.i to i32
  %tobool5.i = icmp eq i8* %call.i, null
  br i1 %tobool5.i, label %entry.split, label %if.then.i

entry.split:                                      ; preds = %entry
  %call5.i1 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* nonnull getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.71, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit

if.then.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !7
  %call5.i2 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* nonnull getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.71, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then.i
  %phi.call = phi i8* [ %call5.i1, %entry.split ], [ %call5.i2, %if.then.i ]
  %ref.tmp.sroa.15.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then.i ]
  %cmp.i = icmp eq i8* %param_name, null
  br i1 %cmp.i, label %if.then.i14, label %if.else.i16

if.then.i14:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit
  %call.i13 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.15.0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.78, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit

if.else.i16:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit
  %call5.i15 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.15.0, i8* nonnull %param_name) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit: ; preds = %if.else.i16, %if.then.i14
  %storemerge.i = phi i8* [ %call5.i15, %if.else.i16 ], [ %call.i13, %if.then.i14 ]
  %call5.i19 = tail call i8* @halide_string_to_string(i8* %storemerge.i, i8* %ref.tmp.sroa.15.0, i8* nonnull getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.56, i32 0, i32 0)) #11
  %call.i24 = tail call i8* @halide_double_to_string(i8* %call5.i19, i8* %ref.tmp.sroa.15.0, double %val, i32 1) #11
  %call5.i27 = tail call i8* @halide_string_to_string(i8* %call.i24, i8* %ref.tmp.sroa.15.0, i8* nonnull getelementptr inbounds ([22 x i8], [22 x i8]* @.str.36.73, i32 0, i32 0)) #11
  %call.i32 = tail call i8* @halide_double_to_string(i8* %call5.i27, i8* %ref.tmp.sroa.15.0, double %max_val, i32 1) #11
  br i1 %tobool5.i, label %if.then.i35, label %if.else.i36

if.then.i35:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.8.103, i32 0, i32 0)) #11
  tail call void @halide_free(i8* %user_context, i8* null) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit

if.else.i36:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit
  %1 = ptrtoint i8* %call.i32 to i32
  %sub.ptr.sub.i.i = sub i32 1, %0
  %add.i.i = add i32 %sub.ptr.sub.i.i, %1
  %conv.i.i = sext i32 %add.i.i to i64
  tail call void @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #11
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #11
  tail call void @halide_free(i8* %user_context, i8* nonnull %call.i) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit: ; preds = %if.else.i36, %if.then.i35
  %call6 = tail call i32 @halide_error_check_fault_and_return(i8* %user_context, i32 -10) #12
  ret i32 %call6
}

; Function Attrs: nounwind
define weak i32 @halide_error_out_of_memory(i8* %user_context) local_unnamed_addr #0 {
entry:
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.37.74, i32 0, i32 0)) #11
  %call = tail call i32 @halide_error_check_fault_and_return(i8* %user_context, i32 -11) #12
  ret i32 %call
}

; Function Attrs: nounwind
define weak i32 @halide_error_vtcm_out_of_memory(i8* %user_context) local_unnamed_addr #0 {
entry:
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.38, i32 0, i32 0)) #11
  %call = tail call i32 @halide_error_check_fault_and_return(i8* %user_context, i32 -45) #12
  ret i32 %call
}

; Function Attrs: nounwind
define weak i32 @halide_error_locked_cache_out_of_memory(i8* %user_context) local_unnamed_addr #0 {
entry:
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.39, i32 0, i32 0)) #11
  %call = tail call i32 @halide_error_check_fault_and_return(i8* %user_context, i32 -46) #12
  ret i32 %call
}

; Function Attrs: nounwind
define weak i32 @halide_error_gpu_shared_out_of_memory(i8* %user_context) local_unnamed_addr #0 {
entry:
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.40, i32 0, i32 0)) #11
  %call = tail call i32 @halide_error_check_fault_and_return(i8* %user_context, i32 -47) #12
  ret i32 %call
}

; Function Attrs: nounwind
define weak i32 @halide_error_buffer_argument_is_null(i8* %user_context, i8* %buffer_name) local_unnamed_addr #0 {
entry:
  %call.i = tail call i8* @halide_malloc(i8* %user_context, i32 1024) #11
  %0 = ptrtoint i8* %call.i to i32
  %tobool5.i = icmp eq i8* %call.i, null
  br i1 %tobool5.i, label %entry.split, label %if.then.i

entry.split:                                      ; preds = %entry
  %call5.i1 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* nonnull getelementptr inbounds ([17 x i8], [17 x i8]* @.str.41, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit

if.then.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !7
  %call5.i2 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* nonnull getelementptr inbounds ([17 x i8], [17 x i8]* @.str.41, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then.i
  %phi.call = phi i8* [ %call5.i1, %entry.split ], [ %call5.i2, %if.then.i ]
  %ref.tmp.sroa.12.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then.i ]
  %cmp.i = icmp eq i8* %buffer_name, null
  br i1 %cmp.i, label %if.then.i11, label %if.else.i13

if.then.i11:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit
  %call.i10 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.12.0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.78, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit

if.else.i13:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit
  %call5.i12 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.12.0, i8* nonnull %buffer_name) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit: ; preds = %if.else.i13, %if.then.i11
  %storemerge.i = phi i8* [ %call5.i12, %if.else.i13 ], [ %call.i10, %if.then.i11 ]
  %call5.i16 = tail call i8* @halide_string_to_string(i8* %storemerge.i, i8* %ref.tmp.sroa.12.0, i8* nonnull getelementptr inbounds ([9 x i8], [9 x i8]* @.str.42.75, i32 0, i32 0)) #11
  br i1 %tobool5.i, label %if.then.i21, label %if.else.i22

if.then.i21:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.8.103, i32 0, i32 0)) #11
  tail call void @halide_free(i8* %user_context, i8* null) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit

if.else.i22:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit
  %1 = ptrtoint i8* %call5.i16 to i32
  %sub.ptr.sub.i.i = sub i32 1, %0
  %add.i.i = add i32 %sub.ptr.sub.i.i, %1
  %conv.i.i = sext i32 %add.i.i to i64
  tail call void @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #11
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #11
  tail call void @halide_free(i8* %user_context, i8* nonnull %call.i) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit: ; preds = %if.else.i22, %if.then.i21
  %call3 = tail call i32 @halide_error_check_fault_and_return(i8* %user_context, i32 -12) #12
  ret i32 %call3
}

; Function Attrs: nounwind
define weak i32 @halide_error_debug_to_file_failed(i8* %user_context, i8* %func, i8* %filename, i32 %error_code) local_unnamed_addr #0 {
entry:
  %call.i = tail call i8* @halide_malloc(i8* %user_context, i32 1024) #11
  %0 = ptrtoint i8* %call.i to i32
  %tobool5.i = icmp eq i8* %call.i, null
  br i1 %tobool5.i, label %entry.split, label %if.then.i

entry.split:                                      ; preds = %entry
  %call5.i1 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* nonnull getelementptr inbounds ([25 x i8], [25 x i8]* @.str.43, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit

if.then.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !7
  %call5.i2 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* nonnull getelementptr inbounds ([25 x i8], [25 x i8]* @.str.43, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then.i
  %phi.call = phi i8* [ %call5.i1, %entry.split ], [ %call5.i2, %if.then.i ]
  %ref.tmp.sroa.15.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then.i ]
  %cmp.i = icmp eq i8* %func, null
  br i1 %cmp.i, label %if.then.i14, label %if.else.i16

if.then.i14:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit
  %call.i13 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.15.0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.78, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit

if.else.i16:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit
  %call5.i15 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.15.0, i8* nonnull %func) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit: ; preds = %if.else.i16, %if.then.i14
  %storemerge.i = phi i8* [ %call5.i15, %if.else.i16 ], [ %call.i13, %if.then.i14 ]
  %call5.i19 = tail call i8* @halide_string_to_string(i8* %storemerge.i, i8* %ref.tmp.sroa.15.0, i8* nonnull getelementptr inbounds ([10 x i8], [10 x i8]* @.str.44, i32 0, i32 0)) #11
  %cmp.i22 = icmp eq i8* %filename, null
  br i1 %cmp.i22, label %if.then.i26, label %if.else.i28

if.then.i26:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit
  %call.i25 = tail call i8* @halide_string_to_string(i8* %call5.i19, i8* %ref.tmp.sroa.15.0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.78, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit30

if.else.i28:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit
  %call5.i27 = tail call i8* @halide_string_to_string(i8* %call5.i19, i8* %ref.tmp.sroa.15.0, i8* nonnull %filename) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit30

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit30: ; preds = %if.else.i28, %if.then.i26
  %storemerge.i29 = phi i8* [ %call5.i27, %if.else.i28 ], [ %call.i25, %if.then.i26 ]
  %call5.i33 = tail call i8* @halide_string_to_string(i8* %storemerge.i29, i8* %ref.tmp.sroa.15.0, i8* nonnull getelementptr inbounds ([13 x i8], [13 x i8]* @.str.45, i32 0, i32 0)) #11
  %conv.i = sext i32 %error_code to i64
  %call.i38 = tail call i8* @halide_int64_to_string(i8* %call5.i33, i8* %ref.tmp.sroa.15.0, i64 %conv.i, i32 1) #11
  br i1 %tobool5.i, label %if.then.i41, label %if.else.i42

if.then.i41:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit30
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.8.103, i32 0, i32 0)) #11
  tail call void @halide_free(i8* %user_context, i8* null) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit

if.else.i42:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit30
  %1 = ptrtoint i8* %call.i38 to i32
  %sub.ptr.sub.i.i = sub i32 1, %0
  %add.i.i = add i32 %sub.ptr.sub.i.i, %1
  %conv.i.i = sext i32 %add.i.i to i64
  tail call void @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #11
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #11
  tail call void @halide_free(i8* %user_context, i8* nonnull %call.i) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit: ; preds = %if.else.i42, %if.then.i41
  %call6 = tail call i32 @halide_error_check_fault_and_return(i8* %user_context, i32 -13) #12
  ret i32 %call6
}

; Function Attrs: nounwind
define weak i32 @halide_error_failed_to_upgrade_buffer_t(i8* %user_context, i8* %name, i8* %reason) local_unnamed_addr #0 {
entry:
  %call.i = tail call i8* @halide_malloc(i8* %user_context, i32 1024) #11
  %0 = ptrtoint i8* %call.i to i32
  %tobool5.i = icmp eq i8* %call.i, null
  br i1 %tobool5.i, label %entry.split, label %if.then.i

entry.split:                                      ; preds = %entry
  %call5.i1 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* nonnull getelementptr inbounds ([51 x i8], [51 x i8]* @.str.46, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit

if.then.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !7
  %call5.i2 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* nonnull getelementptr inbounds ([51 x i8], [51 x i8]* @.str.46, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then.i
  %phi.call = phi i8* [ %call5.i1, %entry.split ], [ %call5.i2, %if.then.i ]
  %ref.tmp.sroa.13.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then.i ]
  %cmp.i = icmp eq i8* %name, null
  br i1 %cmp.i, label %if.then.i12, label %if.else.i14

if.then.i12:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.13.0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.78, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit

if.else.i14:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit
  %call5.i13 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.13.0, i8* nonnull %name) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit: ; preds = %if.else.i14, %if.then.i12
  %storemerge.i = phi i8* [ %call5.i13, %if.else.i14 ], [ %call.i11, %if.then.i12 ]
  %call5.i17 = tail call i8* @halide_string_to_string(i8* %storemerge.i, i8* %ref.tmp.sroa.13.0, i8* nonnull getelementptr inbounds ([3 x i8], [3 x i8]* @.str.47, i32 0, i32 0)) #11
  %cmp.i20 = icmp eq i8* %reason, null
  br i1 %cmp.i20, label %if.then.i24, label %if.else.i26

if.then.i24:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit
  %call.i23 = tail call i8* @halide_string_to_string(i8* %call5.i17, i8* %ref.tmp.sroa.13.0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.78, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit28

if.else.i26:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit
  %call5.i25 = tail call i8* @halide_string_to_string(i8* %call5.i17, i8* %ref.tmp.sroa.13.0, i8* nonnull %reason) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit28

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit28: ; preds = %if.else.i26, %if.then.i24
  %storemerge.i27 = phi i8* [ %call5.i25, %if.else.i26 ], [ %call.i23, %if.then.i24 ]
  br i1 %tobool5.i, label %if.then.i31, label %if.else.i32

if.then.i31:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit28
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.8.103, i32 0, i32 0)) #11
  tail call void @halide_free(i8* %user_context, i8* null) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit

if.else.i32:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit28
  %1 = ptrtoint i8* %storemerge.i27 to i32
  %sub.ptr.sub.i.i = sub i32 1, %0
  %add.i.i = add i32 %sub.ptr.sub.i.i, %1
  %conv.i.i = sext i32 %add.i.i to i64
  tail call void @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #11
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #11
  tail call void @halide_free(i8* %user_context, i8* nonnull %call.i) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit: ; preds = %if.else.i32, %if.then.i31
  %call4 = tail call i32 @halide_error_check_fault_and_return(i8* %user_context, i32 -29) #12
  ret i32 %call4
}

; Function Attrs: nounwind
define weak i32 @halide_error_failed_to_downgrade_buffer_t(i8* %user_context, i8* %name, i8* %reason) local_unnamed_addr #0 {
entry:
  %call.i = tail call i8* @halide_malloc(i8* %user_context, i32 1024) #11
  %0 = ptrtoint i8* %call.i to i32
  %tobool5.i = icmp eq i8* %call.i, null
  br i1 %tobool5.i, label %entry.split, label %if.then.i

entry.split:                                      ; preds = %entry
  %call5.i1 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* nonnull getelementptr inbounds ([53 x i8], [53 x i8]* @.str.48, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit

if.then.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !7
  %call5.i2 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* nonnull getelementptr inbounds ([53 x i8], [53 x i8]* @.str.48, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then.i
  %phi.call = phi i8* [ %call5.i1, %entry.split ], [ %call5.i2, %if.then.i ]
  %ref.tmp.sroa.13.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then.i ]
  %cmp.i = icmp eq i8* %name, null
  br i1 %cmp.i, label %if.then.i12, label %if.else.i14

if.then.i12:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.13.0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.78, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit

if.else.i14:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit
  %call5.i13 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.13.0, i8* nonnull %name) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit: ; preds = %if.else.i14, %if.then.i12
  %storemerge.i = phi i8* [ %call5.i13, %if.else.i14 ], [ %call.i11, %if.then.i12 ]
  %call5.i17 = tail call i8* @halide_string_to_string(i8* %storemerge.i, i8* %ref.tmp.sroa.13.0, i8* nonnull getelementptr inbounds ([3 x i8], [3 x i8]* @.str.47, i32 0, i32 0)) #11
  %cmp.i20 = icmp eq i8* %reason, null
  br i1 %cmp.i20, label %if.then.i24, label %if.else.i26

if.then.i24:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit
  %call.i23 = tail call i8* @halide_string_to_string(i8* %call5.i17, i8* %ref.tmp.sroa.13.0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.78, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit28

if.else.i26:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit
  %call5.i25 = tail call i8* @halide_string_to_string(i8* %call5.i17, i8* %ref.tmp.sroa.13.0, i8* nonnull %reason) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit28

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit28: ; preds = %if.else.i26, %if.then.i24
  %storemerge.i27 = phi i8* [ %call5.i25, %if.else.i26 ], [ %call.i23, %if.then.i24 ]
  br i1 %tobool5.i, label %if.then.i31, label %if.else.i32

if.then.i31:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit28
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.8.103, i32 0, i32 0)) #11
  tail call void @halide_free(i8* %user_context, i8* null) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit

if.else.i32:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit28
  %1 = ptrtoint i8* %storemerge.i27 to i32
  %sub.ptr.sub.i.i = sub i32 1, %0
  %add.i.i = add i32 %sub.ptr.sub.i.i, %1
  %conv.i.i = sext i32 %add.i.i to i64
  tail call void @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #11
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #11
  tail call void @halide_free(i8* %user_context, i8* nonnull %call.i) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit: ; preds = %if.else.i32, %if.then.i31
  %call4 = tail call i32 @halide_error_check_fault_and_return(i8* %user_context, i32 -30) #12
  ret i32 %call4
}

; Function Attrs: nounwind
define weak i32 @halide_error_unaligned_host_ptr(i8* %user_context, i8* %func, i32 %alignment) local_unnamed_addr #0 {
entry:
  %call.i = tail call i8* @halide_malloc(i8* %user_context, i32 1024) #11
  %0 = ptrtoint i8* %call.i to i32
  %tobool5.i = icmp eq i8* %call.i, null
  br i1 %tobool5.i, label %entry.split, label %if.then.i

entry.split:                                      ; preds = %entry
  %call5.i1 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* nonnull getelementptr inbounds ([21 x i8], [21 x i8]* @.str.49, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit

if.then.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !7
  %call5.i2 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* nonnull getelementptr inbounds ([21 x i8], [21 x i8]* @.str.49, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then.i
  %phi.call = phi i8* [ %call5.i1, %entry.split ], [ %call5.i2, %if.then.i ]
  %ref.tmp.sroa.14.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then.i ]
  %cmp.i = icmp eq i8* %func, null
  br i1 %cmp.i, label %if.then.i13, label %if.else.i15

if.then.i13:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit
  %call.i12 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.14.0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.78, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit

if.else.i15:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit
  %call5.i14 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.14.0, i8* nonnull %func) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit: ; preds = %if.else.i15, %if.then.i13
  %storemerge.i = phi i8* [ %call5.i14, %if.else.i15 ], [ %call.i12, %if.then.i13 ]
  %call5.i18 = tail call i8* @halide_string_to_string(i8* %storemerge.i, i8* %ref.tmp.sroa.14.0, i8* nonnull getelementptr inbounds ([22 x i8], [22 x i8]* @.str.50, i32 0, i32 0)) #11
  %conv.i = sext i32 %alignment to i64
  %call.i23 = tail call i8* @halide_int64_to_string(i8* %call5.i18, i8* %ref.tmp.sroa.14.0, i64 %conv.i, i32 1) #11
  %call5.i26 = tail call i8* @halide_string_to_string(i8* %call.i23, i8* %ref.tmp.sroa.14.0, i8* nonnull getelementptr inbounds ([17 x i8], [17 x i8]* @.str.51, i32 0, i32 0)) #11
  br i1 %tobool5.i, label %if.then.i31, label %if.else.i32

if.then.i31:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.8.103, i32 0, i32 0)) #11
  tail call void @halide_free(i8* %user_context, i8* null) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit

if.else.i32:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit
  %1 = ptrtoint i8* %call5.i26 to i32
  %sub.ptr.sub.i.i = sub i32 1, %0
  %add.i.i = add i32 %sub.ptr.sub.i.i, %1
  %conv.i.i = sext i32 %add.i.i to i64
  tail call void @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #11
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #11
  tail call void @halide_free(i8* %user_context, i8* nonnull %call.i) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit: ; preds = %if.else.i32, %if.then.i31
  %call5 = tail call i32 @halide_error_check_fault_and_return(i8* %user_context, i32 -24) #12
  ret i32 %call5
}

; Function Attrs: nounwind
define weak i32 @halide_error_host_is_null(i8* %user_context, i8* %func) local_unnamed_addr #0 {
entry:
  %call.i = tail call i8* @halide_malloc(i8* %user_context, i32 1024) #11
  %0 = ptrtoint i8* %call.i to i32
  %tobool5.i = icmp eq i8* %call.i, null
  br i1 %tobool5.i, label %entry.split, label %if.then.i

entry.split:                                      ; preds = %entry
  %call5.i1 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* nonnull getelementptr inbounds ([21 x i8], [21 x i8]* @.str.49, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit

if.then.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !7
  %call5.i2 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* nonnull getelementptr inbounds ([21 x i8], [21 x i8]* @.str.49, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then.i
  %phi.call = phi i8* [ %call5.i1, %entry.split ], [ %call5.i2, %if.then.i ]
  %ref.tmp.sroa.12.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then.i ]
  %cmp.i = icmp eq i8* %func, null
  br i1 %cmp.i, label %if.then.i11, label %if.else.i13

if.then.i11:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit
  %call.i10 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.12.0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.78, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit

if.else.i13:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit
  %call5.i12 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.12.0, i8* nonnull %func) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit: ; preds = %if.else.i13, %if.then.i11
  %storemerge.i = phi i8* [ %call5.i12, %if.else.i13 ], [ %call.i10, %if.then.i11 ]
  %call5.i16 = tail call i8* @halide_string_to_string(i8* %storemerge.i, i8* %ref.tmp.sroa.12.0, i8* nonnull getelementptr inbounds ([55 x i8], [55 x i8]* @.str.52, i32 0, i32 0)) #11
  br i1 %tobool5.i, label %if.then.i21, label %if.else.i22

if.then.i21:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.8.103, i32 0, i32 0)) #11
  tail call void @halide_free(i8* %user_context, i8* null) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit

if.else.i22:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit
  %1 = ptrtoint i8* %call5.i16 to i32
  %sub.ptr.sub.i.i = sub i32 1, %0
  %add.i.i = add i32 %sub.ptr.sub.i.i, %1
  %conv.i.i = sext i32 %add.i.i to i64
  tail call void @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #11
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #11
  tail call void @halide_free(i8* %user_context, i8* nonnull %call.i) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit: ; preds = %if.else.i22, %if.then.i21
  %call3 = tail call i32 @halide_error_check_fault_and_return(i8* %user_context, i32 -34) #12
  ret i32 %call3
}

; Function Attrs: nounwind
define weak i32 @halide_error_bad_fold(i8* %user_context, i8* %func_name, i8* %var_name, i8* %loop_name) local_unnamed_addr #0 {
entry:
  %call.i = tail call i8* @halide_malloc(i8* %user_context, i32 1024) #11
  %0 = ptrtoint i8* %call.i to i32
  %tobool5.i = icmp eq i8* %call.i, null
  br i1 %tobool5.i, label %entry.split, label %if.then.i

entry.split:                                      ; preds = %entry
  %call5.i1 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* nonnull getelementptr inbounds ([30 x i8], [30 x i8]* @.str.53, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit

if.then.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !7
  %call5.i2 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* nonnull getelementptr inbounds ([30 x i8], [30 x i8]* @.str.53, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then.i
  %phi.call = phi i8* [ %call5.i1, %entry.split ], [ %call5.i2, %if.then.i ]
  %ref.tmp.sroa.16.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then.i ]
  %cmp.i = icmp eq i8* %var_name, null
  br i1 %cmp.i, label %if.then.i15, label %if.else.i17

if.then.i15:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit
  %call.i14 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.16.0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.78, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit

if.else.i17:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit
  %call5.i16 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.16.0, i8* nonnull %var_name) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit: ; preds = %if.else.i17, %if.then.i15
  %storemerge.i = phi i8* [ %call5.i16, %if.else.i17 ], [ %call.i14, %if.then.i15 ]
  %call5.i20 = tail call i8* @halide_string_to_string(i8* %storemerge.i, i8* %ref.tmp.sroa.16.0, i8* nonnull getelementptr inbounds ([5 x i8], [5 x i8]* @.str.54, i32 0, i32 0)) #11
  %cmp.i23 = icmp eq i8* %func_name, null
  br i1 %cmp.i23, label %if.then.i27, label %if.else.i29

if.then.i27:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit
  %call.i26 = tail call i8* @halide_string_to_string(i8* %call5.i20, i8* %ref.tmp.sroa.16.0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.78, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit31

if.else.i29:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit
  %call5.i28 = tail call i8* @halide_string_to_string(i8* %call5.i20, i8* %ref.tmp.sroa.16.0, i8* nonnull %func_name) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit31

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit31: ; preds = %if.else.i29, %if.then.i27
  %storemerge.i30 = phi i8* [ %call5.i28, %if.else.i29 ], [ %call.i26, %if.then.i27 ]
  %call5.i34 = tail call i8* @halide_string_to_string(i8* %storemerge.i30, i8* %ref.tmp.sroa.16.0, i8* nonnull getelementptr inbounds ([36 x i8], [36 x i8]* @.str.55, i32 0, i32 0)) #11
  %cmp.i37 = icmp eq i8* %loop_name, null
  br i1 %cmp.i37, label %if.then.i41, label %if.else.i43

if.then.i41:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit31
  %call.i40 = tail call i8* @halide_string_to_string(i8* %call5.i34, i8* %ref.tmp.sroa.16.0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.78, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit45

if.else.i43:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit31
  %call5.i42 = tail call i8* @halide_string_to_string(i8* %call5.i34, i8* %ref.tmp.sroa.16.0, i8* nonnull %loop_name) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit45

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit45: ; preds = %if.else.i43, %if.then.i41
  %storemerge.i44 = phi i8* [ %call5.i42, %if.else.i43 ], [ %call.i40, %if.then.i41 ]
  %call5.i48 = tail call i8* @halide_string_to_string(i8* %storemerge.i44, i8* %ref.tmp.sroa.16.0, i8* nonnull getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.67, i32 0, i32 0)) #11
  br i1 %tobool5.i, label %if.then.i53, label %if.else.i54

if.then.i53:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit45
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.8.103, i32 0, i32 0)) #11
  tail call void @halide_free(i8* %user_context, i8* null) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit

if.else.i54:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit45
  %1 = ptrtoint i8* %call5.i48 to i32
  %sub.ptr.sub.i.i = sub i32 1, %0
  %add.i.i = add i32 %sub.ptr.sub.i.i, %1
  %conv.i.i = sext i32 %add.i.i to i64
  tail call void @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #11
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #11
  tail call void @halide_free(i8* %user_context, i8* nonnull %call.i) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit: ; preds = %if.else.i54, %if.then.i53
  %call7 = tail call i32 @halide_error_check_fault_and_return(i8* %user_context, i32 -25) #12
  ret i32 %call7
}

; Function Attrs: nounwind
define weak i32 @halide_error_bad_extern_fold(i8* %user_context, i8* %func_name, i32 %dim, i32 %min, i32 %extent, i32 %valid_min, i32 %fold_factor) local_unnamed_addr #0 {
entry:
  %cmp = icmp slt i32 %min, %valid_min
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %add = add nsw i32 %extent, %min
  %add1 = add nsw i32 %fold_factor, %valid_min
  %cmp2 = icmp sgt i32 %add, %add1
  br i1 %cmp2, label %if.then, label %if.else

if.then:                                          ; preds = %lor.lhs.false, %entry
  %call.i = tail call i8* @halide_malloc(i8* %user_context, i32 1024) #11
  %0 = ptrtoint i8* %call.i to i32
  %tobool5.i = icmp eq i8* %call.i, null
  br i1 %tobool5.i, label %if.then.split, label %if.then.i

if.then.split:                                    ; preds = %if.then
  %call5.i1 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* nonnull getelementptr inbounds ([23 x i8], [23 x i8]* @.str.56, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit

if.then.i:                                        ; preds = %if.then
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !7
  %call5.i2 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* nonnull getelementptr inbounds ([23 x i8], [23 x i8]* @.str.56, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit: ; preds = %if.then.split, %if.then.i
  %phi.call = phi i8* [ %call5.i1, %if.then.split ], [ %call5.i2, %if.then.i ]
  %ref.tmp.sroa.23.0 = phi i8* [ null, %if.then.split ], [ %add.ptr.i, %if.then.i ]
  %conv.i = sext i32 %dim to i64
  %call.i57 = tail call i8* @halide_int64_to_string(i8* %phi.call, i8* %ref.tmp.sroa.23.0, i64 %conv.i, i32 1) #11
  %call5.i60 = tail call i8* @halide_string_to_string(i8* %call.i57, i8* %ref.tmp.sroa.23.0, i8* nonnull getelementptr inbounds ([5 x i8], [5 x i8]* @.str.54, i32 0, i32 0)) #11
  %cmp.i = icmp eq i8* %func_name, null
  br i1 %cmp.i, label %if.then.i65, label %if.else.i67

if.then.i65:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit
  %call.i64 = tail call i8* @halide_string_to_string(i8* %call5.i60, i8* %ref.tmp.sroa.23.0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.78, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit

if.else.i67:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit
  %call5.i66 = tail call i8* @halide_string_to_string(i8* %call5.i60, i8* %ref.tmp.sroa.23.0, i8* nonnull %func_name) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit: ; preds = %if.else.i67, %if.then.i65
  %storemerge.i = phi i8* [ %call5.i66, %if.else.i67 ], [ %call.i64, %if.then.i65 ]
  %call5.i70 = tail call i8* @halide_string_to_string(i8* %storemerge.i, i8* %ref.tmp.sroa.23.0, i8* nonnull getelementptr inbounds ([36 x i8], [36 x i8]* @.str.57, i32 0, i32 0)) #11
  %conv.i75 = sext i32 %min to i64
  %call.i76 = tail call i8* @halide_int64_to_string(i8* %call5.i70, i8* %ref.tmp.sroa.23.0, i64 %conv.i75, i32 1) #11
  %call5.i79 = tail call i8* @halide_string_to_string(i8* %call.i76, i8* %ref.tmp.sroa.23.0, i8* nonnull getelementptr inbounds ([3 x i8], [3 x i8]* @.str.58.76, i32 0, i32 0)) #11
  %add9 = add nsw i32 %extent, %min
  %sub = add nsw i32 %add9, -1
  %conv.i84 = sext i32 %sub to i64
  %call.i85 = tail call i8* @halide_int64_to_string(i8* %call5.i79, i8* %ref.tmp.sroa.23.0, i64 %conv.i84, i32 1) #11
  %call5.i88 = tail call i8* @halide_string_to_string(i8* %call.i85, i8* %ref.tmp.sroa.23.0, i8* nonnull getelementptr inbounds ([3 x i8], [3 x i8]* @.str.59.77, i32 0, i32 0)) #11
  %call5.i93 = tail call i8* @halide_string_to_string(i8* %call5.i88, i8* %ref.tmp.sroa.23.0, i8* nonnull getelementptr inbounds ([47 x i8], [47 x i8]* @.str.60.78, i32 0, i32 0)) #11
  %conv.i98 = sext i32 %valid_min to i64
  %call.i99 = tail call i8* @halide_int64_to_string(i8* %call5.i93, i8* %ref.tmp.sroa.23.0, i64 %conv.i98, i32 1) #11
  %call5.i102 = tail call i8* @halide_string_to_string(i8* %call.i99, i8* %ref.tmp.sroa.23.0, i8* nonnull getelementptr inbounds ([3 x i8], [3 x i8]* @.str.58.76, i32 0, i32 0)) #11
  %add15 = add nsw i32 %fold_factor, %valid_min
  %sub16 = add nsw i32 %add15, -1
  %conv.i107 = sext i32 %sub16 to i64
  %call.i108 = tail call i8* @halide_int64_to_string(i8* %call5.i102, i8* %ref.tmp.sroa.23.0, i64 %conv.i107, i32 1) #11
  %call5.i111 = tail call i8* @halide_string_to_string(i8* %call.i108, i8* %ref.tmp.sroa.23.0, i8* nonnull getelementptr inbounds ([3 x i8], [3 x i8]* @.str.61.79, i32 0, i32 0)) #11
  br i1 %tobool5.i, label %if.then.i116, label %if.else.i117

if.then.i116:                                     ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.8.103, i32 0, i32 0)) #11
  tail call void @halide_free(i8* %user_context, i8* null) #11
  br label %if.end

if.else.i117:                                     ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit
  %1 = ptrtoint i8* %call5.i111 to i32
  %sub.ptr.sub.i.i = sub i32 1, %0
  %add.i.i = add i32 %sub.ptr.sub.i.i, %1
  %conv.i.i = sext i32 %add.i.i to i64
  tail call void @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #11
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #11
  tail call void @halide_free(i8* %user_context, i8* nonnull %call.i) #11
  br label %if.end

if.else:                                          ; preds = %lor.lhs.false
  %call.i121 = tail call i8* @halide_malloc(i8* %user_context, i32 1024) #11
  %2 = ptrtoint i8* %call.i121 to i32
  %tobool5.i124 = icmp eq i8* %call.i121, null
  br i1 %tobool5.i124, label %if.else.split, label %if.then.i127

if.else.split:                                    ; preds = %if.else
  %call5.i1343 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* nonnull getelementptr inbounds ([23 x i8], [23 x i8]* @.str.56, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit131

if.then.i127:                                     ; preds = %if.else
  %add.ptr.i125 = getelementptr inbounds i8, i8* %call.i121, i32 1023
  store i8 0, i8* %add.ptr.i125, align 1, !tbaa !7
  %call5.i1344 = tail call i8* @halide_string_to_string(i8* nonnull %call.i121, i8* nonnull %add.ptr.i125, i8* nonnull getelementptr inbounds ([23 x i8], [23 x i8]* @.str.56, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit131

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit131: ; preds = %if.else.split, %if.then.i127
  %phi.call5 = phi i8* [ %call5.i1343, %if.else.split ], [ %call5.i1344, %if.then.i127 ]
  %ref.tmp19.sroa.22.0 = phi i8* [ null, %if.else.split ], [ %add.ptr.i125, %if.then.i127 ]
  %conv.i140 = sext i32 %dim to i64
  %call.i141 = tail call i8* @halide_int64_to_string(i8* %phi.call5, i8* %ref.tmp19.sroa.22.0, i64 %conv.i140, i32 1) #11
  %call5.i144 = tail call i8* @halide_string_to_string(i8* %call.i141, i8* %ref.tmp19.sroa.22.0, i8* nonnull getelementptr inbounds ([5 x i8], [5 x i8]* @.str.54, i32 0, i32 0)) #11
  %cmp.i148 = icmp eq i8* %func_name, null
  br i1 %cmp.i148, label %if.then.i152, label %if.else.i154

if.then.i152:                                     ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit131
  %call.i151 = tail call i8* @halide_string_to_string(i8* %call5.i144, i8* %ref.tmp19.sroa.22.0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.78, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit157

if.else.i154:                                     ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit131
  %call5.i153 = tail call i8* @halide_string_to_string(i8* %call5.i144, i8* %ref.tmp19.sroa.22.0, i8* nonnull %func_name) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit157

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit157: ; preds = %if.else.i154, %if.then.i152
  %storemerge.i155 = phi i8* [ %call5.i153, %if.else.i154 ], [ %call.i151, %if.then.i152 ]
  %call5.i160 = tail call i8* @halide_string_to_string(i8* %storemerge.i155, i8* %ref.tmp19.sroa.22.0, i8* nonnull getelementptr inbounds ([36 x i8], [36 x i8]* @.str.57, i32 0, i32 0)) #11
  %conv.i166 = sext i32 %min to i64
  %call.i167 = tail call i8* @halide_int64_to_string(i8* %call5.i160, i8* %ref.tmp19.sroa.22.0, i64 %conv.i166, i32 1) #11
  %call5.i170 = tail call i8* @halide_string_to_string(i8* %call.i167, i8* %ref.tmp19.sroa.22.0, i8* nonnull getelementptr inbounds ([3 x i8], [3 x i8]* @.str.58.76, i32 0, i32 0)) #11
  %sub28 = add nsw i32 %add, -1
  %conv.i176 = sext i32 %sub28 to i64
  %call.i177 = tail call i8* @halide_int64_to_string(i8* %call5.i170, i8* %ref.tmp19.sroa.22.0, i64 %conv.i176, i32 1) #11
  %call5.i180 = tail call i8* @halide_string_to_string(i8* %call.i177, i8* %ref.tmp19.sroa.22.0, i8* nonnull getelementptr inbounds ([3 x i8], [3 x i8]* @.str.59.77, i32 0, i32 0)) #11
  %call5.i186 = tail call i8* @halide_string_to_string(i8* %call5.i180, i8* %ref.tmp19.sroa.22.0, i8* nonnull getelementptr inbounds ([47 x i8], [47 x i8]* @.str.62, i32 0, i32 0)) #11
  %call5.i192 = tail call i8* @halide_string_to_string(i8* %call5.i186, i8* %ref.tmp19.sroa.22.0, i8* nonnull getelementptr inbounds ([30 x i8], [30 x i8]* @.str.63, i32 0, i32 0)) #11
  %conv.i198 = sext i32 %fold_factor to i64
  %call.i199 = tail call i8* @halide_int64_to_string(i8* %call5.i192, i8* %ref.tmp19.sroa.22.0, i64 %conv.i198, i32 1) #11
  %call5.i202 = tail call i8* @halide_string_to_string(i8* %call.i199, i8* %ref.tmp19.sroa.22.0, i8* nonnull getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.67, i32 0, i32 0)) #11
  br i1 %tobool5.i124, label %if.then.i209, label %if.else.i215

if.then.i209:                                     ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit157
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.8.103, i32 0, i32 0)) #11
  tail call void @halide_free(i8* %user_context, i8* null) #11
  br label %if.end

if.else.i215:                                     ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit157
  %3 = ptrtoint i8* %call5.i202 to i32
  %sub.ptr.sub.i.i212 = sub i32 1, %2
  %add.i.i213 = add i32 %sub.ptr.sub.i.i212, %3
  %conv.i.i214 = sext i32 %add.i.i213 to i64
  tail call void @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i121, i64 %conv.i.i214) #11
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i121) #11
  tail call void @halide_free(i8* %user_context, i8* nonnull %call.i121) #11
  br label %if.end

if.end:                                           ; preds = %if.then.i209, %if.else.i215, %if.then.i116, %if.else.i117
  %call35 = tail call i32 @halide_error_check_fault_and_return(i8* %user_context, i32 -35) #12
  ret i32 %call35
}

; Function Attrs: nounwind
define weak i32 @halide_error_fold_factor_too_small(i8* %user_context, i8* %func_name, i8* %var_name, i32 %fold_factor, i8* %loop_name, i32 %required_extent) local_unnamed_addr #0 {
entry:
  %call.i = tail call i8* @halide_malloc(i8* %user_context, i32 1024) #11
  %0 = ptrtoint i8* %call.i to i32
  %tobool5.i = icmp eq i8* %call.i, null
  br i1 %tobool5.i, label %entry.split, label %if.then.i

entry.split:                                      ; preds = %entry
  %call5.i1 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* nonnull getelementptr inbounds ([18 x i8], [18 x i8]* @.str.64.80, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit

if.then.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !7
  %call5.i2 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* nonnull getelementptr inbounds ([18 x i8], [18 x i8]* @.str.64.80, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then.i
  %phi.call = phi i8* [ %call5.i1, %entry.split ], [ %call5.i2, %if.then.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then.i ]
  %conv.i = sext i32 %fold_factor to i64
  %call.i18 = tail call i8* @halide_int64_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i64 %conv.i, i32 1) #11
  %call5.i21 = tail call i8* @halide_string_to_string(i8* %call.i18, i8* %ref.tmp.sroa.20.0, i8* nonnull getelementptr inbounds ([16 x i8], [16 x i8]* @.str.65, i32 0, i32 0)) #11
  %cmp.i = icmp eq i8* %var_name, null
  br i1 %cmp.i, label %if.then.i26, label %if.else.i28

if.then.i26:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit
  %call.i25 = tail call i8* @halide_string_to_string(i8* %call5.i21, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.78, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit

if.else.i28:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit
  %call5.i27 = tail call i8* @halide_string_to_string(i8* %call5.i21, i8* %ref.tmp.sroa.20.0, i8* nonnull %var_name) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit: ; preds = %if.else.i28, %if.then.i26
  %storemerge.i = phi i8* [ %call5.i27, %if.else.i28 ], [ %call.i25, %if.then.i26 ]
  %call5.i31 = tail call i8* @halide_string_to_string(i8* %storemerge.i, i8* %ref.tmp.sroa.20.0, i8* nonnull getelementptr inbounds ([5 x i8], [5 x i8]* @.str.54, i32 0, i32 0)) #11
  %cmp.i34 = icmp eq i8* %func_name, null
  br i1 %cmp.i34, label %if.then.i38, label %if.else.i40

if.then.i38:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit
  %call.i37 = tail call i8* @halide_string_to_string(i8* %call5.i31, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.78, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit42

if.else.i40:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit
  %call5.i39 = tail call i8* @halide_string_to_string(i8* %call5.i31, i8* %ref.tmp.sroa.20.0, i8* nonnull %func_name) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit42

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit42: ; preds = %if.else.i40, %if.then.i38
  %storemerge.i41 = phi i8* [ %call5.i39, %if.else.i40 ], [ %call.i37, %if.then.i38 ]
  %call5.i45 = tail call i8* @halide_string_to_string(i8* %storemerge.i41, i8* %ref.tmp.sroa.20.0, i8* nonnull getelementptr inbounds ([61 x i8], [61 x i8]* @.str.66, i32 0, i32 0)) #11
  %cmp.i48 = icmp eq i8* %loop_name, null
  br i1 %cmp.i48, label %if.then.i52, label %if.else.i54

if.then.i52:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit42
  %call.i51 = tail call i8* @halide_string_to_string(i8* %call5.i45, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.78, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit56

if.else.i54:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit42
  %call5.i53 = tail call i8* @halide_string_to_string(i8* %call5.i45, i8* %ref.tmp.sroa.20.0, i8* nonnull %loop_name) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit56

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit56: ; preds = %if.else.i54, %if.then.i52
  %storemerge.i55 = phi i8* [ %call5.i53, %if.else.i54 ], [ %call.i51, %if.then.i52 ]
  %call5.i59 = tail call i8* @halide_string_to_string(i8* %storemerge.i55, i8* %ref.tmp.sroa.20.0, i8* nonnull getelementptr inbounds ([3 x i8], [3 x i8]* @.str.32.69, i32 0, i32 0)) #11
  %conv.i64 = sext i32 %required_extent to i64
  %call.i65 = tail call i8* @halide_int64_to_string(i8* %call5.i59, i8* %ref.tmp.sroa.20.0, i64 %conv.i64, i32 1) #11
  %call5.i68 = tail call i8* @halide_string_to_string(i8* %call.i65, i8* %ref.tmp.sroa.20.0, i8* nonnull getelementptr inbounds ([3 x i8], [3 x i8]* @.str.67, i32 0, i32 0)) #11
  br i1 %tobool5.i, label %if.then.i73, label %if.else.i74

if.then.i73:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit56
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.8.103, i32 0, i32 0)) #11
  tail call void @halide_free(i8* %user_context, i8* null) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit

if.else.i74:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit56
  %1 = ptrtoint i8* %call5.i68 to i32
  %sub.ptr.sub.i.i = sub i32 1, %0
  %add.i.i = add i32 %sub.ptr.sub.i.i, %1
  %conv.i.i = sext i32 %add.i.i to i64
  tail call void @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #11
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #11
  tail call void @halide_free(i8* %user_context, i8* nonnull %call.i) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit: ; preds = %if.else.i74, %if.then.i73
  %call11 = tail call i32 @halide_error_check_fault_and_return(i8* %user_context, i32 -26) #12
  ret i32 %call11
}

; Function Attrs: nounwind
define weak i32 @halide_error_requirement_failed(i8* %user_context, i8* %condition, i8* %message) local_unnamed_addr #0 {
entry:
  %call.i = tail call i8* @halide_malloc(i8* %user_context, i32 1024) #11
  %0 = ptrtoint i8* %call.i to i32
  %tobool5.i = icmp eq i8* %call.i, null
  br i1 %tobool5.i, label %entry.split, label %if.then.i

entry.split:                                      ; preds = %entry
  %call5.i1 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* nonnull getelementptr inbounds ([22 x i8], [22 x i8]* @.str.68, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit

if.then.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !7
  %call5.i2 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* nonnull getelementptr inbounds ([22 x i8], [22 x i8]* @.str.68, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then.i
  %phi.call = phi i8* [ %call5.i1, %entry.split ], [ %call5.i2, %if.then.i ]
  %ref.tmp.sroa.13.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then.i ]
  %cmp.i = icmp eq i8* %condition, null
  br i1 %cmp.i, label %if.then.i12, label %if.else.i14

if.then.i12:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.13.0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.78, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit

if.else.i14:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit
  %call5.i13 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.13.0, i8* nonnull %condition) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit: ; preds = %if.else.i14, %if.then.i12
  %storemerge.i = phi i8* [ %call5.i13, %if.else.i14 ], [ %call.i11, %if.then.i12 ]
  %call5.i17 = tail call i8* @halide_string_to_string(i8* %storemerge.i, i8* %ref.tmp.sroa.13.0, i8* nonnull getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3.92, i32 0, i32 0)) #11
  %cmp.i20 = icmp eq i8* %message, null
  br i1 %cmp.i20, label %if.then.i24, label %if.else.i26

if.then.i24:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit
  %call.i23 = tail call i8* @halide_string_to_string(i8* %call5.i17, i8* %ref.tmp.sroa.13.0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.78, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit28

if.else.i26:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit
  %call5.i25 = tail call i8* @halide_string_to_string(i8* %call5.i17, i8* %ref.tmp.sroa.13.0, i8* nonnull %message) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit28

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit28: ; preds = %if.else.i26, %if.then.i24
  %storemerge.i27 = phi i8* [ %call5.i25, %if.else.i26 ], [ %call.i23, %if.then.i24 ]
  br i1 %tobool5.i, label %if.then.i31, label %if.else.i32

if.then.i31:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit28
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.8.103, i32 0, i32 0)) #11
  tail call void @halide_free(i8* %user_context, i8* null) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit

if.else.i32:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit28
  %1 = ptrtoint i8* %storemerge.i27 to i32
  %sub.ptr.sub.i.i = sub i32 1, %0
  %add.i.i = add i32 %sub.ptr.sub.i.i, %1
  %conv.i.i = sext i32 %add.i.i to i64
  tail call void @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #11
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #11
  tail call void @halide_free(i8* %user_context, i8* nonnull %call.i) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit: ; preds = %if.else.i32, %if.then.i31
  %call4 = tail call i32 @halide_error_check_fault_and_return(i8* %user_context, i32 -27) #12
  ret i32 %call4
}

; Function Attrs: nounwind
define weak i32 @halide_error_specialize_fail(i8* %user_context, i8* %message) local_unnamed_addr #0 {
entry:
  %call.i = tail call i8* @halide_malloc(i8* %user_context, i32 1024) #11
  %0 = ptrtoint i8* %call.i to i32
  %tobool5.i = icmp eq i8* %call.i, null
  br i1 %tobool5.i, label %entry.split, label %if.then.i

entry.split:                                      ; preds = %entry
  %call5.i1 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* nonnull getelementptr inbounds ([59 x i8], [59 x i8]* @.str.70, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit

if.then.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !7
  %call5.i2 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* nonnull getelementptr inbounds ([59 x i8], [59 x i8]* @.str.70, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then.i
  %phi.call = phi i8* [ %call5.i1, %entry.split ], [ %call5.i2, %if.then.i ]
  %ref.tmp.sroa.11.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then.i ]
  %cmp.i = icmp eq i8* %message, null
  br i1 %cmp.i, label %if.then.i10, label %if.else.i12

if.then.i10:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit
  %call.i9 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.11.0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.78, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit

if.else.i12:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit
  %call5.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.11.0, i8* nonnull %message) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit: ; preds = %if.else.i12, %if.then.i10
  %storemerge.i = phi i8* [ %call5.i11, %if.else.i12 ], [ %call.i9, %if.then.i10 ]
  br i1 %tobool5.i, label %if.then.i15, label %if.else.i16

if.then.i15:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.8.103, i32 0, i32 0)) #11
  tail call void @halide_free(i8* %user_context, i8* null) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit

if.else.i16:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit
  %1 = ptrtoint i8* %storemerge.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %0
  %add.i.i = add i32 %sub.ptr.sub.i.i, %1
  %conv.i.i = sext i32 %add.i.i to i64
  tail call void @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #11
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #11
  tail call void @halide_free(i8* %user_context, i8* nonnull %call.i) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit: ; preds = %if.else.i16, %if.then.i15
  %call2 = tail call i32 @halide_error_check_fault_and_return(i8* %user_context, i32 -31) #12
  ret i32 %call2
}

; Function Attrs: nounwind
define weak i32 @halide_error_no_device_interface(i8* %user_context) local_unnamed_addr #0 {
entry:
  %call.i = tail call i8* @halide_malloc(i8* %user_context, i32 1024) #11
  %tobool5.i = icmp eq i8* %call.i, null
  br i1 %tobool5.i, label %if.then.i8, label %if.else.i9

if.then.i8:                                       ; preds = %entry
  %call5.i21 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* nonnull getelementptr inbounds ([55 x i8], [55 x i8]* @.str.71, i32 0, i32 0)) #11
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.8.103, i32 0, i32 0)) #11
  tail call void @halide_free(i8* %user_context, i8* null) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit

if.else.i9:                                       ; preds = %entry
  %0 = ptrtoint i8* %call.i to i32
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !7
  %call5.i = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* nonnull getelementptr inbounds ([55 x i8], [55 x i8]* @.str.71, i32 0, i32 0)) #11
  %1 = ptrtoint i8* %call5.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %0
  %add.i.i = add i32 %sub.ptr.sub.i.i, %1
  %conv.i.i = sext i32 %add.i.i to i64
  tail call void @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #11
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #11
  tail call void @halide_free(i8* %user_context, i8* nonnull %call.i) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit: ; preds = %if.else.i9, %if.then.i8
  %call1 = tail call i32 @halide_error_check_fault_and_return(i8* %user_context, i32 -19) #12
  ret i32 %call1
}

; Function Attrs: nounwind
define weak i32 @halide_error_device_interface_no_device(i8* %user_context) local_unnamed_addr #0 {
entry:
  %call.i = tail call i8* @halide_malloc(i8* %user_context, i32 1024) #11
  %tobool5.i = icmp eq i8* %call.i, null
  br i1 %tobool5.i, label %if.then.i8, label %if.else.i9

if.then.i8:                                       ; preds = %entry
  %call5.i21 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* nonnull getelementptr inbounds ([56 x i8], [56 x i8]* @.str.72, i32 0, i32 0)) #11
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.8.103, i32 0, i32 0)) #11
  tail call void @halide_free(i8* %user_context, i8* null) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit

if.else.i9:                                       ; preds = %entry
  %0 = ptrtoint i8* %call.i to i32
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !7
  %call5.i = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* nonnull getelementptr inbounds ([56 x i8], [56 x i8]* @.str.72, i32 0, i32 0)) #11
  %1 = ptrtoint i8* %call5.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %0
  %add.i.i = add i32 %sub.ptr.sub.i.i, %1
  %conv.i.i = sext i32 %add.i.i to i64
  tail call void @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #11
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #11
  tail call void @halide_free(i8* %user_context, i8* nonnull %call.i) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit: ; preds = %if.else.i9, %if.then.i8
  %call1 = tail call i32 @halide_error_check_fault_and_return(i8* %user_context, i32 -36) #12
  ret i32 %call1
}

; Function Attrs: nounwind
define weak i32 @halide_error_host_and_device_dirty(i8* %user_context) local_unnamed_addr #0 {
entry:
  %call.i = tail call i8* @halide_malloc(i8* %user_context, i32 1024) #11
  %tobool5.i = icmp eq i8* %call.i, null
  br i1 %tobool5.i, label %if.then.i8, label %if.else.i9

if.then.i8:                                       ; preds = %entry
  %call5.i21 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* nonnull getelementptr inbounds ([49 x i8], [49 x i8]* @.str.73, i32 0, i32 0)) #11
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.8.103, i32 0, i32 0)) #11
  tail call void @halide_free(i8* %user_context, i8* null) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit

if.else.i9:                                       ; preds = %entry
  %0 = ptrtoint i8* %call.i to i32
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !7
  %call5.i = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* nonnull getelementptr inbounds ([49 x i8], [49 x i8]* @.str.73, i32 0, i32 0)) #11
  %1 = ptrtoint i8* %call5.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %0
  %add.i.i = add i32 %sub.ptr.sub.i.i, %1
  %conv.i.i = sext i32 %add.i.i to i64
  tail call void @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #11
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #11
  tail call void @halide_free(i8* %user_context, i8* nonnull %call.i) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit: ; preds = %if.else.i9, %if.then.i8
  %call1 = tail call i32 @halide_error_check_fault_and_return(i8* %user_context, i32 -37) #12
  ret i32 %call1
}

; Function Attrs: nounwind
define weak i32 @halide_error_buffer_is_null(i8* %user_context, i8* %routine) local_unnamed_addr #0 {
entry:
  %call.i = tail call i8* @halide_malloc(i8* %user_context, i32 1024) #11
  %0 = ptrtoint i8* %call.i to i32
  %tobool5.i = icmp eq i8* %call.i, null
  br i1 %tobool5.i, label %entry.split, label %if.then.i

entry.split:                                      ; preds = %entry
  %call5.i1 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* nonnull getelementptr inbounds ([26 x i8], [26 x i8]* @.str.74, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit

if.then.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !7
  %call5.i2 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* nonnull getelementptr inbounds ([26 x i8], [26 x i8]* @.str.74, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then.i
  %phi.call = phi i8* [ %call5.i1, %entry.split ], [ %call5.i2, %if.then.i ]
  %ref.tmp.sroa.12.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then.i ]
  %cmp.i = icmp eq i8* %routine, null
  br i1 %cmp.i, label %if.then.i11, label %if.else.i13

if.then.i11:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit
  %call.i10 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.12.0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.78, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit

if.else.i13:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit
  %call5.i12 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.12.0, i8* nonnull %routine) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit: ; preds = %if.else.i13, %if.then.i11
  %storemerge.i = phi i8* [ %call5.i12, %if.else.i13 ], [ %call.i10, %if.then.i11 ]
  %call5.i16 = tail call i8* @halide_string_to_string(i8* %storemerge.i, i8* %ref.tmp.sroa.12.0, i8* nonnull getelementptr inbounds ([11 x i8], [11 x i8]* @.str.75, i32 0, i32 0)) #11
  br i1 %tobool5.i, label %if.then.i21, label %if.else.i22

if.then.i21:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.8.103, i32 0, i32 0)) #11
  tail call void @halide_free(i8* %user_context, i8* null) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit

if.else.i22:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit
  %1 = ptrtoint i8* %call5.i16 to i32
  %sub.ptr.sub.i.i = sub i32 1, %0
  %add.i.i = add i32 %sub.ptr.sub.i.i, %1
  %conv.i.i = sext i32 %add.i.i to i64
  tail call void @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #11
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #11
  tail call void @halide_free(i8* %user_context, i8* nonnull %call.i) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit: ; preds = %if.else.i22, %if.then.i21
  %call3 = tail call i32 @halide_error_check_fault_and_return(i8* %user_context, i32 -38) #12
  ret i32 %call3
}

; Function Attrs: nounwind
define weak i32 @halide_error_integer_division_by_zero(i8* %user_context) local_unnamed_addr #0 {
entry:
  %call.i = tail call i8* @halide_malloc(i8* %user_context, i32 1024) #11
  %tobool5.i = icmp eq i8* %call.i, null
  br i1 %tobool5.i, label %if.then.i6, label %if.else.i7

if.then.i6:                                       ; preds = %entry
  %call5.i19 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* nonnull getelementptr inbounds ([37 x i8], [37 x i8]* @.str.76, i32 0, i32 0)) #11
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.8.103, i32 0, i32 0)) #11
  tail call void @halide_free(i8* %user_context, i8* null) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit

if.else.i7:                                       ; preds = %entry
  %0 = ptrtoint i8* %call.i to i32
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !7
  %call5.i = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* nonnull getelementptr inbounds ([37 x i8], [37 x i8]* @.str.76, i32 0, i32 0)) #11
  %1 = ptrtoint i8* %call5.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %0
  %add.i.i = add i32 %sub.ptr.sub.i.i, %1
  %conv.i.i = sext i32 %add.i.i to i64
  tail call void @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #11
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #11
  tail call void @halide_free(i8* %user_context, i8* nonnull %call.i) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit: ; preds = %if.else.i7, %if.then.i6
  ret i32 -44
}

; Function Attrs: nounwind
define linkonce i32 @_ZN6Halide7Runtime8Internal29guess_type_and_dimensionalityEPvP8buffer_tP15halide_buffer_t(i8* %user_context, %struct.buffer_t* %old_buf, %struct.halide_buffer_t* %new_buf) local_unnamed_addr #0 {
entry:
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %new_buf, i32 0, i32 8
  store i32 4, i32* %dimensions, align 4, !tbaa !34
  %arrayidx = getelementptr inbounds %struct.buffer_t, %struct.buffer_t* %old_buf, i32 0, i32 2, i32 0
  %0 = load i32, i32* %arrayidx, align 4, !tbaa !10
  %cmp1 = icmp eq i32 %0, 0
  br i1 %cmp1, label %if.then, label %for.inc

if.then:                                          ; preds = %for.inc.2, %for.inc.1, %for.inc, %entry
  %i.038.lcssa = phi i32 [ 0, %entry ], [ 1, %for.inc ], [ 2, %for.inc.1 ], [ 3, %for.inc.2 ]
  store i32 %i.038.lcssa, i32* %dimensions, align 4, !tbaa !34
  br label %cleanup

for.inc:                                          ; preds = %entry
  %arrayidx.1 = getelementptr inbounds %struct.buffer_t, %struct.buffer_t* %old_buf, i32 0, i32 2, i32 1
  %1 = load i32, i32* %arrayidx.1, align 4, !tbaa !10
  %cmp1.1 = icmp eq i32 %1, 0
  br i1 %cmp1.1, label %if.then, label %for.inc.1

cleanup:                                          ; preds = %for.inc.2, %if.then
  %elem_size = getelementptr inbounds %struct.buffer_t, %struct.buffer_t* %old_buf, i32 0, i32 5
  %2 = load i32, i32* %elem_size, align 4, !tbaa !66
  switch i32 %2, label %sw.default [
    i32 1, label %sw.bb
    i32 2, label %sw.bb3
    i32 4, label %sw.bb6
    i32 8, label %sw.bb9
  ]

sw.bb:                                            ; preds = %cleanup
  %3 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %new_buf, i32 0, i32 7, i32 0
  %4 = bitcast i8* %3 to i32*
  store i32 67585, i32* %4, align 8
  br label %return

sw.bb3:                                           ; preds = %cleanup
  %5 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %new_buf, i32 0, i32 7, i32 0
  %6 = bitcast i8* %5 to i32*
  store i32 69633, i32* %6, align 8
  br label %return

sw.bb6:                                           ; preds = %cleanup
  %7 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %new_buf, i32 0, i32 7, i32 0
  %8 = bitcast i8* %7 to i32*
  store i32 73729, i32* %8, align 8
  br label %return

sw.bb9:                                           ; preds = %cleanup
  %9 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %new_buf, i32 0, i32 7, i32 0
  %10 = bitcast i8* %9 to i32*
  store i32 81921, i32* %10, align 8
  br label %return

sw.default:                                       ; preds = %cleanup
  %call = tail call i32 @halide_error_failed_to_upgrade_buffer_t(i8* %user_context, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.89, i32 0, i32 0), i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.1.90, i32 0, i32 0)) #11
  br label %return

return:                                           ; preds = %sw.default, %sw.bb9, %sw.bb6, %sw.bb3, %sw.bb
  %retval.0 = phi i32 [ %call, %sw.default ], [ 0, %sw.bb9 ], [ 0, %sw.bb6 ], [ 0, %sw.bb3 ], [ 0, %sw.bb ]
  ret i32 %retval.0

for.inc.1:                                        ; preds = %for.inc
  %arrayidx.2 = getelementptr inbounds %struct.buffer_t, %struct.buffer_t* %old_buf, i32 0, i32 2, i32 2
  %11 = load i32, i32* %arrayidx.2, align 4, !tbaa !10
  %cmp1.2 = icmp eq i32 %11, 0
  br i1 %cmp1.2, label %if.then, label %for.inc.2

for.inc.2:                                        ; preds = %for.inc.1
  %arrayidx.3 = getelementptr inbounds %struct.buffer_t, %struct.buffer_t* %old_buf, i32 0, i32 2, i32 3
  %12 = load i32, i32* %arrayidx.3, align 4, !tbaa !10
  %cmp1.3 = icmp eq i32 %12, 0
  br i1 %cmp1.3, label %if.then, label %cleanup
}

; Function Attrs: nounwind
define weak i32 @halide_upgrade_buffer_t(i8* %user_context, i8* %name, %struct.buffer_t* %old_buf, %struct.halide_buffer_t* %new_buf, i32 %bounds_query_only) local_unnamed_addr #0 {
entry:
  %host = getelementptr inbounds %struct.buffer_t, %struct.buffer_t* %old_buf, i32 0, i32 1
  %0 = load i8*, i8** %host, align 8, !tbaa !68
  %tobool = icmp eq i8* %0, null
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %entry
  %dev = getelementptr inbounds %struct.buffer_t, %struct.buffer_t* %old_buf, i32 0, i32 0
  %1 = load i64, i64* %dev, align 8, !tbaa !69
  %tobool1 = icmp eq i64 %1, 0
  br i1 %tobool1, label %if.end22.thread, label %if.then

if.end22.thread:                                  ; preds = %lor.lhs.false
  %host24152 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %new_buf, i32 0, i32 2
  store i8* null, i8** %host24152, align 4, !tbaa !32
  br label %if.end32

if.then:                                          ; preds = %lor.lhs.false, %entry
  %elem_size = getelementptr inbounds %struct.buffer_t, %struct.buffer_t* %old_buf, i32 0, i32 5
  %2 = load i32, i32* %elem_size, align 4, !tbaa !66
  %type = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %new_buf, i32 0, i32 7
  %bits.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %new_buf, i32 0, i32 7, i32 1
  %3 = load i8, i8* %bits.i, align 1, !tbaa !27
  %conv.i = zext i8 %3 to i32
  %add.i = add nuw nsw i32 %conv.i, 7
  %div.i = lshr i32 %add.i, 3
  %cmp = icmp eq i32 %2, %div.i
  br i1 %cmp, label %if.end, label %if.then2

if.then2:                                         ; preds = %if.then
  %call.i = tail call i8* @halide_malloc(i8* %user_context, i32 1024) #11
  %4 = ptrtoint i8* %call.i to i32
  %tobool5.i = icmp eq i8* %call.i, null
  br i1 %tobool5.i, label %if.then2.split, label %if.then.i92

if.then2.split:                                   ; preds = %if.then2
  %call5.i1 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* nonnull getelementptr inbounds ([33 x i8], [33 x i8]* @.str.2.91, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi2ELy1024EEC2EPvPc.exit

if.then.i92:                                      ; preds = %if.then2
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !7
  %call5.i2 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* nonnull getelementptr inbounds ([33 x i8], [33 x i8]* @.str.2.91, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi2ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi2ELy1024EEC2EPvPc.exit: ; preds = %if.then2.split, %if.then.i92
  %phi.call = phi i8* [ %call5.i1, %if.then2.split ], [ %call5.i2, %if.then.i92 ]
  %sstr.sroa.17.0 = phi i8* [ null, %if.then2.split ], [ %add.ptr.i, %if.then.i92 ]
  %5 = load i32, i32* %elem_size, align 4, !tbaa !66
  %conv.i101 = sext i32 %5 to i64
  %call.i102 = tail call i8* @halide_int64_to_string(i8* %phi.call, i8* %sstr.sroa.17.0, i64 %conv.i101, i32 1) #11
  %call5.i105 = tail call i8* @halide_string_to_string(i8* %call.i102, i8* %sstr.sroa.17.0, i8* nonnull getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3.92, i32 0, i32 0)) #11
  %call5.i110 = tail call i8* @halide_string_to_string(i8* %call5.i105, i8* %sstr.sroa.17.0, i8* nonnull getelementptr inbounds ([20 x i8], [20 x i8]* @.str.4.93, i32 0, i32 0)) #11
  %call.i115 = tail call i8* @halide_type_to_string(i8* %call5.i110, i8* %sstr.sroa.17.0, %struct.halide_type_t* nonnull %type) #11
  %call5.i118 = tail call i8* @halide_string_to_string(i8* %call.i115, i8* %sstr.sroa.17.0, i8* nonnull getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5.94, i32 0, i32 0)) #11
  br i1 %tobool5.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi2ELy1024EEC2EPvPc.exit
  %call12146 = tail call i32 @halide_error_failed_to_upgrade_buffer_t(i8* %user_context, i8* %name, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.8.103, i32 0, i32 0)) #11
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.8.103, i32 0, i32 0)) #11
  tail call void @halide_free(i8* %user_context, i8* null) #11
  br label %return

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi2ELy1024EEC2EPvPc.exit
  %6 = ptrtoint i8* %call5.i118 to i32
  %sub.ptr.sub.i.i125 = sub i32 1, %4
  %add.i.i126 = add i32 %sub.ptr.sub.i.i125, %6
  %conv.i.i127 = sext i32 %add.i.i126 to i64
  tail call void @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i127) #11
  %call12 = tail call i32 @halide_error_failed_to_upgrade_buffer_t(i8* %user_context, i8* %name, i8* nonnull %call.i) #11
  tail call void @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i127) #11
  tail call void @halide_free(i8* %user_context, i8* nonnull %call.i) #11
  br label %return

if.end:                                           ; preds = %if.then
  %tobool13 = icmp eq i32 %bounds_query_only, 0
  br i1 %tobool13, label %if.end22, label %if.then14

if.then14:                                        ; preds = %if.end
  %host15 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %new_buf, i32 0, i32 2
  %7 = load i8*, i8** %host15, align 4, !tbaa !32
  %cmp17 = icmp eq i8* %7, %0
  br i1 %cmp17, label %return, label %if.then18

if.then18:                                        ; preds = %if.then14
  %call19 = tail call i32 @halide_error_failed_to_upgrade_buffer_t(i8* %user_context, i8* %name, i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.6.96, i32 0, i32 0)) #11
  br label %return

if.end22:                                         ; preds = %if.end
  %dev25.phi.trans.insert = getelementptr inbounds %struct.buffer_t, %struct.buffer_t* %old_buf, i32 0, i32 0
  %.pre = load i64, i64* %dev25.phi.trans.insert, align 8, !tbaa !69
  %host24 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %new_buf, i32 0, i32 2
  store i8* %0, i8** %host24, align 4, !tbaa !32
  %tobool26 = icmp eq i64 %.pre, 0
  br i1 %tobool26, label %if.end32, label %if.then27

if.then27:                                        ; preds = %if.end22
  %conv = trunc i64 %.pre to i32
  %8 = inttoptr i32 %conv to %"struct.Halide::Runtime::Internal::old_dev_wrapper"*
  %device = getelementptr inbounds %"struct.Halide::Runtime::Internal::old_dev_wrapper", %"struct.Halide::Runtime::Internal::old_dev_wrapper"* %8, i32 0, i32 0
  %9 = load i64, i64* %device, align 8, !tbaa !70
  %interface = getelementptr inbounds %"struct.Halide::Runtime::Internal::old_dev_wrapper", %"struct.Halide::Runtime::Internal::old_dev_wrapper"* %8, i32 0, i32 1
  %10 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %interface, align 8, !tbaa !72
  br label %if.end32

if.end32:                                         ; preds = %if.then27, %if.end22, %if.end22.thread
  %.sink151 = phi i64 [ %9, %if.then27 ], [ 0, %if.end22.thread ], [ 0, %if.end22 ]
  %.sink = phi %struct.halide_device_interface_t* [ %10, %if.then27 ], [ null, %if.end22.thread ], [ null, %if.end22 ]
  %11 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %new_buf, i32 0, i32 0
  store i64 %.sink151, i64* %11, align 8
  %12 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %new_buf, i32 0, i32 1
  store %struct.halide_device_interface_t* %.sink, %struct.halide_device_interface_t** %12, align 8
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %new_buf, i32 0, i32 8
  %13 = load i32, i32* %dimensions, align 4, !tbaa !34
  %cmp33149 = icmp sgt i32 %13, 0
  br i1 %cmp33149, label %for.body.lr.ph, label %for.cond.cleanup

for.body.lr.ph:                                   ; preds = %if.end32
  %dim = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %new_buf, i32 0, i32 9
  %14 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !35
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body, %if.end32
  %flags = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %new_buf, i32 0, i32 3
  %host_dirty = getelementptr inbounds %struct.buffer_t, %struct.buffer_t* %old_buf, i32 0, i32 6
  %15 = load i8, i8* %host_dirty, align 8, !tbaa !73, !range !19
  %16 = zext i8 %15 to i64
  %dev_dirty = getelementptr inbounds %struct.buffer_t, %struct.buffer_t* %old_buf, i32 0, i32 7
  %17 = load i8, i8* %dev_dirty, align 1, !tbaa !74, !range !19
  %tobool45 = icmp eq i8 %17, 0
  %or.i.i = or i64 %16, 2
  %selv.i.i = select i1 %tobool45, i64 %16, i64 %or.i.i
  store i64 %selv.i.i, i64* %flags, align 8, !tbaa !33
  br label %return

for.body:                                         ; preds = %for.body, %for.body.lr.ph
  %i.0150 = phi i32 [ 0, %for.body.lr.ph ], [ %inc, %for.body ]
  %arrayidx = getelementptr inbounds %struct.buffer_t, %struct.buffer_t* %old_buf, i32 0, i32 4, i32 %i.0150
  %18 = load i32, i32* %arrayidx, align 4, !tbaa !10
  %min35 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %14, i32 %i.0150, i32 0
  store i32 %18, i32* %min35, align 4, !tbaa !36
  %arrayidx36 = getelementptr inbounds %struct.buffer_t, %struct.buffer_t* %old_buf, i32 0, i32 2, i32 %i.0150
  %19 = load i32, i32* %arrayidx36, align 4, !tbaa !10
  %extent39 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %14, i32 %i.0150, i32 1
  store i32 %19, i32* %extent39, align 4, !tbaa !38
  %arrayidx40 = getelementptr inbounds %struct.buffer_t, %struct.buffer_t* %old_buf, i32 0, i32 3, i32 %i.0150
  %20 = load i32, i32* %arrayidx40, align 4, !tbaa !10
  %stride43 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %14, i32 %i.0150, i32 2
  store i32 %20, i32* %stride43, align 4, !tbaa !39
  %inc = add nuw nsw i32 %i.0150, 1
  %exitcond = icmp eq i32 %inc, %13
  br i1 %exitcond, label %for.cond.cleanup, label %for.body

return:                                           ; preds = %if.then.i, %if.else.i, %for.cond.cleanup, %if.then18, %if.then14
  %retval.0 = phi i32 [ %call19, %if.then18 ], [ 0, %for.cond.cleanup ], [ 0, %if.then14 ], [ %call12, %if.else.i ], [ %call12146, %if.then.i ]
  ret i32 %retval.0
}

; Function Attrs: nounwind
define weak i32 @halide_downgrade_buffer_t(i8* %user_context, i8* %name, %struct.halide_buffer_t* %new_buf, %struct.buffer_t* %old_buf) local_unnamed_addr #0 {
entry:
  %0 = bitcast %struct.buffer_t* %old_buf to i8*
  %call = tail call i8* @memset(i8* %0, i32 0, i32 72) #11
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %new_buf, i32 0, i32 8
  %1 = load i32, i32* %dimensions, align 4, !tbaa !34
  %cmp = icmp sgt i32 %1, 4
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call1 = tail call i32 @halide_error_failed_to_downgrade_buffer_t(i8* %user_context, i8* %name, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.7.97, i32 0, i32 0)) #11
  br label %return

if.end:                                           ; preds = %entry
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %new_buf, i32 0, i32 2
  %2 = bitcast i8** %host to i32*
  %3 = load i32, i32* %2, align 4, !tbaa !32
  %host2 = getelementptr inbounds %struct.buffer_t, %struct.buffer_t* %old_buf, i32 0, i32 1
  %4 = bitcast i8** %host2 to i32*
  store i32 %3, i32* %4, align 8, !tbaa !68
  %cmp440 = icmp sgt i32 %1, 0
  br i1 %cmp440, label %for.body.lr.ph, label %for.cond.cleanup

for.body.lr.ph:                                   ; preds = %if.end
  %dim = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %new_buf, i32 0, i32 9
  %5 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !35
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body, %if.end
  %bits.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %new_buf, i32 0, i32 7, i32 1
  %6 = load i8, i8* %bits.i, align 1, !tbaa !27
  %conv.i = zext i8 %6 to i32
  %add.i = add nuw nsw i32 %conv.i, 7
  %div.i = lshr i32 %add.i, 3
  %elem_size = getelementptr inbounds %struct.buffer_t, %struct.buffer_t* %old_buf, i32 0, i32 5
  store i32 %div.i, i32* %elem_size, align 4, !tbaa !66
  %call16 = tail call i32 @halide_downgrade_buffer_t_device_fields(i8* %user_context, i8* %name, %struct.halide_buffer_t* nonnull %new_buf, %struct.buffer_t* nonnull %old_buf) #12
  br label %return

for.body:                                         ; preds = %for.body, %for.body.lr.ph
  %i.041 = phi i32 [ 0, %for.body.lr.ph ], [ %inc, %for.body ]
  %min = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %i.041, i32 0
  %7 = load i32, i32* %min, align 4, !tbaa !36
  %arrayidx6 = getelementptr inbounds %struct.buffer_t, %struct.buffer_t* %old_buf, i32 0, i32 4, i32 %i.041
  store i32 %7, i32* %arrayidx6, align 4, !tbaa !10
  %extent = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %i.041, i32 1
  %8 = load i32, i32* %extent, align 4, !tbaa !38
  %arrayidx10 = getelementptr inbounds %struct.buffer_t, %struct.buffer_t* %old_buf, i32 0, i32 2, i32 %i.041
  store i32 %8, i32* %arrayidx10, align 4, !tbaa !10
  %stride = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %i.041, i32 2
  %9 = load i32, i32* %stride, align 4, !tbaa !39
  %arrayidx14 = getelementptr inbounds %struct.buffer_t, %struct.buffer_t* %old_buf, i32 0, i32 3, i32 %i.041
  store i32 %9, i32* %arrayidx14, align 4, !tbaa !10
  %inc = add nuw nsw i32 %i.041, 1
  %10 = load i32, i32* %dimensions, align 4, !tbaa !34
  %cmp4 = icmp slt i32 %inc, %10
  br i1 %cmp4, label %for.body, label %for.cond.cleanup

return:                                           ; preds = %for.cond.cleanup, %if.then
  %retval.0 = phi i32 [ %call1, %if.then ], [ %call16, %for.cond.cleanup ]
  ret i32 %retval.0
}

declare i8* @memset(i8*, i32, i32) local_unnamed_addr #2

; Function Attrs: nounwind
define weak i32 @halide_downgrade_buffer_t_device_fields(i8* %user_context, i8* %name, %struct.halide_buffer_t* %new_buf, %struct.buffer_t* %old_buf) local_unnamed_addr #0 {
entry:
  %flags.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %new_buf, i32 0, i32 3
  %0 = load i64, i64* %flags.i.i, align 8, !tbaa !33
  %host_dirty = getelementptr inbounds %struct.buffer_t, %struct.buffer_t* %old_buf, i32 0, i32 6
  %1 = trunc i64 %0 to i8
  %2 = and i8 %1, 1
  store i8 %2, i8* %host_dirty, align 8, !tbaa !73
  %dev_dirty = getelementptr inbounds %struct.buffer_t, %struct.buffer_t* %old_buf, i32 0, i32 7
  %and.i.i42 = lshr i64 %0, 1
  %3 = trunc i64 %and.i.i42 to i8
  %4 = and i8 %3, 1
  store i8 %4, i8* %dev_dirty, align 1, !tbaa !74
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %new_buf, i32 0, i32 0
  %5 = load i64, i64* %device, align 8, !tbaa !29
  %tobool = icmp eq i64 %5, 0
  %dev = getelementptr inbounds %struct.buffer_t, %struct.buffer_t* %old_buf, i32 0, i32 0
  %6 = load i64, i64* %dev, align 8, !tbaa !69
  %tobool3 = icmp ne i64 %6, 0
  br i1 %tobool, label %if.else15, label %if.then

if.then:                                          ; preds = %entry
  br i1 %tobool3, label %if.then4, label %if.else

if.then4:                                         ; preds = %if.then
  %conv = trunc i64 %6 to i32
  %7 = inttoptr i32 %conv to %"struct.Halide::Runtime::Internal::old_dev_wrapper"*
  %device7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::old_dev_wrapper", %"struct.Halide::Runtime::Internal::old_dev_wrapper"* %7, i32 0, i32 0
  store i64 %5, i64* %device7, align 8, !tbaa !70
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %new_buf, i32 0, i32 1
  %8 = bitcast %struct.halide_device_interface_t** %device_interface to i32*
  %9 = load i32, i32* %8, align 8, !tbaa !31
  %interface = getelementptr inbounds %"struct.Halide::Runtime::Internal::old_dev_wrapper", %"struct.Halide::Runtime::Internal::old_dev_wrapper"* %7, i32 0, i32 1
  %10 = bitcast %struct.halide_device_interface_t** %interface to i32*
  store i32 %9, i32* %10, align 8, !tbaa !72
  br label %if.end23

if.else:                                          ; preds = %if.then
  %call9 = tail call i8* @malloc(i32 16) #11
  %11 = load i64, i64* %device, align 8, !tbaa !29
  %device11 = bitcast i8* %call9 to i64*
  store i64 %11, i64* %device11, align 8, !tbaa !70
  %device_interface12 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %new_buf, i32 0, i32 1
  %12 = bitcast %struct.halide_device_interface_t** %device_interface12 to i32*
  %13 = load i32, i32* %12, align 8, !tbaa !31
  %interface13 = getelementptr inbounds i8, i8* %call9, i32 8
  %14 = bitcast i8* %interface13 to i32*
  store i32 %13, i32* %14, align 8, !tbaa !72
  %15 = ptrtoint i8* %call9 to i32
  %16 = zext i32 %15 to i64
  store i64 %16, i64* %dev, align 8, !tbaa !69
  br label %if.end23

if.else15:                                        ; preds = %entry
  br i1 %tobool3, label %if.then18, label %if.end23

if.then18:                                        ; preds = %if.else15
  %conv20 = trunc i64 %6 to i32
  %17 = inttoptr i32 %conv20 to i8*
  tail call void @free(i8* %17) #11
  store i64 0, i64* %dev, align 8, !tbaa !69
  br label %if.end23

if.end23:                                         ; preds = %if.then18, %if.else15, %if.else, %if.then4
  ret i32 0
}

; Function Attrs: nounwind
define weak i32 @halide_copy_to_host_legacy(i8* %user_context, %struct.buffer_t* %old_buf) local_unnamed_addr #0 {
entry:
  %new_buf = alloca %struct.halide_buffer_t, align 8
  %shape = alloca [4 x %struct.halide_dimension_t], align 4
  %0 = bitcast %struct.halide_buffer_t* %new_buf to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %0) #9
  %1 = bitcast [4 x %struct.halide_dimension_t]* %shape to i8*
  %2 = bitcast %struct.halide_buffer_t* %new_buf to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %2, i8 0, i64 64, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %1) #9
  %array.begin = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i32 0, i32 0
  %dim = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %new_buf, i32 0, i32 9
  %3 = bitcast [4 x %struct.halide_dimension_t]* %shape to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %3, i8 0, i64 64, i1 false)
  store %struct.halide_dimension_t* %array.begin, %struct.halide_dimension_t** %dim, align 8, !tbaa !35
  %call = call i32 @_ZN6Halide7Runtime8Internal29guess_type_and_dimensionalityEPvP8buffer_tP15halide_buffer_t(i8* %user_context, %struct.buffer_t* %old_buf, %struct.halide_buffer_t* nonnull %new_buf) #12
  %tobool = icmp eq i32 %call, 0
  br i1 %tobool, label %lor.end, label %lor.end13

lor.end:                                          ; preds = %entry
  %call1 = call i32 @halide_upgrade_buffer_t(i8* %user_context, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.89, i32 0, i32 0), %struct.buffer_t* %old_buf, %struct.halide_buffer_t* nonnull %new_buf, i32 0) #12
  %tobool2 = icmp eq i32 %call1, 0
  br i1 %tobool2, label %lor.end7, label %lor.end13

lor.end7:                                         ; preds = %lor.end
  %call5 = call i32 @halide_copy_to_host(i8* %user_context, %struct.halide_buffer_t* nonnull %new_buf) #11
  %tobool6 = icmp eq i32 %call5, 0
  br i1 %tobool6, label %lor.rhs10, label %lor.end13

lor.rhs10:                                        ; preds = %lor.end7
  %call11 = call i32 @halide_downgrade_buffer_t_device_fields(i8* %user_context, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.89, i32 0, i32 0), %struct.halide_buffer_t* nonnull %new_buf, %struct.buffer_t* %old_buf) #12
  %tobool12 = icmp ne i32 %call11, 0
  %phitmp = zext i1 %tobool12 to i32
  br label %lor.end13

lor.end13:                                        ; preds = %lor.rhs10, %lor.end7, %lor.end, %entry
  %4 = phi i32 [ 1, %lor.end7 ], [ %phitmp, %lor.rhs10 ], [ 1, %lor.end ], [ 1, %entry ]
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %1) #9
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %0) #9
  ret i32 %4
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1) #4

; Function Attrs: nounwind
define weak i32 @halide_copy_to_device_legacy(i8* %user_context, %struct.buffer_t* %old_buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %new_buf = alloca %struct.halide_buffer_t, align 8
  %shape = alloca [4 x %struct.halide_dimension_t], align 4
  %0 = bitcast %struct.halide_buffer_t* %new_buf to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %0) #9
  %1 = bitcast [4 x %struct.halide_dimension_t]* %shape to i8*
  %2 = bitcast %struct.halide_buffer_t* %new_buf to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %2, i8 0, i64 64, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %1) #9
  %array.begin = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i32 0, i32 0
  %dim = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %new_buf, i32 0, i32 9
  %3 = bitcast [4 x %struct.halide_dimension_t]* %shape to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %3, i8 0, i64 64, i1 false)
  store %struct.halide_dimension_t* %array.begin, %struct.halide_dimension_t** %dim, align 8, !tbaa !35
  %call = call i32 @_ZN6Halide7Runtime8Internal29guess_type_and_dimensionalityEPvP8buffer_tP15halide_buffer_t(i8* %user_context, %struct.buffer_t* %old_buf, %struct.halide_buffer_t* nonnull %new_buf) #12
  %tobool = icmp eq i32 %call, 0
  br i1 %tobool, label %lor.end, label %lor.end14

lor.end:                                          ; preds = %entry
  %call2 = call i32 @halide_upgrade_buffer_t(i8* %user_context, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.89, i32 0, i32 0), %struct.buffer_t* %old_buf, %struct.halide_buffer_t* nonnull %new_buf, i32 0) #12
  %tobool3 = icmp eq i32 %call2, 0
  br i1 %tobool3, label %lor.end8, label %lor.end14

lor.end8:                                         ; preds = %lor.end
  %call6 = call i32 @halide_copy_to_device(i8* %user_context, %struct.halide_buffer_t* nonnull %new_buf, %struct.halide_device_interface_t* %device_interface) #11
  %tobool7 = icmp eq i32 %call6, 0
  br i1 %tobool7, label %lor.rhs11, label %lor.end14

lor.rhs11:                                        ; preds = %lor.end8
  %call12 = call i32 @halide_downgrade_buffer_t_device_fields(i8* %user_context, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.89, i32 0, i32 0), %struct.halide_buffer_t* nonnull %new_buf, %struct.buffer_t* %old_buf) #12
  %tobool13 = icmp ne i32 %call12, 0
  %phitmp = zext i1 %tobool13 to i32
  br label %lor.end14

lor.end14:                                        ; preds = %lor.rhs11, %lor.end8, %lor.end, %entry
  %4 = phi i32 [ 1, %lor.end8 ], [ %phitmp, %lor.rhs11 ], [ 1, %lor.end ], [ 1, %entry ]
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %1) #9
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %0) #9
  ret i32 %4
}

; Function Attrs: nounwind
define weak i32 @halide_device_sync_legacy(i8* %user_context, %struct.buffer_t* %old_buf) local_unnamed_addr #0 {
entry:
  %new_buf = alloca %struct.halide_buffer_t, align 8
  %shape = alloca [4 x %struct.halide_dimension_t], align 4
  %0 = bitcast %struct.halide_buffer_t* %new_buf to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %0) #9
  %1 = bitcast [4 x %struct.halide_dimension_t]* %shape to i8*
  %2 = bitcast %struct.halide_buffer_t* %new_buf to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %2, i8 0, i64 64, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %1) #9
  %array.begin = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i32 0, i32 0
  %dim = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %new_buf, i32 0, i32 9
  %3 = bitcast [4 x %struct.halide_dimension_t]* %shape to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %3, i8 0, i64 64, i1 false)
  store %struct.halide_dimension_t* %array.begin, %struct.halide_dimension_t** %dim, align 8, !tbaa !35
  %call = call i32 @_ZN6Halide7Runtime8Internal29guess_type_and_dimensionalityEPvP8buffer_tP15halide_buffer_t(i8* %user_context, %struct.buffer_t* %old_buf, %struct.halide_buffer_t* nonnull %new_buf) #12
  %tobool = icmp eq i32 %call, 0
  br i1 %tobool, label %lor.end, label %lor.end13

lor.end:                                          ; preds = %entry
  %call1 = call i32 @halide_upgrade_buffer_t(i8* %user_context, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.89, i32 0, i32 0), %struct.buffer_t* %old_buf, %struct.halide_buffer_t* nonnull %new_buf, i32 0) #12
  %tobool2 = icmp eq i32 %call1, 0
  br i1 %tobool2, label %lor.end7, label %lor.end13

lor.end7:                                         ; preds = %lor.end
  %call5 = call i32 @halide_device_sync(i8* %user_context, %struct.halide_buffer_t* nonnull %new_buf) #11
  %tobool6 = icmp eq i32 %call5, 0
  br i1 %tobool6, label %lor.rhs10, label %lor.end13

lor.rhs10:                                        ; preds = %lor.end7
  %call11 = call i32 @halide_downgrade_buffer_t_device_fields(i8* %user_context, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.89, i32 0, i32 0), %struct.halide_buffer_t* nonnull %new_buf, %struct.buffer_t* %old_buf) #12
  %tobool12 = icmp ne i32 %call11, 0
  %phitmp = zext i1 %tobool12 to i32
  br label %lor.end13

lor.end13:                                        ; preds = %lor.rhs10, %lor.end7, %lor.end, %entry
  %4 = phi i32 [ 1, %lor.end7 ], [ %phitmp, %lor.rhs10 ], [ 1, %lor.end ], [ 1, %entry ]
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %1) #9
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %0) #9
  ret i32 %4
}

; Function Attrs: nounwind
define weak i32 @halide_device_malloc_legacy(i8* %user_context, %struct.buffer_t* %old_buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %new_buf = alloca %struct.halide_buffer_t, align 8
  %shape = alloca [4 x %struct.halide_dimension_t], align 4
  %0 = bitcast %struct.halide_buffer_t* %new_buf to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %0) #9
  %1 = bitcast [4 x %struct.halide_dimension_t]* %shape to i8*
  %2 = bitcast %struct.halide_buffer_t* %new_buf to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %2, i8 0, i64 64, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %1) #9
  %array.begin = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i32 0, i32 0
  %dim = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %new_buf, i32 0, i32 9
  %3 = bitcast [4 x %struct.halide_dimension_t]* %shape to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %3, i8 0, i64 64, i1 false)
  store %struct.halide_dimension_t* %array.begin, %struct.halide_dimension_t** %dim, align 8, !tbaa !35
  %call = call i32 @_ZN6Halide7Runtime8Internal29guess_type_and_dimensionalityEPvP8buffer_tP15halide_buffer_t(i8* %user_context, %struct.buffer_t* %old_buf, %struct.halide_buffer_t* nonnull %new_buf) #12
  %tobool = icmp eq i32 %call, 0
  br i1 %tobool, label %lor.end, label %lor.end14

lor.end:                                          ; preds = %entry
  %call2 = call i32 @halide_upgrade_buffer_t(i8* %user_context, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.89, i32 0, i32 0), %struct.buffer_t* %old_buf, %struct.halide_buffer_t* nonnull %new_buf, i32 0) #12
  %tobool3 = icmp eq i32 %call2, 0
  br i1 %tobool3, label %lor.end8, label %lor.end14

lor.end8:                                         ; preds = %lor.end
  %call6 = call i32 @halide_device_malloc(i8* %user_context, %struct.halide_buffer_t* nonnull %new_buf, %struct.halide_device_interface_t* %device_interface) #11
  %tobool7 = icmp eq i32 %call6, 0
  br i1 %tobool7, label %lor.rhs11, label %lor.end14

lor.rhs11:                                        ; preds = %lor.end8
  %call12 = call i32 @halide_downgrade_buffer_t_device_fields(i8* %user_context, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.89, i32 0, i32 0), %struct.halide_buffer_t* nonnull %new_buf, %struct.buffer_t* %old_buf) #12
  %tobool13 = icmp ne i32 %call12, 0
  %phitmp = zext i1 %tobool13 to i32
  br label %lor.end14

lor.end14:                                        ; preds = %lor.rhs11, %lor.end8, %lor.end, %entry
  %4 = phi i32 [ 1, %lor.end8 ], [ %phitmp, %lor.rhs11 ], [ 1, %lor.end ], [ 1, %entry ]
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %1) #9
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %0) #9
  ret i32 %4
}

; Function Attrs: nounwind
define weak i32 @halide_device_free_legacy(i8* %user_context, %struct.buffer_t* %old_buf) local_unnamed_addr #0 {
entry:
  %new_buf = alloca %struct.halide_buffer_t, align 8
  %shape = alloca [4 x %struct.halide_dimension_t], align 4
  %0 = bitcast %struct.halide_buffer_t* %new_buf to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %0) #9
  %1 = bitcast [4 x %struct.halide_dimension_t]* %shape to i8*
  %2 = bitcast %struct.halide_buffer_t* %new_buf to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %2, i8 0, i64 64, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %1) #9
  %array.begin = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i32 0, i32 0
  %dim = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %new_buf, i32 0, i32 9
  %3 = bitcast [4 x %struct.halide_dimension_t]* %shape to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %3, i8 0, i64 64, i1 false)
  store %struct.halide_dimension_t* %array.begin, %struct.halide_dimension_t** %dim, align 8, !tbaa !35
  %call = call i32 @_ZN6Halide7Runtime8Internal29guess_type_and_dimensionalityEPvP8buffer_tP15halide_buffer_t(i8* %user_context, %struct.buffer_t* %old_buf, %struct.halide_buffer_t* nonnull %new_buf) #12
  %tobool = icmp eq i32 %call, 0
  br i1 %tobool, label %lor.end, label %lor.end13

lor.end:                                          ; preds = %entry
  %call1 = call i32 @halide_upgrade_buffer_t(i8* %user_context, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.89, i32 0, i32 0), %struct.buffer_t* %old_buf, %struct.halide_buffer_t* nonnull %new_buf, i32 0) #12
  %tobool2 = icmp eq i32 %call1, 0
  br i1 %tobool2, label %lor.end7, label %lor.end13

lor.end7:                                         ; preds = %lor.end
  %call5 = call i32 @halide_device_free(i8* %user_context, %struct.halide_buffer_t* nonnull %new_buf) #11
  %tobool6 = icmp eq i32 %call5, 0
  br i1 %tobool6, label %lor.rhs10, label %lor.end13

lor.rhs10:                                        ; preds = %lor.end7
  %call11 = call i32 @halide_downgrade_buffer_t_device_fields(i8* %user_context, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.89, i32 0, i32 0), %struct.halide_buffer_t* nonnull %new_buf, %struct.buffer_t* %old_buf) #12
  %tobool12 = icmp ne i32 %call11, 0
  %phitmp = zext i1 %tobool12 to i32
  br label %lor.end13

lor.end13:                                        ; preds = %lor.rhs10, %lor.end7, %lor.end, %entry
  %4 = phi i32 [ 1, %lor.end7 ], [ %phitmp, %lor.rhs10 ], [ 1, %lor.end ], [ 1, %entry ]
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %1) #9
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %0) #9
  ret i32 %4
}

; Function Attrs: norecurse nounwind
define weak void @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* %ptr, i64 %len) local_unnamed_addr #3 {
entry:
  ret void
}

; Function Attrs: norecurse nounwind
define weak void @halide_msan_annotate_buffer_is_initialized(i8* %user_context, %struct.halide_buffer_t* %b) local_unnamed_addr #3 {
entry:
  ret void
}

; Function Attrs: norecurse nounwind
define weak void @halide_msan_annotate_buffer_is_initialized_as_destructor(i8* %user_context, i8* %b) local_unnamed_addr #3 {
entry:
  ret void
}

; Function Attrs: nounwind
define weak i32 @halide_qurt_hvx_lock(i8* %user_context, i32 %size) local_unnamed_addr #0 {
entry:
  switch i32 %size, label %sw.default [
    i32 64, label %sw.epilog
    i32 128, label %sw.bb1
  ]

sw.bb1:                                           ; preds = %entry
  br label %sw.epilog

sw.default:                                       ; preds = %entry
  %call.i = tail call i8* @halide_malloc(i8* %user_context, i32 1024) #11
  %tobool5.i = icmp eq i8* %call.i, null
  br i1 %tobool5.i, label %if.then.i25, label %if.else.i26

if.then.i25:                                      ; preds = %sw.default
  %call5.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* nonnull getelementptr inbounds ([34 x i8], [34 x i8]* @.str.102, i32 0, i32 0)) #11
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.8.103, i32 0, i32 0)) #11
  tail call void @halide_free(i8* %user_context, i8* null) #11
  br label %cleanup12

if.else.i26:                                      ; preds = %sw.default
  %0 = ptrtoint i8* %call.i to i32
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !7
  %call5.i = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* nonnull getelementptr inbounds ([34 x i8], [34 x i8]* @.str.102, i32 0, i32 0)) #11
  %1 = ptrtoint i8* %call5.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %0
  %add.i.i = add i32 %sub.ptr.sub.i.i, %1
  %conv.i.i = sext i32 %add.i.i to i64
  tail call void @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #11
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #11
  tail call void @halide_free(i8* %user_context, i8* nonnull %call.i) #11
  br label %cleanup12

sw.epilog:                                        ; preds = %sw.bb1, %entry
  %mode.0 = phi i32 [ 1, %sw.bb1 ], [ 0, %entry ]
  %call5 = tail call i32 @qurt_hvx_lock(i32 %mode.0) #11
  %cmp = icmp eq i32 %call5, 0
  br i1 %cmp, label %cleanup12, label %if.then

if.then:                                          ; preds = %sw.epilog
  %call.i50 = tail call i8* @halide_malloc(i8* %user_context, i32 1024) #11
  %tobool5.i53 = icmp eq i8* %call.i50, null
  br i1 %tobool5.i53, label %if.then.i31, label %if.else.i37

if.then.i31:                                      ; preds = %if.then
  %call5.i4582 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* nonnull getelementptr inbounds ([22 x i8], [22 x i8]* @.str.5.104, i32 0, i32 0)) #11
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.8.103, i32 0, i32 0)) #11
  tail call void @halide_free(i8* %user_context, i8* null) #11
  br label %cleanup12

if.else.i37:                                      ; preds = %if.then
  %2 = ptrtoint i8* %call.i50 to i32
  %add.ptr.i54 = getelementptr inbounds i8, i8* %call.i50, i32 1023
  store i8 0, i8* %add.ptr.i54, align 1, !tbaa !7
  %call5.i45 = tail call i8* @halide_string_to_string(i8* nonnull %call.i50, i8* nonnull %add.ptr.i54, i8* nonnull getelementptr inbounds ([22 x i8], [22 x i8]* @.str.5.104, i32 0, i32 0)) #11
  %3 = ptrtoint i8* %call5.i45 to i32
  %sub.ptr.sub.i.i34 = sub i32 1, %2
  %add.i.i35 = add i32 %sub.ptr.sub.i.i34, %3
  %conv.i.i36 = sext i32 %add.i.i35 to i64
  tail call void @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i50, i64 %conv.i.i36) #11
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i50) #11
  tail call void @halide_free(i8* %user_context, i8* nonnull %call.i50) #11
  br label %cleanup12

cleanup12:                                        ; preds = %if.then.i31, %if.else.i37, %if.then.i25, %if.else.i26, %sw.epilog
  %retval.1 = phi i32 [ 0, %sw.epilog ], [ -1, %if.else.i26 ], [ -1, %if.then.i25 ], [ -1, %if.else.i37 ], [ -1, %if.then.i31 ]
  ret i32 %retval.1
}

declare i32 @qurt_hvx_lock(i32) local_unnamed_addr #2

; Function Attrs: nounwind
define weak i32 @halide_qurt_hvx_unlock(i8* %user_context) local_unnamed_addr #0 {
entry:
  %call = tail call i32 @qurt_hvx_unlock() #11
  %cmp = icmp eq i32 %call, 0
  br i1 %cmp, label %cleanup, label %if.then

if.then:                                          ; preds = %entry
  %call.i = tail call i8* @halide_malloc(i8* %user_context, i32 1024) #11
  %tobool5.i = icmp eq i8* %call.i, null
  br i1 %tobool5.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %if.then
  %call5.i31 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* nonnull getelementptr inbounds ([24 x i8], [24 x i8]* @.str.7.105, i32 0, i32 0)) #11
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.8.103, i32 0, i32 0)) #11
  tail call void @halide_free(i8* %user_context, i8* null) #11
  br label %cleanup

if.else.i:                                        ; preds = %if.then
  %0 = ptrtoint i8* %call.i to i32
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !7
  %call5.i = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* nonnull getelementptr inbounds ([24 x i8], [24 x i8]* @.str.7.105, i32 0, i32 0)) #11
  %1 = ptrtoint i8* %call5.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %0
  %add.i.i = add i32 %sub.ptr.sub.i.i, %1
  %conv.i.i = sext i32 %add.i.i to i64
  tail call void @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #11
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #11
  tail call void @halide_free(i8* %user_context, i8* nonnull %call.i) #11
  br label %cleanup

cleanup:                                          ; preds = %if.then.i, %if.else.i, %entry
  %retval.0 = phi i32 [ 0, %entry ], [ -1, %if.else.i ], [ -1, %if.then.i ]
  ret i32 %retval.0
}

declare i32 @qurt_hvx_unlock() local_unnamed_addr #2

; Function Attrs: nounwind
define weak void @halide_qurt_hvx_unlock_as_destructor(i8* %user_context, i8*) local_unnamed_addr #0 {
entry:
  %call = tail call i32 @halide_qurt_hvx_unlock(i8* %user_context) #12
  ret void
}

; Function Attrs: nounwind readnone
declare <16 x i32> @llvm.hexagon.V6.lo(<32 x i32>) #7

; Function Attrs: nounwind readnone
declare <16 x i32> @llvm.hexagon.V6.hi(<32 x i32>) #7

; Function Attrs: nounwind readnone
declare <32 x i32> @llvm.hexagon.V6.vshuffvdd(<16 x i32>, <16 x i32>, i32) #7

; Function Attrs: nounwind readnone
declare i32 @llvm.hexagon.S2.vsplatrb(i32) #7

; Function Attrs: nounwind readnone
declare <16 x i32> @llvm.hexagon.V6.lvsplatw(i32) #7

; Function Attrs: nounwind readnone
declare <32 x i32> @llvm.hexagon.V6.vcombine(<16 x i32>, <16 x i32>) #7

; Function Attrs: nounwind readnone
declare <16 x i32> @llvm.hexagon.V6.vasrw(<16 x i32>, i32) #7

; Function Attrs: nounwind readnone
declare <32 x i32> @llvm.hexagon.V6.vzb(<16 x i32>) #7

; Function Attrs: nounwind readnone
declare <32 x i32> @llvm.hexagon.V6.vmpabus.acc(<32 x i32>, <32 x i32>, i32) #7

; Function Attrs: nounwind
define weak i32 @halide_default_can_use_target_features(i32 %count, i64* %features) #0 {
entry:
  %tmp = alloca %"struct.Halide::Runtime::Internal::CpuFeatures", align 8
  %.b30 = load i1, i1* @_ZZ38halide_default_can_use_target_featuresE11initialized, align 1
  br i1 %.b30, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %0 = bitcast %"struct.Halide::Runtime::Internal::CpuFeatures"* %tmp to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %0) #9
  call void @_ZN6Halide7Runtime8Internal23halide_get_cpu_featuresEv(%"struct.Halide::Runtime::Internal::CpuFeatures"* nonnull sret %tmp) #11
  %call = call i8* @memcpy(i8* bitcast ([2 x i64]* @_ZZ38halide_default_can_use_target_featuresE20cpu_features_storage to i8*), i8* nonnull %0, i32 16) #11
  store i1 true, i1* @_ZZ38halide_default_can_use_target_featuresE11initialized, align 1
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %0) #9
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %cmp = icmp eq i32 %count, 1
  br i1 %cmp, label %for.body, label %if.then1

if.then1:                                         ; preds = %if.end
  call void @halide_error(i8* null, i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.106, i32 0, i32 0)) #11
  br label %for.body

for.body:                                         ; preds = %if.then1, %if.end
  %1 = load i64, i64* %features, align 8, !tbaa !22
  %2 = load i64, i64* getelementptr inbounds ([2 x i64], [2 x i64]* @_ZZ38halide_default_can_use_target_featuresE20cpu_features_storage, i32 0, i32 0), align 8, !tbaa !22
  %and = and i64 %2, %1
  %cmp5 = icmp eq i64 %and, 0
  br i1 %cmp5, label %for.inc, label %if.then6

if.then6:                                         ; preds = %for.body
  %3 = load i64, i64* getelementptr inbounds ([2 x i64], [2 x i64]* @_ZZ38halide_default_can_use_target_featuresE20cpu_features_storage, i32 0, i32 1), align 8, !tbaa !22
  %and8 = and i64 %3, %and
  %cmp9 = icmp eq i64 %and8, %and
  br i1 %cmp9, label %for.inc, label %cleanup15

for.inc:                                          ; preds = %if.then6, %for.body
  br label %cleanup15

cleanup15:                                        ; preds = %for.inc, %if.then6
  %retval.3 = phi i32 [ 0, %if.then6 ], [ 1, %for.inc ]
  ret i32 %retval.3
}

; Function Attrs: norecurse nounwind
define weak i32 (i32, i64*)* @halide_set_custom_can_use_target_features(i32 (i32, i64*)* %fn) local_unnamed_addr #3 {
entry:
  %0 = load i32 (i32, i64*)*, i32 (i32, i64*)** @_ZN6Halide7Runtime8Internal30custom_can_use_target_featuresE, align 4, !tbaa !12
  store i32 (i32, i64*)* %fn, i32 (i32, i64*)** @_ZN6Halide7Runtime8Internal30custom_can_use_target_featuresE, align 4, !tbaa !12
  ret i32 (i32, i64*)* %0
}

; Function Attrs: nounwind
define weak i32 @halide_can_use_target_features(i32 %count, i64* %features) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i32, i64*)*, i32 (i32, i64*)** @_ZN6Halide7Runtime8Internal30custom_can_use_target_featuresE, align 4, !tbaa !12
  %call = tail call i32 %0(i32 %count, i64* %features) #11
  ret i32 %call
}

; Function Attrs: norecurse nounwind
define linkonce void @_ZN6Halide7Runtime8Internal23halide_get_cpu_featuresEv(%"struct.Halide::Runtime::Internal::CpuFeatures"* noalias sret %agg.result) local_unnamed_addr #3 {
entry:
  %0 = bitcast %"struct.Halide::Runtime::Internal::CpuFeatures"* %agg.result to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %0, i8 0, i64 16, i1 false)
  ret void
}

; Function Attrs: nounwind readnone
declare <16 x i32> @llvm.hexagon.V6.vpackob(<16 x i32>, <16 x i32>) #7

; Function Attrs: nounwind readnone
declare <32 x i32> @llvm.hexagon.V6.vaddh.dv(<32 x i32>, <32 x i32>) #7

; Function Attrs: nounwind readnone
declare <32 x i32> @llvm.hexagon.V6.vaddw.dv(<32 x i32>, <32 x i32>) #7

; Function Attrs: nounwind readnone
declare <16 x i32> @llvm.hexagon.V6.vabsw(<16 x i32>) #7

; Function Attrs: nounwind readnone
declare <16 x i32> @llvm.hexagon.V6.vmpyihb.acc(<16 x i32>, <16 x i32>, i32) #7

; Function Attrs: nounwind readnone
declare <16 x i32> @llvm.hexagon.V6.vand(<16 x i32>, <16 x i32>) #7

; Function Attrs: nounwind
define i32 @gaussian5x5_hvx64(%struct.halide_buffer_t* noalias nocapture readonly %input.buffer, %struct.halide_buffer_t* noalias nocapture readonly %output.buffer) local_unnamed_addr #8 {
entry:
  %rows1 = alloca [384 x i16], align 64
  %hvx_lock_result = tail call i32 @halide_qurt_hvx_lock(i8* null, i32 64) #9
  %host.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %input.buffer, i32 0, i32 2
  %0 = load i8*, i8** %host.i, align 4, !tbaa !32
  %dim.i26 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %input.buffer, i32 0, i32 9
  %1 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i26, align 8, !tbaa !35
  %stride.i27 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %1, i32 1, i32 2
  %2 = load i32, i32* %stride.i27, align 4, !tbaa !39
  %host.i25 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %output.buffer, i32 0, i32 2
  %3 = load i8*, i8** %host.i25, align 4, !tbaa !32
  %dim.i21 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %output.buffer, i32 0, i32 9
  %4 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i21, align 8, !tbaa !35
  %extent.i22 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %4, i32 0, i32 1
  %5 = load i32, i32* %extent.i22, align 4, !tbaa !38
  %extent.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %4, i32 1, i32 1
  %6 = load i32, i32* %extent.i, align 4, !tbaa !38
  %7 = add nsw i32 %5, 63
  %8 = ashr i32 %7, 6
  %9 = add nsw i32 %6, 3
  %10 = ashr i32 %9, 2
  %11 = icmp sgt i32 %6, 0
  br i1 %11, label %"for output.s0.y.y.preheader", label %call_destructor.exit, !prof !75

"for output.s0.y.y.preheader":                    ; preds = %entry
  %12 = add nsw i32 %5, -1
  %13 = and i32 %12, -64
  %14 = icmp sgt i32 %5, 64
  %15 = select i1 %14, i32 2, i32 -2
  %16 = and i32 %7, -64
  %stride.i15 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %4, i32 1, i32 2
  %17 = load i32, i32* %stride.i15, align 4, !tbaa !39
  %18 = and i32 %2, -64
  %19 = add i32 %13, 66
  %t89.s = add i32 %19, %15
  %20 = add i32 %t89.s, %16
  %conv9.i = zext i32 %2 to i64
  %shl.i = shl nuw i64 %conv9.i, 32
  %conv1.i = sext i32 %20 to i64
  %shl2.i = shl nsw i64 %conv1.i, 16
  %or.i = or i64 %shl.i, %shl2.i
  %or6.i = or i64 %or.i, 281474976710664
  %21 = ashr i32 %17, 6
  %22 = icmp sgt i32 %5, 0
  br label %"for output.s0.y.y"

"for output.s0.y.y":                              ; preds = %"for output.s0.y.y.preheader", %"end for output.s0.y.yi"
  %output.s0.y.y = phi i32 [ %42, %"end for output.s0.y.yi" ], [ 0, %"for output.s0.y.y.preheader" ]
  %23 = shl nsw i32 %output.s0.y.y, 2
  %24 = add nuw nsw i32 %23, 6
  %25 = mul i32 %18, %24
  %26 = add nsw i32 %25, -2
  %27 = getelementptr inbounds i8, i8* %0, i32 %26
  tail call void asm sideeffect "l2fetch($0,$1)", "r,r"(i8* nonnull %27, i64 %or6.i) #9, !srcloc !76
  br label %"for output.s0.y.yi"

call_destructor.exit:                             ; preds = %"end for output.s0.y.yi", %entry
  tail call void @halide_qurt_hvx_unlock_as_destructor(i8* null, i8* nonnull inttoptr (i32 1 to i8*)) #11
  ret i32 0

"for output.s0.y.yi":                             ; preds = %"end for output.s0.x.x", %"for output.s0.y.y"
  %output.s0.y.yi = phi i32 [ 0, %"for output.s0.y.y" ], [ %51, %"end for output.s0.x.x" ]
  %28 = add nuw nsw i32 %output.s0.y.yi, %23
  %t95 = mul nsw i32 %28, %21
  br i1 %22, label %"for output.s0.x.x.preheader", label %"end for output.s0.x.x", !prof !75

"for output.s0.x.x.preheader":                    ; preds = %"for output.s0.y.yi"
  %29 = add nuw nsw i32 %28, 2
  %30 = add nuw nsw i32 %28, 1
  %31 = add nsw i32 %28, -1
  %32 = add nsw i32 %28, -2
  %33 = tail call <16 x i32> @llvm.hexagon.V6.lvsplatw(i32 384) #9
  %34 = tail call <32 x i32> @llvm.hexagon.V6.vcombine(<16 x i32> %33, <16 x i32> %33)
  %35 = shufflevector <32 x i32> %34, <32 x i32> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %36 = tail call <16 x i32> @llvm.hexagon.V6.vabsw(<16 x i32> %33) #9
  %dup4.i.i6 = tail call i32 @llvm.hexagon.S2.vsplatrb(i32 4) #9
  %dup4.i.i4 = tail call i32 @llvm.hexagon.S2.vsplatrb(i32 6) #9
  %37 = mul i32 %18, %29
  %38 = mul i32 %18, %30
  %39 = mul i32 %18, %28
  %40 = mul i32 %18, %31
  %41 = mul i32 %18, %32
  br label %"for output.s0.x.x"

"end for output.s0.y.yi":                         ; preds = %"end for output.s0.x.x"
  %42 = add nuw nsw i32 %output.s0.y.y, 1
  %43 = icmp eq i32 %42, %10
  br i1 %43, label %call_destructor.exit, label %"for output.s0.y.y"

"for output.s0.x.x":                              ; preds = %"for output.s0.x.x.preheader", %"consume rows"
  %output.s0.x.x = phi i32 [ %1452, %"consume rows" ], [ 0, %"for output.s0.x.x.preheader" ]
  %44 = icmp eq i32 %output.s0.x.x, 0
  %45 = select i1 %44, i32 -2, i32 2
  %46 = shl nsw i32 %output.s0.x.x, 6
  %rows.s0.x.min_3 = add nsw i32 %45, %46
  %47 = sub nsw i32 129, %rows.s0.x.min_3
  %48 = ashr i32 %47, 6
  %49 = add nsw i32 %48, %output.s0.x.x
  %50 = icmp sgt i32 %49, 0
  br i1 %50, label %"for rows.s0.x.x", label %"consume rows", !prof !75

"end for output.s0.x.x":                          ; preds = %"consume rows", %"for output.s0.y.yi"
  %51 = add nuw nsw i32 %output.s0.y.yi, 1
  %52 = icmp eq i32 %51, 4
  br i1 %52, label %"end for output.s0.y.yi", label %"for output.s0.y.yi"

"for rows.s0.x.x":                                ; preds = %"for output.s0.x.x", %"for rows.s0.x.x"
  %rows.s0.x.x = phi i32 [ %291, %"for rows.s0.x.x" ], [ 0, %"for output.s0.x.x" ]
  %53 = shl nsw i32 %rows.s0.x.x, 6
  %54 = add nsw i32 %53, %rows.s0.x.min_3
  %55 = add nsw i32 %54, %37
  %56 = getelementptr inbounds i8, i8* %0, i32 %55
  %57 = bitcast i8* %56 to <16 x i32>*
  %58 = load <16 x i32>, <16 x i32>* %57, align 1, !tbaa !77
  %59 = tail call <32 x i32> @llvm.hexagon.V6.vzb(<16 x i32> %58) #9
  %60 = add nsw i32 %54, %38
  %61 = getelementptr inbounds i8, i8* %0, i32 %60
  %62 = bitcast i8* %61 to <16 x i32>*
  %63 = load <16 x i32>, <16 x i32>* %62, align 1, !tbaa !77
  %64 = add nsw i32 %54, %39
  %65 = getelementptr inbounds i8, i8* %0, i32 %64
  %66 = bitcast i8* %65 to <16 x i32>*
  %67 = load <16 x i32>, <16 x i32>* %66, align 1, !tbaa !77
  %dv1.i10 = tail call <32 x i32> @llvm.hexagon.V6.vcombine(<16 x i32> %67, <16 x i32> %63) #9
  %res.i11 = tail call <32 x i32> @llvm.hexagon.V6.vmpabus.acc(<32 x i32> %59, <32 x i32> %dv1.i10, i32 100926980) #9
  %68 = add nsw i32 %54, %40
  %69 = getelementptr inbounds i8, i8* %0, i32 %68
  %70 = bitcast i8* %69 to <16 x i32>*
  %71 = load <16 x i32>, <16 x i32>* %70, align 1, !tbaa !77
  %72 = add nsw i32 %54, %41
  %73 = getelementptr inbounds i8, i8* %0, i32 %72
  %74 = bitcast i8* %73 to <16 x i32>*
  %75 = load <16 x i32>, <16 x i32>* %74, align 1, !tbaa !77
  %dv1.i = tail call <32 x i32> @llvm.hexagon.V6.vcombine(<16 x i32> %75, <16 x i32> %71) #9
  %res.i = tail call <32 x i32> @llvm.hexagon.V6.vmpabus.acc(<32 x i32> %res.i11, <32 x i32> %dv1.i, i32 17039620) #9
  %e.i = tail call <16 x i32> @llvm.hexagon.V6.lo(<32 x i32> %res.i) #9
  %o.i = tail call <16 x i32> @llvm.hexagon.V6.hi(<32 x i32> %res.i) #9
  %r_32.i = tail call <32 x i32> @llvm.hexagon.V6.vshuffvdd(<16 x i32> %o.i, <16 x i32> %e.i, i32 -2) #9
  %r.i = bitcast <32 x i32> %r_32.i to <64 x i16>
  %76 = tail call <16 x i32> @llvm.hexagon.V6.lvsplatw(i32 %54) #9
  %77 = tail call <32 x i32> @llvm.hexagon.V6.vcombine(<16 x i32> %76, <16 x i32> %76)
  %78 = tail call <32 x i32> @llvm.hexagon.V6.vaddw.dv(<32 x i32> %77, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>) #9
  %79 = tail call <32 x i32> @llvm.hexagon.V6.vaddw.dv(<32 x i32> %77, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>) #9
  %80 = shufflevector <32 x i32> %78, <32 x i32> %79, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %t110 = srem <64 x i32> %80, %35
  %81 = shufflevector <64 x i32> %t110, <64 x i32> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %82 = tail call <16 x i32> @llvm.hexagon.V6.vasrw(<16 x i32> %81, i32 31) #9
  %83 = shufflevector <64 x i32> %t110, <64 x i32> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %84 = tail call <16 x i32> @llvm.hexagon.V6.vasrw(<16 x i32> %83, i32 31) #9
  %85 = shufflevector <64 x i32> %t110, <64 x i32> undef, <16 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47>
  %86 = tail call <16 x i32> @llvm.hexagon.V6.vasrw(<16 x i32> %85, i32 31) #9
  %87 = shufflevector <64 x i32> %t110, <64 x i32> undef, <16 x i32> <i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %88 = tail call <16 x i32> @llvm.hexagon.V6.vasrw(<16 x i32> %87, i32 31) #9
  %89 = tail call <16 x i32> @llvm.hexagon.V6.vand(<16 x i32> %82, <16 x i32> %36) #9
  %90 = tail call <16 x i32> @llvm.hexagon.V6.vand(<16 x i32> %84, <16 x i32> %36) #9
  %91 = tail call <16 x i32> @llvm.hexagon.V6.vand(<16 x i32> %86, <16 x i32> %36) #9
  %92 = tail call <16 x i32> @llvm.hexagon.V6.vand(<16 x i32> %88, <16 x i32> %36) #9
  %93 = tail call <32 x i32> @llvm.hexagon.V6.vcombine(<16 x i32> %90, <16 x i32> %89)
  %94 = tail call <32 x i32> @llvm.hexagon.V6.vcombine(<16 x i32> %92, <16 x i32> %91)
  %95 = shufflevector <64 x i32> %t110, <64 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %96 = tail call <32 x i32> @llvm.hexagon.V6.vaddw.dv(<32 x i32> %95, <32 x i32> %93) #9
  %97 = shufflevector <64 x i32> %t110, <64 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %98 = tail call <32 x i32> @llvm.hexagon.V6.vaddw.dv(<32 x i32> %97, <32 x i32> %94) #9
  %99 = extractelement <32 x i32> %96, i32 0
  %100 = extractelement <64 x i16> %r.i, i32 0
  %101 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %99
  store i16 %100, i16* %101, align 2, !tbaa !80
  %102 = extractelement <32 x i32> %96, i32 1
  %103 = extractelement <64 x i16> %r.i, i32 1
  %104 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %102
  store i16 %103, i16* %104, align 2, !tbaa !80
  %105 = extractelement <32 x i32> %96, i32 2
  %106 = extractelement <64 x i16> %r.i, i32 2
  %107 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %105
  store i16 %106, i16* %107, align 2, !tbaa !80
  %108 = extractelement <32 x i32> %96, i32 3
  %109 = extractelement <64 x i16> %r.i, i32 3
  %110 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %108
  store i16 %109, i16* %110, align 2, !tbaa !80
  %111 = extractelement <32 x i32> %96, i32 4
  %112 = extractelement <64 x i16> %r.i, i32 4
  %113 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %111
  store i16 %112, i16* %113, align 2, !tbaa !80
  %114 = extractelement <32 x i32> %96, i32 5
  %115 = extractelement <64 x i16> %r.i, i32 5
  %116 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %114
  store i16 %115, i16* %116, align 2, !tbaa !80
  %117 = extractelement <32 x i32> %96, i32 6
  %118 = extractelement <64 x i16> %r.i, i32 6
  %119 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %117
  store i16 %118, i16* %119, align 2, !tbaa !80
  %120 = extractelement <32 x i32> %96, i32 7
  %121 = extractelement <64 x i16> %r.i, i32 7
  %122 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %120
  store i16 %121, i16* %122, align 2, !tbaa !80
  %123 = extractelement <32 x i32> %96, i32 8
  %124 = extractelement <64 x i16> %r.i, i32 8
  %125 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %123
  store i16 %124, i16* %125, align 2, !tbaa !80
  %126 = extractelement <32 x i32> %96, i32 9
  %127 = extractelement <64 x i16> %r.i, i32 9
  %128 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %126
  store i16 %127, i16* %128, align 2, !tbaa !80
  %129 = extractelement <32 x i32> %96, i32 10
  %130 = extractelement <64 x i16> %r.i, i32 10
  %131 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %129
  store i16 %130, i16* %131, align 2, !tbaa !80
  %132 = extractelement <32 x i32> %96, i32 11
  %133 = extractelement <64 x i16> %r.i, i32 11
  %134 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %132
  store i16 %133, i16* %134, align 2, !tbaa !80
  %135 = extractelement <32 x i32> %96, i32 12
  %136 = extractelement <64 x i16> %r.i, i32 12
  %137 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %135
  store i16 %136, i16* %137, align 2, !tbaa !80
  %138 = extractelement <32 x i32> %96, i32 13
  %139 = extractelement <64 x i16> %r.i, i32 13
  %140 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %138
  store i16 %139, i16* %140, align 2, !tbaa !80
  %141 = extractelement <32 x i32> %96, i32 14
  %142 = extractelement <64 x i16> %r.i, i32 14
  %143 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %141
  store i16 %142, i16* %143, align 2, !tbaa !80
  %144 = extractelement <32 x i32> %96, i32 15
  %145 = extractelement <64 x i16> %r.i, i32 15
  %146 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %144
  store i16 %145, i16* %146, align 2, !tbaa !80
  %147 = extractelement <32 x i32> %96, i32 16
  %148 = extractelement <64 x i16> %r.i, i32 16
  %149 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %147
  store i16 %148, i16* %149, align 2, !tbaa !80
  %150 = extractelement <32 x i32> %96, i32 17
  %151 = extractelement <64 x i16> %r.i, i32 17
  %152 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %150
  store i16 %151, i16* %152, align 2, !tbaa !80
  %153 = extractelement <32 x i32> %96, i32 18
  %154 = extractelement <64 x i16> %r.i, i32 18
  %155 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %153
  store i16 %154, i16* %155, align 2, !tbaa !80
  %156 = extractelement <32 x i32> %96, i32 19
  %157 = extractelement <64 x i16> %r.i, i32 19
  %158 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %156
  store i16 %157, i16* %158, align 2, !tbaa !80
  %159 = extractelement <32 x i32> %96, i32 20
  %160 = extractelement <64 x i16> %r.i, i32 20
  %161 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %159
  store i16 %160, i16* %161, align 2, !tbaa !80
  %162 = extractelement <32 x i32> %96, i32 21
  %163 = extractelement <64 x i16> %r.i, i32 21
  %164 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %162
  store i16 %163, i16* %164, align 2, !tbaa !80
  %165 = extractelement <32 x i32> %96, i32 22
  %166 = extractelement <64 x i16> %r.i, i32 22
  %167 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %165
  store i16 %166, i16* %167, align 2, !tbaa !80
  %168 = extractelement <32 x i32> %96, i32 23
  %169 = extractelement <64 x i16> %r.i, i32 23
  %170 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %168
  store i16 %169, i16* %170, align 2, !tbaa !80
  %171 = extractelement <32 x i32> %96, i32 24
  %172 = extractelement <64 x i16> %r.i, i32 24
  %173 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %171
  store i16 %172, i16* %173, align 2, !tbaa !80
  %174 = extractelement <32 x i32> %96, i32 25
  %175 = extractelement <64 x i16> %r.i, i32 25
  %176 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %174
  store i16 %175, i16* %176, align 2, !tbaa !80
  %177 = extractelement <32 x i32> %96, i32 26
  %178 = extractelement <64 x i16> %r.i, i32 26
  %179 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %177
  store i16 %178, i16* %179, align 2, !tbaa !80
  %180 = extractelement <32 x i32> %96, i32 27
  %181 = extractelement <64 x i16> %r.i, i32 27
  %182 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %180
  store i16 %181, i16* %182, align 2, !tbaa !80
  %183 = extractelement <32 x i32> %96, i32 28
  %184 = extractelement <64 x i16> %r.i, i32 28
  %185 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %183
  store i16 %184, i16* %185, align 2, !tbaa !80
  %186 = extractelement <32 x i32> %96, i32 29
  %187 = extractelement <64 x i16> %r.i, i32 29
  %188 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %186
  store i16 %187, i16* %188, align 2, !tbaa !80
  %189 = extractelement <32 x i32> %96, i32 30
  %190 = extractelement <64 x i16> %r.i, i32 30
  %191 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %189
  store i16 %190, i16* %191, align 2, !tbaa !80
  %192 = extractelement <32 x i32> %96, i32 31
  %193 = extractelement <64 x i16> %r.i, i32 31
  %194 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %192
  store i16 %193, i16* %194, align 2, !tbaa !80
  %195 = extractelement <32 x i32> %98, i32 0
  %196 = extractelement <64 x i16> %r.i, i32 32
  %197 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %195
  store i16 %196, i16* %197, align 2, !tbaa !80
  %198 = extractelement <32 x i32> %98, i32 1
  %199 = extractelement <64 x i16> %r.i, i32 33
  %200 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %198
  store i16 %199, i16* %200, align 2, !tbaa !80
  %201 = extractelement <32 x i32> %98, i32 2
  %202 = extractelement <64 x i16> %r.i, i32 34
  %203 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %201
  store i16 %202, i16* %203, align 2, !tbaa !80
  %204 = extractelement <32 x i32> %98, i32 3
  %205 = extractelement <64 x i16> %r.i, i32 35
  %206 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %204
  store i16 %205, i16* %206, align 2, !tbaa !80
  %207 = extractelement <32 x i32> %98, i32 4
  %208 = extractelement <64 x i16> %r.i, i32 36
  %209 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %207
  store i16 %208, i16* %209, align 2, !tbaa !80
  %210 = extractelement <32 x i32> %98, i32 5
  %211 = extractelement <64 x i16> %r.i, i32 37
  %212 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %210
  store i16 %211, i16* %212, align 2, !tbaa !80
  %213 = extractelement <32 x i32> %98, i32 6
  %214 = extractelement <64 x i16> %r.i, i32 38
  %215 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %213
  store i16 %214, i16* %215, align 2, !tbaa !80
  %216 = extractelement <32 x i32> %98, i32 7
  %217 = extractelement <64 x i16> %r.i, i32 39
  %218 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %216
  store i16 %217, i16* %218, align 2, !tbaa !80
  %219 = extractelement <32 x i32> %98, i32 8
  %220 = extractelement <64 x i16> %r.i, i32 40
  %221 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %219
  store i16 %220, i16* %221, align 2, !tbaa !80
  %222 = extractelement <32 x i32> %98, i32 9
  %223 = extractelement <64 x i16> %r.i, i32 41
  %224 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %222
  store i16 %223, i16* %224, align 2, !tbaa !80
  %225 = extractelement <32 x i32> %98, i32 10
  %226 = extractelement <64 x i16> %r.i, i32 42
  %227 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %225
  store i16 %226, i16* %227, align 2, !tbaa !80
  %228 = extractelement <32 x i32> %98, i32 11
  %229 = extractelement <64 x i16> %r.i, i32 43
  %230 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %228
  store i16 %229, i16* %230, align 2, !tbaa !80
  %231 = extractelement <32 x i32> %98, i32 12
  %232 = extractelement <64 x i16> %r.i, i32 44
  %233 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %231
  store i16 %232, i16* %233, align 2, !tbaa !80
  %234 = extractelement <32 x i32> %98, i32 13
  %235 = extractelement <64 x i16> %r.i, i32 45
  %236 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %234
  store i16 %235, i16* %236, align 2, !tbaa !80
  %237 = extractelement <32 x i32> %98, i32 14
  %238 = extractelement <64 x i16> %r.i, i32 46
  %239 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %237
  store i16 %238, i16* %239, align 2, !tbaa !80
  %240 = extractelement <32 x i32> %98, i32 15
  %241 = extractelement <64 x i16> %r.i, i32 47
  %242 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %240
  store i16 %241, i16* %242, align 2, !tbaa !80
  %243 = extractelement <32 x i32> %98, i32 16
  %244 = extractelement <64 x i16> %r.i, i32 48
  %245 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %243
  store i16 %244, i16* %245, align 2, !tbaa !80
  %246 = extractelement <32 x i32> %98, i32 17
  %247 = extractelement <64 x i16> %r.i, i32 49
  %248 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %246
  store i16 %247, i16* %248, align 2, !tbaa !80
  %249 = extractelement <32 x i32> %98, i32 18
  %250 = extractelement <64 x i16> %r.i, i32 50
  %251 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %249
  store i16 %250, i16* %251, align 2, !tbaa !80
  %252 = extractelement <32 x i32> %98, i32 19
  %253 = extractelement <64 x i16> %r.i, i32 51
  %254 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %252
  store i16 %253, i16* %254, align 2, !tbaa !80
  %255 = extractelement <32 x i32> %98, i32 20
  %256 = extractelement <64 x i16> %r.i, i32 52
  %257 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %255
  store i16 %256, i16* %257, align 2, !tbaa !80
  %258 = extractelement <32 x i32> %98, i32 21
  %259 = extractelement <64 x i16> %r.i, i32 53
  %260 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %258
  store i16 %259, i16* %260, align 2, !tbaa !80
  %261 = extractelement <32 x i32> %98, i32 22
  %262 = extractelement <64 x i16> %r.i, i32 54
  %263 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %261
  store i16 %262, i16* %263, align 2, !tbaa !80
  %264 = extractelement <32 x i32> %98, i32 23
  %265 = extractelement <64 x i16> %r.i, i32 55
  %266 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %264
  store i16 %265, i16* %266, align 2, !tbaa !80
  %267 = extractelement <32 x i32> %98, i32 24
  %268 = extractelement <64 x i16> %r.i, i32 56
  %269 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %267
  store i16 %268, i16* %269, align 2, !tbaa !80
  %270 = extractelement <32 x i32> %98, i32 25
  %271 = extractelement <64 x i16> %r.i, i32 57
  %272 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %270
  store i16 %271, i16* %272, align 2, !tbaa !80
  %273 = extractelement <32 x i32> %98, i32 26
  %274 = extractelement <64 x i16> %r.i, i32 58
  %275 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %273
  store i16 %274, i16* %275, align 2, !tbaa !80
  %276 = extractelement <32 x i32> %98, i32 27
  %277 = extractelement <64 x i16> %r.i, i32 59
  %278 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %276
  store i16 %277, i16* %278, align 2, !tbaa !80
  %279 = extractelement <32 x i32> %98, i32 28
  %280 = extractelement <64 x i16> %r.i, i32 60
  %281 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %279
  store i16 %280, i16* %281, align 2, !tbaa !80
  %282 = extractelement <32 x i32> %98, i32 29
  %283 = extractelement <64 x i16> %r.i, i32 61
  %284 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %282
  store i16 %283, i16* %284, align 2, !tbaa !80
  %285 = extractelement <32 x i32> %98, i32 30
  %286 = extractelement <64 x i16> %r.i, i32 62
  %287 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %285
  store i16 %286, i16* %287, align 2, !tbaa !80
  %288 = extractelement <32 x i32> %98, i32 31
  %289 = extractelement <64 x i16> %r.i, i32 63
  %290 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %288
  store i16 %289, i16* %290, align 2, !tbaa !80
  %291 = add nuw nsw i32 %rows.s0.x.x, 1
  %292 = icmp eq i32 %291, %49
  br i1 %292, label %"consume rows", label %"for rows.s0.x.x"

"consume rows":                                   ; preds = %"for rows.s0.x.x", %"for output.s0.x.x"
  %293 = add nuw nsw i32 %46, 382
  %294 = tail call <16 x i32> @llvm.hexagon.V6.lvsplatw(i32 %293) #9
  %295 = tail call <32 x i32> @llvm.hexagon.V6.vcombine(<16 x i32> %294, <16 x i32> %294)
  %296 = tail call <32 x i32> @llvm.hexagon.V6.vaddw.dv(<32 x i32> %295, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>) #9
  %297 = tail call <32 x i32> @llvm.hexagon.V6.vaddw.dv(<32 x i32> %295, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>) #9
  %298 = shufflevector <32 x i32> %296, <32 x i32> %297, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %t111 = srem <64 x i32> %298, %35
  %299 = shufflevector <64 x i32> %t111, <64 x i32> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %300 = tail call <16 x i32> @llvm.hexagon.V6.vasrw(<16 x i32> %299, i32 31) #9
  %301 = shufflevector <64 x i32> %t111, <64 x i32> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %302 = tail call <16 x i32> @llvm.hexagon.V6.vasrw(<16 x i32> %301, i32 31) #9
  %303 = shufflevector <64 x i32> %t111, <64 x i32> undef, <16 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47>
  %304 = tail call <16 x i32> @llvm.hexagon.V6.vasrw(<16 x i32> %303, i32 31) #9
  %305 = shufflevector <64 x i32> %t111, <64 x i32> undef, <16 x i32> <i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %306 = tail call <16 x i32> @llvm.hexagon.V6.vasrw(<16 x i32> %305, i32 31) #9
  %307 = tail call <16 x i32> @llvm.hexagon.V6.vand(<16 x i32> %300, <16 x i32> %36) #9
  %308 = tail call <16 x i32> @llvm.hexagon.V6.vand(<16 x i32> %302, <16 x i32> %36) #9
  %309 = tail call <16 x i32> @llvm.hexagon.V6.vand(<16 x i32> %304, <16 x i32> %36) #9
  %310 = tail call <16 x i32> @llvm.hexagon.V6.vand(<16 x i32> %306, <16 x i32> %36) #9
  %311 = tail call <32 x i32> @llvm.hexagon.V6.vcombine(<16 x i32> %308, <16 x i32> %307)
  %312 = tail call <32 x i32> @llvm.hexagon.V6.vcombine(<16 x i32> %310, <16 x i32> %309)
  %313 = shufflevector <64 x i32> %t111, <64 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %314 = tail call <32 x i32> @llvm.hexagon.V6.vaddw.dv(<32 x i32> %313, <32 x i32> %311) #9
  %315 = shufflevector <64 x i32> %t111, <64 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %316 = tail call <32 x i32> @llvm.hexagon.V6.vaddw.dv(<32 x i32> %315, <32 x i32> %312) #9
  %317 = extractelement <32 x i32> %314, i32 0
  %318 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %317
  %319 = load i16, i16* %318, align 2, !tbaa !80
  %320 = insertelement <64 x i16> undef, i16 %319, i32 0
  %321 = extractelement <32 x i32> %314, i32 1
  %322 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %321
  %323 = load i16, i16* %322, align 2, !tbaa !80
  %324 = insertelement <64 x i16> %320, i16 %323, i32 1
  %325 = extractelement <32 x i32> %314, i32 2
  %326 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %325
  %327 = load i16, i16* %326, align 2, !tbaa !80
  %328 = insertelement <64 x i16> %324, i16 %327, i32 2
  %329 = extractelement <32 x i32> %314, i32 3
  %330 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %329
  %331 = load i16, i16* %330, align 2, !tbaa !80
  %332 = insertelement <64 x i16> %328, i16 %331, i32 3
  %333 = extractelement <32 x i32> %314, i32 4
  %334 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %333
  %335 = load i16, i16* %334, align 2, !tbaa !80
  %336 = insertelement <64 x i16> %332, i16 %335, i32 4
  %337 = extractelement <32 x i32> %314, i32 5
  %338 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %337
  %339 = load i16, i16* %338, align 2, !tbaa !80
  %340 = insertelement <64 x i16> %336, i16 %339, i32 5
  %341 = extractelement <32 x i32> %314, i32 6
  %342 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %341
  %343 = load i16, i16* %342, align 2, !tbaa !80
  %344 = insertelement <64 x i16> %340, i16 %343, i32 6
  %345 = extractelement <32 x i32> %314, i32 7
  %346 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %345
  %347 = load i16, i16* %346, align 2, !tbaa !80
  %348 = insertelement <64 x i16> %344, i16 %347, i32 7
  %349 = extractelement <32 x i32> %314, i32 8
  %350 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %349
  %351 = load i16, i16* %350, align 2, !tbaa !80
  %352 = insertelement <64 x i16> %348, i16 %351, i32 8
  %353 = extractelement <32 x i32> %314, i32 9
  %354 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %353
  %355 = load i16, i16* %354, align 2, !tbaa !80
  %356 = insertelement <64 x i16> %352, i16 %355, i32 9
  %357 = extractelement <32 x i32> %314, i32 10
  %358 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %357
  %359 = load i16, i16* %358, align 2, !tbaa !80
  %360 = insertelement <64 x i16> %356, i16 %359, i32 10
  %361 = extractelement <32 x i32> %314, i32 11
  %362 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %361
  %363 = load i16, i16* %362, align 2, !tbaa !80
  %364 = insertelement <64 x i16> %360, i16 %363, i32 11
  %365 = extractelement <32 x i32> %314, i32 12
  %366 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %365
  %367 = load i16, i16* %366, align 2, !tbaa !80
  %368 = insertelement <64 x i16> %364, i16 %367, i32 12
  %369 = extractelement <32 x i32> %314, i32 13
  %370 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %369
  %371 = load i16, i16* %370, align 2, !tbaa !80
  %372 = insertelement <64 x i16> %368, i16 %371, i32 13
  %373 = extractelement <32 x i32> %314, i32 14
  %374 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %373
  %375 = load i16, i16* %374, align 2, !tbaa !80
  %376 = insertelement <64 x i16> %372, i16 %375, i32 14
  %377 = extractelement <32 x i32> %314, i32 15
  %378 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %377
  %379 = load i16, i16* %378, align 2, !tbaa !80
  %380 = insertelement <64 x i16> %376, i16 %379, i32 15
  %381 = extractelement <32 x i32> %314, i32 16
  %382 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %381
  %383 = load i16, i16* %382, align 2, !tbaa !80
  %384 = insertelement <64 x i16> %380, i16 %383, i32 16
  %385 = extractelement <32 x i32> %314, i32 17
  %386 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %385
  %387 = load i16, i16* %386, align 2, !tbaa !80
  %388 = insertelement <64 x i16> %384, i16 %387, i32 17
  %389 = extractelement <32 x i32> %314, i32 18
  %390 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %389
  %391 = load i16, i16* %390, align 2, !tbaa !80
  %392 = insertelement <64 x i16> %388, i16 %391, i32 18
  %393 = extractelement <32 x i32> %314, i32 19
  %394 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %393
  %395 = load i16, i16* %394, align 2, !tbaa !80
  %396 = insertelement <64 x i16> %392, i16 %395, i32 19
  %397 = extractelement <32 x i32> %314, i32 20
  %398 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %397
  %399 = load i16, i16* %398, align 2, !tbaa !80
  %400 = insertelement <64 x i16> %396, i16 %399, i32 20
  %401 = extractelement <32 x i32> %314, i32 21
  %402 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %401
  %403 = load i16, i16* %402, align 2, !tbaa !80
  %404 = insertelement <64 x i16> %400, i16 %403, i32 21
  %405 = extractelement <32 x i32> %314, i32 22
  %406 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %405
  %407 = load i16, i16* %406, align 2, !tbaa !80
  %408 = insertelement <64 x i16> %404, i16 %407, i32 22
  %409 = extractelement <32 x i32> %314, i32 23
  %410 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %409
  %411 = load i16, i16* %410, align 2, !tbaa !80
  %412 = insertelement <64 x i16> %408, i16 %411, i32 23
  %413 = extractelement <32 x i32> %314, i32 24
  %414 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %413
  %415 = load i16, i16* %414, align 2, !tbaa !80
  %416 = insertelement <64 x i16> %412, i16 %415, i32 24
  %417 = extractelement <32 x i32> %314, i32 25
  %418 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %417
  %419 = load i16, i16* %418, align 2, !tbaa !80
  %420 = insertelement <64 x i16> %416, i16 %419, i32 25
  %421 = extractelement <32 x i32> %314, i32 26
  %422 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %421
  %423 = load i16, i16* %422, align 2, !tbaa !80
  %424 = insertelement <64 x i16> %420, i16 %423, i32 26
  %425 = extractelement <32 x i32> %314, i32 27
  %426 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %425
  %427 = load i16, i16* %426, align 2, !tbaa !80
  %428 = insertelement <64 x i16> %424, i16 %427, i32 27
  %429 = extractelement <32 x i32> %314, i32 28
  %430 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %429
  %431 = load i16, i16* %430, align 2, !tbaa !80
  %432 = insertelement <64 x i16> %428, i16 %431, i32 28
  %433 = extractelement <32 x i32> %314, i32 29
  %434 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %433
  %435 = load i16, i16* %434, align 2, !tbaa !80
  %436 = insertelement <64 x i16> %432, i16 %435, i32 29
  %437 = extractelement <32 x i32> %314, i32 30
  %438 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %437
  %439 = load i16, i16* %438, align 2, !tbaa !80
  %440 = insertelement <64 x i16> %436, i16 %439, i32 30
  %441 = extractelement <32 x i32> %314, i32 31
  %442 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %441
  %443 = load i16, i16* %442, align 2, !tbaa !80
  %444 = insertelement <64 x i16> %440, i16 %443, i32 31
  %445 = extractelement <32 x i32> %316, i32 0
  %446 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %445
  %447 = load i16, i16* %446, align 2, !tbaa !80
  %448 = insertelement <64 x i16> %444, i16 %447, i32 32
  %449 = extractelement <32 x i32> %316, i32 1
  %450 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %449
  %451 = load i16, i16* %450, align 2, !tbaa !80
  %452 = insertelement <64 x i16> %448, i16 %451, i32 33
  %453 = extractelement <32 x i32> %316, i32 2
  %454 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %453
  %455 = load i16, i16* %454, align 2, !tbaa !80
  %456 = insertelement <64 x i16> %452, i16 %455, i32 34
  %457 = extractelement <32 x i32> %316, i32 3
  %458 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %457
  %459 = load i16, i16* %458, align 2, !tbaa !80
  %460 = insertelement <64 x i16> %456, i16 %459, i32 35
  %461 = extractelement <32 x i32> %316, i32 4
  %462 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %461
  %463 = load i16, i16* %462, align 2, !tbaa !80
  %464 = insertelement <64 x i16> %460, i16 %463, i32 36
  %465 = extractelement <32 x i32> %316, i32 5
  %466 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %465
  %467 = load i16, i16* %466, align 2, !tbaa !80
  %468 = insertelement <64 x i16> %464, i16 %467, i32 37
  %469 = extractelement <32 x i32> %316, i32 6
  %470 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %469
  %471 = load i16, i16* %470, align 2, !tbaa !80
  %472 = insertelement <64 x i16> %468, i16 %471, i32 38
  %473 = extractelement <32 x i32> %316, i32 7
  %474 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %473
  %475 = load i16, i16* %474, align 2, !tbaa !80
  %476 = insertelement <64 x i16> %472, i16 %475, i32 39
  %477 = extractelement <32 x i32> %316, i32 8
  %478 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %477
  %479 = load i16, i16* %478, align 2, !tbaa !80
  %480 = insertelement <64 x i16> %476, i16 %479, i32 40
  %481 = extractelement <32 x i32> %316, i32 9
  %482 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %481
  %483 = load i16, i16* %482, align 2, !tbaa !80
  %484 = insertelement <64 x i16> %480, i16 %483, i32 41
  %485 = extractelement <32 x i32> %316, i32 10
  %486 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %485
  %487 = load i16, i16* %486, align 2, !tbaa !80
  %488 = insertelement <64 x i16> %484, i16 %487, i32 42
  %489 = extractelement <32 x i32> %316, i32 11
  %490 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %489
  %491 = load i16, i16* %490, align 2, !tbaa !80
  %492 = insertelement <64 x i16> %488, i16 %491, i32 43
  %493 = extractelement <32 x i32> %316, i32 12
  %494 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %493
  %495 = load i16, i16* %494, align 2, !tbaa !80
  %496 = insertelement <64 x i16> %492, i16 %495, i32 44
  %497 = extractelement <32 x i32> %316, i32 13
  %498 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %497
  %499 = load i16, i16* %498, align 2, !tbaa !80
  %500 = insertelement <64 x i16> %496, i16 %499, i32 45
  %501 = extractelement <32 x i32> %316, i32 14
  %502 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %501
  %503 = load i16, i16* %502, align 2, !tbaa !80
  %504 = insertelement <64 x i16> %500, i16 %503, i32 46
  %505 = extractelement <32 x i32> %316, i32 15
  %506 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %505
  %507 = load i16, i16* %506, align 2, !tbaa !80
  %508 = insertelement <64 x i16> %504, i16 %507, i32 47
  %509 = extractelement <32 x i32> %316, i32 16
  %510 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %509
  %511 = load i16, i16* %510, align 2, !tbaa !80
  %512 = insertelement <64 x i16> %508, i16 %511, i32 48
  %513 = extractelement <32 x i32> %316, i32 17
  %514 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %513
  %515 = load i16, i16* %514, align 2, !tbaa !80
  %516 = insertelement <64 x i16> %512, i16 %515, i32 49
  %517 = extractelement <32 x i32> %316, i32 18
  %518 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %517
  %519 = load i16, i16* %518, align 2, !tbaa !80
  %520 = insertelement <64 x i16> %516, i16 %519, i32 50
  %521 = extractelement <32 x i32> %316, i32 19
  %522 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %521
  %523 = load i16, i16* %522, align 2, !tbaa !80
  %524 = insertelement <64 x i16> %520, i16 %523, i32 51
  %525 = extractelement <32 x i32> %316, i32 20
  %526 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %525
  %527 = load i16, i16* %526, align 2, !tbaa !80
  %528 = insertelement <64 x i16> %524, i16 %527, i32 52
  %529 = extractelement <32 x i32> %316, i32 21
  %530 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %529
  %531 = load i16, i16* %530, align 2, !tbaa !80
  %532 = insertelement <64 x i16> %528, i16 %531, i32 53
  %533 = extractelement <32 x i32> %316, i32 22
  %534 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %533
  %535 = load i16, i16* %534, align 2, !tbaa !80
  %536 = insertelement <64 x i16> %532, i16 %535, i32 54
  %537 = extractelement <32 x i32> %316, i32 23
  %538 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %537
  %539 = load i16, i16* %538, align 2, !tbaa !80
  %540 = insertelement <64 x i16> %536, i16 %539, i32 55
  %541 = extractelement <32 x i32> %316, i32 24
  %542 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %541
  %543 = load i16, i16* %542, align 2, !tbaa !80
  %544 = insertelement <64 x i16> %540, i16 %543, i32 56
  %545 = extractelement <32 x i32> %316, i32 25
  %546 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %545
  %547 = load i16, i16* %546, align 2, !tbaa !80
  %548 = insertelement <64 x i16> %544, i16 %547, i32 57
  %549 = extractelement <32 x i32> %316, i32 26
  %550 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %549
  %551 = load i16, i16* %550, align 2, !tbaa !80
  %552 = insertelement <64 x i16> %548, i16 %551, i32 58
  %553 = extractelement <32 x i32> %316, i32 27
  %554 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %553
  %555 = load i16, i16* %554, align 2, !tbaa !80
  %556 = insertelement <64 x i16> %552, i16 %555, i32 59
  %557 = extractelement <32 x i32> %316, i32 28
  %558 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %557
  %559 = load i16, i16* %558, align 2, !tbaa !80
  %560 = insertelement <64 x i16> %556, i16 %559, i32 60
  %561 = extractelement <32 x i32> %316, i32 29
  %562 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %561
  %563 = load i16, i16* %562, align 2, !tbaa !80
  %564 = insertelement <64 x i16> %560, i16 %563, i32 61
  %565 = extractelement <32 x i32> %316, i32 30
  %566 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %565
  %567 = load i16, i16* %566, align 2, !tbaa !80
  %568 = insertelement <64 x i16> %564, i16 %567, i32 62
  %569 = extractelement <32 x i32> %316, i32 31
  %570 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %569
  %571 = load i16, i16* %570, align 2, !tbaa !80
  %572 = insertelement <64 x i16> %568, i16 %571, i32 63
  %573 = add nuw nsw i32 %46, 383
  %574 = tail call <16 x i32> @llvm.hexagon.V6.lvsplatw(i32 %573) #9
  %575 = tail call <32 x i32> @llvm.hexagon.V6.vcombine(<16 x i32> %574, <16 x i32> %574)
  %576 = tail call <32 x i32> @llvm.hexagon.V6.vaddw.dv(<32 x i32> %575, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>) #9
  %577 = tail call <32 x i32> @llvm.hexagon.V6.vaddw.dv(<32 x i32> %575, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>) #9
  %578 = shufflevector <32 x i32> %576, <32 x i32> %577, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %t112 = srem <64 x i32> %578, %35
  %579 = shufflevector <64 x i32> %t112, <64 x i32> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %580 = tail call <16 x i32> @llvm.hexagon.V6.vasrw(<16 x i32> %579, i32 31) #9
  %581 = shufflevector <64 x i32> %t112, <64 x i32> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %582 = tail call <16 x i32> @llvm.hexagon.V6.vasrw(<16 x i32> %581, i32 31) #9
  %583 = shufflevector <64 x i32> %t112, <64 x i32> undef, <16 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47>
  %584 = tail call <16 x i32> @llvm.hexagon.V6.vasrw(<16 x i32> %583, i32 31) #9
  %585 = shufflevector <64 x i32> %t112, <64 x i32> undef, <16 x i32> <i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %586 = tail call <16 x i32> @llvm.hexagon.V6.vasrw(<16 x i32> %585, i32 31) #9
  %587 = tail call <16 x i32> @llvm.hexagon.V6.vand(<16 x i32> %580, <16 x i32> %36) #9
  %588 = tail call <16 x i32> @llvm.hexagon.V6.vand(<16 x i32> %582, <16 x i32> %36) #9
  %589 = tail call <16 x i32> @llvm.hexagon.V6.vand(<16 x i32> %584, <16 x i32> %36) #9
  %590 = tail call <16 x i32> @llvm.hexagon.V6.vand(<16 x i32> %586, <16 x i32> %36) #9
  %591 = tail call <32 x i32> @llvm.hexagon.V6.vcombine(<16 x i32> %588, <16 x i32> %587)
  %592 = tail call <32 x i32> @llvm.hexagon.V6.vcombine(<16 x i32> %590, <16 x i32> %589)
  %593 = shufflevector <64 x i32> %t112, <64 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %594 = tail call <32 x i32> @llvm.hexagon.V6.vaddw.dv(<32 x i32> %593, <32 x i32> %591) #9
  %595 = shufflevector <64 x i32> %t112, <64 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %596 = tail call <32 x i32> @llvm.hexagon.V6.vaddw.dv(<32 x i32> %595, <32 x i32> %592) #9
  %597 = extractelement <32 x i32> %594, i32 0
  %598 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %597
  %599 = load i16, i16* %598, align 2, !tbaa !80
  %600 = insertelement <64 x i16> undef, i16 %599, i32 0
  %601 = extractelement <32 x i32> %594, i32 1
  %602 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %601
  %603 = load i16, i16* %602, align 2, !tbaa !80
  %604 = insertelement <64 x i16> %600, i16 %603, i32 1
  %605 = extractelement <32 x i32> %594, i32 2
  %606 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %605
  %607 = load i16, i16* %606, align 2, !tbaa !80
  %608 = insertelement <64 x i16> %604, i16 %607, i32 2
  %609 = extractelement <32 x i32> %594, i32 3
  %610 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %609
  %611 = load i16, i16* %610, align 2, !tbaa !80
  %612 = insertelement <64 x i16> %608, i16 %611, i32 3
  %613 = extractelement <32 x i32> %594, i32 4
  %614 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %613
  %615 = load i16, i16* %614, align 2, !tbaa !80
  %616 = insertelement <64 x i16> %612, i16 %615, i32 4
  %617 = extractelement <32 x i32> %594, i32 5
  %618 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %617
  %619 = load i16, i16* %618, align 2, !tbaa !80
  %620 = insertelement <64 x i16> %616, i16 %619, i32 5
  %621 = extractelement <32 x i32> %594, i32 6
  %622 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %621
  %623 = load i16, i16* %622, align 2, !tbaa !80
  %624 = insertelement <64 x i16> %620, i16 %623, i32 6
  %625 = extractelement <32 x i32> %594, i32 7
  %626 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %625
  %627 = load i16, i16* %626, align 2, !tbaa !80
  %628 = insertelement <64 x i16> %624, i16 %627, i32 7
  %629 = extractelement <32 x i32> %594, i32 8
  %630 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %629
  %631 = load i16, i16* %630, align 2, !tbaa !80
  %632 = insertelement <64 x i16> %628, i16 %631, i32 8
  %633 = extractelement <32 x i32> %594, i32 9
  %634 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %633
  %635 = load i16, i16* %634, align 2, !tbaa !80
  %636 = insertelement <64 x i16> %632, i16 %635, i32 9
  %637 = extractelement <32 x i32> %594, i32 10
  %638 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %637
  %639 = load i16, i16* %638, align 2, !tbaa !80
  %640 = insertelement <64 x i16> %636, i16 %639, i32 10
  %641 = extractelement <32 x i32> %594, i32 11
  %642 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %641
  %643 = load i16, i16* %642, align 2, !tbaa !80
  %644 = insertelement <64 x i16> %640, i16 %643, i32 11
  %645 = extractelement <32 x i32> %594, i32 12
  %646 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %645
  %647 = load i16, i16* %646, align 2, !tbaa !80
  %648 = insertelement <64 x i16> %644, i16 %647, i32 12
  %649 = extractelement <32 x i32> %594, i32 13
  %650 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %649
  %651 = load i16, i16* %650, align 2, !tbaa !80
  %652 = insertelement <64 x i16> %648, i16 %651, i32 13
  %653 = extractelement <32 x i32> %594, i32 14
  %654 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %653
  %655 = load i16, i16* %654, align 2, !tbaa !80
  %656 = insertelement <64 x i16> %652, i16 %655, i32 14
  %657 = extractelement <32 x i32> %594, i32 15
  %658 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %657
  %659 = load i16, i16* %658, align 2, !tbaa !80
  %660 = insertelement <64 x i16> %656, i16 %659, i32 15
  %661 = extractelement <32 x i32> %594, i32 16
  %662 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %661
  %663 = load i16, i16* %662, align 2, !tbaa !80
  %664 = insertelement <64 x i16> %660, i16 %663, i32 16
  %665 = extractelement <32 x i32> %594, i32 17
  %666 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %665
  %667 = load i16, i16* %666, align 2, !tbaa !80
  %668 = insertelement <64 x i16> %664, i16 %667, i32 17
  %669 = extractelement <32 x i32> %594, i32 18
  %670 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %669
  %671 = load i16, i16* %670, align 2, !tbaa !80
  %672 = insertelement <64 x i16> %668, i16 %671, i32 18
  %673 = extractelement <32 x i32> %594, i32 19
  %674 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %673
  %675 = load i16, i16* %674, align 2, !tbaa !80
  %676 = insertelement <64 x i16> %672, i16 %675, i32 19
  %677 = extractelement <32 x i32> %594, i32 20
  %678 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %677
  %679 = load i16, i16* %678, align 2, !tbaa !80
  %680 = insertelement <64 x i16> %676, i16 %679, i32 20
  %681 = extractelement <32 x i32> %594, i32 21
  %682 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %681
  %683 = load i16, i16* %682, align 2, !tbaa !80
  %684 = insertelement <64 x i16> %680, i16 %683, i32 21
  %685 = extractelement <32 x i32> %594, i32 22
  %686 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %685
  %687 = load i16, i16* %686, align 2, !tbaa !80
  %688 = insertelement <64 x i16> %684, i16 %687, i32 22
  %689 = extractelement <32 x i32> %594, i32 23
  %690 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %689
  %691 = load i16, i16* %690, align 2, !tbaa !80
  %692 = insertelement <64 x i16> %688, i16 %691, i32 23
  %693 = extractelement <32 x i32> %594, i32 24
  %694 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %693
  %695 = load i16, i16* %694, align 2, !tbaa !80
  %696 = insertelement <64 x i16> %692, i16 %695, i32 24
  %697 = extractelement <32 x i32> %594, i32 25
  %698 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %697
  %699 = load i16, i16* %698, align 2, !tbaa !80
  %700 = insertelement <64 x i16> %696, i16 %699, i32 25
  %701 = extractelement <32 x i32> %594, i32 26
  %702 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %701
  %703 = load i16, i16* %702, align 2, !tbaa !80
  %704 = insertelement <64 x i16> %700, i16 %703, i32 26
  %705 = extractelement <32 x i32> %594, i32 27
  %706 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %705
  %707 = load i16, i16* %706, align 2, !tbaa !80
  %708 = insertelement <64 x i16> %704, i16 %707, i32 27
  %709 = extractelement <32 x i32> %594, i32 28
  %710 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %709
  %711 = load i16, i16* %710, align 2, !tbaa !80
  %712 = insertelement <64 x i16> %708, i16 %711, i32 28
  %713 = extractelement <32 x i32> %594, i32 29
  %714 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %713
  %715 = load i16, i16* %714, align 2, !tbaa !80
  %716 = insertelement <64 x i16> %712, i16 %715, i32 29
  %717 = extractelement <32 x i32> %594, i32 30
  %718 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %717
  %719 = load i16, i16* %718, align 2, !tbaa !80
  %720 = insertelement <64 x i16> %716, i16 %719, i32 30
  %721 = extractelement <32 x i32> %594, i32 31
  %722 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %721
  %723 = load i16, i16* %722, align 2, !tbaa !80
  %724 = insertelement <64 x i16> %720, i16 %723, i32 31
  %725 = extractelement <32 x i32> %596, i32 0
  %726 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %725
  %727 = load i16, i16* %726, align 2, !tbaa !80
  %728 = insertelement <64 x i16> %724, i16 %727, i32 32
  %729 = extractelement <32 x i32> %596, i32 1
  %730 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %729
  %731 = load i16, i16* %730, align 2, !tbaa !80
  %732 = insertelement <64 x i16> %728, i16 %731, i32 33
  %733 = extractelement <32 x i32> %596, i32 2
  %734 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %733
  %735 = load i16, i16* %734, align 2, !tbaa !80
  %736 = insertelement <64 x i16> %732, i16 %735, i32 34
  %737 = extractelement <32 x i32> %596, i32 3
  %738 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %737
  %739 = load i16, i16* %738, align 2, !tbaa !80
  %740 = insertelement <64 x i16> %736, i16 %739, i32 35
  %741 = extractelement <32 x i32> %596, i32 4
  %742 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %741
  %743 = load i16, i16* %742, align 2, !tbaa !80
  %744 = insertelement <64 x i16> %740, i16 %743, i32 36
  %745 = extractelement <32 x i32> %596, i32 5
  %746 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %745
  %747 = load i16, i16* %746, align 2, !tbaa !80
  %748 = insertelement <64 x i16> %744, i16 %747, i32 37
  %749 = extractelement <32 x i32> %596, i32 6
  %750 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %749
  %751 = load i16, i16* %750, align 2, !tbaa !80
  %752 = insertelement <64 x i16> %748, i16 %751, i32 38
  %753 = extractelement <32 x i32> %596, i32 7
  %754 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %753
  %755 = load i16, i16* %754, align 2, !tbaa !80
  %756 = insertelement <64 x i16> %752, i16 %755, i32 39
  %757 = extractelement <32 x i32> %596, i32 8
  %758 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %757
  %759 = load i16, i16* %758, align 2, !tbaa !80
  %760 = insertelement <64 x i16> %756, i16 %759, i32 40
  %761 = extractelement <32 x i32> %596, i32 9
  %762 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %761
  %763 = load i16, i16* %762, align 2, !tbaa !80
  %764 = insertelement <64 x i16> %760, i16 %763, i32 41
  %765 = extractelement <32 x i32> %596, i32 10
  %766 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %765
  %767 = load i16, i16* %766, align 2, !tbaa !80
  %768 = insertelement <64 x i16> %764, i16 %767, i32 42
  %769 = extractelement <32 x i32> %596, i32 11
  %770 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %769
  %771 = load i16, i16* %770, align 2, !tbaa !80
  %772 = insertelement <64 x i16> %768, i16 %771, i32 43
  %773 = extractelement <32 x i32> %596, i32 12
  %774 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %773
  %775 = load i16, i16* %774, align 2, !tbaa !80
  %776 = insertelement <64 x i16> %772, i16 %775, i32 44
  %777 = extractelement <32 x i32> %596, i32 13
  %778 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %777
  %779 = load i16, i16* %778, align 2, !tbaa !80
  %780 = insertelement <64 x i16> %776, i16 %779, i32 45
  %781 = extractelement <32 x i32> %596, i32 14
  %782 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %781
  %783 = load i16, i16* %782, align 2, !tbaa !80
  %784 = insertelement <64 x i16> %780, i16 %783, i32 46
  %785 = extractelement <32 x i32> %596, i32 15
  %786 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %785
  %787 = load i16, i16* %786, align 2, !tbaa !80
  %788 = insertelement <64 x i16> %784, i16 %787, i32 47
  %789 = extractelement <32 x i32> %596, i32 16
  %790 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %789
  %791 = load i16, i16* %790, align 2, !tbaa !80
  %792 = insertelement <64 x i16> %788, i16 %791, i32 48
  %793 = extractelement <32 x i32> %596, i32 17
  %794 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %793
  %795 = load i16, i16* %794, align 2, !tbaa !80
  %796 = insertelement <64 x i16> %792, i16 %795, i32 49
  %797 = extractelement <32 x i32> %596, i32 18
  %798 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %797
  %799 = load i16, i16* %798, align 2, !tbaa !80
  %800 = insertelement <64 x i16> %796, i16 %799, i32 50
  %801 = extractelement <32 x i32> %596, i32 19
  %802 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %801
  %803 = load i16, i16* %802, align 2, !tbaa !80
  %804 = insertelement <64 x i16> %800, i16 %803, i32 51
  %805 = extractelement <32 x i32> %596, i32 20
  %806 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %805
  %807 = load i16, i16* %806, align 2, !tbaa !80
  %808 = insertelement <64 x i16> %804, i16 %807, i32 52
  %809 = extractelement <32 x i32> %596, i32 21
  %810 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %809
  %811 = load i16, i16* %810, align 2, !tbaa !80
  %812 = insertelement <64 x i16> %808, i16 %811, i32 53
  %813 = extractelement <32 x i32> %596, i32 22
  %814 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %813
  %815 = load i16, i16* %814, align 2, !tbaa !80
  %816 = insertelement <64 x i16> %812, i16 %815, i32 54
  %817 = extractelement <32 x i32> %596, i32 23
  %818 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %817
  %819 = load i16, i16* %818, align 2, !tbaa !80
  %820 = insertelement <64 x i16> %816, i16 %819, i32 55
  %821 = extractelement <32 x i32> %596, i32 24
  %822 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %821
  %823 = load i16, i16* %822, align 2, !tbaa !80
  %824 = insertelement <64 x i16> %820, i16 %823, i32 56
  %825 = extractelement <32 x i32> %596, i32 25
  %826 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %825
  %827 = load i16, i16* %826, align 2, !tbaa !80
  %828 = insertelement <64 x i16> %824, i16 %827, i32 57
  %829 = extractelement <32 x i32> %596, i32 26
  %830 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %829
  %831 = load i16, i16* %830, align 2, !tbaa !80
  %832 = insertelement <64 x i16> %828, i16 %831, i32 58
  %833 = extractelement <32 x i32> %596, i32 27
  %834 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %833
  %835 = load i16, i16* %834, align 2, !tbaa !80
  %836 = insertelement <64 x i16> %832, i16 %835, i32 59
  %837 = extractelement <32 x i32> %596, i32 28
  %838 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %837
  %839 = load i16, i16* %838, align 2, !tbaa !80
  %840 = insertelement <64 x i16> %836, i16 %839, i32 60
  %841 = extractelement <32 x i32> %596, i32 29
  %842 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %841
  %843 = load i16, i16* %842, align 2, !tbaa !80
  %844 = insertelement <64 x i16> %840, i16 %843, i32 61
  %845 = extractelement <32 x i32> %596, i32 30
  %846 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %845
  %847 = load i16, i16* %846, align 2, !tbaa !80
  %848 = insertelement <64 x i16> %844, i16 %847, i32 62
  %849 = extractelement <32 x i32> %596, i32 31
  %850 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %849
  %851 = load i16, i16* %850, align 2, !tbaa !80
  %852 = insertelement <64 x i16> %848, i16 %851, i32 63
  %853 = bitcast <64 x i16> %572 to <32 x i32>
  %854 = tail call <16 x i32> @llvm.hexagon.V6.hi(<32 x i32> %853)
  %855 = tail call <16 x i32> @llvm.hexagon.V6.lo(<32 x i32> %853)
  %856 = bitcast <64 x i16> %852 to <32 x i32>
  %857 = tail call <16 x i32> @llvm.hexagon.V6.hi(<32 x i32> %856)
  %858 = tail call <16 x i32> @llvm.hexagon.V6.lo(<32 x i32> %856)
  %859 = tail call <16 x i32> @llvm.hexagon.V6.vmpyihb.acc(<16 x i32> %855, <16 x i32> %858, i32 %dup4.i.i6) #9
  %860 = tail call <16 x i32> @llvm.hexagon.V6.vmpyihb.acc(<16 x i32> %854, <16 x i32> %857, i32 %dup4.i.i6) #9
  %861 = zext i32 %output.s0.x.x to i64
  %862 = mul nuw nsw i64 %861, 715827883
  %863 = lshr i64 %862, 32
  %864 = trunc i64 %863 to i32
  %865 = mul i32 %864, -6
  %866 = add i32 %865, %output.s0.x.x
  %867 = shl nsw i32 %866, 6
  %868 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %867
  %869 = bitcast i16* %868 to <16 x i32>*
  %870 = load <16 x i32>, <16 x i32>* %869, align 64, !tbaa !80
  %871 = or i32 %867, 32
  %872 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %871
  %873 = bitcast i16* %872 to <16 x i32>*
  %874 = load <16 x i32>, <16 x i32>* %873, align 64, !tbaa !80
  %875 = tail call <16 x i32> @llvm.hexagon.V6.vmpyihb.acc(<16 x i32> %859, <16 x i32> %870, i32 %dup4.i.i4) #9
  %876 = tail call <16 x i32> @llvm.hexagon.V6.vmpyihb.acc(<16 x i32> %860, <16 x i32> %874, i32 %dup4.i.i4) #9
  %877 = or i32 %46, 1
  %878 = tail call <16 x i32> @llvm.hexagon.V6.lvsplatw(i32 %877) #9
  %879 = tail call <32 x i32> @llvm.hexagon.V6.vcombine(<16 x i32> %878, <16 x i32> %878)
  %880 = tail call <32 x i32> @llvm.hexagon.V6.vaddw.dv(<32 x i32> %879, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>) #9
  %881 = tail call <32 x i32> @llvm.hexagon.V6.vaddw.dv(<32 x i32> %879, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>) #9
  %882 = shufflevector <32 x i32> %880, <32 x i32> %881, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %t113 = srem <64 x i32> %882, %35
  %883 = shufflevector <64 x i32> %t113, <64 x i32> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %884 = tail call <16 x i32> @llvm.hexagon.V6.vasrw(<16 x i32> %883, i32 31) #9
  %885 = shufflevector <64 x i32> %t113, <64 x i32> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %886 = tail call <16 x i32> @llvm.hexagon.V6.vasrw(<16 x i32> %885, i32 31) #9
  %887 = shufflevector <64 x i32> %t113, <64 x i32> undef, <16 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47>
  %888 = tail call <16 x i32> @llvm.hexagon.V6.vasrw(<16 x i32> %887, i32 31) #9
  %889 = shufflevector <64 x i32> %t113, <64 x i32> undef, <16 x i32> <i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %890 = tail call <16 x i32> @llvm.hexagon.V6.vasrw(<16 x i32> %889, i32 31) #9
  %891 = tail call <16 x i32> @llvm.hexagon.V6.vand(<16 x i32> %884, <16 x i32> %36) #9
  %892 = tail call <16 x i32> @llvm.hexagon.V6.vand(<16 x i32> %886, <16 x i32> %36) #9
  %893 = tail call <16 x i32> @llvm.hexagon.V6.vand(<16 x i32> %888, <16 x i32> %36) #9
  %894 = tail call <16 x i32> @llvm.hexagon.V6.vand(<16 x i32> %890, <16 x i32> %36) #9
  %895 = tail call <32 x i32> @llvm.hexagon.V6.vcombine(<16 x i32> %892, <16 x i32> %891)
  %896 = tail call <32 x i32> @llvm.hexagon.V6.vcombine(<16 x i32> %894, <16 x i32> %893)
  %897 = shufflevector <64 x i32> %t113, <64 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %898 = tail call <32 x i32> @llvm.hexagon.V6.vaddw.dv(<32 x i32> %897, <32 x i32> %895) #9
  %899 = shufflevector <64 x i32> %t113, <64 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %900 = tail call <32 x i32> @llvm.hexagon.V6.vaddw.dv(<32 x i32> %899, <32 x i32> %896) #9
  %901 = extractelement <32 x i32> %898, i32 0
  %902 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %901
  %903 = load i16, i16* %902, align 2, !tbaa !80
  %904 = insertelement <64 x i16> undef, i16 %903, i32 0
  %905 = extractelement <32 x i32> %898, i32 1
  %906 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %905
  %907 = load i16, i16* %906, align 2, !tbaa !80
  %908 = insertelement <64 x i16> %904, i16 %907, i32 1
  %909 = extractelement <32 x i32> %898, i32 2
  %910 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %909
  %911 = load i16, i16* %910, align 2, !tbaa !80
  %912 = insertelement <64 x i16> %908, i16 %911, i32 2
  %913 = extractelement <32 x i32> %898, i32 3
  %914 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %913
  %915 = load i16, i16* %914, align 2, !tbaa !80
  %916 = insertelement <64 x i16> %912, i16 %915, i32 3
  %917 = extractelement <32 x i32> %898, i32 4
  %918 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %917
  %919 = load i16, i16* %918, align 2, !tbaa !80
  %920 = insertelement <64 x i16> %916, i16 %919, i32 4
  %921 = extractelement <32 x i32> %898, i32 5
  %922 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %921
  %923 = load i16, i16* %922, align 2, !tbaa !80
  %924 = insertelement <64 x i16> %920, i16 %923, i32 5
  %925 = extractelement <32 x i32> %898, i32 6
  %926 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %925
  %927 = load i16, i16* %926, align 2, !tbaa !80
  %928 = insertelement <64 x i16> %924, i16 %927, i32 6
  %929 = extractelement <32 x i32> %898, i32 7
  %930 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %929
  %931 = load i16, i16* %930, align 2, !tbaa !80
  %932 = insertelement <64 x i16> %928, i16 %931, i32 7
  %933 = extractelement <32 x i32> %898, i32 8
  %934 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %933
  %935 = load i16, i16* %934, align 2, !tbaa !80
  %936 = insertelement <64 x i16> %932, i16 %935, i32 8
  %937 = extractelement <32 x i32> %898, i32 9
  %938 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %937
  %939 = load i16, i16* %938, align 2, !tbaa !80
  %940 = insertelement <64 x i16> %936, i16 %939, i32 9
  %941 = extractelement <32 x i32> %898, i32 10
  %942 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %941
  %943 = load i16, i16* %942, align 2, !tbaa !80
  %944 = insertelement <64 x i16> %940, i16 %943, i32 10
  %945 = extractelement <32 x i32> %898, i32 11
  %946 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %945
  %947 = load i16, i16* %946, align 2, !tbaa !80
  %948 = insertelement <64 x i16> %944, i16 %947, i32 11
  %949 = extractelement <32 x i32> %898, i32 12
  %950 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %949
  %951 = load i16, i16* %950, align 2, !tbaa !80
  %952 = insertelement <64 x i16> %948, i16 %951, i32 12
  %953 = extractelement <32 x i32> %898, i32 13
  %954 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %953
  %955 = load i16, i16* %954, align 2, !tbaa !80
  %956 = insertelement <64 x i16> %952, i16 %955, i32 13
  %957 = extractelement <32 x i32> %898, i32 14
  %958 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %957
  %959 = load i16, i16* %958, align 2, !tbaa !80
  %960 = insertelement <64 x i16> %956, i16 %959, i32 14
  %961 = extractelement <32 x i32> %898, i32 15
  %962 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %961
  %963 = load i16, i16* %962, align 2, !tbaa !80
  %964 = insertelement <64 x i16> %960, i16 %963, i32 15
  %965 = extractelement <32 x i32> %898, i32 16
  %966 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %965
  %967 = load i16, i16* %966, align 2, !tbaa !80
  %968 = insertelement <64 x i16> %964, i16 %967, i32 16
  %969 = extractelement <32 x i32> %898, i32 17
  %970 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %969
  %971 = load i16, i16* %970, align 2, !tbaa !80
  %972 = insertelement <64 x i16> %968, i16 %971, i32 17
  %973 = extractelement <32 x i32> %898, i32 18
  %974 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %973
  %975 = load i16, i16* %974, align 2, !tbaa !80
  %976 = insertelement <64 x i16> %972, i16 %975, i32 18
  %977 = extractelement <32 x i32> %898, i32 19
  %978 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %977
  %979 = load i16, i16* %978, align 2, !tbaa !80
  %980 = insertelement <64 x i16> %976, i16 %979, i32 19
  %981 = extractelement <32 x i32> %898, i32 20
  %982 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %981
  %983 = load i16, i16* %982, align 2, !tbaa !80
  %984 = insertelement <64 x i16> %980, i16 %983, i32 20
  %985 = extractelement <32 x i32> %898, i32 21
  %986 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %985
  %987 = load i16, i16* %986, align 2, !tbaa !80
  %988 = insertelement <64 x i16> %984, i16 %987, i32 21
  %989 = extractelement <32 x i32> %898, i32 22
  %990 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %989
  %991 = load i16, i16* %990, align 2, !tbaa !80
  %992 = insertelement <64 x i16> %988, i16 %991, i32 22
  %993 = extractelement <32 x i32> %898, i32 23
  %994 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %993
  %995 = load i16, i16* %994, align 2, !tbaa !80
  %996 = insertelement <64 x i16> %992, i16 %995, i32 23
  %997 = extractelement <32 x i32> %898, i32 24
  %998 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %997
  %999 = load i16, i16* %998, align 2, !tbaa !80
  %1000 = insertelement <64 x i16> %996, i16 %999, i32 24
  %1001 = extractelement <32 x i32> %898, i32 25
  %1002 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1001
  %1003 = load i16, i16* %1002, align 2, !tbaa !80
  %1004 = insertelement <64 x i16> %1000, i16 %1003, i32 25
  %1005 = extractelement <32 x i32> %898, i32 26
  %1006 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1005
  %1007 = load i16, i16* %1006, align 2, !tbaa !80
  %1008 = insertelement <64 x i16> %1004, i16 %1007, i32 26
  %1009 = extractelement <32 x i32> %898, i32 27
  %1010 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1009
  %1011 = load i16, i16* %1010, align 2, !tbaa !80
  %1012 = insertelement <64 x i16> %1008, i16 %1011, i32 27
  %1013 = extractelement <32 x i32> %898, i32 28
  %1014 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1013
  %1015 = load i16, i16* %1014, align 2, !tbaa !80
  %1016 = insertelement <64 x i16> %1012, i16 %1015, i32 28
  %1017 = extractelement <32 x i32> %898, i32 29
  %1018 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1017
  %1019 = load i16, i16* %1018, align 2, !tbaa !80
  %1020 = insertelement <64 x i16> %1016, i16 %1019, i32 29
  %1021 = extractelement <32 x i32> %898, i32 30
  %1022 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1021
  %1023 = load i16, i16* %1022, align 2, !tbaa !80
  %1024 = insertelement <64 x i16> %1020, i16 %1023, i32 30
  %1025 = extractelement <32 x i32> %898, i32 31
  %1026 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1025
  %1027 = load i16, i16* %1026, align 2, !tbaa !80
  %1028 = insertelement <64 x i16> %1024, i16 %1027, i32 31
  %1029 = extractelement <32 x i32> %900, i32 0
  %1030 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1029
  %1031 = load i16, i16* %1030, align 2, !tbaa !80
  %1032 = insertelement <64 x i16> %1028, i16 %1031, i32 32
  %1033 = extractelement <32 x i32> %900, i32 1
  %1034 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1033
  %1035 = load i16, i16* %1034, align 2, !tbaa !80
  %1036 = insertelement <64 x i16> %1032, i16 %1035, i32 33
  %1037 = extractelement <32 x i32> %900, i32 2
  %1038 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1037
  %1039 = load i16, i16* %1038, align 2, !tbaa !80
  %1040 = insertelement <64 x i16> %1036, i16 %1039, i32 34
  %1041 = extractelement <32 x i32> %900, i32 3
  %1042 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1041
  %1043 = load i16, i16* %1042, align 2, !tbaa !80
  %1044 = insertelement <64 x i16> %1040, i16 %1043, i32 35
  %1045 = extractelement <32 x i32> %900, i32 4
  %1046 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1045
  %1047 = load i16, i16* %1046, align 2, !tbaa !80
  %1048 = insertelement <64 x i16> %1044, i16 %1047, i32 36
  %1049 = extractelement <32 x i32> %900, i32 5
  %1050 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1049
  %1051 = load i16, i16* %1050, align 2, !tbaa !80
  %1052 = insertelement <64 x i16> %1048, i16 %1051, i32 37
  %1053 = extractelement <32 x i32> %900, i32 6
  %1054 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1053
  %1055 = load i16, i16* %1054, align 2, !tbaa !80
  %1056 = insertelement <64 x i16> %1052, i16 %1055, i32 38
  %1057 = extractelement <32 x i32> %900, i32 7
  %1058 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1057
  %1059 = load i16, i16* %1058, align 2, !tbaa !80
  %1060 = insertelement <64 x i16> %1056, i16 %1059, i32 39
  %1061 = extractelement <32 x i32> %900, i32 8
  %1062 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1061
  %1063 = load i16, i16* %1062, align 2, !tbaa !80
  %1064 = insertelement <64 x i16> %1060, i16 %1063, i32 40
  %1065 = extractelement <32 x i32> %900, i32 9
  %1066 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1065
  %1067 = load i16, i16* %1066, align 2, !tbaa !80
  %1068 = insertelement <64 x i16> %1064, i16 %1067, i32 41
  %1069 = extractelement <32 x i32> %900, i32 10
  %1070 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1069
  %1071 = load i16, i16* %1070, align 2, !tbaa !80
  %1072 = insertelement <64 x i16> %1068, i16 %1071, i32 42
  %1073 = extractelement <32 x i32> %900, i32 11
  %1074 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1073
  %1075 = load i16, i16* %1074, align 2, !tbaa !80
  %1076 = insertelement <64 x i16> %1072, i16 %1075, i32 43
  %1077 = extractelement <32 x i32> %900, i32 12
  %1078 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1077
  %1079 = load i16, i16* %1078, align 2, !tbaa !80
  %1080 = insertelement <64 x i16> %1076, i16 %1079, i32 44
  %1081 = extractelement <32 x i32> %900, i32 13
  %1082 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1081
  %1083 = load i16, i16* %1082, align 2, !tbaa !80
  %1084 = insertelement <64 x i16> %1080, i16 %1083, i32 45
  %1085 = extractelement <32 x i32> %900, i32 14
  %1086 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1085
  %1087 = load i16, i16* %1086, align 2, !tbaa !80
  %1088 = insertelement <64 x i16> %1084, i16 %1087, i32 46
  %1089 = extractelement <32 x i32> %900, i32 15
  %1090 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1089
  %1091 = load i16, i16* %1090, align 2, !tbaa !80
  %1092 = insertelement <64 x i16> %1088, i16 %1091, i32 47
  %1093 = extractelement <32 x i32> %900, i32 16
  %1094 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1093
  %1095 = load i16, i16* %1094, align 2, !tbaa !80
  %1096 = insertelement <64 x i16> %1092, i16 %1095, i32 48
  %1097 = extractelement <32 x i32> %900, i32 17
  %1098 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1097
  %1099 = load i16, i16* %1098, align 2, !tbaa !80
  %1100 = insertelement <64 x i16> %1096, i16 %1099, i32 49
  %1101 = extractelement <32 x i32> %900, i32 18
  %1102 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1101
  %1103 = load i16, i16* %1102, align 2, !tbaa !80
  %1104 = insertelement <64 x i16> %1100, i16 %1103, i32 50
  %1105 = extractelement <32 x i32> %900, i32 19
  %1106 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1105
  %1107 = load i16, i16* %1106, align 2, !tbaa !80
  %1108 = insertelement <64 x i16> %1104, i16 %1107, i32 51
  %1109 = extractelement <32 x i32> %900, i32 20
  %1110 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1109
  %1111 = load i16, i16* %1110, align 2, !tbaa !80
  %1112 = insertelement <64 x i16> %1108, i16 %1111, i32 52
  %1113 = extractelement <32 x i32> %900, i32 21
  %1114 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1113
  %1115 = load i16, i16* %1114, align 2, !tbaa !80
  %1116 = insertelement <64 x i16> %1112, i16 %1115, i32 53
  %1117 = extractelement <32 x i32> %900, i32 22
  %1118 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1117
  %1119 = load i16, i16* %1118, align 2, !tbaa !80
  %1120 = insertelement <64 x i16> %1116, i16 %1119, i32 54
  %1121 = extractelement <32 x i32> %900, i32 23
  %1122 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1121
  %1123 = load i16, i16* %1122, align 2, !tbaa !80
  %1124 = insertelement <64 x i16> %1120, i16 %1123, i32 55
  %1125 = extractelement <32 x i32> %900, i32 24
  %1126 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1125
  %1127 = load i16, i16* %1126, align 2, !tbaa !80
  %1128 = insertelement <64 x i16> %1124, i16 %1127, i32 56
  %1129 = extractelement <32 x i32> %900, i32 25
  %1130 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1129
  %1131 = load i16, i16* %1130, align 2, !tbaa !80
  %1132 = insertelement <64 x i16> %1128, i16 %1131, i32 57
  %1133 = extractelement <32 x i32> %900, i32 26
  %1134 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1133
  %1135 = load i16, i16* %1134, align 2, !tbaa !80
  %1136 = insertelement <64 x i16> %1132, i16 %1135, i32 58
  %1137 = extractelement <32 x i32> %900, i32 27
  %1138 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1137
  %1139 = load i16, i16* %1138, align 2, !tbaa !80
  %1140 = insertelement <64 x i16> %1136, i16 %1139, i32 59
  %1141 = extractelement <32 x i32> %900, i32 28
  %1142 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1141
  %1143 = load i16, i16* %1142, align 2, !tbaa !80
  %1144 = insertelement <64 x i16> %1140, i16 %1143, i32 60
  %1145 = extractelement <32 x i32> %900, i32 29
  %1146 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1145
  %1147 = load i16, i16* %1146, align 2, !tbaa !80
  %1148 = insertelement <64 x i16> %1144, i16 %1147, i32 61
  %1149 = extractelement <32 x i32> %900, i32 30
  %1150 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1149
  %1151 = load i16, i16* %1150, align 2, !tbaa !80
  %1152 = insertelement <64 x i16> %1148, i16 %1151, i32 62
  %1153 = extractelement <32 x i32> %900, i32 31
  %1154 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1153
  %1155 = load i16, i16* %1154, align 2, !tbaa !80
  %1156 = insertelement <64 x i16> %1152, i16 %1155, i32 63
  %1157 = bitcast <64 x i16> %1156 to <32 x i32>
  %1158 = tail call <16 x i32> @llvm.hexagon.V6.hi(<32 x i32> %1157)
  %1159 = tail call <16 x i32> @llvm.hexagon.V6.lo(<32 x i32> %1157)
  %1160 = tail call <16 x i32> @llvm.hexagon.V6.vmpyihb.acc(<16 x i32> %875, <16 x i32> %1159, i32 %dup4.i.i6) #9
  %1161 = tail call <16 x i32> @llvm.hexagon.V6.vmpyihb.acc(<16 x i32> %876, <16 x i32> %1158, i32 %dup4.i.i6) #9
  %1162 = tail call <32 x i32> @llvm.hexagon.V6.vcombine(<16 x i32> %1161, <16 x i32> %1160)
  %1163 = or i32 %46, 2
  %1164 = tail call <16 x i32> @llvm.hexagon.V6.lvsplatw(i32 %1163) #9
  %1165 = tail call <32 x i32> @llvm.hexagon.V6.vcombine(<16 x i32> %1164, <16 x i32> %1164)
  %1166 = tail call <32 x i32> @llvm.hexagon.V6.vaddw.dv(<32 x i32> %1165, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>) #9
  %1167 = tail call <32 x i32> @llvm.hexagon.V6.vaddw.dv(<32 x i32> %1165, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>) #9
  %1168 = shufflevector <32 x i32> %1166, <32 x i32> %1167, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %t114 = srem <64 x i32> %1168, %35
  %1169 = shufflevector <64 x i32> %t114, <64 x i32> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1170 = tail call <16 x i32> @llvm.hexagon.V6.vasrw(<16 x i32> %1169, i32 31) #9
  %1171 = shufflevector <64 x i32> %t114, <64 x i32> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1172 = tail call <16 x i32> @llvm.hexagon.V6.vasrw(<16 x i32> %1171, i32 31) #9
  %1173 = shufflevector <64 x i32> %t114, <64 x i32> undef, <16 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47>
  %1174 = tail call <16 x i32> @llvm.hexagon.V6.vasrw(<16 x i32> %1173, i32 31) #9
  %1175 = shufflevector <64 x i32> %t114, <64 x i32> undef, <16 x i32> <i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1176 = tail call <16 x i32> @llvm.hexagon.V6.vasrw(<16 x i32> %1175, i32 31) #9
  %1177 = tail call <16 x i32> @llvm.hexagon.V6.vand(<16 x i32> %1170, <16 x i32> %36) #9
  %1178 = tail call <16 x i32> @llvm.hexagon.V6.vand(<16 x i32> %1172, <16 x i32> %36) #9
  %1179 = tail call <16 x i32> @llvm.hexagon.V6.vand(<16 x i32> %1174, <16 x i32> %36) #9
  %1180 = tail call <16 x i32> @llvm.hexagon.V6.vand(<16 x i32> %1176, <16 x i32> %36) #9
  %1181 = tail call <32 x i32> @llvm.hexagon.V6.vcombine(<16 x i32> %1178, <16 x i32> %1177)
  %1182 = tail call <32 x i32> @llvm.hexagon.V6.vcombine(<16 x i32> %1180, <16 x i32> %1179)
  %1183 = shufflevector <64 x i32> %t114, <64 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1184 = tail call <32 x i32> @llvm.hexagon.V6.vaddw.dv(<32 x i32> %1183, <32 x i32> %1181) #9
  %1185 = shufflevector <64 x i32> %t114, <64 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1186 = tail call <32 x i32> @llvm.hexagon.V6.vaddw.dv(<32 x i32> %1185, <32 x i32> %1182) #9
  %1187 = extractelement <32 x i32> %1184, i32 0
  %1188 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1187
  %1189 = load i16, i16* %1188, align 2, !tbaa !80
  %1190 = insertelement <64 x i16> undef, i16 %1189, i32 0
  %1191 = extractelement <32 x i32> %1184, i32 1
  %1192 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1191
  %1193 = load i16, i16* %1192, align 2, !tbaa !80
  %1194 = insertelement <64 x i16> %1190, i16 %1193, i32 1
  %1195 = extractelement <32 x i32> %1184, i32 2
  %1196 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1195
  %1197 = load i16, i16* %1196, align 2, !tbaa !80
  %1198 = insertelement <64 x i16> %1194, i16 %1197, i32 2
  %1199 = extractelement <32 x i32> %1184, i32 3
  %1200 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1199
  %1201 = load i16, i16* %1200, align 2, !tbaa !80
  %1202 = insertelement <64 x i16> %1198, i16 %1201, i32 3
  %1203 = extractelement <32 x i32> %1184, i32 4
  %1204 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1203
  %1205 = load i16, i16* %1204, align 2, !tbaa !80
  %1206 = insertelement <64 x i16> %1202, i16 %1205, i32 4
  %1207 = extractelement <32 x i32> %1184, i32 5
  %1208 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1207
  %1209 = load i16, i16* %1208, align 2, !tbaa !80
  %1210 = insertelement <64 x i16> %1206, i16 %1209, i32 5
  %1211 = extractelement <32 x i32> %1184, i32 6
  %1212 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1211
  %1213 = load i16, i16* %1212, align 2, !tbaa !80
  %1214 = insertelement <64 x i16> %1210, i16 %1213, i32 6
  %1215 = extractelement <32 x i32> %1184, i32 7
  %1216 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1215
  %1217 = load i16, i16* %1216, align 2, !tbaa !80
  %1218 = insertelement <64 x i16> %1214, i16 %1217, i32 7
  %1219 = extractelement <32 x i32> %1184, i32 8
  %1220 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1219
  %1221 = load i16, i16* %1220, align 2, !tbaa !80
  %1222 = insertelement <64 x i16> %1218, i16 %1221, i32 8
  %1223 = extractelement <32 x i32> %1184, i32 9
  %1224 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1223
  %1225 = load i16, i16* %1224, align 2, !tbaa !80
  %1226 = insertelement <64 x i16> %1222, i16 %1225, i32 9
  %1227 = extractelement <32 x i32> %1184, i32 10
  %1228 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1227
  %1229 = load i16, i16* %1228, align 2, !tbaa !80
  %1230 = insertelement <64 x i16> %1226, i16 %1229, i32 10
  %1231 = extractelement <32 x i32> %1184, i32 11
  %1232 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1231
  %1233 = load i16, i16* %1232, align 2, !tbaa !80
  %1234 = insertelement <64 x i16> %1230, i16 %1233, i32 11
  %1235 = extractelement <32 x i32> %1184, i32 12
  %1236 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1235
  %1237 = load i16, i16* %1236, align 2, !tbaa !80
  %1238 = insertelement <64 x i16> %1234, i16 %1237, i32 12
  %1239 = extractelement <32 x i32> %1184, i32 13
  %1240 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1239
  %1241 = load i16, i16* %1240, align 2, !tbaa !80
  %1242 = insertelement <64 x i16> %1238, i16 %1241, i32 13
  %1243 = extractelement <32 x i32> %1184, i32 14
  %1244 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1243
  %1245 = load i16, i16* %1244, align 2, !tbaa !80
  %1246 = insertelement <64 x i16> %1242, i16 %1245, i32 14
  %1247 = extractelement <32 x i32> %1184, i32 15
  %1248 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1247
  %1249 = load i16, i16* %1248, align 2, !tbaa !80
  %1250 = insertelement <64 x i16> %1246, i16 %1249, i32 15
  %1251 = extractelement <32 x i32> %1184, i32 16
  %1252 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1251
  %1253 = load i16, i16* %1252, align 2, !tbaa !80
  %1254 = insertelement <64 x i16> %1250, i16 %1253, i32 16
  %1255 = extractelement <32 x i32> %1184, i32 17
  %1256 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1255
  %1257 = load i16, i16* %1256, align 2, !tbaa !80
  %1258 = insertelement <64 x i16> %1254, i16 %1257, i32 17
  %1259 = extractelement <32 x i32> %1184, i32 18
  %1260 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1259
  %1261 = load i16, i16* %1260, align 2, !tbaa !80
  %1262 = insertelement <64 x i16> %1258, i16 %1261, i32 18
  %1263 = extractelement <32 x i32> %1184, i32 19
  %1264 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1263
  %1265 = load i16, i16* %1264, align 2, !tbaa !80
  %1266 = insertelement <64 x i16> %1262, i16 %1265, i32 19
  %1267 = extractelement <32 x i32> %1184, i32 20
  %1268 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1267
  %1269 = load i16, i16* %1268, align 2, !tbaa !80
  %1270 = insertelement <64 x i16> %1266, i16 %1269, i32 20
  %1271 = extractelement <32 x i32> %1184, i32 21
  %1272 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1271
  %1273 = load i16, i16* %1272, align 2, !tbaa !80
  %1274 = insertelement <64 x i16> %1270, i16 %1273, i32 21
  %1275 = extractelement <32 x i32> %1184, i32 22
  %1276 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1275
  %1277 = load i16, i16* %1276, align 2, !tbaa !80
  %1278 = insertelement <64 x i16> %1274, i16 %1277, i32 22
  %1279 = extractelement <32 x i32> %1184, i32 23
  %1280 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1279
  %1281 = load i16, i16* %1280, align 2, !tbaa !80
  %1282 = insertelement <64 x i16> %1278, i16 %1281, i32 23
  %1283 = extractelement <32 x i32> %1184, i32 24
  %1284 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1283
  %1285 = load i16, i16* %1284, align 2, !tbaa !80
  %1286 = insertelement <64 x i16> %1282, i16 %1285, i32 24
  %1287 = extractelement <32 x i32> %1184, i32 25
  %1288 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1287
  %1289 = load i16, i16* %1288, align 2, !tbaa !80
  %1290 = insertelement <64 x i16> %1286, i16 %1289, i32 25
  %1291 = extractelement <32 x i32> %1184, i32 26
  %1292 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1291
  %1293 = load i16, i16* %1292, align 2, !tbaa !80
  %1294 = insertelement <64 x i16> %1290, i16 %1293, i32 26
  %1295 = extractelement <32 x i32> %1184, i32 27
  %1296 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1295
  %1297 = load i16, i16* %1296, align 2, !tbaa !80
  %1298 = insertelement <64 x i16> %1294, i16 %1297, i32 27
  %1299 = extractelement <32 x i32> %1184, i32 28
  %1300 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1299
  %1301 = load i16, i16* %1300, align 2, !tbaa !80
  %1302 = insertelement <64 x i16> %1298, i16 %1301, i32 28
  %1303 = extractelement <32 x i32> %1184, i32 29
  %1304 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1303
  %1305 = load i16, i16* %1304, align 2, !tbaa !80
  %1306 = insertelement <64 x i16> %1302, i16 %1305, i32 29
  %1307 = extractelement <32 x i32> %1184, i32 30
  %1308 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1307
  %1309 = load i16, i16* %1308, align 2, !tbaa !80
  %1310 = insertelement <64 x i16> %1306, i16 %1309, i32 30
  %1311 = extractelement <32 x i32> %1184, i32 31
  %1312 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1311
  %1313 = load i16, i16* %1312, align 2, !tbaa !80
  %1314 = insertelement <64 x i16> %1310, i16 %1313, i32 31
  %1315 = extractelement <32 x i32> %1186, i32 0
  %1316 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1315
  %1317 = load i16, i16* %1316, align 2, !tbaa !80
  %1318 = insertelement <64 x i16> %1314, i16 %1317, i32 32
  %1319 = extractelement <32 x i32> %1186, i32 1
  %1320 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1319
  %1321 = load i16, i16* %1320, align 2, !tbaa !80
  %1322 = insertelement <64 x i16> %1318, i16 %1321, i32 33
  %1323 = extractelement <32 x i32> %1186, i32 2
  %1324 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1323
  %1325 = load i16, i16* %1324, align 2, !tbaa !80
  %1326 = insertelement <64 x i16> %1322, i16 %1325, i32 34
  %1327 = extractelement <32 x i32> %1186, i32 3
  %1328 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1327
  %1329 = load i16, i16* %1328, align 2, !tbaa !80
  %1330 = insertelement <64 x i16> %1326, i16 %1329, i32 35
  %1331 = extractelement <32 x i32> %1186, i32 4
  %1332 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1331
  %1333 = load i16, i16* %1332, align 2, !tbaa !80
  %1334 = insertelement <64 x i16> %1330, i16 %1333, i32 36
  %1335 = extractelement <32 x i32> %1186, i32 5
  %1336 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1335
  %1337 = load i16, i16* %1336, align 2, !tbaa !80
  %1338 = insertelement <64 x i16> %1334, i16 %1337, i32 37
  %1339 = extractelement <32 x i32> %1186, i32 6
  %1340 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1339
  %1341 = load i16, i16* %1340, align 2, !tbaa !80
  %1342 = insertelement <64 x i16> %1338, i16 %1341, i32 38
  %1343 = extractelement <32 x i32> %1186, i32 7
  %1344 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1343
  %1345 = load i16, i16* %1344, align 2, !tbaa !80
  %1346 = insertelement <64 x i16> %1342, i16 %1345, i32 39
  %1347 = extractelement <32 x i32> %1186, i32 8
  %1348 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1347
  %1349 = load i16, i16* %1348, align 2, !tbaa !80
  %1350 = insertelement <64 x i16> %1346, i16 %1349, i32 40
  %1351 = extractelement <32 x i32> %1186, i32 9
  %1352 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1351
  %1353 = load i16, i16* %1352, align 2, !tbaa !80
  %1354 = insertelement <64 x i16> %1350, i16 %1353, i32 41
  %1355 = extractelement <32 x i32> %1186, i32 10
  %1356 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1355
  %1357 = load i16, i16* %1356, align 2, !tbaa !80
  %1358 = insertelement <64 x i16> %1354, i16 %1357, i32 42
  %1359 = extractelement <32 x i32> %1186, i32 11
  %1360 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1359
  %1361 = load i16, i16* %1360, align 2, !tbaa !80
  %1362 = insertelement <64 x i16> %1358, i16 %1361, i32 43
  %1363 = extractelement <32 x i32> %1186, i32 12
  %1364 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1363
  %1365 = load i16, i16* %1364, align 2, !tbaa !80
  %1366 = insertelement <64 x i16> %1362, i16 %1365, i32 44
  %1367 = extractelement <32 x i32> %1186, i32 13
  %1368 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1367
  %1369 = load i16, i16* %1368, align 2, !tbaa !80
  %1370 = insertelement <64 x i16> %1366, i16 %1369, i32 45
  %1371 = extractelement <32 x i32> %1186, i32 14
  %1372 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1371
  %1373 = load i16, i16* %1372, align 2, !tbaa !80
  %1374 = insertelement <64 x i16> %1370, i16 %1373, i32 46
  %1375 = extractelement <32 x i32> %1186, i32 15
  %1376 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1375
  %1377 = load i16, i16* %1376, align 2, !tbaa !80
  %1378 = insertelement <64 x i16> %1374, i16 %1377, i32 47
  %1379 = extractelement <32 x i32> %1186, i32 16
  %1380 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1379
  %1381 = load i16, i16* %1380, align 2, !tbaa !80
  %1382 = insertelement <64 x i16> %1378, i16 %1381, i32 48
  %1383 = extractelement <32 x i32> %1186, i32 17
  %1384 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1383
  %1385 = load i16, i16* %1384, align 2, !tbaa !80
  %1386 = insertelement <64 x i16> %1382, i16 %1385, i32 49
  %1387 = extractelement <32 x i32> %1186, i32 18
  %1388 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1387
  %1389 = load i16, i16* %1388, align 2, !tbaa !80
  %1390 = insertelement <64 x i16> %1386, i16 %1389, i32 50
  %1391 = extractelement <32 x i32> %1186, i32 19
  %1392 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1391
  %1393 = load i16, i16* %1392, align 2, !tbaa !80
  %1394 = insertelement <64 x i16> %1390, i16 %1393, i32 51
  %1395 = extractelement <32 x i32> %1186, i32 20
  %1396 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1395
  %1397 = load i16, i16* %1396, align 2, !tbaa !80
  %1398 = insertelement <64 x i16> %1394, i16 %1397, i32 52
  %1399 = extractelement <32 x i32> %1186, i32 21
  %1400 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1399
  %1401 = load i16, i16* %1400, align 2, !tbaa !80
  %1402 = insertelement <64 x i16> %1398, i16 %1401, i32 53
  %1403 = extractelement <32 x i32> %1186, i32 22
  %1404 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1403
  %1405 = load i16, i16* %1404, align 2, !tbaa !80
  %1406 = insertelement <64 x i16> %1402, i16 %1405, i32 54
  %1407 = extractelement <32 x i32> %1186, i32 23
  %1408 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1407
  %1409 = load i16, i16* %1408, align 2, !tbaa !80
  %1410 = insertelement <64 x i16> %1406, i16 %1409, i32 55
  %1411 = extractelement <32 x i32> %1186, i32 24
  %1412 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1411
  %1413 = load i16, i16* %1412, align 2, !tbaa !80
  %1414 = insertelement <64 x i16> %1410, i16 %1413, i32 56
  %1415 = extractelement <32 x i32> %1186, i32 25
  %1416 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1415
  %1417 = load i16, i16* %1416, align 2, !tbaa !80
  %1418 = insertelement <64 x i16> %1414, i16 %1417, i32 57
  %1419 = extractelement <32 x i32> %1186, i32 26
  %1420 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1419
  %1421 = load i16, i16* %1420, align 2, !tbaa !80
  %1422 = insertelement <64 x i16> %1418, i16 %1421, i32 58
  %1423 = extractelement <32 x i32> %1186, i32 27
  %1424 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1423
  %1425 = load i16, i16* %1424, align 2, !tbaa !80
  %1426 = insertelement <64 x i16> %1422, i16 %1425, i32 59
  %1427 = extractelement <32 x i32> %1186, i32 28
  %1428 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1427
  %1429 = load i16, i16* %1428, align 2, !tbaa !80
  %1430 = insertelement <64 x i16> %1426, i16 %1429, i32 60
  %1431 = extractelement <32 x i32> %1186, i32 29
  %1432 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1431
  %1433 = load i16, i16* %1432, align 2, !tbaa !80
  %1434 = insertelement <64 x i16> %1430, i16 %1433, i32 61
  %1435 = extractelement <32 x i32> %1186, i32 30
  %1436 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1435
  %1437 = load i16, i16* %1436, align 2, !tbaa !80
  %1438 = insertelement <64 x i16> %1434, i16 %1437, i32 62
  %1439 = extractelement <32 x i32> %1186, i32 31
  %1440 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1439
  %1441 = load i16, i16* %1440, align 2, !tbaa !80
  %1442 = insertelement <64 x i16> %1438, i16 %1441, i32 63
  %1443 = bitcast <64 x i16> %1442 to <32 x i32>
  %1444 = tail call <32 x i32> @llvm.hexagon.V6.vaddh.dv(<32 x i32> %1162, <32 x i32> %1443) #9
  %1445 = tail call <16 x i32> @llvm.hexagon.V6.hi(<32 x i32> %1444) #9
  %1446 = tail call <16 x i32> @llvm.hexagon.V6.lo(<32 x i32> %1444) #9
  %1447 = tail call <16 x i32> @llvm.hexagon.V6.vpackob(<16 x i32> %1445, <16 x i32> %1446) #9
  %1448 = add nsw i32 %output.s0.x.x, %t95
  %1449 = shl nsw i32 %1448, 6
  %1450 = getelementptr inbounds i8, i8* %3, i32 %1449
  %1451 = bitcast i8* %1450 to <16 x i32>*
  store <16 x i32> %1447, <16 x i32>* %1451, align 1, !tbaa !82
  %1452 = add nuw nsw i32 %output.s0.x.x, 1
  %1453 = icmp eq i32 %1452, %8
  br i1 %1453, label %"end for output.s0.x.x", label %"for output.s0.x.x"
}

; Function Attrs: nounwind
define i32 @gaussian5x5_hvx64_argv(i8** nocapture readonly) local_unnamed_addr #9 {
entry:
  %1 = bitcast i8** %0 to %struct.halide_buffer_t**
  %2 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %1, align 4
  %3 = getelementptr i8*, i8** %0, i32 1
  %4 = bitcast i8** %3 to %struct.halide_buffer_t**
  %5 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %4, align 4
  %6 = tail call i32 @gaussian5x5_hvx64(%struct.halide_buffer_t* %2, %struct.halide_buffer_t* %5) #13
  ret i32 0
}

; Function Attrs: norecurse nounwind readnone
define nonnull %struct.halide_filter_metadata_t* @gaussian5x5_hvx64_metadata() local_unnamed_addr #10 {
entry:
  ret %struct.halide_filter_metadata_t* @gaussian5x5_hvx64_metadata_storage
}

attributes #0 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { norecurse nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind }
attributes #5 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readnone speculatable }
attributes #7 = { nounwind readnone }
attributes #8 = { nounwind "reciprocal-estimates"="none" }
attributes #9 = { nounwind }
attributes #10 = { norecurse nounwind readnone }
attributes #11 = { nobuiltin nounwind }
attributes #12 = { nobuiltin }
attributes #13 = { noinline }

!llvm.module.flags = !{!0, !1, !2, !3, !4, !5}
!llvm.ident = !{!6, !6, !6, !6, !6, !6, !6, !6, !6, !6, !6, !6, !6, !6, !6, !6, !6, !6}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 1}
!2 = !{i32 2, !"halide_use_soft_float_abi", i32 0}
!3 = !{i32 2, !"halide_mcpu", !"hexagonv60"}
!4 = !{i32 2, !"halide_mattrs", !"+hvx-length64b,+long-calls"}
!5 = !{i32 2, !"halide_per_instruction_fast_math_flags", i32 0}
!6 = !{!"Clang $LLVM_VERSION_MAJOR.$LLVM_VERSION_MINOR (based on LLVM 7.0.0)"}
!7 = !{!8, !8, i64 0}
!8 = !{!"omnipotent char", !9, i64 0}
!9 = !{!"Simple C++ TBAA"}
!10 = !{!11, !11, i64 0}
!11 = !{!"int", !8, i64 0}
!12 = !{!13, !13, i64 0}
!13 = !{!"any pointer", !8, i64 0}
!14 = distinct !{!14, !15}
!15 = !{!"llvm.loop.unroll.disable"}
!16 = distinct !{!16, !15}
!17 = !{!18, !18, i64 0}
!18 = !{!"bool", !8, i64 0}
!19 = !{i8 0, i8 2}
!20 = !{!21, !21, i64 0}
!21 = !{!"double", !8, i64 0}
!22 = !{!23, !23, i64 0}
!23 = !{!"long long", !8, i64 0}
!24 = !{!25, !8, i64 0}
!25 = !{!"_ZTS13halide_type_t", !8, i64 0, !8, i64 1, !26, i64 2}
!26 = !{!"short", !8, i64 0}
!27 = !{!25, !8, i64 1}
!28 = !{!25, !26, i64 2}
!29 = !{!30, !23, i64 0}
!30 = !{!"_ZTS15halide_buffer_t", !23, i64 0, !13, i64 8, !13, i64 12, !23, i64 16, !23, i64 24, !23, i64 32, !23, i64 40, !25, i64 48, !11, i64 52, !13, i64 56, !13, i64 60}
!31 = !{!30, !13, i64 8}
!32 = !{!30, !13, i64 12}
!33 = !{!30, !23, i64 16}
!34 = !{!30, !11, i64 52}
!35 = !{!30, !13, i64 56}
!36 = !{!37, !11, i64 0}
!37 = !{!"_ZTS18halide_dimension_t", !11, i64 0, !11, i64 4, !11, i64 8, !11, i64 12}
!38 = !{!37, !11, i64 4}
!39 = !{!37, !11, i64 8}
!40 = !{!41, !23, i64 0}
!41 = !{!"_ZTSN6Halide7Runtime8Internal11device_copyE", !23, i64 0, !23, i64 8, !23, i64 16, !8, i64 24, !8, i64 152, !8, i64 280, !23, i64 408}
!42 = !{!41, !23, i64 8}
!43 = !{!41, !23, i64 408}
!44 = !{!41, !23, i64 16}
!45 = !{i64 0, i64 8, !22, i64 8, i64 8, !22, i64 16, i64 8, !22, i64 24, i64 128, !7, i64 152, i64 128, !7, i64 280, i64 128, !7, i64 408, i64 8, !22}
!46 = !{!47, !13, i64 60}
!47 = !{!"_ZTS25halide_device_interface_t", !13, i64 0, !13, i64 4, !13, i64 8, !13, i64 12, !13, i64 16, !13, i64 20, !13, i64 24, !13, i64 28, !13, i64 32, !13, i64 36, !13, i64 40, !13, i64 44, !13, i64 48, !13, i64 52, !13, i64 56, !13, i64 60}
!48 = !{!49, !13, i64 24}
!49 = !{!"_ZTS30halide_device_interface_impl_t", !13, i64 0, !13, i64 4, !13, i64 8, !13, i64 12, !13, i64 16, !13, i64 20, !13, i64 24, !13, i64 28, !13, i64 32, !13, i64 36, !13, i64 40, !13, i64 44, !13, i64 48, !13, i64 52, !13, i64 56, !13, i64 60}
!50 = !{!49, !13, i64 20}
!51 = !{!49, !13, i64 28}
!52 = !{!49, !13, i64 0}
!53 = !{!49, !13, i64 8}
!54 = !{!49, !13, i64 4}
!55 = !{!49, !13, i64 16}
!56 = !{!49, !13, i64 12}
!57 = !{!49, !13, i64 32}
!58 = !{!49, !13, i64 36}
!59 = !{!49, !13, i64 56}
!60 = !{!49, !13, i64 60}
!61 = !{!49, !13, i64 40}
!62 = !{!49, !13, i64 44}
!63 = !{!49, !13, i64 48}
!64 = !{!49, !13, i64 52}
!65 = !{i32 22, i32 33}
!66 = !{!67, !11, i64 60}
!67 = !{!"_ZTS8buffer_t", !23, i64 0, !13, i64 8, !8, i64 12, !8, i64 28, !8, i64 44, !11, i64 60, !18, i64 64, !18, i64 65, !8, i64 66}
!68 = !{!67, !13, i64 8}
!69 = !{!67, !23, i64 0}
!70 = !{!71, !23, i64 0}
!71 = !{!"_ZTSN6Halide7Runtime8Internal15old_dev_wrapperE", !23, i64 0, !13, i64 8}
!72 = !{!71, !13, i64 8}
!73 = !{!67, !18, i64 64}
!74 = !{!67, !18, i64 65}
!75 = !{!"branch_weights", i32 1073741824, i32 0}
!76 = !{i32 2204}
!77 = !{!78, !78, i64 0}
!78 = !{!"input", !79, i64 0}
!79 = !{!"Halide buffer"}
!80 = !{!81, !81, i64 0}
!81 = !{!"rows", !79, i64 0}
!82 = !{!83, !83, i64 0}
!83 = !{!"output", !79, i64 0}
Module.compile(): object_name bin/gaussian5x5_hvx64.o
emit_file.Compiling to native code...
Target triple: hexagon-unknown--elf
Cloning module gaussian5x5_hvx64
Module.compile(): assembly_name bin/gaussian5x5_hvx64.s
emit_file.Compiling to native code...
Target triple: hexagon-unknown--elf
Cloning module gaussian5x5_hvx64
Module.compile(): bitcode_name bin/gaussian5x5_hvx64.bc
Module.compile(): c_header_name bin/gaussian5x5_hvx64.h
Section: 
Section: .interp
Section: .note.ABI-tag
Section: .note.gnu.build-id
Section: .gnu.hash
Section: .dynsym
Section: .dynstr
Section: .gnu.version
Section: .gnu.version_r
Section: .rela.dyn
Section: .rela.plt
Section: .init
Section: .plt
Section: .text
Section: .fini
Section: .rodata
Section: .eh_frame_hdr
Section: .eh_frame
Section: .gcc_except_table
Section: .init_array
Section: .fini_array
Section: .jcr
Section: .data.rel.ro
Section: .dynamic
Section: .got
Section: .got.plt
Section: .data
Section: .bss
Section: .comment
Section: .debug_aranges
Section: .debug_info
Section: .debug_abbrev
Section: .debug_line
Section: .debug_str
Section: .debug_loc
Section: .debug_ranges
Section: .symtab
Section: .strtab
Section: .shstrtab
Generator gaussian5x5 has base_path bin/gaussian5x5_hvx128
Creating initial loop nests...
Injecting realization of output
for (.__root, 0, 1) {
  produce output {
    let output.s0.y.loop_max = output.s0.y.max
    let output.s0.y.loop_min = output.s0.y.min
    let output.s0.y.loop_extent = ((output.s0.y.max + 1) - output.s0.y.min)
    let output.s0.x.loop_max = output.s0.x.max
    let output.s0.x.loop_min = output.s0.x.min
    let output.s0.x.loop_extent = ((output.s0.x.max + 1) - output.s0.x.min)
    let output.s0.__outermost.loop_extent = 1
    let output.s0.__outermost.loop_max = 0
    let output.s0.__outermost.loop_min = 0
    let output.s0.y.y.loop_extent = (((output.s0.y.loop_max - output.s0.y.loop_min) + 4)/4)
    let output.s0.y.y.loop_max = ((((output.s0.y.loop_max - output.s0.y.loop_min) + 4)/4) - 1)
    let output.s0.y.y.loop_min = 0
    let output.s0.y.yi.loop_extent = 4
    let output.s0.y.yi.loop_max = (4 - 1)
    let output.s0.y.yi.loop_min = 0
    let output.s0.x.x.loop_extent = (((output.s0.x.loop_max - output.s0.x.loop_min) + 128)/128)
    let output.s0.x.x.loop_max = ((((output.s0.x.loop_max - output.s0.x.loop_min) + 128)/128) - 1)
    let output.s0.x.x.loop_min = 0
    let output.s0.x.v16.loop_extent = 128
    let output.s0.x.v16.loop_max = (128 - 1)
    let output.s0.x.v16.loop_min = 0
    for<Hexagon> (output.s0.__outermost, output.s0.__outermost.loop_min, output.s0.__outermost.loop_extent) {
      for (output.s0.y.y, output.s0.y.y.loop_min, output.s0.y.y.loop_extent) {
        prefetch input()
        let output.s0.y.yi.base = ((output.s0.y.y*4) + output.s0.y.loop_min)
        for (output.s0.y.yi, output.s0.y.yi.loop_min, output.s0.y.yi.loop_extent) {
          let output.s0.y = (output.s0.y.yi.base + output.s0.y.yi)
          for (output.s0.x.x, output.s0.x.x.loop_min, output.s0.x.x.loop_extent) {
            let output.s0.x.v16.base = ((output.s0.x.x*128) + output.s0.x.loop_min)
            vectorized (output.s0.x.v16, output.s0.x.v16.loop_min, output.s0.x.v16.loop_extent) {
              let output.s0.x = (output.s0.x.v16.base + output.s0.x.v16)
              output((output.s0.x.v16.base + output.s0.x.v16), (output.s0.y.yi.base + output.s0.y.yi)) = uint8(shift_right(cols((output.s0.x.v16.base + output.s0.x.v16), (output.s0.y.yi.base + output.s0.y.yi)), (int16)8))
            }
          }
        }
      }
    }
  }
}

Inlining cols
for (.__root, 0, 1) {
  produce output {
    let output.s0.y.loop_max = output.s0.y.max
    let output.s0.y.loop_min = output.s0.y.min
    let output.s0.y.loop_extent = ((output.s0.y.max + 1) - output.s0.y.min)
    let output.s0.x.loop_max = output.s0.x.max
    let output.s0.x.loop_min = output.s0.x.min
    let output.s0.x.loop_extent = ((output.s0.x.max + 1) - output.s0.x.min)
    let output.s0.__outermost.loop_extent = 1
    let output.s0.__outermost.loop_max = 0
    let output.s0.__outermost.loop_min = 0
    let output.s0.y.y.loop_extent = (((output.s0.y.loop_max - output.s0.y.loop_min) + 4)/4)
    let output.s0.y.y.loop_max = ((((output.s0.y.loop_max - output.s0.y.loop_min) + 4)/4) - 1)
    let output.s0.y.y.loop_min = 0
    let output.s0.y.yi.loop_extent = 4
    let output.s0.y.yi.loop_max = (4 - 1)
    let output.s0.y.yi.loop_min = 0
    let output.s0.x.x.loop_extent = (((output.s0.x.loop_max - output.s0.x.loop_min) + 128)/128)
    let output.s0.x.x.loop_max = ((((output.s0.x.loop_max - output.s0.x.loop_min) + 128)/128) - 1)
    let output.s0.x.x.loop_min = 0
    let output.s0.x.v16.loop_extent = 128
    let output.s0.x.v16.loop_max = (128 - 1)
    let output.s0.x.v16.loop_min = 0
    for<Hexagon> (output.s0.__outermost, output.s0.__outermost.loop_min, output.s0.__outermost.loop_extent) {
      for (output.s0.y.y, output.s0.y.y.loop_min, output.s0.y.y.loop_extent) {
        prefetch input()
        let output.s0.y.yi.base = ((output.s0.y.y*4) + output.s0.y.loop_min)
        for (output.s0.y.yi, output.s0.y.yi.loop_min, output.s0.y.yi.loop_extent) {
          let output.s0.y = (output.s0.y.yi.base + output.s0.y.yi)
          for (output.s0.x.x, output.s0.x.x.loop_min, output.s0.x.x.loop_extent) {
            let output.s0.x.v16.base = ((output.s0.x.x*128) + output.s0.x.loop_min)
            vectorized (output.s0.x.v16, output.s0.x.v16.loop_min, output.s0.x.v16.loop_extent) {
              let output.s0.x = (output.s0.x.v16.base + output.s0.x.v16)
              output((output.s0.x.v16.base + output.s0.x.v16), (output.s0.y.yi.base + output.s0.y.yi)) = (let t0 = (output.s0.y.yi.base + output.s0.y.yi) in (let t1 = (output.s0.x.v16.base + output.s0.x.v16) in uint8(shift_right(((((rows((t1 - 2), t0) + ((int16)4*rows((t1 - 1), t0))) + ((int16)6*rows(t1, t0))) + ((int16)4*rows((t1 + 1), t0))) + rows((t1 + 2), t0)), (int16)8))))
            }
          }
        }
      }
    }
  }
}

Injecting realization of rows
for (.__root, 0, 1) {
  produce output {
    let output.s0.y.loop_max = output.s0.y.max
    let output.s0.y.loop_min = output.s0.y.min
    let output.s0.y.loop_extent = ((output.s0.y.max + 1) - output.s0.y.min)
    let output.s0.x.loop_max = output.s0.x.max
    let output.s0.x.loop_min = output.s0.x.min
    let output.s0.x.loop_extent = ((output.s0.x.max + 1) - output.s0.x.min)
    let output.s0.__outermost.loop_extent = 1
    let output.s0.__outermost.loop_max = 0
    let output.s0.__outermost.loop_min = 0
    let output.s0.y.y.loop_extent = (((output.s0.y.loop_max - output.s0.y.loop_min) + 4)/4)
    let output.s0.y.y.loop_max = ((((output.s0.y.loop_max - output.s0.y.loop_min) + 4)/4) - 1)
    let output.s0.y.y.loop_min = 0
    let output.s0.y.yi.loop_extent = 4
    let output.s0.y.yi.loop_max = (4 - 1)
    let output.s0.y.yi.loop_min = 0
    let output.s0.x.x.loop_extent = (((output.s0.x.loop_max - output.s0.x.loop_min) + 128)/128)
    let output.s0.x.x.loop_max = ((((output.s0.x.loop_max - output.s0.x.loop_min) + 128)/128) - 1)
    let output.s0.x.x.loop_min = 0
    let output.s0.x.v16.loop_extent = 128
    let output.s0.x.v16.loop_max = (128 - 1)
    let output.s0.x.v16.loop_min = 0
    for<Hexagon> (output.s0.__outermost, output.s0.__outermost.loop_min, output.s0.__outermost.loop_extent) {
      for (output.s0.y.y, output.s0.y.y.loop_min, output.s0.y.y.loop_extent) {
        prefetch input()
        let output.s0.y.yi.base = ((output.s0.y.y*4) + output.s0.y.loop_min)
        for (output.s0.y.yi, output.s0.y.yi.loop_min, output.s0.y.yi.loop_extent) {
          let output.s0.y = (output.s0.y.yi.base + output.s0.y.yi)
          realize rows([rows.x.min_realized, rows.x.extent_realized], [rows.y.min_realized, rows.y.extent_realized]) {
            for (output.s0.x.x, output.s0.x.x.loop_min, output.s0.x.x.loop_extent) {
              let output.s0.x.v16.base = ((output.s0.x.x*128) + output.s0.x.loop_min)
              produce rows {
                let rows.s0.y.loop_max = rows.s0.y.max
                let rows.s0.y.loop_min = rows.s0.y.min
                let rows.s0.y.loop_extent = ((rows.s0.y.max + 1) - rows.s0.y.min)
                let rows.s0.x.loop_max = rows.s0.x.max
                let rows.s0.x.loop_min = rows.s0.x.min
                let rows.s0.x.loop_extent = ((rows.s0.x.max + 1) - rows.s0.x.min)
                let rows.s0.__outermost.loop_extent = 1
                let rows.s0.__outermost.loop_max = 0
                let rows.s0.__outermost.loop_min = 0
                let rows.s0.x.x.loop_extent = (((rows.s0.x.loop_max - rows.s0.x.loop_min) + 128)/128)
                let rows.s0.x.x.loop_max = ((((rows.s0.x.loop_max - rows.s0.x.loop_min) + 128)/128) - 1)
                let rows.s0.x.x.loop_min = 0
                let rows.s0.x.v19.loop_extent = 128
                let rows.s0.x.v19.loop_max = (128 - 1)
                let rows.s0.x.v19.loop_min = 0
                for (rows.s0.__outermost, rows.s0.__outermost.loop_min, rows.s0.__outermost.loop_extent) {
                  for (rows.s0.y, rows.s0.y.loop_min, rows.s0.y.loop_extent) {
                    for (rows.s0.x.x, rows.s0.x.x.loop_min, rows.s0.x.x.loop_extent) {
                      let rows.s0.x.v19.base = ((rows.s0.x.x*128) + rows.s0.x.loop_min)
                      vectorized (rows.s0.x.v19, rows.s0.x.v19.loop_min, rows.s0.x.v19.loop_extent) {
                        let rows.s0.x = (rows.s0.x.v19.base + rows.s0.x.v19)
                        rows((rows.s0.x.v19.base + rows.s0.x.v19), rows.s0.y) = ((((input_16((rows.s0.x.v19.base + rows.s0.x.v19), (rows.s0.y - 2)) + ((int16)4*input_16((rows.s0.x.v19.base + rows.s0.x.v19), (rows.s0.y - 1)))) + ((int16)6*input_16((rows.s0.x.v19.base + rows.s0.x.v19), rows.s0.y))) + ((int16)4*input_16((rows.s0.x.v19.base + rows.s0.x.v19), (rows.s0.y + 1)))) + input_16((rows.s0.x.v19.base + rows.s0.x.v19), (rows.s0.y + 2)))
                      }
                    }
                  }
                }
              }
              consume rows {
                vectorized (output.s0.x.v16, output.s0.x.v16.loop_min, output.s0.x.v16.loop_extent) {
                  let output.s0.x = (output.s0.x.v16.base + output.s0.x.v16)
                  output((output.s0.x.v16.base + output.s0.x.v16), (output.s0.y.yi.base + output.s0.y.yi)) = (let t0 = (output.s0.y.yi.base + output.s0.y.yi) in (let t1 = (output.s0.x.v16.base + output.s0.x.v16) in uint8(shift_right(((((rows((t1 - 2), t0) + ((int16)4*rows((t1 - 1), t0))) + ((int16)6*rows(t1, t0))) + ((int16)4*rows((t1 + 1), t0))) + rows((t1 + 2), t0)), (int16)8))))
                }
              }
            }
          }
        }
      }
    }
  }
}

Inlining input_16
for (.__root, 0, 1) {
  produce output {
    let output.s0.y.loop_max = output.s0.y.max
    let output.s0.y.loop_min = output.s0.y.min
    let output.s0.y.loop_extent = ((output.s0.y.max + 1) - output.s0.y.min)
    let output.s0.x.loop_max = output.s0.x.max
    let output.s0.x.loop_min = output.s0.x.min
    let output.s0.x.loop_extent = ((output.s0.x.max + 1) - output.s0.x.min)
    let output.s0.__outermost.loop_extent = 1
    let output.s0.__outermost.loop_max = 0
    let output.s0.__outermost.loop_min = 0
    let output.s0.y.y.loop_extent = (((output.s0.y.loop_max - output.s0.y.loop_min) + 4)/4)
    let output.s0.y.y.loop_max = ((((output.s0.y.loop_max - output.s0.y.loop_min) + 4)/4) - 1)
    let output.s0.y.y.loop_min = 0
    let output.s0.y.yi.loop_extent = 4
    let output.s0.y.yi.loop_max = (4 - 1)
    let output.s0.y.yi.loop_min = 0
    let output.s0.x.x.loop_extent = (((output.s0.x.loop_max - output.s0.x.loop_min) + 128)/128)
    let output.s0.x.x.loop_max = ((((output.s0.x.loop_max - output.s0.x.loop_min) + 128)/128) - 1)
    let output.s0.x.x.loop_min = 0
    let output.s0.x.v16.loop_extent = 128
    let output.s0.x.v16.loop_max = (128 - 1)
    let output.s0.x.v16.loop_min = 0
    for<Hexagon> (output.s0.__outermost, output.s0.__outermost.loop_min, output.s0.__outermost.loop_extent) {
      for (output.s0.y.y, output.s0.y.y.loop_min, output.s0.y.y.loop_extent) {
        prefetch input()
        let output.s0.y.yi.base = ((output.s0.y.y*4) + output.s0.y.loop_min)
        for (output.s0.y.yi, output.s0.y.yi.loop_min, output.s0.y.yi.loop_extent) {
          let output.s0.y = (output.s0.y.yi.base + output.s0.y.yi)
          realize rows([rows.x.min_realized, rows.x.extent_realized], [rows.y.min_realized, rows.y.extent_realized]) {
            for (output.s0.x.x, output.s0.x.x.loop_min, output.s0.x.x.loop_extent) {
              let output.s0.x.v16.base = ((output.s0.x.x*128) + output.s0.x.loop_min)
              produce rows {
                let rows.s0.y.loop_max = rows.s0.y.max
                let rows.s0.y.loop_min = rows.s0.y.min
                let rows.s0.y.loop_extent = ((rows.s0.y.max + 1) - rows.s0.y.min)
                let rows.s0.x.loop_max = rows.s0.x.max
                let rows.s0.x.loop_min = rows.s0.x.min
                let rows.s0.x.loop_extent = ((rows.s0.x.max + 1) - rows.s0.x.min)
                let rows.s0.__outermost.loop_extent = 1
                let rows.s0.__outermost.loop_max = 0
                let rows.s0.__outermost.loop_min = 0
                let rows.s0.x.x.loop_extent = (((rows.s0.x.loop_max - rows.s0.x.loop_min) + 128)/128)
                let rows.s0.x.x.loop_max = ((((rows.s0.x.loop_max - rows.s0.x.loop_min) + 128)/128) - 1)
                let rows.s0.x.x.loop_min = 0
                let rows.s0.x.v19.loop_extent = 128
                let rows.s0.x.v19.loop_max = (128 - 1)
                let rows.s0.x.v19.loop_min = 0
                for (rows.s0.__outermost, rows.s0.__outermost.loop_min, rows.s0.__outermost.loop_extent) {
                  for (rows.s0.y, rows.s0.y.loop_min, rows.s0.y.loop_extent) {
                    for (rows.s0.x.x, rows.s0.x.x.loop_min, rows.s0.x.x.loop_extent) {
                      let rows.s0.x.v19.base = ((rows.s0.x.x*128) + rows.s0.x.loop_min)
                      vectorized (rows.s0.x.v19, rows.s0.x.v19.loop_min, rows.s0.x.v19.loop_extent) {
                        let rows.s0.x = (rows.s0.x.v19.base + rows.s0.x.v19)
                        rows((rows.s0.x.v19.base + rows.s0.x.v19), rows.s0.y) = (let t2 = (rows.s0.x.v19.base + rows.s0.x.v19) in ((((int16(input_im(t2, (rows.s0.y - 2))) + ((int16)4*int16(input_im(t2, (rows.s0.y - 1))))) + ((int16)6*int16(input_im(t2, rows.s0.y)))) + ((int16)4*int16(input_im(t2, (rows.s0.y + 1))))) + int16(input_im(t2, (rows.s0.y + 2)))))
                      }
                    }
                  }
                }
              }
              consume rows {
                vectorized (output.s0.x.v16, output.s0.x.v16.loop_min, output.s0.x.v16.loop_extent) {
                  let output.s0.x = (output.s0.x.v16.base + output.s0.x.v16)
                  output((output.s0.x.v16.base + output.s0.x.v16), (output.s0.y.yi.base + output.s0.y.yi)) = (let t0 = (output.s0.y.yi.base + output.s0.y.yi) in (let t1 = (output.s0.x.v16.base + output.s0.x.v16) in uint8(shift_right(((((rows((t1 - 2), t0) + ((int16)4*rows((t1 - 1), t0))) + ((int16)6*rows(t1, t0))) + ((int16)4*rows((t1 + 1), t0))) + rows((t1 + 2), t0)), (int16)8))))
                }
              }
            }
          }
        }
      }
    }
  }
}

Inlining input_im
for (.__root, 0, 1) {
  produce output {
    let output.s0.y.loop_max = output.s0.y.max
    let output.s0.y.loop_min = output.s0.y.min
    let output.s0.y.loop_extent = ((output.s0.y.max + 1) - output.s0.y.min)
    let output.s0.x.loop_max = output.s0.x.max
    let output.s0.x.loop_min = output.s0.x.min
    let output.s0.x.loop_extent = ((output.s0.x.max + 1) - output.s0.x.min)
    let output.s0.__outermost.loop_extent = 1
    let output.s0.__outermost.loop_max = 0
    let output.s0.__outermost.loop_min = 0
    let output.s0.y.y.loop_extent = (((output.s0.y.loop_max - output.s0.y.loop_min) + 4)/4)
    let output.s0.y.y.loop_max = ((((output.s0.y.loop_max - output.s0.y.loop_min) + 4)/4) - 1)
    let output.s0.y.y.loop_min = 0
    let output.s0.y.yi.loop_extent = 4
    let output.s0.y.yi.loop_max = (4 - 1)
    let output.s0.y.yi.loop_min = 0
    let output.s0.x.x.loop_extent = (((output.s0.x.loop_max - output.s0.x.loop_min) + 128)/128)
    let output.s0.x.x.loop_max = ((((output.s0.x.loop_max - output.s0.x.loop_min) + 128)/128) - 1)
    let output.s0.x.x.loop_min = 0
    let output.s0.x.v16.loop_extent = 128
    let output.s0.x.v16.loop_max = (128 - 1)
    let output.s0.x.v16.loop_min = 0
    for<Hexagon> (output.s0.__outermost, output.s0.__outermost.loop_min, output.s0.__outermost.loop_extent) {
      for (output.s0.y.y, output.s0.y.y.loop_min, output.s0.y.y.loop_extent) {
        prefetch input()
        let output.s0.y.yi.base = ((output.s0.y.y*4) + output.s0.y.loop_min)
        for (output.s0.y.yi, output.s0.y.yi.loop_min, output.s0.y.yi.loop_extent) {
          let output.s0.y = (output.s0.y.yi.base + output.s0.y.yi)
          realize rows([rows.x.min_realized, rows.x.extent_realized], [rows.y.min_realized, rows.y.extent_realized]) {
            for (output.s0.x.x, output.s0.x.x.loop_min, output.s0.x.x.loop_extent) {
              let output.s0.x.v16.base = ((output.s0.x.x*128) + output.s0.x.loop_min)
              produce rows {
                let rows.s0.y.loop_max = rows.s0.y.max
                let rows.s0.y.loop_min = rows.s0.y.min
                let rows.s0.y.loop_extent = ((rows.s0.y.max + 1) - rows.s0.y.min)
                let rows.s0.x.loop_max = rows.s0.x.max
                let rows.s0.x.loop_min = rows.s0.x.min
                let rows.s0.x.loop_extent = ((rows.s0.x.max + 1) - rows.s0.x.min)
                let rows.s0.__outermost.loop_extent = 1
                let rows.s0.__outermost.loop_max = 0
                let rows.s0.__outermost.loop_min = 0
                let rows.s0.x.x.loop_extent = (((rows.s0.x.loop_max - rows.s0.x.loop_min) + 128)/128)
                let rows.s0.x.x.loop_max = ((((rows.s0.x.loop_max - rows.s0.x.loop_min) + 128)/128) - 1)
                let rows.s0.x.x.loop_min = 0
                let rows.s0.x.v19.loop_extent = 128
                let rows.s0.x.v19.loop_max = (128 - 1)
                let rows.s0.x.v19.loop_min = 0
                for (rows.s0.__outermost, rows.s0.__outermost.loop_min, rows.s0.__outermost.loop_extent) {
                  for (rows.s0.y, rows.s0.y.loop_min, rows.s0.y.loop_extent) {
                    for (rows.s0.x.x, rows.s0.x.x.loop_min, rows.s0.x.x.loop_extent) {
                      let rows.s0.x.v19.base = ((rows.s0.x.x*128) + rows.s0.x.loop_min)
                      vectorized (rows.s0.x.v19, rows.s0.x.v19.loop_min, rows.s0.x.v19.loop_extent) {
                        let rows.s0.x = (rows.s0.x.v19.base + rows.s0.x.v19)
                        rows((rows.s0.x.v19.base + rows.s0.x.v19), rows.s0.y) = (let t3 = (rows.s0.x.v19.base + rows.s0.x.v19) in ((((int16(input(t3, (rows.s0.y - 2))) + ((int16)4*int16(input(t3, (rows.s0.y - 1))))) + ((int16)6*int16(input(t3, rows.s0.y)))) + ((int16)4*int16(input(t3, (rows.s0.y + 1))))) + int16(input(t3, (rows.s0.y + 2)))))
                      }
                    }
                  }
                }
              }
              consume rows {
                vectorized (output.s0.x.v16, output.s0.x.v16.loop_min, output.s0.x.v16.loop_extent) {
                  let output.s0.x = (output.s0.x.v16.base + output.s0.x.v16)
                  output((output.s0.x.v16.base + output.s0.x.v16), (output.s0.y.yi.base + output.s0.y.yi)) = (let t0 = (output.s0.y.yi.base + output.s0.y.yi) in (let t1 = (output.s0.x.v16.base + output.s0.x.v16) in uint8(shift_right(((((rows((t1 - 2), t0) + ((int16)4*rows((t1 - 1), t0))) + ((int16)6*rows(t1, t0))) + ((int16)4*rows((t1 + 1), t0))) + rows((t1 + 2), t0)), (int16)8))))
                }
              }
            }
          }
        }
      }
    }
  }
}

Lowering after creating initial loop nests:
produce output {
  let output.s0.y.loop_max = output.s0.y.max
  let output.s0.y.loop_min = output.s0.y.min
  let output.s0.y.loop_extent = ((output.s0.y.max + 1) - output.s0.y.min)
  let output.s0.x.loop_max = output.s0.x.max
  let output.s0.x.loop_min = output.s0.x.min
  let output.s0.x.loop_extent = ((output.s0.x.max + 1) - output.s0.x.min)
  let output.s0.y.y.loop_extent = (((output.s0.y.loop_max - output.s0.y.loop_min) + 4)/4)
  let output.s0.y.y.loop_max = ((((output.s0.y.loop_max - output.s0.y.loop_min) + 4)/4) - 1)
  let output.s0.y.y.loop_min = 0
  let output.s0.y.yi.loop_extent = 4
  let output.s0.y.yi.loop_max = (4 - 1)
  let output.s0.y.yi.loop_min = 0
  let output.s0.x.x.loop_extent = (((output.s0.x.loop_max - output.s0.x.loop_min) + 128)/128)
  let output.s0.x.x.loop_max = ((((output.s0.x.loop_max - output.s0.x.loop_min) + 128)/128) - 1)
  let output.s0.x.x.loop_min = 0
  let output.s0.x.v16.loop_extent = 128
  let output.s0.x.v16.loop_max = (128 - 1)
  let output.s0.x.v16.loop_min = 0
  for<Hexagon> (output.s0.__outermost, 0, 1) {
    for (output.s0.y.y, output.s0.y.y.loop_min, output.s0.y.y.loop_extent) {
      prefetch input()
      let output.s0.y.yi.base = ((output.s0.y.y*4) + output.s0.y.loop_min)
      for (output.s0.y.yi, output.s0.y.yi.loop_min, output.s0.y.yi.loop_extent) {
        let output.s0.y = (output.s0.y.yi.base + output.s0.y.yi)
        realize rows([rows.x.min_realized, rows.x.extent_realized], [rows.y.min_realized, rows.y.extent_realized]) {
          for (output.s0.x.x, output.s0.x.x.loop_min, output.s0.x.x.loop_extent) {
            let output.s0.x.v16.base = ((output.s0.x.x*128) + output.s0.x.loop_min)
            produce rows {
              let rows.s0.y.loop_max = rows.s0.y.max
              let rows.s0.y.loop_min = rows.s0.y.min
              let rows.s0.y.loop_extent = ((rows.s0.y.max + 1) - rows.s0.y.min)
              let rows.s0.x.loop_max = rows.s0.x.max
              let rows.s0.x.loop_min = rows.s0.x.min
              let rows.s0.x.loop_extent = ((rows.s0.x.max + 1) - rows.s0.x.min)
              let rows.s0.x.x.loop_extent = (((rows.s0.x.loop_max - rows.s0.x.loop_min) + 128)/128)
              let rows.s0.x.x.loop_max = ((((rows.s0.x.loop_max - rows.s0.x.loop_min) + 128)/128) - 1)
              let rows.s0.x.x.loop_min = 0
              let rows.s0.x.v19.loop_extent = 128
              let rows.s0.x.v19.loop_max = (128 - 1)
              let rows.s0.x.v19.loop_min = 0
              for (rows.s0.y, rows.s0.y.loop_min, rows.s0.y.loop_extent) {
                for (rows.s0.x.x, rows.s0.x.x.loop_min, rows.s0.x.x.loop_extent) {
                  let rows.s0.x.v19.base = ((rows.s0.x.x*128) + rows.s0.x.loop_min)
                  vectorized (rows.s0.x.v19, rows.s0.x.v19.loop_min, rows.s0.x.v19.loop_extent) {
                    let rows.s0.x = (rows.s0.x.v19.base + rows.s0.x.v19)
                    rows((rows.s0.x.v19.base + rows.s0.x.v19), rows.s0.y) = (let t3 = (rows.s0.x.v19.base + rows.s0.x.v19) in ((((int16(input(t3, (rows.s0.y - 2))) + ((int16)4*int16(input(t3, (rows.s0.y - 1))))) + ((int16)6*int16(input(t3, rows.s0.y)))) + ((int16)4*int16(input(t3, (rows.s0.y + 1))))) + int16(input(t3, (rows.s0.y + 2)))))
                  }
                }
              }
            }
            consume rows {
              vectorized (output.s0.x.v16, output.s0.x.v16.loop_min, output.s0.x.v16.loop_extent) {
                let output.s0.x = (output.s0.x.v16.base + output.s0.x.v16)
                output((output.s0.x.v16.base + output.s0.x.v16), (output.s0.y.yi.base + output.s0.y.yi)) = (let t0 = (output.s0.y.yi.base + output.s0.y.yi) in (let t1 = (output.s0.x.v16.base + output.s0.x.v16) in uint8(shift_right(((((rows((t1 - 2), t0) + ((int16)4*rows((t1 - 1), t0))) + ((int16)6*rows(t1, t0))) + ((int16)4*rows((t1 + 1), t0))) + rows((t1 + 2), t0)), (int16)8))))
              }
            }
          }
        }
      }
    }
  }
}

Canonicalizing GPU var names...
Lowering after canonicalizing GPU var names:
produce output {
  let output.s0.y.loop_max = output.s0.y.max
  let output.s0.y.loop_min = output.s0.y.min
  let output.s0.y.loop_extent = ((output.s0.y.max + 1) - output.s0.y.min)
  let output.s0.x.loop_max = output.s0.x.max
  let output.s0.x.loop_min = output.s0.x.min
  let output.s0.x.loop_extent = ((output.s0.x.max + 1) - output.s0.x.min)
  let output.s0.y.y.loop_extent = (((output.s0.y.loop_max - output.s0.y.loop_min) + 4)/4)
  let output.s0.y.y.loop_max = ((((output.s0.y.loop_max - output.s0.y.loop_min) + 4)/4) - 1)
  let output.s0.y.y.loop_min = 0
  let output.s0.y.yi.loop_extent = 4
  let output.s0.y.yi.loop_max = (4 - 1)
  let output.s0.y.yi.loop_min = 0
  let output.s0.x.x.loop_extent = (((output.s0.x.loop_max - output.s0.x.loop_min) + 128)/128)
  let output.s0.x.x.loop_max = ((((output.s0.x.loop_max - output.s0.x.loop_min) + 128)/128) - 1)
  let output.s0.x.x.loop_min = 0
  let output.s0.x.v16.loop_extent = 128
  let output.s0.x.v16.loop_max = (128 - 1)
  let output.s0.x.v16.loop_min = 0
  for<Hexagon> (output.s0.__outermost, 0, 1) {
    for (output.s0.y.y, output.s0.y.y.loop_min, output.s0.y.y.loop_extent) {
      prefetch input()
      let output.s0.y.yi.base = ((output.s0.y.y*4) + output.s0.y.loop_min)
      for (output.s0.y.yi, output.s0.y.yi.loop_min, output.s0.y.yi.loop_extent) {
        let output.s0.y = (output.s0.y.yi.base + output.s0.y.yi)
        realize rows([rows.x.min_realized, rows.x.extent_realized], [rows.y.min_realized, rows.y.extent_realized]) {
          for (output.s0.x.x, output.s0.x.x.loop_min, output.s0.x.x.loop_extent) {
            let output.s0.x.v16.base = ((output.s0.x.x*128) + output.s0.x.loop_min)
            produce rows {
              let rows.s0.y.loop_max = rows.s0.y.max
              let rows.s0.y.loop_min = rows.s0.y.min
              let rows.s0.y.loop_extent = ((rows.s0.y.max + 1) - rows.s0.y.min)
              let rows.s0.x.loop_max = rows.s0.x.max
              let rows.s0.x.loop_min = rows.s0.x.min
              let rows.s0.x.loop_extent = ((rows.s0.x.max + 1) - rows.s0.x.min)
              let rows.s0.x.x.loop_extent = (((rows.s0.x.loop_max - rows.s0.x.loop_min) + 128)/128)
              let rows.s0.x.x.loop_max = ((((rows.s0.x.loop_max - rows.s0.x.loop_min) + 128)/128) - 1)
              let rows.s0.x.x.loop_min = 0
              let rows.s0.x.v19.loop_extent = 128
              let rows.s0.x.v19.loop_max = (128 - 1)
              let rows.s0.x.v19.loop_min = 0
              for (rows.s0.y, rows.s0.y.loop_min, rows.s0.y.loop_extent) {
                for (rows.s0.x.x, rows.s0.x.x.loop_min, rows.s0.x.x.loop_extent) {
                  let rows.s0.x.v19.base = ((rows.s0.x.x*128) + rows.s0.x.loop_min)
                  vectorized (rows.s0.x.v19, rows.s0.x.v19.loop_min, rows.s0.x.v19.loop_extent) {
                    let rows.s0.x = (rows.s0.x.v19.base + rows.s0.x.v19)
                    rows((rows.s0.x.v19.base + rows.s0.x.v19), rows.s0.y) = (let t3 = (rows.s0.x.v19.base + rows.s0.x.v19) in ((((int16(input(t3, (rows.s0.y - 2))) + ((int16)4*int16(input(t3, (rows.s0.y - 1))))) + ((int16)6*int16(input(t3, rows.s0.y)))) + ((int16)4*int16(input(t3, (rows.s0.y + 1))))) + int16(input(t3, (rows.s0.y + 2)))))
                  }
                }
              }
            }
            consume rows {
              vectorized (output.s0.x.v16, output.s0.x.v16.loop_min, output.s0.x.v16.loop_extent) {
                let output.s0.x = (output.s0.x.v16.base + output.s0.x.v16)
                output((output.s0.x.v16.base + output.s0.x.v16), (output.s0.y.yi.base + output.s0.y.yi)) = (let t0 = (output.s0.y.yi.base + output.s0.y.yi) in (let t1 = (output.s0.x.v16.base + output.s0.x.v16) in uint8(shift_right(((((rows((t1 - 2), t0) + ((int16)4*rows((t1 - 1), t0))) + ((int16)6*rows(t1, t0))) + ((int16)4*rows((t1 + 1), t0))) + rows((t1 + 2), t0)), (int16)8))))
              }
            }
          }
        }
      }
    }
  }
}

Skipping injecting memoization...
Injecting tracing...
Lowering after injecting tracing:
produce output {
  let output.s0.y.loop_max = output.s0.y.max
  let output.s0.y.loop_min = output.s0.y.min
  let output.s0.y.loop_extent = ((output.s0.y.max + 1) - output.s0.y.min)
  let output.s0.x.loop_max = output.s0.x.max
  let output.s0.x.loop_min = output.s0.x.min
  let output.s0.x.loop_extent = ((output.s0.x.max + 1) - output.s0.x.min)
  let output.s0.y.y.loop_extent = (((output.s0.y.loop_max - output.s0.y.loop_min) + 4)/4)
  let output.s0.y.y.loop_max = ((((output.s0.y.loop_max - output.s0.y.loop_min) + 4)/4) - 1)
  let output.s0.y.y.loop_min = 0
  let output.s0.y.yi.loop_extent = 4
  let output.s0.y.yi.loop_max = (4 - 1)
  let output.s0.y.yi.loop_min = 0
  let output.s0.x.x.loop_extent = (((output.s0.x.loop_max - output.s0.x.loop_min) + 128)/128)
  let output.s0.x.x.loop_max = ((((output.s0.x.loop_max - output.s0.x.loop_min) + 128)/128) - 1)
  let output.s0.x.x.loop_min = 0
  let output.s0.x.v16.loop_extent = 128
  let output.s0.x.v16.loop_max = (128 - 1)
  let output.s0.x.v16.loop_min = 0
  for<Hexagon> (output.s0.__outermost, 0, 1) {
    for (output.s0.y.y, output.s0.y.y.loop_min, output.s0.y.y.loop_extent) {
      prefetch input()
      let output.s0.y.yi.base = ((output.s0.y.y*4) + output.s0.y.loop_min)
      for (output.s0.y.yi, output.s0.y.yi.loop_min, output.s0.y.yi.loop_extent) {
        let output.s0.y = (output.s0.y.yi.base + output.s0.y.yi)
        realize rows([rows.x.min_realized, rows.x.extent_realized], [rows.y.min_realized, rows.y.extent_realized]) {
          for (output.s0.x.x, output.s0.x.x.loop_min, output.s0.x.x.loop_extent) {
            let output.s0.x.v16.base = ((output.s0.x.x*128) + output.s0.x.loop_min)
            produce rows {
              let rows.s0.y.loop_max = rows.s0.y.max
              let rows.s0.y.loop_min = rows.s0.y.min
              let rows.s0.y.loop_extent = ((rows.s0.y.max + 1) - rows.s0.y.min)
              let rows.s0.x.loop_max = rows.s0.x.max
              let rows.s0.x.loop_min = rows.s0.x.min
              let rows.s0.x.loop_extent = ((rows.s0.x.max + 1) - rows.s0.x.min)
              let rows.s0.x.x.loop_extent = (((rows.s0.x.loop_max - rows.s0.x.loop_min) + 128)/128)
              let rows.s0.x.x.loop_max = ((((rows.s0.x.loop_max - rows.s0.x.loop_min) + 128)/128) - 1)
              let rows.s0.x.x.loop_min = 0
              let rows.s0.x.v19.loop_extent = 128
              let rows.s0.x.v19.loop_max = (128 - 1)
              let rows.s0.x.v19.loop_min = 0
              for (rows.s0.y, rows.s0.y.loop_min, rows.s0.y.loop_extent) {
                for (rows.s0.x.x, rows.s0.x.x.loop_min, rows.s0.x.x.loop_extent) {
                  let rows.s0.x.v19.base = ((rows.s0.x.x*128) + rows.s0.x.loop_min)
                  vectorized (rows.s0.x.v19, rows.s0.x.v19.loop_min, rows.s0.x.v19.loop_extent) {
                    let rows.s0.x = (rows.s0.x.v19.base + rows.s0.x.v19)
                    rows((rows.s0.x.v19.base + rows.s0.x.v19), rows.s0.y) = (let t3 = (rows.s0.x.v19.base + rows.s0.x.v19) in ((((int16(input(t3, (rows.s0.y - 2))) + ((int16)4*int16(input(t3, (rows.s0.y - 1))))) + ((int16)6*int16(input(t3, rows.s0.y)))) + ((int16)4*int16(input(t3, (rows.s0.y + 1))))) + int16(input(t3, (rows.s0.y + 2)))))
                  }
                }
              }
            }
            consume rows {
              vectorized (output.s0.x.v16, output.s0.x.v16.loop_min, output.s0.x.v16.loop_extent) {
                let output.s0.x = (output.s0.x.v16.base + output.s0.x.v16)
                output((output.s0.x.v16.base + output.s0.x.v16), (output.s0.y.yi.base + output.s0.y.yi)) = (let t0 = (output.s0.y.yi.base + output.s0.y.yi) in (let t1 = (output.s0.x.v16.base + output.s0.x.v16) in uint8(shift_right(((((rows((t1 - 2), t0) + ((int16)4*rows((t1 - 1), t0))) + ((int16)6*rows(t1, t0))) + ((int16)4*rows((t1 + 1), t0))) + rows((t1 + 2), t0)), (int16)8))))
              }
            }
          }
        }
      }
    }
  }
}

Adding checks for parameters
Lowering after injecting parameter checks:
produce output {
  let output.s0.y.loop_max = output.s0.y.max
  let output.s0.y.loop_min = output.s0.y.min
  let output.s0.y.loop_extent = ((output.s0.y.max + 1) - output.s0.y.min)
  let output.s0.x.loop_max = output.s0.x.max
  let output.s0.x.loop_min = output.s0.x.min
  let output.s0.x.loop_extent = ((output.s0.x.max + 1) - output.s0.x.min)
  let output.s0.y.y.loop_extent = (((output.s0.y.loop_max - output.s0.y.loop_min) + 4)/4)
  let output.s0.y.y.loop_max = ((((output.s0.y.loop_max - output.s0.y.loop_min) + 4)/4) - 1)
  let output.s0.y.y.loop_min = 0
  let output.s0.y.yi.loop_extent = 4
  let output.s0.y.yi.loop_max = (4 - 1)
  let output.s0.y.yi.loop_min = 0
  let output.s0.x.x.loop_extent = (((output.s0.x.loop_max - output.s0.x.loop_min) + 128)/128)
  let output.s0.x.x.loop_max = ((((output.s0.x.loop_max - output.s0.x.loop_min) + 128)/128) - 1)
  let output.s0.x.x.loop_min = 0
  let output.s0.x.v16.loop_extent = 128
  let output.s0.x.v16.loop_max = (128 - 1)
  let output.s0.x.v16.loop_min = 0
  for<Hexagon> (output.s0.__outermost, 0, 1) {
    for (output.s0.y.y, output.s0.y.y.loop_min, output.s0.y.y.loop_extent) {
      prefetch input()
      let output.s0.y.yi.base = ((output.s0.y.y*4) + output.s0.y.loop_min)
      for (output.s0.y.yi, output.s0.y.yi.loop_min, output.s0.y.yi.loop_extent) {
        let output.s0.y = (output.s0.y.yi.base + output.s0.y.yi)
        realize rows([rows.x.min_realized, rows.x.extent_realized], [rows.y.min_realized, rows.y.extent_realized]) {
          for (output.s0.x.x, output.s0.x.x.loop_min, output.s0.x.x.loop_extent) {
            let output.s0.x.v16.base = ((output.s0.x.x*128) + output.s0.x.loop_min)
            produce rows {
              let rows.s0.y.loop_max = rows.s0.y.max
              let rows.s0.y.loop_min = rows.s0.y.min
              let rows.s0.y.loop_extent = ((rows.s0.y.max + 1) - rows.s0.y.min)
              let rows.s0.x.loop_max = rows.s0.x.max
              let rows.s0.x.loop_min = rows.s0.x.min
              let rows.s0.x.loop_extent = ((rows.s0.x.max + 1) - rows.s0.x.min)
              let rows.s0.x.x.loop_extent = (((rows.s0.x.loop_max - rows.s0.x.loop_min) + 128)/128)
              let rows.s0.x.x.loop_max = ((((rows.s0.x.loop_max - rows.s0.x.loop_min) + 128)/128) - 1)
              let rows.s0.x.x.loop_min = 0
              let rows.s0.x.v19.loop_extent = 128
              let rows.s0.x.v19.loop_max = (128 - 1)
              let rows.s0.x.v19.loop_min = 0
              for (rows.s0.y, rows.s0.y.loop_min, rows.s0.y.loop_extent) {
                for (rows.s0.x.x, rows.s0.x.x.loop_min, rows.s0.x.x.loop_extent) {
                  let rows.s0.x.v19.base = ((rows.s0.x.x*128) + rows.s0.x.loop_min)
                  vectorized (rows.s0.x.v19, rows.s0.x.v19.loop_min, rows.s0.x.v19.loop_extent) {
                    let rows.s0.x = (rows.s0.x.v19.base + rows.s0.x.v19)
                    rows((rows.s0.x.v19.base + rows.s0.x.v19), rows.s0.y) = (let t3 = (rows.s0.x.v19.base + rows.s0.x.v19) in ((((int16(input(t3, (rows.s0.y - 2))) + ((int16)4*int16(input(t3, (rows.s0.y - 1))))) + ((int16)6*int16(input(t3, rows.s0.y)))) + ((int16)4*int16(input(t3, (rows.s0.y + 1))))) + int16(input(t3, (rows.s0.y + 2)))))
                  }
                }
              }
            }
            consume rows {
              vectorized (output.s0.x.v16, output.s0.x.v16.loop_min, output.s0.x.v16.loop_extent) {
                let output.s0.x = (output.s0.x.v16.base + output.s0.x.v16)
                output((output.s0.x.v16.base + output.s0.x.v16), (output.s0.y.yi.base + output.s0.y.yi)) = (let t0 = (output.s0.y.yi.base + output.s0.y.yi) in (let t1 = (output.s0.x.v16.base + output.s0.x.v16) in uint8(shift_right(((((rows((t1 - 2), t0) + ((int16)4*rows((t1 - 1), t0))) + ((int16)6*rows(t1, t0))) + ((int16)4*rows((t1 + 1), t0))) + rows((t1 + 2), t0)), (int16)8))))
              }
            }
          }
        }
      }
    }
  }
}

Computing bounds of each function's value
Bounds on value 0 for func input_im are: (uint8)0, (uint8)255
Bounds on value 0 for func input_16 are: (int16)0, (int16)255
Bounds on value 0 for func rows are: (int16)0, (int16)4080
Bounds on value 0 for func cols are: (int16)-32768, (int16)32767
Bounds on value 0 for func output are: (uint8)0, (uint8)255
Adding checks for images
Injecting constraints for input.0
Injecting constraints for input.1
Injecting constraints for output.0
Injecting constraints for output.1
Lowering after injecting image checks:
let input.extent.0.required = (((((((rows.s0.x.max - rows.s0.x.min)/128)*128) + rows.s0.x.min) + 127) + 1) - rows.s0.x.min)
let input.min.0.required = rows.s0.x.min
let input.stride.0.required = 1
let input.extent.1.required = (((rows.s0.y.max + 2) + 1) - (rows.s0.y.min + -2))
let input.min.1.required = (rows.s0.y.min + -2)
let input.stride.1.required = (input.stride.0.required*input.extent.0.required)
let output.extent.0.required = (((((((output.s0.x.max - output.s0.x.min)/128)*128) + output.s0.x.min) + 127) + 1) - (output.s0.x.min + 0))
let output.min.0.required = (output.s0.x.min + 0)
let output.stride.0.required = 1
let output.extent.1.required = (((((((output.s0.y.max - output.s0.y.min)/4)*4) + output.s0.y.min) + 3) + 1) - (output.s0.y.min + 0))
let output.min.1.required = (output.s0.y.min + 0)
let output.stride.1.required = (output.stride.0.required*output.extent.0.required)
let input.stride.0.constrained = 1
let input.min.0.constrained = 0
let input.stride.1.constrained = ((input.stride.1/128)*128)
let input.min.1.constrained = 0
let output.stride.0.constrained = 1
let output.min.0.constrained = 0
let output.stride.1.constrained = ((output.stride.1/128)*128)
let output.min.1.constrained = 0
let input.stride.0.proposed = 1
let input.min.0.proposed = 0
let input.extent.0.proposed = input.extent.0.required
let input.stride.1.proposed = ((input.stride.1.required/128)*128)
let input.min.1.proposed = 0
let input.extent.1.proposed = input.extent.1.required
let output.stride.0.proposed = 1
let output.min.0.proposed = 0
let output.extent.0.proposed = output.extent.0.required
let output.stride.1.proposed = ((output.stride.1.required/128)*128)
let output.min.1.proposed = 0
let output.extent.1.proposed = output.extent.1.required
assert((input.stride.0 == input.stride.0.constrained), 0)
assert((input.min.0 == input.min.0.constrained), 0)
assert((input.stride.1 == input.stride.1.constrained), 0)
assert((input.min.1 == input.min.1.constrained), 0)
assert((output.stride.0 == output.stride.0.constrained), 0)
assert((output.min.0 == output.min.0.constrained), 0)
assert((output.stride.1 == output.stride.1.constrained), 0)
assert((output.min.1 == output.min.1.constrained), 0)
produce output {
  let output.s0.y.loop_max = output.s0.y.max
  let output.s0.y.loop_min = output.s0.y.min
  let output.s0.y.loop_extent = ((output.s0.y.max + 1) - output.s0.y.min)
  let output.s0.x.loop_max = output.s0.x.max
  let output.s0.x.loop_min = output.s0.x.min
  let output.s0.x.loop_extent = ((output.s0.x.max + 1) - output.s0.x.min)
  let output.s0.y.y.loop_extent = (((output.s0.y.loop_max - output.s0.y.loop_min) + 4)/4)
  let output.s0.y.y.loop_max = ((((output.s0.y.loop_max - output.s0.y.loop_min) + 4)/4) - 1)
  let output.s0.y.y.loop_min = 0
  let output.s0.y.yi.loop_extent = 4
  let output.s0.y.yi.loop_max = (4 - 1)
  let output.s0.y.yi.loop_min = 0
  let output.s0.x.x.loop_extent = (((output.s0.x.loop_max - output.s0.x.loop_min) + 128)/128)
  let output.s0.x.x.loop_max = ((((output.s0.x.loop_max - output.s0.x.loop_min) + 128)/128) - 1)
  let output.s0.x.x.loop_min = 0
  let output.s0.x.v16.loop_extent = 128
  let output.s0.x.v16.loop_max = (128 - 1)
  let output.s0.x.v16.loop_min = 0
  for<Hexagon> (output.s0.__outermost, 0, 1) {
    for (output.s0.y.y, output.s0.y.y.loop_min, output.s0.y.y.loop_extent) {
      prefetch input()
      let output.s0.y.yi.base = ((output.s0.y.y*4) + output.s0.y.loop_min)
      for (output.s0.y.yi, output.s0.y.yi.loop_min, output.s0.y.yi.loop_extent) {
        let output.s0.y = (output.s0.y.yi.base + output.s0.y.yi)
        realize rows([rows.x.min_realized, rows.x.extent_realized], [rows.y.min_realized, rows.y.extent_realized]) {
          for (output.s0.x.x, output.s0.x.x.loop_min, output.s0.x.x.loop_extent) {
            let output.s0.x.v16.base = ((output.s0.x.x*128) + output.s0.x.loop_min)
            produce rows {
              let rows.s0.y.loop_max = rows.s0.y.max
              let rows.s0.y.loop_min = rows.s0.y.min
              let rows.s0.y.loop_extent = ((rows.s0.y.max + 1) - rows.s0.y.min)
              let rows.s0.x.loop_max = rows.s0.x.max
              let rows.s0.x.loop_min = rows.s0.x.min
              let rows.s0.x.loop_extent = ((rows.s0.x.max + 1) - rows.s0.x.min)
              let rows.s0.x.x.loop_extent = (((rows.s0.x.loop_max - rows.s0.x.loop_min) + 128)/128)
              let rows.s0.x.x.loop_max = ((((rows.s0.x.loop_max - rows.s0.x.loop_min) + 128)/128) - 1)
              let rows.s0.x.x.loop_min = 0
              let rows.s0.x.v19.loop_extent = 128
              let rows.s0.x.v19.loop_max = (128 - 1)
              let rows.s0.x.v19.loop_min = 0
              for (rows.s0.y, rows.s0.y.loop_min, rows.s0.y.loop_extent) {
                for (rows.s0.x.x, rows.s0.x.x.loop_min, rows.s0.x.x.loop_extent) {
                  let rows.s0.x.v19.base = ((rows.s0.x.x*128) + rows.s0.x.loop_min)
                  vectorized (rows.s0.x.v19, rows.s0.x.v19.loop_min, rows.s0.x.v19.loop_extent) {
                    let rows.s0.x = (rows.s0.x.v19.base + rows.s0.x.v19)
                    rows((rows.s0.x.v19.base + rows.s0.x.v19), rows.s0.y) = (let t3 = (rows.s0.x.v19.base + rows.s0.x.v19) in ((((int16(input(t3, (rows.s0.y - 2))) + ((int16)4*int16(input(t3, (rows.s0.y - 1))))) + ((int16)6*int16(input(t3, rows.s0.y)))) + ((int16)4*int16(input(t3, (rows.s0.y + 1))))) + int16(input(t3, (rows.s0.y + 2)))))
                  }
                }
              }
            }
            consume rows {
              vectorized (output.s0.x.v16, output.s0.x.v16.loop_min, output.s0.x.v16.loop_extent) {
                let output.s0.x = (output.s0.x.v16.base + output.s0.x.v16)
                output((output.s0.x.v16.base + output.s0.x.v16), (output.s0.y.yi.base + output.s0.y.yi)) = (let t0 = (output.s0.y.yi.base + output.s0.y.yi) in (let t1 = (output.s0.x.v16.base + output.s0.x.v16) in uint8(shift_right(((((rows((t1 - 2), t0) + ((int16)4*rows((t1 - 1), t0))) + ((int16)6*rows(t1, t0))) + ((int16)4*rows((t1 + 1), t0))) + rows((t1 + 2), t0)), (int16)8))))
              }
            }
          }
        }
      }
    }
  }
}

Performing computation bounds inference...
Lowering after computation bounds inference:
let output.s0.y.max = ((0 + output.extent.1) - 1)
let output.s0.y.min = 0
let output.s0.x.max = ((0 + output.extent.0) - 1)
let output.s0.x.min = 0
let rows.s0.y.max = output.s0.y.max
let rows.s0.y.min = output.s0.y.min
let rows.s0.x.max = (output.s0.x.max + 2)
let rows.s0.x.min = (output.s0.x.min + -2)
let input.extent.0.required = (((((((rows.s0.x.max - rows.s0.x.min)/128)*128) + rows.s0.x.min) + 127) + 1) - rows.s0.x.min)
let input.min.0.required = rows.s0.x.min
let input.stride.0.required = 1
let input.extent.1.required = (((rows.s0.y.max + 2) + 1) - (rows.s0.y.min + -2))
let input.min.1.required = (rows.s0.y.min + -2)
let input.stride.1.required = (input.stride.0.required*input.extent.0.required)
let output.extent.0.required = (((((((output.s0.x.max - output.s0.x.min)/128)*128) + output.s0.x.min) + 127) + 1) - (output.s0.x.min + 0))
let output.min.0.required = (output.s0.x.min + 0)
let output.stride.0.required = 1
let output.extent.1.required = (((((((output.s0.y.max - output.s0.y.min)/4)*4) + output.s0.y.min) + 3) + 1) - (output.s0.y.min + 0))
let output.min.1.required = (output.s0.y.min + 0)
let output.stride.1.required = (output.stride.0.required*output.extent.0.required)
let input.stride.0.constrained = 1
let input.min.0.constrained = 0
let input.stride.1.constrained = ((input.stride.1/128)*128)
let input.min.1.constrained = 0
let output.stride.0.constrained = 1
let output.min.0.constrained = 0
let output.stride.1.constrained = ((output.stride.1/128)*128)
let output.min.1.constrained = 0
let input.stride.0.proposed = 1
let input.min.0.proposed = 0
let input.extent.0.proposed = input.extent.0.required
let input.stride.1.proposed = ((input.stride.1.required/128)*128)
let input.min.1.proposed = 0
let input.extent.1.proposed = input.extent.1.required
let output.stride.0.proposed = 1
let output.min.0.proposed = 0
let output.extent.0.proposed = output.extent.0.required
let output.stride.1.proposed = ((output.stride.1.required/128)*128)
let output.min.1.proposed = 0
let output.extent.1.proposed = output.extent.1.required
assert((input.stride.0 == input.stride.0.constrained), 0)
assert((input.min.0 == input.min.0.constrained), 0)
assert((input.stride.1 == input.stride.1.constrained), 0)
assert((input.min.1 == input.min.1.constrained), 0)
assert((output.stride.0 == output.stride.0.constrained), 0)
assert((output.min.0 == output.min.0.constrained), 0)
assert((output.stride.1 == output.stride.1.constrained), 0)
assert((output.min.1 == output.min.1.constrained), 0)
produce output {
  let output.s0.y.loop_max = output.s0.y.max
  let output.s0.y.loop_min = output.s0.y.min
  let output.s0.y.loop_extent = ((output.s0.y.max + 1) - output.s0.y.min)
  let output.s0.x.loop_max = output.s0.x.max
  let output.s0.x.loop_min = output.s0.x.min
  let output.s0.x.loop_extent = ((output.s0.x.max + 1) - output.s0.x.min)
  let output.s0.y.y.loop_extent = (((output.s0.y.loop_max - output.s0.y.loop_min) + 4)/4)
  let output.s0.y.y.loop_max = ((((output.s0.y.loop_max - output.s0.y.loop_min) + 4)/4) - 1)
  let output.s0.y.y.loop_min = 0
  let output.s0.y.yi.loop_extent = 4
  let output.s0.y.yi.loop_max = (4 - 1)
  let output.s0.y.yi.loop_min = 0
  let output.s0.x.x.loop_extent = (((output.s0.x.loop_max - output.s0.x.loop_min) + 128)/128)
  let output.s0.x.x.loop_max = ((((output.s0.x.loop_max - output.s0.x.loop_min) + 128)/128) - 1)
  let output.s0.x.x.loop_min = 0
  let output.s0.x.v16.loop_extent = 128
  let output.s0.x.v16.loop_max = (128 - 1)
  let output.s0.x.v16.loop_min = 0
  for<Hexagon> (output.s0.__outermost, 0, 1) {
    for (output.s0.y.y, output.s0.y.y.loop_min, output.s0.y.y.loop_extent) {
      let output.s0.y.min = (((output.s0.y.y*4) + output.s0.y.loop_min) + output.s0.y.yi.loop_min)
      let output.s0.y.max = (((output.s0.y.y*4) + output.s0.y.loop_min) + ((output.s0.y.yi.loop_extent + output.s0.y.yi.loop_min) - 1))
      let output.s0.x.min = (((output.s0.x.x.loop_min*128) + output.s0.x.loop_min) + output.s0.x.v16.loop_min)
      let output.s0.x.max = (((((output.s0.x.x.loop_extent + output.s0.x.x.loop_min)*128) + output.s0.x.loop_min) + -128) + ((output.s0.x.v16.loop_extent + output.s0.x.v16.loop_min) - 1))
      let rows.s0.y.max = output.s0.y.max
      let rows.s0.y.min = output.s0.y.min
      let rows.s0.x.max = (output.s0.x.max + 2)
      let rows.s0.x.min = (output.s0.x.min + -2)
      prefetch input()
      let output.s0.y.yi.base = ((output.s0.y.y*4) + output.s0.y.loop_min)
      for (output.s0.y.yi, output.s0.y.yi.loop_min, output.s0.y.yi.loop_extent) {
        let output.s0.y = (output.s0.y.yi.base + output.s0.y.yi)
        let output.s0.y.min = (output.s0.y.yi.base + output.s0.y.yi)
        let output.s0.y.max = output.s0.y.min
        let output.s0.x.min = (((output.s0.x.x.loop_min*128) + output.s0.x.loop_min) + output.s0.x.v16.loop_min)
        let output.s0.x.max = (((((output.s0.x.x.loop_extent + output.s0.x.x.loop_min)*128) + output.s0.x.loop_min) + -128) + ((output.s0.x.v16.loop_extent + output.s0.x.v16.loop_min) - 1))
        let rows.s0.y.max = output.s0.y.max
        let rows.s0.y.min = output.s0.y.min
        let rows.s0.x.max = (output.s0.x.max + 2)
        let rows.s0.x.min = (output.s0.x.min + -2)
        realize rows([rows.x.min_realized, rows.x.extent_realized], [rows.y.min_realized, rows.y.extent_realized]) {
          for (output.s0.x.x, output.s0.x.x.loop_min, output.s0.x.x.loop_extent) {
            let output.s0.x.v16.base = ((output.s0.x.x*128) + output.s0.x.loop_min)
            let output.s0.y.min = (output.s0.y.yi.base + output.s0.y.yi)
            let output.s0.y.max = output.s0.y.min
            let output.s0.x.min = (output.s0.x.v16.base + output.s0.x.v16.loop_min)
            let output.s0.x.max = (output.s0.x.v16.base + ((output.s0.x.v16.loop_extent + output.s0.x.v16.loop_min) - 1))
            let rows.s0.y.max = output.s0.y.max
            let rows.s0.y.min = output.s0.y.min
            let rows.s0.x.max = (output.s0.x.max + 2)
            let rows.s0.x.min = (output.s0.x.min + -2)
            produce rows {
              let rows.s0.y.loop_max = rows.s0.y.max
              let rows.s0.y.loop_min = rows.s0.y.min
              let rows.s0.y.loop_extent = ((rows.s0.y.max + 1) - rows.s0.y.min)
              let rows.s0.x.loop_max = rows.s0.x.max
              let rows.s0.x.loop_min = rows.s0.x.min
              let rows.s0.x.loop_extent = ((rows.s0.x.max + 1) - rows.s0.x.min)
              let rows.s0.x.x.loop_extent = (((rows.s0.x.loop_max - rows.s0.x.loop_min) + 128)/128)
              let rows.s0.x.x.loop_max = ((((rows.s0.x.loop_max - rows.s0.x.loop_min) + 128)/128) - 1)
              let rows.s0.x.x.loop_min = 0
              let rows.s0.x.v19.loop_extent = 128
              let rows.s0.x.v19.loop_max = (128 - 1)
              let rows.s0.x.v19.loop_min = 0
              for (rows.s0.y, rows.s0.y.loop_min, rows.s0.y.loop_extent) {
                for (rows.s0.x.x, rows.s0.x.x.loop_min, rows.s0.x.x.loop_extent) {
                  let rows.s0.x.v19.base = ((rows.s0.x.x*128) + rows.s0.x.loop_min)
                  vectorized (rows.s0.x.v19, rows.s0.x.v19.loop_min, rows.s0.x.v19.loop_extent) {
                    let rows.s0.x = (rows.s0.x.v19.base + rows.s0.x.v19)
                    rows((rows.s0.x.v19.base + rows.s0.x.v19), rows.s0.y) = (let t3 = (rows.s0.x.v19.base + rows.s0.x.v19) in ((((int16(input(t3, (rows.s0.y - 2))) + ((int16)4*int16(input(t3, (rows.s0.y - 1))))) + ((int16)6*int16(input(t3, rows.s0.y)))) + ((int16)4*int16(input(t3, (rows.s0.y + 1))))) + int16(input(t3, (rows.s0.y + 2)))))
                  }
                }
              }
            }
            consume rows {
              vectorized (output.s0.x.v16, output.s0.x.v16.loop_min, output.s0.x.v16.loop_extent) {
                let output.s0.x = (output.s0.x.v16.base + output.s0.x.v16)
                output((output.s0.x.v16.base + output.s0.x.v16), (output.s0.y.yi.base + output.s0.y.yi)) = (let t0 = (output.s0.y.yi.base + output.s0.y.yi) in (let t1 = (output.s0.x.v16.base + output.s0.x.v16) in uint8(shift_right(((((rows((t1 - 2), t0) + ((int16)4*rows((t1 - 1), t0))) + ((int16)6*rows(t1, t0))) + ((int16)4*rows((t1 + 1), t0))) + rows((t1 + 2), t0)), (int16)8))))
              }
            }
          }
        }
      }
    }
  }
}

Removing extern loops...
Lowering after removing extern loops:
let output.s0.y.max = ((0 + output.extent.1) - 1)
let output.s0.y.min = 0
let output.s0.x.max = ((0 + output.extent.0) - 1)
let output.s0.x.min = 0
let rows.s0.y.max = output.s0.y.max
let rows.s0.y.min = output.s0.y.min
let rows.s0.x.max = (output.s0.x.max + 2)
let rows.s0.x.min = (output.s0.x.min + -2)
let input.extent.0.required = (((((((rows.s0.x.max - rows.s0.x.min)/128)*128) + rows.s0.x.min) + 127) + 1) - rows.s0.x.min)
let input.min.0.required = rows.s0.x.min
let input.stride.0.required = 1
let input.extent.1.required = (((rows.s0.y.max + 2) + 1) - (rows.s0.y.min + -2))
let input.min.1.required = (rows.s0.y.min + -2)
let input.stride.1.required = (input.stride.0.required*input.extent.0.required)
let output.extent.0.required = (((((((output.s0.x.max - output.s0.x.min)/128)*128) + output.s0.x.min) + 127) + 1) - (output.s0.x.min + 0))
let output.min.0.required = (output.s0.x.min + 0)
let output.stride.0.required = 1
let output.extent.1.required = (((((((output.s0.y.max - output.s0.y.min)/4)*4) + output.s0.y.min) + 3) + 1) - (output.s0.y.min + 0))
let output.min.1.required = (output.s0.y.min + 0)
let output.stride.1.required = (output.stride.0.required*output.extent.0.required)
let input.stride.0.constrained = 1
let input.min.0.constrained = 0
let input.stride.1.constrained = ((input.stride.1/128)*128)
let input.min.1.constrained = 0
let output.stride.0.constrained = 1
let output.min.0.constrained = 0
let output.stride.1.constrained = ((output.stride.1/128)*128)
let output.min.1.constrained = 0
let input.stride.0.proposed = 1
let input.min.0.proposed = 0
let input.extent.0.proposed = input.extent.0.required
let input.stride.1.proposed = ((input.stride.1.required/128)*128)
let input.min.1.proposed = 0
let input.extent.1.proposed = input.extent.1.required
let output.stride.0.proposed = 1
let output.min.0.proposed = 0
let output.extent.0.proposed = output.extent.0.required
let output.stride.1.proposed = ((output.stride.1.required/128)*128)
let output.min.1.proposed = 0
let output.extent.1.proposed = output.extent.1.required
assert((input.stride.0 == input.stride.0.constrained), 0)
assert((input.min.0 == input.min.0.constrained), 0)
assert((input.stride.1 == input.stride.1.constrained), 0)
assert((input.min.1 == input.min.1.constrained), 0)
assert((output.stride.0 == output.stride.0.constrained), 0)
assert((output.min.0 == output.min.0.constrained), 0)
assert((output.stride.1 == output.stride.1.constrained), 0)
assert((output.min.1 == output.min.1.constrained), 0)
produce output {
  let output.s0.y.loop_max = output.s0.y.max
  let output.s0.y.loop_min = output.s0.y.min
  let output.s0.y.loop_extent = ((output.s0.y.max + 1) - output.s0.y.min)
  let output.s0.x.loop_max = output.s0.x.max
  let output.s0.x.loop_min = output.s0.x.min
  let output.s0.x.loop_extent = ((output.s0.x.max + 1) - output.s0.x.min)
  let output.s0.y.y.loop_extent = (((output.s0.y.loop_max - output.s0.y.loop_min) + 4)/4)
  let output.s0.y.y.loop_max = ((((output.s0.y.loop_max - output.s0.y.loop_min) + 4)/4) - 1)
  let output.s0.y.y.loop_min = 0
  let output.s0.y.yi.loop_extent = 4
  let output.s0.y.yi.loop_max = (4 - 1)
  let output.s0.y.yi.loop_min = 0
  let output.s0.x.x.loop_extent = (((output.s0.x.loop_max - output.s0.x.loop_min) + 128)/128)
  let output.s0.x.x.loop_max = ((((output.s0.x.loop_max - output.s0.x.loop_min) + 128)/128) - 1)
  let output.s0.x.x.loop_min = 0
  let output.s0.x.v16.loop_extent = 128
  let output.s0.x.v16.loop_max = (128 - 1)
  let output.s0.x.v16.loop_min = 0
  for<Hexagon> (output.s0.__outermost, 0, 1) {
    for (output.s0.y.y, output.s0.y.y.loop_min, output.s0.y.y.loop_extent) {
      let output.s0.y.min = (((output.s0.y.y*4) + output.s0.y.loop_min) + output.s0.y.yi.loop_min)
      let output.s0.y.max = (((output.s0.y.y*4) + output.s0.y.loop_min) + ((output.s0.y.yi.loop_extent + output.s0.y.yi.loop_min) - 1))
      let output.s0.x.min = (((output.s0.x.x.loop_min*128) + output.s0.x.loop_min) + output.s0.x.v16.loop_min)
      let output.s0.x.max = (((((output.s0.x.x.loop_extent + output.s0.x.x.loop_min)*128) + output.s0.x.loop_min) + -128) + ((output.s0.x.v16.loop_extent + output.s0.x.v16.loop_min) - 1))
      let rows.s0.y.max = output.s0.y.max
      let rows.s0.y.min = output.s0.y.min
      let rows.s0.x.max = (output.s0.x.max + 2)
      let rows.s0.x.min = (output.s0.x.min + -2)
      prefetch input()
      let output.s0.y.yi.base = ((output.s0.y.y*4) + output.s0.y.loop_min)
      for (output.s0.y.yi, output.s0.y.yi.loop_min, output.s0.y.yi.loop_extent) {
        let output.s0.y = (output.s0.y.yi.base + output.s0.y.yi)
        let output.s0.y.min = (output.s0.y.yi.base + output.s0.y.yi)
        let output.s0.y.max = output.s0.y.min
        let output.s0.x.min = (((output.s0.x.x.loop_min*128) + output.s0.x.loop_min) + output.s0.x.v16.loop_min)
        let output.s0.x.max = (((((output.s0.x.x.loop_extent + output.s0.x.x.loop_min)*128) + output.s0.x.loop_min) + -128) + ((output.s0.x.v16.loop_extent + output.s0.x.v16.loop_min) - 1))
        let rows.s0.y.max = output.s0.y.max
        let rows.s0.y.min = output.s0.y.min
        let rows.s0.x.max = (output.s0.x.max + 2)
        let rows.s0.x.min = (output.s0.x.min + -2)
        realize rows([rows.x.min_realized, rows.x.extent_realized], [rows.y.min_realized, rows.y.extent_realized]) {
          for (output.s0.x.x, output.s0.x.x.loop_min, output.s0.x.x.loop_extent) {
            let output.s0.x.v16.base = ((output.s0.x.x*128) + output.s0.x.loop_min)
            let output.s0.y.min = (output.s0.y.yi.base + output.s0.y.yi)
            let output.s0.y.max = output.s0.y.min
            let output.s0.x.min = (output.s0.x.v16.base + output.s0.x.v16.loop_min)
            let output.s0.x.max = (output.s0.x.v16.base + ((output.s0.x.v16.loop_extent + output.s0.x.v16.loop_min) - 1))
            let rows.s0.y.max = output.s0.y.max
            let rows.s0.y.min = output.s0.y.min
            let rows.s0.x.max = (output.s0.x.max + 2)
            let rows.s0.x.min = (output.s0.x.min + -2)
            produce rows {
              let rows.s0.y.loop_max = rows.s0.y.max
              let rows.s0.y.loop_min = rows.s0.y.min
              let rows.s0.y.loop_extent = ((rows.s0.y.max + 1) - rows.s0.y.min)
              let rows.s0.x.loop_max = rows.s0.x.max
              let rows.s0.x.loop_min = rows.s0.x.min
              let rows.s0.x.loop_extent = ((rows.s0.x.max + 1) - rows.s0.x.min)
              let rows.s0.x.x.loop_extent = (((rows.s0.x.loop_max - rows.s0.x.loop_min) + 128)/128)
              let rows.s0.x.x.loop_max = ((((rows.s0.x.loop_max - rows.s0.x.loop_min) + 128)/128) - 1)
              let rows.s0.x.x.loop_min = 0
              let rows.s0.x.v19.loop_extent = 128
              let rows.s0.x.v19.loop_max = (128 - 1)
              let rows.s0.x.v19.loop_min = 0
              for (rows.s0.y, rows.s0.y.loop_min, rows.s0.y.loop_extent) {
                for (rows.s0.x.x, rows.s0.x.x.loop_min, rows.s0.x.x.loop_extent) {
                  let rows.s0.x.v19.base = ((rows.s0.x.x*128) + rows.s0.x.loop_min)
                  vectorized (rows.s0.x.v19, rows.s0.x.v19.loop_min, rows.s0.x.v19.loop_extent) {
                    let rows.s0.x = (rows.s0.x.v19.base + rows.s0.x.v19)
                    rows((rows.s0.x.v19.base + rows.s0.x.v19), rows.s0.y) = (let t3 = (rows.s0.x.v19.base + rows.s0.x.v19) in ((((int16(input(t3, (rows.s0.y - 2))) + ((int16)4*int16(input(t3, (rows.s0.y - 1))))) + ((int16)6*int16(input(t3, rows.s0.y)))) + ((int16)4*int16(input(t3, (rows.s0.y + 1))))) + int16(input(t3, (rows.s0.y + 2)))))
                  }
                }
              }
            }
            consume rows {
              vectorized (output.s0.x.v16, output.s0.x.v16.loop_min, output.s0.x.v16.loop_extent) {
                let output.s0.x = (output.s0.x.v16.base + output.s0.x.v16)
                output((output.s0.x.v16.base + output.s0.x.v16), (output.s0.y.yi.base + output.s0.y.yi)) = (let t0 = (output.s0.y.yi.base + output.s0.y.yi) in (let t1 = (output.s0.x.v16.base + output.s0.x.v16) in uint8(shift_right(((((rows((t1 - 2), t0) + ((int16)4*rows((t1 - 1), t0))) + ((int16)6*rows(t1, t0))) + ((int16)4*rows((t1 + 1), t0))) + rows((t1 + 2), t0)), (int16)8))))
              }
            }
          }
        }
      }
    }
  }
}

Performing sliding window optimization...
Lowering after sliding window:
let output.s0.y.max = ((0 + output.extent.1) - 1)
let output.s0.y.min = 0
let output.s0.x.max = ((0 + output.extent.0) - 1)
let output.s0.x.min = 0
let rows.s0.y.max = output.s0.y.max
let rows.s0.y.min = output.s0.y.min
let rows.s0.x.max = (output.s0.x.max + 2)
let rows.s0.x.min = (output.s0.x.min + -2)
let input.extent.0.required = (((((((rows.s0.x.max - rows.s0.x.min)/128)*128) + rows.s0.x.min) + 127) + 1) - rows.s0.x.min)
let input.min.0.required = rows.s0.x.min
let input.stride.0.required = 1
let input.extent.1.required = (((rows.s0.y.max + 2) + 1) - (rows.s0.y.min + -2))
let input.min.1.required = (rows.s0.y.min + -2)
let input.stride.1.required = (input.stride.0.required*input.extent.0.required)
let output.extent.0.required = (((((((output.s0.x.max - output.s0.x.min)/128)*128) + output.s0.x.min) + 127) + 1) - (output.s0.x.min + 0))
let output.min.0.required = (output.s0.x.min + 0)
let output.stride.0.required = 1
let output.extent.1.required = (((((((output.s0.y.max - output.s0.y.min)/4)*4) + output.s0.y.min) + 3) + 1) - (output.s0.y.min + 0))
let output.min.1.required = (output.s0.y.min + 0)
let output.stride.1.required = (output.stride.0.required*output.extent.0.required)
let input.stride.0.constrained = 1
let input.min.0.constrained = 0
let input.stride.1.constrained = ((input.stride.1/128)*128)
let input.min.1.constrained = 0
let output.stride.0.constrained = 1
let output.min.0.constrained = 0
let output.stride.1.constrained = ((output.stride.1/128)*128)
let output.min.1.constrained = 0
let input.stride.0.proposed = 1
let input.min.0.proposed = 0
let input.extent.0.proposed = input.extent.0.required
let input.stride.1.proposed = ((input.stride.1.required/128)*128)
let input.min.1.proposed = 0
let input.extent.1.proposed = input.extent.1.required
let output.stride.0.proposed = 1
let output.min.0.proposed = 0
let output.extent.0.proposed = output.extent.0.required
let output.stride.1.proposed = ((output.stride.1.required/128)*128)
let output.min.1.proposed = 0
let output.extent.1.proposed = output.extent.1.required
assert((input.stride.0 == input.stride.0.constrained), 0)
assert((input.min.0 == input.min.0.constrained), 0)
assert((input.stride.1 == input.stride.1.constrained), 0)
assert((input.min.1 == input.min.1.constrained), 0)
assert((output.stride.0 == output.stride.0.constrained), 0)
assert((output.min.0 == output.min.0.constrained), 0)
assert((output.stride.1 == output.stride.1.constrained), 0)
assert((output.min.1 == output.min.1.constrained), 0)
produce output {
  let output.s0.y.loop_max = output.s0.y.max
  let output.s0.y.loop_min = output.s0.y.min
  let output.s0.y.loop_extent = ((output.s0.y.max + 1) - output.s0.y.min)
  let output.s0.x.loop_max = output.s0.x.max
  let output.s0.x.loop_min = output.s0.x.min
  let output.s0.x.loop_extent = ((output.s0.x.max + 1) - output.s0.x.min)
  let output.s0.y.y.loop_extent = (((output.s0.y.loop_max - output.s0.y.loop_min) + 4)/4)
  let output.s0.y.y.loop_max = ((((output.s0.y.loop_max - output.s0.y.loop_min) + 4)/4) - 1)
  let output.s0.y.y.loop_min = 0
  let output.s0.y.yi.loop_extent = 4
  let output.s0.y.yi.loop_max = (4 - 1)
  let output.s0.y.yi.loop_min = 0
  let output.s0.x.x.loop_extent = (((output.s0.x.loop_max - output.s0.x.loop_min) + 128)/128)
  let output.s0.x.x.loop_max = ((((output.s0.x.loop_max - output.s0.x.loop_min) + 128)/128) - 1)
  let output.s0.x.x.loop_min = 0
  let output.s0.x.v16.loop_extent = 128
  let output.s0.x.v16.loop_max = (128 - 1)
  let output.s0.x.v16.loop_min = 0
  for<Hexagon> (output.s0.__outermost, 0, 1) {
    for (output.s0.y.y, output.s0.y.y.loop_min, output.s0.y.y.loop_extent) {
      let output.s0.y.min = (((output.s0.y.y*4) + output.s0.y.loop_min) + output.s0.y.yi.loop_min)
      let output.s0.y.max = (((output.s0.y.y*4) + output.s0.y.loop_min) + ((output.s0.y.yi.loop_extent + output.s0.y.yi.loop_min) - 1))
      let output.s0.x.min = (((output.s0.x.x.loop_min*128) + output.s0.x.loop_min) + output.s0.x.v16.loop_min)
      let output.s0.x.max = (((((output.s0.x.x.loop_extent + output.s0.x.x.loop_min)*128) + output.s0.x.loop_min) + -128) + ((output.s0.x.v16.loop_extent + output.s0.x.v16.loop_min) - 1))
      let rows.s0.y.max = output.s0.y.max
      let rows.s0.y.min = output.s0.y.min
      let rows.s0.x.max = (output.s0.x.max + 2)
      let rows.s0.x.min = (output.s0.x.min + -2)
      prefetch input()
      let output.s0.y.yi.base = ((output.s0.y.y*4) + output.s0.y.loop_min)
      for (output.s0.y.yi, output.s0.y.yi.loop_min, output.s0.y.yi.loop_extent) {
        let output.s0.y = (output.s0.y.yi.base + output.s0.y.yi)
        let output.s0.y.min = (output.s0.y.yi.base + output.s0.y.yi)
        let output.s0.y.max = output.s0.y.min
        let output.s0.x.min = (((output.s0.x.x.loop_min*128) + output.s0.x.loop_min) + output.s0.x.v16.loop_min)
        let output.s0.x.max = (((((output.s0.x.x.loop_extent + output.s0.x.x.loop_min)*128) + output.s0.x.loop_min) + -128) + ((output.s0.x.v16.loop_extent + output.s0.x.v16.loop_min) - 1))
        let rows.s0.y.max = output.s0.y.max
        let rows.s0.y.min = output.s0.y.min
        let rows.s0.x.max = (output.s0.x.max + 2)
        let rows.s0.x.min = (output.s0.x.min + -2)
        realize rows([rows.x.min_realized, rows.x.extent_realized], [rows.y.min_realized, rows.y.extent_realized]) {
          for (output.s0.x.x, output.s0.x.x.loop_min, output.s0.x.x.loop_extent) {
            let output.s0.x.v16.base = ((output.s0.x.x*128) + output.s0.x.loop_min)
            let output.s0.y.min = (output.s0.y.yi.base + output.s0.y.yi)
            let output.s0.y.max = output.s0.y.min
            let output.s0.x.min = (output.s0.x.v16.base + output.s0.x.v16.loop_min)
            let output.s0.x.max = (output.s0.x.v16.base + ((output.s0.x.v16.loop_extent + output.s0.x.v16.loop_min) - 1))
            let rows.s0.y.max = output.s0.y.max
            let rows.s0.y.min = output.s0.y.min
            let rows.s0.x.max = (output.s0.x.max + 2)
            let rows.s0.x.min = select((output.s0.x.x <= output.s0.x.x.loop_min), ((((output.s0.x.x*128) + output.s0.x.loop_min) + output.s0.x.v16.loop_min) + -2), likely_if_innermost(((((((output.s0.x.x - 1)*128) + output.s0.x.loop_min) + (output.s0.x.v16.loop_extent + output.s0.x.v16.loop_min)) + 1) + 1)))
            produce rows {
              let rows.s0.y.loop_max = rows.s0.y.max
              let rows.s0.y.loop_min = rows.s0.y.min
              let rows.s0.y.loop_extent = ((rows.s0.y.max + 1) - rows.s0.y.min)
              let rows.s0.x.loop_max = rows.s0.x.max
              let rows.s0.x.loop_min = rows.s0.x.min
              let rows.s0.x.loop_extent = ((rows.s0.x.max + 1) - rows.s0.x.min)
              let rows.s0.x.x.loop_extent = (((rows.s0.x.loop_max - rows.s0.x.loop_min) + 128)/128)
              let rows.s0.x.x.loop_max = ((((rows.s0.x.loop_max - rows.s0.x.loop_min) + 128)/128) - 1)
              let rows.s0.x.x.loop_min = 0
              let rows.s0.x.v19.loop_extent = 128
              let rows.s0.x.v19.loop_max = (128 - 1)
              let rows.s0.x.v19.loop_min = 0
              for (rows.s0.y, rows.s0.y.loop_min, rows.s0.y.loop_extent) {
                for (rows.s0.x.x, rows.s0.x.x.loop_min, rows.s0.x.x.loop_extent) {
                  let rows.s0.x.v19.base = ((rows.s0.x.x*128) + rows.s0.x.loop_min)
                  vectorized (rows.s0.x.v19, rows.s0.x.v19.loop_min, rows.s0.x.v19.loop_extent) {
                    let rows.s0.x = (rows.s0.x.v19.base + rows.s0.x.v19)
                    rows((rows.s0.x.v19.base + rows.s0.x.v19), rows.s0.y) = (let t3 = (rows.s0.x.v19.base + rows.s0.x.v19) in ((((int16(input(t3, (rows.s0.y - 2))) + ((int16)4*int16(input(t3, (rows.s0.y - 1))))) + ((int16)6*int16(input(t3, rows.s0.y)))) + ((int16)4*int16(input(t3, (rows.s0.y + 1))))) + int16(input(t3, (rows.s0.y + 2)))))
                  }
                }
              }
            }
            consume rows {
              vectorized (output.s0.x.v16, output.s0.x.v16.loop_min, output.s0.x.v16.loop_extent) {
                let output.s0.x = (output.s0.x.v16.base + output.s0.x.v16)
                output((output.s0.x.v16.base + output.s0.x.v16), (output.s0.y.yi.base + output.s0.y.yi)) = (let t0 = (output.s0.y.yi.base + output.s0.y.yi) in (let t1 = (output.s0.x.v16.base + output.s0.x.v16) in uint8(shift_right(((((rows((t1 - 2), t0) + ((int16)4*rows((t1 - 1), t0))) + ((int16)6*rows(t1, t0))) + ((int16)4*rows((t1 + 1), t0))) + rows((t1 + 2), t0)), (int16)8))))
              }
            }
          }
        }
      }
    }
  }
}

Performing allocation bounds inference...
Lowering after allocation bounds inference:
let output.s0.y.max = ((0 + output.extent.1) - 1)
let output.s0.y.min = 0
let output.s0.x.max = ((0 + output.extent.0) - 1)
let output.s0.x.min = 0
let rows.s0.y.max = output.s0.y.max
let rows.s0.y.min = output.s0.y.min
let rows.s0.x.max = (output.s0.x.max + 2)
let rows.s0.x.min = (output.s0.x.min + -2)
let input.extent.0.required = (((((((rows.s0.x.max - rows.s0.x.min)/128)*128) + rows.s0.x.min) + 127) + 1) - rows.s0.x.min)
let input.min.0.required = rows.s0.x.min
let input.stride.0.required = 1
let input.extent.1.required = (((rows.s0.y.max + 2) + 1) - (rows.s0.y.min + -2))
let input.min.1.required = (rows.s0.y.min + -2)
let input.stride.1.required = (input.stride.0.required*input.extent.0.required)
let output.extent.0.required = (((((((output.s0.x.max - output.s0.x.min)/128)*128) + output.s0.x.min) + 127) + 1) - (output.s0.x.min + 0))
let output.min.0.required = (output.s0.x.min + 0)
let output.stride.0.required = 1
let output.extent.1.required = (((((((output.s0.y.max - output.s0.y.min)/4)*4) + output.s0.y.min) + 3) + 1) - (output.s0.y.min + 0))
let output.min.1.required = (output.s0.y.min + 0)
let output.stride.1.required = (output.stride.0.required*output.extent.0.required)
let input.stride.0.constrained = 1
let input.min.0.constrained = 0
let input.stride.1.constrained = ((input.stride.1/128)*128)
let input.min.1.constrained = 0
let output.stride.0.constrained = 1
let output.min.0.constrained = 0
let output.stride.1.constrained = ((output.stride.1/128)*128)
let output.min.1.constrained = 0
let input.stride.0.proposed = 1
let input.min.0.proposed = 0
let input.extent.0.proposed = input.extent.0.required
let input.stride.1.proposed = ((input.stride.1.required/128)*128)
let input.min.1.proposed = 0
let input.extent.1.proposed = input.extent.1.required
let output.stride.0.proposed = 1
let output.min.0.proposed = 0
let output.extent.0.proposed = output.extent.0.required
let output.stride.1.proposed = ((output.stride.1.required/128)*128)
let output.min.1.proposed = 0
let output.extent.1.proposed = output.extent.1.required
assert((input.stride.0 == input.stride.0.constrained), 0)
assert((input.min.0 == input.min.0.constrained), 0)
assert((input.stride.1 == input.stride.1.constrained), 0)
assert((input.min.1 == input.min.1.constrained), 0)
assert((output.stride.0 == output.stride.0.constrained), 0)
assert((output.min.0 == output.min.0.constrained), 0)
assert((output.stride.1 == output.stride.1.constrained), 0)
assert((output.min.1 == output.min.1.constrained), 0)
produce output {
  let output.s0.y.loop_max = output.s0.y.max
  let output.s0.y.loop_min = output.s0.y.min
  let output.s0.y.loop_extent = ((output.s0.y.max + 1) - output.s0.y.min)
  let output.s0.x.loop_max = output.s0.x.max
  let output.s0.x.loop_min = output.s0.x.min
  let output.s0.x.loop_extent = ((output.s0.x.max + 1) - output.s0.x.min)
  let output.s0.y.y.loop_extent = (((output.s0.y.loop_max - output.s0.y.loop_min) + 4)/4)
  let output.s0.y.y.loop_max = ((((output.s0.y.loop_max - output.s0.y.loop_min) + 4)/4) - 1)
  let output.s0.y.y.loop_min = 0
  let output.s0.y.yi.loop_extent = 4
  let output.s0.y.yi.loop_max = (4 - 1)
  let output.s0.y.yi.loop_min = 0
  let output.s0.x.x.loop_extent = (((output.s0.x.loop_max - output.s0.x.loop_min) + 128)/128)
  let output.s0.x.x.loop_max = ((((output.s0.x.loop_max - output.s0.x.loop_min) + 128)/128) - 1)
  let output.s0.x.x.loop_min = 0
  let output.s0.x.v16.loop_extent = 128
  let output.s0.x.v16.loop_max = (128 - 1)
  let output.s0.x.v16.loop_min = 0
  for<Hexagon> (output.s0.__outermost, 0, 1) {
    for (output.s0.y.y, output.s0.y.y.loop_min, output.s0.y.y.loop_extent) {
      let output.s0.y.min = (((output.s0.y.y*4) + output.s0.y.loop_min) + output.s0.y.yi.loop_min)
      let output.s0.y.max = (((output.s0.y.y*4) + output.s0.y.loop_min) + ((output.s0.y.yi.loop_extent + output.s0.y.yi.loop_min) - 1))
      let output.s0.x.min = (((output.s0.x.x.loop_min*128) + output.s0.x.loop_min) + output.s0.x.v16.loop_min)
      let output.s0.x.max = (((((output.s0.x.x.loop_extent + output.s0.x.x.loop_min)*128) + output.s0.x.loop_min) + -128) + ((output.s0.x.v16.loop_extent + output.s0.x.v16.loop_min) - 1))
      let rows.s0.y.max = output.s0.y.max
      let rows.s0.y.min = output.s0.y.min
      let rows.s0.x.max = (output.s0.x.max + 2)
      let rows.s0.x.min = (output.s0.x.min + -2)
      prefetch input()
      let output.s0.y.yi.base = ((output.s0.y.y*4) + output.s0.y.loop_min)
      for (output.s0.y.yi, output.s0.y.yi.loop_min, output.s0.y.yi.loop_extent) {
        let output.s0.y = (output.s0.y.yi.base + output.s0.y.yi)
        let output.s0.y.min = (output.s0.y.yi.base + output.s0.y.yi)
        let output.s0.y.max = output.s0.y.min
        let output.s0.x.min = (((output.s0.x.x.loop_min*128) + output.s0.x.loop_min) + output.s0.x.v16.loop_min)
        let output.s0.x.max = (((((output.s0.x.x.loop_extent + output.s0.x.x.loop_min)*128) + output.s0.x.loop_min) + -128) + ((output.s0.x.v16.loop_extent + output.s0.x.v16.loop_min) - 1))
        let rows.s0.y.max = output.s0.y.max
        let rows.s0.y.min = output.s0.y.min
        let rows.s0.x.max = (output.s0.x.max + 2)
        let rows.s0.x.min = (output.s0.x.min + -2)
        let rows.y.max_realized = (output.s0.y.yi + output.s0.y.yi.base)
        let rows.y.min_realized = (output.s0.y.yi + output.s0.y.yi.base)
        let rows.y.extent_realized = 1
        let rows.x.max_realized = max((let t17 = (let t13.s = (((output.s0.x.x.loop_min*128) + output.s0.x.loop_min) + (output.s0.x.v16.loop_extent + output.s0.x.v16.loop_min)) in min(select((output.s0.x.x.loop_min < ((output.s0.x.x.loop_extent + output.s0.x.x.loop_min) + -1)), (t13.s + -126), ((((output.s0.x.x.loop_min*128) + output.s0.x.loop_min) + output.s0.x.v16.loop_min) + -2)), ((((output.s0.x.x.loop_min*128) + output.s0.x.loop_min) + output.s0.x.v16.loop_min) + -2))) in (let t16 = (let t15.s = ((((output.s0.x.x.loop_extent + output.s0.x.x.loop_min)*128) + output.s0.x.loop_min) + (output.s0.x.v16.loop_extent + output.s0.x.v16.loop_min)) in max(select((output.s0.x.x.loop_min < ((output.s0.x.x.loop_extent + output.s0.x.x.loop_min) + -1)), (t15.s + -254), (((((output.s0.x.x.loop_extent + output.s0.x.x.loop_min)*128) + output.s0.x.loop_min) + output.s0.x.v16.loop_min) + -130)), (((((output.s0.x.x.loop_extent + output.s0.x.x.loop_min)*128) + output.s0.x.loop_min) + output.s0.x.v16.loop_min) + -130))) in ((((((((((output.s0.x.x.loop_extent + output.s0.x.x.loop_min)*128) + output.s0.x.loop_min) + (output.s0.x.v16.loop_extent + output.s0.x.v16.loop_min)) - t17) + -127)/128)*128) + t16) + 127))), (((((output.s0.x.x.loop_extent + output.s0.x.x.loop_min)*128) + output.s0.x.loop_min) + (output.s0.x.v16.loop_extent + output.s0.x.v16.loop_min)) + -127))
        let rows.x.min_realized = min((let t17 = (let t13.s = (((output.s0.x.x.loop_min*128) + output.s0.x.loop_min) + (output.s0.x.v16.loop_extent + output.s0.x.v16.loop_min)) in min(select((output.s0.x.x.loop_min < ((output.s0.x.x.loop_extent + output.s0.x.x.loop_min) + -1)), (t13.s + -126), ((((output.s0.x.x.loop_min*128) + output.s0.x.loop_min) + output.s0.x.v16.loop_min) + -2)), ((((output.s0.x.x.loop_min*128) + output.s0.x.loop_min) + output.s0.x.v16.loop_min) + -2))) in t17), ((((output.s0.x.x.loop_min*128) + output.s0.x.loop_min) + output.s0.x.v16.loop_min) + -2))
        let rows.x.extent_realized = ((max((let t17 = (let t13.s = (((output.s0.x.x.loop_min*128) + output.s0.x.loop_min) + (output.s0.x.v16.loop_extent + output.s0.x.v16.loop_min)) in min(select((output.s0.x.x.loop_min < ((output.s0.x.x.loop_extent + output.s0.x.x.loop_min) + -1)), (t13.s + -126), ((((output.s0.x.x.loop_min*128) + output.s0.x.loop_min) + output.s0.x.v16.loop_min) + -2)), ((((output.s0.x.x.loop_min*128) + output.s0.x.loop_min) + output.s0.x.v16.loop_min) + -2))) in (let t16 = (let t15.s = ((((output.s0.x.x.loop_extent + output.s0.x.x.loop_min)*128) + output.s0.x.loop_min) + (output.s0.x.v16.loop_extent + output.s0.x.v16.loop_min)) in max(select((output.s0.x.x.loop_min < ((output.s0.x.x.loop_extent + output.s0.x.x.loop_min) + -1)), (t15.s + -254), (((((output.s0.x.x.loop_extent + output.s0.x.x.loop_min)*128) + output.s0.x.loop_min) + output.s0.x.v16.loop_min) + -130)), (((((output.s0.x.x.loop_extent + output.s0.x.x.loop_min)*128) + output.s0.x.loop_min) + output.s0.x.v16.loop_min) + -130))) in ((((((((((output.s0.x.x.loop_extent + output.s0.x.x.loop_min)*128) + output.s0.x.loop_min) + (output.s0.x.v16.loop_extent + output.s0.x.v16.loop_min)) - t17) + -127)/128)*128) + t16) + 127))), (((((output.s0.x.x.loop_extent + output.s0.x.x.loop_min)*128) + output.s0.x.loop_min) + (output.s0.x.v16.loop_extent + output.s0.x.v16.loop_min)) + -127)) - min((let t17 = (let t13.s = (((output.s0.x.x.loop_min*128) + output.s0.x.loop_min) + (output.s0.x.v16.loop_extent + output.s0.x.v16.loop_min)) in min(select((output.s0.x.x.loop_min < ((output.s0.x.x.loop_extent + output.s0.x.x.loop_min) + -1)), (t13.s + -126), ((((output.s0.x.x.loop_min*128) + output.s0.x.loop_min) + output.s0.x.v16.loop_min) + -2)), ((((output.s0.x.x.loop_min*128) + output.s0.x.loop_min) + output.s0.x.v16.loop_min) + -2))) in t17), ((((output.s0.x.x.loop_min*128) + output.s0.x.loop_min) + output.s0.x.v16.loop_min) + -2))) + 1)
        realize rows([rows.x.min_realized, rows.x.extent_realized], [rows.y.min_realized, rows.y.extent_realized]) {
          for (output.s0.x.x, output.s0.x.x.loop_min, output.s0.x.x.loop_extent) {
            let output.s0.x.v16.base = ((output.s0.x.x*128) + output.s0.x.loop_min)
            let output.s0.y.min = (output.s0.y.yi.base + output.s0.y.yi)
            let output.s0.y.max = output.s0.y.min
            let output.s0.x.min = (output.s0.x.v16.base + output.s0.x.v16.loop_min)
            let output.s0.x.max = (output.s0.x.v16.base + ((output.s0.x.v16.loop_extent + output.s0.x.v16.loop_min) - 1))
            let rows.s0.y.max = output.s0.y.max
            let rows.s0.y.min = output.s0.y.min
            let rows.s0.x.max = (output.s0.x.max + 2)
            let rows.s0.x.min = select((output.s0.x.x <= output.s0.x.x.loop_min), ((((output.s0.x.x*128) + output.s0.x.loop_min) + output.s0.x.v16.loop_min) + -2), likely_if_innermost(((((((output.s0.x.x - 1)*128) + output.s0.x.loop_min) + (output.s0.x.v16.loop_extent + output.s0.x.v16.loop_min)) + 1) + 1)))
            produce rows {
              let rows.s0.y.loop_max = rows.s0.y.max
              let rows.s0.y.loop_min = rows.s0.y.min
              let rows.s0.y.loop_extent = ((rows.s0.y.max + 1) - rows.s0.y.min)
              let rows.s0.x.loop_max = rows.s0.x.max
              let rows.s0.x.loop_min = rows.s0.x.min
              let rows.s0.x.loop_extent = ((rows.s0.x.max + 1) - rows.s0.x.min)
              let rows.s0.x.x.loop_extent = (((rows.s0.x.loop_max - rows.s0.x.loop_min) + 128)/128)
              let rows.s0.x.x.loop_max = ((((rows.s0.x.loop_max - rows.s0.x.loop_min) + 128)/128) - 1)
              let rows.s0.x.x.loop_min = 0
              let rows.s0.x.v19.loop_extent = 128
              let rows.s0.x.v19.loop_max = (128 - 1)
              let rows.s0.x.v19.loop_min = 0
              for (rows.s0.y, rows.s0.y.loop_min, rows.s0.y.loop_extent) {
                for (rows.s0.x.x, rows.s0.x.x.loop_min, rows.s0.x.x.loop_extent) {
                  let rows.s0.x.v19.base = ((rows.s0.x.x*128) + rows.s0.x.loop_min)
                  vectorized (rows.s0.x.v19, rows.s0.x.v19.loop_min, rows.s0.x.v19.loop_extent) {
                    let rows.s0.x = (rows.s0.x.v19.base + rows.s0.x.v19)
                    rows((rows.s0.x.v19.base + rows.s0.x.v19), rows.s0.y) = (let t3 = (rows.s0.x.v19.base + rows.s0.x.v19) in ((((int16(input(t3, (rows.s0.y - 2))) + ((int16)4*int16(input(t3, (rows.s0.y - 1))))) + ((int16)6*int16(input(t3, rows.s0.y)))) + ((int16)4*int16(input(t3, (rows.s0.y + 1))))) + int16(input(t3, (rows.s0.y + 2)))))
                  }
                }
              }
            }
            consume rows {
              vectorized (output.s0.x.v16, output.s0.x.v16.loop_min, output.s0.x.v16.loop_extent) {
                let output.s0.x = (output.s0.x.v16.base + output.s0.x.v16)
                output((output.s0.x.v16.base + output.s0.x.v16), (output.s0.y.yi.base + output.s0.y.yi)) = (let t0 = (output.s0.y.yi.base + output.s0.y.yi) in (let t1 = (output.s0.x.v16.base + output.s0.x.v16) in uint8(shift_right(((((rows((t1 - 2), t0) + ((int16)4*rows((t1 - 1), t0))) + ((int16)6*rows(t1, t0))) + ((int16)4*rows((t1 + 1), t0))) + rows((t1 + 2), t0)), (int16)8))))
              }
            }
          }
        }
      }
    }
  }
}

Removing code that depends on undef values...
Lowering after removing code that depends on undef values:
let output.s0.y.max = ((0 + output.extent.1) - 1)
let output.s0.y.min = 0
let output.s0.x.max = ((0 + output.extent.0) - 1)
let output.s0.x.min = 0
let rows.s0.y.max = output.s0.y.max
let rows.s0.y.min = output.s0.y.min
let rows.s0.x.max = (output.s0.x.max + 2)
let rows.s0.x.min = (output.s0.x.min + -2)
let input.extent.0.required = (((((((rows.s0.x.max - rows.s0.x.min)/128)*128) + rows.s0.x.min) + 127) + 1) - rows.s0.x.min)
let input.min.0.required = rows.s0.x.min
let input.stride.0.required = 1
let input.extent.1.required = (((rows.s0.y.max + 2) + 1) - (rows.s0.y.min + -2))
let input.min.1.required = (rows.s0.y.min + -2)
let input.stride.1.required = (input.stride.0.required*input.extent.0.required)
let output.extent.0.required = (((((((output.s0.x.max - output.s0.x.min)/128)*128) + output.s0.x.min) + 127) + 1) - (output.s0.x.min + 0))
let output.min.0.required = (output.s0.x.min + 0)
let output.stride.0.required = 1
let output.extent.1.required = (((((((output.s0.y.max - output.s0.y.min)/4)*4) + output.s0.y.min) + 3) + 1) - (output.s0.y.min + 0))
let output.min.1.required = (output.s0.y.min + 0)
let output.stride.1.required = (output.stride.0.required*output.extent.0.required)
let input.stride.0.constrained = 1
let input.min.0.constrained = 0
let input.stride.1.constrained = ((input.stride.1/128)*128)
let input.min.1.constrained = 0
let output.stride.0.constrained = 1
let output.min.0.constrained = 0
let output.stride.1.constrained = ((output.stride.1/128)*128)
let output.min.1.constrained = 0
let input.stride.0.proposed = 1
let input.min.0.proposed = 0
let input.extent.0.proposed = input.extent.0.required
let input.stride.1.proposed = ((input.stride.1.required/128)*128)
let input.min.1.proposed = 0
let input.extent.1.proposed = input.extent.1.required
let output.stride.0.proposed = 1
let output.min.0.proposed = 0
let output.extent.0.proposed = output.extent.0.required
let output.stride.1.proposed = ((output.stride.1.required/128)*128)
let output.min.1.proposed = 0
let output.extent.1.proposed = output.extent.1.required
assert((input.stride.0 == input.stride.0.constrained), 0)
assert((input.min.0 == input.min.0.constrained), 0)
assert((input.stride.1 == input.stride.1.constrained), 0)
assert((input.min.1 == input.min.1.constrained), 0)
assert((output.stride.0 == output.stride.0.constrained), 0)
assert((output.min.0 == output.min.0.constrained), 0)
assert((output.stride.1 == output.stride.1.constrained), 0)
assert((output.min.1 == output.min.1.constrained), 0)
produce output {
  let output.s0.y.loop_max = output.s0.y.max
  let output.s0.y.loop_min = output.s0.y.min
  let output.s0.y.loop_extent = ((output.s0.y.max + 1) - output.s0.y.min)
  let output.s0.x.loop_max = output.s0.x.max
  let output.s0.x.loop_min = output.s0.x.min
  let output.s0.x.loop_extent = ((output.s0.x.max + 1) - output.s0.x.min)
  let output.s0.y.y.loop_extent = (((output.s0.y.loop_max - output.s0.y.loop_min) + 4)/4)
  let output.s0.y.y.loop_max = ((((output.s0.y.loop_max - output.s0.y.loop_min) + 4)/4) - 1)
  let output.s0.y.y.loop_min = 0
  let output.s0.y.yi.loop_extent = 4
  let output.s0.y.yi.loop_max = (4 - 1)
  let output.s0.y.yi.loop_min = 0
  let output.s0.x.x.loop_extent = (((output.s0.x.loop_max - output.s0.x.loop_min) + 128)/128)
  let output.s0.x.x.loop_max = ((((output.s0.x.loop_max - output.s0.x.loop_min) + 128)/128) - 1)
  let output.s0.x.x.loop_min = 0
  let output.s0.x.v16.loop_extent = 128
  let output.s0.x.v16.loop_max = (128 - 1)
  let output.s0.x.v16.loop_min = 0
  for<Hexagon> (output.s0.__outermost, 0, 1) {
    for (output.s0.y.y, output.s0.y.y.loop_min, output.s0.y.y.loop_extent) {
      let output.s0.y.min = (((output.s0.y.y*4) + output.s0.y.loop_min) + output.s0.y.yi.loop_min)
      let output.s0.y.max = (((output.s0.y.y*4) + output.s0.y.loop_min) + ((output.s0.y.yi.loop_extent + output.s0.y.yi.loop_min) - 1))
      let output.s0.x.min = (((output.s0.x.x.loop_min*128) + output.s0.x.loop_min) + output.s0.x.v16.loop_min)
      let output.s0.x.max = (((((output.s0.x.x.loop_extent + output.s0.x.x.loop_min)*128) + output.s0.x.loop_min) + -128) + ((output.s0.x.v16.loop_extent + output.s0.x.v16.loop_min) - 1))
      let rows.s0.y.max = output.s0.y.max
      let rows.s0.y.min = output.s0.y.min
      let rows.s0.x.max = (output.s0.x.max + 2)
      let rows.s0.x.min = (output.s0.x.min + -2)
      prefetch input()
      let output.s0.y.yi.base = ((output.s0.y.y*4) + output.s0.y.loop_min)
      for (output.s0.y.yi, output.s0.y.yi.loop_min, output.s0.y.yi.loop_extent) {
        let output.s0.y = (output.s0.y.yi.base + output.s0.y.yi)
        let output.s0.y.min = (output.s0.y.yi.base + output.s0.y.yi)
        let output.s0.y.max = output.s0.y.min
        let output.s0.x.min = (((output.s0.x.x.loop_min*128) + output.s0.x.loop_min) + output.s0.x.v16.loop_min)
        let output.s0.x.max = (((((output.s0.x.x.loop_extent + output.s0.x.x.loop_min)*128) + output.s0.x.loop_min) + -128) + ((output.s0.x.v16.loop_extent + output.s0.x.v16.loop_min) - 1))
        let rows.s0.y.max = output.s0.y.max
        let rows.s0.y.min = output.s0.y.min
        let rows.s0.x.max = (output.s0.x.max + 2)
        let rows.s0.x.min = (output.s0.x.min + -2)
        let rows.y.max_realized = (output.s0.y.yi + output.s0.y.yi.base)
        let rows.y.min_realized = (output.s0.y.yi + output.s0.y.yi.base)
        let rows.y.extent_realized = 1
        let rows.x.max_realized = max((let t17 = (let t13.s = (((output.s0.x.x.loop_min*128) + output.s0.x.loop_min) + (output.s0.x.v16.loop_extent + output.s0.x.v16.loop_min)) in min(select((output.s0.x.x.loop_min < ((output.s0.x.x.loop_extent + output.s0.x.x.loop_min) + -1)), (t13.s + -126), ((((output.s0.x.x.loop_min*128) + output.s0.x.loop_min) + output.s0.x.v16.loop_min) + -2)), ((((output.s0.x.x.loop_min*128) + output.s0.x.loop_min) + output.s0.x.v16.loop_min) + -2))) in (let t16 = (let t15.s = ((((output.s0.x.x.loop_extent + output.s0.x.x.loop_min)*128) + output.s0.x.loop_min) + (output.s0.x.v16.loop_extent + output.s0.x.v16.loop_min)) in max(select((output.s0.x.x.loop_min < ((output.s0.x.x.loop_extent + output.s0.x.x.loop_min) + -1)), (t15.s + -254), (((((output.s0.x.x.loop_extent + output.s0.x.x.loop_min)*128) + output.s0.x.loop_min) + output.s0.x.v16.loop_min) + -130)), (((((output.s0.x.x.loop_extent + output.s0.x.x.loop_min)*128) + output.s0.x.loop_min) + output.s0.x.v16.loop_min) + -130))) in ((((((((((output.s0.x.x.loop_extent + output.s0.x.x.loop_min)*128) + output.s0.x.loop_min) + (output.s0.x.v16.loop_extent + output.s0.x.v16.loop_min)) - t17) + -127)/128)*128) + t16) + 127))), (((((output.s0.x.x.loop_extent + output.s0.x.x.loop_min)*128) + output.s0.x.loop_min) + (output.s0.x.v16.loop_extent + output.s0.x.v16.loop_min)) + -127))
        let rows.x.min_realized = min((let t17 = (let t13.s = (((output.s0.x.x.loop_min*128) + output.s0.x.loop_min) + (output.s0.x.v16.loop_extent + output.s0.x.v16.loop_min)) in min(select((output.s0.x.x.loop_min < ((output.s0.x.x.loop_extent + output.s0.x.x.loop_min) + -1)), (t13.s + -126), ((((output.s0.x.x.loop_min*128) + output.s0.x.loop_min) + output.s0.x.v16.loop_min) + -2)), ((((output.s0.x.x.loop_min*128) + output.s0.x.loop_min) + output.s0.x.v16.loop_min) + -2))) in t17), ((((output.s0.x.x.loop_min*128) + output.s0.x.loop_min) + output.s0.x.v16.loop_min) + -2))
        let rows.x.extent_realized = ((max((let t17 = (let t13.s = (((output.s0.x.x.loop_min*128) + output.s0.x.loop_min) + (output.s0.x.v16.loop_extent + output.s0.x.v16.loop_min)) in min(select((output.s0.x.x.loop_min < ((output.s0.x.x.loop_extent + output.s0.x.x.loop_min) + -1)), (t13.s + -126), ((((output.s0.x.x.loop_min*128) + output.s0.x.loop_min) + output.s0.x.v16.loop_min) + -2)), ((((output.s0.x.x.loop_min*128) + output.s0.x.loop_min) + output.s0.x.v16.loop_min) + -2))) in (let t16 = (let t15.s = ((((output.s0.x.x.loop_extent + output.s0.x.x.loop_min)*128) + output.s0.x.loop_min) + (output.s0.x.v16.loop_extent + output.s0.x.v16.loop_min)) in max(select((output.s0.x.x.loop_min < ((output.s0.x.x.loop_extent + output.s0.x.x.loop_min) + -1)), (t15.s + -254), (((((output.s0.x.x.loop_extent + output.s0.x.x.loop_min)*128) + output.s0.x.loop_min) + output.s0.x.v16.loop_min) + -130)), (((((output.s0.x.x.loop_extent + output.s0.x.x.loop_min)*128) + output.s0.x.loop_min) + output.s0.x.v16.loop_min) + -130))) in ((((((((((output.s0.x.x.loop_extent + output.s0.x.x.loop_min)*128) + output.s0.x.loop_min) + (output.s0.x.v16.loop_extent + output.s0.x.v16.loop_min)) - t17) + -127)/128)*128) + t16) + 127))), (((((output.s0.x.x.loop_extent + output.s0.x.x.loop_min)*128) + output.s0.x.loop_min) + (output.s0.x.v16.loop_extent + output.s0.x.v16.loop_min)) + -127)) - min((let t17 = (let t13.s = (((output.s0.x.x.loop_min*128) + output.s0.x.loop_min) + (output.s0.x.v16.loop_extent + output.s0.x.v16.loop_min)) in min(select((output.s0.x.x.loop_min < ((output.s0.x.x.loop_extent + output.s0.x.x.loop_min) + -1)), (t13.s + -126), ((((output.s0.x.x.loop_min*128) + output.s0.x.loop_min) + output.s0.x.v16.loop_min) + -2)), ((((output.s0.x.x.loop_min*128) + output.s0.x.loop_min) + output.s0.x.v16.loop_min) + -2))) in t17), ((((output.s0.x.x.loop_min*128) + output.s0.x.loop_min) + output.s0.x.v16.loop_min) + -2))) + 1)
        realize rows([rows.x.min_realized, rows.x.extent_realized], [rows.y.min_realized, rows.y.extent_realized]) {
          for (output.s0.x.x, output.s0.x.x.loop_min, output.s0.x.x.loop_extent) {
            let output.s0.x.v16.base = ((output.s0.x.x*128) + output.s0.x.loop_min)
            let output.s0.y.min = (output.s0.y.yi.base + output.s0.y.yi)
            let output.s0.y.max = output.s0.y.min
            let output.s0.x.min = (output.s0.x.v16.base + output.s0.x.v16.loop_min)
            let output.s0.x.max = (output.s0.x.v16.base + ((output.s0.x.v16.loop_extent + output.s0.x.v16.loop_min) - 1))
            let rows.s0.y.max = output.s0.y.max
            let rows.s0.y.min = output.s0.y.min
            let rows.s0.x.max = (output.s0.x.max + 2)
            let rows.s0.x.min = select((output.s0.x.x <= output.s0.x.x.loop_min), ((((output.s0.x.x*128) + output.s0.x.loop_min) + output.s0.x.v16.loop_min) + -2), likely_if_innermost(((((((output.s0.x.x - 1)*128) + output.s0.x.loop_min) + (output.s0.x.v16.loop_extent + output.s0.x.v16.loop_min)) + 1) + 1)))
            produce rows {
              let rows.s0.y.loop_max = rows.s0.y.max
              let rows.s0.y.loop_min = rows.s0.y.min
              let rows.s0.y.loop_extent = ((rows.s0.y.max + 1) - rows.s0.y.min)
              let rows.s0.x.loop_max = rows.s0.x.max
              let rows.s0.x.loop_min = rows.s0.x.min
              let rows.s0.x.loop_extent = ((rows.s0.x.max + 1) - rows.s0.x.min)
              let rows.s0.x.x.loop_extent = (((rows.s0.x.loop_max - rows.s0.x.loop_min) + 128)/128)
              let rows.s0.x.x.loop_max = ((((rows.s0.x.loop_max - rows.s0.x.loop_min) + 128)/128) - 1)
              let rows.s0.x.x.loop_min = 0
              let rows.s0.x.v19.loop_extent = 128
              let rows.s0.x.v19.loop_max = (128 - 1)
              let rows.s0.x.v19.loop_min = 0
              for (rows.s0.y, rows.s0.y.loop_min, rows.s0.y.loop_extent) {
                for (rows.s0.x.x, rows.s0.x.x.loop_min, rows.s0.x.x.loop_extent) {
                  let rows.s0.x.v19.base = ((rows.s0.x.x*128) + rows.s0.x.loop_min)
                  vectorized (rows.s0.x.v19, rows.s0.x.v19.loop_min, rows.s0.x.v19.loop_extent) {
                    let rows.s0.x = (rows.s0.x.v19.base + rows.s0.x.v19)
                    rows((rows.s0.x.v19.base + rows.s0.x.v19), rows.s0.y) = (let t3 = (rows.s0.x.v19.base + rows.s0.x.v19) in ((((int16(input(t3, (rows.s0.y - 2))) + ((int16)4*int16(input(t3, (rows.s0.y - 1))))) + ((int16)6*int16(input(t3, rows.s0.y)))) + ((int16)4*int16(input(t3, (rows.s0.y + 1))))) + int16(input(t3, (rows.s0.y + 2)))))
                  }
                }
              }
            }
            consume rows {
              vectorized (output.s0.x.v16, output.s0.x.v16.loop_min, output.s0.x.v16.loop_extent) {
                let output.s0.x = (output.s0.x.v16.base + output.s0.x.v16)
                output((output.s0.x.v16.base + output.s0.x.v16), (output.s0.y.yi.base + output.s0.y.yi)) = (let t0 = (output.s0.y.yi.base + output.s0.y.yi) in (let t1 = (output.s0.x.v16.base + output.s0.x.v16) in uint8(shift_right(((((rows((t1 - 2), t0) + ((int16)4*rows((t1 - 1), t0))) + ((int16)6*rows(t1, t0))) + ((int16)4*rows((t1 + 1), t0))) + rows((t1 + 2), t0)), (int16)8))))
              }
            }
          }
        }
      }
    }
  }
}


Uniquifying variable names...
Lowering after uniquifying variable names:
let output.s0.y.max = ((0 + output.extent.1) - 1)
let output.s0.y.min = 0
let output.s0.x.max = ((0 + output.extent.0) - 1)
let output.s0.x.min = 0
let rows.s0.y.max = output.s0.y.max
let rows.s0.y.min = output.s0.y.min
let rows.s0.x.max = (output.s0.x.max + 2)
let rows.s0.x.min = (output.s0.x.min + -2)
let input.extent.0.required = (((((((rows.s0.x.max - rows.s0.x.min)/128)*128) + rows.s0.x.min) + 127) + 1) - rows.s0.x.min)
let input.min.0.required = rows.s0.x.min
let input.stride.0.required = 1
let input.extent.1.required = (((rows.s0.y.max + 2) + 1) - (rows.s0.y.min + -2))
let input.min.1.required = (rows.s0.y.min + -2)
let input.stride.1.required = (input.stride.0.required*input.extent.0.required)
let output.extent.0.required = (((((((output.s0.x.max - output.s0.x.min)/128)*128) + output.s0.x.min) + 127) + 1) - (output.s0.x.min + 0))
let output.min.0.required = (output.s0.x.min + 0)
let output.stride.0.required = 1
let output.extent.1.required = (((((((output.s0.y.max - output.s0.y.min)/4)*4) + output.s0.y.min) + 3) + 1) - (output.s0.y.min + 0))
let output.min.1.required = (output.s0.y.min + 0)
let output.stride.1.required = (output.stride.0.required*output.extent.0.required)
let input.stride.0.constrained = 1
let input.min.0.constrained = 0
let input.stride.1.constrained = ((input.stride.1/128)*128)
let input.min.1.constrained = 0
let output.stride.0.constrained = 1
let output.min.0.constrained = 0
let output.stride.1.constrained = ((output.stride.1/128)*128)
let output.min.1.constrained = 0
let input.stride.0.proposed = 1
let input.min.0.proposed = 0
let input.extent.0.proposed = input.extent.0.required
let input.stride.1.proposed = ((input.stride.1.required/128)*128)
let input.min.1.proposed = 0
let input.extent.1.proposed = input.extent.1.required
let output.stride.0.proposed = 1
let output.min.0.proposed = 0
let output.extent.0.proposed = output.extent.0.required
let output.stride.1.proposed = ((output.stride.1.required/128)*128)
let output.min.1.proposed = 0
let output.extent.1.proposed = output.extent.1.required
assert((input.stride.0 == input.stride.0.constrained), 0)
assert((input.min.0 == input.min.0.constrained), 0)
assert((input.stride.1 == input.stride.1.constrained), 0)
assert((input.min.1 == input.min.1.constrained), 0)
assert((output.stride.0 == output.stride.0.constrained), 0)
assert((output.min.0 == output.min.0.constrained), 0)
assert((output.stride.1 == output.stride.1.constrained), 0)
assert((output.min.1 == output.min.1.constrained), 0)
produce output {
  let output.s0.y.loop_max = output.s0.y.max
  let output.s0.y.loop_min = output.s0.y.min
  let output.s0.y.loop_extent = ((output.s0.y.max + 1) - output.s0.y.min)
  let output.s0.x.loop_max = output.s0.x.max
  let output.s0.x.loop_min = output.s0.x.min
  let output.s0.x.loop_extent = ((output.s0.x.max + 1) - output.s0.x.min)
  let output.s0.y.y.loop_extent = (((output.s0.y.loop_max - output.s0.y.loop_min) + 4)/4)
  let output.s0.y.y.loop_max = ((((output.s0.y.loop_max - output.s0.y.loop_min) + 4)/4) - 1)
  let output.s0.y.y.loop_min = 0
  let output.s0.y.yi.loop_extent = 4
  let output.s0.y.yi.loop_max = (4 - 1)
  let output.s0.y.yi.loop_min = 0
  let output.s0.x.x.loop_extent = (((output.s0.x.loop_max - output.s0.x.loop_min) + 128)/128)
  let output.s0.x.x.loop_max = ((((output.s0.x.loop_max - output.s0.x.loop_min) + 128)/128) - 1)
  let output.s0.x.x.loop_min = 0
  let output.s0.x.v16.loop_extent = 128
  let output.s0.x.v16.loop_max = (128 - 1)
  let output.s0.x.v16.loop_min = 0
  for<Hexagon> (output.s0.__outermost, 0, 1) {
    for (output.s0.y.y, output.s0.y.y.loop_min, output.s0.y.y.loop_extent) {
      let output.s0.y.min_1 = (((output.s0.y.y*4) + output.s0.y.loop_min) + output.s0.y.yi.loop_min)
      let output.s0.y.max_1 = (((output.s0.y.y*4) + output.s0.y.loop_min) + ((output.s0.y.yi.loop_extent + output.s0.y.yi.loop_min) - 1))
      let output.s0.x.min_1 = (((output.s0.x.x.loop_min*128) + output.s0.x.loop_min) + output.s0.x.v16.loop_min)
      let output.s0.x.max_1 = (((((output.s0.x.x.loop_extent + output.s0.x.x.loop_min)*128) + output.s0.x.loop_min) + -128) + ((output.s0.x.v16.loop_extent + output.s0.x.v16.loop_min) - 1))
      let rows.s0.y.max_1 = output.s0.y.max_1
      let rows.s0.y.min_1 = output.s0.y.min_1
      let rows.s0.x.max_1 = (output.s0.x.max_1 + 2)
      let rows.s0.x.min_1 = (output.s0.x.min_1 + -2)
      prefetch input()
      let output.s0.y.yi.base = ((output.s0.y.y*4) + output.s0.y.loop_min)
      for (output.s0.y.yi, output.s0.y.yi.loop_min, output.s0.y.yi.loop_extent) {
        let output.s0.y = (output.s0.y.yi.base + output.s0.y.yi)
        let output.s0.y.min_2 = (output.s0.y.yi.base + output.s0.y.yi)
        let output.s0.y.max_2 = output.s0.y.min_2
        let output.s0.x.min_2 = (((output.s0.x.x.loop_min*128) + output.s0.x.loop_min) + output.s0.x.v16.loop_min)
        let output.s0.x.max_2 = (((((output.s0.x.x.loop_extent + output.s0.x.x.loop_min)*128) + output.s0.x.loop_min) + -128) + ((output.s0.x.v16.loop_extent + output.s0.x.v16.loop_min) - 1))
        let rows.s0.y.max_2 = output.s0.y.max_2
        let rows.s0.y.min_2 = output.s0.y.min_2
        let rows.s0.x.max_2 = (output.s0.x.max_2 + 2)
        let rows.s0.x.min_2 = (output.s0.x.min_2 + -2)
        let rows.y.max_realized = (output.s0.y.yi + output.s0.y.yi.base)
        let rows.y.min_realized = (output.s0.y.yi + output.s0.y.yi.base)
        let rows.y.extent_realized = 1
        let rows.x.max_realized = max((let t17 = (let t13.s = (((output.s0.x.x.loop_min*128) + output.s0.x.loop_min) + (output.s0.x.v16.loop_extent + output.s0.x.v16.loop_min)) in min(select((output.s0.x.x.loop_min < ((output.s0.x.x.loop_extent + output.s0.x.x.loop_min) + -1)), (t13.s + -126), ((((output.s0.x.x.loop_min*128) + output.s0.x.loop_min) + output.s0.x.v16.loop_min) + -2)), ((((output.s0.x.x.loop_min*128) + output.s0.x.loop_min) + output.s0.x.v16.loop_min) + -2))) in (let t16 = (let t15.s = ((((output.s0.x.x.loop_extent + output.s0.x.x.loop_min)*128) + output.s0.x.loop_min) + (output.s0.x.v16.loop_extent + output.s0.x.v16.loop_min)) in max(select((output.s0.x.x.loop_min < ((output.s0.x.x.loop_extent + output.s0.x.x.loop_min) + -1)), (t15.s + -254), (((((output.s0.x.x.loop_extent + output.s0.x.x.loop_min)*128) + output.s0.x.loop_min) + output.s0.x.v16.loop_min) + -130)), (((((output.s0.x.x.loop_extent + output.s0.x.x.loop_min)*128) + output.s0.x.loop_min) + output.s0.x.v16.loop_min) + -130))) in ((((((((((output.s0.x.x.loop_extent + output.s0.x.x.loop_min)*128) + output.s0.x.loop_min) + (output.s0.x.v16.loop_extent + output.s0.x.v16.loop_min)) - t17) + -127)/128)*128) + t16) + 127))), (((((output.s0.x.x.loop_extent + output.s0.x.x.loop_min)*128) + output.s0.x.loop_min) + (output.s0.x.v16.loop_extent + output.s0.x.v16.loop_min)) + -127))
        let rows.x.min_realized = min((let t17 = (let t13.s = (((output.s0.x.x.loop_min*128) + output.s0.x.loop_min) + (output.s0.x.v16.loop_extent + output.s0.x.v16.loop_min)) in min(select((output.s0.x.x.loop_min < ((output.s0.x.x.loop_extent + output.s0.x.x.loop_min) + -1)), (t13.s + -126), ((((output.s0.x.x.loop_min*128) + output.s0.x.loop_min) + output.s0.x.v16.loop_min) + -2)), ((((output.s0.x.x.loop_min*128) + output.s0.x.loop_min) + output.s0.x.v16.loop_min) + -2))) in t17), ((((output.s0.x.x.loop_min*128) + output.s0.x.loop_min) + output.s0.x.v16.loop_min) + -2))
        let rows.x.extent_realized = ((max((let t17 = (let t13.s = (((output.s0.x.x.loop_min*128) + output.s0.x.loop_min) + (output.s0.x.v16.loop_extent + output.s0.x.v16.loop_min)) in min(select((output.s0.x.x.loop_min < ((output.s0.x.x.loop_extent + output.s0.x.x.loop_min) + -1)), (t13.s + -126), ((((output.s0.x.x.loop_min*128) + output.s0.x.loop_min) + output.s0.x.v16.loop_min) + -2)), ((((output.s0.x.x.loop_min*128) + output.s0.x.loop_min) + output.s0.x.v16.loop_min) + -2))) in (let t16 = (let t15.s = ((((output.s0.x.x.loop_extent + output.s0.x.x.loop_min)*128) + output.s0.x.loop_min) + (output.s0.x.v16.loop_extent + output.s0.x.v16.loop_min)) in max(select((output.s0.x.x.loop_min < ((output.s0.x.x.loop_extent + output.s0.x.x.loop_min) + -1)), (t15.s + -254), (((((output.s0.x.x.loop_extent + output.s0.x.x.loop_min)*128) + output.s0.x.loop_min) + output.s0.x.v16.loop_min) + -130)), (((((output.s0.x.x.loop_extent + output.s0.x.x.loop_min)*128) + output.s0.x.loop_min) + output.s0.x.v16.loop_min) + -130))) in ((((((((((output.s0.x.x.loop_extent + output.s0.x.x.loop_min)*128) + output.s0.x.loop_min) + (output.s0.x.v16.loop_extent + output.s0.x.v16.loop_min)) - t17) + -127)/128)*128) + t16) + 127))), (((((output.s0.x.x.loop_extent + output.s0.x.x.loop_min)*128) + output.s0.x.loop_min) + (output.s0.x.v16.loop_extent + output.s0.x.v16.loop_min)) + -127)) - min((let t17 = (let t13.s = (((output.s0.x.x.loop_min*128) + output.s0.x.loop_min) + (output.s0.x.v16.loop_extent + output.s0.x.v16.loop_min)) in min(select((output.s0.x.x.loop_min < ((output.s0.x.x.loop_extent + output.s0.x.x.loop_min) + -1)), (t13.s + -126), ((((output.s0.x.x.loop_min*128) + output.s0.x.loop_min) + output.s0.x.v16.loop_min) + -2)), ((((output.s0.x.x.loop_min*128) + output.s0.x.loop_min) + output.s0.x.v16.loop_min) + -2))) in t17), ((((output.s0.x.x.loop_min*128) + output.s0.x.loop_min) + output.s0.x.v16.loop_min) + -2))) + 1)
        realize rows([rows.x.min_realized, rows.x.extent_realized], [rows.y.min_realized, rows.y.extent_realized]) {
          for (output.s0.x.x, output.s0.x.x.loop_min, output.s0.x.x.loop_extent) {
            let output.s0.x.v16.base = ((output.s0.x.x*128) + output.s0.x.loop_min)
            let output.s0.y.min_3 = (output.s0.y.yi.base + output.s0.y.yi)
            let output.s0.y.max_3 = output.s0.y.min_3
            let output.s0.x.min_3 = (output.s0.x.v16.base + output.s0.x.v16.loop_min)
            let output.s0.x.max_3 = (output.s0.x.v16.base + ((output.s0.x.v16.loop_extent + output.s0.x.v16.loop_min) - 1))
            let rows.s0.y.max_3 = output.s0.y.max_3
            let rows.s0.y.min_3 = output.s0.y.min_3
            let rows.s0.x.max_3 = (output.s0.x.max_3 + 2)
            let rows.s0.x.min_3 = select((output.s0.x.x <= output.s0.x.x.loop_min), ((((output.s0.x.x*128) + output.s0.x.loop_min) + output.s0.x.v16.loop_min) + -2), likely_if_innermost(((((((output.s0.x.x - 1)*128) + output.s0.x.loop_min) + (output.s0.x.v16.loop_extent + output.s0.x.v16.loop_min)) + 1) + 1)))
            produce rows {
              let rows.s0.y.loop_max = rows.s0.y.max_3
              let rows.s0.y.loop_min = rows.s0.y.min_3
              let rows.s0.y.loop_extent = ((rows.s0.y.max_3 + 1) - rows.s0.y.min_3)
              let rows.s0.x.loop_max = rows.s0.x.max_3
              let rows.s0.x.loop_min = rows.s0.x.min_3
              let rows.s0.x.loop_extent = ((rows.s0.x.max_3 + 1) - rows.s0.x.min_3)
              let rows.s0.x.x.loop_extent = (((rows.s0.x.loop_max - rows.s0.x.loop_min) + 128)/128)
              let rows.s0.x.x.loop_max = ((((rows.s0.x.loop_max - rows.s0.x.loop_min) + 128)/128) - 1)
              let rows.s0.x.x.loop_min = 0
              let rows.s0.x.v19.loop_extent = 128
              let rows.s0.x.v19.loop_max = (128 - 1)
              let rows.s0.x.v19.loop_min = 0
              for (rows.s0.y, rows.s0.y.loop_min, rows.s0.y.loop_extent) {
                for (rows.s0.x.x, rows.s0.x.x.loop_min, rows.s0.x.x.loop_extent) {
                  let rows.s0.x.v19.base = ((rows.s0.x.x*128) + rows.s0.x.loop_min)
                  vectorized (rows.s0.x.v19, rows.s0.x.v19.loop_min, rows.s0.x.v19.loop_extent) {
                    let rows.s0.x = (rows.s0.x.v19.base + rows.s0.x.v19)
                    rows((rows.s0.x.v19.base + rows.s0.x.v19), rows.s0.y) = (let t3 = (rows.s0.x.v19.base + rows.s0.x.v19) in ((((int16(input(t3, (rows.s0.y - 2))) + ((int16)4*int16(input(t3, (rows.s0.y - 1))))) + ((int16)6*int16(input(t3, rows.s0.y)))) + ((int16)4*int16(input(t3, (rows.s0.y + 1))))) + int16(input(t3, (rows.s0.y + 2)))))
                  }
                }
              }
            }
            consume rows {
              vectorized (output.s0.x.v16, output.s0.x.v16.loop_min, output.s0.x.v16.loop_extent) {
                let output.s0.x = (output.s0.x.v16.base + output.s0.x.v16)
                output((output.s0.x.v16.base + output.s0.x.v16), (output.s0.y.yi.base + output.s0.y.yi)) = (let t0 = (output.s0.y.yi.base + output.s0.y.yi) in (let t1 = (output.s0.x.v16.base + output.s0.x.v16) in uint8(shift_right(((((rows((t1 - 2), t0) + ((int16)4*rows((t1 - 1), t0))) + ((int16)6*rows(t1, t0))) + ((int16)4*rows((t1 + 1), t0))) + rows((t1 + 2), t0)), (int16)8))))
              }
            }
          }
        }
      }
    }
  }
}


Simplifying...
Lowering after first simplification:
let output.s0.y.max = (output.extent.1 + -1)
let output.s0.y.min = 0
let output.s0.x.max = (output.extent.0 + -1)
let output.s0.x.min = 0
let rows.s0.y.max = (output.extent.1 + -1)
let rows.s0.y.min = 0
let rows.s0.x.max = (output.extent.0 + 1)
let rows.s0.x.min = -2
let input.extent.0.required = ((((output.extent.0 + 3)/128)*128) + 128)
let input.min.0.required = -2
let input.stride.0.required = 1
let input.extent.1.required = (output.extent.1 + 4)
let input.min.1.required = -2
let input.stride.1.required = ((((output.extent.0 + 3)/128)*128) + 128)
let output.extent.0.required = ((((output.extent.0 + -1)/128)*128) + 128)
let output.min.0.required = 0
let output.stride.0.required = 1
let output.extent.1.required = ((((output.extent.1 + -1)/4)*4) + 4)
let output.min.1.required = 0
let output.stride.1.required = ((((output.extent.0 + -1)/128)*128) + 128)
let input.stride.0.constrained = 1
let input.min.0.constrained = 0
let input.stride.1.constrained = ((input.stride.1/128)*128)
let input.min.1.constrained = 0
let output.stride.0.constrained = 1
let output.min.0.constrained = 0
let output.stride.1.constrained = ((output.stride.1/128)*128)
let output.min.1.constrained = 0
let input.stride.0.proposed = 1
let input.min.0.proposed = 0
let input.extent.0.proposed = ((((output.extent.0 + 3)/128)*128) + 128)
let input.stride.1.proposed = (((output.extent.0 + 131)/128)*128)
let input.min.1.proposed = 0
let input.extent.1.proposed = (output.extent.1 + 4)
let output.stride.0.proposed = 1
let output.min.0.proposed = 0
let output.extent.0.proposed = ((((output.extent.0 + -1)/128)*128) + 128)
let output.stride.1.proposed = (((output.extent.0 + 127)/128)*128)
let output.min.1.proposed = 0
let output.extent.1.proposed = ((((output.extent.1 + -1)/4)*4) + 4)
assert((input.stride.0 == 1), 0)
assert((input.min.0 == 0), 0)
assert(((input.stride.1 % 128) == 0), 0)
assert((input.min.1 == 0), 0)
assert((output.stride.0 == 1), 0)
assert((output.min.0 == 0), 0)
assert(((output.stride.1 % 128) == 0), 0)
assert((output.min.1 == 0), 0)
produce output {
  let output.s0.y.loop_max = (output.extent.1 + -1)
  let output.s0.y.loop_min = 0
  let output.s0.y.loop_extent = output.extent.1
  let output.s0.x.loop_max = (output.extent.0 + -1)
  let output.s0.x.loop_min = 0
  let output.s0.x.loop_extent = output.extent.0
  let output.s0.y.y.loop_extent = ((output.extent.1 + 3)/4)
  let output.s0.y.y.loop_max = ((output.extent.1 + -1)/4)
  let output.s0.y.y.loop_min = 0
  let output.s0.y.yi.loop_extent = 4
  let output.s0.y.yi.loop_max = 3
  let output.s0.y.yi.loop_min = 0
  let output.s0.x.x.loop_extent = ((output.extent.0 + 127)/128)
  let output.s0.x.x.loop_max = ((output.extent.0 + -1)/128)
  let output.s0.x.x.loop_min = 0
  let output.s0.x.v16.loop_extent = 128
  let output.s0.x.v16.loop_max = 127
  let output.s0.x.v16.loop_min = 0
  for<Hexagon> (output.s0.__outermost, 0, 1) {
    for (output.s0.y.y, 0, ((output.extent.1 + 3)/4)) {
      let output.s0.y.min_1 = (output.s0.y.y*4)
      let output.s0.y.max_1 = ((output.s0.y.y*4) + 3)
      let output.s0.x.min_1 = 0
      let output.s0.x.max_1 = ((((output.extent.0 + 127)/128)*128) + -1)
      let rows.s0.y.max_1 = ((output.s0.y.y*4) + 3)
      let rows.s0.y.min_1 = (output.s0.y.y*4)
      let rows.s0.x.max_1 = ((((output.extent.0 + 127)/128)*128) + 1)
      let rows.s0.x.min_1 = -2
      prefetch input()
      let output.s0.y.yi.base = (output.s0.y.y*4)
      for (output.s0.y.yi, 0, 4) {
        let output.s0.y = ((output.s0.y.y*4) + output.s0.y.yi)
        let output.s0.y.min_2 = ((output.s0.y.y*4) + output.s0.y.yi)
        let output.s0.y.max_2 = ((output.s0.y.y*4) + output.s0.y.yi)
        let output.s0.x.min_2 = 0
        let output.s0.x.max_2 = ((((output.extent.0 + 127)/128)*128) + -1)
        let rows.s0.y.max_2 = ((output.s0.y.y*4) + output.s0.y.yi)
        let rows.s0.y.min_2 = ((output.s0.y.y*4) + output.s0.y.yi)
        let rows.s0.x.max_2 = ((((output.extent.0 + 127)/128)*128) + 1)
        let rows.s0.x.min_2 = -2
        let rows.y.max_realized = ((output.s0.y.y*4) + output.s0.y.yi)
        let rows.y.min_realized = ((output.s0.y.y*4) + output.s0.y.yi)
        let rows.y.extent_realized = 1
        let rows.x.max_realized = max((let t17 = (let t13.s = 128 in -2) in (let t16 = (let t15.s = ((((output.extent.0 + 127)/128)*128) + 128) in (select((128 < output.extent.0), -126, -130) + (((output.extent.0 + 127)/128)*128))) in (((((output.extent.0 + 127)/128)*128) + t16) + 127))), ((((output.extent.0 + 127)/128)*128) + 1))
        let rows.x.min_realized = (let t17 = (let t13.s = 128 in -2) in -2)
        let rows.x.extent_realized = ((max((let t17 = (let t13.s = 128 in -2) in (let t16 = (let t15.s = ((((output.extent.0 + 127)/128)*128) + 128) in (select((128 < output.extent.0), -126, -130) + (((output.extent.0 + 127)/128)*128))) in (((((output.extent.0 + 127)/128)*128) + t16) + 127))), ((((output.extent.0 + 127)/128)*128) + 1)) - (let t17 = (let t13.s = 128 in -2) in -2)) + 1)
        let rows.x.extent_realized.s = (max((let t17 = (let t13.s = 128 in -2) in (let t16 = (let t15.s = ((((output.extent.0 + 127)/128)*128) + 128) in (select((128 < output.extent.0), -126, -130) + (((output.extent.0 + 127)/128)*128))) in (((((output.extent.0 + 127)/128)*128) + t16) + 127))), ((((output.extent.0 + 127)/128)*128) + 1)) - (let t17 = (let t13.s = 128 in -2) in -2))
        realize rows([-2, (rows.x.extent_realized.s + 1)], [((output.s0.y.y*4) + output.s0.y.yi), 1]) {
          for (output.s0.x.x, 0, ((output.extent.0 + 127)/128)) {
            let output.s0.x.v16.base = (output.s0.x.x*128)
            let output.s0.y.min_3 = ((output.s0.y.y*4) + output.s0.y.yi)
            let output.s0.y.max_3 = ((output.s0.y.y*4) + output.s0.y.yi)
            let output.s0.x.min_3 = (output.s0.x.x*128)
            let output.s0.x.max_3 = ((output.s0.x.x*128) + 127)
            let rows.s0.y.max_3 = ((output.s0.y.y*4) + output.s0.y.yi)
            let rows.s0.y.min_3 = ((output.s0.y.y*4) + output.s0.y.yi)
            let rows.s0.x.max_3 = ((output.s0.x.x*128) + 129)
            let rows.s0.x.min_3 = select((0 < output.s0.x.x), likely_if_innermost(((output.s0.x.x*128) + 2)), ((output.s0.x.x*128) + -2))
            produce rows {
              let rows.s0.y.loop_max = ((output.s0.y.y*4) + output.s0.y.yi)
              let rows.s0.y.loop_min = ((output.s0.y.y*4) + output.s0.y.yi)
              let rows.s0.y.loop_extent = 1
              let rows.s0.x.loop_max = ((output.s0.x.x*128) + 129)
              let rows.s0.x.loop_min = rows.s0.x.min_3
              let rows.s0.x.loop_extent = (((output.s0.x.x*128) - rows.s0.x.min_3) + 130)
              let rows.s0.x.x.loop_extent = (((257 - rows.s0.x.min_3)/128) + output.s0.x.x)
              let rows.s0.x.x.loop_max = ((((257 - rows.s0.x.min_3)/128) + output.s0.x.x) + -1)
              let rows.s0.x.x.loop_min = 0
              let rows.s0.x.v19.loop_extent = 128
              let rows.s0.x.v19.loop_max = 127
              let rows.s0.x.v19.loop_min = 0
              for (rows.s0.y, ((output.s0.y.y*4) + output.s0.y.yi), 1) {
                for (rows.s0.x.x, 0, (((257 - rows.s0.x.min_3)/128) + output.s0.x.x)) {
                  let rows.s0.x.v19.base = ((rows.s0.x.x*128) + rows.s0.x.min_3)
                  vectorized (rows.s0.x.v19, 0, 128) {
                    let rows.s0.x = (((rows.s0.x.x*128) + rows.s0.x.min_3) + rows.s0.x.v19)
                    rows((((rows.s0.x.x*128) + rows.s0.x.min_3) + rows.s0.x.v19), rows.s0.y) = (let t3 = (((rows.s0.x.x*128) + rows.s0.x.min_3) + rows.s0.x.v19) in (((int16(input((((rows.s0.x.x*128) + rows.s0.x.min_3) + rows.s0.x.v19), (rows.s0.y + 1)))*(int16)4) + ((int16(input((((rows.s0.x.x*128) + rows.s0.x.min_3) + rows.s0.x.v19), rows.s0.y))*(int16)6) + ((int16(input((((rows.s0.x.x*128) + rows.s0.x.min_3) + rows.s0.x.v19), (rows.s0.y + -1)))*(int16)4) + int16(input((((rows.s0.x.x*128) + rows.s0.x.min_3) + rows.s0.x.v19), (rows.s0.y + -2)))))) + int16(input((((rows.s0.x.x*128) + rows.s0.x.min_3) + rows.s0.x.v19), (rows.s0.y + 2)))))
                  }
                }
              }
            }
            consume rows {
              vectorized (output.s0.x.v16, 0, 128) {
                let output.s0.x = ((output.s0.x.x*128) + output.s0.x.v16)
                output(((output.s0.x.x*128) + output.s0.x.v16), ((output.s0.y.y*4) + output.s0.y.yi)) = (let t0 = ((output.s0.y.y*4) + output.s0.y.yi) in (let t1 = ((output.s0.x.x*128) + output.s0.x.v16) in uint8(((rows((((output.s0.x.x*128) + output.s0.x.v16) + 2), ((output.s0.y.y*4) + output.s0.y.yi)) + ((rows((((output.s0.x.x*128) + output.s0.x.v16) + 1), ((output.s0.y.y*4) + output.s0.y.yi))*(int16)4) + ((rows(((output.s0.x.x*128) + output.s0.x.v16), ((output.s0.y.y*4) + output.s0.y.yi))*(int16)6) + (rows((((output.s0.x.x*128) + output.s0.x.v16) + -2), ((output.s0.y.y*4) + output.s0.y.yi)) + (rows((((output.s0.x.x*128) + output.s0.x.v16) + -1), ((output.s0.y.y*4) + output.s0.y.yi))*(int16)4)))))/(int16)256))))
              }
            }
          }
        }
      }
    }
  }
}


Performing storage folding optimization...
Lowering after storage folding:
let output.s0.y.max = (output.extent.1 + -1)
let output.s0.y.min = 0
let output.s0.x.max = (output.extent.0 + -1)
let output.s0.x.min = 0
let rows.s0.y.max = (output.extent.1 + -1)
let rows.s0.y.min = 0
let rows.s0.x.max = (output.extent.0 + 1)
let rows.s0.x.min = -2
let input.extent.0.required = ((((output.extent.0 + 3)/128)*128) + 128)
let input.min.0.required = -2
let input.stride.0.required = 1
let input.extent.1.required = (output.extent.1 + 4)
let input.min.1.required = -2
let input.stride.1.required = ((((output.extent.0 + 3)/128)*128) + 128)
let output.extent.0.required = ((((output.extent.0 + -1)/128)*128) + 128)
let output.min.0.required = 0
let output.stride.0.required = 1
let output.extent.1.required = ((((output.extent.1 + -1)/4)*4) + 4)
let output.min.1.required = 0
let output.stride.1.required = ((((output.extent.0 + -1)/128)*128) + 128)
let input.stride.0.constrained = 1
let input.min.0.constrained = 0
let input.stride.1.constrained = ((input.stride.1/128)*128)
let input.min.1.constrained = 0
let output.stride.0.constrained = 1
let output.min.0.constrained = 0
let output.stride.1.constrained = ((output.stride.1/128)*128)
let output.min.1.constrained = 0
let input.stride.0.proposed = 1
let input.min.0.proposed = 0
let input.extent.0.proposed = ((((output.extent.0 + 3)/128)*128) + 128)
let input.stride.1.proposed = (((output.extent.0 + 131)/128)*128)
let input.min.1.proposed = 0
let input.extent.1.proposed = (output.extent.1 + 4)
let output.stride.0.proposed = 1
let output.min.0.proposed = 0
let output.extent.0.proposed = ((((output.extent.0 + -1)/128)*128) + 128)
let output.stride.1.proposed = (((output.extent.0 + 127)/128)*128)
let output.min.1.proposed = 0
let output.extent.1.proposed = ((((output.extent.1 + -1)/4)*4) + 4)
assert((input.stride.0 == 1), 0)
assert((input.min.0 == 0), 0)
assert(((input.stride.1 % 128) == 0), 0)
assert((input.min.1 == 0), 0)
assert((output.stride.0 == 1), 0)
assert((output.min.0 == 0), 0)
assert(((output.stride.1 % 128) == 0), 0)
assert((output.min.1 == 0), 0)
produce output {
  let output.s0.y.loop_max = (output.extent.1 + -1)
  let output.s0.y.loop_min = 0
  let output.s0.y.loop_extent = output.extent.1
  let output.s0.x.loop_max = (output.extent.0 + -1)
  let output.s0.x.loop_min = 0
  let output.s0.x.loop_extent = output.extent.0
  let output.s0.y.y.loop_extent = ((output.extent.1 + 3)/4)
  let output.s0.y.y.loop_max = ((output.extent.1 + -1)/4)
  let output.s0.y.y.loop_min = 0
  let output.s0.y.yi.loop_extent = 4
  let output.s0.y.yi.loop_max = 3
  let output.s0.y.yi.loop_min = 0
  let output.s0.x.x.loop_extent = ((output.extent.0 + 127)/128)
  let output.s0.x.x.loop_max = ((output.extent.0 + -1)/128)
  let output.s0.x.x.loop_min = 0
  let output.s0.x.v16.loop_extent = 128
  let output.s0.x.v16.loop_max = 127
  let output.s0.x.v16.loop_min = 0
  for<Hexagon> (output.s0.__outermost, 0, 1) {
    for (output.s0.y.y, 0, ((output.extent.1 + 3)/4)) {
      let output.s0.y.min_1 = (output.s0.y.y*4)
      let output.s0.y.max_1 = ((output.s0.y.y*4) + 3)
      let output.s0.x.min_1 = 0
      let output.s0.x.max_1 = ((((output.extent.0 + 127)/128)*128) + -1)
      let rows.s0.y.max_1 = ((output.s0.y.y*4) + 3)
      let rows.s0.y.min_1 = (output.s0.y.y*4)
      let rows.s0.x.max_1 = ((((output.extent.0 + 127)/128)*128) + 1)
      let rows.s0.x.min_1 = -2
      prefetch input()
      let output.s0.y.yi.base = (output.s0.y.y*4)
      for (output.s0.y.yi, 0, 4) {
        let output.s0.y = ((output.s0.y.y*4) + output.s0.y.yi)
        let output.s0.y.min_2 = ((output.s0.y.y*4) + output.s0.y.yi)
        let output.s0.y.max_2 = ((output.s0.y.y*4) + output.s0.y.yi)
        let output.s0.x.min_2 = 0
        let output.s0.x.max_2 = ((((output.extent.0 + 127)/128)*128) + -1)
        let rows.s0.y.max_2 = ((output.s0.y.y*4) + output.s0.y.yi)
        let rows.s0.y.min_2 = ((output.s0.y.y*4) + output.s0.y.yi)
        let rows.s0.x.max_2 = ((((output.extent.0 + 127)/128)*128) + 1)
        let rows.s0.x.min_2 = -2
        let rows.y.max_realized = ((output.s0.y.y*4) + output.s0.y.yi)
        let rows.y.min_realized = ((output.s0.y.y*4) + output.s0.y.yi)
        let rows.y.extent_realized = 1
        let rows.x.max_realized = max((let t16 = (select((128 < output.extent.0), -126, -130) + (((output.extent.0 + 127)/128)*128)) in (((((output.extent.0 + 127)/128)*128) + t16) + 127)), ((((output.extent.0 + 127)/128)*128) + 1))
        let rows.x.min_realized = -2
        let rows.x.extent_realized = (max((let t16 = (select((128 < output.extent.0), -126, -130) + (((output.extent.0 + 127)/128)*128)) in (((((output.extent.0 + 127)/128)*128) + t16) + 127)), ((((output.extent.0 + 127)/128)*128) + 1)) + 3)
        let rows.x.extent_realized.s = (max((let t16 = (select((128 < output.extent.0), -126, -130) + (((output.extent.0 + 127)/128)*128)) in (((((output.extent.0 + 127)/128)*128) + t16) + 127)), ((((output.extent.0 + 127)/128)*128) + 1)) + 2)
        realize rows([0, 384], [((output.s0.y.y*4) + output.s0.y.yi), 1]) {
          for (output.s0.x.x, 0, ((output.extent.0 + 127)/128)) {
            assert((256 <= 384), halide_error_fold_factor_too_small("rows", "x", 384, "output.s0.x.x", 256))
            let output.s0.x.v16.base = (output.s0.x.x*128)
            let output.s0.y.min_3 = ((output.s0.y.y*4) + output.s0.y.yi)
            let output.s0.y.max_3 = ((output.s0.y.y*4) + output.s0.y.yi)
            let output.s0.x.min_3 = (output.s0.x.x*128)
            let output.s0.x.max_3 = ((output.s0.x.x*128) + 127)
            let rows.s0.y.max_3 = ((output.s0.y.y*4) + output.s0.y.yi)
            let rows.s0.y.min_3 = ((output.s0.y.y*4) + output.s0.y.yi)
            let rows.s0.x.max_3 = ((output.s0.x.x*128) + 129)
            let rows.s0.x.min_3 = select((0 < output.s0.x.x), likely_if_innermost(((output.s0.x.x*128) + 2)), ((output.s0.x.x*128) + -2))
            produce rows {
              let rows.s0.y.loop_max = ((output.s0.y.y*4) + output.s0.y.yi)
              let rows.s0.y.loop_min = ((output.s0.y.y*4) + output.s0.y.yi)
              let rows.s0.y.loop_extent = 1
              let rows.s0.x.loop_max = ((output.s0.x.x*128) + 129)
              let rows.s0.x.loop_min = rows.s0.x.min_3
              let rows.s0.x.loop_extent = (((output.s0.x.x*128) - rows.s0.x.min_3) + 130)
              let rows.s0.x.x.loop_extent = (((257 - rows.s0.x.min_3)/128) + output.s0.x.x)
              let rows.s0.x.x.loop_max = ((((257 - rows.s0.x.min_3)/128) + output.s0.x.x) + -1)
              let rows.s0.x.x.loop_min = 0
              let rows.s0.x.v19.loop_extent = 128
              let rows.s0.x.v19.loop_max = 127
              let rows.s0.x.v19.loop_min = 0
              for (rows.s0.y, ((output.s0.y.y*4) + output.s0.y.yi), 1) {
                for (rows.s0.x.x, 0, (((257 - rows.s0.x.min_3)/128) + output.s0.x.x)) {
                  let rows.s0.x.v19.base = ((rows.s0.x.x*128) + rows.s0.x.min_3)
                  vectorized (rows.s0.x.v19, 0, 128) {
                    let rows.s0.x = (((rows.s0.x.x*128) + rows.s0.x.min_3) + rows.s0.x.v19)
                    rows(((((rows.s0.x.x*128) + rows.s0.x.min_3) + rows.s0.x.v19) % 384), rows.s0.y) = (let t3 = (((rows.s0.x.x*128) + rows.s0.x.min_3) + rows.s0.x.v19) in (((int16(input((((rows.s0.x.x*128) + rows.s0.x.min_3) + rows.s0.x.v19), (rows.s0.y + 1)))*(int16)4) + ((int16(input((((rows.s0.x.x*128) + rows.s0.x.min_3) + rows.s0.x.v19), rows.s0.y))*(int16)6) + ((int16(input((((rows.s0.x.x*128) + rows.s0.x.min_3) + rows.s0.x.v19), (rows.s0.y + -1)))*(int16)4) + int16(input((((rows.s0.x.x*128) + rows.s0.x.min_3) + rows.s0.x.v19), (rows.s0.y + -2)))))) + int16(input((((rows.s0.x.x*128) + rows.s0.x.min_3) + rows.s0.x.v19), (rows.s0.y + 2)))))
                  }
                }
              }
            }
            consume rows {
              vectorized (output.s0.x.v16, 0, 128) {
                let output.s0.x = ((output.s0.x.x*128) + output.s0.x.v16)
                output(((output.s0.x.x*128) + output.s0.x.v16), ((output.s0.y.y*4) + output.s0.y.yi)) = (let t0 = ((output.s0.y.y*4) + output.s0.y.yi) in (let t1 = ((output.s0.x.x*128) + output.s0.x.v16) in uint8(((rows(((((output.s0.x.x*128) + output.s0.x.v16) + 2) % 384), ((output.s0.y.y*4) + output.s0.y.yi)) + ((rows(((((output.s0.x.x*128) + output.s0.x.v16) + 1) % 384), ((output.s0.y.y*4) + output.s0.y.yi))*(int16)4) + ((rows((((output.s0.x.x*128) + output.s0.x.v16) % 384), ((output.s0.y.y*4) + output.s0.y.yi))*(int16)6) + (rows(((((output.s0.x.x*128) + output.s0.x.v16) + -2) % 384), ((output.s0.y.y*4) + output.s0.y.yi)) + (rows(((((output.s0.x.x*128) + output.s0.x.v16) + -1) % 384), ((output.s0.y.y*4) + output.s0.y.yi))*(int16)4)))))/(int16)256))))
              }
            }
          }
        }
      }
    }
  }
}

Injecting debug_to_file calls...
Lowering after injecting debug_to_file calls:
let output.s0.y.max = (output.extent.1 + -1)
let output.s0.y.min = 0
let output.s0.x.max = (output.extent.0 + -1)
let output.s0.x.min = 0
let rows.s0.y.max = (output.extent.1 + -1)
let rows.s0.y.min = 0
let rows.s0.x.max = (output.extent.0 + 1)
let rows.s0.x.min = -2
let input.extent.0.required = ((((output.extent.0 + 3)/128)*128) + 128)
let input.min.0.required = -2
let input.stride.0.required = 1
let input.extent.1.required = (output.extent.1 + 4)
let input.min.1.required = -2
let input.stride.1.required = ((((output.extent.0 + 3)/128)*128) + 128)
let output.extent.0.required = ((((output.extent.0 + -1)/128)*128) + 128)
let output.min.0.required = 0
let output.stride.0.required = 1
let output.extent.1.required = ((((output.extent.1 + -1)/4)*4) + 4)
let output.min.1.required = 0
let output.stride.1.required = ((((output.extent.0 + -1)/128)*128) + 128)
let input.stride.0.constrained = 1
let input.min.0.constrained = 0
let input.stride.1.constrained = ((input.stride.1/128)*128)
let input.min.1.constrained = 0
let output.stride.0.constrained = 1
let output.min.0.constrained = 0
let output.stride.1.constrained = ((output.stride.1/128)*128)
let output.min.1.constrained = 0
let input.stride.0.proposed = 1
let input.min.0.proposed = 0
let input.extent.0.proposed = ((((output.extent.0 + 3)/128)*128) + 128)
let input.stride.1.proposed = (((output.extent.0 + 131)/128)*128)
let input.min.1.proposed = 0
let input.extent.1.proposed = (output.extent.1 + 4)
let output.stride.0.proposed = 1
let output.min.0.proposed = 0
let output.extent.0.proposed = ((((output.extent.0 + -1)/128)*128) + 128)
let output.stride.1.proposed = (((output.extent.0 + 127)/128)*128)
let output.min.1.proposed = 0
let output.extent.1.proposed = ((((output.extent.1 + -1)/4)*4) + 4)
assert((input.stride.0 == 1), 0)
assert((input.min.0 == 0), 0)
assert(((input.stride.1 % 128) == 0), 0)
assert((input.min.1 == 0), 0)
assert((output.stride.0 == 1), 0)
assert((output.min.0 == 0), 0)
assert(((output.stride.1 % 128) == 0), 0)
assert((output.min.1 == 0), 0)
produce output {
  let output.s0.y.loop_max = (output.extent.1 + -1)
  let output.s0.y.loop_min = 0
  let output.s0.y.loop_extent = output.extent.1
  let output.s0.x.loop_max = (output.extent.0 + -1)
  let output.s0.x.loop_min = 0
  let output.s0.x.loop_extent = output.extent.0
  let output.s0.y.y.loop_extent = ((output.extent.1 + 3)/4)
  let output.s0.y.y.loop_max = ((output.extent.1 + -1)/4)
  let output.s0.y.y.loop_min = 0
  let output.s0.y.yi.loop_extent = 4
  let output.s0.y.yi.loop_max = 3
  let output.s0.y.yi.loop_min = 0
  let output.s0.x.x.loop_extent = ((output.extent.0 + 127)/128)
  let output.s0.x.x.loop_max = ((output.extent.0 + -1)/128)
  let output.s0.x.x.loop_min = 0
  let output.s0.x.v16.loop_extent = 128
  let output.s0.x.v16.loop_max = 127
  let output.s0.x.v16.loop_min = 0
  for<Hexagon> (output.s0.__outermost, 0, 1) {
    for (output.s0.y.y, 0, ((output.extent.1 + 3)/4)) {
      let output.s0.y.min_1 = (output.s0.y.y*4)
      let output.s0.y.max_1 = ((output.s0.y.y*4) + 3)
      let output.s0.x.min_1 = 0
      let output.s0.x.max_1 = ((((output.extent.0 + 127)/128)*128) + -1)
      let rows.s0.y.max_1 = ((output.s0.y.y*4) + 3)
      let rows.s0.y.min_1 = (output.s0.y.y*4)
      let rows.s0.x.max_1 = ((((output.extent.0 + 127)/128)*128) + 1)
      let rows.s0.x.min_1 = -2
      prefetch input()
      let output.s0.y.yi.base = (output.s0.y.y*4)
      for (output.s0.y.yi, 0, 4) {
        let output.s0.y = ((output.s0.y.y*4) + output.s0.y.yi)
        let output.s0.y.min_2 = ((output.s0.y.y*4) + output.s0.y.yi)
        let output.s0.y.max_2 = ((output.s0.y.y*4) + output.s0.y.yi)
        let output.s0.x.min_2 = 0
        let output.s0.x.max_2 = ((((output.extent.0 + 127)/128)*128) + -1)
        let rows.s0.y.max_2 = ((output.s0.y.y*4) + output.s0.y.yi)
        let rows.s0.y.min_2 = ((output.s0.y.y*4) + output.s0.y.yi)
        let rows.s0.x.max_2 = ((((output.extent.0 + 127)/128)*128) + 1)
        let rows.s0.x.min_2 = -2
        let rows.y.max_realized = ((output.s0.y.y*4) + output.s0.y.yi)
        let rows.y.min_realized = ((output.s0.y.y*4) + output.s0.y.yi)
        let rows.y.extent_realized = 1
        let rows.x.max_realized = max((let t16 = (select((128 < output.extent.0), -126, -130) + (((output.extent.0 + 127)/128)*128)) in (((((output.extent.0 + 127)/128)*128) + t16) + 127)), ((((output.extent.0 + 127)/128)*128) + 1))
        let rows.x.min_realized = -2
        let rows.x.extent_realized = (max((let t16 = (select((128 < output.extent.0), -126, -130) + (((output.extent.0 + 127)/128)*128)) in (((((output.extent.0 + 127)/128)*128) + t16) + 127)), ((((output.extent.0 + 127)/128)*128) + 1)) + 3)
        let rows.x.extent_realized.s = (max((let t16 = (select((128 < output.extent.0), -126, -130) + (((output.extent.0 + 127)/128)*128)) in (((((output.extent.0 + 127)/128)*128) + t16) + 127)), ((((output.extent.0 + 127)/128)*128) + 1)) + 2)
        realize rows([0, 384], [((output.s0.y.y*4) + output.s0.y.yi), 1]) {
          for (output.s0.x.x, 0, ((output.extent.0 + 127)/128)) {
            assert((256 <= 384), halide_error_fold_factor_too_small("rows", "x", 384, "output.s0.x.x", 256))
            let output.s0.x.v16.base = (output.s0.x.x*128)
            let output.s0.y.min_3 = ((output.s0.y.y*4) + output.s0.y.yi)
            let output.s0.y.max_3 = ((output.s0.y.y*4) + output.s0.y.yi)
            let output.s0.x.min_3 = (output.s0.x.x*128)
            let output.s0.x.max_3 = ((output.s0.x.x*128) + 127)
            let rows.s0.y.max_3 = ((output.s0.y.y*4) + output.s0.y.yi)
            let rows.s0.y.min_3 = ((output.s0.y.y*4) + output.s0.y.yi)
            let rows.s0.x.max_3 = ((output.s0.x.x*128) + 129)
            let rows.s0.x.min_3 = select((0 < output.s0.x.x), likely_if_innermost(((output.s0.x.x*128) + 2)), ((output.s0.x.x*128) + -2))
            produce rows {
              let rows.s0.y.loop_max = ((output.s0.y.y*4) + output.s0.y.yi)
              let rows.s0.y.loop_min = ((output.s0.y.y*4) + output.s0.y.yi)
              let rows.s0.y.loop_extent = 1
              let rows.s0.x.loop_max = ((output.s0.x.x*128) + 129)
              let rows.s0.x.loop_min = rows.s0.x.min_3
              let rows.s0.x.loop_extent = (((output.s0.x.x*128) - rows.s0.x.min_3) + 130)
              let rows.s0.x.x.loop_extent = (((257 - rows.s0.x.min_3)/128) + output.s0.x.x)
              let rows.s0.x.x.loop_max = ((((257 - rows.s0.x.min_3)/128) + output.s0.x.x) + -1)
              let rows.s0.x.x.loop_min = 0
              let rows.s0.x.v19.loop_extent = 128
              let rows.s0.x.v19.loop_max = 127
              let rows.s0.x.v19.loop_min = 0
              for (rows.s0.y, ((output.s0.y.y*4) + output.s0.y.yi), 1) {
                for (rows.s0.x.x, 0, (((257 - rows.s0.x.min_3)/128) + output.s0.x.x)) {
                  let rows.s0.x.v19.base = ((rows.s0.x.x*128) + rows.s0.x.min_3)
                  vectorized (rows.s0.x.v19, 0, 128) {
                    let rows.s0.x = (((rows.s0.x.x*128) + rows.s0.x.min_3) + rows.s0.x.v19)
                    rows(((((rows.s0.x.x*128) + rows.s0.x.min_3) + rows.s0.x.v19) % 384), rows.s0.y) = (let t3 = (((rows.s0.x.x*128) + rows.s0.x.min_3) + rows.s0.x.v19) in (((int16(input((((rows.s0.x.x*128) + rows.s0.x.min_3) + rows.s0.x.v19), (rows.s0.y + 1)))*(int16)4) + ((int16(input((((rows.s0.x.x*128) + rows.s0.x.min_3) + rows.s0.x.v19), rows.s0.y))*(int16)6) + ((int16(input((((rows.s0.x.x*128) + rows.s0.x.min_3) + rows.s0.x.v19), (rows.s0.y + -1)))*(int16)4) + int16(input((((rows.s0.x.x*128) + rows.s0.x.min_3) + rows.s0.x.v19), (rows.s0.y + -2)))))) + int16(input((((rows.s0.x.x*128) + rows.s0.x.min_3) + rows.s0.x.v19), (rows.s0.y + 2)))))
                  }
                }
              }
            }
            consume rows {
              vectorized (output.s0.x.v16, 0, 128) {
                let output.s0.x = ((output.s0.x.x*128) + output.s0.x.v16)
                output(((output.s0.x.x*128) + output.s0.x.v16), ((output.s0.y.y*4) + output.s0.y.yi)) = (let t0 = ((output.s0.y.y*4) + output.s0.y.yi) in (let t1 = ((output.s0.x.x*128) + output.s0.x.v16) in uint8(((rows(((((output.s0.x.x*128) + output.s0.x.v16) + 2) % 384), ((output.s0.y.y*4) + output.s0.y.yi)) + ((rows(((((output.s0.x.x*128) + output.s0.x.v16) + 1) % 384), ((output.s0.y.y*4) + output.s0.y.yi))*(int16)4) + ((rows((((output.s0.x.x*128) + output.s0.x.v16) % 384), ((output.s0.y.y*4) + output.s0.y.yi))*(int16)6) + (rows(((((output.s0.x.x*128) + output.s0.x.v16) + -2) % 384), ((output.s0.y.y*4) + output.s0.y.yi)) + (rows(((((output.s0.x.x*128) + output.s0.x.v16) + -1) % 384), ((output.s0.y.y*4) + output.s0.y.yi))*(int16)4)))))/(int16)256))))
              }
            }
          }
        }
      }
    }
  }
}

Injecting prefetches...
Lowering after injecting prefetches:
let output.s0.y.max = (output.extent.1 + -1)
let output.s0.y.min = 0
let output.s0.x.max = (output.extent.0 + -1)
let output.s0.x.min = 0
let rows.s0.y.max = (output.extent.1 + -1)
let rows.s0.y.min = 0
let rows.s0.x.max = (output.extent.0 + 1)
let rows.s0.x.min = -2
let input.extent.0.required = ((((output.extent.0 + 3)/128)*128) + 128)
let input.min.0.required = -2
let input.stride.0.required = 1
let input.extent.1.required = (output.extent.1 + 4)
let input.min.1.required = -2
let input.stride.1.required = ((((output.extent.0 + 3)/128)*128) + 128)
let output.extent.0.required = ((((output.extent.0 + -1)/128)*128) + 128)
let output.min.0.required = 0
let output.stride.0.required = 1
let output.extent.1.required = ((((output.extent.1 + -1)/4)*4) + 4)
let output.min.1.required = 0
let output.stride.1.required = ((((output.extent.0 + -1)/128)*128) + 128)
let input.stride.0.constrained = 1
let input.min.0.constrained = 0
let input.stride.1.constrained = ((input.stride.1/128)*128)
let input.min.1.constrained = 0
let output.stride.0.constrained = 1
let output.min.0.constrained = 0
let output.stride.1.constrained = ((output.stride.1/128)*128)
let output.min.1.constrained = 0
let input.stride.0.proposed = 1
let input.min.0.proposed = 0
let input.extent.0.proposed = ((((output.extent.0 + 3)/128)*128) + 128)
let input.stride.1.proposed = (((output.extent.0 + 131)/128)*128)
let input.min.1.proposed = 0
let input.extent.1.proposed = (output.extent.1 + 4)
let output.stride.0.proposed = 1
let output.min.0.proposed = 0
let output.extent.0.proposed = ((((output.extent.0 + -1)/128)*128) + 128)
let output.stride.1.proposed = (((output.extent.0 + 127)/128)*128)
let output.min.1.proposed = 0
let output.extent.1.proposed = ((((output.extent.1 + -1)/4)*4) + 4)
assert((input.stride.0 == 1), 0)
assert((input.min.0 == 0), 0)
assert(((input.stride.1 % 128) == 0), 0)
assert((input.min.1 == 0), 0)
assert((output.stride.0 == 1), 0)
assert((output.min.0 == 0), 0)
assert(((output.stride.1 % 128) == 0), 0)
assert((output.min.1 == 0), 0)
produce output {
  let output.s0.y.loop_max = (output.extent.1 + -1)
  let output.s0.y.loop_min = 0
  let output.s0.y.loop_extent = output.extent.1
  let output.s0.x.loop_max = (output.extent.0 + -1)
  let output.s0.x.loop_min = 0
  let output.s0.x.loop_extent = output.extent.0
  let output.s0.y.y.loop_extent = ((output.extent.1 + 3)/4)
  let output.s0.y.y.loop_max = ((output.extent.1 + -1)/4)
  let output.s0.y.y.loop_min = 0
  let output.s0.y.yi.loop_extent = 4
  let output.s0.y.yi.loop_max = 3
  let output.s0.y.yi.loop_min = 0
  let output.s0.x.x.loop_extent = ((output.extent.0 + 127)/128)
  let output.s0.x.x.loop_max = ((output.extent.0 + -1)/128)
  let output.s0.x.x.loop_min = 0
  let output.s0.x.v16.loop_extent = 128
  let output.s0.x.v16.loop_max = 127
  let output.s0.x.v16.loop_min = 0
  for<Hexagon> (output.s0.__outermost, 0, 1) {
    for (output.s0.y.y, 0, ((output.extent.1 + 3)/4)) {
      let output.s0.y.min_1 = (output.s0.y.y*4)
      let output.s0.y.max_1 = ((output.s0.y.y*4) + 3)
      let output.s0.x.min_1 = 0
      let output.s0.x.max_1 = ((((output.extent.0 + 127)/128)*128) + -1)
      let rows.s0.y.max_1 = ((output.s0.y.y*4) + 3)
      let rows.s0.y.min_1 = (output.s0.y.y*4)
      let rows.s0.x.max_1 = ((((output.extent.0 + 127)/128)*128) + 1)
      let rows.s0.x.min_1 = -2
      prefetch input([-2, (((((output.extent.0 + 127)/128)*128) + (select((128 < output.extent.0), 2, -2) + (((output.extent.0 + -1)/128)*128))) + 130)], [((output.s0.y.y*4) + 6), 8])
      let output.s0.y.yi.base = (output.s0.y.y*4)
      for (output.s0.y.yi, 0, 4) {
        let output.s0.y = ((output.s0.y.y*4) + output.s0.y.yi)
        let output.s0.y.min_2 = ((output.s0.y.y*4) + output.s0.y.yi)
        let output.s0.y.max_2 = ((output.s0.y.y*4) + output.s0.y.yi)
        let output.s0.x.min_2 = 0
        let output.s0.x.max_2 = ((((output.extent.0 + 127)/128)*128) + -1)
        let rows.s0.y.max_2 = ((output.s0.y.y*4) + output.s0.y.yi)
        let rows.s0.y.min_2 = ((output.s0.y.y*4) + output.s0.y.yi)
        let rows.s0.x.max_2 = ((((output.extent.0 + 127)/128)*128) + 1)
        let rows.s0.x.min_2 = -2
        let rows.y.max_realized = ((output.s0.y.y*4) + output.s0.y.yi)
        let rows.y.min_realized = ((output.s0.y.y*4) + output.s0.y.yi)
        let rows.y.extent_realized = 1
        let rows.x.max_realized = max((let t16 = (select((128 < output.extent.0), -126, -130) + (((output.extent.0 + 127)/128)*128)) in (((((output.extent.0 + 127)/128)*128) + t16) + 127)), ((((output.extent.0 + 127)/128)*128) + 1))
        let rows.x.min_realized = -2
        let rows.x.extent_realized = (max((let t16 = (select((128 < output.extent.0), -126, -130) + (((output.extent.0 + 127)/128)*128)) in (((((output.extent.0 + 127)/128)*128) + t16) + 127)), ((((output.extent.0 + 127)/128)*128) + 1)) + 3)
        let rows.x.extent_realized.s = (max((let t16 = (select((128 < output.extent.0), -126, -130) + (((output.extent.0 + 127)/128)*128)) in (((((output.extent.0 + 127)/128)*128) + t16) + 127)), ((((output.extent.0 + 127)/128)*128) + 1)) + 2)
        realize rows([0, 384], [((output.s0.y.y*4) + output.s0.y.yi), 1]) {
          for (output.s0.x.x, 0, ((output.extent.0 + 127)/128)) {
            assert((256 <= 384), halide_error_fold_factor_too_small("rows", "x", 384, "output.s0.x.x", 256))
            let output.s0.x.v16.base = (output.s0.x.x*128)
            let output.s0.y.min_3 = ((output.s0.y.y*4) + output.s0.y.yi)
            let output.s0.y.max_3 = ((output.s0.y.y*4) + output.s0.y.yi)
            let output.s0.x.min_3 = (output.s0.x.x*128)
            let output.s0.x.max_3 = ((output.s0.x.x*128) + 127)
            let rows.s0.y.max_3 = ((output.s0.y.y*4) + output.s0.y.yi)
            let rows.s0.y.min_3 = ((output.s0.y.y*4) + output.s0.y.yi)
            let rows.s0.x.max_3 = ((output.s0.x.x*128) + 129)
            let rows.s0.x.min_3 = select((0 < output.s0.x.x), likely_if_innermost(((output.s0.x.x*128) + 2)), ((output.s0.x.x*128) + -2))
            produce rows {
              let rows.s0.y.loop_max = ((output.s0.y.y*4) + output.s0.y.yi)
              let rows.s0.y.loop_min = ((output.s0.y.y*4) + output.s0.y.yi)
              let rows.s0.y.loop_extent = 1
              let rows.s0.x.loop_max = ((output.s0.x.x*128) + 129)
              let rows.s0.x.loop_min = rows.s0.x.min_3
              let rows.s0.x.loop_extent = (((output.s0.x.x*128) - rows.s0.x.min_3) + 130)
              let rows.s0.x.x.loop_extent = (((257 - rows.s0.x.min_3)/128) + output.s0.x.x)
              let rows.s0.x.x.loop_max = ((((257 - rows.s0.x.min_3)/128) + output.s0.x.x) + -1)
              let rows.s0.x.x.loop_min = 0
              let rows.s0.x.v19.loop_extent = 128
              let rows.s0.x.v19.loop_max = 127
              let rows.s0.x.v19.loop_min = 0
              for (rows.s0.y, ((output.s0.y.y*4) + output.s0.y.yi), 1) {
                for (rows.s0.x.x, 0, (((257 - rows.s0.x.min_3)/128) + output.s0.x.x)) {
                  let rows.s0.x.v19.base = ((rows.s0.x.x*128) + rows.s0.x.min_3)
                  vectorized (rows.s0.x.v19, 0, 128) {
                    let rows.s0.x = (((rows.s0.x.x*128) + rows.s0.x.min_3) + rows.s0.x.v19)
                    rows(((((rows.s0.x.x*128) + rows.s0.x.min_3) + rows.s0.x.v19) % 384), rows.s0.y) = (let t3 = (((rows.s0.x.x*128) + rows.s0.x.min_3) + rows.s0.x.v19) in (((int16(input((((rows.s0.x.x*128) + rows.s0.x.min_3) + rows.s0.x.v19), (rows.s0.y + 1)))*(int16)4) + ((int16(input((((rows.s0.x.x*128) + rows.s0.x.min_3) + rows.s0.x.v19), rows.s0.y))*(int16)6) + ((int16(input((((rows.s0.x.x*128) + rows.s0.x.min_3) + rows.s0.x.v19), (rows.s0.y + -1)))*(int16)4) + int16(input((((rows.s0.x.x*128) + rows.s0.x.min_3) + rows.s0.x.v19), (rows.s0.y + -2)))))) + int16(input((((rows.s0.x.x*128) + rows.s0.x.min_3) + rows.s0.x.v19), (rows.s0.y + 2)))))
                  }
                }
              }
            }
            consume rows {
              vectorized (output.s0.x.v16, 0, 128) {
                let output.s0.x = ((output.s0.x.x*128) + output.s0.x.v16)
                output(((output.s0.x.x*128) + output.s0.x.v16), ((output.s0.y.y*4) + output.s0.y.yi)) = (let t0 = ((output.s0.y.y*4) + output.s0.y.yi) in (let t1 = ((output.s0.x.x*128) + output.s0.x.v16) in uint8(((rows(((((output.s0.x.x*128) + output.s0.x.v16) + 2) % 384), ((output.s0.y.y*4) + output.s0.y.yi)) + ((rows(((((output.s0.x.x*128) + output.s0.x.v16) + 1) % 384), ((output.s0.y.y*4) + output.s0.y.yi))*(int16)4) + ((rows((((output.s0.x.x*128) + output.s0.x.v16) % 384), ((output.s0.y.y*4) + output.s0.y.yi))*(int16)6) + (rows(((((output.s0.x.x*128) + output.s0.x.v16) + -2) % 384), ((output.s0.y.y*4) + output.s0.y.yi)) + (rows(((((output.s0.x.x*128) + output.s0.x.v16) + -1) % 384), ((output.s0.y.y*4) + output.s0.y.yi))*(int16)4)))))/(int16)256))))
              }
            }
          }
        }
      }
    }
  }
}


Dynamically skipping stages...
skip_stages checking cols
skip_stages checking rows
skip_stages checking input_16
skip_stages checking input_im
Lowering after dynamically skipping stages:
let output.s0.y.max = (output.extent.1 + -1)
let output.s0.y.min = 0
let output.s0.x.max = (output.extent.0 + -1)
let output.s0.x.min = 0
let rows.s0.y.max = (output.extent.1 + -1)
let rows.s0.y.min = 0
let rows.s0.x.max = (output.extent.0 + 1)
let rows.s0.x.min = -2
let input.extent.0.required = ((((output.extent.0 + 3)/128)*128) + 128)
let input.min.0.required = -2
let input.stride.0.required = 1
let input.extent.1.required = (output.extent.1 + 4)
let input.min.1.required = -2
let input.stride.1.required = ((((output.extent.0 + 3)/128)*128) + 128)
let output.extent.0.required = ((((output.extent.0 + -1)/128)*128) + 128)
let output.min.0.required = 0
let output.stride.0.required = 1
let output.extent.1.required = ((((output.extent.1 + -1)/4)*4) + 4)
let output.min.1.required = 0
let output.stride.1.required = ((((output.extent.0 + -1)/128)*128) + 128)
let input.stride.0.constrained = 1
let input.min.0.constrained = 0
let input.stride.1.constrained = ((input.stride.1/128)*128)
let input.min.1.constrained = 0
let output.stride.0.constrained = 1
let output.min.0.constrained = 0
let output.stride.1.constrained = ((output.stride.1/128)*128)
let output.min.1.constrained = 0
let input.stride.0.proposed = 1
let input.min.0.proposed = 0
let input.extent.0.proposed = ((((output.extent.0 + 3)/128)*128) + 128)
let input.stride.1.proposed = (((output.extent.0 + 131)/128)*128)
let input.min.1.proposed = 0
let input.extent.1.proposed = (output.extent.1 + 4)
let output.stride.0.proposed = 1
let output.min.0.proposed = 0
let output.extent.0.proposed = ((((output.extent.0 + -1)/128)*128) + 128)
let output.stride.1.proposed = (((output.extent.0 + 127)/128)*128)
let output.min.1.proposed = 0
let output.extent.1.proposed = ((((output.extent.1 + -1)/4)*4) + 4)
assert((input.stride.0 == 1), 0)
assert((input.min.0 == 0), 0)
assert(((input.stride.1 % 128) == 0), 0)
assert((input.min.1 == 0), 0)
assert((output.stride.0 == 1), 0)
assert((output.min.0 == 0), 0)
assert(((output.stride.1 % 128) == 0), 0)
assert((output.min.1 == 0), 0)
produce output {
  let output.s0.y.loop_max = (output.extent.1 + -1)
  let output.s0.y.loop_min = 0
  let output.s0.y.loop_extent = output.extent.1
  let output.s0.x.loop_max = (output.extent.0 + -1)
  let output.s0.x.loop_min = 0
  let output.s0.x.loop_extent = output.extent.0
  let output.s0.y.y.loop_extent = ((output.extent.1 + 3)/4)
  let output.s0.y.y.loop_max = ((output.extent.1 + -1)/4)
  let output.s0.y.y.loop_min = 0
  let output.s0.y.yi.loop_extent = 4
  let output.s0.y.yi.loop_max = 3
  let output.s0.y.yi.loop_min = 0
  let output.s0.x.x.loop_extent = ((output.extent.0 + 127)/128)
  let output.s0.x.x.loop_max = ((output.extent.0 + -1)/128)
  let output.s0.x.x.loop_min = 0
  let output.s0.x.v16.loop_extent = 128
  let output.s0.x.v16.loop_max = 127
  let output.s0.x.v16.loop_min = 0
  for<Hexagon> (output.s0.__outermost, 0, 1) {
    for (output.s0.y.y, 0, ((output.extent.1 + 3)/4)) {
      let output.s0.y.min_1 = (output.s0.y.y*4)
      let output.s0.y.max_1 = ((output.s0.y.y*4) + 3)
      let output.s0.x.min_1 = 0
      let output.s0.x.max_1 = ((((output.extent.0 + 127)/128)*128) + -1)
      let rows.s0.y.max_1 = ((output.s0.y.y*4) + 3)
      let rows.s0.y.min_1 = (output.s0.y.y*4)
      let rows.s0.x.max_1 = ((((output.extent.0 + 127)/128)*128) + 1)
      let rows.s0.x.min_1 = -2
      prefetch input([-2, (((((output.extent.0 + 127)/128)*128) + (select((128 < output.extent.0), 2, -2) + (((output.extent.0 + -1)/128)*128))) + 130)], [((output.s0.y.y*4) + 6), 8])
      let output.s0.y.yi.base = (output.s0.y.y*4)
      for (output.s0.y.yi, 0, 4) {
        let output.s0.y = ((output.s0.y.y*4) + output.s0.y.yi)
        let output.s0.y.min_2 = ((output.s0.y.y*4) + output.s0.y.yi)
        let output.s0.y.max_2 = ((output.s0.y.y*4) + output.s0.y.yi)
        let output.s0.x.min_2 = 0
        let output.s0.x.max_2 = ((((output.extent.0 + 127)/128)*128) + -1)
        let rows.s0.y.max_2 = ((output.s0.y.y*4) + output.s0.y.yi)
        let rows.s0.y.min_2 = ((output.s0.y.y*4) + output.s0.y.yi)
        let rows.s0.x.max_2 = ((((output.extent.0 + 127)/128)*128) + 1)
        let rows.s0.x.min_2 = -2
        let rows.y.max_realized = ((output.s0.y.y*4) + output.s0.y.yi)
        let rows.y.min_realized = ((output.s0.y.y*4) + output.s0.y.yi)
        let rows.y.extent_realized = 1
        let rows.x.max_realized = max((let t16 = (select((128 < output.extent.0), -126, -130) + (((output.extent.0 + 127)/128)*128)) in (((((output.extent.0 + 127)/128)*128) + t16) + 127)), ((((output.extent.0 + 127)/128)*128) + 1))
        let rows.x.min_realized = -2
        let rows.x.extent_realized = (max((let t16 = (select((128 < output.extent.0), -126, -130) + (((output.extent.0 + 127)/128)*128)) in (((((output.extent.0 + 127)/128)*128) + t16) + 127)), ((((output.extent.0 + 127)/128)*128) + 1)) + 3)
        let rows.x.extent_realized.s = (max((let t16 = (select((128 < output.extent.0), -126, -130) + (((output.extent.0 + 127)/128)*128)) in (((((output.extent.0 + 127)/128)*128) + t16) + 127)), ((((output.extent.0 + 127)/128)*128) + 1)) + 2)
        realize rows([0, 384], [((output.s0.y.y*4) + output.s0.y.yi), 1]) {
          for (output.s0.x.x, 0, ((output.extent.0 + 127)/128)) {
            assert((256 <= 384), halide_error_fold_factor_too_small("rows", "x", 384, "output.s0.x.x", 256))
            let output.s0.x.v16.base = (output.s0.x.x*128)
            let output.s0.y.min_3 = ((output.s0.y.y*4) + output.s0.y.yi)
            let output.s0.y.max_3 = ((output.s0.y.y*4) + output.s0.y.yi)
            let output.s0.x.min_3 = (output.s0.x.x*128)
            let output.s0.x.max_3 = ((output.s0.x.x*128) + 127)
            let rows.s0.y.max_3 = ((output.s0.y.y*4) + output.s0.y.yi)
            let rows.s0.y.min_3 = ((output.s0.y.y*4) + output.s0.y.yi)
            let rows.s0.x.max_3 = ((output.s0.x.x*128) + 129)
            let rows.s0.x.min_3 = select((0 < output.s0.x.x), likely_if_innermost(((output.s0.x.x*128) + 2)), ((output.s0.x.x*128) + -2))
            produce rows {
              let rows.s0.y.loop_max = ((output.s0.y.y*4) + output.s0.y.yi)
              let rows.s0.y.loop_min = ((output.s0.y.y*4) + output.s0.y.yi)
              let rows.s0.y.loop_extent = 1
              let rows.s0.x.loop_max = ((output.s0.x.x*128) + 129)
              let rows.s0.x.loop_min = rows.s0.x.min_3
              let rows.s0.x.loop_extent = (((output.s0.x.x*128) - rows.s0.x.min_3) + 130)
              let rows.s0.x.x.loop_extent = (((257 - rows.s0.x.min_3)/128) + output.s0.x.x)
              let rows.s0.x.x.loop_max = ((((257 - rows.s0.x.min_3)/128) + output.s0.x.x) + -1)
              let rows.s0.x.x.loop_min = 0
              let rows.s0.x.v19.loop_extent = 128
              let rows.s0.x.v19.loop_max = 127
              let rows.s0.x.v19.loop_min = 0
              for (rows.s0.y, ((output.s0.y.y*4) + output.s0.y.yi), 1) {
                for (rows.s0.x.x, 0, (((257 - rows.s0.x.min_3)/128) + output.s0.x.x)) {
                  let rows.s0.x.v19.base = ((rows.s0.x.x*128) + rows.s0.x.min_3)
                  vectorized (rows.s0.x.v19, 0, 128) {
                    let rows.s0.x = (((rows.s0.x.x*128) + rows.s0.x.min_3) + rows.s0.x.v19)
                    rows(((((rows.s0.x.x*128) + rows.s0.x.min_3) + rows.s0.x.v19) % 384), rows.s0.y) = (let t3 = (((rows.s0.x.x*128) + rows.s0.x.min_3) + rows.s0.x.v19) in (((int16(input((((rows.s0.x.x*128) + rows.s0.x.min_3) + rows.s0.x.v19), (rows.s0.y + 1)))*(int16)4) + ((int16(input((((rows.s0.x.x*128) + rows.s0.x.min_3) + rows.s0.x.v19), rows.s0.y))*(int16)6) + ((int16(input((((rows.s0.x.x*128) + rows.s0.x.min_3) + rows.s0.x.v19), (rows.s0.y + -1)))*(int16)4) + int16(input((((rows.s0.x.x*128) + rows.s0.x.min_3) + rows.s0.x.v19), (rows.s0.y + -2)))))) + int16(input((((rows.s0.x.x*128) + rows.s0.x.min_3) + rows.s0.x.v19), (rows.s0.y + 2)))))
                  }
                }
              }
            }
            consume rows {
              vectorized (output.s0.x.v16, 0, 128) {
                let output.s0.x = ((output.s0.x.x*128) + output.s0.x.v16)
                output(((output.s0.x.x*128) + output.s0.x.v16), ((output.s0.y.y*4) + output.s0.y.yi)) = (let t0 = ((output.s0.y.y*4) + output.s0.y.yi) in (let t1 = ((output.s0.x.x*128) + output.s0.x.v16) in uint8(((rows(((((output.s0.x.x*128) + output.s0.x.v16) + 2) % 384), ((output.s0.y.y*4) + output.s0.y.yi)) + ((rows(((((output.s0.x.x*128) + output.s0.x.v16) + 1) % 384), ((output.s0.y.y*4) + output.s0.y.yi))*(int16)4) + ((rows((((output.s0.x.x*128) + output.s0.x.v16) % 384), ((output.s0.y.y*4) + output.s0.y.yi))*(int16)6) + (rows(((((output.s0.x.x*128) + output.s0.x.v16) + -2) % 384), ((output.s0.y.y*4) + output.s0.y.yi)) + (rows(((((output.s0.x.x*128) + output.s0.x.v16) + -1) % 384), ((output.s0.y.y*4) + output.s0.y.yi))*(int16)4)))))/(int16)256))))
              }
            }
          }
        }
      }
    }
  }
}


Forking asynchronous producers...
Lowering after forking asynchronous producers:
let output.s0.y.max = (output.extent.1 + -1)
let output.s0.y.min = 0
let output.s0.x.max = (output.extent.0 + -1)
let output.s0.x.min = 0
let rows.s0.y.max = (output.extent.1 + -1)
let rows.s0.y.min = 0
let rows.s0.x.max = (output.extent.0 + 1)
let rows.s0.x.min = -2
let input.extent.0.required = ((((output.extent.0 + 3)/128)*128) + 128)
let input.min.0.required = -2
let input.stride.0.required = 1
let input.extent.1.required = (output.extent.1 + 4)
let input.min.1.required = -2
let input.stride.1.required = ((((output.extent.0 + 3)/128)*128) + 128)
let output.extent.0.required = ((((output.extent.0 + -1)/128)*128) + 128)
let output.min.0.required = 0
let output.stride.0.required = 1
let output.extent.1.required = ((((output.extent.1 + -1)/4)*4) + 4)
let output.min.1.required = 0
let output.stride.1.required = ((((output.extent.0 + -1)/128)*128) + 128)
let input.stride.0.constrained = 1
let input.min.0.constrained = 0
let input.stride.1.constrained = ((input.stride.1/128)*128)
let input.min.1.constrained = 0
let output.stride.0.constrained = 1
let output.min.0.constrained = 0
let output.stride.1.constrained = ((output.stride.1/128)*128)
let output.min.1.constrained = 0
let input.stride.0.proposed = 1
let input.min.0.proposed = 0
let input.extent.0.proposed = ((((output.extent.0 + 3)/128)*128) + 128)
let input.stride.1.proposed = (((output.extent.0 + 131)/128)*128)
let input.min.1.proposed = 0
let input.extent.1.proposed = (output.extent.1 + 4)
let output.stride.0.proposed = 1
let output.min.0.proposed = 0
let output.extent.0.proposed = ((((output.extent.0 + -1)/128)*128) + 128)
let output.stride.1.proposed = (((output.extent.0 + 127)/128)*128)
let output.min.1.proposed = 0
let output.extent.1.proposed = ((((output.extent.1 + -1)/4)*4) + 4)
assert((input.stride.0 == 1), 0)
assert((input.min.0 == 0), 0)
assert(((input.stride.1 % 128) == 0), 0)
assert((input.min.1 == 0), 0)
assert((output.stride.0 == 1), 0)
assert((output.min.0 == 0), 0)
assert(((output.stride.1 % 128) == 0), 0)
assert((output.min.1 == 0), 0)
let output.s0.y.loop_max = (output.extent.1 + -1)
let output.s0.y.loop_min = 0
let output.s0.y.loop_extent = output.extent.1
let output.s0.x.loop_max = (output.extent.0 + -1)
let output.s0.x.loop_min = 0
let output.s0.x.loop_extent = output.extent.0
let output.s0.y.y.loop_extent = ((output.extent.1 + 3)/4)
let output.s0.y.y.loop_max = ((output.extent.1 + -1)/4)
let output.s0.y.y.loop_min = 0
let output.s0.y.yi.loop_extent = 4
let output.s0.y.yi.loop_max = 3
let output.s0.y.yi.loop_min = 0
let output.s0.x.x.loop_extent = ((output.extent.0 + 127)/128)
let output.s0.x.x.loop_max = ((output.extent.0 + -1)/128)
let output.s0.x.x.loop_min = 0
let output.s0.x.v16.loop_extent = 128
let output.s0.x.v16.loop_max = 127
let output.s0.x.v16.loop_min = 0
produce output {
  for<Hexagon> (output.s0.__outermost, 0, 1) {
    for (output.s0.y.y, 0, ((output.extent.1 + 3)/4)) {
      let output.s0.y.min_1 = (output.s0.y.y*4)
      let output.s0.y.max_1 = ((output.s0.y.y*4) + 3)
      let output.s0.x.min_1 = 0
      let output.s0.x.max_1 = ((((output.extent.0 + 127)/128)*128) + -1)
      let rows.s0.y.max_1 = ((output.s0.y.y*4) + 3)
      let rows.s0.y.min_1 = (output.s0.y.y*4)
      let rows.s0.x.max_1 = ((((output.extent.0 + 127)/128)*128) + 1)
      let rows.s0.x.min_1 = -2
      prefetch input([-2, (((((output.extent.0 + 127)/128)*128) + (select((128 < output.extent.0), 2, -2) + (((output.extent.0 + -1)/128)*128))) + 130)], [((output.s0.y.y*4) + 6), 8])
      let output.s0.y.yi.base = (output.s0.y.y*4)
      for (output.s0.y.yi, 0, 4) {
        let output.s0.y = ((output.s0.y.y*4) + output.s0.y.yi)
        let output.s0.y.min_2 = ((output.s0.y.y*4) + output.s0.y.yi)
        let output.s0.y.max_2 = ((output.s0.y.y*4) + output.s0.y.yi)
        let output.s0.x.min_2 = 0
        let output.s0.x.max_2 = ((((output.extent.0 + 127)/128)*128) + -1)
        let rows.s0.y.max_2 = ((output.s0.y.y*4) + output.s0.y.yi)
        let rows.s0.y.min_2 = ((output.s0.y.y*4) + output.s0.y.yi)
        let rows.s0.x.max_2 = ((((output.extent.0 + 127)/128)*128) + 1)
        let rows.s0.x.min_2 = -2
        let rows.y.max_realized = ((output.s0.y.y*4) + output.s0.y.yi)
        let rows.y.min_realized = ((output.s0.y.y*4) + output.s0.y.yi)
        let rows.y.extent_realized = 1
        let rows.x.max_realized = max((let t16 = (select((128 < output.extent.0), -126, -130) + (((output.extent.0 + 127)/128)*128)) in (((((output.extent.0 + 127)/128)*128) + t16) + 127)), ((((output.extent.0 + 127)/128)*128) + 1))
        let rows.x.min_realized = -2
        let rows.x.extent_realized = (max((let t16 = (select((128 < output.extent.0), -126, -130) + (((output.extent.0 + 127)/128)*128)) in (((((output.extent.0 + 127)/128)*128) + t16) + 127)), ((((output.extent.0 + 127)/128)*128) + 1)) + 3)
        let rows.x.extent_realized.s = (max((let t16 = (select((128 < output.extent.0), -126, -130) + (((output.extent.0 + 127)/128)*128)) in (((((output.extent.0 + 127)/128)*128) + t16) + 127)), ((((output.extent.0 + 127)/128)*128) + 1)) + 2)
        realize rows([0, 384], [((output.s0.y.y*4) + output.s0.y.yi), 1]) {
          for (output.s0.x.x, 0, ((output.extent.0 + 127)/128)) {
            assert((256 <= 384), halide_error_fold_factor_too_small("rows", "x", 384, "output.s0.x.x", 256))
            let output.s0.x.v16.base = (output.s0.x.x*128)
            let output.s0.y.min_3 = ((output.s0.y.y*4) + output.s0.y.yi)
            let output.s0.y.max_3 = ((output.s0.y.y*4) + output.s0.y.yi)
            let output.s0.x.min_3 = (output.s0.x.x*128)
            let output.s0.x.max_3 = ((output.s0.x.x*128) + 127)
            let rows.s0.y.max_3 = ((output.s0.y.y*4) + output.s0.y.yi)
            let rows.s0.y.min_3 = ((output.s0.y.y*4) + output.s0.y.yi)
            let rows.s0.x.max_3 = ((output.s0.x.x*128) + 129)
            let rows.s0.x.min_3 = select((0 < output.s0.x.x), likely_if_innermost(((output.s0.x.x*128) + 2)), ((output.s0.x.x*128) + -2))
            let rows.s0.y.loop_max = ((output.s0.y.y*4) + output.s0.y.yi)
            let rows.s0.y.loop_min = ((output.s0.y.y*4) + output.s0.y.yi)
            let rows.s0.y.loop_extent = 1
            let rows.s0.x.loop_max = ((output.s0.x.x*128) + 129)
            let rows.s0.x.loop_min = rows.s0.x.min_3
            let rows.s0.x.loop_extent = (((output.s0.x.x*128) - rows.s0.x.min_3) + 130)
            let rows.s0.x.x.loop_extent = (((257 - rows.s0.x.min_3)/128) + output.s0.x.x)
            let rows.s0.x.x.loop_max = ((((257 - rows.s0.x.min_3)/128) + output.s0.x.x) + -1)
            let rows.s0.x.x.loop_min = 0
            let rows.s0.x.v19.loop_extent = 128
            let rows.s0.x.v19.loop_max = 127
            let rows.s0.x.v19.loop_min = 0
            produce rows {
              for (rows.s0.y, ((output.s0.y.y*4) + output.s0.y.yi), 1) {
                for (rows.s0.x.x, 0, (((257 - rows.s0.x.min_3)/128) + output.s0.x.x)) {
                  let rows.s0.x.v19.base = ((rows.s0.x.x*128) + rows.s0.x.min_3)
                  vectorized (rows.s0.x.v19, 0, 128) {
                    let rows.s0.x = (((rows.s0.x.x*128) + rows.s0.x.min_3) + rows.s0.x.v19)
                    rows(((((rows.s0.x.x*128) + rows.s0.x.min_3) + rows.s0.x.v19) % 384), rows.s0.y) = (let t3 = (((rows.s0.x.x*128) + rows.s0.x.min_3) + rows.s0.x.v19) in (((int16(input((((rows.s0.x.x*128) + rows.s0.x.min_3) + rows.s0.x.v19), (rows.s0.y + 1)))*(int16)4) + ((int16(input((((rows.s0.x.x*128) + rows.s0.x.min_3) + rows.s0.x.v19), rows.s0.y))*(int16)6) + ((int16(input((((rows.s0.x.x*128) + rows.s0.x.min_3) + rows.s0.x.v19), (rows.s0.y + -1)))*(int16)4) + int16(input((((rows.s0.x.x*128) + rows.s0.x.min_3) + rows.s0.x.v19), (rows.s0.y + -2)))))) + int16(input((((rows.s0.x.x*128) + rows.s0.x.min_3) + rows.s0.x.v19), (rows.s0.y + 2)))))
                  }
                }
              }
            }
            consume rows {
              vectorized (output.s0.x.v16, 0, 128) {
                let output.s0.x = ((output.s0.x.x*128) + output.s0.x.v16)
                output(((output.s0.x.x*128) + output.s0.x.v16), ((output.s0.y.y*4) + output.s0.y.yi)) = (let t0 = ((output.s0.y.y*4) + output.s0.y.yi) in (let t1 = ((output.s0.x.x*128) + output.s0.x.v16) in uint8(((rows(((((output.s0.x.x*128) + output.s0.x.v16) + 2) % 384), ((output.s0.y.y*4) + output.s0.y.yi)) + ((rows(((((output.s0.x.x*128) + output.s0.x.v16) + 1) % 384), ((output.s0.y.y*4) + output.s0.y.yi))*(int16)4) + ((rows((((output.s0.x.x*128) + output.s0.x.v16) % 384), ((output.s0.y.y*4) + output.s0.y.yi))*(int16)6) + (rows(((((output.s0.x.x*128) + output.s0.x.v16) + -2) % 384), ((output.s0.y.y*4) + output.s0.y.yi)) + (rows(((((output.s0.x.x*128) + output.s0.x.v16) + -1) % 384), ((output.s0.y.y*4) + output.s0.y.yi))*(int16)4)))))/(int16)256))))
              }
            }
          }
        }
      }
    }
  }
}

Destructuring tuple-valued realizations...
Lowering after destructuring tuple-valued realizations:
let output.s0.y.max = (output.extent.1 + -1)
let output.s0.y.min = 0
let output.s0.x.max = (output.extent.0 + -1)
let output.s0.x.min = 0
let rows.s0.y.max = (output.extent.1 + -1)
let rows.s0.y.min = 0
let rows.s0.x.max = (output.extent.0 + 1)
let rows.s0.x.min = -2
let input.extent.0.required = ((((output.extent.0 + 3)/128)*128) + 128)
let input.min.0.required = -2
let input.stride.0.required = 1
let input.extent.1.required = (output.extent.1 + 4)
let input.min.1.required = -2
let input.stride.1.required = ((((output.extent.0 + 3)/128)*128) + 128)
let output.extent.0.required = ((((output.extent.0 + -1)/128)*128) + 128)
let output.min.0.required = 0
let output.stride.0.required = 1
let output.extent.1.required = ((((output.extent.1 + -1)/4)*4) + 4)
let output.min.1.required = 0
let output.stride.1.required = ((((output.extent.0 + -1)/128)*128) + 128)
let input.stride.0.constrained = 1
let input.min.0.constrained = 0
let input.stride.1.constrained = ((input.stride.1/128)*128)
let input.min.1.constrained = 0
let output.stride.0.constrained = 1
let output.min.0.constrained = 0
let output.stride.1.constrained = ((output.stride.1/128)*128)
let output.min.1.constrained = 0
let input.stride.0.proposed = 1
let input.min.0.proposed = 0
let input.extent.0.proposed = ((((output.extent.0 + 3)/128)*128) + 128)
let input.stride.1.proposed = (((output.extent.0 + 131)/128)*128)
let input.min.1.proposed = 0
let input.extent.1.proposed = (output.extent.1 + 4)
let output.stride.0.proposed = 1
let output.min.0.proposed = 0
let output.extent.0.proposed = ((((output.extent.0 + -1)/128)*128) + 128)
let output.stride.1.proposed = (((output.extent.0 + 127)/128)*128)
let output.min.1.proposed = 0
let output.extent.1.proposed = ((((output.extent.1 + -1)/4)*4) + 4)
assert((input.stride.0 == 1), 0)
assert((input.min.0 == 0), 0)
assert(((input.stride.1 % 128) == 0), 0)
assert((input.min.1 == 0), 0)
assert((output.stride.0 == 1), 0)
assert((output.min.0 == 0), 0)
assert(((output.stride.1 % 128) == 0), 0)
assert((output.min.1 == 0), 0)
let output.s0.y.loop_max = (output.extent.1 + -1)
let output.s0.y.loop_min = 0
let output.s0.y.loop_extent = output.extent.1
let output.s0.x.loop_max = (output.extent.0 + -1)
let output.s0.x.loop_min = 0
let output.s0.x.loop_extent = output.extent.0
let output.s0.y.y.loop_extent = ((output.extent.1 + 3)/4)
let output.s0.y.y.loop_max = ((output.extent.1 + -1)/4)
let output.s0.y.y.loop_min = 0
let output.s0.y.yi.loop_extent = 4
let output.s0.y.yi.loop_max = 3
let output.s0.y.yi.loop_min = 0
let output.s0.x.x.loop_extent = ((output.extent.0 + 127)/128)
let output.s0.x.x.loop_max = ((output.extent.0 + -1)/128)
let output.s0.x.x.loop_min = 0
let output.s0.x.v16.loop_extent = 128
let output.s0.x.v16.loop_max = 127
let output.s0.x.v16.loop_min = 0
produce output {
  for<Hexagon> (output.s0.__outermost, 0, 1) {
    for (output.s0.y.y, 0, ((output.extent.1 + 3)/4)) {
      let output.s0.y.min_1 = (output.s0.y.y*4)
      let output.s0.y.max_1 = ((output.s0.y.y*4) + 3)
      let output.s0.x.min_1 = 0
      let output.s0.x.max_1 = ((((output.extent.0 + 127)/128)*128) + -1)
      let rows.s0.y.max_1 = ((output.s0.y.y*4) + 3)
      let rows.s0.y.min_1 = (output.s0.y.y*4)
      let rows.s0.x.max_1 = ((((output.extent.0 + 127)/128)*128) + 1)
      let rows.s0.x.min_1 = -2
      prefetch input([-2, (((((output.extent.0 + 127)/128)*128) + (select((128 < output.extent.0), 2, -2) + (((output.extent.0 + -1)/128)*128))) + 130)], [((output.s0.y.y*4) + 6), 8])
      let output.s0.y.yi.base = (output.s0.y.y*4)
      for (output.s0.y.yi, 0, 4) {
        let output.s0.y = ((output.s0.y.y*4) + output.s0.y.yi)
        let output.s0.y.min_2 = ((output.s0.y.y*4) + output.s0.y.yi)
        let output.s0.y.max_2 = ((output.s0.y.y*4) + output.s0.y.yi)
        let output.s0.x.min_2 = 0
        let output.s0.x.max_2 = ((((output.extent.0 + 127)/128)*128) + -1)
        let rows.s0.y.max_2 = ((output.s0.y.y*4) + output.s0.y.yi)
        let rows.s0.y.min_2 = ((output.s0.y.y*4) + output.s0.y.yi)
        let rows.s0.x.max_2 = ((((output.extent.0 + 127)/128)*128) + 1)
        let rows.s0.x.min_2 = -2
        let rows.y.max_realized = ((output.s0.y.y*4) + output.s0.y.yi)
        let rows.y.min_realized = ((output.s0.y.y*4) + output.s0.y.yi)
        let rows.y.extent_realized = 1
        let rows.x.max_realized = max((let t16 = (select((128 < output.extent.0), -126, -130) + (((output.extent.0 + 127)/128)*128)) in (((((output.extent.0 + 127)/128)*128) + t16) + 127)), ((((output.extent.0 + 127)/128)*128) + 1))
        let rows.x.min_realized = -2
        let rows.x.extent_realized = (max((let t16 = (select((128 < output.extent.0), -126, -130) + (((output.extent.0 + 127)/128)*128)) in (((((output.extent.0 + 127)/128)*128) + t16) + 127)), ((((output.extent.0 + 127)/128)*128) + 1)) + 3)
        let rows.x.extent_realized.s = (max((let t16 = (select((128 < output.extent.0), -126, -130) + (((output.extent.0 + 127)/128)*128)) in (((((output.extent.0 + 127)/128)*128) + t16) + 127)), ((((output.extent.0 + 127)/128)*128) + 1)) + 2)
        realize rows([0, 384], [((output.s0.y.y*4) + output.s0.y.yi), 1]) {
          for (output.s0.x.x, 0, ((output.extent.0 + 127)/128)) {
            assert((256 <= 384), halide_error_fold_factor_too_small("rows", "x", 384, "output.s0.x.x", 256))
            let output.s0.x.v16.base = (output.s0.x.x*128)
            let output.s0.y.min_3 = ((output.s0.y.y*4) + output.s0.y.yi)
            let output.s0.y.max_3 = ((output.s0.y.y*4) + output.s0.y.yi)
            let output.s0.x.min_3 = (output.s0.x.x*128)
            let output.s0.x.max_3 = ((output.s0.x.x*128) + 127)
            let rows.s0.y.max_3 = ((output.s0.y.y*4) + output.s0.y.yi)
            let rows.s0.y.min_3 = ((output.s0.y.y*4) + output.s0.y.yi)
            let rows.s0.x.max_3 = ((output.s0.x.x*128) + 129)
            let rows.s0.x.min_3 = select((0 < output.s0.x.x), likely_if_innermost(((output.s0.x.x*128) + 2)), ((output.s0.x.x*128) + -2))
            let rows.s0.y.loop_max = ((output.s0.y.y*4) + output.s0.y.yi)
            let rows.s0.y.loop_min = ((output.s0.y.y*4) + output.s0.y.yi)
            let rows.s0.y.loop_extent = 1
            let rows.s0.x.loop_max = ((output.s0.x.x*128) + 129)
            let rows.s0.x.loop_min = rows.s0.x.min_3
            let rows.s0.x.loop_extent = (((output.s0.x.x*128) - rows.s0.x.min_3) + 130)
            let rows.s0.x.x.loop_extent = (((257 - rows.s0.x.min_3)/128) + output.s0.x.x)
            let rows.s0.x.x.loop_max = ((((257 - rows.s0.x.min_3)/128) + output.s0.x.x) + -1)
            let rows.s0.x.x.loop_min = 0
            let rows.s0.x.v19.loop_extent = 128
            let rows.s0.x.v19.loop_max = 127
            let rows.s0.x.v19.loop_min = 0
            produce rows {
              for (rows.s0.y, ((output.s0.y.y*4) + output.s0.y.yi), 1) {
                for (rows.s0.x.x, 0, (((257 - rows.s0.x.min_3)/128) + output.s0.x.x)) {
                  let rows.s0.x.v19.base = ((rows.s0.x.x*128) + rows.s0.x.min_3)
                  vectorized (rows.s0.x.v19, 0, 128) {
                    let rows.s0.x = (((rows.s0.x.x*128) + rows.s0.x.min_3) + rows.s0.x.v19)
                    rows(((((rows.s0.x.x*128) + rows.s0.x.min_3) + rows.s0.x.v19) % 384), rows.s0.y) = (let t3 = (((rows.s0.x.x*128) + rows.s0.x.min_3) + rows.s0.x.v19) in (((int16(input((((rows.s0.x.x*128) + rows.s0.x.min_3) + rows.s0.x.v19), (rows.s0.y + 1)))*(int16)4) + ((int16(input((((rows.s0.x.x*128) + rows.s0.x.min_3) + rows.s0.x.v19), rows.s0.y))*(int16)6) + ((int16(input((((rows.s0.x.x*128) + rows.s0.x.min_3) + rows.s0.x.v19), (rows.s0.y + -1)))*(int16)4) + int16(input((((rows.s0.x.x*128) + rows.s0.x.min_3) + rows.s0.x.v19), (rows.s0.y + -2)))))) + int16(input((((rows.s0.x.x*128) + rows.s0.x.min_3) + rows.s0.x.v19), (rows.s0.y + 2)))))
                  }
                }
              }
            }
            consume rows {
              vectorized (output.s0.x.v16, 0, 128) {
                let output.s0.x = ((output.s0.x.x*128) + output.s0.x.v16)
                output(((output.s0.x.x*128) + output.s0.x.v16), ((output.s0.y.y*4) + output.s0.y.yi)) = (let t0 = ((output.s0.y.y*4) + output.s0.y.yi) in (let t1 = ((output.s0.x.x*128) + output.s0.x.v16) in uint8(((rows(((((output.s0.x.x*128) + output.s0.x.v16) + 2) % 384), ((output.s0.y.y*4) + output.s0.y.yi)) + ((rows(((((output.s0.x.x*128) + output.s0.x.v16) + 1) % 384), ((output.s0.y.y*4) + output.s0.y.yi))*(int16)4) + ((rows((((output.s0.x.x*128) + output.s0.x.v16) % 384), ((output.s0.y.y*4) + output.s0.y.yi))*(int16)6) + (rows(((((output.s0.x.x*128) + output.s0.x.v16) + -2) % 384), ((output.s0.y.y*4) + output.s0.y.yi)) + (rows(((((output.s0.x.x*128) + output.s0.x.v16) + -1) % 384), ((output.s0.y.y*4) + output.s0.y.yi))*(int16)4)))))/(int16)256))))
              }
            }
          }
        }
      }
    }
  }
}


Performing storage flattening...
Lowering after storage flattening:
let output.s0.y.max = (output.extent.1 + -1)
let output.s0.y.min = 0
let output.s0.x.max = (output.extent.0 + -1)
let output.s0.x.min = 0
let rows.s0.y.max = (output.extent.1 + -1)
let rows.s0.y.min = 0
let rows.s0.x.max = (output.extent.0 + 1)
let rows.s0.x.min = -2
let input.extent.0.required = ((((output.extent.0 + 3)/128)*128) + 128)
let input.min.0.required = -2
let input.stride.0.required = 1
let input.extent.1.required = (output.extent.1 + 4)
let input.min.1.required = -2
let input.stride.1.required = ((((output.extent.0 + 3)/128)*128) + 128)
let output.extent.0.required = ((((output.extent.0 + -1)/128)*128) + 128)
let output.min.0.required = 0
let output.stride.0.required = 1
let output.extent.1.required = ((((output.extent.1 + -1)/4)*4) + 4)
let output.min.1.required = 0
let output.stride.1.required = ((((output.extent.0 + -1)/128)*128) + 128)
let input.stride.0.constrained = 1
let input.min.0.constrained = 0
let input.stride.1.constrained = ((input.stride.1/128)*128)
let input.min.1.constrained = 0
let output.stride.0.constrained = 1
let output.min.0.constrained = 0
let output.stride.1.constrained = ((output.stride.1/128)*128)
let output.min.1.constrained = 0
let input.stride.0.proposed = 1
let input.min.0.proposed = 0
let input.extent.0.proposed = ((((output.extent.0 + 3)/128)*128) + 128)
let input.stride.1.proposed = (((output.extent.0 + 131)/128)*128)
let input.min.1.proposed = 0
let input.extent.1.proposed = (output.extent.1 + 4)
let output.stride.0.proposed = 1
let output.min.0.proposed = 0
let output.extent.0.proposed = ((((output.extent.0 + -1)/128)*128) + 128)
let output.stride.1.proposed = (((output.extent.0 + 127)/128)*128)
let output.min.1.proposed = 0
let output.extent.1.proposed = ((((output.extent.1 + -1)/4)*4) + 4)
assert((input.stride.0 == 1), 0)
assert((input.min.0 == 0), 0)
assert(((input.stride.1 % 128) == 0), 0)
assert((input.min.1 == 0), 0)
assert((output.stride.0 == 1), 0)
assert((output.min.0 == 0), 0)
assert(((output.stride.1 % 128) == 0), 0)
assert((output.min.1 == 0), 0)
let output.s0.y.loop_max = (output.extent.1 + -1)
let output.s0.y.loop_min = 0
let output.s0.y.loop_extent = output.extent.1
let output.s0.x.loop_max = (output.extent.0 + -1)
let output.s0.x.loop_min = 0
let output.s0.x.loop_extent = output.extent.0
let output.s0.y.y.loop_extent = ((output.extent.1 + 3)/4)
let output.s0.y.y.loop_max = ((output.extent.1 + -1)/4)
let output.s0.y.y.loop_min = 0
let output.s0.y.yi.loop_extent = 4
let output.s0.y.yi.loop_max = 3
let output.s0.y.yi.loop_min = 0
let output.s0.x.x.loop_extent = ((output.extent.0 + 127)/128)
let output.s0.x.x.loop_max = ((output.extent.0 + -1)/128)
let output.s0.x.x.loop_min = 0
let output.s0.x.v16.loop_extent = 128
let output.s0.x.v16.loop_max = 127
let output.s0.x.v16.loop_min = 0
produce output {
  for<Hexagon> (output.s0.__outermost, 0, 1) {
    for (output.s0.y.y, 0, ((output.extent.1 + 3)/4)) {
      let output.s0.y.min_1 = (output.s0.y.y*4)
      let output.s0.y.max_1 = ((output.s0.y.y*4) + 3)
      let output.s0.x.min_1 = 0
      let output.s0.x.max_1 = ((((output.extent.0 + 127)/128)*128) + -1)
      let rows.s0.y.max_1 = ((output.s0.y.y*4) + 3)
      let rows.s0.y.min_1 = (output.s0.y.y*4)
      let rows.s0.x.max_1 = ((((output.extent.0 + 127)/128)*128) + 1)
      let rows.s0.x.min_1 = -2
      prefetch(input, (((0 + (-2*input.stride.0.constrained)) + (((output.s0.y.y*4) + 6)*input.stride.1.constrained)) - ((0 + (input.min.0.constrained*input.stride.0.constrained)) + (input.min.1.constrained*input.stride.1.constrained))), (((((output.extent.0 + 127)/128)*128) + (select((128 < output.extent.0), 2, -2) + (((output.extent.0 + -1)/128)*128))) + 130), input.stride.0, 8, input.stride.1)
      let output.s0.y.yi.base = (output.s0.y.y*4)
      for (output.s0.y.yi, 0, 4) {
        let output.s0.y = ((output.s0.y.y*4) + output.s0.y.yi)
        let output.s0.y.min_2 = ((output.s0.y.y*4) + output.s0.y.yi)
        let output.s0.y.max_2 = ((output.s0.y.y*4) + output.s0.y.yi)
        let output.s0.x.min_2 = 0
        let output.s0.x.max_2 = ((((output.extent.0 + 127)/128)*128) + -1)
        let rows.s0.y.max_2 = ((output.s0.y.y*4) + output.s0.y.yi)
        let rows.s0.y.min_2 = ((output.s0.y.y*4) + output.s0.y.yi)
        let rows.s0.x.max_2 = ((((output.extent.0 + 127)/128)*128) + 1)
        let rows.s0.x.min_2 = -2
        let rows.y.max_realized = ((output.s0.y.y*4) + output.s0.y.yi)
        let rows.y.min_realized = ((output.s0.y.y*4) + output.s0.y.yi)
        let rows.y.extent_realized = 1
        let rows.x.max_realized = max((let t16 = (select((128 < output.extent.0), -126, -130) + (((output.extent.0 + 127)/128)*128)) in (((((output.extent.0 + 127)/128)*128) + t16) + 127)), ((((output.extent.0 + 127)/128)*128) + 1))
        let rows.x.min_realized = -2
        let rows.x.extent_realized = (max((let t16 = (select((128 < output.extent.0), -126, -130) + (((output.extent.0 + 127)/128)*128)) in (((((output.extent.0 + 127)/128)*128) + t16) + 127)), ((((output.extent.0 + 127)/128)*128) + 1)) + 3)
        let rows.x.extent_realized.s = (max((let t16 = (select((128 < output.extent.0), -126, -130) + (((output.extent.0 + 127)/128)*128)) in (((((output.extent.0 + 127)/128)*128) + t16) + 127)), ((((output.extent.0 + 127)/128)*128) + 1)) + 2)
        let rows.extent.0 = 384
        let rows.min.0 = 0
        let rows.extent.1 = 1
        let rows.min.1 = ((output.s0.y.y*4) + output.s0.y.yi)
        let rows.stride.0 = 1
        let rows.stride.1 = (rows.stride.0*((((384 + 128) - 1)/128)*128))
        allocate rows[int16 * ((((384 + 128) - 1)/128)*128) * 1]
        let rows.buffer = (let t82 = make_struct((halide_dimension_t *), rows.min.0, rows.extent.0, rows.stride.0, 0, rows.min.1, rows.extent.1, rows.stride.1, 0) in _halide_buffer_init(alloca(size_of_halide_buffer_t()), t82, rows, (uint64)0, reinterpret((halide_device_interface_t *), (uint64)0), 0, 16, 2, t82, (uint64)0))
        for (output.s0.x.x, 0, ((output.extent.0 + 127)/128)) {
          assert((256 <= 384), halide_error_fold_factor_too_small("rows", "x", 384, "output.s0.x.x", 256))
          let output.s0.x.v16.base = (output.s0.x.x*128)
          let output.s0.y.min_3 = ((output.s0.y.y*4) + output.s0.y.yi)
          let output.s0.y.max_3 = ((output.s0.y.y*4) + output.s0.y.yi)
          let output.s0.x.min_3 = (output.s0.x.x*128)
          let output.s0.x.max_3 = ((output.s0.x.x*128) + 127)
          let rows.s0.y.max_3 = ((output.s0.y.y*4) + output.s0.y.yi)
          let rows.s0.y.min_3 = ((output.s0.y.y*4) + output.s0.y.yi)
          let rows.s0.x.max_3 = ((output.s0.x.x*128) + 129)
          let rows.s0.x.min_3 = select((0 < output.s0.x.x), likely_if_innermost(((output.s0.x.x*128) + 2)), ((output.s0.x.x*128) + -2))
          let rows.s0.y.loop_max = ((output.s0.y.y*4) + output.s0.y.yi)
          let rows.s0.y.loop_min = ((output.s0.y.y*4) + output.s0.y.yi)
          let rows.s0.y.loop_extent = 1
          let rows.s0.x.loop_max = ((output.s0.x.x*128) + 129)
          let rows.s0.x.loop_min = rows.s0.x.min_3
          let rows.s0.x.loop_extent = (((output.s0.x.x*128) - rows.s0.x.min_3) + 130)
          let rows.s0.x.x.loop_extent = (((257 - rows.s0.x.min_3)/128) + output.s0.x.x)
          let rows.s0.x.x.loop_max = ((((257 - rows.s0.x.min_3)/128) + output.s0.x.x) + -1)
          let rows.s0.x.x.loop_min = 0
          let rows.s0.x.v19.loop_extent = 128
          let rows.s0.x.v19.loop_max = 127
          let rows.s0.x.v19.loop_min = 0
          produce rows {
            for (rows.s0.y, ((output.s0.y.y*4) + output.s0.y.yi), 1) {
              for (rows.s0.x.x, 0, (((257 - rows.s0.x.min_3)/128) + output.s0.x.x)) {
                let rows.s0.x.v19.base = ((rows.s0.x.x*128) + rows.s0.x.min_3)
                vectorized (rows.s0.x.v19, 0, 128) {
                  let rows.s0.x = (((rows.s0.x.x*128) + rows.s0.x.min_3) + rows.s0.x.v19)
                  rows[((0 + ((((((rows.s0.x.x*128) + rows.s0.x.min_3) + rows.s0.x.v19) % 384) - rows.min.0)*rows.stride.0)) + ((rows.s0.y - rows.min.1)*rows.stride.1))] = (let t3 = (((rows.s0.x.x*128) + rows.s0.x.min_3) + rows.s0.x.v19) in (((int16(input[(((0 + ((((rows.s0.x.x*128) + rows.s0.x.min_3) + rows.s0.x.v19)*input.stride.0.constrained)) + ((rows.s0.y + 1)*input.stride.1.constrained)) - ((0 + (input.min.0.constrained*input.stride.0.constrained)) + (input.min.1.constrained*input.stride.1.constrained)))])*(int16)4) + ((int16(input[(((0 + ((((rows.s0.x.x*128) + rows.s0.x.min_3) + rows.s0.x.v19)*input.stride.0.constrained)) + (rows.s0.y*input.stride.1.constrained)) - ((0 + (input.min.0.constrained*input.stride.0.constrained)) + (input.min.1.constrained*input.stride.1.constrained)))])*(int16)6) + ((int16(input[(((0 + ((((rows.s0.x.x*128) + rows.s0.x.min_3) + rows.s0.x.v19)*input.stride.0.constrained)) + ((rows.s0.y + -1)*input.stride.1.constrained)) - ((0 + (input.min.0.constrained*input.stride.0.constrained)) + (input.min.1.constrained*input.stride.1.constrained)))])*(int16)4) + int16(input[(((0 + ((((rows.s0.x.x*128) + rows.s0.x.min_3) + rows.s0.x.v19)*input.stride.0.constrained)) + ((rows.s0.y + -2)*input.stride.1.constrained)) - ((0 + (input.min.0.constrained*input.stride.0.constrained)) + (input.min.1.constrained*input.stride.1.constrained)))])))) + int16(input[(((0 + ((((rows.s0.x.x*128) + rows.s0.x.min_3) + rows.s0.x.v19)*input.stride.0.constrained)) + ((rows.s0.y + 2)*input.stride.1.constrained)) - ((0 + (input.min.0.constrained*input.stride.0.constrained)) + (input.min.1.constrained*input.stride.1.constrained)))])))
                }
              }
            }
          }
          consume rows {
            vectorized (output.s0.x.v16, 0, 128) {
              let output.s0.x = ((output.s0.x.x*128) + output.s0.x.v16)
              output[(((0 + (((output.s0.x.x*128) + output.s0.x.v16)*output.stride.0.constrained)) + (((output.s0.y.y*4) + output.s0.y.yi)*output.stride.1.constrained)) - ((0 + (output.min.0.constrained*output.stride.0.constrained)) + (output.min.1.constrained*output.stride.1.constrained)))] = (let t0 = ((output.s0.y.y*4) + output.s0.y.yi) in (let t1 = ((output.s0.x.x*128) + output.s0.x.v16) in uint8(((rows[((0 + ((((((output.s0.x.x*128) + output.s0.x.v16) + 2) % 384) - rows.min.0)*rows.stride.0)) + ((((output.s0.y.y*4) + output.s0.y.yi) - rows.min.1)*rows.stride.1))] + ((rows[((0 + ((((((output.s0.x.x*128) + output.s0.x.v16) + 1) % 384) - rows.min.0)*rows.stride.0)) + ((((output.s0.y.y*4) + output.s0.y.yi) - rows.min.1)*rows.stride.1))]*(int16)4) + ((rows[((0 + (((((output.s0.x.x*128) + output.s0.x.v16) % 384) - rows.min.0)*rows.stride.0)) + ((((output.s0.y.y*4) + output.s0.y.yi) - rows.min.1)*rows.stride.1))]*(int16)6) + (rows[((0 + ((((((output.s0.x.x*128) + output.s0.x.v16) + -2) % 384) - rows.min.0)*rows.stride.0)) + ((((output.s0.y.y*4) + output.s0.y.yi) - rows.min.1)*rows.stride.1))] + (rows[((0 + ((((((output.s0.x.x*128) + output.s0.x.v16) + -1) % 384) - rows.min.0)*rows.stride.0)) + ((((output.s0.y.y*4) + output.s0.y.yi) - rows.min.1)*rows.stride.1))]*(int16)4)))))/(int16)256))))
            }
          }
        }
      }
    }
  }
}


Unpacking buffer arguments...
Lowering after unpacking buffer arguments...
assert((reinterpret(uint64, output.buffer) != (uint64)0), halide_error_buffer_argument_is_null("output"))
assert((reinterpret(uint64, input.buffer) != (uint64)0), halide_error_buffer_argument_is_null("input"))
let input = _halide_buffer_get_host(input.buffer)
let input.min.0 = _halide_buffer_get_min(input.buffer, 0)
let input.stride.0 = _halide_buffer_get_stride(input.buffer, 0)
let input.min.1 = _halide_buffer_get_min(input.buffer, 1)
let input.stride.1 = _halide_buffer_get_stride(input.buffer, 1)
let output = _halide_buffer_get_host(output.buffer)
let output.min.0 = _halide_buffer_get_min(output.buffer, 0)
let output.extent.0 = _halide_buffer_get_extent(output.buffer, 0)
let output.stride.0 = _halide_buffer_get_stride(output.buffer, 0)
let output.min.1 = _halide_buffer_get_min(output.buffer, 1)
let output.extent.1 = _halide_buffer_get_extent(output.buffer, 1)
let output.stride.1 = _halide_buffer_get_stride(output.buffer, 1)
let output.s0.y.max = (output.extent.1 + -1)
let output.s0.y.min = 0
let output.s0.x.max = (output.extent.0 + -1)
let output.s0.x.min = 0
let rows.s0.y.max = (output.extent.1 + -1)
let rows.s0.y.min = 0
let rows.s0.x.max = (output.extent.0 + 1)
let rows.s0.x.min = -2
let input.extent.0.required = ((((output.extent.0 + 3)/128)*128) + 128)
let input.min.0.required = -2
let input.stride.0.required = 1
let input.extent.1.required = (output.extent.1 + 4)
let input.min.1.required = -2
let input.stride.1.required = ((((output.extent.0 + 3)/128)*128) + 128)
let output.extent.0.required = ((((output.extent.0 + -1)/128)*128) + 128)
let output.min.0.required = 0
let output.stride.0.required = 1
let output.extent.1.required = ((((output.extent.1 + -1)/4)*4) + 4)
let output.min.1.required = 0
let output.stride.1.required = ((((output.extent.0 + -1)/128)*128) + 128)
let input.stride.0.constrained = 1
let input.min.0.constrained = 0
let input.stride.1.constrained = ((input.stride.1/128)*128)
let input.min.1.constrained = 0
let output.stride.0.constrained = 1
let output.min.0.constrained = 0
let output.stride.1.constrained = ((output.stride.1/128)*128)
let output.min.1.constrained = 0
let input.stride.0.proposed = 1
let input.min.0.proposed = 0
let input.extent.0.proposed = ((((output.extent.0 + 3)/128)*128) + 128)
let input.stride.1.proposed = (((output.extent.0 + 131)/128)*128)
let input.min.1.proposed = 0
let input.extent.1.proposed = (output.extent.1 + 4)
let output.stride.0.proposed = 1
let output.min.0.proposed = 0
let output.extent.0.proposed = ((((output.extent.0 + -1)/128)*128) + 128)
let output.stride.1.proposed = (((output.extent.0 + 127)/128)*128)
let output.min.1.proposed = 0
let output.extent.1.proposed = ((((output.extent.1 + -1)/4)*4) + 4)
assert((input.stride.0 == 1), 0)
assert((input.min.0 == 0), 0)
assert(((input.stride.1 % 128) == 0), 0)
assert((input.min.1 == 0), 0)
assert((output.stride.0 == 1), 0)
assert((output.min.0 == 0), 0)
assert(((output.stride.1 % 128) == 0), 0)
assert((output.min.1 == 0), 0)
let output.s0.y.loop_max = (output.extent.1 + -1)
let output.s0.y.loop_min = 0
let output.s0.y.loop_extent = output.extent.1
let output.s0.x.loop_max = (output.extent.0 + -1)
let output.s0.x.loop_min = 0
let output.s0.x.loop_extent = output.extent.0
let output.s0.y.y.loop_extent = ((output.extent.1 + 3)/4)
let output.s0.y.y.loop_max = ((output.extent.1 + -1)/4)
let output.s0.y.y.loop_min = 0
let output.s0.y.yi.loop_extent = 4
let output.s0.y.yi.loop_max = 3
let output.s0.y.yi.loop_min = 0
let output.s0.x.x.loop_extent = ((output.extent.0 + 127)/128)
let output.s0.x.x.loop_max = ((output.extent.0 + -1)/128)
let output.s0.x.x.loop_min = 0
let output.s0.x.v16.loop_extent = 128
let output.s0.x.v16.loop_max = 127
let output.s0.x.v16.loop_min = 0
produce output {
  for<Hexagon> (output.s0.__outermost, 0, 1) {
    for (output.s0.y.y, 0, ((output.extent.1 + 3)/4)) {
      let output.s0.y.min_1 = (output.s0.y.y*4)
      let output.s0.y.max_1 = ((output.s0.y.y*4) + 3)
      let output.s0.x.min_1 = 0
      let output.s0.x.max_1 = ((((output.extent.0 + 127)/128)*128) + -1)
      let rows.s0.y.max_1 = ((output.s0.y.y*4) + 3)
      let rows.s0.y.min_1 = (output.s0.y.y*4)
      let rows.s0.x.max_1 = ((((output.extent.0 + 127)/128)*128) + 1)
      let rows.s0.x.min_1 = -2
      prefetch(input, (((0 + (-2*input.stride.0.constrained)) + (((output.s0.y.y*4) + 6)*input.stride.1.constrained)) - ((0 + (input.min.0.constrained*input.stride.0.constrained)) + (input.min.1.constrained*input.stride.1.constrained))), (((((output.extent.0 + 127)/128)*128) + (select((128 < output.extent.0), 2, -2) + (((output.extent.0 + -1)/128)*128))) + 130), input.stride.0, 8, input.stride.1)
      let output.s0.y.yi.base = (output.s0.y.y*4)
      for (output.s0.y.yi, 0, 4) {
        let output.s0.y = ((output.s0.y.y*4) + output.s0.y.yi)
        let output.s0.y.min_2 = ((output.s0.y.y*4) + output.s0.y.yi)
        let output.s0.y.max_2 = ((output.s0.y.y*4) + output.s0.y.yi)
        let output.s0.x.min_2 = 0
        let output.s0.x.max_2 = ((((output.extent.0 + 127)/128)*128) + -1)
        let rows.s0.y.max_2 = ((output.s0.y.y*4) + output.s0.y.yi)
        let rows.s0.y.min_2 = ((output.s0.y.y*4) + output.s0.y.yi)
        let rows.s0.x.max_2 = ((((output.extent.0 + 127)/128)*128) + 1)
        let rows.s0.x.min_2 = -2
        let rows.y.max_realized = ((output.s0.y.y*4) + output.s0.y.yi)
        let rows.y.min_realized = ((output.s0.y.y*4) + output.s0.y.yi)
        let rows.y.extent_realized = 1
        let rows.x.max_realized = max((let t16 = (select((128 < output.extent.0), -126, -130) + (((output.extent.0 + 127)/128)*128)) in (((((output.extent.0 + 127)/128)*128) + t16) + 127)), ((((output.extent.0 + 127)/128)*128) + 1))
        let rows.x.min_realized = -2
        let rows.x.extent_realized = (max((let t16 = (select((128 < output.extent.0), -126, -130) + (((output.extent.0 + 127)/128)*128)) in (((((output.extent.0 + 127)/128)*128) + t16) + 127)), ((((output.extent.0 + 127)/128)*128) + 1)) + 3)
        let rows.x.extent_realized.s = (max((let t16 = (select((128 < output.extent.0), -126, -130) + (((output.extent.0 + 127)/128)*128)) in (((((output.extent.0 + 127)/128)*128) + t16) + 127)), ((((output.extent.0 + 127)/128)*128) + 1)) + 2)
        let rows.extent.0 = 384
        let rows.min.0 = 0
        let rows.extent.1 = 1
        let rows.min.1 = ((output.s0.y.y*4) + output.s0.y.yi)
        let rows.stride.0 = 1
        let rows.stride.1 = (rows.stride.0*((((384 + 128) - 1)/128)*128))
        allocate rows[int16 * ((((384 + 128) - 1)/128)*128) * 1]
        let rows.buffer = (let t82 = make_struct((halide_dimension_t *), rows.min.0, rows.extent.0, rows.stride.0, 0, rows.min.1, rows.extent.1, rows.stride.1, 0) in _halide_buffer_init(alloca(size_of_halide_buffer_t()), t82, rows, (uint64)0, reinterpret((halide_device_interface_t *), (uint64)0), 0, 16, 2, t82, (uint64)0))
        for (output.s0.x.x, 0, ((output.extent.0 + 127)/128)) {
          assert((256 <= 384), halide_error_fold_factor_too_small("rows", "x", 384, "output.s0.x.x", 256))
          let output.s0.x.v16.base = (output.s0.x.x*128)
          let output.s0.y.min_3 = ((output.s0.y.y*4) + output.s0.y.yi)
          let output.s0.y.max_3 = ((output.s0.y.y*4) + output.s0.y.yi)
          let output.s0.x.min_3 = (output.s0.x.x*128)
          let output.s0.x.max_3 = ((output.s0.x.x*128) + 127)
          let rows.s0.y.max_3 = ((output.s0.y.y*4) + output.s0.y.yi)
          let rows.s0.y.min_3 = ((output.s0.y.y*4) + output.s0.y.yi)
          let rows.s0.x.max_3 = ((output.s0.x.x*128) + 129)
          let rows.s0.x.min_3 = select((0 < output.s0.x.x), likely_if_innermost(((output.s0.x.x*128) + 2)), ((output.s0.x.x*128) + -2))
          let rows.s0.y.loop_max = ((output.s0.y.y*4) + output.s0.y.yi)
          let rows.s0.y.loop_min = ((output.s0.y.y*4) + output.s0.y.yi)
          let rows.s0.y.loop_extent = 1
          let rows.s0.x.loop_max = ((output.s0.x.x*128) + 129)
          let rows.s0.x.loop_min = rows.s0.x.min_3
          let rows.s0.x.loop_extent = (((output.s0.x.x*128) - rows.s0.x.min_3) + 130)
          let rows.s0.x.x.loop_extent = (((257 - rows.s0.x.min_3)/128) + output.s0.x.x)
          let rows.s0.x.x.loop_max = ((((257 - rows.s0.x.min_3)/128) + output.s0.x.x) + -1)
          let rows.s0.x.x.loop_min = 0
          let rows.s0.x.v19.loop_extent = 128
          let rows.s0.x.v19.loop_max = 127
          let rows.s0.x.v19.loop_min = 0
          produce rows {
            for (rows.s0.y, ((output.s0.y.y*4) + output.s0.y.yi), 1) {
              for (rows.s0.x.x, 0, (((257 - rows.s0.x.min_3)/128) + output.s0.x.x)) {
                let rows.s0.x.v19.base = ((rows.s0.x.x*128) + rows.s0.x.min_3)
                vectorized (rows.s0.x.v19, 0, 128) {
                  let rows.s0.x = (((rows.s0.x.x*128) + rows.s0.x.min_3) + rows.s0.x.v19)
                  rows[((0 + ((((((rows.s0.x.x*128) + rows.s0.x.min_3) + rows.s0.x.v19) % 384) - rows.min.0)*rows.stride.0)) + ((rows.s0.y - rows.min.1)*rows.stride.1))] = (let t3 = (((rows.s0.x.x*128) + rows.s0.x.min_3) + rows.s0.x.v19) in (((int16(input[(((0 + ((((rows.s0.x.x*128) + rows.s0.x.min_3) + rows.s0.x.v19)*input.stride.0.constrained)) + ((rows.s0.y + 1)*input.stride.1.constrained)) - ((0 + (input.min.0.constrained*input.stride.0.constrained)) + (input.min.1.constrained*input.stride.1.constrained)))])*(int16)4) + ((int16(input[(((0 + ((((rows.s0.x.x*128) + rows.s0.x.min_3) + rows.s0.x.v19)*input.stride.0.constrained)) + (rows.s0.y*input.stride.1.constrained)) - ((0 + (input.min.0.constrained*input.stride.0.constrained)) + (input.min.1.constrained*input.stride.1.constrained)))])*(int16)6) + ((int16(input[(((0 + ((((rows.s0.x.x*128) + rows.s0.x.min_3) + rows.s0.x.v19)*input.stride.0.constrained)) + ((rows.s0.y + -1)*input.stride.1.constrained)) - ((0 + (input.min.0.constrained*input.stride.0.constrained)) + (input.min.1.constrained*input.stride.1.constrained)))])*(int16)4) + int16(input[(((0 + ((((rows.s0.x.x*128) + rows.s0.x.min_3) + rows.s0.x.v19)*input.stride.0.constrained)) + ((rows.s0.y + -2)*input.stride.1.constrained)) - ((0 + (input.min.0.constrained*input.stride.0.constrained)) + (input.min.1.constrained*input.stride.1.constrained)))])))) + int16(input[(((0 + ((((rows.s0.x.x*128) + rows.s0.x.min_3) + rows.s0.x.v19)*input.stride.0.constrained)) + ((rows.s0.y + 2)*input.stride.1.constrained)) - ((0 + (input.min.0.constrained*input.stride.0.constrained)) + (input.min.1.constrained*input.stride.1.constrained)))])))
                }
              }
            }
          }
          consume rows {
            vectorized (output.s0.x.v16, 0, 128) {
              let output.s0.x = ((output.s0.x.x*128) + output.s0.x.v16)
              output[(((0 + (((output.s0.x.x*128) + output.s0.x.v16)*output.stride.0.constrained)) + (((output.s0.y.y*4) + output.s0.y.yi)*output.stride.1.constrained)) - ((0 + (output.min.0.constrained*output.stride.0.constrained)) + (output.min.1.constrained*output.stride.1.constrained)))] = (let t0 = ((output.s0.y.y*4) + output.s0.y.yi) in (let t1 = ((output.s0.x.x*128) + output.s0.x.v16) in uint8(((rows[((0 + ((((((output.s0.x.x*128) + output.s0.x.v16) + 2) % 384) - rows.min.0)*rows.stride.0)) + ((((output.s0.y.y*4) + output.s0.y.yi) - rows.min.1)*rows.stride.1))] + ((rows[((0 + ((((((output.s0.x.x*128) + output.s0.x.v16) + 1) % 384) - rows.min.0)*rows.stride.0)) + ((((output.s0.y.y*4) + output.s0.y.yi) - rows.min.1)*rows.stride.1))]*(int16)4) + ((rows[((0 + (((((output.s0.x.x*128) + output.s0.x.v16) % 384) - rows.min.0)*rows.stride.0)) + ((((output.s0.y.y*4) + output.s0.y.yi) - rows.min.1)*rows.stride.1))]*(int16)6) + (rows[((0 + ((((((output.s0.x.x*128) + output.s0.x.v16) + -2) % 384) - rows.min.0)*rows.stride.0)) + ((((output.s0.y.y*4) + output.s0.y.yi) - rows.min.1)*rows.stride.1))] + (rows[((0 + ((((((output.s0.x.x*128) + output.s0.x.v16) + -1) % 384) - rows.min.0)*rows.stride.0)) + ((((output.s0.y.y*4) + output.s0.y.yi) - rows.min.1)*rows.stride.1))]*(int16)4)))))/(int16)256))))
            }
          }
        }
      }
    }
  }
}


Skipping rewriting memoized allocations...
Simplifying...
Lowering after second simplifcation:
assert((reinterpret(uint64, output.buffer) != (uint64)0), halide_error_buffer_argument_is_null("output"))
assert((reinterpret(uint64, input.buffer) != (uint64)0), halide_error_buffer_argument_is_null("input"))
let input = _halide_buffer_get_host(input.buffer)
let input.min.0 = _halide_buffer_get_min(input.buffer, 0)
let input.stride.0 = _halide_buffer_get_stride(input.buffer, 0)
let input.min.1 = _halide_buffer_get_min(input.buffer, 1)
let input.stride.1 = _halide_buffer_get_stride(input.buffer, 1)
let output = _halide_buffer_get_host(output.buffer)
let output.min.0 = _halide_buffer_get_min(output.buffer, 0)
let output.extent.0 = _halide_buffer_get_extent(output.buffer, 0)
let output.stride.0 = _halide_buffer_get_stride(output.buffer, 0)
let output.min.1 = _halide_buffer_get_min(output.buffer, 1)
let output.extent.1 = _halide_buffer_get_extent(output.buffer, 1)
let output.stride.1 = _halide_buffer_get_stride(output.buffer, 1)
assert((input.stride.0 == 1), 0)
assert((input.min.0 == 0), 0)
assert(((input.stride.1 % 128) == 0), 0)
assert((input.min.1 == 0), 0)
assert((output.stride.0 == 1), 0)
assert((output.min.0 == 0), 0)
assert(((output.stride.1 % 128) == 0), 0)
assert((output.min.1 == 0), 0)
produce output {
  for<Hexagon> (output.s0.__outermost, 0, 1) {
    for (output.s0.y.y, 0, ((output.extent.1 + 3)/4)) {
      prefetch(input, ((((input.stride.1/128)*((output.s0.y.y*4) + 6))*128) + -2), (((((output.extent.0 + 127)/128)*128) + (select((128 < output.extent.0), 2, -2) + (((output.extent.0 + -1)/128)*128))) + 130), 1, 8, input.stride.1)
      for (output.s0.y.yi, 0, 4) {
        allocate rows[int16 * 384 * 1]
        for (output.s0.x.x, 0, ((output.extent.0 + 127)/128)) {
          let rows.s0.x.min_3 = select((0 < output.s0.x.x), likely_if_innermost(((output.s0.x.x*128) + 2)), ((output.s0.x.x*128) + -2))
          produce rows {
            let rows.s0.y = ((output.s0.y.y*4) + output.s0.y.yi)
            for (rows.s0.x.x, 0, (((257 - rows.s0.x.min_3)/128) + output.s0.x.x)) {
              vectorized (rows.s0.x.v19, 0, 128) {
                rows[(((rows.s0.y - ((output.s0.y.y*4) + output.s0.y.yi))*384) + ((((rows.s0.x.x*128) + rows.s0.x.min_3) + rows.s0.x.v19) % 384))] = (((int16(input[((((input.stride.1/128)*(rows.s0.y + 1))*128) + (((rows.s0.x.x*128) + rows.s0.x.min_3) + rows.s0.x.v19))])*(int16)4) + ((int16(input[((((input.stride.1/128)*rows.s0.y)*128) + (((rows.s0.x.x*128) + rows.s0.x.min_3) + rows.s0.x.v19))])*(int16)6) + ((int16(input[((((input.stride.1/128)*(rows.s0.y + -1))*128) + (((rows.s0.x.x*128) + rows.s0.x.min_3) + rows.s0.x.v19))])*(int16)4) + int16(input[((((input.stride.1/128)*(rows.s0.y + -2))*128) + (((rows.s0.x.x*128) + rows.s0.x.min_3) + rows.s0.x.v19))])))) + int16(input[((((input.stride.1/128)*(rows.s0.y + 2))*128) + (((rows.s0.x.x*128) + rows.s0.x.min_3) + rows.s0.x.v19))]))
              }
            }
          }
          consume rows {
            vectorized (output.s0.x.v16, 0, 128) {
              output[((((output.stride.1/128)*((output.s0.y.y*4) + output.s0.y.yi))*128) + ((output.s0.x.x*128) + output.s0.x.v16))] = uint8(((rows[((((output.s0.x.x*128) + output.s0.x.v16) + 2) % 384)] + ((rows[((((output.s0.x.x*128) + output.s0.x.v16) + 1) % 384)]*(int16)4) + ((rows[(((output.s0.x.x*128) + output.s0.x.v16) % 384)]*(int16)6) + (rows[((((output.s0.x.x*128) + output.s0.x.v16) + 382) % 384)] + (rows[((((output.s0.x.x*128) + output.s0.x.v16) + 383) % 384)]*(int16)4)))))/(int16)256))
            }
          }
        }
      }
    }
  }
}


Reduce prefetch dimension...
Lowering after reduce prefetch dimension:
assert((reinterpret(uint64, output.buffer) != (uint64)0), halide_error_buffer_argument_is_null("output"))
assert((reinterpret(uint64, input.buffer) != (uint64)0), halide_error_buffer_argument_is_null("input"))
let input = _halide_buffer_get_host(input.buffer)
let input.min.0 = _halide_buffer_get_min(input.buffer, 0)
let input.stride.0 = _halide_buffer_get_stride(input.buffer, 0)
let input.min.1 = _halide_buffer_get_min(input.buffer, 1)
let input.stride.1 = _halide_buffer_get_stride(input.buffer, 1)
let output = _halide_buffer_get_host(output.buffer)
let output.min.0 = _halide_buffer_get_min(output.buffer, 0)
let output.extent.0 = _halide_buffer_get_extent(output.buffer, 0)
let output.stride.0 = _halide_buffer_get_stride(output.buffer, 0)
let output.min.1 = _halide_buffer_get_min(output.buffer, 1)
let output.extent.1 = _halide_buffer_get_extent(output.buffer, 1)
let output.stride.1 = _halide_buffer_get_stride(output.buffer, 1)
assert((input.stride.0 == 1), 0)
assert((input.min.0 == 0), 0)
assert(((input.stride.1 % 128) == 0), 0)
assert((input.min.1 == 0), 0)
assert((output.stride.0 == 1), 0)
assert((output.min.0 == 0), 0)
assert(((output.stride.1 % 128) == 0), 0)
assert((output.min.1 == 0), 0)
produce output {
  for<Hexagon> (output.s0.__outermost, 0, 1) {
    for (output.s0.y.y, 0, ((output.extent.1 + 3)/4)) {
      prefetch(input, ((((input.stride.1/128)*((output.s0.y.y*4) + 6))*128) + -2), (((((output.extent.0 + 127)/128)*128) + (select((128 < output.extent.0), 2, -2) + (((output.extent.0 + -1)/128)*128))) + 130), 1, 8, input.stride.1)
      for (output.s0.y.yi, 0, 4) {
        allocate rows[int16 * 384 * 1]
        for (output.s0.x.x, 0, ((output.extent.0 + 127)/128)) {
          let rows.s0.x.min_3 = select((0 < output.s0.x.x), likely_if_innermost(((output.s0.x.x*128) + 2)), ((output.s0.x.x*128) + -2))
          produce rows {
            let rows.s0.y = ((output.s0.y.y*4) + output.s0.y.yi)
            for (rows.s0.x.x, 0, (((257 - rows.s0.x.min_3)/128) + output.s0.x.x)) {
              vectorized (rows.s0.x.v19, 0, 128) {
                rows[(((rows.s0.y - ((output.s0.y.y*4) + output.s0.y.yi))*384) + ((((rows.s0.x.x*128) + rows.s0.x.min_3) + rows.s0.x.v19) % 384))] = (((int16(input[((((input.stride.1/128)*(rows.s0.y + 1))*128) + (((rows.s0.x.x*128) + rows.s0.x.min_3) + rows.s0.x.v19))])*(int16)4) + ((int16(input[((((input.stride.1/128)*rows.s0.y)*128) + (((rows.s0.x.x*128) + rows.s0.x.min_3) + rows.s0.x.v19))])*(int16)6) + ((int16(input[((((input.stride.1/128)*(rows.s0.y + -1))*128) + (((rows.s0.x.x*128) + rows.s0.x.min_3) + rows.s0.x.v19))])*(int16)4) + int16(input[((((input.stride.1/128)*(rows.s0.y + -2))*128) + (((rows.s0.x.x*128) + rows.s0.x.min_3) + rows.s0.x.v19))])))) + int16(input[((((input.stride.1/128)*(rows.s0.y + 2))*128) + (((rows.s0.x.x*128) + rows.s0.x.min_3) + rows.s0.x.v19))]))
              }
            }
          }
          consume rows {
            vectorized (output.s0.x.v16, 0, 128) {
              output[((((output.stride.1/128)*((output.s0.y.y*4) + output.s0.y.yi))*128) + ((output.s0.x.x*128) + output.s0.x.v16))] = uint8(((rows[((((output.s0.x.x*128) + output.s0.x.v16) + 2) % 384)] + ((rows[((((output.s0.x.x*128) + output.s0.x.v16) + 1) % 384)]*(int16)4) + ((rows[(((output.s0.x.x*128) + output.s0.x.v16) % 384)]*(int16)6) + (rows[((((output.s0.x.x*128) + output.s0.x.v16) + 382) % 384)] + (rows[((((output.s0.x.x*128) + output.s0.x.v16) + 383) % 384)]*(int16)4)))))/(int16)256))
            }
          }
        }
      }
    }
  }
}

Unrolling...
Lowering after unrolling:
assert((reinterpret(uint64, output.buffer) != (uint64)0), halide_error_buffer_argument_is_null("output"))
assert((reinterpret(uint64, input.buffer) != (uint64)0), halide_error_buffer_argument_is_null("input"))
let input = _halide_buffer_get_host(input.buffer)
let input.min.0 = _halide_buffer_get_min(input.buffer, 0)
let input.stride.0 = _halide_buffer_get_stride(input.buffer, 0)
let input.min.1 = _halide_buffer_get_min(input.buffer, 1)
let input.stride.1 = _halide_buffer_get_stride(input.buffer, 1)
let output = _halide_buffer_get_host(output.buffer)
let output.min.0 = _halide_buffer_get_min(output.buffer, 0)
let output.extent.0 = _halide_buffer_get_extent(output.buffer, 0)
let output.stride.0 = _halide_buffer_get_stride(output.buffer, 0)
let output.min.1 = _halide_buffer_get_min(output.buffer, 1)
let output.extent.1 = _halide_buffer_get_extent(output.buffer, 1)
let output.stride.1 = _halide_buffer_get_stride(output.buffer, 1)
assert((input.stride.0 == 1), 0)
assert((input.min.0 == 0), 0)
assert(((input.stride.1 % 128) == 0), 0)
assert((input.min.1 == 0), 0)
assert((output.stride.0 == 1), 0)
assert((output.min.0 == 0), 0)
assert(((output.stride.1 % 128) == 0), 0)
assert((output.min.1 == 0), 0)
produce output {
  for<Hexagon> (output.s0.__outermost, 0, 1) {
    for (output.s0.y.y, 0, ((output.extent.1 + 3)/4)) {
      prefetch(input, ((((input.stride.1/128)*((output.s0.y.y*4) + 6))*128) + -2), (((((output.extent.0 + 127)/128)*128) + (select((128 < output.extent.0), 2, -2) + (((output.extent.0 + -1)/128)*128))) + 130), 1, 8, input.stride.1)
      for (output.s0.y.yi, 0, 4) {
        allocate rows[int16 * 384 * 1]
        for (output.s0.x.x, 0, ((output.extent.0 + 127)/128)) {
          let rows.s0.x.min_3 = select((0 < output.s0.x.x), likely_if_innermost(((output.s0.x.x*128) + 2)), ((output.s0.x.x*128) + -2))
          produce rows {
            for (rows.s0.x.x, 0, (((257 - rows.s0.x.min_3)/128) + output.s0.x.x)) {
              vectorized (rows.s0.x.v19, 0, 128) {
                rows[((((rows.s0.x.x*128) + rows.s0.x.min_3) + rows.s0.x.v19) % 384)] = (((int16(input[((((input.stride.1/128)*(((output.s0.y.y*4) + output.s0.y.yi) + 1))*128) + (((rows.s0.x.x*128) + rows.s0.x.min_3) + rows.s0.x.v19))])*(int16)4) + ((int16(input[((((input.stride.1/128)*((output.s0.y.y*4) + output.s0.y.yi))*128) + (((rows.s0.x.x*128) + rows.s0.x.min_3) + rows.s0.x.v19))])*(int16)6) + ((int16(input[((((input.stride.1/128)*(((output.s0.y.y*4) + output.s0.y.yi) + -1))*128) + (((rows.s0.x.x*128) + rows.s0.x.min_3) + rows.s0.x.v19))])*(int16)4) + int16(input[((((input.stride.1/128)*(((output.s0.y.y*4) + output.s0.y.yi) + -2))*128) + (((rows.s0.x.x*128) + rows.s0.x.min_3) + rows.s0.x.v19))])))) + int16(input[((((input.stride.1/128)*(((output.s0.y.y*4) + output.s0.y.yi) + 2))*128) + (((rows.s0.x.x*128) + rows.s0.x.min_3) + rows.s0.x.v19))]))
              }
            }
          }
          consume rows {
            vectorized (output.s0.x.v16, 0, 128) {
              output[((((output.stride.1/128)*((output.s0.y.y*4) + output.s0.y.yi))*128) + ((output.s0.x.x*128) + output.s0.x.v16))] = uint8(((rows[((((output.s0.x.x*128) + output.s0.x.v16) + 2) % 384)] + ((rows[((((output.s0.x.x*128) + output.s0.x.v16) + 1) % 384)]*(int16)4) + ((rows[(((output.s0.x.x*128) + output.s0.x.v16) % 384)]*(int16)6) + (rows[((((output.s0.x.x*128) + output.s0.x.v16) + 382) % 384)] + (rows[((((output.s0.x.x*128) + output.s0.x.v16) + 383) % 384)]*(int16)4)))))/(int16)256))
            }
          }
        }
      }
    }
  }
}


Vectorizing...
Lowering after vectorizing:
assert((reinterpret(uint64, output.buffer) != (uint64)0), halide_error_buffer_argument_is_null("output"))
assert((reinterpret(uint64, input.buffer) != (uint64)0), halide_error_buffer_argument_is_null("input"))
let input = _halide_buffer_get_host(input.buffer)
let input.min.0 = _halide_buffer_get_min(input.buffer, 0)
let input.stride.0 = _halide_buffer_get_stride(input.buffer, 0)
let input.min.1 = _halide_buffer_get_min(input.buffer, 1)
let input.stride.1 = _halide_buffer_get_stride(input.buffer, 1)
let output = _halide_buffer_get_host(output.buffer)
let output.min.0 = _halide_buffer_get_min(output.buffer, 0)
let output.extent.0 = _halide_buffer_get_extent(output.buffer, 0)
let output.stride.0 = _halide_buffer_get_stride(output.buffer, 0)
let output.min.1 = _halide_buffer_get_min(output.buffer, 1)
let output.extent.1 = _halide_buffer_get_extent(output.buffer, 1)
let output.stride.1 = _halide_buffer_get_stride(output.buffer, 1)
assert((input.stride.0 == 1), 0)
assert((input.min.0 == 0), 0)
assert(((input.stride.1 % 128) == 0), 0)
assert((input.min.1 == 0), 0)
assert((output.stride.0 == 1), 0)
assert((output.min.0 == 0), 0)
assert(((output.stride.1 % 128) == 0), 0)
assert((output.min.1 == 0), 0)
produce output {
  for<Hexagon> (output.s0.__outermost, 0, 1) {
    for (output.s0.y.y, 0, ((output.extent.1 + 3)/4)) {
      prefetch(input, ((((input.stride.1/128)*((output.s0.y.y*4) + 6))*128) + -2), (((((output.extent.0 + 127)/128)*128) + (select((128 < output.extent.0), 2, -2) + (((output.extent.0 + -1)/128)*128))) + 130), 1, 8, input.stride.1)
      for (output.s0.y.yi, 0, 4) {
        allocate rows[int16 * 384 * 1]
        for (output.s0.x.x, 0, ((output.extent.0 + 127)/128)) {
          let rows.s0.x.min_3 = select((0 < output.s0.x.x), likely_if_innermost(((output.s0.x.x*128) + 2)), ((output.s0.x.x*128) + -2))
          produce rows {
            for (rows.s0.x.x, 0, (((257 - rows.s0.x.min_3)/128) + output.s0.x.x)) {
              rows[(ramp(((rows.s0.x.x*128) + rows.s0.x.min_3), 1, 128) % x128(384))] = (((int16x128(input[ramp(((((input.stride.1/128)*(((output.s0.y.y*4) + output.s0.y.yi) + 1))*128) + ((rows.s0.x.x*128) + rows.s0.x.min_3)), 1, 128)])*x128((int16)4)) + ((int16x128(input[ramp(((((input.stride.1/128)*((output.s0.y.y*4) + output.s0.y.yi))*128) + ((rows.s0.x.x*128) + rows.s0.x.min_3)), 1, 128)])*x128((int16)6)) + ((int16x128(input[ramp(((((input.stride.1/128)*(((output.s0.y.y*4) + output.s0.y.yi) + -1))*128) + ((rows.s0.x.x*128) + rows.s0.x.min_3)), 1, 128)])*x128((int16)4)) + int16x128(input[ramp(((((input.stride.1/128)*(((output.s0.y.y*4) + output.s0.y.yi) + -2))*128) + ((rows.s0.x.x*128) + rows.s0.x.min_3)), 1, 128)])))) + int16x128(input[ramp(((((input.stride.1/128)*(((output.s0.y.y*4) + output.s0.y.yi) + 2))*128) + ((rows.s0.x.x*128) + rows.s0.x.min_3)), 1, 128)]))
            }
          }
          consume rows {
            output[ramp(((((output.stride.1/128)*((output.s0.y.y*4) + output.s0.y.yi)) + output.s0.x.x)*128), 1, 128)] = uint8x128(((rows[(ramp(((output.s0.x.x*128) + 2), 1, 128) % x128(384))] + ((rows[(ramp(((output.s0.x.x*128) + 1), 1, 128) % x128(384))]*x128((int16)4)) + ((rows[ramp(((output.s0.x.x % 3)*128), 1, 128)]*x128((int16)6)) + (rows[(ramp(((output.s0.x.x*128) + 382), 1, 128) % x128(384))] + (rows[(ramp(((output.s0.x.x*128) + 383), 1, 128) % x128(384))]*x128((int16)4))))))/x128((int16)256)))
          }
        }
      }
    }
  }
}


Detecting vector interleavings...
Lowering after rewriting vector interleavings:
assert((reinterpret(uint64, output.buffer) != (uint64)0), halide_error_buffer_argument_is_null("output"))
assert((reinterpret(uint64, input.buffer) != (uint64)0), halide_error_buffer_argument_is_null("input"))
let input = _halide_buffer_get_host(input.buffer)
let input.min.0 = _halide_buffer_get_min(input.buffer, 0)
let input.stride.0 = _halide_buffer_get_stride(input.buffer, 0)
let input.min.1 = _halide_buffer_get_min(input.buffer, 1)
let input.stride.1 = _halide_buffer_get_stride(input.buffer, 1)
let output = _halide_buffer_get_host(output.buffer)
let output.min.0 = _halide_buffer_get_min(output.buffer, 0)
let output.extent.0 = _halide_buffer_get_extent(output.buffer, 0)
let output.stride.0 = _halide_buffer_get_stride(output.buffer, 0)
let output.min.1 = _halide_buffer_get_min(output.buffer, 1)
let output.extent.1 = _halide_buffer_get_extent(output.buffer, 1)
let output.stride.1 = _halide_buffer_get_stride(output.buffer, 1)
assert((input.stride.0 == 1), 0)
assert((input.min.0 == 0), 0)
assert(((input.stride.1 % 128) == 0), 0)
assert((input.min.1 == 0), 0)
assert((output.stride.0 == 1), 0)
assert((output.min.0 == 0), 0)
assert(((output.stride.1 % 128) == 0), 0)
assert((output.min.1 == 0), 0)
produce output {
  for<Hexagon> (output.s0.__outermost, 0, 1) {
    for (output.s0.y.y, 0, ((output.extent.1 + 3)/4)) {
      prefetch(input, ((((input.stride.1/128)*((output.s0.y.y*4) + 6))*128) + -2), (((((output.extent.0 + 127)/128)*128) + (select((128 < output.extent.0), 2, -2) + (((output.extent.0 + -1)/128)*128))) + 130), 1, 8, input.stride.1)
      for (output.s0.y.yi, 0, 4) {
        allocate rows[int16 * 384 * 1]
        for (output.s0.x.x, 0, ((output.extent.0 + 127)/128)) {
          let rows.s0.x.min_3 = select((0 < output.s0.x.x), likely_if_innermost(((output.s0.x.x*128) + 2)), ((output.s0.x.x*128) + -2))
          produce rows {
            for (rows.s0.x.x, 0, (((257 - rows.s0.x.min_3)/128) + output.s0.x.x)) {
              rows[(ramp(((rows.s0.x.x*128) + rows.s0.x.min_3), 1, 128) % x128(384))] = (((int16x128(input[ramp(((((input.stride.1/128)*(((output.s0.y.y*4) + output.s0.y.yi) + 1))*128) + ((rows.s0.x.x*128) + rows.s0.x.min_3)), 1, 128)])*x128((int16)4)) + ((int16x128(input[ramp(((((input.stride.1/128)*((output.s0.y.y*4) + output.s0.y.yi))*128) + ((rows.s0.x.x*128) + rows.s0.x.min_3)), 1, 128)])*x128((int16)6)) + ((int16x128(input[ramp(((((input.stride.1/128)*(((output.s0.y.y*4) + output.s0.y.yi) + -1))*128) + ((rows.s0.x.x*128) + rows.s0.x.min_3)), 1, 128)])*x128((int16)4)) + int16x128(input[ramp(((((input.stride.1/128)*(((output.s0.y.y*4) + output.s0.y.yi) + -2))*128) + ((rows.s0.x.x*128) + rows.s0.x.min_3)), 1, 128)])))) + int16x128(input[ramp(((((input.stride.1/128)*(((output.s0.y.y*4) + output.s0.y.yi) + 2))*128) + ((rows.s0.x.x*128) + rows.s0.x.min_3)), 1, 128)]))
            }
          }
          consume rows {
            output[ramp(((((output.stride.1/128)*((output.s0.y.y*4) + output.s0.y.yi)) + output.s0.x.x)*128), 1, 128)] = uint8x128(((rows[(ramp(((output.s0.x.x*128) + 2), 1, 128) % x128(384))] + ((rows[(ramp(((output.s0.x.x*128) + 1), 1, 128) % x128(384))]*x128((int16)4)) + ((rows[ramp(((output.s0.x.x % 3)*128), 1, 128)]*x128((int16)6)) + (rows[(ramp(((output.s0.x.x*128) + 382), 1, 128) % x128(384))] + (rows[(ramp(((output.s0.x.x*128) + 383), 1, 128) % x128(384))]*x128((int16)4))))))/x128((int16)256)))
          }
        }
      }
    }
  }
}


Partitioning loops to simplify boundary conditions...
Lowering after partitioning loops:
assert((reinterpret(uint64, output.buffer) != (uint64)0), halide_error_buffer_argument_is_null("output"))
assert((reinterpret(uint64, input.buffer) != (uint64)0), halide_error_buffer_argument_is_null("input"))
let input = _halide_buffer_get_host(input.buffer)
let input.min.0 = _halide_buffer_get_min(input.buffer, 0)
let input.stride.0 = _halide_buffer_get_stride(input.buffer, 0)
let input.min.1 = _halide_buffer_get_min(input.buffer, 1)
let input.stride.1 = _halide_buffer_get_stride(input.buffer, 1)
let output = _halide_buffer_get_host(output.buffer)
let output.min.0 = _halide_buffer_get_min(output.buffer, 0)
let output.extent.0 = _halide_buffer_get_extent(output.buffer, 0)
let output.stride.0 = _halide_buffer_get_stride(output.buffer, 0)
let output.min.1 = _halide_buffer_get_min(output.buffer, 1)
let output.extent.1 = _halide_buffer_get_extent(output.buffer, 1)
let output.stride.1 = _halide_buffer_get_stride(output.buffer, 1)
assert((input.stride.0 == 1), 0)
assert((input.min.0 == 0), 0)
assert(((input.stride.1 % 128) == 0), 0)
assert((input.min.1 == 0), 0)
assert((output.stride.0 == 1), 0)
assert((output.min.0 == 0), 0)
assert(((output.stride.1 % 128) == 0), 0)
assert((output.min.1 == 0), 0)
produce output {
  for<Hexagon> (output.s0.__outermost, 0, 1) {
    for (output.s0.y.y, 0, ((output.extent.1 + 3)/4)) {
      prefetch(input, ((((input.stride.1/128)*((output.s0.y.y*4) + 6))*128) + -2), (((((output.extent.0 + 127)/128)*128) + (select((128 < output.extent.0), 2, -2) + (((output.extent.0 + -1)/128)*128))) + 130), 1, 8, input.stride.1)
      for (output.s0.y.yi, 0, 4) {
        allocate rows[int16 * 384 * 1]
        for (output.s0.x.x, 0, ((output.extent.0 + 127)/128)) {
          let rows.s0.x.min_3 = (select((0 < output.s0.x.x), 2, -2) + (output.s0.x.x*128))
          produce rows {
            for (rows.s0.x.x, 0, (((257 - rows.s0.x.min_3)/128) + output.s0.x.x)) {
              rows[(ramp(((rows.s0.x.x*128) + rows.s0.x.min_3), 1, 128) % x128(384))] = (((int16x128(input[ramp(((((input.stride.1/128)*(((output.s0.y.y*4) + output.s0.y.yi) + 1))*128) + ((rows.s0.x.x*128) + rows.s0.x.min_3)), 1, 128)])*x128((int16)4)) + ((int16x128(input[ramp(((((input.stride.1/128)*((output.s0.y.y*4) + output.s0.y.yi))*128) + ((rows.s0.x.x*128) + rows.s0.x.min_3)), 1, 128)])*x128((int16)6)) + ((int16x128(input[ramp(((((input.stride.1/128)*(((output.s0.y.y*4) + output.s0.y.yi) + -1))*128) + ((rows.s0.x.x*128) + rows.s0.x.min_3)), 1, 128)])*x128((int16)4)) + int16x128(input[ramp(((((input.stride.1/128)*(((output.s0.y.y*4) + output.s0.y.yi) + -2))*128) + ((rows.s0.x.x*128) + rows.s0.x.min_3)), 1, 128)])))) + int16x128(input[ramp(((((input.stride.1/128)*(((output.s0.y.y*4) + output.s0.y.yi) + 2))*128) + ((rows.s0.x.x*128) + rows.s0.x.min_3)), 1, 128)]))
            }
          }
          consume rows {
            output[ramp(((((output.stride.1/128)*((output.s0.y.y*4) + output.s0.y.yi)) + output.s0.x.x)*128), 1, 128)] = uint8x128(((rows[(ramp(((output.s0.x.x*128) + 2), 1, 128) % x128(384))] + ((rows[(ramp(((output.s0.x.x*128) + 1), 1, 128) % x128(384))]*x128((int16)4)) + ((rows[ramp(((output.s0.x.x % 3)*128), 1, 128)]*x128((int16)6)) + (rows[(ramp(((output.s0.x.x*128) + 382), 1, 128) % x128(384))] + (rows[(ramp(((output.s0.x.x*128) + 383), 1, 128) % x128(384))]*x128((int16)4))))))/x128((int16)256)))
          }
        }
      }
    }
  }
}


Trimming loops to the region over which they do something...
Lowering after loop trimming:
assert((reinterpret(uint64, output.buffer) != (uint64)0), halide_error_buffer_argument_is_null("output"))
assert((reinterpret(uint64, input.buffer) != (uint64)0), halide_error_buffer_argument_is_null("input"))
let input = _halide_buffer_get_host(input.buffer)
let input.min.0 = _halide_buffer_get_min(input.buffer, 0)
let input.stride.0 = _halide_buffer_get_stride(input.buffer, 0)
let input.min.1 = _halide_buffer_get_min(input.buffer, 1)
let input.stride.1 = _halide_buffer_get_stride(input.buffer, 1)
let output = _halide_buffer_get_host(output.buffer)
let output.min.0 = _halide_buffer_get_min(output.buffer, 0)
let output.extent.0 = _halide_buffer_get_extent(output.buffer, 0)
let output.stride.0 = _halide_buffer_get_stride(output.buffer, 0)
let output.min.1 = _halide_buffer_get_min(output.buffer, 1)
let output.extent.1 = _halide_buffer_get_extent(output.buffer, 1)
let output.stride.1 = _halide_buffer_get_stride(output.buffer, 1)
assert((input.stride.0 == 1), 0)
assert((input.min.0 == 0), 0)
assert(((input.stride.1 % 128) == 0), 0)
assert((input.min.1 == 0), 0)
assert((output.stride.0 == 1), 0)
assert((output.min.0 == 0), 0)
assert(((output.stride.1 % 128) == 0), 0)
assert((output.min.1 == 0), 0)
produce output {
  for<Hexagon> (output.s0.__outermost, 0, 1) {
    for (output.s0.y.y, 0, ((output.extent.1 + 3)/4)) {
      prefetch(input, ((((input.stride.1/128)*((output.s0.y.y*4) + 6))*128) + -2), (((((output.extent.0 + 127)/128)*128) + (select((128 < output.extent.0), 2, -2) + (((output.extent.0 + -1)/128)*128))) + 130), 1, 8, input.stride.1)
      for (output.s0.y.yi, 0, 4) {
        allocate rows[int16 * 384 * 1]
        for (output.s0.x.x, 0, ((output.extent.0 + 127)/128)) {
          let rows.s0.x.min_3 = (select((0 < output.s0.x.x), 2, -2) + (output.s0.x.x*128))
          produce rows {
            for (rows.s0.x.x, 0, (((257 - rows.s0.x.min_3)/128) + output.s0.x.x)) {
              rows[(ramp(((rows.s0.x.x*128) + rows.s0.x.min_3), 1, 128) % x128(384))] = (((int16x128(input[ramp(((((input.stride.1/128)*(((output.s0.y.y*4) + output.s0.y.yi) + 1))*128) + ((rows.s0.x.x*128) + rows.s0.x.min_3)), 1, 128)])*x128((int16)4)) + ((int16x128(input[ramp(((((input.stride.1/128)*((output.s0.y.y*4) + output.s0.y.yi))*128) + ((rows.s0.x.x*128) + rows.s0.x.min_3)), 1, 128)])*x128((int16)6)) + ((int16x128(input[ramp(((((input.stride.1/128)*(((output.s0.y.y*4) + output.s0.y.yi) + -1))*128) + ((rows.s0.x.x*128) + rows.s0.x.min_3)), 1, 128)])*x128((int16)4)) + int16x128(input[ramp(((((input.stride.1/128)*(((output.s0.y.y*4) + output.s0.y.yi) + -2))*128) + ((rows.s0.x.x*128) + rows.s0.x.min_3)), 1, 128)])))) + int16x128(input[ramp(((((input.stride.1/128)*(((output.s0.y.y*4) + output.s0.y.yi) + 2))*128) + ((rows.s0.x.x*128) + rows.s0.x.min_3)), 1, 128)]))
            }
          }
          consume rows {
            output[ramp(((((output.stride.1/128)*((output.s0.y.y*4) + output.s0.y.yi)) + output.s0.x.x)*128), 1, 128)] = uint8x128(((rows[(ramp(((output.s0.x.x*128) + 2), 1, 128) % x128(384))] + ((rows[(ramp(((output.s0.x.x*128) + 1), 1, 128) % x128(384))]*x128((int16)4)) + ((rows[ramp(((output.s0.x.x % 3)*128), 1, 128)]*x128((int16)6)) + (rows[(ramp(((output.s0.x.x*128) + 382), 1, 128) % x128(384))] + (rows[(ramp(((output.s0.x.x*128) + 383), 1, 128) % x128(384))]*x128((int16)4))))))/x128((int16)256)))
          }
        }
      }
    }
  }
}


Injecting early frees...
Lowering after injecting early frees:
assert((reinterpret(uint64, output.buffer) != (uint64)0), halide_error_buffer_argument_is_null("output"))
assert((reinterpret(uint64, input.buffer) != (uint64)0), halide_error_buffer_argument_is_null("input"))
let input = _halide_buffer_get_host(input.buffer)
let input.min.0 = _halide_buffer_get_min(input.buffer, 0)
let input.stride.0 = _halide_buffer_get_stride(input.buffer, 0)
let input.min.1 = _halide_buffer_get_min(input.buffer, 1)
let input.stride.1 = _halide_buffer_get_stride(input.buffer, 1)
let output = _halide_buffer_get_host(output.buffer)
let output.min.0 = _halide_buffer_get_min(output.buffer, 0)
let output.extent.0 = _halide_buffer_get_extent(output.buffer, 0)
let output.stride.0 = _halide_buffer_get_stride(output.buffer, 0)
let output.min.1 = _halide_buffer_get_min(output.buffer, 1)
let output.extent.1 = _halide_buffer_get_extent(output.buffer, 1)
let output.stride.1 = _halide_buffer_get_stride(output.buffer, 1)
assert((input.stride.0 == 1), 0)
assert((input.min.0 == 0), 0)
assert(((input.stride.1 % 128) == 0), 0)
assert((input.min.1 == 0), 0)
assert((output.stride.0 == 1), 0)
assert((output.min.0 == 0), 0)
assert(((output.stride.1 % 128) == 0), 0)
assert((output.min.1 == 0), 0)
produce output {
  for<Hexagon> (output.s0.__outermost, 0, 1) {
    for (output.s0.y.y, 0, ((output.extent.1 + 3)/4)) {
      prefetch(input, ((((input.stride.1/128)*((output.s0.y.y*4) + 6))*128) + -2), (((((output.extent.0 + 127)/128)*128) + (select((128 < output.extent.0), 2, -2) + (((output.extent.0 + -1)/128)*128))) + 130), 1, 8, input.stride.1)
      for (output.s0.y.yi, 0, 4) {
        allocate rows[int16 * 384 * 1]
        for (output.s0.x.x, 0, ((output.extent.0 + 127)/128)) {
          let rows.s0.x.min_3 = (select((0 < output.s0.x.x), 2, -2) + (output.s0.x.x*128))
          produce rows {
            for (rows.s0.x.x, 0, (((257 - rows.s0.x.min_3)/128) + output.s0.x.x)) {
              rows[(ramp(((rows.s0.x.x*128) + rows.s0.x.min_3), 1, 128) % x128(384))] = (((int16x128(input[ramp(((((input.stride.1/128)*(((output.s0.y.y*4) + output.s0.y.yi) + 1))*128) + ((rows.s0.x.x*128) + rows.s0.x.min_3)), 1, 128)])*x128((int16)4)) + ((int16x128(input[ramp(((((input.stride.1/128)*((output.s0.y.y*4) + output.s0.y.yi))*128) + ((rows.s0.x.x*128) + rows.s0.x.min_3)), 1, 128)])*x128((int16)6)) + ((int16x128(input[ramp(((((input.stride.1/128)*(((output.s0.y.y*4) + output.s0.y.yi) + -1))*128) + ((rows.s0.x.x*128) + rows.s0.x.min_3)), 1, 128)])*x128((int16)4)) + int16x128(input[ramp(((((input.stride.1/128)*(((output.s0.y.y*4) + output.s0.y.yi) + -2))*128) + ((rows.s0.x.x*128) + rows.s0.x.min_3)), 1, 128)])))) + int16x128(input[ramp(((((input.stride.1/128)*(((output.s0.y.y*4) + output.s0.y.yi) + 2))*128) + ((rows.s0.x.x*128) + rows.s0.x.min_3)), 1, 128)]))
            }
          }
          consume rows {
            output[ramp(((((output.stride.1/128)*((output.s0.y.y*4) + output.s0.y.yi)) + output.s0.x.x)*128), 1, 128)] = uint8x128(((rows[(ramp(((output.s0.x.x*128) + 2), 1, 128) % x128(384))] + ((rows[(ramp(((output.s0.x.x*128) + 1), 1, 128) % x128(384))]*x128((int16)4)) + ((rows[ramp(((output.s0.x.x % 3)*128), 1, 128)]*x128((int16)6)) + (rows[(ramp(((output.s0.x.x*128) + 382), 1, 128) % x128(384))] + (rows[(ramp(((output.s0.x.x*128) + 383), 1, 128) % x128(384))]*x128((int16)4))))))/x128((int16)256)))
          }
        }
        free rows
      }
    }
  }
}


Bounding small allocations...
Lowering after bounding small allocations:
assert((reinterpret(uint64, output.buffer) != (uint64)0), halide_error_buffer_argument_is_null("output"))
assert((reinterpret(uint64, input.buffer) != (uint64)0), halide_error_buffer_argument_is_null("input"))
let input = _halide_buffer_get_host(input.buffer)
let input.min.0 = _halide_buffer_get_min(input.buffer, 0)
let input.stride.0 = _halide_buffer_get_stride(input.buffer, 0)
let input.min.1 = _halide_buffer_get_min(input.buffer, 1)
let input.stride.1 = _halide_buffer_get_stride(input.buffer, 1)
let output = _halide_buffer_get_host(output.buffer)
let output.min.0 = _halide_buffer_get_min(output.buffer, 0)
let output.extent.0 = _halide_buffer_get_extent(output.buffer, 0)
let output.stride.0 = _halide_buffer_get_stride(output.buffer, 0)
let output.min.1 = _halide_buffer_get_min(output.buffer, 1)
let output.extent.1 = _halide_buffer_get_extent(output.buffer, 1)
let output.stride.1 = _halide_buffer_get_stride(output.buffer, 1)
assert((input.stride.0 == 1), 0)
assert((input.min.0 == 0), 0)
assert(((input.stride.1 % 128) == 0), 0)
assert((input.min.1 == 0), 0)
assert((output.stride.0 == 1), 0)
assert((output.min.0 == 0), 0)
assert(((output.stride.1 % 128) == 0), 0)
assert((output.min.1 == 0), 0)
produce output {
  for<Hexagon> (output.s0.__outermost, 0, 1) {
    for (output.s0.y.y, 0, ((output.extent.1 + 3)/4)) {
      prefetch(input, ((((input.stride.1/128)*((output.s0.y.y*4) + 6))*128) + -2), (((((output.extent.0 + 127)/128)*128) + (select((128 < output.extent.0), 2, -2) + (((output.extent.0 + -1)/128)*128))) + 130), 1, 8, input.stride.1)
      for (output.s0.y.yi, 0, 4) {
        allocate rows[int16 * 384 * 1]
        for (output.s0.x.x, 0, ((output.extent.0 + 127)/128)) {
          let rows.s0.x.min_3 = (select((0 < output.s0.x.x), 2, -2) + (output.s0.x.x*128))
          produce rows {
            for (rows.s0.x.x, 0, (((257 - rows.s0.x.min_3)/128) + output.s0.x.x)) {
              rows[(ramp(((rows.s0.x.x*128) + rows.s0.x.min_3), 1, 128) % x128(384))] = (((int16x128(input[ramp(((((input.stride.1/128)*(((output.s0.y.y*4) + output.s0.y.yi) + 1))*128) + ((rows.s0.x.x*128) + rows.s0.x.min_3)), 1, 128)])*x128((int16)4)) + ((int16x128(input[ramp(((((input.stride.1/128)*((output.s0.y.y*4) + output.s0.y.yi))*128) + ((rows.s0.x.x*128) + rows.s0.x.min_3)), 1, 128)])*x128((int16)6)) + ((int16x128(input[ramp(((((input.stride.1/128)*(((output.s0.y.y*4) + output.s0.y.yi) + -1))*128) + ((rows.s0.x.x*128) + rows.s0.x.min_3)), 1, 128)])*x128((int16)4)) + int16x128(input[ramp(((((input.stride.1/128)*(((output.s0.y.y*4) + output.s0.y.yi) + -2))*128) + ((rows.s0.x.x*128) + rows.s0.x.min_3)), 1, 128)])))) + int16x128(input[ramp(((((input.stride.1/128)*(((output.s0.y.y*4) + output.s0.y.yi) + 2))*128) + ((rows.s0.x.x*128) + rows.s0.x.min_3)), 1, 128)]))
            }
          }
          consume rows {
            output[ramp(((((output.stride.1/128)*((output.s0.y.y*4) + output.s0.y.yi)) + output.s0.x.x)*128), 1, 128)] = uint8x128(((rows[(ramp(((output.s0.x.x*128) + 2), 1, 128) % x128(384))] + ((rows[(ramp(((output.s0.x.x*128) + 1), 1, 128) % x128(384))]*x128((int16)4)) + ((rows[ramp(((output.s0.x.x % 3)*128), 1, 128)]*x128((int16)6)) + (rows[(ramp(((output.s0.x.x*128) + 382), 1, 128) % x128(384))] + (rows[(ramp(((output.s0.x.x*128) + 383), 1, 128) % x128(384))]*x128((int16)4))))))/x128((int16)256)))
          }
        }
        free rows
      }
    }
  }
}


Simplifying...
Lowering unsafe promises...
Lowering after lowering unsafe promises:
assert((reinterpret(uint64, output.buffer) != (uint64)0), halide_error_buffer_argument_is_null("output"))
assert((reinterpret(uint64, input.buffer) != (uint64)0), halide_error_buffer_argument_is_null("input"))
let input = _halide_buffer_get_host(input.buffer)
let input.min.0 = _halide_buffer_get_min(input.buffer, 0)
let input.stride.0 = _halide_buffer_get_stride(input.buffer, 0)
let input.min.1 = _halide_buffer_get_min(input.buffer, 1)
let input.stride.1 = _halide_buffer_get_stride(input.buffer, 1)
let output = _halide_buffer_get_host(output.buffer)
let output.min.0 = _halide_buffer_get_min(output.buffer, 0)
let output.extent.0 = _halide_buffer_get_extent(output.buffer, 0)
let output.stride.0 = _halide_buffer_get_stride(output.buffer, 0)
let output.min.1 = _halide_buffer_get_min(output.buffer, 1)
let output.extent.1 = _halide_buffer_get_extent(output.buffer, 1)
let output.stride.1 = _halide_buffer_get_stride(output.buffer, 1)
assert((input.stride.0 == 1), 0)
assert((input.min.0 == 0), 0)
assert(((input.stride.1 % 128) == 0), 0)
assert((input.min.1 == 0), 0)
assert((output.stride.0 == 1), 0)
assert((output.min.0 == 0), 0)
assert(((output.stride.1 % 128) == 0), 0)
assert((output.min.1 == 0), 0)
produce output {
  for<Hexagon> (output.s0.__outermost, 0, 1) {
    for (output.s0.y.y, 0, ((output.extent.1 + 3)/4)) {
      prefetch(input, ((((input.stride.1/128)*((output.s0.y.y*4) + 6))*128) + -2), (((((output.extent.0 + 127)/128)*128) + (select((128 < output.extent.0), 2, -2) + (((output.extent.0 + -1)/128)*128))) + 130), 1, 8, input.stride.1)
      for (output.s0.y.yi, 0, 4) {
        allocate rows[int16 * 384 * 1]
        for (output.s0.x.x, 0, ((output.extent.0 + 127)/128)) {
          let rows.s0.x.min_3 = (select((0 < output.s0.x.x), 2, -2) + (output.s0.x.x*128))
          produce rows {
            for (rows.s0.x.x, 0, (((257 - rows.s0.x.min_3)/128) + output.s0.x.x)) {
              rows[(ramp(((rows.s0.x.x*128) + rows.s0.x.min_3), 1, 128) % x128(384))] = (let t83 = ((output.s0.y.y*4) + output.s0.y.yi) in (let t84 = ((rows.s0.x.x*128) + rows.s0.x.min_3) in (((int16x128(input[ramp(((((input.stride.1/128)*(t83 + 1))*128) + t84), 1, 128)])*x128((int16)4)) + ((int16x128(input[ramp(((((input.stride.1/128)*t83)*128) + t84), 1, 128)])*x128((int16)6)) + ((int16x128(input[ramp(((((input.stride.1/128)*(t83 + -1))*128) + t84), 1, 128)])*x128((int16)4)) + int16x128(input[ramp(((((input.stride.1/128)*(t83 + -2))*128) + t84), 1, 128)])))) + int16x128(input[ramp(((((input.stride.1/128)*(t83 + 2))*128) + t84), 1, 128)]))))
            }
          }
          consume rows {
            output[ramp(((((output.stride.1/128)*((output.s0.y.y*4) + output.s0.y.yi)) + output.s0.x.x)*128), 1, 128)] = uint8x128(((rows[(ramp(((output.s0.x.x*128) + 2), 1, 128) % x128(384))] + ((rows[(ramp(((output.s0.x.x*128) + 1), 1, 128) % x128(384))]*x128((int16)4)) + ((rows[ramp(((output.s0.x.x % 3)*128), 1, 128)]*x128((int16)6)) + (rows[(ramp(((output.s0.x.x*128) + 382), 1, 128) % x128(384))] + (rows[(ramp(((output.s0.x.x*128) + 383), 1, 128) % x128(384))]*x128((int16)4))))))/x128((int16)256)))
          }
        }
        free rows
      }
    }
  }
}


Lowering after final simplification:
assert((reinterpret(uint64, output.buffer) != (uint64)0), halide_error_buffer_argument_is_null("output"))
assert((reinterpret(uint64, input.buffer) != (uint64)0), halide_error_buffer_argument_is_null("input"))
let input = _halide_buffer_get_host(input.buffer)
let input.min.0 = _halide_buffer_get_min(input.buffer, 0)
let input.stride.0 = _halide_buffer_get_stride(input.buffer, 0)
let input.min.1 = _halide_buffer_get_min(input.buffer, 1)
let input.stride.1 = _halide_buffer_get_stride(input.buffer, 1)
let output = _halide_buffer_get_host(output.buffer)
let output.min.0 = _halide_buffer_get_min(output.buffer, 0)
let output.extent.0 = _halide_buffer_get_extent(output.buffer, 0)
let output.stride.0 = _halide_buffer_get_stride(output.buffer, 0)
let output.min.1 = _halide_buffer_get_min(output.buffer, 1)
let output.extent.1 = _halide_buffer_get_extent(output.buffer, 1)
let output.stride.1 = _halide_buffer_get_stride(output.buffer, 1)
assert((input.stride.0 == 1), 0)
assert((input.min.0 == 0), 0)
assert(((input.stride.1 % 128) == 0), 0)
assert((input.min.1 == 0), 0)
assert((output.stride.0 == 1), 0)
assert((output.min.0 == 0), 0)
assert(((output.stride.1 % 128) == 0), 0)
assert((output.min.1 == 0), 0)
produce output {
  let t92 = ((output.extent.0 + 127)/128)
  let t87 = ((output.extent.1 + 3)/4)
  let t91 = (output.stride.1/128)
  let t88 = (input.stride.1/128)
  let t89 = (((t92*128) + (select((128 < output.extent.0), 2, -2) + (((output.extent.0 + -1)/128)*128))) + 130)
  for<Hexagon> (output.s0.__outermost, 0, 1) {
    for (output.s0.y.y, 0, t87) {
      prefetch(input, (((((output.s0.y.y*4) + 6)*t88)*128) + -2), t89, 1, 8, input.stride.1)
      let t93 = (output.s0.y.y*4)
      for (output.s0.y.yi, 0, 4) {
        allocate rows[int16 * 384 * 1]
        let t96 = (output.s0.y.yi + t93)
        let t95 = (t91*t96)
        for (output.s0.x.x, 0, t92) {
          let rows.s0.x.min_3 = (select((0 < output.s0.x.x), 2, -2) + (output.s0.x.x*128))
          produce rows {
            let t102 = (((t96 + 2)*t88)*128)
            let t98 = (((t96 + 1)*t88)*128)
            let t100 = (((t96 + -1)*t88)*128)
            let t101 = (((t96 + -2)*t88)*128)
            let t99 = ((t88*t96)*128)
            let t97 = (((257 - rows.s0.x.min_3)/128) + output.s0.x.x)
            for (rows.s0.x.x, 0, t97) {
              rows[(ramp(((rows.s0.x.x*128) + rows.s0.x.min_3), 1, 128) % x128(384))] = (((int16x128(input[ramp((((rows.s0.x.x*128) + rows.s0.x.min_3) + t98), 1, 128)])*x128((int16)4)) + ((int16x128(input[ramp((((rows.s0.x.x*128) + rows.s0.x.min_3) + t99), 1, 128)])*x128((int16)6)) + ((int16x128(input[ramp((((rows.s0.x.x*128) + rows.s0.x.min_3) + t100), 1, 128)])*x128((int16)4)) + int16x128(input[ramp((((rows.s0.x.x*128) + rows.s0.x.min_3) + t101), 1, 128)])))) + int16x128(input[ramp((((rows.s0.x.x*128) + rows.s0.x.min_3) + t102), 1, 128)]))
            }
          }
          consume rows {
            output[ramp(((output.s0.x.x + t95)*128), 1, 128)] = uint8x128(((rows[(ramp(((output.s0.x.x*128) + 2), 1, 128) % x128(384))] + ((rows[(ramp(((output.s0.x.x*128) + 1), 1, 128) % x128(384))]*x128((int16)4)) + ((rows[ramp(((output.s0.x.x % 3)*128), 1, 128)]*x128((int16)6)) + (rows[(ramp(((output.s0.x.x*128) + 382), 1, 128) % x128(384))] + (rows[(ramp(((output.s0.x.x*128) + 383), 1, 128) % x128(384))]*x128((int16)4))))))/x128((int16)256)))
          }
        }
        free rows
      }
    }
  }
}


Skipping Hexagon offload...
Body after wrapping extern calls:
assert((reinterpret(uint64, output.buffer) != (uint64)0), halide_error_buffer_argument_is_null("output"))
assert((reinterpret(uint64, input.buffer) != (uint64)0), halide_error_buffer_argument_is_null("input"))
let input = _halide_buffer_get_host(input.buffer)
let input.min.0 = _halide_buffer_get_min(input.buffer, 0)
let input.stride.0 = _halide_buffer_get_stride(input.buffer, 0)
let input.min.1 = _halide_buffer_get_min(input.buffer, 1)
let input.stride.1 = _halide_buffer_get_stride(input.buffer, 1)
let output = _halide_buffer_get_host(output.buffer)
let output.min.0 = _halide_buffer_get_min(output.buffer, 0)
let output.extent.0 = _halide_buffer_get_extent(output.buffer, 0)
let output.stride.0 = _halide_buffer_get_stride(output.buffer, 0)
let output.min.1 = _halide_buffer_get_min(output.buffer, 1)
let output.extent.1 = _halide_buffer_get_extent(output.buffer, 1)
let output.stride.1 = _halide_buffer_get_stride(output.buffer, 1)
assert((input.stride.0 == 1), 0)
assert((input.min.0 == 0), 0)
assert(((input.stride.1 % 128) == 0), 0)
assert((input.min.1 == 0), 0)
assert((output.stride.0 == 1), 0)
assert((output.min.0 == 0), 0)
assert(((output.stride.1 % 128) == 0), 0)
assert((output.min.1 == 0), 0)
produce output {
  let t92 = ((output.extent.0 + 127)/128)
  let t87 = ((output.extent.1 + 3)/4)
  let t91 = (output.stride.1/128)
  let t88 = (input.stride.1/128)
  let t89 = (((t92*128) + (select((128 < output.extent.0), 2, -2) + (((output.extent.0 + -1)/128)*128))) + 130)
  for<Hexagon> (output.s0.__outermost, 0, 1) {
    for (output.s0.y.y, 0, t87) {
      prefetch(input, (((((output.s0.y.y*4) + 6)*t88)*128) + -2), t89, 1, 8, input.stride.1)
      let t93 = (output.s0.y.y*4)
      for (output.s0.y.yi, 0, 4) {
        allocate rows[int16 * 384 * 1]
        let t96 = (output.s0.y.yi + t93)
        let t95 = (t91*t96)
        for (output.s0.x.x, 0, t92) {
          let rows.s0.x.min_3 = (select((0 < output.s0.x.x), 2, -2) + (output.s0.x.x*128))
          produce rows {
            let t102 = (((t96 + 2)*t88)*128)
            let t98 = (((t96 + 1)*t88)*128)
            let t100 = (((t96 + -1)*t88)*128)
            let t101 = (((t96 + -2)*t88)*128)
            let t99 = ((t88*t96)*128)
            let t97 = (((257 - rows.s0.x.min_3)/128) + output.s0.x.x)
            for (rows.s0.x.x, 0, t97) {
              rows[(ramp(((rows.s0.x.x*128) + rows.s0.x.min_3), 1, 128) % x128(384))] = (((int16x128(input[ramp((((rows.s0.x.x*128) + rows.s0.x.min_3) + t98), 1, 128)])*x128((int16)4)) + ((int16x128(input[ramp((((rows.s0.x.x*128) + rows.s0.x.min_3) + t99), 1, 128)])*x128((int16)6)) + ((int16x128(input[ramp((((rows.s0.x.x*128) + rows.s0.x.min_3) + t100), 1, 128)])*x128((int16)4)) + int16x128(input[ramp((((rows.s0.x.x*128) + rows.s0.x.min_3) + t101), 1, 128)])))) + int16x128(input[ramp((((rows.s0.x.x*128) + rows.s0.x.min_3) + t102), 1, 128)]))
            }
          }
          consume rows {
            output[ramp(((output.s0.x.x + t95)*128), 1, 128)] = uint8x128(((rows[(ramp(((output.s0.x.x*128) + 2), 1, 128) % x128(384))] + ((rows[(ramp(((output.s0.x.x*128) + 1), 1, 128) % x128(384))]*x128((int16)4)) + ((rows[ramp(((output.s0.x.x % 3)*128), 1, 128)]*x128((int16)6)) + (rows[(ramp(((output.s0.x.x*128) + 382), 1, 128) % x128(384))] + (rows[(ramp(((output.s0.x.x*128) + 383), 1, 128) % x128(384))]*x128((int16)4))))))/x128((int16)256)))
          }
        }
        free rows
      }
    }
  }
}


Target triple of initial module: hexagon-unknown--elf
Generating llvm bitcode...
Generating llvm bitcode prolog for function gaussian5x5_hvx128...
Unpredicating loads and stores...
Lowering after unpredicating loads/stores:
assert((reinterpret(uint64, output.buffer) != (uint64)0), halide_error_buffer_argument_is_null("output"))
assert((reinterpret(uint64, input.buffer) != (uint64)0), halide_error_buffer_argument_is_null("input"))
let input = _halide_buffer_get_host(input.buffer)
let input.min.0 = _halide_buffer_get_min(input.buffer, 0)
let input.stride.0 = _halide_buffer_get_stride(input.buffer, 0)
let input.min.1 = _halide_buffer_get_min(input.buffer, 1)
let input.stride.1 = _halide_buffer_get_stride(input.buffer, 1)
let output = _halide_buffer_get_host(output.buffer)
let output.min.0 = _halide_buffer_get_min(output.buffer, 0)
let output.extent.0 = _halide_buffer_get_extent(output.buffer, 0)
let output.stride.0 = _halide_buffer_get_stride(output.buffer, 0)
let output.min.1 = _halide_buffer_get_min(output.buffer, 1)
let output.extent.1 = _halide_buffer_get_extent(output.buffer, 1)
let output.stride.1 = _halide_buffer_get_stride(output.buffer, 1)
assert((input.stride.0 == 1), 0)
assert((input.min.0 == 0), 0)
assert(((input.stride.1 % 128) == 0), 0)
assert((input.min.1 == 0), 0)
assert((output.stride.0 == 1), 0)
assert((output.min.0 == 0), 0)
assert(((output.stride.1 % 128) == 0), 0)
assert((output.min.1 == 0), 0)
produce output {
  let t92 = ((output.extent.0 + 127)/128)
  let t87 = ((output.extent.1 + 3)/4)
  let t91 = (output.stride.1/128)
  let t88 = (input.stride.1/128)
  let t89 = (((t92*128) + (select((128 < output.extent.0), 2, -2) + (((output.extent.0 + -1)/128)*128))) + 130)
  for<Hexagon> (output.s0.__outermost, 0, 1) {
    for (output.s0.y.y, 0, t87) {
      prefetch(input, (((((output.s0.y.y*4) + 6)*t88)*128) + -2), t89, 1, 8, input.stride.1)
      let t93 = (output.s0.y.y*4)
      for (output.s0.y.yi, 0, 4) {
        allocate rows[int16 * 384 * 1]
        let t96 = (output.s0.y.yi + t93)
        let t95 = (t91*t96)
        for (output.s0.x.x, 0, t92) {
          let rows.s0.x.min_3 = (select((0 < output.s0.x.x), 2, -2) + (output.s0.x.x*128))
          produce rows {
            let t102 = (((t96 + 2)*t88)*128)
            let t98 = (((t96 + 1)*t88)*128)
            let t100 = (((t96 + -1)*t88)*128)
            let t101 = (((t96 + -2)*t88)*128)
            let t99 = ((t88*t96)*128)
            let t97 = (((257 - rows.s0.x.min_3)/128) + output.s0.x.x)
            for (rows.s0.x.x, 0, t97) {
              rows[(ramp(((rows.s0.x.x*128) + rows.s0.x.min_3), 1, 128) % x128(384))] = (((int16x128(input[ramp((((rows.s0.x.x*128) + rows.s0.x.min_3) + t98), 1, 128)])*x128((int16)4)) + ((int16x128(input[ramp((((rows.s0.x.x*128) + rows.s0.x.min_3) + t99), 1, 128)])*x128((int16)6)) + ((int16x128(input[ramp((((rows.s0.x.x*128) + rows.s0.x.min_3) + t100), 1, 128)])*x128((int16)4)) + int16x128(input[ramp((((rows.s0.x.x*128) + rows.s0.x.min_3) + t101), 1, 128)])))) + int16x128(input[ramp((((rows.s0.x.x*128) + rows.s0.x.min_3) + t102), 1, 128)]))
            }
          }
          consume rows {
            output[ramp(((output.s0.x.x + t95)*128), 1, 128)] = uint8x128(((rows[(ramp(((output.s0.x.x*128) + 2), 1, 128) % x128(384))] + ((rows[(ramp(((output.s0.x.x*128) + 1), 1, 128) % x128(384))]*x128((int16)4)) + ((rows[ramp(((output.s0.x.x % 3)*128), 1, 128)]*x128((int16)6)) + (rows[(ramp(((output.s0.x.x*128) + 382), 1, 128) % x128(384))] + (rows[(ramp(((output.s0.x.x*128) + 383), 1, 128) % x128(384))]*x128((int16)4))))))/x128((int16)256)))
          }
        }
        free rows
      }
    }
  }
}


Optimizing shuffles...
Lowering after optimizing shuffles:
assert((reinterpret(uint64, output.buffer) != (uint64)0), halide_error_buffer_argument_is_null("output"))
assert((reinterpret(uint64, input.buffer) != (uint64)0), halide_error_buffer_argument_is_null("input"))
let input = _halide_buffer_get_host(input.buffer)
let input.min.0 = _halide_buffer_get_min(input.buffer, 0)
let input.stride.0 = _halide_buffer_get_stride(input.buffer, 0)
let input.min.1 = _halide_buffer_get_min(input.buffer, 1)
let input.stride.1 = _halide_buffer_get_stride(input.buffer, 1)
let output = _halide_buffer_get_host(output.buffer)
let output.min.0 = _halide_buffer_get_min(output.buffer, 0)
let output.extent.0 = _halide_buffer_get_extent(output.buffer, 0)
let output.stride.0 = _halide_buffer_get_stride(output.buffer, 0)
let output.min.1 = _halide_buffer_get_min(output.buffer, 1)
let output.extent.1 = _halide_buffer_get_extent(output.buffer, 1)
let output.stride.1 = _halide_buffer_get_stride(output.buffer, 1)
assert((input.stride.0 == 1), 0)
assert((input.min.0 == 0), 0)
assert(((input.stride.1 % 128) == 0), 0)
assert((input.min.1 == 0), 0)
assert((output.stride.0 == 1), 0)
assert((output.min.0 == 0), 0)
assert(((output.stride.1 % 128) == 0), 0)
assert((output.min.1 == 0), 0)
produce output {
  let t92 = ((output.extent.0 + 127)/128)
  let t87 = ((output.extent.1 + 3)/4)
  let t91 = (output.stride.1/128)
  let t88 = (input.stride.1/128)
  let t89 = (((t92*128) + (select((128 < output.extent.0), 2, -2) + (((output.extent.0 + -1)/128)*128))) + 130)
  for<Hexagon> (output.s0.__outermost, 0, 1) {
    for (output.s0.y.y, 0, t87) {
      prefetch(input, (((((output.s0.y.y*4) + 6)*t88)*128) + -2), t89, 1, 8, input.stride.1)
      let t93 = (output.s0.y.y*4)
      for (output.s0.y.yi, 0, 4) {
        allocate rows[int16 * 384 * 1]
        let t96 = (output.s0.y.yi + t93)
        let t95 = (t91*t96)
        for (output.s0.x.x, 0, t92) {
          let rows.s0.x.min_3 = (select((0 < output.s0.x.x), 2, -2) + (output.s0.x.x*128))
          produce rows {
            let t102 = (((t96 + 2)*t88)*128)
            let t98 = (((t96 + 1)*t88)*128)
            let t100 = (((t96 + -1)*t88)*128)
            let t101 = (((t96 + -2)*t88)*128)
            let t99 = ((t88*t96)*128)
            let t97 = (((257 - rows.s0.x.min_3)/128) + output.s0.x.x)
            for (rows.s0.x.x, 0, t97) {
              rows[(ramp(((rows.s0.x.x*128) + rows.s0.x.min_3), 1, 128) % x128(384))] = (((int16x128(input[ramp((((rows.s0.x.x*128) + rows.s0.x.min_3) + t98), 1, 128)])*x128((int16)4)) + ((int16x128(input[ramp((((rows.s0.x.x*128) + rows.s0.x.min_3) + t99), 1, 128)])*x128((int16)6)) + ((int16x128(input[ramp((((rows.s0.x.x*128) + rows.s0.x.min_3) + t100), 1, 128)])*x128((int16)4)) + int16x128(input[ramp((((rows.s0.x.x*128) + rows.s0.x.min_3) + t101), 1, 128)])))) + int16x128(input[ramp((((rows.s0.x.x*128) + rows.s0.x.min_3) + t102), 1, 128)]))
            }
          }
          consume rows {
            output[ramp(((output.s0.x.x + t95)*128), 1, 128)] = uint8x128(((rows[(ramp(((output.s0.x.x*128) + 2), 1, 128) % x128(384))] + ((rows[(ramp(((output.s0.x.x*128) + 1), 1, 128) % x128(384))]*x128((int16)4)) + ((rows[ramp(((output.s0.x.x % 3)*128), 1, 128)]*x128((int16)6)) + (rows[(ramp(((output.s0.x.x*128) + 382), 1, 128) % x128(384))] + (rows[(ramp(((output.s0.x.x*128) + 383), 1, 128) % x128(384))]*x128((int16)4))))))/x128((int16)256)))
          }
        }
        free rows
      }
    }
  }
}


Generating vtmpy/vrmpy...
Lowering after generating vtmpy/vrmpy:
assert((reinterpret(uint64, output.buffer) != (uint64)0), halide_error_buffer_argument_is_null("output"))
assert((reinterpret(uint64, input.buffer) != (uint64)0), halide_error_buffer_argument_is_null("input"))
let input = _halide_buffer_get_host(input.buffer)
let input.min.0 = _halide_buffer_get_min(input.buffer, 0)
let input.stride.0 = _halide_buffer_get_stride(input.buffer, 0)
let input.min.1 = _halide_buffer_get_min(input.buffer, 1)
let input.stride.1 = _halide_buffer_get_stride(input.buffer, 1)
let output = _halide_buffer_get_host(output.buffer)
let output.min.0 = _halide_buffer_get_min(output.buffer, 0)
let output.extent.0 = _halide_buffer_get_extent(output.buffer, 0)
let output.stride.0 = _halide_buffer_get_stride(output.buffer, 0)
let output.min.1 = _halide_buffer_get_min(output.buffer, 1)
let output.extent.1 = _halide_buffer_get_extent(output.buffer, 1)
let output.stride.1 = _halide_buffer_get_stride(output.buffer, 1)
assert((input.stride.0 == 1), 0)
assert((input.min.0 == 0), 0)
assert(((input.stride.1 % 128) == 0), 0)
assert((input.min.1 == 0), 0)
assert((output.stride.0 == 1), 0)
assert((output.min.0 == 0), 0)
assert(((output.stride.1 % 128) == 0), 0)
assert((output.min.1 == 0), 0)
produce output {
  let t92 = ((output.extent.0 + 127)/128)
  let t87 = ((output.extent.1 + 3)/4)
  let t91 = (output.stride.1/128)
  let t88 = (input.stride.1/128)
  let t89 = (((t92*128) + (select((128 < output.extent.0), 2, -2) + (((output.extent.0 + -1)/128)*128))) + 130)
  for<Hexagon> (output.s0.__outermost, 0, 1) {
    for (output.s0.y.y, 0, t87) {
      prefetch(input, (((((output.s0.y.y*4) + 6)*t88)*128) + -2), t89, 1, 8, input.stride.1)
      let t93 = (output.s0.y.y*4)
      for (output.s0.y.yi, 0, 4) {
        allocate rows[int16 * 384 * 1]
        let t96 = (output.s0.y.yi + t93)
        let t95 = (t91*t96)
        for (output.s0.x.x, 0, t92) {
          let rows.s0.x.min_3 = (select((0 < output.s0.x.x), 2, -2) + (output.s0.x.x*128))
          produce rows {
            let t102 = (((t96 + 2)*t88)*128)
            let t98 = (((t96 + 1)*t88)*128)
            let t100 = (((t96 + -1)*t88)*128)
            let t101 = (((t96 + -2)*t88)*128)
            let t99 = ((t88*t96)*128)
            let t97 = (((257 - rows.s0.x.min_3)/128) + output.s0.x.x)
            for (rows.s0.x.x, 0, t97) {
              rows[(ramp(((rows.s0.x.x*128) + rows.s0.x.min_3), 1, 128) % x128(384))] = (let t107 = ((rows.s0.x.x*128) + rows.s0.x.min_3) in (((int16x128(input[ramp((t107 + t98), 1, 128)])*x128((int16)4)) + ((int16x128(input[ramp((t107 + t99), 1, 128)])*x128((int16)6)) + ((int16x128(input[ramp((t107 + t100), 1, 128)])*x128((int16)4)) + int16x128(input[ramp((t107 + t101), 1, 128)])))) + int16x128(input[ramp((t107 + t102), 1, 128)])))
            }
          }
          consume rows {
            output[ramp(((output.s0.x.x + t95)*128), 1, 128)] = uint8x128(((rows[(ramp(((output.s0.x.x*128) + 2), 1, 128) % x128(384))] + ((rows[(ramp(((output.s0.x.x*128) + 1), 1, 128) % x128(384))]*x128((int16)4)) + ((rows[ramp(((output.s0.x.x % 3)*128), 1, 128)]*x128((int16)6)) + (rows[(ramp(((output.s0.x.x*128) + 382), 1, 128) % x128(384))] + (rows[(ramp(((output.s0.x.x*128) + 383), 1, 128) % x128(384))]*x128((int16)4))))))/x128((int16)256)))
          }
        }
        free rows
      }
    }
  }
}


Aligning loads for HVX....
Lowering after aligning loads:
assert((reinterpret(uint64, output.buffer) != (uint64)0), halide_error_buffer_argument_is_null("output"))
assert((reinterpret(uint64, input.buffer) != (uint64)0), halide_error_buffer_argument_is_null("input"))
let input = _halide_buffer_get_host(input.buffer)
let input.min.0 = _halide_buffer_get_min(input.buffer, 0)
let input.stride.0 = _halide_buffer_get_stride(input.buffer, 0)
let input.min.1 = _halide_buffer_get_min(input.buffer, 1)
let input.stride.1 = _halide_buffer_get_stride(input.buffer, 1)
let output = _halide_buffer_get_host(output.buffer)
let output.min.0 = _halide_buffer_get_min(output.buffer, 0)
let output.extent.0 = _halide_buffer_get_extent(output.buffer, 0)
let output.stride.0 = _halide_buffer_get_stride(output.buffer, 0)
let output.min.1 = _halide_buffer_get_min(output.buffer, 1)
let output.extent.1 = _halide_buffer_get_extent(output.buffer, 1)
let output.stride.1 = _halide_buffer_get_stride(output.buffer, 1)
assert((input.stride.0 == 1), 0)
assert((input.min.0 == 0), 0)
assert(((input.stride.1 % 128) == 0), 0)
assert((input.min.1 == 0), 0)
assert((output.stride.0 == 1), 0)
assert((output.min.0 == 0), 0)
assert(((output.stride.1 % 128) == 0), 0)
assert((output.min.1 == 0), 0)
produce output {
  let t92 = ((output.extent.0 + 127)/128)
  let t87 = ((output.extent.1 + 3)/4)
  let t91 = (output.stride.1/128)
  let t88 = (input.stride.1/128)
  let t89 = (((t92*128) + (select((128 < output.extent.0), 2, -2) + (((output.extent.0 + -1)/128)*128))) + 130)
  for<Hexagon> (output.s0.__outermost, 0, 1) {
    for (output.s0.y.y, 0, t87) {
      prefetch(input, (((((output.s0.y.y*4) + 6)*t88)*128) + -2), t89, 1, 8, input.stride.1)
      let t93 = (output.s0.y.y*4)
      for (output.s0.y.yi, 0, 4) {
        allocate rows[int16 * 384 * 1]
        let t96 = (output.s0.y.yi + t93)
        let t95 = (t91*t96)
        for (output.s0.x.x, 0, t92) {
          let rows.s0.x.min_3 = (select((0 < output.s0.x.x), 2, -2) + (output.s0.x.x*128))
          produce rows {
            let t102 = (((t96 + 2)*t88)*128)
            let t98 = (((t96 + 1)*t88)*128)
            let t100 = (((t96 + -1)*t88)*128)
            let t101 = (((t96 + -2)*t88)*128)
            let t99 = ((t88*t96)*128)
            let t97 = (((257 - rows.s0.x.min_3)/128) + output.s0.x.x)
            for (rows.s0.x.x, 0, t97) {
              rows[(ramp(((rows.s0.x.x*128) + rows.s0.x.min_3), 1, 128) % x128(384))] = (let t108 = ((rows.s0.x.x*128) + rows.s0.x.min_3) in (((int16x128(input[ramp((t108 + t98), 1, 128)])*x128((int16)4)) + ((int16x128(input[ramp((t108 + t99), 1, 128)])*x128((int16)6)) + ((int16x128(input[ramp((t108 + t100), 1, 128)])*x128((int16)4)) + int16x128(input[ramp((t108 + t101), 1, 128)])))) + int16x128(input[ramp((t108 + t102), 1, 128)])))
            }
          }
          consume rows {
            output[ramp(((output.s0.x.x + t95)*128), 1, 128)] = (let t109 = (output.s0.x.x % 3) in uint8x128(((rows[(ramp(((output.s0.x.x*128) + 2), 1, 128) % x128(384))] + ((rows[(ramp(((output.s0.x.x*128) + 1), 1, 128) % x128(384))]*x128((int16)4)) + ((concat_vectors(rows[ramp((t109*128), 1, 64)], rows[ramp(((t109*128) + 64), 1, 64)])*x128((int16)6)) + (rows[(ramp(((output.s0.x.x*128) + 382), 1, 128) % x128(384))] + (rows[(ramp(((output.s0.x.x*128) + 383), 1, 128) % x128(384))]*x128((int16)4))))))/x128((int16)256))))
          }
        }
        free rows
      }
    }
  }
}


Carrying values across loop iterations...
Lowering after forwarding stores:
assert((reinterpret(uint64, output.buffer) != (uint64)0), halide_error_buffer_argument_is_null("output"))
assert((reinterpret(uint64, input.buffer) != (uint64)0), halide_error_buffer_argument_is_null("input"))
let input = _halide_buffer_get_host(input.buffer)
let input.min.0 = _halide_buffer_get_min(input.buffer, 0)
let input.stride.0 = _halide_buffer_get_stride(input.buffer, 0)
let input.min.1 = _halide_buffer_get_min(input.buffer, 1)
let input.stride.1 = _halide_buffer_get_stride(input.buffer, 1)
let output = _halide_buffer_get_host(output.buffer)
let output.min.0 = _halide_buffer_get_min(output.buffer, 0)
let output.extent.0 = _halide_buffer_get_extent(output.buffer, 0)
let output.stride.0 = _halide_buffer_get_stride(output.buffer, 0)
let output.min.1 = _halide_buffer_get_min(output.buffer, 1)
let output.extent.1 = _halide_buffer_get_extent(output.buffer, 1)
let output.stride.1 = _halide_buffer_get_stride(output.buffer, 1)
assert((input.stride.0 == 1), 0)
assert((input.min.0 == 0), 0)
assert(((input.stride.1 % 128) == 0), 0)
assert((input.min.1 == 0), 0)
assert((output.stride.0 == 1), 0)
assert((output.min.0 == 0), 0)
assert(((output.stride.1 % 128) == 0), 0)
assert((output.min.1 == 0), 0)
produce output {
  let t89.s = ((((output.extent.0 + 127)/128)*128) + (select((128 < output.extent.0), 2, -2) + (((output.extent.0 + -1)/128)*128)))
  for<Hexagon> (output.s0.__outermost, 0, 1) {
    for (output.s0.y.y, 0, ((output.extent.1 + 3)/4)) {
      prefetch(input, ((((input.stride.1/128)*((output.s0.y.y*4) + 6))*128) + -2), (t89.s + 130), 1, 8, input.stride.1)
      for (output.s0.y.yi, 0, 4) {
        allocate rows[int16 * 384 * 1]
        let t95 = ((output.stride.1/128)*((output.s0.y.y*4) + output.s0.y.yi))
        for (output.s0.x.x, 0, ((output.extent.0 + 127)/128)) {
          let rows.s0.x.min_3 = (select((0 < output.s0.x.x), 2, -2) + (output.s0.x.x*128))
          produce rows {
            let t102.s = ((input.stride.1/128)*(((output.s0.y.y*4) + output.s0.y.yi) + 2))
            let t98.s = ((input.stride.1/128)*(((output.s0.y.y*4) + output.s0.y.yi) + 1))
            let t100.s = ((input.stride.1/128)*(((output.s0.y.y*4) + output.s0.y.yi) + -1))
            let t101.s = ((input.stride.1/128)*(((output.s0.y.y*4) + output.s0.y.yi) + -2))
            let t99.s = ((input.stride.1/128)*((output.s0.y.y*4) + output.s0.y.yi))
            for (rows.s0.x.x, 0, (((257 - rows.s0.x.min_3)/128) + output.s0.x.x)) {
              rows[(ramp(((rows.s0.x.x*128) + rows.s0.x.min_3), 1, 128) % x128(384))] = (((int16x128(input[ramp(((t98.s*128) + ((rows.s0.x.x*128) + rows.s0.x.min_3)), 1, 128)])*x128((int16)4)) + ((int16x128(input[ramp(((t99.s*128) + ((rows.s0.x.x*128) + rows.s0.x.min_3)), 1, 128)])*x128((int16)6)) + ((int16x128(input[ramp(((t100.s*128) + ((rows.s0.x.x*128) + rows.s0.x.min_3)), 1, 128)])*x128((int16)4)) + int16x128(input[ramp(((t101.s*128) + ((rows.s0.x.x*128) + rows.s0.x.min_3)), 1, 128)])))) + int16x128(input[ramp(((t102.s*128) + ((rows.s0.x.x*128) + rows.s0.x.min_3)), 1, 128)]))
            }
          }
          consume rows {
            output[ramp(((output.s0.x.x + t95)*128), 1, 128)] = uint8x128(((rows[(ramp(((output.s0.x.x*128) + 2), 1, 128) % x128(384))] + ((rows[(ramp(((output.s0.x.x*128) + 1), 1, 128) % x128(384))]*x128((int16)4)) + ((rows[ramp(((output.s0.x.x % 3)*128), 1, 128)]*x128((int16)6)) + (rows[(ramp(((output.s0.x.x*128) + 382), 1, 128) % x128(384))] + (rows[(ramp(((output.s0.x.x*128) + 383), 1, 128) % x128(384))]*x128((int16)4))))))/x128((int16)256)))
          }
        }
        free rows
      }
    }
  }
}


Eliminating boolean vectors from Hexagon code...
Lowering after eliminating boolean vectors: assert((reinterpret(uint64, output.buffer) != (uint64)0), halide_error_buffer_argument_is_null("output"))
assert((reinterpret(uint64, input.buffer) != (uint64)0), halide_error_buffer_argument_is_null("input"))
let input = _halide_buffer_get_host(input.buffer)
let input.min.0 = _halide_buffer_get_min(input.buffer, 0)
let input.stride.0 = _halide_buffer_get_stride(input.buffer, 0)
let input.min.1 = _halide_buffer_get_min(input.buffer, 1)
let input.stride.1 = _halide_buffer_get_stride(input.buffer, 1)
let output = _halide_buffer_get_host(output.buffer)
let output.min.0 = _halide_buffer_get_min(output.buffer, 0)
let output.extent.0 = _halide_buffer_get_extent(output.buffer, 0)
let output.stride.0 = _halide_buffer_get_stride(output.buffer, 0)
let output.min.1 = _halide_buffer_get_min(output.buffer, 1)
let output.extent.1 = _halide_buffer_get_extent(output.buffer, 1)
let output.stride.1 = _halide_buffer_get_stride(output.buffer, 1)
assert((input.stride.0 == 1), 0)
assert((input.min.0 == 0), 0)
assert(((input.stride.1 % 128) == 0), 0)
assert((input.min.1 == 0), 0)
assert((output.stride.0 == 1), 0)
assert((output.min.0 == 0), 0)
assert(((output.stride.1 % 128) == 0), 0)
assert((output.min.1 == 0), 0)
produce output {
  let t89.s = ((((output.extent.0 + 127)/128)*128) + (select((128 < output.extent.0), 2, -2) + (((output.extent.0 + -1)/128)*128)))
  for<Hexagon> (output.s0.__outermost, 0, 1) {
    for (output.s0.y.y, 0, ((output.extent.1 + 3)/4)) {
      prefetch(input, ((((input.stride.1/128)*((output.s0.y.y*4) + 6))*128) + -2), (t89.s + 130), 1, 8, input.stride.1)
      for (output.s0.y.yi, 0, 4) {
        allocate rows[int16 * 384 * 1]
        let t95 = ((output.stride.1/128)*((output.s0.y.y*4) + output.s0.y.yi))
        for (output.s0.x.x, 0, ((output.extent.0 + 127)/128)) {
          let rows.s0.x.min_3 = (select((0 < output.s0.x.x), 2, -2) + (output.s0.x.x*128))
          produce rows {
            let t102.s = ((input.stride.1/128)*(((output.s0.y.y*4) + output.s0.y.yi) + 2))
            let t98.s = ((input.stride.1/128)*(((output.s0.y.y*4) + output.s0.y.yi) + 1))
            let t100.s = ((input.stride.1/128)*(((output.s0.y.y*4) + output.s0.y.yi) + -1))
            let t101.s = ((input.stride.1/128)*(((output.s0.y.y*4) + output.s0.y.yi) + -2))
            let t99.s = ((input.stride.1/128)*((output.s0.y.y*4) + output.s0.y.yi))
            for (rows.s0.x.x, 0, (((257 - rows.s0.x.min_3)/128) + output.s0.x.x)) {
              rows[(ramp(((rows.s0.x.x*128) + rows.s0.x.min_3), 1, 128) % x128(384))] = (((int16x128(input[ramp(((t98.s*128) + ((rows.s0.x.x*128) + rows.s0.x.min_3)), 1, 128)])*x128((int16)4)) + ((int16x128(input[ramp(((t99.s*128) + ((rows.s0.x.x*128) + rows.s0.x.min_3)), 1, 128)])*x128((int16)6)) + ((int16x128(input[ramp(((t100.s*128) + ((rows.s0.x.x*128) + rows.s0.x.min_3)), 1, 128)])*x128((int16)4)) + int16x128(input[ramp(((t101.s*128) + ((rows.s0.x.x*128) + rows.s0.x.min_3)), 1, 128)])))) + int16x128(input[ramp(((t102.s*128) + ((rows.s0.x.x*128) + rows.s0.x.min_3)), 1, 128)]))
            }
          }
          consume rows {
            output[ramp(((output.s0.x.x + t95)*128), 1, 128)] = uint8x128(((rows[(ramp(((output.s0.x.x*128) + 2), 1, 128) % x128(384))] + ((rows[(ramp(((output.s0.x.x*128) + 1), 1, 128) % x128(384))]*x128((int16)4)) + ((rows[ramp(((output.s0.x.x % 3)*128), 1, 128)]*x128((int16)6)) + (rows[(ramp(((output.s0.x.x*128) + 382), 1, 128) % x128(384))] + (rows[(ramp(((output.s0.x.x*128) + 383), 1, 128) % x128(384))]*x128((int16)4))))))/x128((int16)256)))
          }
        }
        free rows
      }
    }
  }
}


Lowering after fixing hoist shuffles: assert((reinterpret(uint64, output.buffer) != (uint64)0), halide_error_buffer_argument_is_null("output"))
assert((reinterpret(uint64, input.buffer) != (uint64)0), halide_error_buffer_argument_is_null("input"))
let input = _halide_buffer_get_host(input.buffer)
let input.min.0 = _halide_buffer_get_min(input.buffer, 0)
let input.stride.0 = _halide_buffer_get_stride(input.buffer, 0)
let input.min.1 = _halide_buffer_get_min(input.buffer, 1)
let input.stride.1 = _halide_buffer_get_stride(input.buffer, 1)
let output = _halide_buffer_get_host(output.buffer)
let output.min.0 = _halide_buffer_get_min(output.buffer, 0)
let output.extent.0 = _halide_buffer_get_extent(output.buffer, 0)
let output.stride.0 = _halide_buffer_get_stride(output.buffer, 0)
let output.min.1 = _halide_buffer_get_min(output.buffer, 1)
let output.extent.1 = _halide_buffer_get_extent(output.buffer, 1)
let output.stride.1 = _halide_buffer_get_stride(output.buffer, 1)
assert((input.stride.0 == 1), 0)
assert((input.min.0 == 0), 0)
assert(((input.stride.1 % 128) == 0), 0)
assert((input.min.1 == 0), 0)
assert((output.stride.0 == 1), 0)
assert((output.min.0 == 0), 0)
assert(((output.stride.1 % 128) == 0), 0)
assert((output.min.1 == 0), 0)
produce output {
  let t89.s = ((((output.extent.0 + 127)/128)*128) + (select((128 < output.extent.0), 2, -2) + (((output.extent.0 + -1)/128)*128)))
  for<Hexagon> (output.s0.__outermost, 0, 1) {
    for (output.s0.y.y, 0, ((output.extent.1 + 3)/4)) {
      prefetch(input, ((((input.stride.1/128)*((output.s0.y.y*4) + 6))*128) + -2), (t89.s + 130), 1, 8, input.stride.1)
      for (output.s0.y.yi, 0, 4) {
        allocate rows[int16 * 384 * 1]
        let t95 = ((output.stride.1/128)*((output.s0.y.y*4) + output.s0.y.yi))
        for (output.s0.x.x, 0, ((output.extent.0 + 127)/128)) {
          let rows.s0.x.min_3 = (select((0 < output.s0.x.x), 2, -2) + (output.s0.x.x*128))
          produce rows {
            let t102.s = ((input.stride.1/128)*(((output.s0.y.y*4) + output.s0.y.yi) + 2))
            let t98.s = ((input.stride.1/128)*(((output.s0.y.y*4) + output.s0.y.yi) + 1))
            let t100.s = ((input.stride.1/128)*(((output.s0.y.y*4) + output.s0.y.yi) + -1))
            let t101.s = ((input.stride.1/128)*(((output.s0.y.y*4) + output.s0.y.yi) + -2))
            let t99.s = ((input.stride.1/128)*((output.s0.y.y*4) + output.s0.y.yi))
            for (rows.s0.x.x, 0, (((257 - rows.s0.x.min_3)/128) + output.s0.x.x)) {
              rows[(ramp(((rows.s0.x.x*128) + rows.s0.x.min_3), 1, 128) % x128(384))] = (((int16x128(input[ramp(((t98.s*128) + ((rows.s0.x.x*128) + rows.s0.x.min_3)), 1, 128)])*x128((int16)4)) + ((int16x128(input[ramp(((t99.s*128) + ((rows.s0.x.x*128) + rows.s0.x.min_3)), 1, 128)])*x128((int16)6)) + ((int16x128(input[ramp(((t100.s*128) + ((rows.s0.x.x*128) + rows.s0.x.min_3)), 1, 128)])*x128((int16)4)) + int16x128(input[ramp(((t101.s*128) + ((rows.s0.x.x*128) + rows.s0.x.min_3)), 1, 128)])))) + int16x128(input[ramp(((t102.s*128) + ((rows.s0.x.x*128) + rows.s0.x.min_3)), 1, 128)]))
            }
          }
          consume rows {
            output[ramp(((output.s0.x.x + t95)*128), 1, 128)] = uint8x128(((rows[(ramp(((output.s0.x.x*128) + 2), 1, 128) % x128(384))] + ((rows[(ramp(((output.s0.x.x*128) + 1), 1, 128) % x128(384))]*x128((int16)4)) + ((rows[ramp(((output.s0.x.x % 3)*128), 1, 128)]*x128((int16)6)) + (rows[(ramp(((output.s0.x.x*128) + 382), 1, 128) % x128(384))] + (rows[(ramp(((output.s0.x.x*128) + 383), 1, 128) % x128(384))]*x128((int16)4))))))/x128((int16)256)))
          }
        }
        free rows
      }
    }
  }
}


Optimizing Hexagon instructions...
Adding calls to qurt_hvx_lock, if necessary...
Hexagon function body:
let hvx_lock_result = halide_qurt_hvx_lock(128)
assert((hvx_lock_result == 0), hvx_lock_result)
register_destructor("halide_qurt_hvx_unlock_as_des32tructor", reinterpret((void *), (uint64)1))
assert((reinterpret(uint64, output.buffer) != (uint64)0), halide_error_buffer_argument_is_null("output"))
assert((reinterpret(uint64, input.buffer) != (uint64)0), halide_error_buffer_argument_is_null("input"))
let input = _halide_buffer_get_host(input.buffer)
let input.min.0 = _halide_buffer_get_min(input.buffer, 0)
let input.stride.0 = _halide_buffer_get_stride(input.buffer, 0)
let input.min.1 = _halide_buffer_get_min(input.buffer, 1)
let input.stride.1 = _halide_buffer_get_stride(input.buffer, 1)
let output = _halide_buffer_get_host(output.buffer)
let output.min.0 = _halide_buffer_get_min(output.buffer, 0)
let output.extent.0 = _halide_buffer_get_extent(output.buffer, 0)
let output.stride.0 = _halide_buffer_get_stride(output.buffer, 0)
let output.min.1 = _halide_buffer_get_min(output.buffer, 1)
let output.extent.1 = _halide_buffer_get_extent(output.buffer, 1)
let output.stride.1 = _halide_buffer_get_stride(output.buffer, 1)
assert((input.stride.0 == 1), 0)
assert((input.min.0 == 0), 0)
assert(((input.stride.1 % 128) == 0), 0)
assert((input.min.1 == 0), 0)
assert((output.stride.0 == 1), 0)
assert((output.min.0 == 0), 0)
assert(((output.stride.1 % 128) == 0), 0)
assert((output.min.1 == 0), 0)
produce output {
  let t89.s = ((((output.extent.0 + 127)/128)*128) + (select((128 < output.extent.0), 2, -2) + (((output.extent.0 + -1)/128)*128)))
  for<Hexagon> (output.s0.__outermost, 0, 1) {
    for (output.s0.y.y, 0, ((output.extent.1 + 3)/4)) {
      prefetch(input, ((((input.stride.1/128)*((output.s0.y.y*4) + 6))*128) + -2), (t89.s + 130), 1, 8, input.stride.1)
      for (output.s0.y.yi, 0, 4) {
        allocate rows[int16 * 384 * 1]
        let t95 = ((output.stride.1/128)*((output.s0.y.y*4) + output.s0.y.yi))
        for (output.s0.x.x, 0, ((output.extent.0 + 127)/128)) {
          let rows.s0.x.min_3 = (select((0 < output.s0.x.x), 2, -2) + (output.s0.x.x*128))
          produce rows {
            let t102.s = ((input.stride.1/128)*(((output.s0.y.y*4) + output.s0.y.yi) + 2))
            let t98.s = ((input.stride.1/128)*(((output.s0.y.y*4) + output.s0.y.yi) + 1))
            let t100.s = ((input.stride.1/128)*(((output.s0.y.y*4) + output.s0.y.yi) + -1))
            let t101.s = ((input.stride.1/128)*(((output.s0.y.y*4) + output.s0.y.yi) + -2))
            let t99.s = ((input.stride.1/128)*((output.s0.y.y*4) + output.s0.y.yi))
            for (rows.s0.x.x, 0, (((257 - rows.s0.x.min_3)/128) + output.s0.x.x)) {
              rows[(ramp(((rows.s0.x.x*128) + rows.s0.x.min_3), 1, 128) % x128(384))] = halide.hexagon.interleave.vh(halide.hexagon.acc_add_2mpy.vh.vub.vub.b.b(halide.hexagon.acc_add_2mpy.vh.vub.vub.b.b(halide.hexagon.zxt.vub(input[ramp(((t102.s*128) + ((rows.s0.x.x*128) + rows.s0.x.min_3)), 1, 128)]), input[ramp(((t98.s*128) + ((rows.s0.x.x*128) + rows.s0.x.min_3)), 1, 128)], input[ramp(((t99.s*128) + ((rows.s0.x.x*128) + rows.s0.x.min_3)), 1, 128)], (int8)4, (int8)6), input[ramp(((t100.s*128) + ((rows.s0.x.x*128) + rows.s0.x.min_3)), 1, 128)], input[ramp(((t101.s*128) + ((rows.s0.x.x*128) + rows.s0.x.min_3)), 1, 128)], (int8)4, (int8)1))
            }
          }
          consume rows {
            output[ramp(((output.s0.x.x + t95)*128), 1, 128)] = 

            halide.hexagon.packhi.vh(
              (
                halide.hexagon.add_mul.vh.vh.b(
                  halide.hexagon.add_mul.vh.vh.b(
                    halide.hexagon.add_mul.vh.vh.b(
                      rows[(ramp(((output.s0.x.x*128) + 382), 1, 128) % x128(384))], 
                      rows[(ramp(((output.s0.x.x*128) + 383), 1, 128) % x128(384))], 
                      (int8)4
                    ), 
                    rows[ramp(((output.s0.x.x % 3)*128), 1, 128)], 
                    (int8)6
                  ), 
                  rows[(ramp(((output.s0.x.x*128) + 1), 1, 128) % x128(384))], 
                  (int8)4
                ) 
                + 
                rows[(ramp(((output.s0.x.x*128) + 2), 1, 128) % x128(384))]
              )
            )
          }
        }
        free rows
      }
    }
  }
}

0x24fec20
Done generating llvm bitcode
Adding module pass: Target Transform Information
Adding function pass: Target Transform Information
Adding function pass: Instrument function entry/exit with calls to e.g. mcount() (pre inlining)
Adding function pass: Type-Based Alias Analysis
Adding function pass: Scoped NoAlias Alias Analysis
Adding function pass: Simplify the CFG
Adding function pass: SROA
Adding function pass: Jump Threading
Adding function pass: Selection Conversion
Adding function pass: Simplify the CFG
Adding function pass: Early CSE
Adding function pass: Lower 'expect' Intrinsics
Adding module pass: Unnamed pass: implement Pass::getPassName()
Adding module pass: Read trampoline markers from file
Adding module pass: Force set function attributes
Adding module pass: Remove QCLTO linker options
Adding module pass: Type-Based Alias Analysis
Adding module pass: Scoped NoAlias Alias Analysis
Adding module pass: Infer set function attributes
Adding module pass: Call-site splitting
Adding module pass: Interprocedural Sparse Conditional Constant Propagation
Adding module pass: Called Value Propagation
Adding module pass: Global Variable Optimizer
Adding module pass: Localize Function Globals
Adding module pass: Promote Memory to Register
Adding module pass: Dead Argument Elimination
Adding module pass: Combine redundant instructions
Adding module pass: Simplify the CFG
Adding module pass: IR Tail Duplication
Adding module pass: Specialize Indirect Function Calls
Adding module pass: Simplify the CFG
Adding module pass: Early CSE
Adding module pass: Globals Alias Analysis
Adding module pass: Remove unused exception handling info
Adding module pass: Function Integration/Inlining
Adding module pass: Deduce function attributes
Adding module pass: Promote 'by reference' arguments to scalars
Adding module pass: Simplify the CFG
Adding module pass: Combine redundant instructions
Adding module pass: Transpose switches
Adding module pass: Simplify the CFG
Adding module pass: Combine redundant instructions
Adding module pass: Aggressive Dead Code Elimination
Adding module pass: Simplify the CFG
Adding module pass: Combine redundant instructions
Adding module pass: SROA
Adding module pass: Early CSE w/ MemorySSA
Adding module pass: Speculatively execute instructions if target has divergent branches
Adding module pass: Jump Threading
Adding module pass: Value Propagation
Adding module pass: Simplify the CFG
Adding module pass: Combine pattern based expressions
Adding module pass: Combine redundant instructions
Adding module pass: Conditionally eliminate dead library calls
Adding module pass: PGOMemOPSize
Adding module pass: Tail Call Elimination
Adding module pass: Simplify the CFG
Adding module pass: Reassociate expressions
Adding module pass: Rotate Loops
Adding module pass: Precomputing Loop Expressions
Adding module pass: Loop Invariant Code Motion
Adding module pass: Unswitch loops
Adding module pass: Simplify the CFG
Adding module pass: Combine redundant instructions
Adding module pass: type promotion
Adding module pass: Aggressive Dead Code Elimination
Adding module pass: aggressive type promotion
Adding module pass: Induction Variable Simplification
Adding module pass: Simple Loop Fusion
Adding module pass: Post Increment
Adding module pass: Aggressive Dead Code Elimination
Adding module pass: Promote Memory to Register
Adding module pass: Simplify the CFG
Adding module pass: Recognize loop idioms
Adding module pass: Recognize Hexagon-specific loop idioms
Adding module pass: Delete dead loops
Adding module pass: Global Value Numbering
Adding module pass: Simplify the CFG
Adding module pass: Unroll loops
Adding module pass: Loop Scalar Replacement
Adding module pass: Hexagon-specific loop carried reuse for HVX vectors
Adding module pass: MergedLoadStoreMotion
Adding module pass: Global Value Numbering
Adding module pass: Loop Invariant Code Motion
Adding module pass: MemCpy Optimization
Adding module pass: Sparse Conditional Constant Propagation
Adding module pass: Bit-Tracking Dead Code Elimination
Adding module pass: Combine redundant instructions
Adding module pass: Jump Threading
Adding module pass: Value Propagation
Adding module pass: Dead Store Elimination
Adding module pass: Loop Invariant Code Motion
Adding module pass: Aggressive Dead Code Elimination
Adding module pass: Simplify the CFG
Adding module pass: Combine redundant instructions
Adding module pass: A No-Op Barrier Pass
Adding module pass: Eliminate Available Externally Globals
Adding module pass: Deduce function attributes in RPO
Adding module pass: Global Variable Optimizer
Adding module pass: Dead Global Elimination
Adding module pass: Globals Alias Analysis
Adding module pass: Float to int
Adding module pass: Rotate Loops
Adding module pass: Loop Distribution
Adding module pass: Loop Vectorization
Adding module pass: Loop Load Elimination
Adding module pass: Combine redundant instructions
Adding module pass: Simplify the CFG
Adding module pass: SLP Vectorizer
Adding module pass: Combine redundant instructions
Adding module pass: Unroll loops
Adding module pass: Combine redundant instructions
Adding module pass: Loop Invariant Code Motion
Adding module pass: Alignment from assumptions
Adding module pass: Strip Unused Function Prototypes
Adding module pass: Dead Global Elimination
Adding module pass: Merge Duplicate Global Constants
Adding module pass: Read trampoline markers from file
Adding module pass: Loop Sink
Adding module pass: Remove redundant instructions
Adding module pass: Hoist/decompose integer division and remainder
Adding module pass: Simplify the CFG
; ModuleID = 'gaussian5x5_hvx128'
source_filename = "/local/mnt/workspace/bots/hexbotmaster_aus-05/halide-22/src/halide/src/runtime/qurt_allocator.cpp"
target datalayout = "e-m:e-p:32:32:32-a:0-n16:32-i64:64:64-i32:32:32-i16:16:16-i1:8:8-f32:32:32-f64:64:64-v32:32:32-v64:64:64-v512:512:512-v1024:1024:1024-v2048:2048:2048"
target triple = "hexagon-unknown--elf"

%struct.halide_mutex = type { [1 x i32] }
%struct.halide_filter_argument_t = type { i8*, i32, i32, %struct.halide_type_t, %struct.halide_scalar_value_t*, %struct.halide_scalar_value_t*, %struct.halide_scalar_value_t* }
%struct.halide_type_t = type { i8, i8, i16 }
%struct.halide_scalar_value_t = type { %union.anon }
%union.anon = type { i64 }
%struct.halide_filter_metadata_t = type { i32, i32, %struct.halide_filter_argument_t*, i8*, i8* }
%struct.halide_thread = type opaque
%struct.halide_buffer_t = type { i64, %struct.halide_device_interface_t*, i8*, i64, i64, i64, i64, %struct.halide_type_t, i32, %struct.halide_dimension_t*, i8* }
%struct.halide_device_interface_t = type { i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, void (i8*, %struct.halide_device_interface_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, i32, i32, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, i64, %struct.halide_device_interface_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, i32*, i32*)*, %struct.halide_device_interface_impl_t* }
%struct.halide_device_interface_impl_t = type { void ()*, void ()*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, i32, i32, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, i64)*, i32 (i8*, %struct.halide_buffer_t*)* }
%struct.halide_dimension_t = type { i32, i32, i32, i32 }
%"struct.Halide::Runtime::Internal::device_copy" = type { i64, i64, i64, [16 x i64], [16 x i64], [16 x i64], i64 }
%struct.buffer_t = type { i64, i8*, [4 x i32], [4 x i32], [4 x i32], i32, i8, i8, [6 x i8] }
%"struct.Halide::Runtime::Internal::old_dev_wrapper" = type { i64, %struct.halide_device_interface_t* }
%"struct.Halide::Runtime::Internal::CpuFeatures" = type { [1 x i64], [1 x i64] }

@malloc_tracing = linkonce local_unnamed_addr global i32 0, align 4
@_ZN6Halide7Runtime8Internal9mem_traceE = linkonce local_unnamed_addr global i32 0, align 4
@_ZN6Halide7Runtime8Internal6my_ptrE = linkonce local_unnamed_addr global [1000 x i8*] zeroinitializer, align 4
@_ZN6Halide7Runtime8Internal8my_sizesE = linkonce local_unnamed_addr global [1000 x i32] zeroinitializer, align 4
@.str = private unnamed_addr constant [36 x i8] c"Malloc returned null in Qurt: size(\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c")\0A\00", align 1
@.str.2 = private unnamed_addr constant [18 x i8] c"total_allocation(\00", align 1
@.str.3 = private unnamed_addr constant [14 x i8] c"Malloc: size(\00", align 1
@.str.4 = private unnamed_addr constant [21 x i8] c"), total_allocation(\00", align 1
@.str.5 = private unnamed_addr constant [7 x i8] c") ptr=\00", align 1
@.str.6 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.7 = private unnamed_addr constant [12 x i8] c"Free: size(\00", align 1
@_ZN6Halide7Runtime8Internal11buf_is_usedE = linkonce global [10 x i32] zeroinitializer, align 4
@_ZN6Halide7Runtime8Internal7mem_bufE = linkonce local_unnamed_addr global [10 x i8*] zeroinitializer, align 4
@_ZN6Halide7Runtime8Internal13custom_mallocE = linkonce local_unnamed_addr global i8* (i8*, i32)* @halide_default_malloc, align 4
@_ZN6Halide7Runtime8Internal11custom_freeE = linkonce local_unnamed_addr global void (i8*, i8*)* @halide_default_free, align 4
@.str.8 = private unnamed_addr constant [45 x i8] c"custom allocators not supported on Hexagon.\0A\00", align 1
@.str.9 = private unnamed_addr constant [17 x i8] c"Buffer(?), size(\00", align 1
@llvm.global_dtors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_ZN6Halide7Runtime8Internal24halide_allocator_cleanupEv, i8* null }]
@_ZN6Halide7Runtime8Internal14custom_do_taskE = linkonce local_unnamed_addr global i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* @halide_default_do_task, align 4
@_ZN6Halide7Runtime8Internal17custom_do_par_forE = linkonce local_unnamed_addr global i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* @halide_default_do_par_for, align 4
@.str.10 = private unnamed_addr constant [54 x i8] c"halide_spawn_thread not implemented on this platform.\00", align 1
@.str.1.11 = private unnamed_addr constant [38 x i8] c"halide_set_num_threads: must be >= 0.\00", align 1
@_ZN6Halide7Runtime8Internal17halide_gpu_deviceE = linkonce local_unnamed_addr global i32 0, align 4
@_ZN6Halide7Runtime8Internal22halide_gpu_device_lockE = linkonce global i32 0, align 4
@_ZN6Halide7Runtime8Internal29halide_gpu_device_initializedE = linkonce local_unnamed_addr global i8 0, align 1
@.str.12 = private unnamed_addr constant [14 x i8] c"HL_GPU_DEVICE\00", align 1
@.str.13 = private unnamed_addr constant [5 x i8] c"-nan\00", align 1
@.str.1.14 = private unnamed_addr constant [4 x i8] c"nan\00", align 1
@.str.2.15 = private unnamed_addr constant [5 x i8] c"-inf\00", align 1
@.str.3.16 = private unnamed_addr constant [4 x i8] c"inf\00", align 1
@.str.4.17 = private unnamed_addr constant [14 x i8] c"-0.000000e+00\00", align 1
@.str.5.18 = private unnamed_addr constant [13 x i8] c"0.000000e+00\00", align 1
@.str.6.19 = private unnamed_addr constant [10 x i8] c"-0.000000\00", align 1
@.str.7.20 = private unnamed_addr constant [9 x i8] c"0.000000\00", align 1
@.str.8.21 = private unnamed_addr constant [2 x i8] c"-\00", align 1
@.str.10.23 = private unnamed_addr constant [3 x i8] c"e+\00", align 1
@.str.11 = private unnamed_addr constant [3 x i8] c"e-\00", align 1
@.str.12.24 = private unnamed_addr constant [17 x i8] c"0123456789abcdef\00", align 1
@.str.17 = private unnamed_addr constant [14 x i8] c"bad_type_code\00", align 1
@.str.16 = private unnamed_addr constant [7 x i8] c"handle\00", align 1
@.str.15 = private unnamed_addr constant [6 x i8] c"float\00", align 1
@.str.14 = private unnamed_addr constant [5 x i8] c"uint\00", align 1
@.str.13.25 = private unnamed_addr constant [4 x i8] c"int\00", align 1
@.str.18 = private unnamed_addr constant [2 x i8] c"x\00", align 1
@.str.19 = private unnamed_addr constant [5 x i8] c"NULL\00", align 1
@.str.20 = private unnamed_addr constant [8 x i8] c"buffer(\00", align 1
@.str.22 = private unnamed_addr constant [4 x i8] c", {\00", align 1
@.str.23 = private unnamed_addr constant [2 x i8] c"}\00", align 1
@_ZN6Halide7Runtime8Internal17device_copy_mutexE = linkonce global %struct.halide_mutex zeroinitializer, align 4
@.str.9.26 = private unnamed_addr constant [20 x i8] c"halide_copy_to_host\00", align 1
@.str.10.27 = private unnamed_addr constant [22 x i8] c"halide_copy_to_device\00", align 1
@.str.12.28 = private unnamed_addr constant [61 x i8] c"halide_copy_to_device does not support switching interfaces\0A\00", align 1
@.str.18.29 = private unnamed_addr constant [21 x i8] c"halide_device_malloc\00", align 1
@.str.20.30 = private unnamed_addr constant [59 x i8] c"halide_device_malloc doesn't support switching interfaces\0A\00", align 1
@.str.17.31 = private unnamed_addr constant [19 x i8] c"halide_device_sync\00", align 1
@.str.21.32 = private unnamed_addr constant [19 x i8] c"halide_device_free\00", align 1
@.str.22.33 = private unnamed_addr constant [137 x i8] c"/local/mnt/workspace/bots/hexbotmaster_aus-05/halide-22/src/halide/src/runtime/device_interface.cpp:247 Assert failed: buf->device == 0\0A\00", align 1
@.str.23.34 = private unnamed_addr constant [30 x i8] c"halide_device_and_host_malloc\00", align 1
@.str.25 = private unnamed_addr constant [68 x i8] c"halide_device_and_host_malloc doesn't support switching interfaces\0A\00", align 1
@.str.26 = private unnamed_addr constant [42 x i8] c"allocating host and device memory failed\0A\00", align 1
@.str.27 = private unnamed_addr constant [28 x i8] c"halide_device_and_host_free\00", align 1
@.str.28 = private unnamed_addr constant [137 x i8] c"/local/mnt/workspace/bots/hexbotmaster_aus-05/halide-22/src/halide/src/runtime/device_interface.cpp:317 Assert failed: buf->device == 0\0A\00", align 1
@.str.29 = private unnamed_addr constant [38 x i8] c"halide_default_device_and_host_malloc\00", align 1
@.str.30 = private unnamed_addr constant [36 x i8] c"halide_default_device_and_host_free\00", align 1
@.str.31 = private unnamed_addr constant [26 x i8] c"halide_device_wrap_native\00", align 1
@.str.32 = private unnamed_addr constant [64 x i8] c"halide_device_wrap_native doesn't support switching interfaces\0A\00", align 1
@.str.33 = private unnamed_addr constant [28 x i8] c"halide_device_detach_native\00", align 1
@.str.34 = private unnamed_addr constant [137 x i8] c"/local/mnt/workspace/bots/hexbotmaster_aus-05/halide-22/src/halide/src/runtime/device_interface.cpp:404 Assert failed: buf->device == 0\0A\00", align 1
@.str.35 = private unnamed_addr constant [34 x i8] c"halide_default_device_wrap_native\00", align 1
@.str.36 = private unnamed_addr constant [36 x i8] c"halide_default_device_detach_native\00", align 1
@.str.42 = private unnamed_addr constant [64 x i8] c"halide_buffer_copy does not support switching device interfaces\00", align 1
@.str.58 = private unnamed_addr constant [44 x i8] c"device_interface does not support cropping\0A\00", align 1
@.str.59 = private unnamed_addr constant [43 x i8] c"device_interface does not support slicing\0A\00", align 1
@.str.60 = private unnamed_addr constant [52 x i8] c"destination buffer already has a device allocation\0A\00", align 1
@.str.61 = private unnamed_addr constant [48 x i8] c"src and dst must have identical dimensionality\0A\00", align 1
@.str.64 = private unnamed_addr constant [52 x i8] c"dst must have exactly one fewer dimension than src\0A\00", align 1
@halide_error_mask = linkonce local_unnamed_addr global i64 0, align 8
@.str.37 = private unnamed_addr constant [41 x i8] c"Bounds inference call to external stage \00", align 1
@.str.78 = private unnamed_addr constant [7 x i8] c"<NULL>\00", align 1
@.str.1.38 = private unnamed_addr constant [27 x i8] c" returned non-zero value: \00", align 1
@.str.2.39 = private unnamed_addr constant [24 x i8] c"Call to external stage \00", align 1
@.str.3.40 = private unnamed_addr constant [18 x i8] c"Bounds given for \00", align 1
@.str.4.41 = private unnamed_addr constant [5 x i8] c" in \00", align 1
@.str.5.42 = private unnamed_addr constant [8 x i8] c" (from \00", align 1
@.str.6.43 = private unnamed_addr constant [5 x i8] c" to \00", align 1
@.str.7.44 = private unnamed_addr constant [38 x i8] c") do not cover required region (from \00", align 1
@.str.9.46 = private unnamed_addr constant [11 x i8] c" has type \00", align 1
@.str.10.47 = private unnamed_addr constant [38 x i8] c" but type of the buffer passed in is \00", align 1
@.str.11.48 = private unnamed_addr constant [31 x i8] c" requires a buffer of exactly \00", align 1
@.str.12.49 = private unnamed_addr constant [43 x i8] c" dimensions, but the buffer passed in has \00", align 1
@.str.13.50 = private unnamed_addr constant [12 x i8] c" dimensions\00", align 1
@.str.14.51 = private unnamed_addr constant [17 x i8] c" is accessed at \00", align 1
@.str.15.52 = private unnamed_addr constant [28 x i8] c", which is before the min (\00", align 1
@.str.16.53 = private unnamed_addr constant [16 x i8] c") in dimension \00", align 1
@.str.17.54 = private unnamed_addr constant [28 x i8] c", which is beyond the max (\00", align 1
@.str.18.55 = private unnamed_addr constant [29 x i8] c"Total allocation for buffer \00", align 1
@.str.19.56 = private unnamed_addr constant [5 x i8] c" is \00", align 1
@.str.20.57 = private unnamed_addr constant [37 x i8] c", which exceeds the maximum size of \00", align 1
@.str.21.58 = private unnamed_addr constant [24 x i8] c"The extents for buffer \00", align 1
@.str.22.59 = private unnamed_addr constant [12 x i8] c" dimension \00", align 1
@.str.23.60 = private unnamed_addr constant [15 x i8] c" is negative (\00", align 1
@.str.24.61 = private unnamed_addr constant [31 x i8] c"Product of extents for buffer \00", align 1
@.str.25.62 = private unnamed_addr constant [29 x i8] c"Applying the constraints on \00", align 1
@.str.26.63 = private unnamed_addr constant [42 x i8] c" to the required region made it smaller. \00", align 1
@.str.27.64 = private unnamed_addr constant [16 x i8] c"Required size: \00", align 1
@.str.28.65 = private unnamed_addr constant [3 x i8] c". \00", align 1
@.str.29.66 = private unnamed_addr constant [19 x i8] c"Constrained size: \00", align 1
@.str.30.67 = private unnamed_addr constant [2 x i8] c".\00", align 1
@.str.31.68 = private unnamed_addr constant [22 x i8] c"Constraint violated: \00", align 1
@.str.32.69 = private unnamed_addr constant [3 x i8] c" (\00", align 1
@.str.33.70 = private unnamed_addr constant [6 x i8] c") == \00", align 1
@.str.34.71 = private unnamed_addr constant [11 x i8] c"Parameter \00", align 1
@.str.35.72 = private unnamed_addr constant [23 x i8] c" but must be at least \00", align 1
@.str.36.73 = private unnamed_addr constant [22 x i8] c" but must be at most \00", align 1
@.str.37.74 = private unnamed_addr constant [44 x i8] c"Out of memory (halide_malloc returned NULL)\00", align 1
@.str.38 = private unnamed_addr constant [54 x i8] c"Out of VTCM memory (halide_vtcm_malloc returned NULL)\00", align 1
@.str.39 = private unnamed_addr constant [70 x i8] c"Out of LOCKED_CACHE memory (halide_locked_cache_malloc returned NULL)\00", align 1
@.str.40 = private unnamed_addr constant [54 x i8] c"Out of GPUShared memory (halide_malloc returned NULL)\00", align 1
@.str.41 = private unnamed_addr constant [17 x i8] c"Buffer argument \00", align 1
@.str.42.75 = private unnamed_addr constant [9 x i8] c" is NULL\00", align 1
@.str.43 = private unnamed_addr constant [25 x i8] c"Failed to dump function \00", align 1
@.str.44 = private unnamed_addr constant [10 x i8] c" to file \00", align 1
@.str.45 = private unnamed_addr constant [13 x i8] c" with error \00", align 1
@.str.46 = private unnamed_addr constant [51 x i8] c"Failed to upgrade buffer_t to halide_buffer_t for \00", align 1
@.str.47 = private unnamed_addr constant [3 x i8] c": \00", align 1
@.str.48 = private unnamed_addr constant [53 x i8] c"Failed to downgrade halide_buffer_t to buffer_t for \00", align 1
@.str.49 = private unnamed_addr constant [21 x i8] c"The host pointer of \00", align 1
@.str.50 = private unnamed_addr constant [22 x i8] c" is not aligned to a \00", align 1
@.str.51 = private unnamed_addr constant [17 x i8] c" bytes boundary.\00", align 1
@.str.52 = private unnamed_addr constant [55 x i8] c" is null, but the pipeline will access it on the host.\00", align 1
@.str.53 = private unnamed_addr constant [30 x i8] c"The folded storage dimension \00", align 1
@.str.54 = private unnamed_addr constant [5 x i8] c" of \00", align 1
@.str.55 = private unnamed_addr constant [36 x i8] c" was accessed out of order by loop \00", align 1
@.str.56 = private unnamed_addr constant [23 x i8] c"Cannot fold dimension \00", align 1
@.str.57 = private unnamed_addr constant [36 x i8] c" because an extern stage accesses [\00", align 1
@.str.58.76 = private unnamed_addr constant [3 x i8] c", \00", align 1
@.str.59.77 = private unnamed_addr constant [3 x i8] c"],\00", align 1
@.str.60.78 = private unnamed_addr constant [47 x i8] c" which is outside the range currently valid: [\00", align 1
@.str.61.79 = private unnamed_addr constant [3 x i8] c"].\00", align 1
@.str.62 = private unnamed_addr constant [47 x i8] c" which wraps around the boundary of the fold, \00", align 1
@.str.63 = private unnamed_addr constant [30 x i8] c"which occurs at multiples of \00", align 1
@.str.64.80 = private unnamed_addr constant [18 x i8] c"The fold factor (\00", align 1
@.str.65 = private unnamed_addr constant [16 x i8] c") of dimension \00", align 1
@.str.66 = private unnamed_addr constant [61 x i8] c" is too small to store the required region accessed by loop \00", align 1
@.str.67 = private unnamed_addr constant [3 x i8] c").\00", align 1
@.str.68 = private unnamed_addr constant [22 x i8] c"Requirement Failed: (\00", align 1
@.str.70 = private unnamed_addr constant [59 x i8] c"A schedule specialized with specialize_fail() was chosen: \00", align 1
@.str.71 = private unnamed_addr constant [55 x i8] c"Buffer has a non-zero device but no device interface.\0A\00", align 1
@.str.72 = private unnamed_addr constant [56 x i8] c"Buffer has a non-null devie_interface but device is 0.\0A\00", align 1
@.str.73 = private unnamed_addr constant [49 x i8] c"Buffer has both host and device dirty bits set.\0A\00", align 1
@.str.74 = private unnamed_addr constant [26 x i8] c"Buffer pointer passed to \00", align 1
@.str.75 = private unnamed_addr constant [11 x i8] c" is null.\0A\00", align 1
@.str.76 = private unnamed_addr constant [37 x i8] c"Integer division or modulo by zero.\0A\00", align 1
@.str.89 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.1.90 = private unnamed_addr constant [44 x i8] c"elem_size of buffer was not in [1, 2, 4, 8]\00", align 1
@.str.2.91 = private unnamed_addr constant [33 x i8] c"buffer has incorrect elem_size (\00", align 1
@.str.3.92 = private unnamed_addr constant [3 x i8] c") \00", align 1
@.str.4.93 = private unnamed_addr constant [20 x i8] c"for expected type (\00", align 1
@.str.5.94 = private unnamed_addr constant [2 x i8] c")\00", align 1
@.str.6.96 = private unnamed_addr constant [65 x i8] c"Internal error: buffer host mismatch in halide_upgrade_buffer_t.\00", align 1
@.str.7.97 = private unnamed_addr constant [37 x i8] c"buffer has more than four dimensions\00", align 1
@.str.102 = private unnamed_addr constant [34 x i8] c"HVX lock size must be 64 or 128.\0A\00", align 1
@.str.8.103 = private unnamed_addr constant [35 x i8] c"Printer buffer allocation failed.\0A\00", align 1
@.str.5.104 = private unnamed_addr constant [22 x i8] c"qurt_hvx_lock failed\0A\00", align 1
@.str.7.105 = private unnamed_addr constant [24 x i8] c"qurt_hvx_unlock failed\0A\00", align 1
@_ZN6Halide7Runtime8Internal30custom_can_use_target_featuresE = linkonce local_unnamed_addr global i32 (i32, i64*)* @halide_default_can_use_target_features, align 4
@_ZZ38halide_default_can_use_target_featuresE11initialized = internal unnamed_addr global i1 false, align 1
@_ZZ38halide_default_can_use_target_featuresE20cpu_features_storage = internal global [2 x i64] zeroinitializer, align 8
@.str.106 = private unnamed_addr constant [81 x i8] c"Internal error: wrong structure size passed to halide_can_use_target_features()\0A\00", align 1
@str = private constant [6 x i8] c"input\00", align 32
@str.110 = private constant [7 x i8] c"output\00", align 32
@0 = private constant [2 x %struct.halide_filter_argument_t] [%struct.halide_filter_argument_t { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str, i32 0, i32 0), i32 1, i32 2, %struct.halide_type_t { i8 1, i8 8, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str.110, i32 0, i32 0), i32 2, i32 2, %struct.halide_type_t { i8 1, i8 8, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null }]
@str.111 = private constant [51 x i8] c"hexagon-32-noos-hvx_128-no_asserts-no_bounds_query\00", align 128
@str.112 = private constant [19 x i8] c"gaussian5x5_hvx128\00", align 32
@gaussian5x5_hvx128_metadata_storage = private constant %struct.halide_filter_metadata_t { i32 0, i32 2, %struct.halide_filter_argument_t* getelementptr inbounds ([2 x %struct.halide_filter_argument_t], [2 x %struct.halide_filter_argument_t]* @0, i32 0, i32 0), i8* getelementptr inbounds ([51 x i8], [51 x i8]* @str.111, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @str.112, i32 0, i32 0) }
@switch.table.halide_type_to_string = private unnamed_addr constant [4 x i8*] [i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.13.25, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.14, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.15, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.16, i32 0, i32 0)], align 4

; Function Attrs: nounwind
define linkonce i8* @_ZN6Halide7Runtime8Internal9to_stringEj(i32 %a) local_unnamed_addr #0 {
entry:
  %call = tail call i8* @malloc(i32 16) #11
  %cmp49 = icmp eq i32 %a, 0
  br i1 %cmp49, label %for.body15.preheader, label %while.body

for.cond.preheader:                               ; preds = %while.body
  %div1 = lshr i32 %inc, 1
  %cmp247 = icmp eq i32 %div1, 0
  br i1 %cmp247, label %for.cond12.preheader, label %for.body.preheader

for.body.preheader:                               ; preds = %for.cond.preheader
  %arrayidx5.gep = getelementptr i8, i8* %call, i32 %i.050
  br label %for.body

while.body:                                       ; preds = %entry, %while.body
  %a.addr.051 = phi i32 [ %div, %while.body ], [ %a, %entry ]
  %arrayidx.phi = phi i8* [ %arrayidx.inc, %while.body ], [ %call, %entry ]
  %i.050 = phi i32 [ %inc, %while.body ], [ 0, %entry ]
  %div = udiv i32 %a.addr.051, 10
  %0 = mul i32 %div, -10
  %1 = add i32 %0, %a.addr.051
  %2 = trunc i32 %1 to i8
  %conv = or i8 %2, 48
  %inc = add nuw nsw i32 %i.050, 1
  store i8 %conv, i8* %arrayidx.phi, align 1, !tbaa !7
  %3 = icmp ult i32 %a.addr.051, 10
  %arrayidx.inc = getelementptr i8, i8* %arrayidx.phi, i32 1
  br i1 %3, label %for.cond.preheader, label %while.body

for.cond12.preheader:                             ; preds = %for.body, %for.cond.preheader
  %cmp1345 = icmp ult i32 %inc, 16
  br i1 %cmp1345, label %for.body15.preheader, label %for.cond.cleanup14

for.body15.preheader:                             ; preds = %for.cond12.preheader, %entry
  %j11.046.ph = phi i32 [ 0, %entry ], [ %inc, %for.cond12.preheader ]
  %scevgep = getelementptr i8, i8* %call, i32 %j11.046.ph
  %4 = add i32 %j11.046.ph, 1
  %5 = icmp ugt i32 %4, 16
  %umax = select i1 %5, i32 %4, i32 16
  %6 = sub i32 %umax, %j11.046.ph
  call void @llvm.memset.p0i8.i32(i8* align 1 %scevgep, i8 0, i32 %6, i1 false)
  br label %for.cond.cleanup14

for.body:                                         ; preds = %for.body, %for.body.preheader
  %arrayidx3.phi = phi i8* [ %arrayidx3.inc, %for.body ], [ %call, %for.body.preheader ]
  %arrayidx5.phi = phi i8* [ %arrayidx5.inc, %for.body ], [ %arrayidx5.gep, %for.body.preheader ]
  %j.048 = phi i32 [ %inc10, %for.body ], [ 0, %for.body.preheader ]
  %7 = load i8, i8* %arrayidx3.phi, align 1, !tbaa !7
  %8 = load i8, i8* %arrayidx5.phi, align 1, !tbaa !7
  store i8 %8, i8* %arrayidx3.phi, align 1, !tbaa !7
  store i8 %7, i8* %arrayidx5.phi, align 1, !tbaa !7
  %inc10 = add nuw nsw i32 %j.048, 1
  %arrayidx3.inc = getelementptr i8, i8* %arrayidx3.phi, i32 1
  %exitcond = icmp eq i32 %inc10, %div1
  %arrayidx5.inc = getelementptr i8, i8* %arrayidx5.phi, i32 -1
  br i1 %exitcond, label %for.cond12.preheader, label %for.body

for.cond.cleanup14:                               ; preds = %for.body15.preheader, %for.cond12.preheader
  ret i8* %call
}

; Function Attrs: nounwind
declare noalias i8* @malloc(i32) local_unnamed_addr #1

; Function Attrs: nounwind
define linkonce i8* @_ZN6Halide7Runtime8Internal14aligned_mallocEjj(i32 %alignment, i32 %size) local_unnamed_addr #0 {
entry:
  %add = add i32 %alignment, -1
  %sub = add i32 %add, %size
  %neg = sub i32 0, %alignment
  %and = and i32 %sub, %neg
  %add2 = add i32 %and, %alignment
  %call = tail call i8* @malloc(i32 %add2) #11
  %cmp = icmp eq i8* %call, null
  %0 = load i32, i32* @malloc_tracing, align 4
  %tobool = icmp ne i32 %0, 0
  %or.cond = and i1 %cmp, %tobool
  br i1 %or.cond, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @halide_print(i8* null, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str, i32 0, i32 0)) #11
  %call4 = tail call i8* @_ZN6Halide7Runtime8Internal9to_stringEj(i32 %add2) #12
  tail call void @halide_print(i8* null, i8* %call4) #11
  tail call void @halide_print(i8* null, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0)) #11
  tail call void @halide_print(i8* null, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i32 0, i32 0)) #11
  %1 = load i32, i32* @_ZN6Halide7Runtime8Internal9mem_traceE, align 4, !tbaa !10
  %call5 = tail call i8* @_ZN6Halide7Runtime8Internal9to_stringEj(i32 %1) #12
  tail call void @halide_print(i8* null, i8* %call5) #11
  tail call void @halide_print(i8* null, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0)) #11
  br label %cleanup27

if.end:                                           ; preds = %entry
  %2 = ptrtoint i8* %call to i32
  %add6 = add i32 %alignment, 3
  %sub8 = add i32 %add6, %2
  %and11 = and i32 %sub8, %neg
  %3 = inttoptr i32 %and11 to i8*
  %4 = inttoptr i32 %and11 to i8**
  %arrayidx = getelementptr inbounds i8*, i8** %4, i32 -1
  store i8* %call, i8** %arrayidx, align 4, !tbaa !12
  %tobool12 = icmp eq i32 %0, 0
  br i1 %tobool12, label %cleanup27, label %for.body

for.body:                                         ; preds = %if.end, %for.inc.24
  %i.051 = phi i32 [ %inc.24, %for.inc.24 ], [ 0, %if.end ]
  %arrayidx15 = getelementptr inbounds [1000 x i8*], [1000 x i8*]* @_ZN6Halide7Runtime8Internal6my_ptrE, i32 0, i32 %i.051
  %5 = load i8*, i8** %arrayidx15, align 4, !tbaa !12
  %tobool16 = icmp eq i8* %5, null
  br i1 %tobool16, label %if.then17, label %for.inc

if.then17:                                        ; preds = %for.inc.23, %for.inc.22, %for.inc.21, %for.inc.20, %for.inc.19, %for.inc.18, %for.inc.17, %for.inc.16, %for.inc.15, %for.inc.14, %for.inc.13, %for.inc.12, %for.inc.11, %for.inc.10, %for.inc.9, %for.inc.8, %for.inc.7, %for.inc.6, %for.inc.5, %for.inc.4, %for.inc.3, %for.inc.2, %for.inc.1, %for.inc, %for.body
  %i.051.lcssa = phi i32 [ %i.051, %for.body ], [ %inc, %for.inc ], [ %inc.1, %for.inc.1 ], [ %inc.2, %for.inc.2 ], [ %inc.3, %for.inc.3 ], [ %inc.4, %for.inc.4 ], [ %inc.5, %for.inc.5 ], [ %inc.6, %for.inc.6 ], [ %inc.7, %for.inc.7 ], [ %inc.8, %for.inc.8 ], [ %inc.9, %for.inc.9 ], [ %inc.10, %for.inc.10 ], [ %inc.11, %for.inc.11 ], [ %inc.12, %for.inc.12 ], [ %inc.13, %for.inc.13 ], [ %inc.14, %for.inc.14 ], [ %inc.15, %for.inc.15 ], [ %inc.16, %for.inc.16 ], [ %inc.17, %for.inc.17 ], [ %inc.18, %for.inc.18 ], [ %inc.19, %for.inc.19 ], [ %inc.20, %for.inc.20 ], [ %inc.21, %for.inc.21 ], [ %inc.22, %for.inc.22 ], [ %inc.23, %for.inc.23 ]
  %arrayidx15.lcssa = phi i8** [ %arrayidx15, %for.body ], [ %arrayidx15.1, %for.inc ], [ %arrayidx15.2, %for.inc.1 ], [ %arrayidx15.3, %for.inc.2 ], [ %arrayidx15.4, %for.inc.3 ], [ %arrayidx15.5, %for.inc.4 ], [ %arrayidx15.6, %for.inc.5 ], [ %arrayidx15.7, %for.inc.6 ], [ %arrayidx15.8, %for.inc.7 ], [ %arrayidx15.9, %for.inc.8 ], [ %arrayidx15.10, %for.inc.9 ], [ %arrayidx15.11, %for.inc.10 ], [ %arrayidx15.12, %for.inc.11 ], [ %arrayidx15.13, %for.inc.12 ], [ %arrayidx15.14, %for.inc.13 ], [ %arrayidx15.15, %for.inc.14 ], [ %arrayidx15.16, %for.inc.15 ], [ %arrayidx15.17, %for.inc.16 ], [ %arrayidx15.18, %for.inc.17 ], [ %arrayidx15.19, %for.inc.18 ], [ %arrayidx15.20, %for.inc.19 ], [ %arrayidx15.21, %for.inc.20 ], [ %arrayidx15.22, %for.inc.21 ], [ %arrayidx15.23, %for.inc.22 ], [ %arrayidx15.24, %for.inc.23 ]
  store i8* %3, i8** %arrayidx15.lcssa, align 4, !tbaa !12
  %arrayidx19 = getelementptr inbounds [1000 x i32], [1000 x i32]* @_ZN6Halide7Runtime8Internal8my_sizesE, i32 0, i32 %i.051.lcssa
  store i32 %and, i32* %arrayidx19, align 4, !tbaa !10
  br label %cleanup

for.inc:                                          ; preds = %for.body
  %inc = add nuw nsw i32 %i.051, 1
  %arrayidx15.1 = getelementptr inbounds [1000 x i8*], [1000 x i8*]* @_ZN6Halide7Runtime8Internal6my_ptrE, i32 0, i32 %inc
  %6 = load i8*, i8** %arrayidx15.1, align 4, !tbaa !12
  %tobool16.1 = icmp eq i8* %6, null
  br i1 %tobool16.1, label %if.then17, label %for.inc.1

cleanup:                                          ; preds = %for.inc.24, %if.then17
  %7 = load i32, i32* @_ZN6Halide7Runtime8Internal9mem_traceE, align 4, !tbaa !10
  %add21 = add i32 %7, %and
  store i32 %add21, i32* @_ZN6Halide7Runtime8Internal9mem_traceE, align 4, !tbaa !10
  tail call void @halide_print(i8* null, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i32 0, i32 0)) #11
  %call22 = tail call i8* @_ZN6Halide7Runtime8Internal9to_stringEj(i32 %and) #12
  tail call void @halide_print(i8* null, i8* %call22) #11
  tail call void @halide_print(i8* null, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.4, i32 0, i32 0)) #11
  %8 = load i32, i32* @_ZN6Halide7Runtime8Internal9mem_traceE, align 4, !tbaa !10
  %call23 = tail call i8* @_ZN6Halide7Runtime8Internal9to_stringEj(i32 %8) #12
  tail call void @halide_print(i8* null, i8* %call23) #11
  tail call void @halide_print(i8* null, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.5, i32 0, i32 0)) #11
  %call24 = tail call i8* @_ZN6Halide7Runtime8Internal9to_stringEj(i32 %and11) #12
  tail call void @halide_print(i8* null, i8* %call24) #11
  tail call void @halide_print(i8* null, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.6, i32 0, i32 0)) #11
  br label %cleanup27

cleanup27:                                        ; preds = %cleanup, %if.end, %if.then
  %retval.0 = phi i8* [ null, %if.then ], [ %3, %cleanup ], [ %3, %if.end ]
  ret i8* %retval.0

for.inc.1:                                        ; preds = %for.inc
  %inc.1 = add nuw nsw i32 %i.051, 2
  %arrayidx15.2 = getelementptr inbounds [1000 x i8*], [1000 x i8*]* @_ZN6Halide7Runtime8Internal6my_ptrE, i32 0, i32 %inc.1
  %9 = load i8*, i8** %arrayidx15.2, align 4, !tbaa !12
  %tobool16.2 = icmp eq i8* %9, null
  br i1 %tobool16.2, label %if.then17, label %for.inc.2

for.inc.2:                                        ; preds = %for.inc.1
  %inc.2 = add nuw nsw i32 %i.051, 3
  %arrayidx15.3 = getelementptr inbounds [1000 x i8*], [1000 x i8*]* @_ZN6Halide7Runtime8Internal6my_ptrE, i32 0, i32 %inc.2
  %10 = load i8*, i8** %arrayidx15.3, align 4, !tbaa !12
  %tobool16.3 = icmp eq i8* %10, null
  br i1 %tobool16.3, label %if.then17, label %for.inc.3

for.inc.3:                                        ; preds = %for.inc.2
  %inc.3 = add nuw nsw i32 %i.051, 4
  %arrayidx15.4 = getelementptr inbounds [1000 x i8*], [1000 x i8*]* @_ZN6Halide7Runtime8Internal6my_ptrE, i32 0, i32 %inc.3
  %11 = load i8*, i8** %arrayidx15.4, align 4, !tbaa !12
  %tobool16.4 = icmp eq i8* %11, null
  br i1 %tobool16.4, label %if.then17, label %for.inc.4

for.inc.4:                                        ; preds = %for.inc.3
  %inc.4 = add nuw nsw i32 %i.051, 5
  %arrayidx15.5 = getelementptr inbounds [1000 x i8*], [1000 x i8*]* @_ZN6Halide7Runtime8Internal6my_ptrE, i32 0, i32 %inc.4
  %12 = load i8*, i8** %arrayidx15.5, align 4, !tbaa !12
  %tobool16.5 = icmp eq i8* %12, null
  br i1 %tobool16.5, label %if.then17, label %for.inc.5

for.inc.5:                                        ; preds = %for.inc.4
  %inc.5 = add nuw nsw i32 %i.051, 6
  %arrayidx15.6 = getelementptr inbounds [1000 x i8*], [1000 x i8*]* @_ZN6Halide7Runtime8Internal6my_ptrE, i32 0, i32 %inc.5
  %13 = load i8*, i8** %arrayidx15.6, align 4, !tbaa !12
  %tobool16.6 = icmp eq i8* %13, null
  br i1 %tobool16.6, label %if.then17, label %for.inc.6

for.inc.6:                                        ; preds = %for.inc.5
  %inc.6 = add nuw nsw i32 %i.051, 7
  %arrayidx15.7 = getelementptr inbounds [1000 x i8*], [1000 x i8*]* @_ZN6Halide7Runtime8Internal6my_ptrE, i32 0, i32 %inc.6
  %14 = load i8*, i8** %arrayidx15.7, align 4, !tbaa !12
  %tobool16.7 = icmp eq i8* %14, null
  br i1 %tobool16.7, label %if.then17, label %for.inc.7

for.inc.7:                                        ; preds = %for.inc.6
  %inc.7 = add nuw nsw i32 %i.051, 8
  %arrayidx15.8 = getelementptr inbounds [1000 x i8*], [1000 x i8*]* @_ZN6Halide7Runtime8Internal6my_ptrE, i32 0, i32 %inc.7
  %15 = load i8*, i8** %arrayidx15.8, align 4, !tbaa !12
  %tobool16.8 = icmp eq i8* %15, null
  br i1 %tobool16.8, label %if.then17, label %for.inc.8

for.inc.8:                                        ; preds = %for.inc.7
  %inc.8 = add nuw nsw i32 %i.051, 9
  %arrayidx15.9 = getelementptr inbounds [1000 x i8*], [1000 x i8*]* @_ZN6Halide7Runtime8Internal6my_ptrE, i32 0, i32 %inc.8
  %16 = load i8*, i8** %arrayidx15.9, align 4, !tbaa !12
  %tobool16.9 = icmp eq i8* %16, null
  br i1 %tobool16.9, label %if.then17, label %for.inc.9

for.inc.9:                                        ; preds = %for.inc.8
  %inc.9 = add nuw nsw i32 %i.051, 10
  %arrayidx15.10 = getelementptr inbounds [1000 x i8*], [1000 x i8*]* @_ZN6Halide7Runtime8Internal6my_ptrE, i32 0, i32 %inc.9
  %17 = load i8*, i8** %arrayidx15.10, align 4, !tbaa !12
  %tobool16.10 = icmp eq i8* %17, null
  br i1 %tobool16.10, label %if.then17, label %for.inc.10

for.inc.10:                                       ; preds = %for.inc.9
  %inc.10 = add nuw nsw i32 %i.051, 11
  %arrayidx15.11 = getelementptr inbounds [1000 x i8*], [1000 x i8*]* @_ZN6Halide7Runtime8Internal6my_ptrE, i32 0, i32 %inc.10
  %18 = load i8*, i8** %arrayidx15.11, align 4, !tbaa !12
  %tobool16.11 = icmp eq i8* %18, null
  br i1 %tobool16.11, label %if.then17, label %for.inc.11

for.inc.11:                                       ; preds = %for.inc.10
  %inc.11 = add nuw nsw i32 %i.051, 12
  %arrayidx15.12 = getelementptr inbounds [1000 x i8*], [1000 x i8*]* @_ZN6Halide7Runtime8Internal6my_ptrE, i32 0, i32 %inc.11
  %19 = load i8*, i8** %arrayidx15.12, align 4, !tbaa !12
  %tobool16.12 = icmp eq i8* %19, null
  br i1 %tobool16.12, label %if.then17, label %for.inc.12

for.inc.12:                                       ; preds = %for.inc.11
  %inc.12 = add nuw nsw i32 %i.051, 13
  %arrayidx15.13 = getelementptr inbounds [1000 x i8*], [1000 x i8*]* @_ZN6Halide7Runtime8Internal6my_ptrE, i32 0, i32 %inc.12
  %20 = load i8*, i8** %arrayidx15.13, align 4, !tbaa !12
  %tobool16.13 = icmp eq i8* %20, null
  br i1 %tobool16.13, label %if.then17, label %for.inc.13

for.inc.13:                                       ; preds = %for.inc.12
  %inc.13 = add nuw nsw i32 %i.051, 14
  %arrayidx15.14 = getelementptr inbounds [1000 x i8*], [1000 x i8*]* @_ZN6Halide7Runtime8Internal6my_ptrE, i32 0, i32 %inc.13
  %21 = load i8*, i8** %arrayidx15.14, align 4, !tbaa !12
  %tobool16.14 = icmp eq i8* %21, null
  br i1 %tobool16.14, label %if.then17, label %for.inc.14

for.inc.14:                                       ; preds = %for.inc.13
  %inc.14 = add nuw nsw i32 %i.051, 15
  %arrayidx15.15 = getelementptr inbounds [1000 x i8*], [1000 x i8*]* @_ZN6Halide7Runtime8Internal6my_ptrE, i32 0, i32 %inc.14
  %22 = load i8*, i8** %arrayidx15.15, align 4, !tbaa !12
  %tobool16.15 = icmp eq i8* %22, null
  br i1 %tobool16.15, label %if.then17, label %for.inc.15

for.inc.15:                                       ; preds = %for.inc.14
  %inc.15 = add nuw nsw i32 %i.051, 16
  %arrayidx15.16 = getelementptr inbounds [1000 x i8*], [1000 x i8*]* @_ZN6Halide7Runtime8Internal6my_ptrE, i32 0, i32 %inc.15
  %23 = load i8*, i8** %arrayidx15.16, align 4, !tbaa !12
  %tobool16.16 = icmp eq i8* %23, null
  br i1 %tobool16.16, label %if.then17, label %for.inc.16

for.inc.16:                                       ; preds = %for.inc.15
  %inc.16 = add nuw nsw i32 %i.051, 17
  %arrayidx15.17 = getelementptr inbounds [1000 x i8*], [1000 x i8*]* @_ZN6Halide7Runtime8Internal6my_ptrE, i32 0, i32 %inc.16
  %24 = load i8*, i8** %arrayidx15.17, align 4, !tbaa !12
  %tobool16.17 = icmp eq i8* %24, null
  br i1 %tobool16.17, label %if.then17, label %for.inc.17

for.inc.17:                                       ; preds = %for.inc.16
  %inc.17 = add nuw nsw i32 %i.051, 18
  %arrayidx15.18 = getelementptr inbounds [1000 x i8*], [1000 x i8*]* @_ZN6Halide7Runtime8Internal6my_ptrE, i32 0, i32 %inc.17
  %25 = load i8*, i8** %arrayidx15.18, align 4, !tbaa !12
  %tobool16.18 = icmp eq i8* %25, null
  br i1 %tobool16.18, label %if.then17, label %for.inc.18

for.inc.18:                                       ; preds = %for.inc.17
  %inc.18 = add nuw nsw i32 %i.051, 19
  %arrayidx15.19 = getelementptr inbounds [1000 x i8*], [1000 x i8*]* @_ZN6Halide7Runtime8Internal6my_ptrE, i32 0, i32 %inc.18
  %26 = load i8*, i8** %arrayidx15.19, align 4, !tbaa !12
  %tobool16.19 = icmp eq i8* %26, null
  br i1 %tobool16.19, label %if.then17, label %for.inc.19

for.inc.19:                                       ; preds = %for.inc.18
  %inc.19 = add nuw nsw i32 %i.051, 20
  %arrayidx15.20 = getelementptr inbounds [1000 x i8*], [1000 x i8*]* @_ZN6Halide7Runtime8Internal6my_ptrE, i32 0, i32 %inc.19
  %27 = load i8*, i8** %arrayidx15.20, align 4, !tbaa !12
  %tobool16.20 = icmp eq i8* %27, null
  br i1 %tobool16.20, label %if.then17, label %for.inc.20

for.inc.20:                                       ; preds = %for.inc.19
  %inc.20 = add nuw nsw i32 %i.051, 21
  %arrayidx15.21 = getelementptr inbounds [1000 x i8*], [1000 x i8*]* @_ZN6Halide7Runtime8Internal6my_ptrE, i32 0, i32 %inc.20
  %28 = load i8*, i8** %arrayidx15.21, align 4, !tbaa !12
  %tobool16.21 = icmp eq i8* %28, null
  br i1 %tobool16.21, label %if.then17, label %for.inc.21

for.inc.21:                                       ; preds = %for.inc.20
  %inc.21 = add nuw nsw i32 %i.051, 22
  %arrayidx15.22 = getelementptr inbounds [1000 x i8*], [1000 x i8*]* @_ZN6Halide7Runtime8Internal6my_ptrE, i32 0, i32 %inc.21
  %29 = load i8*, i8** %arrayidx15.22, align 4, !tbaa !12
  %tobool16.22 = icmp eq i8* %29, null
  br i1 %tobool16.22, label %if.then17, label %for.inc.22

for.inc.22:                                       ; preds = %for.inc.21
  %inc.22 = add nuw nsw i32 %i.051, 23
  %arrayidx15.23 = getelementptr inbounds [1000 x i8*], [1000 x i8*]* @_ZN6Halide7Runtime8Internal6my_ptrE, i32 0, i32 %inc.22
  %30 = load i8*, i8** %arrayidx15.23, align 4, !tbaa !12
  %tobool16.23 = icmp eq i8* %30, null
  br i1 %tobool16.23, label %if.then17, label %for.inc.23

for.inc.23:                                       ; preds = %for.inc.22
  %inc.23 = add nuw nsw i32 %i.051, 24
  %arrayidx15.24 = getelementptr inbounds [1000 x i8*], [1000 x i8*]* @_ZN6Halide7Runtime8Internal6my_ptrE, i32 0, i32 %inc.23
  %31 = load i8*, i8** %arrayidx15.24, align 4, !tbaa !12
  %tobool16.24 = icmp eq i8* %31, null
  br i1 %tobool16.24, label %if.then17, label %for.inc.24

for.inc.24:                                       ; preds = %for.inc.23
  %inc.24 = add nuw nsw i32 %i.051, 25
  %cmp14.24 = icmp ult i32 %inc.24, 1000
  br i1 %cmp14.24, label %for.body, label %cleanup, !llvm.loop !14
}

declare extern_weak void @halide_print(i8*, i8*) local_unnamed_addr #2

; Function Attrs: nounwind
define linkonce void @_ZN6Halide7Runtime8Internal12aligned_freeEPv(i8* %ptr) local_unnamed_addr #0 {
entry:
  %tobool = icmp eq i8* %ptr, null
  br i1 %tobool, label %if.end12, label %if.then

if.then:                                          ; preds = %entry
  %0 = load i32, i32* @malloc_tracing, align 4, !tbaa !10
  %tobool1 = icmp eq i32 %0, 0
  br i1 %tobool1, label %if.end10, label %for.body

for.body:                                         ; preds = %if.then, %for.inc.24
  %i.024 = phi i32 [ %inc.24, %for.inc.24 ], [ 0, %if.then ]
  %arrayidx = getelementptr inbounds [1000 x i8*], [1000 x i8*]* @_ZN6Halide7Runtime8Internal6my_ptrE, i32 0, i32 %i.024
  %1 = load i8*, i8** %arrayidx, align 4, !tbaa !12
  %cmp3 = icmp eq i8* %1, %ptr
  br i1 %cmp3, label %if.then4, label %for.inc

if.then4:                                         ; preds = %for.inc.23, %for.inc.22, %for.inc.21, %for.inc.20, %for.inc.19, %for.inc.18, %for.inc.17, %for.inc.16, %for.inc.15, %for.inc.14, %for.inc.13, %for.inc.12, %for.inc.11, %for.inc.10, %for.inc.9, %for.inc.8, %for.inc.7, %for.inc.6, %for.inc.5, %for.inc.4, %for.inc.3, %for.inc.2, %for.inc.1, %for.inc, %for.body
  %i.024.lcssa = phi i32 [ %i.024, %for.body ], [ %inc, %for.inc ], [ %inc.1, %for.inc.1 ], [ %inc.2, %for.inc.2 ], [ %inc.3, %for.inc.3 ], [ %inc.4, %for.inc.4 ], [ %inc.5, %for.inc.5 ], [ %inc.6, %for.inc.6 ], [ %inc.7, %for.inc.7 ], [ %inc.8, %for.inc.8 ], [ %inc.9, %for.inc.9 ], [ %inc.10, %for.inc.10 ], [ %inc.11, %for.inc.11 ], [ %inc.12, %for.inc.12 ], [ %inc.13, %for.inc.13 ], [ %inc.14, %for.inc.14 ], [ %inc.15, %for.inc.15 ], [ %inc.16, %for.inc.16 ], [ %inc.17, %for.inc.17 ], [ %inc.18, %for.inc.18 ], [ %inc.19, %for.inc.19 ], [ %inc.20, %for.inc.20 ], [ %inc.21, %for.inc.21 ], [ %inc.22, %for.inc.22 ], [ %inc.23, %for.inc.23 ]
  %arrayidx.lcssa = phi i8** [ %arrayidx, %for.body ], [ %arrayidx.1, %for.inc ], [ %arrayidx.2, %for.inc.1 ], [ %arrayidx.3, %for.inc.2 ], [ %arrayidx.4, %for.inc.3 ], [ %arrayidx.5, %for.inc.4 ], [ %arrayidx.6, %for.inc.5 ], [ %arrayidx.7, %for.inc.6 ], [ %arrayidx.8, %for.inc.7 ], [ %arrayidx.9, %for.inc.8 ], [ %arrayidx.10, %for.inc.9 ], [ %arrayidx.11, %for.inc.10 ], [ %arrayidx.12, %for.inc.11 ], [ %arrayidx.13, %for.inc.12 ], [ %arrayidx.14, %for.inc.13 ], [ %arrayidx.15, %for.inc.14 ], [ %arrayidx.16, %for.inc.15 ], [ %arrayidx.17, %for.inc.16 ], [ %arrayidx.18, %for.inc.17 ], [ %arrayidx.19, %for.inc.18 ], [ %arrayidx.20, %for.inc.19 ], [ %arrayidx.21, %for.inc.20 ], [ %arrayidx.22, %for.inc.21 ], [ %arrayidx.23, %for.inc.22 ], [ %arrayidx.24, %for.inc.23 ]
  %arrayidx5 = getelementptr inbounds [1000 x i32], [1000 x i32]* @_ZN6Halide7Runtime8Internal8my_sizesE, i32 0, i32 %i.024.lcssa
  %2 = load i32, i32* %arrayidx5, align 4, !tbaa !10
  store i8* null, i8** %arrayidx.lcssa, align 4, !tbaa !12
  store i32 0, i32* %arrayidx5, align 4, !tbaa !10
  br label %cleanup

for.inc:                                          ; preds = %for.body
  %inc = add nuw nsw i32 %i.024, 1
  %arrayidx.1 = getelementptr inbounds [1000 x i8*], [1000 x i8*]* @_ZN6Halide7Runtime8Internal6my_ptrE, i32 0, i32 %inc
  %3 = load i8*, i8** %arrayidx.1, align 4, !tbaa !12
  %cmp3.1 = icmp eq i8* %3, %ptr
  br i1 %cmp3.1, label %if.then4, label %for.inc.1

cleanup:                                          ; preds = %for.inc.24, %if.then4
  %allocation_size.0 = phi i32 [ %2, %if.then4 ], [ 0, %for.inc.24 ]
  %4 = load i32, i32* @_ZN6Halide7Runtime8Internal9mem_traceE, align 4, !tbaa !10
  %sub = sub i32 %4, %allocation_size.0
  store i32 %sub, i32* @_ZN6Halide7Runtime8Internal9mem_traceE, align 4, !tbaa !10
  tail call void @halide_print(i8* null, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.7, i32 0, i32 0)) #11
  %call = tail call i8* @_ZN6Halide7Runtime8Internal9to_stringEj(i32 %allocation_size.0) #12
  tail call void @halide_print(i8* null, i8* %call) #11
  tail call void @halide_print(i8* null, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.4, i32 0, i32 0)) #11
  %5 = load i32, i32* @_ZN6Halide7Runtime8Internal9mem_traceE, align 4, !tbaa !10
  %call8 = tail call i8* @_ZN6Halide7Runtime8Internal9to_stringEj(i32 %5) #12
  tail call void @halide_print(i8* null, i8* %call8) #11
  tail call void @halide_print(i8* null, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.5, i32 0, i32 0)) #11
  %6 = ptrtoint i8* %ptr to i32
  %call9 = tail call i8* @_ZN6Halide7Runtime8Internal9to_stringEj(i32 %6) #12
  tail call void @halide_print(i8* null, i8* %call9) #11
  tail call void @halide_print(i8* null, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.6, i32 0, i32 0)) #11
  br label %if.end10

if.end10:                                         ; preds = %cleanup, %if.then
  %arrayidx11 = getelementptr inbounds i8, i8* %ptr, i32 -4
  %7 = bitcast i8* %arrayidx11 to i8**
  %8 = load i8*, i8** %7, align 4, !tbaa !12
  tail call void @free(i8* %8) #11
  br label %if.end12

if.end12:                                         ; preds = %if.end10, %entry
  ret void

for.inc.1:                                        ; preds = %for.inc
  %inc.1 = add nuw nsw i32 %i.024, 2
  %arrayidx.2 = getelementptr inbounds [1000 x i8*], [1000 x i8*]* @_ZN6Halide7Runtime8Internal6my_ptrE, i32 0, i32 %inc.1
  %9 = load i8*, i8** %arrayidx.2, align 4, !tbaa !12
  %cmp3.2 = icmp eq i8* %9, %ptr
  br i1 %cmp3.2, label %if.then4, label %for.inc.2

for.inc.2:                                        ; preds = %for.inc.1
  %inc.2 = add nuw nsw i32 %i.024, 3
  %arrayidx.3 = getelementptr inbounds [1000 x i8*], [1000 x i8*]* @_ZN6Halide7Runtime8Internal6my_ptrE, i32 0, i32 %inc.2
  %10 = load i8*, i8** %arrayidx.3, align 4, !tbaa !12
  %cmp3.3 = icmp eq i8* %10, %ptr
  br i1 %cmp3.3, label %if.then4, label %for.inc.3

for.inc.3:                                        ; preds = %for.inc.2
  %inc.3 = add nuw nsw i32 %i.024, 4
  %arrayidx.4 = getelementptr inbounds [1000 x i8*], [1000 x i8*]* @_ZN6Halide7Runtime8Internal6my_ptrE, i32 0, i32 %inc.3
  %11 = load i8*, i8** %arrayidx.4, align 4, !tbaa !12
  %cmp3.4 = icmp eq i8* %11, %ptr
  br i1 %cmp3.4, label %if.then4, label %for.inc.4

for.inc.4:                                        ; preds = %for.inc.3
  %inc.4 = add nuw nsw i32 %i.024, 5
  %arrayidx.5 = getelementptr inbounds [1000 x i8*], [1000 x i8*]* @_ZN6Halide7Runtime8Internal6my_ptrE, i32 0, i32 %inc.4
  %12 = load i8*, i8** %arrayidx.5, align 4, !tbaa !12
  %cmp3.5 = icmp eq i8* %12, %ptr
  br i1 %cmp3.5, label %if.then4, label %for.inc.5

for.inc.5:                                        ; preds = %for.inc.4
  %inc.5 = add nuw nsw i32 %i.024, 6
  %arrayidx.6 = getelementptr inbounds [1000 x i8*], [1000 x i8*]* @_ZN6Halide7Runtime8Internal6my_ptrE, i32 0, i32 %inc.5
  %13 = load i8*, i8** %arrayidx.6, align 4, !tbaa !12
  %cmp3.6 = icmp eq i8* %13, %ptr
  br i1 %cmp3.6, label %if.then4, label %for.inc.6

for.inc.6:                                        ; preds = %for.inc.5
  %inc.6 = add nuw nsw i32 %i.024, 7
  %arrayidx.7 = getelementptr inbounds [1000 x i8*], [1000 x i8*]* @_ZN6Halide7Runtime8Internal6my_ptrE, i32 0, i32 %inc.6
  %14 = load i8*, i8** %arrayidx.7, align 4, !tbaa !12
  %cmp3.7 = icmp eq i8* %14, %ptr
  br i1 %cmp3.7, label %if.then4, label %for.inc.7

for.inc.7:                                        ; preds = %for.inc.6
  %inc.7 = add nuw nsw i32 %i.024, 8
  %arrayidx.8 = getelementptr inbounds [1000 x i8*], [1000 x i8*]* @_ZN6Halide7Runtime8Internal6my_ptrE, i32 0, i32 %inc.7
  %15 = load i8*, i8** %arrayidx.8, align 4, !tbaa !12
  %cmp3.8 = icmp eq i8* %15, %ptr
  br i1 %cmp3.8, label %if.then4, label %for.inc.8

for.inc.8:                                        ; preds = %for.inc.7
  %inc.8 = add nuw nsw i32 %i.024, 9
  %arrayidx.9 = getelementptr inbounds [1000 x i8*], [1000 x i8*]* @_ZN6Halide7Runtime8Internal6my_ptrE, i32 0, i32 %inc.8
  %16 = load i8*, i8** %arrayidx.9, align 4, !tbaa !12
  %cmp3.9 = icmp eq i8* %16, %ptr
  br i1 %cmp3.9, label %if.then4, label %for.inc.9

for.inc.9:                                        ; preds = %for.inc.8
  %inc.9 = add nuw nsw i32 %i.024, 10
  %arrayidx.10 = getelementptr inbounds [1000 x i8*], [1000 x i8*]* @_ZN6Halide7Runtime8Internal6my_ptrE, i32 0, i32 %inc.9
  %17 = load i8*, i8** %arrayidx.10, align 4, !tbaa !12
  %cmp3.10 = icmp eq i8* %17, %ptr
  br i1 %cmp3.10, label %if.then4, label %for.inc.10

for.inc.10:                                       ; preds = %for.inc.9
  %inc.10 = add nuw nsw i32 %i.024, 11
  %arrayidx.11 = getelementptr inbounds [1000 x i8*], [1000 x i8*]* @_ZN6Halide7Runtime8Internal6my_ptrE, i32 0, i32 %inc.10
  %18 = load i8*, i8** %arrayidx.11, align 4, !tbaa !12
  %cmp3.11 = icmp eq i8* %18, %ptr
  br i1 %cmp3.11, label %if.then4, label %for.inc.11

for.inc.11:                                       ; preds = %for.inc.10
  %inc.11 = add nuw nsw i32 %i.024, 12
  %arrayidx.12 = getelementptr inbounds [1000 x i8*], [1000 x i8*]* @_ZN6Halide7Runtime8Internal6my_ptrE, i32 0, i32 %inc.11
  %19 = load i8*, i8** %arrayidx.12, align 4, !tbaa !12
  %cmp3.12 = icmp eq i8* %19, %ptr
  br i1 %cmp3.12, label %if.then4, label %for.inc.12

for.inc.12:                                       ; preds = %for.inc.11
  %inc.12 = add nuw nsw i32 %i.024, 13
  %arrayidx.13 = getelementptr inbounds [1000 x i8*], [1000 x i8*]* @_ZN6Halide7Runtime8Internal6my_ptrE, i32 0, i32 %inc.12
  %20 = load i8*, i8** %arrayidx.13, align 4, !tbaa !12
  %cmp3.13 = icmp eq i8* %20, %ptr
  br i1 %cmp3.13, label %if.then4, label %for.inc.13

for.inc.13:                                       ; preds = %for.inc.12
  %inc.13 = add nuw nsw i32 %i.024, 14
  %arrayidx.14 = getelementptr inbounds [1000 x i8*], [1000 x i8*]* @_ZN6Halide7Runtime8Internal6my_ptrE, i32 0, i32 %inc.13
  %21 = load i8*, i8** %arrayidx.14, align 4, !tbaa !12
  %cmp3.14 = icmp eq i8* %21, %ptr
  br i1 %cmp3.14, label %if.then4, label %for.inc.14

for.inc.14:                                       ; preds = %for.inc.13
  %inc.14 = add nuw nsw i32 %i.024, 15
  %arrayidx.15 = getelementptr inbounds [1000 x i8*], [1000 x i8*]* @_ZN6Halide7Runtime8Internal6my_ptrE, i32 0, i32 %inc.14
  %22 = load i8*, i8** %arrayidx.15, align 4, !tbaa !12
  %cmp3.15 = icmp eq i8* %22, %ptr
  br i1 %cmp3.15, label %if.then4, label %for.inc.15

for.inc.15:                                       ; preds = %for.inc.14
  %inc.15 = add nuw nsw i32 %i.024, 16
  %arrayidx.16 = getelementptr inbounds [1000 x i8*], [1000 x i8*]* @_ZN6Halide7Runtime8Internal6my_ptrE, i32 0, i32 %inc.15
  %23 = load i8*, i8** %arrayidx.16, align 4, !tbaa !12
  %cmp3.16 = icmp eq i8* %23, %ptr
  br i1 %cmp3.16, label %if.then4, label %for.inc.16

for.inc.16:                                       ; preds = %for.inc.15
  %inc.16 = add nuw nsw i32 %i.024, 17
  %arrayidx.17 = getelementptr inbounds [1000 x i8*], [1000 x i8*]* @_ZN6Halide7Runtime8Internal6my_ptrE, i32 0, i32 %inc.16
  %24 = load i8*, i8** %arrayidx.17, align 4, !tbaa !12
  %cmp3.17 = icmp eq i8* %24, %ptr
  br i1 %cmp3.17, label %if.then4, label %for.inc.17

for.inc.17:                                       ; preds = %for.inc.16
  %inc.17 = add nuw nsw i32 %i.024, 18
  %arrayidx.18 = getelementptr inbounds [1000 x i8*], [1000 x i8*]* @_ZN6Halide7Runtime8Internal6my_ptrE, i32 0, i32 %inc.17
  %25 = load i8*, i8** %arrayidx.18, align 4, !tbaa !12
  %cmp3.18 = icmp eq i8* %25, %ptr
  br i1 %cmp3.18, label %if.then4, label %for.inc.18

for.inc.18:                                       ; preds = %for.inc.17
  %inc.18 = add nuw nsw i32 %i.024, 19
  %arrayidx.19 = getelementptr inbounds [1000 x i8*], [1000 x i8*]* @_ZN6Halide7Runtime8Internal6my_ptrE, i32 0, i32 %inc.18
  %26 = load i8*, i8** %arrayidx.19, align 4, !tbaa !12
  %cmp3.19 = icmp eq i8* %26, %ptr
  br i1 %cmp3.19, label %if.then4, label %for.inc.19

for.inc.19:                                       ; preds = %for.inc.18
  %inc.19 = add nuw nsw i32 %i.024, 20
  %arrayidx.20 = getelementptr inbounds [1000 x i8*], [1000 x i8*]* @_ZN6Halide7Runtime8Internal6my_ptrE, i32 0, i32 %inc.19
  %27 = load i8*, i8** %arrayidx.20, align 4, !tbaa !12
  %cmp3.20 = icmp eq i8* %27, %ptr
  br i1 %cmp3.20, label %if.then4, label %for.inc.20

for.inc.20:                                       ; preds = %for.inc.19
  %inc.20 = add nuw nsw i32 %i.024, 21
  %arrayidx.21 = getelementptr inbounds [1000 x i8*], [1000 x i8*]* @_ZN6Halide7Runtime8Internal6my_ptrE, i32 0, i32 %inc.20
  %28 = load i8*, i8** %arrayidx.21, align 4, !tbaa !12
  %cmp3.21 = icmp eq i8* %28, %ptr
  br i1 %cmp3.21, label %if.then4, label %for.inc.21

for.inc.21:                                       ; preds = %for.inc.20
  %inc.21 = add nuw nsw i32 %i.024, 22
  %arrayidx.22 = getelementptr inbounds [1000 x i8*], [1000 x i8*]* @_ZN6Halide7Runtime8Internal6my_ptrE, i32 0, i32 %inc.21
  %29 = load i8*, i8** %arrayidx.22, align 4, !tbaa !12
  %cmp3.22 = icmp eq i8* %29, %ptr
  br i1 %cmp3.22, label %if.then4, label %for.inc.22

for.inc.22:                                       ; preds = %for.inc.21
  %inc.22 = add nuw nsw i32 %i.024, 23
  %arrayidx.23 = getelementptr inbounds [1000 x i8*], [1000 x i8*]* @_ZN6Halide7Runtime8Internal6my_ptrE, i32 0, i32 %inc.22
  %30 = load i8*, i8** %arrayidx.23, align 4, !tbaa !12
  %cmp3.23 = icmp eq i8* %30, %ptr
  br i1 %cmp3.23, label %if.then4, label %for.inc.23

for.inc.23:                                       ; preds = %for.inc.22
  %inc.23 = add nuw nsw i32 %i.024, 24
  %arrayidx.24 = getelementptr inbounds [1000 x i8*], [1000 x i8*]* @_ZN6Halide7Runtime8Internal6my_ptrE, i32 0, i32 %inc.23
  %31 = load i8*, i8** %arrayidx.24, align 4, !tbaa !12
  %cmp3.24 = icmp eq i8* %31, %ptr
  br i1 %cmp3.24, label %if.then4, label %for.inc.24

for.inc.24:                                       ; preds = %for.inc.23
  %inc.24 = add nuw nsw i32 %i.024, 25
  %cmp.24 = icmp ult i32 %inc.24, 1000
  br i1 %cmp.24, label %for.body, label %cleanup, !llvm.loop !16
}

; Function Attrs: nounwind
declare void @free(i8* nocapture) local_unnamed_addr #1

; Function Attrs: nounwind
define linkonce void @_ZN6Halide7Runtime8Internal24halide_allocator_cleanupEv() #0 {
entry:
  %0 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 0), align 4, !tbaa !12
  tail call void @_ZN6Halide7Runtime8Internal12aligned_freeEPv(i8* %0) #12
  %1 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 1), align 4, !tbaa !12
  tail call void @_ZN6Halide7Runtime8Internal12aligned_freeEPv(i8* %1) #12
  %2 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 2), align 4, !tbaa !12
  tail call void @_ZN6Halide7Runtime8Internal12aligned_freeEPv(i8* %2) #12
  %3 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 3), align 4, !tbaa !12
  tail call void @_ZN6Halide7Runtime8Internal12aligned_freeEPv(i8* %3) #12
  %4 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 4), align 4, !tbaa !12
  tail call void @_ZN6Halide7Runtime8Internal12aligned_freeEPv(i8* %4) #12
  %5 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 5), align 4, !tbaa !12
  tail call void @_ZN6Halide7Runtime8Internal12aligned_freeEPv(i8* %5) #12
  %6 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 6), align 4, !tbaa !12
  tail call void @_ZN6Halide7Runtime8Internal12aligned_freeEPv(i8* %6) #12
  %7 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 7), align 4, !tbaa !12
  tail call void @_ZN6Halide7Runtime8Internal12aligned_freeEPv(i8* %7) #12
  %8 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 8), align 4, !tbaa !12
  tail call void @_ZN6Halide7Runtime8Internal12aligned_freeEPv(i8* %8) #12
  %9 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 9), align 4, !tbaa !12
  tail call void @_ZN6Halide7Runtime8Internal12aligned_freeEPv(i8* %9) #12
  ret void
}

; Function Attrs: nounwind
define weak i8* @halide_default_malloc(i8* %user_context, i32 %x) #0 {
entry:
  %cmp = icmp ult i32 %x, 65537
  br i1 %cmp, label %for.body.preheader, label %if.end9

for.body.preheader:                               ; preds = %entry
  %0 = cmpxchg i32* getelementptr inbounds ([10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 0), i32 0, i32 1 seq_cst seq_cst
  %cmp2 = extractvalue { i32, i1 } %0, 1
  br i1 %cmp2, label %if.then3, label %for.inc

if.then3:                                         ; preds = %for.inc.8, %for.inc.7, %for.inc.6, %for.inc.5, %for.inc.4, %for.inc.3, %for.inc.2, %for.inc.1, %for.inc, %for.body.preheader
  %i.021.lcssa = phi i32 [ 0, %for.body.preheader ], [ 1, %for.inc ], [ 2, %for.inc.1 ], [ 3, %for.inc.2 ], [ 4, %for.inc.3 ], [ 5, %for.inc.4 ], [ 6, %for.inc.5 ], [ 7, %for.inc.6 ], [ 8, %for.inc.7 ], [ 9, %for.inc.8 ]
  %arrayidx = getelementptr inbounds [10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 %i.021.lcssa
  %1 = load i8*, i8** %arrayidx, align 4, !tbaa !12
  %cmp4 = icmp eq i8* %1, null
  br i1 %cmp4, label %if.then5, label %cleanup11

if.then5:                                         ; preds = %if.then3
  %call = tail call i8* @_ZN6Halide7Runtime8Internal14aligned_mallocEjj(i32 128, i32 65536) #12
  store i8* %call, i8** %arrayidx, align 4, !tbaa !12
  br label %cleanup11

for.inc:                                          ; preds = %for.body.preheader
  %2 = cmpxchg i32* getelementptr inbounds ([10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 1), i32 0, i32 1 seq_cst seq_cst
  %cmp2.1 = extractvalue { i32, i1 } %2, 1
  br i1 %cmp2.1, label %if.then3, label %for.inc.1

if.end9:                                          ; preds = %for.inc.8, %entry
  %call10 = tail call i8* @_ZN6Halide7Runtime8Internal14aligned_mallocEjj(i32 128, i32 %x) #12
  br label %cleanup11

cleanup11:                                        ; preds = %if.end9, %if.then5, %if.then3
  %retval.1 = phi i8* [ %call10, %if.end9 ], [ %1, %if.then3 ], [ %call, %if.then5 ]
  ret i8* %retval.1

for.inc.1:                                        ; preds = %for.inc
  %3 = cmpxchg i32* getelementptr inbounds ([10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 2), i32 0, i32 1 seq_cst seq_cst
  %cmp2.2 = extractvalue { i32, i1 } %3, 1
  br i1 %cmp2.2, label %if.then3, label %for.inc.2

for.inc.2:                                        ; preds = %for.inc.1
  %4 = cmpxchg i32* getelementptr inbounds ([10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 3), i32 0, i32 1 seq_cst seq_cst
  %cmp2.3 = extractvalue { i32, i1 } %4, 1
  br i1 %cmp2.3, label %if.then3, label %for.inc.3

for.inc.3:                                        ; preds = %for.inc.2
  %5 = cmpxchg i32* getelementptr inbounds ([10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 4), i32 0, i32 1 seq_cst seq_cst
  %cmp2.4 = extractvalue { i32, i1 } %5, 1
  br i1 %cmp2.4, label %if.then3, label %for.inc.4

for.inc.4:                                        ; preds = %for.inc.3
  %6 = cmpxchg i32* getelementptr inbounds ([10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 5), i32 0, i32 1 seq_cst seq_cst
  %cmp2.5 = extractvalue { i32, i1 } %6, 1
  br i1 %cmp2.5, label %if.then3, label %for.inc.5

for.inc.5:                                        ; preds = %for.inc.4
  %7 = cmpxchg i32* getelementptr inbounds ([10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 6), i32 0, i32 1 seq_cst seq_cst
  %cmp2.6 = extractvalue { i32, i1 } %7, 1
  br i1 %cmp2.6, label %if.then3, label %for.inc.6

for.inc.6:                                        ; preds = %for.inc.5
  %8 = cmpxchg i32* getelementptr inbounds ([10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 7), i32 0, i32 1 seq_cst seq_cst
  %cmp2.7 = extractvalue { i32, i1 } %8, 1
  br i1 %cmp2.7, label %if.then3, label %for.inc.7

for.inc.7:                                        ; preds = %for.inc.6
  %9 = cmpxchg i32* getelementptr inbounds ([10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 8), i32 0, i32 1 seq_cst seq_cst
  %cmp2.8 = extractvalue { i32, i1 } %9, 1
  br i1 %cmp2.8, label %if.then3, label %for.inc.8

for.inc.8:                                        ; preds = %for.inc.7
  %10 = cmpxchg i32* getelementptr inbounds ([10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 9), i32 0, i32 1 seq_cst seq_cst
  %cmp2.9 = extractvalue { i32, i1 } %10, 1
  br i1 %cmp2.9, label %if.then3, label %if.end9
}

; Function Attrs: nounwind
define weak void @halide_default_free(i8* %user_context, i8* %ptr) #0 {
entry:
  %0 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 0), align 4, !tbaa !12
  %cmp1 = icmp eq i8* %0, %ptr
  br i1 %cmp1, label %cleanup, label %for.inc

for.inc:                                          ; preds = %entry
  %1 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 1), align 4, !tbaa !12
  %cmp1.1 = icmp eq i8* %1, %ptr
  br i1 %cmp1.1, label %cleanup, label %for.inc.1

cleanup:                                          ; preds = %for.inc.8, %for.inc.7, %for.inc.6, %for.inc.5, %for.inc.4, %for.inc.3, %for.inc.2, %for.inc.1, %for.inc, %entry
  %i.010.lcssa = phi i32 [ 0, %entry ], [ 1, %for.inc ], [ 2, %for.inc.1 ], [ 3, %for.inc.2 ], [ 4, %for.inc.3 ], [ 5, %for.inc.4 ], [ 6, %for.inc.5 ], [ 7, %for.inc.6 ], [ 8, %for.inc.7 ], [ 9, %for.inc.8 ]
  %arrayidx2 = getelementptr inbounds [10 x i32], [10 x i32]* @_ZN6Halide7Runtime8Internal11buf_is_usedE, i32 0, i32 %i.010.lcssa
  store i32 0, i32* %arrayidx2, align 4, !tbaa !10
  br label %return

return:                                           ; preds = %for.inc.9, %cleanup
  ret void

for.inc.1:                                        ; preds = %for.inc
  %2 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 2), align 4, !tbaa !12
  %cmp1.2 = icmp eq i8* %2, %ptr
  br i1 %cmp1.2, label %cleanup, label %for.inc.2

for.inc.2:                                        ; preds = %for.inc.1
  %3 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 3), align 4, !tbaa !12
  %cmp1.3 = icmp eq i8* %3, %ptr
  br i1 %cmp1.3, label %cleanup, label %for.inc.3

for.inc.3:                                        ; preds = %for.inc.2
  %4 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 4), align 4, !tbaa !12
  %cmp1.4 = icmp eq i8* %4, %ptr
  br i1 %cmp1.4, label %cleanup, label %for.inc.4

for.inc.4:                                        ; preds = %for.inc.3
  %5 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 5), align 4, !tbaa !12
  %cmp1.5 = icmp eq i8* %5, %ptr
  br i1 %cmp1.5, label %cleanup, label %for.inc.5

for.inc.5:                                        ; preds = %for.inc.4
  %6 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 6), align 4, !tbaa !12
  %cmp1.6 = icmp eq i8* %6, %ptr
  br i1 %cmp1.6, label %cleanup, label %for.inc.6

for.inc.6:                                        ; preds = %for.inc.5
  %7 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 7), align 4, !tbaa !12
  %cmp1.7 = icmp eq i8* %7, %ptr
  br i1 %cmp1.7, label %cleanup, label %for.inc.7

for.inc.7:                                        ; preds = %for.inc.6
  %8 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 8), align 4, !tbaa !12
  %cmp1.8 = icmp eq i8* %8, %ptr
  br i1 %cmp1.8, label %cleanup, label %for.inc.8

for.inc.8:                                        ; preds = %for.inc.7
  %9 = load i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @_ZN6Halide7Runtime8Internal7mem_bufE, i32 0, i32 9), align 4, !tbaa !12
  %cmp1.9 = icmp eq i8* %9, %ptr
  br i1 %cmp1.9, label %cleanup, label %for.inc.9

for.inc.9:                                        ; preds = %for.inc.8
  tail call void @_ZN6Halide7Runtime8Internal12aligned_freeEPv(i8* %ptr) #12
  br label %return
}

; Function Attrs: nounwind
define weak i8* (i8*, i32)* @halide_set_custom_malloc(i8* (i8*, i32)* %user_malloc) local_unnamed_addr #0 {
entry:
  tail call void @halide_print(i8* null, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.8, i32 0, i32 0)) #11
  %0 = load i8* (i8*, i32)*, i8* (i8*, i32)** @_ZN6Halide7Runtime8Internal13custom_mallocE, align 4, !tbaa !12
  store i8* (i8*, i32)* %user_malloc, i8* (i8*, i32)** @_ZN6Halide7Runtime8Internal13custom_mallocE, align 4, !tbaa !12
  ret i8* (i8*, i32)* %0
}

; Function Attrs: nounwind
define weak void (i8*, i8*)* @halide_set_custom_free(void (i8*, i8*)* %user_free) local_unnamed_addr #0 {
entry:
  tail call void @halide_print(i8* null, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.8, i32 0, i32 0)) #11
  %0 = load void (i8*, i8*)*, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal11custom_freeE, align 4, !tbaa !12
  store void (i8*, i8*)* %user_free, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal11custom_freeE, align 4, !tbaa !12
  ret void (i8*, i8*)* %0
}

; Function Attrs: nounwind
define weak i8* @halide_malloc(i8* %user_context, i32 %x) local_unnamed_addr #0 {
entry:
  %0 = load i32, i32* @malloc_tracing, align 4, !tbaa !10
  %cmp = icmp sgt i32 %0, 1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @halide_print(i8* null, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.9, i32 0, i32 0)) #11
  %call = tail call i8* @_ZN6Halide7Runtime8Internal9to_stringEj(i32 %x) #12
  tail call void @halide_print(i8* null, i8* %call) #11
  tail call void @halide_print(i8* null, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0)) #11
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %call1 = tail call i8* @halide_default_malloc(i8* %user_context, i32 %x) #12
  ret i8* %call1
}

; Function Attrs: nounwind
define weak void @halide_free(i8* %user_context, i8* %ptr) local_unnamed_addr #0 {
entry:
  tail call void @halide_default_free(i8* %user_context, i8* %ptr) #12
  ret void
}

; Function Attrs: nounwind
define weak i32 @halide_default_do_task(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %idx, i8* %closure) #0 {
entry:
  %call = tail call i32 %f(i8* %user_context, i32 %idx, i8* %closure) #11
  ret i32 %call
}

; Function Attrs: nounwind
define weak i32 @halide_default_do_par_for(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %min, i32 %size, i8* %closure) #0 {
entry:
  %add = add nsw i32 %size, %min
  %cmp14 = icmp sgt i32 %size, 0
  br i1 %cmp14, label %for.body, label %return

for.cond:                                         ; preds = %for.body
  %cmp = icmp slt i32 %inc, %add
  br i1 %cmp, label %for.body, label %return

for.body:                                         ; preds = %entry, %for.cond
  %x.015 = phi i32 [ %inc, %for.cond ], [ %min, %entry ]
  %call = tail call i32 @halide_do_task(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %x.015, i8* %closure) #12
  %tobool = icmp eq i32 %call, 0
  %inc = add nsw i32 %x.015, 1
  br i1 %tobool, label %for.cond, label %return

return:                                           ; preds = %for.body, %for.cond, %entry
  %retval.3 = phi i32 [ 0, %entry ], [ 0, %for.cond ], [ %call, %for.body ]
  ret i32 %retval.3
}

; Function Attrs: nounwind
define weak i32 @halide_do_task(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %idx, i8* %closure) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)*, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)** @_ZN6Halide7Runtime8Internal14custom_do_taskE, align 4, !tbaa !12
  %call = tail call i32 %0(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %idx, i8* %closure) #11
  ret i32 %call
}

; Function Attrs: nounwind
define weak %struct.halide_thread* @halide_spawn_thread(void (i8*)* %f, i8* %closure) local_unnamed_addr #0 {
entry:
  tail call void @halide_error(i8* null, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.10, i32 0, i32 0)) #11
  ret %struct.halide_thread* null
}

declare extern_weak void @halide_error(i8*, i8*) local_unnamed_addr #2

; Function Attrs: norecurse nounwind
define weak void @halide_mutex_lock(%struct.halide_mutex* %mutex) local_unnamed_addr #3 {
entry:
  ret void
}

; Function Attrs: norecurse nounwind
define weak void @halide_mutex_unlock(%struct.halide_mutex* %mutex) local_unnamed_addr #3 {
entry:
  ret void
}

; Function Attrs: norecurse nounwind
define weak void @halide_shutdown_thread_pool() local_unnamed_addr #3 {
entry:
  ret void
}

; Function Attrs: nounwind
define weak i32 @halide_set_num_threads(i32 %n) local_unnamed_addr #0 {
entry:
  %cmp = icmp slt i32 %n, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @halide_error(i8* null, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.1.11, i32 0, i32 0)) #11
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret i32 1
}

; Function Attrs: norecurse nounwind
define weak i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* @halide_set_custom_do_task(i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* %f) local_unnamed_addr #3 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)*, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)** @_ZN6Halide7Runtime8Internal14custom_do_taskE, align 4, !tbaa !12
  store i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* %f, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)** @_ZN6Halide7Runtime8Internal14custom_do_taskE, align 4, !tbaa !12
  ret i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* %0
}

; Function Attrs: norecurse nounwind
define weak i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* @halide_set_custom_do_par_for(i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* %f) local_unnamed_addr #3 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)*, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)** @_ZN6Halide7Runtime8Internal17custom_do_par_forE, align 4, !tbaa !12
  store i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* %f, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)** @_ZN6Halide7Runtime8Internal17custom_do_par_forE, align 4, !tbaa !12
  ret i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* %0
}

; Function Attrs: nounwind
define weak i32 @halide_do_par_for(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %min, i32 %size, i8* %closure) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)*, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)** @_ZN6Halide7Runtime8Internal17custom_do_par_forE, align 4, !tbaa !12
  %call = tail call i32 %0(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %min, i32 %size, i8* %closure) #11
  ret i32 %call
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* nocapture writeonly, i8* nocapture readonly, i32, i1) #4

; Function Attrs: norecurse nounwind
define weak void @halide_set_gpu_device(i32 %d) local_unnamed_addr #3 {
entry:
  store i32 %d, i32* @_ZN6Halide7Runtime8Internal17halide_gpu_deviceE, align 4, !tbaa !10
  store i8 1, i8* @_ZN6Halide7Runtime8Internal29halide_gpu_device_initializedE, align 1, !tbaa !17
  ret void
}

; Function Attrs: nounwind
define weak i32 @halide_get_gpu_device(i8* %user_context) local_unnamed_addr #0 {
entry:
  br label %while.cond.i

while.cond.i:                                     ; preds = %while.cond.i, %entry
  %0 = atomicrmw xchg i32* @_ZN6Halide7Runtime8Internal22halide_gpu_device_lockE, i32 1 seq_cst
  %tobool.i = icmp eq i32 %0, 0
  br i1 %tobool.i, label %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVi.exit, label %while.cond.i

_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVi.exit: ; preds = %while.cond.i
  %1 = load i8, i8* @_ZN6Halide7Runtime8Internal29halide_gpu_device_initializedE, align 1, !tbaa !17, !range !19
  %tobool = icmp eq i8 %1, 0
  br i1 %tobool, label %if.then, label %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVi.exit.if.end4_crit_edge

_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVi.exit.if.end4_crit_edge: ; preds = %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVi.exit
  %.pre = load i32, i32* @_ZN6Halide7Runtime8Internal17halide_gpu_deviceE, align 4, !tbaa !10
  br label %if.end4

if.then:                                          ; preds = %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVi.exit
  %call = tail call i8* @getenv(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.12, i32 0, i32 0)) #11
  %tobool1 = icmp eq i8* %call, null
  br i1 %tobool1, label %if.end, label %if.then2

if.then2:                                         ; preds = %if.then
  %call3 = tail call i32 @atoi(i8* nonnull %call) #11
  br label %if.end

if.end:                                           ; preds = %if.then2, %if.then
  %storemerge = phi i32 [ %call3, %if.then2 ], [ -1, %if.then ]
  store i32 %storemerge, i32* @_ZN6Halide7Runtime8Internal17halide_gpu_deviceE, align 4, !tbaa !10
  store i8 1, i8* @_ZN6Halide7Runtime8Internal29halide_gpu_device_initializedE, align 1, !tbaa !17
  br label %if.end4

if.end4:                                          ; preds = %if.end, %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVi.exit.if.end4_crit_edge
  %2 = phi i32 [ %.pre, %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVi.exit.if.end4_crit_edge ], [ %storemerge, %if.end ]
  store atomic i32 0, i32* @_ZN6Halide7Runtime8Internal22halide_gpu_device_lockE release, align 4
  ret i32 %2
}

; Function Attrs: nounwind readonly
declare i8* @getenv(i8* nocapture) local_unnamed_addr #5

; Function Attrs: nounwind readonly
declare i32 @atoi(i8* nocapture) local_unnamed_addr #5

; Function Attrs: norecurse nounwind
define weak i8* @halide_string_to_string(i8* %dst, i8* %end, i8* %arg) local_unnamed_addr #3 {
entry:
  %cmp = icmp ult i8* %dst, %end
  br i1 %cmp, label %if.end3, label %return

if.then2:                                         ; preds = %if.end6
  store i8 0, i8* %dst.addr.019, align 1, !tbaa !7
  br label %return

if.end3:                                          ; preds = %entry, %if.end6
  %arg.addr.020 = phi i8* [ %incdec.ptr7, %if.end6 ], [ %arg, %entry ]
  %dst.addr.019 = phi i8* [ %incdec.ptr, %if.end6 ], [ %dst, %entry ]
  %0 = load i8, i8* %arg.addr.020, align 1, !tbaa !7
  store i8 %0, i8* %dst.addr.019, align 1, !tbaa !7
  %cmp4 = icmp eq i8 %0, 0
  br i1 %cmp4, label %return, label %if.end6

if.end6:                                          ; preds = %if.end3
  %incdec.ptr = getelementptr inbounds i8, i8* %dst.addr.019, i32 1
  %incdec.ptr7 = getelementptr inbounds i8, i8* %arg.addr.020, i32 1
  %cmp1 = icmp eq i8* %incdec.ptr, %end
  br i1 %cmp1, label %if.then2, label %if.end3

return:                                           ; preds = %if.end3, %if.then2, %entry
  %retval.0 = phi i8* [ %end, %if.then2 ], [ %dst, %entry ], [ %dst.addr.019, %if.end3 ]
  ret i8* %retval.0
}

; Function Attrs: nounwind
define weak i8* @halide_uint64_to_string(i8* %dst, i8* %end, i64 %arg, i32 %min_digits) local_unnamed_addr #0 {
entry:
  %buf = alloca [32 x i8], align 1
  %0 = getelementptr inbounds [32 x i8], [32 x i8]* %buf, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %0) #9
  %arrayidx = getelementptr inbounds [32 x i8], [32 x i8]* %buf, i32 0, i32 31
  store i8 0, i8* %arrayidx, align 1, !tbaa !7
  %add.ptr = getelementptr inbounds [32 x i8], [32 x i8]* %buf, i32 0, i32 30
  %cmp13 = icmp sgt i32 %min_digits, 0
  %tobool14 = icmp ne i64 %arg, 0
  %1 = or i1 %tobool14, %cmp13
  br i1 %1, label %for.body, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.body, %entry
  %digits.0.lcssa = phi i8* [ %add.ptr, %entry ], [ %incdec.ptr, %for.body ]
  %incdec.ptr1 = getelementptr inbounds i8, i8* %digits.0.lcssa, i32 1
  %call = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* nonnull %incdec.ptr1) #12
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %0) #9
  ret i8* %call

for.body:                                         ; preds = %entry, %for.body
  %arg.addr.017 = phi i64 [ %div, %for.body ], [ %arg, %entry ]
  %digits.016 = phi i8* [ %incdec.ptr, %for.body ], [ %add.ptr, %entry ]
  %i.015 = phi i32 [ %inc, %for.body ], [ 0, %entry ]
  %div = udiv i64 %arg.addr.017, 10
  %2 = mul i64 %div, -10
  %sub = add i64 %2, %arg.addr.017
  %3 = trunc i64 %sub to i8
  %conv = add i8 %3, 48
  store i8 %conv, i8* %digits.016, align 1, !tbaa !7
  %incdec.ptr = getelementptr inbounds i8, i8* %digits.016, i32 -1
  %inc = add nuw nsw i32 %i.015, 1
  %cmp = icmp slt i32 %inc, %min_digits
  %4 = icmp ugt i64 %arg.addr.017, 9
  %5 = or i1 %4, %cmp
  br i1 %5, label %for.body, label %for.cond.cleanup
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64, i8* nocapture) #4

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64, i8* nocapture) #4

; Function Attrs: nounwind
define weak i8* @halide_int64_to_string(i8* %dst, i8* %end, i64 %arg, i32 %min_digits) local_unnamed_addr #0 {
entry:
  %cmp = icmp slt i64 %arg, 0
  %cmp1 = icmp ult i8* %dst, %end
  %or.cond = and i1 %cmp1, %cmp
  br i1 %or.cond, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %incdec.ptr = getelementptr inbounds i8, i8* %dst, i32 1
  store i8 45, i8* %dst, align 1, !tbaa !7
  %sub = sub nsw i64 0, %arg
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %arg.addr.0 = phi i64 [ %sub, %if.then ], [ %arg, %entry ]
  %dst.addr.0 = phi i8* [ %incdec.ptr, %if.then ], [ %dst, %entry ]
  %call = tail call i8* @halide_uint64_to_string(i8* %dst.addr.0, i8* %end, i64 %arg.addr.0, i32 %min_digits) #12
  ret i8* %call
}

; Function Attrs: nounwind
define weak i8* @halide_double_to_string(i8* %dst, i8* %end, double %arg, i32 %scientific) local_unnamed_addr #0 {
entry:
  %arg.addr = alloca double, align 8
  %bits = alloca i64, align 8
  %buf = alloca [512 x i8], align 1
  store double %arg, double* %arg.addr, align 8, !tbaa !20
  %0 = bitcast i64* %bits to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %0) #9
  store i64 0, i64* %bits, align 8, !tbaa !22
  %1 = bitcast double* %arg.addr to i8*
  %call = call i8* @memcpy(i8* nonnull %0, i8* nonnull %1, i32 8) #11
  %2 = load i64, i64* %bits, align 8, !tbaa !22
  %and = and i64 %2, 4503599627370495
  %shr = lshr i64 %2, 52
  %3 = trunc i64 %shr to i32
  %conv = and i32 %3, 2047
  %shr2 = lshr i64 %2, 63
  %conv3 = trunc i64 %shr2 to i32
  %cmp = icmp eq i32 %conv, 2047
  br i1 %cmp, label %if.then, label %if.else15

if.then:                                          ; preds = %entry
  %tobool = icmp eq i64 %and, 0
  %tobool5 = icmp ne i32 %conv3, 0
  br i1 %tobool, label %if.else9, label %if.then4

if.then4:                                         ; preds = %if.then
  br i1 %tobool5, label %if.then6, label %if.else

if.then6:                                         ; preds = %if.then4
  %call7 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.13, i32 0, i32 0)) #12
  br label %cleanup148

if.else:                                          ; preds = %if.then4
  %call8 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1.14, i32 0, i32 0)) #12
  br label %cleanup148

if.else9:                                         ; preds = %if.then
  br i1 %tobool5, label %if.then11, label %if.else13

if.then11:                                        ; preds = %if.else9
  %call12 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2.15, i32 0, i32 0)) #12
  br label %cleanup148

if.else13:                                        ; preds = %if.else9
  %call14 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3.16, i32 0, i32 0)) #12
  br label %cleanup148

if.else15:                                        ; preds = %entry
  %cmp16 = icmp eq i32 %conv, 0
  %cmp17 = icmp eq i64 %and, 0
  %or.cond = and i1 %cmp17, %cmp16
  br i1 %or.cond, label %if.then18, label %if.end32

if.then18:                                        ; preds = %if.else15
  %tobool19 = icmp eq i32 %scientific, 0
  %tobool21 = icmp ne i32 %conv3, 0
  br i1 %tobool19, label %if.else26, label %if.then20

if.then20:                                        ; preds = %if.then18
  br i1 %tobool21, label %if.then22, label %if.else24

if.then22:                                        ; preds = %if.then20
  %call23 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.4.17, i32 0, i32 0)) #12
  br label %cleanup148

if.else24:                                        ; preds = %if.then20
  %call25 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.5.18, i32 0, i32 0)) #12
  br label %cleanup148

if.else26:                                        ; preds = %if.then18
  br i1 %tobool21, label %if.then28, label %if.else30

if.then28:                                        ; preds = %if.else26
  %call29 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.6.19, i32 0, i32 0)) #12
  br label %cleanup148

if.else30:                                        ; preds = %if.else26
  %call31 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.7.20, i32 0, i32 0)) #12
  br label %cleanup148

if.end32:                                         ; preds = %if.else15
  %tobool33 = icmp eq i32 %conv3, 0
  br i1 %tobool33, label %if.end37, label %if.then34

if.then34:                                        ; preds = %if.end32
  %call35 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8.21, i32 0, i32 0)) #12
  %sub36 = fsub double -0.000000e+00, %arg
  store double %sub36, double* %arg.addr, align 8, !tbaa !20
  br label %if.end37

if.end37:                                         ; preds = %if.then34, %if.end32
  %.pr = phi double [ %sub36, %if.then34 ], [ %arg, %if.end32 ]
  %dst.addr.0 = phi i8* [ %call35, %if.then34 ], [ %dst, %if.end32 ]
  %tobool38 = icmp eq i32 %scientific, 0
  br i1 %tobool38, label %if.else62, label %if.then39

if.then39:                                        ; preds = %if.end37
  %cmp40262 = fcmp olt double %.pr, 1.000000e+00
  br i1 %cmp40262, label %while.body, label %while.cond41.preheader

while.cond.while.cond41.preheader_crit_edge:      ; preds = %while.body
  store double %mul, double* %arg.addr, align 8, !tbaa !20
  br label %while.cond41.preheader

while.cond41.preheader:                           ; preds = %while.cond.while.cond41.preheader_crit_edge, %if.then39
  %exponent_base_10.0.lcssa = phi i32 [ %dec, %while.cond.while.cond41.preheader_crit_edge ], [ 0, %if.then39 ]
  %4 = phi double [ %mul, %while.cond.while.cond41.preheader_crit_edge ], [ %.pr, %if.then39 ]
  %cmp42258 = fcmp ult double %4, 1.000000e+01
  br i1 %cmp42258, label %while.end44, label %while.body43

while.body:                                       ; preds = %if.then39, %while.body
  %5 = phi double [ %mul, %while.body ], [ %.pr, %if.then39 ]
  %exponent_base_10.0263 = phi i32 [ %dec, %while.body ], [ 0, %if.then39 ]
  %mul = fmul double %5, 1.000000e+01
  %dec = add nsw i32 %exponent_base_10.0263, -1
  %cmp40 = fcmp olt double %mul, 1.000000e+00
  br i1 %cmp40, label %while.body, label %while.cond.while.cond41.preheader_crit_edge

while.body43:                                     ; preds = %while.cond41.preheader, %while.body43
  %6 = phi double [ %div, %while.body43 ], [ %4, %while.cond41.preheader ]
  %exponent_base_10.1259 = phi i32 [ %inc, %while.body43 ], [ %exponent_base_10.0.lcssa, %while.cond41.preheader ]
  %div = fdiv double %6, 1.000000e+01
  %inc = add nsw i32 %exponent_base_10.1259, 1
  %cmp42 = fcmp ult double %div, 1.000000e+01
  br i1 %cmp42, label %while.cond41.while.end44_crit_edge, label %while.body43

while.cond41.while.end44_crit_edge:               ; preds = %while.body43
  store double %div, double* %arg.addr, align 8, !tbaa !20
  br label %while.end44

while.end44:                                      ; preds = %while.cond41.while.end44_crit_edge, %while.cond41.preheader
  %exponent_base_10.1.lcssa = phi i32 [ %inc, %while.cond41.while.end44_crit_edge ], [ %exponent_base_10.0.lcssa, %while.cond41.preheader ]
  %.lcssa = phi double [ %div, %while.cond41.while.end44_crit_edge ], [ %4, %while.cond41.preheader ]
  %mul45 = fmul double %.lcssa, 1.000000e+06
  %add = fadd double %mul45, 5.000000e-01
  %conv46 = fptoui double %add to i64
  %div47 = udiv i64 %conv46, 1000000
  %7 = mul i64 %div47, -1000000
  %sub49 = add i64 %7, %conv46
  %call50 = call i8* @halide_int64_to_string(i8* %dst.addr.0, i8* %end, i64 %div47, i32 1) #12
  %call51 = call i8* @halide_string_to_string(i8* %call50, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.67, i32 0, i32 0)) #12
  %call52 = call i8* @halide_int64_to_string(i8* %call51, i8* %end, i64 %sub49, i32 6) #12
  %cmp53 = icmp sgt i32 %exponent_base_10.1.lcssa, -1
  br i1 %cmp53, label %if.then54, label %if.else56

if.then54:                                        ; preds = %while.end44
  %call55 = call i8* @halide_string_to_string(i8* %call52, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.10.23, i32 0, i32 0)) #12
  br label %if.end59

if.else56:                                        ; preds = %while.end44
  %call57 = call i8* @halide_string_to_string(i8* %call52, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.11, i32 0, i32 0)) #12
  %sub58 = sub nsw i32 0, %exponent_base_10.1.lcssa
  br label %if.end59

if.end59:                                         ; preds = %if.else56, %if.then54
  %exponent_base_10.2 = phi i32 [ %exponent_base_10.1.lcssa, %if.then54 ], [ %sub58, %if.else56 ]
  %dst.addr.1 = phi i8* [ %call55, %if.then54 ], [ %call57, %if.else56 ]
  %conv60 = sext i32 %exponent_base_10.2 to i64
  %call61 = call i8* @halide_int64_to_string(i8* %dst.addr.1, i8* %end, i64 %conv60, i32 2) #12
  br label %cleanup148

if.else62:                                        ; preds = %if.end37
  br i1 %cmp16, label %if.then64, label %if.end66

if.then64:                                        ; preds = %if.else62
  %call65 = call i8* @halide_double_to_string(i8* %dst.addr.0, i8* %end, double 0.000000e+00, i32 0) #12
  br label %cleanup148

if.end66:                                         ; preds = %if.else62
  %add68 = or i64 %and, 4503599627370496
  %sub70 = add nsw i32 %conv, -1075
  %cmp71 = icmp ult i32 %conv, 1075
  br i1 %cmp71, label %if.then72, label %if.end105

if.then72:                                        ; preds = %if.end66
  %cmp73 = icmp ult i32 %conv, 1023
  br i1 %cmp73, label %if.end84, label %if.else76

if.else76:                                        ; preds = %if.then72
  %sub77 = sub nsw i32 1075, %conv
  %sh_prom = zext i32 %sub77 to i64
  %shr78 = lshr i64 %add68, %sh_prom
  %shl81 = shl i64 %shr78, %sh_prom
  %sub82 = sub i64 %add68, %shl81
  br label %if.end84

if.end84:                                         ; preds = %if.else76, %if.then72
  %integer_part.0 = phi i64 [ %shr78, %if.else76 ], [ 0, %if.then72 ]
  %f.0.in = phi i64 [ %sub82, %if.else76 ], [ %add68, %if.then72 ]
  %f.0 = uitofp i64 %f.0.in to double
  %conv85242 = zext i32 %sub70 to i64
  %shl86 = shl i64 %conv85242, 52
  %add88 = add i64 %shl86, 4696837146684686336
  %8 = bitcast i64 %add88 to double
  %mul90 = fmul double %8, %f.0
  %add91 = fadd double %mul90, 5.000000e-01
  %conv92 = fptoui double %add91 to i64
  %conv93 = uitofp i64 %conv92 to double
  %cmp94 = fcmp oeq double %add91, %conv93
  %and96 = and i64 %conv92, 1
  %tobool97 = icmp ne i64 %and96, 0
  %not.or.cond243 = and i1 %tobool97, %cmp94
  %dec99 = sext i1 %not.or.cond243 to i64
  %fractional_part.0 = add i64 %dec99, %conv92
  %cmp101 = icmp eq i64 %fractional_part.0, 1000000
  %inc103 = zext i1 %cmp101 to i64
  %spec.select = add i64 %integer_part.0, %inc103
  %spec.select244 = select i1 %cmp101, i64 0, i64 %fractional_part.0
  br label %if.end105

if.end105:                                        ; preds = %if.end84, %if.end66
  %integer_part.2 = phi i64 [ %add68, %if.end66 ], [ %spec.select, %if.end84 ]
  %integer_exponent.0 = phi i32 [ %sub70, %if.end66 ], [ 0, %if.end84 ]
  %fractional_part.2 = phi i64 [ 0, %if.end66 ], [ %spec.select244, %if.end84 ]
  %9 = getelementptr inbounds [512 x i8], [512 x i8]* %buf, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %9) #9
  %add.ptr = getelementptr inbounds [512 x i8], [512 x i8]* %buf, i32 0, i32 512
  %add.ptr106 = getelementptr inbounds [512 x i8], [512 x i8]* %buf, i32 0, i32 480
  %call109 = call i8* @halide_int64_to_string(i8* nonnull %add.ptr106, i8* nonnull %add.ptr, i64 %integer_part.2, i32 1) #12
  %cmp110253 = icmp sgt i32 %integer_exponent.0, 0
  br i1 %cmp110253, label %for.cond112.preheader, label %for.cond.cleanup

for.cond112.preheader:                            ; preds = %if.end105, %if.end138
  %i.0256 = phi i32 [ %inc140, %if.end138 ], [ 0, %if.end105 ]
  %int_part_ptr.0254 = phi i8* [ %int_part_ptr.1, %if.end138 ], [ %add.ptr106, %if.end105 ]
  %add.ptr113 = getelementptr inbounds i8, i8* %int_part_ptr.0254, i32 -1
  %cmp114249 = icmp eq i8* %call109, %int_part_ptr.0254
  br i1 %cmp114249, label %if.end138, label %for.body116

for.cond.cleanup:                                 ; preds = %if.end138, %if.end105
  %int_part_ptr.0.lcssa = phi i8* [ %add.ptr106, %if.end105 ], [ %int_part_ptr.1, %if.end138 ]
  %call142 = call i8* @halide_string_to_string(i8* %dst.addr.0, i8* %end, i8* %int_part_ptr.0.lcssa) #12
  %call143 = call i8* @halide_string_to_string(i8* %call142, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.67, i32 0, i32 0)) #12
  %call144 = call i8* @halide_int64_to_string(i8* %call143, i8* %end, i64 %fractional_part.2, i32 6) #12
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %9) #9
  br label %cleanup148

for.cond.cleanup115:                              ; preds = %for.body116
  br i1 %cmp125, label %if.then136, label %if.end138

for.body116:                                      ; preds = %for.cond112.preheader, %for.body116
  %p.0251.pn = phi i8* [ %p.0251, %for.body116 ], [ %call109, %for.cond112.preheader ]
  %carry.0250 = phi i8 [ %spec.select245, %for.body116 ], [ 0, %for.cond112.preheader ]
  %p.0251 = getelementptr inbounds i8, i8* %p.0251.pn, i32 -1
  %10 = load i8, i8* %p.0251, align 1, !tbaa !7
  %sub118 = shl i8 %10, 1
  %mul121 = add i8 %sub118, -96
  %add122 = or i8 %mul121, %carry.0250
  %cmp125 = icmp sgt i8 %add122, 9
  %sub128 = add i8 %add122, -10
  %spec.select245 = zext i1 %cmp125 to i8
  %spec.select246 = select i1 %cmp125, i8 %sub128, i8 %add122
  %add133 = add i8 %spec.select246, 48
  store i8 %add133, i8* %p.0251, align 1, !tbaa !7
  %cmp114 = icmp eq i8* %p.0251, %int_part_ptr.0254
  br i1 %cmp114, label %for.cond.cleanup115, label %for.body116

if.then136:                                       ; preds = %for.cond.cleanup115
  store i8 49, i8* %add.ptr113, align 1, !tbaa !7
  br label %if.end138

if.end138:                                        ; preds = %if.then136, %for.cond.cleanup115, %for.cond112.preheader
  %int_part_ptr.1 = phi i8* [ %add.ptr113, %if.then136 ], [ %int_part_ptr.0254, %for.cond.cleanup115 ], [ %call109, %for.cond112.preheader ]
  %inc140 = add nuw nsw i32 %i.0256, 1
  %exitcond = icmp eq i32 %inc140, %integer_exponent.0
  br i1 %exitcond, label %for.cond.cleanup, label %for.cond112.preheader

cleanup148:                                       ; preds = %for.cond.cleanup, %if.then64, %if.end59, %if.else30, %if.then28, %if.else24, %if.then22, %if.else13, %if.then11, %if.else, %if.then6
  %retval.1 = phi i8* [ %call7, %if.then6 ], [ %call8, %if.else ], [ %call12, %if.then11 ], [ %call14, %if.else13 ], [ %call23, %if.then22 ], [ %call25, %if.else24 ], [ %call29, %if.then28 ], [ %call31, %if.else30 ], [ %call65, %if.then64 ], [ %call61, %if.end59 ], [ %call144, %for.cond.cleanup ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %0) #9
  ret i8* %retval.1
}

; Function Attrs: nounwind
declare i8* @memcpy(i8*, i8* nocapture readonly, i32) local_unnamed_addr #1

; Function Attrs: nounwind
define weak i8* @halide_pointer_to_string(i8* %dst, i8* %end, i8* %arg) local_unnamed_addr #0 {
entry:
  %buf = alloca [20 x i8], align 1
  %0 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 20, i8* nonnull %0) #9
  call void @llvm.memset.p0i8.i32(i8* nonnull align 1 %0, i8 0, i32 20, i1 false)
  %add.ptr = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i32 0, i32 18
  %1 = ptrtoint i8* %arg to i32
  %2 = zext i32 %1 to i64
  br label %for.body

for.body:                                         ; preds = %for.body, %entry
  %i.018 = phi i32 [ 0, %entry ], [ %inc, %for.body ]
  %bits.017 = phi i64 [ %2, %entry ], [ %shr, %for.body ]
  %buf_ptr.016 = phi i8* [ %add.ptr, %entry ], [ %incdec.ptr, %for.body ]
  %3 = trunc i64 %bits.017 to i32
  %idxprom = and i32 %3, 15
  %arrayidx = getelementptr inbounds [17 x i8], [17 x i8]* @.str.12.24, i32 0, i32 %idxprom
  %4 = load i8, i8* %arrayidx, align 1, !tbaa !7
  %incdec.ptr = getelementptr inbounds i8, i8* %buf_ptr.016, i32 -1
  store i8 %4, i8* %buf_ptr.016, align 1, !tbaa !7
  %shr = lshr i64 %bits.017, 4
  %tobool = icmp ne i64 %shr, 0
  %inc = add nuw nsw i32 %i.018, 1
  %cmp = icmp ult i32 %inc, 16
  %or.cond = and i1 %cmp, %tobool
  br i1 %or.cond, label %for.body, label %cleanup

cleanup:                                          ; preds = %for.body
  %incdec.ptr1 = getelementptr inbounds i8, i8* %buf_ptr.016, i32 -2
  store i8 120, i8* %incdec.ptr, align 1, !tbaa !7
  store i8 48, i8* %incdec.ptr1, align 1, !tbaa !7
  %call = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* nonnull %incdec.ptr1) #12
  call void @llvm.lifetime.end.p0i8(i64 20, i8* nonnull %0) #9
  ret i8* %call
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly, i8, i32, i1) #4

; Function Attrs: nounwind
define weak i8* @halide_type_to_string(i8* %dst, i8* %end, %struct.halide_type_t* %t) local_unnamed_addr #0 {
entry:
  %code = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %t, i32 0, i32 0
  %0 = load i8, i8* %code, align 2, !tbaa !24
  %1 = icmp ult i8 %0, 4
  br i1 %1, label %switch.lookup, label %sw.epilog

switch.lookup:                                    ; preds = %entry
  %2 = sext i8 %0 to i32
  %switch.gep = getelementptr inbounds [4 x i8*], [4 x i8*]* @switch.table.halide_type_to_string, i32 0, i32 %2
  %switch.load = load i8*, i8** %switch.gep, align 4
  br label %sw.epilog

sw.epilog:                                        ; preds = %entry, %switch.lookup
  %code_name.0 = phi i8* [ %switch.load, %switch.lookup ], [ getelementptr inbounds ([14 x i8], [14 x i8]* @.str.17, i32 0, i32 0), %entry ]
  %call = tail call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* nonnull %code_name.0) #12
  %bits = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %t, i32 0, i32 1
  %3 = load i8, i8* %bits, align 1, !tbaa !27
  %conv4 = zext i8 %3 to i64
  %call5 = tail call i8* @halide_uint64_to_string(i8* %call, i8* %end, i64 %conv4, i32 1) #12
  %lanes = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %t, i32 0, i32 2
  %4 = load i16, i16* %lanes, align 2, !tbaa !28
  %cmp = icmp eq i16 %4, 1
  br i1 %cmp, label %if.end, label %if.then

if.then:                                          ; preds = %sw.epilog
  %call7 = tail call i8* @halide_string_to_string(i8* %call5, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.18, i32 0, i32 0)) #12
  %5 = load i16, i16* %lanes, align 2, !tbaa !28
  %conv9 = zext i16 %5 to i64
  %call10 = tail call i8* @halide_uint64_to_string(i8* %call7, i8* %end, i64 %conv9, i32 1) #12
  br label %if.end

if.end:                                           ; preds = %if.then, %sw.epilog
  %dst.addr.0 = phi i8* [ %call10, %if.then ], [ %call5, %sw.epilog ]
  ret i8* %dst.addr.0
}

; Function Attrs: nounwind
define weak i8* @halide_buffer_to_string(i8* %dst, i8* %end, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call = tail call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19, i32 0, i32 0)) #12
  br label %return

if.end:                                           ; preds = %entry
  %call1 = tail call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.20, i32 0, i32 0)) #12
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !29
  %call2 = tail call i8* @halide_uint64_to_string(i8* %call1, i8* %end, i64 %0, i32 1) #12
  %call3 = tail call i8* @halide_string_to_string(i8* %call2, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.58.76, i32 0, i32 0)) #12
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %1 = bitcast %struct.halide_device_interface_t** %device_interface to i8**
  %2 = load i8*, i8** %1, align 8, !tbaa !31
  %call4 = tail call i8* @halide_pointer_to_string(i8* %call3, i8* %end, i8* %2) #12
  %call5 = tail call i8* @halide_string_to_string(i8* %call4, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.58.76, i32 0, i32 0)) #12
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 2
  %3 = load i8*, i8** %host, align 4, !tbaa !32
  %call6 = tail call i8* @halide_pointer_to_string(i8* %call5, i8* %end, i8* %3) #12
  %call7 = tail call i8* @halide_string_to_string(i8* %call6, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.58.76, i32 0, i32 0)) #12
  %flags = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %4 = load i64, i64* %flags, align 8, !tbaa !33
  %call8 = tail call i8* @halide_uint64_to_string(i8* %call7, i8* %end, i64 %4, i32 1) #12
  %call9 = tail call i8* @halide_string_to_string(i8* %call8, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.58.76, i32 0, i32 0)) #12
  %type = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 7
  %call10 = tail call i8* @halide_type_to_string(i8* %call9, i8* %end, %struct.halide_type_t* nonnull %type) #12
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 8
  %5 = load i32, i32* %dimensions, align 4, !tbaa !34
  %cmp1175 = icmp sgt i32 %5, 0
  br i1 %cmp1175, label %for.body.lr.ph, label %for.cond.cleanup

for.body.lr.ph:                                   ; preds = %if.end
  %dim = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 9
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body, %if.end
  %dst.addr.0.lcssa = phi i8* [ %call10, %if.end ], [ %call24, %for.body ]
  %call25 = tail call i8* @halide_string_to_string(i8* %dst.addr.0.lcssa, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5.94, i32 0, i32 0)) #12
  br label %return

for.body:                                         ; preds = %for.body, %for.body.lr.ph
  %i.077 = phi i32 [ 0, %for.body.lr.ph ], [ %inc, %for.body ]
  %dst.addr.076 = phi i8* [ %call10, %for.body.lr.ph ], [ %call24, %for.body ]
  %call12 = tail call i8* @halide_string_to_string(i8* %dst.addr.076, i8* %end, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.22, i32 0, i32 0)) #12
  %6 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !35
  %min = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %6, i32 %i.077, i32 0
  %7 = load i32, i32* %min, align 4, !tbaa !36
  %conv = sext i32 %7 to i64
  %call13 = tail call i8* @halide_int64_to_string(i8* %call12, i8* %end, i64 %conv, i32 1) #12
  %call14 = tail call i8* @halide_string_to_string(i8* %call13, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.58.76, i32 0, i32 0)) #12
  %8 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !35
  %extent = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %8, i32 %i.077, i32 1
  %9 = load i32, i32* %extent, align 4, !tbaa !38
  %conv17 = sext i32 %9 to i64
  %call18 = tail call i8* @halide_int64_to_string(i8* %call14, i8* %end, i64 %conv17, i32 1) #12
  %call19 = tail call i8* @halide_string_to_string(i8* %call18, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.58.76, i32 0, i32 0)) #12
  %10 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !35
  %stride = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %10, i32 %i.077, i32 2
  %11 = load i32, i32* %stride, align 4, !tbaa !39
  %conv22 = sext i32 %11 to i64
  %call23 = tail call i8* @halide_int64_to_string(i8* %call19, i8* %end, i64 %conv22, i32 1) #12
  %call24 = tail call i8* @halide_string_to_string(i8* %call23, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.23, i32 0, i32 0)) #12
  %inc = add nuw nsw i32 %i.077, 1
  %12 = load i32, i32* %dimensions, align 4, !tbaa !34
  %cmp11 = icmp slt i32 %inc, %12
  br i1 %cmp11, label %for.body, label %for.cond.cleanup

return:                                           ; preds = %for.cond.cleanup, %if.then
  %retval.0 = phi i8* [ %call, %if.then ], [ %call25, %for.cond.cleanup ]
  ret i8* %retval.0
}

; Function Attrs: nounwind
define linkonce void @_ZN6Halide7Runtime8Internal18copy_memory_helperERKNS1_11device_copyEixx(%"struct.Halide::Runtime::Internal::device_copy"* dereferenceable(416) %copy, i32 %d, i64 %src_off, i64 %dst_off) local_unnamed_addr #0 {
entry:
  %cmp41 = icmp sgt i32 %d, -1
  br i1 %cmp41, label %land.end, label %while.end

land.end:                                         ; preds = %entry, %while.body
  %d.addr.042 = phi i32 [ %dec, %while.body ], [ %d, %entry ]
  %arrayidx = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i32 0, i32 3, i32 %d.addr.042
  %0 = load i64, i64* %arrayidx, align 8, !tbaa !22
  %cmp1 = icmp eq i64 %0, 1
  br i1 %cmp1, label %while.body, label %if.else

while.body:                                       ; preds = %land.end
  %dec = add nsw i32 %d.addr.042, -1
  %cmp = icmp sgt i32 %d.addr.042, 0
  br i1 %cmp, label %land.end, label %while.end

while.end:                                        ; preds = %while.body, %entry
  %d.addr.0.lcssa = phi i32 [ %d, %entry ], [ %dec, %while.body ]
  %cmp2 = icmp eq i32 %d.addr.0.lcssa, -1
  br i1 %cmp2, label %if.then, label %while.end.if.else_crit_edge

while.end.if.else_crit_edge:                      ; preds = %while.end
  %arrayidx7.phi.trans.insert = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i32 0, i32 3, i32 %d.addr.0.lcssa
  %.pre = load i64, i64* %arrayidx7.phi.trans.insert, align 8, !tbaa !22
  br label %if.else

if.then:                                          ; preds = %while.end
  %src = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i32 0, i32 0
  %1 = load i64, i64* %src, align 8, !tbaa !40
  %add = add i64 %1, %src_off
  %conv = trunc i64 %add to i32
  %2 = inttoptr i32 %conv to i8*
  %dst = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i32 0, i32 1
  %3 = load i64, i64* %dst, align 8, !tbaa !42
  %add3 = add i64 %3, %dst_off
  %conv4 = trunc i64 %add3 to i32
  %4 = inttoptr i32 %conv4 to i8*
  %chunk_size = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i32 0, i32 6
  %5 = load i64, i64* %chunk_size, align 8, !tbaa !43
  %conv5 = trunc i64 %5 to i32
  %call = tail call i8* @memcpy(i8* %4, i8* %2, i32 %conv5) #11
  br label %if.end

if.else:                                          ; preds = %land.end, %while.end.if.else_crit_edge
  %6 = phi i64 [ %.pre, %while.end.if.else_crit_edge ], [ %0, %land.end ]
  %d.addr.036 = phi i32 [ %d.addr.0.lcssa, %while.end.if.else_crit_edge ], [ %d.addr.042, %land.end ]
  %arrayidx7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i32 0, i32 3, i32 %d.addr.036
  %cmp837 = icmp eq i64 %6, 0
  br i1 %cmp837, label %if.end, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %if.else
  %sub = add nsw i32 %d.addr.036, -1
  %arrayidx9 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i32 0, i32 4, i32 %d.addr.036
  %arrayidx11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i32 0, i32 5, i32 %d.addr.036
  br label %for.body

for.body:                                         ; preds = %for.body, %for.body.lr.ph
  %i.040 = phi i64 [ 0, %for.body.lr.ph ], [ %inc, %for.body ]
  %src_off.addr.039 = phi i64 [ %src_off, %for.body.lr.ph ], [ %add10, %for.body ]
  %dst_off.addr.038 = phi i64 [ %dst_off, %for.body.lr.ph ], [ %add12, %for.body ]
  tail call void @_ZN6Halide7Runtime8Internal18copy_memory_helperERKNS1_11device_copyEixx(%"struct.Halide::Runtime::Internal::device_copy"* nonnull dereferenceable(416) %copy, i32 %sub, i64 %src_off.addr.039, i64 %dst_off.addr.038) #12
  %7 = load i64, i64* %arrayidx9, align 8, !tbaa !22
  %add10 = add i64 %7, %src_off.addr.039
  %8 = load i64, i64* %arrayidx11, align 8, !tbaa !22
  %add12 = add i64 %8, %dst_off.addr.038
  %inc = add nuw i64 %i.040, 1
  %9 = load i64, i64* %arrayidx7, align 8, !tbaa !22
  %cmp8 = icmp ult i64 %inc, %9
  br i1 %cmp8, label %for.body, label %if.end

if.end:                                           ; preds = %for.body, %if.else, %if.then
  ret void
}

; Function Attrs: nounwind
define linkonce void @_ZN6Halide7Runtime8Internal11copy_memoryERKNS1_11device_copyEPv(%"struct.Halide::Runtime::Internal::device_copy"* dereferenceable(416) %copy, i8* %user_context) local_unnamed_addr #0 {
entry:
  %src = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i32 0, i32 0
  %0 = load i64, i64* %src, align 8, !tbaa !40
  %dst = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i32 0, i32 1
  %1 = load i64, i64* %dst, align 8, !tbaa !42
  %cmp = icmp eq i64 %0, %1
  br i1 %cmp, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %src_begin = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i32 0, i32 2
  %2 = load i64, i64* %src_begin, align 8, !tbaa !44
  tail call void @_ZN6Halide7Runtime8Internal18copy_memory_helperERKNS1_11device_copyEixx(%"struct.Halide::Runtime::Internal::device_copy"* nonnull dereferenceable(416) %copy, i32 15, i64 %2, i64 0) #12
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind
define linkonce void @_ZN6Halide7Runtime8Internal16make_buffer_copyEPK15halide_buffer_tbS4_b(%"struct.Halide::Runtime::Internal::device_copy"* noalias sret %agg.result, %struct.halide_buffer_t* %src, i1 zeroext %src_host, %struct.halide_buffer_t* %dst, i1 zeroext %dst_host) local_unnamed_addr #0 {
entry:
  %c = alloca %"struct.Halide::Runtime::Internal::device_copy", align 8
  %0 = bitcast %"struct.Halide::Runtime::Internal::device_copy"* %c to i8*
  call void @llvm.lifetime.start.p0i8(i64 416, i8* nonnull %0) #9
  br i1 %src_host, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 2
  %1 = bitcast i8** %host to i32*
  %2 = load i32, i32* %1, align 4, !tbaa !32
  %3 = zext i32 %2 to i64
  br label %cond.end

cond.false:                                       ; preds = %entry
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 0
  %4 = load i64, i64* %device, align 8, !tbaa !29
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %3, %cond.true ], [ %4, %cond.false ]
  %src2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 0
  store i64 %cond, i64* %src2, align 8, !tbaa !40
  br i1 %dst_host, label %cond.true4, label %cond.false6

cond.true4:                                       ; preds = %cond.end
  %host5 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 2
  %5 = bitcast i8** %host5 to i32*
  %6 = load i32, i32* %5, align 4, !tbaa !32
  %7 = zext i32 %6 to i64
  br label %cond.end8

cond.false6:                                      ; preds = %cond.end
  %device7 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 0
  %8 = load i64, i64* %device7, align 8, !tbaa !29
  br label %cond.end8

cond.end8:                                        ; preds = %cond.false6, %cond.true4
  %cond9 = phi i64 [ %7, %cond.true4 ], [ %8, %cond.false6 ]
  %dst10 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 1
  store i64 %cond9, i64* %dst10, align 8, !tbaa !42
  %bits.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 7, i32 1
  %9 = load i8, i8* %bits.i, align 1, !tbaa !27
  %conv.i = zext i8 %9 to i32
  %add.i = add nuw nsw i32 %conv.i, 7
  %div.i = lshr i32 %add.i, 3
  %10 = zext i32 %div.i to i64
  %chunk_size = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 6
  store i64 %10, i64* %chunk_size, align 8, !tbaa !43
  %arrayidx = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 0
  store i64 1, i64* %arrayidx, align 8, !tbaa !22
  %arrayidx11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 0
  store i64 0, i64* %arrayidx11, align 8, !tbaa !22
  %arrayidx12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 0
  store i64 0, i64* %arrayidx12, align 8, !tbaa !22
  %arrayidx.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 1
  store i64 1, i64* %arrayidx.1, align 8, !tbaa !22
  %arrayidx11.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 1
  store i64 0, i64* %arrayidx11.1, align 8, !tbaa !22
  %arrayidx12.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 1
  store i64 0, i64* %arrayidx12.1, align 8, !tbaa !22
  %arrayidx.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 2
  store i64 1, i64* %arrayidx.2, align 8, !tbaa !22
  %arrayidx11.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 2
  store i64 0, i64* %arrayidx11.2, align 8, !tbaa !22
  %arrayidx12.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 2
  store i64 0, i64* %arrayidx12.2, align 8, !tbaa !22
  %arrayidx.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 3
  store i64 1, i64* %arrayidx.3, align 8, !tbaa !22
  %arrayidx11.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 3
  store i64 0, i64* %arrayidx11.3, align 8, !tbaa !22
  %arrayidx12.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 3
  store i64 0, i64* %arrayidx12.3, align 8, !tbaa !22
  %arrayidx.4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 4
  store i64 1, i64* %arrayidx.4, align 8, !tbaa !22
  %arrayidx11.4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 4
  store i64 0, i64* %arrayidx11.4, align 8, !tbaa !22
  %arrayidx12.4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 4
  store i64 0, i64* %arrayidx12.4, align 8, !tbaa !22
  %arrayidx.5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 5
  store i64 1, i64* %arrayidx.5, align 8, !tbaa !22
  %arrayidx11.5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 5
  store i64 0, i64* %arrayidx11.5, align 8, !tbaa !22
  %arrayidx12.5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 5
  store i64 0, i64* %arrayidx12.5, align 8, !tbaa !22
  %arrayidx.6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 6
  store i64 1, i64* %arrayidx.6, align 8, !tbaa !22
  %arrayidx11.6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 6
  store i64 0, i64* %arrayidx11.6, align 8, !tbaa !22
  %arrayidx12.6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 6
  store i64 0, i64* %arrayidx12.6, align 8, !tbaa !22
  %arrayidx.7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 7
  store i64 1, i64* %arrayidx.7, align 8, !tbaa !22
  %arrayidx11.7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 7
  store i64 0, i64* %arrayidx11.7, align 8, !tbaa !22
  %arrayidx12.7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 7
  store i64 0, i64* %arrayidx12.7, align 8, !tbaa !22
  %arrayidx.8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 8
  store i64 1, i64* %arrayidx.8, align 8, !tbaa !22
  %arrayidx11.8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 8
  store i64 0, i64* %arrayidx11.8, align 8, !tbaa !22
  %arrayidx12.8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 8
  store i64 0, i64* %arrayidx12.8, align 8, !tbaa !22
  %arrayidx.9 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 9
  store i64 1, i64* %arrayidx.9, align 8, !tbaa !22
  %arrayidx11.9 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 9
  store i64 0, i64* %arrayidx11.9, align 8, !tbaa !22
  %arrayidx12.9 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 9
  store i64 0, i64* %arrayidx12.9, align 8, !tbaa !22
  %arrayidx.10 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 10
  store i64 1, i64* %arrayidx.10, align 8, !tbaa !22
  %arrayidx11.10 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 10
  store i64 0, i64* %arrayidx11.10, align 8, !tbaa !22
  %arrayidx12.10 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 10
  store i64 0, i64* %arrayidx12.10, align 8, !tbaa !22
  %arrayidx.11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 11
  store i64 1, i64* %arrayidx.11, align 8, !tbaa !22
  %arrayidx11.11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 11
  store i64 0, i64* %arrayidx11.11, align 8, !tbaa !22
  %arrayidx12.11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 11
  store i64 0, i64* %arrayidx12.11, align 8, !tbaa !22
  %arrayidx.12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 12
  store i64 1, i64* %arrayidx.12, align 8, !tbaa !22
  %arrayidx11.12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 12
  store i64 0, i64* %arrayidx11.12, align 8, !tbaa !22
  %arrayidx12.12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 12
  store i64 0, i64* %arrayidx12.12, align 8, !tbaa !22
  %arrayidx.13 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 13
  store i64 1, i64* %arrayidx.13, align 8, !tbaa !22
  %arrayidx11.13 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 13
  store i64 0, i64* %arrayidx11.13, align 8, !tbaa !22
  %arrayidx12.13 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 13
  store i64 0, i64* %arrayidx12.13, align 8, !tbaa !22
  %arrayidx.14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 14
  store i64 1, i64* %arrayidx.14, align 8, !tbaa !22
  %arrayidx11.14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 14
  store i64 0, i64* %arrayidx11.14, align 8, !tbaa !22
  %arrayidx12.14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 14
  store i64 0, i64* %arrayidx12.14, align 8, !tbaa !22
  %arrayidx.15 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 15
  store i64 1, i64* %arrayidx.15, align 8, !tbaa !22
  %arrayidx11.15 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 15
  store i64 0, i64* %arrayidx11.15, align 8, !tbaa !22
  %arrayidx12.15 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 15
  store i64 0, i64* %arrayidx12.15, align 8, !tbaa !22
  %src_begin = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 2
  store i64 0, i64* %src_begin, align 8, !tbaa !44
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 8
  %11 = load i32, i32* %dimensions, align 4, !tbaa !34
  %cmp15251 = icmp sgt i32 %11, 0
  br i1 %cmp15251, label %for.body17.lr.ph, label %for.cond.cleanup16

for.body17.lr.ph:                                 ; preds = %cond.end8
  %dim = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 9
  %12 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !35
  %dim19 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 9
  %13 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim19, align 8, !tbaa !35
  br label %for.body17

for.cond14.for.cond.cleanup16_crit_edge:          ; preds = %for.body17
  store i64 %add, i64* %src_begin, align 8, !tbaa !44
  br label %for.cond.cleanup16

for.cond.cleanup16:                               ; preds = %for.cond14.for.cond.cleanup16_crit_edge, %cond.end8
  %14 = phi i64 [ %add, %for.cond14.for.cond.cleanup16_crit_edge ], [ 0, %cond.end8 ]
  %mul31 = mul i64 %14, %10
  store i64 %mul31, i64* %src_begin, align 8, !tbaa !44
  %dimensions33 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 8
  %15 = load i32, i32* %dimensions33, align 4, !tbaa !34
  %cmp34 = icmp eq i32 %11, %15
  br i1 %cmp34, label %lor.lhs.false, label %if.then

for.body17:                                       ; preds = %for.body17, %for.body17.lr.ph
  %16 = phi i64 [ 0, %for.body17.lr.ph ], [ %add, %for.body17 ]
  %i13.0252 = phi i32 [ 0, %for.body17.lr.ph ], [ %inc27, %for.body17 ]
  %stride = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %12, i32 %i13.0252, i32 2
  %17 = load i32, i32* %stride, align 4, !tbaa !39
  %min = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %13, i32 %i13.0252, i32 0
  %18 = load i32, i32* %min, align 4, !tbaa !36
  %min23 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %12, i32 %i13.0252, i32 0
  %19 = load i32, i32* %min23, align 4, !tbaa !36
  %sub = sub nsw i32 %18, %19
  %mul = mul nsw i32 %sub, %17
  %conv24 = sext i32 %mul to i64
  %add = add i64 %16, %conv24
  %inc27 = add nuw nsw i32 %i13.0252, 1
  %exitcond1 = icmp eq i32 %inc27, %11
  br i1 %exitcond1, label %for.cond14.for.cond.cleanup16_crit_edge, label %for.body17

lor.lhs.false:                                    ; preds = %for.cond.cleanup16
  %bits.i233 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 7, i32 1
  %20 = load i8, i8* %bits.i233, align 1, !tbaa !27
  %conv.i234 = zext i8 %20 to i32
  %add.i235 = add nuw nsw i32 %conv.i234, 7
  %cmp39.unshifted = xor i32 %add.i235, %add.i
  %cmp39 = icmp ugt i32 %cmp39.unshifted, 7
  %cmp42 = icmp sgt i32 %11, 16
  %or.cond241 = or i1 %cmp42, %cmp39
  br i1 %or.cond241, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %for.cond.cleanup16
  %21 = bitcast %"struct.Halide::Runtime::Internal::device_copy"* %agg.result to i8*
  tail call void @llvm.memset.p0i8.i32(i8* align 8 %21, i8 0, i32 416, i1 false)
  br label %cleanup

if.end:                                           ; preds = %lor.lhs.false
  %cmp44 = icmp eq i32 %div.i, 0
  br i1 %cmp44, label %if.then45, label %for.cond48.preheader

for.cond48.preheader:                             ; preds = %if.end
  br i1 %cmp15251, label %for.body52.lr.ph, label %while.end

for.body52.lr.ph:                                 ; preds = %for.cond48.preheader
  %dim54 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 9
  %22 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim54, align 8, !tbaa !35
  %div.i232 = lshr i32 %add.i235, 3
  %dim62 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 9
  %23 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim62, align 8, !tbaa !35
  br label %for.body52

if.then45:                                        ; preds = %if.end
  %24 = bitcast %"struct.Halide::Runtime::Internal::device_copy"* %agg.result to i8*
  tail call void @llvm.memset.p0i8.i32(i8* align 8 %24, i8 0, i32 416, i1 false)
  br label %cleanup

while.cond.preheader:                             ; preds = %for.cond.cleanup83
  %.pre = load i64, i64* %chunk_size, align 8, !tbaa !43
  %.pre257 = load i64, i64* %arrayidx11, align 8, !tbaa !22
  %cmp125243 = icmp eq i64 %.pre, %.pre257
  br i1 %cmp125243, label %land.rhs.lr.ph, label %while.end

land.rhs.lr.ph:                                   ; preds = %while.cond.preheader
  %.pre258 = load i64, i64* %arrayidx12, align 8, !tbaa !22
  br label %land.rhs

for.body52:                                       ; preds = %for.cond.cleanup83, %for.body52.lr.ph
  %i47.0250 = phi i32 [ 0, %for.body52.lr.ph ], [ %inc120, %for.cond.cleanup83 ]
  %stride56 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i32 %i47.0250, i32 2
  %25 = load i32, i32* %stride56, align 4, !tbaa !39
  %mul59 = mul nsw i32 %25, %div.i232
  %conv60 = sext i32 %mul59 to i64
  %stride64 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %23, i32 %i47.0250, i32 2
  %26 = load i32, i32* %stride64, align 4, !tbaa !39
  %mul67 = mul nsw i32 %26, %div.i
  %conv68 = sext i32 %mul67 to i64
  %cmp70244 = icmp eq i32 %i47.0250, 0
  br i1 %cmp70244, label %for.end80, label %for.body71.lr.ph

for.body71.lr.ph:                                 ; preds = %for.body52
  %cmp75 = icmp eq i32 %mul59, 0
  br i1 %cmp75, label %for.end80, label %for.body71.us

for.body71.us:                                    ; preds = %for.body71.lr.ph, %for.inc78.us
  %insert.0245.us = phi i32 [ %inc79.us, %for.inc78.us ], [ 0, %for.body71.lr.ph ]
  %arrayidx73.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %insert.0245.us
  %27 = load i64, i64* %arrayidx73.us, align 8, !tbaa !22
  %cmp74.us = icmp ugt i64 %27, %conv60
  br i1 %cmp74.us, label %for.end80, label %for.inc78.us

for.inc78.us:                                     ; preds = %for.body71.us
  %inc79.us = add nuw nsw i32 %insert.0245.us, 1
  %cmp70.us = icmp ult i32 %inc79.us, %i47.0250
  br i1 %cmp70.us, label %for.body71.us, label %for.end80

for.end80:                                        ; preds = %for.inc78.us, %for.body71.us, %for.body71.lr.ph, %for.body52
  %insert.0.lcssa = phi i32 [ 0, %for.body52 ], [ %i47.0250, %for.body71.lr.ph ], [ %inc79.us, %for.inc78.us ], [ %insert.0245.us, %for.body71.us ]
  %cmp82247 = icmp ugt i32 %i47.0250, %insert.0.lcssa
  br i1 %cmp82247, label %for.body84, label %for.cond.cleanup83

for.cond.cleanup83:                               ; preds = %for.body84, %for.end80
  %extent104 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i32 %i47.0250, i32 1
  %28 = load i32, i32* %extent104, align 4, !tbaa !38
  %conv105 = sext i32 %28 to i64
  %arrayidx107 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %insert.0.lcssa
  store i64 %conv105, i64* %arrayidx107, align 8, !tbaa !22
  %arrayidx116 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %insert.0.lcssa
  store i64 %conv60, i64* %arrayidx116, align 8, !tbaa !22
  %arrayidx118 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %insert.0.lcssa
  store i64 %conv68, i64* %arrayidx118, align 8, !tbaa !22
  %inc120 = add nuw nsw i32 %i47.0250, 1
  %exitcond = icmp eq i32 %inc120, %11
  br i1 %exitcond, label %while.cond.preheader, label %for.body52

for.body84:                                       ; preds = %for.end80, %for.body84
  %j.0248 = phi i32 [ %sub86, %for.body84 ], [ %i47.0250, %for.end80 ]
  %sub86 = add nsw i32 %j.0248, -1
  %arrayidx87 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %sub86
  %29 = load i64, i64* %arrayidx87, align 8, !tbaa !22
  %arrayidx89 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 3, i32 %j.0248
  store i64 %29, i64* %arrayidx89, align 8, !tbaa !22
  %arrayidx92 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %sub86
  %30 = load i64, i64* %arrayidx92, align 8, !tbaa !22
  %arrayidx94 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 5, i32 %j.0248
  store i64 %30, i64* %arrayidx94, align 8, !tbaa !22
  %arrayidx97 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %sub86
  %31 = load i64, i64* %arrayidx97, align 8, !tbaa !22
  %arrayidx99 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i32 0, i32 4, i32 %j.0248
  store i64 %31, i64* %arrayidx99, align 8, !tbaa !22
  %cmp82 = icmp sgt i32 %sub86, %insert.0.lcssa
  br i1 %cmp82, label %for.body84, label %for.cond.cleanup83

land.rhs:                                         ; preds = %while.body, %land.rhs.lr.ph
  %32 = phi i64 [ %.pre258, %land.rhs.lr.ph ], [ %37, %while.body ]
  %33 = phi i64 [ %.pre, %land.rhs.lr.ph ], [ %mul133, %while.body ]
  %cmp129 = icmp eq i64 %33, %32
  br i1 %cmp129, label %while.body, label %while.end

while.body:                                       ; preds = %land.rhs
  %34 = load i64, i64* %arrayidx, align 8, !tbaa !22
  %mul133 = mul i64 %34, %32
  store i64 %mul133, i64* %chunk_size, align 8, !tbaa !43
  %35 = load i64, i64* %arrayidx.1, align 8, !tbaa !22
  store i64 %35, i64* %arrayidx, align 8, !tbaa !22
  %36 = load i64, i64* %arrayidx11.1, align 8, !tbaa !22
  store i64 %36, i64* %arrayidx11, align 8, !tbaa !22
  %37 = load i64, i64* %arrayidx12.1, align 8, !tbaa !22
  store i64 %37, i64* %arrayidx12, align 8, !tbaa !22
  %38 = load i64, i64* %arrayidx.2, align 8, !tbaa !22
  store i64 %38, i64* %arrayidx.1, align 8, !tbaa !22
  %39 = load i64, i64* %arrayidx11.2, align 8, !tbaa !22
  store i64 %39, i64* %arrayidx11.1, align 8, !tbaa !22
  %40 = load i64, i64* %arrayidx12.2, align 8, !tbaa !22
  store i64 %40, i64* %arrayidx12.1, align 8, !tbaa !22
  %41 = load i64, i64* %arrayidx.3, align 8, !tbaa !22
  store i64 %41, i64* %arrayidx.2, align 8, !tbaa !22
  %42 = load i64, i64* %arrayidx11.3, align 8, !tbaa !22
  store i64 %42, i64* %arrayidx11.2, align 8, !tbaa !22
  %43 = load i64, i64* %arrayidx12.3, align 8, !tbaa !22
  store i64 %43, i64* %arrayidx12.2, align 8, !tbaa !22
  %44 = load i64, i64* %arrayidx.4, align 8, !tbaa !22
  store i64 %44, i64* %arrayidx.3, align 8, !tbaa !22
  %45 = load i64, i64* %arrayidx11.4, align 8, !tbaa !22
  store i64 %45, i64* %arrayidx11.3, align 8, !tbaa !22
  %46 = load i64, i64* %arrayidx12.4, align 8, !tbaa !22
  store i64 %46, i64* %arrayidx12.3, align 8, !tbaa !22
  %47 = load i64, i64* %arrayidx.5, align 8, !tbaa !22
  store i64 %47, i64* %arrayidx.4, align 8, !tbaa !22
  %48 = load i64, i64* %arrayidx11.5, align 8, !tbaa !22
  store i64 %48, i64* %arrayidx11.4, align 8, !tbaa !22
  %49 = load i64, i64* %arrayidx12.5, align 8, !tbaa !22
  store i64 %49, i64* %arrayidx12.4, align 8, !tbaa !22
  %50 = load i64, i64* %arrayidx.6, align 8, !tbaa !22
  store i64 %50, i64* %arrayidx.5, align 8, !tbaa !22
  %51 = load i64, i64* %arrayidx11.6, align 8, !tbaa !22
  store i64 %51, i64* %arrayidx11.5, align 8, !tbaa !22
  %52 = load i64, i64* %arrayidx12.6, align 8, !tbaa !22
  store i64 %52, i64* %arrayidx12.5, align 8, !tbaa !22
  %53 = load i64, i64* %arrayidx.7, align 8, !tbaa !22
  store i64 %53, i64* %arrayidx.6, align 8, !tbaa !22
  %54 = load i64, i64* %arrayidx11.7, align 8, !tbaa !22
  store i64 %54, i64* %arrayidx11.6, align 8, !tbaa !22
  %55 = load i64, i64* %arrayidx12.7, align 8, !tbaa !22
  store i64 %55, i64* %arrayidx12.6, align 8, !tbaa !22
  %56 = load i64, i64* %arrayidx.8, align 8, !tbaa !22
  store i64 %56, i64* %arrayidx.7, align 8, !tbaa !22
  %57 = load i64, i64* %arrayidx11.8, align 8, !tbaa !22
  store i64 %57, i64* %arrayidx11.7, align 8, !tbaa !22
  %58 = load i64, i64* %arrayidx12.8, align 8, !tbaa !22
  store i64 %58, i64* %arrayidx12.7, align 8, !tbaa !22
  %59 = load i64, i64* %arrayidx.9, align 8, !tbaa !22
  store i64 %59, i64* %arrayidx.8, align 8, !tbaa !22
  %60 = load i64, i64* %arrayidx11.9, align 8, !tbaa !22
  store i64 %60, i64* %arrayidx11.8, align 8, !tbaa !22
  %61 = load i64, i64* %arrayidx12.9, align 8, !tbaa !22
  store i64 %61, i64* %arrayidx12.8, align 8, !tbaa !22
  %62 = load i64, i64* %arrayidx.10, align 8, !tbaa !22
  store i64 %62, i64* %arrayidx.9, align 8, !tbaa !22
  %63 = load i64, i64* %arrayidx11.10, align 8, !tbaa !22
  store i64 %63, i64* %arrayidx11.9, align 8, !tbaa !22
  %64 = load i64, i64* %arrayidx12.10, align 8, !tbaa !22
  store i64 %64, i64* %arrayidx12.9, align 8, !tbaa !22
  %65 = load i64, i64* %arrayidx.11, align 8, !tbaa !22
  store i64 %65, i64* %arrayidx.10, align 8, !tbaa !22
  %66 = load i64, i64* %arrayidx11.11, align 8, !tbaa !22
  store i64 %66, i64* %arrayidx11.10, align 8, !tbaa !22
  %67 = load i64, i64* %arrayidx12.11, align 8, !tbaa !22
  store i64 %67, i64* %arrayidx12.10, align 8, !tbaa !22
  %68 = load i64, i64* %arrayidx.12, align 8, !tbaa !22
  store i64 %68, i64* %arrayidx.11, align 8, !tbaa !22
  %69 = load i64, i64* %arrayidx11.12, align 8, !tbaa !22
  store i64 %69, i64* %arrayidx11.11, align 8, !tbaa !22
  %70 = load i64, i64* %arrayidx12.12, align 8, !tbaa !22
  store i64 %70, i64* %arrayidx12.11, align 8, !tbaa !22
  %71 = load i64, i64* %arrayidx.13, align 8, !tbaa !22
  store i64 %71, i64* %arrayidx.12, align 8, !tbaa !22
  %72 = load i64, i64* %arrayidx11.13, align 8, !tbaa !22
  store i64 %72, i64* %arrayidx11.12, align 8, !tbaa !22
  %73 = load i64, i64* %arrayidx12.13, align 8, !tbaa !22
  store i64 %73, i64* %arrayidx12.12, align 8, !tbaa !22
  %74 = load i64, i64* %arrayidx.14, align 8, !tbaa !22
  store i64 %74, i64* %arrayidx.13, align 8, !tbaa !22
  %75 = load i64, i64* %arrayidx11.14, align 8, !tbaa !22
  store i64 %75, i64* %arrayidx11.13, align 8, !tbaa !22
  %76 = load i64, i64* %arrayidx12.14, align 8, !tbaa !22
  store i64 %76, i64* %arrayidx12.13, align 8, !tbaa !22
  %77 = load i64, i64* %arrayidx.15, align 8, !tbaa !22
  store i64 %77, i64* %arrayidx.14, align 8, !tbaa !22
  %78 = load i64, i64* %arrayidx11.15, align 8, !tbaa !22
  store i64 %78, i64* %arrayidx11.14, align 8, !tbaa !22
  %79 = load i64, i64* %arrayidx12.15, align 8, !tbaa !22
  store i64 %79, i64* %arrayidx12.14, align 8, !tbaa !22
  store i64 1, i64* %arrayidx.15, align 8, !tbaa !22
  store i64 0, i64* %arrayidx11.15, align 8, !tbaa !22
  store i64 0, i64* %arrayidx12.15, align 8, !tbaa !22
  %cmp125 = icmp eq i64 %mul133, %36
  br i1 %cmp125, label %land.rhs, label %while.end

while.end:                                        ; preds = %while.body, %land.rhs, %while.cond.preheader, %for.cond48.preheader
  %80 = bitcast %"struct.Halide::Runtime::Internal::device_copy"* %agg.result to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 8 %80, i8* nonnull align 8 %0, i32 416, i1 false), !tbaa.struct !45
  br label %cleanup

cleanup:                                          ; preds = %while.end, %if.then45, %if.then
  call void @llvm.lifetime.end.p0i8(i64 416, i8* nonnull %0) #9
  ret void
}

; Function Attrs: nounwind
define linkonce i32 @_ZN6Halide7Runtime8Internal27copy_to_host_already_lockedEPvP15halide_buffer_t(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %flags.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %0 = load i64, i64* %flags.i.i, align 8, !tbaa !33
  %and.i.i = and i64 %0, 2
  %cmp.i.i = icmp eq i64 %and.i.i, 0
  br i1 %cmp.i.i, label %return, label %if.end

if.end:                                           ; preds = %entry
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %1 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !31
  %and.i.i46 = and i64 %0, 1
  %cmp.i.i47 = icmp eq i64 %and.i.i46, 0
  br i1 %cmp.i.i47, label %if.end9, label %return

if.end9:                                          ; preds = %if.end
  %cmp = icmp eq %struct.halide_device_interface_t* %1, null
  br i1 %cmp, label %return, label %if.end15

if.end15:                                         ; preds = %if.end9
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %1, i32 0, i32 15
  %2 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !46
  %copy_to_host = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %2, i32 0, i32 6
  %3 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %copy_to_host, align 4, !tbaa !48
  %call16 = tail call i32 %3(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #11
  %cmp17 = icmp eq i32 %call16, 0
  br i1 %cmp17, label %if.end23, label %return

if.end23:                                         ; preds = %if.end15
  %4 = load i64, i64* %flags.i.i, align 8, !tbaa !33
  %and.i.i44 = and i64 %4, -3
  store i64 %and.i.i44, i64* %flags.i.i, align 8, !tbaa !33
  tail call void @halide_msan_annotate_buffer_is_initialized(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #11
  br label %return

return:                                           ; preds = %if.end23, %if.end15, %if.end9, %if.end, %entry
  %retval.2 = phi i32 [ 0, %entry ], [ 0, %if.end23 ], [ -14, %if.end ], [ -19, %if.end9 ], [ -14, %if.end15 ]
  ret i32 %retval.2
}

; Function Attrs: nounwind
define weak void @halide_device_release(i8* %user_context, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %device_interface, i32 0, i32 15
  %0 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !46
  %device_release = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %0, i32 0, i32 5
  %1 = load i32 (i8*)*, i32 (i8*)** %device_release, align 4, !tbaa !50
  %call = tail call i32 %1(i8* %user_context) #11
  ret void
}

; Function Attrs: nounwind
define weak i32 @halide_copy_to_host(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #11
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.9.26, i32 0, i32 0)) #11
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !31
  %cmp4.i = icmp ne %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !29
  %cmp5.i = icmp ne i64 %1, 0
  %cmp5.not.i = xor i1 %cmp5.i, true
  %brmerge.i = or i1 %cmp4.i, %cmp5.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #11
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp4.not.i = xor i1 %cmp4.i, true
  %brmerge44.i = or i1 %cmp5.i, %cmp4.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #11
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !33
  %3 = and i64 %2, 3
  %4 = icmp eq i64 %3, 3
  br i1 %4, label %if.then24.i, label %if.end16.i.split

if.end16.i.split:                                 ; preds = %if.end16.i
  %call11 = tail call i32 @_ZN6Halide7Runtime8Internal27copy_to_host_already_lockedEPvP15halide_buffer_t(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #12
  br label %cleanup

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #11
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp = icmp eq i32 %retval.2.i, 0
  br i1 %cmp, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split, label %cleanup

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %call12 = tail call i32 @_ZN6Halide7Runtime8Internal27copy_to_host_already_lockedEPvP15halide_buffer_t(i8* %user_context, %struct.halide_buffer_t* %buf) #12
  br label %cleanup

cleanup:                                          ; preds = %if.end16.i.split, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.0 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ %call11, %if.end16.i.split ], [ %call12, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #11
  ret i32 %retval.0
}

; Function Attrs: nounwind
define linkonce i32 @copy_to_device_already_locked(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.10.27, i32 0, i32 0)) #11
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !31
  %cmp4.i = icmp ne %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !29
  %cmp5.i = icmp ne i64 %1, 0
  %cmp5.not.i = xor i1 %cmp5.i, true
  %brmerge.i = or i1 %cmp4.i, %cmp5.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #11
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp4.not.i = xor i1 %cmp4.i, true
  %brmerge44.i = or i1 %cmp5.i, %cmp4.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #11
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !33
  %3 = and i64 %2, 3
  %4 = icmp eq i64 %3, 3
  br i1 %4, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #11
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp = icmp eq i32 %retval.2.i, 0
  br i1 %cmp, label %if.end, label %cleanup

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit, %if.end16.i
  %cmp1 = icmp eq %struct.halide_device_interface_t* %device_interface, null
  br i1 %cmp1, label %if.then2, label %if.end11

if.then2:                                         ; preds = %if.end
  %device_interface5 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %5 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface5, align 8, !tbaa !31
  %cmp6 = icmp eq %struct.halide_device_interface_t* %5, null
  br i1 %cmp6, label %if.then7, label %if.end11

if.then7:                                         ; preds = %if.then2
  %call8 = tail call i32 @halide_error_no_device_interface(i8* %user_context) #11
  br label %cleanup

if.end11:                                         ; preds = %if.then2, %if.end
  %device_interface.addr.0 = phi %struct.halide_device_interface_t* [ %device_interface, %if.end ], [ %5, %if.then2 ]
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %6 = load i64, i64* %device, align 8, !tbaa !29
  %tobool = icmp eq i64 %6, 0
  br i1 %tobool, label %if.then18, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.end11
  %device_interface12 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %7 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface12, align 8, !tbaa !31
  %cmp13 = icmp eq %struct.halide_device_interface_t* %7, %device_interface.addr.0
  br i1 %cmp13, label %if.end27, label %if.then14

if.then14:                                        ; preds = %land.lhs.true
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.12.28, i32 0, i32 0)) #11
  br label %cleanup

if.then18:                                        ; preds = %if.end11
  %call19 = tail call i32 @halide_device_malloc(i8* %user_context, %struct.halide_buffer_t* nonnull %buf, %struct.halide_device_interface_t* nonnull %device_interface.addr.0) #12
  %cmp20 = icmp eq i32 %call19, 0
  br i1 %cmp20, label %if.end27, label %cleanup

if.end27:                                         ; preds = %if.then18, %land.lhs.true
  %flags.i.i85 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %8 = load i64, i64* %flags.i.i85, align 8, !tbaa !33
  %and.i.i86 = and i64 %8, 1
  %cmp.i.i87 = icmp eq i64 %and.i.i86, 0
  br i1 %cmp.i.i87, label %cleanup, label %if.then29

if.then29:                                        ; preds = %if.end27
  %and.i.i84 = and i64 %8, 2
  %cmp.i.i = icmp eq i64 %and.i.i84, 0
  br i1 %cmp.i.i, label %if.else, label %cleanup

if.else:                                          ; preds = %if.then29
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %device_interface.addr.0, i32 0, i32 15
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !46
  %copy_to_device = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i32 0, i32 7
  %10 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %copy_to_device, align 4, !tbaa !51
  %call40 = tail call i32 %10(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #11
  %cmp41 = icmp eq i32 %call40, 0
  br i1 %cmp41, label %if.then42, label %cleanup

if.then42:                                        ; preds = %if.else
  %11 = load i64, i64* %flags.i.i85, align 8, !tbaa !33
  %and.i.i = and i64 %11, -2
  store i64 %and.i.i, i64* %flags.i.i85, align 8, !tbaa !33
  br label %cleanup

cleanup:                                          ; preds = %if.then42, %if.else, %if.then29, %if.end27, %if.then18, %if.then14, %if.then7, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.0 = phi i32 [ %call8, %if.then7 ], [ -42, %if.then14 ], [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ 0, %if.then42 ], [ 0, %if.end27 ], [ %call19, %if.then18 ], [ -15, %if.then29 ], [ -15, %if.else ]
  ret i32 %retval.0
}

; Function Attrs: nounwind
define weak i32 @halide_device_malloc(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.18.29, i32 0, i32 0)) #11
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !31
  %cmp4.i = icmp ne %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !29
  %cmp5.i = icmp ne i64 %1, 0
  %cmp5.not.i = xor i1 %cmp5.i, true
  %brmerge.i = or i1 %cmp4.i, %cmp5.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #11
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp4.not.i = xor i1 %cmp4.i, true
  %brmerge44.i = or i1 %cmp5.i, %cmp4.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #11
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !33
  %3 = and i64 %2, 3
  %4 = icmp eq i64 %3, 3
  br i1 %4, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #11
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp = icmp eq i32 %retval.2.i, 0
  br i1 %cmp, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup12

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface3.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface3.phi.trans.insert, align 8, !tbaa !31
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %5 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp4 = icmp eq %struct.halide_device_interface_t* %5, null
  %cmp5 = icmp eq %struct.halide_device_interface_t* %5, %device_interface
  %or.cond = or i1 %cmp4, %cmp5
  br i1 %or.cond, label %if.end7, label %if.then6

if.then6:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.20.30, i32 0, i32 0)) #11
  br label %cleanup12

if.end7:                                          ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %device_interface, i32 0, i32 15
  %6 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !46
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %6, i32 0, i32 0
  %7 = load void ()*, void ()** %use_module, align 4, !tbaa !52
  tail call void %7() #11
  %8 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !46
  %device_malloc = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %8, i32 0, i32 2
  %9 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_malloc, align 4, !tbaa !53
  %call9 = tail call i32 %9(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #11
  %10 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !46
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %10, i32 0, i32 1
  %11 = load void ()*, void ()** %release_module, align 4, !tbaa !54
  tail call void %11() #11
  %tobool = icmp eq i32 %call9, 0
  %selv = select i1 %tobool, i32 0, i32 -16
  br label %cleanup12

cleanup12:                                        ; preds = %if.end7, %if.then6, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ -42, %if.then6 ], [ %selv, %if.end7 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind
define weak i32 @halide_copy_to_device(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #11
  %call = tail call i32 @copy_to_device_already_locked(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) #12
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #11
  ret i32 %call
}

; Function Attrs: nounwind
define weak i32 @halide_device_sync(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.17.31, i32 0, i32 0)) #11
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !31
  %cmp4.i = icmp ne %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !29
  %cmp5.i = icmp ne i64 %1, 0
  %cmp5.not.i = xor i1 %cmp5.i, true
  %brmerge.i = or i1 %cmp4.i, %cmp5.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #11
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp4.not.i = xor i1 %cmp4.i, true
  %brmerge44.i = or i1 %cmp5.i, %cmp4.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #11
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !33
  %3 = and i64 %2, 3
  %4 = icmp eq i64 %3, 3
  br i1 %4, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #11
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp = icmp eq i32 %retval.2.i, 0
  br i1 %cmp, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup8

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface1.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface1.phi.trans.insert, align 8, !tbaa !31
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %5 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp2 = icmp eq %struct.halide_device_interface_t* %5, null
  br i1 %cmp2, label %if.then3, label %if.end5

if.then3:                                         ; preds = %if.end
  %call4 = tail call i32 @halide_error_no_device_interface(i8* %user_context) #11
  br label %cleanup8

if.end5:                                          ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %5, i32 0, i32 15
  %6 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !46
  %device_sync = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %6, i32 0, i32 4
  %7 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_sync, align 4, !tbaa !55
  %call6 = tail call i32 %7(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #11
  %tobool = icmp eq i32 %call6, 0
  %selv = select i1 %tobool, i32 0, i32 -17
  br label %cleanup8

cleanup8:                                         ; preds = %if.end5, %if.then3, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ %call4, %if.then3 ], [ %selv, %if.end5 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind
define weak i32 @halide_device_free(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.21.32, i32 0, i32 0)) #11
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !31
  %cmp4.i = icmp ne %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !29
  %cmp5.i = icmp ne i64 %1, 0
  %cmp5.not.i = xor i1 %cmp5.i, true
  %brmerge.i = or i1 %cmp4.i, %cmp5.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #11
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp4.not.i = xor i1 %cmp4.i, true
  %brmerge44.i = or i1 %cmp5.i, %cmp4.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #11
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !33
  %3 = and i64 %2, 3
  %4 = icmp eq i64 %3, 3
  br i1 %4, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #11
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp = icmp eq i32 %retval.2.i, 0
  br i1 %cmp, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup12

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface1.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface1.phi.trans.insert, align 8, !tbaa !31
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %5 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp2 = icmp eq %struct.halide_device_interface_t* %5, null
  br i1 %cmp2, label %if.end11, label %if.then3

if.then3:                                         ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %5, i32 0, i32 15
  %6 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !46
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %6, i32 0, i32 0
  %7 = load void ()*, void ()** %use_module, align 4, !tbaa !52
  tail call void %7() #11
  %8 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !46
  %device_free = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %8, i32 0, i32 3
  %9 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_free, align 4, !tbaa !56
  %call5 = tail call i32 %9(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #11
  %10 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !46
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %10, i32 0, i32 1
  %11 = load void ()*, void ()** %release_module, align 4, !tbaa !54
  tail call void %11() #11
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %12 = load i64, i64* %device, align 8, !tbaa !29
  %cmp7 = icmp eq i64 %12, 0
  br i1 %cmp7, label %if.end9, label %if.then8

if.then8:                                         ; preds = %if.then3
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([137 x i8], [137 x i8]* @.str.22.33, i32 0, i32 0)) #11
  tail call void @abort() #11
  br label %if.end9

if.end9:                                          ; preds = %if.then8, %if.then3
  %tobool = icmp eq i32 %call5, 0
  %selv = select i1 %tobool, i32 0, i32 -18
  br label %cleanup12

if.end11:                                         ; preds = %if.end
  %flags.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %13 = load i64, i64* %flags.i.i, align 8, !tbaa !33
  %and.i.i = and i64 %13, -3
  store i64 %and.i.i, i64* %flags.i.i, align 8, !tbaa !33
  br label %cleanup12

cleanup12:                                        ; preds = %if.end11, %if.end9, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ %selv, %if.end9 ], [ 0, %if.end11 ]
  ret i32 %retval.1
}

declare void @abort() local_unnamed_addr #2

; Function Attrs: nounwind
define weak void @halide_device_free_as_destructor(i8* %user_context, i8* %obj) local_unnamed_addr #0 {
entry:
  %0 = bitcast i8* %obj to %struct.halide_buffer_t*
  %call = tail call i32 @halide_device_free(i8* %user_context, %struct.halide_buffer_t* %0) #12
  ret void
}

; Function Attrs: nounwind
define weak i32 @halide_device_and_host_malloc(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.23.34, i32 0, i32 0)) #11
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !31
  %cmp4.i = icmp ne %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !29
  %cmp5.i = icmp ne i64 %1, 0
  %cmp5.not.i = xor i1 %cmp5.i, true
  %brmerge.i = or i1 %cmp4.i, %cmp5.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #11
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp4.not.i = xor i1 %cmp4.i, true
  %brmerge44.i = or i1 %cmp5.i, %cmp4.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #11
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !33
  %3 = and i64 %2, 3
  %4 = icmp eq i64 %3, 3
  br i1 %4, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #11
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp = icmp eq i32 %retval.2.i, 0
  br i1 %cmp, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup14

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface3.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface3.phi.trans.insert, align 8, !tbaa !31
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %5 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %use_host_ptr_extension = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 4
  %cmp4 = icmp eq %struct.halide_device_interface_t* %5, null
  %cmp5 = icmp eq %struct.halide_device_interface_t* %5, %device_interface
  %or.cond = or i1 %cmp4, %cmp5
  %6 = bitcast i64* %use_host_ptr_extension to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 0, i64 24, i1 false)
  br i1 %or.cond, label %if.end7, label %if.then6

if.then6:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.25, i32 0, i32 0)) #11
  br label %cleanup14

if.end7:                                          ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %device_interface, i32 0, i32 15
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !46
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i32 0, i32 0
  %8 = load void ()*, void ()** %use_module, align 4, !tbaa !52
  tail call void %8() #11
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !46
  %device_and_host_malloc = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i32 0, i32 8
  %10 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_and_host_malloc, align 4, !tbaa !57
  %call9 = tail call i32 %10(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #11
  %11 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !46
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %11, i32 0, i32 1
  %12 = load void ()*, void ()** %release_module, align 4, !tbaa !54
  tail call void %12() #11
  %cmp11 = icmp eq i32 %call9, 0
  br i1 %cmp11, label %cleanup14, label %if.then12

if.then12:                                        ; preds = %if.end7
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.26, i32 0, i32 0)) #11
  br label %cleanup14

cleanup14:                                        ; preds = %if.then12, %if.end7, %if.then6, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ -42, %if.then6 ], [ -16, %if.then12 ], [ 0, %if.end7 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind
define weak i32 @halide_device_and_host_free(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.27, i32 0, i32 0)) #11
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !31
  %cmp4.i = icmp ne %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !29
  %cmp5.i = icmp ne i64 %1, 0
  %cmp5.not.i = xor i1 %cmp5.i, true
  %brmerge.i = or i1 %cmp4.i, %cmp5.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #11
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp4.not.i = xor i1 %cmp4.i, true
  %brmerge44.i = or i1 %cmp5.i, %cmp4.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #11
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !33
  %3 = and i64 %2, 3
  %4 = icmp eq i64 %3, 3
  br i1 %4, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #11
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp = icmp eq i32 %retval.2.i, 0
  br i1 %cmp, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup18

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface1.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface1.phi.trans.insert, align 8, !tbaa !31
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %5 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp2 = icmp eq %struct.halide_device_interface_t* %5, null
  br i1 %cmp2, label %if.else11, label %if.then3

if.then3:                                         ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %5, i32 0, i32 15
  %6 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !46
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %6, i32 0, i32 0
  %7 = load void ()*, void ()** %use_module, align 4, !tbaa !52
  tail call void %7() #11
  %8 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !46
  %device_and_host_free = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %8, i32 0, i32 9
  %9 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_and_host_free, align 4, !tbaa !58
  %call5 = tail call i32 %9(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #11
  %10 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !46
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %10, i32 0, i32 1
  %11 = load void ()*, void ()** %release_module, align 4, !tbaa !54
  tail call void %11() #11
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %12 = load i64, i64* %device, align 8, !tbaa !29
  %cmp7 = icmp eq i64 %12, 0
  br i1 %cmp7, label %if.end9, label %if.then8

if.then8:                                         ; preds = %if.then3
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([137 x i8], [137 x i8]* @.str.28, i32 0, i32 0)) #11
  tail call void @abort() #11
  br label %if.end9

if.end9:                                          ; preds = %if.then8, %if.then3
  %tobool = icmp eq i32 %call5, 0
  %selv = select i1 %tobool, i32 0, i32 -18
  br label %cleanup18

if.else11:                                        ; preds = %if.end
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 2
  %13 = load i8*, i8** %host, align 4, !tbaa !32
  %tobool12 = icmp eq i8* %13, null
  br i1 %tobool12, label %if.end17, label %if.then13

if.then13:                                        ; preds = %if.else11
  tail call void @halide_free(i8* %user_context, i8* nonnull %13) #11
  store i8* null, i8** %host, align 4, !tbaa !32
  br label %if.end17

if.end17:                                         ; preds = %if.then13, %if.else11
  %flags.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %14 = load i64, i64* %flags.i.i, align 8, !tbaa !33
  %and.i.i = and i64 %14, -3
  store i64 %and.i.i, i64* %flags.i.i, align 8, !tbaa !33
  br label %cleanup18

cleanup18:                                        ; preds = %if.end17, %if.end9, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ %selv, %if.end9 ], [ 0, %if.end17 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind
define weak i32 @halide_default_device_and_host_malloc(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.29, i32 0, i32 0)) #11
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !31
  %cmp4.i = icmp ne %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !29
  %cmp5.i = icmp ne i64 %1, 0
  %cmp5.not.i = xor i1 %cmp5.i, true
  %brmerge.i = or i1 %cmp4.i, %cmp5.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #11
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp4.not.i = xor i1 %cmp4.i, true
  %brmerge44.i = or i1 %cmp5.i, %cmp4.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #11
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !33
  %3 = and i64 %2, 3
  %4 = icmp eq i64 %3, 3
  br i1 %4, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #11
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp = icmp eq i32 %retval.2.i, 0
  br i1 %cmp, label %if.end, label %cleanup13

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit, %if.end16.i
  %dimensions.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 8
  %5 = load i32, i32* %dimensions.i.i, align 4, !tbaa !34
  %cmp18.i.i = icmp sgt i32 %5, 0
  br i1 %cmp18.i.i, label %for.body.lr.ph.i.i, label %_ZNK15halide_buffer_t3endEv.exit.thread.i

_ZNK15halide_buffer_t3endEv.exit.thread.i:        ; preds = %if.end
  %bits.i.i27.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 7, i32 1
  %6 = load i8, i8* %bits.i.i27.i, align 1, !tbaa !27
  br label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

for.body.lr.ph.i.i:                               ; preds = %if.end
  %dim.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 9
  %7 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i.i, align 8, !tbaa !35
  br label %for.body.i.i

for.body.i.i:                                     ; preds = %for.inc.i.i, %for.body.lr.ph.i.i
  %i.020.i.i = phi i32 [ 0, %for.body.lr.ph.i.i ], [ %inc.i.i, %for.inc.i.i ]
  %index.019.i.i = phi i32 [ 0, %for.body.lr.ph.i.i ], [ %index.1.i.i, %for.inc.i.i ]
  %stride.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %7, i32 %i.020.i.i, i32 2
  %8 = load i32, i32* %stride.i.i, align 4, !tbaa !39
  %cmp2.i.i = icmp sgt i32 %8, 0
  br i1 %cmp2.i.i, label %if.then.i.i, label %for.inc.i.i

if.then.i.i:                                      ; preds = %for.body.i.i
  %extent.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %7, i32 %i.020.i.i, i32 1
  %9 = load i32, i32* %extent.i.i, align 4, !tbaa !38
  %sub.i.i = add nsw i32 %9, -1
  %mul.i.i = mul nsw i32 %sub.i.i, %8
  %add.i.i = add nsw i32 %mul.i.i, %index.019.i.i
  br label %for.inc.i.i

for.inc.i.i:                                      ; preds = %if.then.i.i, %for.body.i.i
  %index.1.i.i = phi i32 [ %add.i.i, %if.then.i.i ], [ %index.019.i.i, %for.body.i.i ]
  %inc.i.i = add nuw nsw i32 %i.020.i.i, 1
  %exitcond1 = icmp eq i32 %inc.i.i, %5
  br i1 %exitcond1, label %for.body.lr.ph.i5.i, label %for.body.i.i

for.body.lr.ph.i5.i:                              ; preds = %for.inc.i.i
  %bits.i.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 7, i32 1
  %10 = load i8, i8* %bits.i.i.i, align 1, !tbaa !27
  br label %for.body.i15.i

for.body.i15.i:                                   ; preds = %for.inc.i24.i, %for.body.lr.ph.i5.i
  %i.018.i.i = phi i32 [ 0, %for.body.lr.ph.i5.i ], [ %inc.i22.i, %for.inc.i24.i ]
  %index.017.i.i = phi i32 [ 0, %for.body.lr.ph.i5.i ], [ %index.1.i21.i, %for.inc.i24.i ]
  %stride.i13.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %7, i32 %i.018.i.i, i32 2
  %11 = load i32, i32* %stride.i13.i, align 4, !tbaa !39
  %cmp2.i14.i = icmp slt i32 %11, 0
  br i1 %cmp2.i14.i, label %if.then.i20.i, label %for.inc.i24.i

if.then.i20.i:                                    ; preds = %for.body.i15.i
  %extent.i16.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %7, i32 %i.018.i.i, i32 1
  %12 = load i32, i32* %extent.i16.i, align 4, !tbaa !38
  %sub.i17.i = add nsw i32 %12, -1
  %mul.i18.i = mul nsw i32 %sub.i17.i, %11
  %add.i19.i = add nsw i32 %mul.i18.i, %index.017.i.i
  br label %for.inc.i24.i

for.inc.i24.i:                                    ; preds = %if.then.i20.i, %for.body.i15.i
  %index.1.i21.i = phi i32 [ %add.i19.i, %if.then.i20.i ], [ %index.017.i.i, %for.body.i15.i ]
  %inc.i22.i = add nuw nsw i32 %i.018.i.i, 1
  %exitcond = icmp eq i32 %inc.i22.i, %5
  br i1 %exitcond, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, label %for.body.i15.i

_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit: ; preds = %for.inc.i24.i
  %add8.i.i = add nsw i32 %index.1.i.i, 1
  br label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

_ZNK15halide_buffer_t13size_in_bytesEv.exit:      ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, %_ZNK15halide_buffer_t3endEv.exit.thread.i
  %div.i.i32.i.in.in.in = phi i8 [ %6, %_ZNK15halide_buffer_t3endEv.exit.thread.i ], [ %10, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %add8.i31.i = phi i32 [ 1, %_ZNK15halide_buffer_t3endEv.exit.thread.i ], [ %add8.i.i, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %index.0.lcssa.i6.i = phi i32 [ 0, %_ZNK15halide_buffer_t3endEv.exit.thread.i ], [ %index.1.i21.i, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %div.i.i32.i.in.in = zext i8 %div.i.i32.i.in.in.in to i32
  %div.i.i32.i.in = add nuw nsw i32 %div.i.i32.i.in.in, 7
  %div.i.i32.i = lshr i32 %div.i.i32.i.in, 3
  %mul8.i25.i = sub i32 %add8.i31.i, %index.0.lcssa.i6.i
  %13 = mul i32 %mul8.i25.i, %div.i.i32.i
  %call2 = tail call i8* @halide_malloc(i8* %user_context, i32 %13) #11
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 2
  store i8* %call2, i8** %host, align 4, !tbaa !32
  %cmp4 = icmp eq i8* %call2, null
  br i1 %cmp4, label %cleanup13, label %if.end6

if.end6:                                          ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit
  %call7 = tail call i32 @halide_device_malloc(i8* %user_context, %struct.halide_buffer_t* nonnull %buf, %struct.halide_device_interface_t* %device_interface) #12
  %cmp8 = icmp eq i32 %call7, 0
  br i1 %cmp8, label %cleanup13, label %if.then9

if.then9:                                         ; preds = %if.end6
  %14 = load i8*, i8** %host, align 4, !tbaa !32
  tail call void @halide_free(i8* %user_context, i8* %14) #11
  store i8* null, i8** %host, align 4, !tbaa !32
  br label %cleanup13

cleanup13:                                        ; preds = %if.then9, %if.end6, %_ZNK15halide_buffer_t13size_in_bytesEv.exit, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ -1, %_ZNK15halide_buffer_t13size_in_bytesEv.exit ], [ %call7, %if.then9 ], [ 0, %if.end6 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind
define weak i32 @halide_default_device_and_host_free(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.30, i32 0, i32 0)) #11
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !31
  %cmp4.i = icmp ne %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !29
  %cmp5.i = icmp ne i64 %1, 0
  %cmp5.not.i = xor i1 %cmp5.i, true
  %brmerge.i = or i1 %cmp4.i, %cmp5.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #11
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp4.not.i = xor i1 %cmp4.i, true
  %brmerge44.i = or i1 %cmp5.i, %cmp4.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #11
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !33
  %3 = and i64 %2, 3
  %4 = icmp eq i64 %3, 3
  br i1 %4, label %if.then24.i, label %if.end16.i.split

if.end16.i.split:                                 ; preds = %if.end16.i
  %call11 = tail call i32 @halide_device_free(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #12
  br label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #11
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp = icmp eq i32 %retval.2.i, 0
  br i1 %cmp, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split, label %cleanup

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %call12 = tail call i32 @halide_device_free(i8* %user_context, %struct.halide_buffer_t* %buf) #12
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split, %if.end16.i.split
  %phi.call = phi i32 [ %call11, %if.end16.i.split ], [ %call12, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split ]
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 2
  %5 = load i8*, i8** %host, align 4, !tbaa !32
  %tobool = icmp eq i8* %5, null
  br i1 %tobool, label %if.end5, label %if.then2

if.then2:                                         ; preds = %if.end
  tail call void @halide_free(i8* %user_context, i8* nonnull %5) #11
  store i8* null, i8** %host, align 4, !tbaa !32
  br label %if.end5

if.end5:                                          ; preds = %if.then2, %if.end
  %flags.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %6 = load i64, i64* %flags.i.i, align 8, !tbaa !33
  %and.i.i19 = and i64 %6, -4
  store i64 %and.i.i19, i64* %flags.i.i, align 8, !tbaa !33
  br label %cleanup

cleanup:                                          ; preds = %if.end5, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.0 = phi i32 [ %phi.call, %if.end5 ], [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ]
  ret i32 %retval.0
}

; Function Attrs: nounwind
define weak i32 @halide_device_wrap_native(i8* %user_context, %struct.halide_buffer_t* %buf, i64 %handle, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.31, i32 0, i32 0)) #11
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !31
  %cmp4.i = icmp ne %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !29
  %cmp5.i = icmp ne i64 %1, 0
  %cmp5.not.i = xor i1 %cmp5.i, true
  %brmerge.i = or i1 %cmp4.i, %cmp5.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #11
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp4.not.i = xor i1 %cmp4.i, true
  %brmerge44.i = or i1 %cmp5.i, %cmp4.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #11
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !33
  %3 = and i64 %2, 3
  %4 = icmp eq i64 %3, 3
  br i1 %4, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #11
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp = icmp eq i32 %retval.2.i, 0
  br i1 %cmp, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup12

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface1.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface1.phi.trans.insert, align 8, !tbaa !31
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %5 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp2 = icmp eq %struct.halide_device_interface_t* %5, null
  %cmp3 = icmp eq %struct.halide_device_interface_t* %5, %device_interface
  %or.cond = or i1 %cmp2, %cmp3
  br i1 %or.cond, label %if.end5, label %if.then4

if.then4:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.32, i32 0, i32 0)) #11
  br label %cleanup12

if.end5:                                          ; preds = %if.end
  %device_interface1 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %device_interface, i32 0, i32 15
  %6 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !46
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %6, i32 0, i32 0
  %7 = load void ()*, void ()** %use_module, align 4, !tbaa !52
  tail call void %7() #11
  store %struct.halide_device_interface_t* %device_interface, %struct.halide_device_interface_t** %device_interface1, align 8, !tbaa !31
  %8 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !46
  %wrap_native = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %8, i32 0, i32 14
  %9 = load i32 (i8*, %struct.halide_buffer_t*, i64)*, i32 (i8*, %struct.halide_buffer_t*, i64)** %wrap_native, align 4, !tbaa !59
  %call8 = tail call i32 %9(i8* %user_context, %struct.halide_buffer_t* nonnull %buf, i64 %handle) #11
  %10 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !46
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %10, i32 0, i32 1
  %11 = load void ()*, void ()** %release_module, align 4, !tbaa !54
  tail call void %11() #11
  %tobool = icmp eq i32 %call8, 0
  %selv = select i1 %tobool, i32 0, i32 -16
  br label %cleanup12

cleanup12:                                        ; preds = %if.end5, %if.then4, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ -42, %if.then4 ], [ %selv, %if.end5 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind
define weak i32 @halide_device_detach_native(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.33, i32 0, i32 0)) #11
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !31
  %cmp4.i = icmp ne %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !29
  %cmp5.i = icmp ne i64 %1, 0
  %cmp5.not.i = xor i1 %cmp5.i, true
  %brmerge.i = or i1 %cmp4.i, %cmp5.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #11
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp4.not.i = xor i1 %cmp4.i, true
  %brmerge44.i = or i1 %cmp5.i, %cmp4.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #11
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !33
  %3 = and i64 %2, 3
  %4 = icmp eq i64 %3, 3
  br i1 %4, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #11
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp = icmp eq i32 %retval.2.i, 0
  br i1 %cmp, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface1.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface1.phi.trans.insert, align 8, !tbaa !31
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %5 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp2 = icmp eq %struct.halide_device_interface_t* %5, null
  br i1 %cmp2, label %cleanup, label %if.then3

if.then3:                                         ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %5, i32 0, i32 15
  %6 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !46
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %6, i32 0, i32 0
  %7 = load void ()*, void ()** %use_module, align 4, !tbaa !52
  tail call void %7() #11
  %8 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !46
  %detach_native = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %8, i32 0, i32 15
  %9 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %detach_native, align 4, !tbaa !60
  %call5 = tail call i32 %9(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #11
  %10 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !46
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %10, i32 0, i32 1
  %11 = load void ()*, void ()** %release_module, align 4, !tbaa !54
  tail call void %11() #11
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %12 = load i64, i64* %device, align 8, !tbaa !29
  %cmp7 = icmp eq i64 %12, 0
  br i1 %cmp7, label %if.end9, label %if.then8

if.then8:                                         ; preds = %if.then3
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([137 x i8], [137 x i8]* @.str.34, i32 0, i32 0)) #11
  tail call void @abort() #11
  br label %if.end9

if.end9:                                          ; preds = %if.then8, %if.then3
  %tobool = icmp eq i32 %call5, 0
  %spec.select = select i1 %tobool, i32 0, i32 -33
  ret i32 %spec.select

cleanup:                                          ; preds = %if.end, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.2.i27 = phi i32 [ 0, %if.end ], [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ]
  ret i32 %retval.2.i27
}

; Function Attrs: nounwind
define weak i32 @halide_default_device_wrap_native(i8* %user_context, %struct.halide_buffer_t* %buf, i64 %handle) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.35, i32 0, i32 0)) #11
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !31
  %cmp4.i = icmp ne %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !29
  %cmp5.i = icmp ne i64 %1, 0
  %cmp5.not.i = xor i1 %cmp5.i, true
  %brmerge.i = or i1 %cmp4.i, %cmp5.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #11
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp4.not.i = xor i1 %cmp4.i, true
  %brmerge44.i = or i1 %cmp5.i, %cmp4.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #11
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !33
  %3 = and i64 %2, 3
  %4 = icmp eq i64 %3, 3
  br i1 %4, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #11
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp = icmp eq i32 %retval.2.i, 0
  br i1 %cmp, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.phi.trans.insert, align 8, !tbaa !31
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %5 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %5, i32 0, i32 15
  %6 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !46
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %6, i32 0, i32 0
  %7 = load void ()*, void ()** %use_module, align 4, !tbaa !52
  tail call void %7() #11
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  store i64 %handle, i64* %device, align 8, !tbaa !29
  br label %cleanup

cleanup:                                          ; preds = %if.end, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.0 = phi i32 [ 0, %if.end ], [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ]
  ret i32 %retval.0
}

; Function Attrs: nounwind
define weak i32 @halide_default_device_detach_native(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.36, i32 0, i32 0)) #11
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !31
  %cmp4.i = icmp ne %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !29
  %cmp5.i = icmp ne i64 %1, 0
  %cmp5.not.i = xor i1 %cmp5.i, true
  %brmerge.i = or i1 %cmp4.i, %cmp5.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #11
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp4.not.i = xor i1 %cmp4.i, true
  %brmerge44.i = or i1 %cmp5.i, %cmp4.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #11
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !33
  %3 = and i64 %2, 3
  %4 = icmp eq i64 %3, 3
  br i1 %4, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #11
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp = icmp eq i32 %retval.2.i, 0
  br i1 %cmp, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %.pre = load i64, i64* %device.phi.trans.insert, align 8, !tbaa !29
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %5 = phi i64 [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %1, %if.end16.i ]
  %cmp1 = icmp eq i64 %5, 0
  br i1 %cmp1, label %cleanup, label %if.end3

if.end3:                                          ; preds = %if.end
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %6 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !31
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %6, i32 0, i32 15
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !46
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i32 0, i32 1
  %8 = load void ()*, void ()** %release_module, align 4, !tbaa !54
  tail call void %8() #11
  store i64 0, i64* %device, align 8, !tbaa !29
  store %struct.halide_device_interface_t* null, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !31
  br label %cleanup

cleanup:                                          ; preds = %if.end3, %if.end, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.0 = phi i32 [ 0, %if.end3 ], [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ 0, %if.end ]
  ret i32 %retval.0
}

; Function Attrs: nounwind
define weak void @halide_device_and_host_free_as_destructor(i8* %user_context, i8* %obj) local_unnamed_addr #0 {
entry:
  %0 = bitcast i8* %obj to %struct.halide_buffer_t*
  %call = tail call i32 @halide_device_and_host_free(i8* %user_context, %struct.halide_buffer_t* %0) #12
  ret void
}

; Function Attrs: norecurse nounwind
define weak void @halide_device_host_nop_free(i8* %user_context, i8* %obj) local_unnamed_addr #3 {
entry:
  ret void
}

; Function Attrs: norecurse nounwind
define weak i32 @halide_default_buffer_copy(i8* %user_context, %struct.halide_buffer_t* %src, %struct.halide_device_interface_t* %dst_device_interface, %struct.halide_buffer_t* %dst) local_unnamed_addr #3 {
entry:
  ret i32 -39
}

; Function Attrs: nounwind
define weak i32 @halide_buffer_copy_already_locked(i8* %user_context, %struct.halide_buffer_t* %src, %struct.halide_device_interface_t* %dst_device_interface, %struct.halide_buffer_t* %dst) local_unnamed_addr #0 {
entry:
  %c = alloca %"struct.Halide::Runtime::Internal::device_copy", align 8
  %tobool = icmp ne %struct.halide_device_interface_t* %dst_device_interface, null
  br i1 %tobool, label %land.lhs.true, label %if.end13

land.lhs.true:                                    ; preds = %entry
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !31
  %tobool1 = icmp eq %struct.halide_device_interface_t* %0, null
  %cmp = icmp eq %struct.halide_device_interface_t* %0, %dst_device_interface
  %or.cond = or i1 %tobool1, %cmp
  br i1 %or.cond, label %land.lhs.true5, label %if.then

if.then:                                          ; preds = %land.lhs.true
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.42, i32 0, i32 0)) #11
  br label %cleanup135

land.lhs.true5:                                   ; preds = %land.lhs.true
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 0
  %1 = load i64, i64* %device, align 8, !tbaa !29
  %tobool6 = icmp eq i64 %1, 0
  br i1 %tobool6, label %if.then7, label %if.end13

if.then7:                                         ; preds = %land.lhs.true5
  %call = tail call i32 @halide_device_malloc(i8* %user_context, %struct.halide_buffer_t* nonnull %dst, %struct.halide_device_interface_t* nonnull %dst_device_interface) #12
  %tobool10 = icmp eq i32 %call, 0
  br i1 %tobool10, label %if.end13, label %cleanup135

if.end13:                                         ; preds = %if.then7, %land.lhs.true5, %entry
  %device14 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 0
  %2 = load i64, i64* %device14, align 8, !tbaa !29
  %cmp15 = icmp eq i64 %2, 0
  %host22.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 2
  %.pre = load i8*, i8** %host22.phi.trans.insert, align 4, !tbaa !32
  br i1 %cmp15, label %land.end, label %land.rhs

land.rhs:                                         ; preds = %if.end13
  %cmp16 = icmp eq i8* %.pre, null
  br i1 %cmp16, label %land.end.thread258, label %land.end.thread

land.end.thread258:                               ; preds = %land.rhs
  %cmp20259 = icmp eq %struct.halide_device_interface_t* %dst_device_interface, null
  br label %land.end32

land.end.thread:                                  ; preds = %land.rhs
  %flags.i.i241 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 3
  %3 = load i64, i64* %flags.i.i241, align 8, !tbaa !33
  %and.i.i242 = and i64 %3, 1
  %cmp.i.i = icmp ne i64 %and.i.i242, 0
  %cmp20252 = icmp eq %struct.halide_device_interface_t* %dst_device_interface, null
  br label %land.rhs26

land.end:                                         ; preds = %if.end13
  %cmp20 = icmp eq %struct.halide_device_interface_t* %dst_device_interface, null
  %cmp23 = icmp eq i8* %.pre, null
  br i1 %cmp23, label %land.end32, label %land.end.land.rhs26_crit_edge

land.end.land.rhs26_crit_edge:                    ; preds = %land.end
  %flags.i.i246.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 3
  %.pre1 = load i64, i64* %flags.i.i246.phi.trans.insert, align 8, !tbaa !33
  br label %land.rhs26

land.rhs26:                                       ; preds = %land.end.land.rhs26_crit_edge, %land.end.thread
  %4 = phi i64 [ %3, %land.end.thread ], [ %.pre1, %land.end.land.rhs26_crit_edge ]
  %cmp20255 = phi i1 [ %cmp20252, %land.end.thread ], [ %cmp20, %land.end.land.rhs26_crit_edge ]
  %5 = phi i1 [ %cmp.i.i, %land.end.thread ], [ true, %land.end.land.rhs26_crit_edge ]
  %and.i.i247 = and i64 %4, 2
  %cmp.i.i248 = icmp eq i64 %and.i.i247, 0
  br i1 %cmp.i.i248, label %land.end32, label %lor.rhs28

lor.rhs28:                                        ; preds = %land.rhs26
  %device_interface29 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 1
  %6 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface29, align 8, !tbaa !31
  %cmp30 = icmp ne %struct.halide_device_interface_t* %6, null
  br label %land.end32

land.end32:                                       ; preds = %lor.rhs28, %land.rhs26, %land.end, %land.end.thread258
  %cmp23256 = phi i1 [ false, %land.end ], [ true, %land.rhs26 ], [ true, %lor.rhs28 ], [ false, %land.end.thread258 ]
  %cmp20254 = phi i1 [ %cmp20, %land.end ], [ %cmp20255, %land.rhs26 ], [ %cmp20255, %lor.rhs28 ], [ %cmp20259, %land.end.thread258 ]
  %7 = phi i1 [ true, %land.end ], [ %5, %land.rhs26 ], [ %5, %lor.rhs28 ], [ false, %land.end.thread258 ]
  %8 = phi i1 [ true, %land.end ], [ false, %land.rhs26 ], [ %cmp30, %lor.rhs28 ], [ true, %land.end.thread258 ]
  %host34 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 2
  %9 = load i8*, i8** %host34, align 4, !tbaa !32
  %cmp35 = icmp ne i8* %9, null
  %cmp20.not = xor i1 %cmp20254, true
  %brmerge = or i1 %cmp35, %cmp20.not
  br i1 %brmerge, label %if.end41, label %cleanup135

if.end41:                                         ; preds = %land.end32
  %tobool.not = xor i1 %tobool, true
  %brmerge228 = or i1 %7, %tobool.not
  br i1 %brmerge228, label %if.then51, label %if.end49

if.end49:                                         ; preds = %if.end41
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %dst_device_interface, i32 0, i32 15
  %10 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !46
  %buffer_copy = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %10, i32 0, i32 10
  %11 = load i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)** %buffer_copy, align 4, !tbaa !61
  %call48 = tail call i32 %11(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* nonnull %dst_device_interface, %struct.halide_buffer_t* nonnull %dst) #11
  %cmp50 = icmp eq i32 %call48, -42
  br i1 %cmp50, label %if.then51, label %if.end109

if.then51:                                        ; preds = %if.end49, %if.end41
  %brmerge229 = or i1 %cmp23256, %cmp35
  br i1 %brmerge229, label %if.end58, label %cleanup135

if.end58:                                         ; preds = %if.then51
  %brmerge232 = or i1 %8, %cmp20.not
  br i1 %brmerge232, label %if.else, label %if.end109.thread223

if.end109.thread223:                              ; preds = %if.end58
  %12 = bitcast %"struct.Halide::Runtime::Internal::device_copy"* %c to i8*
  call void @llvm.lifetime.start.p0i8(i64 416, i8* nonnull %12) #9
  call void @_ZN6Halide7Runtime8Internal16make_buffer_copyEPK15halide_buffer_tbS4_b(%"struct.Halide::Runtime::Internal::device_copy"* nonnull sret %c, %struct.halide_buffer_t* nonnull %src, i1 zeroext true, %struct.halide_buffer_t* nonnull %dst, i1 zeroext true) #12
  call void @_ZN6Halide7Runtime8Internal11copy_memoryERKNS1_11device_copyEPv(%"struct.Halide::Runtime::Internal::device_copy"* nonnull dereferenceable(416) %c, i8* %user_context) #12
  call void @llvm.lifetime.end.p0i8(i64 416, i8* nonnull %12) #9
  br label %land.lhs.true118

if.else:                                          ; preds = %if.end58
  br i1 %cmp20254, label %if.then64, label %if.else79

if.then64:                                        ; preds = %if.else
  %device_interface67 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 1
  %13 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface67, align 8, !tbaa !31
  %impl68 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %13, i32 0, i32 15
  %14 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl68, align 4, !tbaa !46
  %buffer_copy69 = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %14, i32 0, i32 10
  %15 = load i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)** %buffer_copy69, align 4, !tbaa !61
  %call70 = tail call i32 %15(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* null, %struct.halide_buffer_t* nonnull %dst) #11
  %cmp71 = icmp eq i32 %call70, -42
  br i1 %cmp71, label %if.then72, label %if.end109

if.then72:                                        ; preds = %if.then64
  %call73 = tail call i32 @_ZN6Halide7Runtime8Internal27copy_to_host_already_lockedEPvP15halide_buffer_t(i8* %user_context, %struct.halide_buffer_t* nonnull %src) #12
  %tobool74 = icmp eq i32 %call73, 0
  br i1 %tobool74, label %if.then75, label %cleanup135

if.then75:                                        ; preds = %if.then72
  %call76 = tail call i32 @halide_buffer_copy_already_locked(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* null, %struct.halide_buffer_t* nonnull %dst) #12
  br label %if.end109

if.else79:                                        ; preds = %if.else
  %cmp35.not = xor i1 %cmp35, true
  %brmerge234 = or i1 %7, %cmp35.not
  br i1 %brmerge234, label %if.else96, label %if.then83

if.then83:                                        ; preds = %if.else79
  %device_interface88 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 1
  %16 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface88, align 8, !tbaa !31
  %impl89 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %16, i32 0, i32 15
  %17 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl89, align 4, !tbaa !46
  %buffer_copy90 = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %17, i32 0, i32 10
  %18 = load i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)** %buffer_copy90, align 4, !tbaa !61
  %call91 = tail call i32 %18(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* null, %struct.halide_buffer_t* nonnull %dst) #11
  %cmp92 = icmp eq i32 %call91, 0
  br i1 %cmp92, label %if.then93, label %cleanup135

if.then93:                                        ; preds = %if.then83
  %flags.i.i243 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 3
  %19 = load i64, i64* %flags.i.i243, align 8, !tbaa !33
  %or.i.i244 = or i64 %19, 1
  store i64 %or.i.i244, i64* %flags.i.i243, align 8, !tbaa !33
  %call94 = tail call i32 @copy_to_device_already_locked(i8* %user_context, %struct.halide_buffer_t* nonnull %dst, %struct.halide_device_interface_t* nonnull %dst_device_interface) #12
  br label %if.end109

if.else96:                                        ; preds = %if.else79
  %call99 = tail call i32 @_ZN6Halide7Runtime8Internal27copy_to_host_already_lockedEPvP15halide_buffer_t(i8* %user_context, %struct.halide_buffer_t* nonnull %src) #12
  %cmp100 = icmp eq i32 %call99, 0
  br i1 %cmp100, label %if.then101, label %cleanup135

if.then101:                                       ; preds = %if.else96
  %impl102 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %dst_device_interface, i32 0, i32 15
  %20 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl102, align 4, !tbaa !46
  %buffer_copy103 = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %20, i32 0, i32 10
  %21 = load i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)** %buffer_copy103, align 4, !tbaa !61
  %call104 = tail call i32 %21(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* nonnull %dst_device_interface, %struct.halide_buffer_t* nonnull %dst) #11
  br label %if.end109

if.end109:                                        ; preds = %if.then101, %if.then93, %if.then75, %if.then64, %if.end49
  %err.1 = phi i32 [ %call76, %if.then75 ], [ %call70, %if.then64 ], [ %call94, %if.then93 ], [ %call104, %if.then101 ], [ %call48, %if.end49 ]
  %cmp110 = icmp eq i32 %err.1, 0
  br i1 %cmp110, label %land.lhs.true118, label %cleanup135

land.lhs.true118:                                 ; preds = %if.end109, %if.end109.thread223
  %cmp119 = icmp eq %struct.halide_buffer_t* %dst, %src
  br i1 %cmp119, label %cleanup135, label %if.then120

if.then120:                                       ; preds = %land.lhs.true118
  %flags.i.i238 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 3
  %22 = load i64, i64* %flags.i.i238, align 8, !tbaa !33
  %and.i.i240 = and i64 %22, -4
  %selv.v = select i1 %tobool, i64 2, i64 1
  %selv = or i64 %and.i.i240, %selv.v
  store i64 %selv, i64* %flags.i.i238, align 8, !tbaa !33
  br label %cleanup135

cleanup135:                                       ; preds = %if.then120, %land.lhs.true118, %if.end109, %if.else96, %if.then83, %if.then72, %if.then51, %land.end32, %if.then7, %if.then
  %retval.1 = phi i32 [ -42, %if.then ], [ %call, %if.then7 ], [ 0, %land.lhs.true118 ], [ -34, %land.end32 ], [ -42, %if.then51 ], [ %err.1, %if.end109 ], [ %call99, %if.else96 ], [ %call91, %if.then83 ], [ %call73, %if.then72 ], [ 0, %if.then120 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind
define weak i32 @halide_buffer_copy(i8* %user_context, %struct.halide_buffer_t* %src, %struct.halide_device_interface_t* %dst_device_interface, %struct.halide_buffer_t* %dst) local_unnamed_addr #0 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #11
  %tobool = icmp ne %struct.halide_device_interface_t* %dst_device_interface, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %dst_device_interface, i32 0, i32 15
  %0 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !46
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %0, i32 0, i32 0
  %1 = load void ()*, void ()** %use_module, align 4, !tbaa !52
  tail call void %1() #11
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 1
  %2 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !31
  %tobool11 = icmp eq %struct.halide_device_interface_t* %2, null
  br i1 %tobool11, label %if.end16, label %if.then12

if.then12:                                        ; preds = %if.end
  %impl14 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %2, i32 0, i32 15
  %3 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl14, align 4, !tbaa !46
  %use_module15 = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %3, i32 0, i32 0
  %4 = load void ()*, void ()** %use_module15, align 4, !tbaa !52
  tail call void %4() #11
  br label %if.end16

if.end16:                                         ; preds = %if.then12, %if.end
  %call = tail call i32 @halide_buffer_copy_already_locked(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* %dst_device_interface, %struct.halide_buffer_t* %dst) #12
  br i1 %tobool, label %if.then18, label %if.end20

if.then18:                                        ; preds = %if.end16
  %impl19 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %dst_device_interface, i32 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl19, align 4, !tbaa !46
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i32 0, i32 1
  %6 = load void ()*, void ()** %release_module, align 4, !tbaa !54
  tail call void %6() #11
  br label %if.end20

if.end20:                                         ; preds = %if.then18, %if.end16
  %7 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !31
  %tobool22 = icmp eq %struct.halide_device_interface_t* %7, null
  br i1 %tobool22, label %if.end27, label %if.then23

if.then23:                                        ; preds = %if.end20
  %impl25 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %7, i32 0, i32 15
  %8 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl25, align 4, !tbaa !46
  %release_module26 = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %8, i32 0, i32 1
  %9 = load void ()*, void ()** %release_module26, align 4, !tbaa !54
  tail call void %9() #11
  br label %if.end27

if.end27:                                         ; preds = %if.then23, %if.end20
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #11
  ret i32 %call
}

; Function Attrs: nounwind
define weak i32 @halide_default_device_crop(i8* %user_context, %struct.halide_buffer_t* %src, %struct.halide_buffer_t* %dst) local_unnamed_addr #0 {
entry:
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.58, i32 0, i32 0)) #11
  ret i32 -40
}

; Function Attrs: nounwind
define weak i32 @halide_default_device_slice(i8* %user_context, %struct.halide_buffer_t* %src, i32 %slice_dim, i32 %slice_pos, %struct.halide_buffer_t* %dst) local_unnamed_addr #0 {
entry:
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.59, i32 0, i32 0)) #11
  ret i32 -40
}

; Function Attrs: nounwind
define weak i32 @halide_device_crop(i8* %user_context, %struct.halide_buffer_t* %src, %struct.halide_buffer_t* %dst) local_unnamed_addr #0 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #11
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !29
  %tobool = icmp eq i64 %0, 0
  br i1 %tobool, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %device1 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 0
  %1 = load i64, i64* %device1, align 8, !tbaa !29
  %tobool2 = icmp eq i64 %1, 0
  br i1 %tobool2, label %if.end4, label %if.then3

if.then3:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.60, i32 0, i32 0)) #11
  br label %cleanup

if.end4:                                          ; preds = %if.end
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 8
  %2 = load i32, i32* %dimensions, align 4, !tbaa !34
  %dimensions5 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 8
  %3 = load i32, i32* %dimensions5, align 4, !tbaa !34
  %cmp = icmp eq i32 %2, %3
  br i1 %cmp, label %if.end7, label %if.then6

if.then6:                                         ; preds = %if.end4
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.61, i32 0, i32 0)) #11
  br label %cleanup

if.end7:                                          ; preds = %if.end4
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 1
  %4 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !31
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i32 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !46
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i32 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 4, !tbaa !52
  tail call void %6() #11
  %7 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !31
  %impl9 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %7, i32 0, i32 15
  %8 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl9, align 4, !tbaa !46
  %device_crop = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %8, i32 0, i32 11
  %9 = load i32 (i8*, %struct.halide_buffer_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_buffer_t*)** %device_crop, align 4, !tbaa !62
  %call = tail call i32 %9(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_buffer_t* nonnull %dst) #11
  br label %cleanup

cleanup:                                          ; preds = %if.end7, %if.then6, %if.then3, %entry
  %retval.0 = phi i32 [ -41, %if.then3 ], [ -41, %if.then6 ], [ %call, %if.end7 ], [ 0, %entry ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #11
  ret i32 %retval.0
}

; Function Attrs: nounwind
define weak i32 @halide_device_slice(i8* %user_context, %struct.halide_buffer_t* %src, i32 %slice_dim, i32 %slice_pos, %struct.halide_buffer_t* %dst) local_unnamed_addr #0 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #11
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !29
  %tobool = icmp eq i64 %0, 0
  br i1 %tobool, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %device1 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 0
  %1 = load i64, i64* %device1, align 8, !tbaa !29
  %tobool2 = icmp eq i64 %1, 0
  br i1 %tobool2, label %if.end4, label %if.then3

if.then3:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.60, i32 0, i32 0)) #11
  br label %cleanup

if.end4:                                          ; preds = %if.end
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 8
  %2 = load i32, i32* %dimensions, align 4, !tbaa !34
  %dimensions5 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i32 0, i32 8
  %3 = load i32, i32* %dimensions5, align 4, !tbaa !34
  %add = add nsw i32 %3, 1
  %cmp = icmp eq i32 %2, %add
  br i1 %cmp, label %if.end7, label %if.then6

if.then6:                                         ; preds = %if.end4
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.64, i32 0, i32 0)) #11
  br label %cleanup

if.end7:                                          ; preds = %if.end4
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i32 0, i32 1
  %4 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !31
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i32 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !46
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i32 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 4, !tbaa !52
  tail call void %6() #11
  %7 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !31
  %impl9 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %7, i32 0, i32 15
  %8 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl9, align 4, !tbaa !46
  %device_slice = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %8, i32 0, i32 12
  %9 = load i32 (i8*, %struct.halide_buffer_t*, i32, i32, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, i32, i32, %struct.halide_buffer_t*)** %device_slice, align 4, !tbaa !63
  %call = tail call i32 %9(i8* %user_context, %struct.halide_buffer_t* nonnull %src, i32 %slice_dim, i32 %slice_pos, %struct.halide_buffer_t* nonnull %dst) #11
  br label %cleanup

cleanup:                                          ; preds = %if.end7, %if.then6, %if.then3, %entry
  %retval.0 = phi i32 [ -41, %if.then3 ], [ -41, %if.then6 ], [ %call, %if.end7 ], [ 0, %entry ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #11
  ret i32 %retval.0
}

; Function Attrs: nounwind
define weak i32 @halide_default_device_release_crop(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !29
  %tobool = icmp eq i64 %0, 0
  br i1 %tobool, label %return, label %if.end

if.end:                                           ; preds = %entry
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.58, i32 0, i32 0)) #11
  br label %return

return:                                           ; preds = %if.end, %entry
  %retval.0 = phi i32 [ -40, %if.end ], [ 0, %entry ]
  ret i32 %retval.0
}

; Function Attrs: nounwind
define weak i32 @halide_device_release_crop(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !29
  %tobool = icmp eq i64 %0, 0
  br i1 %tobool, label %return, label %if.then

if.then:                                          ; preds = %entry
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #11
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i32 0, i32 1
  %1 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !31
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %1, i32 0, i32 15
  %2 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !46
  %device_release_crop = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %2, i32 0, i32 13
  %3 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_release_crop, align 4, !tbaa !64
  %call = tail call i32 %3(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #11
  store i64 0, i64* %device, align 8, !tbaa !29
  %4 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 4, !tbaa !46
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %4, i32 0, i32 1
  %5 = load void ()*, void ()** %release_module, align 4, !tbaa !54
  tail call void %5() #11
  store %struct.halide_device_interface_t* null, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !31
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #11
  br label %return

return:                                           ; preds = %if.then, %entry
  %retval.0 = phi i32 [ %call, %if.then ], [ 0, %entry ]
  ret i32 %retval.0
}

; Function Attrs: nounwind
define weak float @halide_float16_bits_to_float(i16 zeroext %bits) local_unnamed_addr #0 {
entry:
  %conv = zext i16 %bits to i32
  %and = shl nuw i32 %conv, 16
  %shl = and i32 %and, -2147483648
  %and2 = and i32 %conv, 1023
  %and4 = lshr i32 %conv, 10
  %0 = and i32 %and4, 31
  %cmp = icmp eq i32 %0, 0
  %cmp5 = icmp ne i32 %and2, 0
  %or.cond = and i1 %cmp5, %cmp
  br i1 %or.cond, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = tail call i32 @llvm.ctlz.i32(i32 %and2, i1 true), !range !65
  %sub6 = xor i32 %1, 31
  %shl7 = shl i32 1, %sub6
  %neg = xor i32 %shl7, -1
  %and8 = and i32 %and2, %neg
  %sub9 = sub nsw i32 23, %sub6
  %shl10 = shl i32 %and8, %sub9
  %add11 = shl nuw nsw i32 %sub6, 23
  %shl12 = add nuw nsw i32 %add11, 864026624
  br label %if.end28

if.else:                                          ; preds = %entry
  %shl14 = shl nuw nsw i32 %and2, 13
  br i1 %cmp, label %if.end28, label %if.else18

if.else18:                                        ; preds = %if.else
  %cmp19 = icmp eq i32 %0, 31
  %add22 = shl nuw nsw i32 %0, 23
  %add22.op = add nuw nsw i32 %add22, 939524096
  %phitmp = select i1 %cmp19, i32 2139095040, i32 %add22.op
  br label %if.end28

if.end28:                                         ; preds = %if.else18, %if.else, %if.then
  %shl14.sink = phi i32 [ %shl12, %if.then ], [ %shl14, %if.else ], [ %shl14, %if.else18 ]
  %reEncodedExponent15.0.sink = phi i32 [ %shl10, %if.then ], [ 0, %if.else ], [ %phitmp, %if.else18 ]
  %or25 = or i32 %shl14.sink, %shl
  %or26 = or i32 %or25, %reEncodedExponent15.0.sink
  %2 = bitcast i32 %or26 to float
  ret float %2
}

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.ctlz.i32(i32, i1) #6

; Function Attrs: nounwind
define weak double @halide_float16_bits_to_double(i16 zeroext %bits) local_unnamed_addr #0 {
entry:
  %call = tail call float @halide_float16_bits_to_float(i16 zeroext %bits) #12
  %conv = fpext float %call to double
  ret double %conv
}

; Function Attrs: norecurse nounwind
define weak i32 @halide_error_check_fault_and_return(i8* %user_context, i32 %err_code) local_unnamed_addr #3 {
entry:
  %sub = sub nsw i32 0, %err_code
  %shl = shl i32 1, %sub
  %conv = sext i32 %shl to i64
  %0 = load i64, i64* @halide_error_mask, align 8, !tbaa !22
  %and = and i64 %0, %conv
  %tobool = icmp eq i64 %and, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store volatile i32 -559038737, i32* null, align 536870912, !tbaa !10
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret i32 %err_code
}

; Function Attrs: nounwind
define weak i32 @halide_error_bounds_inference_call_failed(i8* %user_context, i8* %extern_stage_name, i32 %result) local_unnamed_addr #0 {
entry:
  %call.i = tail call i8* @halide_malloc(i8* %user_context, i32 1024) #11
  %0 = ptrtoint i8* %call.i to i32
  %tobool5.i = icmp eq i8* %call.i, null
  br i1 %tobool5.i, label %entry.split, label %if.then.i

entry.split:                                      ; preds = %entry
  %call5.i1 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* nonnull getelementptr inbounds ([41 x i8], [41 x i8]* @.str.37, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit

if.then.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !7
  %call5.i2 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* nonnull getelementptr inbounds ([41 x i8], [41 x i8]* @.str.37, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then.i
  %phi.call = phi i8* [ %call5.i1, %entry.split ], [ %call5.i2, %if.then.i ]
  %ref.tmp.sroa.13.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then.i ]
  %cmp.i = icmp eq i8* %extern_stage_name, null
  br i1 %cmp.i, label %if.then.i11, label %if.else.i13

if.then.i11:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit
  %call.i10 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.13.0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.78, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit

if.else.i13:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit
  %call5.i12 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.13.0, i8* nonnull %extern_stage_name) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit: ; preds = %if.else.i13, %if.then.i11
  %storemerge.i = phi i8* [ %call5.i12, %if.else.i13 ], [ %call.i10, %if.then.i11 ]
  %call5.i16 = tail call i8* @halide_string_to_string(i8* %storemerge.i, i8* %ref.tmp.sroa.13.0, i8* nonnull getelementptr inbounds ([27 x i8], [27 x i8]* @.str.1.38, i32 0, i32 0)) #11
  %conv.i = sext i32 %result to i64
  %call.i21 = tail call i8* @halide_int64_to_string(i8* %call5.i16, i8* %ref.tmp.sroa.13.0, i64 %conv.i, i32 1) #11
  br i1 %tobool5.i, label %if.then.i24, label %if.else.i25

if.then.i24:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.8.103, i32 0, i32 0)) #11
  tail call void @halide_free(i8* %user_context, i8* null) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit

if.else.i25:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit
  %1 = ptrtoint i8* %call.i21 to i32
  %sub.ptr.sub.i.i = sub i32 1, %0
  %add.i.i = add i32 %sub.ptr.sub.i.i, %1
  %conv.i.i = sext i32 %add.i.i to i64
  tail call void @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #11
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #11
  tail call void @halide_free(i8* %user_context, i8* nonnull %call.i) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit: ; preds = %if.else.i25, %if.then.i24
  ret i32 %result
}

; Function Attrs: nounwind
define weak i32 @halide_error_extern_stage_failed(i8* %user_context, i8* %extern_stage_name, i32 %result) local_unnamed_addr #0 {
entry:
  %call.i = tail call i8* @halide_malloc(i8* %user_context, i32 1024) #11
  %0 = ptrtoint i8* %call.i to i32
  %tobool5.i = icmp eq i8* %call.i, null
  br i1 %tobool5.i, label %entry.split, label %if.then.i

entry.split:                                      ; preds = %entry
  %call5.i1 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* nonnull getelementptr inbounds ([24 x i8], [24 x i8]* @.str.2.39, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit

if.then.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !7
  %call5.i2 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* nonnull getelementptr inbounds ([24 x i8], [24 x i8]* @.str.2.39, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then.i
  %phi.call = phi i8* [ %call5.i1, %entry.split ], [ %call5.i2, %if.then.i ]
  %ref.tmp.sroa.13.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then.i ]
  %cmp.i = icmp eq i8* %extern_stage_name, null
  br i1 %cmp.i, label %if.then.i11, label %if.else.i13

if.then.i11:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit
  %call.i10 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.13.0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.78, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit

if.else.i13:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit
  %call5.i12 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.13.0, i8* nonnull %extern_stage_name) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit: ; preds = %if.else.i13, %if.then.i11
  %storemerge.i = phi i8* [ %call5.i12, %if.else.i13 ], [ %call.i10, %if.then.i11 ]
  %call5.i16 = tail call i8* @halide_string_to_string(i8* %storemerge.i, i8* %ref.tmp.sroa.13.0, i8* nonnull getelementptr inbounds ([27 x i8], [27 x i8]* @.str.1.38, i32 0, i32 0)) #11
  %conv.i = sext i32 %result to i64
  %call.i21 = tail call i8* @halide_int64_to_string(i8* %call5.i16, i8* %ref.tmp.sroa.13.0, i64 %conv.i, i32 1) #11
  br i1 %tobool5.i, label %if.then.i24, label %if.else.i25

if.then.i24:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.8.103, i32 0, i32 0)) #11
  tail call void @halide_free(i8* %user_context, i8* null) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit

if.else.i25:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit
  %1 = ptrtoint i8* %call.i21 to i32
  %sub.ptr.sub.i.i = sub i32 1, %0
  %add.i.i = add i32 %sub.ptr.sub.i.i, %1
  %conv.i.i = sext i32 %add.i.i to i64
  tail call void @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #11
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #11
  tail call void @halide_free(i8* %user_context, i8* nonnull %call.i) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit: ; preds = %if.else.i25, %if.then.i24
  ret i32 %result
}

; Function Attrs: nounwind
define weak i32 @halide_error_explicit_bounds_too_small(i8* %user_context, i8* %func_name, i8* %var_name, i32 %min_bound, i32 %max_bound, i32 %min_required, i32 %max_required) local_unnamed_addr #0 {
entry:
  %call.i = tail call i8* @halide_malloc(i8* %user_context, i32 1024) #11
  %0 = ptrtoint i8* %call.i to i32
  %tobool5.i = icmp eq i8* %call.i, null
  br i1 %tobool5.i, label %entry.split, label %if.then.i

entry.split:                                      ; preds = %entry
  %call5.i1 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* nonnull getelementptr inbounds ([18 x i8], [18 x i8]* @.str.3.40, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit

if.then.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !7
  %call5.i2 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* nonnull getelementptr inbounds ([18 x i8], [18 x i8]* @.str.3.40, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then.i
  %phi.call = phi i8* [ %call5.i1, %entry.split ], [ %call5.i2, %if.then.i ]
  %ref.tmp.sroa.22.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then.i ]
  %cmp.i = icmp eq i8* %var_name, null
  br i1 %cmp.i, label %if.then.i21, label %if.else.i23

if.then.i21:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit
  %call.i20 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.78, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit

if.else.i23:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit
  %call5.i22 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.22.0, i8* nonnull %var_name) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit: ; preds = %if.else.i23, %if.then.i21
  %storemerge.i = phi i8* [ %call5.i22, %if.else.i23 ], [ %call.i20, %if.then.i21 ]
  %call5.i26 = tail call i8* @halide_string_to_string(i8* %storemerge.i, i8* %ref.tmp.sroa.22.0, i8* nonnull getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4.41, i32 0, i32 0)) #11
  %cmp.i29 = icmp eq i8* %func_name, null
  br i1 %cmp.i29, label %if.then.i33, label %if.else.i35

if.then.i33:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit
  %call.i32 = tail call i8* @halide_string_to_string(i8* %call5.i26, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.78, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit37

if.else.i35:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit
  %call5.i34 = tail call i8* @halide_string_to_string(i8* %call5.i26, i8* %ref.tmp.sroa.22.0, i8* nonnull %func_name) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit37

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit37: ; preds = %if.else.i35, %if.then.i33
  %storemerge.i36 = phi i8* [ %call5.i34, %if.else.i35 ], [ %call.i32, %if.then.i33 ]
  %call5.i40 = tail call i8* @halide_string_to_string(i8* %storemerge.i36, i8* %ref.tmp.sroa.22.0, i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.5.42, i32 0, i32 0)) #11
  %conv.i = sext i32 %min_bound to i64
  %call.i45 = tail call i8* @halide_int64_to_string(i8* %call5.i40, i8* %ref.tmp.sroa.22.0, i64 %conv.i, i32 1) #11
  %call5.i48 = tail call i8* @halide_string_to_string(i8* %call.i45, i8* %ref.tmp.sroa.22.0, i8* nonnull getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6.43, i32 0, i32 0)) #11
  %conv.i53 = sext i32 %max_bound to i64
  %call.i54 = tail call i8* @halide_int64_to_string(i8* %call5.i48, i8* %ref.tmp.sroa.22.0, i64 %conv.i53, i32 1) #11
  %call5.i57 = tail call i8* @halide_string_to_string(i8* %call.i54, i8* %ref.tmp.sroa.22.0, i8* nonnull getelementptr inbounds ([38 x i8], [38 x i8]* @.str.7.44, i32 0, i32 0)) #11
  %conv.i62 = sext i32 %min_required to i64
  %call.i63 = tail call i8* @halide_int64_to_string(i8* %call5.i57, i8* %ref.tmp.sroa.22.0, i64 %conv.i62, i32 1) #11
  %call5.i66 = tail call i8* @halide_string_to_string(i8* %call.i63, i8* %ref.tmp.sroa.22.0, i8* nonnull getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6.43, i32 0, i32 0)) #11
  %conv.i71 = sext i32 %max_required to i64
  %call.i72 = tail call i8* @halide_int64_to_string(i8* %call5.i66, i8* %ref.tmp.sroa.22.0, i64 %conv.i71, i32 1) #11
  %call5.i75 = tail call i8* @halide_string_to_string(i8* %call.i72, i8* %ref.tmp.sroa.22.0, i8* nonnull getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5.94, i32 0, i32 0)) #11
  br i1 %tobool5.i, label %if.then.i80, label %if.else.i81

if.then.i80:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit37
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.8.103, i32 0, i32 0)) #11
  tail call void @halide_free(i8* %user_context, i8* null) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit

if.else.i81:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit37
  %1 = ptrtoint i8* %call5.i75 to i32
  %sub.ptr.sub.i.i = sub i32 1, %0
  %add.i.i = add i32 %sub.ptr.sub.i.i, %1
  %conv.i.i = sext i32 %add.i.i to i64
  tail call void @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #11
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #11
  tail call void @halide_free(i8* %user_context, i8* nonnull %call.i) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit: ; preds = %if.else.i81, %if.then.i80
  %call13 = tail call i32 @halide_error_check_fault_and_return(i8* %user_context, i32 -2) #12
  ret i32 %call13
}

; Function Attrs: nounwind
define weak i32 @halide_error_bad_type(i8* %user_context, i8* %func_name, i8 zeroext %code_given, i8 zeroext %correct_code, i8 zeroext %bits_given, i8 zeroext %correct_bits, i16 zeroext %lanes_given, i16 zeroext %correct_lanes) local_unnamed_addr #0 {
entry:
  %correct_type = alloca %struct.halide_type_t, align 2
  %type_given = alloca %struct.halide_type_t, align 2
  %0 = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %correct_type, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %0) #9
  store i8 %correct_code, i8* %0, align 2, !tbaa !24
  %bits3.i = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %correct_type, i32 0, i32 1
  store i8 %correct_bits, i8* %bits3.i, align 1, !tbaa !27
  %lanes4.i = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %correct_type, i32 0, i32 2
  store i16 %correct_lanes, i16* %lanes4.i, align 2, !tbaa !28
  %1 = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %type_given, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %1) #9
  store i8 %code_given, i8* %1, align 2, !tbaa !24
  %bits3.i9 = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %type_given, i32 0, i32 1
  store i8 %bits_given, i8* %bits3.i9, align 1, !tbaa !27
  %lanes4.i10 = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %type_given, i32 0, i32 2
  store i16 %lanes_given, i16* %lanes4.i10, align 2, !tbaa !28
  %call.i = tail call i8* @halide_malloc(i8* %user_context, i32 1024) #11
  %2 = ptrtoint i8* %call.i to i32
  %tobool5.i = icmp eq i8* %call.i, null
  br i1 %tobool5.i, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit, label %if.then.i14

if.then.i14:                                      ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !7
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit: ; preds = %if.then.i14, %entry
  %ref.tmp.sroa.14.0 = phi i8* [ %add.ptr.i, %if.then.i14 ], [ null, %entry ]
  %cmp.i = icmp eq i8* %func_name, null
  br i1 %cmp.i, label %if.then.i20, label %if.else.i21

if.then.i20:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit
  %call.i19 = tail call i8* @halide_string_to_string(i8* %call.i, i8* %ref.tmp.sroa.14.0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.78, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit

if.else.i21:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit
  %call5.i = tail call i8* @halide_string_to_string(i8* %call.i, i8* %ref.tmp.sroa.14.0, i8* nonnull %func_name) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit: ; preds = %if.else.i21, %if.then.i20
  %storemerge.i = phi i8* [ %call5.i, %if.else.i21 ], [ %call.i19, %if.then.i20 ]
  %call5.i25 = tail call i8* @halide_string_to_string(i8* %storemerge.i, i8* %ref.tmp.sroa.14.0, i8* nonnull getelementptr inbounds ([11 x i8], [11 x i8]* @.str.9.46, i32 0, i32 0)) #11
  %call.i31 = call i8* @halide_type_to_string(i8* %call5.i25, i8* %ref.tmp.sroa.14.0, %struct.halide_type_t* nonnull %correct_type) #11
  %call5.i34 = call i8* @halide_string_to_string(i8* %call.i31, i8* %ref.tmp.sroa.14.0, i8* nonnull getelementptr inbounds ([38 x i8], [38 x i8]* @.str.10.47, i32 0, i32 0)) #11
  %call.i40 = call i8* @halide_type_to_string(i8* %call5.i34, i8* %ref.tmp.sroa.14.0, %struct.halide_type_t* nonnull %type_given) #11
  br i1 %tobool5.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit
  call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.8.103, i32 0, i32 0)) #11
  call void @halide_free(i8* %user_context, i8* null) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit
  %3 = ptrtoint i8* %call.i40 to i32
  %sub.ptr.sub.i.i = sub i32 1, %2
  %add.i.i = add i32 %sub.ptr.sub.i.i, %3
  %conv.i.i = sext i32 %add.i.i to i64
  call void @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #11
  call void @halide_error(i8* %user_context, i8* nonnull %call.i) #11
  call void @halide_free(i8* %user_context, i8* nonnull %call.i) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  %call6 = call i32 @halide_error_check_fault_and_return(i8* %user_context, i32 -3) #12
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1) #9
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %0) #9
  ret i32 %call6
}

; Function Attrs: nounwind
define weak i32 @halide_error_bad_dimensions(i8* %user_context, i8* %func_name, i32 %dimensions_given, i32 %correct_dimensions) local_unnamed_addr #0 {
entry:
  %call.i = tail call i8* @halide_malloc(i8* %user_context, i32 1024) #11
  %0 = ptrtoint i8* %call.i to i32
  %tobool5.i = icmp eq i8* %call.i, null
  br i1 %tobool5.i, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit, label %if.then.i

if.then.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !7
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit: ; preds = %if.then.i, %entry
  %ref.tmp.sroa.15.0 = phi i8* [ %add.ptr.i, %if.then.i ], [ null, %entry ]
  %cmp.i = icmp eq i8* %func_name, null
  br i1 %cmp.i, label %if.then.i11, label %if.else.i12

if.then.i11:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit
  %call.i10 = tail call i8* @halide_string_to_string(i8* %call.i, i8* %ref.tmp.sroa.15.0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.78, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit

if.else.i12:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit
  %call5.i = tail call i8* @halide_string_to_string(i8* %call.i, i8* %ref.tmp.sroa.15.0, i8* nonnull %func_name) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit: ; preds = %if.else.i12, %if.then.i11
  %storemerge.i = phi i8* [ %call5.i, %if.else.i12 ], [ %call.i10, %if.then.i11 ]
  %call5.i15 = tail call i8* @halide_string_to_string(i8* %storemerge.i, i8* %ref.tmp.sroa.15.0, i8* nonnull getelementptr inbounds ([31 x i8], [31 x i8]* @.str.11.48, i32 0, i32 0)) #11
  %conv.i = sext i32 %correct_dimensions to i64
  %call.i20 = tail call i8* @halide_int64_to_string(i8* %call5.i15, i8* %ref.tmp.sroa.15.0, i64 %conv.i, i32 1) #11
  %call5.i23 = tail call i8* @halide_string_to_string(i8* %call.i20, i8* %ref.tmp.sroa.15.0, i8* nonnull getelementptr inbounds ([43 x i8], [43 x i8]* @.str.12.49, i32 0, i32 0)) #11
  %conv.i28 = sext i32 %dimensions_given to i64
  %call.i29 = tail call i8* @halide_int64_to_string(i8* %call5.i23, i8* %ref.tmp.sroa.15.0, i64 %conv.i28, i32 1) #11
  %call5.i32 = tail call i8* @halide_string_to_string(i8* %call.i29, i8* %ref.tmp.sroa.15.0, i8* nonnull getelementptr inbounds ([12 x i8], [12 x i8]* @.str.13.50, i32 0, i32 0)) #11
  br i1 %tobool5.i, label %if.then.i37, label %if.else.i38

if.then.i37:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.8.103, i32 0, i32 0)) #11
  tail call void @halide_free(i8* %user_context, i8* null) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit

if.else.i38:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit
  %1 = ptrtoint i8* %call5.i32 to i32
  %sub.ptr.sub.i.i = sub i32 1, %0
  %add.i.i = add i32 %sub.ptr.sub.i.i, %1
  %conv.i.i = sext i32 %add.i.i to i64
  tail call void @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #11
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #11
  tail call void @halide_free(i8* %user_context, i8* nonnull %call.i) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit: ; preds = %if.else.i38, %if.then.i37
  %call6 = tail call i32 @halide_error_check_fault_and_return(i8* %user_context, i32 -43) #12
  ret i32 %call6
}

; Function Attrs: nounwind
define weak i32 @halide_error_access_out_of_bounds(i8* %user_context, i8* %func_name, i32 %dimension, i32 %min_touched, i32 %max_touched, i32 %min_valid, i32 %max_valid) local_unnamed_addr #0 {
entry:
  %cmp = icmp slt i32 %min_touched, %min_valid
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call.i = tail call i8* @halide_malloc(i8* %user_context, i32 1024) #11
  %0 = ptrtoint i8* %call.i to i32
  %tobool5.i = icmp eq i8* %call.i, null
  br i1 %tobool5.i, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit, label %if.then.i

if.then.i:                                        ; preds = %if.then
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !7
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit: ; preds = %if.then.i, %if.then
  %ref.tmp.sroa.16.0 = phi i8* [ %add.ptr.i, %if.then.i ], [ null, %if.then ]
  %cmp.i = icmp eq i8* %func_name, null
  br i1 %cmp.i, label %if.then.i30, label %if.else.i31

if.then.i30:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit
  %call.i29 = tail call i8* @halide_string_to_string(i8* %call.i, i8* %ref.tmp.sroa.16.0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.78, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit

if.else.i31:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit
  %call5.i = tail call i8* @halide_string_to_string(i8* %call.i, i8* %ref.tmp.sroa.16.0, i8* nonnull %func_name) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit: ; preds = %if.else.i31, %if.then.i30
  %storemerge.i = phi i8* [ %call5.i, %if.else.i31 ], [ %call.i29, %if.then.i30 ]
  %call5.i34 = tail call i8* @halide_string_to_string(i8* %storemerge.i, i8* %ref.tmp.sroa.16.0, i8* nonnull getelementptr inbounds ([17 x i8], [17 x i8]* @.str.14.51, i32 0, i32 0)) #11
  %conv.i = sext i32 %min_touched to i64
  %call.i39 = tail call i8* @halide_int64_to_string(i8* %call5.i34, i8* %ref.tmp.sroa.16.0, i64 %conv.i, i32 1) #11
  %call5.i42 = tail call i8* @halide_string_to_string(i8* %call.i39, i8* %ref.tmp.sroa.16.0, i8* nonnull getelementptr inbounds ([28 x i8], [28 x i8]* @.str.15.52, i32 0, i32 0)) #11
  %conv.i47 = sext i32 %min_valid to i64
  %call.i48 = tail call i8* @halide_int64_to_string(i8* %call5.i42, i8* %ref.tmp.sroa.16.0, i64 %conv.i47, i32 1) #11
  %call5.i51 = tail call i8* @halide_string_to_string(i8* %call.i48, i8* %ref.tmp.sroa.16.0, i8* nonnull getelementptr inbounds ([16 x i8], [16 x i8]* @.str.16.53, i32 0, i32 0)) #11
  %conv.i56 = sext i32 %dimension to i64
  %call.i57 = tail call i8* @halide_int64_to_string(i8* %call5.i51, i8* %ref.tmp.sroa.16.0, i64 %conv.i56, i32 1) #11
  br i1 %tobool5.i, label %if.then.i60, label %if.else.i61

if.then.i60:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.8.103, i32 0, i32 0)) #11
  tail call void @halide_free(i8* %user_context, i8* null) #11
  br label %if.end17

if.else.i61:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit
  %1 = ptrtoint i8* %call.i57 to i32
  %sub.ptr.sub.i.i = sub i32 1, %0
  %add.i.i = add i32 %sub.ptr.sub.i.i, %1
  %conv.i.i = sext i32 %add.i.i to i64
  tail call void @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #11
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #11
  tail call void @halide_free(i8* %user_context, i8* nonnull %call.i) #11
  br label %if.end17

if.else:                                          ; preds = %entry
  %cmp7 = icmp sgt i32 %max_touched, %max_valid
  br i1 %cmp7, label %if.then8, label %if.end17

if.then8:                                         ; preds = %if.else
  %call.i65 = tail call i8* @halide_malloc(i8* %user_context, i32 1024) #11
  %2 = ptrtoint i8* %call.i65 to i32
  %tobool5.i68 = icmp eq i8* %call.i65, null
  br i1 %tobool5.i68, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit75, label %if.then.i71

if.then.i71:                                      ; preds = %if.then8
  %add.ptr.i69 = getelementptr inbounds i8, i8* %call.i65, i32 1023
  store i8 0, i8* %add.ptr.i69, align 1, !tbaa !7
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit75

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit75: ; preds = %if.then.i71, %if.then8
  %ref.tmp9.sroa.16.0 = phi i8* [ %add.ptr.i69, %if.then.i71 ], [ null, %if.then8 ]
  %cmp.i76 = icmp eq i8* %func_name, null
  br i1 %cmp.i76, label %if.then.i80, label %if.else.i82

if.then.i80:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit75
  %call.i79 = tail call i8* @halide_string_to_string(i8* %call.i65, i8* %ref.tmp9.sroa.16.0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.78, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit85

if.else.i82:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit75
  %call5.i81 = tail call i8* @halide_string_to_string(i8* %call.i65, i8* %ref.tmp9.sroa.16.0, i8* nonnull %func_name) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit85

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit85: ; preds = %if.else.i82, %if.then.i80
  %storemerge.i83 = phi i8* [ %call5.i81, %if.else.i82 ], [ %call.i79, %if.then.i80 ]
  %call5.i88 = tail call i8* @halide_string_to_string(i8* %storemerge.i83, i8* %ref.tmp9.sroa.16.0, i8* nonnull getelementptr inbounds ([17 x i8], [17 x i8]* @.str.14.51, i32 0, i32 0)) #11
  %conv.i94 = sext i32 %max_touched to i64
  %call.i95 = tail call i8* @halide_int64_to_string(i8* %call5.i88, i8* %ref.tmp9.sroa.16.0, i64 %conv.i94, i32 1) #11
  %call5.i98 = tail call i8* @halide_string_to_string(i8* %call.i95, i8* %ref.tmp9.sroa.16.0, i8* nonnull getelementptr inbounds ([28 x i8], [28 x i8]* @.str.17.54, i32 0, i32 0)) #11
  %conv.i104 = sext i32 %max_valid to i64
  %call.i105 = tail call i8* @halide_int64_to_string(i8* %call5.i98, i8* %ref.tmp9.sroa.16.0, i64 %conv.i104, i32 1) #11
  %call5.i108 = tail call i8* @halide_string_to_string(i8* %call.i105, i8* %ref.tmp9.sroa.16.0, i8* nonnull getelementptr inbounds ([16 x i8], [16 x i8]* @.str.16.53, i32 0, i32 0)) #11
  %conv.i114 = sext i32 %dimension to i64
  %call.i115 = tail call i8* @halide_int64_to_string(i8* %call5.i108, i8* %ref.tmp9.sroa.16.0, i64 %conv.i114, i32 1) #11
  br i1 %tobool5.i68, label %if.then.i119, label %if.else.i125

if.then.i119:                                     ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit85
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.8.103, i32 0, i32 0)) #11
  tail call void @halide_free(i8* %user_context, i8* null) #11
  br label %if.end17

if.else.i125:                                     ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit85
  %3 = ptrtoint i8* %call.i115 to i32
  %sub.ptr.sub.i.i122 = sub i32 1, %2
  %add.i.i123 = add i32 %sub.ptr.sub.i.i122, %3
  %conv.i.i124 = sext i32 %add.i.i123 to i64
  tail call void @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i65, i64 %conv.i.i124) #11
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i65) #11
  tail call void @halide_free(i8* %user_context, i8* nonnull %call.i65) #11
  br label %if.end17

if.end17:                                         ; preds = %if.then.i119, %if.else.i125, %if.then.i60, %if.else.i61, %if.else
  %call18 = tail call i32 @halide_error_check_fault_and_return(i8* %user_context, i32 -4) #12
  ret i32 %call18
}

; Function Attrs: nounwind
define weak i32 @halide_error_buffer_allocation_too_large(i8* %user_context, i8* %buffer_name, i64 %allocation_size, i64 %max_size) local_unnamed_addr #0 {
entry:
  %call.i = tail call i8* @halide_malloc(i8* %user_context, i32 1024) #11
  %0 = ptrtoint i8* %call.i to i32
  %tobool5.i = icmp eq i8* %call.i, null
  br i1 %tobool5.i, label %entry.split, label %if.then.i

entry.split:                                      ; preds = %entry
  %call5.i1 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* nonnull getelementptr inbounds ([29 x i8], [29 x i8]* @.str.18.55, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit

if.then.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !7
  %call5.i2 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* nonnull getelementptr inbounds ([29 x i8], [29 x i8]* @.str.18.55, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then.i
  %phi.call = phi i8* [ %call5.i1, %entry.split ], [ %call5.i2, %if.then.i ]
  %ref.tmp.sroa.15.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then.i ]
  %cmp.i = icmp eq i8* %buffer_name, null
  br i1 %cmp.i, label %if.then.i14, label %if.else.i16

if.then.i14:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit
  %call.i13 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.15.0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.78, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit

if.else.i16:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit
  %call5.i15 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.15.0, i8* nonnull %buffer_name) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit: ; preds = %if.else.i16, %if.then.i14
  %storemerge.i = phi i8* [ %call5.i15, %if.else.i16 ], [ %call.i13, %if.then.i14 ]
  %call5.i19 = tail call i8* @halide_string_to_string(i8* %storemerge.i, i8* %ref.tmp.sroa.15.0, i8* nonnull getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.56, i32 0, i32 0)) #11
  %call.i24 = tail call i8* @halide_uint64_to_string(i8* %call5.i19, i8* %ref.tmp.sroa.15.0, i64 %allocation_size, i32 1) #11
  %call5.i27 = tail call i8* @halide_string_to_string(i8* %call.i24, i8* %ref.tmp.sroa.15.0, i8* nonnull getelementptr inbounds ([37 x i8], [37 x i8]* @.str.20.57, i32 0, i32 0)) #11
  %call.i32 = tail call i8* @halide_uint64_to_string(i8* %call5.i27, i8* %ref.tmp.sroa.15.0, i64 %max_size, i32 1) #11
  br i1 %tobool5.i, label %if.then.i35, label %if.else.i36

if.then.i35:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.8.103, i32 0, i32 0)) #11
  tail call void @halide_free(i8* %user_context, i8* null) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit

if.else.i36:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit
  %1 = ptrtoint i8* %call.i32 to i32
  %sub.ptr.sub.i.i = sub i32 1, %0
  %add.i.i = add i32 %sub.ptr.sub.i.i, %1
  %conv.i.i = sext i32 %add.i.i to i64
  tail call void @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #11
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #11
  tail call void @halide_free(i8* %user_context, i8* nonnull %call.i) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit: ; preds = %if.else.i36, %if.then.i35
  %call6 = tail call i32 @halide_error_check_fault_and_return(i8* %user_context, i32 -5) #12
  ret i32 %call6
}

; Function Attrs: nounwind
define weak i32 @halide_error_buffer_extents_negative(i8* %user_context, i8* %buffer_name, i32 %dimension, i32 %extent) local_unnamed_addr #0 {
entry:
  %call.i = tail call i8* @halide_malloc(i8* %user_context, i32 1024) #11
  %0 = ptrtoint i8* %call.i to i32
  %tobool5.i = icmp eq i8* %call.i, null
  br i1 %tobool5.i, label %entry.split, label %if.then.i

entry.split:                                      ; preds = %entry
  %call5.i1 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* nonnull getelementptr inbounds ([24 x i8], [24 x i8]* @.str.21.58, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit

if.then.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !7
  %call5.i2 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* nonnull getelementptr inbounds ([24 x i8], [24 x i8]* @.str.21.58, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then.i
  %phi.call = phi i8* [ %call5.i1, %entry.split ], [ %call5.i2, %if.then.i ]
  %ref.tmp.sroa.16.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then.i ]
  %cmp.i = icmp eq i8* %buffer_name, null
  br i1 %cmp.i, label %if.then.i15, label %if.else.i17

if.then.i15:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit
  %call.i14 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.16.0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.78, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit

if.else.i17:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit
  %call5.i16 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.16.0, i8* nonnull %buffer_name) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit: ; preds = %if.else.i17, %if.then.i15
  %storemerge.i = phi i8* [ %call5.i16, %if.else.i17 ], [ %call.i14, %if.then.i15 ]
  %call5.i20 = tail call i8* @halide_string_to_string(i8* %storemerge.i, i8* %ref.tmp.sroa.16.0, i8* nonnull getelementptr inbounds ([12 x i8], [12 x i8]* @.str.22.59, i32 0, i32 0)) #11
  %conv.i = sext i32 %dimension to i64
  %call.i25 = tail call i8* @halide_int64_to_string(i8* %call5.i20, i8* %ref.tmp.sroa.16.0, i64 %conv.i, i32 1) #11
  %call5.i28 = tail call i8* @halide_string_to_string(i8* %call.i25, i8* %ref.tmp.sroa.16.0, i8* nonnull getelementptr inbounds ([15 x i8], [15 x i8]* @.str.23.60, i32 0, i32 0)) #11
  %conv.i33 = sext i32 %extent to i64
  %call.i34 = tail call i8* @halide_int64_to_string(i8* %call5.i28, i8* %ref.tmp.sroa.16.0, i64 %conv.i33, i32 1) #11
  %call5.i37 = tail call i8* @halide_string_to_string(i8* %call.i34, i8* %ref.tmp.sroa.16.0, i8* nonnull getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5.94, i32 0, i32 0)) #11
  br i1 %tobool5.i, label %if.then.i42, label %if.else.i43

if.then.i42:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.8.103, i32 0, i32 0)) #11
  tail call void @halide_free(i8* %user_context, i8* null) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit

if.else.i43:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit
  %1 = ptrtoint i8* %call5.i37 to i32
  %sub.ptr.sub.i.i = sub i32 1, %0
  %add.i.i = add i32 %sub.ptr.sub.i.i, %1
  %conv.i.i = sext i32 %add.i.i to i64
  tail call void @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #11
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #11
  tail call void @halide_free(i8* %user_context, i8* nonnull %call.i) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit: ; preds = %if.else.i43, %if.then.i42
  %call7 = tail call i32 @halide_error_check_fault_and_return(i8* %user_context, i32 -28) #12
  ret i32 %call7
}

; Function Attrs: nounwind
define weak i32 @halide_error_buffer_extents_too_large(i8* %user_context, i8* %buffer_name, i64 %actual_size, i64 %max_size) local_unnamed_addr #0 {
entry:
  %call.i = tail call i8* @halide_malloc(i8* %user_context, i32 1024) #11
  %0 = ptrtoint i8* %call.i to i32
  %tobool5.i = icmp eq i8* %call.i, null
  br i1 %tobool5.i, label %entry.split, label %if.then.i

entry.split:                                      ; preds = %entry
  %call5.i1 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* nonnull getelementptr inbounds ([31 x i8], [31 x i8]* @.str.24.61, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit

if.then.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !7
  %call5.i2 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* nonnull getelementptr inbounds ([31 x i8], [31 x i8]* @.str.24.61, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then.i
  %phi.call = phi i8* [ %call5.i1, %entry.split ], [ %call5.i2, %if.then.i ]
  %ref.tmp.sroa.15.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then.i ]
  %cmp.i = icmp eq i8* %buffer_name, null
  br i1 %cmp.i, label %if.then.i14, label %if.else.i16

if.then.i14:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit
  %call.i13 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.15.0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.78, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit

if.else.i16:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit
  %call5.i15 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.15.0, i8* nonnull %buffer_name) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit: ; preds = %if.else.i16, %if.then.i14
  %storemerge.i = phi i8* [ %call5.i15, %if.else.i16 ], [ %call.i13, %if.then.i14 ]
  %call5.i19 = tail call i8* @halide_string_to_string(i8* %storemerge.i, i8* %ref.tmp.sroa.15.0, i8* nonnull getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.56, i32 0, i32 0)) #11
  %call.i24 = tail call i8* @halide_int64_to_string(i8* %call5.i19, i8* %ref.tmp.sroa.15.0, i64 %actual_size, i32 1) #11
  %call5.i27 = tail call i8* @halide_string_to_string(i8* %call.i24, i8* %ref.tmp.sroa.15.0, i8* nonnull getelementptr inbounds ([37 x i8], [37 x i8]* @.str.20.57, i32 0, i32 0)) #11
  %call.i32 = tail call i8* @halide_int64_to_string(i8* %call5.i27, i8* %ref.tmp.sroa.15.0, i64 %max_size, i32 1) #11
  br i1 %tobool5.i, label %if.then.i35, label %if.else.i36

if.then.i35:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.8.103, i32 0, i32 0)) #11
  tail call void @halide_free(i8* %user_context, i8* null) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit

if.else.i36:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit
  %1 = ptrtoint i8* %call.i32 to i32
  %sub.ptr.sub.i.i = sub i32 1, %0
  %add.i.i = add i32 %sub.ptr.sub.i.i, %1
  %conv.i.i = sext i32 %add.i.i to i64
  tail call void @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #11
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #11
  tail call void @halide_free(i8* %user_context, i8* nonnull %call.i) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit: ; preds = %if.else.i36, %if.then.i35
  %call6 = tail call i32 @halide_error_check_fault_and_return(i8* %user_context, i32 -6) #12
  ret i32 %call6
}

; Function Attrs: nounwind
define weak i32 @halide_error_constraints_make_required_region_smaller(i8* %user_context, i8* %buffer_name, i32 %dimension, i32 %constrained_min, i32 %constrained_extent, i32 %required_min, i32 %required_extent) local_unnamed_addr #0 {
entry:
  %add = add i32 %required_extent, -1
  %sub = add i32 %add, %required_min
  %sub2 = add i32 %add, %constrained_min
  %call.i = tail call i8* @halide_malloc(i8* %user_context, i32 1024) #11
  %0 = ptrtoint i8* %call.i to i32
  %tobool5.i = icmp eq i8* %call.i, null
  br i1 %tobool5.i, label %entry.split, label %if.then.i

entry.split:                                      ; preds = %entry
  %call5.i1 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* nonnull getelementptr inbounds ([29 x i8], [29 x i8]* @.str.25.62, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit

if.then.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !7
  %call5.i2 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* nonnull getelementptr inbounds ([29 x i8], [29 x i8]* @.str.25.62, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then.i
  %phi.call = phi i8* [ %call5.i1, %entry.split ], [ %call5.i2, %if.then.i ]
  %ref.tmp.sroa.22.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then.i ]
  %cmp.i = icmp eq i8* %buffer_name, null
  br i1 %cmp.i, label %if.then.i28, label %if.else.i30

if.then.i28:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit
  %call.i27 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.78, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit

if.else.i30:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit
  %call5.i29 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.22.0, i8* nonnull %buffer_name) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit: ; preds = %if.else.i30, %if.then.i28
  %storemerge.i = phi i8* [ %call5.i29, %if.else.i30 ], [ %call.i27, %if.then.i28 ]
  %call5.i33 = tail call i8* @halide_string_to_string(i8* %storemerge.i, i8* %ref.tmp.sroa.22.0, i8* nonnull getelementptr inbounds ([42 x i8], [42 x i8]* @.str.26.63, i32 0, i32 0)) #11
  %call5.i38 = tail call i8* @halide_string_to_string(i8* %call5.i33, i8* %ref.tmp.sroa.22.0, i8* nonnull getelementptr inbounds ([16 x i8], [16 x i8]* @.str.27.64, i32 0, i32 0)) #11
  %conv.i = sext i32 %required_min to i64
  %call.i43 = tail call i8* @halide_int64_to_string(i8* %call5.i38, i8* %ref.tmp.sroa.22.0, i64 %conv.i, i32 1) #11
  %call5.i46 = tail call i8* @halide_string_to_string(i8* %call.i43, i8* %ref.tmp.sroa.22.0, i8* nonnull getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6.43, i32 0, i32 0)) #11
  %conv.i51 = sext i32 %sub to i64
  %call.i52 = tail call i8* @halide_int64_to_string(i8* %call5.i46, i8* %ref.tmp.sroa.22.0, i64 %conv.i51, i32 1) #11
  %call5.i55 = tail call i8* @halide_string_to_string(i8* %call.i52, i8* %ref.tmp.sroa.22.0, i8* nonnull getelementptr inbounds ([3 x i8], [3 x i8]* @.str.28.65, i32 0, i32 0)) #11
  %call5.i60 = tail call i8* @halide_string_to_string(i8* %call5.i55, i8* %ref.tmp.sroa.22.0, i8* nonnull getelementptr inbounds ([19 x i8], [19 x i8]* @.str.29.66, i32 0, i32 0)) #11
  %conv.i65 = sext i32 %constrained_min to i64
  %call.i66 = tail call i8* @halide_int64_to_string(i8* %call5.i60, i8* %ref.tmp.sroa.22.0, i64 %conv.i65, i32 1) #11
  %call5.i69 = tail call i8* @halide_string_to_string(i8* %call.i66, i8* %ref.tmp.sroa.22.0, i8* nonnull getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6.43, i32 0, i32 0)) #11
  %conv.i74 = sext i32 %sub2 to i64
  %call.i75 = tail call i8* @halide_int64_to_string(i8* %call5.i69, i8* %ref.tmp.sroa.22.0, i64 %conv.i74, i32 1) #11
  %call5.i78 = tail call i8* @halide_string_to_string(i8* %call.i75, i8* %ref.tmp.sroa.22.0, i8* nonnull getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.67, i32 0, i32 0)) #11
  br i1 %tobool5.i, label %if.then.i83, label %if.else.i84

if.then.i83:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.8.103, i32 0, i32 0)) #11
  tail call void @halide_free(i8* %user_context, i8* null) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit

if.else.i84:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit
  %1 = ptrtoint i8* %call5.i78 to i32
  %sub.ptr.sub.i.i = sub i32 1, %0
  %add.i.i = add i32 %sub.ptr.sub.i.i, %1
  %conv.i.i = sext i32 %add.i.i to i64
  tail call void @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #11
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #11
  tail call void @halide_free(i8* %user_context, i8* nonnull %call.i) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit: ; preds = %if.else.i84, %if.then.i83
  %call15 = tail call i32 @halide_error_check_fault_and_return(i8* %user_context, i32 -7) #12
  ret i32 %call15
}

; Function Attrs: nounwind
define weak i32 @halide_error_constraint_violated(i8* %user_context, i8* %var, i32 %val, i8* %constrained_var, i32 %constrained_val) local_unnamed_addr #0 {
entry:
  %call.i = tail call i8* @halide_malloc(i8* %user_context, i32 1024) #11
  %0 = ptrtoint i8* %call.i to i32
  %tobool5.i = icmp eq i8* %call.i, null
  br i1 %tobool5.i, label %entry.split, label %if.then.i

entry.split:                                      ; preds = %entry
  %call5.i1 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* nonnull getelementptr inbounds ([22 x i8], [22 x i8]* @.str.31.68, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit

if.then.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !7
  %call5.i2 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* nonnull getelementptr inbounds ([22 x i8], [22 x i8]* @.str.31.68, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then.i
  %phi.call = phi i8* [ %call5.i1, %entry.split ], [ %call5.i2, %if.then.i ]
  %ref.tmp.sroa.18.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then.i ]
  %cmp.i = icmp eq i8* %var, null
  br i1 %cmp.i, label %if.then.i17, label %if.else.i19

if.then.i17:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit
  %call.i16 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.18.0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.78, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit

if.else.i19:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit
  %call5.i18 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.18.0, i8* nonnull %var) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit: ; preds = %if.else.i19, %if.then.i17
  %storemerge.i = phi i8* [ %call5.i18, %if.else.i19 ], [ %call.i16, %if.then.i17 ]
  %call5.i22 = tail call i8* @halide_string_to_string(i8* %storemerge.i, i8* %ref.tmp.sroa.18.0, i8* nonnull getelementptr inbounds ([3 x i8], [3 x i8]* @.str.32.69, i32 0, i32 0)) #11
  %conv.i = sext i32 %val to i64
  %call.i27 = tail call i8* @halide_int64_to_string(i8* %call5.i22, i8* %ref.tmp.sroa.18.0, i64 %conv.i, i32 1) #11
  %call5.i30 = tail call i8* @halide_string_to_string(i8* %call.i27, i8* %ref.tmp.sroa.18.0, i8* nonnull getelementptr inbounds ([6 x i8], [6 x i8]* @.str.33.70, i32 0, i32 0)) #11
  %cmp.i33 = icmp eq i8* %constrained_var, null
  br i1 %cmp.i33, label %if.then.i37, label %if.else.i39

if.then.i37:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit
  %call.i36 = tail call i8* @halide_string_to_string(i8* %call5.i30, i8* %ref.tmp.sroa.18.0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.78, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit41

if.else.i39:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit
  %call5.i38 = tail call i8* @halide_string_to_string(i8* %call5.i30, i8* %ref.tmp.sroa.18.0, i8* nonnull %constrained_var) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit41

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit41: ; preds = %if.else.i39, %if.then.i37
  %storemerge.i40 = phi i8* [ %call5.i38, %if.else.i39 ], [ %call.i36, %if.then.i37 ]
  %call5.i44 = tail call i8* @halide_string_to_string(i8* %storemerge.i40, i8* %ref.tmp.sroa.18.0, i8* nonnull getelementptr inbounds ([3 x i8], [3 x i8]* @.str.32.69, i32 0, i32 0)) #11
  %conv.i49 = sext i32 %constrained_val to i64
  %call.i50 = tail call i8* @halide_int64_to_string(i8* %call5.i44, i8* %ref.tmp.sroa.18.0, i64 %conv.i49, i32 1) #11
  %call5.i53 = tail call i8* @halide_string_to_string(i8* %call.i50, i8* %ref.tmp.sroa.18.0, i8* nonnull getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5.94, i32 0, i32 0)) #11
  br i1 %tobool5.i, label %if.then.i58, label %if.else.i59

if.then.i58:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit41
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.8.103, i32 0, i32 0)) #11
  tail call void @halide_free(i8* %user_context, i8* null) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit

if.else.i59:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit41
  %1 = ptrtoint i8* %call5.i53 to i32
  %sub.ptr.sub.i.i = sub i32 1, %0
  %add.i.i = add i32 %sub.ptr.sub.i.i, %1
  %conv.i.i = sext i32 %add.i.i to i64
  tail call void @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #11
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #11
  tail call void @halide_free(i8* %user_context, i8* nonnull %call.i) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit: ; preds = %if.else.i59, %if.then.i58
  %call9 = tail call i32 @halide_error_check_fault_and_return(i8* %user_context, i32 -8) #12
  ret i32 %call9
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_small_i64(i8* %user_context, i8* %param_name, i64 %val, i64 %min_val) local_unnamed_addr #0 {
entry:
  %call.i = tail call i8* @halide_malloc(i8* %user_context, i32 1024) #11
  %0 = ptrtoint i8* %call.i to i32
  %tobool5.i = icmp eq i8* %call.i, null
  br i1 %tobool5.i, label %entry.split, label %if.then.i

entry.split:                                      ; preds = %entry
  %call5.i1 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* nonnull getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.71, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit

if.then.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !7
  %call5.i2 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* nonnull getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.71, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then.i
  %phi.call = phi i8* [ %call5.i1, %entry.split ], [ %call5.i2, %if.then.i ]
  %ref.tmp.sroa.15.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then.i ]
  %cmp.i = icmp eq i8* %param_name, null
  br i1 %cmp.i, label %if.then.i14, label %if.else.i16

if.then.i14:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit
  %call.i13 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.15.0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.78, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit

if.else.i16:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit
  %call5.i15 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.15.0, i8* nonnull %param_name) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit: ; preds = %if.else.i16, %if.then.i14
  %storemerge.i = phi i8* [ %call5.i15, %if.else.i16 ], [ %call.i13, %if.then.i14 ]
  %call5.i19 = tail call i8* @halide_string_to_string(i8* %storemerge.i, i8* %ref.tmp.sroa.15.0, i8* nonnull getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.56, i32 0, i32 0)) #11
  %call.i24 = tail call i8* @halide_int64_to_string(i8* %call5.i19, i8* %ref.tmp.sroa.15.0, i64 %val, i32 1) #11
  %call5.i27 = tail call i8* @halide_string_to_string(i8* %call.i24, i8* %ref.tmp.sroa.15.0, i8* nonnull getelementptr inbounds ([23 x i8], [23 x i8]* @.str.35.72, i32 0, i32 0)) #11
  %call.i32 = tail call i8* @halide_int64_to_string(i8* %call5.i27, i8* %ref.tmp.sroa.15.0, i64 %min_val, i32 1) #11
  br i1 %tobool5.i, label %if.then.i35, label %if.else.i36

if.then.i35:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.8.103, i32 0, i32 0)) #11
  tail call void @halide_free(i8* %user_context, i8* null) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit

if.else.i36:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit
  %1 = ptrtoint i8* %call.i32 to i32
  %sub.ptr.sub.i.i = sub i32 1, %0
  %add.i.i = add i32 %sub.ptr.sub.i.i, %1
  %conv.i.i = sext i32 %add.i.i to i64
  tail call void @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #11
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #11
  tail call void @halide_free(i8* %user_context, i8* nonnull %call.i) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit: ; preds = %if.else.i36, %if.then.i35
  %call6 = tail call i32 @halide_error_check_fault_and_return(i8* %user_context, i32 -9) #12
  ret i32 %call6
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_small_u64(i8* %user_context, i8* %param_name, i64 %val, i64 %min_val) local_unnamed_addr #0 {
entry:
  %call.i = tail call i8* @halide_malloc(i8* %user_context, i32 1024) #11
  %0 = ptrtoint i8* %call.i to i32
  %tobool5.i = icmp eq i8* %call.i, null
  br i1 %tobool5.i, label %entry.split, label %if.then.i

entry.split:                                      ; preds = %entry
  %call5.i1 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* nonnull getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.71, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit

if.then.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !7
  %call5.i2 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* nonnull getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.71, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then.i
  %phi.call = phi i8* [ %call5.i1, %entry.split ], [ %call5.i2, %if.then.i ]
  %ref.tmp.sroa.15.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then.i ]
  %cmp.i = icmp eq i8* %param_name, null
  br i1 %cmp.i, label %if.then.i14, label %if.else.i16

if.then.i14:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit
  %call.i13 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.15.0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.78, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit

if.else.i16:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit
  %call5.i15 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.15.0, i8* nonnull %param_name) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit: ; preds = %if.else.i16, %if.then.i14
  %storemerge.i = phi i8* [ %call5.i15, %if.else.i16 ], [ %call.i13, %if.then.i14 ]
  %call5.i19 = tail call i8* @halide_string_to_string(i8* %storemerge.i, i8* %ref.tmp.sroa.15.0, i8* nonnull getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.56, i32 0, i32 0)) #11
  %call.i24 = tail call i8* @halide_uint64_to_string(i8* %call5.i19, i8* %ref.tmp.sroa.15.0, i64 %val, i32 1) #11
  %call5.i27 = tail call i8* @halide_string_to_string(i8* %call.i24, i8* %ref.tmp.sroa.15.0, i8* nonnull getelementptr inbounds ([23 x i8], [23 x i8]* @.str.35.72, i32 0, i32 0)) #11
  %call.i32 = tail call i8* @halide_uint64_to_string(i8* %call5.i27, i8* %ref.tmp.sroa.15.0, i64 %min_val, i32 1) #11
  br i1 %tobool5.i, label %if.then.i35, label %if.else.i36

if.then.i35:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.8.103, i32 0, i32 0)) #11
  tail call void @halide_free(i8* %user_context, i8* null) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit

if.else.i36:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit
  %1 = ptrtoint i8* %call.i32 to i32
  %sub.ptr.sub.i.i = sub i32 1, %0
  %add.i.i = add i32 %sub.ptr.sub.i.i, %1
  %conv.i.i = sext i32 %add.i.i to i64
  tail call void @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #11
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #11
  tail call void @halide_free(i8* %user_context, i8* nonnull %call.i) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit: ; preds = %if.else.i36, %if.then.i35
  %call6 = tail call i32 @halide_error_check_fault_and_return(i8* %user_context, i32 -9) #12
  ret i32 %call6
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_small_f64(i8* %user_context, i8* %param_name, double %val, double %min_val) local_unnamed_addr #0 {
entry:
  %call.i = tail call i8* @halide_malloc(i8* %user_context, i32 1024) #11
  %0 = ptrtoint i8* %call.i to i32
  %tobool5.i = icmp eq i8* %call.i, null
  br i1 %tobool5.i, label %entry.split, label %if.then.i

entry.split:                                      ; preds = %entry
  %call5.i1 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* nonnull getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.71, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit

if.then.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !7
  %call5.i2 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* nonnull getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.71, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then.i
  %phi.call = phi i8* [ %call5.i1, %entry.split ], [ %call5.i2, %if.then.i ]
  %ref.tmp.sroa.15.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then.i ]
  %cmp.i = icmp eq i8* %param_name, null
  br i1 %cmp.i, label %if.then.i14, label %if.else.i16

if.then.i14:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit
  %call.i13 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.15.0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.78, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit

if.else.i16:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit
  %call5.i15 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.15.0, i8* nonnull %param_name) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit: ; preds = %if.else.i16, %if.then.i14
  %storemerge.i = phi i8* [ %call5.i15, %if.else.i16 ], [ %call.i13, %if.then.i14 ]
  %call5.i19 = tail call i8* @halide_string_to_string(i8* %storemerge.i, i8* %ref.tmp.sroa.15.0, i8* nonnull getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.56, i32 0, i32 0)) #11
  %call.i24 = tail call i8* @halide_double_to_string(i8* %call5.i19, i8* %ref.tmp.sroa.15.0, double %val, i32 1) #11
  %call5.i27 = tail call i8* @halide_string_to_string(i8* %call.i24, i8* %ref.tmp.sroa.15.0, i8* nonnull getelementptr inbounds ([23 x i8], [23 x i8]* @.str.35.72, i32 0, i32 0)) #11
  %call.i32 = tail call i8* @halide_double_to_string(i8* %call5.i27, i8* %ref.tmp.sroa.15.0, double %min_val, i32 1) #11
  br i1 %tobool5.i, label %if.then.i35, label %if.else.i36

if.then.i35:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.8.103, i32 0, i32 0)) #11
  tail call void @halide_free(i8* %user_context, i8* null) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit

if.else.i36:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit
  %1 = ptrtoint i8* %call.i32 to i32
  %sub.ptr.sub.i.i = sub i32 1, %0
  %add.i.i = add i32 %sub.ptr.sub.i.i, %1
  %conv.i.i = sext i32 %add.i.i to i64
  tail call void @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #11
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #11
  tail call void @halide_free(i8* %user_context, i8* nonnull %call.i) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit: ; preds = %if.else.i36, %if.then.i35
  %call6 = tail call i32 @halide_error_check_fault_and_return(i8* %user_context, i32 -9) #12
  ret i32 %call6
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_large_i64(i8* %user_context, i8* %param_name, i64 %val, i64 %max_val) local_unnamed_addr #0 {
entry:
  %call.i = tail call i8* @halide_malloc(i8* %user_context, i32 1024) #11
  %0 = ptrtoint i8* %call.i to i32
  %tobool5.i = icmp eq i8* %call.i, null
  br i1 %tobool5.i, label %entry.split, label %if.then.i

entry.split:                                      ; preds = %entry
  %call5.i1 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* nonnull getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.71, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit

if.then.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !7
  %call5.i2 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* nonnull getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.71, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then.i
  %phi.call = phi i8* [ %call5.i1, %entry.split ], [ %call5.i2, %if.then.i ]
  %ref.tmp.sroa.15.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then.i ]
  %cmp.i = icmp eq i8* %param_name, null
  br i1 %cmp.i, label %if.then.i14, label %if.else.i16

if.then.i14:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit
  %call.i13 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.15.0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.78, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit

if.else.i16:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit
  %call5.i15 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.15.0, i8* nonnull %param_name) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit: ; preds = %if.else.i16, %if.then.i14
  %storemerge.i = phi i8* [ %call5.i15, %if.else.i16 ], [ %call.i13, %if.then.i14 ]
  %call5.i19 = tail call i8* @halide_string_to_string(i8* %storemerge.i, i8* %ref.tmp.sroa.15.0, i8* nonnull getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.56, i32 0, i32 0)) #11
  %call.i24 = tail call i8* @halide_int64_to_string(i8* %call5.i19, i8* %ref.tmp.sroa.15.0, i64 %val, i32 1) #11
  %call5.i27 = tail call i8* @halide_string_to_string(i8* %call.i24, i8* %ref.tmp.sroa.15.0, i8* nonnull getelementptr inbounds ([22 x i8], [22 x i8]* @.str.36.73, i32 0, i32 0)) #11
  %call.i32 = tail call i8* @halide_int64_to_string(i8* %call5.i27, i8* %ref.tmp.sroa.15.0, i64 %max_val, i32 1) #11
  br i1 %tobool5.i, label %if.then.i35, label %if.else.i36

if.then.i35:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.8.103, i32 0, i32 0)) #11
  tail call void @halide_free(i8* %user_context, i8* null) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit

if.else.i36:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit
  %1 = ptrtoint i8* %call.i32 to i32
  %sub.ptr.sub.i.i = sub i32 1, %0
  %add.i.i = add i32 %sub.ptr.sub.i.i, %1
  %conv.i.i = sext i32 %add.i.i to i64
  tail call void @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #11
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #11
  tail call void @halide_free(i8* %user_context, i8* nonnull %call.i) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit: ; preds = %if.else.i36, %if.then.i35
  %call6 = tail call i32 @halide_error_check_fault_and_return(i8* %user_context, i32 -10) #12
  ret i32 %call6
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_large_u64(i8* %user_context, i8* %param_name, i64 %val, i64 %max_val) local_unnamed_addr #0 {
entry:
  %call.i = tail call i8* @halide_malloc(i8* %user_context, i32 1024) #11
  %0 = ptrtoint i8* %call.i to i32
  %tobool5.i = icmp eq i8* %call.i, null
  br i1 %tobool5.i, label %entry.split, label %if.then.i

entry.split:                                      ; preds = %entry
  %call5.i1 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* nonnull getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.71, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit

if.then.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !7
  %call5.i2 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* nonnull getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.71, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then.i
  %phi.call = phi i8* [ %call5.i1, %entry.split ], [ %call5.i2, %if.then.i ]
  %ref.tmp.sroa.15.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then.i ]
  %cmp.i = icmp eq i8* %param_name, null
  br i1 %cmp.i, label %if.then.i14, label %if.else.i16

if.then.i14:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit
  %call.i13 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.15.0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.78, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit

if.else.i16:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit
  %call5.i15 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.15.0, i8* nonnull %param_name) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit: ; preds = %if.else.i16, %if.then.i14
  %storemerge.i = phi i8* [ %call5.i15, %if.else.i16 ], [ %call.i13, %if.then.i14 ]
  %call5.i19 = tail call i8* @halide_string_to_string(i8* %storemerge.i, i8* %ref.tmp.sroa.15.0, i8* nonnull getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.56, i32 0, i32 0)) #11
  %call.i24 = tail call i8* @halide_uint64_to_string(i8* %call5.i19, i8* %ref.tmp.sroa.15.0, i64 %val, i32 1) #11
  %call5.i27 = tail call i8* @halide_string_to_string(i8* %call.i24, i8* %ref.tmp.sroa.15.0, i8* nonnull getelementptr inbounds ([22 x i8], [22 x i8]* @.str.36.73, i32 0, i32 0)) #11
  %call.i32 = tail call i8* @halide_uint64_to_string(i8* %call5.i27, i8* %ref.tmp.sroa.15.0, i64 %max_val, i32 1) #11
  br i1 %tobool5.i, label %if.then.i35, label %if.else.i36

if.then.i35:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.8.103, i32 0, i32 0)) #11
  tail call void @halide_free(i8* %user_context, i8* null) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit

if.else.i36:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit
  %1 = ptrtoint i8* %call.i32 to i32
  %sub.ptr.sub.i.i = sub i32 1, %0
  %add.i.i = add i32 %sub.ptr.sub.i.i, %1
  %conv.i.i = sext i32 %add.i.i to i64
  tail call void @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #11
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #11
  tail call void @halide_free(i8* %user_context, i8* nonnull %call.i) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit: ; preds = %if.else.i36, %if.then.i35
  %call6 = tail call i32 @halide_error_check_fault_and_return(i8* %user_context, i32 -10) #12
  ret i32 %call6
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_large_f64(i8* %user_context, i8* %param_name, double %val, double %max_val) local_unnamed_addr #0 {
entry:
  %call.i = tail call i8* @halide_malloc(i8* %user_context, i32 1024) #11
  %0 = ptrtoint i8* %call.i to i32
  %tobool5.i = icmp eq i8* %call.i, null
  br i1 %tobool5.i, label %entry.split, label %if.then.i

entry.split:                                      ; preds = %entry
  %call5.i1 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* nonnull getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.71, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit

if.then.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !7
  %call5.i2 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* nonnull getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.71, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then.i
  %phi.call = phi i8* [ %call5.i1, %entry.split ], [ %call5.i2, %if.then.i ]
  %ref.tmp.sroa.15.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then.i ]
  %cmp.i = icmp eq i8* %param_name, null
  br i1 %cmp.i, label %if.then.i14, label %if.else.i16

if.then.i14:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit
  %call.i13 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.15.0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.78, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit

if.else.i16:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit
  %call5.i15 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.15.0, i8* nonnull %param_name) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit: ; preds = %if.else.i16, %if.then.i14
  %storemerge.i = phi i8* [ %call5.i15, %if.else.i16 ], [ %call.i13, %if.then.i14 ]
  %call5.i19 = tail call i8* @halide_string_to_string(i8* %storemerge.i, i8* %ref.tmp.sroa.15.0, i8* nonnull getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.56, i32 0, i32 0)) #11
  %call.i24 = tail call i8* @halide_double_to_string(i8* %call5.i19, i8* %ref.tmp.sroa.15.0, double %val, i32 1) #11
  %call5.i27 = tail call i8* @halide_string_to_string(i8* %call.i24, i8* %ref.tmp.sroa.15.0, i8* nonnull getelementptr inbounds ([22 x i8], [22 x i8]* @.str.36.73, i32 0, i32 0)) #11
  %call.i32 = tail call i8* @halide_double_to_string(i8* %call5.i27, i8* %ref.tmp.sroa.15.0, double %max_val, i32 1) #11
  br i1 %tobool5.i, label %if.then.i35, label %if.else.i36

if.then.i35:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.8.103, i32 0, i32 0)) #11
  tail call void @halide_free(i8* %user_context, i8* null) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit

if.else.i36:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit
  %1 = ptrtoint i8* %call.i32 to i32
  %sub.ptr.sub.i.i = sub i32 1, %0
  %add.i.i = add i32 %sub.ptr.sub.i.i, %1
  %conv.i.i = sext i32 %add.i.i to i64
  tail call void @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #11
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #11
  tail call void @halide_free(i8* %user_context, i8* nonnull %call.i) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit: ; preds = %if.else.i36, %if.then.i35
  %call6 = tail call i32 @halide_error_check_fault_and_return(i8* %user_context, i32 -10) #12
  ret i32 %call6
}

; Function Attrs: nounwind
define weak i32 @halide_error_out_of_memory(i8* %user_context) local_unnamed_addr #0 {
entry:
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.37.74, i32 0, i32 0)) #11
  %call = tail call i32 @halide_error_check_fault_and_return(i8* %user_context, i32 -11) #12
  ret i32 %call
}

; Function Attrs: nounwind
define weak i32 @halide_error_vtcm_out_of_memory(i8* %user_context) local_unnamed_addr #0 {
entry:
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.38, i32 0, i32 0)) #11
  %call = tail call i32 @halide_error_check_fault_and_return(i8* %user_context, i32 -45) #12
  ret i32 %call
}

; Function Attrs: nounwind
define weak i32 @halide_error_locked_cache_out_of_memory(i8* %user_context) local_unnamed_addr #0 {
entry:
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.39, i32 0, i32 0)) #11
  %call = tail call i32 @halide_error_check_fault_and_return(i8* %user_context, i32 -46) #12
  ret i32 %call
}

; Function Attrs: nounwind
define weak i32 @halide_error_gpu_shared_out_of_memory(i8* %user_context) local_unnamed_addr #0 {
entry:
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.40, i32 0, i32 0)) #11
  %call = tail call i32 @halide_error_check_fault_and_return(i8* %user_context, i32 -47) #12
  ret i32 %call
}

; Function Attrs: nounwind
define weak i32 @halide_error_buffer_argument_is_null(i8* %user_context, i8* %buffer_name) local_unnamed_addr #0 {
entry:
  %call.i = tail call i8* @halide_malloc(i8* %user_context, i32 1024) #11
  %0 = ptrtoint i8* %call.i to i32
  %tobool5.i = icmp eq i8* %call.i, null
  br i1 %tobool5.i, label %entry.split, label %if.then.i

entry.split:                                      ; preds = %entry
  %call5.i1 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* nonnull getelementptr inbounds ([17 x i8], [17 x i8]* @.str.41, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit

if.then.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !7
  %call5.i2 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* nonnull getelementptr inbounds ([17 x i8], [17 x i8]* @.str.41, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then.i
  %phi.call = phi i8* [ %call5.i1, %entry.split ], [ %call5.i2, %if.then.i ]
  %ref.tmp.sroa.12.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then.i ]
  %cmp.i = icmp eq i8* %buffer_name, null
  br i1 %cmp.i, label %if.then.i11, label %if.else.i13

if.then.i11:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit
  %call.i10 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.12.0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.78, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit

if.else.i13:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit
  %call5.i12 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.12.0, i8* nonnull %buffer_name) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit: ; preds = %if.else.i13, %if.then.i11
  %storemerge.i = phi i8* [ %call5.i12, %if.else.i13 ], [ %call.i10, %if.then.i11 ]
  %call5.i16 = tail call i8* @halide_string_to_string(i8* %storemerge.i, i8* %ref.tmp.sroa.12.0, i8* nonnull getelementptr inbounds ([9 x i8], [9 x i8]* @.str.42.75, i32 0, i32 0)) #11
  br i1 %tobool5.i, label %if.then.i21, label %if.else.i22

if.then.i21:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.8.103, i32 0, i32 0)) #11
  tail call void @halide_free(i8* %user_context, i8* null) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit

if.else.i22:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit
  %1 = ptrtoint i8* %call5.i16 to i32
  %sub.ptr.sub.i.i = sub i32 1, %0
  %add.i.i = add i32 %sub.ptr.sub.i.i, %1
  %conv.i.i = sext i32 %add.i.i to i64
  tail call void @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #11
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #11
  tail call void @halide_free(i8* %user_context, i8* nonnull %call.i) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit: ; preds = %if.else.i22, %if.then.i21
  %call3 = tail call i32 @halide_error_check_fault_and_return(i8* %user_context, i32 -12) #12
  ret i32 %call3
}

; Function Attrs: nounwind
define weak i32 @halide_error_debug_to_file_failed(i8* %user_context, i8* %func, i8* %filename, i32 %error_code) local_unnamed_addr #0 {
entry:
  %call.i = tail call i8* @halide_malloc(i8* %user_context, i32 1024) #11
  %0 = ptrtoint i8* %call.i to i32
  %tobool5.i = icmp eq i8* %call.i, null
  br i1 %tobool5.i, label %entry.split, label %if.then.i

entry.split:                                      ; preds = %entry
  %call5.i1 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* nonnull getelementptr inbounds ([25 x i8], [25 x i8]* @.str.43, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit

if.then.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !7
  %call5.i2 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* nonnull getelementptr inbounds ([25 x i8], [25 x i8]* @.str.43, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then.i
  %phi.call = phi i8* [ %call5.i1, %entry.split ], [ %call5.i2, %if.then.i ]
  %ref.tmp.sroa.15.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then.i ]
  %cmp.i = icmp eq i8* %func, null
  br i1 %cmp.i, label %if.then.i14, label %if.else.i16

if.then.i14:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit
  %call.i13 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.15.0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.78, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit

if.else.i16:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit
  %call5.i15 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.15.0, i8* nonnull %func) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit: ; preds = %if.else.i16, %if.then.i14
  %storemerge.i = phi i8* [ %call5.i15, %if.else.i16 ], [ %call.i13, %if.then.i14 ]
  %call5.i19 = tail call i8* @halide_string_to_string(i8* %storemerge.i, i8* %ref.tmp.sroa.15.0, i8* nonnull getelementptr inbounds ([10 x i8], [10 x i8]* @.str.44, i32 0, i32 0)) #11
  %cmp.i22 = icmp eq i8* %filename, null
  br i1 %cmp.i22, label %if.then.i26, label %if.else.i28

if.then.i26:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit
  %call.i25 = tail call i8* @halide_string_to_string(i8* %call5.i19, i8* %ref.tmp.sroa.15.0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.78, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit30

if.else.i28:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit
  %call5.i27 = tail call i8* @halide_string_to_string(i8* %call5.i19, i8* %ref.tmp.sroa.15.0, i8* nonnull %filename) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit30

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit30: ; preds = %if.else.i28, %if.then.i26
  %storemerge.i29 = phi i8* [ %call5.i27, %if.else.i28 ], [ %call.i25, %if.then.i26 ]
  %call5.i33 = tail call i8* @halide_string_to_string(i8* %storemerge.i29, i8* %ref.tmp.sroa.15.0, i8* nonnull getelementptr inbounds ([13 x i8], [13 x i8]* @.str.45, i32 0, i32 0)) #11
  %conv.i = sext i32 %error_code to i64
  %call.i38 = tail call i8* @halide_int64_to_string(i8* %call5.i33, i8* %ref.tmp.sroa.15.0, i64 %conv.i, i32 1) #11
  br i1 %tobool5.i, label %if.then.i41, label %if.else.i42

if.then.i41:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit30
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.8.103, i32 0, i32 0)) #11
  tail call void @halide_free(i8* %user_context, i8* null) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit

if.else.i42:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit30
  %1 = ptrtoint i8* %call.i38 to i32
  %sub.ptr.sub.i.i = sub i32 1, %0
  %add.i.i = add i32 %sub.ptr.sub.i.i, %1
  %conv.i.i = sext i32 %add.i.i to i64
  tail call void @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #11
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #11
  tail call void @halide_free(i8* %user_context, i8* nonnull %call.i) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit: ; preds = %if.else.i42, %if.then.i41
  %call6 = tail call i32 @halide_error_check_fault_and_return(i8* %user_context, i32 -13) #12
  ret i32 %call6
}

; Function Attrs: nounwind
define weak i32 @halide_error_failed_to_upgrade_buffer_t(i8* %user_context, i8* %name, i8* %reason) local_unnamed_addr #0 {
entry:
  %call.i = tail call i8* @halide_malloc(i8* %user_context, i32 1024) #11
  %0 = ptrtoint i8* %call.i to i32
  %tobool5.i = icmp eq i8* %call.i, null
  br i1 %tobool5.i, label %entry.split, label %if.then.i

entry.split:                                      ; preds = %entry
  %call5.i1 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* nonnull getelementptr inbounds ([51 x i8], [51 x i8]* @.str.46, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit

if.then.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !7
  %call5.i2 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* nonnull getelementptr inbounds ([51 x i8], [51 x i8]* @.str.46, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then.i
  %phi.call = phi i8* [ %call5.i1, %entry.split ], [ %call5.i2, %if.then.i ]
  %ref.tmp.sroa.13.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then.i ]
  %cmp.i = icmp eq i8* %name, null
  br i1 %cmp.i, label %if.then.i12, label %if.else.i14

if.then.i12:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.13.0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.78, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit

if.else.i14:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit
  %call5.i13 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.13.0, i8* nonnull %name) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit: ; preds = %if.else.i14, %if.then.i12
  %storemerge.i = phi i8* [ %call5.i13, %if.else.i14 ], [ %call.i11, %if.then.i12 ]
  %call5.i17 = tail call i8* @halide_string_to_string(i8* %storemerge.i, i8* %ref.tmp.sroa.13.0, i8* nonnull getelementptr inbounds ([3 x i8], [3 x i8]* @.str.47, i32 0, i32 0)) #11
  %cmp.i20 = icmp eq i8* %reason, null
  br i1 %cmp.i20, label %if.then.i24, label %if.else.i26

if.then.i24:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit
  %call.i23 = tail call i8* @halide_string_to_string(i8* %call5.i17, i8* %ref.tmp.sroa.13.0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.78, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit28

if.else.i26:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit
  %call5.i25 = tail call i8* @halide_string_to_string(i8* %call5.i17, i8* %ref.tmp.sroa.13.0, i8* nonnull %reason) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit28

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit28: ; preds = %if.else.i26, %if.then.i24
  %storemerge.i27 = phi i8* [ %call5.i25, %if.else.i26 ], [ %call.i23, %if.then.i24 ]
  br i1 %tobool5.i, label %if.then.i31, label %if.else.i32

if.then.i31:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit28
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.8.103, i32 0, i32 0)) #11
  tail call void @halide_free(i8* %user_context, i8* null) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit

if.else.i32:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit28
  %1 = ptrtoint i8* %storemerge.i27 to i32
  %sub.ptr.sub.i.i = sub i32 1, %0
  %add.i.i = add i32 %sub.ptr.sub.i.i, %1
  %conv.i.i = sext i32 %add.i.i to i64
  tail call void @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #11
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #11
  tail call void @halide_free(i8* %user_context, i8* nonnull %call.i) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit: ; preds = %if.else.i32, %if.then.i31
  %call4 = tail call i32 @halide_error_check_fault_and_return(i8* %user_context, i32 -29) #12
  ret i32 %call4
}

; Function Attrs: nounwind
define weak i32 @halide_error_failed_to_downgrade_buffer_t(i8* %user_context, i8* %name, i8* %reason) local_unnamed_addr #0 {
entry:
  %call.i = tail call i8* @halide_malloc(i8* %user_context, i32 1024) #11
  %0 = ptrtoint i8* %call.i to i32
  %tobool5.i = icmp eq i8* %call.i, null
  br i1 %tobool5.i, label %entry.split, label %if.then.i

entry.split:                                      ; preds = %entry
  %call5.i1 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* nonnull getelementptr inbounds ([53 x i8], [53 x i8]* @.str.48, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit

if.then.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !7
  %call5.i2 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* nonnull getelementptr inbounds ([53 x i8], [53 x i8]* @.str.48, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then.i
  %phi.call = phi i8* [ %call5.i1, %entry.split ], [ %call5.i2, %if.then.i ]
  %ref.tmp.sroa.13.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then.i ]
  %cmp.i = icmp eq i8* %name, null
  br i1 %cmp.i, label %if.then.i12, label %if.else.i14

if.then.i12:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.13.0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.78, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit

if.else.i14:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit
  %call5.i13 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.13.0, i8* nonnull %name) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit: ; preds = %if.else.i14, %if.then.i12
  %storemerge.i = phi i8* [ %call5.i13, %if.else.i14 ], [ %call.i11, %if.then.i12 ]
  %call5.i17 = tail call i8* @halide_string_to_string(i8* %storemerge.i, i8* %ref.tmp.sroa.13.0, i8* nonnull getelementptr inbounds ([3 x i8], [3 x i8]* @.str.47, i32 0, i32 0)) #11
  %cmp.i20 = icmp eq i8* %reason, null
  br i1 %cmp.i20, label %if.then.i24, label %if.else.i26

if.then.i24:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit
  %call.i23 = tail call i8* @halide_string_to_string(i8* %call5.i17, i8* %ref.tmp.sroa.13.0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.78, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit28

if.else.i26:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit
  %call5.i25 = tail call i8* @halide_string_to_string(i8* %call5.i17, i8* %ref.tmp.sroa.13.0, i8* nonnull %reason) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit28

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit28: ; preds = %if.else.i26, %if.then.i24
  %storemerge.i27 = phi i8* [ %call5.i25, %if.else.i26 ], [ %call.i23, %if.then.i24 ]
  br i1 %tobool5.i, label %if.then.i31, label %if.else.i32

if.then.i31:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit28
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.8.103, i32 0, i32 0)) #11
  tail call void @halide_free(i8* %user_context, i8* null) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit

if.else.i32:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit28
  %1 = ptrtoint i8* %storemerge.i27 to i32
  %sub.ptr.sub.i.i = sub i32 1, %0
  %add.i.i = add i32 %sub.ptr.sub.i.i, %1
  %conv.i.i = sext i32 %add.i.i to i64
  tail call void @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #11
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #11
  tail call void @halide_free(i8* %user_context, i8* nonnull %call.i) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit: ; preds = %if.else.i32, %if.then.i31
  %call4 = tail call i32 @halide_error_check_fault_and_return(i8* %user_context, i32 -30) #12
  ret i32 %call4
}

; Function Attrs: nounwind
define weak i32 @halide_error_unaligned_host_ptr(i8* %user_context, i8* %func, i32 %alignment) local_unnamed_addr #0 {
entry:
  %call.i = tail call i8* @halide_malloc(i8* %user_context, i32 1024) #11
  %0 = ptrtoint i8* %call.i to i32
  %tobool5.i = icmp eq i8* %call.i, null
  br i1 %tobool5.i, label %entry.split, label %if.then.i

entry.split:                                      ; preds = %entry
  %call5.i1 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* nonnull getelementptr inbounds ([21 x i8], [21 x i8]* @.str.49, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit

if.then.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !7
  %call5.i2 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* nonnull getelementptr inbounds ([21 x i8], [21 x i8]* @.str.49, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then.i
  %phi.call = phi i8* [ %call5.i1, %entry.split ], [ %call5.i2, %if.then.i ]
  %ref.tmp.sroa.14.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then.i ]
  %cmp.i = icmp eq i8* %func, null
  br i1 %cmp.i, label %if.then.i13, label %if.else.i15

if.then.i13:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit
  %call.i12 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.14.0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.78, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit

if.else.i15:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit
  %call5.i14 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.14.0, i8* nonnull %func) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit: ; preds = %if.else.i15, %if.then.i13
  %storemerge.i = phi i8* [ %call5.i14, %if.else.i15 ], [ %call.i12, %if.then.i13 ]
  %call5.i18 = tail call i8* @halide_string_to_string(i8* %storemerge.i, i8* %ref.tmp.sroa.14.0, i8* nonnull getelementptr inbounds ([22 x i8], [22 x i8]* @.str.50, i32 0, i32 0)) #11
  %conv.i = sext i32 %alignment to i64
  %call.i23 = tail call i8* @halide_int64_to_string(i8* %call5.i18, i8* %ref.tmp.sroa.14.0, i64 %conv.i, i32 1) #11
  %call5.i26 = tail call i8* @halide_string_to_string(i8* %call.i23, i8* %ref.tmp.sroa.14.0, i8* nonnull getelementptr inbounds ([17 x i8], [17 x i8]* @.str.51, i32 0, i32 0)) #11
  br i1 %tobool5.i, label %if.then.i31, label %if.else.i32

if.then.i31:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.8.103, i32 0, i32 0)) #11
  tail call void @halide_free(i8* %user_context, i8* null) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit

if.else.i32:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit
  %1 = ptrtoint i8* %call5.i26 to i32
  %sub.ptr.sub.i.i = sub i32 1, %0
  %add.i.i = add i32 %sub.ptr.sub.i.i, %1
  %conv.i.i = sext i32 %add.i.i to i64
  tail call void @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #11
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #11
  tail call void @halide_free(i8* %user_context, i8* nonnull %call.i) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit: ; preds = %if.else.i32, %if.then.i31
  %call5 = tail call i32 @halide_error_check_fault_and_return(i8* %user_context, i32 -24) #12
  ret i32 %call5
}

; Function Attrs: nounwind
define weak i32 @halide_error_host_is_null(i8* %user_context, i8* %func) local_unnamed_addr #0 {
entry:
  %call.i = tail call i8* @halide_malloc(i8* %user_context, i32 1024) #11
  %0 = ptrtoint i8* %call.i to i32
  %tobool5.i = icmp eq i8* %call.i, null
  br i1 %tobool5.i, label %entry.split, label %if.then.i

entry.split:                                      ; preds = %entry
  %call5.i1 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* nonnull getelementptr inbounds ([21 x i8], [21 x i8]* @.str.49, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit

if.then.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !7
  %call5.i2 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* nonnull getelementptr inbounds ([21 x i8], [21 x i8]* @.str.49, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then.i
  %phi.call = phi i8* [ %call5.i1, %entry.split ], [ %call5.i2, %if.then.i ]
  %ref.tmp.sroa.12.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then.i ]
  %cmp.i = icmp eq i8* %func, null
  br i1 %cmp.i, label %if.then.i11, label %if.else.i13

if.then.i11:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit
  %call.i10 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.12.0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.78, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit

if.else.i13:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit
  %call5.i12 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.12.0, i8* nonnull %func) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit: ; preds = %if.else.i13, %if.then.i11
  %storemerge.i = phi i8* [ %call5.i12, %if.else.i13 ], [ %call.i10, %if.then.i11 ]
  %call5.i16 = tail call i8* @halide_string_to_string(i8* %storemerge.i, i8* %ref.tmp.sroa.12.0, i8* nonnull getelementptr inbounds ([55 x i8], [55 x i8]* @.str.52, i32 0, i32 0)) #11
  br i1 %tobool5.i, label %if.then.i21, label %if.else.i22

if.then.i21:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.8.103, i32 0, i32 0)) #11
  tail call void @halide_free(i8* %user_context, i8* null) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit

if.else.i22:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit
  %1 = ptrtoint i8* %call5.i16 to i32
  %sub.ptr.sub.i.i = sub i32 1, %0
  %add.i.i = add i32 %sub.ptr.sub.i.i, %1
  %conv.i.i = sext i32 %add.i.i to i64
  tail call void @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #11
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #11
  tail call void @halide_free(i8* %user_context, i8* nonnull %call.i) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit: ; preds = %if.else.i22, %if.then.i21
  %call3 = tail call i32 @halide_error_check_fault_and_return(i8* %user_context, i32 -34) #12
  ret i32 %call3
}

; Function Attrs: nounwind
define weak i32 @halide_error_bad_fold(i8* %user_context, i8* %func_name, i8* %var_name, i8* %loop_name) local_unnamed_addr #0 {
entry:
  %call.i = tail call i8* @halide_malloc(i8* %user_context, i32 1024) #11
  %0 = ptrtoint i8* %call.i to i32
  %tobool5.i = icmp eq i8* %call.i, null
  br i1 %tobool5.i, label %entry.split, label %if.then.i

entry.split:                                      ; preds = %entry
  %call5.i1 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* nonnull getelementptr inbounds ([30 x i8], [30 x i8]* @.str.53, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit

if.then.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !7
  %call5.i2 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* nonnull getelementptr inbounds ([30 x i8], [30 x i8]* @.str.53, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then.i
  %phi.call = phi i8* [ %call5.i1, %entry.split ], [ %call5.i2, %if.then.i ]
  %ref.tmp.sroa.16.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then.i ]
  %cmp.i = icmp eq i8* %var_name, null
  br i1 %cmp.i, label %if.then.i15, label %if.else.i17

if.then.i15:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit
  %call.i14 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.16.0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.78, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit

if.else.i17:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit
  %call5.i16 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.16.0, i8* nonnull %var_name) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit: ; preds = %if.else.i17, %if.then.i15
  %storemerge.i = phi i8* [ %call5.i16, %if.else.i17 ], [ %call.i14, %if.then.i15 ]
  %call5.i20 = tail call i8* @halide_string_to_string(i8* %storemerge.i, i8* %ref.tmp.sroa.16.0, i8* nonnull getelementptr inbounds ([5 x i8], [5 x i8]* @.str.54, i32 0, i32 0)) #11
  %cmp.i23 = icmp eq i8* %func_name, null
  br i1 %cmp.i23, label %if.then.i27, label %if.else.i29

if.then.i27:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit
  %call.i26 = tail call i8* @halide_string_to_string(i8* %call5.i20, i8* %ref.tmp.sroa.16.0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.78, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit31

if.else.i29:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit
  %call5.i28 = tail call i8* @halide_string_to_string(i8* %call5.i20, i8* %ref.tmp.sroa.16.0, i8* nonnull %func_name) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit31

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit31: ; preds = %if.else.i29, %if.then.i27
  %storemerge.i30 = phi i8* [ %call5.i28, %if.else.i29 ], [ %call.i26, %if.then.i27 ]
  %call5.i34 = tail call i8* @halide_string_to_string(i8* %storemerge.i30, i8* %ref.tmp.sroa.16.0, i8* nonnull getelementptr inbounds ([36 x i8], [36 x i8]* @.str.55, i32 0, i32 0)) #11
  %cmp.i37 = icmp eq i8* %loop_name, null
  br i1 %cmp.i37, label %if.then.i41, label %if.else.i43

if.then.i41:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit31
  %call.i40 = tail call i8* @halide_string_to_string(i8* %call5.i34, i8* %ref.tmp.sroa.16.0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.78, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit45

if.else.i43:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit31
  %call5.i42 = tail call i8* @halide_string_to_string(i8* %call5.i34, i8* %ref.tmp.sroa.16.0, i8* nonnull %loop_name) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit45

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit45: ; preds = %if.else.i43, %if.then.i41
  %storemerge.i44 = phi i8* [ %call5.i42, %if.else.i43 ], [ %call.i40, %if.then.i41 ]
  %call5.i48 = tail call i8* @halide_string_to_string(i8* %storemerge.i44, i8* %ref.tmp.sroa.16.0, i8* nonnull getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.67, i32 0, i32 0)) #11
  br i1 %tobool5.i, label %if.then.i53, label %if.else.i54

if.then.i53:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit45
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.8.103, i32 0, i32 0)) #11
  tail call void @halide_free(i8* %user_context, i8* null) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit

if.else.i54:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit45
  %1 = ptrtoint i8* %call5.i48 to i32
  %sub.ptr.sub.i.i = sub i32 1, %0
  %add.i.i = add i32 %sub.ptr.sub.i.i, %1
  %conv.i.i = sext i32 %add.i.i to i64
  tail call void @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #11
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #11
  tail call void @halide_free(i8* %user_context, i8* nonnull %call.i) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit: ; preds = %if.else.i54, %if.then.i53
  %call7 = tail call i32 @halide_error_check_fault_and_return(i8* %user_context, i32 -25) #12
  ret i32 %call7
}

; Function Attrs: nounwind
define weak i32 @halide_error_bad_extern_fold(i8* %user_context, i8* %func_name, i32 %dim, i32 %min, i32 %extent, i32 %valid_min, i32 %fold_factor) local_unnamed_addr #0 {
entry:
  %cmp = icmp slt i32 %min, %valid_min
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %add = add nsw i32 %extent, %min
  %add1 = add nsw i32 %fold_factor, %valid_min
  %cmp2 = icmp sgt i32 %add, %add1
  br i1 %cmp2, label %if.then, label %if.else

if.then:                                          ; preds = %lor.lhs.false, %entry
  %call.i = tail call i8* @halide_malloc(i8* %user_context, i32 1024) #11
  %0 = ptrtoint i8* %call.i to i32
  %tobool5.i = icmp eq i8* %call.i, null
  br i1 %tobool5.i, label %if.then.split, label %if.then.i

if.then.split:                                    ; preds = %if.then
  %call5.i1 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* nonnull getelementptr inbounds ([23 x i8], [23 x i8]* @.str.56, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit

if.then.i:                                        ; preds = %if.then
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !7
  %call5.i2 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* nonnull getelementptr inbounds ([23 x i8], [23 x i8]* @.str.56, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit: ; preds = %if.then.split, %if.then.i
  %phi.call = phi i8* [ %call5.i1, %if.then.split ], [ %call5.i2, %if.then.i ]
  %ref.tmp.sroa.23.0 = phi i8* [ null, %if.then.split ], [ %add.ptr.i, %if.then.i ]
  %conv.i = sext i32 %dim to i64
  %call.i57 = tail call i8* @halide_int64_to_string(i8* %phi.call, i8* %ref.tmp.sroa.23.0, i64 %conv.i, i32 1) #11
  %call5.i60 = tail call i8* @halide_string_to_string(i8* %call.i57, i8* %ref.tmp.sroa.23.0, i8* nonnull getelementptr inbounds ([5 x i8], [5 x i8]* @.str.54, i32 0, i32 0)) #11
  %cmp.i = icmp eq i8* %func_name, null
  br i1 %cmp.i, label %if.then.i65, label %if.else.i67

if.then.i65:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit
  %call.i64 = tail call i8* @halide_string_to_string(i8* %call5.i60, i8* %ref.tmp.sroa.23.0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.78, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit

if.else.i67:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit
  %call5.i66 = tail call i8* @halide_string_to_string(i8* %call5.i60, i8* %ref.tmp.sroa.23.0, i8* nonnull %func_name) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit: ; preds = %if.else.i67, %if.then.i65
  %storemerge.i = phi i8* [ %call5.i66, %if.else.i67 ], [ %call.i64, %if.then.i65 ]
  %call5.i70 = tail call i8* @halide_string_to_string(i8* %storemerge.i, i8* %ref.tmp.sroa.23.0, i8* nonnull getelementptr inbounds ([36 x i8], [36 x i8]* @.str.57, i32 0, i32 0)) #11
  %conv.i75 = sext i32 %min to i64
  %call.i76 = tail call i8* @halide_int64_to_string(i8* %call5.i70, i8* %ref.tmp.sroa.23.0, i64 %conv.i75, i32 1) #11
  %call5.i79 = tail call i8* @halide_string_to_string(i8* %call.i76, i8* %ref.tmp.sroa.23.0, i8* nonnull getelementptr inbounds ([3 x i8], [3 x i8]* @.str.58.76, i32 0, i32 0)) #11
  %add9 = add nsw i32 %extent, %min
  %sub = add nsw i32 %add9, -1
  %conv.i84 = sext i32 %sub to i64
  %call.i85 = tail call i8* @halide_int64_to_string(i8* %call5.i79, i8* %ref.tmp.sroa.23.0, i64 %conv.i84, i32 1) #11
  %call5.i88 = tail call i8* @halide_string_to_string(i8* %call.i85, i8* %ref.tmp.sroa.23.0, i8* nonnull getelementptr inbounds ([3 x i8], [3 x i8]* @.str.59.77, i32 0, i32 0)) #11
  %call5.i93 = tail call i8* @halide_string_to_string(i8* %call5.i88, i8* %ref.tmp.sroa.23.0, i8* nonnull getelementptr inbounds ([47 x i8], [47 x i8]* @.str.60.78, i32 0, i32 0)) #11
  %conv.i98 = sext i32 %valid_min to i64
  %call.i99 = tail call i8* @halide_int64_to_string(i8* %call5.i93, i8* %ref.tmp.sroa.23.0, i64 %conv.i98, i32 1) #11
  %call5.i102 = tail call i8* @halide_string_to_string(i8* %call.i99, i8* %ref.tmp.sroa.23.0, i8* nonnull getelementptr inbounds ([3 x i8], [3 x i8]* @.str.58.76, i32 0, i32 0)) #11
  %add15 = add nsw i32 %fold_factor, %valid_min
  %sub16 = add nsw i32 %add15, -1
  %conv.i107 = sext i32 %sub16 to i64
  %call.i108 = tail call i8* @halide_int64_to_string(i8* %call5.i102, i8* %ref.tmp.sroa.23.0, i64 %conv.i107, i32 1) #11
  %call5.i111 = tail call i8* @halide_string_to_string(i8* %call.i108, i8* %ref.tmp.sroa.23.0, i8* nonnull getelementptr inbounds ([3 x i8], [3 x i8]* @.str.61.79, i32 0, i32 0)) #11
  br i1 %tobool5.i, label %if.then.i116, label %if.else.i117

if.then.i116:                                     ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.8.103, i32 0, i32 0)) #11
  tail call void @halide_free(i8* %user_context, i8* null) #11
  br label %if.end

if.else.i117:                                     ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit
  %1 = ptrtoint i8* %call5.i111 to i32
  %sub.ptr.sub.i.i = sub i32 1, %0
  %add.i.i = add i32 %sub.ptr.sub.i.i, %1
  %conv.i.i = sext i32 %add.i.i to i64
  tail call void @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #11
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #11
  tail call void @halide_free(i8* %user_context, i8* nonnull %call.i) #11
  br label %if.end

if.else:                                          ; preds = %lor.lhs.false
  %call.i121 = tail call i8* @halide_malloc(i8* %user_context, i32 1024) #11
  %2 = ptrtoint i8* %call.i121 to i32
  %tobool5.i124 = icmp eq i8* %call.i121, null
  br i1 %tobool5.i124, label %if.else.split, label %if.then.i127

if.else.split:                                    ; preds = %if.else
  %call5.i1343 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* nonnull getelementptr inbounds ([23 x i8], [23 x i8]* @.str.56, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit131

if.then.i127:                                     ; preds = %if.else
  %add.ptr.i125 = getelementptr inbounds i8, i8* %call.i121, i32 1023
  store i8 0, i8* %add.ptr.i125, align 1, !tbaa !7
  %call5.i1344 = tail call i8* @halide_string_to_string(i8* nonnull %call.i121, i8* nonnull %add.ptr.i125, i8* nonnull getelementptr inbounds ([23 x i8], [23 x i8]* @.str.56, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit131

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit131: ; preds = %if.else.split, %if.then.i127
  %phi.call5 = phi i8* [ %call5.i1343, %if.else.split ], [ %call5.i1344, %if.then.i127 ]
  %ref.tmp19.sroa.22.0 = phi i8* [ null, %if.else.split ], [ %add.ptr.i125, %if.then.i127 ]
  %conv.i140 = sext i32 %dim to i64
  %call.i141 = tail call i8* @halide_int64_to_string(i8* %phi.call5, i8* %ref.tmp19.sroa.22.0, i64 %conv.i140, i32 1) #11
  %call5.i144 = tail call i8* @halide_string_to_string(i8* %call.i141, i8* %ref.tmp19.sroa.22.0, i8* nonnull getelementptr inbounds ([5 x i8], [5 x i8]* @.str.54, i32 0, i32 0)) #11
  %cmp.i148 = icmp eq i8* %func_name, null
  br i1 %cmp.i148, label %if.then.i152, label %if.else.i154

if.then.i152:                                     ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit131
  %call.i151 = tail call i8* @halide_string_to_string(i8* %call5.i144, i8* %ref.tmp19.sroa.22.0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.78, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit157

if.else.i154:                                     ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit131
  %call5.i153 = tail call i8* @halide_string_to_string(i8* %call5.i144, i8* %ref.tmp19.sroa.22.0, i8* nonnull %func_name) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit157

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit157: ; preds = %if.else.i154, %if.then.i152
  %storemerge.i155 = phi i8* [ %call5.i153, %if.else.i154 ], [ %call.i151, %if.then.i152 ]
  %call5.i160 = tail call i8* @halide_string_to_string(i8* %storemerge.i155, i8* %ref.tmp19.sroa.22.0, i8* nonnull getelementptr inbounds ([36 x i8], [36 x i8]* @.str.57, i32 0, i32 0)) #11
  %conv.i166 = sext i32 %min to i64
  %call.i167 = tail call i8* @halide_int64_to_string(i8* %call5.i160, i8* %ref.tmp19.sroa.22.0, i64 %conv.i166, i32 1) #11
  %call5.i170 = tail call i8* @halide_string_to_string(i8* %call.i167, i8* %ref.tmp19.sroa.22.0, i8* nonnull getelementptr inbounds ([3 x i8], [3 x i8]* @.str.58.76, i32 0, i32 0)) #11
  %sub28 = add nsw i32 %add, -1
  %conv.i176 = sext i32 %sub28 to i64
  %call.i177 = tail call i8* @halide_int64_to_string(i8* %call5.i170, i8* %ref.tmp19.sroa.22.0, i64 %conv.i176, i32 1) #11
  %call5.i180 = tail call i8* @halide_string_to_string(i8* %call.i177, i8* %ref.tmp19.sroa.22.0, i8* nonnull getelementptr inbounds ([3 x i8], [3 x i8]* @.str.59.77, i32 0, i32 0)) #11
  %call5.i186 = tail call i8* @halide_string_to_string(i8* %call5.i180, i8* %ref.tmp19.sroa.22.0, i8* nonnull getelementptr inbounds ([47 x i8], [47 x i8]* @.str.62, i32 0, i32 0)) #11
  %call5.i192 = tail call i8* @halide_string_to_string(i8* %call5.i186, i8* %ref.tmp19.sroa.22.0, i8* nonnull getelementptr inbounds ([30 x i8], [30 x i8]* @.str.63, i32 0, i32 0)) #11
  %conv.i198 = sext i32 %fold_factor to i64
  %call.i199 = tail call i8* @halide_int64_to_string(i8* %call5.i192, i8* %ref.tmp19.sroa.22.0, i64 %conv.i198, i32 1) #11
  %call5.i202 = tail call i8* @halide_string_to_string(i8* %call.i199, i8* %ref.tmp19.sroa.22.0, i8* nonnull getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.67, i32 0, i32 0)) #11
  br i1 %tobool5.i124, label %if.then.i209, label %if.else.i215

if.then.i209:                                     ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit157
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.8.103, i32 0, i32 0)) #11
  tail call void @halide_free(i8* %user_context, i8* null) #11
  br label %if.end

if.else.i215:                                     ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit157
  %3 = ptrtoint i8* %call5.i202 to i32
  %sub.ptr.sub.i.i212 = sub i32 1, %2
  %add.i.i213 = add i32 %sub.ptr.sub.i.i212, %3
  %conv.i.i214 = sext i32 %add.i.i213 to i64
  tail call void @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i121, i64 %conv.i.i214) #11
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i121) #11
  tail call void @halide_free(i8* %user_context, i8* nonnull %call.i121) #11
  br label %if.end

if.end:                                           ; preds = %if.then.i209, %if.else.i215, %if.then.i116, %if.else.i117
  %call35 = tail call i32 @halide_error_check_fault_and_return(i8* %user_context, i32 -35) #12
  ret i32 %call35
}

; Function Attrs: nounwind
define weak i32 @halide_error_fold_factor_too_small(i8* %user_context, i8* %func_name, i8* %var_name, i32 %fold_factor, i8* %loop_name, i32 %required_extent) local_unnamed_addr #0 {
entry:
  %call.i = tail call i8* @halide_malloc(i8* %user_context, i32 1024) #11
  %0 = ptrtoint i8* %call.i to i32
  %tobool5.i = icmp eq i8* %call.i, null
  br i1 %tobool5.i, label %entry.split, label %if.then.i

entry.split:                                      ; preds = %entry
  %call5.i1 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* nonnull getelementptr inbounds ([18 x i8], [18 x i8]* @.str.64.80, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit

if.then.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !7
  %call5.i2 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* nonnull getelementptr inbounds ([18 x i8], [18 x i8]* @.str.64.80, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then.i
  %phi.call = phi i8* [ %call5.i1, %entry.split ], [ %call5.i2, %if.then.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then.i ]
  %conv.i = sext i32 %fold_factor to i64
  %call.i18 = tail call i8* @halide_int64_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i64 %conv.i, i32 1) #11
  %call5.i21 = tail call i8* @halide_string_to_string(i8* %call.i18, i8* %ref.tmp.sroa.20.0, i8* nonnull getelementptr inbounds ([16 x i8], [16 x i8]* @.str.65, i32 0, i32 0)) #11
  %cmp.i = icmp eq i8* %var_name, null
  br i1 %cmp.i, label %if.then.i26, label %if.else.i28

if.then.i26:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit
  %call.i25 = tail call i8* @halide_string_to_string(i8* %call5.i21, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.78, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit

if.else.i28:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit
  %call5.i27 = tail call i8* @halide_string_to_string(i8* %call5.i21, i8* %ref.tmp.sroa.20.0, i8* nonnull %var_name) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit: ; preds = %if.else.i28, %if.then.i26
  %storemerge.i = phi i8* [ %call5.i27, %if.else.i28 ], [ %call.i25, %if.then.i26 ]
  %call5.i31 = tail call i8* @halide_string_to_string(i8* %storemerge.i, i8* %ref.tmp.sroa.20.0, i8* nonnull getelementptr inbounds ([5 x i8], [5 x i8]* @.str.54, i32 0, i32 0)) #11
  %cmp.i34 = icmp eq i8* %func_name, null
  br i1 %cmp.i34, label %if.then.i38, label %if.else.i40

if.then.i38:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit
  %call.i37 = tail call i8* @halide_string_to_string(i8* %call5.i31, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.78, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit42

if.else.i40:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit
  %call5.i39 = tail call i8* @halide_string_to_string(i8* %call5.i31, i8* %ref.tmp.sroa.20.0, i8* nonnull %func_name) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit42

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit42: ; preds = %if.else.i40, %if.then.i38
  %storemerge.i41 = phi i8* [ %call5.i39, %if.else.i40 ], [ %call.i37, %if.then.i38 ]
  %call5.i45 = tail call i8* @halide_string_to_string(i8* %storemerge.i41, i8* %ref.tmp.sroa.20.0, i8* nonnull getelementptr inbounds ([61 x i8], [61 x i8]* @.str.66, i32 0, i32 0)) #11
  %cmp.i48 = icmp eq i8* %loop_name, null
  br i1 %cmp.i48, label %if.then.i52, label %if.else.i54

if.then.i52:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit42
  %call.i51 = tail call i8* @halide_string_to_string(i8* %call5.i45, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.78, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit56

if.else.i54:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit42
  %call5.i53 = tail call i8* @halide_string_to_string(i8* %call5.i45, i8* %ref.tmp.sroa.20.0, i8* nonnull %loop_name) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit56

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit56: ; preds = %if.else.i54, %if.then.i52
  %storemerge.i55 = phi i8* [ %call5.i53, %if.else.i54 ], [ %call.i51, %if.then.i52 ]
  %call5.i59 = tail call i8* @halide_string_to_string(i8* %storemerge.i55, i8* %ref.tmp.sroa.20.0, i8* nonnull getelementptr inbounds ([3 x i8], [3 x i8]* @.str.32.69, i32 0, i32 0)) #11
  %conv.i64 = sext i32 %required_extent to i64
  %call.i65 = tail call i8* @halide_int64_to_string(i8* %call5.i59, i8* %ref.tmp.sroa.20.0, i64 %conv.i64, i32 1) #11
  %call5.i68 = tail call i8* @halide_string_to_string(i8* %call.i65, i8* %ref.tmp.sroa.20.0, i8* nonnull getelementptr inbounds ([3 x i8], [3 x i8]* @.str.67, i32 0, i32 0)) #11
  br i1 %tobool5.i, label %if.then.i73, label %if.else.i74

if.then.i73:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit56
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.8.103, i32 0, i32 0)) #11
  tail call void @halide_free(i8* %user_context, i8* null) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit

if.else.i74:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit56
  %1 = ptrtoint i8* %call5.i68 to i32
  %sub.ptr.sub.i.i = sub i32 1, %0
  %add.i.i = add i32 %sub.ptr.sub.i.i, %1
  %conv.i.i = sext i32 %add.i.i to i64
  tail call void @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #11
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #11
  tail call void @halide_free(i8* %user_context, i8* nonnull %call.i) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit: ; preds = %if.else.i74, %if.then.i73
  %call11 = tail call i32 @halide_error_check_fault_and_return(i8* %user_context, i32 -26) #12
  ret i32 %call11
}

; Function Attrs: nounwind
define weak i32 @halide_error_requirement_failed(i8* %user_context, i8* %condition, i8* %message) local_unnamed_addr #0 {
entry:
  %call.i = tail call i8* @halide_malloc(i8* %user_context, i32 1024) #11
  %0 = ptrtoint i8* %call.i to i32
  %tobool5.i = icmp eq i8* %call.i, null
  br i1 %tobool5.i, label %entry.split, label %if.then.i

entry.split:                                      ; preds = %entry
  %call5.i1 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* nonnull getelementptr inbounds ([22 x i8], [22 x i8]* @.str.68, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit

if.then.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !7
  %call5.i2 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* nonnull getelementptr inbounds ([22 x i8], [22 x i8]* @.str.68, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then.i
  %phi.call = phi i8* [ %call5.i1, %entry.split ], [ %call5.i2, %if.then.i ]
  %ref.tmp.sroa.13.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then.i ]
  %cmp.i = icmp eq i8* %condition, null
  br i1 %cmp.i, label %if.then.i12, label %if.else.i14

if.then.i12:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.13.0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.78, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit

if.else.i14:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit
  %call5.i13 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.13.0, i8* nonnull %condition) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit: ; preds = %if.else.i14, %if.then.i12
  %storemerge.i = phi i8* [ %call5.i13, %if.else.i14 ], [ %call.i11, %if.then.i12 ]
  %call5.i17 = tail call i8* @halide_string_to_string(i8* %storemerge.i, i8* %ref.tmp.sroa.13.0, i8* nonnull getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3.92, i32 0, i32 0)) #11
  %cmp.i20 = icmp eq i8* %message, null
  br i1 %cmp.i20, label %if.then.i24, label %if.else.i26

if.then.i24:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit
  %call.i23 = tail call i8* @halide_string_to_string(i8* %call5.i17, i8* %ref.tmp.sroa.13.0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.78, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit28

if.else.i26:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit
  %call5.i25 = tail call i8* @halide_string_to_string(i8* %call5.i17, i8* %ref.tmp.sroa.13.0, i8* nonnull %message) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit28

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit28: ; preds = %if.else.i26, %if.then.i24
  %storemerge.i27 = phi i8* [ %call5.i25, %if.else.i26 ], [ %call.i23, %if.then.i24 ]
  br i1 %tobool5.i, label %if.then.i31, label %if.else.i32

if.then.i31:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit28
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.8.103, i32 0, i32 0)) #11
  tail call void @halide_free(i8* %user_context, i8* null) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit

if.else.i32:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit28
  %1 = ptrtoint i8* %storemerge.i27 to i32
  %sub.ptr.sub.i.i = sub i32 1, %0
  %add.i.i = add i32 %sub.ptr.sub.i.i, %1
  %conv.i.i = sext i32 %add.i.i to i64
  tail call void @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #11
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #11
  tail call void @halide_free(i8* %user_context, i8* nonnull %call.i) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit: ; preds = %if.else.i32, %if.then.i31
  %call4 = tail call i32 @halide_error_check_fault_and_return(i8* %user_context, i32 -27) #12
  ret i32 %call4
}

; Function Attrs: nounwind
define weak i32 @halide_error_specialize_fail(i8* %user_context, i8* %message) local_unnamed_addr #0 {
entry:
  %call.i = tail call i8* @halide_malloc(i8* %user_context, i32 1024) #11
  %0 = ptrtoint i8* %call.i to i32
  %tobool5.i = icmp eq i8* %call.i, null
  br i1 %tobool5.i, label %entry.split, label %if.then.i

entry.split:                                      ; preds = %entry
  %call5.i1 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* nonnull getelementptr inbounds ([59 x i8], [59 x i8]* @.str.70, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit

if.then.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !7
  %call5.i2 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* nonnull getelementptr inbounds ([59 x i8], [59 x i8]* @.str.70, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then.i
  %phi.call = phi i8* [ %call5.i1, %entry.split ], [ %call5.i2, %if.then.i ]
  %ref.tmp.sroa.11.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then.i ]
  %cmp.i = icmp eq i8* %message, null
  br i1 %cmp.i, label %if.then.i10, label %if.else.i12

if.then.i10:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit
  %call.i9 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.11.0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.78, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit

if.else.i12:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit
  %call5.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.11.0, i8* nonnull %message) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit: ; preds = %if.else.i12, %if.then.i10
  %storemerge.i = phi i8* [ %call5.i11, %if.else.i12 ], [ %call.i9, %if.then.i10 ]
  br i1 %tobool5.i, label %if.then.i15, label %if.else.i16

if.then.i15:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.8.103, i32 0, i32 0)) #11
  tail call void @halide_free(i8* %user_context, i8* null) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit

if.else.i16:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit
  %1 = ptrtoint i8* %storemerge.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %0
  %add.i.i = add i32 %sub.ptr.sub.i.i, %1
  %conv.i.i = sext i32 %add.i.i to i64
  tail call void @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #11
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #11
  tail call void @halide_free(i8* %user_context, i8* nonnull %call.i) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit: ; preds = %if.else.i16, %if.then.i15
  %call2 = tail call i32 @halide_error_check_fault_and_return(i8* %user_context, i32 -31) #12
  ret i32 %call2
}

; Function Attrs: nounwind
define weak i32 @halide_error_no_device_interface(i8* %user_context) local_unnamed_addr #0 {
entry:
  %call.i = tail call i8* @halide_malloc(i8* %user_context, i32 1024) #11
  %tobool5.i = icmp eq i8* %call.i, null
  br i1 %tobool5.i, label %if.then.i8, label %if.else.i9

if.then.i8:                                       ; preds = %entry
  %call5.i21 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* nonnull getelementptr inbounds ([55 x i8], [55 x i8]* @.str.71, i32 0, i32 0)) #11
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.8.103, i32 0, i32 0)) #11
  tail call void @halide_free(i8* %user_context, i8* null) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit

if.else.i9:                                       ; preds = %entry
  %0 = ptrtoint i8* %call.i to i32
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !7
  %call5.i = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* nonnull getelementptr inbounds ([55 x i8], [55 x i8]* @.str.71, i32 0, i32 0)) #11
  %1 = ptrtoint i8* %call5.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %0
  %add.i.i = add i32 %sub.ptr.sub.i.i, %1
  %conv.i.i = sext i32 %add.i.i to i64
  tail call void @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #11
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #11
  tail call void @halide_free(i8* %user_context, i8* nonnull %call.i) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit: ; preds = %if.else.i9, %if.then.i8
  %call1 = tail call i32 @halide_error_check_fault_and_return(i8* %user_context, i32 -19) #12
  ret i32 %call1
}

; Function Attrs: nounwind
define weak i32 @halide_error_device_interface_no_device(i8* %user_context) local_unnamed_addr #0 {
entry:
  %call.i = tail call i8* @halide_malloc(i8* %user_context, i32 1024) #11
  %tobool5.i = icmp eq i8* %call.i, null
  br i1 %tobool5.i, label %if.then.i8, label %if.else.i9

if.then.i8:                                       ; preds = %entry
  %call5.i21 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* nonnull getelementptr inbounds ([56 x i8], [56 x i8]* @.str.72, i32 0, i32 0)) #11
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.8.103, i32 0, i32 0)) #11
  tail call void @halide_free(i8* %user_context, i8* null) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit

if.else.i9:                                       ; preds = %entry
  %0 = ptrtoint i8* %call.i to i32
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !7
  %call5.i = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* nonnull getelementptr inbounds ([56 x i8], [56 x i8]* @.str.72, i32 0, i32 0)) #11
  %1 = ptrtoint i8* %call5.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %0
  %add.i.i = add i32 %sub.ptr.sub.i.i, %1
  %conv.i.i = sext i32 %add.i.i to i64
  tail call void @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #11
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #11
  tail call void @halide_free(i8* %user_context, i8* nonnull %call.i) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit: ; preds = %if.else.i9, %if.then.i8
  %call1 = tail call i32 @halide_error_check_fault_and_return(i8* %user_context, i32 -36) #12
  ret i32 %call1
}

; Function Attrs: nounwind
define weak i32 @halide_error_host_and_device_dirty(i8* %user_context) local_unnamed_addr #0 {
entry:
  %call.i = tail call i8* @halide_malloc(i8* %user_context, i32 1024) #11
  %tobool5.i = icmp eq i8* %call.i, null
  br i1 %tobool5.i, label %if.then.i8, label %if.else.i9

if.then.i8:                                       ; preds = %entry
  %call5.i21 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* nonnull getelementptr inbounds ([49 x i8], [49 x i8]* @.str.73, i32 0, i32 0)) #11
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.8.103, i32 0, i32 0)) #11
  tail call void @halide_free(i8* %user_context, i8* null) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit

if.else.i9:                                       ; preds = %entry
  %0 = ptrtoint i8* %call.i to i32
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !7
  %call5.i = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* nonnull getelementptr inbounds ([49 x i8], [49 x i8]* @.str.73, i32 0, i32 0)) #11
  %1 = ptrtoint i8* %call5.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %0
  %add.i.i = add i32 %sub.ptr.sub.i.i, %1
  %conv.i.i = sext i32 %add.i.i to i64
  tail call void @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #11
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #11
  tail call void @halide_free(i8* %user_context, i8* nonnull %call.i) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit: ; preds = %if.else.i9, %if.then.i8
  %call1 = tail call i32 @halide_error_check_fault_and_return(i8* %user_context, i32 -37) #12
  ret i32 %call1
}

; Function Attrs: nounwind
define weak i32 @halide_error_buffer_is_null(i8* %user_context, i8* %routine) local_unnamed_addr #0 {
entry:
  %call.i = tail call i8* @halide_malloc(i8* %user_context, i32 1024) #11
  %0 = ptrtoint i8* %call.i to i32
  %tobool5.i = icmp eq i8* %call.i, null
  br i1 %tobool5.i, label %entry.split, label %if.then.i

entry.split:                                      ; preds = %entry
  %call5.i1 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* nonnull getelementptr inbounds ([26 x i8], [26 x i8]* @.str.74, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit

if.then.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !7
  %call5.i2 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* nonnull getelementptr inbounds ([26 x i8], [26 x i8]* @.str.74, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then.i
  %phi.call = phi i8* [ %call5.i1, %entry.split ], [ %call5.i2, %if.then.i ]
  %ref.tmp.sroa.12.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then.i ]
  %cmp.i = icmp eq i8* %routine, null
  br i1 %cmp.i, label %if.then.i11, label %if.else.i13

if.then.i11:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit
  %call.i10 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.12.0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.78, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit

if.else.i13:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EEC2EPvPc.exit
  %call5.i12 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.12.0, i8* nonnull %routine) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit: ; preds = %if.else.i13, %if.then.i11
  %storemerge.i = phi i8* [ %call5.i12, %if.else.i13 ], [ %call.i10, %if.then.i11 ]
  %call5.i16 = tail call i8* @halide_string_to_string(i8* %storemerge.i, i8* %ref.tmp.sroa.12.0, i8* nonnull getelementptr inbounds ([11 x i8], [11 x i8]* @.str.75, i32 0, i32 0)) #11
  br i1 %tobool5.i, label %if.then.i21, label %if.else.i22

if.then.i21:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.8.103, i32 0, i32 0)) #11
  tail call void @halide_free(i8* %user_context, i8* null) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit

if.else.i22:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EElsEPKc.exit
  %1 = ptrtoint i8* %call5.i16 to i32
  %sub.ptr.sub.i.i = sub i32 1, %0
  %add.i.i = add i32 %sub.ptr.sub.i.i, %1
  %conv.i.i = sext i32 %add.i.i to i64
  tail call void @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #11
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #11
  tail call void @halide_free(i8* %user_context, i8* nonnull %call.i) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit: ; preds = %if.else.i22, %if.then.i21
  %call3 = tail call i32 @halide_error_check_fault_and_return(i8* %user_context, i32 -38) #12
  ret i32 %call3
}

; Function Attrs: nounwind
define weak i32 @halide_error_integer_division_by_zero(i8* %user_context) local_unnamed_addr #0 {
entry:
  %call.i = tail call i8* @halide_malloc(i8* %user_context, i32 1024) #11
  %tobool5.i = icmp eq i8* %call.i, null
  br i1 %tobool5.i, label %if.then.i6, label %if.else.i7

if.then.i6:                                       ; preds = %entry
  %call5.i19 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* nonnull getelementptr inbounds ([37 x i8], [37 x i8]* @.str.76, i32 0, i32 0)) #11
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.8.103, i32 0, i32 0)) #11
  tail call void @halide_free(i8* %user_context, i8* null) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit

if.else.i7:                                       ; preds = %entry
  %0 = ptrtoint i8* %call.i to i32
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !7
  %call5.i = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* nonnull getelementptr inbounds ([37 x i8], [37 x i8]* @.str.76, i32 0, i32 0)) #11
  %1 = ptrtoint i8* %call5.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %0
  %add.i.i = add i32 %sub.ptr.sub.i.i, %1
  %conv.i.i = sext i32 %add.i.i to i64
  tail call void @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #11
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #11
  tail call void @halide_free(i8* %user_context, i8* nonnull %call.i) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi1ELy1024EED2Ev.exit: ; preds = %if.else.i7, %if.then.i6
  ret i32 -44
}

; Function Attrs: nounwind
define linkonce i32 @_ZN6Halide7Runtime8Internal29guess_type_and_dimensionalityEPvP8buffer_tP15halide_buffer_t(i8* %user_context, %struct.buffer_t* %old_buf, %struct.halide_buffer_t* %new_buf) local_unnamed_addr #0 {
entry:
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %new_buf, i32 0, i32 8
  store i32 4, i32* %dimensions, align 4, !tbaa !34
  %arrayidx = getelementptr inbounds %struct.buffer_t, %struct.buffer_t* %old_buf, i32 0, i32 2, i32 0
  %0 = load i32, i32* %arrayidx, align 4, !tbaa !10
  %cmp1 = icmp eq i32 %0, 0
  br i1 %cmp1, label %if.then, label %for.inc

if.then:                                          ; preds = %for.inc.2, %for.inc.1, %for.inc, %entry
  %i.038.lcssa = phi i32 [ 0, %entry ], [ 1, %for.inc ], [ 2, %for.inc.1 ], [ 3, %for.inc.2 ]
  store i32 %i.038.lcssa, i32* %dimensions, align 4, !tbaa !34
  br label %cleanup

for.inc:                                          ; preds = %entry
  %arrayidx.1 = getelementptr inbounds %struct.buffer_t, %struct.buffer_t* %old_buf, i32 0, i32 2, i32 1
  %1 = load i32, i32* %arrayidx.1, align 4, !tbaa !10
  %cmp1.1 = icmp eq i32 %1, 0
  br i1 %cmp1.1, label %if.then, label %for.inc.1

cleanup:                                          ; preds = %for.inc.2, %if.then
  %elem_size = getelementptr inbounds %struct.buffer_t, %struct.buffer_t* %old_buf, i32 0, i32 5
  %2 = load i32, i32* %elem_size, align 4, !tbaa !66
  switch i32 %2, label %sw.default [
    i32 1, label %sw.bb
    i32 2, label %sw.bb3
    i32 4, label %sw.bb6
    i32 8, label %sw.bb9
  ]

sw.bb:                                            ; preds = %cleanup
  %3 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %new_buf, i32 0, i32 7, i32 0
  %4 = bitcast i8* %3 to i32*
  store i32 67585, i32* %4, align 8
  br label %return

sw.bb3:                                           ; preds = %cleanup
  %5 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %new_buf, i32 0, i32 7, i32 0
  %6 = bitcast i8* %5 to i32*
  store i32 69633, i32* %6, align 8
  br label %return

sw.bb6:                                           ; preds = %cleanup
  %7 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %new_buf, i32 0, i32 7, i32 0
  %8 = bitcast i8* %7 to i32*
  store i32 73729, i32* %8, align 8
  br label %return

sw.bb9:                                           ; preds = %cleanup
  %9 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %new_buf, i32 0, i32 7, i32 0
  %10 = bitcast i8* %9 to i32*
  store i32 81921, i32* %10, align 8
  br label %return

sw.default:                                       ; preds = %cleanup
  %call = tail call i32 @halide_error_failed_to_upgrade_buffer_t(i8* %user_context, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.89, i32 0, i32 0), i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.1.90, i32 0, i32 0)) #11
  br label %return

return:                                           ; preds = %sw.default, %sw.bb9, %sw.bb6, %sw.bb3, %sw.bb
  %retval.0 = phi i32 [ %call, %sw.default ], [ 0, %sw.bb9 ], [ 0, %sw.bb6 ], [ 0, %sw.bb3 ], [ 0, %sw.bb ]
  ret i32 %retval.0

for.inc.1:                                        ; preds = %for.inc
  %arrayidx.2 = getelementptr inbounds %struct.buffer_t, %struct.buffer_t* %old_buf, i32 0, i32 2, i32 2
  %11 = load i32, i32* %arrayidx.2, align 4, !tbaa !10
  %cmp1.2 = icmp eq i32 %11, 0
  br i1 %cmp1.2, label %if.then, label %for.inc.2

for.inc.2:                                        ; preds = %for.inc.1
  %arrayidx.3 = getelementptr inbounds %struct.buffer_t, %struct.buffer_t* %old_buf, i32 0, i32 2, i32 3
  %12 = load i32, i32* %arrayidx.3, align 4, !tbaa !10
  %cmp1.3 = icmp eq i32 %12, 0
  br i1 %cmp1.3, label %if.then, label %cleanup
}

; Function Attrs: nounwind
define weak i32 @halide_upgrade_buffer_t(i8* %user_context, i8* %name, %struct.buffer_t* %old_buf, %struct.halide_buffer_t* %new_buf, i32 %bounds_query_only) local_unnamed_addr #0 {
entry:
  %host = getelementptr inbounds %struct.buffer_t, %struct.buffer_t* %old_buf, i32 0, i32 1
  %0 = load i8*, i8** %host, align 8, !tbaa !68
  %tobool = icmp eq i8* %0, null
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %entry
  %dev = getelementptr inbounds %struct.buffer_t, %struct.buffer_t* %old_buf, i32 0, i32 0
  %1 = load i64, i64* %dev, align 8, !tbaa !69
  %tobool1 = icmp eq i64 %1, 0
  br i1 %tobool1, label %if.end22.thread, label %if.then

if.end22.thread:                                  ; preds = %lor.lhs.false
  %host24152 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %new_buf, i32 0, i32 2
  store i8* null, i8** %host24152, align 4, !tbaa !32
  br label %if.end32

if.then:                                          ; preds = %lor.lhs.false, %entry
  %elem_size = getelementptr inbounds %struct.buffer_t, %struct.buffer_t* %old_buf, i32 0, i32 5
  %2 = load i32, i32* %elem_size, align 4, !tbaa !66
  %type = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %new_buf, i32 0, i32 7
  %bits.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %new_buf, i32 0, i32 7, i32 1
  %3 = load i8, i8* %bits.i, align 1, !tbaa !27
  %conv.i = zext i8 %3 to i32
  %add.i = add nuw nsw i32 %conv.i, 7
  %div.i = lshr i32 %add.i, 3
  %cmp = icmp eq i32 %2, %div.i
  br i1 %cmp, label %if.end, label %if.then2

if.then2:                                         ; preds = %if.then
  %call.i = tail call i8* @halide_malloc(i8* %user_context, i32 1024) #11
  %4 = ptrtoint i8* %call.i to i32
  %tobool5.i = icmp eq i8* %call.i, null
  br i1 %tobool5.i, label %if.then2.split, label %if.then.i92

if.then2.split:                                   ; preds = %if.then2
  %call5.i1 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* nonnull getelementptr inbounds ([33 x i8], [33 x i8]* @.str.2.91, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi2ELy1024EEC2EPvPc.exit

if.then.i92:                                      ; preds = %if.then2
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !7
  %call5.i2 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* nonnull getelementptr inbounds ([33 x i8], [33 x i8]* @.str.2.91, i32 0, i32 0)) #11
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi2ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi2ELy1024EEC2EPvPc.exit: ; preds = %if.then2.split, %if.then.i92
  %phi.call = phi i8* [ %call5.i1, %if.then2.split ], [ %call5.i2, %if.then.i92 ]
  %sstr.sroa.17.0 = phi i8* [ null, %if.then2.split ], [ %add.ptr.i, %if.then.i92 ]
  %5 = load i32, i32* %elem_size, align 4, !tbaa !66
  %conv.i101 = sext i32 %5 to i64
  %call.i102 = tail call i8* @halide_int64_to_string(i8* %phi.call, i8* %sstr.sroa.17.0, i64 %conv.i101, i32 1) #11
  %call5.i105 = tail call i8* @halide_string_to_string(i8* %call.i102, i8* %sstr.sroa.17.0, i8* nonnull getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3.92, i32 0, i32 0)) #11
  %call5.i110 = tail call i8* @halide_string_to_string(i8* %call5.i105, i8* %sstr.sroa.17.0, i8* nonnull getelementptr inbounds ([20 x i8], [20 x i8]* @.str.4.93, i32 0, i32 0)) #11
  %call.i115 = tail call i8* @halide_type_to_string(i8* %call5.i110, i8* %sstr.sroa.17.0, %struct.halide_type_t* nonnull %type) #11
  %call5.i118 = tail call i8* @halide_string_to_string(i8* %call.i115, i8* %sstr.sroa.17.0, i8* nonnull getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5.94, i32 0, i32 0)) #11
  br i1 %tobool5.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi2ELy1024EEC2EPvPc.exit
  %call12146 = tail call i32 @halide_error_failed_to_upgrade_buffer_t(i8* %user_context, i8* %name, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.8.103, i32 0, i32 0)) #11
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.8.103, i32 0, i32 0)) #11
  tail call void @halide_free(i8* %user_context, i8* null) #11
  br label %return

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILi2ELy1024EEC2EPvPc.exit
  %6 = ptrtoint i8* %call5.i118 to i32
  %sub.ptr.sub.i.i125 = sub i32 1, %4
  %add.i.i126 = add i32 %sub.ptr.sub.i.i125, %6
  %conv.i.i127 = sext i32 %add.i.i126 to i64
  tail call void @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i127) #11
  %call12 = tail call i32 @halide_error_failed_to_upgrade_buffer_t(i8* %user_context, i8* %name, i8* nonnull %call.i) #11
  tail call void @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i127) #11
  tail call void @halide_free(i8* %user_context, i8* nonnull %call.i) #11
  br label %return

if.end:                                           ; preds = %if.then
  %tobool13 = icmp eq i32 %bounds_query_only, 0
  br i1 %tobool13, label %if.end22, label %if.then14

if.then14:                                        ; preds = %if.end
  %host15 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %new_buf, i32 0, i32 2
  %7 = load i8*, i8** %host15, align 4, !tbaa !32
  %cmp17 = icmp eq i8* %7, %0
  br i1 %cmp17, label %return, label %if.then18

if.then18:                                        ; preds = %if.then14
  %call19 = tail call i32 @halide_error_failed_to_upgrade_buffer_t(i8* %user_context, i8* %name, i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.6.96, i32 0, i32 0)) #11
  br label %return

if.end22:                                         ; preds = %if.end
  %dev25.phi.trans.insert = getelementptr inbounds %struct.buffer_t, %struct.buffer_t* %old_buf, i32 0, i32 0
  %.pre = load i64, i64* %dev25.phi.trans.insert, align 8, !tbaa !69
  %host24 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %new_buf, i32 0, i32 2
  store i8* %0, i8** %host24, align 4, !tbaa !32
  %tobool26 = icmp eq i64 %.pre, 0
  br i1 %tobool26, label %if.end32, label %if.then27

if.then27:                                        ; preds = %if.end22
  %conv = trunc i64 %.pre to i32
  %8 = inttoptr i32 %conv to %"struct.Halide::Runtime::Internal::old_dev_wrapper"*
  %device = getelementptr inbounds %"struct.Halide::Runtime::Internal::old_dev_wrapper", %"struct.Halide::Runtime::Internal::old_dev_wrapper"* %8, i32 0, i32 0
  %9 = load i64, i64* %device, align 8, !tbaa !70
  %interface = getelementptr inbounds %"struct.Halide::Runtime::Internal::old_dev_wrapper", %"struct.Halide::Runtime::Internal::old_dev_wrapper"* %8, i32 0, i32 1
  %10 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %interface, align 8, !tbaa !72
  br label %if.end32

if.end32:                                         ; preds = %if.then27, %if.end22, %if.end22.thread
  %.sink151 = phi i64 [ %9, %if.then27 ], [ 0, %if.end22.thread ], [ 0, %if.end22 ]
  %.sink = phi %struct.halide_device_interface_t* [ %10, %if.then27 ], [ null, %if.end22.thread ], [ null, %if.end22 ]
  %11 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %new_buf, i32 0, i32 0
  store i64 %.sink151, i64* %11, align 8
  %12 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %new_buf, i32 0, i32 1
  store %struct.halide_device_interface_t* %.sink, %struct.halide_device_interface_t** %12, align 8
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %new_buf, i32 0, i32 8
  %13 = load i32, i32* %dimensions, align 4, !tbaa !34
  %cmp33149 = icmp sgt i32 %13, 0
  br i1 %cmp33149, label %for.body.lr.ph, label %for.cond.cleanup

for.body.lr.ph:                                   ; preds = %if.end32
  %dim = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %new_buf, i32 0, i32 9
  %14 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !35
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body, %if.end32
  %flags = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %new_buf, i32 0, i32 3
  %host_dirty = getelementptr inbounds %struct.buffer_t, %struct.buffer_t* %old_buf, i32 0, i32 6
  %15 = load i8, i8* %host_dirty, align 8, !tbaa !73, !range !19
  %16 = zext i8 %15 to i64
  %dev_dirty = getelementptr inbounds %struct.buffer_t, %struct.buffer_t* %old_buf, i32 0, i32 7
  %17 = load i8, i8* %dev_dirty, align 1, !tbaa !74, !range !19
  %tobool45 = icmp eq i8 %17, 0
  %or.i.i = or i64 %16, 2
  %selv.i.i = select i1 %tobool45, i64 %16, i64 %or.i.i
  store i64 %selv.i.i, i64* %flags, align 8, !tbaa !33
  br label %return

for.body:                                         ; preds = %for.body, %for.body.lr.ph
  %i.0150 = phi i32 [ 0, %for.body.lr.ph ], [ %inc, %for.body ]
  %arrayidx = getelementptr inbounds %struct.buffer_t, %struct.buffer_t* %old_buf, i32 0, i32 4, i32 %i.0150
  %18 = load i32, i32* %arrayidx, align 4, !tbaa !10
  %min35 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %14, i32 %i.0150, i32 0
  store i32 %18, i32* %min35, align 4, !tbaa !36
  %arrayidx36 = getelementptr inbounds %struct.buffer_t, %struct.buffer_t* %old_buf, i32 0, i32 2, i32 %i.0150
  %19 = load i32, i32* %arrayidx36, align 4, !tbaa !10
  %extent39 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %14, i32 %i.0150, i32 1
  store i32 %19, i32* %extent39, align 4, !tbaa !38
  %arrayidx40 = getelementptr inbounds %struct.buffer_t, %struct.buffer_t* %old_buf, i32 0, i32 3, i32 %i.0150
  %20 = load i32, i32* %arrayidx40, align 4, !tbaa !10
  %stride43 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %14, i32 %i.0150, i32 2
  store i32 %20, i32* %stride43, align 4, !tbaa !39
  %inc = add nuw nsw i32 %i.0150, 1
  %exitcond = icmp eq i32 %inc, %13
  br i1 %exitcond, label %for.cond.cleanup, label %for.body

return:                                           ; preds = %if.then.i, %if.else.i, %for.cond.cleanup, %if.then18, %if.then14
  %retval.0 = phi i32 [ %call19, %if.then18 ], [ 0, %for.cond.cleanup ], [ 0, %if.then14 ], [ %call12, %if.else.i ], [ %call12146, %if.then.i ]
  ret i32 %retval.0
}

; Function Attrs: nounwind
define weak i32 @halide_downgrade_buffer_t(i8* %user_context, i8* %name, %struct.halide_buffer_t* %new_buf, %struct.buffer_t* %old_buf) local_unnamed_addr #0 {
entry:
  %0 = bitcast %struct.buffer_t* %old_buf to i8*
  %call = tail call i8* @memset(i8* %0, i32 0, i32 72) #11
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %new_buf, i32 0, i32 8
  %1 = load i32, i32* %dimensions, align 4, !tbaa !34
  %cmp = icmp sgt i32 %1, 4
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call1 = tail call i32 @halide_error_failed_to_downgrade_buffer_t(i8* %user_context, i8* %name, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.7.97, i32 0, i32 0)) #11
  br label %return

if.end:                                           ; preds = %entry
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %new_buf, i32 0, i32 2
  %2 = bitcast i8** %host to i32*
  %3 = load i32, i32* %2, align 4, !tbaa !32
  %host2 = getelementptr inbounds %struct.buffer_t, %struct.buffer_t* %old_buf, i32 0, i32 1
  %4 = bitcast i8** %host2 to i32*
  store i32 %3, i32* %4, align 8, !tbaa !68
  %cmp440 = icmp sgt i32 %1, 0
  br i1 %cmp440, label %for.body.lr.ph, label %for.cond.cleanup

for.body.lr.ph:                                   ; preds = %if.end
  %dim = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %new_buf, i32 0, i32 9
  %5 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !35
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body, %if.end
  %bits.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %new_buf, i32 0, i32 7, i32 1
  %6 = load i8, i8* %bits.i, align 1, !tbaa !27
  %conv.i = zext i8 %6 to i32
  %add.i = add nuw nsw i32 %conv.i, 7
  %div.i = lshr i32 %add.i, 3
  %elem_size = getelementptr inbounds %struct.buffer_t, %struct.buffer_t* %old_buf, i32 0, i32 5
  store i32 %div.i, i32* %elem_size, align 4, !tbaa !66
  %call16 = tail call i32 @halide_downgrade_buffer_t_device_fields(i8* %user_context, i8* %name, %struct.halide_buffer_t* nonnull %new_buf, %struct.buffer_t* nonnull %old_buf) #12
  br label %return

for.body:                                         ; preds = %for.body, %for.body.lr.ph
  %i.041 = phi i32 [ 0, %for.body.lr.ph ], [ %inc, %for.body ]
  %min = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %i.041, i32 0
  %7 = load i32, i32* %min, align 4, !tbaa !36
  %arrayidx6 = getelementptr inbounds %struct.buffer_t, %struct.buffer_t* %old_buf, i32 0, i32 4, i32 %i.041
  store i32 %7, i32* %arrayidx6, align 4, !tbaa !10
  %extent = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %i.041, i32 1
  %8 = load i32, i32* %extent, align 4, !tbaa !38
  %arrayidx10 = getelementptr inbounds %struct.buffer_t, %struct.buffer_t* %old_buf, i32 0, i32 2, i32 %i.041
  store i32 %8, i32* %arrayidx10, align 4, !tbaa !10
  %stride = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i32 %i.041, i32 2
  %9 = load i32, i32* %stride, align 4, !tbaa !39
  %arrayidx14 = getelementptr inbounds %struct.buffer_t, %struct.buffer_t* %old_buf, i32 0, i32 3, i32 %i.041
  store i32 %9, i32* %arrayidx14, align 4, !tbaa !10
  %inc = add nuw nsw i32 %i.041, 1
  %10 = load i32, i32* %dimensions, align 4, !tbaa !34
  %cmp4 = icmp slt i32 %inc, %10
  br i1 %cmp4, label %for.body, label %for.cond.cleanup

return:                                           ; preds = %for.cond.cleanup, %if.then
  %retval.0 = phi i32 [ %call1, %if.then ], [ %call16, %for.cond.cleanup ]
  ret i32 %retval.0
}

declare i8* @memset(i8*, i32, i32) local_unnamed_addr #2

; Function Attrs: nounwind
define weak i32 @halide_downgrade_buffer_t_device_fields(i8* %user_context, i8* %name, %struct.halide_buffer_t* %new_buf, %struct.buffer_t* %old_buf) local_unnamed_addr #0 {
entry:
  %flags.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %new_buf, i32 0, i32 3
  %0 = load i64, i64* %flags.i.i, align 8, !tbaa !33
  %host_dirty = getelementptr inbounds %struct.buffer_t, %struct.buffer_t* %old_buf, i32 0, i32 6
  %1 = trunc i64 %0 to i8
  %2 = and i8 %1, 1
  store i8 %2, i8* %host_dirty, align 8, !tbaa !73
  %dev_dirty = getelementptr inbounds %struct.buffer_t, %struct.buffer_t* %old_buf, i32 0, i32 7
  %and.i.i42 = lshr i64 %0, 1
  %3 = trunc i64 %and.i.i42 to i8
  %4 = and i8 %3, 1
  store i8 %4, i8* %dev_dirty, align 1, !tbaa !74
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %new_buf, i32 0, i32 0
  %5 = load i64, i64* %device, align 8, !tbaa !29
  %tobool = icmp eq i64 %5, 0
  %dev = getelementptr inbounds %struct.buffer_t, %struct.buffer_t* %old_buf, i32 0, i32 0
  %6 = load i64, i64* %dev, align 8, !tbaa !69
  %tobool3 = icmp ne i64 %6, 0
  br i1 %tobool, label %if.else15, label %if.then

if.then:                                          ; preds = %entry
  br i1 %tobool3, label %if.then4, label %if.else

if.then4:                                         ; preds = %if.then
  %conv = trunc i64 %6 to i32
  %7 = inttoptr i32 %conv to %"struct.Halide::Runtime::Internal::old_dev_wrapper"*
  %device7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::old_dev_wrapper", %"struct.Halide::Runtime::Internal::old_dev_wrapper"* %7, i32 0, i32 0
  store i64 %5, i64* %device7, align 8, !tbaa !70
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %new_buf, i32 0, i32 1
  %8 = bitcast %struct.halide_device_interface_t** %device_interface to i32*
  %9 = load i32, i32* %8, align 8, !tbaa !31
  %interface = getelementptr inbounds %"struct.Halide::Runtime::Internal::old_dev_wrapper", %"struct.Halide::Runtime::Internal::old_dev_wrapper"* %7, i32 0, i32 1
  %10 = bitcast %struct.halide_device_interface_t** %interface to i32*
  store i32 %9, i32* %10, align 8, !tbaa !72
  br label %if.end23

if.else:                                          ; preds = %if.then
  %call9 = tail call i8* @malloc(i32 16) #11
  %11 = load i64, i64* %device, align 8, !tbaa !29
  %device11 = bitcast i8* %call9 to i64*
  store i64 %11, i64* %device11, align 8, !tbaa !70
  %device_interface12 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %new_buf, i32 0, i32 1
  %12 = bitcast %struct.halide_device_interface_t** %device_interface12 to i32*
  %13 = load i32, i32* %12, align 8, !tbaa !31
  %interface13 = getelementptr inbounds i8, i8* %call9, i32 8
  %14 = bitcast i8* %interface13 to i32*
  store i32 %13, i32* %14, align 8, !tbaa !72
  %15 = ptrtoint i8* %call9 to i32
  %16 = zext i32 %15 to i64
  store i64 %16, i64* %dev, align 8, !tbaa !69
  br label %if.end23

if.else15:                                        ; preds = %entry
  br i1 %tobool3, label %if.then18, label %if.end23

if.then18:                                        ; preds = %if.else15
  %conv20 = trunc i64 %6 to i32
  %17 = inttoptr i32 %conv20 to i8*
  tail call void @free(i8* %17) #11
  store i64 0, i64* %dev, align 8, !tbaa !69
  br label %if.end23

if.end23:                                         ; preds = %if.then18, %if.else15, %if.else, %if.then4
  ret i32 0
}

; Function Attrs: nounwind
define weak i32 @halide_copy_to_host_legacy(i8* %user_context, %struct.buffer_t* %old_buf) local_unnamed_addr #0 {
entry:
  %new_buf = alloca %struct.halide_buffer_t, align 8
  %shape = alloca [4 x %struct.halide_dimension_t], align 4
  %0 = bitcast %struct.halide_buffer_t* %new_buf to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %0) #9
  %1 = bitcast [4 x %struct.halide_dimension_t]* %shape to i8*
  %2 = bitcast %struct.halide_buffer_t* %new_buf to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %2, i8 0, i64 64, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %1) #9
  %array.begin = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i32 0, i32 0
  %dim = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %new_buf, i32 0, i32 9
  %3 = bitcast [4 x %struct.halide_dimension_t]* %shape to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %3, i8 0, i64 64, i1 false)
  store %struct.halide_dimension_t* %array.begin, %struct.halide_dimension_t** %dim, align 8, !tbaa !35
  %call = call i32 @_ZN6Halide7Runtime8Internal29guess_type_and_dimensionalityEPvP8buffer_tP15halide_buffer_t(i8* %user_context, %struct.buffer_t* %old_buf, %struct.halide_buffer_t* nonnull %new_buf) #12
  %tobool = icmp eq i32 %call, 0
  br i1 %tobool, label %lor.end, label %lor.end13

lor.end:                                          ; preds = %entry
  %call1 = call i32 @halide_upgrade_buffer_t(i8* %user_context, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.89, i32 0, i32 0), %struct.buffer_t* %old_buf, %struct.halide_buffer_t* nonnull %new_buf, i32 0) #12
  %tobool2 = icmp eq i32 %call1, 0
  br i1 %tobool2, label %lor.end7, label %lor.end13

lor.end7:                                         ; preds = %lor.end
  %call5 = call i32 @halide_copy_to_host(i8* %user_context, %struct.halide_buffer_t* nonnull %new_buf) #11
  %tobool6 = icmp eq i32 %call5, 0
  br i1 %tobool6, label %lor.rhs10, label %lor.end13

lor.rhs10:                                        ; preds = %lor.end7
  %call11 = call i32 @halide_downgrade_buffer_t_device_fields(i8* %user_context, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.89, i32 0, i32 0), %struct.halide_buffer_t* nonnull %new_buf, %struct.buffer_t* %old_buf) #12
  %tobool12 = icmp ne i32 %call11, 0
  %phitmp = zext i1 %tobool12 to i32
  br label %lor.end13

lor.end13:                                        ; preds = %lor.rhs10, %lor.end7, %lor.end, %entry
  %4 = phi i32 [ 1, %lor.end7 ], [ %phitmp, %lor.rhs10 ], [ 1, %lor.end ], [ 1, %entry ]
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %1) #9
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %0) #9
  ret i32 %4
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1) #4

; Function Attrs: nounwind
define weak i32 @halide_copy_to_device_legacy(i8* %user_context, %struct.buffer_t* %old_buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %new_buf = alloca %struct.halide_buffer_t, align 8
  %shape = alloca [4 x %struct.halide_dimension_t], align 4
  %0 = bitcast %struct.halide_buffer_t* %new_buf to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %0) #9
  %1 = bitcast [4 x %struct.halide_dimension_t]* %shape to i8*
  %2 = bitcast %struct.halide_buffer_t* %new_buf to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %2, i8 0, i64 64, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %1) #9
  %array.begin = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i32 0, i32 0
  %dim = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %new_buf, i32 0, i32 9
  %3 = bitcast [4 x %struct.halide_dimension_t]* %shape to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %3, i8 0, i64 64, i1 false)
  store %struct.halide_dimension_t* %array.begin, %struct.halide_dimension_t** %dim, align 8, !tbaa !35
  %call = call i32 @_ZN6Halide7Runtime8Internal29guess_type_and_dimensionalityEPvP8buffer_tP15halide_buffer_t(i8* %user_context, %struct.buffer_t* %old_buf, %struct.halide_buffer_t* nonnull %new_buf) #12
  %tobool = icmp eq i32 %call, 0
  br i1 %tobool, label %lor.end, label %lor.end14

lor.end:                                          ; preds = %entry
  %call2 = call i32 @halide_upgrade_buffer_t(i8* %user_context, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.89, i32 0, i32 0), %struct.buffer_t* %old_buf, %struct.halide_buffer_t* nonnull %new_buf, i32 0) #12
  %tobool3 = icmp eq i32 %call2, 0
  br i1 %tobool3, label %lor.end8, label %lor.end14

lor.end8:                                         ; preds = %lor.end
  %call6 = call i32 @halide_copy_to_device(i8* %user_context, %struct.halide_buffer_t* nonnull %new_buf, %struct.halide_device_interface_t* %device_interface) #11
  %tobool7 = icmp eq i32 %call6, 0
  br i1 %tobool7, label %lor.rhs11, label %lor.end14

lor.rhs11:                                        ; preds = %lor.end8
  %call12 = call i32 @halide_downgrade_buffer_t_device_fields(i8* %user_context, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.89, i32 0, i32 0), %struct.halide_buffer_t* nonnull %new_buf, %struct.buffer_t* %old_buf) #12
  %tobool13 = icmp ne i32 %call12, 0
  %phitmp = zext i1 %tobool13 to i32
  br label %lor.end14

lor.end14:                                        ; preds = %lor.rhs11, %lor.end8, %lor.end, %entry
  %4 = phi i32 [ 1, %lor.end8 ], [ %phitmp, %lor.rhs11 ], [ 1, %lor.end ], [ 1, %entry ]
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %1) #9
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %0) #9
  ret i32 %4
}

; Function Attrs: nounwind
define weak i32 @halide_device_sync_legacy(i8* %user_context, %struct.buffer_t* %old_buf) local_unnamed_addr #0 {
entry:
  %new_buf = alloca %struct.halide_buffer_t, align 8
  %shape = alloca [4 x %struct.halide_dimension_t], align 4
  %0 = bitcast %struct.halide_buffer_t* %new_buf to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %0) #9
  %1 = bitcast [4 x %struct.halide_dimension_t]* %shape to i8*
  %2 = bitcast %struct.halide_buffer_t* %new_buf to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %2, i8 0, i64 64, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %1) #9
  %array.begin = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i32 0, i32 0
  %dim = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %new_buf, i32 0, i32 9
  %3 = bitcast [4 x %struct.halide_dimension_t]* %shape to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %3, i8 0, i64 64, i1 false)
  store %struct.halide_dimension_t* %array.begin, %struct.halide_dimension_t** %dim, align 8, !tbaa !35
  %call = call i32 @_ZN6Halide7Runtime8Internal29guess_type_and_dimensionalityEPvP8buffer_tP15halide_buffer_t(i8* %user_context, %struct.buffer_t* %old_buf, %struct.halide_buffer_t* nonnull %new_buf) #12
  %tobool = icmp eq i32 %call, 0
  br i1 %tobool, label %lor.end, label %lor.end13

lor.end:                                          ; preds = %entry
  %call1 = call i32 @halide_upgrade_buffer_t(i8* %user_context, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.89, i32 0, i32 0), %struct.buffer_t* %old_buf, %struct.halide_buffer_t* nonnull %new_buf, i32 0) #12
  %tobool2 = icmp eq i32 %call1, 0
  br i1 %tobool2, label %lor.end7, label %lor.end13

lor.end7:                                         ; preds = %lor.end
  %call5 = call i32 @halide_device_sync(i8* %user_context, %struct.halide_buffer_t* nonnull %new_buf) #11
  %tobool6 = icmp eq i32 %call5, 0
  br i1 %tobool6, label %lor.rhs10, label %lor.end13

lor.rhs10:                                        ; preds = %lor.end7
  %call11 = call i32 @halide_downgrade_buffer_t_device_fields(i8* %user_context, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.89, i32 0, i32 0), %struct.halide_buffer_t* nonnull %new_buf, %struct.buffer_t* %old_buf) #12
  %tobool12 = icmp ne i32 %call11, 0
  %phitmp = zext i1 %tobool12 to i32
  br label %lor.end13

lor.end13:                                        ; preds = %lor.rhs10, %lor.end7, %lor.end, %entry
  %4 = phi i32 [ 1, %lor.end7 ], [ %phitmp, %lor.rhs10 ], [ 1, %lor.end ], [ 1, %entry ]
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %1) #9
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %0) #9
  ret i32 %4
}

; Function Attrs: nounwind
define weak i32 @halide_device_malloc_legacy(i8* %user_context, %struct.buffer_t* %old_buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %new_buf = alloca %struct.halide_buffer_t, align 8
  %shape = alloca [4 x %struct.halide_dimension_t], align 4
  %0 = bitcast %struct.halide_buffer_t* %new_buf to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %0) #9
  %1 = bitcast [4 x %struct.halide_dimension_t]* %shape to i8*
  %2 = bitcast %struct.halide_buffer_t* %new_buf to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %2, i8 0, i64 64, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %1) #9
  %array.begin = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i32 0, i32 0
  %dim = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %new_buf, i32 0, i32 9
  %3 = bitcast [4 x %struct.halide_dimension_t]* %shape to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %3, i8 0, i64 64, i1 false)
  store %struct.halide_dimension_t* %array.begin, %struct.halide_dimension_t** %dim, align 8, !tbaa !35
  %call = call i32 @_ZN6Halide7Runtime8Internal29guess_type_and_dimensionalityEPvP8buffer_tP15halide_buffer_t(i8* %user_context, %struct.buffer_t* %old_buf, %struct.halide_buffer_t* nonnull %new_buf) #12
  %tobool = icmp eq i32 %call, 0
  br i1 %tobool, label %lor.end, label %lor.end14

lor.end:                                          ; preds = %entry
  %call2 = call i32 @halide_upgrade_buffer_t(i8* %user_context, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.89, i32 0, i32 0), %struct.buffer_t* %old_buf, %struct.halide_buffer_t* nonnull %new_buf, i32 0) #12
  %tobool3 = icmp eq i32 %call2, 0
  br i1 %tobool3, label %lor.end8, label %lor.end14

lor.end8:                                         ; preds = %lor.end
  %call6 = call i32 @halide_device_malloc(i8* %user_context, %struct.halide_buffer_t* nonnull %new_buf, %struct.halide_device_interface_t* %device_interface) #11
  %tobool7 = icmp eq i32 %call6, 0
  br i1 %tobool7, label %lor.rhs11, label %lor.end14

lor.rhs11:                                        ; preds = %lor.end8
  %call12 = call i32 @halide_downgrade_buffer_t_device_fields(i8* %user_context, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.89, i32 0, i32 0), %struct.halide_buffer_t* nonnull %new_buf, %struct.buffer_t* %old_buf) #12
  %tobool13 = icmp ne i32 %call12, 0
  %phitmp = zext i1 %tobool13 to i32
  br label %lor.end14

lor.end14:                                        ; preds = %lor.rhs11, %lor.end8, %lor.end, %entry
  %4 = phi i32 [ 1, %lor.end8 ], [ %phitmp, %lor.rhs11 ], [ 1, %lor.end ], [ 1, %entry ]
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %1) #9
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %0) #9
  ret i32 %4
}

; Function Attrs: nounwind
define weak i32 @halide_device_free_legacy(i8* %user_context, %struct.buffer_t* %old_buf) local_unnamed_addr #0 {
entry:
  %new_buf = alloca %struct.halide_buffer_t, align 8
  %shape = alloca [4 x %struct.halide_dimension_t], align 4
  %0 = bitcast %struct.halide_buffer_t* %new_buf to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %0) #9
  %1 = bitcast [4 x %struct.halide_dimension_t]* %shape to i8*
  %2 = bitcast %struct.halide_buffer_t* %new_buf to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %2, i8 0, i64 64, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %1) #9
  %array.begin = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i32 0, i32 0
  %dim = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %new_buf, i32 0, i32 9
  %3 = bitcast [4 x %struct.halide_dimension_t]* %shape to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %3, i8 0, i64 64, i1 false)
  store %struct.halide_dimension_t* %array.begin, %struct.halide_dimension_t** %dim, align 8, !tbaa !35
  %call = call i32 @_ZN6Halide7Runtime8Internal29guess_type_and_dimensionalityEPvP8buffer_tP15halide_buffer_t(i8* %user_context, %struct.buffer_t* %old_buf, %struct.halide_buffer_t* nonnull %new_buf) #12
  %tobool = icmp eq i32 %call, 0
  br i1 %tobool, label %lor.end, label %lor.end13

lor.end:                                          ; preds = %entry
  %call1 = call i32 @halide_upgrade_buffer_t(i8* %user_context, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.89, i32 0, i32 0), %struct.buffer_t* %old_buf, %struct.halide_buffer_t* nonnull %new_buf, i32 0) #12
  %tobool2 = icmp eq i32 %call1, 0
  br i1 %tobool2, label %lor.end7, label %lor.end13

lor.end7:                                         ; preds = %lor.end
  %call5 = call i32 @halide_device_free(i8* %user_context, %struct.halide_buffer_t* nonnull %new_buf) #11
  %tobool6 = icmp eq i32 %call5, 0
  br i1 %tobool6, label %lor.rhs10, label %lor.end13

lor.rhs10:                                        ; preds = %lor.end7
  %call11 = call i32 @halide_downgrade_buffer_t_device_fields(i8* %user_context, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.89, i32 0, i32 0), %struct.halide_buffer_t* nonnull %new_buf, %struct.buffer_t* %old_buf) #12
  %tobool12 = icmp ne i32 %call11, 0
  %phitmp = zext i1 %tobool12 to i32
  br label %lor.end13

lor.end13:                                        ; preds = %lor.rhs10, %lor.end7, %lor.end, %entry
  %4 = phi i32 [ 1, %lor.end7 ], [ %phitmp, %lor.rhs10 ], [ 1, %lor.end ], [ 1, %entry ]
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %1) #9
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %0) #9
  ret i32 %4
}

; Function Attrs: norecurse nounwind
define weak void @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* %ptr, i64 %len) local_unnamed_addr #3 {
entry:
  ret void
}

; Function Attrs: norecurse nounwind
define weak void @halide_msan_annotate_buffer_is_initialized(i8* %user_context, %struct.halide_buffer_t* %b) local_unnamed_addr #3 {
entry:
  ret void
}

; Function Attrs: norecurse nounwind
define weak void @halide_msan_annotate_buffer_is_initialized_as_destructor(i8* %user_context, i8* %b) local_unnamed_addr #3 {
entry:
  ret void
}

; Function Attrs: nounwind
define weak i32 @halide_qurt_hvx_lock(i8* %user_context, i32 %size) local_unnamed_addr #0 {
entry:
  switch i32 %size, label %sw.default [
    i32 64, label %sw.epilog
    i32 128, label %sw.bb1
  ]

sw.bb1:                                           ; preds = %entry
  br label %sw.epilog

sw.default:                                       ; preds = %entry
  %call.i = tail call i8* @halide_malloc(i8* %user_context, i32 1024) #11
  %tobool5.i = icmp eq i8* %call.i, null
  br i1 %tobool5.i, label %if.then.i25, label %if.else.i26

if.then.i25:                                      ; preds = %sw.default
  %call5.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* nonnull getelementptr inbounds ([34 x i8], [34 x i8]* @.str.102, i32 0, i32 0)) #11
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.8.103, i32 0, i32 0)) #11
  tail call void @halide_free(i8* %user_context, i8* null) #11
  br label %cleanup12

if.else.i26:                                      ; preds = %sw.default
  %0 = ptrtoint i8* %call.i to i32
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !7
  %call5.i = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* nonnull getelementptr inbounds ([34 x i8], [34 x i8]* @.str.102, i32 0, i32 0)) #11
  %1 = ptrtoint i8* %call5.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %0
  %add.i.i = add i32 %sub.ptr.sub.i.i, %1
  %conv.i.i = sext i32 %add.i.i to i64
  tail call void @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #11
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #11
  tail call void @halide_free(i8* %user_context, i8* nonnull %call.i) #11
  br label %cleanup12

sw.epilog:                                        ; preds = %sw.bb1, %entry
  %mode.0 = phi i32 [ 1, %sw.bb1 ], [ 0, %entry ]
  %call5 = tail call i32 @qurt_hvx_lock(i32 %mode.0) #11
  %cmp = icmp eq i32 %call5, 0
  br i1 %cmp, label %cleanup12, label %if.then

if.then:                                          ; preds = %sw.epilog
  %call.i50 = tail call i8* @halide_malloc(i8* %user_context, i32 1024) #11
  %tobool5.i53 = icmp eq i8* %call.i50, null
  br i1 %tobool5.i53, label %if.then.i31, label %if.else.i37

if.then.i31:                                      ; preds = %if.then
  %call5.i4582 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* nonnull getelementptr inbounds ([22 x i8], [22 x i8]* @.str.5.104, i32 0, i32 0)) #11
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.8.103, i32 0, i32 0)) #11
  tail call void @halide_free(i8* %user_context, i8* null) #11
  br label %cleanup12

if.else.i37:                                      ; preds = %if.then
  %2 = ptrtoint i8* %call.i50 to i32
  %add.ptr.i54 = getelementptr inbounds i8, i8* %call.i50, i32 1023
  store i8 0, i8* %add.ptr.i54, align 1, !tbaa !7
  %call5.i45 = tail call i8* @halide_string_to_string(i8* nonnull %call.i50, i8* nonnull %add.ptr.i54, i8* nonnull getelementptr inbounds ([22 x i8], [22 x i8]* @.str.5.104, i32 0, i32 0)) #11
  %3 = ptrtoint i8* %call5.i45 to i32
  %sub.ptr.sub.i.i34 = sub i32 1, %2
  %add.i.i35 = add i32 %sub.ptr.sub.i.i34, %3
  %conv.i.i36 = sext i32 %add.i.i35 to i64
  tail call void @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i50, i64 %conv.i.i36) #11
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i50) #11
  tail call void @halide_free(i8* %user_context, i8* nonnull %call.i50) #11
  br label %cleanup12

cleanup12:                                        ; preds = %if.then.i31, %if.else.i37, %if.then.i25, %if.else.i26, %sw.epilog
  %retval.1 = phi i32 [ 0, %sw.epilog ], [ -1, %if.else.i26 ], [ -1, %if.then.i25 ], [ -1, %if.else.i37 ], [ -1, %if.then.i31 ]
  ret i32 %retval.1
}

declare i32 @qurt_hvx_lock(i32) local_unnamed_addr #2

; Function Attrs: nounwind
define weak i32 @halide_qurt_hvx_unlock(i8* %user_context) local_unnamed_addr #0 {
entry:
  %call = tail call i32 @qurt_hvx_unlock() #11
  %cmp = icmp eq i32 %call, 0
  br i1 %cmp, label %cleanup, label %if.then

if.then:                                          ; preds = %entry
  %call.i = tail call i8* @halide_malloc(i8* %user_context, i32 1024) #11
  %tobool5.i = icmp eq i8* %call.i, null
  br i1 %tobool5.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %if.then
  %call5.i31 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* nonnull getelementptr inbounds ([24 x i8], [24 x i8]* @.str.7.105, i32 0, i32 0)) #11
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.8.103, i32 0, i32 0)) #11
  tail call void @halide_free(i8* %user_context, i8* null) #11
  br label %cleanup

if.else.i:                                        ; preds = %if.then
  %0 = ptrtoint i8* %call.i to i32
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i32 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !7
  %call5.i = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* nonnull getelementptr inbounds ([24 x i8], [24 x i8]* @.str.7.105, i32 0, i32 0)) #11
  %1 = ptrtoint i8* %call5.i to i32
  %sub.ptr.sub.i.i = sub i32 1, %0
  %add.i.i = add i32 %sub.ptr.sub.i.i, %1
  %conv.i.i = sext i32 %add.i.i to i64
  tail call void @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %conv.i.i) #11
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #11
  tail call void @halide_free(i8* %user_context, i8* nonnull %call.i) #11
  br label %cleanup

cleanup:                                          ; preds = %if.then.i, %if.else.i, %entry
  %retval.0 = phi i32 [ 0, %entry ], [ -1, %if.else.i ], [ -1, %if.then.i ]
  ret i32 %retval.0
}

declare i32 @qurt_hvx_unlock() local_unnamed_addr #2

; Function Attrs: nounwind
define weak void @halide_qurt_hvx_unlock_as_destructor(i8* %user_context, i8*) local_unnamed_addr #0 {
entry:
  %call = tail call i32 @halide_qurt_hvx_unlock(i8* %user_context) #12
  ret void
}

; Function Attrs: nounwind readnone
declare <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32>) #7

; Function Attrs: nounwind readnone
declare <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32>) #7

; Function Attrs: nounwind readnone
declare <64 x i32> @llvm.hexagon.V6.vshuffvdd.128B(<32 x i32>, <32 x i32>, i32) #7

; Function Attrs: nounwind readnone
declare i32 @llvm.hexagon.S2.vsplatrb(i32) #7

; Function Attrs: nounwind readnone
declare <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32) #7

; Function Attrs: nounwind readnone
declare <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32>, <32 x i32>) #7

; Function Attrs: nounwind readnone
declare <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32>, i32) #7

; Function Attrs: nounwind readnone
declare <64 x i32> @llvm.hexagon.V6.vzb.128B(<32 x i32>) #7

; Function Attrs: nounwind readnone
declare <64 x i32> @llvm.hexagon.V6.vmpabus.acc.128B(<64 x i32>, <64 x i32>, i32) #7

; Function Attrs: nounwind
define weak i32 @halide_default_can_use_target_features(i32 %count, i64* %features) #0 {
entry:
  %tmp = alloca %"struct.Halide::Runtime::Internal::CpuFeatures", align 8
  %.b30 = load i1, i1* @_ZZ38halide_default_can_use_target_featuresE11initialized, align 1
  br i1 %.b30, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %0 = bitcast %"struct.Halide::Runtime::Internal::CpuFeatures"* %tmp to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %0) #9
  call void @_ZN6Halide7Runtime8Internal23halide_get_cpu_featuresEv(%"struct.Halide::Runtime::Internal::CpuFeatures"* nonnull sret %tmp) #11
  %call = call i8* @memcpy(i8* bitcast ([2 x i64]* @_ZZ38halide_default_can_use_target_featuresE20cpu_features_storage to i8*), i8* nonnull %0, i32 16) #11
  store i1 true, i1* @_ZZ38halide_default_can_use_target_featuresE11initialized, align 1
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %0) #9
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %cmp = icmp eq i32 %count, 1
  br i1 %cmp, label %for.body, label %if.then1

if.then1:                                         ; preds = %if.end
  call void @halide_error(i8* null, i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.106, i32 0, i32 0)) #11
  br label %for.body

for.body:                                         ; preds = %if.then1, %if.end
  %1 = load i64, i64* %features, align 8, !tbaa !22
  %2 = load i64, i64* getelementptr inbounds ([2 x i64], [2 x i64]* @_ZZ38halide_default_can_use_target_featuresE20cpu_features_storage, i32 0, i32 0), align 8, !tbaa !22
  %and = and i64 %2, %1
  %cmp5 = icmp eq i64 %and, 0
  br i1 %cmp5, label %for.inc, label %if.then6

if.then6:                                         ; preds = %for.body
  %3 = load i64, i64* getelementptr inbounds ([2 x i64], [2 x i64]* @_ZZ38halide_default_can_use_target_featuresE20cpu_features_storage, i32 0, i32 1), align 8, !tbaa !22
  %and8 = and i64 %3, %and
  %cmp9 = icmp eq i64 %and8, %and
  br i1 %cmp9, label %for.inc, label %cleanup15

for.inc:                                          ; preds = %if.then6, %for.body
  br label %cleanup15

cleanup15:                                        ; preds = %for.inc, %if.then6
  %retval.3 = phi i32 [ 0, %if.then6 ], [ 1, %for.inc ]
  ret i32 %retval.3
}

; Function Attrs: norecurse nounwind
define weak i32 (i32, i64*)* @halide_set_custom_can_use_target_features(i32 (i32, i64*)* %fn) local_unnamed_addr #3 {
entry:
  %0 = load i32 (i32, i64*)*, i32 (i32, i64*)** @_ZN6Halide7Runtime8Internal30custom_can_use_target_featuresE, align 4, !tbaa !12
  store i32 (i32, i64*)* %fn, i32 (i32, i64*)** @_ZN6Halide7Runtime8Internal30custom_can_use_target_featuresE, align 4, !tbaa !12
  ret i32 (i32, i64*)* %0
}

; Function Attrs: nounwind
define weak i32 @halide_can_use_target_features(i32 %count, i64* %features) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i32, i64*)*, i32 (i32, i64*)** @_ZN6Halide7Runtime8Internal30custom_can_use_target_featuresE, align 4, !tbaa !12
  %call = tail call i32 %0(i32 %count, i64* %features) #11
  ret i32 %call
}

; Function Attrs: norecurse nounwind
define linkonce void @_ZN6Halide7Runtime8Internal23halide_get_cpu_featuresEv(%"struct.Halide::Runtime::Internal::CpuFeatures"* noalias sret %agg.result) local_unnamed_addr #3 {
entry:
  %0 = bitcast %"struct.Halide::Runtime::Internal::CpuFeatures"* %agg.result to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %0, i8 0, i64 16, i1 false)
  ret void
}

; Function Attrs: nounwind readnone
declare <32 x i32> @llvm.hexagon.V6.vpackob.128B(<32 x i32>, <32 x i32>) #7

; Function Attrs: nounwind readnone
declare <64 x i32> @llvm.hexagon.V6.vaddh.dv.128B(<64 x i32>, <64 x i32>) #7

; Function Attrs: nounwind readnone
declare <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32>, <64 x i32>) #7

; Function Attrs: nounwind readnone
declare <32 x i32> @llvm.hexagon.V6.vabsw.128B(<32 x i32>) #7

; Function Attrs: nounwind readnone
declare <32 x i32> @llvm.hexagon.V6.vmpyihb.acc.128B(<32 x i32>, <32 x i32>, i32) #7

; Function Attrs: nounwind readnone
declare <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32>, <32 x i32>) #7

; Function Attrs: nounwind
define i32 @gaussian5x5_hvx128(%struct.halide_buffer_t* noalias nocapture readonly %input.buffer, %struct.halide_buffer_t* noalias nocapture readonly %output.buffer) local_unnamed_addr #8 {
entry:
  %rows1 = alloca [384 x i16], align 128
  %hvx_lock_result = tail call i32 @halide_qurt_hvx_lock(i8* null, i32 128) #9
  %host.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %input.buffer, i32 0, i32 2
  %0 = load i8*, i8** %host.i, align 4, !tbaa !32
  %dim.i26 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %input.buffer, i32 0, i32 9
  %1 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i26, align 8, !tbaa !35
  %stride.i27 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %1, i32 1, i32 2
  %2 = load i32, i32* %stride.i27, align 4, !tbaa !39
  %host.i25 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %output.buffer, i32 0, i32 2
  %3 = load i8*, i8** %host.i25, align 4, !tbaa !32
  %dim.i21 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %output.buffer, i32 0, i32 9
  %4 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i21, align 8, !tbaa !35
  %extent.i22 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %4, i32 0, i32 1
  %5 = load i32, i32* %extent.i22, align 4, !tbaa !38
  %extent.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %4, i32 1, i32 1
  %6 = load i32, i32* %extent.i, align 4, !tbaa !38
  %7 = add nsw i32 %5, 127
  %8 = ashr i32 %7, 7
  %9 = add nsw i32 %6, 3
  %10 = ashr i32 %9, 2
  %11 = icmp sgt i32 %6, 0
  br i1 %11, label %"for output.s0.y.y.preheader", label %call_destructor.exit, !prof !75

"for output.s0.y.y.preheader":                    ; preds = %entry
  %12 = add nsw i32 %5, -1
  %13 = and i32 %12, -128
  %14 = icmp sgt i32 %5, 128
  %15 = select i1 %14, i32 2, i32 -2
  %16 = and i32 %7, -128
  %stride.i15 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %4, i32 1, i32 2
  %17 = load i32, i32* %stride.i15, align 4, !tbaa !39
  %18 = and i32 %2, -128
  %19 = add i32 %13, 130
  %t89.s = add i32 %19, %15
  %20 = add i32 %t89.s, %16
  %conv9.i = zext i32 %2 to i64
  %shl.i = shl nuw i64 %conv9.i, 32
  %conv1.i = sext i32 %20 to i64
  %shl2.i = shl nsw i64 %conv1.i, 16
  %or.i = or i64 %shl.i, %shl2.i
  %or6.i = or i64 %or.i, 281474976710664
  %21 = ashr i32 %17, 7
  %22 = icmp sgt i32 %5, 0
  br label %"for output.s0.y.y"

"for output.s0.y.y":                              ; preds = %"for output.s0.y.y.preheader", %"end for output.s0.y.yi"
  %output.s0.y.y = phi i32 [ %42, %"end for output.s0.y.yi" ], [ 0, %"for output.s0.y.y.preheader" ]
  %23 = shl nsw i32 %output.s0.y.y, 2
  %24 = add nuw nsw i32 %23, 6
  %25 = mul i32 %18, %24
  %26 = add nsw i32 %25, -2
  %27 = getelementptr inbounds i8, i8* %0, i32 %26
  tail call void asm sideeffect "l2fetch($0,$1)", "r,r"(i8* nonnull %27, i64 %or6.i) #9, !srcloc !76
  br label %"for output.s0.y.yi"

call_destructor.exit:                             ; preds = %"end for output.s0.y.yi", %entry
  tail call void @halide_qurt_hvx_unlock_as_destructor(i8* null, i8* nonnull inttoptr (i32 1 to i8*)) #11
  ret i32 0

"for output.s0.y.yi":                             ; preds = %"end for output.s0.x.x", %"for output.s0.y.y"
  %output.s0.y.yi = phi i32 [ 0, %"for output.s0.y.y" ], [ %51, %"end for output.s0.x.x" ]
  %28 = add nuw nsw i32 %output.s0.y.yi, %23
  %t95 = mul nsw i32 %28, %21
  br i1 %22, label %"for output.s0.x.x.preheader", label %"end for output.s0.x.x", !prof !75

"for output.s0.x.x.preheader":                    ; preds = %"for output.s0.y.yi"
  %29 = add nuw nsw i32 %28, 2
  %30 = add nuw nsw i32 %28, 1
  %31 = add nsw i32 %28, -1
  %32 = add nsw i32 %28, -2
  %33 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 384) #9
  %34 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %33, <32 x i32> %33)
  %35 = shufflevector <64 x i32> %34, <64 x i32> undef, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %36 = tail call <32 x i32> @llvm.hexagon.V6.vabsw.128B(<32 x i32> %33) #9
  %dup4.i.i6 = tail call i32 @llvm.hexagon.S2.vsplatrb(i32 4) #9
  %dup4.i.i4 = tail call i32 @llvm.hexagon.S2.vsplatrb(i32 6) #9
  %37 = mul i32 %18, %29
  %38 = mul i32 %18, %30
  %39 = mul i32 %18, %28
  %40 = mul i32 %18, %31
  %41 = mul i32 %18, %32
  br label %"for output.s0.x.x"

"end for output.s0.y.yi":                         ; preds = %"end for output.s0.x.x"
  %42 = add nuw nsw i32 %output.s0.y.y, 1
  %43 = icmp eq i32 %42, %10
  br i1 %43, label %call_destructor.exit, label %"for output.s0.y.y"

"for output.s0.x.x":                              ; preds = %"for output.s0.x.x.preheader", %"consume rows"
  %output.s0.x.x = phi i32 [ %2668, %"consume rows" ], [ 0, %"for output.s0.x.x.preheader" ]
  %44 = icmp eq i32 %output.s0.x.x, 0
  %45 = select i1 %44, i32 -2, i32 2
  %46 = shl nsw i32 %output.s0.x.x, 7
  %rows.s0.x.min_3 = add nsw i32 %45, %46
  %47 = sub nsw i32 257, %rows.s0.x.min_3
  %48 = ashr i32 %47, 7
  %49 = add nsw i32 %48, %output.s0.x.x
  %50 = icmp sgt i32 %49, 0
  br i1 %50, label %"for rows.s0.x.x", label %"consume rows", !prof !75

"end for output.s0.x.x":                          ; preds = %"consume rows", %"for output.s0.y.yi"
  %51 = add nuw nsw i32 %output.s0.y.yi, 1
  %52 = icmp eq i32 %51, 4
  br i1 %52, label %"end for output.s0.y.yi", label %"for output.s0.y.yi"

"for rows.s0.x.x":                                ; preds = %"for output.s0.x.x", %"for rows.s0.x.x"
  %rows.s0.x.x = phi i32 [ %483, %"for rows.s0.x.x" ], [ 0, %"for output.s0.x.x" ]
  %53 = shl nsw i32 %rows.s0.x.x, 7
  %54 = add nsw i32 %53, %rows.s0.x.min_3
  %55 = add nsw i32 %54, %37
  %56 = getelementptr inbounds i8, i8* %0, i32 %55
  %57 = bitcast i8* %56 to <32 x i32>*
  %58 = load <32 x i32>, <32 x i32>* %57, align 1, !tbaa !77
  %59 = tail call <64 x i32> @llvm.hexagon.V6.vzb.128B(<32 x i32> %58) #9
  %60 = add nsw i32 %54, %38
  %61 = getelementptr inbounds i8, i8* %0, i32 %60
  %62 = bitcast i8* %61 to <32 x i32>*
  %63 = load <32 x i32>, <32 x i32>* %62, align 1, !tbaa !77
  %64 = add nsw i32 %54, %39
  %65 = getelementptr inbounds i8, i8* %0, i32 %64
  %66 = bitcast i8* %65 to <32 x i32>*
  %67 = load <32 x i32>, <32 x i32>* %66, align 1, !tbaa !77
  %dv1.i10 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %67, <32 x i32> %63) #9
  %res.i11 = tail call <64 x i32> @llvm.hexagon.V6.vmpabus.acc.128B(<64 x i32> %59, <64 x i32> %dv1.i10, i32 100926980) #9
  %68 = add nsw i32 %54, %40
  %69 = getelementptr inbounds i8, i8* %0, i32 %68
  %70 = bitcast i8* %69 to <32 x i32>*
  %71 = load <32 x i32>, <32 x i32>* %70, align 1, !tbaa !77
  %72 = add nsw i32 %54, %41
  %73 = getelementptr inbounds i8, i8* %0, i32 %72
  %74 = bitcast i8* %73 to <32 x i32>*
  %75 = load <32 x i32>, <32 x i32>* %74, align 1, !tbaa !77
  %dv1.i = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %75, <32 x i32> %71) #9
  %res.i = tail call <64 x i32> @llvm.hexagon.V6.vmpabus.acc.128B(<64 x i32> %res.i11, <64 x i32> %dv1.i, i32 17039620) #9
  %e.i = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %res.i) #9
  %o.i = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %res.i) #9
  %r_32.i = tail call <64 x i32> @llvm.hexagon.V6.vshuffvdd.128B(<32 x i32> %o.i, <32 x i32> %e.i, i32 -2) #9
  %r.i = bitcast <64 x i32> %r_32.i to <128 x i16>
  %76 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %54) #9
  %77 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %76, <32 x i32> %76)
  %78 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %77, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>) #9
  %79 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %77, <64 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>) #9
  %80 = shufflevector <64 x i32> %78, <64 x i32> %79, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %t110 = srem <128 x i32> %80, %35
  %81 = shufflevector <128 x i32> %t110, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %82 = tail call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %81, i32 31) #9
  %83 = shufflevector <128 x i32> %t110, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %84 = tail call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %83, i32 31) #9
  %85 = shufflevector <128 x i32> %t110, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %86 = tail call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %85, i32 31) #9
  %87 = shufflevector <128 x i32> %t110, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %88 = tail call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %87, i32 31) #9
  %89 = tail call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %82, <32 x i32> %36) #9
  %90 = tail call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %84, <32 x i32> %36) #9
  %91 = tail call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %86, <32 x i32> %36) #9
  %92 = tail call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %88, <32 x i32> %36) #9
  %93 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %90, <32 x i32> %89)
  %94 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %92, <32 x i32> %91)
  %95 = shufflevector <128 x i32> %t110, <128 x i32> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %96 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %95, <64 x i32> %93) #9
  %97 = shufflevector <128 x i32> %t110, <128 x i32> undef, <64 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %98 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %97, <64 x i32> %94) #9
  %99 = extractelement <64 x i32> %96, i32 0
  %100 = extractelement <128 x i16> %r.i, i32 0
  %101 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %99
  store i16 %100, i16* %101, align 2, !tbaa !80
  %102 = extractelement <64 x i32> %96, i32 1
  %103 = extractelement <128 x i16> %r.i, i32 1
  %104 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %102
  store i16 %103, i16* %104, align 2, !tbaa !80
  %105 = extractelement <64 x i32> %96, i32 2
  %106 = extractelement <128 x i16> %r.i, i32 2
  %107 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %105
  store i16 %106, i16* %107, align 2, !tbaa !80
  %108 = extractelement <64 x i32> %96, i32 3
  %109 = extractelement <128 x i16> %r.i, i32 3
  %110 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %108
  store i16 %109, i16* %110, align 2, !tbaa !80
  %111 = extractelement <64 x i32> %96, i32 4
  %112 = extractelement <128 x i16> %r.i, i32 4
  %113 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %111
  store i16 %112, i16* %113, align 2, !tbaa !80
  %114 = extractelement <64 x i32> %96, i32 5
  %115 = extractelement <128 x i16> %r.i, i32 5
  %116 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %114
  store i16 %115, i16* %116, align 2, !tbaa !80
  %117 = extractelement <64 x i32> %96, i32 6
  %118 = extractelement <128 x i16> %r.i, i32 6
  %119 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %117
  store i16 %118, i16* %119, align 2, !tbaa !80
  %120 = extractelement <64 x i32> %96, i32 7
  %121 = extractelement <128 x i16> %r.i, i32 7
  %122 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %120
  store i16 %121, i16* %122, align 2, !tbaa !80
  %123 = extractelement <64 x i32> %96, i32 8
  %124 = extractelement <128 x i16> %r.i, i32 8
  %125 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %123
  store i16 %124, i16* %125, align 2, !tbaa !80
  %126 = extractelement <64 x i32> %96, i32 9
  %127 = extractelement <128 x i16> %r.i, i32 9
  %128 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %126
  store i16 %127, i16* %128, align 2, !tbaa !80
  %129 = extractelement <64 x i32> %96, i32 10
  %130 = extractelement <128 x i16> %r.i, i32 10
  %131 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %129
  store i16 %130, i16* %131, align 2, !tbaa !80
  %132 = extractelement <64 x i32> %96, i32 11
  %133 = extractelement <128 x i16> %r.i, i32 11
  %134 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %132
  store i16 %133, i16* %134, align 2, !tbaa !80
  %135 = extractelement <64 x i32> %96, i32 12
  %136 = extractelement <128 x i16> %r.i, i32 12
  %137 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %135
  store i16 %136, i16* %137, align 2, !tbaa !80
  %138 = extractelement <64 x i32> %96, i32 13
  %139 = extractelement <128 x i16> %r.i, i32 13
  %140 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %138
  store i16 %139, i16* %140, align 2, !tbaa !80
  %141 = extractelement <64 x i32> %96, i32 14
  %142 = extractelement <128 x i16> %r.i, i32 14
  %143 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %141
  store i16 %142, i16* %143, align 2, !tbaa !80
  %144 = extractelement <64 x i32> %96, i32 15
  %145 = extractelement <128 x i16> %r.i, i32 15
  %146 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %144
  store i16 %145, i16* %146, align 2, !tbaa !80
  %147 = extractelement <64 x i32> %96, i32 16
  %148 = extractelement <128 x i16> %r.i, i32 16
  %149 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %147
  store i16 %148, i16* %149, align 2, !tbaa !80
  %150 = extractelement <64 x i32> %96, i32 17
  %151 = extractelement <128 x i16> %r.i, i32 17
  %152 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %150
  store i16 %151, i16* %152, align 2, !tbaa !80
  %153 = extractelement <64 x i32> %96, i32 18
  %154 = extractelement <128 x i16> %r.i, i32 18
  %155 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %153
  store i16 %154, i16* %155, align 2, !tbaa !80
  %156 = extractelement <64 x i32> %96, i32 19
  %157 = extractelement <128 x i16> %r.i, i32 19
  %158 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %156
  store i16 %157, i16* %158, align 2, !tbaa !80
  %159 = extractelement <64 x i32> %96, i32 20
  %160 = extractelement <128 x i16> %r.i, i32 20
  %161 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %159
  store i16 %160, i16* %161, align 2, !tbaa !80
  %162 = extractelement <64 x i32> %96, i32 21
  %163 = extractelement <128 x i16> %r.i, i32 21
  %164 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %162
  store i16 %163, i16* %164, align 2, !tbaa !80
  %165 = extractelement <64 x i32> %96, i32 22
  %166 = extractelement <128 x i16> %r.i, i32 22
  %167 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %165
  store i16 %166, i16* %167, align 2, !tbaa !80
  %168 = extractelement <64 x i32> %96, i32 23
  %169 = extractelement <128 x i16> %r.i, i32 23
  %170 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %168
  store i16 %169, i16* %170, align 2, !tbaa !80
  %171 = extractelement <64 x i32> %96, i32 24
  %172 = extractelement <128 x i16> %r.i, i32 24
  %173 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %171
  store i16 %172, i16* %173, align 2, !tbaa !80
  %174 = extractelement <64 x i32> %96, i32 25
  %175 = extractelement <128 x i16> %r.i, i32 25
  %176 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %174
  store i16 %175, i16* %176, align 2, !tbaa !80
  %177 = extractelement <64 x i32> %96, i32 26
  %178 = extractelement <128 x i16> %r.i, i32 26
  %179 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %177
  store i16 %178, i16* %179, align 2, !tbaa !80
  %180 = extractelement <64 x i32> %96, i32 27
  %181 = extractelement <128 x i16> %r.i, i32 27
  %182 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %180
  store i16 %181, i16* %182, align 2, !tbaa !80
  %183 = extractelement <64 x i32> %96, i32 28
  %184 = extractelement <128 x i16> %r.i, i32 28
  %185 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %183
  store i16 %184, i16* %185, align 2, !tbaa !80
  %186 = extractelement <64 x i32> %96, i32 29
  %187 = extractelement <128 x i16> %r.i, i32 29
  %188 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %186
  store i16 %187, i16* %188, align 2, !tbaa !80
  %189 = extractelement <64 x i32> %96, i32 30
  %190 = extractelement <128 x i16> %r.i, i32 30
  %191 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %189
  store i16 %190, i16* %191, align 2, !tbaa !80
  %192 = extractelement <64 x i32> %96, i32 31
  %193 = extractelement <128 x i16> %r.i, i32 31
  %194 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %192
  store i16 %193, i16* %194, align 2, !tbaa !80
  %195 = extractelement <64 x i32> %96, i32 32
  %196 = extractelement <128 x i16> %r.i, i32 32
  %197 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %195
  store i16 %196, i16* %197, align 2, !tbaa !80
  %198 = extractelement <64 x i32> %96, i32 33
  %199 = extractelement <128 x i16> %r.i, i32 33
  %200 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %198
  store i16 %199, i16* %200, align 2, !tbaa !80
  %201 = extractelement <64 x i32> %96, i32 34
  %202 = extractelement <128 x i16> %r.i, i32 34
  %203 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %201
  store i16 %202, i16* %203, align 2, !tbaa !80
  %204 = extractelement <64 x i32> %96, i32 35
  %205 = extractelement <128 x i16> %r.i, i32 35
  %206 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %204
  store i16 %205, i16* %206, align 2, !tbaa !80
  %207 = extractelement <64 x i32> %96, i32 36
  %208 = extractelement <128 x i16> %r.i, i32 36
  %209 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %207
  store i16 %208, i16* %209, align 2, !tbaa !80
  %210 = extractelement <64 x i32> %96, i32 37
  %211 = extractelement <128 x i16> %r.i, i32 37
  %212 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %210
  store i16 %211, i16* %212, align 2, !tbaa !80
  %213 = extractelement <64 x i32> %96, i32 38
  %214 = extractelement <128 x i16> %r.i, i32 38
  %215 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %213
  store i16 %214, i16* %215, align 2, !tbaa !80
  %216 = extractelement <64 x i32> %96, i32 39
  %217 = extractelement <128 x i16> %r.i, i32 39
  %218 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %216
  store i16 %217, i16* %218, align 2, !tbaa !80
  %219 = extractelement <64 x i32> %96, i32 40
  %220 = extractelement <128 x i16> %r.i, i32 40
  %221 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %219
  store i16 %220, i16* %221, align 2, !tbaa !80
  %222 = extractelement <64 x i32> %96, i32 41
  %223 = extractelement <128 x i16> %r.i, i32 41
  %224 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %222
  store i16 %223, i16* %224, align 2, !tbaa !80
  %225 = extractelement <64 x i32> %96, i32 42
  %226 = extractelement <128 x i16> %r.i, i32 42
  %227 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %225
  store i16 %226, i16* %227, align 2, !tbaa !80
  %228 = extractelement <64 x i32> %96, i32 43
  %229 = extractelement <128 x i16> %r.i, i32 43
  %230 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %228
  store i16 %229, i16* %230, align 2, !tbaa !80
  %231 = extractelement <64 x i32> %96, i32 44
  %232 = extractelement <128 x i16> %r.i, i32 44
  %233 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %231
  store i16 %232, i16* %233, align 2, !tbaa !80
  %234 = extractelement <64 x i32> %96, i32 45
  %235 = extractelement <128 x i16> %r.i, i32 45
  %236 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %234
  store i16 %235, i16* %236, align 2, !tbaa !80
  %237 = extractelement <64 x i32> %96, i32 46
  %238 = extractelement <128 x i16> %r.i, i32 46
  %239 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %237
  store i16 %238, i16* %239, align 2, !tbaa !80
  %240 = extractelement <64 x i32> %96, i32 47
  %241 = extractelement <128 x i16> %r.i, i32 47
  %242 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %240
  store i16 %241, i16* %242, align 2, !tbaa !80
  %243 = extractelement <64 x i32> %96, i32 48
  %244 = extractelement <128 x i16> %r.i, i32 48
  %245 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %243
  store i16 %244, i16* %245, align 2, !tbaa !80
  %246 = extractelement <64 x i32> %96, i32 49
  %247 = extractelement <128 x i16> %r.i, i32 49
  %248 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %246
  store i16 %247, i16* %248, align 2, !tbaa !80
  %249 = extractelement <64 x i32> %96, i32 50
  %250 = extractelement <128 x i16> %r.i, i32 50
  %251 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %249
  store i16 %250, i16* %251, align 2, !tbaa !80
  %252 = extractelement <64 x i32> %96, i32 51
  %253 = extractelement <128 x i16> %r.i, i32 51
  %254 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %252
  store i16 %253, i16* %254, align 2, !tbaa !80
  %255 = extractelement <64 x i32> %96, i32 52
  %256 = extractelement <128 x i16> %r.i, i32 52
  %257 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %255
  store i16 %256, i16* %257, align 2, !tbaa !80
  %258 = extractelement <64 x i32> %96, i32 53
  %259 = extractelement <128 x i16> %r.i, i32 53
  %260 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %258
  store i16 %259, i16* %260, align 2, !tbaa !80
  %261 = extractelement <64 x i32> %96, i32 54
  %262 = extractelement <128 x i16> %r.i, i32 54
  %263 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %261
  store i16 %262, i16* %263, align 2, !tbaa !80
  %264 = extractelement <64 x i32> %96, i32 55
  %265 = extractelement <128 x i16> %r.i, i32 55
  %266 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %264
  store i16 %265, i16* %266, align 2, !tbaa !80
  %267 = extractelement <64 x i32> %96, i32 56
  %268 = extractelement <128 x i16> %r.i, i32 56
  %269 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %267
  store i16 %268, i16* %269, align 2, !tbaa !80
  %270 = extractelement <64 x i32> %96, i32 57
  %271 = extractelement <128 x i16> %r.i, i32 57
  %272 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %270
  store i16 %271, i16* %272, align 2, !tbaa !80
  %273 = extractelement <64 x i32> %96, i32 58
  %274 = extractelement <128 x i16> %r.i, i32 58
  %275 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %273
  store i16 %274, i16* %275, align 2, !tbaa !80
  %276 = extractelement <64 x i32> %96, i32 59
  %277 = extractelement <128 x i16> %r.i, i32 59
  %278 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %276
  store i16 %277, i16* %278, align 2, !tbaa !80
  %279 = extractelement <64 x i32> %96, i32 60
  %280 = extractelement <128 x i16> %r.i, i32 60
  %281 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %279
  store i16 %280, i16* %281, align 2, !tbaa !80
  %282 = extractelement <64 x i32> %96, i32 61
  %283 = extractelement <128 x i16> %r.i, i32 61
  %284 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %282
  store i16 %283, i16* %284, align 2, !tbaa !80
  %285 = extractelement <64 x i32> %96, i32 62
  %286 = extractelement <128 x i16> %r.i, i32 62
  %287 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %285
  store i16 %286, i16* %287, align 2, !tbaa !80
  %288 = extractelement <64 x i32> %96, i32 63
  %289 = extractelement <128 x i16> %r.i, i32 63
  %290 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %288
  store i16 %289, i16* %290, align 2, !tbaa !80
  %291 = extractelement <64 x i32> %98, i32 0
  %292 = extractelement <128 x i16> %r.i, i32 64
  %293 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %291
  store i16 %292, i16* %293, align 2, !tbaa !80
  %294 = extractelement <64 x i32> %98, i32 1
  %295 = extractelement <128 x i16> %r.i, i32 65
  %296 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %294
  store i16 %295, i16* %296, align 2, !tbaa !80
  %297 = extractelement <64 x i32> %98, i32 2
  %298 = extractelement <128 x i16> %r.i, i32 66
  %299 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %297
  store i16 %298, i16* %299, align 2, !tbaa !80
  %300 = extractelement <64 x i32> %98, i32 3
  %301 = extractelement <128 x i16> %r.i, i32 67
  %302 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %300
  store i16 %301, i16* %302, align 2, !tbaa !80
  %303 = extractelement <64 x i32> %98, i32 4
  %304 = extractelement <128 x i16> %r.i, i32 68
  %305 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %303
  store i16 %304, i16* %305, align 2, !tbaa !80
  %306 = extractelement <64 x i32> %98, i32 5
  %307 = extractelement <128 x i16> %r.i, i32 69
  %308 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %306
  store i16 %307, i16* %308, align 2, !tbaa !80
  %309 = extractelement <64 x i32> %98, i32 6
  %310 = extractelement <128 x i16> %r.i, i32 70
  %311 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %309
  store i16 %310, i16* %311, align 2, !tbaa !80
  %312 = extractelement <64 x i32> %98, i32 7
  %313 = extractelement <128 x i16> %r.i, i32 71
  %314 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %312
  store i16 %313, i16* %314, align 2, !tbaa !80
  %315 = extractelement <64 x i32> %98, i32 8
  %316 = extractelement <128 x i16> %r.i, i32 72
  %317 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %315
  store i16 %316, i16* %317, align 2, !tbaa !80
  %318 = extractelement <64 x i32> %98, i32 9
  %319 = extractelement <128 x i16> %r.i, i32 73
  %320 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %318
  store i16 %319, i16* %320, align 2, !tbaa !80
  %321 = extractelement <64 x i32> %98, i32 10
  %322 = extractelement <128 x i16> %r.i, i32 74
  %323 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %321
  store i16 %322, i16* %323, align 2, !tbaa !80
  %324 = extractelement <64 x i32> %98, i32 11
  %325 = extractelement <128 x i16> %r.i, i32 75
  %326 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %324
  store i16 %325, i16* %326, align 2, !tbaa !80
  %327 = extractelement <64 x i32> %98, i32 12
  %328 = extractelement <128 x i16> %r.i, i32 76
  %329 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %327
  store i16 %328, i16* %329, align 2, !tbaa !80
  %330 = extractelement <64 x i32> %98, i32 13
  %331 = extractelement <128 x i16> %r.i, i32 77
  %332 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %330
  store i16 %331, i16* %332, align 2, !tbaa !80
  %333 = extractelement <64 x i32> %98, i32 14
  %334 = extractelement <128 x i16> %r.i, i32 78
  %335 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %333
  store i16 %334, i16* %335, align 2, !tbaa !80
  %336 = extractelement <64 x i32> %98, i32 15
  %337 = extractelement <128 x i16> %r.i, i32 79
  %338 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %336
  store i16 %337, i16* %338, align 2, !tbaa !80
  %339 = extractelement <64 x i32> %98, i32 16
  %340 = extractelement <128 x i16> %r.i, i32 80
  %341 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %339
  store i16 %340, i16* %341, align 2, !tbaa !80
  %342 = extractelement <64 x i32> %98, i32 17
  %343 = extractelement <128 x i16> %r.i, i32 81
  %344 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %342
  store i16 %343, i16* %344, align 2, !tbaa !80
  %345 = extractelement <64 x i32> %98, i32 18
  %346 = extractelement <128 x i16> %r.i, i32 82
  %347 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %345
  store i16 %346, i16* %347, align 2, !tbaa !80
  %348 = extractelement <64 x i32> %98, i32 19
  %349 = extractelement <128 x i16> %r.i, i32 83
  %350 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %348
  store i16 %349, i16* %350, align 2, !tbaa !80
  %351 = extractelement <64 x i32> %98, i32 20
  %352 = extractelement <128 x i16> %r.i, i32 84
  %353 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %351
  store i16 %352, i16* %353, align 2, !tbaa !80
  %354 = extractelement <64 x i32> %98, i32 21
  %355 = extractelement <128 x i16> %r.i, i32 85
  %356 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %354
  store i16 %355, i16* %356, align 2, !tbaa !80
  %357 = extractelement <64 x i32> %98, i32 22
  %358 = extractelement <128 x i16> %r.i, i32 86
  %359 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %357
  store i16 %358, i16* %359, align 2, !tbaa !80
  %360 = extractelement <64 x i32> %98, i32 23
  %361 = extractelement <128 x i16> %r.i, i32 87
  %362 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %360
  store i16 %361, i16* %362, align 2, !tbaa !80
  %363 = extractelement <64 x i32> %98, i32 24
  %364 = extractelement <128 x i16> %r.i, i32 88
  %365 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %363
  store i16 %364, i16* %365, align 2, !tbaa !80
  %366 = extractelement <64 x i32> %98, i32 25
  %367 = extractelement <128 x i16> %r.i, i32 89
  %368 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %366
  store i16 %367, i16* %368, align 2, !tbaa !80
  %369 = extractelement <64 x i32> %98, i32 26
  %370 = extractelement <128 x i16> %r.i, i32 90
  %371 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %369
  store i16 %370, i16* %371, align 2, !tbaa !80
  %372 = extractelement <64 x i32> %98, i32 27
  %373 = extractelement <128 x i16> %r.i, i32 91
  %374 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %372
  store i16 %373, i16* %374, align 2, !tbaa !80
  %375 = extractelement <64 x i32> %98, i32 28
  %376 = extractelement <128 x i16> %r.i, i32 92
  %377 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %375
  store i16 %376, i16* %377, align 2, !tbaa !80
  %378 = extractelement <64 x i32> %98, i32 29
  %379 = extractelement <128 x i16> %r.i, i32 93
  %380 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %378
  store i16 %379, i16* %380, align 2, !tbaa !80
  %381 = extractelement <64 x i32> %98, i32 30
  %382 = extractelement <128 x i16> %r.i, i32 94
  %383 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %381
  store i16 %382, i16* %383, align 2, !tbaa !80
  %384 = extractelement <64 x i32> %98, i32 31
  %385 = extractelement <128 x i16> %r.i, i32 95
  %386 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %384
  store i16 %385, i16* %386, align 2, !tbaa !80
  %387 = extractelement <64 x i32> %98, i32 32
  %388 = extractelement <128 x i16> %r.i, i32 96
  %389 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %387
  store i16 %388, i16* %389, align 2, !tbaa !80
  %390 = extractelement <64 x i32> %98, i32 33
  %391 = extractelement <128 x i16> %r.i, i32 97
  %392 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %390
  store i16 %391, i16* %392, align 2, !tbaa !80
  %393 = extractelement <64 x i32> %98, i32 34
  %394 = extractelement <128 x i16> %r.i, i32 98
  %395 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %393
  store i16 %394, i16* %395, align 2, !tbaa !80
  %396 = extractelement <64 x i32> %98, i32 35
  %397 = extractelement <128 x i16> %r.i, i32 99
  %398 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %396
  store i16 %397, i16* %398, align 2, !tbaa !80
  %399 = extractelement <64 x i32> %98, i32 36
  %400 = extractelement <128 x i16> %r.i, i32 100
  %401 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %399
  store i16 %400, i16* %401, align 2, !tbaa !80
  %402 = extractelement <64 x i32> %98, i32 37
  %403 = extractelement <128 x i16> %r.i, i32 101
  %404 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %402
  store i16 %403, i16* %404, align 2, !tbaa !80
  %405 = extractelement <64 x i32> %98, i32 38
  %406 = extractelement <128 x i16> %r.i, i32 102
  %407 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %405
  store i16 %406, i16* %407, align 2, !tbaa !80
  %408 = extractelement <64 x i32> %98, i32 39
  %409 = extractelement <128 x i16> %r.i, i32 103
  %410 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %408
  store i16 %409, i16* %410, align 2, !tbaa !80
  %411 = extractelement <64 x i32> %98, i32 40
  %412 = extractelement <128 x i16> %r.i, i32 104
  %413 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %411
  store i16 %412, i16* %413, align 2, !tbaa !80
  %414 = extractelement <64 x i32> %98, i32 41
  %415 = extractelement <128 x i16> %r.i, i32 105
  %416 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %414
  store i16 %415, i16* %416, align 2, !tbaa !80
  %417 = extractelement <64 x i32> %98, i32 42
  %418 = extractelement <128 x i16> %r.i, i32 106
  %419 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %417
  store i16 %418, i16* %419, align 2, !tbaa !80
  %420 = extractelement <64 x i32> %98, i32 43
  %421 = extractelement <128 x i16> %r.i, i32 107
  %422 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %420
  store i16 %421, i16* %422, align 2, !tbaa !80
  %423 = extractelement <64 x i32> %98, i32 44
  %424 = extractelement <128 x i16> %r.i, i32 108
  %425 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %423
  store i16 %424, i16* %425, align 2, !tbaa !80
  %426 = extractelement <64 x i32> %98, i32 45
  %427 = extractelement <128 x i16> %r.i, i32 109
  %428 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %426
  store i16 %427, i16* %428, align 2, !tbaa !80
  %429 = extractelement <64 x i32> %98, i32 46
  %430 = extractelement <128 x i16> %r.i, i32 110
  %431 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %429
  store i16 %430, i16* %431, align 2, !tbaa !80
  %432 = extractelement <64 x i32> %98, i32 47
  %433 = extractelement <128 x i16> %r.i, i32 111
  %434 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %432
  store i16 %433, i16* %434, align 2, !tbaa !80
  %435 = extractelement <64 x i32> %98, i32 48
  %436 = extractelement <128 x i16> %r.i, i32 112
  %437 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %435
  store i16 %436, i16* %437, align 2, !tbaa !80
  %438 = extractelement <64 x i32> %98, i32 49
  %439 = extractelement <128 x i16> %r.i, i32 113
  %440 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %438
  store i16 %439, i16* %440, align 2, !tbaa !80
  %441 = extractelement <64 x i32> %98, i32 50
  %442 = extractelement <128 x i16> %r.i, i32 114
  %443 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %441
  store i16 %442, i16* %443, align 2, !tbaa !80
  %444 = extractelement <64 x i32> %98, i32 51
  %445 = extractelement <128 x i16> %r.i, i32 115
  %446 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %444
  store i16 %445, i16* %446, align 2, !tbaa !80
  %447 = extractelement <64 x i32> %98, i32 52
  %448 = extractelement <128 x i16> %r.i, i32 116
  %449 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %447
  store i16 %448, i16* %449, align 2, !tbaa !80
  %450 = extractelement <64 x i32> %98, i32 53
  %451 = extractelement <128 x i16> %r.i, i32 117
  %452 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %450
  store i16 %451, i16* %452, align 2, !tbaa !80
  %453 = extractelement <64 x i32> %98, i32 54
  %454 = extractelement <128 x i16> %r.i, i32 118
  %455 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %453
  store i16 %454, i16* %455, align 2, !tbaa !80
  %456 = extractelement <64 x i32> %98, i32 55
  %457 = extractelement <128 x i16> %r.i, i32 119
  %458 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %456
  store i16 %457, i16* %458, align 2, !tbaa !80
  %459 = extractelement <64 x i32> %98, i32 56
  %460 = extractelement <128 x i16> %r.i, i32 120
  %461 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %459
  store i16 %460, i16* %461, align 2, !tbaa !80
  %462 = extractelement <64 x i32> %98, i32 57
  %463 = extractelement <128 x i16> %r.i, i32 121
  %464 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %462
  store i16 %463, i16* %464, align 2, !tbaa !80
  %465 = extractelement <64 x i32> %98, i32 58
  %466 = extractelement <128 x i16> %r.i, i32 122
  %467 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %465
  store i16 %466, i16* %467, align 2, !tbaa !80
  %468 = extractelement <64 x i32> %98, i32 59
  %469 = extractelement <128 x i16> %r.i, i32 123
  %470 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %468
  store i16 %469, i16* %470, align 2, !tbaa !80
  %471 = extractelement <64 x i32> %98, i32 60
  %472 = extractelement <128 x i16> %r.i, i32 124
  %473 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %471
  store i16 %472, i16* %473, align 2, !tbaa !80
  %474 = extractelement <64 x i32> %98, i32 61
  %475 = extractelement <128 x i16> %r.i, i32 125
  %476 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %474
  store i16 %475, i16* %476, align 2, !tbaa !80
  %477 = extractelement <64 x i32> %98, i32 62
  %478 = extractelement <128 x i16> %r.i, i32 126
  %479 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %477
  store i16 %478, i16* %479, align 2, !tbaa !80
  %480 = extractelement <64 x i32> %98, i32 63
  %481 = extractelement <128 x i16> %r.i, i32 127
  %482 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %480
  store i16 %481, i16* %482, align 2, !tbaa !80
  %483 = add nuw nsw i32 %rows.s0.x.x, 1
  %484 = icmp eq i32 %483, %49
  br i1 %484, label %"consume rows", label %"for rows.s0.x.x"

"consume rows":                                   ; preds = %"for rows.s0.x.x", %"for output.s0.x.x"
  %485 = add nuw nsw i32 %46, 382
  %486 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %485) #9
  %487 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %486, <32 x i32> %486)
  %488 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %487, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>) #9
  %489 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %487, <64 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>) #9
  %490 = shufflevector <64 x i32> %488, <64 x i32> %489, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %t111 = srem <128 x i32> %490, %35
  %491 = shufflevector <128 x i32> %t111, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %492 = tail call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %491, i32 31) #9
  %493 = shufflevector <128 x i32> %t111, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %494 = tail call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %493, i32 31) #9
  %495 = shufflevector <128 x i32> %t111, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %496 = tail call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %495, i32 31) #9
  %497 = shufflevector <128 x i32> %t111, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %498 = tail call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %497, i32 31) #9
  %499 = tail call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %492, <32 x i32> %36) #9
  %500 = tail call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %494, <32 x i32> %36) #9
  %501 = tail call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %496, <32 x i32> %36) #9
  %502 = tail call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %498, <32 x i32> %36) #9
  %503 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %500, <32 x i32> %499)
  %504 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %502, <32 x i32> %501)
  %505 = shufflevector <128 x i32> %t111, <128 x i32> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %506 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %505, <64 x i32> %503) #9
  %507 = shufflevector <128 x i32> %t111, <128 x i32> undef, <64 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %508 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %507, <64 x i32> %504) #9
  %509 = extractelement <64 x i32> %506, i32 0
  %510 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %509
  %511 = load i16, i16* %510, align 2, !tbaa !80
  %512 = insertelement <128 x i16> undef, i16 %511, i32 0
  %513 = extractelement <64 x i32> %506, i32 1
  %514 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %513
  %515 = load i16, i16* %514, align 2, !tbaa !80
  %516 = insertelement <128 x i16> %512, i16 %515, i32 1
  %517 = extractelement <64 x i32> %506, i32 2
  %518 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %517
  %519 = load i16, i16* %518, align 2, !tbaa !80
  %520 = insertelement <128 x i16> %516, i16 %519, i32 2
  %521 = extractelement <64 x i32> %506, i32 3
  %522 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %521
  %523 = load i16, i16* %522, align 2, !tbaa !80
  %524 = insertelement <128 x i16> %520, i16 %523, i32 3
  %525 = extractelement <64 x i32> %506, i32 4
  %526 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %525
  %527 = load i16, i16* %526, align 2, !tbaa !80
  %528 = insertelement <128 x i16> %524, i16 %527, i32 4
  %529 = extractelement <64 x i32> %506, i32 5
  %530 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %529
  %531 = load i16, i16* %530, align 2, !tbaa !80
  %532 = insertelement <128 x i16> %528, i16 %531, i32 5
  %533 = extractelement <64 x i32> %506, i32 6
  %534 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %533
  %535 = load i16, i16* %534, align 2, !tbaa !80
  %536 = insertelement <128 x i16> %532, i16 %535, i32 6
  %537 = extractelement <64 x i32> %506, i32 7
  %538 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %537
  %539 = load i16, i16* %538, align 2, !tbaa !80
  %540 = insertelement <128 x i16> %536, i16 %539, i32 7
  %541 = extractelement <64 x i32> %506, i32 8
  %542 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %541
  %543 = load i16, i16* %542, align 2, !tbaa !80
  %544 = insertelement <128 x i16> %540, i16 %543, i32 8
  %545 = extractelement <64 x i32> %506, i32 9
  %546 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %545
  %547 = load i16, i16* %546, align 2, !tbaa !80
  %548 = insertelement <128 x i16> %544, i16 %547, i32 9
  %549 = extractelement <64 x i32> %506, i32 10
  %550 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %549
  %551 = load i16, i16* %550, align 2, !tbaa !80
  %552 = insertelement <128 x i16> %548, i16 %551, i32 10
  %553 = extractelement <64 x i32> %506, i32 11
  %554 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %553
  %555 = load i16, i16* %554, align 2, !tbaa !80
  %556 = insertelement <128 x i16> %552, i16 %555, i32 11
  %557 = extractelement <64 x i32> %506, i32 12
  %558 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %557
  %559 = load i16, i16* %558, align 2, !tbaa !80
  %560 = insertelement <128 x i16> %556, i16 %559, i32 12
  %561 = extractelement <64 x i32> %506, i32 13
  %562 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %561
  %563 = load i16, i16* %562, align 2, !tbaa !80
  %564 = insertelement <128 x i16> %560, i16 %563, i32 13
  %565 = extractelement <64 x i32> %506, i32 14
  %566 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %565
  %567 = load i16, i16* %566, align 2, !tbaa !80
  %568 = insertelement <128 x i16> %564, i16 %567, i32 14
  %569 = extractelement <64 x i32> %506, i32 15
  %570 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %569
  %571 = load i16, i16* %570, align 2, !tbaa !80
  %572 = insertelement <128 x i16> %568, i16 %571, i32 15
  %573 = extractelement <64 x i32> %506, i32 16
  %574 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %573
  %575 = load i16, i16* %574, align 2, !tbaa !80
  %576 = insertelement <128 x i16> %572, i16 %575, i32 16
  %577 = extractelement <64 x i32> %506, i32 17
  %578 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %577
  %579 = load i16, i16* %578, align 2, !tbaa !80
  %580 = insertelement <128 x i16> %576, i16 %579, i32 17
  %581 = extractelement <64 x i32> %506, i32 18
  %582 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %581
  %583 = load i16, i16* %582, align 2, !tbaa !80
  %584 = insertelement <128 x i16> %580, i16 %583, i32 18
  %585 = extractelement <64 x i32> %506, i32 19
  %586 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %585
  %587 = load i16, i16* %586, align 2, !tbaa !80
  %588 = insertelement <128 x i16> %584, i16 %587, i32 19
  %589 = extractelement <64 x i32> %506, i32 20
  %590 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %589
  %591 = load i16, i16* %590, align 2, !tbaa !80
  %592 = insertelement <128 x i16> %588, i16 %591, i32 20
  %593 = extractelement <64 x i32> %506, i32 21
  %594 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %593
  %595 = load i16, i16* %594, align 2, !tbaa !80
  %596 = insertelement <128 x i16> %592, i16 %595, i32 21
  %597 = extractelement <64 x i32> %506, i32 22
  %598 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %597
  %599 = load i16, i16* %598, align 2, !tbaa !80
  %600 = insertelement <128 x i16> %596, i16 %599, i32 22
  %601 = extractelement <64 x i32> %506, i32 23
  %602 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %601
  %603 = load i16, i16* %602, align 2, !tbaa !80
  %604 = insertelement <128 x i16> %600, i16 %603, i32 23
  %605 = extractelement <64 x i32> %506, i32 24
  %606 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %605
  %607 = load i16, i16* %606, align 2, !tbaa !80
  %608 = insertelement <128 x i16> %604, i16 %607, i32 24
  %609 = extractelement <64 x i32> %506, i32 25
  %610 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %609
  %611 = load i16, i16* %610, align 2, !tbaa !80
  %612 = insertelement <128 x i16> %608, i16 %611, i32 25
  %613 = extractelement <64 x i32> %506, i32 26
  %614 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %613
  %615 = load i16, i16* %614, align 2, !tbaa !80
  %616 = insertelement <128 x i16> %612, i16 %615, i32 26
  %617 = extractelement <64 x i32> %506, i32 27
  %618 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %617
  %619 = load i16, i16* %618, align 2, !tbaa !80
  %620 = insertelement <128 x i16> %616, i16 %619, i32 27
  %621 = extractelement <64 x i32> %506, i32 28
  %622 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %621
  %623 = load i16, i16* %622, align 2, !tbaa !80
  %624 = insertelement <128 x i16> %620, i16 %623, i32 28
  %625 = extractelement <64 x i32> %506, i32 29
  %626 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %625
  %627 = load i16, i16* %626, align 2, !tbaa !80
  %628 = insertelement <128 x i16> %624, i16 %627, i32 29
  %629 = extractelement <64 x i32> %506, i32 30
  %630 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %629
  %631 = load i16, i16* %630, align 2, !tbaa !80
  %632 = insertelement <128 x i16> %628, i16 %631, i32 30
  %633 = extractelement <64 x i32> %506, i32 31
  %634 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %633
  %635 = load i16, i16* %634, align 2, !tbaa !80
  %636 = insertelement <128 x i16> %632, i16 %635, i32 31
  %637 = extractelement <64 x i32> %506, i32 32
  %638 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %637
  %639 = load i16, i16* %638, align 2, !tbaa !80
  %640 = insertelement <128 x i16> %636, i16 %639, i32 32
  %641 = extractelement <64 x i32> %506, i32 33
  %642 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %641
  %643 = load i16, i16* %642, align 2, !tbaa !80
  %644 = insertelement <128 x i16> %640, i16 %643, i32 33
  %645 = extractelement <64 x i32> %506, i32 34
  %646 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %645
  %647 = load i16, i16* %646, align 2, !tbaa !80
  %648 = insertelement <128 x i16> %644, i16 %647, i32 34
  %649 = extractelement <64 x i32> %506, i32 35
  %650 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %649
  %651 = load i16, i16* %650, align 2, !tbaa !80
  %652 = insertelement <128 x i16> %648, i16 %651, i32 35
  %653 = extractelement <64 x i32> %506, i32 36
  %654 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %653
  %655 = load i16, i16* %654, align 2, !tbaa !80
  %656 = insertelement <128 x i16> %652, i16 %655, i32 36
  %657 = extractelement <64 x i32> %506, i32 37
  %658 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %657
  %659 = load i16, i16* %658, align 2, !tbaa !80
  %660 = insertelement <128 x i16> %656, i16 %659, i32 37
  %661 = extractelement <64 x i32> %506, i32 38
  %662 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %661
  %663 = load i16, i16* %662, align 2, !tbaa !80
  %664 = insertelement <128 x i16> %660, i16 %663, i32 38
  %665 = extractelement <64 x i32> %506, i32 39
  %666 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %665
  %667 = load i16, i16* %666, align 2, !tbaa !80
  %668 = insertelement <128 x i16> %664, i16 %667, i32 39
  %669 = extractelement <64 x i32> %506, i32 40
  %670 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %669
  %671 = load i16, i16* %670, align 2, !tbaa !80
  %672 = insertelement <128 x i16> %668, i16 %671, i32 40
  %673 = extractelement <64 x i32> %506, i32 41
  %674 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %673
  %675 = load i16, i16* %674, align 2, !tbaa !80
  %676 = insertelement <128 x i16> %672, i16 %675, i32 41
  %677 = extractelement <64 x i32> %506, i32 42
  %678 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %677
  %679 = load i16, i16* %678, align 2, !tbaa !80
  %680 = insertelement <128 x i16> %676, i16 %679, i32 42
  %681 = extractelement <64 x i32> %506, i32 43
  %682 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %681
  %683 = load i16, i16* %682, align 2, !tbaa !80
  %684 = insertelement <128 x i16> %680, i16 %683, i32 43
  %685 = extractelement <64 x i32> %506, i32 44
  %686 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %685
  %687 = load i16, i16* %686, align 2, !tbaa !80
  %688 = insertelement <128 x i16> %684, i16 %687, i32 44
  %689 = extractelement <64 x i32> %506, i32 45
  %690 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %689
  %691 = load i16, i16* %690, align 2, !tbaa !80
  %692 = insertelement <128 x i16> %688, i16 %691, i32 45
  %693 = extractelement <64 x i32> %506, i32 46
  %694 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %693
  %695 = load i16, i16* %694, align 2, !tbaa !80
  %696 = insertelement <128 x i16> %692, i16 %695, i32 46
  %697 = extractelement <64 x i32> %506, i32 47
  %698 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %697
  %699 = load i16, i16* %698, align 2, !tbaa !80
  %700 = insertelement <128 x i16> %696, i16 %699, i32 47
  %701 = extractelement <64 x i32> %506, i32 48
  %702 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %701
  %703 = load i16, i16* %702, align 2, !tbaa !80
  %704 = insertelement <128 x i16> %700, i16 %703, i32 48
  %705 = extractelement <64 x i32> %506, i32 49
  %706 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %705
  %707 = load i16, i16* %706, align 2, !tbaa !80
  %708 = insertelement <128 x i16> %704, i16 %707, i32 49
  %709 = extractelement <64 x i32> %506, i32 50
  %710 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %709
  %711 = load i16, i16* %710, align 2, !tbaa !80
  %712 = insertelement <128 x i16> %708, i16 %711, i32 50
  %713 = extractelement <64 x i32> %506, i32 51
  %714 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %713
  %715 = load i16, i16* %714, align 2, !tbaa !80
  %716 = insertelement <128 x i16> %712, i16 %715, i32 51
  %717 = extractelement <64 x i32> %506, i32 52
  %718 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %717
  %719 = load i16, i16* %718, align 2, !tbaa !80
  %720 = insertelement <128 x i16> %716, i16 %719, i32 52
  %721 = extractelement <64 x i32> %506, i32 53
  %722 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %721
  %723 = load i16, i16* %722, align 2, !tbaa !80
  %724 = insertelement <128 x i16> %720, i16 %723, i32 53
  %725 = extractelement <64 x i32> %506, i32 54
  %726 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %725
  %727 = load i16, i16* %726, align 2, !tbaa !80
  %728 = insertelement <128 x i16> %724, i16 %727, i32 54
  %729 = extractelement <64 x i32> %506, i32 55
  %730 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %729
  %731 = load i16, i16* %730, align 2, !tbaa !80
  %732 = insertelement <128 x i16> %728, i16 %731, i32 55
  %733 = extractelement <64 x i32> %506, i32 56
  %734 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %733
  %735 = load i16, i16* %734, align 2, !tbaa !80
  %736 = insertelement <128 x i16> %732, i16 %735, i32 56
  %737 = extractelement <64 x i32> %506, i32 57
  %738 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %737
  %739 = load i16, i16* %738, align 2, !tbaa !80
  %740 = insertelement <128 x i16> %736, i16 %739, i32 57
  %741 = extractelement <64 x i32> %506, i32 58
  %742 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %741
  %743 = load i16, i16* %742, align 2, !tbaa !80
  %744 = insertelement <128 x i16> %740, i16 %743, i32 58
  %745 = extractelement <64 x i32> %506, i32 59
  %746 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %745
  %747 = load i16, i16* %746, align 2, !tbaa !80
  %748 = insertelement <128 x i16> %744, i16 %747, i32 59
  %749 = extractelement <64 x i32> %506, i32 60
  %750 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %749
  %751 = load i16, i16* %750, align 2, !tbaa !80
  %752 = insertelement <128 x i16> %748, i16 %751, i32 60
  %753 = extractelement <64 x i32> %506, i32 61
  %754 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %753
  %755 = load i16, i16* %754, align 2, !tbaa !80
  %756 = insertelement <128 x i16> %752, i16 %755, i32 61
  %757 = extractelement <64 x i32> %506, i32 62
  %758 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %757
  %759 = load i16, i16* %758, align 2, !tbaa !80
  %760 = insertelement <128 x i16> %756, i16 %759, i32 62
  %761 = extractelement <64 x i32> %506, i32 63
  %762 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %761
  %763 = load i16, i16* %762, align 2, !tbaa !80
  %764 = insertelement <128 x i16> %760, i16 %763, i32 63
  %765 = extractelement <64 x i32> %508, i32 0
  %766 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %765
  %767 = load i16, i16* %766, align 2, !tbaa !80
  %768 = insertelement <128 x i16> %764, i16 %767, i32 64
  %769 = extractelement <64 x i32> %508, i32 1
  %770 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %769
  %771 = load i16, i16* %770, align 2, !tbaa !80
  %772 = insertelement <128 x i16> %768, i16 %771, i32 65
  %773 = extractelement <64 x i32> %508, i32 2
  %774 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %773
  %775 = load i16, i16* %774, align 2, !tbaa !80
  %776 = insertelement <128 x i16> %772, i16 %775, i32 66
  %777 = extractelement <64 x i32> %508, i32 3
  %778 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %777
  %779 = load i16, i16* %778, align 2, !tbaa !80
  %780 = insertelement <128 x i16> %776, i16 %779, i32 67
  %781 = extractelement <64 x i32> %508, i32 4
  %782 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %781
  %783 = load i16, i16* %782, align 2, !tbaa !80
  %784 = insertelement <128 x i16> %780, i16 %783, i32 68
  %785 = extractelement <64 x i32> %508, i32 5
  %786 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %785
  %787 = load i16, i16* %786, align 2, !tbaa !80
  %788 = insertelement <128 x i16> %784, i16 %787, i32 69
  %789 = extractelement <64 x i32> %508, i32 6
  %790 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %789
  %791 = load i16, i16* %790, align 2, !tbaa !80
  %792 = insertelement <128 x i16> %788, i16 %791, i32 70
  %793 = extractelement <64 x i32> %508, i32 7
  %794 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %793
  %795 = load i16, i16* %794, align 2, !tbaa !80
  %796 = insertelement <128 x i16> %792, i16 %795, i32 71
  %797 = extractelement <64 x i32> %508, i32 8
  %798 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %797
  %799 = load i16, i16* %798, align 2, !tbaa !80
  %800 = insertelement <128 x i16> %796, i16 %799, i32 72
  %801 = extractelement <64 x i32> %508, i32 9
  %802 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %801
  %803 = load i16, i16* %802, align 2, !tbaa !80
  %804 = insertelement <128 x i16> %800, i16 %803, i32 73
  %805 = extractelement <64 x i32> %508, i32 10
  %806 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %805
  %807 = load i16, i16* %806, align 2, !tbaa !80
  %808 = insertelement <128 x i16> %804, i16 %807, i32 74
  %809 = extractelement <64 x i32> %508, i32 11
  %810 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %809
  %811 = load i16, i16* %810, align 2, !tbaa !80
  %812 = insertelement <128 x i16> %808, i16 %811, i32 75
  %813 = extractelement <64 x i32> %508, i32 12
  %814 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %813
  %815 = load i16, i16* %814, align 2, !tbaa !80
  %816 = insertelement <128 x i16> %812, i16 %815, i32 76
  %817 = extractelement <64 x i32> %508, i32 13
  %818 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %817
  %819 = load i16, i16* %818, align 2, !tbaa !80
  %820 = insertelement <128 x i16> %816, i16 %819, i32 77
  %821 = extractelement <64 x i32> %508, i32 14
  %822 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %821
  %823 = load i16, i16* %822, align 2, !tbaa !80
  %824 = insertelement <128 x i16> %820, i16 %823, i32 78
  %825 = extractelement <64 x i32> %508, i32 15
  %826 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %825
  %827 = load i16, i16* %826, align 2, !tbaa !80
  %828 = insertelement <128 x i16> %824, i16 %827, i32 79
  %829 = extractelement <64 x i32> %508, i32 16
  %830 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %829
  %831 = load i16, i16* %830, align 2, !tbaa !80
  %832 = insertelement <128 x i16> %828, i16 %831, i32 80
  %833 = extractelement <64 x i32> %508, i32 17
  %834 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %833
  %835 = load i16, i16* %834, align 2, !tbaa !80
  %836 = insertelement <128 x i16> %832, i16 %835, i32 81
  %837 = extractelement <64 x i32> %508, i32 18
  %838 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %837
  %839 = load i16, i16* %838, align 2, !tbaa !80
  %840 = insertelement <128 x i16> %836, i16 %839, i32 82
  %841 = extractelement <64 x i32> %508, i32 19
  %842 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %841
  %843 = load i16, i16* %842, align 2, !tbaa !80
  %844 = insertelement <128 x i16> %840, i16 %843, i32 83
  %845 = extractelement <64 x i32> %508, i32 20
  %846 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %845
  %847 = load i16, i16* %846, align 2, !tbaa !80
  %848 = insertelement <128 x i16> %844, i16 %847, i32 84
  %849 = extractelement <64 x i32> %508, i32 21
  %850 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %849
  %851 = load i16, i16* %850, align 2, !tbaa !80
  %852 = insertelement <128 x i16> %848, i16 %851, i32 85
  %853 = extractelement <64 x i32> %508, i32 22
  %854 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %853
  %855 = load i16, i16* %854, align 2, !tbaa !80
  %856 = insertelement <128 x i16> %852, i16 %855, i32 86
  %857 = extractelement <64 x i32> %508, i32 23
  %858 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %857
  %859 = load i16, i16* %858, align 2, !tbaa !80
  %860 = insertelement <128 x i16> %856, i16 %859, i32 87
  %861 = extractelement <64 x i32> %508, i32 24
  %862 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %861
  %863 = load i16, i16* %862, align 2, !tbaa !80
  %864 = insertelement <128 x i16> %860, i16 %863, i32 88
  %865 = extractelement <64 x i32> %508, i32 25
  %866 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %865
  %867 = load i16, i16* %866, align 2, !tbaa !80
  %868 = insertelement <128 x i16> %864, i16 %867, i32 89
  %869 = extractelement <64 x i32> %508, i32 26
  %870 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %869
  %871 = load i16, i16* %870, align 2, !tbaa !80
  %872 = insertelement <128 x i16> %868, i16 %871, i32 90
  %873 = extractelement <64 x i32> %508, i32 27
  %874 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %873
  %875 = load i16, i16* %874, align 2, !tbaa !80
  %876 = insertelement <128 x i16> %872, i16 %875, i32 91
  %877 = extractelement <64 x i32> %508, i32 28
  %878 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %877
  %879 = load i16, i16* %878, align 2, !tbaa !80
  %880 = insertelement <128 x i16> %876, i16 %879, i32 92
  %881 = extractelement <64 x i32> %508, i32 29
  %882 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %881
  %883 = load i16, i16* %882, align 2, !tbaa !80
  %884 = insertelement <128 x i16> %880, i16 %883, i32 93
  %885 = extractelement <64 x i32> %508, i32 30
  %886 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %885
  %887 = load i16, i16* %886, align 2, !tbaa !80
  %888 = insertelement <128 x i16> %884, i16 %887, i32 94
  %889 = extractelement <64 x i32> %508, i32 31
  %890 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %889
  %891 = load i16, i16* %890, align 2, !tbaa !80
  %892 = insertelement <128 x i16> %888, i16 %891, i32 95
  %893 = extractelement <64 x i32> %508, i32 32
  %894 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %893
  %895 = load i16, i16* %894, align 2, !tbaa !80
  %896 = insertelement <128 x i16> %892, i16 %895, i32 96
  %897 = extractelement <64 x i32> %508, i32 33
  %898 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %897
  %899 = load i16, i16* %898, align 2, !tbaa !80
  %900 = insertelement <128 x i16> %896, i16 %899, i32 97
  %901 = extractelement <64 x i32> %508, i32 34
  %902 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %901
  %903 = load i16, i16* %902, align 2, !tbaa !80
  %904 = insertelement <128 x i16> %900, i16 %903, i32 98
  %905 = extractelement <64 x i32> %508, i32 35
  %906 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %905
  %907 = load i16, i16* %906, align 2, !tbaa !80
  %908 = insertelement <128 x i16> %904, i16 %907, i32 99
  %909 = extractelement <64 x i32> %508, i32 36
  %910 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %909
  %911 = load i16, i16* %910, align 2, !tbaa !80
  %912 = insertelement <128 x i16> %908, i16 %911, i32 100
  %913 = extractelement <64 x i32> %508, i32 37
  %914 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %913
  %915 = load i16, i16* %914, align 2, !tbaa !80
  %916 = insertelement <128 x i16> %912, i16 %915, i32 101
  %917 = extractelement <64 x i32> %508, i32 38
  %918 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %917
  %919 = load i16, i16* %918, align 2, !tbaa !80
  %920 = insertelement <128 x i16> %916, i16 %919, i32 102
  %921 = extractelement <64 x i32> %508, i32 39
  %922 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %921
  %923 = load i16, i16* %922, align 2, !tbaa !80
  %924 = insertelement <128 x i16> %920, i16 %923, i32 103
  %925 = extractelement <64 x i32> %508, i32 40
  %926 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %925
  %927 = load i16, i16* %926, align 2, !tbaa !80
  %928 = insertelement <128 x i16> %924, i16 %927, i32 104
  %929 = extractelement <64 x i32> %508, i32 41
  %930 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %929
  %931 = load i16, i16* %930, align 2, !tbaa !80
  %932 = insertelement <128 x i16> %928, i16 %931, i32 105
  %933 = extractelement <64 x i32> %508, i32 42
  %934 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %933
  %935 = load i16, i16* %934, align 2, !tbaa !80
  %936 = insertelement <128 x i16> %932, i16 %935, i32 106
  %937 = extractelement <64 x i32> %508, i32 43
  %938 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %937
  %939 = load i16, i16* %938, align 2, !tbaa !80
  %940 = insertelement <128 x i16> %936, i16 %939, i32 107
  %941 = extractelement <64 x i32> %508, i32 44
  %942 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %941
  %943 = load i16, i16* %942, align 2, !tbaa !80
  %944 = insertelement <128 x i16> %940, i16 %943, i32 108
  %945 = extractelement <64 x i32> %508, i32 45
  %946 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %945
  %947 = load i16, i16* %946, align 2, !tbaa !80
  %948 = insertelement <128 x i16> %944, i16 %947, i32 109
  %949 = extractelement <64 x i32> %508, i32 46
  %950 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %949
  %951 = load i16, i16* %950, align 2, !tbaa !80
  %952 = insertelement <128 x i16> %948, i16 %951, i32 110
  %953 = extractelement <64 x i32> %508, i32 47
  %954 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %953
  %955 = load i16, i16* %954, align 2, !tbaa !80
  %956 = insertelement <128 x i16> %952, i16 %955, i32 111
  %957 = extractelement <64 x i32> %508, i32 48
  %958 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %957
  %959 = load i16, i16* %958, align 2, !tbaa !80
  %960 = insertelement <128 x i16> %956, i16 %959, i32 112
  %961 = extractelement <64 x i32> %508, i32 49
  %962 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %961
  %963 = load i16, i16* %962, align 2, !tbaa !80
  %964 = insertelement <128 x i16> %960, i16 %963, i32 113
  %965 = extractelement <64 x i32> %508, i32 50
  %966 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %965
  %967 = load i16, i16* %966, align 2, !tbaa !80
  %968 = insertelement <128 x i16> %964, i16 %967, i32 114
  %969 = extractelement <64 x i32> %508, i32 51
  %970 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %969
  %971 = load i16, i16* %970, align 2, !tbaa !80
  %972 = insertelement <128 x i16> %968, i16 %971, i32 115
  %973 = extractelement <64 x i32> %508, i32 52
  %974 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %973
  %975 = load i16, i16* %974, align 2, !tbaa !80
  %976 = insertelement <128 x i16> %972, i16 %975, i32 116
  %977 = extractelement <64 x i32> %508, i32 53
  %978 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %977
  %979 = load i16, i16* %978, align 2, !tbaa !80
  %980 = insertelement <128 x i16> %976, i16 %979, i32 117
  %981 = extractelement <64 x i32> %508, i32 54
  %982 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %981
  %983 = load i16, i16* %982, align 2, !tbaa !80
  %984 = insertelement <128 x i16> %980, i16 %983, i32 118
  %985 = extractelement <64 x i32> %508, i32 55
  %986 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %985
  %987 = load i16, i16* %986, align 2, !tbaa !80
  %988 = insertelement <128 x i16> %984, i16 %987, i32 119
  %989 = extractelement <64 x i32> %508, i32 56
  %990 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %989
  %991 = load i16, i16* %990, align 2, !tbaa !80
  %992 = insertelement <128 x i16> %988, i16 %991, i32 120
  %993 = extractelement <64 x i32> %508, i32 57
  %994 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %993
  %995 = load i16, i16* %994, align 2, !tbaa !80
  %996 = insertelement <128 x i16> %992, i16 %995, i32 121
  %997 = extractelement <64 x i32> %508, i32 58
  %998 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %997
  %999 = load i16, i16* %998, align 2, !tbaa !80
  %1000 = insertelement <128 x i16> %996, i16 %999, i32 122
  %1001 = extractelement <64 x i32> %508, i32 59
  %1002 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1001
  %1003 = load i16, i16* %1002, align 2, !tbaa !80
  %1004 = insertelement <128 x i16> %1000, i16 %1003, i32 123
  %1005 = extractelement <64 x i32> %508, i32 60
  %1006 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1005
  %1007 = load i16, i16* %1006, align 2, !tbaa !80
  %1008 = insertelement <128 x i16> %1004, i16 %1007, i32 124
  %1009 = extractelement <64 x i32> %508, i32 61
  %1010 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1009
  %1011 = load i16, i16* %1010, align 2, !tbaa !80
  %1012 = insertelement <128 x i16> %1008, i16 %1011, i32 125
  %1013 = extractelement <64 x i32> %508, i32 62
  %1014 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1013
  %1015 = load i16, i16* %1014, align 2, !tbaa !80
  %1016 = insertelement <128 x i16> %1012, i16 %1015, i32 126
  %1017 = extractelement <64 x i32> %508, i32 63
  %1018 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1017
  %1019 = load i16, i16* %1018, align 2, !tbaa !80
  %1020 = insertelement <128 x i16> %1016, i16 %1019, i32 127
  %1021 = add nuw nsw i32 %46, 383
  %1022 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %1021) #9
  %1023 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1022, <32 x i32> %1022)
  %1024 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1023, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>) #9
  %1025 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1023, <64 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>) #9
  %1026 = shufflevector <64 x i32> %1024, <64 x i32> %1025, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %t112 = srem <128 x i32> %1026, %35
  %1027 = shufflevector <128 x i32> %t112, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1028 = tail call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %1027, i32 31) #9
  %1029 = shufflevector <128 x i32> %t112, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1030 = tail call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %1029, i32 31) #9
  %1031 = shufflevector <128 x i32> %t112, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %1032 = tail call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %1031, i32 31) #9
  %1033 = shufflevector <128 x i32> %t112, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %1034 = tail call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %1033, i32 31) #9
  %1035 = tail call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %1028, <32 x i32> %36) #9
  %1036 = tail call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %1030, <32 x i32> %36) #9
  %1037 = tail call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %1032, <32 x i32> %36) #9
  %1038 = tail call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %1034, <32 x i32> %36) #9
  %1039 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1036, <32 x i32> %1035)
  %1040 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1038, <32 x i32> %1037)
  %1041 = shufflevector <128 x i32> %t112, <128 x i32> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1042 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1041, <64 x i32> %1039) #9
  %1043 = shufflevector <128 x i32> %t112, <128 x i32> undef, <64 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %1044 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1043, <64 x i32> %1040) #9
  %1045 = extractelement <64 x i32> %1042, i32 0
  %1046 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1045
  %1047 = load i16, i16* %1046, align 2, !tbaa !80
  %1048 = insertelement <128 x i16> undef, i16 %1047, i32 0
  %1049 = extractelement <64 x i32> %1042, i32 1
  %1050 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1049
  %1051 = load i16, i16* %1050, align 2, !tbaa !80
  %1052 = insertelement <128 x i16> %1048, i16 %1051, i32 1
  %1053 = extractelement <64 x i32> %1042, i32 2
  %1054 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1053
  %1055 = load i16, i16* %1054, align 2, !tbaa !80
  %1056 = insertelement <128 x i16> %1052, i16 %1055, i32 2
  %1057 = extractelement <64 x i32> %1042, i32 3
  %1058 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1057
  %1059 = load i16, i16* %1058, align 2, !tbaa !80
  %1060 = insertelement <128 x i16> %1056, i16 %1059, i32 3
  %1061 = extractelement <64 x i32> %1042, i32 4
  %1062 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1061
  %1063 = load i16, i16* %1062, align 2, !tbaa !80
  %1064 = insertelement <128 x i16> %1060, i16 %1063, i32 4
  %1065 = extractelement <64 x i32> %1042, i32 5
  %1066 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1065
  %1067 = load i16, i16* %1066, align 2, !tbaa !80
  %1068 = insertelement <128 x i16> %1064, i16 %1067, i32 5
  %1069 = extractelement <64 x i32> %1042, i32 6
  %1070 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1069
  %1071 = load i16, i16* %1070, align 2, !tbaa !80
  %1072 = insertelement <128 x i16> %1068, i16 %1071, i32 6
  %1073 = extractelement <64 x i32> %1042, i32 7
  %1074 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1073
  %1075 = load i16, i16* %1074, align 2, !tbaa !80
  %1076 = insertelement <128 x i16> %1072, i16 %1075, i32 7
  %1077 = extractelement <64 x i32> %1042, i32 8
  %1078 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1077
  %1079 = load i16, i16* %1078, align 2, !tbaa !80
  %1080 = insertelement <128 x i16> %1076, i16 %1079, i32 8
  %1081 = extractelement <64 x i32> %1042, i32 9
  %1082 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1081
  %1083 = load i16, i16* %1082, align 2, !tbaa !80
  %1084 = insertelement <128 x i16> %1080, i16 %1083, i32 9
  %1085 = extractelement <64 x i32> %1042, i32 10
  %1086 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1085
  %1087 = load i16, i16* %1086, align 2, !tbaa !80
  %1088 = insertelement <128 x i16> %1084, i16 %1087, i32 10
  %1089 = extractelement <64 x i32> %1042, i32 11
  %1090 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1089
  %1091 = load i16, i16* %1090, align 2, !tbaa !80
  %1092 = insertelement <128 x i16> %1088, i16 %1091, i32 11
  %1093 = extractelement <64 x i32> %1042, i32 12
  %1094 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1093
  %1095 = load i16, i16* %1094, align 2, !tbaa !80
  %1096 = insertelement <128 x i16> %1092, i16 %1095, i32 12
  %1097 = extractelement <64 x i32> %1042, i32 13
  %1098 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1097
  %1099 = load i16, i16* %1098, align 2, !tbaa !80
  %1100 = insertelement <128 x i16> %1096, i16 %1099, i32 13
  %1101 = extractelement <64 x i32> %1042, i32 14
  %1102 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1101
  %1103 = load i16, i16* %1102, align 2, !tbaa !80
  %1104 = insertelement <128 x i16> %1100, i16 %1103, i32 14
  %1105 = extractelement <64 x i32> %1042, i32 15
  %1106 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1105
  %1107 = load i16, i16* %1106, align 2, !tbaa !80
  %1108 = insertelement <128 x i16> %1104, i16 %1107, i32 15
  %1109 = extractelement <64 x i32> %1042, i32 16
  %1110 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1109
  %1111 = load i16, i16* %1110, align 2, !tbaa !80
  %1112 = insertelement <128 x i16> %1108, i16 %1111, i32 16
  %1113 = extractelement <64 x i32> %1042, i32 17
  %1114 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1113
  %1115 = load i16, i16* %1114, align 2, !tbaa !80
  %1116 = insertelement <128 x i16> %1112, i16 %1115, i32 17
  %1117 = extractelement <64 x i32> %1042, i32 18
  %1118 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1117
  %1119 = load i16, i16* %1118, align 2, !tbaa !80
  %1120 = insertelement <128 x i16> %1116, i16 %1119, i32 18
  %1121 = extractelement <64 x i32> %1042, i32 19
  %1122 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1121
  %1123 = load i16, i16* %1122, align 2, !tbaa !80
  %1124 = insertelement <128 x i16> %1120, i16 %1123, i32 19
  %1125 = extractelement <64 x i32> %1042, i32 20
  %1126 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1125
  %1127 = load i16, i16* %1126, align 2, !tbaa !80
  %1128 = insertelement <128 x i16> %1124, i16 %1127, i32 20
  %1129 = extractelement <64 x i32> %1042, i32 21
  %1130 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1129
  %1131 = load i16, i16* %1130, align 2, !tbaa !80
  %1132 = insertelement <128 x i16> %1128, i16 %1131, i32 21
  %1133 = extractelement <64 x i32> %1042, i32 22
  %1134 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1133
  %1135 = load i16, i16* %1134, align 2, !tbaa !80
  %1136 = insertelement <128 x i16> %1132, i16 %1135, i32 22
  %1137 = extractelement <64 x i32> %1042, i32 23
  %1138 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1137
  %1139 = load i16, i16* %1138, align 2, !tbaa !80
  %1140 = insertelement <128 x i16> %1136, i16 %1139, i32 23
  %1141 = extractelement <64 x i32> %1042, i32 24
  %1142 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1141
  %1143 = load i16, i16* %1142, align 2, !tbaa !80
  %1144 = insertelement <128 x i16> %1140, i16 %1143, i32 24
  %1145 = extractelement <64 x i32> %1042, i32 25
  %1146 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1145
  %1147 = load i16, i16* %1146, align 2, !tbaa !80
  %1148 = insertelement <128 x i16> %1144, i16 %1147, i32 25
  %1149 = extractelement <64 x i32> %1042, i32 26
  %1150 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1149
  %1151 = load i16, i16* %1150, align 2, !tbaa !80
  %1152 = insertelement <128 x i16> %1148, i16 %1151, i32 26
  %1153 = extractelement <64 x i32> %1042, i32 27
  %1154 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1153
  %1155 = load i16, i16* %1154, align 2, !tbaa !80
  %1156 = insertelement <128 x i16> %1152, i16 %1155, i32 27
  %1157 = extractelement <64 x i32> %1042, i32 28
  %1158 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1157
  %1159 = load i16, i16* %1158, align 2, !tbaa !80
  %1160 = insertelement <128 x i16> %1156, i16 %1159, i32 28
  %1161 = extractelement <64 x i32> %1042, i32 29
  %1162 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1161
  %1163 = load i16, i16* %1162, align 2, !tbaa !80
  %1164 = insertelement <128 x i16> %1160, i16 %1163, i32 29
  %1165 = extractelement <64 x i32> %1042, i32 30
  %1166 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1165
  %1167 = load i16, i16* %1166, align 2, !tbaa !80
  %1168 = insertelement <128 x i16> %1164, i16 %1167, i32 30
  %1169 = extractelement <64 x i32> %1042, i32 31
  %1170 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1169
  %1171 = load i16, i16* %1170, align 2, !tbaa !80
  %1172 = insertelement <128 x i16> %1168, i16 %1171, i32 31
  %1173 = extractelement <64 x i32> %1042, i32 32
  %1174 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1173
  %1175 = load i16, i16* %1174, align 2, !tbaa !80
  %1176 = insertelement <128 x i16> %1172, i16 %1175, i32 32
  %1177 = extractelement <64 x i32> %1042, i32 33
  %1178 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1177
  %1179 = load i16, i16* %1178, align 2, !tbaa !80
  %1180 = insertelement <128 x i16> %1176, i16 %1179, i32 33
  %1181 = extractelement <64 x i32> %1042, i32 34
  %1182 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1181
  %1183 = load i16, i16* %1182, align 2, !tbaa !80
  %1184 = insertelement <128 x i16> %1180, i16 %1183, i32 34
  %1185 = extractelement <64 x i32> %1042, i32 35
  %1186 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1185
  %1187 = load i16, i16* %1186, align 2, !tbaa !80
  %1188 = insertelement <128 x i16> %1184, i16 %1187, i32 35
  %1189 = extractelement <64 x i32> %1042, i32 36
  %1190 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1189
  %1191 = load i16, i16* %1190, align 2, !tbaa !80
  %1192 = insertelement <128 x i16> %1188, i16 %1191, i32 36
  %1193 = extractelement <64 x i32> %1042, i32 37
  %1194 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1193
  %1195 = load i16, i16* %1194, align 2, !tbaa !80
  %1196 = insertelement <128 x i16> %1192, i16 %1195, i32 37
  %1197 = extractelement <64 x i32> %1042, i32 38
  %1198 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1197
  %1199 = load i16, i16* %1198, align 2, !tbaa !80
  %1200 = insertelement <128 x i16> %1196, i16 %1199, i32 38
  %1201 = extractelement <64 x i32> %1042, i32 39
  %1202 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1201
  %1203 = load i16, i16* %1202, align 2, !tbaa !80
  %1204 = insertelement <128 x i16> %1200, i16 %1203, i32 39
  %1205 = extractelement <64 x i32> %1042, i32 40
  %1206 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1205
  %1207 = load i16, i16* %1206, align 2, !tbaa !80
  %1208 = insertelement <128 x i16> %1204, i16 %1207, i32 40
  %1209 = extractelement <64 x i32> %1042, i32 41
  %1210 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1209
  %1211 = load i16, i16* %1210, align 2, !tbaa !80
  %1212 = insertelement <128 x i16> %1208, i16 %1211, i32 41
  %1213 = extractelement <64 x i32> %1042, i32 42
  %1214 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1213
  %1215 = load i16, i16* %1214, align 2, !tbaa !80
  %1216 = insertelement <128 x i16> %1212, i16 %1215, i32 42
  %1217 = extractelement <64 x i32> %1042, i32 43
  %1218 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1217
  %1219 = load i16, i16* %1218, align 2, !tbaa !80
  %1220 = insertelement <128 x i16> %1216, i16 %1219, i32 43
  %1221 = extractelement <64 x i32> %1042, i32 44
  %1222 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1221
  %1223 = load i16, i16* %1222, align 2, !tbaa !80
  %1224 = insertelement <128 x i16> %1220, i16 %1223, i32 44
  %1225 = extractelement <64 x i32> %1042, i32 45
  %1226 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1225
  %1227 = load i16, i16* %1226, align 2, !tbaa !80
  %1228 = insertelement <128 x i16> %1224, i16 %1227, i32 45
  %1229 = extractelement <64 x i32> %1042, i32 46
  %1230 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1229
  %1231 = load i16, i16* %1230, align 2, !tbaa !80
  %1232 = insertelement <128 x i16> %1228, i16 %1231, i32 46
  %1233 = extractelement <64 x i32> %1042, i32 47
  %1234 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1233
  %1235 = load i16, i16* %1234, align 2, !tbaa !80
  %1236 = insertelement <128 x i16> %1232, i16 %1235, i32 47
  %1237 = extractelement <64 x i32> %1042, i32 48
  %1238 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1237
  %1239 = load i16, i16* %1238, align 2, !tbaa !80
  %1240 = insertelement <128 x i16> %1236, i16 %1239, i32 48
  %1241 = extractelement <64 x i32> %1042, i32 49
  %1242 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1241
  %1243 = load i16, i16* %1242, align 2, !tbaa !80
  %1244 = insertelement <128 x i16> %1240, i16 %1243, i32 49
  %1245 = extractelement <64 x i32> %1042, i32 50
  %1246 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1245
  %1247 = load i16, i16* %1246, align 2, !tbaa !80
  %1248 = insertelement <128 x i16> %1244, i16 %1247, i32 50
  %1249 = extractelement <64 x i32> %1042, i32 51
  %1250 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1249
  %1251 = load i16, i16* %1250, align 2, !tbaa !80
  %1252 = insertelement <128 x i16> %1248, i16 %1251, i32 51
  %1253 = extractelement <64 x i32> %1042, i32 52
  %1254 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1253
  %1255 = load i16, i16* %1254, align 2, !tbaa !80
  %1256 = insertelement <128 x i16> %1252, i16 %1255, i32 52
  %1257 = extractelement <64 x i32> %1042, i32 53
  %1258 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1257
  %1259 = load i16, i16* %1258, align 2, !tbaa !80
  %1260 = insertelement <128 x i16> %1256, i16 %1259, i32 53
  %1261 = extractelement <64 x i32> %1042, i32 54
  %1262 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1261
  %1263 = load i16, i16* %1262, align 2, !tbaa !80
  %1264 = insertelement <128 x i16> %1260, i16 %1263, i32 54
  %1265 = extractelement <64 x i32> %1042, i32 55
  %1266 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1265
  %1267 = load i16, i16* %1266, align 2, !tbaa !80
  %1268 = insertelement <128 x i16> %1264, i16 %1267, i32 55
  %1269 = extractelement <64 x i32> %1042, i32 56
  %1270 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1269
  %1271 = load i16, i16* %1270, align 2, !tbaa !80
  %1272 = insertelement <128 x i16> %1268, i16 %1271, i32 56
  %1273 = extractelement <64 x i32> %1042, i32 57
  %1274 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1273
  %1275 = load i16, i16* %1274, align 2, !tbaa !80
  %1276 = insertelement <128 x i16> %1272, i16 %1275, i32 57
  %1277 = extractelement <64 x i32> %1042, i32 58
  %1278 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1277
  %1279 = load i16, i16* %1278, align 2, !tbaa !80
  %1280 = insertelement <128 x i16> %1276, i16 %1279, i32 58
  %1281 = extractelement <64 x i32> %1042, i32 59
  %1282 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1281
  %1283 = load i16, i16* %1282, align 2, !tbaa !80
  %1284 = insertelement <128 x i16> %1280, i16 %1283, i32 59
  %1285 = extractelement <64 x i32> %1042, i32 60
  %1286 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1285
  %1287 = load i16, i16* %1286, align 2, !tbaa !80
  %1288 = insertelement <128 x i16> %1284, i16 %1287, i32 60
  %1289 = extractelement <64 x i32> %1042, i32 61
  %1290 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1289
  %1291 = load i16, i16* %1290, align 2, !tbaa !80
  %1292 = insertelement <128 x i16> %1288, i16 %1291, i32 61
  %1293 = extractelement <64 x i32> %1042, i32 62
  %1294 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1293
  %1295 = load i16, i16* %1294, align 2, !tbaa !80
  %1296 = insertelement <128 x i16> %1292, i16 %1295, i32 62
  %1297 = extractelement <64 x i32> %1042, i32 63
  %1298 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1297
  %1299 = load i16, i16* %1298, align 2, !tbaa !80
  %1300 = insertelement <128 x i16> %1296, i16 %1299, i32 63
  %1301 = extractelement <64 x i32> %1044, i32 0
  %1302 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1301
  %1303 = load i16, i16* %1302, align 2, !tbaa !80
  %1304 = insertelement <128 x i16> %1300, i16 %1303, i32 64
  %1305 = extractelement <64 x i32> %1044, i32 1
  %1306 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1305
  %1307 = load i16, i16* %1306, align 2, !tbaa !80
  %1308 = insertelement <128 x i16> %1304, i16 %1307, i32 65
  %1309 = extractelement <64 x i32> %1044, i32 2
  %1310 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1309
  %1311 = load i16, i16* %1310, align 2, !tbaa !80
  %1312 = insertelement <128 x i16> %1308, i16 %1311, i32 66
  %1313 = extractelement <64 x i32> %1044, i32 3
  %1314 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1313
  %1315 = load i16, i16* %1314, align 2, !tbaa !80
  %1316 = insertelement <128 x i16> %1312, i16 %1315, i32 67
  %1317 = extractelement <64 x i32> %1044, i32 4
  %1318 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1317
  %1319 = load i16, i16* %1318, align 2, !tbaa !80
  %1320 = insertelement <128 x i16> %1316, i16 %1319, i32 68
  %1321 = extractelement <64 x i32> %1044, i32 5
  %1322 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1321
  %1323 = load i16, i16* %1322, align 2, !tbaa !80
  %1324 = insertelement <128 x i16> %1320, i16 %1323, i32 69
  %1325 = extractelement <64 x i32> %1044, i32 6
  %1326 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1325
  %1327 = load i16, i16* %1326, align 2, !tbaa !80
  %1328 = insertelement <128 x i16> %1324, i16 %1327, i32 70
  %1329 = extractelement <64 x i32> %1044, i32 7
  %1330 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1329
  %1331 = load i16, i16* %1330, align 2, !tbaa !80
  %1332 = insertelement <128 x i16> %1328, i16 %1331, i32 71
  %1333 = extractelement <64 x i32> %1044, i32 8
  %1334 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1333
  %1335 = load i16, i16* %1334, align 2, !tbaa !80
  %1336 = insertelement <128 x i16> %1332, i16 %1335, i32 72
  %1337 = extractelement <64 x i32> %1044, i32 9
  %1338 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1337
  %1339 = load i16, i16* %1338, align 2, !tbaa !80
  %1340 = insertelement <128 x i16> %1336, i16 %1339, i32 73
  %1341 = extractelement <64 x i32> %1044, i32 10
  %1342 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1341
  %1343 = load i16, i16* %1342, align 2, !tbaa !80
  %1344 = insertelement <128 x i16> %1340, i16 %1343, i32 74
  %1345 = extractelement <64 x i32> %1044, i32 11
  %1346 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1345
  %1347 = load i16, i16* %1346, align 2, !tbaa !80
  %1348 = insertelement <128 x i16> %1344, i16 %1347, i32 75
  %1349 = extractelement <64 x i32> %1044, i32 12
  %1350 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1349
  %1351 = load i16, i16* %1350, align 2, !tbaa !80
  %1352 = insertelement <128 x i16> %1348, i16 %1351, i32 76
  %1353 = extractelement <64 x i32> %1044, i32 13
  %1354 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1353
  %1355 = load i16, i16* %1354, align 2, !tbaa !80
  %1356 = insertelement <128 x i16> %1352, i16 %1355, i32 77
  %1357 = extractelement <64 x i32> %1044, i32 14
  %1358 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1357
  %1359 = load i16, i16* %1358, align 2, !tbaa !80
  %1360 = insertelement <128 x i16> %1356, i16 %1359, i32 78
  %1361 = extractelement <64 x i32> %1044, i32 15
  %1362 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1361
  %1363 = load i16, i16* %1362, align 2, !tbaa !80
  %1364 = insertelement <128 x i16> %1360, i16 %1363, i32 79
  %1365 = extractelement <64 x i32> %1044, i32 16
  %1366 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1365
  %1367 = load i16, i16* %1366, align 2, !tbaa !80
  %1368 = insertelement <128 x i16> %1364, i16 %1367, i32 80
  %1369 = extractelement <64 x i32> %1044, i32 17
  %1370 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1369
  %1371 = load i16, i16* %1370, align 2, !tbaa !80
  %1372 = insertelement <128 x i16> %1368, i16 %1371, i32 81
  %1373 = extractelement <64 x i32> %1044, i32 18
  %1374 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1373
  %1375 = load i16, i16* %1374, align 2, !tbaa !80
  %1376 = insertelement <128 x i16> %1372, i16 %1375, i32 82
  %1377 = extractelement <64 x i32> %1044, i32 19
  %1378 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1377
  %1379 = load i16, i16* %1378, align 2, !tbaa !80
  %1380 = insertelement <128 x i16> %1376, i16 %1379, i32 83
  %1381 = extractelement <64 x i32> %1044, i32 20
  %1382 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1381
  %1383 = load i16, i16* %1382, align 2, !tbaa !80
  %1384 = insertelement <128 x i16> %1380, i16 %1383, i32 84
  %1385 = extractelement <64 x i32> %1044, i32 21
  %1386 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1385
  %1387 = load i16, i16* %1386, align 2, !tbaa !80
  %1388 = insertelement <128 x i16> %1384, i16 %1387, i32 85
  %1389 = extractelement <64 x i32> %1044, i32 22
  %1390 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1389
  %1391 = load i16, i16* %1390, align 2, !tbaa !80
  %1392 = insertelement <128 x i16> %1388, i16 %1391, i32 86
  %1393 = extractelement <64 x i32> %1044, i32 23
  %1394 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1393
  %1395 = load i16, i16* %1394, align 2, !tbaa !80
  %1396 = insertelement <128 x i16> %1392, i16 %1395, i32 87
  %1397 = extractelement <64 x i32> %1044, i32 24
  %1398 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1397
  %1399 = load i16, i16* %1398, align 2, !tbaa !80
  %1400 = insertelement <128 x i16> %1396, i16 %1399, i32 88
  %1401 = extractelement <64 x i32> %1044, i32 25
  %1402 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1401
  %1403 = load i16, i16* %1402, align 2, !tbaa !80
  %1404 = insertelement <128 x i16> %1400, i16 %1403, i32 89
  %1405 = extractelement <64 x i32> %1044, i32 26
  %1406 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1405
  %1407 = load i16, i16* %1406, align 2, !tbaa !80
  %1408 = insertelement <128 x i16> %1404, i16 %1407, i32 90
  %1409 = extractelement <64 x i32> %1044, i32 27
  %1410 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1409
  %1411 = load i16, i16* %1410, align 2, !tbaa !80
  %1412 = insertelement <128 x i16> %1408, i16 %1411, i32 91
  %1413 = extractelement <64 x i32> %1044, i32 28
  %1414 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1413
  %1415 = load i16, i16* %1414, align 2, !tbaa !80
  %1416 = insertelement <128 x i16> %1412, i16 %1415, i32 92
  %1417 = extractelement <64 x i32> %1044, i32 29
  %1418 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1417
  %1419 = load i16, i16* %1418, align 2, !tbaa !80
  %1420 = insertelement <128 x i16> %1416, i16 %1419, i32 93
  %1421 = extractelement <64 x i32> %1044, i32 30
  %1422 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1421
  %1423 = load i16, i16* %1422, align 2, !tbaa !80
  %1424 = insertelement <128 x i16> %1420, i16 %1423, i32 94
  %1425 = extractelement <64 x i32> %1044, i32 31
  %1426 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1425
  %1427 = load i16, i16* %1426, align 2, !tbaa !80
  %1428 = insertelement <128 x i16> %1424, i16 %1427, i32 95
  %1429 = extractelement <64 x i32> %1044, i32 32
  %1430 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1429
  %1431 = load i16, i16* %1430, align 2, !tbaa !80
  %1432 = insertelement <128 x i16> %1428, i16 %1431, i32 96
  %1433 = extractelement <64 x i32> %1044, i32 33
  %1434 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1433
  %1435 = load i16, i16* %1434, align 2, !tbaa !80
  %1436 = insertelement <128 x i16> %1432, i16 %1435, i32 97
  %1437 = extractelement <64 x i32> %1044, i32 34
  %1438 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1437
  %1439 = load i16, i16* %1438, align 2, !tbaa !80
  %1440 = insertelement <128 x i16> %1436, i16 %1439, i32 98
  %1441 = extractelement <64 x i32> %1044, i32 35
  %1442 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1441
  %1443 = load i16, i16* %1442, align 2, !tbaa !80
  %1444 = insertelement <128 x i16> %1440, i16 %1443, i32 99
  %1445 = extractelement <64 x i32> %1044, i32 36
  %1446 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1445
  %1447 = load i16, i16* %1446, align 2, !tbaa !80
  %1448 = insertelement <128 x i16> %1444, i16 %1447, i32 100
  %1449 = extractelement <64 x i32> %1044, i32 37
  %1450 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1449
  %1451 = load i16, i16* %1450, align 2, !tbaa !80
  %1452 = insertelement <128 x i16> %1448, i16 %1451, i32 101
  %1453 = extractelement <64 x i32> %1044, i32 38
  %1454 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1453
  %1455 = load i16, i16* %1454, align 2, !tbaa !80
  %1456 = insertelement <128 x i16> %1452, i16 %1455, i32 102
  %1457 = extractelement <64 x i32> %1044, i32 39
  %1458 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1457
  %1459 = load i16, i16* %1458, align 2, !tbaa !80
  %1460 = insertelement <128 x i16> %1456, i16 %1459, i32 103
  %1461 = extractelement <64 x i32> %1044, i32 40
  %1462 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1461
  %1463 = load i16, i16* %1462, align 2, !tbaa !80
  %1464 = insertelement <128 x i16> %1460, i16 %1463, i32 104
  %1465 = extractelement <64 x i32> %1044, i32 41
  %1466 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1465
  %1467 = load i16, i16* %1466, align 2, !tbaa !80
  %1468 = insertelement <128 x i16> %1464, i16 %1467, i32 105
  %1469 = extractelement <64 x i32> %1044, i32 42
  %1470 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1469
  %1471 = load i16, i16* %1470, align 2, !tbaa !80
  %1472 = insertelement <128 x i16> %1468, i16 %1471, i32 106
  %1473 = extractelement <64 x i32> %1044, i32 43
  %1474 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1473
  %1475 = load i16, i16* %1474, align 2, !tbaa !80
  %1476 = insertelement <128 x i16> %1472, i16 %1475, i32 107
  %1477 = extractelement <64 x i32> %1044, i32 44
  %1478 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1477
  %1479 = load i16, i16* %1478, align 2, !tbaa !80
  %1480 = insertelement <128 x i16> %1476, i16 %1479, i32 108
  %1481 = extractelement <64 x i32> %1044, i32 45
  %1482 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1481
  %1483 = load i16, i16* %1482, align 2, !tbaa !80
  %1484 = insertelement <128 x i16> %1480, i16 %1483, i32 109
  %1485 = extractelement <64 x i32> %1044, i32 46
  %1486 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1485
  %1487 = load i16, i16* %1486, align 2, !tbaa !80
  %1488 = insertelement <128 x i16> %1484, i16 %1487, i32 110
  %1489 = extractelement <64 x i32> %1044, i32 47
  %1490 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1489
  %1491 = load i16, i16* %1490, align 2, !tbaa !80
  %1492 = insertelement <128 x i16> %1488, i16 %1491, i32 111
  %1493 = extractelement <64 x i32> %1044, i32 48
  %1494 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1493
  %1495 = load i16, i16* %1494, align 2, !tbaa !80
  %1496 = insertelement <128 x i16> %1492, i16 %1495, i32 112
  %1497 = extractelement <64 x i32> %1044, i32 49
  %1498 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1497
  %1499 = load i16, i16* %1498, align 2, !tbaa !80
  %1500 = insertelement <128 x i16> %1496, i16 %1499, i32 113
  %1501 = extractelement <64 x i32> %1044, i32 50
  %1502 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1501
  %1503 = load i16, i16* %1502, align 2, !tbaa !80
  %1504 = insertelement <128 x i16> %1500, i16 %1503, i32 114
  %1505 = extractelement <64 x i32> %1044, i32 51
  %1506 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1505
  %1507 = load i16, i16* %1506, align 2, !tbaa !80
  %1508 = insertelement <128 x i16> %1504, i16 %1507, i32 115
  %1509 = extractelement <64 x i32> %1044, i32 52
  %1510 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1509
  %1511 = load i16, i16* %1510, align 2, !tbaa !80
  %1512 = insertelement <128 x i16> %1508, i16 %1511, i32 116
  %1513 = extractelement <64 x i32> %1044, i32 53
  %1514 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1513
  %1515 = load i16, i16* %1514, align 2, !tbaa !80
  %1516 = insertelement <128 x i16> %1512, i16 %1515, i32 117
  %1517 = extractelement <64 x i32> %1044, i32 54
  %1518 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1517
  %1519 = load i16, i16* %1518, align 2, !tbaa !80
  %1520 = insertelement <128 x i16> %1516, i16 %1519, i32 118
  %1521 = extractelement <64 x i32> %1044, i32 55
  %1522 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1521
  %1523 = load i16, i16* %1522, align 2, !tbaa !80
  %1524 = insertelement <128 x i16> %1520, i16 %1523, i32 119
  %1525 = extractelement <64 x i32> %1044, i32 56
  %1526 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1525
  %1527 = load i16, i16* %1526, align 2, !tbaa !80
  %1528 = insertelement <128 x i16> %1524, i16 %1527, i32 120
  %1529 = extractelement <64 x i32> %1044, i32 57
  %1530 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1529
  %1531 = load i16, i16* %1530, align 2, !tbaa !80
  %1532 = insertelement <128 x i16> %1528, i16 %1531, i32 121
  %1533 = extractelement <64 x i32> %1044, i32 58
  %1534 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1533
  %1535 = load i16, i16* %1534, align 2, !tbaa !80
  %1536 = insertelement <128 x i16> %1532, i16 %1535, i32 122
  %1537 = extractelement <64 x i32> %1044, i32 59
  %1538 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1537
  %1539 = load i16, i16* %1538, align 2, !tbaa !80
  %1540 = insertelement <128 x i16> %1536, i16 %1539, i32 123
  %1541 = extractelement <64 x i32> %1044, i32 60
  %1542 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1541
  %1543 = load i16, i16* %1542, align 2, !tbaa !80
  %1544 = insertelement <128 x i16> %1540, i16 %1543, i32 124
  %1545 = extractelement <64 x i32> %1044, i32 61
  %1546 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1545
  %1547 = load i16, i16* %1546, align 2, !tbaa !80
  %1548 = insertelement <128 x i16> %1544, i16 %1547, i32 125
  %1549 = extractelement <64 x i32> %1044, i32 62
  %1550 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1549
  %1551 = load i16, i16* %1550, align 2, !tbaa !80
  %1552 = insertelement <128 x i16> %1548, i16 %1551, i32 126
  %1553 = extractelement <64 x i32> %1044, i32 63
  %1554 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1553
  %1555 = load i16, i16* %1554, align 2, !tbaa !80
  %1556 = insertelement <128 x i16> %1552, i16 %1555, i32 127
  %1557 = bitcast <128 x i16> %1020 to <64 x i32>
  %1558 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1557)
  %1559 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1557)
  %1560 = bitcast <128 x i16> %1556 to <64 x i32>
  %1561 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %1560)
  %1562 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %1560)
  %1563 = tail call <32 x i32> @llvm.hexagon.V6.vmpyihb.acc.128B(<32 x i32> %1559, <32 x i32> %1562, i32 %dup4.i.i6) #9
  %1564 = tail call <32 x i32> @llvm.hexagon.V6.vmpyihb.acc.128B(<32 x i32> %1558, <32 x i32> %1561, i32 %dup4.i.i6) #9
  %1565 = zext i32 %output.s0.x.x to i64
  %1566 = mul nuw nsw i64 %1565, 1431655766
  %1567 = lshr i64 %1566, 32
  %1568 = trunc i64 %1567 to i32
  %1569 = mul i32 %1568, -3
  %1570 = add i32 %1569, %output.s0.x.x
  %1571 = shl nsw i32 %1570, 7
  %1572 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1571
  %1573 = bitcast i16* %1572 to <32 x i32>*
  %1574 = load <32 x i32>, <32 x i32>* %1573, align 128, !tbaa !80
  %1575 = or i32 %1571, 64
  %1576 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1575
  %1577 = bitcast i16* %1576 to <32 x i32>*
  %1578 = load <32 x i32>, <32 x i32>* %1577, align 128, !tbaa !80
  %1579 = tail call <32 x i32> @llvm.hexagon.V6.vmpyihb.acc.128B(<32 x i32> %1563, <32 x i32> %1574, i32 %dup4.i.i4) #9
  %1580 = tail call <32 x i32> @llvm.hexagon.V6.vmpyihb.acc.128B(<32 x i32> %1564, <32 x i32> %1578, i32 %dup4.i.i4) #9
  %1581 = or i32 %46, 1
  %1582 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %1581) #9
  %1583 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1582, <32 x i32> %1582)
  %1584 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1583, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>) #9
  %1585 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1583, <64 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>) #9
  %1586 = shufflevector <64 x i32> %1584, <64 x i32> %1585, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %t113 = srem <128 x i32> %1586, %35
  %1587 = shufflevector <128 x i32> %t113, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1588 = tail call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %1587, i32 31) #9
  %1589 = shufflevector <128 x i32> %t113, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1590 = tail call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %1589, i32 31) #9
  %1591 = shufflevector <128 x i32> %t113, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %1592 = tail call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %1591, i32 31) #9
  %1593 = shufflevector <128 x i32> %t113, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %1594 = tail call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %1593, i32 31) #9
  %1595 = tail call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %1588, <32 x i32> %36) #9
  %1596 = tail call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %1590, <32 x i32> %36) #9
  %1597 = tail call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %1592, <32 x i32> %36) #9
  %1598 = tail call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %1594, <32 x i32> %36) #9
  %1599 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1596, <32 x i32> %1595)
  %1600 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %1598, <32 x i32> %1597)
  %1601 = shufflevector <128 x i32> %t113, <128 x i32> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1602 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1601, <64 x i32> %1599) #9
  %1603 = shufflevector <128 x i32> %t113, <128 x i32> undef, <64 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %1604 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %1603, <64 x i32> %1600) #9
  %1605 = extractelement <64 x i32> %1602, i32 0
  %1606 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1605
  %1607 = load i16, i16* %1606, align 2, !tbaa !80
  %1608 = insertelement <128 x i16> undef, i16 %1607, i32 0
  %1609 = extractelement <64 x i32> %1602, i32 1
  %1610 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1609
  %1611 = load i16, i16* %1610, align 2, !tbaa !80
  %1612 = insertelement <128 x i16> %1608, i16 %1611, i32 1
  %1613 = extractelement <64 x i32> %1602, i32 2
  %1614 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1613
  %1615 = load i16, i16* %1614, align 2, !tbaa !80
  %1616 = insertelement <128 x i16> %1612, i16 %1615, i32 2
  %1617 = extractelement <64 x i32> %1602, i32 3
  %1618 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1617
  %1619 = load i16, i16* %1618, align 2, !tbaa !80
  %1620 = insertelement <128 x i16> %1616, i16 %1619, i32 3
  %1621 = extractelement <64 x i32> %1602, i32 4
  %1622 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1621
  %1623 = load i16, i16* %1622, align 2, !tbaa !80
  %1624 = insertelement <128 x i16> %1620, i16 %1623, i32 4
  %1625 = extractelement <64 x i32> %1602, i32 5
  %1626 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1625
  %1627 = load i16, i16* %1626, align 2, !tbaa !80
  %1628 = insertelement <128 x i16> %1624, i16 %1627, i32 5
  %1629 = extractelement <64 x i32> %1602, i32 6
  %1630 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1629
  %1631 = load i16, i16* %1630, align 2, !tbaa !80
  %1632 = insertelement <128 x i16> %1628, i16 %1631, i32 6
  %1633 = extractelement <64 x i32> %1602, i32 7
  %1634 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1633
  %1635 = load i16, i16* %1634, align 2, !tbaa !80
  %1636 = insertelement <128 x i16> %1632, i16 %1635, i32 7
  %1637 = extractelement <64 x i32> %1602, i32 8
  %1638 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1637
  %1639 = load i16, i16* %1638, align 2, !tbaa !80
  %1640 = insertelement <128 x i16> %1636, i16 %1639, i32 8
  %1641 = extractelement <64 x i32> %1602, i32 9
  %1642 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1641
  %1643 = load i16, i16* %1642, align 2, !tbaa !80
  %1644 = insertelement <128 x i16> %1640, i16 %1643, i32 9
  %1645 = extractelement <64 x i32> %1602, i32 10
  %1646 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1645
  %1647 = load i16, i16* %1646, align 2, !tbaa !80
  %1648 = insertelement <128 x i16> %1644, i16 %1647, i32 10
  %1649 = extractelement <64 x i32> %1602, i32 11
  %1650 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1649
  %1651 = load i16, i16* %1650, align 2, !tbaa !80
  %1652 = insertelement <128 x i16> %1648, i16 %1651, i32 11
  %1653 = extractelement <64 x i32> %1602, i32 12
  %1654 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1653
  %1655 = load i16, i16* %1654, align 2, !tbaa !80
  %1656 = insertelement <128 x i16> %1652, i16 %1655, i32 12
  %1657 = extractelement <64 x i32> %1602, i32 13
  %1658 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1657
  %1659 = load i16, i16* %1658, align 2, !tbaa !80
  %1660 = insertelement <128 x i16> %1656, i16 %1659, i32 13
  %1661 = extractelement <64 x i32> %1602, i32 14
  %1662 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1661
  %1663 = load i16, i16* %1662, align 2, !tbaa !80
  %1664 = insertelement <128 x i16> %1660, i16 %1663, i32 14
  %1665 = extractelement <64 x i32> %1602, i32 15
  %1666 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1665
  %1667 = load i16, i16* %1666, align 2, !tbaa !80
  %1668 = insertelement <128 x i16> %1664, i16 %1667, i32 15
  %1669 = extractelement <64 x i32> %1602, i32 16
  %1670 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1669
  %1671 = load i16, i16* %1670, align 2, !tbaa !80
  %1672 = insertelement <128 x i16> %1668, i16 %1671, i32 16
  %1673 = extractelement <64 x i32> %1602, i32 17
  %1674 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1673
  %1675 = load i16, i16* %1674, align 2, !tbaa !80
  %1676 = insertelement <128 x i16> %1672, i16 %1675, i32 17
  %1677 = extractelement <64 x i32> %1602, i32 18
  %1678 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1677
  %1679 = load i16, i16* %1678, align 2, !tbaa !80
  %1680 = insertelement <128 x i16> %1676, i16 %1679, i32 18
  %1681 = extractelement <64 x i32> %1602, i32 19
  %1682 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1681
  %1683 = load i16, i16* %1682, align 2, !tbaa !80
  %1684 = insertelement <128 x i16> %1680, i16 %1683, i32 19
  %1685 = extractelement <64 x i32> %1602, i32 20
  %1686 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1685
  %1687 = load i16, i16* %1686, align 2, !tbaa !80
  %1688 = insertelement <128 x i16> %1684, i16 %1687, i32 20
  %1689 = extractelement <64 x i32> %1602, i32 21
  %1690 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1689
  %1691 = load i16, i16* %1690, align 2, !tbaa !80
  %1692 = insertelement <128 x i16> %1688, i16 %1691, i32 21
  %1693 = extractelement <64 x i32> %1602, i32 22
  %1694 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1693
  %1695 = load i16, i16* %1694, align 2, !tbaa !80
  %1696 = insertelement <128 x i16> %1692, i16 %1695, i32 22
  %1697 = extractelement <64 x i32> %1602, i32 23
  %1698 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1697
  %1699 = load i16, i16* %1698, align 2, !tbaa !80
  %1700 = insertelement <128 x i16> %1696, i16 %1699, i32 23
  %1701 = extractelement <64 x i32> %1602, i32 24
  %1702 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1701
  %1703 = load i16, i16* %1702, align 2, !tbaa !80
  %1704 = insertelement <128 x i16> %1700, i16 %1703, i32 24
  %1705 = extractelement <64 x i32> %1602, i32 25
  %1706 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1705
  %1707 = load i16, i16* %1706, align 2, !tbaa !80
  %1708 = insertelement <128 x i16> %1704, i16 %1707, i32 25
  %1709 = extractelement <64 x i32> %1602, i32 26
  %1710 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1709
  %1711 = load i16, i16* %1710, align 2, !tbaa !80
  %1712 = insertelement <128 x i16> %1708, i16 %1711, i32 26
  %1713 = extractelement <64 x i32> %1602, i32 27
  %1714 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1713
  %1715 = load i16, i16* %1714, align 2, !tbaa !80
  %1716 = insertelement <128 x i16> %1712, i16 %1715, i32 27
  %1717 = extractelement <64 x i32> %1602, i32 28
  %1718 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1717
  %1719 = load i16, i16* %1718, align 2, !tbaa !80
  %1720 = insertelement <128 x i16> %1716, i16 %1719, i32 28
  %1721 = extractelement <64 x i32> %1602, i32 29
  %1722 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1721
  %1723 = load i16, i16* %1722, align 2, !tbaa !80
  %1724 = insertelement <128 x i16> %1720, i16 %1723, i32 29
  %1725 = extractelement <64 x i32> %1602, i32 30
  %1726 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1725
  %1727 = load i16, i16* %1726, align 2, !tbaa !80
  %1728 = insertelement <128 x i16> %1724, i16 %1727, i32 30
  %1729 = extractelement <64 x i32> %1602, i32 31
  %1730 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1729
  %1731 = load i16, i16* %1730, align 2, !tbaa !80
  %1732 = insertelement <128 x i16> %1728, i16 %1731, i32 31
  %1733 = extractelement <64 x i32> %1602, i32 32
  %1734 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1733
  %1735 = load i16, i16* %1734, align 2, !tbaa !80
  %1736 = insertelement <128 x i16> %1732, i16 %1735, i32 32
  %1737 = extractelement <64 x i32> %1602, i32 33
  %1738 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1737
  %1739 = load i16, i16* %1738, align 2, !tbaa !80
  %1740 = insertelement <128 x i16> %1736, i16 %1739, i32 33
  %1741 = extractelement <64 x i32> %1602, i32 34
  %1742 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1741
  %1743 = load i16, i16* %1742, align 2, !tbaa !80
  %1744 = insertelement <128 x i16> %1740, i16 %1743, i32 34
  %1745 = extractelement <64 x i32> %1602, i32 35
  %1746 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1745
  %1747 = load i16, i16* %1746, align 2, !tbaa !80
  %1748 = insertelement <128 x i16> %1744, i16 %1747, i32 35
  %1749 = extractelement <64 x i32> %1602, i32 36
  %1750 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1749
  %1751 = load i16, i16* %1750, align 2, !tbaa !80
  %1752 = insertelement <128 x i16> %1748, i16 %1751, i32 36
  %1753 = extractelement <64 x i32> %1602, i32 37
  %1754 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1753
  %1755 = load i16, i16* %1754, align 2, !tbaa !80
  %1756 = insertelement <128 x i16> %1752, i16 %1755, i32 37
  %1757 = extractelement <64 x i32> %1602, i32 38
  %1758 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1757
  %1759 = load i16, i16* %1758, align 2, !tbaa !80
  %1760 = insertelement <128 x i16> %1756, i16 %1759, i32 38
  %1761 = extractelement <64 x i32> %1602, i32 39
  %1762 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1761
  %1763 = load i16, i16* %1762, align 2, !tbaa !80
  %1764 = insertelement <128 x i16> %1760, i16 %1763, i32 39
  %1765 = extractelement <64 x i32> %1602, i32 40
  %1766 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1765
  %1767 = load i16, i16* %1766, align 2, !tbaa !80
  %1768 = insertelement <128 x i16> %1764, i16 %1767, i32 40
  %1769 = extractelement <64 x i32> %1602, i32 41
  %1770 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1769
  %1771 = load i16, i16* %1770, align 2, !tbaa !80
  %1772 = insertelement <128 x i16> %1768, i16 %1771, i32 41
  %1773 = extractelement <64 x i32> %1602, i32 42
  %1774 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1773
  %1775 = load i16, i16* %1774, align 2, !tbaa !80
  %1776 = insertelement <128 x i16> %1772, i16 %1775, i32 42
  %1777 = extractelement <64 x i32> %1602, i32 43
  %1778 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1777
  %1779 = load i16, i16* %1778, align 2, !tbaa !80
  %1780 = insertelement <128 x i16> %1776, i16 %1779, i32 43
  %1781 = extractelement <64 x i32> %1602, i32 44
  %1782 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1781
  %1783 = load i16, i16* %1782, align 2, !tbaa !80
  %1784 = insertelement <128 x i16> %1780, i16 %1783, i32 44
  %1785 = extractelement <64 x i32> %1602, i32 45
  %1786 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1785
  %1787 = load i16, i16* %1786, align 2, !tbaa !80
  %1788 = insertelement <128 x i16> %1784, i16 %1787, i32 45
  %1789 = extractelement <64 x i32> %1602, i32 46
  %1790 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1789
  %1791 = load i16, i16* %1790, align 2, !tbaa !80
  %1792 = insertelement <128 x i16> %1788, i16 %1791, i32 46
  %1793 = extractelement <64 x i32> %1602, i32 47
  %1794 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1793
  %1795 = load i16, i16* %1794, align 2, !tbaa !80
  %1796 = insertelement <128 x i16> %1792, i16 %1795, i32 47
  %1797 = extractelement <64 x i32> %1602, i32 48
  %1798 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1797
  %1799 = load i16, i16* %1798, align 2, !tbaa !80
  %1800 = insertelement <128 x i16> %1796, i16 %1799, i32 48
  %1801 = extractelement <64 x i32> %1602, i32 49
  %1802 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1801
  %1803 = load i16, i16* %1802, align 2, !tbaa !80
  %1804 = insertelement <128 x i16> %1800, i16 %1803, i32 49
  %1805 = extractelement <64 x i32> %1602, i32 50
  %1806 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1805
  %1807 = load i16, i16* %1806, align 2, !tbaa !80
  %1808 = insertelement <128 x i16> %1804, i16 %1807, i32 50
  %1809 = extractelement <64 x i32> %1602, i32 51
  %1810 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1809
  %1811 = load i16, i16* %1810, align 2, !tbaa !80
  %1812 = insertelement <128 x i16> %1808, i16 %1811, i32 51
  %1813 = extractelement <64 x i32> %1602, i32 52
  %1814 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1813
  %1815 = load i16, i16* %1814, align 2, !tbaa !80
  %1816 = insertelement <128 x i16> %1812, i16 %1815, i32 52
  %1817 = extractelement <64 x i32> %1602, i32 53
  %1818 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1817
  %1819 = load i16, i16* %1818, align 2, !tbaa !80
  %1820 = insertelement <128 x i16> %1816, i16 %1819, i32 53
  %1821 = extractelement <64 x i32> %1602, i32 54
  %1822 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1821
  %1823 = load i16, i16* %1822, align 2, !tbaa !80
  %1824 = insertelement <128 x i16> %1820, i16 %1823, i32 54
  %1825 = extractelement <64 x i32> %1602, i32 55
  %1826 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1825
  %1827 = load i16, i16* %1826, align 2, !tbaa !80
  %1828 = insertelement <128 x i16> %1824, i16 %1827, i32 55
  %1829 = extractelement <64 x i32> %1602, i32 56
  %1830 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1829
  %1831 = load i16, i16* %1830, align 2, !tbaa !80
  %1832 = insertelement <128 x i16> %1828, i16 %1831, i32 56
  %1833 = extractelement <64 x i32> %1602, i32 57
  %1834 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1833
  %1835 = load i16, i16* %1834, align 2, !tbaa !80
  %1836 = insertelement <128 x i16> %1832, i16 %1835, i32 57
  %1837 = extractelement <64 x i32> %1602, i32 58
  %1838 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1837
  %1839 = load i16, i16* %1838, align 2, !tbaa !80
  %1840 = insertelement <128 x i16> %1836, i16 %1839, i32 58
  %1841 = extractelement <64 x i32> %1602, i32 59
  %1842 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1841
  %1843 = load i16, i16* %1842, align 2, !tbaa !80
  %1844 = insertelement <128 x i16> %1840, i16 %1843, i32 59
  %1845 = extractelement <64 x i32> %1602, i32 60
  %1846 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1845
  %1847 = load i16, i16* %1846, align 2, !tbaa !80
  %1848 = insertelement <128 x i16> %1844, i16 %1847, i32 60
  %1849 = extractelement <64 x i32> %1602, i32 61
  %1850 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1849
  %1851 = load i16, i16* %1850, align 2, !tbaa !80
  %1852 = insertelement <128 x i16> %1848, i16 %1851, i32 61
  %1853 = extractelement <64 x i32> %1602, i32 62
  %1854 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1853
  %1855 = load i16, i16* %1854, align 2, !tbaa !80
  %1856 = insertelement <128 x i16> %1852, i16 %1855, i32 62
  %1857 = extractelement <64 x i32> %1602, i32 63
  %1858 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1857
  %1859 = load i16, i16* %1858, align 2, !tbaa !80
  %1860 = insertelement <128 x i16> %1856, i16 %1859, i32 63
  %1861 = extractelement <64 x i32> %1604, i32 0
  %1862 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1861
  %1863 = load i16, i16* %1862, align 2, !tbaa !80
  %1864 = insertelement <128 x i16> %1860, i16 %1863, i32 64
  %1865 = extractelement <64 x i32> %1604, i32 1
  %1866 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1865
  %1867 = load i16, i16* %1866, align 2, !tbaa !80
  %1868 = insertelement <128 x i16> %1864, i16 %1867, i32 65
  %1869 = extractelement <64 x i32> %1604, i32 2
  %1870 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1869
  %1871 = load i16, i16* %1870, align 2, !tbaa !80
  %1872 = insertelement <128 x i16> %1868, i16 %1871, i32 66
  %1873 = extractelement <64 x i32> %1604, i32 3
  %1874 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1873
  %1875 = load i16, i16* %1874, align 2, !tbaa !80
  %1876 = insertelement <128 x i16> %1872, i16 %1875, i32 67
  %1877 = extractelement <64 x i32> %1604, i32 4
  %1878 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1877
  %1879 = load i16, i16* %1878, align 2, !tbaa !80
  %1880 = insertelement <128 x i16> %1876, i16 %1879, i32 68
  %1881 = extractelement <64 x i32> %1604, i32 5
  %1882 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1881
  %1883 = load i16, i16* %1882, align 2, !tbaa !80
  %1884 = insertelement <128 x i16> %1880, i16 %1883, i32 69
  %1885 = extractelement <64 x i32> %1604, i32 6
  %1886 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1885
  %1887 = load i16, i16* %1886, align 2, !tbaa !80
  %1888 = insertelement <128 x i16> %1884, i16 %1887, i32 70
  %1889 = extractelement <64 x i32> %1604, i32 7
  %1890 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1889
  %1891 = load i16, i16* %1890, align 2, !tbaa !80
  %1892 = insertelement <128 x i16> %1888, i16 %1891, i32 71
  %1893 = extractelement <64 x i32> %1604, i32 8
  %1894 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1893
  %1895 = load i16, i16* %1894, align 2, !tbaa !80
  %1896 = insertelement <128 x i16> %1892, i16 %1895, i32 72
  %1897 = extractelement <64 x i32> %1604, i32 9
  %1898 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1897
  %1899 = load i16, i16* %1898, align 2, !tbaa !80
  %1900 = insertelement <128 x i16> %1896, i16 %1899, i32 73
  %1901 = extractelement <64 x i32> %1604, i32 10
  %1902 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1901
  %1903 = load i16, i16* %1902, align 2, !tbaa !80
  %1904 = insertelement <128 x i16> %1900, i16 %1903, i32 74
  %1905 = extractelement <64 x i32> %1604, i32 11
  %1906 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1905
  %1907 = load i16, i16* %1906, align 2, !tbaa !80
  %1908 = insertelement <128 x i16> %1904, i16 %1907, i32 75
  %1909 = extractelement <64 x i32> %1604, i32 12
  %1910 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1909
  %1911 = load i16, i16* %1910, align 2, !tbaa !80
  %1912 = insertelement <128 x i16> %1908, i16 %1911, i32 76
  %1913 = extractelement <64 x i32> %1604, i32 13
  %1914 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1913
  %1915 = load i16, i16* %1914, align 2, !tbaa !80
  %1916 = insertelement <128 x i16> %1912, i16 %1915, i32 77
  %1917 = extractelement <64 x i32> %1604, i32 14
  %1918 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1917
  %1919 = load i16, i16* %1918, align 2, !tbaa !80
  %1920 = insertelement <128 x i16> %1916, i16 %1919, i32 78
  %1921 = extractelement <64 x i32> %1604, i32 15
  %1922 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1921
  %1923 = load i16, i16* %1922, align 2, !tbaa !80
  %1924 = insertelement <128 x i16> %1920, i16 %1923, i32 79
  %1925 = extractelement <64 x i32> %1604, i32 16
  %1926 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1925
  %1927 = load i16, i16* %1926, align 2, !tbaa !80
  %1928 = insertelement <128 x i16> %1924, i16 %1927, i32 80
  %1929 = extractelement <64 x i32> %1604, i32 17
  %1930 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1929
  %1931 = load i16, i16* %1930, align 2, !tbaa !80
  %1932 = insertelement <128 x i16> %1928, i16 %1931, i32 81
  %1933 = extractelement <64 x i32> %1604, i32 18
  %1934 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1933
  %1935 = load i16, i16* %1934, align 2, !tbaa !80
  %1936 = insertelement <128 x i16> %1932, i16 %1935, i32 82
  %1937 = extractelement <64 x i32> %1604, i32 19
  %1938 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1937
  %1939 = load i16, i16* %1938, align 2, !tbaa !80
  %1940 = insertelement <128 x i16> %1936, i16 %1939, i32 83
  %1941 = extractelement <64 x i32> %1604, i32 20
  %1942 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1941
  %1943 = load i16, i16* %1942, align 2, !tbaa !80
  %1944 = insertelement <128 x i16> %1940, i16 %1943, i32 84
  %1945 = extractelement <64 x i32> %1604, i32 21
  %1946 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1945
  %1947 = load i16, i16* %1946, align 2, !tbaa !80
  %1948 = insertelement <128 x i16> %1944, i16 %1947, i32 85
  %1949 = extractelement <64 x i32> %1604, i32 22
  %1950 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1949
  %1951 = load i16, i16* %1950, align 2, !tbaa !80
  %1952 = insertelement <128 x i16> %1948, i16 %1951, i32 86
  %1953 = extractelement <64 x i32> %1604, i32 23
  %1954 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1953
  %1955 = load i16, i16* %1954, align 2, !tbaa !80
  %1956 = insertelement <128 x i16> %1952, i16 %1955, i32 87
  %1957 = extractelement <64 x i32> %1604, i32 24
  %1958 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1957
  %1959 = load i16, i16* %1958, align 2, !tbaa !80
  %1960 = insertelement <128 x i16> %1956, i16 %1959, i32 88
  %1961 = extractelement <64 x i32> %1604, i32 25
  %1962 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1961
  %1963 = load i16, i16* %1962, align 2, !tbaa !80
  %1964 = insertelement <128 x i16> %1960, i16 %1963, i32 89
  %1965 = extractelement <64 x i32> %1604, i32 26
  %1966 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1965
  %1967 = load i16, i16* %1966, align 2, !tbaa !80
  %1968 = insertelement <128 x i16> %1964, i16 %1967, i32 90
  %1969 = extractelement <64 x i32> %1604, i32 27
  %1970 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1969
  %1971 = load i16, i16* %1970, align 2, !tbaa !80
  %1972 = insertelement <128 x i16> %1968, i16 %1971, i32 91
  %1973 = extractelement <64 x i32> %1604, i32 28
  %1974 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1973
  %1975 = load i16, i16* %1974, align 2, !tbaa !80
  %1976 = insertelement <128 x i16> %1972, i16 %1975, i32 92
  %1977 = extractelement <64 x i32> %1604, i32 29
  %1978 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1977
  %1979 = load i16, i16* %1978, align 2, !tbaa !80
  %1980 = insertelement <128 x i16> %1976, i16 %1979, i32 93
  %1981 = extractelement <64 x i32> %1604, i32 30
  %1982 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1981
  %1983 = load i16, i16* %1982, align 2, !tbaa !80
  %1984 = insertelement <128 x i16> %1980, i16 %1983, i32 94
  %1985 = extractelement <64 x i32> %1604, i32 31
  %1986 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1985
  %1987 = load i16, i16* %1986, align 2, !tbaa !80
  %1988 = insertelement <128 x i16> %1984, i16 %1987, i32 95
  %1989 = extractelement <64 x i32> %1604, i32 32
  %1990 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1989
  %1991 = load i16, i16* %1990, align 2, !tbaa !80
  %1992 = insertelement <128 x i16> %1988, i16 %1991, i32 96
  %1993 = extractelement <64 x i32> %1604, i32 33
  %1994 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1993
  %1995 = load i16, i16* %1994, align 2, !tbaa !80
  %1996 = insertelement <128 x i16> %1992, i16 %1995, i32 97
  %1997 = extractelement <64 x i32> %1604, i32 34
  %1998 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %1997
  %1999 = load i16, i16* %1998, align 2, !tbaa !80
  %2000 = insertelement <128 x i16> %1996, i16 %1999, i32 98
  %2001 = extractelement <64 x i32> %1604, i32 35
  %2002 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %2001
  %2003 = load i16, i16* %2002, align 2, !tbaa !80
  %2004 = insertelement <128 x i16> %2000, i16 %2003, i32 99
  %2005 = extractelement <64 x i32> %1604, i32 36
  %2006 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %2005
  %2007 = load i16, i16* %2006, align 2, !tbaa !80
  %2008 = insertelement <128 x i16> %2004, i16 %2007, i32 100
  %2009 = extractelement <64 x i32> %1604, i32 37
  %2010 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %2009
  %2011 = load i16, i16* %2010, align 2, !tbaa !80
  %2012 = insertelement <128 x i16> %2008, i16 %2011, i32 101
  %2013 = extractelement <64 x i32> %1604, i32 38
  %2014 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %2013
  %2015 = load i16, i16* %2014, align 2, !tbaa !80
  %2016 = insertelement <128 x i16> %2012, i16 %2015, i32 102
  %2017 = extractelement <64 x i32> %1604, i32 39
  %2018 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %2017
  %2019 = load i16, i16* %2018, align 2, !tbaa !80
  %2020 = insertelement <128 x i16> %2016, i16 %2019, i32 103
  %2021 = extractelement <64 x i32> %1604, i32 40
  %2022 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %2021
  %2023 = load i16, i16* %2022, align 2, !tbaa !80
  %2024 = insertelement <128 x i16> %2020, i16 %2023, i32 104
  %2025 = extractelement <64 x i32> %1604, i32 41
  %2026 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %2025
  %2027 = load i16, i16* %2026, align 2, !tbaa !80
  %2028 = insertelement <128 x i16> %2024, i16 %2027, i32 105
  %2029 = extractelement <64 x i32> %1604, i32 42
  %2030 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %2029
  %2031 = load i16, i16* %2030, align 2, !tbaa !80
  %2032 = insertelement <128 x i16> %2028, i16 %2031, i32 106
  %2033 = extractelement <64 x i32> %1604, i32 43
  %2034 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %2033
  %2035 = load i16, i16* %2034, align 2, !tbaa !80
  %2036 = insertelement <128 x i16> %2032, i16 %2035, i32 107
  %2037 = extractelement <64 x i32> %1604, i32 44
  %2038 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %2037
  %2039 = load i16, i16* %2038, align 2, !tbaa !80
  %2040 = insertelement <128 x i16> %2036, i16 %2039, i32 108
  %2041 = extractelement <64 x i32> %1604, i32 45
  %2042 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %2041
  %2043 = load i16, i16* %2042, align 2, !tbaa !80
  %2044 = insertelement <128 x i16> %2040, i16 %2043, i32 109
  %2045 = extractelement <64 x i32> %1604, i32 46
  %2046 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %2045
  %2047 = load i16, i16* %2046, align 2, !tbaa !80
  %2048 = insertelement <128 x i16> %2044, i16 %2047, i32 110
  %2049 = extractelement <64 x i32> %1604, i32 47
  %2050 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %2049
  %2051 = load i16, i16* %2050, align 2, !tbaa !80
  %2052 = insertelement <128 x i16> %2048, i16 %2051, i32 111
  %2053 = extractelement <64 x i32> %1604, i32 48
  %2054 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %2053
  %2055 = load i16, i16* %2054, align 2, !tbaa !80
  %2056 = insertelement <128 x i16> %2052, i16 %2055, i32 112
  %2057 = extractelement <64 x i32> %1604, i32 49
  %2058 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %2057
  %2059 = load i16, i16* %2058, align 2, !tbaa !80
  %2060 = insertelement <128 x i16> %2056, i16 %2059, i32 113
  %2061 = extractelement <64 x i32> %1604, i32 50
  %2062 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %2061
  %2063 = load i16, i16* %2062, align 2, !tbaa !80
  %2064 = insertelement <128 x i16> %2060, i16 %2063, i32 114
  %2065 = extractelement <64 x i32> %1604, i32 51
  %2066 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %2065
  %2067 = load i16, i16* %2066, align 2, !tbaa !80
  %2068 = insertelement <128 x i16> %2064, i16 %2067, i32 115
  %2069 = extractelement <64 x i32> %1604, i32 52
  %2070 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %2069
  %2071 = load i16, i16* %2070, align 2, !tbaa !80
  %2072 = insertelement <128 x i16> %2068, i16 %2071, i32 116
  %2073 = extractelement <64 x i32> %1604, i32 53
  %2074 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %2073
  %2075 = load i16, i16* %2074, align 2, !tbaa !80
  %2076 = insertelement <128 x i16> %2072, i16 %2075, i32 117
  %2077 = extractelement <64 x i32> %1604, i32 54
  %2078 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %2077
  %2079 = load i16, i16* %2078, align 2, !tbaa !80
  %2080 = insertelement <128 x i16> %2076, i16 %2079, i32 118
  %2081 = extractelement <64 x i32> %1604, i32 55
  %2082 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %2081
  %2083 = load i16, i16* %2082, align 2, !tbaa !80
  %2084 = insertelement <128 x i16> %2080, i16 %2083, i32 119
  %2085 = extractelement <64 x i32> %1604, i32 56
  %2086 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %2085
  %2087 = load i16, i16* %2086, align 2, !tbaa !80
  %2088 = insertelement <128 x i16> %2084, i16 %2087, i32 120
  %2089 = extractelement <64 x i32> %1604, i32 57
  %2090 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %2089
  %2091 = load i16, i16* %2090, align 2, !tbaa !80
  %2092 = insertelement <128 x i16> %2088, i16 %2091, i32 121
  %2093 = extractelement <64 x i32> %1604, i32 58
  %2094 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %2093
  %2095 = load i16, i16* %2094, align 2, !tbaa !80
  %2096 = insertelement <128 x i16> %2092, i16 %2095, i32 122
  %2097 = extractelement <64 x i32> %1604, i32 59
  %2098 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %2097
  %2099 = load i16, i16* %2098, align 2, !tbaa !80
  %2100 = insertelement <128 x i16> %2096, i16 %2099, i32 123
  %2101 = extractelement <64 x i32> %1604, i32 60
  %2102 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %2101
  %2103 = load i16, i16* %2102, align 2, !tbaa !80
  %2104 = insertelement <128 x i16> %2100, i16 %2103, i32 124
  %2105 = extractelement <64 x i32> %1604, i32 61
  %2106 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %2105
  %2107 = load i16, i16* %2106, align 2, !tbaa !80
  %2108 = insertelement <128 x i16> %2104, i16 %2107, i32 125
  %2109 = extractelement <64 x i32> %1604, i32 62
  %2110 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %2109
  %2111 = load i16, i16* %2110, align 2, !tbaa !80
  %2112 = insertelement <128 x i16> %2108, i16 %2111, i32 126
  %2113 = extractelement <64 x i32> %1604, i32 63
  %2114 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %2113
  %2115 = load i16, i16* %2114, align 2, !tbaa !80
  %2116 = insertelement <128 x i16> %2112, i16 %2115, i32 127
  %2117 = bitcast <128 x i16> %2116 to <64 x i32>
  %2118 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2117)
  %2119 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2117)
  %2120 = tail call <32 x i32> @llvm.hexagon.V6.vmpyihb.acc.128B(<32 x i32> %1579, <32 x i32> %2119, i32 %dup4.i.i6) #9
  %2121 = tail call <32 x i32> @llvm.hexagon.V6.vmpyihb.acc.128B(<32 x i32> %1580, <32 x i32> %2118, i32 %dup4.i.i6) #9
  %2122 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2121, <32 x i32> %2120)
  %2123 = or i32 %46, 2
  %2124 = tail call <32 x i32> @llvm.hexagon.V6.lvsplatw.128B(i32 %2123) #9
  %2125 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2124, <32 x i32> %2124)
  %2126 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %2125, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>) #9
  %2127 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %2125, <64 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>) #9
  %2128 = shufflevector <64 x i32> %2126, <64 x i32> %2127, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %t114 = srem <128 x i32> %2128, %35
  %2129 = shufflevector <128 x i32> %t114, <128 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2130 = tail call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %2129, i32 31) #9
  %2131 = shufflevector <128 x i32> %t114, <128 x i32> undef, <32 x i32> <i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %2132 = tail call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %2131, i32 31) #9
  %2133 = shufflevector <128 x i32> %t114, <128 x i32> undef, <32 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95>
  %2134 = tail call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %2133, i32 31) #9
  %2135 = shufflevector <128 x i32> %t114, <128 x i32> undef, <32 x i32> <i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %2136 = tail call <32 x i32> @llvm.hexagon.V6.vasrw.128B(<32 x i32> %2135, i32 31) #9
  %2137 = tail call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %2130, <32 x i32> %36) #9
  %2138 = tail call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %2132, <32 x i32> %36) #9
  %2139 = tail call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %2134, <32 x i32> %36) #9
  %2140 = tail call <32 x i32> @llvm.hexagon.V6.vand.128B(<32 x i32> %2136, <32 x i32> %36) #9
  %2141 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2138, <32 x i32> %2137)
  %2142 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %2140, <32 x i32> %2139)
  %2143 = shufflevector <128 x i32> %t114, <128 x i32> undef, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %2144 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %2143, <64 x i32> %2141) #9
  %2145 = shufflevector <128 x i32> %t114, <128 x i32> undef, <64 x i32> <i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %2146 = tail call <64 x i32> @llvm.hexagon.V6.vaddw.dv.128B(<64 x i32> %2145, <64 x i32> %2142) #9
  %2147 = extractelement <64 x i32> %2144, i32 0
  %2148 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %2147
  %2149 = load i16, i16* %2148, align 2, !tbaa !80
  %2150 = insertelement <128 x i16> undef, i16 %2149, i32 0
  %2151 = extractelement <64 x i32> %2144, i32 1
  %2152 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %2151
  %2153 = load i16, i16* %2152, align 2, !tbaa !80
  %2154 = insertelement <128 x i16> %2150, i16 %2153, i32 1
  %2155 = extractelement <64 x i32> %2144, i32 2
  %2156 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %2155
  %2157 = load i16, i16* %2156, align 2, !tbaa !80
  %2158 = insertelement <128 x i16> %2154, i16 %2157, i32 2
  %2159 = extractelement <64 x i32> %2144, i32 3
  %2160 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %2159
  %2161 = load i16, i16* %2160, align 2, !tbaa !80
  %2162 = insertelement <128 x i16> %2158, i16 %2161, i32 3
  %2163 = extractelement <64 x i32> %2144, i32 4
  %2164 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %2163
  %2165 = load i16, i16* %2164, align 2, !tbaa !80
  %2166 = insertelement <128 x i16> %2162, i16 %2165, i32 4
  %2167 = extractelement <64 x i32> %2144, i32 5
  %2168 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %2167
  %2169 = load i16, i16* %2168, align 2, !tbaa !80
  %2170 = insertelement <128 x i16> %2166, i16 %2169, i32 5
  %2171 = extractelement <64 x i32> %2144, i32 6
  %2172 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %2171
  %2173 = load i16, i16* %2172, align 2, !tbaa !80
  %2174 = insertelement <128 x i16> %2170, i16 %2173, i32 6
  %2175 = extractelement <64 x i32> %2144, i32 7
  %2176 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %2175
  %2177 = load i16, i16* %2176, align 2, !tbaa !80
  %2178 = insertelement <128 x i16> %2174, i16 %2177, i32 7
  %2179 = extractelement <64 x i32> %2144, i32 8
  %2180 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %2179
  %2181 = load i16, i16* %2180, align 2, !tbaa !80
  %2182 = insertelement <128 x i16> %2178, i16 %2181, i32 8
  %2183 = extractelement <64 x i32> %2144, i32 9
  %2184 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %2183
  %2185 = load i16, i16* %2184, align 2, !tbaa !80
  %2186 = insertelement <128 x i16> %2182, i16 %2185, i32 9
  %2187 = extractelement <64 x i32> %2144, i32 10
  %2188 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %2187
  %2189 = load i16, i16* %2188, align 2, !tbaa !80
  %2190 = insertelement <128 x i16> %2186, i16 %2189, i32 10
  %2191 = extractelement <64 x i32> %2144, i32 11
  %2192 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %2191
  %2193 = load i16, i16* %2192, align 2, !tbaa !80
  %2194 = insertelement <128 x i16> %2190, i16 %2193, i32 11
  %2195 = extractelement <64 x i32> %2144, i32 12
  %2196 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %2195
  %2197 = load i16, i16* %2196, align 2, !tbaa !80
  %2198 = insertelement <128 x i16> %2194, i16 %2197, i32 12
  %2199 = extractelement <64 x i32> %2144, i32 13
  %2200 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %2199
  %2201 = load i16, i16* %2200, align 2, !tbaa !80
  %2202 = insertelement <128 x i16> %2198, i16 %2201, i32 13
  %2203 = extractelement <64 x i32> %2144, i32 14
  %2204 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %2203
  %2205 = load i16, i16* %2204, align 2, !tbaa !80
  %2206 = insertelement <128 x i16> %2202, i16 %2205, i32 14
  %2207 = extractelement <64 x i32> %2144, i32 15
  %2208 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %2207
  %2209 = load i16, i16* %2208, align 2, !tbaa !80
  %2210 = insertelement <128 x i16> %2206, i16 %2209, i32 15
  %2211 = extractelement <64 x i32> %2144, i32 16
  %2212 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %2211
  %2213 = load i16, i16* %2212, align 2, !tbaa !80
  %2214 = insertelement <128 x i16> %2210, i16 %2213, i32 16
  %2215 = extractelement <64 x i32> %2144, i32 17
  %2216 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %2215
  %2217 = load i16, i16* %2216, align 2, !tbaa !80
  %2218 = insertelement <128 x i16> %2214, i16 %2217, i32 17
  %2219 = extractelement <64 x i32> %2144, i32 18
  %2220 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %2219
  %2221 = load i16, i16* %2220, align 2, !tbaa !80
  %2222 = insertelement <128 x i16> %2218, i16 %2221, i32 18
  %2223 = extractelement <64 x i32> %2144, i32 19
  %2224 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %2223
  %2225 = load i16, i16* %2224, align 2, !tbaa !80
  %2226 = insertelement <128 x i16> %2222, i16 %2225, i32 19
  %2227 = extractelement <64 x i32> %2144, i32 20
  %2228 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %2227
  %2229 = load i16, i16* %2228, align 2, !tbaa !80
  %2230 = insertelement <128 x i16> %2226, i16 %2229, i32 20
  %2231 = extractelement <64 x i32> %2144, i32 21
  %2232 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %2231
  %2233 = load i16, i16* %2232, align 2, !tbaa !80
  %2234 = insertelement <128 x i16> %2230, i16 %2233, i32 21
  %2235 = extractelement <64 x i32> %2144, i32 22
  %2236 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %2235
  %2237 = load i16, i16* %2236, align 2, !tbaa !80
  %2238 = insertelement <128 x i16> %2234, i16 %2237, i32 22
  %2239 = extractelement <64 x i32> %2144, i32 23
  %2240 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %2239
  %2241 = load i16, i16* %2240, align 2, !tbaa !80
  %2242 = insertelement <128 x i16> %2238, i16 %2241, i32 23
  %2243 = extractelement <64 x i32> %2144, i32 24
  %2244 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %2243
  %2245 = load i16, i16* %2244, align 2, !tbaa !80
  %2246 = insertelement <128 x i16> %2242, i16 %2245, i32 24
  %2247 = extractelement <64 x i32> %2144, i32 25
  %2248 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %2247
  %2249 = load i16, i16* %2248, align 2, !tbaa !80
  %2250 = insertelement <128 x i16> %2246, i16 %2249, i32 25
  %2251 = extractelement <64 x i32> %2144, i32 26
  %2252 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %2251
  %2253 = load i16, i16* %2252, align 2, !tbaa !80
  %2254 = insertelement <128 x i16> %2250, i16 %2253, i32 26
  %2255 = extractelement <64 x i32> %2144, i32 27
  %2256 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %2255
  %2257 = load i16, i16* %2256, align 2, !tbaa !80
  %2258 = insertelement <128 x i16> %2254, i16 %2257, i32 27
  %2259 = extractelement <64 x i32> %2144, i32 28
  %2260 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %2259
  %2261 = load i16, i16* %2260, align 2, !tbaa !80
  %2262 = insertelement <128 x i16> %2258, i16 %2261, i32 28
  %2263 = extractelement <64 x i32> %2144, i32 29
  %2264 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %2263
  %2265 = load i16, i16* %2264, align 2, !tbaa !80
  %2266 = insertelement <128 x i16> %2262, i16 %2265, i32 29
  %2267 = extractelement <64 x i32> %2144, i32 30
  %2268 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %2267
  %2269 = load i16, i16* %2268, align 2, !tbaa !80
  %2270 = insertelement <128 x i16> %2266, i16 %2269, i32 30
  %2271 = extractelement <64 x i32> %2144, i32 31
  %2272 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %2271
  %2273 = load i16, i16* %2272, align 2, !tbaa !80
  %2274 = insertelement <128 x i16> %2270, i16 %2273, i32 31
  %2275 = extractelement <64 x i32> %2144, i32 32
  %2276 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %2275
  %2277 = load i16, i16* %2276, align 2, !tbaa !80
  %2278 = insertelement <128 x i16> %2274, i16 %2277, i32 32
  %2279 = extractelement <64 x i32> %2144, i32 33
  %2280 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %2279
  %2281 = load i16, i16* %2280, align 2, !tbaa !80
  %2282 = insertelement <128 x i16> %2278, i16 %2281, i32 33
  %2283 = extractelement <64 x i32> %2144, i32 34
  %2284 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %2283
  %2285 = load i16, i16* %2284, align 2, !tbaa !80
  %2286 = insertelement <128 x i16> %2282, i16 %2285, i32 34
  %2287 = extractelement <64 x i32> %2144, i32 35
  %2288 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %2287
  %2289 = load i16, i16* %2288, align 2, !tbaa !80
  %2290 = insertelement <128 x i16> %2286, i16 %2289, i32 35
  %2291 = extractelement <64 x i32> %2144, i32 36
  %2292 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %2291
  %2293 = load i16, i16* %2292, align 2, !tbaa !80
  %2294 = insertelement <128 x i16> %2290, i16 %2293, i32 36
  %2295 = extractelement <64 x i32> %2144, i32 37
  %2296 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %2295
  %2297 = load i16, i16* %2296, align 2, !tbaa !80
  %2298 = insertelement <128 x i16> %2294, i16 %2297, i32 37
  %2299 = extractelement <64 x i32> %2144, i32 38
  %2300 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %2299
  %2301 = load i16, i16* %2300, align 2, !tbaa !80
  %2302 = insertelement <128 x i16> %2298, i16 %2301, i32 38
  %2303 = extractelement <64 x i32> %2144, i32 39
  %2304 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %2303
  %2305 = load i16, i16* %2304, align 2, !tbaa !80
  %2306 = insertelement <128 x i16> %2302, i16 %2305, i32 39
  %2307 = extractelement <64 x i32> %2144, i32 40
  %2308 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %2307
  %2309 = load i16, i16* %2308, align 2, !tbaa !80
  %2310 = insertelement <128 x i16> %2306, i16 %2309, i32 40
  %2311 = extractelement <64 x i32> %2144, i32 41
  %2312 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %2311
  %2313 = load i16, i16* %2312, align 2, !tbaa !80
  %2314 = insertelement <128 x i16> %2310, i16 %2313, i32 41
  %2315 = extractelement <64 x i32> %2144, i32 42
  %2316 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %2315
  %2317 = load i16, i16* %2316, align 2, !tbaa !80
  %2318 = insertelement <128 x i16> %2314, i16 %2317, i32 42
  %2319 = extractelement <64 x i32> %2144, i32 43
  %2320 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %2319
  %2321 = load i16, i16* %2320, align 2, !tbaa !80
  %2322 = insertelement <128 x i16> %2318, i16 %2321, i32 43
  %2323 = extractelement <64 x i32> %2144, i32 44
  %2324 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %2323
  %2325 = load i16, i16* %2324, align 2, !tbaa !80
  %2326 = insertelement <128 x i16> %2322, i16 %2325, i32 44
  %2327 = extractelement <64 x i32> %2144, i32 45
  %2328 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %2327
  %2329 = load i16, i16* %2328, align 2, !tbaa !80
  %2330 = insertelement <128 x i16> %2326, i16 %2329, i32 45
  %2331 = extractelement <64 x i32> %2144, i32 46
  %2332 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %2331
  %2333 = load i16, i16* %2332, align 2, !tbaa !80
  %2334 = insertelement <128 x i16> %2330, i16 %2333, i32 46
  %2335 = extractelement <64 x i32> %2144, i32 47
  %2336 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %2335
  %2337 = load i16, i16* %2336, align 2, !tbaa !80
  %2338 = insertelement <128 x i16> %2334, i16 %2337, i32 47
  %2339 = extractelement <64 x i32> %2144, i32 48
  %2340 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %2339
  %2341 = load i16, i16* %2340, align 2, !tbaa !80
  %2342 = insertelement <128 x i16> %2338, i16 %2341, i32 48
  %2343 = extractelement <64 x i32> %2144, i32 49
  %2344 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %2343
  %2345 = load i16, i16* %2344, align 2, !tbaa !80
  %2346 = insertelement <128 x i16> %2342, i16 %2345, i32 49
  %2347 = extractelement <64 x i32> %2144, i32 50
  %2348 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %2347
  %2349 = load i16, i16* %2348, align 2, !tbaa !80
  %2350 = insertelement <128 x i16> %2346, i16 %2349, i32 50
  %2351 = extractelement <64 x i32> %2144, i32 51
  %2352 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %2351
  %2353 = load i16, i16* %2352, align 2, !tbaa !80
  %2354 = insertelement <128 x i16> %2350, i16 %2353, i32 51
  %2355 = extractelement <64 x i32> %2144, i32 52
  %2356 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %2355
  %2357 = load i16, i16* %2356, align 2, !tbaa !80
  %2358 = insertelement <128 x i16> %2354, i16 %2357, i32 52
  %2359 = extractelement <64 x i32> %2144, i32 53
  %2360 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %2359
  %2361 = load i16, i16* %2360, align 2, !tbaa !80
  %2362 = insertelement <128 x i16> %2358, i16 %2361, i32 53
  %2363 = extractelement <64 x i32> %2144, i32 54
  %2364 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %2363
  %2365 = load i16, i16* %2364, align 2, !tbaa !80
  %2366 = insertelement <128 x i16> %2362, i16 %2365, i32 54
  %2367 = extractelement <64 x i32> %2144, i32 55
  %2368 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %2367
  %2369 = load i16, i16* %2368, align 2, !tbaa !80
  %2370 = insertelement <128 x i16> %2366, i16 %2369, i32 55
  %2371 = extractelement <64 x i32> %2144, i32 56
  %2372 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %2371
  %2373 = load i16, i16* %2372, align 2, !tbaa !80
  %2374 = insertelement <128 x i16> %2370, i16 %2373, i32 56
  %2375 = extractelement <64 x i32> %2144, i32 57
  %2376 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %2375
  %2377 = load i16, i16* %2376, align 2, !tbaa !80
  %2378 = insertelement <128 x i16> %2374, i16 %2377, i32 57
  %2379 = extractelement <64 x i32> %2144, i32 58
  %2380 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %2379
  %2381 = load i16, i16* %2380, align 2, !tbaa !80
  %2382 = insertelement <128 x i16> %2378, i16 %2381, i32 58
  %2383 = extractelement <64 x i32> %2144, i32 59
  %2384 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %2383
  %2385 = load i16, i16* %2384, align 2, !tbaa !80
  %2386 = insertelement <128 x i16> %2382, i16 %2385, i32 59
  %2387 = extractelement <64 x i32> %2144, i32 60
  %2388 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %2387
  %2389 = load i16, i16* %2388, align 2, !tbaa !80
  %2390 = insertelement <128 x i16> %2386, i16 %2389, i32 60
  %2391 = extractelement <64 x i32> %2144, i32 61
  %2392 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %2391
  %2393 = load i16, i16* %2392, align 2, !tbaa !80
  %2394 = insertelement <128 x i16> %2390, i16 %2393, i32 61
  %2395 = extractelement <64 x i32> %2144, i32 62
  %2396 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %2395
  %2397 = load i16, i16* %2396, align 2, !tbaa !80
  %2398 = insertelement <128 x i16> %2394, i16 %2397, i32 62
  %2399 = extractelement <64 x i32> %2144, i32 63
  %2400 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %2399
  %2401 = load i16, i16* %2400, align 2, !tbaa !80
  %2402 = insertelement <128 x i16> %2398, i16 %2401, i32 63
  %2403 = extractelement <64 x i32> %2146, i32 0
  %2404 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %2403
  %2405 = load i16, i16* %2404, align 2, !tbaa !80
  %2406 = insertelement <128 x i16> %2402, i16 %2405, i32 64
  %2407 = extractelement <64 x i32> %2146, i32 1
  %2408 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %2407
  %2409 = load i16, i16* %2408, align 2, !tbaa !80
  %2410 = insertelement <128 x i16> %2406, i16 %2409, i32 65
  %2411 = extractelement <64 x i32> %2146, i32 2
  %2412 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %2411
  %2413 = load i16, i16* %2412, align 2, !tbaa !80
  %2414 = insertelement <128 x i16> %2410, i16 %2413, i32 66
  %2415 = extractelement <64 x i32> %2146, i32 3
  %2416 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %2415
  %2417 = load i16, i16* %2416, align 2, !tbaa !80
  %2418 = insertelement <128 x i16> %2414, i16 %2417, i32 67
  %2419 = extractelement <64 x i32> %2146, i32 4
  %2420 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %2419
  %2421 = load i16, i16* %2420, align 2, !tbaa !80
  %2422 = insertelement <128 x i16> %2418, i16 %2421, i32 68
  %2423 = extractelement <64 x i32> %2146, i32 5
  %2424 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %2423
  %2425 = load i16, i16* %2424, align 2, !tbaa !80
  %2426 = insertelement <128 x i16> %2422, i16 %2425, i32 69
  %2427 = extractelement <64 x i32> %2146, i32 6
  %2428 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %2427
  %2429 = load i16, i16* %2428, align 2, !tbaa !80
  %2430 = insertelement <128 x i16> %2426, i16 %2429, i32 70
  %2431 = extractelement <64 x i32> %2146, i32 7
  %2432 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %2431
  %2433 = load i16, i16* %2432, align 2, !tbaa !80
  %2434 = insertelement <128 x i16> %2430, i16 %2433, i32 71
  %2435 = extractelement <64 x i32> %2146, i32 8
  %2436 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %2435
  %2437 = load i16, i16* %2436, align 2, !tbaa !80
  %2438 = insertelement <128 x i16> %2434, i16 %2437, i32 72
  %2439 = extractelement <64 x i32> %2146, i32 9
  %2440 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %2439
  %2441 = load i16, i16* %2440, align 2, !tbaa !80
  %2442 = insertelement <128 x i16> %2438, i16 %2441, i32 73
  %2443 = extractelement <64 x i32> %2146, i32 10
  %2444 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %2443
  %2445 = load i16, i16* %2444, align 2, !tbaa !80
  %2446 = insertelement <128 x i16> %2442, i16 %2445, i32 74
  %2447 = extractelement <64 x i32> %2146, i32 11
  %2448 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %2447
  %2449 = load i16, i16* %2448, align 2, !tbaa !80
  %2450 = insertelement <128 x i16> %2446, i16 %2449, i32 75
  %2451 = extractelement <64 x i32> %2146, i32 12
  %2452 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %2451
  %2453 = load i16, i16* %2452, align 2, !tbaa !80
  %2454 = insertelement <128 x i16> %2450, i16 %2453, i32 76
  %2455 = extractelement <64 x i32> %2146, i32 13
  %2456 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %2455
  %2457 = load i16, i16* %2456, align 2, !tbaa !80
  %2458 = insertelement <128 x i16> %2454, i16 %2457, i32 77
  %2459 = extractelement <64 x i32> %2146, i32 14
  %2460 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %2459
  %2461 = load i16, i16* %2460, align 2, !tbaa !80
  %2462 = insertelement <128 x i16> %2458, i16 %2461, i32 78
  %2463 = extractelement <64 x i32> %2146, i32 15
  %2464 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %2463
  %2465 = load i16, i16* %2464, align 2, !tbaa !80
  %2466 = insertelement <128 x i16> %2462, i16 %2465, i32 79
  %2467 = extractelement <64 x i32> %2146, i32 16
  %2468 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %2467
  %2469 = load i16, i16* %2468, align 2, !tbaa !80
  %2470 = insertelement <128 x i16> %2466, i16 %2469, i32 80
  %2471 = extractelement <64 x i32> %2146, i32 17
  %2472 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %2471
  %2473 = load i16, i16* %2472, align 2, !tbaa !80
  %2474 = insertelement <128 x i16> %2470, i16 %2473, i32 81
  %2475 = extractelement <64 x i32> %2146, i32 18
  %2476 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %2475
  %2477 = load i16, i16* %2476, align 2, !tbaa !80
  %2478 = insertelement <128 x i16> %2474, i16 %2477, i32 82
  %2479 = extractelement <64 x i32> %2146, i32 19
  %2480 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %2479
  %2481 = load i16, i16* %2480, align 2, !tbaa !80
  %2482 = insertelement <128 x i16> %2478, i16 %2481, i32 83
  %2483 = extractelement <64 x i32> %2146, i32 20
  %2484 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %2483
  %2485 = load i16, i16* %2484, align 2, !tbaa !80
  %2486 = insertelement <128 x i16> %2482, i16 %2485, i32 84
  %2487 = extractelement <64 x i32> %2146, i32 21
  %2488 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %2487
  %2489 = load i16, i16* %2488, align 2, !tbaa !80
  %2490 = insertelement <128 x i16> %2486, i16 %2489, i32 85
  %2491 = extractelement <64 x i32> %2146, i32 22
  %2492 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %2491
  %2493 = load i16, i16* %2492, align 2, !tbaa !80
  %2494 = insertelement <128 x i16> %2490, i16 %2493, i32 86
  %2495 = extractelement <64 x i32> %2146, i32 23
  %2496 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %2495
  %2497 = load i16, i16* %2496, align 2, !tbaa !80
  %2498 = insertelement <128 x i16> %2494, i16 %2497, i32 87
  %2499 = extractelement <64 x i32> %2146, i32 24
  %2500 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %2499
  %2501 = load i16, i16* %2500, align 2, !tbaa !80
  %2502 = insertelement <128 x i16> %2498, i16 %2501, i32 88
  %2503 = extractelement <64 x i32> %2146, i32 25
  %2504 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %2503
  %2505 = load i16, i16* %2504, align 2, !tbaa !80
  %2506 = insertelement <128 x i16> %2502, i16 %2505, i32 89
  %2507 = extractelement <64 x i32> %2146, i32 26
  %2508 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %2507
  %2509 = load i16, i16* %2508, align 2, !tbaa !80
  %2510 = insertelement <128 x i16> %2506, i16 %2509, i32 90
  %2511 = extractelement <64 x i32> %2146, i32 27
  %2512 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %2511
  %2513 = load i16, i16* %2512, align 2, !tbaa !80
  %2514 = insertelement <128 x i16> %2510, i16 %2513, i32 91
  %2515 = extractelement <64 x i32> %2146, i32 28
  %2516 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %2515
  %2517 = load i16, i16* %2516, align 2, !tbaa !80
  %2518 = insertelement <128 x i16> %2514, i16 %2517, i32 92
  %2519 = extractelement <64 x i32> %2146, i32 29
  %2520 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %2519
  %2521 = load i16, i16* %2520, align 2, !tbaa !80
  %2522 = insertelement <128 x i16> %2518, i16 %2521, i32 93
  %2523 = extractelement <64 x i32> %2146, i32 30
  %2524 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %2523
  %2525 = load i16, i16* %2524, align 2, !tbaa !80
  %2526 = insertelement <128 x i16> %2522, i16 %2525, i32 94
  %2527 = extractelement <64 x i32> %2146, i32 31
  %2528 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %2527
  %2529 = load i16, i16* %2528, align 2, !tbaa !80
  %2530 = insertelement <128 x i16> %2526, i16 %2529, i32 95
  %2531 = extractelement <64 x i32> %2146, i32 32
  %2532 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %2531
  %2533 = load i16, i16* %2532, align 2, !tbaa !80
  %2534 = insertelement <128 x i16> %2530, i16 %2533, i32 96
  %2535 = extractelement <64 x i32> %2146, i32 33
  %2536 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %2535
  %2537 = load i16, i16* %2536, align 2, !tbaa !80
  %2538 = insertelement <128 x i16> %2534, i16 %2537, i32 97
  %2539 = extractelement <64 x i32> %2146, i32 34
  %2540 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %2539
  %2541 = load i16, i16* %2540, align 2, !tbaa !80
  %2542 = insertelement <128 x i16> %2538, i16 %2541, i32 98
  %2543 = extractelement <64 x i32> %2146, i32 35
  %2544 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %2543
  %2545 = load i16, i16* %2544, align 2, !tbaa !80
  %2546 = insertelement <128 x i16> %2542, i16 %2545, i32 99
  %2547 = extractelement <64 x i32> %2146, i32 36
  %2548 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %2547
  %2549 = load i16, i16* %2548, align 2, !tbaa !80
  %2550 = insertelement <128 x i16> %2546, i16 %2549, i32 100
  %2551 = extractelement <64 x i32> %2146, i32 37
  %2552 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %2551
  %2553 = load i16, i16* %2552, align 2, !tbaa !80
  %2554 = insertelement <128 x i16> %2550, i16 %2553, i32 101
  %2555 = extractelement <64 x i32> %2146, i32 38
  %2556 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %2555
  %2557 = load i16, i16* %2556, align 2, !tbaa !80
  %2558 = insertelement <128 x i16> %2554, i16 %2557, i32 102
  %2559 = extractelement <64 x i32> %2146, i32 39
  %2560 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %2559
  %2561 = load i16, i16* %2560, align 2, !tbaa !80
  %2562 = insertelement <128 x i16> %2558, i16 %2561, i32 103
  %2563 = extractelement <64 x i32> %2146, i32 40
  %2564 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %2563
  %2565 = load i16, i16* %2564, align 2, !tbaa !80
  %2566 = insertelement <128 x i16> %2562, i16 %2565, i32 104
  %2567 = extractelement <64 x i32> %2146, i32 41
  %2568 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %2567
  %2569 = load i16, i16* %2568, align 2, !tbaa !80
  %2570 = insertelement <128 x i16> %2566, i16 %2569, i32 105
  %2571 = extractelement <64 x i32> %2146, i32 42
  %2572 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %2571
  %2573 = load i16, i16* %2572, align 2, !tbaa !80
  %2574 = insertelement <128 x i16> %2570, i16 %2573, i32 106
  %2575 = extractelement <64 x i32> %2146, i32 43
  %2576 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %2575
  %2577 = load i16, i16* %2576, align 2, !tbaa !80
  %2578 = insertelement <128 x i16> %2574, i16 %2577, i32 107
  %2579 = extractelement <64 x i32> %2146, i32 44
  %2580 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %2579
  %2581 = load i16, i16* %2580, align 2, !tbaa !80
  %2582 = insertelement <128 x i16> %2578, i16 %2581, i32 108
  %2583 = extractelement <64 x i32> %2146, i32 45
  %2584 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %2583
  %2585 = load i16, i16* %2584, align 2, !tbaa !80
  %2586 = insertelement <128 x i16> %2582, i16 %2585, i32 109
  %2587 = extractelement <64 x i32> %2146, i32 46
  %2588 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %2587
  %2589 = load i16, i16* %2588, align 2, !tbaa !80
  %2590 = insertelement <128 x i16> %2586, i16 %2589, i32 110
  %2591 = extractelement <64 x i32> %2146, i32 47
  %2592 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %2591
  %2593 = load i16, i16* %2592, align 2, !tbaa !80
  %2594 = insertelement <128 x i16> %2590, i16 %2593, i32 111
  %2595 = extractelement <64 x i32> %2146, i32 48
  %2596 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %2595
  %2597 = load i16, i16* %2596, align 2, !tbaa !80
  %2598 = insertelement <128 x i16> %2594, i16 %2597, i32 112
  %2599 = extractelement <64 x i32> %2146, i32 49
  %2600 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %2599
  %2601 = load i16, i16* %2600, align 2, !tbaa !80
  %2602 = insertelement <128 x i16> %2598, i16 %2601, i32 113
  %2603 = extractelement <64 x i32> %2146, i32 50
  %2604 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %2603
  %2605 = load i16, i16* %2604, align 2, !tbaa !80
  %2606 = insertelement <128 x i16> %2602, i16 %2605, i32 114
  %2607 = extractelement <64 x i32> %2146, i32 51
  %2608 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %2607
  %2609 = load i16, i16* %2608, align 2, !tbaa !80
  %2610 = insertelement <128 x i16> %2606, i16 %2609, i32 115
  %2611 = extractelement <64 x i32> %2146, i32 52
  %2612 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %2611
  %2613 = load i16, i16* %2612, align 2, !tbaa !80
  %2614 = insertelement <128 x i16> %2610, i16 %2613, i32 116
  %2615 = extractelement <64 x i32> %2146, i32 53
  %2616 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %2615
  %2617 = load i16, i16* %2616, align 2, !tbaa !80
  %2618 = insertelement <128 x i16> %2614, i16 %2617, i32 117
  %2619 = extractelement <64 x i32> %2146, i32 54
  %2620 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %2619
  %2621 = load i16, i16* %2620, align 2, !tbaa !80
  %2622 = insertelement <128 x i16> %2618, i16 %2621, i32 118
  %2623 = extractelement <64 x i32> %2146, i32 55
  %2624 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %2623
  %2625 = load i16, i16* %2624, align 2, !tbaa !80
  %2626 = insertelement <128 x i16> %2622, i16 %2625, i32 119
  %2627 = extractelement <64 x i32> %2146, i32 56
  %2628 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %2627
  %2629 = load i16, i16* %2628, align 2, !tbaa !80
  %2630 = insertelement <128 x i16> %2626, i16 %2629, i32 120
  %2631 = extractelement <64 x i32> %2146, i32 57
  %2632 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %2631
  %2633 = load i16, i16* %2632, align 2, !tbaa !80
  %2634 = insertelement <128 x i16> %2630, i16 %2633, i32 121
  %2635 = extractelement <64 x i32> %2146, i32 58
  %2636 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %2635
  %2637 = load i16, i16* %2636, align 2, !tbaa !80
  %2638 = insertelement <128 x i16> %2634, i16 %2637, i32 122
  %2639 = extractelement <64 x i32> %2146, i32 59
  %2640 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %2639
  %2641 = load i16, i16* %2640, align 2, !tbaa !80
  %2642 = insertelement <128 x i16> %2638, i16 %2641, i32 123
  %2643 = extractelement <64 x i32> %2146, i32 60
  %2644 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %2643
  %2645 = load i16, i16* %2644, align 2, !tbaa !80
  %2646 = insertelement <128 x i16> %2642, i16 %2645, i32 124
  %2647 = extractelement <64 x i32> %2146, i32 61
  %2648 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %2647
  %2649 = load i16, i16* %2648, align 2, !tbaa !80
  %2650 = insertelement <128 x i16> %2646, i16 %2649, i32 125
  %2651 = extractelement <64 x i32> %2146, i32 62
  %2652 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %2651
  %2653 = load i16, i16* %2652, align 2, !tbaa !80
  %2654 = insertelement <128 x i16> %2650, i16 %2653, i32 126
  %2655 = extractelement <64 x i32> %2146, i32 63
  %2656 = getelementptr inbounds [384 x i16], [384 x i16]* %rows1, i32 0, i32 %2655
  %2657 = load i16, i16* %2656, align 2, !tbaa !80
  %2658 = insertelement <128 x i16> %2654, i16 %2657, i32 127
  %2659 = bitcast <128 x i16> %2658 to <64 x i32>
  %2660 = tail call <64 x i32> @llvm.hexagon.V6.vaddh.dv.128B(<64 x i32> %2122, <64 x i32> %2659) #9
  %2661 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %2660) #9
  %2662 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %2660) #9
  %2663 = tail call <32 x i32> @llvm.hexagon.V6.vpackob.128B(<32 x i32> %2661, <32 x i32> %2662) #9
  %2664 = add nsw i32 %output.s0.x.x, %t95
  %2665 = shl nsw i32 %2664, 7
  %2666 = getelementptr inbounds i8, i8* %3, i32 %2665
  %2667 = bitcast i8* %2666 to <32 x i32>*
  store <32 x i32> %2663, <32 x i32>* %2667, align 1, !tbaa !82
  %2668 = add nuw nsw i32 %output.s0.x.x, 1
  %2669 = icmp eq i32 %2668, %8
  br i1 %2669, label %"end for output.s0.x.x", label %"for output.s0.x.x"
}

; Function Attrs: nounwind
define i32 @gaussian5x5_hvx128_argv(i8** nocapture readonly) local_unnamed_addr #9 {
entry:
  %1 = bitcast i8** %0 to %struct.halide_buffer_t**
  %2 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %1, align 4
  %3 = getelementptr i8*, i8** %0, i32 1
  %4 = bitcast i8** %3 to %struct.halide_buffer_t**
  %5 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %4, align 4
  %6 = tail call i32 @gaussian5x5_hvx128(%struct.halide_buffer_t* %2, %struct.halide_buffer_t* %5) #13
  ret i32 0
}

; Function Attrs: norecurse nounwind readnone
define nonnull %struct.halide_filter_metadata_t* @gaussian5x5_hvx128_metadata() local_unnamed_addr #10 {
entry:
  ret %struct.halide_filter_metadata_t* @gaussian5x5_hvx128_metadata_storage
}

attributes #0 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { norecurse nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind }
attributes #5 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readnone speculatable }
attributes #7 = { nounwind readnone }
attributes #8 = { nounwind "reciprocal-estimates"="none" }
attributes #9 = { nounwind }
attributes #10 = { norecurse nounwind readnone }
attributes #11 = { nobuiltin nounwind }
attributes #12 = { nobuiltin }
attributes #13 = { noinline }

!llvm.module.flags = !{!0, !1, !2, !3, !4, !5}
!llvm.ident = !{!6, !6, !6, !6, !6, !6, !6, !6, !6, !6, !6, !6, !6, !6, !6, !6, !6, !6}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 1}
!2 = !{i32 2, !"halide_use_soft_float_abi", i32 0}
!3 = !{i32 2, !"halide_mcpu", !"hexagonv60"}
!4 = !{i32 2, !"halide_mattrs", !"+hvx-length128b,+long-calls"}
!5 = !{i32 2, !"halide_per_instruction_fast_math_flags", i32 0}
!6 = !{!"Clang $LLVM_VERSION_MAJOR.$LLVM_VERSION_MINOR (based on LLVM 7.0.0)"}
!7 = !{!8, !8, i64 0}
!8 = !{!"omnipotent char", !9, i64 0}
!9 = !{!"Simple C++ TBAA"}
!10 = !{!11, !11, i64 0}
!11 = !{!"int", !8, i64 0}
!12 = !{!13, !13, i64 0}
!13 = !{!"any pointer", !8, i64 0}
!14 = distinct !{!14, !15}
!15 = !{!"llvm.loop.unroll.disable"}
!16 = distinct !{!16, !15}
!17 = !{!18, !18, i64 0}
!18 = !{!"bool", !8, i64 0}
!19 = !{i8 0, i8 2}
!20 = !{!21, !21, i64 0}
!21 = !{!"double", !8, i64 0}
!22 = !{!23, !23, i64 0}
!23 = !{!"long long", !8, i64 0}
!24 = !{!25, !8, i64 0}
!25 = !{!"_ZTS13halide_type_t", !8, i64 0, !8, i64 1, !26, i64 2}
!26 = !{!"short", !8, i64 0}
!27 = !{!25, !8, i64 1}
!28 = !{!25, !26, i64 2}
!29 = !{!30, !23, i64 0}
!30 = !{!"_ZTS15halide_buffer_t", !23, i64 0, !13, i64 8, !13, i64 12, !23, i64 16, !23, i64 24, !23, i64 32, !23, i64 40, !25, i64 48, !11, i64 52, !13, i64 56, !13, i64 60}
!31 = !{!30, !13, i64 8}
!32 = !{!30, !13, i64 12}
!33 = !{!30, !23, i64 16}
!34 = !{!30, !11, i64 52}
!35 = !{!30, !13, i64 56}
!36 = !{!37, !11, i64 0}
!37 = !{!"_ZTS18halide_dimension_t", !11, i64 0, !11, i64 4, !11, i64 8, !11, i64 12}
!38 = !{!37, !11, i64 4}
!39 = !{!37, !11, i64 8}
!40 = !{!41, !23, i64 0}
!41 = !{!"_ZTSN6Halide7Runtime8Internal11device_copyE", !23, i64 0, !23, i64 8, !23, i64 16, !8, i64 24, !8, i64 152, !8, i64 280, !23, i64 408}
!42 = !{!41, !23, i64 8}
!43 = !{!41, !23, i64 408}
!44 = !{!41, !23, i64 16}
!45 = !{i64 0, i64 8, !22, i64 8, i64 8, !22, i64 16, i64 8, !22, i64 24, i64 128, !7, i64 152, i64 128, !7, i64 280, i64 128, !7, i64 408, i64 8, !22}
!46 = !{!47, !13, i64 60}
!47 = !{!"_ZTS25halide_device_interface_t", !13, i64 0, !13, i64 4, !13, i64 8, !13, i64 12, !13, i64 16, !13, i64 20, !13, i64 24, !13, i64 28, !13, i64 32, !13, i64 36, !13, i64 40, !13, i64 44, !13, i64 48, !13, i64 52, !13, i64 56, !13, i64 60}
!48 = !{!49, !13, i64 24}
!49 = !{!"_ZTS30halide_device_interface_impl_t", !13, i64 0, !13, i64 4, !13, i64 8, !13, i64 12, !13, i64 16, !13, i64 20, !13, i64 24, !13, i64 28, !13, i64 32, !13, i64 36, !13, i64 40, !13, i64 44, !13, i64 48, !13, i64 52, !13, i64 56, !13, i64 60}
!50 = !{!49, !13, i64 20}
!51 = !{!49, !13, i64 28}
!52 = !{!49, !13, i64 0}
!53 = !{!49, !13, i64 8}
!54 = !{!49, !13, i64 4}
!55 = !{!49, !13, i64 16}
!56 = !{!49, !13, i64 12}
!57 = !{!49, !13, i64 32}
!58 = !{!49, !13, i64 36}
!59 = !{!49, !13, i64 56}
!60 = !{!49, !13, i64 60}
!61 = !{!49, !13, i64 40}
!62 = !{!49, !13, i64 44}
!63 = !{!49, !13, i64 48}
!64 = !{!49, !13, i64 52}
!65 = !{i32 22, i32 33}
!66 = !{!67, !11, i64 60}
!67 = !{!"_ZTS8buffer_t", !23, i64 0, !13, i64 8, !8, i64 12, !8, i64 28, !8, i64 44, !11, i64 60, !18, i64 64, !18, i64 65, !8, i64 66}
!68 = !{!67, !13, i64 8}
!69 = !{!67, !23, i64 0}
!70 = !{!71, !23, i64 0}
!71 = !{!"_ZTSN6Halide7Runtime8Internal15old_dev_wrapperE", !23, i64 0, !13, i64 8}
!72 = !{!71, !13, i64 8}
!73 = !{!67, !18, i64 64}
!74 = !{!67, !18, i64 65}
!75 = !{!"branch_weights", i32 1073741824, i32 0}
!76 = !{i32 2204}
!77 = !{!78, !78, i64 0}
!78 = !{!"input", !79, i64 0}
!79 = !{!"Halide buffer"}
!80 = !{!81, !81, i64 0}
!81 = !{!"rows", !79, i64 0}
!82 = !{!83, !83, i64 0}
!83 = !{!"output", !79, i64 0}
Module.compile(): object_name bin/gaussian5x5_hvx128.o
emit_file.Compiling to native code...
Target triple: hexagon-unknown--elf
Cloning module gaussian5x5_hvx128
Module.compile(): assembly_name bin/gaussian5x5_hvx128.s
emit_file.Compiling to native code...
Target triple: hexagon-unknown--elf
Cloning module gaussian5x5_hvx128
Module.compile(): bitcode_name bin/gaussian5x5_hvx128.bc
Module.compile(): c_header_name bin/gaussian5x5_hvx128.h
ar: creating bin/gaussian5x5_filters.a
hexagon-clang++: warning: treating 'c' input as 'c++' when in C++ mode, this behavior is deprecated [-Wdeprecated]
hexagon-clang++: warning: argument unused during compilation: '-L/home/maaz/Qualcomm/Hexagon_SDK/3.5.1/tools/HALIDE_Tools/2.2.03/Halide/lib' [-Wunused-command-line-argument]

Running simulator with --timing flag...
hexagon-sim INFO: The rev_id used in the simulation is 0x00004066 (v66a_512)
AppReported (HVX64B-mode): Image 1920x1080 - gaussian5x5(64B): 439506206 cycles (211.9532 cycles/pixel)
