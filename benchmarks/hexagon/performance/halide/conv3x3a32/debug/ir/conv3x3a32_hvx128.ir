+ ./tmp/conv3x3a32_generator -o tmp -e o,h,assembly,bitcode -g conv3x3a32 -f conv3x3a32_hvx128 target=hexagon-32-noos-no_bounds_query-no_asserts-hvx_128
assert((reinterpret(uint64, output.buffer) != (uint64)0), halide_error_buffer_argument_is_null("output"))
assert((reinterpret(uint64, mask.buffer) != (uint64)0), halide_error_buffer_argument_is_null("mask"))
assert((reinterpret(uint64, input.buffer) != (uint64)0), halide_error_buffer_argument_is_null("input"))
let input = _halide_buffer_get_host(input.buffer)
let input.min.0 = _halide_buffer_get_min(input.buffer, 0)
let input.stride.0 = _halide_buffer_get_stride(input.buffer, 0)
let input.min.1 = _halide_buffer_get_min(input.buffer, 1)
let input.stride.1 = _halide_buffer_get_stride(input.buffer, 1)
let mask = _halide_buffer_get_host(mask.buffer)
let mask.min.0 = _halide_buffer_get_min(mask.buffer, 0)
let mask.stride.0 = _halide_buffer_get_stride(mask.buffer, 0)
let mask.min.1 = _halide_buffer_get_min(mask.buffer, 1)
let mask.stride.1 = _halide_buffer_get_stride(mask.buffer, 1)
let output = _halide_buffer_get_host(output.buffer)
let output.min.0 = _halide_buffer_get_min(output.buffer, 0)
let output.extent.0 = _halide_buffer_get_extent(output.buffer, 0)
let output.stride.0 = _halide_buffer_get_stride(output.buffer, 0)
let output.min.1 = _halide_buffer_get_min(output.buffer, 1)
let output.extent.1 = _halide_buffer_get_extent(output.buffer, 1)
let output.stride.1 = _halide_buffer_get_stride(output.buffer, 1)
assert((input.stride.0 == 1), 0)
assert((input.min.0 == 0), 0)
assert(((input.stride.1 % 128) == 0), 0)
assert((input.min.1 == 0), 0)
assert((mask.stride.0 == 1), 0)
assert((output.stride.0 == 1), 0)
assert((output.min.0 == 0), 0)
assert(((output.stride.1 % 128) == 0), 0)
assert((output.min.1 == 0), 0)
let output.s0.y.yo.loop_extent.s = ((output.extent.1 + -1)/(output.extent.1/2))
produce output {
  let t49 = (output.extent.1 - (output.extent.1/2))
  for<Hexagon> (output.s0.__outermost, 0, 1) {
    let t66.s = (2 - (mask.min.1*mask.stride.1))
    let t64.s = (1 - (mask.min.1*mask.stride.1))
    let t62.s = (0 - (mask.min.1*mask.stride.1))
    parallel (output.s0.y.yo, 0, (output.s0.y.yo.loop_extent.s + 1)) {
      let output.s0.y.y.base = min(((output.extent.1/2)*output.s0.y.yo), t49)
      for (output.s0.y.y.y, 0, ((output.extent.1 + 6)/8)) {
        for (output.s0.x.x, 0, ((output.extent.0 + 127)/128)) {
          output[ramp(((output.s0.x.x*128) + (((output.s0.y.y.y*4) + output.s0.y.y.base)*output.stride.1)), 1, 128) aligned(128, 0)] = (let t99 = ((output.s0.x.x*128) + (((output.s0.y.y.y*4) + output.s0.y.y.base)*input.stride.1)) in halide.hexagon.trunc_satub_shr.vh.uh(halide.hexagon.deinterleave.vh(((((((((halide.hexagon.trunc.vw(halide.hexagon.mpy.vh.h(halide.hexagon.unpack.vub(input[ramp(((t99 - input.stride.1) + -1), 1, 128) aligned(128, 127)]), int16(mask[(t62.s - mask.min.0)]))) + halide.hexagon.trunc.vw(halide.hexagon.mpy.vh.h(halide.hexagon.unpack.vub(input[ramp((t99 + -1), 1, 128) aligned(128, 127)]), int16(mask[(((1 - mask.min.1)*mask.stride.1) - mask.min.0)])))) + halide.hexagon.trunc.vw(halide.hexagon.mpy.vh.h(halide.hexagon.unpack.vub(input[ramp(((input.stride.1 + t99) + -1), 1, 128) aligned(128, 127)]), int16(mask[(((2 - mask.min.1)*mask.stride.1) - mask.min.0)])))) + halide.hexagon.trunc.vw(halide.hexagon.mpy.vh.h(halide.hexagon.unpack.vub(input[ramp((t99 - input.stride.1), 1, 128) aligned(128, 0)]), int16(mask[(t64.s - mask.min.0)])))) + halide.hexagon.trunc.vw(halide.hexagon.mpy.vh.h(halide.hexagon.unpack.vub(input[ramp(t99, 1, 128) aligned(128, 0)]), int16(mask[((((1 - mask.min.1)*mask.stride.1) - mask.min.0) + 1)])))) + halide.hexagon.trunc.vw(halide.hexagon.mpy.vh.h(halide.hexagon.unpack.vub(input[ramp((input.stride.1 + t99), 1, 128) aligned(128, 0)]), int16(mask[((((2 - mask.min.1)*mask.stride.1) - mask.min.0) + 1)])))) + halide.hexagon.trunc.vw(halide.hexagon.mpy.vh.h(halide.hexagon.unpack.vub(input[ramp(((t99 - input.stride.1) + 1), 1, 128) aligned(128, 1)]), int16(mask[(t66.s - mask.min.0)])))) + halide.hexagon.trunc.vw(halide.hexagon.mpy.vh.h(halide.hexagon.unpack.vub(input[ramp((t99 + 1), 1, 128) aligned(128, 1)]), int16(mask[((((1 - mask.min.1)*mask.stride.1) - mask.min.0) + 2)])))) + halide.hexagon.trunc.vw(halide.hexagon.mpy.vh.h(halide.hexagon.unpack.vub(input[ramp(((input.stride.1 + t99) + 1), 1, 128) aligned(128, 1)]), int16(mask[((((2 - mask.min.1)*mask.stride.1) - mask.min.0) + 2)]))))), (int16)4))
          output[ramp(((output.s0.x.x*128) + ((((output.s0.y.y.y*4) + output.s0.y.y.base) + 1)*output.stride.1)), 1, 128) aligned(128, 0)] = (let t102 = ((output.s0.x.x*128) + ((((output.s0.y.y.y*4) + output.s0.y.y.base) + 1)*input.stride.1)) in halide.hexagon.trunc_satub_shr.vh.uh(halide.hexagon.deinterleave.vh(((((((((halide.hexagon.trunc.vw(halide.hexagon.mpy.vh.h(halide.hexagon.unpack.vub(input[ramp(((t102 - input.stride.1) + -1), 1, 128) aligned(128, 127)]), int16(mask[(t62.s - mask.min.0)]))) + halide.hexagon.trunc.vw(halide.hexagon.mpy.vh.h(halide.hexagon.unpack.vub(input[ramp((t102 + -1), 1, 128) aligned(128, 127)]), int16(mask[(((1 - mask.min.1)*mask.stride.1) - mask.min.0)])))) + halide.hexagon.trunc.vw(halide.hexagon.mpy.vh.h(halide.hexagon.unpack.vub(input[ramp(((input.stride.1 + t102) + -1), 1, 128) aligned(128, 127)]), int16(mask[(((2 - mask.min.1)*mask.stride.1) - mask.min.0)])))) + halide.hexagon.trunc.vw(halide.hexagon.mpy.vh.h(halide.hexagon.unpack.vub(input[ramp((t102 - input.stride.1), 1, 128) aligned(128, 0)]), int16(mask[(t64.s - mask.min.0)])))) + halide.hexagon.trunc.vw(halide.hexagon.mpy.vh.h(halide.hexagon.unpack.vub(input[ramp(t102, 1, 128) aligned(128, 0)]), int16(mask[((((1 - mask.min.1)*mask.stride.1) - mask.min.0) + 1)])))) + halide.hexagon.trunc.vw(halide.hexagon.mpy.vh.h(halide.hexagon.unpack.vub(input[ramp((input.stride.1 + t102), 1, 128) aligned(128, 0)]), int16(mask[((((2 - mask.min.1)*mask.stride.1) - mask.min.0) + 1)])))) + halide.hexagon.trunc.vw(halide.hexagon.mpy.vh.h(halide.hexagon.unpack.vub(input[ramp(((t102 - input.stride.1) + 1), 1, 128) aligned(128, 1)]), int16(mask[(t66.s - mask.min.0)])))) + halide.hexagon.trunc.vw(halide.hexagon.mpy.vh.h(halide.hexagon.unpack.vub(input[ramp((t102 + 1), 1, 128) aligned(128, 1)]), int16(mask[((((1 - mask.min.1)*mask.stride.1) - mask.min.0) + 2)])))) + halide.hexagon.trunc.vw(halide.hexagon.mpy.vh.h(halide.hexagon.unpack.vub(input[ramp(((input.stride.1 + t102) + 1), 1, 128) aligned(128, 1)]), int16(mask[((((2 - mask.min.1)*mask.stride.1) - mask.min.0) + 2)]))))), (int16)4))
          output[ramp(((output.s0.x.x*128) + ((((output.s0.y.y.y*4) + output.s0.y.y.base) + 2)*output.stride.1)), 1, 128) aligned(128, 0)] = (let t105 = ((output.s0.x.x*128) + ((((output.s0.y.y.y*4) + output.s0.y.y.base) + 2)*input.stride.1)) in halide.hexagon.trunc_satub_shr.vh.uh(halide.hexagon.deinterleave.vh(((((((((halide.hexagon.trunc.vw(halide.hexagon.mpy.vh.h(halide.hexagon.unpack.vub(input[ramp(((t105 - input.stride.1) + -1), 1, 128) aligned(128, 127)]), int16(mask[(t62.s - mask.min.0)]))) + halide.hexagon.trunc.vw(halide.hexagon.mpy.vh.h(halide.hexagon.unpack.vub(input[ramp((t105 + -1), 1, 128) aligned(128, 127)]), int16(mask[(((1 - mask.min.1)*mask.stride.1) - mask.min.0)])))) + halide.hexagon.trunc.vw(halide.hexagon.mpy.vh.h(halide.hexagon.unpack.vub(input[ramp(((input.stride.1 + t105) + -1), 1, 128) aligned(128, 127)]), int16(mask[(((2 - mask.min.1)*mask.stride.1) - mask.min.0)])))) + halide.hexagon.trunc.vw(halide.hexagon.mpy.vh.h(halide.hexagon.unpack.vub(input[ramp((t105 - input.stride.1), 1, 128) aligned(128, 0)]), int16(mask[(t64.s - mask.min.0)])))) + halide.hexagon.trunc.vw(halide.hexagon.mpy.vh.h(halide.hexagon.unpack.vub(input[ramp(t105, 1, 128) aligned(128, 0)]), int16(mask[((((1 - mask.min.1)*mask.stride.1) - mask.min.0) + 1)])))) + halide.hexagon.trunc.vw(halide.hexagon.mpy.vh.h(halide.hexagon.unpack.vub(input[ramp((input.stride.1 + t105), 1, 128) aligned(128, 0)]), int16(mask[((((2 - mask.min.1)*mask.stride.1) - mask.min.0) + 1)])))) + halide.hexagon.trunc.vw(halide.hexagon.mpy.vh.h(halide.hexagon.unpack.vub(input[ramp(((t105 - input.stride.1) + 1), 1, 128) aligned(128, 1)]), int16(mask[(t66.s - mask.min.0)])))) + halide.hexagon.trunc.vw(halide.hexagon.mpy.vh.h(halide.hexagon.unpack.vub(input[ramp((t105 + 1), 1, 128) aligned(128, 1)]), int16(mask[((((1 - mask.min.1)*mask.stride.1) - mask.min.0) + 2)])))) + halide.hexagon.trunc.vw(halide.hexagon.mpy.vh.h(halide.hexagon.unpack.vub(input[ramp(((input.stride.1 + t105) + 1), 1, 128) aligned(128, 1)]), int16(mask[((((2 - mask.min.1)*mask.stride.1) - mask.min.0) + 2)]))))), (int16)4))
          output[ramp(((output.s0.x.x*128) + ((((output.s0.y.y.y*4) + output.s0.y.y.base) + 3)*output.stride.1)), 1, 128) aligned(128, 0)] = (let t108 = ((output.s0.x.x*128) + ((((output.s0.y.y.y*4) + output.s0.y.y.base) + 3)*input.stride.1)) in halide.hexagon.trunc_satub_shr.vh.uh(halide.hexagon.deinterleave.vh(((((((((halide.hexagon.trunc.vw(halide.hexagon.mpy.vh.h(halide.hexagon.unpack.vub(input[ramp(((t108 - input.stride.1) + -1), 1, 128) aligned(128, 127)]), int16(mask[(t62.s - mask.min.0)]))) + halide.hexagon.trunc.vw(halide.hexagon.mpy.vh.h(halide.hexagon.unpack.vub(input[ramp((t108 + -1), 1, 128) aligned(128, 127)]), int16(mask[(((1 - mask.min.1)*mask.stride.1) - mask.min.0)])))) + halide.hexagon.trunc.vw(halide.hexagon.mpy.vh.h(halide.hexagon.unpack.vub(input[ramp(((input.stride.1 + t108) + -1), 1, 128) aligned(128, 127)]), int16(mask[(((2 - mask.min.1)*mask.stride.1) - mask.min.0)])))) + halide.hexagon.trunc.vw(halide.hexagon.mpy.vh.h(halide.hexagon.unpack.vub(input[ramp((t108 - input.stride.1), 1, 128) aligned(128, 0)]), int16(mask[(t64.s - mask.min.0)])))) + halide.hexagon.trunc.vw(halide.hexagon.mpy.vh.h(halide.hexagon.unpack.vub(input[ramp(t108, 1, 128) aligned(128, 0)]), int16(mask[((((1 - mask.min.1)*mask.stride.1) - mask.min.0) + 1)])))) + halide.hexagon.trunc.vw(halide.hexagon.mpy.vh.h(halide.hexagon.unpack.vub(input[ramp((input.stride.1 + t108), 1, 128) aligned(128, 0)]), int16(mask[((((2 - mask.min.1)*mask.stride.1) - mask.min.0) + 1)])))) + halide.hexagon.trunc.vw(halide.hexagon.mpy.vh.h(halide.hexagon.unpack.vub(input[ramp(((t108 - input.stride.1) + 1), 1, 128) aligned(128, 1)]), int16(mask[(t66.s - mask.min.0)])))) + halide.hexagon.trunc.vw(halide.hexagon.mpy.vh.h(halide.hexagon.unpack.vub(input[ramp((t108 + 1), 1, 128) aligned(128, 1)]), int16(mask[((((1 - mask.min.1)*mask.stride.1) - mask.min.0) + 2)])))) + halide.hexagon.trunc.vw(halide.hexagon.mpy.vh.h(halide.hexagon.unpack.vub(input[ramp(((input.stride.1 + t108) + 1), 1, 128) aligned(128, 1)]), int16(mask[((((2 - mask.min.1)*mask.stride.1) - mask.min.0) + 2)]))))), (int16)4))
        }
      }
    }
  }
}

