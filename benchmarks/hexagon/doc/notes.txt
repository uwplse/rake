1. Multiply with 2-wide reduction (Vec * Sca and Vec * Vec): vdmpy
2. Multiply with 3-wide reduction (Vec * Sca) : vtmpy (When implementing convolution, produces output that needs to be interleaved)
3. Multiply with 4-wide reduction (Vec * Sca and Vec * Vec) : vrmpy (Single resource)

a*b --> mpy
a1*b1 + a2*b2 --> vdmpy
a1*b1 + a2*b2 + a3 --> vtmpy
a1*b1 + a2*b2 + a3*b3 --> vdmpy , mpy --> add
a1*b1 + a2*b2 + a3*b3 + a4*b4 --> vrmpy
a1*b1 + a2*b2 + a3*b3 + a4*b4 + a5*b5 --> vrmpy, mul --> add





vmpa:-
vec_uint8 * int8  ==> int16
vec_int16 * int8  ==> int32
vec_int16 * int16  ==> int32
vec_int16 * uint16  ==> int32

vdmpy:-
vec_uint8 * int8  ==> int16
vec_int16 * int8  ==> int32

vtmpy:-
vec_uint8 * int8  ==> int16
vec_int8 * int8   ==> int16
vec_int16 * int8  ==> int32

vrmpy:-
vec_uint8 * int8  ==> int32
vec_uint8 * uint8 ==> uint32   