Lifting input expression to x86 IR...
=====================================

"Building Expr:"
(load
 (buffer input1 'uint8)
 (ramp
  (sca-add
   (sca-mul output.s0.x.x 16)
   (sca-add
    (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
    (var-lookup 't55)))
  1
  16)
 (aligned 1 0))
"Fold templates"
'()
here()

"Replace templates"
'()
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (load
 (buffer input1 'uint8)
 (ramp
  (sca-add
   (sca-mul output.s0.x.x 16)
   (sca-add
    (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
    (var-lookup 't55)))
  1
  16)
 (aligned 1 0))
template:
  #<load-data>
axioms:
  '()
optimized-halide-expr:
  (load
 (buffer input1 'uint8)
 (ramp
  (sca-add
   (sca-mul output.s0.x.x 16)
   (sca-add
    (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
    (var-lookup 't55)))
  1
  16)
 (aligned 1 0))
optimized-template:
  #<load-data>
optimized Halide 0:
  (uint8_t
 (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))))
optimized x86 0:
  (uint8_t
 (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))))
Ran synthesizer for 25 ms
(model
 [idx$0 0])
(load
 (buffer input1 'uint8)
 (ramp
  (sca-add
   (sca-mul output.s0.x.x 16)
   (sca-add
    (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
    (var-lookup 't55)))
  1
  16)
 (aligned 1 0))
#<load-data>
Ran bounds analysis for 23 ms
Ran bounds analysis for 13 ms
"Extended success?"
#t
#<load-data>
"Building Expr:"
(vec-cast
 (load
  (buffer input1 'uint8)
  (ramp
   (sca-add
    (sca-mul output.s0.x.x 16)
    (sca-add
     (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
     (var-lookup 't55)))
   1
   16)
  (aligned 1 0))
 'int16
 16)
"Fold templates"
'(#<load-data>)
here(#<load-data>)

"Replace templates"
'()
run-x86-synthesizer
halide-expr:
  (vec-cast
 (load
  (buffer input1 'uint8)
  (ramp
   (sca-add
    (sca-mul output.s0.x.x 16)
    (sca-add
     (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
     (var-lookup 't55)))
   1
   16)
  (aligned 1 0))
 'int16
 16)
template:
  #<load-data>
axioms:
  '()
optimized-halide-expr:
  (vec-cast
 (load
  (buffer input1 'uint8)
  (ramp
   (sca-add
    (sca-mul output.s0.x.x 16)
    (sca-add
     (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
     (var-lookup 't55)))
   1
   16)
  (aligned 1 0))
 'int16
 16)
optimized-template:
  #<load-data>
optimized Halide 0:
  (int16_t
 (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16)))
optimized x86 0:
  (uint8_t
 (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))))
Ran synthesizer for 2 ms
(unsat)
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (vec-cast
 (load
  (buffer input1 'uint8)
  (ramp
   (sca-add
    (sca-mul output.s0.x.x 16)
    (sca-add
     (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
     (var-lookup 't55)))
   1
   16)
  (aligned 1 0))
 'int16
 16)
template:
  (cast ... #<load-data> 'int16 #f)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-cast #<abstr-halide-expr> 'int16 16)
optimized-template:
  (cast ... #<abstr-expr> 'int16 #f)
optimized Halide 0:
  (int16_t (zero-extend (app abstr-vals$51 0) (bitvector 16)))
optimized x86 0:
  (int16_t (zero-extend (app abstr-vals$51 0) (bitvector 16)))
Ran synthesizer for 19 ms
(model)
(vec-cast #<abstr-halide-expr> 'int16 16)
(cast ... #<load-data> 'int16 #f)
Ran bounds analysis for 24 ms
Ran bounds analysis for 15 ms
"Extended success?"
#t
(cast ... #<load-data> 'int16 #f)
"Building Expr:"
(sca-broadcast (int16_t (bv #x0040 16)) 16)
"Fold templates"
'()
here()

"Replace templates"
'()
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (sca-broadcast (int16_t (bv #x0040 16)) 16)
template:
  (broadcast ... (int16_t (bv #x0040 16)))
axioms:
  '()
optimized-halide-expr:
  (sca-broadcast (int16_t (bv #x0040 16)) 16)
optimized-template:
  (broadcast ... (int16_t (bv #x0040 16)))
optimized Halide 0:
  (int16_t (bv #x0040 16))
optimized x86 0:
  (int16_t (bv #x0040 16))
Ran synthesizer for 20 ms
(model)
(sca-broadcast (int16_t (bv #x0040 16)) 16)
(broadcast ... (int16_t (bv #x0040 16)))
Ran bounds analysis for 23 ms
Ran bounds analysis for 15 ms
"Extended success?"
#t
(broadcast ... (int16_t (bv #x0040 16)))
"Building Expr:"
(vec-mul
 (vec-cast
  (load
   (buffer input1 'uint8)
   (ramp
    (sca-add
     (sca-mul output.s0.x.x 16)
     (sca-add
      (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
      (var-lookup 't55)))
    1
    16)
   (aligned 1 0))
  'int16
  16)
 (sca-broadcast (int16_t (bv #x0040 16)) 16))
"Fold templates"
(list #<load-data> (cast ... #<load-data> 'int16 x?$53))
here(#<load-data> #(struct:cast ... #<load-data> int16 x?$53))

(list (vs-mpy-add ... #<load-data> (list (int16_t (bv #x0040 16))) #f #f #f 'int16) (vs-mpy-add ... #<load-data> (list (int16_t (bv #x0040 16))) #f #f #f 'int16) (vv-mpy-add ... #<load-data> '(1) (! x?$154) (! x?$155) (! x?$156) 'int16) (vv-mpy-add ... #<load-data> '(1) (! x?$157) (! x?$158) (! x?$159) 'int16))
"Replace templates"
(list
 (vs-mpy-add ... #<load-data> (list (int16_t (bv #x0040 16))) #f #f #f 'int16)
 (vs-mpy-add ... #<load-data> (list (int16_t (bv #x0040 16))) #f #f #f 'int16)
 (vv-mpy-add ... #<load-data> '(1) (! x?$154) (! x?$155) (! x?$156) 'int16)
 (vv-mpy-add ... #<load-data> '(1) (! x?$157) (! x?$158) (! x?$159) 'int16))
run-x86-synthesizer
halide-expr:
  (vec-mul
 (vec-cast
  (load
   (buffer input1 'uint8)
   (ramp
    (sca-add
     (sca-mul output.s0.x.x 16)
     (sca-add
      (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
      (var-lookup 't55)))
    1
    16)
   (aligned 1 0))
  'int16
  16)
 (sca-broadcast (int16_t (bv #x0040 16)) 16))
template:
  #<load-data>
axioms:
  '()
optimized-halide-expr:
  (vec-mul
 (vec-cast
  (load
   (buffer input1 'uint8)
   (ramp
    (sca-add
     (sca-mul output.s0.x.x 16)
     (sca-add
      (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
      (var-lookup 't55)))
    1
    16)
   (aligned 1 0))
  'int16
  16)
 (sca-broadcast (int16_t (bv #x0040 16)) 16))
optimized-template:
  #<load-data>
optimized Halide 0:
  (int16_t
 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))))
optimized x86 0:
  (uint8_t
 (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))))
Ran synthesizer for 2 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-mul
 (vec-cast
  (load
   (buffer input1 'uint8)
   (ramp
    (sca-add
     (sca-mul output.s0.x.x 16)
     (sca-add
      (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
      (var-lookup 't55)))
    1
    16)
   (aligned 1 0))
  'int16
  16)
 (sca-broadcast (int16_t (bv #x0040 16)) 16))
template:
  (cast ... #<load-data> 'int16 x?$53)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-mul
 (vec-cast #<abstr-halide-expr> 'int16 16)
 (sca-broadcast (int16_t (bv #x0040 16)) 16))
optimized-template:
  (cast ... #<abstr-expr> 'int16 x?$53)
optimized Halide 0:
  (int16_t
 (bvmul (bv #x0040 16) (zero-extend (app abstr-vals$160 0) (bitvector 16))))
optimized x86 0:
  (int16_t (zero-extend (app abstr-vals$160 0) (bitvector 16)))
Ran synthesizer for 48 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-mul
 (vec-cast
  (load
   (buffer input1 'uint8)
   (ramp
    (sca-add
     (sca-mul output.s0.x.x 16)
     (sca-add
      (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
      (var-lookup 't55)))
    1
    16)
   (aligned 1 0))
  'int16
  16)
 (sca-broadcast (int16_t (bv #x0040 16)) 16))
template:
  (vs-mpy-add ... #<load-data> (list (int16_t (bv #x0040 16))) #f #f #f 'int16)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-mul
 (vec-cast #<abstr-halide-expr> 'int16 16)
 (sca-broadcast (int16_t (bv #x0040 16)) 16))
optimized-template:
  (vs-mpy-add ... #<abstr-expr> (list (int16_t (bv #x0040 16))) #f #f #f 'int16)
optimized Halide 0:
  (int16_t
 (bvmul (bv #x0040 16) (zero-extend (app abstr-vals$161 0) (bitvector 16))))
optimized x86 0:
  (int16_t
 (bvmul (bv #x0040 16) (zero-extend (app abstr-vals$161 0) (bitvector 16))))
Ran synthesizer for 18 ms
(model)
(vec-mul
 (vec-cast #<abstr-halide-expr> 'int16 16)
 (sca-broadcast (int16_t (bv #x0040 16)) 16))
(vs-mpy-add ... #<load-data> (list (int16_t (bv #x0040 16))) #f #f #f 'int16)
Ran bounds analysis for 27 ms
Ran bounds analysis for 21 ms
"Success?"
#t
(vs-mpy-add ... #<load-data> (list (int16_t (bv #x0040 16))) #f #f #f 'int16)
"Building Expr:"
(sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16)
"Fold templates"
'()
here()

"Replace templates"
'()
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16)
template:
  (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))))
axioms:
  '()
optimized-halide-expr:
  (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16)
optimized-template:
  (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))))
optimized Halide 0:
  (int16_t (bvmul (bv #xffc0 16) t125))
optimized x86 0:
  (int16_t (bvmul (bv #xffc0 16) t125))
Ran synthesizer for 18 ms
(model)
(sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16)
(broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))))
Ran bounds analysis for 22 ms
Ran bounds analysis for 18 ms
"Extended success?"
#t
(broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))))
"Building Expr:"
(vec-add
 (vec-mul
  (vec-cast
   (load
    (buffer input1 'uint8)
    (ramp
     (sca-add
      (sca-mul output.s0.x.x 16)
      (sca-add
       (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
       (var-lookup 't55)))
     1
     16)
    (aligned 1 0))
   'int16
   16)
  (sca-broadcast (int16_t (bv #x0040 16)) 16))
 (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
"Fold templates"
(list
 #<load-data>
 (vs-mpy-add
  ...
  #<load-data>
  (list
   (int16_t (bv #x0040 16))
   (union [x?$166 #(struct:int16_t (bv #x0040 16))] [(! x?$166) #(struct:int8_t
                                                                  (bv #x01 8))]))
  #f
  #f
  #f
  'int16)
 (vs-mpy-add
  ...
  #<load-data>
  (list (int16_t (bv #x0040 16)))
  #f
  x?$164
  #f
  'int16)
 (vs-mpy-add
  ...
  (combine
   (vs-mpy-add
    ...
    #<load-data>
    (list (int16_t (bv #x0040 16)))
    #f
    #f
    #f
    'int16)
   (union [x?$167 #(struct:vs-mpy-add
                    ...
                    #<load-data>
                    (#(struct:int16_t (bv #x0040 16)))
                    #f
                    #f
                    #f
                    int16)] [(! x?$167) #(struct:broadcast
                                          ...
                                          #(struct:sca-mul
                                            #(struct:int16_t t125)
                                            #(struct:int16_t (bv #xffc0 16))))]))
  (list (int16_t (bv #x0040 16)) (int8_t (bv #x01 8)))
  #f
  #f
  #f
  'int16))
here(#<load-data> #(struct:vs-mpy-add ... #<load-data> (#(struct:int16_t (bv #x0040 16)) (union #:size 2 #:hash 1497340800537)) #f #f #f int16) #(struct:vs-mpy-add ... #<load-data> (#(struct:int16_t (bv #x0040 16))) #f x?$164 #f int16) #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<load-data> (#(struct:int16_t (bv #x0040 16))) #f #f #f int16) (union #:size 2 #:hash 364279422259)> (#(struct:int16_t (bv #x0040 16)) #(struct:int8_t (bv #x01 8))) #f #f #f int16))

"Replace templates"
'()
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-mul
  (vec-cast
   (load
    (buffer input1 'uint8)
    (ramp
     (sca-add
      (sca-mul output.s0.x.x 16)
      (sca-add
       (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
       (var-lookup 't55)))
     1
     16)
    (aligned 1 0))
   'int16
   16)
  (sca-broadcast (int16_t (bv #x0040 16)) 16))
 (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
template:
  #<load-data>
axioms:
  '()
optimized-halide-expr:
  (vec-add
 (vec-mul
  (vec-cast
   (load
    (buffer input1 'uint8)
    (ramp
     (sca-add
      (sca-mul output.s0.x.x 16)
      (sca-add
       (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
       (var-lookup 't55)))
     1
     16)
    (aligned 1 0))
   'int16
   16)
  (sca-broadcast (int16_t (bv #x0040 16)) 16))
 (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
optimized-template:
  #<load-data>
optimized Halide 0:
  (int16_t
 (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)))
optimized x86 0:
  (uint8_t
 (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))))
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-mul
  (vec-cast
   (load
    (buffer input1 'uint8)
    (ramp
     (sca-add
      (sca-mul output.s0.x.x 16)
      (sca-add
       (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
       (var-lookup 't55)))
     1
     16)
    (aligned 1 0))
   'int16
   16)
  (sca-broadcast (int16_t (bv #x0040 16)) 16))
 (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
template:
  (vs-mpy-add
 ...
 #<load-data>
 (list
  (int16_t (bv #x0040 16))
  (union [x?$166 #(struct:int16_t (bv #x0040 16))] [(! x?$166) #(struct:int8_t
                                                                 (bv #x01 8))]))
 #f
 #f
 #f
 'int16)
axioms:
  '()
optimized-halide-expr:
  (vec-add
 (vec-mul
  (vec-cast
   (load
    (buffer input1 'uint8)
    (ramp
     (sca-add
      (sca-mul output.s0.x.x 16)
      (sca-add
       (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
       (var-lookup 't55)))
     1
     16)
    (aligned 1 0))
   'int16
   16)
  (sca-broadcast (int16_t (bv #x0040 16)) 16))
 (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
optimized-template:
  (vs-mpy-add
 ...
 #<load-data>
 (list
  (int16_t (bv #x0040 16))
  (union [x?$166 #(struct:int16_t (bv #x0040 16))] [(! x?$166) #(struct:int8_t
                                                                 (bv #x01 8))]))
 #f
 #f
 #f
 'int16)
optimized Halide 0:
  (int16_t
 (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)))
optimized x86 0:
  (int16_t
 (bvmul (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16)) (ite x?$166 (bv #x0080 16) (bv #x0041 16))))
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-mul
  (vec-cast
   (load
    (buffer input1 'uint8)
    (ramp
     (sca-add
      (sca-mul output.s0.x.x 16)
      (sca-add
       (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
       (var-lookup 't55)))
     1
     16)
    (aligned 1 0))
   'int16
   16)
  (sca-broadcast (int16_t (bv #x0040 16)) 16))
 (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
template:
  (vs-mpy-add
 ...
 #<load-data>
 (list (int16_t (bv #x0040 16)))
 #f
 x?$164
 #f
 'int16)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-add
 (vec-mul
  (vec-cast #<abstr-halide-expr> 'int16 16)
  (sca-broadcast (int16_t (bv #x0040 16)) 16))
 (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
optimized-template:
  (vs-mpy-add
 ...
 #<abstr-expr>
 (list (int16_t (bv #x0040 16)))
 #f
 x?$164
 #f
 'int16)
optimized Halide 0:
  (int16_t
 (bvadd (bvmul (bv #xffc0 16) t125) (bvmul (bv #x0040 16) (zero-extend (app abstr-vals$243 0) (bitvector 16)))))
optimized x86 0:
  (int16_t
 (bvadd (bvmul (bv #x0040 16) (zero-extend (app abstr-vals$243 0) (bitvector 16))) (ite x?$164 (bv #x0001 16) (bv #x0000 16))))
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-mul
  (vec-cast
   (load
    (buffer input1 'uint8)
    (ramp
     (sca-add
      (sca-mul output.s0.x.x 16)
      (sca-add
       (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
       (var-lookup 't55)))
     1
     16)
    (aligned 1 0))
   'int16
   16)
  (sca-broadcast (int16_t (bv #x0040 16)) 16))
 (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
template:
  (vs-mpy-add
 ...
 (combine
  (vs-mpy-add ... #<load-data> (list (int16_t (bv #x0040 16))) #f #f #f 'int16)
  (union [x?$167 #(struct:vs-mpy-add
                   ...
                   #<load-data>
                   (#(struct:int16_t (bv #x0040 16)))
                   #f
                   #f
                   #f
                   int16)] [(! x?$167) #(struct:broadcast
                                         ...
                                         #(struct:sca-mul
                                           #(struct:int16_t t125)
                                           #(struct:int16_t (bv #xffc0 16))))]))
 (list (int16_t (bv #x0040 16)) (int8_t (bv #x01 8)))
 #f
 #f
 #f
 'int16)
axioms:
  (union [x?$167 ((forall (idx) (&& (bvsle (app abstr-vals$244 idx) (bv #x3fc0 16)) (bvsle (bv #x0000 16) (app abstr-vals$244 idx))))
                (forall (idx) (&& (bvsle (app abstr-vals$244 idx) (bv #x3fc0 16)) (bvsle (bv #x0000 16) (app abstr-vals$244 idx)))))] [(! x?$167) ((forall (idx) (&& (bvsle (app abstr-vals$244 idx) (bv #x3fc0 16)) (bvsle (bv #x0000 16) (app abstr-vals$244 idx)))))])
optimized-halide-expr:
  (vec-add
 #<abstr-halide-expr>
 (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
optimized-template:
  (vs-mpy-add
 ...
 (combine
  #<abstr-expr>
  (union [x?$167 #<abstr-expr>] [(! x?$167) #(struct:broadcast
                                              ...
                                              #(struct:sca-mul
                                                #(struct:int16_t t125)
                                                #(struct:int16_t
                                                  (bv #xffc0 16))))]))
 (list (int16_t (bv #x0040 16)) (int8_t (bv #x01 8)))
 #f
 #f
 #f
 'int16)
optimized Halide 0:
  (int16_t (bvadd (bvmul (bv #xffc0 16) t125) (app abstr-vals$244 0)))
optimized x86 0:
  (int16_t
 (bvadd (bvmul (bv #x0040 16) (ite c$169 (app abstr-vals$244 idx$168) (ite x?$167 (app abstr-vals$244 idx$168) (bvmul (bv #xffc0 16) t125)))) (ite c$171 (app abstr-vals$244 idx$170) (ite x?$167 (app abstr-vals$244 idx$170) (bvmul (bv #xffc0 16) t125)))))
Ran synthesizer for 131 ms
(unsat)
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-mul
  (vec-cast
   (load
    (buffer input1 'uint8)
    (ramp
     (sca-add
      (sca-mul output.s0.x.x 16)
      (sca-add
       (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
       (var-lookup 't55)))
     1
     16)
    (aligned 1 0))
   'int16
   16)
  (sca-broadcast (int16_t (bv #x0040 16)) 16))
 (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
template:
  (vs-mpy-add
 ...
 (union [x?$245 #(struct:vs-mpy-add
                  ...
                  #<load-data>
                  (#(struct:int16_t (bv #x0040 16)))
                  #f
                  #f
                  #f
                  int16)] [(! x?$245) #(struct:broadcast
                                        ...
                                        #(struct:sca-mul
                                          #(struct:int16_t t125)
                                          #(struct:int16_t (bv #xffc0 16))))])
 (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
 (! x?$246)
 (! x?$247)
 (! x?$248)
 'int16)
axioms:
  '()
optimized-halide-expr:
  (vec-add
 (vec-mul
  (vec-cast
   (load
    (buffer input1 'uint8)
    (ramp
     (sca-add
      (sca-mul output.s0.x.x 16)
      (sca-add
       (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
       (var-lookup 't55)))
     1
     16)
    (aligned 1 0))
   'int16
   16)
  (sca-broadcast (int16_t (bv #x0040 16)) 16))
 (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
optimized-template:
  (vs-mpy-add
 ...
 (union [x?$245 #(struct:vs-mpy-add
                  ...
                  #<load-data>
                  (#(struct:int16_t (bv #x0040 16)))
                  #f
                  #f
                  #f
                  int16)] [(! x?$245) #(struct:broadcast
                                        ...
                                        #(struct:sca-mul
                                          #(struct:int16_t t125)
                                          #(struct:int16_t (bv #xffc0 16))))])
 (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
 (! x?$246)
 (! x?$247)
 (! x?$248)
 'int16)
optimized Halide 0:
  (int16_t
 (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)))
optimized x86 0:
  (int16_t
 (ite* (⊢ (&& x?$248 (! (&& (! x?$246) (! x?$248)))) (ite x?$246 (bvadd (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (ite x?$246 (bvadd (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (ite x?$247 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$247 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bvadd (bv #x7fff 16) (bvneg (ite x?$247 (bv #x0000 16) (bv #x0001 16))))) (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bvadd (bv #x7fff 16) (bvneg (ite x?$247 (bv #x0000 16) (bv #x0001 16)))))))) (bvadd (ite x?$246 (bvadd (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (ite x?$247 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$247 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bvadd (bv #x7fff 16) (bvneg (ite x?$247 (bv #x0000 16) (bv #x0001 16))))) (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bvadd (bv #x7fff 16) (bvneg (ite x?$247 (bv #x0000 16) (bv #x0001 16))))))) (ite (bvsle (bvadd (bv #x8000 16) (bvneg (ite (bvsle (ite x?$246 (bvadd (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (ite x?$247 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$247 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bvadd (bv #x7fff 16) (bvneg (ite x?$247 (bv #x0000 16) (bv #x0001 16))))) (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bvadd (bv #x7fff 16) (bvneg (ite x?$247 (bv #x0000 16) (bv #x0001 16))))))) (bv #x0000 16)) (ite x?$246 (bvadd (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (ite x?$247 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$247 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bvadd (bv #x7fff 16) (bvneg (ite x?$247 (bv #x0000 16) (bv #x0001 16))))) (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bvadd (bv #x7fff 16) (bvneg (ite x?$247 (bv #x0000 16) (bv #x0001 16))))))) (bv #x0000 16)))) (ite (bvsle (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$246 (bvadd (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (ite x?$247 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$247 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bvadd (bv #x7fff 16) (bvneg (ite x?$247 (bv #x0000 16) (bv #x0001 16))))) (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bvadd (bv #x7fff 16) (bvneg (ite x?$247 (bv #x0000 16) (bv #x0001 16)))))))) (ite x?$246 (bvadd (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (ite x?$247 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$247 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bvadd (bv #x7fff 16) (bvneg (ite x?$247 (bv #x0000 16) (bv #x0001 16))))) (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bvadd (bv #x7fff 16) (bvneg (ite x?$247 (bv #x0000 16) (bv #x0001 16))))))) (bv #x0000 16))))) (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$246 (bvadd (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (ite x?$247 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$247 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bvadd (bv #x7fff 16) (bvneg (ite x?$247 (bv #x0000 16) (bv #x0001 16))))) (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bvadd (bv #x7fff 16) (bvneg (ite x?$247 (bv #x0000 16) (bv #x0001 16)))))))) (ite x?$246 (bvadd (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (ite x?$247 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$247 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bvadd (bv #x7fff 16) (bvneg (ite x?$247 (bv #x0000 16) (bv #x0001 16))))) (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bvadd (bv #x7fff 16) (bvneg (ite x?$247 (bv #x0000 16) (bv #x0001 16))))))) (bv #x0000 16)))))) (ite (bvsle (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$246 (bvadd (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (ite x?$247 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$247 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bvadd (bv #x7fff 16) (bvneg (ite x?$247 (bv #x0000 16) (bv #x0001 16))))) (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bvadd (bv #x7fff 16) (bvneg (ite x?$247 (bv #x0000 16) (bv #x0001 16)))))))) (ite x?$246 (bvadd (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (ite x?$247 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$247 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bvadd (bv #x7fff 16) (bvneg (ite x?$247 (bv #x0000 16) (bv #x0001 16))))) (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bvadd (bv #x7fff 16) (bvneg (ite x?$247 (bv #x0000 16) (bv #x0001 16))))))) (bv #x0000 16))))) (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$246 (bvadd (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (ite x?$247 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$247 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bvadd (bv #x7fff 16) (bvneg (ite x?$247 (bv #x0000 16) (bv #x0001 16))))) (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bvadd (bv #x7fff 16) (bvneg (ite x?$247 (bv #x0000 16) (bv #x0001 16)))))))) (ite x?$246 (bvadd (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (ite x?$247 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$247 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bvadd (bv #x7fff 16) (bvneg (ite x?$247 (bv #x0000 16) (bv #x0001 16))))) (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bvadd (bv #x7fff 16) (bvneg (ite x?$247 (bv #x0000 16) (bv #x0001 16))))))) (bv #x0000 16))))) (bvadd (bv #x8000 16) (bvneg (ite (bvsle (ite x?$246 (bvadd (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (ite x?$247 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$247 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bvadd (bv #x7fff 16) (bvneg (ite x?$247 (bv #x0000 16) (bv #x0001 16))))) (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bvadd (bv #x7fff 16) (bvneg (ite x?$247 (bv #x0000 16) (bv #x0001 16))))))) (bv #x0000 16)) (ite x?$246 (bvadd (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (ite x?$247 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$247 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bvadd (bv #x7fff 16) (bvneg (ite x?$247 (bv #x0000 16) (bv #x0001 16))))) (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bvadd (bv #x7fff 16) (bvneg (ite x?$247 (bv #x0000 16) (bv #x0001 16))))))) (bv #x0000 16)))))))) (⊢ (|| (&& (! x?$246) (! x?$248)) (&& (! x?$248) (! (&& (! x?$246) (! x?$248))))) (bvashr (ite x?$246 (bvadd (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (ite x?$246 (bvadd (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (ite x?$247 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$247 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bvadd (bv #x7fff 16) (bvneg (ite x?$247 (bv #x0000 16) (bv #x0001 16))))) (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bvadd (bv #x7fff 16) (bvneg (ite x?$247 (bv #x0000 16) (bv #x0001 16)))))))) (bvadd (ite x?$246 (bvadd (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (ite x?$247 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$247 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bvadd (bv #x7fff 16) (bvneg (ite x?$247 (bv #x0000 16) (bv #x0001 16))))) (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bvadd (bv #x7fff 16) (bvneg (ite x?$247 (bv #x0000 16) (bv #x0001 16))))))) (ite (bvsle (bvadd (bv #x8000 16) (bvneg (ite (bvsle (ite x?$246 (bvadd (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (ite x?$247 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$247 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bvadd (bv #x7fff 16) (bvneg (ite x?$247 (bv #x0000 16) (bv #x0001 16))))) (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bvadd (bv #x7fff 16) (bvneg (ite x?$247 (bv #x0000 16) (bv #x0001 16))))))) (bv #x0000 16)) (ite x?$246 (bvadd (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (ite x?$247 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$247 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bvadd (bv #x7fff 16) (bvneg (ite x?$247 (bv #x0000 16) (bv #x0001 16))))) (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bvadd (bv #x7fff 16) (bvneg (ite x?$247 (bv #x0000 16) (bv #x0001 16))))))) (bv #x0000 16)))) (ite (bvsle (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$246 (bvadd (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (ite x?$247 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$247 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bvadd (bv #x7fff 16) (bvneg (ite x?$247 (bv #x0000 16) (bv #x0001 16))))) (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bvadd (bv #x7fff 16) (bvneg (ite x?$247 (bv #x0000 16) (bv #x0001 16)))))))) (ite x?$246 (bvadd (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (ite x?$247 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$247 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bvadd (bv #x7fff 16) (bvneg (ite x?$247 (bv #x0000 16) (bv #x0001 16))))) (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bvadd (bv #x7fff 16) (bvneg (ite x?$247 (bv #x0000 16) (bv #x0001 16))))))) (bv #x0000 16))))) (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$246 (bvadd (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (ite x?$247 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$247 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bvadd (bv #x7fff 16) (bvneg (ite x?$247 (bv #x0000 16) (bv #x0001 16))))) (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bvadd (bv #x7fff 16) (bvneg (ite x?$247 (bv #x0000 16) (bv #x0001 16)))))))) (ite x?$246 (bvadd (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (ite x?$247 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$247 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bvadd (bv #x7fff 16) (bvneg (ite x?$247 (bv #x0000 16) (bv #x0001 16))))) (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bvadd (bv #x7fff 16) (bvneg (ite x?$247 (bv #x0000 16) (bv #x0001 16))))))) (bv #x0000 16)))))) (ite (bvsle (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$246 (bvadd (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (ite x?$247 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$247 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bvadd (bv #x7fff 16) (bvneg (ite x?$247 (bv #x0000 16) (bv #x0001 16))))) (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bvadd (bv #x7fff 16) (bvneg (ite x?$247 (bv #x0000 16) (bv #x0001 16)))))))) (ite x?$246 (bvadd (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (ite x?$247 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$247 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bvadd (bv #x7fff 16) (bvneg (ite x?$247 (bv #x0000 16) (bv #x0001 16))))) (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bvadd (bv #x7fff 16) (bvneg (ite x?$247 (bv #x0000 16) (bv #x0001 16))))))) (bv #x0000 16))))) (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$246 (bvadd (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (ite x?$247 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$247 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bvadd (bv #x7fff 16) (bvneg (ite x?$247 (bv #x0000 16) (bv #x0001 16))))) (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bvadd (bv #x7fff 16) (bvneg (ite x?$247 (bv #x0000 16) (bv #x0001 16)))))))) (ite x?$246 (bvadd (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (ite x?$247 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$247 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bvadd (bv #x7fff 16) (bvneg (ite x?$247 (bv #x0000 16) (bv #x0001 16))))) (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bvadd (bv #x7fff 16) (bvneg (ite x?$247 (bv #x0000 16) (bv #x0001 16))))))) (bv #x0000 16))))) (bvadd (bv #x8000 16) (bvneg (ite (bvsle (ite x?$246 (bvadd (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (ite x?$247 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$247 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bvadd (bv #x7fff 16) (bvneg (ite x?$247 (bv #x0000 16) (bv #x0001 16))))) (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bvadd (bv #x7fff 16) (bvneg (ite x?$247 (bv #x0000 16) (bv #x0001 16))))))) (bv #x0000 16)) (ite x?$246 (bvadd (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (ite x?$247 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$247 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bvadd (bv #x7fff 16) (bvneg (ite x?$247 (bv #x0000 16) (bv #x0001 16))))) (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bvadd (bv #x7fff 16) (bvneg (ite x?$247 (bv #x0000 16) (bv #x0001 16))))))) (bv #x0000 16))))))) (bv #x0001 16)))))
Ran synthesizer for 111 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-mul
  (vec-cast
   (load
    (buffer input1 'uint8)
    (ramp
     (sca-add
      (sca-mul output.s0.x.x 16)
      (sca-add
       (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
       (var-lookup 't55)))
     1
     16)
    (aligned 1 0))
   'int16
   16)
  (sca-broadcast (int16_t (bv #x0040 16)) 16))
 (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
template:
  (vs-mpy-add
 ...
 (combine
  (vs-mpy-add ... #<load-data> (list (int16_t (bv #x0040 16))) #f #f #f 'int16)
  (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
 (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
 #f
 #f
 #f
 'int16)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$299 idx) (bv #x3fc0 16)) (bvsle (bv #x0000 16) (app abstr-vals$299 idx))))
 (forall (idx) (bvsle (app abstr-vals$300 idx) (bv #x7fc0 16))))
optimized-halide-expr:
  (vec-add #<abstr-halide-expr> #<abstr-halide-expr>)
optimized-template:
  (vs-mpy-add
 ...
 (combine #<abstr-expr> #<abstr-expr>)
 (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
 #f
 #f
 #f
 'int16)
optimized Halide 0:
  (int16_t (bvadd (app abstr-vals$299 0) (app abstr-vals$300 0)))
optimized x86 0:
  (int16_t
 (bvadd (ite c$250 (app abstr-vals$299 idx$249) (app abstr-vals$300 idx$249)) (ite c$252 (app abstr-vals$299 idx$251) (app abstr-vals$300 idx$251))))
Ran synthesizer for 135 ms
(model
 [idx$249 0]
 [c$250 #f]
 [idx$251 0]
 [c$252 #t])
(vec-add #<abstr-halide-expr> #<abstr-halide-expr>)
(vs-mpy-add
 ...
 (combine
  (vs-mpy-add ... #<load-data> (list (int16_t (bv #x0040 16))) #f #f #f 'int16)
  (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
 (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
 #f
 #f
 #f
 'int16)
Ran bounds analysis for 23 ms
Ran bounds analysis for 16 ms
"Extended success?"
#t
(vs-mpy-add
 ...
 (combine
  (vs-mpy-add ... #<load-data> (list (int16_t (bv #x0040 16))) #f #f #f 'int16)
  (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
 (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
 #f
 #f
 #f
 'int16)
"Building Expr:"
(vec-cast
 (vec-add
  (vec-mul
   (vec-cast
    (load
     (buffer input1 'uint8)
     (ramp
      (sca-add
       (sca-mul output.s0.x.x 16)
       (sca-add
        (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
        (var-lookup 't55)))
      1
      16)
     (aligned 1 0))
    'int16
    16)
   (sca-broadcast (int16_t (bv #x0040 16)) 16))
  (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
 'int32
 16)
"Fold templates"
(list
 (vs-mpy-add
  ...
  #<load-data>
  (list (int16_t (bv #x0040 16)))
  x?$307
  x?$308
  x?$309
  'int16)
 (vs-mpy-add
  ...
  (combine
   (vs-mpy-add
    ...
    #<load-data>
    (list (int16_t (bv #x0040 16)))
    #f
    #f
    #f
    'int16)
   (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
  (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
  x?$303
  x?$304
  x?$305
  'int16))
here(#(struct:vs-mpy-add ... #<load-data> (#(struct:int16_t (bv #x0040 16))) x?$307 x?$308 x?$309 int16) #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<load-data> (#(struct:int16_t (bv #x0040 16))) #f #f #f int16) #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t125) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) x?$303 x?$304 x?$305 int16))

"Replace templates"
'()
run-x86-synthesizer
halide-expr:
  (vec-cast
 (vec-add
  (vec-mul
   (vec-cast
    (load
     (buffer input1 'uint8)
     (ramp
      (sca-add
       (sca-mul output.s0.x.x 16)
       (sca-add
        (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
        (var-lookup 't55)))
      1
      16)
     (aligned 1 0))
    'int16
    16)
   (sca-broadcast (int16_t (bv #x0040 16)) 16))
  (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
 'int32
 16)
template:
  (vs-mpy-add
 ...
 #<load-data>
 (list (int16_t (bv #x0040 16)))
 x?$307
 x?$308
 x?$309
 'int16)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-cast
 (vec-add
  (vec-mul
   (vec-cast #<abstr-halide-expr> 'int16 16)
   (sca-broadcast (int16_t (bv #x0040 16)) 16))
  (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
 'int32
 16)
optimized-template:
  (vs-mpy-add
 ...
 #<abstr-expr>
 (list (int16_t (bv #x0040 16)))
 x?$307
 x?$308
 x?$309
 'int16)
optimized Halide 0:
  (int32_t
 (sign-extend (bvadd (bvmul (bv #xffc0 16) t125) (bvmul (bv #x0040 16) (zero-extend (app abstr-vals$311 0) (bitvector 16)))) (bitvector 32)))
optimized x86 0:
  (int16_t
 (ite* (⊢ (&& (! x?$309) (! (&& x?$307 x?$309))) (ite x?$307 (bvadd (ite x?$308 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0040 16) (zero-extend (app abstr-vals$311 0) (bitvector 16))) (bvadd (bv #x7fff 16) (bvneg (ite x?$308 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0040 16) (zero-extend (app abstr-vals$311 0) (bitvector 16))) (bvadd (bv #x7fff 16) (bvneg (ite x?$308 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0040 16) (zero-extend (app abstr-vals$311 0) (bitvector 16))) (ite x?$308 (bv #x0001 16) (bv #x0000 16))))) (⊢ (|| (&& x?$307 x?$309) (&& x?$309 (! (&& x?$307 x?$309)))) (bvashr (ite x?$307 (bvadd (ite x?$308 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0040 16) (zero-extend (app abstr-vals$311 0) (bitvector 16))) (bvadd (bv #x7fff 16) (bvneg (ite x?$308 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0040 16) (zero-extend (app abstr-vals$311 0) (bitvector 16))) (bvadd (bv #x7fff 16) (bvneg (ite x?$308 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0040 16) (zero-extend (app abstr-vals$311 0) (bitvector 16))) (ite x?$308 (bv #x0001 16) (bv #x0000 16)))) (bv #x0001 16)))))
run-x86-synthesizer
halide-expr:
  (vec-cast
 (vec-add
  (vec-mul
   (vec-cast
    (load
     (buffer input1 'uint8)
     (ramp
      (sca-add
       (sca-mul output.s0.x.x 16)
       (sca-add
        (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
        (var-lookup 't55)))
      1
      16)
     (aligned 1 0))
    'int16
    16)
   (sca-broadcast (int16_t (bv #x0040 16)) 16))
  (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
 'int32
 16)
template:
  (vs-mpy-add
 ...
 (combine
  (vs-mpy-add ... #<load-data> (list (int16_t (bv #x0040 16))) #f #f #f 'int16)
  (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
 (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
 x?$303
 x?$304
 x?$305
 'int16)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$312 idx) (bv #x3fc0 16)) (bvsle (bv #x0000 16) (app abstr-vals$312 idx))))
 (forall (idx) (bvsle (app abstr-vals$313 idx) (bv #x7fc0 16))))
optimized-halide-expr:
  (vec-cast (vec-add #<abstr-halide-expr> #<abstr-halide-expr>) 'int32 16)
optimized-template:
  (vs-mpy-add
 ...
 (combine #<abstr-expr> #<abstr-expr>)
 (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
 x?$303
 x?$304
 x?$305
 'int16)
optimized Halide 0:
  (int32_t
 (sign-extend (bvadd (app abstr-vals$312 0) (app abstr-vals$313 0)) (bitvector 32)))
optimized x86 0:
  (int16_t
 (ite* (⊢ (&& (! x?$305) (! (&& x?$303 x?$305))) (ite x?$303 (bvadd (ite x?$303 (bvadd (ite x?$304 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$313 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$304 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$313 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$304 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$313 0) (ite x?$304 (bv #x0001 16) (bv #x0000 16)))) (ite (bvsle (bvadd (bv #x8000 16) (bvneg (ite (bvsle (ite x?$303 (bvadd (ite x?$304 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$313 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$304 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$313 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$304 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$313 0) (ite x?$304 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16)) (ite x?$303 (bvadd (ite x?$304 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$313 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$304 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$313 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$304 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$313 0) (ite x?$304 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16)))) (ite (bvsle (app abstr-vals$312 0) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$303 (bvadd (ite x?$304 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$313 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$304 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$313 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$304 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$313 0) (ite x?$304 (bv #x0001 16) (bv #x0000 16))))) (ite x?$303 (bvadd (ite x?$304 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$313 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$304 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$313 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$304 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$313 0) (ite x?$304 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16))))) (app abstr-vals$312 0) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$303 (bvadd (ite x?$304 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$313 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$304 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$313 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$304 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$313 0) (ite x?$304 (bv #x0001 16) (bv #x0000 16))))) (ite x?$303 (bvadd (ite x?$304 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$313 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$304 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$313 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$304 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$313 0) (ite x?$304 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16)))))) (ite (bvsle (app abstr-vals$312 0) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$303 (bvadd (ite x?$304 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$313 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$304 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$313 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$304 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$313 0) (ite x?$304 (bv #x0001 16) (bv #x0000 16))))) (ite x?$303 (bvadd (ite x?$304 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$313 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$304 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$313 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$304 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$313 0) (ite x?$304 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16))))) (app abstr-vals$312 0) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$303 (bvadd (ite x?$304 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$313 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$304 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$313 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$304 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$313 0) (ite x?$304 (bv #x0001 16) (bv #x0000 16))))) (ite x?$303 (bvadd (ite x?$304 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$313 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$304 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$313 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$304 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$313 0) (ite x?$304 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16))))) (bvadd (bv #x8000 16) (bvneg (ite (bvsle (ite x?$303 (bvadd (ite x?$304 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$313 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$304 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$313 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$304 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$313 0) (ite x?$304 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16)) (ite x?$303 (bvadd (ite x?$304 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$313 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$304 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$313 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$304 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$313 0) (ite x?$304 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16)))))) (bvadd (app abstr-vals$312 0) (ite x?$303 (bvadd (ite x?$304 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$313 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$304 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$313 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$304 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$313 0) (ite x?$304 (bv #x0001 16) (bv #x0000 16))))))) (⊢ (|| (&& x?$303 x?$305) (&& x?$305 (! (&& x?$303 x?$305)))) (bvashr (ite x?$303 (bvadd (ite x?$303 (bvadd (ite x?$304 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$313 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$304 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$313 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$304 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$313 0) (ite x?$304 (bv #x0001 16) (bv #x0000 16)))) (ite (bvsle (bvadd (bv #x8000 16) (bvneg (ite (bvsle (ite x?$303 (bvadd (ite x?$304 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$313 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$304 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$313 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$304 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$313 0) (ite x?$304 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16)) (ite x?$303 (bvadd (ite x?$304 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$313 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$304 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$313 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$304 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$313 0) (ite x?$304 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16)))) (ite (bvsle (app abstr-vals$312 0) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$303 (bvadd (ite x?$304 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$313 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$304 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$313 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$304 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$313 0) (ite x?$304 (bv #x0001 16) (bv #x0000 16))))) (ite x?$303 (bvadd (ite x?$304 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$313 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$304 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$313 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$304 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$313 0) (ite x?$304 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16))))) (app abstr-vals$312 0) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$303 (bvadd (ite x?$304 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$313 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$304 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$313 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$304 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$313 0) (ite x?$304 (bv #x0001 16) (bv #x0000 16))))) (ite x?$303 (bvadd (ite x?$304 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$313 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$304 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$313 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$304 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$313 0) (ite x?$304 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16)))))) (ite (bvsle (app abstr-vals$312 0) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$303 (bvadd (ite x?$304 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$313 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$304 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$313 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$304 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$313 0) (ite x?$304 (bv #x0001 16) (bv #x0000 16))))) (ite x?$303 (bvadd (ite x?$304 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$313 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$304 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$313 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$304 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$313 0) (ite x?$304 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16))))) (app abstr-vals$312 0) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$303 (bvadd (ite x?$304 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$313 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$304 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$313 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$304 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$313 0) (ite x?$304 (bv #x0001 16) (bv #x0000 16))))) (ite x?$303 (bvadd (ite x?$304 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$313 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$304 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$313 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$304 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$313 0) (ite x?$304 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16))))) (bvadd (bv #x8000 16) (bvneg (ite (bvsle (ite x?$303 (bvadd (ite x?$304 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$313 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$304 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$313 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$304 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$313 0) (ite x?$304 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16)) (ite x?$303 (bvadd (ite x?$304 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$313 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$304 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$313 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$304 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$313 0) (ite x?$304 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16)))))) (bvadd (app abstr-vals$312 0) (ite x?$303 (bvadd (ite x?$304 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$313 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$304 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$313 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$304 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$313 0) (ite x?$304 (bv #x0001 16) (bv #x0000 16)))))) (bv #x0001 16)))))
Ran synthesizer for 19 ms
(unsat)
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (vec-cast
 (vec-add
  (vec-mul
   (vec-cast
    (load
     (buffer input1 'uint8)
     (ramp
      (sca-add
       (sca-mul output.s0.x.x 16)
       (sca-add
        (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
        (var-lookup 't55)))
      1
      16)
     (aligned 1 0))
    'int16
    16)
   (sca-broadcast (int16_t (bv #x0040 16)) 16))
  (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
 'int32
 16)
template:
  (cast
 ...
 (vs-mpy-add
  ...
  (combine
   (vs-mpy-add
    ...
    #<load-data>
    (list (int16_t (bv #x0040 16)))
    #f
    #f
    #f
    'int16)
   (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
  (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
  #f
  #f
  #f
  'int16)
 'int32
 #f)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-cast #<abstr-halide-expr> 'int32 16)
optimized-template:
  (cast ... #<abstr-expr> 'int32 #f)
optimized Halide 0:
  (int32_t (sign-extend (app abstr-vals$314 0) (bitvector 32)))
optimized x86 0:
  (int32_t (sign-extend (app abstr-vals$314 0) (bitvector 32)))
Ran synthesizer for 17 ms
(model)
(vec-cast #<abstr-halide-expr> 'int32 16)
(cast
 ...
 (vs-mpy-add
  ...
  (combine
   (vs-mpy-add
    ...
    #<load-data>
    (list (int16_t (bv #x0040 16)))
    #f
    #f
    #f
    'int16)
   (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
  (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
  #f
  #f
  #f
  'int16)
 'int32
 #f)
Ran bounds analysis for 33 ms
Ran bounds analysis for 24 ms
"Extended success?"
#t
(cast
 ...
 (vs-mpy-add
  ...
  (combine
   (vs-mpy-add
    ...
    #<load-data>
    (list (int16_t (bv #x0040 16)))
    #f
    #f
    #f
    'int16)
   (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
  (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
  #f
  #f
  #f
  'int16)
 'int32
 #f)
"Building Expr:"
(sca-broadcast (int16_t input1_multiplier) 16)
"Fold templates"
'()
here()

"Replace templates"
'()
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (sca-broadcast (int16_t input1_multiplier) 16)
template:
  (broadcast ... (int16_t input1_multiplier))
axioms:
  '()
optimized-halide-expr:
  (sca-broadcast (int16_t input1_multiplier) 16)
optimized-template:
  (broadcast ... (int16_t input1_multiplier))
optimized Halide 0:
  (int16_t input1_multiplier)
optimized x86 0:
  (int16_t input1_multiplier)
Ran synthesizer for 15 ms
(model)
(sca-broadcast (int16_t input1_multiplier) 16)
(broadcast ... (int16_t input1_multiplier))
Ran bounds analysis for 22 ms
Ran bounds analysis for 14 ms
"Extended success?"
#t
(broadcast ... (int16_t input1_multiplier))
"Building Expr:"
(vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16)
"Fold templates"
'()
here()

"Replace templates"
'()
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16)
template:
  (cast ... (broadcast ... (int16_t input1_multiplier)) 'int32 #f)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-cast #<abstr-halide-expr> 'int32 16)
optimized-template:
  (cast ... #<abstr-expr> 'int32 #f)
optimized Halide 0:
  (int32_t (sign-extend (app abstr-vals$316 0) (bitvector 32)))
optimized x86 0:
  (int32_t (sign-extend (app abstr-vals$316 0) (bitvector 32)))
Ran synthesizer for 14 ms
(model)
(vec-cast #<abstr-halide-expr> 'int32 16)
(cast ... (broadcast ... (int16_t input1_multiplier)) 'int32 #f)
Ran bounds analysis for 30 ms
Ran bounds analysis for 24 ms
"Extended success?"
#t
(cast ... (broadcast ... (int16_t input1_multiplier)) 'int32 #f)
"Building Expr:"
(vec-mul
 (vec-cast
  (vec-add
   (vec-mul
    (vec-cast
     (load
      (buffer input1 'uint8)
      (ramp
       (sca-add
        (sca-mul output.s0.x.x 16)
        (sca-add
         (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
         (var-lookup 't55)))
       1
       16)
      (aligned 1 0))
     'int16
     16)
    (sca-broadcast (int16_t (bv #x0040 16)) 16))
   (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
"Fold templates"
(list
 (vs-mpy-add
  ...
  (combine
   (vs-mpy-add
    ...
    #<load-data>
    (list (int16_t (bv #x0040 16)))
    #f
    #f
    #f
    'int16)
   (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
  (list
   (sca-mul
    (sca-cast (int8_t (bv #x01 8)) 'int16)
    (sca-cast
     (union [(&& (! xi?$322) (! xi?$323)) #(struct:int8_t (bv #x01 8))] [(|| xi?$322 (&& xi?$323 (! xi?$322))) #(struct:int16_t
                                                                                                                 (ite* (⊢ xi?$322 (bv #x0040 16)) (⊢ (&& xi?$323 (! xi?$322)) input1_multiplier)))])
     'int16))
   (sca-mul
    (sca-cast (int8_t (bv #x01 8)) 'int16)
    (sca-cast
     (union [(&& (! xi?$322) (! xi?$323)) #(struct:int8_t (bv #x01 8))] [(|| xi?$322 (&& xi?$323 (! xi?$322))) #(struct:int16_t
                                                                                                                 (ite* (⊢ xi?$322 (bv #x0040 16)) (⊢ (&& xi?$323 (! xi?$322)) input1_multiplier)))])
     'int16)))
  #f
  #f
  #f
  'int16)
 (cast
  ...
  (vs-mpy-add
   ...
   (combine
    (vs-mpy-add
     ...
     #<load-data>
     (list (int16_t (bv #x0040 16)))
     #f
     #f
     #f
     'int16)
    (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
   (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
   #f
   #f
   #f
   'int16)
  'int32
  x?$318)
 (cast ... (broadcast ... (int16_t input1_multiplier)) 'int32 x?$324))
here(#(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<load-data> (#(struct:int16_t (bv #x0040 16))) #f #f #f int16) #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t125) #(struct:int16_t (bv #xffc0 16))))> (#(struct:sca-mul #(struct:sca-cast #(struct:int8_t (bv #x01 8)) int16) #(struct:sca-cast (union #:size 2 #:hash 1440032808727) int16)) #(struct:sca-mul #(struct:sca-cast #(struct:int8_t (bv #x01 8)) int16) #(struct:sca-cast (union #:size 2 #:hash 1440032808727) int16))) #f #f #f int16) #(struct:cast ... #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<load-data> (#(struct:int16_t (bv #x0040 16))) #f #f #f int16) #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t125) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int16) int32 x?$318) #(struct:cast ... #(struct:broadcast ... #(struct:int16_t input1_multiplier)) int32 x?$324))

(list (vs-mpy-add ... (vs-mpy-add ... (combine (vs-mpy-add ... #<load-data> (list (int16_t (bv #x0040 16))) #f #f #f 'int16) (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))))) (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8))) #f #f #f 'int16) (list (int16_t (ite x?$400 (bv #x0040 16) input1_multiplier))) #f #f #f 'int32) (vs-mpy-add ... #<load-data> (list (int16_t (ite x?$401 (bv #x0040 16) input1_multiplier))) #f #f #f 'int32) (vv-mpy-add ... (vs-mpy-add ... (combine (vs-mpy-add ... #<load-data> (list (int16_t (bv #x0040 16))) #f #f #f 'int16) (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))))) (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8))) #f #f #f 'int16) '(1) (! x?$402) (! x?$403) (! x?$404) 'int32) (vv-mpy-add ... #<load-data> '(1) (! x?$405) (! x?$406) (! x?$407) 'int32))
(list (vs-mpy-add ... (broadcast ... (int16_t input1_multiplier)) (list (int16_t (ite x?$483 (bv #x0040 16) input1_multiplier))) #f #f #f 'int32) (vs-mpy-add ... #<load-data> (list (int16_t (ite x?$484 (bv #x0040 16) input1_multiplier))) #f #f #f 'int32) (vv-mpy-add ... (broadcast ... (int16_t input1_multiplier)) '(1) (! x?$485) (! x?$486) (! x?$487) 'int32) (vv-mpy-add ... #<load-data> '(1) (! x?$488) (! x?$489) (! x?$490) 'int32))
"Replace templates"
(list
 (vs-mpy-add
  ...
  (vs-mpy-add
   ...
   (combine
    (vs-mpy-add
     ...
     #<load-data>
     (list (int16_t (bv #x0040 16)))
     #f
     #f
     #f
     'int16)
    (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
   (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
   #f
   #f
   #f
   'int16)
  (list (int16_t (ite x?$400 (bv #x0040 16) input1_multiplier)))
  #f
  #f
  #f
  'int32)
 (vs-mpy-add
  ...
  #<load-data>
  (list (int16_t (ite x?$401 (bv #x0040 16) input1_multiplier)))
  #f
  #f
  #f
  'int32)
 (vv-mpy-add
  ...
  (vs-mpy-add
   ...
   (combine
    (vs-mpy-add
     ...
     #<load-data>
     (list (int16_t (bv #x0040 16)))
     #f
     #f
     #f
     'int16)
    (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
   (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
   #f
   #f
   #f
   'int16)
  '(1)
  (! x?$402)
  (! x?$403)
  (! x?$404)
  'int32)
 (vv-mpy-add ... #<load-data> '(1) (! x?$405) (! x?$406) (! x?$407) 'int32)
 (vs-mpy-add
  ...
  (broadcast ... (int16_t input1_multiplier))
  (list (int16_t (ite x?$483 (bv #x0040 16) input1_multiplier)))
  #f
  #f
  #f
  'int32)
 (vs-mpy-add
  ...
  #<load-data>
  (list (int16_t (ite x?$484 (bv #x0040 16) input1_multiplier)))
  #f
  #f
  #f
  'int32)
 (vv-mpy-add
  ...
  (broadcast ... (int16_t input1_multiplier))
  '(1)
  (! x?$485)
  (! x?$486)
  (! x?$487)
  'int32)
 (vv-mpy-add ... #<load-data> '(1) (! x?$488) (! x?$489) (! x?$490) 'int32))
run-x86-synthesizer
halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-mul
    (vec-cast
     (load
      (buffer input1 'uint8)
      (ramp
       (sca-add
        (sca-mul output.s0.x.x 16)
        (sca-add
         (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
         (var-lookup 't55)))
       1
       16)
      (aligned 1 0))
     'int16
     16)
    (sca-broadcast (int16_t (bv #x0040 16)) 16))
   (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
template:
  (vs-mpy-add
 ...
 #<load-data>
 (list (int16_t (ite x?$401 (bv #x0040 16) input1_multiplier)))
 #f
 #f
 #f
 'int32)
axioms:
  '()
optimized-halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-mul
    (vec-cast
     (load
      (buffer input1 'uint8)
      (ramp
       (sca-add
        (sca-mul output.s0.x.x 16)
        (sca-add
         (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
         (var-lookup 't55)))
       1
       16)
      (aligned 1 0))
     'int16
     16)
    (sca-broadcast (int16_t (bv #x0040 16)) 16))
   (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
optimized-template:
  (vs-mpy-add
 ...
 #<load-data>
 (list (int16_t (ite x?$401 (bv #x0040 16) input1_multiplier)))
 #f
 #f
 #f
 'int32)
optimized Halide 0:
  (int32_t
 (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))))
optimized x86 0:
  (int32_t
 (bvmul (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 32)) (sign-extend (ite x?$401 (bv #x0040 16) input1_multiplier) (bitvector 32))))
run-x86-synthesizer
halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-mul
    (vec-cast
     (load
      (buffer input1 'uint8)
      (ramp
       (sca-add
        (sca-mul output.s0.x.x 16)
        (sca-add
         (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
         (var-lookup 't55)))
       1
       16)
      (aligned 1 0))
     'int16
     16)
    (sca-broadcast (int16_t (bv #x0040 16)) 16))
   (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
template:
  (vv-mpy-add ... #<load-data> '(1) (! x?$405) (! x?$406) (! x?$407) 'int32)
axioms:
  '()
optimized-halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-mul
    (vec-cast
     (load
      (buffer input1 'uint8)
      (ramp
       (sca-add
        (sca-mul output.s0.x.x 16)
        (sca-add
         (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
         (var-lookup 't55)))
       1
       16)
      (aligned 1 0))
     'int16
     16)
    (sca-broadcast (int16_t (bv #x0040 16)) 16))
   (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
optimized-template:
  (vv-mpy-add ... #<load-data> '(1) (! x?$405) (! x?$406) (! x?$407) 'int32)
optimized Halide 0:
  (int32_t
 (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))))
optimized x86 0:
  (int32_t
 (ite* (⊢ (&& x?$407 (! (&& (! x?$405) (! x?$407)))) (ite x?$405 (bvadd (bvmul (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 32)) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 32))) (ite x?$406 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$406 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (bvmul (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 32)) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$406 (bv #x00000000 32) (bv #x00000001 32))))) (bvmul (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 32)) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$406 (bv #x00000000 32) (bv #x00000001 32)))))))) (⊢ (|| (&& (! x?$405) (! x?$407)) (&& (! x?$407) (! (&& (! x?$405) (! x?$407))))) (bvashr (ite x?$405 (bvadd (bvmul (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 32)) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 32))) (ite x?$406 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$406 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (bvmul (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 32)) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$406 (bv #x00000000 32) (bv #x00000001 32))))) (bvmul (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 32)) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$406 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000001 32)))))
run-x86-synthesizer
halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-mul
    (vec-cast
     (load
      (buffer input1 'uint8)
      (ramp
       (sca-add
        (sca-mul output.s0.x.x 16)
        (sca-add
         (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
         (var-lookup 't55)))
       1
       16)
      (aligned 1 0))
     'int16
     16)
    (sca-broadcast (int16_t (bv #x0040 16)) 16))
   (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
template:
  (vs-mpy-add
 ...
 #<load-data>
 (list (int16_t (ite x?$484 (bv #x0040 16) input1_multiplier)))
 #f
 #f
 #f
 'int32)
axioms:
  '()
optimized-halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-mul
    (vec-cast
     (load
      (buffer input1 'uint8)
      (ramp
       (sca-add
        (sca-mul output.s0.x.x 16)
        (sca-add
         (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
         (var-lookup 't55)))
       1
       16)
      (aligned 1 0))
     'int16
     16)
    (sca-broadcast (int16_t (bv #x0040 16)) 16))
   (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
optimized-template:
  (vs-mpy-add
 ...
 #<load-data>
 (list (int16_t (ite x?$484 (bv #x0040 16) input1_multiplier)))
 #f
 #f
 #f
 'int32)
optimized Halide 0:
  (int32_t
 (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))))
optimized x86 0:
  (int32_t
 (bvmul (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 32)) (sign-extend (ite x?$484 (bv #x0040 16) input1_multiplier) (bitvector 32))))
run-x86-synthesizer
halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-mul
    (vec-cast
     (load
      (buffer input1 'uint8)
      (ramp
       (sca-add
        (sca-mul output.s0.x.x 16)
        (sca-add
         (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
         (var-lookup 't55)))
       1
       16)
      (aligned 1 0))
     'int16
     16)
    (sca-broadcast (int16_t (bv #x0040 16)) 16))
   (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
template:
  (vv-mpy-add ... #<load-data> '(1) (! x?$488) (! x?$489) (! x?$490) 'int32)
axioms:
  '()
optimized-halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-mul
    (vec-cast
     (load
      (buffer input1 'uint8)
      (ramp
       (sca-add
        (sca-mul output.s0.x.x 16)
        (sca-add
         (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
         (var-lookup 't55)))
       1
       16)
      (aligned 1 0))
     'int16
     16)
    (sca-broadcast (int16_t (bv #x0040 16)) 16))
   (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
optimized-template:
  (vv-mpy-add ... #<load-data> '(1) (! x?$488) (! x?$489) (! x?$490) 'int32)
optimized Halide 0:
  (int32_t
 (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))))
optimized x86 0:
  (int32_t
 (ite* (⊢ (&& x?$490 (! (&& (! x?$488) (! x?$490)))) (ite x?$488 (bvadd (bvmul (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 32)) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 32))) (ite x?$489 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$489 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (bvmul (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 32)) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$489 (bv #x00000000 32) (bv #x00000001 32))))) (bvmul (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 32)) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$489 (bv #x00000000 32) (bv #x00000001 32)))))))) (⊢ (|| (&& (! x?$488) (! x?$490)) (&& (! x?$490) (! (&& (! x?$488) (! x?$490))))) (bvashr (ite x?$488 (bvadd (bvmul (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 32)) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 32))) (ite x?$489 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$489 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (bvmul (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 32)) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$489 (bv #x00000000 32) (bv #x00000001 32))))) (bvmul (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 32)) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$489 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000001 32)))))
run-x86-synthesizer
halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-mul
    (vec-cast
     (load
      (buffer input1 'uint8)
      (ramp
       (sca-add
        (sca-mul output.s0.x.x 16)
        (sca-add
         (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
         (var-lookup 't55)))
       1
       16)
      (aligned 1 0))
     'int16
     16)
    (sca-broadcast (int16_t (bv #x0040 16)) 16))
   (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
template:
  (cast ... (broadcast ... (int16_t input1_multiplier)) 'int32 x?$324)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-mul
    (vec-cast
     (load
      (buffer input1 'uint8)
      (ramp
       (sca-add
        (sca-mul output.s0.x.x 16)
        (sca-add
         (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
         (var-lookup 't55)))
       1
       16)
      (aligned 1 0))
     'int16
     16)
    (sca-broadcast (int16_t (bv #x0040 16)) 16))
   (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
  'int32
  16)
 (vec-cast #<abstr-halide-expr> 'int32 16))
optimized-template:
  (cast ... #<abstr-expr> 'int32 x?$324)
optimized Halide 0:
  (int32_t
 (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend (app abstr-vals$491 0) (bitvector 32))))
optimized x86 0:
  (int32_t (sign-extend (app abstr-vals$491 0) (bitvector 32)))
run-x86-synthesizer
halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-mul
    (vec-cast
     (load
      (buffer input1 'uint8)
      (ramp
       (sca-add
        (sca-mul output.s0.x.x 16)
        (sca-add
         (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
         (var-lookup 't55)))
       1
       16)
      (aligned 1 0))
     'int16
     16)
    (sca-broadcast (int16_t (bv #x0040 16)) 16))
   (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
template:
  (vs-mpy-add
 ...
 (broadcast ... (int16_t input1_multiplier))
 (list (int16_t (ite x?$483 (bv #x0040 16) input1_multiplier)))
 #f
 #f
 #f
 'int32)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-mul
    (vec-cast
     (load
      (buffer input1 'uint8)
      (ramp
       (sca-add
        (sca-mul output.s0.x.x 16)
        (sca-add
         (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
         (var-lookup 't55)))
       1
       16)
      (aligned 1 0))
     'int16
     16)
    (sca-broadcast (int16_t (bv #x0040 16)) 16))
   (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
  'int32
  16)
 (vec-cast #<abstr-halide-expr> 'int32 16))
optimized-template:
  (vs-mpy-add
 ...
 #<abstr-expr>
 (list (int16_t (ite x?$483 (bv #x0040 16) input1_multiplier)))
 #f
 #f
 #f
 'int32)
optimized Halide 0:
  (int32_t
 (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend (app abstr-vals$492 0) (bitvector 32))))
optimized x86 0:
  (int32_t
 (bvmul (sign-extend (app abstr-vals$492 0) (bitvector 32)) (sign-extend (ite x?$483 (bv #x0040 16) input1_multiplier) (bitvector 32))))
run-x86-synthesizer
halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-mul
    (vec-cast
     (load
      (buffer input1 'uint8)
      (ramp
       (sca-add
        (sca-mul output.s0.x.x 16)
        (sca-add
         (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
         (var-lookup 't55)))
       1
       16)
      (aligned 1 0))
     'int16
     16)
    (sca-broadcast (int16_t (bv #x0040 16)) 16))
   (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
template:
  (vv-mpy-add
 ...
 (broadcast ... (int16_t input1_multiplier))
 '(1)
 (! x?$485)
 (! x?$486)
 (! x?$487)
 'int32)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-mul
    (vec-cast
     (load
      (buffer input1 'uint8)
      (ramp
       (sca-add
        (sca-mul output.s0.x.x 16)
        (sca-add
         (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
         (var-lookup 't55)))
       1
       16)
      (aligned 1 0))
     'int16
     16)
    (sca-broadcast (int16_t (bv #x0040 16)) 16))
   (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
  'int32
  16)
 (vec-cast #<abstr-halide-expr> 'int32 16))
optimized-template:
  (vv-mpy-add ... #<abstr-expr> '(1) (! x?$485) (! x?$486) (! x?$487) 'int32)
optimized Halide 0:
  (int32_t
 (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend (app abstr-vals$493 0) (bitvector 32))))
optimized x86 0:
  (int32_t
 (ite* (⊢ (&& x?$487 (! (&& (! x?$485) (! x?$487)))) (ite x?$485 (bvadd (bvmul (sign-extend (app abstr-vals$493 0) (bitvector 32)) (sign-extend (app abstr-vals$493 1) (bitvector 32))) (ite x?$486 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$486 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (bvmul (sign-extend (app abstr-vals$493 0) (bitvector 32)) (sign-extend (app abstr-vals$493 1) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$486 (bv #x00000000 32) (bv #x00000001 32))))) (bvmul (sign-extend (app abstr-vals$493 0) (bitvector 32)) (sign-extend (app abstr-vals$493 1) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$486 (bv #x00000000 32) (bv #x00000001 32)))))))) (⊢ (|| (&& (! x?$485) (! x?$487)) (&& (! x?$487) (! (&& (! x?$485) (! x?$487))))) (bvashr (ite x?$485 (bvadd (bvmul (sign-extend (app abstr-vals$493 0) (bitvector 32)) (sign-extend (app abstr-vals$493 1) (bitvector 32))) (ite x?$486 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$486 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (bvmul (sign-extend (app abstr-vals$493 0) (bitvector 32)) (sign-extend (app abstr-vals$493 1) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$486 (bv #x00000000 32) (bv #x00000001 32))))) (bvmul (sign-extend (app abstr-vals$493 0) (bitvector 32)) (sign-extend (app abstr-vals$493 1) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$486 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000001 32)))))
run-x86-synthesizer
halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-mul
    (vec-cast
     (load
      (buffer input1 'uint8)
      (ramp
       (sca-add
        (sca-mul output.s0.x.x 16)
        (sca-add
         (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
         (var-lookup 't55)))
       1
       16)
      (aligned 1 0))
     'int16
     16)
    (sca-broadcast (int16_t (bv #x0040 16)) 16))
   (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
template:
  (vs-mpy-add
 ...
 (combine
  (vs-mpy-add ... #<load-data> (list (int16_t (bv #x0040 16))) #f #f #f 'int16)
  (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
 (list
  (sca-mul
   (sca-cast (int8_t (bv #x01 8)) 'int16)
   (sca-cast
    (union [(&& (! xi?$322) (! xi?$323)) #(struct:int8_t (bv #x01 8))] [(|| xi?$322 (&& xi?$323 (! xi?$322))) #(struct:int16_t
                                                                                                                (ite* (⊢ xi?$322 (bv #x0040 16)) (⊢ (&& xi?$323 (! xi?$322)) input1_multiplier)))])
    'int16))
  (sca-mul
   (sca-cast (int8_t (bv #x01 8)) 'int16)
   (sca-cast
    (union [(&& (! xi?$322) (! xi?$323)) #(struct:int8_t (bv #x01 8))] [(|| xi?$322 (&& xi?$323 (! xi?$322))) #(struct:int16_t
                                                                                                                (ite* (⊢ xi?$322 (bv #x0040 16)) (⊢ (&& xi?$323 (! xi?$322)) input1_multiplier)))])
    'int16)))
 #f
 #f
 #f
 'int16)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$494 idx) (bv #x3fc0 16)) (bvsle (bv #x0000 16) (app abstr-vals$494 idx))))
 (forall (idx) (bvsle (app abstr-vals$495 idx) (bv #x7fc0 16))))
optimized-halide-expr:
  (vec-mul
 (vec-cast (vec-add #<abstr-halide-expr> #<abstr-halide-expr>) 'int32 16)
 (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
optimized-template:
  (vs-mpy-add
 ...
 (combine #<abstr-expr> #<abstr-expr>)
 (list
  (sca-mul
   (sca-cast (int8_t (bv #x01 8)) 'int16)
   (sca-cast
    (union [(&& (! xi?$322) (! xi?$323)) #(struct:int8_t (bv #x01 8))] [(|| xi?$322 (&& xi?$323 (! xi?$322))) #(struct:int16_t
                                                                                                                (ite* (⊢ xi?$322 (bv #x0040 16)) (⊢ (&& xi?$323 (! xi?$322)) input1_multiplier)))])
    'int16))
  (sca-mul
   (sca-cast (int8_t (bv #x01 8)) 'int16)
   (sca-cast
    (union [(&& (! xi?$322) (! xi?$323)) #(struct:int8_t (bv #x01 8))] [(|| xi?$322 (&& xi?$323 (! xi?$322))) #(struct:int16_t
                                                                                                                (ite* (⊢ xi?$322 (bv #x0040 16)) (⊢ (&& xi?$323 (! xi?$322)) input1_multiplier)))])
    'int16)))
 #f
 #f
 #f
 'int16)
optimized Halide 0:
  (int32_t
 (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (bvadd (app abstr-vals$494 0) (app abstr-vals$495 0)) (bitvector 32))))
optimized x86 0:
  (int16_t
 (bvadd (bvmul (app abstr-vals$495 0) (ite* (⊢ (&& (! xi?$322) (! xi?$323)) (bv #x0001 16)) (⊢ (|| xi?$322 (&& xi?$323 (! xi?$322))) (ite* (⊢ xi?$322 (bv #x0040 16)) (⊢ (&& xi?$323 (! xi?$322)) input1_multiplier))))) (bvmul (app abstr-vals$494 0) (ite* (⊢ (&& (! xi?$322) (! xi?$323)) (bv #x0001 16)) (⊢ (|| xi?$322 (&& xi?$323 (! xi?$322))) (ite* (⊢ xi?$322 (bv #x0040 16)) (⊢ (&& xi?$323 (! xi?$322)) input1_multiplier)))))))
Ran synthesizer for 36 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-mul
    (vec-cast
     (load
      (buffer input1 'uint8)
      (ramp
       (sca-add
        (sca-mul output.s0.x.x 16)
        (sca-add
         (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
         (var-lookup 't55)))
       1
       16)
      (aligned 1 0))
     'int16
     16)
    (sca-broadcast (int16_t (bv #x0040 16)) 16))
   (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
template:
  (cast
 ...
 (vs-mpy-add
  ...
  (combine
   (vs-mpy-add
    ...
    #<load-data>
    (list (int16_t (bv #x0040 16)))
    #f
    #f
    #f
    'int16)
   (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
  (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
  #f
  #f
  #f
  'int16)
 'int32
 x?$318)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-mul
 (vec-cast #<abstr-halide-expr> 'int32 16)
 (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
optimized-template:
  (cast ... #<abstr-expr> 'int32 x?$318)
optimized Halide 0:
  (int32_t
 (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (app abstr-vals$496 0) (bitvector 32))))
optimized x86 0:
  (int32_t (sign-extend (app abstr-vals$496 0) (bitvector 32)))
run-x86-synthesizer
halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-mul
    (vec-cast
     (load
      (buffer input1 'uint8)
      (ramp
       (sca-add
        (sca-mul output.s0.x.x 16)
        (sca-add
         (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
         (var-lookup 't55)))
       1
       16)
      (aligned 1 0))
     'int16
     16)
    (sca-broadcast (int16_t (bv #x0040 16)) 16))
   (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
template:
  here
  context...:
   body of "/Users/alexanderroot/Projects/Rake/rake/rake/x86/ast/temp.rkt"
(vs-mpy-add
 ...
 (vs-mpy-add
  ...
  (combine
   (vs-mpy-add
    ...
    #<load-data>
    (list (int16_t (bv #x0040 16)))
    #f
    #f
    #f
    'int16)
   (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
  (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
  #f
  #f
  #f
  'int16)
 (list (int16_t (ite x?$400 (bv #x0040 16) input1_multiplier)))
 #f
 #f
 #f
 'int32)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-mul
 (vec-cast #<abstr-halide-expr> 'int32 16)
 (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
optimized-template:
  (vs-mpy-add
 ...
 #<abstr-expr>
 (list (int16_t (ite x?$400 (bv #x0040 16) input1_multiplier)))
 #f
 #f
 #f
 'int32)
optimized Halide 0:
  (int32_t
 (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (app abstr-vals$497 0) (bitvector 32))))
optimized x86 0:
  (int32_t
 (bvmul (sign-extend (app abstr-vals$497 0) (bitvector 32)) (sign-extend (ite x?$400 (bv #x0040 16) input1_multiplier) (bitvector 32))))
Ran synthesizer for 81 ms
(model
 [x?$400 #f])
(vec-mul
 (vec-cast #<abstr-halide-expr> 'int32 16)
 (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
(vs-mpy-add
 ...
 (vs-mpy-add
  ...
  (combine
   (vs-mpy-add
    ...
    #<load-data>
    (list (int16_t (bv #x0040 16)))
    #f
    #f
    #f
    'int16)
   (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
  (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
  #f
  #f
  #f
  'int16)
 (list (int16_t input1_multiplier))
 #f
 #f
 #f
 'int32)
Ran bounds analysis for 204 ms
Ran bounds analysis for 203 ms
"Success?"
#t
(vs-mpy-add ... (vs-mpy-add ... (combine (vs-mpy-add ... #<load-data> (list (int16_t (bv #x0040 16))) #f #f #f 'int16) (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))))) (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8))) #f #f #f 'int16) (list (int16_t input1_multiplier)) #f #f #f 'int32)

(x86) Successfully found an equivalent IR expression.

(vs-mpy-add
 ...
 (vs-mpy-add
  ...
  (combine
   (vs-mpy-add
    ...
    #<load-data>
    (list (int16_t (bv #x0040 16)))
    #f
    #f
    #f
    'int16)
   (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
  (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
  #f
  #f
  #f
  'int16)
 (list (int16_t input1_multiplier))
 #f
 #f
 #f
 'int32)

Synthesis time: 1 seconds

Synthesizing x86 for:
(vec-mul
 (vec-cast
  (vec-add
   (vec-mul
    (vec-cast
     (load
      (buffer input1 'uint8)
      (ramp
       (sca-add
        (sca-mul output.s0.x.x 16)
        (sca-add
         (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
         (var-lookup 't55)))
       1
       16)
      (aligned 1 0))
     'int16
     16)
    (sca-broadcast (int16_t (bv #x0040 16)) 16))
   (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))


synthesize-x86 output:
#<void>
#f
