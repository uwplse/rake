Lifting input expression to x86 IR...
=====================================

"Building Expr:"
(load
 (buffer rows 'int16)
 (ramp (sca-add (sca-mul (var-lookup 't56) 16) 1) 1 16)
 (aligned 16 1))
"Fold templates"
'()
here()

"Replace templates"
'()
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (load
 (buffer rows 'int16)
 (ramp (sca-add (sca-mul (var-lookup 't56) 16) 1) 1 16)
 (aligned 16 1))
template:
  #<load-data>
axioms:
  '()
optimized-halide-expr:
  (load
 (buffer rows 'int16)
 (ramp (sca-add (sca-mul (var-lookup 't56) 16) 1) 1 16)
 (aligned 16 1))
optimized-template:
  #<load-data>
optimized Halide 0:
  (int16_t (app rows (+ -15 (+ output.s0.x.x (+ -8 t172)))))
optimized x86 0:
  (int16_t (app rows (+ -15 (+ output.s0.x.x (+ -8 t172)))))
Ran synthesizer for 22 ms
(model
 [idx$0 0])
(load
 (buffer rows 'int16)
 (ramp (sca-add (sca-mul (var-lookup 't56) 16) 1) 1 16)
 (aligned 16 1))
#<load-data>
Ran bounds analysis for 27 ms
Ran bounds analysis for 16 ms
"Extended success?"
#t
#<load-data>
"Building Expr:"
(sca-broadcast (uint16_t (bv #x0002 16)) 16)
"Fold templates"
'()
here()

"Replace templates"
'()
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (sca-broadcast (uint16_t (bv #x0002 16)) 16)
template:
  (broadcast ... (uint16_t (bv #x0002 16)))
axioms:
  '()
optimized-halide-expr:
  (sca-broadcast (uint16_t (bv #x0002 16)) 16)
optimized-template:
  (broadcast ... (uint16_t (bv #x0002 16)))
optimized Halide 0:
  (uint16_t (bv #x0002 16))
optimized x86 0:
  (uint16_t (bv #x0002 16))
Ran synthesizer for 17 ms
(model)
(sca-broadcast (uint16_t (bv #x0002 16)) 16)
(broadcast ... (uint16_t (bv #x0002 16)))
Ran bounds analysis for 21 ms
Ran bounds analysis for 16 ms
"Extended success?"
#t
(broadcast ... (uint16_t (bv #x0002 16)))
"Building Expr:"
(vec-shl
 (load
  (buffer rows 'int16)
  (ramp (sca-add (sca-mul (var-lookup 't56) 16) 1) 1 16)
  (aligned 16 1))
 (sca-broadcast (uint16_t (bv #x0002 16)) 16))
"Fold templates"
'(#<load-data>)
here(#<load-data>)

"Replace templates"
'()
run-x86-synthesizer
halide-expr:
  (vec-shl
 (load
  (buffer rows 'int16)
  (ramp (sca-add (sca-mul (var-lookup 't56) 16) 1) 1 16)
  (aligned 16 1))
 (sca-broadcast (uint16_t (bv #x0002 16)) 16))
template:
  #<load-data>
axioms:
  '()
optimized-halide-expr:
  (vec-shl
 (load
  (buffer rows 'int16)
  (ramp (sca-add (sca-mul (var-lookup 't56) 16) 1) 1 16)
  (aligned 16 1))
 (sca-broadcast (uint16_t (bv #x0002 16)) 16))
optimized-template:
  #<load-data>
optimized Halide 0:
  (int16_t
 (bvshl (app rows (+ -15 (+ output.s0.x.x (+ -8 t172)))) (bv #x0002 16)))
optimized x86 0:
  (int16_t (app rows (+ -15 (+ output.s0.x.x (+ -8 t172)))))
Ran synthesizer for 47 ms
(unsat)
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (vec-shl
 (load
  (buffer rows 'int16)
  (ramp (sca-add (sca-mul (var-lookup 't56) 16) 1) 1 16)
  (aligned 16 1))
 (sca-broadcast (uint16_t (bv #x0002 16)) 16))
template:
  (vs-mpy-add ... #<load-data> (list (uint16_t (bv #x0004 16))) #f #f #f 'int16)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-shl #<abstr-halide-expr> (sca-broadcast (uint16_t (bv #x0002 16)) 16))
optimized-template:
  (vs-mpy-add ... #<abstr-expr> (list (uint16_t (bv #x0004 16))) #f #f #f 'int16)
optimized Halide 0:
  (int16_t (bvshl (app abstr-vals$129 0) (bv #x0002 16)))
optimized x86 0:
  (int16_t (bvmul (bv #x0004 16) (app abstr-vals$129 0)))
Ran synthesizer for 37 ms
(model)
(vec-shl #<abstr-halide-expr> (sca-broadcast (uint16_t (bv #x0002 16)) 16))
(vs-mpy-add ... #<load-data> (list (uint16_t (bv #x0004 16))) #f #f #f 'int16)
Ran bounds analysis for 23 ms
Ran bounds analysis for 14 ms
"Extended success?"
#t
(vs-mpy-add ... #<load-data> (list (uint16_t (bv #x0004 16))) #f #f #f 'int16)
"Building Expr:"
(load
 (buffer rows 'int16)
 (ramp (sca-mul (var-lookup 't56) 16) 1 16)
 (aligned 16 0))
"Fold templates"
'()
here()

"Replace templates"
'()
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (load
 (buffer rows 'int16)
 (ramp (sca-mul (var-lookup 't56) 16) 1 16)
 (aligned 16 0))
template:
  #<load-data>
axioms:
  '()
optimized-halide-expr:
  (load
 (buffer rows 'int16)
 (ramp (sca-mul (var-lookup 't56) 16) 1 16)
 (aligned 16 0))
optimized-template:
  #<load-data>
optimized Halide 0:
  (int16_t (app rows (+ -16 (+ output.s0.x.x (+ -8 t172)))))
optimized x86 0:
  (int16_t (app rows (+ -16 (+ output.s0.x.x (+ -8 t172)))))
Ran synthesizer for 17 ms
(model
 [idx$131 0])
(load
 (buffer rows 'int16)
 (ramp (sca-mul (var-lookup 't56) 16) 1 16)
 (aligned 16 0))
#<load-data>
Ran bounds analysis for 23 ms
Ran bounds analysis for 14 ms
"Extended success?"
#t
#<load-data>
"Building Expr:"
(load
 (buffer rows 'int16)
 (ramp (sca-add (sca-mul (var-lookup 't56) 16) 2) 1 16)
 (aligned 16 2))
"Fold templates"
'()
here()

"Replace templates"
'()
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (load
 (buffer rows 'int16)
 (ramp (sca-add (sca-mul (var-lookup 't56) 16) 2) 1 16)
 (aligned 16 2))
template:
  #<load-data>
axioms:
  '()
optimized-halide-expr:
  (load
 (buffer rows 'int16)
 (ramp (sca-add (sca-mul (var-lookup 't56) 16) 2) 1 16)
 (aligned 16 2))
optimized-template:
  #<load-data>
optimized Halide 0:
  (int16_t (app rows (+ -14 (+ output.s0.x.x (+ -8 t172)))))
optimized x86 0:
  (int16_t (app rows (+ -14 (+ output.s0.x.x (+ -8 t172)))))
Ran synthesizer for 18 ms
(model
 [idx$196 0])
(load
 (buffer rows 'int16)
 (ramp (sca-add (sca-mul (var-lookup 't56) 16) 2) 1 16)
 (aligned 16 2))
#<load-data>
Ran bounds analysis for 21 ms
Ran bounds analysis for 13 ms
"Extended success?"
#t
#<load-data>
"Building Expr:"
(sca-broadcast (int16_t (bv #x0006 16)) 16)
"Fold templates"
'()
here()

"Replace templates"
'()
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (sca-broadcast (int16_t (bv #x0006 16)) 16)
template:
  (broadcast ... (int16_t (bv #x0006 16)))
axioms:
  '()
optimized-halide-expr:
  (sca-broadcast (int16_t (bv #x0006 16)) 16)
optimized-template:
  (broadcast ... (int16_t (bv #x0006 16)))
optimized Halide 0:
  (int16_t (bv #x0006 16))
optimized x86 0:
  (int16_t (bv #x0006 16))
Ran synthesizer for 14 ms
(model)
(sca-broadcast (int16_t (bv #x0006 16)) 16)
(broadcast ... (int16_t (bv #x0006 16)))
Ran bounds analysis for 18 ms
Ran bounds analysis for 11 ms
"Extended success?"
#t
(broadcast ... (int16_t (bv #x0006 16)))
"Building Expr:"
(vec-mul
 (load
  (buffer rows 'int16)
  (ramp (sca-add (sca-mul (var-lookup 't56) 16) 2) 1 16)
  (aligned 16 2))
 (sca-broadcast (int16_t (bv #x0006 16)) 16))
"Fold templates"
'(#<load-data>)
here(#<load-data>)

"Replace templates"
'()
run-x86-synthesizer
halide-expr:
  (vec-mul
 (load
  (buffer rows 'int16)
  (ramp (sca-add (sca-mul (var-lookup 't56) 16) 2) 1 16)
  (aligned 16 2))
 (sca-broadcast (int16_t (bv #x0006 16)) 16))
template:
  #<load-data>
axioms:
  '()
optimized-halide-expr:
  (vec-mul
 (load
  (buffer rows 'int16)
  (ramp (sca-add (sca-mul (var-lookup 't56) 16) 2) 1 16)
  (aligned 16 2))
 (sca-broadcast (int16_t (bv #x0006 16)) 16))
optimized-template:
  #<load-data>
optimized Halide 0:
  (int16_t
 (bvmul (bv #x0006 16) (app rows (+ -14 (+ output.s0.x.x (+ -8 t172))))))
optimized x86 0:
  (int16_t (app rows (+ -14 (+ output.s0.x.x (+ -8 t172)))))
Ran synthesizer for 44 ms
(unsat)
"Success?"
#f
#<void>
(list (vs-mpy-add ... (union [x?$517 #<load-data>] [(! x?$517) #(struct:broadcast ... #(struct:int16_t (bv #x0006 16)))]) '(#(struct:int16_t (bv #x0006 16))) #f #f #f 'int16) (vs-mpy-add ... #<load-data> '(#(struct:int16_t (bv #x0006 16))) #f #f #f 'int16) (vv-mpy-add ... (union [x?$518 #<load-data>] [(! x?$518) #(struct:broadcast ... #(struct:int16_t (bv #x0006 16)))]) '(1) (! x?$519) (! x?$520) (! x?$521) 'int16) (vv-mpy-add ... #<load-data> '(1) (! x?$522) (! x?$523) (! x?$524) 'int16))
run-x86-synthesizer
halide-expr:
  (vec-mul
 (load
  (buffer rows 'int16)
  (ramp (sca-add (sca-mul (var-lookup 't56) 16) 2) 1 16)
  (aligned 16 2))
 (sca-broadcast (int16_t (bv #x0006 16)) 16))
template:
  (vs-mpy-add
 ...
 (union [x?$517 #<load-data>] [(! x?$517) #(struct:broadcast
                                            ...
                                            #(struct:int16_t (bv #x0006 16)))])
 '(#(struct:int16_t (bv #x0006 16)))
 #f
 #f
 #f
 'int16)
axioms:
  '()
optimized-halide-expr:
  (vec-mul
 (load
  (buffer rows 'int16)
  (ramp (sca-add (sca-mul (var-lookup 't56) 16) 2) 1 16)
  (aligned 16 2))
 (sca-broadcast (int16_t (bv #x0006 16)) 16))
optimized-template:
  (vs-mpy-add
 ...
 (union [x?$517 #<load-data>] [(! x?$517) #(struct:broadcast
                                            ...
                                            #(struct:int16_t (bv #x0006 16)))])
 '(#(struct:int16_t (bv #x0006 16)))
 #f
 #f
 #f
 'int16)
optimized Halide 0:
  (int16_t
 (bvmul (bv #x0006 16) (app rows (+ -14 (+ output.s0.x.x (+ -8 t172))))))
optimized x86 0:
  (int16_t
 (bvmul (bv #x0006 16) (ite x?$517 (app rows (+ -14 (+ output.s0.x.x (+ -8 t172)))) (bv #x0006 16))))
Ran synthesizer for 26 ms
(model
 [x?$517 #t])
(vec-mul
 (load
  (buffer rows 'int16)
  (ramp (sca-add (sca-mul (var-lookup 't56) 16) 2) 1 16)
  (aligned 16 2))
 (sca-broadcast (int16_t (bv #x0006 16)) 16))
(vs-mpy-add ... #<load-data> (list (int16_t (bv #x0006 16))) #f #f #f 'int16)
Ran bounds analysis for 21 ms
Ran bounds analysis for 12 ms
"Extended success?"
#t
(vs-mpy-add ... #<load-data> (list (int16_t (bv #x0006 16))) #f #f #f 'int16)
"Building Expr:"
(load
 (buffer rows 'int16)
 (ramp (sca-add (sca-mul (var-lookup 't56) 16) 4) 1 16)
 (aligned 16 4))
"Fold templates"
'()
here()

"Replace templates"
'()
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (load
 (buffer rows 'int16)
 (ramp (sca-add (sca-mul (var-lookup 't56) 16) 4) 1 16)
 (aligned 16 4))
template:
  #<load-data>
axioms:
  '()
optimized-halide-expr:
  (load
 (buffer rows 'int16)
 (ramp (sca-add (sca-mul (var-lookup 't56) 16) 4) 1 16)
 (aligned 16 4))
optimized-template:
  #<load-data>
optimized Halide 0:
  (int16_t (app rows (+ -12 (+ output.s0.x.x (+ -8 t172)))))
optimized x86 0:
  (int16_t (app rows (+ -12 (+ output.s0.x.x (+ -8 t172)))))
Ran synthesizer for 17 ms
(model
 [idx$525 0])
(load
 (buffer rows 'int16)
 (ramp (sca-add (sca-mul (var-lookup 't56) 16) 4) 1 16)
 (aligned 16 4))
#<load-data>
Ran bounds analysis for 25 ms
Ran bounds analysis for 17 ms
"Extended success?"
#t
#<load-data>
"Building Expr:"
(load
 (buffer rows 'int16)
 (ramp (sca-add (sca-mul (var-lookup 't56) 16) 3) 1 16)
 (aligned 16 3))
"Fold templates"
'()
here()

"Replace templates"
'()
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (load
 (buffer rows 'int16)
 (ramp (sca-add (sca-mul (var-lookup 't56) 16) 3) 1 16)
 (aligned 16 3))
template:
  #<load-data>
axioms:
  '()
optimized-halide-expr:
  (load
 (buffer rows 'int16)
 (ramp (sca-add (sca-mul (var-lookup 't56) 16) 3) 1 16)
 (aligned 16 3))
optimized-template:
  #<load-data>
optimized Halide 0:
  (int16_t (app rows (+ -13 (+ output.s0.x.x (+ -8 t172)))))
optimized x86 0:
  (int16_t (app rows (+ -13 (+ output.s0.x.x (+ -8 t172)))))
Ran synthesizer for 20 ms
(model
 [idx$590 0])
(load
 (buffer rows 'int16)
 (ramp (sca-add (sca-mul (var-lookup 't56) 16) 3) 1 16)
 (aligned 16 3))
#<load-data>
Ran bounds analysis for 24 ms
Ran bounds analysis for 15 ms
"Extended success?"
#t
#<load-data>
"Building Expr:"
(vec-shl
 (load
  (buffer rows 'int16)
  (ramp (sca-add (sca-mul (var-lookup 't56) 16) 3) 1 16)
  (aligned 16 3))
 (sca-broadcast (uint16_t (bv #x0002 16)) 16))
"Fold templates"
'(#<load-data>)
here(#<load-data>)

"Replace templates"
'()
run-x86-synthesizer
halide-expr:
  (vec-shl
 (load
  (buffer rows 'int16)
  (ramp (sca-add (sca-mul (var-lookup 't56) 16) 3) 1 16)
  (aligned 16 3))
 (sca-broadcast (uint16_t (bv #x0002 16)) 16))
template:
  #<load-data>
axioms:
  '()
optimized-halide-expr:
  (vec-shl
 (load
  (buffer rows 'int16)
  (ramp (sca-add (sca-mul (var-lookup 't56) 16) 3) 1 16)
  (aligned 16 3))
 (sca-broadcast (uint16_t (bv #x0002 16)) 16))
optimized-template:
  #<load-data>
optimized Halide 0:
  (int16_t
 (bvshl (app rows (+ -13 (+ output.s0.x.x (+ -8 t172)))) (bv #x0002 16)))
optimized x86 0:
  (int16_t (app rows (+ -13 (+ output.s0.x.x (+ -8 t172)))))
Ran synthesizer for 41 ms
(unsat)
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (vec-shl
 (load
  (buffer rows 'int16)
  (ramp (sca-add (sca-mul (var-lookup 't56) 16) 3) 1 16)
  (aligned 16 3))
 (sca-broadcast (uint16_t (bv #x0002 16)) 16))
template:
  (vs-mpy-add ... #<load-data> (list (uint16_t (bv #x0004 16))) #f #f #f 'int16)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-shl #<abstr-halide-expr> (sca-broadcast (uint16_t (bv #x0002 16)) 16))
optimized-template:
  (vs-mpy-add ... #<abstr-expr> (list (uint16_t (bv #x0004 16))) #f #f #f 'int16)
optimized Halide 0:
  (int16_t (bvshl (app abstr-vals$719 0) (bv #x0002 16)))
optimized x86 0:
  (int16_t (bvmul (bv #x0004 16) (app abstr-vals$719 0)))
Ran synthesizer for 40 ms
(model)
(vec-shl #<abstr-halide-expr> (sca-broadcast (uint16_t (bv #x0002 16)) 16))
(vs-mpy-add ... #<load-data> (list (uint16_t (bv #x0004 16))) #f #f #f 'int16)
Ran bounds analysis for 26 ms
Ran bounds analysis for 17 ms
"Extended success?"
#t
(vs-mpy-add ... #<load-data> (list (uint16_t (bv #x0004 16))) #f #f #f 'int16)
"Building Expr:"
(vec-add
 (load
  (buffer rows 'int16)
  (ramp (sca-add (sca-mul (var-lookup 't56) 16) 4) 1 16)
  (aligned 16 4))
 (vec-shl
  (load
   (buffer rows 'int16)
   (ramp (sca-add (sca-mul (var-lookup 't56) 16) 3) 1 16)
   (aligned 16 3))
  (sca-broadcast (uint16_t (bv #x0002 16)) 16)))
"Fold templates"
(list
 #<load-data>
 #<load-data>
 (vs-mpy-add
  ...
  #<load-data>
  (list
   (uint16_t (bv #x0004 16))
   (union [x?$788 #(struct:uint16_t (bv #x0004 16))] [(! x?$788) #(struct:int8_t
                                                                   (bv #x01 8))]))
  #f
  #f
  #f
  'int16)
 (vs-mpy-add
  ...
  #<load-data>
  (list (uint16_t (bv #x0004 16)))
  #f
  x?$786
  #f
  'int16)
 (vs-mpy-add
  ...
  (combine
   (vs-mpy-add
    ...
    #<load-data>
    (list (uint16_t (bv #x0004 16)))
    #f
    #f
    #f
    'int16)
   (union [x?$789 #<load-data>] [(! x?$789) #(struct:vs-mpy-add
                                              ...
                                              #<load-data>
                                              (#(struct:uint16_t
                                                 (bv #x0004 16)))
                                              #f
                                              #f
                                              #f
                                              int16)]))
  (list (uint16_t (bv #x0004 16)) (int8_t (bv #x01 8)))
  #f
  #f
  #f
  'int16))
here(#<load-data> #<load-data> #(struct:vs-mpy-add ... #<load-data> (#(struct:uint16_t (bv #x0004 16)) (union #:size 2 #:hash 1419333297825)) #f #f #f int16) #(struct:vs-mpy-add ... #<load-data> (#(struct:uint16_t (bv #x0004 16))) #f x?$786 #f int16) #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<load-data> (#(struct:uint16_t (bv #x0004 16))) #f #f #f int16) (union #:size 2 #:hash 397385459822)> (#(struct:uint16_t (bv #x0004 16)) #(struct:int8_t (bv #x01 8))) #f #f #f int16))

"Replace templates"
'()
run-x86-synthesizer
halide-expr:
  (vec-add
 (load
  (buffer rows 'int16)
  (ramp (sca-add (sca-mul (var-lookup 't56) 16) 4) 1 16)
  (aligned 16 4))
 (vec-shl
  (load
   (buffer rows 'int16)
   (ramp (sca-add (sca-mul (var-lookup 't56) 16) 3) 1 16)
   (aligned 16 3))
  (sca-broadcast (uint16_t (bv #x0002 16)) 16)))
template:
  #<load-data>
axioms:
  '()
optimized-halide-expr:
  (vec-add
 (load
  (buffer rows 'int16)
  (ramp (sca-add (sca-mul (var-lookup 't56) 16) 4) 1 16)
  (aligned 16 4))
 (vec-shl
  (load
   (buffer rows 'int16)
   (ramp (sca-add (sca-mul (var-lookup 't56) 16) 3) 1 16)
   (aligned 16 3))
  (sca-broadcast (uint16_t (bv #x0002 16)) 16)))
optimized-template:
  #<load-data>
optimized Halide 0:
  (int16_t
 (bvadd (app rows (+ -12 (+ output.s0.x.x (+ -8 t172)))) (bvshl (app rows (+ -13 (+ output.s0.x.x (+ -8 t172)))) (bv #x0002 16))))
optimized x86 0:
  (int16_t
 (ite* (⊢ (= 0 idx$721) (app rows (+ -12 (+ output.s0.x.x (+ -8 t172))))) (⊢ (= 1 idx$721) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172)))))))
Ran synthesizer for 60 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-add
 (load
  (buffer rows 'int16)
  (ramp (sca-add (sca-mul (var-lookup 't56) 16) 4) 1 16)
  (aligned 16 4))
 (vec-shl
  (load
   (buffer rows 'int16)
   (ramp (sca-add (sca-mul (var-lookup 't56) 16) 3) 1 16)
   (aligned 16 3))
  (sca-broadcast (uint16_t (bv #x0002 16)) 16)))
template:
  #<load-data>
axioms:
  '()
optimized-halide-expr:
  (vec-add
 (load
  (buffer rows 'int16)
  (ramp (sca-add (sca-mul (var-lookup 't56) 16) 4) 1 16)
  (aligned 16 4))
 (vec-shl
  (load
   (buffer rows 'int16)
   (ramp (sca-add (sca-mul (var-lookup 't56) 16) 3) 1 16)
   (aligned 16 3))
  (sca-broadcast (uint16_t (bv #x0002 16)) 16)))
optimized-template:
  #<load-data>
optimized Halide 0:
  (int16_t
 (bvadd (app rows (+ -12 (+ output.s0.x.x (+ -8 t172)))) (bvshl (app rows (+ -13 (+ output.s0.x.x (+ -8 t172)))) (bv #x0002 16))))
optimized x86 0:
  (int16_t
 (ite* (⊢ (= 0 idx$918) (app rows (+ -12 (+ output.s0.x.x (+ -8 t172))))) (⊢ (= 1 idx$918) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172)))))))
Ran synthesizer for 50 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-add
 (load
  (buffer rows 'int16)
  (ramp (sca-add (sca-mul (var-lookup 't56) 16) 4) 1 16)
  (aligned 16 4))
 (vec-shl
  (load
   (buffer rows 'int16)
   (ramp (sca-add (sca-mul (var-lookup 't56) 16) 3) 1 16)
   (aligned 16 3))
  (sca-broadcast (uint16_t (bv #x0002 16)) 16)))
template:
  (vs-mpy-add
 ...
 #<load-data>
 (list
  (uint16_t (bv #x0004 16))
  (union [x?$788 #(struct:uint16_t (bv #x0004 16))] [(! x?$788) #(struct:int8_t
                                                                  (bv #x01 8))]))
 #f
 #f
 #f
 'int16)
axioms:
  '()
optimized-halide-expr:
  (vec-add
 (load
  (buffer rows 'int16)
  (ramp (sca-add (sca-mul (var-lookup 't56) 16) 4) 1 16)
  (aligned 16 4))
 (vec-shl
  (load
   (buffer rows 'int16)
   (ramp (sca-add (sca-mul (var-lookup 't56) 16) 3) 1 16)
   (aligned 16 3))
  (sca-broadcast (uint16_t (bv #x0002 16)) 16)))
optimized-template:
  (vs-mpy-add
 ...
 #<load-data>
 (list
  (uint16_t (bv #x0004 16))
  (union [x?$788 #(struct:uint16_t (bv #x0004 16))] [(! x?$788) #(struct:int8_t
                                                                  (bv #x01 8))]))
 #f
 #f
 #f
 'int16)
optimized Halide 0:
  (int16_t
 (bvadd (app rows (+ -12 (+ output.s0.x.x (+ -8 t172)))) (bvshl (app rows (+ -13 (+ output.s0.x.x (+ -8 t172)))) (bv #x0002 16))))
optimized x86 0:
  (int16_t
 (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvmul (ite* (⊢ (= 0 idx$591) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (⊢ (= 1 idx$591) (app rows (+ -12 (+ output.s0.x.x (+ -8 t172)))))) (ite x?$788 (bv #x0004 16) (bv #x0001 16)))))
Ran synthesizer for 47 ms
(model
 [idx$591 1]
 [x?$788 #f])
(vec-add
 (load
  (buffer rows 'int16)
  (ramp (sca-add (sca-mul (var-lookup 't56) 16) 4) 1 16)
  (aligned 16 4))
 (vec-shl
  (load
   (buffer rows 'int16)
   (ramp (sca-add (sca-mul (var-lookup 't56) 16) 3) 1 16)
   (aligned 16 3))
  (sca-broadcast (uint16_t (bv #x0002 16)) 16)))
(vs-mpy-add
 ...
 #<load-data>
 (list (uint16_t (bv #x0004 16)) (int8_t (bv #x01 8)))
 #f
 #f
 #f
 'int16)
Ran bounds analysis for 23 ms
Ran bounds analysis for 16 ms
"Success?"
#t
(vs-mpy-add ... #<load-data> (list (uint16_t (bv #x0004 16)) (int8_t (bv #x01 8))) #f #f #f 'int16)
"Building Expr:"
(vec-add
 (vec-mul
  (load
   (buffer rows 'int16)
   (ramp (sca-add (sca-mul (var-lookup 't56) 16) 2) 1 16)
   (aligned 16 2))
  (sca-broadcast (int16_t (bv #x0006 16)) 16))
 (vec-add
  (load
   (buffer rows 'int16)
   (ramp (sca-add (sca-mul (var-lookup 't56) 16) 4) 1 16)
   (aligned 16 4))
  (vec-shl
   (load
    (buffer rows 'int16)
    (ramp (sca-add (sca-mul (var-lookup 't56) 16) 3) 1 16)
    (aligned 16 3))
   (sca-broadcast (uint16_t (bv #x0002 16)) 16))))
"Fold templates"
(list
 #<load-data>
 (vs-mpy-add
  ...
  #<load-data>
  (list
   (int16_t (bv #x0006 16))
   (union [xi?$985 #(struct:int16_t (bv #x0006 16))] [(&& xi?$986 (! xi?$985)) #(struct:uint16_t
                                                                                 (bv #x0004 16))] [(&& (! xi?$985) (! xi?$986)) #(struct:int8_t
                                                                                                                                  (bv #x01 8))]))
  #f
  #f
  #f
  'int16)
 (vs-mpy-add
  ...
  #<load-data>
  (list (int16_t (bv #x0006 16)))
  #f
  x?$983
  #f
  'int16)
 (vs-mpy-add
  ...
  (combine
   (vs-mpy-add
    ...
    #<load-data>
    (list (int16_t (bv #x0006 16)))
    #f
    #f
    #f
    'int16)
   (union [x?$987 #(struct:vs-mpy-add
                    ...
                    #<load-data>
                    (#(struct:int16_t (bv #x0006 16)))
                    #f
                    #f
                    #f
                    int16)] [(! x?$987) #(struct:vs-mpy-add
                                          ...
                                          #<load-data>
                                          (#(struct:uint16_t (bv #x0004 16))
                                           #(struct:int8_t (bv #x01 8)))
                                          #f
                                          #f
                                          #f
                                          int16)]))
  (list (int16_t (bv #x0006 16)) (int8_t (bv #x01 8)))
  #f
  #f
  #f
  'int16)
 #<load-data>
 (vs-mpy-add
  ...
  #<load-data>
  '(#(struct:uint16_t (bv #x0004 16))
    #(struct:int8_t (bv #x01 8))
    (union [xi?$1183 #(struct:int16_t (bv #x0006 16))] [(&& xi?$1184 (! xi?$1183)) #(struct:uint16_t
                                                                                     (bv #x0004 16))] [(&& (! xi?$1183) (! xi?$1184)) #(struct:int8_t
                                                                                                                                        (bv #x01 8))]))
  #f
  #f
  #f
  'int16)
 (vs-mpy-add
  ...
  #<load-data>
  '(#(struct:uint16_t (bv #x0004 16)) #(struct:int8_t (bv #x01 8)))
  #f
  x?$1181
  #f
  'int16)
 (vs-mpy-add
  ...
  (combine
   (vs-mpy-add
    ...
    #<load-data>
    '(#(struct:uint16_t (bv #x0004 16)) #(struct:int8_t (bv #x01 8)))
    #f
    #f
    #f
    'int16)
   (union [x?$1185 #(struct:vs-mpy-add
                     ...
                     #<load-data>
                     (#(struct:int16_t (bv #x0006 16)))
                     #f
                     #f
                     #f
                     int16)] [(! x?$1185) #(struct:vs-mpy-add
                                            ...
                                            #<load-data>
                                            (#(struct:uint16_t (bv #x0004 16))
                                             #(struct:int8_t (bv #x01 8)))
                                            #f
                                            #f
                                            #f
                                            int16)]))
  (list (uint16_t (bv #x0004 16)) (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
  #f
  #f
  #f
  'int16))
here(#<load-data> #(struct:vs-mpy-add ... #<load-data> (#(struct:int16_t (bv #x0006 16)) (union #:size 3 #:hash 1257187585350191)) #f #f #f int16) #(struct:vs-mpy-add ... #<load-data> (#(struct:int16_t (bv #x0006 16))) #f x?$983 #f int16) #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<load-data> (#(struct:int16_t (bv #x0006 16))) #f #f #f int16) (union #:size 2 #:hash 397843526548)> (#(struct:int16_t (bv #x0006 16)) #(struct:int8_t (bv #x01 8))) #f #f #f int16) #<load-data> #(struct:vs-mpy-add ... #<load-data> (#(struct:uint16_t (bv #x0004 16)) #(struct:int8_t (bv #x01 8)) (union #:size 3 #:hash 1257191165394626)) #f #f #f int16) #(struct:vs-mpy-add ... #<load-data> (#(struct:uint16_t (bv #x0004 16)) #(struct:int8_t (bv #x01 8))) #f x?$1181 #f int16) #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<load-data> (#(struct:uint16_t (bv #x0004 16)) #(struct:int8_t (bv #x01 8))) #f #f #f int16) (union #:size 2 #:hash 397836111010)> (#(struct:uint16_t (bv #x0004 16)) #(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int16))

"Replace templates"
'()
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-mul
  (load
   (buffer rows 'int16)
   (ramp (sca-add (sca-mul (var-lookup 't56) 16) 2) 1 16)
   (aligned 16 2))
  (sca-broadcast (int16_t (bv #x0006 16)) 16))
 (vec-add
  (load
   (buffer rows 'int16)
   (ramp (sca-add (sca-mul (var-lookup 't56) 16) 4) 1 16)
   (aligned 16 4))
  (vec-shl
   (load
    (buffer rows 'int16)
    (ramp (sca-add (sca-mul (var-lookup 't56) 16) 3) 1 16)
    (aligned 16 3))
   (sca-broadcast (uint16_t (bv #x0002 16)) 16))))
template:
  #<load-data>
axioms:
  '()
optimized-halide-expr:
  (vec-add
 (vec-mul
  (load
   (buffer rows 'int16)
   (ramp (sca-add (sca-mul (var-lookup 't56) 16) 2) 1 16)
   (aligned 16 2))
  (sca-broadcast (int16_t (bv #x0006 16)) 16))
 (vec-add
  (load
   (buffer rows 'int16)
   (ramp (sca-add (sca-mul (var-lookup 't56) 16) 4) 1 16)
   (aligned 16 4))
  (vec-shl
   (load
    (buffer rows 'int16)
    (ramp (sca-add (sca-mul (var-lookup 't56) 16) 3) 1 16)
    (aligned 16 3))
   (sca-broadcast (uint16_t (bv #x0002 16)) 16))))
optimized-template:
  #<load-data>
optimized Halide 0:
  (int16_t
 (bvadd (bvmul (bv #x0006 16) (app rows (+ -14 (+ output.s0.x.x (+ -8 t172))))) (bvadd (app rows (+ -12 (+ output.s0.x.x (+ -8 t172)))) (bvshl (app rows (+ -13 (+ output.s0.x.x (+ -8 t172)))) (bv #x0002 16)))))
optimized x86 0:
  (int16_t
 (ite* (⊢ (= 0 idx$1116) (app rows (+ -12 (+ output.s0.x.x (+ -8 t172))))) (⊢ (= 1 idx$1116) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (⊢ (= 2 idx$1116) (app rows (+ -14 (+ output.s0.x.x (+ -8 t172)))))))
Ran synthesizer for 63 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-mul
  (load
   (buffer rows 'int16)
   (ramp (sca-add (sca-mul (var-lookup 't56) 16) 2) 1 16)
   (aligned 16 2))
  (sca-broadcast (int16_t (bv #x0006 16)) 16))
 (vec-add
  (load
   (buffer rows 'int16)
   (ramp (sca-add (sca-mul (var-lookup 't56) 16) 4) 1 16)
   (aligned 16 4))
  (vec-shl
   (load
    (buffer rows 'int16)
    (ramp (sca-add (sca-mul (var-lookup 't56) 16) 3) 1 16)
    (aligned 16 3))
   (sca-broadcast (uint16_t (bv #x0002 16)) 16))))
template:
  #<load-data>
axioms:
  '()
optimized-halide-expr:
  (vec-add
 (vec-mul
  (load
   (buffer rows 'int16)
   (ramp (sca-add (sca-mul (var-lookup 't56) 16) 2) 1 16)
   (aligned 16 2))
  (sca-broadcast (int16_t (bv #x0006 16)) 16))
 (vec-add
  (load
   (buffer rows 'int16)
   (ramp (sca-add (sca-mul (var-lookup 't56) 16) 4) 1 16)
   (aligned 16 4))
  (vec-shl
   (load
    (buffer rows 'int16)
    (ramp (sca-add (sca-mul (var-lookup 't56) 16) 3) 1 16)
    (aligned 16 3))
   (sca-broadcast (uint16_t (bv #x0002 16)) 16))))
optimized-template:
  #<load-data>
optimized Halide 0:
  (int16_t
 (bvadd (bvmul (bv #x0006 16) (app rows (+ -14 (+ output.s0.x.x (+ -8 t172))))) (bvadd (app rows (+ -12 (+ output.s0.x.x (+ -8 t172)))) (bvshl (app rows (+ -13 (+ output.s0.x.x (+ -8 t172)))) (bv #x0002 16)))))
optimized x86 0:
  (int16_t
 (ite* (⊢ (= 0 idx$1314) (app rows (+ -12 (+ output.s0.x.x (+ -8 t172))))) (⊢ (= 1 idx$1314) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (⊢ (= 2 idx$1314) (app rows (+ -14 (+ output.s0.x.x (+ -8 t172)))))))
Ran synthesizer for 65 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-mul
  (load
   (buffer rows 'int16)
   (ramp (sca-add (sca-mul (var-lookup 't56) 16) 2) 1 16)
   (aligned 16 2))
  (sca-broadcast (int16_t (bv #x0006 16)) 16))
 (vec-add
  (load
   (buffer rows 'int16)
   (ramp (sca-add (sca-mul (var-lookup 't56) 16) 4) 1 16)
   (aligned 16 4))
  (vec-shl
   (load
    (buffer rows 'int16)
    (ramp (sca-add (sca-mul (var-lookup 't56) 16) 3) 1 16)
    (aligned 16 3))
   (sca-broadcast (uint16_t (bv #x0002 16)) 16))))
template:
  (vs-mpy-add
 ...
 #<load-data>
 (list
  (int16_t (bv #x0006 16))
  (union [xi?$985 #(struct:int16_t (bv #x0006 16))] [(&& xi?$986 (! xi?$985)) #(struct:uint16_t
                                                                                (bv #x0004 16))] [(&& (! xi?$985) (! xi?$986)) #(struct:int8_t
                                                                                                                                 (bv #x01 8))]))
 #f
 #f
 #f
 'int16)
axioms:
  '()
optimized-halide-expr:
  (vec-add
 (vec-mul
  (load
   (buffer rows 'int16)
   (ramp (sca-add (sca-mul (var-lookup 't56) 16) 2) 1 16)
   (aligned 16 2))
  (sca-broadcast (int16_t (bv #x0006 16)) 16))
 (vec-add
  (load
   (buffer rows 'int16)
   (ramp (sca-add (sca-mul (var-lookup 't56) 16) 4) 1 16)
   (aligned 16 4))
  (vec-shl
   (load
    (buffer rows 'int16)
    (ramp (sca-add (sca-mul (var-lookup 't56) 16) 3) 1 16)
    (aligned 16 3))
   (sca-broadcast (uint16_t (bv #x0002 16)) 16))))
optimized-template:
  (vs-mpy-add
 ...
 #<load-data>
 (list
  (int16_t (bv #x0006 16))
  (union [xi?$985 #(struct:int16_t (bv #x0006 16))] [(&& xi?$986 (! xi?$985)) #(struct:uint16_t
                                                                                (bv #x0004 16))] [(&& (! xi?$985) (! xi?$986)) #(struct:int8_t
                                                                                                                                 (bv #x01 8))]))
 #f
 #f
 #f
 'int16)
optimized Halide 0:
  (int16_t
 (bvadd (bvmul (bv #x0006 16) (app rows (+ -14 (+ output.s0.x.x (+ -8 t172))))) (bvadd (app rows (+ -12 (+ output.s0.x.x (+ -8 t172)))) (bvshl (app rows (+ -13 (+ output.s0.x.x (+ -8 t172)))) (bv #x0002 16)))))
optimized x86 0:
  (int16_t
 (bvadd (bvmul (bv #x0006 16) (app rows (+ -14 (+ output.s0.x.x (+ -8 t172))))) (bvmul (ite* (⊢ (= 0 idx$197) (app rows (+ -14 (+ output.s0.x.x (+ -8 t172))))) (⊢ (= 1 idx$197) (app rows (+ -12 (+ output.s0.x.x (+ -8 t172))))) (⊢ (= 2 idx$197) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172)))))) (ite* (⊢ xi?$985 (bv #x0006 16)) (⊢ (&& xi?$986 (! xi?$985)) (bv #x0004 16)) (⊢ (&& (! xi?$985) (! xi?$986)) (bv #x0001 16))))))
Ran synthesizer for 109 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-mul
  (load
   (buffer rows 'int16)
   (ramp (sca-add (sca-mul (var-lookup 't56) 16) 2) 1 16)
   (aligned 16 2))
  (sca-broadcast (int16_t (bv #x0006 16)) 16))
 (vec-add
  (load
   (buffer rows 'int16)
   (ramp (sca-add (sca-mul (var-lookup 't56) 16) 4) 1 16)
   (aligned 16 4))
  (vec-shl
   (load
    (buffer rows 'int16)
    (ramp (sca-add (sca-mul (var-lookup 't56) 16) 3) 1 16)
    (aligned 16 3))
   (sca-broadcast (uint16_t (bv #x0002 16)) 16))))
template:
  (vs-mpy-add
 ...
 #<load-data>
 (list (int16_t (bv #x0006 16)))
 #f
 x?$983
 #f
 'int16)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-add
 (vec-mul #<abstr-halide-expr> (sca-broadcast (int16_t (bv #x0006 16)) 16))
 (vec-add
  (load
   (buffer rows 'int16)
   (ramp (sca-add (sca-mul (var-lookup 't56) 16) 4) 1 16)
   (aligned 16 4))
  (vec-shl
   (load
    (buffer rows 'int16)
    (ramp (sca-add (sca-mul (var-lookup 't56) 16) 3) 1 16)
    (aligned 16 3))
   (sca-broadcast (uint16_t (bv #x0002 16)) 16))))
optimized-template:
  (vs-mpy-add
 ...
 #<abstr-expr>
 (list (int16_t (bv #x0006 16)))
 #f
 x?$983
 #f
 'int16)
optimized Halide 0:
  (int16_t
 (bvadd (bvadd (app rows (+ -12 (+ output.s0.x.x (+ -8 t172)))) (bvshl (app rows (+ -13 (+ output.s0.x.x (+ -8 t172)))) (bv #x0002 16))) (bvmul (bv #x0006 16) (app abstr-vals$1378 0))))
optimized x86 0:
  (int16_t
 (bvadd (bvmul (bv #x0006 16) (app abstr-vals$1378 0)) (ite x?$983 (bv #x0001 16) (bv #x0000 16))))
Ran synthesizer for 71 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-mul
  (load
   (buffer rows 'int16)
   (ramp (sca-add (sca-mul (var-lookup 't56) 16) 2) 1 16)
   (aligned 16 2))
  (sca-broadcast (int16_t (bv #x0006 16)) 16))
 (vec-add
  (load
   (buffer rows 'int16)
   (ramp (sca-add (sca-mul (var-lookup 't56) 16) 4) 1 16)
   (aligned 16 4))
  (vec-shl
   (load
    (buffer rows 'int16)
    (ramp (sca-add (sca-mul (var-lookup 't56) 16) 3) 1 16)
    (aligned 16 3))
   (sca-broadcast (uint16_t (bv #x0002 16)) 16))))
template:
  (vs-mpy-add
 ...
 #<load-data>
 (list
  (uint16_t (bv #x0004 16))
  (int8_t (bv #x01 8))
  (union [xi?$1183 #(struct:int16_t (bv #x0006 16))] [(&& xi?$1184 (! xi?$1183)) #(struct:uint16_t
                                                                                   (bv #x0004 16))] [(&& (! xi?$1183) (! xi?$1184)) #(struct:int8_t
                                                                                                                                      (bv #x01 8))]))
 #f
 #f
 #f
 'int16)
axioms:
  '()
optimized-halide-expr:
  (vec-add
 (vec-mul
  (load
   (buffer rows 'int16)
   (ramp (sca-add (sca-mul (var-lookup 't56) 16) 2) 1 16)
   (aligned 16 2))
  (sca-broadcast (int16_t (bv #x0006 16)) 16))
 (vec-add
  (load
   (buffer rows 'int16)
   (ramp (sca-add (sca-mul (var-lookup 't56) 16) 4) 1 16)
   (aligned 16 4))
  (vec-shl
   (load
    (buffer rows 'int16)
    (ramp (sca-add (sca-mul (var-lookup 't56) 16) 3) 1 16)
    (aligned 16 3))
   (sca-broadcast (uint16_t (bv #x0002 16)) 16))))
optimized-template:
  (vs-mpy-add
 ...
 #<load-data>
 (list
  (uint16_t (bv #x0004 16))
  (int8_t (bv #x01 8))
  (union [xi?$1183 #(struct:int16_t (bv #x0006 16))] [(&& xi?$1184 (! xi?$1183)) #(struct:uint16_t
                                                                                   (bv #x0004 16))] [(&& (! xi?$1183) (! xi?$1184)) #(struct:int8_t
                                                                                                                                      (bv #x01 8))]))
 #f
 #f
 #f
 'int16)
optimized Halide 0:
  (int16_t
 (bvadd (bvmul (bv #x0006 16) (app rows (+ -14 (+ output.s0.x.x (+ -8 t172))))) (bvadd (app rows (+ -12 (+ output.s0.x.x (+ -8 t172)))) (bvshl (app rows (+ -13 (+ output.s0.x.x (+ -8 t172)))) (bv #x0002 16)))))
optimized x86 0:
  (int16_t
 (bvadd (bvadd (app rows (+ -12 (+ output.s0.x.x (+ -8 t172)))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172)))))) (bvmul (ite* (⊢ (= 0 idx$592) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (⊢ (= 1 idx$592) (app rows (+ -12 (+ output.s0.x.x (+ -8 t172))))) (⊢ (= 2 idx$592) (app rows (+ -14 (+ output.s0.x.x (+ -8 t172)))))) (ite* (⊢ xi?$1183 (bv #x0006 16)) (⊢ (&& xi?$1184 (! xi?$1183)) (bv #x0004 16)) (⊢ (&& (! xi?$1183) (! xi?$1184)) (bv #x0001 16))))))
Ran synthesizer for 97 ms
(model
 [idx$592 2]
 [xi?$1183 #t]
 [xi?$1184 #t])
(vec-add
 (vec-mul
  (load
   (buffer rows 'int16)
   (ramp (sca-add (sca-mul (var-lookup 't56) 16) 2) 1 16)
   (aligned 16 2))
  (sca-broadcast (int16_t (bv #x0006 16)) 16))
 (vec-add
  (load
   (buffer rows 'int16)
   (ramp (sca-add (sca-mul (var-lookup 't56) 16) 4) 1 16)
   (aligned 16 4))
  (vec-shl
   (load
    (buffer rows 'int16)
    (ramp (sca-add (sca-mul (var-lookup 't56) 16) 3) 1 16)
    (aligned 16 3))
   (sca-broadcast (uint16_t (bv #x0002 16)) 16))))
(vs-mpy-add
 ...
 #<load-data>
 (list (uint16_t (bv #x0004 16)) (int8_t (bv #x01 8)) (int16_t (bv #x0006 16)))
 #f
 #f
 #f
 'int16)
Ran bounds analysis for 23 ms
Ran bounds analysis for 18 ms
"Success?"
#t
(vs-mpy-add ... #<load-data> (list (uint16_t (bv #x0004 16)) (int8_t (bv #x01 8)) (int16_t (bv #x0006 16))) #f #f #f 'int16)
"Building Expr:"
(vec-add
 (load
  (buffer rows 'int16)
  (ramp (sca-mul (var-lookup 't56) 16) 1 16)
  (aligned 16 0))
 (vec-add
  (vec-mul
   (load
    (buffer rows 'int16)
    (ramp (sca-add (sca-mul (var-lookup 't56) 16) 2) 1 16)
    (aligned 16 2))
   (sca-broadcast (int16_t (bv #x0006 16)) 16))
  (vec-add
   (load
    (buffer rows 'int16)
    (ramp (sca-add (sca-mul (var-lookup 't56) 16) 4) 1 16)
    (aligned 16 4))
   (vec-shl
    (load
     (buffer rows 'int16)
     (ramp (sca-add (sca-mul (var-lookup 't56) 16) 3) 1 16)
     (aligned 16 3))
    (sca-broadcast (uint16_t (bv #x0002 16)) 16)))))
"Fold templates"
(list
 #<load-data>
 #<load-data>
 (vs-mpy-add
  ...
  #<load-data>
  (list
   (uint16_t (bv #x0004 16))
   (int8_t (bv #x01 8))
   (int16_t (bv #x0006 16))
   (union [xi?$1446 #(struct:int16_t (bv #x0006 16))] [(&& xi?$1447 (! xi?$1446)) #(struct:uint16_t
                                                                                    (bv #x0004 16))] [(&& (! xi?$1446) (! xi?$1447)) #(struct:int8_t
                                                                                                                                       (bv #x01 8))]))
  #f
  #f
  #f
  'int16)
 (vs-mpy-add
  ...
  #<load-data>
  (list
   (uint16_t (bv #x0004 16))
   (int8_t (bv #x01 8))
   (int16_t (bv #x0006 16)))
  #f
  x?$1444
  #f
  'int16)
 (vs-mpy-add
  ...
  (combine
   (vs-mpy-add
    ...
    #<load-data>
    (list
     (uint16_t (bv #x0004 16))
     (int8_t (bv #x01 8))
     (int16_t (bv #x0006 16)))
    #f
    #f
    #f
    'int16)
   (union [x?$1448 #<load-data>] [(! x?$1448) #(struct:vs-mpy-add
                                                ...
                                                #<load-data>
                                                (#(struct:uint16_t
                                                   (bv #x0004 16))
                                                 #(struct:int8_t (bv #x01 8))
                                                 #(struct:int16_t
                                                   (bv #x0006 16)))
                                                #f
                                                #f
                                                #f
                                                int16)]))
  (list
   (uint16_t (bv #x0004 16))
   (int8_t (bv #x01 8))
   (int16_t (bv #x0006 16))
   (int8_t (bv #x01 8)))
  #f
  #f
  #f
  'int16))
here(#<load-data> #<load-data> #(struct:vs-mpy-add ... #<load-data> (#(struct:uint16_t (bv #x0004 16)) #(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0006 16)) (union #:size 3 #:hash 1255757832570678)) #f #f #f int16) #(struct:vs-mpy-add ... #<load-data> (#(struct:uint16_t (bv #x0004 16)) #(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0006 16))) #f x?$1444 #f int16) #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<load-data> (#(struct:uint16_t (bv #x0004 16)) #(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0006 16))) #f #f #f int16) (union #:size 2 #:hash 408915914964)> (#(struct:uint16_t (bv #x0004 16)) #(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0006 16)) #(struct:int8_t (bv #x01 8))) #f #f #f int16))

"Replace templates"
'()
run-x86-synthesizer
halide-expr:
  (vec-add
 (load
  (buffer rows 'int16)
  (ramp (sca-mul (var-lookup 't56) 16) 1 16)
  (aligned 16 0))
 (vec-add
  (vec-mul
   (load
    (buffer rows 'int16)
    (ramp (sca-add (sca-mul (var-lookup 't56) 16) 2) 1 16)
    (aligned 16 2))
   (sca-broadcast (int16_t (bv #x0006 16)) 16))
  (vec-add
   (load
    (buffer rows 'int16)
    (ramp (sca-add (sca-mul (var-lookup 't56) 16) 4) 1 16)
    (aligned 16 4))
   (vec-shl
    (load
     (buffer rows 'int16)
     (ramp (sca-add (sca-mul (var-lookup 't56) 16) 3) 1 16)
     (aligned 16 3))
    (sca-broadcast (uint16_t (bv #x0002 16)) 16)))))
template:
  #<load-data>
axioms:
  '()
optimized-halide-expr:
  (vec-add
 (load
  (buffer rows 'int16)
  (ramp (sca-mul (var-lookup 't56) 16) 1 16)
  (aligned 16 0))
 (vec-add
  (vec-mul
   (load
    (buffer rows 'int16)
    (ramp (sca-add (sca-mul (var-lookup 't56) 16) 2) 1 16)
    (aligned 16 2))
   (sca-broadcast (int16_t (bv #x0006 16)) 16))
  (vec-add
   (load
    (buffer rows 'int16)
    (ramp (sca-add (sca-mul (var-lookup 't56) 16) 4) 1 16)
    (aligned 16 4))
   (vec-shl
    (load
     (buffer rows 'int16)
     (ramp (sca-add (sca-mul (var-lookup 't56) 16) 3) 1 16)
     (aligned 16 3))
    (sca-broadcast (uint16_t (bv #x0002 16)) 16)))))
optimized-template:
  #<load-data>
optimized Halide 0:
  (int16_t
 (bvadd (app rows (+ -16 (+ output.s0.x.x (+ -8 t172)))) (bvadd (bvmul (bv #x0006 16) (app rows (+ -14 (+ output.s0.x.x (+ -8 t172))))) (bvadd (app rows (+ -12 (+ output.s0.x.x (+ -8 t172)))) (bvshl (app rows (+ -13 (+ output.s0.x.x (+ -8 t172)))) (bv #x0002 16))))))
optimized x86 0:
  (int16_t
 (ite* (⊢ (= 0 idx$1379) (app rows (+ -16 (+ output.s0.x.x (+ -8 t172))))) (⊢ (= 1 idx$1379) (app rows (+ -12 (+ output.s0.x.x (+ -8 t172))))) (⊢ (= 2 idx$1379) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (⊢ (= 3 idx$1379) (app rows (+ -14 (+ output.s0.x.x (+ -8 t172)))))))
Ran synthesizer for 66 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-add
 (load
  (buffer rows 'int16)
  (ramp (sca-mul (var-lookup 't56) 16) 1 16)
  (aligned 16 0))
 (vec-add
  (vec-mul
   (load
    (buffer rows 'int16)
    (ramp (sca-add (sca-mul (var-lookup 't56) 16) 2) 1 16)
    (aligned 16 2))
   (sca-broadcast (int16_t (bv #x0006 16)) 16))
  (vec-add
   (load
    (buffer rows 'int16)
    (ramp (sca-add (sca-mul (var-lookup 't56) 16) 4) 1 16)
    (aligned 16 4))
   (vec-shl
    (load
     (buffer rows 'int16)
     (ramp (sca-add (sca-mul (var-lookup 't56) 16) 3) 1 16)
     (aligned 16 3))
    (sca-broadcast (uint16_t (bv #x0002 16)) 16)))))
template:
  #<load-data>
axioms:
  '()
optimized-halide-expr:
  (vec-add
 (load
  (buffer rows 'int16)
  (ramp (sca-mul (var-lookup 't56) 16) 1 16)
  (aligned 16 0))
 (vec-add
  (vec-mul
   (load
    (buffer rows 'int16)
    (ramp (sca-add (sca-mul (var-lookup 't56) 16) 2) 1 16)
    (aligned 16 2))
   (sca-broadcast (int16_t (bv #x0006 16)) 16))
  (vec-add
   (load
    (buffer rows 'int16)
    (ramp (sca-add (sca-mul (var-lookup 't56) 16) 4) 1 16)
    (aligned 16 4))
   (vec-shl
    (load
     (buffer rows 'int16)
     (ramp (sca-add (sca-mul (var-lookup 't56) 16) 3) 1 16)
     (aligned 16 3))
    (sca-broadcast (uint16_t (bv #x0002 16)) 16)))))
optimized-template:
  #<load-data>
optimized Halide 0:
  (int16_t
 (bvadd (app rows (+ -16 (+ output.s0.x.x (+ -8 t172)))) (bvadd (bvmul (bv #x0006 16) (app rows (+ -14 (+ output.s0.x.x (+ -8 t172))))) (bvadd (app rows (+ -12 (+ output.s0.x.x (+ -8 t172)))) (bvshl (app rows (+ -13 (+ output.s0.x.x (+ -8 t172)))) (bv #x0002 16))))))
optimized x86 0:
  (int16_t
 (ite* (⊢ (= 0 idx$1577) (app rows (+ -16 (+ output.s0.x.x (+ -8 t172))))) (⊢ (= 1 idx$1577) (app rows (+ -12 (+ output.s0.x.x (+ -8 t172))))) (⊢ (= 2 idx$1577) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (⊢ (= 3 idx$1577) (app rows (+ -14 (+ output.s0.x.x (+ -8 t172)))))))
Ran synthesizer for 68 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-add
 (load
  (buffer rows 'int16)
  (ramp (sca-mul (var-lookup 't56) 16) 1 16)
  (aligned 16 0))
 (vec-add
  (vec-mul
   (load
    (buffer rows 'int16)
    (ramp (sca-add (sca-mul (var-lookup 't56) 16) 2) 1 16)
    (aligned 16 2))
   (sca-broadcast (int16_t (bv #x0006 16)) 16))
  (vec-add
   (load
    (buffer rows 'int16)
    (ramp (sca-add (sca-mul (var-lookup 't56) 16) 4) 1 16)
    (aligned 16 4))
   (vec-shl
    (load
     (buffer rows 'int16)
     (ramp (sca-add (sca-mul (var-lookup 't56) 16) 3) 1 16)
     (aligned 16 3))
    (sca-broadcast (uint16_t (bv #x0002 16)) 16)))))
template:
  (vs-mpy-add
 ...
 #<load-data>
 (list
  (uint16_t (bv #x0004 16))
  (int8_t (bv #x01 8))
  (int16_t (bv #x0006 16))
  (union [xi?$1446 #(struct:int16_t (bv #x0006 16))] [(&& xi?$1447 (! xi?$1446)) #(struct:uint16_t
                                                                                   (bv #x0004 16))] [(&& (! xi?$1446) (! xi?$1447)) #(struct:int8_t
                                                                                                                                      (bv #x01 8))]))
 #f
 #f
 #f
 'int16)
axioms:
  '()
optimized-halide-expr:
  (vec-add
 (load
  (buffer rows 'int16)
  (ramp (sca-mul (var-lookup 't56) 16) 1 16)
  (aligned 16 0))
 (vec-add
  (vec-mul
   (load
    (buffer rows 'int16)
    (ramp (sca-add (sca-mul (var-lookup 't56) 16) 2) 1 16)
    (aligned 16 2))
   (sca-broadcast (int16_t (bv #x0006 16)) 16))
  (vec-add
   (load
    (buffer rows 'int16)
    (ramp (sca-add (sca-mul (var-lookup 't56) 16) 4) 1 16)
    (aligned 16 4))
   (vec-shl
    (load
     (buffer rows 'int16)
     (ramp (sca-add (sca-mul (var-lookup 't56) 16) 3) 1 16)
     (aligned 16 3))
    (sca-broadcast (uint16_t (bv #x0002 16)) 16)))))
optimized-template:
  (vs-mpy-add
 ...
 #<load-data>
 (list
  (uint16_t (bv #x0004 16))
  (int8_t (bv #x01 8))
  (int16_t (bv #x0006 16))
  (union [xi?$1446 #(struct:int16_t (bv #x0006 16))] [(&& xi?$1447 (! xi?$1446)) #(struct:uint16_t
                                                                                   (bv #x0004 16))] [(&& (! xi?$1446) (! xi?$1447)) #(struct:int8_t
                                                                                                                                      (bv #x01 8))]))
 #f
 #f
 #f
 'int16)
optimized Halide 0:
  (int16_t
 (bvadd (app rows (+ -16 (+ output.s0.x.x (+ -8 t172)))) (bvadd (bvmul (bv #x0006 16) (app rows (+ -14 (+ output.s0.x.x (+ -8 t172))))) (bvadd (app rows (+ -12 (+ output.s0.x.x (+ -8 t172)))) (bvshl (app rows (+ -13 (+ output.s0.x.x (+ -8 t172)))) (bv #x0002 16))))))
optimized x86 0:
  (int16_t
 (bvadd (bvadd (bvmul (bv #x0006 16) (app rows (+ -14 (+ output.s0.x.x (+ -8 t172))))) (bvadd (app rows (+ -12 (+ output.s0.x.x (+ -8 t172)))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))))) (bvmul (ite* (⊢ (= 0 idx$593) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (⊢ (= 1 idx$593) (app rows (+ -12 (+ output.s0.x.x (+ -8 t172))))) (⊢ (= 2 idx$593) (app rows (+ -14 (+ output.s0.x.x (+ -8 t172))))) (⊢ (= 3 idx$593) (app rows (+ -16 (+ output.s0.x.x (+ -8 t172)))))) (ite* (⊢ xi?$1446 (bv #x0006 16)) (⊢ (&& xi?$1447 (! xi?$1446)) (bv #x0004 16)) (⊢ (&& (! xi?$1446) (! xi?$1447)) (bv #x0001 16))))))
Ran synthesizer for 197 ms
(model
 [idx$593 3]
 [xi?$1446 #f]
 [xi?$1447 #f])
(vec-add
 (load
  (buffer rows 'int16)
  (ramp (sca-mul (var-lookup 't56) 16) 1 16)
  (aligned 16 0))
 (vec-add
  (vec-mul
   (load
    (buffer rows 'int16)
    (ramp (sca-add (sca-mul (var-lookup 't56) 16) 2) 1 16)
    (aligned 16 2))
   (sca-broadcast (int16_t (bv #x0006 16)) 16))
  (vec-add
   (load
    (buffer rows 'int16)
    (ramp (sca-add (sca-mul (var-lookup 't56) 16) 4) 1 16)
    (aligned 16 4))
   (vec-shl
    (load
     (buffer rows 'int16)
     (ramp (sca-add (sca-mul (var-lookup 't56) 16) 3) 1 16)
     (aligned 16 3))
    (sca-broadcast (uint16_t (bv #x0002 16)) 16)))))
(vs-mpy-add
 ...
 #<load-data>
 (list
  (uint16_t (bv #x0004 16))
  (int8_t (bv #x01 8))
  (int16_t (bv #x0006 16))
  (int8_t (bv #x01 8)))
 #f
 #f
 #f
 'int16)
Ran bounds analysis for 24 ms
Ran bounds analysis for 18 ms
"Success?"
#t
(vs-mpy-add ... #<load-data> (list (uint16_t (bv #x0004 16)) (int8_t (bv #x01 8)) (int16_t (bv #x0006 16)) (int8_t (bv #x01 8))) #f #f #f 'int16)
"Building Expr:"
(vec-add
 (vec-shl
  (load
   (buffer rows 'int16)
   (ramp (sca-add (sca-mul (var-lookup 't56) 16) 1) 1 16)
   (aligned 16 1))
  (sca-broadcast (uint16_t (bv #x0002 16)) 16))
 (vec-add
  (load
   (buffer rows 'int16)
   (ramp (sca-mul (var-lookup 't56) 16) 1 16)
   (aligned 16 0))
  (vec-add
   (vec-mul
    (load
     (buffer rows 'int16)
     (ramp (sca-add (sca-mul (var-lookup 't56) 16) 2) 1 16)
     (aligned 16 2))
    (sca-broadcast (int16_t (bv #x0006 16)) 16))
   (vec-add
    (load
     (buffer rows 'int16)
     (ramp (sca-add (sca-mul (var-lookup 't56) 16) 4) 1 16)
     (aligned 16 4))
    (vec-shl
     (load
      (buffer rows 'int16)
      (ramp (sca-add (sca-mul (var-lookup 't56) 16) 3) 1 16)
      (aligned 16 3))
     (sca-broadcast (uint16_t (bv #x0002 16)) 16))))))
"Fold templates"
(list
 #<load-data>
 (vs-mpy-add
  ...
  #<load-data>
  (list
   (uint16_t (bv #x0004 16))
   (union [xi?$1644 #(struct:int16_t (bv #x0006 16))] [(&& xi?$1645 (! xi?$1644)) #(struct:uint16_t
                                                                                    (bv #x0004 16))] [(&& (! xi?$1644) (! xi?$1645)) #(struct:int8_t
                                                                                                                                       (bv #x01 8))]))
  #f
  #f
  #f
  'int16)
 (vs-mpy-add
  ...
  #<load-data>
  (list (uint16_t (bv #x0004 16)))
  #f
  x?$1642
  #f
  'int16)
 (vs-mpy-add
  ...
  (combine
   (vs-mpy-add
    ...
    #<load-data>
    (list (uint16_t (bv #x0004 16)))
    #f
    #f
    #f
    'int16)
   (union [x?$1646 #(struct:vs-mpy-add
                     ...
                     #<load-data>
                     (#(struct:uint16_t (bv #x0004 16)))
                     #f
                     #f
                     #f
                     int16)] [(! x?$1646) #(struct:vs-mpy-add
                                            ...
                                            #<load-data>
                                            (#(struct:uint16_t (bv #x0004 16))
                                             #(struct:int8_t (bv #x01 8))
                                             #(struct:int16_t (bv #x0006 16))
                                             #(struct:int8_t (bv #x01 8)))
                                            #f
                                            #f
                                            #f
                                            int16)]))
  (list (uint16_t (bv #x0004 16)) (int8_t (bv #x01 8)))
  #f
  #f
  #f
  'int16)
 #<load-data>
 (vs-mpy-add
  ...
  #<load-data>
  '(#(struct:uint16_t (bv #x0004 16))
    #(struct:int8_t (bv #x01 8))
    #(struct:int16_t (bv #x0006 16))
    #(struct:int8_t (bv #x01 8))
    (union [xi?$1842 #(struct:int16_t (bv #x0006 16))] [(&& xi?$1843 (! xi?$1842)) #(struct:uint16_t
                                                                                     (bv #x0004 16))] [(&& (! xi?$1842) (! xi?$1843)) #(struct:int8_t
                                                                                                                                        (bv #x01 8))]))
  #f
  #f
  #f
  'int16)
 (vs-mpy-add
  ...
  #<load-data>
  '(#(struct:uint16_t (bv #x0004 16))
    #(struct:int8_t (bv #x01 8))
    #(struct:int16_t (bv #x0006 16))
    #(struct:int8_t (bv #x01 8)))
  #f
  x?$1840
  #f
  'int16)
 (vs-mpy-add
  ...
  (combine
   (vs-mpy-add
    ...
    #<load-data>
    '(#(struct:uint16_t (bv #x0004 16))
      #(struct:int8_t (bv #x01 8))
      #(struct:int16_t (bv #x0006 16))
      #(struct:int8_t (bv #x01 8)))
    #f
    #f
    #f
    'int16)
   (union [x?$1844 #(struct:vs-mpy-add
                     ...
                     #<load-data>
                     (#(struct:uint16_t (bv #x0004 16)))
                     #f
                     #f
                     #f
                     int16)] [(! x?$1844) #(struct:vs-mpy-add
                                            ...
                                            #<load-data>
                                            (#(struct:uint16_t (bv #x0004 16))
                                             #(struct:int8_t (bv #x01 8))
                                             #(struct:int16_t (bv #x0006 16))
                                             #(struct:int8_t (bv #x01 8)))
                                            #f
                                            #f
                                            #f
                                            int16)]))
  (list
   (uint16_t (bv #x0004 16))
   (int8_t (bv #x01 8))
   (int16_t (bv #x0006 16))
   (int8_t (bv #x01 8))
   (int8_t (bv #x01 8)))
  #f
  #f
  #f
  'int16))
here(#<load-data> #(struct:vs-mpy-add ... #<load-data> (#(struct:uint16_t (bv #x0004 16)) (union #:size 3 #:hash 1260829997174978)) #f #f #f int16) #(struct:vs-mpy-add ... #<load-data> (#(struct:uint16_t (bv #x0004 16))) #f x?$1642 #f int16) #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<load-data> (#(struct:uint16_t (bv #x0004 16))) #f #f #f int16) (union #:size 2 #:hash 409608425035)> (#(struct:uint16_t (bv #x0004 16)) #(struct:int8_t (bv #x01 8))) #f #f #f int16) #<load-data> #(struct:vs-mpy-add ... #<load-data> (#(struct:uint16_t (bv #x0004 16)) #(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0006 16)) #(struct:int8_t (bv #x01 8)) (union #:size 3 #:hash 1260646997878688)) #f #f #f int16) #(struct:vs-mpy-add ... #<load-data> (#(struct:uint16_t (bv #x0004 16)) #(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0006 16)) #(struct:int8_t (bv #x01 8))) #f x?$1840 #f int16) #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<load-data> (#(struct:uint16_t (bv #x0004 16)) #(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0006 16)) #(struct:int8_t (bv #x01 8))) #f #f #f int16) (union #:size 2 #:hash 409582751902)> (#(struct:uint16_t (bv #x0004 16)) #(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0006 16)) #(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int16))

"Replace templates"
'()
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-shl
  (load
   (buffer rows 'int16)
   (ramp (sca-add (sca-mul (var-lookup 't56) 16) 1) 1 16)
   (aligned 16 1))
  (sca-broadcast (uint16_t (bv #x0002 16)) 16))
 (vec-add
  (load
   (buffer rows 'int16)
   (ramp (sca-mul (var-lookup 't56) 16) 1 16)
   (aligned 16 0))
  (vec-add
   (vec-mul
    (load
     (buffer rows 'int16)
     (ramp (sca-add (sca-mul (var-lookup 't56) 16) 2) 1 16)
     (aligned 16 2))
    (sca-broadcast (int16_t (bv #x0006 16)) 16))
   (vec-add
    (load
     (buffer rows 'int16)
     (ramp (sca-add (sca-mul (var-lookup 't56) 16) 4) 1 16)
     (aligned 16 4))
    (vec-shl
     (load
      (buffer rows 'int16)
      (ramp (sca-add (sca-mul (var-lookup 't56) 16) 3) 1 16)
      (aligned 16 3))
     (sca-broadcast (uint16_t (bv #x0002 16)) 16))))))
template:
  #<load-data>
axioms:
  '()
optimized-halide-expr:
  (vec-add
 (vec-shl
  (load
   (buffer rows 'int16)
   (ramp (sca-add (sca-mul (var-lookup 't56) 16) 1) 1 16)
   (aligned 16 1))
  (sca-broadcast (uint16_t (bv #x0002 16)) 16))
 (vec-add
  (load
   (buffer rows 'int16)
   (ramp (sca-mul (var-lookup 't56) 16) 1 16)
   (aligned 16 0))
  (vec-add
   (vec-mul
    (load
     (buffer rows 'int16)
     (ramp (sca-add (sca-mul (var-lookup 't56) 16) 2) 1 16)
     (aligned 16 2))
    (sca-broadcast (int16_t (bv #x0006 16)) 16))
   (vec-add
    (load
     (buffer rows 'int16)
     (ramp (sca-add (sca-mul (var-lookup 't56) 16) 4) 1 16)
     (aligned 16 4))
    (vec-shl
     (load
      (buffer rows 'int16)
      (ramp (sca-add (sca-mul (var-lookup 't56) 16) 3) 1 16)
      (aligned 16 3))
     (sca-broadcast (uint16_t (bv #x0002 16)) 16))))))
optimized-template:
  #<load-data>
optimized Halide 0:
  (int16_t
 (bvadd (bvshl (app rows (+ -15 (+ output.s0.x.x (+ -8 t172)))) (bv #x0002 16)) (bvadd (app rows (+ -16 (+ output.s0.x.x (+ -8 t172)))) (bvadd (bvmul (bv #x0006 16) (app rows (+ -14 (+ output.s0.x.x (+ -8 t172))))) (bvadd (app rows (+ -12 (+ output.s0.x.x (+ -8 t172)))) (bvshl (app rows (+ -13 (+ output.s0.x.x (+ -8 t172)))) (bv #x0002 16)))))))
optimized x86 0:
  (int16_t
 (ite* (⊢ (= 0 idx$1775) (app rows (+ -16 (+ output.s0.x.x (+ -8 t172))))) (⊢ (= 1 idx$1775) (app rows (+ -12 (+ output.s0.x.x (+ -8 t172))))) (⊢ (= 2 idx$1775) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (⊢ (= 3 idx$1775) (app rows (+ -14 (+ output.s0.x.x (+ -8 t172))))) (⊢ (= 4 idx$1775) (app rows (+ -15 (+ output.s0.x.x (+ -8 t172)))))))
Ran synthesizer for 77 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-shl
  (load
   (buffer rows 'int16)
   (ramp (sca-add (sca-mul (var-lookup 't56) 16) 1) 1 16)
   (aligned 16 1))
  (sca-broadcast (uint16_t (bv #x0002 16)) 16))
 (vec-add
  (load
   (buffer rows 'int16)
   (ramp (sca-mul (var-lookup 't56) 16) 1 16)
   (aligned 16 0))
  (vec-add
   (vec-mul
    (load
     (buffer rows 'int16)
     (ramp (sca-add (sca-mul (var-lookup 't56) 16) 2) 1 16)
     (aligned 16 2))
    (sca-broadcast (int16_t (bv #x0006 16)) 16))
   (vec-add
    (load
     (buffer rows 'int16)
     (ramp (sca-add (sca-mul (var-lookup 't56) 16) 4) 1 16)
     (aligned 16 4))
    (vec-shl
     (load
      (buffer rows 'int16)
      (ramp (sca-add (sca-mul (var-lookup 't56) 16) 3) 1 16)
      (aligned 16 3))
     (sca-broadcast (uint16_t (bv #x0002 16)) 16))))))
template:
  #<load-data>
axioms:
  '()
optimized-halide-expr:
  (vec-add
 (vec-shl
  (load
   (buffer rows 'int16)
   (ramp (sca-add (sca-mul (var-lookup 't56) 16) 1) 1 16)
   (aligned 16 1))
  (sca-broadcast (uint16_t (bv #x0002 16)) 16))
 (vec-add
  (load
   (buffer rows 'int16)
   (ramp (sca-mul (var-lookup 't56) 16) 1 16)
   (aligned 16 0))
  (vec-add
   (vec-mul
    (load
     (buffer rows 'int16)
     (ramp (sca-add (sca-mul (var-lookup 't56) 16) 2) 1 16)
     (aligned 16 2))
    (sca-broadcast (int16_t (bv #x0006 16)) 16))
   (vec-add
    (load
     (buffer rows 'int16)
     (ramp (sca-add (sca-mul (var-lookup 't56) 16) 4) 1 16)
     (aligned 16 4))
    (vec-shl
     (load
      (buffer rows 'int16)
      (ramp (sca-add (sca-mul (var-lookup 't56) 16) 3) 1 16)
      (aligned 16 3))
     (sca-broadcast (uint16_t (bv #x0002 16)) 16))))))
optimized-template:
  #<load-data>
optimized Halide 0:
  (int16_t
 (bvadd (bvshl (app rows (+ -15 (+ output.s0.x.x (+ -8 t172)))) (bv #x0002 16)) (bvadd (app rows (+ -16 (+ output.s0.x.x (+ -8 t172)))) (bvadd (bvmul (bv #x0006 16) (app rows (+ -14 (+ output.s0.x.x (+ -8 t172))))) (bvadd (app rows (+ -12 (+ output.s0.x.x (+ -8 t172)))) (bvshl (app rows (+ -13 (+ output.s0.x.x (+ -8 t172)))) (bv #x0002 16)))))))
optimized x86 0:
  (int16_t
 (ite* (⊢ (= 0 idx$1973) (app rows (+ -16 (+ output.s0.x.x (+ -8 t172))))) (⊢ (= 1 idx$1973) (app rows (+ -12 (+ output.s0.x.x (+ -8 t172))))) (⊢ (= 2 idx$1973) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (⊢ (= 3 idx$1973) (app rows (+ -14 (+ output.s0.x.x (+ -8 t172))))) (⊢ (= 4 idx$1973) (app rows (+ -15 (+ output.s0.x.x (+ -8 t172)))))))
Ran synthesizer for 71 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-shl
  (load
   (buffer rows 'int16)
   (ramp (sca-add (sca-mul (var-lookup 't56) 16) 1) 1 16)
   (aligned 16 1))
  (sca-broadcast (uint16_t (bv #x0002 16)) 16))
 (vec-add
  (load
   (buffer rows 'int16)
   (ramp (sca-mul (var-lookup 't56) 16) 1 16)
   (aligned 16 0))
  (vec-add
   (vec-mul
    (load
     (buffer rows 'int16)
     (ramp (sca-add (sca-mul (var-lookup 't56) 16) 2) 1 16)
     (aligned 16 2))
    (sca-broadcast (int16_t (bv #x0006 16)) 16))
   (vec-add
    (load
     (buffer rows 'int16)
     (ramp (sca-add (sca-mul (var-lookup 't56) 16) 4) 1 16)
     (aligned 16 4))
    (vec-shl
     (load
      (buffer rows 'int16)
      (ramp (sca-add (sca-mul (var-lookup 't56) 16) 3) 1 16)
      (aligned 16 3))
     (sca-broadcast (uint16_t (bv #x0002 16)) 16))))))
template:
  (vs-mpy-add
 ...
 #<load-data>
 (list
  (uint16_t (bv #x0004 16))
  (union [xi?$1644 #(struct:int16_t (bv #x0006 16))] [(&& xi?$1645 (! xi?$1644)) #(struct:uint16_t
                                                                                   (bv #x0004 16))] [(&& (! xi?$1644) (! xi?$1645)) #(struct:int8_t
                                                                                                                                      (bv #x01 8))]))
 #f
 #f
 #f
 'int16)
axioms:
  '()
optimized-halide-expr:
  (vec-add
 (vec-shl
  (load
   (buffer rows 'int16)
   (ramp (sca-add (sca-mul (var-lookup 't56) 16) 1) 1 16)
   (aligned 16 1))
  (sca-broadcast (uint16_t (bv #x0002 16)) 16))
 (vec-add
  (load
   (buffer rows 'int16)
   (ramp (sca-mul (var-lookup 't56) 16) 1 16)
   (aligned 16 0))
  (vec-add
   (vec-mul
    (load
     (buffer rows 'int16)
     (ramp (sca-add (sca-mul (var-lookup 't56) 16) 2) 1 16)
     (aligned 16 2))
    (sca-broadcast (int16_t (bv #x0006 16)) 16))
   (vec-add
    (load
     (buffer rows 'int16)
     (ramp (sca-add (sca-mul (var-lookup 't56) 16) 4) 1 16)
     (aligned 16 4))
    (vec-shl
     (load
      (buffer rows 'int16)
      (ramp (sca-add (sca-mul (var-lookup 't56) 16) 3) 1 16)
      (aligned 16 3))
     (sca-broadcast (uint16_t (bv #x0002 16)) 16))))))
optimized-template:
  (vs-mpy-add
 ...
 #<load-data>
 (list
  (uint16_t (bv #x0004 16))
  (union [xi?$1644 #(struct:int16_t (bv #x0006 16))] [(&& xi?$1645 (! xi?$1644)) #(struct:uint16_t
                                                                                   (bv #x0004 16))] [(&& (! xi?$1644) (! xi?$1645)) #(struct:int8_t
                                                                                                                                      (bv #x01 8))]))
 #f
 #f
 #f
 'int16)
optimized Halide 0:
  (int16_t
 (bvadd (bvshl (app rows (+ -15 (+ output.s0.x.x (+ -8 t172)))) (bv #x0002 16)) (bvadd (app rows (+ -16 (+ output.s0.x.x (+ -8 t172)))) (bvadd (bvmul (bv #x0006 16) (app rows (+ -14 (+ output.s0.x.x (+ -8 t172))))) (bvadd (app rows (+ -12 (+ output.s0.x.x (+ -8 t172)))) (bvshl (app rows (+ -13 (+ output.s0.x.x (+ -8 t172)))) (bv #x0002 16)))))))
optimized x86 0:
  (int16_t
 (bvadd (bvmul (bv #x0004 16) (app rows (+ -15 (+ output.s0.x.x (+ -8 t172))))) (bvmul (ite* (⊢ (= 0 idx$1) (app rows (+ -15 (+ output.s0.x.x (+ -8 t172))))) (⊢ (= 1 idx$1) (app rows (+ -16 (+ output.s0.x.x (+ -8 t172))))) (⊢ (= 2 idx$1) (app rows (+ -12 (+ output.s0.x.x (+ -8 t172))))) (⊢ (= 3 idx$1) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (⊢ (= 4 idx$1) (app rows (+ -14 (+ output.s0.x.x (+ -8 t172)))))) (ite* (⊢ xi?$1644 (bv #x0006 16)) (⊢ (&& xi?$1645 (! xi?$1644)) (bv #x0004 16)) (⊢ (&& (! xi?$1644) (! xi?$1645)) (bv #x0001 16))))))
Ran synthesizer for 122 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-shl
  (load
   (buffer rows 'int16)
   (ramp (sca-add (sca-mul (var-lookup 't56) 16) 1) 1 16)
   (aligned 16 1))
  (sca-broadcast (uint16_t (bv #x0002 16)) 16))
 (vec-add
  (load
   (buffer rows 'int16)
   (ramp (sca-mul (var-lookup 't56) 16) 1 16)
   (aligned 16 0))
  (vec-add
   (vec-mul
    (load
     (buffer rows 'int16)
     (ramp (sca-add (sca-mul (var-lookup 't56) 16) 2) 1 16)
     (aligned 16 2))
    (sca-broadcast (int16_t (bv #x0006 16)) 16))
   (vec-add
    (load
     (buffer rows 'int16)
     (ramp (sca-add (sca-mul (var-lookup 't56) 16) 4) 1 16)
     (aligned 16 4))
    (vec-shl
     (load
      (buffer rows 'int16)
      (ramp (sca-add (sca-mul (var-lookup 't56) 16) 3) 1 16)
      (aligned 16 3))
     (sca-broadcast (uint16_t (bv #x0002 16)) 16))))))
template:
  (vs-mpy-add
 ...
 #<load-data>
 (list (uint16_t (bv #x0004 16)))
 #f
 x?$1642
 #f
 'int16)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-add
 (vec-shl #<abstr-halide-expr> (sca-broadcast (uint16_t (bv #x0002 16)) 16))
 (vec-add
  (load
   (buffer rows 'int16)
   (ramp (sca-mul (var-lookup 't56) 16) 1 16)
   (aligned 16 0))
  (vec-add
   (vec-mul
    (load
     (buffer rows 'int16)
     (ramp (sca-add (sca-mul (var-lookup 't56) 16) 2) 1 16)
     (aligned 16 2))
    (sca-broadcast (int16_t (bv #x0006 16)) 16))
   (vec-add
    (load
     (buffer rows 'int16)
     (ramp (sca-add (sca-mul (var-lookup 't56) 16) 4) 1 16)
     (aligned 16 4))
    (vec-shl
     (load
      (buffer rows 'int16)
      (ramp (sca-add (sca-mul (var-lookup 't56) 16) 3) 1 16)
      (aligned 16 3))
     (sca-broadcast (uint16_t (bv #x0002 16)) 16))))))
optimized-template:
  (vs-mpy-add
 ...
 #<abstr-expr>
 (list (uint16_t (bv #x0004 16)))
 #f
 x?$1642
 #f
 'int16)
optimized Halide 0:
  (int16_t
 (bvadd (bvadd (app rows (+ -16 (+ output.s0.x.x (+ -8 t172)))) (bvadd (bvmul (bv #x0006 16) (app rows (+ -14 (+ output.s0.x.x (+ -8 t172))))) (bvadd (app rows (+ -12 (+ output.s0.x.x (+ -8 t172)))) (bvshl (app rows (+ -13 (+ output.s0.x.x (+ -8 t172)))) (bv #x0002 16))))) (bvshl (app abstr-vals$2037 0) (bv #x0002 16))))
optimized x86 0:
  (int16_t
 (bvadd (bvmul (bv #x0004 16) (app abstr-vals$2037 0)) (ite x?$1642 (bv #x0001 16) (bv #x0000 16))))
Ran synthesizer for 61 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-shl
  (load
   (buffer rows 'int16)
   (ramp (sca-add (sca-mul (var-lookup 't56) 16) 1) 1 16)
   (aligned 16 1))
  (sca-broadcast (uint16_t (bv #x0002 16)) 16))
 (vec-add
  (load
   (buffer rows 'int16)
   (ramp (sca-mul (var-lookup 't56) 16) 1 16)
   (aligned 16 0))
  (vec-add
   (vec-mul
    (load
     (buffer rows 'int16)
     (ramp (sca-add (sca-mul (var-lookup 't56) 16) 2) 1 16)
     (aligned 16 2))
    (sca-broadcast (int16_t (bv #x0006 16)) 16))
   (vec-add
    (load
     (buffer rows 'int16)
     (ramp (sca-add (sca-mul (var-lookup 't56) 16) 4) 1 16)
     (aligned 16 4))
    (vec-shl
     (load
      (buffer rows 'int16)
      (ramp (sca-add (sca-mul (var-lookup 't56) 16) 3) 1 16)
      (aligned 16 3))
     (sca-broadcast (uint16_t (bv #x0002 16)) 16))))))
template:
  (vs-mpy-add
 ...
 #<load-data>
 (list
  (uint16_t (bv #x0004 16))
  (int8_t (bv #x01 8))
  (int16_t (bv #x0006 16))
  (int8_t (bv #x01 8))
  (union [xi?$1842 #(struct:int16_t (bv #x0006 16))] [(&& xi?$1843 (! xi?$1842)) #(struct:uint16_t
                                                                                   (bv #x0004 16))] [(&& (! xi?$1842) (! xi?$1843)) #(struct:int8_t
                                                                                                                                      (bv #x01 8))]))
 #f
 #f
 #f
 'int16)
axioms:
  '()
optimized-halide-expr:
  (vec-add
 (vec-shl
  (load
   (buffer rows 'int16)
   (ramp (sca-add (sca-mul (var-lookup 't56) 16) 1) 1 16)
   (aligned 16 1))
  (sca-broadcast (uint16_t (bv #x0002 16)) 16))
 (vec-add
  (load
   (buffer rows 'int16)
   (ramp (sca-mul (var-lookup 't56) 16) 1 16)
   (aligned 16 0))
  (vec-add
   (vec-mul
    (load
     (buffer rows 'int16)
     (ramp (sca-add (sca-mul (var-lookup 't56) 16) 2) 1 16)
     (aligned 16 2))
    (sca-broadcast (int16_t (bv #x0006 16)) 16))
   (vec-add
    (load
     (buffer rows 'int16)
     (ramp (sca-add (sca-mul (var-lookup 't56) 16) 4) 1 16)
     (aligned 16 4))
    (vec-shl
     (load
      (buffer rows 'int16)
      (ramp (sca-add (sca-mul (var-lookup 't56) 16) 3) 1 16)
      (aligned 16 3))
     (sca-broadcast (uint16_t (bv #x0002 16)) 16))))))
optimized-template:
  (vs-mpy-add
 ...
 #<load-data>
 (list
  (uint16_t (bv #x0004 16))
  (int8_t (bv #x01 8))
  (int16_t (bv #x0006 16))
  (int8_t (bv #x01 8))
  (union [xi?$1842 #(struct:int16_t (bv #x0006 16))] [(&& xi?$1843 (! xi?$1842)) #(struct:uint16_t
                                                                                   (bv #x0004 16))] [(&& (! xi?$1842) (! xi?$1843)) #(struct:int8_t
                                                                                                                                      (bv #x01 8))]))
 #f
 #f
 #f
 'int16)
optimized Halide 0:
  (int16_t
 (bvadd (bvshl (app rows (+ -15 (+ output.s0.x.x (+ -8 t172)))) (bv #x0002 16)) (bvadd (app rows (+ -16 (+ output.s0.x.x (+ -8 t172)))) (bvadd (bvmul (bv #x0006 16) (app rows (+ -14 (+ output.s0.x.x (+ -8 t172))))) (bvadd (app rows (+ -12 (+ output.s0.x.x (+ -8 t172)))) (bvshl (app rows (+ -13 (+ output.s0.x.x (+ -8 t172)))) (bv #x0002 16)))))))
optimized x86 0:
  (int16_t
 (bvadd (bvadd (app rows (+ -16 (+ output.s0.x.x (+ -8 t172)))) (bvadd (bvmul (bv #x0006 16) (app rows (+ -14 (+ output.s0.x.x (+ -8 t172))))) (bvadd (app rows (+ -12 (+ output.s0.x.x (+ -8 t172)))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172)))))))) (bvmul (ite* (⊢ (= 0 idx$594) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (⊢ (= 1 idx$594) (app rows (+ -12 (+ output.s0.x.x (+ -8 t172))))) (⊢ (= 2 idx$594) (app rows (+ -14 (+ output.s0.x.x (+ -8 t172))))) (⊢ (= 3 idx$594) (app rows (+ -16 (+ output.s0.x.x (+ -8 t172))))) (⊢ (= 4 idx$594) (app rows (+ -15 (+ output.s0.x.x (+ -8 t172)))))) (ite* (⊢ xi?$1842 (bv #x0006 16)) (⊢ (&& xi?$1843 (! xi?$1842)) (bv #x0004 16)) (⊢ (&& (! xi?$1842) (! xi?$1843)) (bv #x0001 16))))))
Ran synthesizer for 105 ms
(model
 [idx$594 4]
 [xi?$1842 #f]
 [xi?$1843 #t])
(vec-add
 (vec-shl
  (load
   (buffer rows 'int16)
   (ramp (sca-add (sca-mul (var-lookup 't56) 16) 1) 1 16)
   (aligned 16 1))
  (sca-broadcast (uint16_t (bv #x0002 16)) 16))
 (vec-add
  (load
   (buffer rows 'int16)
   (ramp (sca-mul (var-lookup 't56) 16) 1 16)
   (aligned 16 0))
  (vec-add
   (vec-mul
    (load
     (buffer rows 'int16)
     (ramp (sca-add (sca-mul (var-lookup 't56) 16) 2) 1 16)
     (aligned 16 2))
    (sca-broadcast (int16_t (bv #x0006 16)) 16))
   (vec-add
    (load
     (buffer rows 'int16)
     (ramp (sca-add (sca-mul (var-lookup 't56) 16) 4) 1 16)
     (aligned 16 4))
    (vec-shl
     (load
      (buffer rows 'int16)
      (ramp (sca-add (sca-mul (var-lookup 't56) 16) 3) 1 16)
      (aligned 16 3))
     (sca-broadcast (uint16_t (bv #x0002 16)) 16))))))
(vs-mpy-add
 ...
 #<load-data>
 (list
  (uint16_t (bv #x0004 16))
  (int8_t (bv #x01 8))
  (int16_t (bv #x0006 16))
  (int8_t (bv #x01 8))
  (uint16_t (bv #x0004 16)))
 #f
 #f
 #f
 'int16)
Ran bounds analysis for 24 ms
Ran bounds analysis for 19 ms
"Success?"
#t
(vs-mpy-add ... #<load-data> (list (uint16_t (bv #x0004 16)) (int8_t (bv #x01 8)) (int16_t (bv #x0006 16)) (int8_t (bv #x01 8)) (uint16_t (bv #x0004 16))) #f #f #f 'int16)
"Building Expr:"
(sca-broadcast (uint16_t (bv #x0008 16)) 16)
"Fold templates"
'()
here()

"Replace templates"
'()
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (sca-broadcast (uint16_t (bv #x0008 16)) 16)
template:
  (broadcast ... (uint16_t (bv #x0008 16)))
axioms:
  '()
optimized-halide-expr:
  (sca-broadcast (uint16_t (bv #x0008 16)) 16)
optimized-template:
  (broadcast ... (uint16_t (bv #x0008 16)))
optimized Halide 0:
  (uint16_t (bv #x0008 16))
optimized x86 0:
  (uint16_t (bv #x0008 16))
Ran synthesizer for 15 ms
(model)
(sca-broadcast (uint16_t (bv #x0008 16)) 16)
(broadcast ... (uint16_t (bv #x0008 16)))
Ran bounds analysis for 19 ms
Ran bounds analysis for 12 ms
"Extended success?"
#t
(broadcast ... (uint16_t (bv #x0008 16)))
"Building Expr:"
(vec-shr
 (vec-add
  (vec-shl
   (load
    (buffer rows 'int16)
    (ramp (sca-add (sca-mul (var-lookup 't56) 16) 1) 1 16)
    (aligned 16 1))
   (sca-broadcast (uint16_t (bv #x0002 16)) 16))
  (vec-add
   (load
    (buffer rows 'int16)
    (ramp (sca-mul (var-lookup 't56) 16) 1 16)
    (aligned 16 0))
   (vec-add
    (vec-mul
     (load
      (buffer rows 'int16)
      (ramp (sca-add (sca-mul (var-lookup 't56) 16) 2) 1 16)
      (aligned 16 2))
     (sca-broadcast (int16_t (bv #x0006 16)) 16))
    (vec-add
     (load
      (buffer rows 'int16)
      (ramp (sca-add (sca-mul (var-lookup 't56) 16) 4) 1 16)
      (aligned 16 4))
     (vec-shl
      (load
       (buffer rows 'int16)
       (ramp (sca-add (sca-mul (var-lookup 't56) 16) 3) 1 16)
       (aligned 16 3))
      (sca-broadcast (uint16_t (bv #x0002 16)) 16))))))
 (sca-broadcast (uint16_t (bv #x0008 16)) 16))
"Fold templates"
'(#<load-data>)
here(#<load-data>)

"Replace templates"
'()
run-x86-synthesizer
halide-expr:
  (vec-shr
 (vec-add
  (vec-shl
   (load
    (buffer rows 'int16)
    (ramp (sca-add (sca-mul (var-lookup 't56) 16) 1) 1 16)
    (aligned 16 1))
   (sca-broadcast (uint16_t (bv #x0002 16)) 16))
  (vec-add
   (load
    (buffer rows 'int16)
    (ramp (sca-mul (var-lookup 't56) 16) 1 16)
    (aligned 16 0))
   (vec-add
    (vec-mul
     (load
      (buffer rows 'int16)
      (ramp (sca-add (sca-mul (var-lookup 't56) 16) 2) 1 16)
      (aligned 16 2))
     (sca-broadcast (int16_t (bv #x0006 16)) 16))
    (vec-add
     (load
      (buffer rows 'int16)
      (ramp (sca-add (sca-mul (var-lookup 't56) 16) 4) 1 16)
      (aligned 16 4))
     (vec-shl
      (load
       (buffer rows 'int16)
       (ramp (sca-add (sca-mul (var-lookup 't56) 16) 3) 1 16)
       (aligned 16 3))
      (sca-broadcast (uint16_t (bv #x0002 16)) 16))))))
 (sca-broadcast (uint16_t (bv #x0008 16)) 16))
template:
  #<load-data>
axioms:
  '()
optimized-halide-expr:
  (vec-shr
 (vec-add
  (vec-shl
   (load
    (buffer rows 'int16)
    (ramp (sca-add (sca-mul (var-lookup 't56) 16) 1) 1 16)
    (aligned 16 1))
   (sca-broadcast (uint16_t (bv #x0002 16)) 16))
  (vec-add
   (load
    (buffer rows 'int16)
    (ramp (sca-mul (var-lookup 't56) 16) 1 16)
    (aligned 16 0))
   (vec-add
    (vec-mul
     (load
      (buffer rows 'int16)
      (ramp (sca-add (sca-mul (var-lookup 't56) 16) 2) 1 16)
      (aligned 16 2))
     (sca-broadcast (int16_t (bv #x0006 16)) 16))
    (vec-add
     (load
      (buffer rows 'int16)
      (ramp (sca-add (sca-mul (var-lookup 't56) 16) 4) 1 16)
      (aligned 16 4))
     (vec-shl
      (load
       (buffer rows 'int16)
       (ramp (sca-add (sca-mul (var-lookup 't56) 16) 3) 1 16)
       (aligned 16 3))
      (sca-broadcast (uint16_t (bv #x0002 16)) 16))))))
 (sca-broadcast (uint16_t (bv #x0008 16)) 16))
optimized-template:
  #<load-data>
optimized Halide 0:
  (int16_t
 (bvashr (bvadd (bvshl (app rows (+ -15 (+ output.s0.x.x (+ -8 t172)))) (bv #x0002 16)) (bvadd (app rows (+ -16 (+ output.s0.x.x (+ -8 t172)))) (bvadd (bvmul (bv #x0006 16) (app rows (+ -14 (+ output.s0.x.x (+ -8 t172))))) (bvadd (app rows (+ -12 (+ output.s0.x.x (+ -8 t172)))) (bvshl (app rows (+ -13 (+ output.s0.x.x (+ -8 t172)))) (bv #x0002 16)))))) (bv #x0008 16)))
optimized x86 0:
  (int16_t
 (ite* (⊢ (= 0 idx$2043) (app rows (+ -16 (+ output.s0.x.x (+ -8 t172))))) (⊢ (= 1 idx$2043) (app rows (+ -12 (+ output.s0.x.x (+ -8 t172))))) (⊢ (= 2 idx$2043) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (⊢ (= 3 idx$2043) (app rows (+ -14 (+ output.s0.x.x (+ -8 t172))))) (⊢ (= 4 idx$2043) (app rows (+ -15 (+ output.s0.x.x (+ -8 t172)))))))
Ran synthesizer for 199 ms
(unsat)
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (vec-shr
 (vec-add
  (vec-shl
   (load
    (buffer rows 'int16)
    (ramp (sca-add (sca-mul (var-lookup 't56) 16) 1) 1 16)
    (aligned 16 1))
   (sca-broadcast (uint16_t (bv #x0002 16)) 16))
  (vec-add
   (load
    (buffer rows 'int16)
    (ramp (sca-mul (var-lookup 't56) 16) 1 16)
    (aligned 16 0))
   (vec-add
    (vec-mul
     (load
      (buffer rows 'int16)
      (ramp (sca-add (sca-mul (var-lookup 't56) 16) 2) 1 16)
      (aligned 16 2))
     (sca-broadcast (int16_t (bv #x0006 16)) 16))
    (vec-add
     (load
      (buffer rows 'int16)
      (ramp (sca-add (sca-mul (var-lookup 't56) 16) 4) 1 16)
      (aligned 16 4))
     (vec-shl
      (load
       (buffer rows 'int16)
       (ramp (sca-add (sca-mul (var-lookup 't56) 16) 3) 1 16)
       (aligned 16 3))
      (sca-broadcast (uint16_t (bv #x0002 16)) 16))))))
 (sca-broadcast (uint16_t (bv #x0008 16)) 16))
template:
  (vs-shift-right
 ...
 (union [x?$2107 #(struct:vs-mpy-add
                   ...
                   #<load-data>
                   (#(struct:uint16_t (bv #x0004 16))
                    #(struct:int8_t (bv #x01 8))
                    #(struct:int16_t (bv #x0006 16))
                    #(struct:int8_t (bv #x01 8))
                    #(struct:uint16_t (bv #x0004 16)))
                   #f
                   #f
                   #f
                   int16)] [(! x?$2107) #(struct:broadcast
                                          ...
                                          #(struct:uint16_t (bv #x0008 16)))])
 (uint16_t (bv #x0008 16))
 #f
 #f
 #t)
axioms:
  '()
optimized-halide-expr:
  (vec-shr
 (vec-add
  (vec-shl
   (load
    (buffer rows 'int16)
    (ramp (sca-add (sca-mul (var-lookup 't56) 16) 1) 1 16)
    (aligned 16 1))
   (sca-broadcast (uint16_t (bv #x0002 16)) 16))
  (vec-add
   (load
    (buffer rows 'int16)
    (ramp (sca-mul (var-lookup 't56) 16) 1 16)
    (aligned 16 0))
   (vec-add
    (vec-mul
     (load
      (buffer rows 'int16)
      (ramp (sca-add (sca-mul (var-lookup 't56) 16) 2) 1 16)
      (aligned 16 2))
     (sca-broadcast (int16_t (bv #x0006 16)) 16))
    (vec-add
     (load
      (buffer rows 'int16)
      (ramp (sca-add (sca-mul (var-lookup 't56) 16) 4) 1 16)
      (aligned 16 4))
     (vec-shl
      (load
       (buffer rows 'int16)
       (ramp (sca-add (sca-mul (var-lookup 't56) 16) 3) 1 16)
       (aligned 16 3))
      (sca-broadcast (uint16_t (bv #x0002 16)) 16))))))
 (sca-broadcast (uint16_t (bv #x0008 16)) 16))
optimized-template:
  (vs-shift-right
 ...
 (union [x?$2107 #(struct:vs-mpy-add
                   ...
                   #<load-data>
                   (#(struct:uint16_t (bv #x0004 16))
                    #(struct:int8_t (bv #x01 8))
                    #(struct:int16_t (bv #x0006 16))
                    #(struct:int8_t (bv #x01 8))
                    #(struct:uint16_t (bv #x0004 16)))
                   #f
                   #f
                   #f
                   int16)] [(! x?$2107) #(struct:broadcast
                                          ...
                                          #(struct:uint16_t (bv #x0008 16)))])
 (uint16_t (bv #x0008 16))
 #f
 #f
 #t)
optimized Halide 0:
  (int16_t
 (bvashr (bvadd (bvshl (app rows (+ -15 (+ output.s0.x.x (+ -8 t172)))) (bv #x0002 16)) (bvadd (app rows (+ -16 (+ output.s0.x.x (+ -8 t172)))) (bvadd (bvmul (bv #x0006 16) (app rows (+ -14 (+ output.s0.x.x (+ -8 t172))))) (bvadd (app rows (+ -12 (+ output.s0.x.x (+ -8 t172)))) (bvshl (app rows (+ -13 (+ output.s0.x.x (+ -8 t172)))) (bv #x0002 16)))))) (bv #x0008 16)))
optimized x86 0:
  (union [x?$2107 #(struct:int16_t
                  (bvashr (ite x?$2107 (bvadd (bvadd (app rows (+ -16 (+ output.s0.x.x (+ -8 t172)))) (bvadd (bvmul (bv #x0006 16) (app rows (+ -14 (+ output.s0.x.x (+ -8 t172))))) (bvadd (app rows (+ -12 (+ output.s0.x.x (+ -8 t172)))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172)))))))) (bvmul (bv #x0004 16) (app rows (+ -15 (+ output.s0.x.x (+ -8 t172)))))) (bv #x0008 16)) (bv #x0008 16)))] [(! x?$2107) #(struct:uint16_t
                                                                                                                                                                                                                                                                                                                                                                                                                                                  (bvashr (ite x?$2107 (bvadd (bvadd (app rows (+ -16 (+ output.s0.x.x (+ -8 t172)))) (bvadd (bvmul (bv #x0006 16) (app rows (+ -14 (+ output.s0.x.x (+ -8 t172))))) (bvadd (app rows (+ -12 (+ output.s0.x.x (+ -8 t172)))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172)))))))) (bvmul (bv #x0004 16) (app rows (+ -15 (+ output.s0.x.x (+ -8 t172)))))) (bv #x0008 16)) (bv #x0008 16)))])
Ran synthesizer for 62 ms
(model
 [x?$2107 #t])
(vec-shr
 (vec-add
  (vec-shl
   (load
    (buffer rows 'int16)
    (ramp (sca-add (sca-mul (var-lookup 't56) 16) 1) 1 16)
    (aligned 16 1))
   (sca-broadcast (uint16_t (bv #x0002 16)) 16))
  (vec-add
   (load
    (buffer rows 'int16)
    (ramp (sca-mul (var-lookup 't56) 16) 1 16)
    (aligned 16 0))
   (vec-add
    (vec-mul
     (load
      (buffer rows 'int16)
      (ramp (sca-add (sca-mul (var-lookup 't56) 16) 2) 1 16)
      (aligned 16 2))
     (sca-broadcast (int16_t (bv #x0006 16)) 16))
    (vec-add
     (load
      (buffer rows 'int16)
      (ramp (sca-add (sca-mul (var-lookup 't56) 16) 4) 1 16)
      (aligned 16 4))
     (vec-shl
      (load
       (buffer rows 'int16)
       (ramp (sca-add (sca-mul (var-lookup 't56) 16) 3) 1 16)
       (aligned 16 3))
      (sca-broadcast (uint16_t (bv #x0002 16)) 16))))))
 (sca-broadcast (uint16_t (bv #x0008 16)) 16))
(vs-shift-right
 ...
 (vs-mpy-add
  ...
  #<load-data>
  (list
   (uint16_t (bv #x0004 16))
   (int8_t (bv #x01 8))
   (int16_t (bv #x0006 16))
   (int8_t (bv #x01 8))
   (uint16_t (bv #x0004 16)))
  #f
  #f
  #f
  'int16)
 (uint16_t (bv #x0008 16))
 #f
 #f
 #t)
Ran bounds analysis for 24 ms
Ran bounds analysis for 18 ms
"Extended success?"
#t
(vs-shift-right
 ...
 (vs-mpy-add
  ...
  #<load-data>
  (list
   (uint16_t (bv #x0004 16))
   (int8_t (bv #x01 8))
   (int16_t (bv #x0006 16))
   (int8_t (bv #x01 8))
   (uint16_t (bv #x0004 16)))
  #f
  #f
  #f
  'int16)
 (uint16_t (bv #x0008 16))
 #f
 #f
 #t)
"Building Expr:"
(vec-cast
 (vec-shr
  (vec-add
   (vec-shl
    (load
     (buffer rows 'int16)
     (ramp (sca-add (sca-mul (var-lookup 't56) 16) 1) 1 16)
     (aligned 16 1))
    (sca-broadcast (uint16_t (bv #x0002 16)) 16))
   (vec-add
    (load
     (buffer rows 'int16)
     (ramp (sca-mul (var-lookup 't56) 16) 1 16)
     (aligned 16 0))
    (vec-add
     (vec-mul
      (load
       (buffer rows 'int16)
       (ramp (sca-add (sca-mul (var-lookup 't56) 16) 2) 1 16)
       (aligned 16 2))
      (sca-broadcast (int16_t (bv #x0006 16)) 16))
     (vec-add
      (load
       (buffer rows 'int16)
       (ramp (sca-add (sca-mul (var-lookup 't56) 16) 4) 1 16)
       (aligned 16 4))
      (vec-shl
       (load
        (buffer rows 'int16)
        (ramp (sca-add (sca-mul (var-lookup 't56) 16) 3) 1 16)
        (aligned 16 3))
       (sca-broadcast (uint16_t (bv #x0002 16)) 16))))))
  (sca-broadcast (uint16_t (bv #x0008 16)) 16))
 'uint8
 16)
"Fold templates"
(list
 #<load-data>
 (vs-mpy-add
  ...
  #<load-data>
  (list
   (uint16_t (bv #x0004 16))
   (int8_t (bv #x01 8))
   (int16_t (bv #x0006 16))
   (int8_t (bv #x01 8))
   (uint16_t (bv #x0004 16)))
  x?$2111
  x?$2112
  x?$2113
  'int16)
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   #<load-data>
   (list
    (uint16_t (bv #x0004 16))
    (int8_t (bv #x01 8))
    (int16_t (bv #x0006 16))
    (int8_t (bv #x01 8))
    (uint16_t (bv #x0004 16)))
   #f
   #f
   #f
   'int16)
  (uint16_t (bv #x0008 16))
  #f
  #f
  #t)
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   #<load-data>
   (list
    (uint16_t (bv #x0004 16))
    (int8_t (bv #x01 8))
    (int16_t (bv #x0006 16))
    (int8_t (bv #x01 8))
    (uint16_t (bv #x0004 16)))
   #f
   #f
   #f
   'int16)
  (uint16_t (bv #x0008 16))
  x?$2108
  x?$2109
  x?$2110))
here(#<load-data> #(struct:vs-mpy-add ... #<load-data> (#(struct:uint16_t (bv #x0004 16)) #(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0006 16)) #(struct:int8_t (bv #x01 8)) #(struct:uint16_t (bv #x0004 16))) x?$2111 x?$2112 x?$2113 int16) #(struct:vs-shift-right ... #(struct:vs-mpy-add ... #<load-data> (#(struct:uint16_t (bv #x0004 16)) #(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0006 16)) #(struct:int8_t (bv #x01 8)) #(struct:uint16_t (bv #x0004 16))) #f #f #f int16) #(struct:uint16_t (bv #x0008 16)) #f #f #t) #(struct:vs-shift-right ... #(struct:vs-mpy-add ... #<load-data> (#(struct:uint16_t (bv #x0004 16)) #(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0006 16)) #(struct:int8_t (bv #x01 8)) #(struct:uint16_t (bv #x0004 16))) #f #f #f int16) #(struct:uint16_t (bv #x0008 16)) x?$2108 x?$2109 x?$2110))

"Replace templates"
'()
run-x86-synthesizer
halide-expr:
  (vec-cast
 (vec-shr
  (vec-add
   (vec-shl
    (load
     (buffer rows 'int16)
     (ramp (sca-add (sca-mul (var-lookup 't56) 16) 1) 1 16)
     (aligned 16 1))
    (sca-broadcast (uint16_t (bv #x0002 16)) 16))
   (vec-add
    (load
     (buffer rows 'int16)
     (ramp (sca-mul (var-lookup 't56) 16) 1 16)
     (aligned 16 0))
    (vec-add
     (vec-mul
      (load
       (buffer rows 'int16)
       (ramp (sca-add (sca-mul (var-lookup 't56) 16) 2) 1 16)
       (aligned 16 2))
      (sca-broadcast (int16_t (bv #x0006 16)) 16))
     (vec-add
      (load
       (buffer rows 'int16)
       (ramp (sca-add (sca-mul (var-lookup 't56) 16) 4) 1 16)
       (aligned 16 4))
      (vec-shl
       (load
        (buffer rows 'int16)
        (ramp (sca-add (sca-mul (var-lookup 't56) 16) 3) 1 16)
        (aligned 16 3))
       (sca-broadcast (uint16_t (bv #x0002 16)) 16))))))
  (sca-broadcast (uint16_t (bv #x0008 16)) 16))
 'uint8
 16)
template:
  #<load-data>
axioms:
  '()
optimized-halide-expr:
  (vec-cast
 (vec-shr
  (vec-add
   (vec-shl
    (load
     (buffer rows 'int16)
     (ramp (sca-add (sca-mul (var-lookup 't56) 16) 1) 1 16)
     (aligned 16 1))
    (sca-broadcast (uint16_t (bv #x0002 16)) 16))
   (vec-add
    (load
     (buffer rows 'int16)
     (ramp (sca-mul (var-lookup 't56) 16) 1 16)
     (aligned 16 0))
    (vec-add
     (vec-mul
      (load
       (buffer rows 'int16)
       (ramp (sca-add (sca-mul (var-lookup 't56) 16) 2) 1 16)
       (aligned 16 2))
      (sca-broadcast (int16_t (bv #x0006 16)) 16))
     (vec-add
      (load
       (buffer rows 'int16)
       (ramp (sca-add (sca-mul (var-lookup 't56) 16) 4) 1 16)
       (aligned 16 4))
      (vec-shl
       (load
        (buffer rows 'int16)
        (ramp (sca-add (sca-mul (var-lookup 't56) 16) 3) 1 16)
        (aligned 16 3))
       (sca-broadcast (uint16_t (bv #x0002 16)) 16))))))
  (sca-broadcast (uint16_t (bv #x0008 16)) 16))
 'uint8
 16)
optimized-template:
  #<load-data>
optimized Halide 0:
  (uint8_t
 (extract 7 0 (bvashr (bvadd (bvshl (app rows (+ -15 (+ output.s0.x.x (+ -8 t172)))) (bv #x0002 16)) (bvadd (app rows (+ -16 (+ output.s0.x.x (+ -8 t172)))) (bvadd (bvmul (bv #x0006 16) (app rows (+ -14 (+ output.s0.x.x (+ -8 t172))))) (bvadd (app rows (+ -12 (+ output.s0.x.x (+ -8 t172)))) (bvshl (app rows (+ -13 (+ output.s0.x.x (+ -8 t172)))) (bv #x0002 16)))))) (bv #x0008 16))))
optimized x86 0:
  (int16_t
 (ite* (⊢ (= 0 idx$2116) (app rows (+ -16 (+ output.s0.x.x (+ -8 t172))))) (⊢ (= 1 idx$2116) (app rows (+ -12 (+ output.s0.x.x (+ -8 t172))))) (⊢ (= 2 idx$2116) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (⊢ (= 3 idx$2116) (app rows (+ -14 (+ output.s0.x.x (+ -8 t172))))) (⊢ (= 4 idx$2116) (app rows (+ -15 (+ output.s0.x.x (+ -8 t172)))))))
Ran synthesizer for 2 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-cast
 (vec-shr
  (vec-add
   (vec-shl
    (load
     (buffer rows 'int16)
     (ramp (sca-add (sca-mul (var-lookup 't56) 16) 1) 1 16)
     (aligned 16 1))
    (sca-broadcast (uint16_t (bv #x0002 16)) 16))
   (vec-add
    (load
     (buffer rows 'int16)
     (ramp (sca-mul (var-lookup 't56) 16) 1 16)
     (aligned 16 0))
    (vec-add
     (vec-mul
      (load
       (buffer rows 'int16)
       (ramp (sca-add (sca-mul (var-lookup 't56) 16) 2) 1 16)
       (aligned 16 2))
      (sca-broadcast (int16_t (bv #x0006 16)) 16))
     (vec-add
      (load
       (buffer rows 'int16)
       (ramp (sca-add (sca-mul (var-lookup 't56) 16) 4) 1 16)
       (aligned 16 4))
      (vec-shl
       (load
        (buffer rows 'int16)
        (ramp (sca-add (sca-mul (var-lookup 't56) 16) 3) 1 16)
        (aligned 16 3))
       (sca-broadcast (uint16_t (bv #x0002 16)) 16))))))
  (sca-broadcast (uint16_t (bv #x0008 16)) 16))
 'uint8
 16)
template:
  (vs-mpy-add
 ...
 #<load-data>
 (list
  (uint16_t (bv #x0004 16))
  (int8_t (bv #x01 8))
  (int16_t (bv #x0006 16))
  (int8_t (bv #x01 8))
  (uint16_t (bv #x0004 16)))
 x?$2111
 x?$2112
 x?$2113
 'int16)
axioms:
  '()
optimized-halide-expr:
  (vec-cast
 (vec-shr
  (vec-add
   (vec-shl
    (load
     (buffer rows 'int16)
     (ramp (sca-add (sca-mul (var-lookup 't56) 16) 1) 1 16)
     (aligned 16 1))
    (sca-broadcast (uint16_t (bv #x0002 16)) 16))
   (vec-add
    (load
     (buffer rows 'int16)
     (ramp (sca-mul (var-lookup 't56) 16) 1 16)
     (aligned 16 0))
    (vec-add
     (vec-mul
      (load
       (buffer rows 'int16)
       (ramp (sca-add (sca-mul (var-lookup 't56) 16) 2) 1 16)
       (aligned 16 2))
      (sca-broadcast (int16_t (bv #x0006 16)) 16))
     (vec-add
      (load
       (buffer rows 'int16)
       (ramp (sca-add (sca-mul (var-lookup 't56) 16) 4) 1 16)
       (aligned 16 4))
      (vec-shl
       (load
        (buffer rows 'int16)
        (ramp (sca-add (sca-mul (var-lookup 't56) 16) 3) 1 16)
        (aligned 16 3))
       (sca-broadcast (uint16_t (bv #x0002 16)) 16))))))
  (sca-broadcast (uint16_t (bv #x0008 16)) 16))
 'uint8
 16)
optimized-template:
  (vs-mpy-add
 ...
 #<load-data>
 (list
  (uint16_t (bv #x0004 16))
  (int8_t (bv #x01 8))
  (int16_t (bv #x0006 16))
  (int8_t (bv #x01 8))
  (uint16_t (bv #x0004 16)))
 x?$2111
 x?$2112
 x?$2113
 'int16)
optimized Halide 0:
  (uint8_t
 (extract 7 0 (bvashr (bvadd (bvshl (app rows (+ -15 (+ output.s0.x.x (+ -8 t172)))) (bv #x0002 16)) (bvadd (app rows (+ -16 (+ output.s0.x.x (+ -8 t172)))) (bvadd (bvmul (bv #x0006 16) (app rows (+ -14 (+ output.s0.x.x (+ -8 t172))))) (bvadd (app rows (+ -12 (+ output.s0.x.x (+ -8 t172)))) (bvshl (app rows (+ -13 (+ output.s0.x.x (+ -8 t172)))) (bv #x0002 16)))))) (bv #x0008 16))))
optimized x86 0:
  (int16_t
 (ite* (⊢ (&& (! x?$2113) (! (&& x?$2111 x?$2113))) (ite x?$2111 (bvadd (ite x?$2111 (bvadd (ite x?$2111 (bvadd (ite x?$2111 (bvadd (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))) (ite (bvsle (bvadd (bv #x8000 16) (bvneg (ite (bvsle (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16)) (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16)))) (ite (bvsle (app rows (+ -12 (+ output.s0.x.x (+ -8 t172)))) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16))))) (app rows (+ -12 (+ output.s0.x.x (+ -8 t172)))) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16)))))) (ite (bvsle (app rows (+ -12 (+ output.s0.x.x (+ -8 t172)))) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16))))) (app rows (+ -12 (+ output.s0.x.x (+ -8 t172)))) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16))))) (bvadd (bv #x8000 16) (bvneg (ite (bvsle (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16)) (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16)))))) (bvadd (app rows (+ -12 (+ output.s0.x.x (+ -8 t172)))) (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (ite (bvsle (bvadd (bv #x8000 16) (bvneg (ite (bvsle (ite x?$2111 (bvadd (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))) (ite (bvsle (bvadd (bv #x8000 16) (bvneg (ite (bvsle (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16)) (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16)))) (ite (bvsle (app rows (+ -12 (+ output.s0.x.x (+ -8 t172)))) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16))))) (app rows (+ -12 (+ output.s0.x.x (+ -8 t172)))) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16)))))) (ite (bvsle (app rows (+ -12 (+ output.s0.x.x (+ -8 t172)))) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16))))) (app rows (+ -12 (+ output.s0.x.x (+ -8 t172)))) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16))))) (bvadd (bv #x8000 16) (bvneg (ite (bvsle (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16)) (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16)))))) (bvadd (app rows (+ -12 (+ output.s0.x.x (+ -8 t172)))) (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bv #x0000 16)) (ite x?$2111 (bvadd (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))) (ite (bvsle (bvadd (bv #x8000 16) (bvneg (ite (bvsle (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16)) (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16)))) (ite (bvsle (app rows (+ -12 (+ output.s0.x.x (+ -8 t172)))) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16))))) (app rows (+ -12 (+ output.s0.x.x (+ -8 t172)))) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16)))))) (ite (bvsle (app rows (+ -12 (+ output.s0.x.x (+ -8 t172)))) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16))))) (app rows (+ -12 (+ output.s0.x.x (+ -8 t172)))) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16))))) (bvadd (bv #x8000 16) (bvneg (ite (bvsle (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16)) (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16)))))) (bvadd (app rows (+ -12 (+ output.s0.x.x (+ -8 t172)))) (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bv #x0000 16)))) (ite (bvsle (bvmul (bv #x0006 16) (app rows (+ -14 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$2111 (bvadd (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))) (ite (bvsle (bvadd (bv #x8000 16) (bvneg (ite (bvsle (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16)) (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16)))) (ite (bvsle (app rows (+ -12 (+ output.s0.x.x (+ -8 t172)))) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16))))) (app rows (+ -12 (+ output.s0.x.x (+ -8 t172)))) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16)))))) (ite (bvsle (app rows (+ -12 (+ output.s0.x.x (+ -8 t172)))) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16))))) (app rows (+ -12 (+ output.s0.x.x (+ -8 t172)))) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16))))) (bvadd (bv #x8000 16) (bvneg (ite (bvsle (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16)) (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16)))))) (bvadd (app rows (+ -12 (+ output.s0.x.x (+ -8 t172)))) (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))))) (ite x?$2111 (bvadd (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))) (ite (bvsle (bvadd (bv #x8000 16) (bvneg (ite (bvsle (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16)) (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16)))) (ite (bvsle (app rows (+ -12 (+ output.s0.x.x (+ -8 t172)))) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16))))) (app rows (+ -12 (+ output.s0.x.x (+ -8 t172)))) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16)))))) (ite (bvsle (app rows (+ -12 (+ output.s0.x.x (+ -8 t172)))) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16))))) (app rows (+ -12 (+ output.s0.x.x (+ -8 t172)))) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16))))) (bvadd (bv #x8000 16) (bvneg (ite (bvsle (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16)) (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16)))))) (bvadd (app rows (+ -12 (+ output.s0.x.x (+ -8 t172)))) (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bv #x0000 16))))) (bvmul (bv #x0006 16) (app rows (+ -14 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$2111 (bvadd (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))) (ite (bvsle (bvadd (bv #x8000 16) (bvneg (ite (bvsle (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16)) (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16)))) (ite (bvsle (app rows (+ -12 (+ output.s0.x.x (+ -8 t172)))) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16))))) (app rows (+ -12 (+ output.s0.x.x (+ -8 t172)))) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16)))))) (ite (bvsle (app rows (+ -12 (+ output.s0.x.x (+ -8 t172)))) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16))))) (app rows (+ -12 (+ output.s0.x.x (+ -8 t172)))) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16))))) (bvadd (bv #x8000 16) (bvneg (ite (bvsle (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16)) (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16)))))) (bvadd (app rows (+ -12 (+ output.s0.x.x (+ -8 t172)))) (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))))) (ite x?$2111 (bvadd (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))) (ite (bvsle (bvadd (bv #x8000 16) (bvneg (ite (bvsle (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16)) (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16)))) (ite (bvsle (app rows (+ -12 (+ output.s0.x.x (+ -8 t172)))) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16))))) (app rows (+ -12 (+ output.s0.x.x (+ -8 t172)))) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16)))))) (ite (bvsle (app rows (+ -12 (+ output.s0.x.x (+ -8 t172)))) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16))))) (app rows (+ -12 (+ output.s0.x.x (+ -8 t172)))) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16))))) (bvadd (bv #x8000 16) (bvneg (ite (bvsle (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16)) (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16)))))) (bvadd (app rows (+ -12 (+ output.s0.x.x (+ -8 t172)))) (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bv #x0000 16)))))) (ite (bvsle (bvmul (bv #x0006 16) (app rows (+ -14 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$2111 (bvadd (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))) (ite (bvsle (bvadd (bv #x8000 16) (bvneg (ite (bvsle (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16)) (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16)))) (ite (bvsle (app rows (+ -12 (+ output.s0.x.x (+ -8 t172)))) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16))))) (app rows (+ -12 (+ output.s0.x.x (+ -8 t172)))) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16)))))) (ite (bvsle (app rows (+ -12 (+ output.s0.x.x (+ -8 t172)))) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16))))) (app rows (+ -12 (+ output.s0.x.x (+ -8 t172)))) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16))))) (bvadd (bv #x8000 16) (bvneg (ite (bvsle (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16)) (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16)))))) (bvadd (app rows (+ -12 (+ output.s0.x.x (+ -8 t172)))) (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))))) (ite x?$2111 (bvadd (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))) (ite (bvsle (bvadd (bv #x8000 16) (bvneg (ite (bvsle (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16)) (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16)))) (ite (bvsle (app rows (+ -12 (+ output.s0.x.x (+ -8 t172)))) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16))))) (app rows (+ -12 (+ output.s0.x.x (+ -8 t172)))) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16)))))) (ite (bvsle (app rows (+ -12 (+ output.s0.x.x (+ -8 t172)))) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16))))) (app rows (+ -12 (+ output.s0.x.x (+ -8 t172)))) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16))))) (bvadd (bv #x8000 16) (bvneg (ite (bvsle (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16)) (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16)))))) (bvadd (app rows (+ -12 (+ output.s0.x.x (+ -8 t172)))) (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bv #x0000 16))))) (bvmul (bv #x0006 16) (app rows (+ -14 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$2111 (bvadd (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))) (ite (bvsle (bvadd (bv #x8000 16) (bvneg (ite (bvsle (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16)) (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16)))) (ite (bvsle (app rows (+ -12 (+ output.s0.x.x (+ -8 t172)))) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16))))) (app rows (+ -12 (+ output.s0.x.x (+ -8 t172)))) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16)))))) (ite (bvsle (app rows (+ -12 (+ output.s0.x.x (+ -8 t172)))) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16))))) (app rows (+ -12 (+ output.s0.x.x (+ -8 t172)))) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16))))) (bvadd (bv #x8000 16) (bvneg (ite (bvsle (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16)) (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16)))))) (bvadd (app rows (+ -12 (+ output.s0.x.x (+ -8 t172)))) (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))))) (ite x?$2111 (bvadd (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))) (ite (bvsle (bvadd (bv #x8000 16) (bvneg (ite (bvsle (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16)) (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16)))) (ite (bvsle (app rows (+ -12 (+ output.s0.x.x (+ -8 t172)))) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16))))) (app rows (+ -12 (+ output.s0.x.x (+ -8 t172)))) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16)))))) (ite (bvsle (app rows (+ -12 (+ output.s0.x.x (+ -8 t172)))) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16))))) (app rows (+ -12 (+ output.s0.x.x (+ -8 t172)))) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16))))) (bvadd (bv #x8000 16) (bvneg (ite (bvsle (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16)) (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16)))))) (bvadd (app rows (+ -12 (+ output.s0.x.x (+ -8 t172)))) (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bv #x0000 16))))) (bvadd (bv #x8000 16) (bvneg (ite (bvsle (ite x?$2111 (bvadd (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))) (ite (bvsle (bvadd (bv #x8000 16) (bvneg (ite (bvsle (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16)) (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16)))) (ite (bvsle (app rows (+ -12 (+ output.s0.x.x (+ -8 t172)))) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16))))) (app rows (+ -12 (+ output.s0.x.x (+ -8 t172)))) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16)))))) (ite (bvsle (app rows (+ -12 (+ output.s0.x.x (+ -8 t172)))) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16))))) (app rows (+ -12 (+ output.s0.x.x (+ -8 t172)))) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16))))) (bvadd (bv #x8000 16) (bvneg (ite (bvsle (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16)) (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16)))))) (bvadd (app rows (+ -12 (+ output.s0.x.x (+ -8 t172)))) (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bv #x0000 16)) (ite x?$2111 (bvadd (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))) (ite (bvsle (bvadd (bv #x8000 16) (bvneg (ite (bvsle (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16)) (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16)))) (ite (bvsle (app rows (+ -12 (+ output.s0.x.x (+ -8 t172)))) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16))))) (app rows (+ -12 (+ output.s0.x.x (+ -8 t172)))) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16)))))) (ite (bvsle (app rows (+ -12 (+ output.s0.x.x (+ -8 t172)))) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16))))) (app rows (+ -12 (+ output.s0.x.x (+ -8 t172)))) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16))))) (bvadd (bv #x8000 16) (bvneg (ite (bvsle (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16)) (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16)))))) (bvadd (app rows (+ -12 (+ output.s0.x.x (+ -8 t172)))) (ite x?$2111 (bvadd (ite x?$2112 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (bvadd (bv #x7fff 16) (bvneg (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0004 16) (app rows (+ -13 (+ output.s0.x.x (+ -8 t172))))) (ite x?$2112 (bv #x0001 16) (bv #x0000 16)))))) (bv #x0000 16)))))) ...) ...) ...) ...) ...)) ...))
Ran synthesizer for 4 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-cast
 (vec-shr
  (vec-add
   (vec-shl
    (load
     (buffer rows 'int16)
     (ramp (sca-add (sca-mul (var-lookup 't56) 16) 1) 1 16)
     (aligned 16 1))
    (sca-broadcast (uint16_t (bv #x0002 16)) 16))
   (vec-add
    (load
     (buffer rows 'int16)
     (ramp (sca-mul (var-lookup 't56) 16) 1 16)
     (aligned 16 0))
    (vec-add
     (vec-mul
      (load
       (buffer rows 'int16)
       (ramp (sca-add (sca-mul (var-lookup 't56) 16) 2) 1 16)
       (aligned 16 2))
      (sca-broadcast (int16_t (bv #x0006 16)) 16))
     (vec-add
      (load
       (buffer rows 'int16)
       (ramp (sca-add (sca-mul (var-lookup 't56) 16) 4) 1 16)
       (aligned 16 4))
      (vec-shl
       (load
        (buffer rows 'int16)
        (ramp (sca-add (sca-mul (var-lookup 't56) 16) 3) 1 16)
        (aligned 16 3))
       (sca-broadcast (uint16_t (bv #x0002 16)) 16))))))
  (sca-broadcast (uint16_t (bv #x0008 16)) 16))
 'uint8
 16)
template:
  (vs-shift-right
 ...
 (vs-mpy-add
  ...
  #<load-data>
  (list
   (uint16_t (bv #x0004 16))
   (int8_t (bv #x01 8))
   (int16_t (bv #x0006 16))
   (int8_t (bv #x01 8))
   (uint16_t (bv #x0004 16)))
  #f
  #f
  #f
  'int16)
 (uint16_t (bv #x0008 16))
 #f
 #f
 #t)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-cast
 (vec-shr #<abstr-halide-expr> (sca-broadcast (uint16_t (bv #x0008 16)) 16))
 'uint8
 16)
optimized-template:
  (vs-shift-right ... #<abstr-expr> (uint16_t (bv #x0008 16)) #f #f #t)
optimized Halide 0:
  (uint8_t (extract 7 0 (bvashr (app abstr-vals$2180 0) (bv #x0008 16))))
optimized x86 0:
  (int16_t (bvashr (app abstr-vals$2180 0) (bv #x0008 16)))
Ran synthesizer for 1 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-cast
 (vec-shr
  (vec-add
   (vec-shl
    (load
     (buffer rows 'int16)
     (ramp (sca-add (sca-mul (var-lookup 't56) 16) 1) 1 16)
     (aligned 16 1))
    (sca-broadcast (uint16_t (bv #x0002 16)) 16))
   (vec-add
    (load
     (buffer rows 'int16)
     (ramp (sca-mul (var-lookup 't56) 16) 1 16)
     (aligned 16 0))
    (vec-add
     (vec-mul
      (load
       (buffer rows 'int16)
       (ramp (sca-add (sca-mul (var-lookup 't56) 16) 2) 1 16)
       (aligned 16 2))
      (sca-broadcast (int16_t (bv #x0006 16)) 16))
     (vec-add
      (load
       (buffer rows 'int16)
       (ramp (sca-add (sca-mul (var-lookup 't56) 16) 4) 1 16)
       (aligned 16 4))
      (vec-shl
       (load
        (buffer rows 'int16)
        (ramp (sca-add (sca-mul (var-lookup 't56) 16) 3) 1 16)
        (aligned 16 3))
       (sca-broadcast (uint16_t (bv #x0002 16)) 16))))))
  (sca-broadcast (uint16_t (bv #x0008 16)) 16))
 'uint8
 16)
template:
  (vs-shift-right
 ...
 (vs-mpy-add
  ...
  #<load-data>
  (list
   (uint16_t (bv #x0004 16))
   (int8_t (bv #x01 8))
   (int16_t (bv #x0006 16))
   (int8_t (bv #x01 8))
   (uint16_t (bv #x0004 16)))
  #f
  #f
  #f
  'int16)
 (uint16_t (bv #x0008 16))
 x?$2108
 x?$2109
 x?$2110)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-cast
 (vec-shr #<abstr-halide-expr> (sca-broadcast (uint16_t (bv #x0008 16)) 16))
 'uint8
 16)
optimized-template:
  (vs-shift-right
 ...
 #<abstr-expr>
 (uint16_t (bv #x0008 16))
 x?$2108
 x?$2109
 x?$2110)
optimized Halide 0:
  (uint8_t (extract 7 0 (bvashr (app abstr-vals$2181 0) (bv #x0008 16))))
optimized x86 0:
  (int16_t
 (ite x?$2108 (bvadd (ite x?$2110 (bvashr (app abstr-vals$2181 0) (bv #x0008 16)) (bvlshr (app abstr-vals$2181 0) (bv #x0008 16))) (bvand (bv #x0001 16) (ite x?$2110 (bvashr (app abstr-vals$2181 0) (bv #x0007 16)) (bvlshr (app abstr-vals$2181 0) (bv #x0007 16))))) (ite x?$2110 (bvashr (app abstr-vals$2181 0) (bv #x0008 16)) (bvlshr (app abstr-vals$2181 0) (bv #x0008 16)))))
Ran synthesizer for 2 ms
(unsat)
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (vec-cast
 (vec-shr
  (vec-add
   (vec-shl
    (load
     (buffer rows 'int16)
     (ramp (sca-add (sca-mul (var-lookup 't56) 16) 1) 1 16)
     (aligned 16 1))
    (sca-broadcast (uint16_t (bv #x0002 16)) 16))
   (vec-add
    (load
     (buffer rows 'int16)
     (ramp (sca-mul (var-lookup 't56) 16) 1 16)
     (aligned 16 0))
    (vec-add
     (vec-mul
      (load
       (buffer rows 'int16)
       (ramp (sca-add (sca-mul (var-lookup 't56) 16) 2) 1 16)
       (aligned 16 2))
      (sca-broadcast (int16_t (bv #x0006 16)) 16))
     (vec-add
      (load
       (buffer rows 'int16)
       (ramp (sca-add (sca-mul (var-lookup 't56) 16) 4) 1 16)
       (aligned 16 4))
      (vec-shl
       (load
        (buffer rows 'int16)
        (ramp (sca-add (sca-mul (var-lookup 't56) 16) 3) 1 16)
        (aligned 16 3))
       (sca-broadcast (uint16_t (bv #x0002 16)) 16))))))
  (sca-broadcast (uint16_t (bv #x0008 16)) 16))
 'uint8
 16)
template:
  (cast
 ...
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   #<load-data>
   (list
    (uint16_t (bv #x0004 16))
    (int8_t (bv #x01 8))
    (int16_t (bv #x0006 16))
    (int8_t (bv #x01 8))
    (uint16_t (bv #x0004 16)))
   #f
   #f
   #f
   'int16)
  (uint16_t (bv #x0008 16))
  #f
  #f
  #t)
 'uint8
 #f)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$2182 idx) (bv #x007f 16)) (bvsle (bv #xff80 16) (app abstr-vals$2182 idx)))))
optimized-halide-expr:
  (vec-cast #<abstr-halide-expr> 'uint8 16)
optimized-template:
  (cast ... #<abstr-expr> 'uint8 #f)
optimized Halide 0:
  (uint8_t (extract 7 0 (app abstr-vals$2182 0)))
optimized x86 0:
  (uint8_t (extract 7 0 (app abstr-vals$2182 0)))
Ran synthesizer for 32 ms
(model)
(vec-cast #<abstr-halide-expr> 'uint8 16)
(cast
 ...
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   #<load-data>
   (list
    (uint16_t (bv #x0004 16))
    (int8_t (bv #x01 8))
    (int16_t (bv #x0006 16))
    (int8_t (bv #x01 8))
    (uint16_t (bv #x0004 16)))
   #f
   #f
   #f
   'int16)
  (uint16_t (bv #x0008 16))
  #f
  #f
  #t)
 'uint8
 #f)
Ran bounds analysis for 17 ms
Ran bounds analysis for 11 ms
"Extended success?"
#t
(cast
 ...
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   #<load-data>
   (list
    (uint16_t (bv #x0004 16))
    (int8_t (bv #x01 8))
    (int16_t (bv #x0006 16))
    (int8_t (bv #x01 8))
    (uint16_t (bv #x0004 16)))
   #f
   #f
   #f
   'int16)
  (uint16_t (bv #x0008 16))
  #f
  #f
  #t)
 'uint8
 #f)

(x86) Successfully found an equivalent IR expression.

(cast
 ...
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   #<load-data>
   (list
    (uint16_t (bv #x0004 16))
    (int8_t (bv #x01 8))
    (int16_t (bv #x0006 16))
    (int8_t (bv #x01 8))
    (uint16_t (bv #x0004 16)))
   #f
   #f
   #f
   'int16)
  (uint16_t (bv #x0008 16))
  #f
  #f
  #t)
 'uint8
 #f)

Synthesis time: 3 seconds

Synthesizing x86 for:
(vec-cast
 (vec-shr
  (vec-add
   (vec-shl
    (load
     (buffer rows 'int16)
     (ramp (sca-add (sca-mul (var-lookup 't56) 16) 1) 1 16)
     (aligned 16 1))
    (sca-broadcast (uint16_t (bv #x0002 16)) 16))
   (vec-add
    (load
     (buffer rows 'int16)
     (ramp (sca-mul (var-lookup 't56) 16) 1 16)
     (aligned 16 0))
    (vec-add
     (vec-mul
      (load
       (buffer rows 'int16)
       (ramp (sca-add (sca-mul (var-lookup 't56) 16) 2) 1 16)
       (aligned 16 2))
      (sca-broadcast (int16_t (bv #x0006 16)) 16))
     (vec-add
      (load
       (buffer rows 'int16)
       (ramp (sca-add (sca-mul (var-lookup 't56) 16) 4) 1 16)
       (aligned 16 4))
      (vec-shl
       (load
        (buffer rows 'int16)
        (ramp (sca-add (sca-mul (var-lookup 't56) 16) 3) 1 16)
        (aligned 16 3))
       (sca-broadcast (uint16_t (bv #x0002 16)) 16))))))
  (sca-broadcast (uint16_t (bv #x0008 16)) 16))
 'uint8
 16)


synthesize-x86 output:
#<void>
#f
