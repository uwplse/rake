Lifting input expression to x86 IR...
=====================================

"Building Expr:"
(load
 (buffer input1 'uint8)
 (ramp
  (sca-add
   (sca-mul output.s0.x.x 16)
   (sca-add
    (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
    (var-lookup 't55)))
  1
  16)
 (aligned 1 0))
"Fold templates"
'()
here()

"Replace templates"
'()
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (load
 (buffer input1 'uint8)
 (ramp
  (sca-add
   (sca-mul output.s0.x.x 16)
   (sca-add
    (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
    (var-lookup 't55)))
  1
  16)
 (aligned 1 0))
template:
  #<load-data>
axioms:
  '()
optimized-halide-expr:
  (load
 (buffer input1 'uint8)
 (ramp
  (sca-add
   (sca-mul output.s0.x.x 16)
   (sca-add
    (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
    (var-lookup 't55)))
  1
  16)
 (aligned 1 0))
optimized-template:
  #<load-data>
optimized Halide 0:
  (uint8_t
 (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))))
optimized x86 0:
  (uint8_t
 (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))))
Ran synthesizer for 28 ms
(model
 [idx$0 0])
(load
 (buffer input1 'uint8)
 (ramp
  (sca-add
   (sca-mul output.s0.x.x 16)
   (sca-add
    (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
    (var-lookup 't55)))
  1
  16)
 (aligned 1 0))
#<load-data>
Ran bounds analysis for 21 ms
Ran bounds analysis for 12 ms
"Extended success?"
#t
#<load-data>
"Building Expr:"
(vec-cast
 (load
  (buffer input1 'uint8)
  (ramp
   (sca-add
    (sca-mul output.s0.x.x 16)
    (sca-add
     (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
     (var-lookup 't55)))
   1
   16)
  (aligned 1 0))
 'int16
 16)
"Fold templates"
'(#<load-data>)
here(#<load-data>)

"Replace templates"
'()
run-x86-synthesizer
halide-expr:
  (vec-cast
 (load
  (buffer input1 'uint8)
  (ramp
   (sca-add
    (sca-mul output.s0.x.x 16)
    (sca-add
     (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
     (var-lookup 't55)))
   1
   16)
  (aligned 1 0))
 'int16
 16)
template:
  #<load-data>
axioms:
  '()
optimized-halide-expr:
  (vec-cast
 (load
  (buffer input1 'uint8)
  (ramp
   (sca-add
    (sca-mul output.s0.x.x 16)
    (sca-add
     (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
     (var-lookup 't55)))
   1
   16)
  (aligned 1 0))
 'int16
 16)
optimized-template:
  #<load-data>
optimized Halide 0:
  (int16_t
 (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16)))
optimized x86 0:
  (uint8_t
 (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))))
Ran synthesizer for 1 ms
(unsat)
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (vec-cast
 (load
  (buffer input1 'uint8)
  (ramp
   (sca-add
    (sca-mul output.s0.x.x 16)
    (sca-add
     (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
     (var-lookup 't55)))
   1
   16)
  (aligned 1 0))
 'int16
 16)
template:
  (cast ... #<load-data> 'int16 #f)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-cast #<abstr-halide-expr> 'int16 16)
optimized-template:
  (cast ... #<abstr-expr> 'int16 #f)
optimized Halide 0:
  (int16_t (zero-extend (app abstr-vals$129 0) (bitvector 16)))
optimized x86 0:
  (int16_t (zero-extend (app abstr-vals$129 0) (bitvector 16)))
Ran synthesizer for 17 ms
(model)
(vec-cast #<abstr-halide-expr> 'int16 16)
(cast ... #<load-data> 'int16 #f)
Ran bounds analysis for 21 ms
Ran bounds analysis for 14 ms
"Extended success?"
#t
(cast ... #<load-data> 'int16 #f)
"Building Expr:"
(sca-broadcast (int16_t (bv #x0040 16)) 16)
"Fold templates"
'()
here()

"Replace templates"
'()
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (sca-broadcast (int16_t (bv #x0040 16)) 16)
template:
  (broadcast ... (int16_t (bv #x0040 16)))
axioms:
  '()
optimized-halide-expr:
  (sca-broadcast (int16_t (bv #x0040 16)) 16)
optimized-template:
  (broadcast ... (int16_t (bv #x0040 16)))
optimized Halide 0:
  (int16_t (bv #x0040 16))
optimized x86 0:
  (int16_t (bv #x0040 16))
Ran synthesizer for 17 ms
(model)
(sca-broadcast (int16_t (bv #x0040 16)) 16)
(broadcast ... (int16_t (bv #x0040 16)))
Ran bounds analysis for 25 ms
Ran bounds analysis for 15 ms
"Extended success?"
#t
(broadcast ... (int16_t (bv #x0040 16)))
"Building Expr:"
(vec-mul
 (vec-cast
  (load
   (buffer input1 'uint8)
   (ramp
    (sca-add
     (sca-mul output.s0.x.x 16)
     (sca-add
      (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
      (var-lookup 't55)))
    1
    16)
   (aligned 1 0))
  'int16
  16)
 (sca-broadcast (int16_t (bv #x0040 16)) 16))
"failing to fold x86-ir:cast"
#<load-data>
(cast ... #<load-data> 'int16 #f)
(list (cast ... #<load-data> 'int16 #f) (broadcast ... (int16_t (bv #x0040 16))))
(vec-mul (vec-cast (load (buffer input1 'uint8) (ramp (sca-add (sca-mul output.s0.x.x 16) (sca-add (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68)) (var-lookup 't55))) 1 16) (aligned 1 0)) 'int16 16) (sca-broadcast (int16_t (bv #x0040 16)) 16))
'int16
"Fold templates"
(list #<load-data> (cast ... #<load-data> 'int16 x?$131))
here(#<load-data> #(struct:cast ... #<load-data> int16 x?$131))

(list (vs-mpy-add ... #<load-data> (list (int16_t (bv #x0040 16))) #f #f #f 'int16) (vs-mpy-add ... #<load-data> (list (int16_t (bv #x0040 16))) #f #f #f 'int16) (vv-mpy-add ... #<load-data> '(1) (! x?$388) (! x?$389) (! x?$390) 'int16) (vv-mpy-add ... #<load-data> '(1) (! x?$391) (! x?$392) (! x?$393) 'int16))
"failing to repl x86-ir:cast"
#<load-data>
(cast ... #<load-data> 'int16 #f)
(vec-mul (vec-cast (load (buffer input1 'uint8) (ramp (sca-add (sca-mul output.s0.x.x 16) (sca-add (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68)) (var-lookup 't55))) 1 16) (aligned 1 0)) 'int16 16) (sca-broadcast (int16_t (bv #x0040 16)) 16))
'int16
"Replace templates"
(list
 (vs-mpy-add ... #<load-data> (list (int16_t (bv #x0040 16))) #f #f #f 'int16)
 (vs-mpy-add ... #<load-data> (list (int16_t (bv #x0040 16))) #f #f #f 'int16)
 (vv-mpy-add ... #<load-data> '(1) (! x?$388) (! x?$389) (! x?$390) 'int16)
 (vv-mpy-add ... #<load-data> '(1) (! x?$391) (! x?$392) (! x?$393) 'int16))
run-x86-synthesizer
halide-expr:
  (vec-mul
 (vec-cast
  (load
   (buffer input1 'uint8)
   (ramp
    (sca-add
     (sca-mul output.s0.x.x 16)
     (sca-add
      (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
      (var-lookup 't55)))
    1
    16)
   (aligned 1 0))
  'int16
  16)
 (sca-broadcast (int16_t (bv #x0040 16)) 16))
template:
  #<load-data>
axioms:
  '()
optimized-halide-expr:
  (vec-mul
 (vec-cast
  (load
   (buffer input1 'uint8)
   (ramp
    (sca-add
     (sca-mul output.s0.x.x 16)
     (sca-add
      (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
      (var-lookup 't55)))
    1
    16)
   (aligned 1 0))
  'int16
  16)
 (sca-broadcast (int16_t (bv #x0040 16)) 16))
optimized-template:
  #<load-data>
optimized Halide 0:
  (int16_t
 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))))
optimized x86 0:
  (uint8_t
 (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))))
Ran synthesizer for 1 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-mul
 (vec-cast
  (load
   (buffer input1 'uint8)
   (ramp
    (sca-add
     (sca-mul output.s0.x.x 16)
     (sca-add
      (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
      (var-lookup 't55)))
    1
    16)
   (aligned 1 0))
  'int16
  16)
 (sca-broadcast (int16_t (bv #x0040 16)) 16))
template:
  (cast ... #<load-data> 'int16 x?$131)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-mul
 (vec-cast #<abstr-halide-expr> 'int16 16)
 (sca-broadcast (int16_t (bv #x0040 16)) 16))
optimized-template:
  (cast ... #<abstr-expr> 'int16 x?$131)
optimized Halide 0:
  (int16_t
 (bvmul (bv #x0040 16) (zero-extend (app abstr-vals$394 0) (bitvector 16))))
optimized x86 0:
  (int16_t (zero-extend (app abstr-vals$394 0) (bitvector 16)))
Ran synthesizer for 47 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-mul
 (vec-cast
  (load
   (buffer input1 'uint8)
   (ramp
    (sca-add
     (sca-mul output.s0.x.x 16)
     (sca-add
      (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
      (var-lookup 't55)))
    1
    16)
   (aligned 1 0))
  'int16
  16)
 (sca-broadcast (int16_t (bv #x0040 16)) 16))
template:
  (vs-mpy-add ... #<load-data> (list (int16_t (bv #x0040 16))) #f #f #f 'int16)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-mul
 (vec-cast #<abstr-halide-expr> 'int16 16)
 (sca-broadcast (int16_t (bv #x0040 16)) 16))
optimized-template:
  (vs-mpy-add ... #<abstr-expr> (list (int16_t (bv #x0040 16))) #f #f #f 'int16)
optimized Halide 0:
  (int16_t
 (bvmul (bv #x0040 16) (zero-extend (app abstr-vals$395 0) (bitvector 16))))
optimized x86 0:
  (int16_t
 (bvmul (bv #x0040 16) (zero-extend (app abstr-vals$395 0) (bitvector 16))))
Ran synthesizer for 15 ms
(model)
(vec-mul
 (vec-cast #<abstr-halide-expr> 'int16 16)
 (sca-broadcast (int16_t (bv #x0040 16)) 16))
(vs-mpy-add ... #<load-data> (list (int16_t (bv #x0040 16))) #f #f #f 'int16)
Ran bounds analysis for 23 ms
Ran bounds analysis for 18 ms
"Success?"
#t
(vs-mpy-add ... #<load-data> (list (int16_t (bv #x0040 16))) #f #f #f 'int16)
"Building Expr:"
(sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16)
"Fold templates"
'()
here()

"Replace templates"
'()
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16)
template:
  (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))))
axioms:
  '()
optimized-halide-expr:
  (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16)
optimized-template:
  (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))))
optimized Halide 0:
  (int16_t (bvmul (bv #xffc0 16) t125))
optimized x86 0:
  (int16_t (bvmul (bv #xffc0 16) t125))
Ran synthesizer for 18 ms
(model)
(sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16)
(broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))))
Ran bounds analysis for 21 ms
Ran bounds analysis for 15 ms
"Extended success?"
#t
(broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))))
"Building Expr:"
(vec-add
 (vec-mul
  (vec-cast
   (load
    (buffer input1 'uint8)
    (ramp
     (sca-add
      (sca-mul output.s0.x.x 16)
      (sca-add
       (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
       (var-lookup 't55)))
     1
     16)
    (aligned 1 0))
   'int16
   16)
  (sca-broadcast (int16_t (bv #x0040 16)) 16))
 (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
"Fold templates"
(list
 #<load-data>
 (vs-mpy-add
  ...
  #<load-data>
  (list
   (int16_t (bv #x0040 16))
   (union [x?$400 #(struct:int16_t (bv #x0040 16))] [(! x?$400) #(struct:int8_t
                                                                  (bv #x01 8))]))
  #f
  #f
  #f
  'int16)
 (vs-mpy-add
  ...
  #<load-data>
  (list (int16_t (bv #x0040 16)))
  #f
  x?$398
  #f
  'int16)
 (vs-mpy-add
  ...
  (combine
   (vs-mpy-add
    ...
    #<load-data>
    (list (int16_t (bv #x0040 16)))
    #f
    #f
    #f
    'int16)
   (union [x?$401 #(struct:vs-mpy-add
                    ...
                    #<load-data>
                    (#(struct:int16_t (bv #x0040 16)))
                    #f
                    #f
                    #f
                    int16)] [(! x?$401) #(struct:broadcast
                                          ...
                                          #(struct:sca-mul
                                            #(struct:int16_t t125)
                                            #(struct:int16_t (bv #xffc0 16))))]))
  (list (int16_t (bv #x0040 16)) (int8_t (bv #x01 8)))
  #f
  #f
  #f
  'int16))
here(#<load-data> #(struct:vs-mpy-add ... #<load-data> (#(struct:int16_t (bv #x0040 16)) (union #:size 2 #:hash 1505242880361)) #f #f #f int16) #(struct:vs-mpy-add ... #<load-data> (#(struct:int16_t (bv #x0040 16))) #f x?$398 #f int16) #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<load-data> (#(struct:int16_t (bv #x0040 16))) #f #f #f int16) (union #:size 2 #:hash 361153400888)> (#(struct:int16_t (bv #x0040 16)) #(struct:int8_t (bv #x01 8))) #f #f #f int16))

"Replace templates"
'()
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-mul
  (vec-cast
   (load
    (buffer input1 'uint8)
    (ramp
     (sca-add
      (sca-mul output.s0.x.x 16)
      (sca-add
       (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
       (var-lookup 't55)))
     1
     16)
    (aligned 1 0))
   'int16
   16)
  (sca-broadcast (int16_t (bv #x0040 16)) 16))
 (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
template:
  #<load-data>
axioms:
  '()
optimized-halide-expr:
  (vec-add
 (vec-mul
  (vec-cast
   (load
    (buffer input1 'uint8)
    (ramp
     (sca-add
      (sca-mul output.s0.x.x 16)
      (sca-add
       (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
       (var-lookup 't55)))
     1
     16)
    (aligned 1 0))
   'int16
   16)
  (sca-broadcast (int16_t (bv #x0040 16)) 16))
 (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
optimized-template:
  #<load-data>
optimized Halide 0:
  (int16_t
 (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)))
optimized x86 0:
  (uint8_t
 (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))))
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-mul
  (vec-cast
   (load
    (buffer input1 'uint8)
    (ramp
     (sca-add
      (sca-mul output.s0.x.x 16)
      (sca-add
       (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
       (var-lookup 't55)))
     1
     16)
    (aligned 1 0))
   'int16
   16)
  (sca-broadcast (int16_t (bv #x0040 16)) 16))
 (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
template:
  (vs-mpy-add
 ...
 #<load-data>
 (list
  (int16_t (bv #x0040 16))
  (union [x?$400 #(struct:int16_t (bv #x0040 16))] [(! x?$400) #(struct:int8_t
                                                                 (bv #x01 8))]))
 #f
 #f
 #f
 'int16)
axioms:
  '()
optimized-halide-expr:
  (vec-add
 (vec-mul
  (vec-cast
   (load
    (buffer input1 'uint8)
    (ramp
     (sca-add
      (sca-mul output.s0.x.x 16)
      (sca-add
       (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
       (var-lookup 't55)))
     1
     16)
    (aligned 1 0))
   'int16
   16)
  (sca-broadcast (int16_t (bv #x0040 16)) 16))
 (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
optimized-template:
  (vs-mpy-add
 ...
 #<load-data>
 (list
  (int16_t (bv #x0040 16))
  (union [x?$400 #(struct:int16_t (bv #x0040 16))] [(! x?$400) #(struct:int8_t
                                                                 (bv #x01 8))]))
 #f
 #f
 #f
 'int16)
optimized Halide 0:
  (int16_t
 (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)))
optimized x86 0:
  (int16_t
 (bvmul (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16)) (ite x?$400 (bv #x0080 16) (bv #x0041 16))))
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-mul
  (vec-cast
   (load
    (buffer input1 'uint8)
    (ramp
     (sca-add
      (sca-mul output.s0.x.x 16)
      (sca-add
       (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
       (var-lookup 't55)))
     1
     16)
    (aligned 1 0))
   'int16
   16)
  (sca-broadcast (int16_t (bv #x0040 16)) 16))
 (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
template:
  (vs-mpy-add
 ...
 #<load-data>
 (list (int16_t (bv #x0040 16)))
 #f
 x?$398
 #f
 'int16)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-add
 (vec-mul
  (vec-cast #<abstr-halide-expr> 'int16 16)
  (sca-broadcast (int16_t (bv #x0040 16)) 16))
 (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
optimized-template:
  (vs-mpy-add
 ...
 #<abstr-expr>
 (list (int16_t (bv #x0040 16)))
 #f
 x?$398
 #f
 'int16)
optimized Halide 0:
  (int16_t
 (bvadd (bvmul (bv #xffc0 16) t125) (bvmul (bv #x0040 16) (zero-extend (app abstr-vals$594 0) (bitvector 16)))))
optimized x86 0:
  (int16_t
 (bvadd (bvmul (bv #x0040 16) (zero-extend (app abstr-vals$594 0) (bitvector 16))) (ite x?$398 (bv #x0001 16) (bv #x0000 16))))
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-mul
  (vec-cast
   (load
    (buffer input1 'uint8)
    (ramp
     (sca-add
      (sca-mul output.s0.x.x 16)
      (sca-add
       (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
       (var-lookup 't55)))
     1
     16)
    (aligned 1 0))
   'int16
   16)
  (sca-broadcast (int16_t (bv #x0040 16)) 16))
 (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
template:
  (vs-mpy-add
 ...
 (combine
  (vs-mpy-add ... #<load-data> (list (int16_t (bv #x0040 16))) #f #f #f 'int16)
  (union [x?$401 #(struct:vs-mpy-add
                   ...
                   #<load-data>
                   (#(struct:int16_t (bv #x0040 16)))
                   #f
                   #f
                   #f
                   int16)] [(! x?$401) #(struct:broadcast
                                         ...
                                         #(struct:sca-mul
                                           #(struct:int16_t t125)
                                           #(struct:int16_t (bv #xffc0 16))))]))
 (list (int16_t (bv #x0040 16)) (int8_t (bv #x01 8)))
 #f
 #f
 #f
 'int16)
axioms:
  (union [x?$401 ((forall (idx) (&& (bvsle (app abstr-vals$595 idx) (bv #x3fc0 16)) (bvsle (bv #x0000 16) (app abstr-vals$595 idx))))
                (forall (idx) (&& (bvsle (app abstr-vals$595 idx) (bv #x3fc0 16)) (bvsle (bv #x0000 16) (app abstr-vals$595 idx)))))] [(! x?$401) ((forall (idx) (&& (bvsle (app abstr-vals$595 idx) (bv #x3fc0 16)) (bvsle (bv #x0000 16) (app abstr-vals$595 idx)))))])
optimized-halide-expr:
  (vec-add
 #<abstr-halide-expr>
 (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
optimized-template:
  (vs-mpy-add
 ...
 (combine
  #<abstr-expr>
  (union [x?$401 #<abstr-expr>] [(! x?$401) #(struct:broadcast
                                              ...
                                              #(struct:sca-mul
                                                #(struct:int16_t t125)
                                                #(struct:int16_t
                                                  (bv #xffc0 16))))]))
 (list (int16_t (bv #x0040 16)) (int8_t (bv #x01 8)))
 #f
 #f
 #f
 'int16)
optimized Halide 0:
  (int16_t (bvadd (bvmul (bv #xffc0 16) t125) (app abstr-vals$595 0)))
optimized x86 0:
  (int16_t
 (bvadd (bvmul (bv #x0040 16) (ite c$403 (app abstr-vals$595 idx$402) (ite x?$401 (app abstr-vals$595 idx$402) (bvmul (bv #xffc0 16) t125)))) (ite c$405 (app abstr-vals$595 idx$404) (ite x?$401 (app abstr-vals$595 idx$404) (bvmul (bv #xffc0 16) t125)))))
Ran synthesizer for 134 ms
(unsat)
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-mul
  (vec-cast
   (load
    (buffer input1 'uint8)
    (ramp
     (sca-add
      (sca-mul output.s0.x.x 16)
      (sca-add
       (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
       (var-lookup 't55)))
     1
     16)
    (aligned 1 0))
   'int16
   16)
  (sca-broadcast (int16_t (bv #x0040 16)) 16))
 (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
template:
  (vs-mpy-add
 ...
 (combine
  #<load-data>
  (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
 (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
 #f
 #f
 #f
 'int16)
axioms:
  (list #t (forall (idx) (bvsle (app abstr-vals$858 idx) (bv #x7fc0 16))))
optimized-halide-expr:
  (vec-add
 (vec-mul
  (vec-cast #<abstr-halide-expr> 'int16 16)
  (sca-broadcast (int16_t (bv #x0040 16)) 16))
 #<abstr-halide-expr>)
optimized-template:
  (vs-mpy-add
 ...
 (combine #<abstr-expr> #<abstr-expr>)
 (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
 #f
 #f
 #f
 'int16)
optimized Halide 0:
  (int16_t
 (bvadd (app abstr-vals$858 0) (bvmul (bv #x0040 16) (zero-extend (app abstr-vals$857 0) (bitvector 16)))))
optimized x86 0:
  (int16_t
 (bvadd (ite c$598 (zero-extend (app abstr-vals$857 idx$597) (bitvector 16)) (app abstr-vals$858 idx$597)) (bvmul (bv #x0040 16) (ite c$600 (zero-extend (app abstr-vals$857 idx$599) (bitvector 16)) (app abstr-vals$858 idx$599)))))
Ran synthesizer for 103 ms
(model
 [idx$597 0]
 [c$598 #f]
 [idx$599 0]
 [c$600 #t])
(vec-add
 (vec-mul
  (vec-cast #<abstr-halide-expr> 'int16 16)
  (sca-broadcast (int16_t (bv #x0040 16)) 16))
 #<abstr-halide-expr>)
(vs-mpy-add
 ...
 (combine
  #<load-data>
  (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
 (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
 #f
 #f
 #f
 'int16)
Ran bounds analysis for 25 ms
Ran bounds analysis for 18 ms
"Extended success?"
#t
(vs-mpy-add
 ...
 (combine
  #<load-data>
  (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
 (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
 #f
 #f
 #f
 'int16)
"Building Expr:"
(vec-cast
 (vec-add
  (vec-mul
   (vec-cast
    (load
     (buffer input1 'uint8)
     (ramp
      (sca-add
       (sca-mul output.s0.x.x 16)
       (sca-add
        (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
        (var-lookup 't55)))
      1
      16)
     (aligned 1 0))
    'int16
    16)
   (sca-broadcast (int16_t (bv #x0040 16)) 16))
  (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
 'int32
 16)
"Fold templates"
(list
 #<load-data>
 (vs-mpy-add
  ...
  (combine
   #<load-data>
   (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
  (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
  x?$861
  x?$862
  x?$863
  'int16))
here(#<load-data> #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t125) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) x?$861 x?$862 x?$863 int16))

"Replace templates"
'()
run-x86-synthesizer
halide-expr:
  (vec-cast
 (vec-add
  (vec-mul
   (vec-cast
    (load
     (buffer input1 'uint8)
     (ramp
      (sca-add
       (sca-mul output.s0.x.x 16)
       (sca-add
        (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
        (var-lookup 't55)))
      1
      16)
     (aligned 1 0))
    'int16
    16)
   (sca-broadcast (int16_t (bv #x0040 16)) 16))
  (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
 'int32
 16)
template:
  #<load-data>
axioms:
  '()
optimized-halide-expr:
  (vec-cast
 (vec-add
  (vec-mul
   (vec-cast
    (load
     (buffer input1 'uint8)
     (ramp
      (sca-add
       (sca-mul output.s0.x.x 16)
       (sca-add
        (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
        (var-lookup 't55)))
      1
      16)
     (aligned 1 0))
    'int16
    16)
   (sca-broadcast (int16_t (bv #x0040 16)) 16))
  (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
 'int32
 16)
optimized-template:
  #<load-data>
optimized Halide 0:
  (int32_t
 (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)))
optimized x86 0:
  (uint8_t
 (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))))
run-x86-synthesizer
halide-expr:
  (vec-cast
 (vec-add
  (vec-mul
   (vec-cast
    (load
     (buffer input1 'uint8)
     (ramp
      (sca-add
       (sca-mul output.s0.x.x 16)
       (sca-add
        (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
        (var-lookup 't55)))
      1
      16)
     (aligned 1 0))
    'int16
    16)
   (sca-broadcast (int16_t (bv #x0040 16)) 16))
  (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
 'int32
 16)
template:
  (vs-mpy-add
 ...
 (combine
  #<load-data>
  (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
 (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
 x?$861
 x?$862
 x?$863
 'int16)
axioms:
  (list #t (forall (idx) (bvsle (app abstr-vals$930 idx) (bv #x7fc0 16))))
optimized-halide-expr:
  (vec-cast
 (vec-add
  (vec-mul
   (vec-cast #<abstr-halide-expr> 'int16 16)
   (sca-broadcast (int16_t (bv #x0040 16)) 16))
  #<abstr-halide-expr>)
 'int32
 16)
optimized-template:
  (vs-mpy-add
 ...
 (combine #<abstr-expr> #<abstr-expr>)
 (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
 x?$861
 x?$862
 x?$863
 'int16)
optimized Halide 0:
  (int32_t
 (sign-extend (bvadd (app abstr-vals$930 0) (bvmul (bv #x0040 16) (zero-extend (app abstr-vals$929 0) (bitvector 16)))) (bitvector 32)))
optimized x86 0:
  (int16_t
 (ite* (⊢ (&& (! x?$863) (! (&& x?$861 x?$863))) (ite x?$861 (bvadd (ite x?$861 (bvadd (ite x?$862 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$930 0) (ite x?$862 (bv #x0001 16) (bv #x0000 16)))) (ite (bvsle (bvadd (bv #x8000 16) (bvneg (ite (bvsle (ite x?$861 (bvadd (ite x?$862 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$930 0) (ite x?$862 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16)) (ite x?$861 (bvadd (ite x?$862 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$930 0) (ite x?$862 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16)))) (ite (bvsle (bvmul (bv #x0040 16) (zero-extend (app abstr-vals$929 0) (bitvector 16))) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$861 (bvadd (ite x?$862 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$930 0) (ite x?$862 (bv #x0001 16) (bv #x0000 16))))) (ite x?$861 (bvadd (ite x?$862 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$930 0) (ite x?$862 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16))))) (bvmul (bv #x0040 16) (zero-extend (app abstr-vals$929 0) (bitvector 16))) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$861 (bvadd (ite x?$862 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$930 0) (ite x?$862 (bv #x0001 16) (bv #x0000 16))))) (ite x?$861 (bvadd (ite x?$862 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$930 0) (ite x?$862 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16)))))) (ite (bvsle (bvmul (bv #x0040 16) (zero-extend (app abstr-vals$929 0) (bitvector 16))) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$861 (bvadd (ite x?$862 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$930 0) (ite x?$862 (bv #x0001 16) (bv #x0000 16))))) (ite x?$861 (bvadd (ite x?$862 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$930 0) (ite x?$862 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16))))) (bvmul (bv #x0040 16) (zero-extend (app abstr-vals$929 0) (bitvector 16))) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$861 (bvadd (ite x?$862 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$930 0) (ite x?$862 (bv #x0001 16) (bv #x0000 16))))) (ite x?$861 (bvadd (ite x?$862 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$930 0) (ite x?$862 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16))))) (bvadd (bv #x8000 16) (bvneg (ite (bvsle (ite x?$861 (bvadd (ite x?$862 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$930 0) (ite x?$862 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16)) (ite x?$861 (bvadd (ite x?$862 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$930 0) (ite x?$862 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0040 16) (zero-extend (app abstr-vals$929 0) (bitvector 16))) (ite x?$861 (bvadd (ite x?$862 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$930 0) (ite x?$862 (bv #x0001 16) (bv #x0000 16))))))) (⊢ (|| (&& x?$861 x?$863) (&& x?$863 (! (&& x?$861 x?$863)))) (bvashr (ite x?$861 (bvadd (ite x?$861 (bvadd (ite x?$862 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$930 0) (ite x?$862 (bv #x0001 16) (bv #x0000 16)))) (ite (bvsle (bvadd (bv #x8000 16) (bvneg (ite (bvsle (ite x?$861 (bvadd (ite x?$862 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$930 0) (ite x?$862 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16)) (ite x?$861 (bvadd (ite x?$862 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$930 0) (ite x?$862 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16)))) (ite (bvsle (bvmul (bv #x0040 16) (zero-extend (app abstr-vals$929 0) (bitvector 16))) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$861 (bvadd (ite x?$862 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$930 0) (ite x?$862 (bv #x0001 16) (bv #x0000 16))))) (ite x?$861 (bvadd (ite x?$862 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$930 0) (ite x?$862 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16))))) (bvmul (bv #x0040 16) (zero-extend (app abstr-vals$929 0) (bitvector 16))) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$861 (bvadd (ite x?$862 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$930 0) (ite x?$862 (bv #x0001 16) (bv #x0000 16))))) (ite x?$861 (bvadd (ite x?$862 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$930 0) (ite x?$862 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16)))))) (ite (bvsle (bvmul (bv #x0040 16) (zero-extend (app abstr-vals$929 0) (bitvector 16))) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$861 (bvadd (ite x?$862 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$930 0) (ite x?$862 (bv #x0001 16) (bv #x0000 16))))) (ite x?$861 (bvadd (ite x?$862 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$930 0) (ite x?$862 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16))))) (bvmul (bv #x0040 16) (zero-extend (app abstr-vals$929 0) (bitvector 16))) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$861 (bvadd (ite x?$862 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$930 0) (ite x?$862 (bv #x0001 16) (bv #x0000 16))))) (ite x?$861 (bvadd (ite x?$862 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$930 0) (ite x?$862 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16))))) (bvadd (bv #x8000 16) (bvneg (ite (bvsle (ite x?$861 (bvadd (ite x?$862 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$930 0) (ite x?$862 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16)) (ite x?$861 (bvadd (ite x?$862 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$930 0) (ite x?$862 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0040 16) (zero-extend (app abstr-vals$929 0) (bitvector 16))) (ite x?$861 (bvadd (ite x?$862 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$930 0) (ite x?$862 (bv #x0001 16) (bv #x0000 16)))))) (bv #x0001 16)))))
Ran synthesizer for 15 ms
(unsat)
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (vec-cast
 (vec-add
  (vec-mul
   (vec-cast
    (load
     (buffer input1 'uint8)
     (ramp
      (sca-add
       (sca-mul output.s0.x.x 16)
       (sca-add
        (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
        (var-lookup 't55)))
      1
      16)
     (aligned 1 0))
    'int16
    16)
   (sca-broadcast (int16_t (bv #x0040 16)) 16))
  (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
 'int32
 16)
template:
  (cast
 ...
 (vs-mpy-add
  ...
  (combine
   #<load-data>
   (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
  (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
  #f
  #f
  #f
  'int16)
 'int32
 #f)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-cast #<abstr-halide-expr> 'int32 16)
optimized-template:
  (cast ... #<abstr-expr> 'int32 #f)
optimized Halide 0:
  (int32_t (sign-extend (app abstr-vals$931 0) (bitvector 32)))
optimized x86 0:
  (int32_t (sign-extend (app abstr-vals$931 0) (bitvector 32)))
Ran synthesizer for 15 ms
(model)
(vec-cast #<abstr-halide-expr> 'int32 16)
(cast
 ...
 (vs-mpy-add
  ...
  (combine
   #<load-data>
   (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
  (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
  #f
  #f
  #f
  'int16)
 'int32
 #f)
Ran bounds analysis for 33 ms
Ran bounds analysis for 24 ms
"Extended success?"
#t
(cast
 ...
 (vs-mpy-add
  ...
  (combine
   #<load-data>
   (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
  (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
  #f
  #f
  #f
  'int16)
 'int32
 #f)
"Building Expr:"
(sca-broadcast (int16_t input1_multiplier) 16)
"Fold templates"
'()
here()

"Replace templates"
'()
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (sca-broadcast (int16_t input1_multiplier) 16)
template:
  (broadcast ... (int16_t input1_multiplier))
axioms:
  '()
optimized-halide-expr:
  (sca-broadcast (int16_t input1_multiplier) 16)
optimized-template:
  (broadcast ... (int16_t input1_multiplier))
optimized Halide 0:
  (int16_t input1_multiplier)
optimized x86 0:
  (int16_t input1_multiplier)
Ran synthesizer for 17 ms
(model)
(sca-broadcast (int16_t input1_multiplier) 16)
(broadcast ... (int16_t input1_multiplier))
Ran bounds analysis for 26 ms
Ran bounds analysis for 17 ms
"Extended success?"
#t
(broadcast ... (int16_t input1_multiplier))
"Building Expr:"
(vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16)
"Fold templates"
'()
here()

"Replace templates"
'()
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16)
template:
  (cast ... (broadcast ... (int16_t input1_multiplier)) 'int32 #f)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-cast #<abstr-halide-expr> 'int32 16)
optimized-template:
  (cast ... #<abstr-expr> 'int32 #f)
optimized Halide 0:
  (int32_t (sign-extend (app abstr-vals$933 0) (bitvector 32)))
optimized x86 0:
  (int32_t (sign-extend (app abstr-vals$933 0) (bitvector 32)))
Ran synthesizer for 17 ms
(model)
(vec-cast #<abstr-halide-expr> 'int32 16)
(cast ... (broadcast ... (int16_t input1_multiplier)) 'int32 #f)
Ran bounds analysis for 35 ms
Ran bounds analysis for 28 ms
"Extended success?"
#t
(cast ... (broadcast ... (int16_t input1_multiplier)) 'int32 #f)
"Building Expr:"
(vec-mul
 (vec-cast
  (vec-add
   (vec-mul
    (vec-cast
     (load
      (buffer input1 'uint8)
      (ramp
       (sca-add
        (sca-mul output.s0.x.x 16)
        (sca-add
         (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
         (var-lookup 't55)))
       1
       16)
      (aligned 1 0))
     'int16
     16)
    (sca-broadcast (int16_t (bv #x0040 16)) 16))
   (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
"folding x86-ir:cast"
'int32
(combine #<load-data> (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
(vec-mul (vec-cast (vec-add (vec-mul (vec-cast (load (buffer input1 'uint8) (ramp (sca-add (sca-mul output.s0.x.x 16) (sca-add (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68)) (var-lookup 't55))) 1 16) (aligned 1 0)) 'int16 16) (sca-broadcast (int16_t (bv #x0040 16)) 16)) (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16)) 'int32 16) (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
"failing to fold x86-ir:cast"
(broadcast ... (int16_t input1_multiplier))
(cast ... (broadcast ... (int16_t input1_multiplier)) 'int32 #f)
(list (cast ... (vs-mpy-add ... (combine #<load-data> (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))))) (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16))) #f #f #f 'int16) 'int32 #f) (cast ... (broadcast ... (int16_t input1_multiplier)) 'int32 #f))
(vec-mul (vec-cast (vec-add (vec-mul (vec-cast (load (buffer input1 'uint8) (ramp (sca-add (sca-mul output.s0.x.x 16) (sca-add (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68)) (var-lookup 't55))) 1 16) (aligned 1 0)) 'int16 16) (sca-broadcast (int16_t (bv #x0040 16)) 16)) (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16)) 'int32 16) (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
'int32
"Fold templates"
(list
 (vs-mpy-add
  ...
  (combine
   #<load-data>
   (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
  (list
   (sca-mul
    (sca-cast (int8_t (bv #x01 8)) 'int16)
    (sca-cast
     (union [(&& (! xi?$940) (! xi?$941)) #(struct:int8_t (bv #x01 8))] [(|| xi?$940 (&& xi?$941 (! xi?$940))) #(struct:int16_t
                                                                                                                 (ite* (⊢ xi?$940 input1_multiplier) (⊢ (&& xi?$941 (! xi?$940)) (bv #x0040 16))))])
     'int16))
   (sca-mul
    (sca-cast (int16_t (bv #x0040 16)) 'int16)
    (sca-cast
     (union [(&& (! xi?$940) (! xi?$941)) #(struct:int8_t (bv #x01 8))] [(|| xi?$940 (&& xi?$941 (! xi?$940))) #(struct:int16_t
                                                                                                                 (ite* (⊢ xi?$940 input1_multiplier) (⊢ (&& xi?$941 (! xi?$940)) (bv #x0040 16))))])
     'int16)))
  #f
  #f
  #f
  'int16)
 (vs-mpy-add
  ...
  (combine
   #<load-data>
   (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
  (list
   (sca-mul
    (sca-cast (int8_t (bv #x01 8)) 'int16)
    (sca-cast
     (union [(&& (! xi?$940) (! xi?$941)) #(struct:int8_t (bv #x01 8))] [(|| xi?$940 (&& xi?$941 (! xi?$940))) #(struct:int16_t
                                                                                                                 (ite* (⊢ xi?$940 input1_multiplier) (⊢ (&& xi?$941 (! xi?$940)) (bv #x0040 16))))])
     'int16))
   (sca-mul
    (sca-cast (int16_t (bv #x0040 16)) 'int16)
    (sca-cast
     (union [(&& (! xi?$940) (! xi?$941)) #(struct:int8_t (bv #x01 8))] [(|| xi?$940 (&& xi?$941 (! xi?$940))) #(struct:int16_t
                                                                                                                 (ite* (⊢ xi?$940 input1_multiplier) (⊢ (&& xi?$941 (! xi?$940)) (bv #x0040 16))))])
     'int16)))
  #f
  #f
  #f
  'int32)
 (cast
  ...
  (vs-mpy-add
   ...
   (combine
    #<load-data>
    (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
   (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
   #f
   #f
   #f
   'int16)
  'int32
  x?$935)
 (vs-mpy-add
  ...
  (combine
   #<load-data>
   (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
  (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
  #f
  #f
  #f
  'int32)
 (cast ... (broadcast ... (int16_t input1_multiplier)) 'int32 x?$942))
here(#(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t125) #(struct:int16_t (bv #xffc0 16))))> (#(struct:sca-mul #(struct:sca-cast #(struct:int8_t (bv #x01 8)) int16) #(struct:sca-cast (union #:size 2 #:hash 1443068733837) int16)) #(struct:sca-mul #(struct:sca-cast #(struct:int16_t (bv #x0040 16)) int16) #(struct:sca-cast (union #:size 2 #:hash 1443068733837) int16))) #f #f #f int16) #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t125) #(struct:int16_t (bv #xffc0 16))))> (#(struct:sca-mul #(struct:sca-cast #(struct:int8_t (bv #x01 8)) int16) #(struct:sca-cast (union #:size 2 #:hash 1443068733837) int16)) #(struct:sca-mul #(struct:sca-cast #(struct:int16_t (bv #x0040 16)) int16) #(struct:sca-cast (union #:size 2 #:hash 1443068733837) int16))) #f #f #f int32) #(struct:cast ... #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t125) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f #f #f int16) int32 x?$935) #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t125) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f #f #f int32) #(struct:cast ... #(struct:broadcast ... #(struct:int16_t input1_multiplier)) int32 x?$942))

(list (vs-mpy-add ... (vs-mpy-add ... (combine #<load-data> (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))))) (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16))) #f #f #f 'int16) (list (int16_t (ite x?$1135 input1_multiplier (bv #x0040 16)))) #f #f #f 'int32) (vs-mpy-add ... #<load-data> (list (int16_t (ite x?$1136 input1_multiplier (bv #x0040 16)))) #f #f #f 'int32) (vv-mpy-add ... (vs-mpy-add ... (combine #<load-data> (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))))) (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16))) #f #f #f 'int16) '(1) (! x?$1137) (! x?$1138) (! x?$1139) 'int32) (vv-mpy-add ... #<load-data> '(1) (! x?$1140) (! x?$1141) (! x?$1142) 'int32))
"replacing x86-ir:cast"
'int32
(combine #<load-data> (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
(vec-mul (vec-cast (vec-add (vec-mul (vec-cast (load (buffer input1 'uint8) (ramp (sca-add (sca-mul output.s0.x.x 16) (sca-add (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68)) (var-lookup 't55))) 1 16) (aligned 1 0)) 'int16 16) (sca-broadcast (int16_t (bv #x0040 16)) 16)) (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16)) 'int32 16) (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
(list (vs-mpy-add ... (broadcast ... (int16_t input1_multiplier)) (list (int16_t (ite x?$1336 input1_multiplier (bv #x0040 16)))) #f #f #f 'int32) (vs-mpy-add ... #<load-data> (list (int16_t (ite x?$1337 input1_multiplier (bv #x0040 16)))) #f #f #f 'int32) (vv-mpy-add ... (broadcast ... (int16_t input1_multiplier)) '(1) (! x?$1338) (! x?$1339) (! x?$1340) 'int32) (vv-mpy-add ... #<load-data> '(1) (! x?$1341) (! x?$1342) (! x?$1343) 'int32))
"failing to repl x86-ir:cast"
(broadcast ... (int16_t input1_multiplier))
(cast ... (broadcast ... (int16_t input1_multiplier)) 'int32 #f)
(vec-mul (vec-cast (vec-add (vec-mul (vec-cast (load (buffer input1 'uint8) (ramp (sca-add (sca-mul output.s0.x.x 16) (sca-add (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68)) (var-lookup 't55))) 1 16) (aligned 1 0)) 'int16 16) (sca-broadcast (int16_t (bv #x0040 16)) 16)) (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16)) 'int32 16) (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
'int32
"Replace templates"
(list
 (vs-mpy-add
  ...
  (vs-mpy-add
   ...
   (combine
    #<load-data>
    (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
   (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
   #f
   #f
   #f
   'int16)
  (list (int16_t (ite x?$1135 input1_multiplier (bv #x0040 16))))
  #f
  #f
  #f
  'int32)
 (vs-mpy-add
  ...
  #<load-data>
  (list (int16_t (ite x?$1136 input1_multiplier (bv #x0040 16))))
  #f
  #f
  #f
  'int32)
 (vv-mpy-add
  ...
  (vs-mpy-add
   ...
   (combine
    #<load-data>
    (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
   (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
   #f
   #f
   #f
   'int16)
  '(1)
  (! x?$1137)
  (! x?$1138)
  (! x?$1139)
  'int32)
 (vv-mpy-add ... #<load-data> '(1) (! x?$1140) (! x?$1141) (! x?$1142) 'int32)
 (vs-mpy-add
  ...
  (combine
   #<load-data>
   (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
  (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
  #f
  #f
  #f
  'int32)
 (vs-mpy-add
  ...
  (broadcast ... (int16_t input1_multiplier))
  (list (int16_t (ite x?$1336 input1_multiplier (bv #x0040 16))))
  #f
  #f
  #f
  'int32)
 (vs-mpy-add
  ...
  #<load-data>
  (list (int16_t (ite x?$1337 input1_multiplier (bv #x0040 16))))
  #f
  #f
  #f
  'int32)
 (vv-mpy-add
  ...
  (broadcast ... (int16_t input1_multiplier))
  '(1)
  (! x?$1338)
  (! x?$1339)
  (! x?$1340)
  'int32)
 (vv-mpy-add ... #<load-data> '(1) (! x?$1341) (! x?$1342) (! x?$1343) 'int32))
run-x86-synthesizer
halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-mul
    (vec-cast
     (load
      (buffer input1 'uint8)
      (ramp
       (sca-add
        (sca-mul output.s0.x.x 16)
        (sca-add
         (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
         (var-lookup 't55)))
       1
       16)
      (aligned 1 0))
     'int16
     16)
    (sca-broadcast (int16_t (bv #x0040 16)) 16))
   (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
template:
  (vs-mpy-add
 ...
 #<load-data>
 (list (int16_t (ite x?$1136 input1_multiplier (bv #x0040 16))))
 #f
 #f
 #f
 'int32)
axioms:
  '()
optimized-halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-mul
    (vec-cast
     (load
      (buffer input1 'uint8)
      (ramp
       (sca-add
        (sca-mul output.s0.x.x 16)
        (sca-add
         (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
         (var-lookup 't55)))
       1
       16)
      (aligned 1 0))
     'int16
     16)
    (sca-broadcast (int16_t (bv #x0040 16)) 16))
   (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
optimized-template:
  (vs-mpy-add
 ...
 #<load-data>
 (list (int16_t (ite x?$1136 input1_multiplier (bv #x0040 16))))
 #f
 #f
 #f
 'int32)
optimized Halide 0:
  (int32_t
 (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))))
optimized x86 0:
  (int32_t
 (bvmul (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 32)) (sign-extend (ite x?$1136 input1_multiplier (bv #x0040 16)) (bitvector 32))))
run-x86-synthesizer
halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-mul
    (vec-cast
     (load
      (buffer input1 'uint8)
      (ramp
       (sca-add
        (sca-mul output.s0.x.x 16)
        (sca-add
         (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
         (var-lookup 't55)))
       1
       16)
      (aligned 1 0))
     'int16
     16)
    (sca-broadcast (int16_t (bv #x0040 16)) 16))
   (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
template:
  (vv-mpy-add ... #<load-data> '(1) (! x?$1140) (! x?$1141) (! x?$1142) 'int32)
axioms:
  '()
optimized-halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-mul
    (vec-cast
     (load
      (buffer input1 'uint8)
      (ramp
       (sca-add
        (sca-mul output.s0.x.x 16)
        (sca-add
         (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
         (var-lookup 't55)))
       1
       16)
      (aligned 1 0))
     'int16
     16)
    (sca-broadcast (int16_t (bv #x0040 16)) 16))
   (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
optimized-template:
  (vv-mpy-add ... #<load-data> '(1) (! x?$1140) (! x?$1141) (! x?$1142) 'int32)
optimized Halide 0:
  (int32_t
 (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))))
optimized x86 0:
  (int32_t
 (ite* (⊢ (&& x?$1142 (! (&& (! x?$1140) (! x?$1142)))) (ite x?$1140 (bvadd (bvmul (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 32)) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 32))) (ite x?$1141 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1141 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (bvmul (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 32)) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1141 (bv #x00000000 32) (bv #x00000001 32))))) (bvmul (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 32)) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1141 (bv #x00000000 32) (bv #x00000001 32)))))))) (⊢ (|| (&& (! x?$1140) (! x?$1142)) (&& (! x?$1142) (! (&& (! x?$1140) (! x?$1142))))) (bvashr (ite x?$1140 (bvadd (bvmul (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 32)) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 32))) (ite x?$1141 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1141 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (bvmul (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 32)) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1141 (bv #x00000000 32) (bv #x00000001 32))))) (bvmul (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 32)) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1141 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000001 32)))))
run-x86-synthesizer
halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-mul
    (vec-cast
     (load
      (buffer input1 'uint8)
      (ramp
       (sca-add
        (sca-mul output.s0.x.x 16)
        (sca-add
         (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
         (var-lookup 't55)))
       1
       16)
      (aligned 1 0))
     'int16
     16)
    (sca-broadcast (int16_t (bv #x0040 16)) 16))
   (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
template:
  (vs-mpy-add
 ...
 #<load-data>
 (list (int16_t (ite x?$1337 input1_multiplier (bv #x0040 16))))
 #f
 #f
 #f
 'int32)
axioms:
  '()
optimized-halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-mul
    (vec-cast
     (load
      (buffer input1 'uint8)
      (ramp
       (sca-add
        (sca-mul output.s0.x.x 16)
        (sca-add
         (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
         (var-lookup 't55)))
       1
       16)
      (aligned 1 0))
     'int16
     16)
    (sca-broadcast (int16_t (bv #x0040 16)) 16))
   (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
optimized-template:
  (vs-mpy-add
 ...
 #<load-data>
 (list (int16_t (ite x?$1337 input1_multiplier (bv #x0040 16))))
 #f
 #f
 #f
 'int32)
optimized Halide 0:
  (int32_t
 (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))))
optimized x86 0:
  (int32_t
 (bvmul (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 32)) (sign-extend (ite x?$1337 input1_multiplier (bv #x0040 16)) (bitvector 32))))
run-x86-synthesizer
halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-mul
    (vec-cast
     (load
      (buffer input1 'uint8)
      (ramp
       (sca-add
        (sca-mul output.s0.x.x 16)
        (sca-add
         (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
         (var-lookup 't55)))
       1
       16)
      (aligned 1 0))
     'int16
     16)
    (sca-broadcast (int16_t (bv #x0040 16)) 16))
   (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
template:
  (vv-mpy-add ... #<load-data> '(1) (! x?$1341) (! x?$1342) (! x?$1343) 'int32)
axioms:
  '()
optimized-halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-mul
    (vec-cast
     (load
      (buffer input1 'uint8)
      (ramp
       (sca-add
        (sca-mul output.s0.x.x 16)
        (sca-add
         (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
         (var-lookup 't55)))
       1
       16)
      (aligned 1 0))
     'int16
     16)
    (sca-broadcast (int16_t (bv #x0040 16)) 16))
   (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
optimized-template:
  (vv-mpy-add ... #<load-data> '(1) (! x?$1341) (! x?$1342) (! x?$1343) 'int32)
optimized Halide 0:
  (int32_t
 (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))))
optimized x86 0:
  (int32_t
 (ite* (⊢ (&& x?$1343 (! (&& (! x?$1341) (! x?$1343)))) (ite x?$1341 (bvadd (bvmul (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 32)) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 32))) (ite x?$1342 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1342 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (bvmul (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 32)) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1342 (bv #x00000000 32) (bv #x00000001 32))))) (bvmul (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 32)) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1342 (bv #x00000000 32) (bv #x00000001 32)))))))) (⊢ (|| (&& (! x?$1341) (! x?$1343)) (&& (! x?$1343) (! (&& (! x?$1341) (! x?$1343))))) (bvashr (ite x?$1341 (bvadd (bvmul (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 32)) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 32))) (ite x?$1342 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1342 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (bvmul (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 32)) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1342 (bv #x00000000 32) (bv #x00000001 32))))) (bvmul (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 32)) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1342 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000001 32)))))
run-x86-synthesizer
halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-mul
    (vec-cast
     (load
      (buffer input1 'uint8)
      (ramp
       (sca-add
        (sca-mul output.s0.x.x 16)
        (sca-add
         (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
         (var-lookup 't55)))
       1
       16)
      (aligned 1 0))
     'int16
     16)
    (sca-broadcast (int16_t (bv #x0040 16)) 16))
   (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
template:
  (cast ... (broadcast ... (int16_t input1_multiplier)) 'int32 x?$942)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-mul
    (vec-cast
     (load
      (buffer input1 'uint8)
      (ramp
       (sca-add
        (sca-mul output.s0.x.x 16)
        (sca-add
         (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
         (var-lookup 't55)))
       1
       16)
      (aligned 1 0))
     'int16
     16)
    (sca-broadcast (int16_t (bv #x0040 16)) 16))
   (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
  'int32
  16)
 (vec-cast #<abstr-halide-expr> 'int32 16))
optimized-template:
  (cast ... #<abstr-expr> 'int32 x?$942)
optimized Halide 0:
  (int32_t
 (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend (app abstr-vals$1344 0) (bitvector 32))))
optimized x86 0:
  (int32_t (sign-extend (app abstr-vals$1344 0) (bitvector 32)))
run-x86-synthesizer
halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-mul
    (vec-cast
     (load
      (buffer input1 'uint8)
      (ramp
       (sca-add
        (sca-mul output.s0.x.x 16)
        (sca-add
         (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
         (var-lookup 't55)))
       1
       16)
      (aligned 1 0))
     'int16
     16)
    (sca-broadcast (int16_t (bv #x0040 16)) 16))
   (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
template:
  (vs-mpy-add
 ...
 (broadcast ... (int16_t input1_multiplier))
 (list (int16_t (ite x?$1336 input1_multiplier (bv #x0040 16))))
 #f
 #f
 #f
 'int32)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-mul
    (vec-cast
     (load
      (buffer input1 'uint8)
      (ramp
       (sca-add
        (sca-mul output.s0.x.x 16)
        (sca-add
         (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
         (var-lookup 't55)))
       1
       16)
      (aligned 1 0))
     'int16
     16)
    (sca-broadcast (int16_t (bv #x0040 16)) 16))
   (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
  'int32
  16)
 (vec-cast #<abstr-halide-expr> 'int32 16))
optimized-template:
  (vs-mpy-add
 ...
 #<abstr-expr>
 (list (int16_t (ite x?$1336 input1_multiplier (bv #x0040 16))))
 #f
 #f
 #f
 'int32)
optimized Halide 0:
  (int32_t
 (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend (app abstr-vals$1345 0) (bitvector 32))))
optimized x86 0:
  (int32_t
 (bvmul (sign-extend (app abstr-vals$1345 0) (bitvector 32)) (sign-extend (ite x?$1336 input1_multiplier (bv #x0040 16)) (bitvector 32))))
run-x86-synthesizer
halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-mul
    (vec-cast
     (load
      (buffer input1 'uint8)
      (ramp
       (sca-add
        (sca-mul output.s0.x.x 16)
        (sca-add
         (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
         (var-lookup 't55)))
       1
       16)
      (aligned 1 0))
     'int16
     16)
    (sca-broadcast (int16_t (bv #x0040 16)) 16))
   (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
template:
  (vv-mpy-add
 ...
 (broadcast ... (int16_t input1_multiplier))
 '(1)
 (! x?$1338)
 (! x?$1339)
 (! x?$1340)
 'int32)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-mul
    (vec-cast
     (load
      (buffer input1 'uint8)
      (ramp
       (sca-add
        (sca-mul output.s0.x.x 16)
        (sca-add
         (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
         (var-lookup 't55)))
       1
       16)
      (aligned 1 0))
     'int16
     16)
    (sca-broadcast (int16_t (bv #x0040 16)) 16))
   (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
  'int32
  16)
 (vec-cast #<abstr-halide-expr> 'int32 16))
optimized-template:
  (vv-mpy-add ... #<abstr-expr> '(1) (! x?$1338) (! x?$1339) (! x?$1340) 'int32)
optimized Halide 0:
  (int32_t
 (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend (app abstr-vals$1346 0) (bitvector 32))))
optimized x86 0:
  (int32_t
 (ite* (⊢ (&& x?$1340 (! (&& (! x?$1338) (! x?$1340)))) (ite x?$1338 (bvadd (bvmul (sign-extend (app abstr-vals$1346 0) (bitvector 32)) (sign-extend (app abstr-vals$1346 1) (bitvector 32))) (ite x?$1339 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1339 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (bvmul (sign-extend (app abstr-vals$1346 0) (bitvector 32)) (sign-extend (app abstr-vals$1346 1) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1339 (bv #x00000000 32) (bv #x00000001 32))))) (bvmul (sign-extend (app abstr-vals$1346 0) (bitvector 32)) (sign-extend (app abstr-vals$1346 1) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1339 (bv #x00000000 32) (bv #x00000001 32)))))))) (⊢ (|| (&& (! x?$1338) (! x?$1340)) (&& (! x?$1340) (! (&& (! x?$1338) (! x?$1340))))) (bvashr (ite x?$1338 (bvadd (bvmul (sign-extend (app abstr-vals$1346 0) (bitvector 32)) (sign-extend (app abstr-vals$1346 1) (bitvector 32))) (ite x?$1339 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1339 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (bvmul (sign-extend (app abstr-vals$1346 0) (bitvector 32)) (sign-extend (app abstr-vals$1346 1) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1339 (bv #x00000000 32) (bv #x00000001 32))))) (bvmul (sign-extend (app abstr-vals$1346 0) (bitvector 32)) (sign-extend (app abstr-vals$1346 1) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1339 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000001 32)))))
run-x86-synthesizer
halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-mul
    (vec-cast
     (load
      (buffer input1 'uint8)
      (ramp
       (sca-add
        (sca-mul output.s0.x.x 16)
        (sca-add
         (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
         (var-lookup 't55)))
       1
       16)
      (aligned 1 0))
     'int16
     16)
    (sca-broadcast (int16_t (bv #x0040 16)) 16))
   (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
template:
  (vs-mpy-add
 ...
 (combine
  #<load-data>
  (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
 (list
  (sca-mul
   (sca-cast (int8_t (bv #x01 8)) 'int16)
   (sca-cast
    (union [(&& (! xi?$940) (! xi?$941)) #(struct:int8_t (bv #x01 8))] [(|| xi?$940 (&& xi?$941 (! xi?$940))) #(struct:int16_t
                                                                                                                (ite* (⊢ xi?$940 input1_multiplier) (⊢ (&& xi?$941 (! xi?$940)) (bv #x0040 16))))])
    'int16))
  (sca-mul
   (sca-cast (int16_t (bv #x0040 16)) 'int16)
   (sca-cast
    (union [(&& (! xi?$940) (! xi?$941)) #(struct:int8_t (bv #x01 8))] [(|| xi?$940 (&& xi?$941 (! xi?$940))) #(struct:int16_t
                                                                                                                (ite* (⊢ xi?$940 input1_multiplier) (⊢ (&& xi?$941 (! xi?$940)) (bv #x0040 16))))])
    'int16)))
 #f
 #f
 #f
 'int16)
axioms:
  (list #t (forall (idx) (bvsle (app abstr-vals$1348 idx) (bv #x7fc0 16))))
optimized-halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-mul
    (vec-cast #<abstr-halide-expr> 'int16 16)
    (sca-broadcast (int16_t (bv #x0040 16)) 16))
   #<abstr-halide-expr>)
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
optimized-template:
  (vs-mpy-add
 ...
 (combine #<abstr-expr> #<abstr-expr>)
 (list
  (sca-mul
   (sca-cast (int8_t (bv #x01 8)) 'int16)
   (sca-cast
    (union [(&& (! xi?$940) (! xi?$941)) #(struct:int8_t (bv #x01 8))] [(|| xi?$940 (&& xi?$941 (! xi?$940))) #(struct:int16_t
                                                                                                                (ite* (⊢ xi?$940 input1_multiplier) (⊢ (&& xi?$941 (! xi?$940)) (bv #x0040 16))))])
    'int16))
  (sca-mul
   (sca-cast (int16_t (bv #x0040 16)) 'int16)
   (sca-cast
    (union [(&& (! xi?$940) (! xi?$941)) #(struct:int8_t (bv #x01 8))] [(|| xi?$940 (&& xi?$941 (! xi?$940))) #(struct:int16_t
                                                                                                                (ite* (⊢ xi?$940 input1_multiplier) (⊢ (&& xi?$941 (! xi?$940)) (bv #x0040 16))))])
    'int16)))
 #f
 #f
 #f
 'int16)
optimized Halide 0:
  (int32_t
 (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (bvadd (app abstr-vals$1348 0) (bvmul (bv #x0040 16) (zero-extend (app abstr-vals$1347 0) (bitvector 16)))) (bitvector 32))))
optimized x86 0:
  (int16_t
 (bvadd (bvmul (app abstr-vals$1348 0) (ite* (⊢ (&& (! xi?$940) (! xi?$941)) (bv #x0001 16)) (⊢ (|| xi?$940 (&& xi?$941 (! xi?$940))) (ite* (⊢ xi?$940 input1_multiplier) (⊢ (&& xi?$941 (! xi?$940)) (bv #x0040 16)))))) (bvmul (zero-extend (app abstr-vals$1347 0) (bitvector 16)) (bvmul (bv #x0040 16) (ite* (⊢ (&& (! xi?$940) (! xi?$941)) (bv #x0001 16)) (⊢ (|| xi?$940 (&& xi?$941 (! xi?$940))) (ite* (⊢ xi?$940 input1_multiplier) (⊢ (&& xi?$941 (! xi?$940)) (bv #x0040 16)))))))))
Ran synthesizer for 39 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-mul
    (vec-cast
     (load
      (buffer input1 'uint8)
      (ramp
       (sca-add
        (sca-mul output.s0.x.x 16)
        (sca-add
         (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
         (var-lookup 't55)))
       1
       16)
      (aligned 1 0))
     'int16
     16)
    (sca-broadcast (int16_t (bv #x0040 16)) 16))
   (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
template:
  (vs-mpy-add
 ...
 (combine
  #<load-data>
  (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
 (list
  (sca-mul
   (sca-cast (int8_t (bv #x01 8)) 'int16)
   (sca-cast
    (union [(&& (! xi?$940) (! xi?$941)) #(struct:int8_t (bv #x01 8))] [(|| xi?$940 (&& xi?$941 (! xi?$940))) #(struct:int16_t
                                                                                                                (ite* (⊢ xi?$940 input1_multiplier) (⊢ (&& xi?$941 (! xi?$940)) (bv #x0040 16))))])
    'int16))
  (sca-mul
   (sca-cast (int16_t (bv #x0040 16)) 'int16)
   (sca-cast
    (union [(&& (! xi?$940) (! xi?$941)) #(struct:int8_t (bv #x01 8))] [(|| xi?$940 (&& xi?$941 (! xi?$940))) #(struct:int16_t
                                                                                                                (ite* (⊢ xi?$940 input1_multiplier) (⊢ (&& xi?$941 (! xi?$940)) (bv #x0040 16))))])
    'int16)))
 #f
 #f
 #f
 'int32)
axioms:
  (list #t (forall (idx) (bvsle (app abstr-vals$1350 idx) (bv #x7fc0 16))))
optimized-halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-mul
    (vec-cast #<abstr-halide-expr> 'int16 16)
    (sca-broadcast (int16_t (bv #x0040 16)) 16))
   #<abstr-halide-expr>)
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
optimized-template:
  (vs-mpy-add
 ...
 (combine #<abstr-expr> #<abstr-expr>)
 (list
  (sca-mul
   (sca-cast (int8_t (bv #x01 8)) 'int16)
   (sca-cast
    (union [(&& (! xi?$940) (! xi?$941)) #(struct:int8_t (bv #x01 8))] [(|| xi?$940 (&& xi?$941 (! xi?$940))) #(struct:int16_t
                                                                                                                (ite* (⊢ xi?$940 input1_multiplier) (⊢ (&& xi?$941 (! xi?$940)) (bv #x0040 16))))])
    'int16))
  (sca-mul
   (sca-cast (int16_t (bv #x0040 16)) 'int16)
   (sca-cast
    (union [(&& (! xi?$940) (! xi?$941)) #(struct:int8_t (bv #x01 8))] [(|| xi?$940 (&& xi?$941 (! xi?$940))) #(struct:int16_t
                                                                                                                (ite* (⊢ xi?$940 input1_multiplier) (⊢ (&& xi?$941 (! xi?$940)) (bv #x0040 16))))])
    'int16)))
 #f
 #f
 #f
 'int32)
optimized Halide 0:
  (int32_t
 (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (bvadd (app abstr-vals$1350 0) (bvmul (bv #x0040 16) (zero-extend (app abstr-vals$1349 0) (bitvector 16)))) (bitvector 32))))
optimized x86 0:
  (int32_t
 (bvadd (bvmul (sign-extend (app abstr-vals$1350 0) (bitvector 32)) (sign-extend (ite* (⊢ (&& (! xi?$940) (! xi?$941)) (bv #x0001 16)) (⊢ (|| xi?$940 (&& xi?$941 (! xi?$940))) (ite* (⊢ xi?$940 input1_multiplier) (⊢ (&& xi?$941 (! xi?$940)) (bv #x0040 16))))) (bitvector 32))) (bvmul (zero-extend (app abstr-vals$1349 0) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (ite* (⊢ (&& (! xi?$940) (! xi?$941)) (bv #x0001 16)) (⊢ (|| xi?$940 (&& xi?$941 (! xi?$940))) (ite* (⊢ xi?$940 input1_multiplier) (⊢ (&& xi?$941 (! xi?$940)) (bv #x0040 16)))))) (bitvector 32)))))
Ran synthesizer for 408 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-mul
    (vec-cast
     (load
      (buffer input1 'uint8)
      (ramp
       (sca-add
        (sca-mul output.s0.x.x 16)
        (sca-add
         (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
         (var-lookup 't55)))
       1
       16)
      (aligned 1 0))
     'int16
     16)
    (sca-broadcast (int16_t (bv #x0040 16)) 16))
   (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
template:
  (vs-mpy-add
 ...
 (combine
  #<load-data>
  (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
 (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
 #f
 #f
 #f
 'int32)
axioms:
  (list #t (forall (idx) (bvsle (app abstr-vals$1352 idx) (bv #x7fc0 16))))
optimized-halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-mul
    (vec-cast #<abstr-halide-expr> 'int16 16)
    (sca-broadcast (int16_t (bv #x0040 16)) 16))
   #<abstr-halide-expr>)
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
optimized-template:
  (vs-mpy-add
 ...
 (combine #<abstr-expr> #<abstr-expr>)
 (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
 #f
 #f
 #f
 'int32)
optimized Halide 0:
  (int32_t
 (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (bvadd (app abstr-vals$1352 0) (bvmul (bv #x0040 16) (zero-extend (app abstr-vals$1351 0) (bitvector 16)))) (bitvector 32))))
optimized x86 0:
  (int32_t
 (bvadd (sign-extend (app abstr-vals$1352 0) (bitvector 32)) (bvmul (bv #x00000040 32) (zero-extend (app abstr-vals$1351 0) (bitvector 32)))))
run-x86-synthesizer
halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-mul
    (vec-cast
     (load
      (buffer input1 'uint8)
      (ramp
       (sca-add
        (sca-mul output.s0.x.x 16)
        (sca-add
         (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
         (var-lookup 't55)))
       1
       16)
      (aligned 1 0))
     'int16
     16)
    (sca-broadcast (int16_t (bv #x0040 16)) 16))
   (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
template:
  (vs-mpy-add
 ...
 (combine
  #<load-data>
  (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
 (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
 #f
 #f
 #f
 'int32)
axioms:
  (list #t (forall (idx) (bvsle (app abstr-vals$1354 idx) (bv #x7fc0 16))))
optimized-halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-mul
    (vec-cast #<abstr-halide-expr> 'int16 16)
    (sca-broadcast (int16_t (bv #x0040 16)) 16))
   #<abstr-halide-expr>)
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
optimized-template:
  (vs-mpy-add
 ...
 (combine #<abstr-expr> #<abstr-expr>)
 (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
 #f
 #f
 #f
 'int32)
optimized Halide 0:
  (int32_t
 (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (bvadd (app abstr-vals$1354 0) (bvmul (bv #x0040 16) (zero-extend (app abstr-vals$1353 0) (bitvector 16)))) (bitvector 32))))
optimized x86 0:
  (int32_t
 (bvadd (sign-extend (app abstr-vals$1354 0) (bitvector 32)) (bvmul (bv #x00000040 32) (zero-extend (app abstr-vals$1353 0) (bitvector 32)))))
run-x86-synthesizer
halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-mul
    (vec-cast
     (load
      (buffer input1 'uint8)
      (ramp
       (sca-add
        (sca-mul output.s0.x.x 16)
        (sca-add
         (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
         (var-lookup 't55)))
       1
       16)
      (aligned 1 0))
     'int16
     16)
    (sca-broadcast (int16_t (bv #x0040 16)) 16))
   (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
template:
  (cast
 ...
 (vs-mpy-add
  ...
  (combine
   #<load-data>
   (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
  (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
  #f
  #f
  #f
  'int16)
 'int32
 x?$935)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-mul
 (vec-cast #<abstr-halide-expr> 'int32 16)
 (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
optimized-template:
  (cast ... #<abstr-expr> 'int32 x?$935)
optimized Halide 0:
  (int32_t
 (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (app abstr-vals$1355 0) (bitvector 32))))
optimized x86 0:
  (int32_t (sign-extend (app abstr-vals$1355 0) (bitvector 32)))
run-x86-synthesizer
halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-mul
    (vec-cast
     (load
      (buffer input1 'uint8)
      (ramp
       (sca-add
        (sca-mul output.s0.x.x 16)
        (sca-add
         (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
         (var-lookup 't55)))
       1
       16)
      (aligned 1 0))
     'int16
     16)
    (sca-broadcast (int16_t (bv #x0040 16)) 16))
   (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
template:
  (vs-mpy-add
 ...
 (vs-mpy-add
  ...
  (combine
   #<load-data>
   (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
  (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
  #f
  #f
  #f
  'int16)
 (list (int16_t (ite x?$1135 input1_multiplier (bv #x0040 16))))
 #f
 #f
 #f
 'int32)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-mul
 (vec-cast #<abstr-halide-expr> 'int32 16)
 (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
optimized-template:
  (vs-mpy-add
 ...
 #<abstr-expr>
 (list (int16_t (ite x?$1135 input1_multiplier (bv #x0040 16))))
 #f
 #f
 #f
 'int32)
optimized Halide 0:
  (int32_t
 (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (app abstr-vals$1356 0) (bitvector 32))))
optimized x86 0:
  (int32_t
 (bvmul (sign-extend (app abstr-vals$1356 0) (bitvector 32)) (sign-extend (ite x?$1135 input1_multiplier (bv #x0040 16)) (bitvector 32))))
Ran synthesizer for 84 ms
(model
 [x?$1135 #t])
(vec-mul
 (vec-cast #<abstr-halide-expr> 'int32 16)
 (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
(vs-mpy-add
 ...
 (vs-mpy-add
  ...
  (combine
   #<load-data>here
  context...:
   body of "/Users/alexanderroot/Projects/Rake/rake/rake/x86/ast/temp.rkt"

   (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
  (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
  #f
  #f
  #f
  'int16)
 (list (int16_t input1_multiplier))
 #f
 #f
 #f
 'int32)
Ran bounds analysis for 223 ms
Ran bounds analysis for 180 ms
"Success?"
#t
(vs-mpy-add ... (vs-mpy-add ... (combine #<load-data> (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))))) (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16))) #f #f #f 'int16) (list (int16_t input1_multiplier)) #f #f #f 'int32)

(x86) Successfully found an equivalent IR expression.

(vs-mpy-add
 ...
 (vs-mpy-add
  ...
  (combine
   #<load-data>
   (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
  (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
  #f
  #f
  #f
  'int16)
 (list (int16_t input1_multiplier))
 #f
 #f
 #f
 'int32)

Synthesis time: 2 seconds

Synthesizing x86 for:
(vec-mul
 (vec-cast
  (vec-add
   (vec-mul
    (vec-cast
     (load
      (buffer input1 'uint8)
      (ramp
       (sca-add
        (sca-mul output.s0.x.x 16)
        (sca-add
         (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
         (var-lookup 't55)))
       1
       16)
      (aligned 1 0))
     'int16
     16)
    (sca-broadcast (int16_t (bv #x0040 16)) 16))
   (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))


synthesize-x86 output:
#<void>
#f
