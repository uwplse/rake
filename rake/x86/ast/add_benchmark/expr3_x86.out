Lifting input expression to x86 IR...
=====================================

"Building Expr:"
(sca-broadcast (int32_t (bv #x00000001 32)) 16)
"Fold templates"
'()
here()

"Replace templates"
'()
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (sca-broadcast (int32_t (bv #x00000001 32)) 16)
template:
  (broadcast ... (int32_t (bv #x00000001 32)))
axioms:
  '()
optimized-halide-expr:
  (sca-broadcast (int32_t (bv #x00000001 32)) 16)
optimized-template:
  (broadcast ... (int32_t (bv #x00000001 32)))
optimized Halide 0:
  (int32_t (bv #x00000001 32))
optimized x86 0:
  (int32_t (bv #x00000001 32))
Ran synthesizer for 22 ms
(model)
(sca-broadcast (int32_t (bv #x00000001 32)) 16)
(broadcast ... (int32_t (bv #x00000001 32)))
Ran bounds analysis for 28 ms
Ran bounds analysis for 19 ms
"Extended success?"
#t
(broadcast ... (int32_t (bv #x00000001 32)))
"Building Expr:"
(load
 (buffer input1 'uint8)
 (ramp
  (sca-add
   (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
   (sca-sub
    (sca-sub (var-lookup 't75) (var-lookup 't81))
    (var-lookup 'input1.min.0)))
  1
  16)
 (aligned 1 0))
"Fold templates"
'()
here()

"Replace templates"
'()
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (load
 (buffer input1 'uint8)
 (ramp
  (sca-add
   (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
   (sca-sub
    (sca-sub (var-lookup 't75) (var-lookup 't81))
    (var-lookup 'input1.min.0)))
  1
  16)
 (aligned 1 0))
template:
  #<load-data>
axioms:
  '()
optimized-halide-expr:
  (load
 (buffer input1 'uint8)
 (ramp
  (sca-add
   (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
   (sca-sub
    (sca-sub (var-lookup 't75) (var-lookup 't81))
    (var-lookup 'input1.min.0)))
  1
  16)
 (aligned 1 0))
optimized-template:
  #<load-data>
optimized Halide 0:
  (uint8_t
 (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))))
optimized x86 0:
  (uint8_t
 (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))))
Ran synthesizer for 25 ms
(model
 [idx$0 0])
(load
 (buffer input1 'uint8)
 (ramp
  (sca-add
   (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
   (sca-sub
    (sca-sub (var-lookup 't75) (var-lookup 't81))
    (var-lookup 'input1.min.0)))
  1
  16)
 (aligned 1 0))
#<load-data>
Ran bounds analysis for 23 ms
Ran bounds analysis for 15 ms
"Extended success?"
#t
#<load-data>
"Building Expr:"
(vec-cast
 (load
  (buffer input1 'uint8)
  (ramp
   (sca-add
    (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
    (sca-sub
     (sca-sub (var-lookup 't75) (var-lookup 't81))
     (var-lookup 'input1.min.0)))
   1
   16)
  (aligned 1 0))
 'int16
 16)
"Fold templates"
'(#<load-data>)
here(#<load-data>)

"Replace templates"
'()
run-x86-synthesizer
halide-expr:
  (vec-cast
 (load
  (buffer input1 'uint8)
  (ramp
   (sca-add
    (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
    (sca-sub
     (sca-sub (var-lookup 't75) (var-lookup 't81))
     (var-lookup 'input1.min.0)))
   1
   16)
  (aligned 1 0))
 'int16
 16)
template:
  #<load-data>
axioms:
  '()
optimized-halide-expr:
  (vec-cast
 (load
  (buffer input1 'uint8)
  (ramp
   (sca-add
    (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
    (sca-sub
     (sca-sub (var-lookup 't75) (var-lookup 't81))
     (var-lookup 'input1.min.0)))
   1
   16)
  (aligned 1 0))
 'int16
 16)
optimized-template:
  #<load-data>
optimized Halide 0:
  (int16_t
 (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16)))
optimized x86 0:
  (uint8_t
 (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))))
Ran synthesizer for 2 ms
(unsat)
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (vec-cast
 (load
  (buffer input1 'uint8)
  (ramp
   (sca-add
    (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
    (sca-sub
     (sca-sub (var-lookup 't75) (var-lookup 't81))
     (var-lookup 'input1.min.0)))
   1
   16)
  (aligned 1 0))
 'int16
 16)
template:
  (cast ... #<load-data> 'int16 #f)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-cast #<abstr-halide-expr> 'int16 16)
optimized-template:
  (cast ... #<abstr-expr> 'int16 #f)
optimized Halide 0:
  (int16_t (zero-extend (app abstr-vals$129 0) (bitvector 16)))
optimized x86 0:
  (int16_t (zero-extend (app abstr-vals$129 0) (bitvector 16)))
Ran synthesizer for 20 ms
(model)
(vec-cast #<abstr-halide-expr> 'int16 16)
(cast ... #<load-data> 'int16 #f)
Ran bounds analysis for 26 ms
Ran bounds analysis for 17 ms
"Extended success?"
#t
(cast ... #<load-data> 'int16 #f)
"Building Expr:"
(sca-broadcast (int16_t (bv #x0040 16)) 16)
"Fold templates"
'()
here()

"Replace templates"
'()
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (sca-broadcast (int16_t (bv #x0040 16)) 16)
template:
  (broadcast ... (int16_t (bv #x0040 16)))
axioms:
  '()
optimized-halide-expr:
  (sca-broadcast (int16_t (bv #x0040 16)) 16)
optimized-template:
  (broadcast ... (int16_t (bv #x0040 16)))
optimized Halide 0:
  (int16_t (bv #x0040 16))
optimized x86 0:
  (int16_t (bv #x0040 16))
Ran synthesizer for 21 ms
(model)
(sca-broadcast (int16_t (bv #x0040 16)) 16)
(broadcast ... (int16_t (bv #x0040 16)))
Ran bounds analysis for 29 ms
Ran bounds analysis for 18 ms
"Extended success?"
#t
(broadcast ... (int16_t (bv #x0040 16)))
"Building Expr:"
(vec-mul
 (vec-cast
  (load
   (buffer input1 'uint8)
   (ramp
    (sca-add
     (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
     (sca-sub
      (sca-sub (var-lookup 't75) (var-lookup 't81))
      (var-lookup 'input1.min.0)))
    1
    16)
   (aligned 1 0))
  'int16
  16)
 (sca-broadcast (int16_t (bv #x0040 16)) 16))
"Fold templates"
(list #<load-data> (cast ... #<load-data> 'int16 x?$131))
here(#<load-data> #(struct:cast ... #<load-data> int16 x?$131))

(list (vs-mpy-add ... #<load-data> (list (int16_t (bv #x0040 16))) #f #f #f 'int16) (vs-mpy-add ... #<load-data> (list (int16_t (bv #x0040 16))) #f #f #f 'int16) (vv-mpy-add ... #<load-data> '(1) (! x?$388) (! x?$389) (! x?$390) 'int16) (vv-mpy-add ... #<load-data> '(1) (! x?$391) (! x?$392) (! x?$393) 'int16))
"Replace templates"
(list
 (vs-mpy-add ... #<load-data> (list (int16_t (bv #x0040 16))) #f #f #f 'int16)
 (vs-mpy-add ... #<load-data> (list (int16_t (bv #x0040 16))) #f #f #f 'int16)
 (vv-mpy-add ... #<load-data> '(1) (! x?$388) (! x?$389) (! x?$390) 'int16)
 (vv-mpy-add ... #<load-data> '(1) (! x?$391) (! x?$392) (! x?$393) 'int16))
run-x86-synthesizer
halide-expr:
  (vec-mul
 (vec-cast
  (load
   (buffer input1 'uint8)
   (ramp
    (sca-add
     (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
     (sca-sub
      (sca-sub (var-lookup 't75) (var-lookup 't81))
      (var-lookup 'input1.min.0)))
    1
    16)
   (aligned 1 0))
  'int16
  16)
 (sca-broadcast (int16_t (bv #x0040 16)) 16))
template:
  #<load-data>
axioms:
  '()
optimized-halide-expr:
  (vec-mul
 (vec-cast
  (load
   (buffer input1 'uint8)
   (ramp
    (sca-add
     (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
     (sca-sub
      (sca-sub (var-lookup 't75) (var-lookup 't81))
      (var-lookup 'input1.min.0)))
    1
    16)
   (aligned 1 0))
  'int16
  16)
 (sca-broadcast (int16_t (bv #x0040 16)) 16))
optimized-template:
  #<load-data>
optimized Halide 0:
  (int16_t
 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))))
optimized x86 0:
  (uint8_t
 (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))))
Ran synthesizer for 2 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-mul
 (vec-cast
  (load
   (buffer input1 'uint8)
   (ramp
    (sca-add
     (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
     (sca-sub
      (sca-sub (var-lookup 't75) (var-lookup 't81))
      (var-lookup 'input1.min.0)))
    1
    16)
   (aligned 1 0))
  'int16
  16)
 (sca-broadcast (int16_t (bv #x0040 16)) 16))
template:
  (cast ... #<load-data> 'int16 x?$131)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-mul
 (vec-cast #<abstr-halide-expr> 'int16 16)
 (sca-broadcast (int16_t (bv #x0040 16)) 16))
optimized-template:
  (cast ... #<abstr-expr> 'int16 x?$131)
optimized Halide 0:
  (int16_t
 (bvmul (bv #x0040 16) (zero-extend (app abstr-vals$394 0) (bitvector 16))))
optimized x86 0:
  (int16_t (zero-extend (app abstr-vals$394 0) (bitvector 16)))
Ran synthesizer for 60 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-mul
 (vec-cast
  (load
   (buffer input1 'uint8)
   (ramp
    (sca-add
     (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
     (sca-sub
      (sca-sub (var-lookup 't75) (var-lookup 't81))
      (var-lookup 'input1.min.0)))
    1
    16)
   (aligned 1 0))
  'int16
  16)
 (sca-broadcast (int16_t (bv #x0040 16)) 16))
template:
  (vs-mpy-add ... #<load-data> (list (int16_t (bv #x0040 16))) #f #f #f 'int16)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-mul
 (vec-cast #<abstr-halide-expr> 'int16 16)
 (sca-broadcast (int16_t (bv #x0040 16)) 16))
optimized-template:
  (vs-mpy-add ... #<abstr-expr> (list (int16_t (bv #x0040 16))) #f #f #f 'int16)
optimized Halide 0:
  (int16_t
 (bvmul (bv #x0040 16) (zero-extend (app abstr-vals$395 0) (bitvector 16))))
optimized x86 0:
  (int16_t
 (bvmul (bv #x0040 16) (zero-extend (app abstr-vals$395 0) (bitvector 16))))
Ran synthesizer for 21 ms
(model)
(vec-mul
 (vec-cast #<abstr-halide-expr> 'int16 16)
 (sca-broadcast (int16_t (bv #x0040 16)) 16))
(vs-mpy-add ... #<load-data> (list (int16_t (bv #x0040 16))) #f #f #f 'int16)
Ran bounds analysis for 30 ms
Ran bounds analysis for 24 ms
"Success?"
#t
(vs-mpy-add ... #<load-data> (list (int16_t (bv #x0040 16))) #f #f #f 'int16)
"Building Expr:"
(sca-broadcast (sca-mul (int16_t t148) (int16_t (bv #xffc0 16))) 16)
"Fold templates"
'()
here()

"Replace templates"
'()
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (sca-broadcast (sca-mul (int16_t t148) (int16_t (bv #xffc0 16))) 16)
template:
  (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16))))
axioms:
  '()
optimized-halide-expr:
  (sca-broadcast (sca-mul (int16_t t148) (int16_t (bv #xffc0 16))) 16)
optimized-template:
  (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16))))
optimized Halide 0:
  (int16_t (bvmul (bv #xffc0 16) t148))
optimized x86 0:
  (int16_t (bvmul (bv #xffc0 16) t148))
Ran synthesizer for 21 ms
(model)
(sca-broadcast (sca-mul (int16_t t148) (int16_t (bv #xffc0 16))) 16)
(broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16))))
Ran bounds analysis for 25 ms
Ran bounds analysis for 20 ms
"Extended success?"
#t
(broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16))))
"Building Expr:"
(vec-add
 (vec-mul
  (vec-cast
   (load
    (buffer input1 'uint8)
    (ramp
     (sca-add
      (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
      (sca-sub
       (sca-sub (var-lookup 't75) (var-lookup 't81))
       (var-lookup 'input1.min.0)))
     1
     16)
    (aligned 1 0))
   'int16
   16)
  (sca-broadcast (int16_t (bv #x0040 16)) 16))
 (sca-broadcast (sca-mul (int16_t t148) (int16_t (bv #xffc0 16))) 16))
"Fold templates"
(list
 #<load-data>
 (vs-mpy-add
  ...
  #<load-data>
  (list
   (int16_t (bv #x0040 16))
   (union [x?$400 #(struct:int16_t (bv #x0040 16))] [(! x?$400) #(struct:int8_t
                                                                  (bv #x01 8))]))
  #f
  #f
  #f
  'int16)
 (vs-mpy-add
  ...
  #<load-data>
  (list (int16_t (bv #x0040 16)))
  #f
  x?$398
  #f
  'int16)
 (vs-mpy-add
  ...
  (combine
   (vs-mpy-add
    ...
    #<load-data>
    (list (int16_t (bv #x0040 16)))
    #f
    #f
    #f
    'int16)
   (union [x?$401 #(struct:vs-mpy-add
                    ...
                    #<load-data>
                    (#(struct:int16_t (bv #x0040 16)))
                    #f
                    #f
                    #f
                    int16)] [(! x?$401) #(struct:broadcast
                                          ...
                                          #(struct:sca-mul
                                            #(struct:int16_t t148)
                                            #(struct:int16_t (bv #xffc0 16))))]))
  (list (int16_t (bv #x0040 16)) (int8_t (bv #x01 8)))
  #f
  #f
  #f
  'int16))
here(#<load-data> #(struct:vs-mpy-add ... #<load-data> (#(struct:int16_t (bv #x0040 16)) (union #:size 2 #:hash 1456569712936)) #f #f #f int16) #(struct:vs-mpy-add ... #<load-data> (#(struct:int16_t (bv #x0040 16))) #f x?$398 #f int16) #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<load-data> (#(struct:int16_t (bv #x0040 16))) #f #f #f int16) (union #:size 2 #:hash 397960548693)> (#(struct:int16_t (bv #x0040 16)) #(struct:int8_t (bv #x01 8))) #f #f #f int16))

"Replace templates"
'()
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-mul
  (vec-cast
   (load
    (buffer input1 'uint8)
    (ramp
     (sca-add
      (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
      (sca-sub
       (sca-sub (var-lookup 't75) (var-lookup 't81))
       (var-lookup 'input1.min.0)))
     1
     16)
    (aligned 1 0))
   'int16
   16)
  (sca-broadcast (int16_t (bv #x0040 16)) 16))
 (sca-broadcast (sca-mul (int16_t t148) (int16_t (bv #xffc0 16))) 16))
template:
  #<load-data>
axioms:
  '()
optimized-halide-expr:
  (vec-add
 (vec-mul
  (vec-cast
   (load
    (buffer input1 'uint8)
    (ramp
     (sca-add
      (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
      (sca-sub
       (sca-sub (var-lookup 't75) (var-lookup 't81))
       (var-lookup 'input1.min.0)))
     1
     16)
    (aligned 1 0))
   'int16
   16)
  (sca-broadcast (int16_t (bv #x0040 16)) 16))
 (sca-broadcast (sca-mul (int16_t t148) (int16_t (bv #xffc0 16))) 16))
optimized-template:
  #<load-data>
optimized Halide 0:
  (int16_t
 (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)))
optimized x86 0:
  (uint8_t
 (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))))
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-mul
  (vec-cast
   (load
    (buffer input1 'uint8)
    (ramp
     (sca-add
      (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
      (sca-sub
       (sca-sub (var-lookup 't75) (var-lookup 't81))
       (var-lookup 'input1.min.0)))
     1
     16)
    (aligned 1 0))
   'int16
   16)
  (sca-broadcast (int16_t (bv #x0040 16)) 16))
 (sca-broadcast (sca-mul (int16_t t148) (int16_t (bv #xffc0 16))) 16))
template:
  (vs-mpy-add
 ...
 #<load-data>
 (list
  (int16_t (bv #x0040 16))
  (union [x?$400 #(struct:int16_t (bv #x0040 16))] [(! x?$400) #(struct:int8_t
                                                                 (bv #x01 8))]))
 #f
 #f
 #f
 'int16)
axioms:
  '()
optimized-halide-expr:
  (vec-add
 (vec-mul
  (vec-cast
   (load
    (buffer input1 'uint8)
    (ramp
     (sca-add
      (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
      (sca-sub
       (sca-sub (var-lookup 't75) (var-lookup 't81))
       (var-lookup 'input1.min.0)))
     1
     16)
    (aligned 1 0))
   'int16
   16)
  (sca-broadcast (int16_t (bv #x0040 16)) 16))
 (sca-broadcast (sca-mul (int16_t t148) (int16_t (bv #xffc0 16))) 16))
optimized-template:
  (vs-mpy-add
 ...
 #<load-data>
 (list
  (int16_t (bv #x0040 16))
  (union [x?$400 #(struct:int16_t (bv #x0040 16))] [(! x?$400) #(struct:int8_t
                                                                 (bv #x01 8))]))
 #f
 #f
 #f
 'int16)
optimized Halide 0:
  (int16_t
 (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)))
optimized x86 0:
  (int16_t
 (bvmul (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16)) (ite x?$400 (bv #x0080 16) (bv #x0041 16))))
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-mul
  (vec-cast
   (load
    (buffer input1 'uint8)
    (ramp
     (sca-add
      (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
      (sca-sub
       (sca-sub (var-lookup 't75) (var-lookup 't81))
       (var-lookup 'input1.min.0)))
     1
     16)
    (aligned 1 0))
   'int16
   16)
  (sca-broadcast (int16_t (bv #x0040 16)) 16))
 (sca-broadcast (sca-mul (int16_t t148) (int16_t (bv #xffc0 16))) 16))
template:
  (vs-mpy-add
 ...
 #<load-data>
 (list (int16_t (bv #x0040 16)))
 #f
 x?$398
 #f
 'int16)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-add
 (vec-mul
  (vec-cast #<abstr-halide-expr> 'int16 16)
  (sca-broadcast (int16_t (bv #x0040 16)) 16))
 (sca-broadcast (sca-mul (int16_t t148) (int16_t (bv #xffc0 16))) 16))
optimized-template:
  (vs-mpy-add
 ...
 #<abstr-expr>
 (list (int16_t (bv #x0040 16)))
 #f
 x?$398
 #f
 'int16)
optimized Halide 0:
  (int16_t
 (bvadd (bvmul (bv #xffc0 16) t148) (bvmul (bv #x0040 16) (zero-extend (app abstr-vals$594 0) (bitvector 16)))))
optimized x86 0:
  (int16_t
 (bvadd (bvmul (bv #x0040 16) (zero-extend (app abstr-vals$594 0) (bitvector 16))) (ite x?$398 (bv #x0001 16) (bv #x0000 16))))
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-mul
  (vec-cast
   (load
    (buffer input1 'uint8)
    (ramp
     (sca-add
      (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
      (sca-sub
       (sca-sub (var-lookup 't75) (var-lookup 't81))
       (var-lookup 'input1.min.0)))
     1
     16)
    (aligned 1 0))
   'int16
   16)
  (sca-broadcast (int16_t (bv #x0040 16)) 16))
 (sca-broadcast (sca-mul (int16_t t148) (int16_t (bv #xffc0 16))) 16))
template:
  (vs-mpy-add
 ...
 (combine
  (vs-mpy-add ... #<load-data> (list (int16_t (bv #x0040 16))) #f #f #f 'int16)
  (union [x?$401 #(struct:vs-mpy-add
                   ...
                   #<load-data>
                   (#(struct:int16_t (bv #x0040 16)))
                   #f
                   #f
                   #f
                   int16)] [(! x?$401) #(struct:broadcast
                                         ...
                                         #(struct:sca-mul
                                           #(struct:int16_t t148)
                                           #(struct:int16_t (bv #xffc0 16))))]))
 (list (int16_t (bv #x0040 16)) (int8_t (bv #x01 8)))
 #f
 #f
 #f
 'int16)
axioms:
  (union [x?$401 ((forall (idx) (&& (bvsle (app abstr-vals$595 idx) (bv #x3fc0 16)) (bvsle (bv #x0000 16) (app abstr-vals$595 idx))))
                (forall (idx) (&& (bvsle (app abstr-vals$595 idx) (bv #x3fc0 16)) (bvsle (bv #x0000 16) (app abstr-vals$595 idx)))))] [(! x?$401) ((forall (idx) (&& (bvsle (app abstr-vals$595 idx) (bv #x3fc0 16)) (bvsle (bv #x0000 16) (app abstr-vals$595 idx)))))])
optimized-halide-expr:
  (vec-add
 #<abstr-halide-expr>
 (sca-broadcast (sca-mul (int16_t t148) (int16_t (bv #xffc0 16))) 16))
optimized-template:
  (vs-mpy-add
 ...
 (combine
  #<abstr-expr>
  (union [x?$401 #<abstr-expr>] [(! x?$401) #(struct:broadcast
                                              ...
                                              #(struct:sca-mul
                                                #(struct:int16_t t148)
                                                #(struct:int16_t
                                                  (bv #xffc0 16))))]))
 (list (int16_t (bv #x0040 16)) (int8_t (bv #x01 8)))
 #f
 #f
 #f
 'int16)
optimized Halide 0:
  (int16_t (bvadd (bvmul (bv #xffc0 16) t148) (app abstr-vals$595 0)))
optimized x86 0:
  (int16_t
 (bvadd (bvmul (bv #x0040 16) (ite c$403 (app abstr-vals$595 idx$402) (ite x?$401 (app abstr-vals$595 idx$402) (bvmul (bv #xffc0 16) t148)))) (ite c$405 (app abstr-vals$595 idx$404) (ite x?$401 (app abstr-vals$595 idx$404) (bvmul (bv #xffc0 16) t148)))))
Ran synthesizer for 170 ms
(unsat)
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-mul
  (vec-cast
   (load
    (buffer input1 'uint8)
    (ramp
     (sca-add
      (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
      (sca-sub
       (sca-sub (var-lookup 't75) (var-lookup 't81))
       (var-lookup 'input1.min.0)))
     1
     16)
    (aligned 1 0))
   'int16
   16)
  (sca-broadcast (int16_t (bv #x0040 16)) 16))
 (sca-broadcast (sca-mul (int16_t t148) (int16_t (bv #xffc0 16))) 16))
template:
  (vs-mpy-add
 ...
 (combine
  #<load-data>
  (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))))
 (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
 #f
 #f
 #f
 'int16)
axioms:
  (list #t (forall (idx) (bvsle (app abstr-vals$858 idx) (bv #x7fc0 16))))
optimized-halide-expr:
  (vec-add
 (vec-mul
  (vec-cast #<abstr-halide-expr> 'int16 16)
  (sca-broadcast (int16_t (bv #x0040 16)) 16))
 #<abstr-halide-expr>)
optimized-template:
  (vs-mpy-add
 ...
 (combine #<abstr-expr> #<abstr-expr>)
 (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
 #f
 #f
 #f
 'int16)
optimized Halide 0:
  (int16_t
 (bvadd (app abstr-vals$858 0) (bvmul (bv #x0040 16) (zero-extend (app abstr-vals$857 0) (bitvector 16)))))
optimized x86 0:
  (int16_t
 (bvadd (ite c$598 (zero-extend (app abstr-vals$857 idx$597) (bitvector 16)) (app abstr-vals$858 idx$597)) (bvmul (bv #x0040 16) (ite c$600 (zero-extend (app abstr-vals$857 idx$599) (bitvector 16)) (app abstr-vals$858 idx$599)))))
Ran synthesizer for 139 ms
(model
 [idx$597 0]
 [c$598 #f]
 [idx$599 0]
 [c$600 #t])
(vec-add
 (vec-mul
  (vec-cast #<abstr-halide-expr> 'int16 16)
  (sca-broadcast (int16_t (bv #x0040 16)) 16))
 #<abstr-halide-expr>)
(vs-mpy-add
 ...
 (combine
  #<load-data>
  (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))))
 (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
 #f
 #f
 #f
 'int16)
Ran bounds analysis for 35 ms
Ran bounds analysis for 25 ms
"Extended success?"
#t
(vs-mpy-add
 ...
 (combine
  #<load-data>
  (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))))
 (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
 #f
 #f
 #f
 'int16)
"Building Expr:"
(vec-cast
 (vec-add
  (vec-mul
   (vec-cast
    (load
     (buffer input1 'uint8)
     (ramp
      (sca-add
       (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
       (sca-sub
        (sca-sub (var-lookup 't75) (var-lookup 't81))
        (var-lookup 'input1.min.0)))
      1
      16)
     (aligned 1 0))
    'int16
    16)
   (sca-broadcast (int16_t (bv #x0040 16)) 16))
  (sca-broadcast (sca-mul (int16_t t148) (int16_t (bv #xffc0 16))) 16))
 'int32
 16)
"Fold templates"
(list
 #<load-data>
 (vs-mpy-add
  ...
  (combine
   #<load-data>
   (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))))
  (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
  x?$861
  x?$862
  x?$863
  'int16))
here(#<load-data> #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t148) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) x?$861 x?$862 x?$863 int16))

"Replace templates"
'()
run-x86-synthesizer
halide-expr:
  (vec-cast
 (vec-add
  (vec-mul
   (vec-cast
    (load
     (buffer input1 'uint8)
     (ramp
      (sca-add
       (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
       (sca-sub
        (sca-sub (var-lookup 't75) (var-lookup 't81))
        (var-lookup 'input1.min.0)))
      1
      16)
     (aligned 1 0))
    'int16
    16)
   (sca-broadcast (int16_t (bv #x0040 16)) 16))
  (sca-broadcast (sca-mul (int16_t t148) (int16_t (bv #xffc0 16))) 16))
 'int32
 16)
template:
  #<load-data>
axioms:
  '()
optimized-halide-expr:
  (vec-cast
 (vec-add
  (vec-mul
   (vec-cast
    (load
     (buffer input1 'uint8)
     (ramp
      (sca-add
       (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
       (sca-sub
        (sca-sub (var-lookup 't75) (var-lookup 't81))
        (var-lookup 'input1.min.0)))
      1
      16)
     (aligned 1 0))
    'int16
    16)
   (sca-broadcast (int16_t (bv #x0040 16)) 16))
  (sca-broadcast (sca-mul (int16_t t148) (int16_t (bv #xffc0 16))) 16))
 'int32
 16)
optimized-template:
  #<load-data>
optimized Halide 0:
  (int32_t
 (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)))
optimized x86 0:
  (uint8_t
 (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))))
run-x86-synthesizer
halide-expr:
  (vec-cast
 (vec-add
  (vec-mul
   (vec-cast
    (load
     (buffer input1 'uint8)
     (ramp
      (sca-add
       (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
       (sca-sub
        (sca-sub (var-lookup 't75) (var-lookup 't81))
        (var-lookup 'input1.min.0)))
      1
      16)
     (aligned 1 0))
    'int16
    16)
   (sca-broadcast (int16_t (bv #x0040 16)) 16))
  (sca-broadcast (sca-mul (int16_t t148) (int16_t (bv #xffc0 16))) 16))
 'int32
 16)
template:
  (vs-mpy-add
 ...
 (combine
  #<load-data>
  (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))))
 (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
 x?$861
 x?$862
 x?$863
 'int16)
axioms:
  (list #t (forall (idx) (bvsle (app abstr-vals$930 idx) (bv #x7fc0 16))))
optimized-halide-expr:
  (vec-cast
 (vec-add
  (vec-mul
   (vec-cast #<abstr-halide-expr> 'int16 16)
   (sca-broadcast (int16_t (bv #x0040 16)) 16))
  #<abstr-halide-expr>)
 'int32
 16)
optimized-template:
  (vs-mpy-add
 ...
 (combine #<abstr-expr> #<abstr-expr>)
 (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
 x?$861
 x?$862
 x?$863
 'int16)
optimized Halide 0:
  (int32_t
 (sign-extend (bvadd (app abstr-vals$930 0) (bvmul (bv #x0040 16) (zero-extend (app abstr-vals$929 0) (bitvector 16)))) (bitvector 32)))
optimized x86 0:
  (int16_t
 (ite* (⊢ (&& (! x?$863) (! (&& x?$861 x?$863))) (ite x?$861 (bvadd (ite x?$861 (bvadd (ite x?$862 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$930 0) (ite x?$862 (bv #x0001 16) (bv #x0000 16)))) (ite (bvsle (bvadd (bv #x8000 16) (bvneg (ite (bvsle (ite x?$861 (bvadd (ite x?$862 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$930 0) (ite x?$862 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16)) (ite x?$861 (bvadd (ite x?$862 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$930 0) (ite x?$862 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16)))) (ite (bvsle (bvmul (bv #x0040 16) (zero-extend (app abstr-vals$929 0) (bitvector 16))) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$861 (bvadd (ite x?$862 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$930 0) (ite x?$862 (bv #x0001 16) (bv #x0000 16))))) (ite x?$861 (bvadd (ite x?$862 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$930 0) (ite x?$862 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16))))) (bvmul (bv #x0040 16) (zero-extend (app abstr-vals$929 0) (bitvector 16))) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$861 (bvadd (ite x?$862 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$930 0) (ite x?$862 (bv #x0001 16) (bv #x0000 16))))) (ite x?$861 (bvadd (ite x?$862 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$930 0) (ite x?$862 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16)))))) (ite (bvsle (bvmul (bv #x0040 16) (zero-extend (app abstr-vals$929 0) (bitvector 16))) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$861 (bvadd (ite x?$862 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$930 0) (ite x?$862 (bv #x0001 16) (bv #x0000 16))))) (ite x?$861 (bvadd (ite x?$862 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$930 0) (ite x?$862 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16))))) (bvmul (bv #x0040 16) (zero-extend (app abstr-vals$929 0) (bitvector 16))) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$861 (bvadd (ite x?$862 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$930 0) (ite x?$862 (bv #x0001 16) (bv #x0000 16))))) (ite x?$861 (bvadd (ite x?$862 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$930 0) (ite x?$862 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16))))) (bvadd (bv #x8000 16) (bvneg (ite (bvsle (ite x?$861 (bvadd (ite x?$862 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$930 0) (ite x?$862 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16)) (ite x?$861 (bvadd (ite x?$862 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$930 0) (ite x?$862 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0040 16) (zero-extend (app abstr-vals$929 0) (bitvector 16))) (ite x?$861 (bvadd (ite x?$862 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$930 0) (ite x?$862 (bv #x0001 16) (bv #x0000 16))))))) (⊢ (|| (&& x?$861 x?$863) (&& x?$863 (! (&& x?$861 x?$863)))) (bvashr (ite x?$861 (bvadd (ite x?$861 (bvadd (ite x?$862 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$930 0) (ite x?$862 (bv #x0001 16) (bv #x0000 16)))) (ite (bvsle (bvadd (bv #x8000 16) (bvneg (ite (bvsle (ite x?$861 (bvadd (ite x?$862 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$930 0) (ite x?$862 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16)) (ite x?$861 (bvadd (ite x?$862 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$930 0) (ite x?$862 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16)))) (ite (bvsle (bvmul (bv #x0040 16) (zero-extend (app abstr-vals$929 0) (bitvector 16))) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$861 (bvadd (ite x?$862 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$930 0) (ite x?$862 (bv #x0001 16) (bv #x0000 16))))) (ite x?$861 (bvadd (ite x?$862 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$930 0) (ite x?$862 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16))))) (bvmul (bv #x0040 16) (zero-extend (app abstr-vals$929 0) (bitvector 16))) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$861 (bvadd (ite x?$862 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$930 0) (ite x?$862 (bv #x0001 16) (bv #x0000 16))))) (ite x?$861 (bvadd (ite x?$862 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$930 0) (ite x?$862 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16)))))) (ite (bvsle (bvmul (bv #x0040 16) (zero-extend (app abstr-vals$929 0) (bitvector 16))) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$861 (bvadd (ite x?$862 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$930 0) (ite x?$862 (bv #x0001 16) (bv #x0000 16))))) (ite x?$861 (bvadd (ite x?$862 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$930 0) (ite x?$862 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16))))) (bvmul (bv #x0040 16) (zero-extend (app abstr-vals$929 0) (bitvector 16))) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$861 (bvadd (ite x?$862 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$930 0) (ite x?$862 (bv #x0001 16) (bv #x0000 16))))) (ite x?$861 (bvadd (ite x?$862 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$930 0) (ite x?$862 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16))))) (bvadd (bv #x8000 16) (bvneg (ite (bvsle (ite x?$861 (bvadd (ite x?$862 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$930 0) (ite x?$862 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16)) (ite x?$861 (bvadd (ite x?$862 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$930 0) (ite x?$862 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0040 16) (zero-extend (app abstr-vals$929 0) (bitvector 16))) (ite x?$861 (bvadd (ite x?$862 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$930 0) (ite x?$862 (bv #x0001 16) (bv #x0000 16)))))) (bv #x0001 16)))))
Ran synthesizer for 22 ms
(unsat)
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (vec-cast
 (vec-add
  (vec-mul
   (vec-cast
    (load
     (buffer input1 'uint8)
     (ramp
      (sca-add
       (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
       (sca-sub
        (sca-sub (var-lookup 't75) (var-lookup 't81))
        (var-lookup 'input1.min.0)))
      1
      16)
     (aligned 1 0))
    'int16
    16)
   (sca-broadcast (int16_t (bv #x0040 16)) 16))
  (sca-broadcast (sca-mul (int16_t t148) (int16_t (bv #xffc0 16))) 16))
 'int32
 16)
template:
  (cast
 ...
 (vs-mpy-add
  ...
  (combine
   #<load-data>
   (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))))
  (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
  #f
  #f
  #f
  'int16)
 'int32
 #f)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-cast #<abstr-halide-expr> 'int32 16)
optimized-template:
  (cast ... #<abstr-expr> 'int32 #f)
optimized Halide 0:
  (int32_t (sign-extend (app abstr-vals$931 0) (bitvector 32)))
optimized x86 0:
  (int32_t (sign-extend (app abstr-vals$931 0) (bitvector 32)))
Ran synthesizer for 21 ms
(model)
(vec-cast #<abstr-halide-expr> 'int32 16)
(cast
 ...
 (vs-mpy-add
  ...
  (combine
   #<load-data>
   (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))))
  (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
  #f
  #f
  #f
  'int16)
 'int32
 #f)
Ran bounds analysis for 43 ms
Ran bounds analysis for 35 ms
"Extended success?"
#t
(cast
 ...
 (vs-mpy-add
  ...
  (combine
   #<load-data>
   (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))))
  (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
  #f
  #f
  #f
  'int16)
 'int32
 #f)
"Building Expr:"
(sca-broadcast (int16_t input1_multiplier) 16)
"Fold templates"
'()
here()

"Replace templates"
'()
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (sca-broadcast (int16_t input1_multiplier) 16)
template:
  (broadcast ... (int16_t input1_multiplier))
axioms:
  '()
optimized-halide-expr:
  (sca-broadcast (int16_t input1_multiplier) 16)
optimized-template:
  (broadcast ... (int16_t input1_multiplier))
optimized Halide 0:
  (int16_t input1_multiplier)
optimized x86 0:
  (int16_t input1_multiplier)
Ran synthesizer for 21 ms
(model)
(sca-broadcast (int16_t input1_multiplier) 16)
(broadcast ... (int16_t input1_multiplier))
Ran bounds analysis for 29 ms
Ran bounds analysis for 24 ms
"Extended success?"
#t
(broadcast ... (int16_t input1_multiplier))
"Building Expr:"
(vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16)
"Fold templates"
'()
here()

"Replace templates"
'()
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16)
template:
  (cast ... (broadcast ... (int16_t input1_multiplier)) 'int32 #f)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-cast #<abstr-halide-expr> 'int32 16)
optimized-template:
  (cast ... #<abstr-expr> 'int32 #f)
optimized Halide 0:
  (int32_t (sign-extend (app abstr-vals$933 0) (bitvector 32)))
optimized x86 0:
  (int32_t (sign-extend (app abstr-vals$933 0) (bitvector 32)))
Ran synthesizer for 22 ms
(model)
(vec-cast #<abstr-halide-expr> 'int32 16)
(cast ... (broadcast ... (int16_t input1_multiplier)) 'int32 #f)
Ran bounds analysis for 45 ms
Ran bounds analysis for 34 ms
"Extended success?"
#t
(cast ... (broadcast ... (int16_t input1_multiplier)) 'int32 #f)
"Building Expr:"
(vec-mul
 (vec-cast
  (vec-add
   (vec-mul
    (vec-cast
     (load
      (buffer input1 'uint8)
      (ramp
       (sca-add
        (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
        (sca-sub
         (sca-sub (var-lookup 't75) (var-lookup 't81))
         (var-lookup 'input1.min.0)))
       1
       16)
      (aligned 1 0))
     'int16
     16)
    (sca-broadcast (int16_t (bv #x0040 16)) 16))
   (sca-broadcast (sca-mul (int16_t t148) (int16_t (bv #xffc0 16))) 16))
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
"Fold templates"
(list
 (vs-mpy-add
  ...
  (combine
   #<load-data>
   (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))))
  (list
   (sca-mul
    (sca-cast (int8_t (bv #x01 8)) 'int16)
    (sca-cast
     (union [(&& (! xi?$939) (! xi?$940)) #(struct:int8_t (bv #x01 8))] [(|| xi?$939 (&& xi?$940 (! xi?$939))) #(struct:int16_t
                                                                                                                 (ite* (⊢ xi?$939 (bv #x0040 16)) (⊢ (&& xi?$940 (! xi?$939)) input1_multiplier)))])
     'int16))
   (sca-mul
    (sca-cast (int16_t (bv #x0040 16)) 'int16)
    (sca-cast
     (union [(&& (! xi?$939) (! xi?$940)) #(struct:int8_t (bv #x01 8))] [(|| xi?$939 (&& xi?$940 (! xi?$939))) #(struct:int16_t
                                                                                                                 (ite* (⊢ xi?$939 (bv #x0040 16)) (⊢ (&& xi?$940 (! xi?$939)) input1_multiplier)))])
     'int16)))
  #f
  #f
  #f
  'int16)
 (vs-mpy-add
  ...
  (combine
   #<load-data>
   (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))))
  (list
   (sca-mul
    (sca-cast (int8_t (bv #x01 8)) 'int16)
    (sca-cast
     (union [(&& (! xi?$939) (! xi?$940)) #(struct:int8_t (bv #x01 8))] [(|| xi?$939 (&& xi?$940 (! xi?$939))) #(struct:int16_t
                                                                                                                 (ite* (⊢ xi?$939 (bv #x0040 16)) (⊢ (&& xi?$940 (! xi?$939)) input1_multiplier)))])
     'int16))
   (sca-mul
    (sca-cast (int16_t (bv #x0040 16)) 'int16)
    (sca-cast
     (union [(&& (! xi?$939) (! xi?$940)) #(struct:int8_t (bv #x01 8))] [(|| xi?$939 (&& xi?$940 (! xi?$939))) #(struct:int16_t
                                                                                                                 (ite* (⊢ xi?$939 (bv #x0040 16)) (⊢ (&& xi?$940 (! xi?$939)) input1_multiplier)))])
     'int16)))
  #f
  #f
  #f
  'int32)
 (cast
  ...
  (vs-mpy-add
   ...
   (combine
    #<load-data>
    (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))))
   (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
   #f
   #f
   #f
   'int16)
  'int32
  x?$935)
 (cast ... (broadcast ... (int16_t input1_multiplier)) 'int32 x?$941))
here(#(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t148) #(struct:int16_t (bv #xffc0 16))))> (#(struct:sca-mul #(struct:sca-cast #(struct:int8_t (bv #x01 8)) int16) #(struct:sca-cast (union #:size 2 #:hash 1389566910832) int16)) #(struct:sca-mul #(struct:sca-cast #(struct:int16_t (bv #x0040 16)) int16) #(struct:sca-cast (union #:size 2 #:hash 1389566910832) int16))) #f #f #f int16) #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t148) #(struct:int16_t (bv #xffc0 16))))> (#(struct:sca-mul #(struct:sca-cast #(struct:int8_t (bv #x01 8)) int16) #(struct:sca-cast (union #:size 2 #:hash 1389566910832) int16)) #(struct:sca-mul #(struct:sca-cast #(struct:int16_t (bv #x0040 16)) int16) #(struct:sca-cast (union #:size 2 #:hash 1389566910832) int16))) #f #f #f int32) #(struct:cast ... #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t148) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f #f #f int16) int32 x?$935) #(struct:cast ... #(struct:broadcast ... #(struct:int16_t input1_multiplier)) int32 x?$941))

(list (vs-mpy-add ... (vs-mpy-add ... (combine #<load-data> (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16))))) (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16))) #f #f #f 'int16) (list (int16_t (ite x?$1134 (bv #x0040 16) input1_multiplier))) #f #f #f 'int32) (vs-mpy-add ... #<load-data> (list (int16_t (ite x?$1135 (bv #x0040 16) input1_multiplier))) #f #f #f 'int32) (vv-mpy-add ... (vs-mpy-add ... (combine #<load-data> (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16))))) (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16))) #f #f #f 'int16) '(1) (! x?$1136) (! x?$1137) (! x?$1138) 'int32) (vv-mpy-add ... #<load-data> '(1) (! x?$1139) (! x?$1140) (! x?$1141) 'int32))
(list (vs-mpy-add ... (broadcast ... (int16_t input1_multiplier)) (list (int16_t (ite x?$1334 (bv #x0040 16) input1_multiplier))) #f #f #f 'int32) (vs-mpy-add ... #<load-data> (list (int16_t (ite x?$1335 (bv #x0040 16) input1_multiplier))) #f #f #f 'int32) (vv-mpy-add ... (broadcast ... (int16_t input1_multiplier)) '(1) (! x?$1336) (! x?$1337) (! x?$1338) 'int32) (vv-mpy-add ... #<load-data> '(1) (! x?$1339) (! x?$1340) (! x?$1341) 'int32))
"Replace templates"
(list
 (vs-mpy-add
  ...
  (vs-mpy-add
   ...
   (combine
    #<load-data>
    (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))))
   (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
   #f
   #f
   #f
   'int16)
  (list (int16_t (ite x?$1134 (bv #x0040 16) input1_multiplier)))
  #f
  #f
  #f
  'int32)
 (vs-mpy-add
  ...
  #<load-data>
  (list (int16_t (ite x?$1135 (bv #x0040 16) input1_multiplier)))
  #f
  #f
  #f
  'int32)
 (vv-mpy-add
  ...
  (vs-mpy-add
   ...
   (combine
    #<load-data>
    (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))))
   (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
   #f
   #f
   #f
   'int16)
  '(1)
  (! x?$1136)
  (! x?$1137)
  (! x?$1138)
  'int32)
 (vv-mpy-add ... #<load-data> '(1) (! x?$1139) (! x?$1140) (! x?$1141) 'int32)
 (vs-mpy-add
  ...
  (broadcast ... (int16_t input1_multiplier))
  (list (int16_t (ite x?$1334 (bv #x0040 16) input1_multiplier)))
  #f
  #f
  #f
  'int32)
 (vs-mpy-add
  ...
  #<load-data>
  (list (int16_t (ite x?$1335 (bv #x0040 16) input1_multiplier)))
  #f
  #f
  #f
  'int32)
 (vv-mpy-add
  ...
  (broadcast ... (int16_t input1_multiplier))
  '(1)
  (! x?$1336)
  (! x?$1337)
  (! x?$1338)
  'int32)
 (vv-mpy-add ... #<load-data> '(1) (! x?$1339) (! x?$1340) (! x?$1341) 'int32))
run-x86-synthesizer
halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-mul
    (vec-cast
     (load
      (buffer input1 'uint8)
      (ramp
       (sca-add
        (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
        (sca-sub
         (sca-sub (var-lookup 't75) (var-lookup 't81))
         (var-lookup 'input1.min.0)))
       1
       16)
      (aligned 1 0))
     'int16
     16)
    (sca-broadcast (int16_t (bv #x0040 16)) 16))
   (sca-broadcast (sca-mul (int16_t t148) (int16_t (bv #xffc0 16))) 16))
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
template:
  (vs-mpy-add
 ...
 #<load-data>
 (list (int16_t (ite x?$1135 (bv #x0040 16) input1_multiplier)))
 #f
 #f
 #f
 'int32)
axioms:
  '()
optimized-halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-mul
    (vec-cast
     (load
      (buffer input1 'uint8)
      (ramp
       (sca-add
        (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
        (sca-sub
         (sca-sub (var-lookup 't75) (var-lookup 't81))
         (var-lookup 'input1.min.0)))
       1
       16)
      (aligned 1 0))
     'int16
     16)
    (sca-broadcast (int16_t (bv #x0040 16)) 16))
   (sca-broadcast (sca-mul (int16_t t148) (int16_t (bv #xffc0 16))) 16))
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
optimized-template:
  (vs-mpy-add
 ...
 #<load-data>
 (list (int16_t (ite x?$1135 (bv #x0040 16) input1_multiplier)))
 #f
 #f
 #f
 'int32)
optimized Halide 0:
  (int32_t
 (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))))
optimized x86 0:
  (int32_t
 (bvmul (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 32)) (sign-extend (ite x?$1135 (bv #x0040 16) input1_multiplier) (bitvector 32))))
run-x86-synthesizer
halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-mul
    (vec-cast
     (load
      (buffer input1 'uint8)
      (ramp
       (sca-add
        (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
        (sca-sub
         (sca-sub (var-lookup 't75) (var-lookup 't81))
         (var-lookup 'input1.min.0)))
       1
       16)
      (aligned 1 0))
     'int16
     16)
    (sca-broadcast (int16_t (bv #x0040 16)) 16))
   (sca-broadcast (sca-mul (int16_t t148) (int16_t (bv #xffc0 16))) 16))
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
template:
  (vv-mpy-add ... #<load-data> '(1) (! x?$1139) (! x?$1140) (! x?$1141) 'int32)
axioms:
  '()
optimized-halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-mul
    (vec-cast
     (load
      (buffer input1 'uint8)
      (ramp
       (sca-add
        (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
        (sca-sub
         (sca-sub (var-lookup 't75) (var-lookup 't81))
         (var-lookup 'input1.min.0)))
       1
       16)
      (aligned 1 0))
     'int16
     16)
    (sca-broadcast (int16_t (bv #x0040 16)) 16))
   (sca-broadcast (sca-mul (int16_t t148) (int16_t (bv #xffc0 16))) 16))
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
optimized-template:
  (vv-mpy-add ... #<load-data> '(1) (! x?$1139) (! x?$1140) (! x?$1141) 'int32)
optimized Halide 0:
  (int32_t
 (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))))
optimized x86 0:
  (int32_t
 (ite* (⊢ (&& x?$1141 (! (&& (! x?$1139) (! x?$1141)))) (ite x?$1139 (bvadd (bvmul (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 32)) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 32))) (ite x?$1140 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1140 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (bvmul (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 32)) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1140 (bv #x00000000 32) (bv #x00000001 32))))) (bvmul (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 32)) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1140 (bv #x00000000 32) (bv #x00000001 32)))))))) (⊢ (|| (&& (! x?$1139) (! x?$1141)) (&& (! x?$1141) (! (&& (! x?$1139) (! x?$1141))))) (bvashr (ite x?$1139 (bvadd (bvmul (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 32)) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 32))) (ite x?$1140 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1140 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (bvmul (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 32)) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1140 (bv #x00000000 32) (bv #x00000001 32))))) (bvmul (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 32)) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1140 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000001 32)))))
run-x86-synthesizer
halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-mul
    (vec-cast
     (load
      (buffer input1 'uint8)
      (ramp
       (sca-add
        (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
        (sca-sub
         (sca-sub (var-lookup 't75) (var-lookup 't81))
         (var-lookup 'input1.min.0)))
       1
       16)
      (aligned 1 0))
     'int16
     16)
    (sca-broadcast (int16_t (bv #x0040 16)) 16))
   (sca-broadcast (sca-mul (int16_t t148) (int16_t (bv #xffc0 16))) 16))
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
template:
  (vs-mpy-add
 ...
 #<load-data>
 (list (int16_t (ite x?$1335 (bv #x0040 16) input1_multiplier)))
 #f
 #f
 #f
 'int32)
axioms:
  '()
optimized-halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-mul
    (vec-cast
     (load
      (buffer input1 'uint8)
      (ramp
       (sca-add
        (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
        (sca-sub
         (sca-sub (var-lookup 't75) (var-lookup 't81))
         (var-lookup 'input1.min.0)))
       1
       16)
      (aligned 1 0))
     'int16
     16)
    (sca-broadcast (int16_t (bv #x0040 16)) 16))
   (sca-broadcast (sca-mul (int16_t t148) (int16_t (bv #xffc0 16))) 16))
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
optimized-template:
  (vs-mpy-add
 ...
 #<load-data>
 (list (int16_t (ite x?$1335 (bv #x0040 16) input1_multiplier)))
 #f
 #f
 #f
 'int32)
optimized Halide 0:
  (int32_t
 (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))))
optimized x86 0:
  (int32_t
 (bvmul (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 32)) (sign-extend (ite x?$1335 (bv #x0040 16) input1_multiplier) (bitvector 32))))
run-x86-synthesizer
halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-mul
    (vec-cast
     (load
      (buffer input1 'uint8)
      (ramp
       (sca-add
        (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
        (sca-sub
         (sca-sub (var-lookup 't75) (var-lookup 't81))
         (var-lookup 'input1.min.0)))
       1
       16)
      (aligned 1 0))
     'int16
     16)
    (sca-broadcast (int16_t (bv #x0040 16)) 16))
   (sca-broadcast (sca-mul (int16_t t148) (int16_t (bv #xffc0 16))) 16))
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
template:
  (vv-mpy-add ... #<load-data> '(1) (! x?$1339) (! x?$1340) (! x?$1341) 'int32)
axioms:
  '()
optimized-halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-mul
    (vec-cast
     (load
      (buffer input1 'uint8)
      (ramp
       (sca-add
        (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
        (sca-sub
         (sca-sub (var-lookup 't75) (var-lookup 't81))
         (var-lookup 'input1.min.0)))
       1
       16)
      (aligned 1 0))
     'int16
     16)
    (sca-broadcast (int16_t (bv #x0040 16)) 16))
   (sca-broadcast (sca-mul (int16_t t148) (int16_t (bv #xffc0 16))) 16))
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
optimized-template:
  (vv-mpy-add ... #<load-data> '(1) (! x?$1339) (! x?$1340) (! x?$1341) 'int32)
optimized Halide 0:
  (int32_t
 (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))))
optimized x86 0:
  (int32_t
 (ite* (⊢ (&& x?$1341 (! (&& (! x?$1339) (! x?$1341)))) (ite x?$1339 (bvadd (bvmul (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 32)) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 32))) (ite x?$1340 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1340 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (bvmul (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 32)) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1340 (bv #x00000000 32) (bv #x00000001 32))))) (bvmul (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 32)) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1340 (bv #x00000000 32) (bv #x00000001 32)))))))) (⊢ (|| (&& (! x?$1339) (! x?$1341)) (&& (! x?$1341) (! (&& (! x?$1339) (! x?$1341))))) (bvashr (ite x?$1339 (bvadd (bvmul (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 32)) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 32))) (ite x?$1340 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1340 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (bvmul (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 32)) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1340 (bv #x00000000 32) (bv #x00000001 32))))) (bvmul (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 32)) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1340 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000001 32)))))
run-x86-synthesizer
halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-mul
    (vec-cast
     (load
      (buffer input1 'uint8)
      (ramp
       (sca-add
        (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
        (sca-sub
         (sca-sub (var-lookup 't75) (var-lookup 't81))
         (var-lookup 'input1.min.0)))
       1
       16)
      (aligned 1 0))
     'int16
     16)
    (sca-broadcast (int16_t (bv #x0040 16)) 16))
   (sca-broadcast (sca-mul (int16_t t148) (int16_t (bv #xffc0 16))) 16))
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
template:
  (cast ... (broadcast ... (int16_t input1_multiplier)) 'int32 x?$941)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-mul
    (vec-cast
     (load
      (buffer input1 'uint8)
      (ramp
       (sca-add
        (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
        (sca-sub
         (sca-sub (var-lookup 't75) (var-lookup 't81))
         (var-lookup 'input1.min.0)))
       1
       16)
      (aligned 1 0))
     'int16
     16)
    (sca-broadcast (int16_t (bv #x0040 16)) 16))
   (sca-broadcast (sca-mul (int16_t t148) (int16_t (bv #xffc0 16))) 16))
  'int32
  16)
 (vec-cast #<abstr-halide-expr> 'int32 16))
optimized-template:
  (cast ... #<abstr-expr> 'int32 x?$941)
optimized Halide 0:
  (int32_t
 (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend (app abstr-vals$1342 0) (bitvector 32))))
optimized x86 0:
  (int32_t (sign-extend (app abstr-vals$1342 0) (bitvector 32)))
run-x86-synthesizer
halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-mul
    (vec-cast
     (load
      (buffer input1 'uint8)
      (ramp
       (sca-add
        (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
        (sca-sub
         (sca-sub (var-lookup 't75) (var-lookup 't81))
         (var-lookup 'input1.min.0)))
       1
       16)
      (aligned 1 0))
     'int16
     16)
    (sca-broadcast (int16_t (bv #x0040 16)) 16))
   (sca-broadcast (sca-mul (int16_t t148) (int16_t (bv #xffc0 16))) 16))
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
template:
  (vs-mpy-add
 ...
 (broadcast ... (int16_t input1_multiplier))
 (list (int16_t (ite x?$1334 (bv #x0040 16) input1_multiplier)))
 #f
 #f
 #f
 'int32)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-mul
    (vec-cast
     (load
      (buffer input1 'uint8)
      (ramp
       (sca-add
        (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
        (sca-sub
         (sca-sub (var-lookup 't75) (var-lookup 't81))
         (var-lookup 'input1.min.0)))
       1
       16)
      (aligned 1 0))
     'int16
     16)
    (sca-broadcast (int16_t (bv #x0040 16)) 16))
   (sca-broadcast (sca-mul (int16_t t148) (int16_t (bv #xffc0 16))) 16))
  'int32
  16)
 (vec-cast #<abstr-halide-expr> 'int32 16))
optimized-template:
  (vs-mpy-add
 ...
 #<abstr-expr>
 (list (int16_t (ite x?$1334 (bv #x0040 16) input1_multiplier)))
 #f
 #f
 #f
 'int32)
optimized Halide 0:
  (int32_t
 (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend (app abstr-vals$1343 0) (bitvector 32))))
optimized x86 0:
  (int32_t
 (bvmul (sign-extend (app abstr-vals$1343 0) (bitvector 32)) (sign-extend (ite x?$1334 (bv #x0040 16) input1_multiplier) (bitvector 32))))
run-x86-synthesizer
halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-mul
    (vec-cast
     (load
      (buffer input1 'uint8)
      (ramp
       (sca-add
        (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
        (sca-sub
         (sca-sub (var-lookup 't75) (var-lookup 't81))
         (var-lookup 'input1.min.0)))
       1
       16)
      (aligned 1 0))
     'int16
     16)
    (sca-broadcast (int16_t (bv #x0040 16)) 16))
   (sca-broadcast (sca-mul (int16_t t148) (int16_t (bv #xffc0 16))) 16))
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
template:
  (vv-mpy-add
 ...
 (broadcast ... (int16_t input1_multiplier))
 '(1)
 (! x?$1336)
 (! x?$1337)
 (! x?$1338)
 'int32)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-mul
    (vec-cast
     (load
      (buffer input1 'uint8)
      (ramp
       (sca-add
        (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
        (sca-sub
         (sca-sub (var-lookup 't75) (var-lookup 't81))
         (var-lookup 'input1.min.0)))
       1
       16)
      (aligned 1 0))
     'int16
     16)
    (sca-broadcast (int16_t (bv #x0040 16)) 16))
   (sca-broadcast (sca-mul (int16_t t148) (int16_t (bv #xffc0 16))) 16))
  'int32
  16)
 (vec-cast #<abstr-halide-expr> 'int32 16))
optimized-template:
  (vv-mpy-add ... #<abstr-expr> '(1) (! x?$1336) (! x?$1337) (! x?$1338) 'int32)
optimized Halide 0:
  (int32_t
 (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend (app abstr-vals$1344 0) (bitvector 32))))
optimized x86 0:
  (int32_t
 (ite* (⊢ (&& x?$1338 (! (&& (! x?$1336) (! x?$1338)))) (ite x?$1336 (bvadd (bvmul (sign-extend (app abstr-vals$1344 0) (bitvector 32)) (sign-extend (app abstr-vals$1344 1) (bitvector 32))) (ite x?$1337 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1337 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (bvmul (sign-extend (app abstr-vals$1344 0) (bitvector 32)) (sign-extend (app abstr-vals$1344 1) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1337 (bv #x00000000 32) (bv #x00000001 32))))) (bvmul (sign-extend (app abstr-vals$1344 0) (bitvector 32)) (sign-extend (app abstr-vals$1344 1) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1337 (bv #x00000000 32) (bv #x00000001 32)))))))) (⊢ (|| (&& (! x?$1336) (! x?$1338)) (&& (! x?$1338) (! (&& (! x?$1336) (! x?$1338))))) (bvashr (ite x?$1336 (bvadd (bvmul (sign-extend (app abstr-vals$1344 0) (bitvector 32)) (sign-extend (app abstr-vals$1344 1) (bitvector 32))) (ite x?$1337 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1337 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (bvmul (sign-extend (app abstr-vals$1344 0) (bitvector 32)) (sign-extend (app abstr-vals$1344 1) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1337 (bv #x00000000 32) (bv #x00000001 32))))) (bvmul (sign-extend (app abstr-vals$1344 0) (bitvector 32)) (sign-extend (app abstr-vals$1344 1) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1337 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000001 32)))))
run-x86-synthesizer
halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-mul
    (vec-cast
     (load
      (buffer input1 'uint8)
      (ramp
       (sca-add
        (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
        (sca-sub
         (sca-sub (var-lookup 't75) (var-lookup 't81))
         (var-lookup 'input1.min.0)))
       1
       16)
      (aligned 1 0))
     'int16
     16)
    (sca-broadcast (int16_t (bv #x0040 16)) 16))
   (sca-broadcast (sca-mul (int16_t t148) (int16_t (bv #xffc0 16))) 16))
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
template:
  (vs-mpy-add
 ...
 (combine
  #<load-data>
  (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))))
 (list
  (sca-mul
   (sca-cast (int8_t (bv #x01 8)) 'int16)
   (sca-cast
    (union [(&& (! xi?$939) (! xi?$940)) #(struct:int8_t (bv #x01 8))] [(|| xi?$939 (&& xi?$940 (! xi?$939))) #(struct:int16_t
                                                                                                                (ite* (⊢ xi?$939 (bv #x0040 16)) (⊢ (&& xi?$940 (! xi?$939)) input1_multiplier)))])
    'int16))
  (sca-mul
   (sca-cast (int16_t (bv #x0040 16)) 'int16)
   (sca-cast
    (union [(&& (! xi?$939) (! xi?$940)) #(struct:int8_t (bv #x01 8))] [(|| xi?$939 (&& xi?$940 (! xi?$939))) #(struct:int16_t
                                                                                                                (ite* (⊢ xi?$939 (bv #x0040 16)) (⊢ (&& xi?$940 (! xi?$939)) input1_multiplier)))])
    'int16)))
 #f
 #f
 #f
 'int16)
axioms:
  (list #t (forall (idx) (bvsle (app abstr-vals$1346 idx) (bv #x7fc0 16))))
optimized-halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-mul
    (vec-cast #<abstr-halide-expr> 'int16 16)
    (sca-broadcast (int16_t (bv #x0040 16)) 16))
   #<abstr-halide-expr>)
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
optimized-template:
  (vs-mpy-add
 ...
 (combine #<abstr-expr> #<abstr-expr>)
 (list
  (sca-mul
   (sca-cast (int8_t (bv #x01 8)) 'int16)
   (sca-cast
    (union [(&& (! xi?$939) (! xi?$940)) #(struct:int8_t (bv #x01 8))] [(|| xi?$939 (&& xi?$940 (! xi?$939))) #(struct:int16_t
                                                                                                                (ite* (⊢ xi?$939 (bv #x0040 16)) (⊢ (&& xi?$940 (! xi?$939)) input1_multiplier)))])
    'int16))
  (sca-mul
   (sca-cast (int16_t (bv #x0040 16)) 'int16)
   (sca-cast
    (union [(&& (! xi?$939) (! xi?$940)) #(struct:int8_t (bv #x01 8))] [(|| xi?$939 (&& xi?$940 (! xi?$939))) #(struct:int16_t
                                                                                                                (ite* (⊢ xi?$939 (bv #x0040 16)) (⊢ (&& xi?$940 (! xi?$939)) input1_multiplier)))])
    'int16)))
 #f
 #f
 #f
 'int16)
optimized Halide 0:
  (int32_t
 (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (bvadd (app abstr-vals$1346 0) (bvmul (bv #x0040 16) (zero-extend (app abstr-vals$1345 0) (bitvector 16)))) (bitvector 32))))
optimized x86 0:
  (int16_t
 (bvadd (bvmul (app abstr-vals$1346 0) (ite* (⊢ (&& (! xi?$939) (! xi?$940)) (bv #x0001 16)) (⊢ (|| xi?$939 (&& xi?$940 (! xi?$939))) (ite* (⊢ xi?$939 (bv #x0040 16)) (⊢ (&& xi?$940 (! xi?$939)) input1_multiplier))))) (bvmul (zero-extend (app abstr-vals$1345 0) (bitvector 16)) (bvmul (bv #x0040 16) (ite* (⊢ (&& (! xi?$939) (! xi?$940)) (bv #x0001 16)) (⊢ (|| xi?$939 (&& xi?$940 (! xi?$939))) (ite* (⊢ xi?$939 (bv #x0040 16)) (⊢ (&& xi?$940 (! xi?$939)) input1_multiplier))))))))
Ran synthesizer for 46 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-mul
    (vec-cast
     (load
      (buffer input1 'uint8)
      (ramp
       (sca-add
        (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
        (sca-sub
         (sca-sub (var-lookup 't75) (var-lookup 't81))
         (var-lookup 'input1.min.0)))
       1
       16)
      (aligned 1 0))
     'int16
     16)
    (sca-broadcast (int16_t (bv #x0040 16)) 16))
   (sca-broadcast (sca-mul (int16_t t148) (int16_t (bv #xffc0 16))) 16))
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
template:
  (vs-mpy-add
 ...
 (combine
  #<load-data>
  (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))))
 (list
  (sca-mul
   (sca-cast (int8_t (bv #x01 8)) 'int16)
   (sca-cast
    (union [(&& (! xi?$939) (! xi?$940)) #(struct:int8_t (bv #x01 8))] [(|| xi?$939 (&& xi?$940 (! xi?$939))) #(struct:int16_t
                                                                                                                (ite* (⊢ xi?$939 (bv #x0040 16)) (⊢ (&& xi?$940 (! xi?$939)) input1_multiplier)))])
    'int16))
  (sca-mul
   (sca-cast (int16_t (bv #x0040 16)) 'int16)
   (sca-cast
    (union [(&& (! xi?$939) (! xi?$940)) #(struct:int8_t (bv #x01 8))] [(|| xi?$939 (&& xi?$940 (! xi?$939))) #(struct:int16_t
                                                                                                                (ite* (⊢ xi?$939 (bv #x0040 16)) (⊢ (&& xi?$940 (! xi?$939)) input1_multiplier)))])
    'int16)))
 #f
 #f
 #f
 'int32)
axioms:
  (list #t (forall (idx) (bvsle (app abstr-vals$1348 idx) (bv #x7fc0 16))))
optimized-halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-mul
    (vec-cast #<abstr-halide-expr> 'int16 16)
    (sca-broadcast (int16_t (bv #x0040 16)) 16))
   #<abstr-halide-expr>)
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
optimized-template:
  (vs-mpy-add
 ...
 (combine #<abstr-expr> #<abstr-expr>)
 (list
  (sca-mul
   (sca-cast (int8_t (bv #x01 8)) 'int16)
   (sca-cast
    (union [(&& (! xi?$939) (! xi?$940)) #(struct:int8_t (bv #x01 8))] [(|| xi?$939 (&& xi?$940 (! xi?$939))) #(struct:int16_t
                                                                                                                (ite* (⊢ xi?$939 (bv #x0040 16)) (⊢ (&& xi?$940 (! xi?$939)) input1_multiplier)))])
    'int16))
  (sca-mul
   (sca-cast (int16_t (bv #x0040 16)) 'int16)
   (sca-cast
    (union [(&& (! xi?$939) (! xi?$940)) #(struct:int8_t (bv #x01 8))] [(|| xi?$939 (&& xi?$940 (! xi?$939))) #(struct:int16_t
                                                                                                                (ite* (⊢ xi?$939 (bv #x0040 16)) (⊢ (&& xi?$940 (! xi?$939)) input1_multiplier)))])
    'int16)))
 #f
 #f
 #f
 'int32)
optimized Halide 0:
  (int32_t
 (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (bvadd (app abstr-vals$1348 0) (bvmul (bv #x0040 16) (zero-extend (app abstr-vals$1347 0) (bitvector 16)))) (bitvector 32))))
optimized x86 0:
  (int32_t
 (bvadd (bvmul (sign-extend (app abstr-vals$1348 0) (bitvector 32)) (sign-extend (ite* (⊢ (&& (! xi?$939) (! xi?$940)) (bv #x0001 16)) (⊢ (|| xi?$939 (&& xi?$940 (! xi?$939))) (ite* (⊢ xi?$939 (bv #x0040 16)) (⊢ (&& xi?$940 (! xi?$939)) input1_multiplier)))) (bitvector 32))) (bvmul (zero-extend (app abstr-vals$1347 0) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (ite* (⊢ (&& (! xi?$939) (! xi?$940)) (bv #x0001 16)) (⊢ (|| xi?$939 (&& xi?$940 (! xi?$939))) (ite* (⊢ xi?$939 (bv #x0040 16)) (⊢ (&& xi?$940 (! xi?$939)) input1_multiplier))))) (bitvector 32)))))
Ran synthesizer for 443 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-mul
    (vec-cast
     (load
      (buffer input1 'uint8)
      (ramp
       (sca-add
        (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
        (sca-sub
         (sca-sub (var-lookup 't75) (var-lookup 't81))
         (var-lookup 'input1.min.0)))
       1
       16)
      (aligned 1 0))
     'int16
     16)
    (sca-broadcast (int16_t (bv #x0040 16)) 16))
   (sca-broadcast (sca-mul (int16_t t148) (int16_t (bv #xffc0 16))) 16))
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
template:
  (cast
 ...
 (vs-mpy-add
  ...
  (combine
   #<load-data>
   (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))))
  (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
  #f
  #f
  #f
  'int16)
 'int32
 x?$935)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-mul
 (vec-cast #<abstr-halide-expr> 'int32 16)
 (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
optimized-template:
  (cast ... #<abstr-expr> 'int32 x?$935)
optimized Halide 0:
  (int32_t
 (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (app abstr-vals$1349 0) (bitvector 32))))
optimized x86 0:
  (int32_t (sign-extend (app abstr-vals$1349 0) (bitvector 32)))
run-x86-synthesizer
halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-mul
    (vec-cast
     (load
      (buffer input1 'uint8)
      (ramp
       (sca-add
        (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
        (sca-sub
         (sca-sub (var-lookup 't75) (var-lookup 't81))
         (var-lookup 'input1.min.0)))
       1
       16)
      (aligned 1 0))
     'int16
     16)
    (sca-broadcast (int16_t (bv #x0040 16)) 16))
   (sca-broadcast (sca-mul (int16_t t148) (int16_t (bv #xffc0 16))) 16))
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
template:
  (vs-mpy-add
 ...
 (vs-mpy-add
  ...
  (combine
   #<load-data>
   (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))))
  (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
  #f
  #f
  #f
  'int16)
 (list (int16_t (ite x?$1134 (bv #x0040 16) input1_multiplier)))
 #f
 #f
 #f
 'int32)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-mul
 (vec-cast #<abstr-halide-expr> 'int32 16)
 (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
optimized-template:
  (vs-mpy-add
 ...
 #<abstr-expr>
 (list (int16_t (ite x?$1134 (bv #x0040 16) input1_multiplier)))
 #f
 #f
 #f
 'int32)
optimized Halide 0:
  (int32_t
 (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (app abstr-vals$1350 0) (bitvector 32))))
optimized x86 0:
  (int32_t
 (bvmul (sign-extend (app abstr-vals$1350 0) (bitvector 32)) (sign-extend (ite x?$1134 (bv #x0040 16) input1_multiplier) (bitvector 32))))
Ran synthesizer for 94 ms
(model
 [x?$1134 #f])
(vec-mul
 (vec-cast #<abstr-halide-expr> 'int32 16)
 (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
(vs-mpy-add
 ...
 (vs-mpy-add
  ...
  (combine
   #<load-data>
   (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))))
  (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
  #f
  #f
  #f
  'int16)
 (list (int16_t input1_multiplier))
 #f
 #f
 #f
 'int32)
Ran bounds analysis for 288 ms
Ran bounds analysis for 258 ms
"Success?"
#t
(vs-mpy-add ... (vs-mpy-add ... (combine #<load-data> (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16))))) (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16))) #f #f #f 'int16) (list (int16_t input1_multiplier)) #f #f #f 'int32)
"Building Expr:"
(sca-broadcast
 (sca-mul
  (sca-cast
   (sca-mul (sca-sub (int16_t t149) (int16_t t150)) (int16_t (bv #x0040 16)))
   'int32)
  (sca-cast (int16_t input2_multiplier) 'int32))
 16)
"Fold templates"
'()
here()

"Replace templates"
'()
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (sca-broadcast
 (sca-mul
  (sca-cast
   (sca-mul (sca-sub (int16_t t149) (int16_t t150)) (int16_t (bv #x0040 16)))
   'int32)
  (sca-cast (int16_t input2_multiplier) 'int32))
 16)
template:
  (broadcast
 ...
 (sca-mul
  (sca-cast
   (sca-mul (sca-sub (int16_t t149) (int16_t t150)) (int16_t (bv #x0040 16)))
   'int32)
  (sca-cast (int16_t input2_multiplier) 'int32)))
axioms:
  '()
optimized-halide-expr:
  (sca-broadcast
 (sca-mul
  (sca-cast
   (sca-mul (sca-sub (int16_t t149) (int16_t t150)) (int16_t (bv #x0040 16)))
   'int32)
  (sca-cast (int16_t input2_multiplier) 'int32))
 16)
optimized-template:
  (broadcast
 ...
 (sca-mul
  (sca-cast
   (sca-mul (sca-sub (int16_t t149) (int16_t t150)) (int16_t (bv #x0040 16)))
   'int32)
  (sca-cast (int16_t input2_multiplier) 'int32)))
optimized Halide 0:
  (int32_t
 (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32))))
optimized x86 0:
  (int32_t
 (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32))))
Ran synthesizer for 22 ms
(model)
(sca-broadcast
 (sca-mul
  (sca-cast
   (sca-mul (sca-sub (int16_t t149) (int16_t t150)) (int16_t (bv #x0040 16)))
   'int32)
  (sca-cast (int16_t input2_multiplier) 'int32))
 16)
(broadcast
 ...
 (sca-mul
  (sca-cast
   (sca-mul (sca-sub (int16_t t149) (int16_t t150)) (int16_t (bv #x0040 16)))
   'int32)
  (sca-cast (int16_t input2_multiplier) 'int32)))
Ran bounds analysis for 147 ms
Ran bounds analysis for 136 ms
"Extended success?"
#t
(broadcast
 ...
 (sca-mul
  (sca-cast
   (sca-mul (sca-sub (int16_t t149) (int16_t t150)) (int16_t (bv #x0040 16)))
   'int32)
  (sca-cast (int16_t input2_multiplier) 'int32)))
"Building Expr:"
(vec-add
 (vec-mul
  (vec-cast
   (vec-add
    (vec-mul
     (vec-cast
      (load
       (buffer input1 'uint8)
       (ramp
        (sca-add
         (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
         (sca-sub
          (sca-sub (var-lookup 't75) (var-lookup 't81))
          (var-lookup 'input1.min.0)))
        1
        16)
       (aligned 1 0))
      'int16
      16)
     (sca-broadcast (int16_t (bv #x0040 16)) 16))
    (sca-broadcast (sca-mul (int16_t t148) (int16_t (bv #xffc0 16))) 16))
   'int32
   16)
  (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
 (sca-broadcast
  (sca-mul
   (sca-cast
    (sca-mul (sca-sub (int16_t t149) (int16_t t150)) (int16_t (bv #x0040 16)))
    'int32)
   (sca-cast (int16_t input2_multiplier) 'int32))
  16))
"Fold templates"
(list
 (vs-mpy-add
  ...
  (combine
   #<load-data>
   (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))))
  (list
   (int8_t (bv #x01 8))
   (int16_t (bv #x0040 16))
   (union [(&& (! xi?$1489) (! xi?$1490)) #(struct:int8_t (bv #x01 8))] [(|| xi?$1489 (&& xi?$1490 (! xi?$1489))) #(struct:int16_t
                                                                                                                    (ite* (⊢ xi?$1489 (bv #x0040 16)) (⊢ (&& xi?$1490 (! xi?$1489)) input1_multiplier)))]))
  #f
  #f
  #f
  'int32)
 (vs-mpy-add
  ...
  (combine
   #<load-data>
   (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))))
  (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
  #f
  x?$1487
  #f
  'int32)
 (vs-mpy-add
  ...
  (combine
   (vs-mpy-add
    ...
    (combine
     #<load-data>
     (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))))
    (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
    #f
    #f
    #f
    'int16)
   (union [x?$1491 #(struct:vs-mpy-add
                     ...
                     #(struct:vs-mpy-add
                       ...
                       #<combine:
                        #<load-data>
                        #(struct:broadcast
                          ...
                          #(struct:sca-mul
                            #(struct:int16_t t148)
                            #(struct:int16_t (bv #xffc0 16))))>
                       (#(struct:int8_t (bv #x01 8))
                        #(struct:int16_t (bv #x0040 16)))
                       #f
                       #f
                       #f
                       int16)
                     (#(struct:int16_t input1_multiplier))
                     #f
                     #f
                     #f
                     int32)] [(! x?$1491) #(struct:broadcast
                                            ...
                                            #(struct:sca-mul
                                              #(struct:sca-cast
                                                #(struct:sca-mul
                                                  #(struct:sca-sub
                                                    #(struct:int16_t t149)
                                                    #(struct:int16_t t150))
                                                  #(struct:int16_t
                                                    (bv #x0040 16)))
                                                int32)
                                              #(struct:sca-cast
                                                #(struct:int16_t
                                                  input2_multiplier)
                                                int32)))]))
  (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)) (int8_t (bv #x01 8)))
  #f
  #f
  #f
  'int32)
 (vs-mpy-add
  ...
  (vs-mpy-add
   ...
   (combine
    #<load-data>
    (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))))
   (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
   #f
   #f
   #f
   'int16)
  '(#(struct:int16_t input1_multiplier)
    (union [(&& (! xi?$1355) (! xi?$1356)) #(struct:int8_t (bv #x01 8))] [(|| xi?$1355 (&& xi?$1356 (! xi?$1355))) #(struct:int16_t
                                                                                                                     (ite* (⊢ xi?$1355 (bv #x0040 16)) (⊢ (&& xi?$1356 (! xi?$1355)) input1_multiplier)))]))
  #f
  #f
  #f
  'int32)
 (vs-mpy-add
  ...
  (vs-mpy-add
   ...
   (combine
    #<load-data>
    (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))))
   (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
   #f
   #f
   #f
   'int16)
  '(#(struct:int16_t input1_multiplier))
  #f
  x?$1353
  #f
  'int32)
 (vs-mpy-add
  ...
  (combine
   (vs-mpy-add
    ...
    (vs-mpy-add
     ...
     (combine
      #<load-data>
      (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))))
     (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
     #f
     #f
     #f
     'int16)
    '(#(struct:int16_t input1_multiplier))
    #f
    #f
    #f
    'int32)
   (union [x?$1357 #(struct:vs-mpy-add
                     ...
                     #(struct:vs-mpy-add
                       ...
                       #<combine:
                        #<load-data>
                        #(struct:broadcast
                          ...
                          #(struct:sca-mul
                            #(struct:int16_t t148)
                            #(struct:int16_t (bv #xffc0 16))))>
                       (#(struct:int8_t (bv #x01 8))
                        #(struct:int16_t (bv #x0040 16)))
                       #f
                       #f
                       #f
                       int16)
                     (#(struct:int16_t input1_multiplier))
                     #f
                     #f
                     #f
                     int32)] [(! x?$1357) #(struct:broadcast
                                            ...
                                            #(struct:sca-mul
                                              #(struct:sca-cast
                                                #(struct:sca-mul
                                                  #(struct:sca-sub
                                                    #(struct:int16_t t149)
                                                    #(struct:int16_t t150))
                                                  #(struct:int16_t
                                                    (bv #x0040 16)))
                                                int32)
                                              #(struct:sca-cast
                                                #(struct:int16_t
                                                  input2_multiplier)
                                                int32)))]))
  (list (int16_t input1_multiplier) (int8_t (bv #x01 8)))
  #f
  #f
  #f
  'int32))
here(#(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t148) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16)) (union #:size 2 #:hash 1420338347263)) #f #f #f int32) #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t148) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f x?$1487 #f int32) #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t148) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f #f #f int16) (union #:size 2 #:hash 410325681636)> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16)) #(struct:int8_t (bv #x01 8))) #f #f #f int32) #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t148) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f #f #f int16) (#(struct:int16_t input1_multiplier) (union #:size 2 #:hash 1420352481616)) #f #f #f int32) #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t148) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f #f #f int16) (#(struct:int16_t input1_multiplier)) #f x?$1353 #f int32) #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t148) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f #f #f int16) (#(struct:int16_t input1_multiplier)) #f #f #f int32) (union #:size 2 #:hash 410413053340)> (#(struct:int16_t input1_multiplier) #(struct:int8_t (bv #x01 8))) #f #f #f int32))

"Replace templates"
'()
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-mul
  (vec-cast
   (vec-add
    (vec-mul
     (vec-cast
      (load
       (buffer input1 'uint8)
       (ramp
        (sca-add
         (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
         (sca-sub
          (sca-sub (var-lookup 't75) (var-lookup 't81))
          (var-lookup 'input1.min.0)))
        1
        16)
       (aligned 1 0))
      'int16
      16)
     (sca-broadcast (int16_t (bv #x0040 16)) 16))
    (sca-broadcast (sca-mul (int16_t t148) (int16_t (bv #xffc0 16))) 16))
   'int32
   16)
  (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
 (sca-broadcast
  (sca-mul
   (sca-cast
    (sca-mul (sca-sub (int16_t t149) (int16_t t150)) (int16_t (bv #x0040 16)))
    'int32)
   (sca-cast (int16_t input2_multiplier) 'int32))
  16))
template:
  (vs-mpy-add
 ...
 (combine
  #<load-data>
  (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))))
 (list
  (int8_t (bv #x01 8))
  (int16_t (bv #x0040 16))
  (union [(&& (! xi?$1489) (! xi?$1490)) #(struct:int8_t (bv #x01 8))] [(|| xi?$1489 (&& xi?$1490 (! xi?$1489))) #(struct:int16_t
                                                                                                                   (ite* (⊢ xi?$1489 (bv #x0040 16)) (⊢ (&& xi?$1490 (! xi?$1489)) input1_multiplier)))]))
 #f
 #f
 #f
 'int32)
axioms:
  (list #t (forall (idx) (bvsle (app abstr-vals$1621 idx) (bv #x7fc0 16))))
optimized-halide-expr:
  (vec-add
 (vec-mul
  (vec-cast
   (vec-add
    (vec-mul
     (vec-cast #<abstr-halide-expr> 'int16 16)
     (sca-broadcast (int16_t (bv #x0040 16)) 16))
    #<abstr-halide-expr>)
   'int32
   16)
  (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
 (sca-broadcast
  (sca-mul
   (sca-cast
    (sca-mul (sca-sub (int16_t t149) (int16_t t150)) (int16_t (bv #x0040 16)))
    'int32)
   (sca-cast (int16_t input2_multiplier) 'int32))
  16))
optimized-template:
  (vs-mpy-add
 ...
 (combine #<abstr-expr> #<abstr-expr>)
 (list
  (int8_t (bv #x01 8))
  (int16_t (bv #x0040 16))
  (union [(&& (! xi?$1489) (! xi?$1490)) #(struct:int8_t (bv #x01 8))] [(|| xi?$1489 (&& xi?$1490 (! xi?$1489))) #(struct:int16_t
                                                                                                                   (ite* (⊢ xi?$1489 (bv #x0040 16)) (⊢ (&& xi?$1490 (! xi?$1489)) input1_multiplier)))]))
 #f
 #f
 #f
 'int32)
optimized Halide 0:
  (int32_t
 (bvadd (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32))) (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (bvadd (app abstr-vals$1621 0) (bvmul (bv #x0040 16) (zero-extend (app abstr-vals$1620 0) (bitvector 16)))) (bitvector 32)))))
optimized x86 0:
  (int32_t
 (bvadd (bvmul (ite c$602 (zero-extend (app abstr-vals$1620 idx$601) (bitvector 32)) (sign-extend (app abstr-vals$1621 idx$601) (bitvector 32))) (ite* (⊢ (&& (! xi?$1489) (! xi?$1490)) (bv #x00000001 32)) (⊢ (|| xi?$1489 (&& xi?$1490 (! xi?$1489))) (sign-extend (ite* (⊢ xi?$1489 (bv #x0040 16)) (⊢ (&& xi?$1490 (! xi?$1489)) input1_multiplier)) (bitvector 32))))) (bvadd (sign-extend (app abstr-vals$1621 0) (bitvector 32)) (bvmul (bv #x00000040 32) (zero-extend (app abstr-vals$1620 0) (bitvector 32))))))
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-mul
  (vec-cast
   (vec-add
    (vec-mul
     (vec-cast
      (load
       (buffer input1 'uint8)
       (ramp
        (sca-add
         (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
         (sca-sub
          (sca-sub (var-lookup 't75) (var-lookup 't81))
          (var-lookup 'input1.min.0)))
        1
        16)
       (aligned 1 0))
      'int16
      16)
     (sca-broadcast (int16_t (bv #x0040 16)) 16))
    (sca-broadcast (sca-mul (int16_t t148) (int16_t (bv #xffc0 16))) 16))
   'int32
   16)
  (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
 (sca-broadcast
  (sca-mul
   (sca-cast
    (sca-mul (sca-sub (int16_t t149) (int16_t t150)) (int16_t (bv #x0040 16)))
    'int32)
   (sca-cast (int16_t input2_multiplier) 'int32))
  16))
template:
  (vs-mpy-add
 ...
 (combine
  #<load-data>
  (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))))
 (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
 #f
 x?$1487
 #f
 'int32)
axioms:
  (list #t (forall (idx) (bvsle (app abstr-vals$1623 idx) (bv #x7fc0 16))))
optimized-halide-expr:
  (vec-add
 (vec-mul
  (vec-cast
   (vec-add
    (vec-mul
     (vec-cast #<abstr-halide-expr> 'int16 16)
     (sca-broadcast (int16_t (bv #x0040 16)) 16))
    #<abstr-halide-expr>)
   'int32
   16)
  (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
 (sca-broadcast
  (sca-mul
   (sca-cast
    (sca-mul (sca-sub (int16_t t149) (int16_t t150)) (int16_t (bv #x0040 16)))
    'int32)
   (sca-cast (int16_t input2_multiplier) 'int32))
  16))
optimized-template:
  (vs-mpy-add
 ...
 (combine #<abstr-expr> #<abstr-expr>)
 (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
 #f
 x?$1487
 #f
 'int32)
optimized Halide 0:
  (int32_t
 (bvadd (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32))) (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (bvadd (app abstr-vals$1623 0) (bvmul (bv #x0040 16) (zero-extend (app abstr-vals$1622 0) (bitvector 16)))) (bitvector 32)))))
optimized x86 0:
  (int32_t
 (bvadd (bvmul (bv #x00000040 32) (zero-extend (app abstr-vals$1622 0) (bitvector 32))) (bvadd (sign-extend (app abstr-vals$1623 0) (bitvector 32)) (ite x?$1487 (bv #x00000001 32) (bv #x00000000 32)))))
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-mul
  (vec-cast
   (vec-add
    (vec-mul
     (vec-cast
      (load
       (buffer input1 'uint8)
       (ramp
        (sca-add
         (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
         (sca-sub
          (sca-sub (var-lookup 't75) (var-lookup 't81))
          (var-lookup 'input1.min.0)))
        1
        16)
       (aligned 1 0))
      'int16
      16)
     (sca-broadcast (int16_t (bv #x0040 16)) 16))
    (sca-broadcast (sca-mul (int16_t t148) (int16_t (bv #xffc0 16))) 16))
   'int32
   16)
  (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
 (sca-broadcast
  (sca-mul
   (sca-cast
    (sca-mul (sca-sub (int16_t t149) (int16_t t150)) (int16_t (bv #x0040 16)))
    'int32)
   (sca-cast (int16_t input2_multiplier) 'int32))
  16))
template:
  (vs-mpy-add
 ...
 (vs-mpy-add
  ...
  (combine
   #<load-data>
   (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))))
  (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
  #f
  #f
  #f
  'int16)
 (list
  (int16_t input1_multiplier)
  (union [(&& (! xi?$1355) (! xi?$1356)) #(struct:int8_t (bv #x01 8))] [(|| xi?$1355 (&& xi?$1356 (! xi?$1355))) #(struct:int16_t
                                                                                                                   (ite* (⊢ xi?$1355 (bv #x0040 16)) (⊢ (&& xi?$1356 (! xi?$1355)) input1_multiplier)))]))
 #f
 #f
 #f
 'int32)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-add
 (vec-mul
  (vec-cast #<abstr-halide-expr> 'int32 16)
  (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
 (sca-broadcast
  (sca-mul
   (sca-cast
    (sca-mul (sca-sub (int16_t t149) (int16_t t150)) (int16_t (bv #x0040 16)))
    'int32)
   (sca-cast (int16_t input2_multiplier) 'int32))
  16))
optimized-template:
  (vs-mpy-add
 ...
 #<abstr-expr>
 (list
  (int16_t input1_multiplier)
  (union [(&& (! xi?$1355) (! xi?$1356)) #(struct:int8_t (bv #x01 8))] [(|| xi?$1355 (&& xi?$1356 (! xi?$1355))) #(struct:int16_t
                                                                                                                   (ite* (⊢ xi?$1355 (bv #x0040 16)) (⊢ (&& xi?$1356 (! xi?$1355)) input1_multiplier)))]))
 #f
 #f
 #f
 'int32)
optimized Halide 0:
  (int32_t
 (bvadd (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32))) (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (app abstr-vals$1624 0) (bitvector 32)))))
optimized x86 0:
  (int32_t
 (bvadd (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (app abstr-vals$1624 0) (bitvector 32))) (bvmul (sign-extend (app abstr-vals$1624 1) (bitvector 32)) (ite* (⊢ (&& (! xi?$1355) (! xi?$1356)) (bv #x00000001 32)) (⊢ (|| xi?$1355 (&& xi?$1356 (! xi?$1355))) (sign-extend (ite* (⊢ xi?$1355 (bv #x0040 16)) (⊢ (&& xi?$1356 (! xi?$1355)) input1_multiplier)) (bitvector 32)))))))
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-mul
  (vec-cast
   (vec-add
    (vec-mul
     (vec-cast
      (load
       (buffer input1 'uint8)
       (ramp
        (sca-add
         (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
         (sca-sub
          (sca-sub (var-lookup 't75) (var-lookup 't81))
          (var-lookup 'input1.min.0)))
        1
        16)
       (aligned 1 0))
      'int16
      16)
     (sca-broadcast (int16_t (bv #x0040 16)) 16))
    (sca-broadcast (sca-mul (int16_t t148) (int16_t (bv #xffc0 16))) 16))
   'int32
   16)
  (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
 (sca-broadcast
  (sca-mul
   (sca-cast
    (sca-mul (sca-sub (int16_t t149) (int16_t t150)) (int16_t (bv #x0040 16)))
    'int32)
   (sca-cast (int16_t input2_multiplier) 'int32))
  16))
template:
  (vs-mpy-add
 ...
 (vs-mpy-add
  ...
  (combine
   #<load-data>
   (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))))
  (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
  #f
  #f
  #f
  'int16)
 (list (int16_t input1_multiplier))
 #f
 x?$1353
 #f
 'int32)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-add
 (vec-mul
  (vec-cast #<abstr-halide-expr> 'int32 16)
  (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
 (sca-broadcast
  (sca-mul
   (sca-cast
    (sca-mul (sca-sub (int16_t t149) (int16_t t150)) (int16_t (bv #x0040 16)))
    'int32)
   (sca-cast (int16_t input2_multiplier) 'int32))
  16))
optimized-template:
  (vs-mpy-add
 ...
 #<abstr-expr>
 (list (int16_t input1_multiplier))
 #f
 x?$1353
 #f
 'int32)
optimized Halide 0:
  (int32_t
 (bvadd (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32))) (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (app abstr-vals$1625 0) (bitvector 32)))))
optimized x86 0:
  (int32_t
 (bvadd (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (app abstr-vals$1625 0) (bitvector 32))) (ite x?$1353 (bv #x00000001 32) (bv #x00000000 32))))
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-mul
  (vec-cast
   (vec-add
    (vec-mul
     (vec-cast
      (load
       (buffer input1 'uint8)
       (ramp
        (sca-add
         (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
         (sca-sub
          (sca-sub (var-lookup 't75) (var-lookup 't81))
          (var-lookup 'input1.min.0)))
        1
        16)
       (aligned 1 0))
      'int16
      16)
     (sca-broadcast (int16_t (bv #x0040 16)) 16))
    (sca-broadcast (sca-mul (int16_t t148) (int16_t (bv #xffc0 16))) 16))
   'int32
   16)
  (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
 (sca-broadcast
  (sca-mul
   (sca-cast
    (sca-mul (sca-sub (int16_t t149) (int16_t t150)) (int16_t (bv #x0040 16)))
    'int32)
   (sca-cast (int16_t input2_multiplier) 'int32))
  16))
template:
  (vs-mpy-add
 ...
 (combine
  (vs-mpy-add
   ...
   (vs-mpy-add
    ...
    (combine
     #<load-data>
     (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))))
    (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
    #f
    #f
    #f
    'int16)
   (list (int16_t input1_multiplier))
   #f
   #f
   #f
   'int32)
  (union [x?$1357 #(struct:vs-mpy-add
                    ...
                    #(struct:vs-mpy-add
                      ...
                      #<combine:
                       #<load-data>
                       #(struct:broadcast
                         ...
                         #(struct:sca-mul
                           #(struct:int16_t t148)
                           #(struct:int16_t (bv #xffc0 16))))>
                      (#(struct:int8_t (bv #x01 8))
                       #(struct:int16_t (bv #x0040 16)))
                      #f
                      #f
                      #f
                      int16)
                    (#(struct:int16_t input1_multiplier))
                    #f
                    #f
                    #f
                    int32)] [(! x?$1357) #(struct:broadcast
                                           ...
                                           #(struct:sca-mul
                                             #(struct:sca-cast
                                               #(struct:sca-mul
                                                 #(struct:sca-sub
                                                   #(struct:int16_t t149)
                                                   #(struct:int16_t t150))
                                                 #(struct:int16_t
                                                   (bv #x0040 16)))
                                               int32)
                                             #(struct:sca-cast
                                               #(struct:int16_t
                                                 input2_multiplier)
                                               int32)))]))
 (list (int16_t input1_multiplier) (int8_t (bv #x01 8)))
 #f
 #f
 #f
 'int32)
axioms:
  (union [x?$1357 ((forall (idx) (&& (bvsle (app abstr-vals$1626 idx) (bv #x40000000 32)) (bvsle (bv #xc0008000 32) (app abstr-vals$1626 idx))))
                 (forall (idx) (&& (bvsle (app abstr-vals$1626 idx) (bv #x40000000 32)) (bvsle (bv #xc0008000 32) (app abstr-vals$1626 idx)))))] [(! x?$1357) ((forall (idx) (&& (bvsle (app abstr-vals$1626 idx) (bv #x40000000 32)) (bvsle (bv #xc0008000 32) (app abstr-vals$1626 idx)))))])
optimized-halide-expr:
  (vec-add
 #<abstr-halide-expr>
 (sca-broadcast
  (sca-mul
   (sca-cast
    (sca-mul (sca-sub (int16_t t149) (int16_t t150)) (int16_t (bv #x0040 16)))
    'int32)
   (sca-cast (int16_t input2_multiplier) 'int32))
  16))
optimized-template:
  (vs-mpy-add
 ...
 (combine
  #<abstr-expr>
  (union [x?$1357 #<abstr-expr>] [(! x?$1357) #(struct:broadcast
                                                ...
                                                #(struct:sca-mul
                                                  #(struct:sca-cast
                                                    #(struct:sca-mul
                                                      #(struct:sca-sub
                                                        #(struct:int16_t t149)
                                                        #(struct:int16_t t150))
                                                      #(struct:int16_t
                                                        (bv #x0040 16)))
                                                    int32)
                                                  #(struct:sca-cast
                                                    #(struct:int16_t
                                                      input2_multiplier)
                                                    int32)))]))
 (list (int16_t input1_multiplier) (int8_t (bv #x01 8)))
 #f
 #f
 #f
 'int32)
optimized Halide 0:
  (int32_t
 (bvadd (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32))) (app abstr-vals$1626 0)))
optimized x86 0:
  (int32_t
 (bvadd (bvmul (sign-extend input1_multiplier (bitvector 32)) (ite c$1359 (app abstr-vals$1626 idx$1358) (ite x?$1357 (app abstr-vals$1626 idx$1358) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))))) (ite c$1361 (app abstr-vals$1626 idx$1360) (ite x?$1357 (app abstr-vals$1626 idx$1360) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))))))
Ran synthesizer for 455 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-mul
  (vec-cast
   (vec-add
    (vec-mul
     (vec-cast
      (load
       (buffer input1 'uint8)
       (ramp
        (sca-add
         (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
         (sca-sub
          (sca-sub (var-lookup 't75) (var-lookup 't81))
          (var-lookup 'input1.min.0)))
        1
        16)
       (aligned 1 0))
      'int16
      16)
     (sca-broadcast (int16_t (bv #x0040 16)) 16))
    (sca-broadcast (sca-mul (int16_t t148) (int16_t (bv #xffc0 16))) 16))
   'int32
   16)
  (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
 (sca-broadcast
  (sca-mul
   (sca-cast
    (sca-mul (sca-sub (int16_t t149) (int16_t t150)) (int16_t (bv #x0040 16)))
    'int32)
   (sca-cast (int16_t input2_multiplier) 'int32))
  16))
template:
  (vs-mpy-add
 ...
 (combine
  (vs-mpy-add
   ...
   (combine
    #<load-data>
    (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))))
   (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
   #f
   #f
   #f
   'int16)
  (union [x?$1491 #(struct:vs-mpy-add
                    ...
                    #(struct:vs-mpy-add
                      ...
                      #<combine:
                       #<load-data>
                       #(struct:broadcast
                         ...
                         #(struct:sca-mul
                           #(struct:int16_t t148)
                           #(struct:int16_t (bv #xffc0 16))))>
                      (#(struct:int8_t (bv #x01 8))
                       #(struct:int16_t (bv #x0040 16)))
                      #f
                      #f
                      #f
                      int16)
                    (#(struct:int16_t input1_multiplier))
                    #f
                    #f
                    #f
                    int32)] [(! x?$1491) #(struct:broadcast
                                           ...
                                           #(struct:sca-mul
                                             #(struct:sca-cast
                                               #(struct:sca-mul
                                                 #(struct:sca-sub
                                                   #(struct:int16_t t149)
                                                   #(struct:int16_t t150))
                                                 #(struct:int16_t
                                                   (bv #x0040 16)))
                                               int32)
                                             #(struct:sca-cast
                                               #(struct:int16_t
                                                 input2_multiplier)
                                               int32)))]))
 (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)) (int8_t (bv #x01 8)))
 #f
 #f
 #f
 'int32)
axioms:
  (union [x?$1491 (#t #t)] [(! x?$1491) (#t)])
optimized-halide-expr:
  (vec-add
 (vec-mul
  (vec-cast #<abstr-halide-expr> 'int32 16)
  (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
 (sca-broadcast
  (sca-mul
   (sca-cast
    (sca-mul (sca-sub (int16_t t149) (int16_t t150)) (int16_t (bv #x0040 16)))
    'int32)
   (sca-cast (int16_t input2_multiplier) 'int32))
  16))
optimized-template:
  (vs-mpy-add
 ...
 (combine
  #<abstr-expr>
  (union [x?$1491 #(struct:vs-mpy-add
                    ...
                    #<abstr-expr>
                    (#(struct:int16_t input1_multiplier))
                    #f
                    #f
                    #f
                    int32)] [(! x?$1491) #(struct:broadcast
                                           ...
                                           #(struct:sca-mul
                                             #(struct:sca-cast
                                               #(struct:sca-mul
                                                 #(struct:sca-sub
                                                   #(struct:int16_t t149)
                                                   #(struct:int16_t t150))
                                                 #(struct:int16_t
                                                   (bv #x0040 16)))
                                               int32)
                                             #(struct:sca-cast
                                               #(struct:int16_t
                                                 input2_multiplier)
                                               int32)))]))
 (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)) (int8_t (bv #x01 8)))
 #f
 #f
 #f
 'int32)
optimized Halide 0:
  (int32_t
 (bvadd (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32))) (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (app abstr-vals$1627 0) (bitvector 32)))))
optimized x86 0:
  (int32_t
 (bvadd (ite c$1497 (sign-extend (app abstr-vals$1627 idx$1496) (bitvector 32)) (ite x?$1491 (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (app abstr-vals$1627 idx$1496) (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32))))) (bvadd (ite c$1493 (sign-extend (app abstr-vals$1627 idx$1492) (bitvector 32)) (ite x?$1491 (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (app abstr-vals$1627 idx$1492) (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32))))) (bvmul (bv #x00000040 32) (ite c$1495 (sign-extend (app abstr-vals$1627 idx$1494) (bitvector 32)) (ite x?$1491 (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (app abstr-vals$1627 idx$1494) (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))))))))
Ran synthesizer for 468 ms
(unsat)
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-mul
  (vec-cast
   (vec-add
    (vec-mul
     (vec-cast
      (load
       (buffer input1 'uint8)
       (ramp
        (sca-add
         (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
         (sca-sub
          (sca-sub (var-lookup 't75) (var-lookup 't81))
          (var-lookup 'input1.min.0)))
        1
        16)
       (aligned 1 0))
      'int16
      16)
     (sca-broadcast (int16_t (bv #x0040 16)) 16))
    (sca-broadcast (sca-mul (int16_t t148) (int16_t (bv #xffc0 16))) 16))
   'int32
   16)
  (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
 (sca-broadcast
  (sca-mul
   (sca-cast
    (sca-mul (sca-sub (int16_t t149) (int16_t t150)) (int16_t (bv #x0040 16)))
    'int32)
   (sca-cast (int16_t input2_multiplier) 'int32))
  16))
template:
  (vs-mpy-add
 ...
 (combine
  (vs-mpy-add
   ...
   (combine
    #<load-data>
    (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))))
   (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
   #f
   #f
   #f
   'int16)
  (broadcast
   ...
   (sca-mul
    (sca-cast
     (sca-mul (sca-sub (int16_t t149) (int16_t t150)) (int16_t (bv #x0040 16)))
     'int32)
    (sca-cast (int16_t input2_multiplier) 'int32))))
 (list (int8_t (bv #x01 8)) (int16_t input1_multiplier))
 #f
 #f
 #f
 'int32)
axioms:
  (list
 #t
 (forall (idx) (&& (bvsle (app abstr-vals$1891 idx) (bv #x40000000 32)) (bvsle (bv #xc0008000 32) (app abstr-vals$1891 idx)))))
optimized-halide-expr:
  (vec-add
 (vec-mul
  (vec-cast #<abstr-halide-expr> 'int32 16)
  (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
 #<abstr-halide-expr>)
optimized-template:
  (vs-mpy-add
 ...
 (combine #<abstr-expr> #<abstr-expr>)
 (list (int8_t (bv #x01 8)) (int16_t input1_multiplier))
 #f
 #f
 #f
 'int32)
optimized Halide 0:
  (int32_t
 (bvadd (app abstr-vals$1891 0) (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (app abstr-vals$1890 0) (bitvector 32)))))
optimized x86 0:
  (int32_t
 (bvadd (ite c$1631 (sign-extend (app abstr-vals$1890 idx$1630) (bitvector 32)) (app abstr-vals$1891 idx$1630)) (bvmul (sign-extend input1_multiplier (bitvector 32)) (ite c$1633 (sign-extend (app abstr-vals$1890 idx$1632) (bitvector 32)) (app abstr-vals$1891 idx$1632)))))
Ran synthesizer for 549 ms
(model
 [idx$1630 0]
 [c$1631 #f]
 [idx$1632 0]
 [c$1633 #t])
(vec-add
 (vec-mul
  (vec-cast #<abstr-halide-expr> 'int32 16)
  (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
 #<abstr-halide-expr>)
(vs-mpy-add
 ...
 (combine
  (vs-mpy-add
   ...
   (combine
    #<load-data>
    (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))))
   (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
   #f
   #f
   #f
   'int16)
  (broadcast
   ...
   (sca-mul
    (sca-cast
     (sca-mul (sca-sub (int16_t t149) (int16_t t150)) (int16_t (bv #x0040 16)))
     'int32)
    (sca-cast (int16_t input2_multiplier) 'int32))))
 (list (int8_t (bv #x01 8)) (int16_t input1_multiplier))
 #f
 #f
 #f
 'int32)
Ran bounds analysis for 251 ms
Ran bounds analysis for 329 ms
"Extended success?"
#t
(vs-mpy-add
 ...
 (combine
  (vs-mpy-add
   ...
   (combine
    #<load-data>
    (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))))
   (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
   #f
   #f
   #f
   'int16)
  (broadcast
   ...
   (sca-mul
    (sca-cast
     (sca-mul (sca-sub (int16_t t149) (int16_t t150)) (int16_t (bv #x0040 16)))
     'int32)
    (sca-cast (int16_t input2_multiplier) 'int32))))
 (list (int8_t (bv #x01 8)) (int16_t input1_multiplier))
 #f
 #f
 #f
 'int32)
"Building Expr:"
(sca-broadcast (int32_t (bv #x00008000 32)) 16)
"Fold templates"
'()
here()

"Replace templates"
'()
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (sca-broadcast (int32_t (bv #x00008000 32)) 16)
template:
  (broadcast ... (int32_t (bv #x00008000 32)))
axioms:
  '()
optimized-halide-expr:
  (sca-broadcast (int32_t (bv #x00008000 32)) 16)
optimized-template:
  (broadcast ... (int32_t (bv #x00008000 32)))
optimized Halide 0:
  (int32_t (bv #x00008000 32))
optimized x86 0:
  (int32_t (bv #x00008000 32))
Ran synthesizer for 19 ms
(model)
(sca-broadcast (int32_t (bv #x00008000 32)) 16)
(broadcast ... (int32_t (bv #x00008000 32)))
Ran bounds analysis for 26 ms
Ran bounds analysis for 17 ms
"Extended success?"
#t
(broadcast ... (int32_t (bv #x00008000 32)))
"Building Expr:"
(vec-div
 (vec-add
  (vec-mul
   (vec-cast
    (vec-add
     (vec-mul
      (vec-cast
       (load
        (buffer input1 'uint8)
        (ramp
         (sca-add
          (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
          (sca-sub
           (sca-sub (var-lookup 't75) (var-lookup 't81))
           (var-lookup 'input1.min.0)))
         1
         16)
        (aligned 1 0))
       'int16
       16)
      (sca-broadcast (int16_t (bv #x0040 16)) 16))
     (sca-broadcast (sca-mul (int16_t t148) (int16_t (bv #xffc0 16))) 16))
    'int32
    16)
   (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
  (sca-broadcast
   (sca-mul
    (sca-cast
     (sca-mul (sca-sub (int16_t t149) (int16_t t150)) (int16_t (bv #x0040 16)))
     'int32)
    (sca-cast (int16_t input2_multiplier) 'int32))
   16))
 (sca-broadcast (int32_t (bv #x00008000 32)) 16))
"Fold templates"
'()
here()

"Replace templates"
'()
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (vec-div
 (vec-add
  (vec-mul
   (vec-cast
    (vec-add
     (vec-mul
      (vec-cast
       (load
        (buffer input1 'uint8)
        (ramp
         (sca-add
          (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
          (sca-sub
           (sca-sub (var-lookup 't75) (var-lookup 't81))
           (var-lookup 'input1.min.0)))
         1
         16)
        (aligned 1 0))
       'int16
       16)
      (sca-broadcast (int16_t (bv #x0040 16)) 16))
     (sca-broadcast (sca-mul (int16_t t148) (int16_t (bv #xffc0 16))) 16))
    'int32
    16)
   (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
  (sca-broadcast
   (sca-mul
    (sca-cast
     (sca-mul (sca-sub (int16_t t149) (int16_t t150)) (int16_t (bv #x0040 16)))
     'int32)
    (sca-cast (int16_t input2_multiplier) 'int32))
   16))
 (sca-broadcast (int32_t (bv #x00008000 32)) 16))
template:
  (vs-shift-right
 ...
 (vs-mpy-add
  ...
  (combine
   (vs-mpy-add
    ...
    (combine
     #<load-data>
     (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))))
    (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
    #f
    #f
    #f
    'int16)
   (broadcast
    ...
    (sca-mul
     (sca-cast
      (sca-mul
       (sca-sub (int16_t t149) (int16_t t150))
       (int16_t (bv #x0040 16)))
      'int32)
     (sca-cast (int16_t input2_multiplier) 'int32))))
  (list (int8_t (bv #x01 8)) (int16_t input1_multiplier))
  #f
  #f
  #f
  'int32)
 (int32_t (bv #x0000000f 32))
 #f
 #f
 #t)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-div #<abstr-halide-expr> (sca-broadcast (int32_t (bv #x00008000 32)) 16))
optimized-template:
  (vs-shift-right ... #<abstr-expr> (int32_t (bv #x0000000f 32)) #f #f #t)
optimized Halide 0:
  (int32_t
 (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$1904 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$1904 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$1904 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64)))))
optimized x86 0:
  (int32_t (bvashr (app abstr-vals$1904 0) (bv #x0000000f 32)))
Ran synthesizer for 501 ms
(model)
(vec-div #<abstr-halide-expr> (sca-broadcast (int32_t (bv #x00008000 32)) 16))
(vs-shift-right
 ...
 (vs-mpy-add
  ...
  (combine
   (vs-mpy-add
    ...
    (combine
     #<load-data>
     (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))))
    (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
    #f
    #f
    #f
    'int16)
   (broadcast
    ...
    (sca-mul
     (sca-cast
      (sca-mul
       (sca-sub (int16_t t149) (int16_t t150))
       (int16_t (bv #x0040 16)))
      'int32)
     (sca-cast (int16_t input2_multiplier) 'int32))))
  (list (int8_t (bv #x01 8)) (int16_t input1_multiplier))
  #f
  #f
  #f
  'int32)
 (int32_t (bv #x0000000f 32))
 #f
 #f
 #t)
Ran bounds analysis for 41 ms
Ran bounds analysis for 33 ms
"Extended success?"
#t
(vs-shift-right
 ...
 (vs-mpy-add
  ...
  (combine
   (vs-mpy-add
    ...
    (combine
     #<load-data>
     (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))))
    (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
    #f
    #f
    #f
    'int16)
   (broadcast
    ...
    (sca-mul
     (sca-cast
      (sca-mul
       (sca-sub (int16_t t149) (int16_t t150))
       (int16_t (bv #x0040 16)))
      'int32)
     (sca-cast (int16_t input2_multiplier) 'int32))))
  (list (int8_t (bv #x01 8)) (int16_t input1_multiplier))
  #f
  #f
  #f
  'int32)
 (int32_t (bv #x0000000f 32))
 #f
 #f
 #t)
"Building Expr:"
(vec-bwand
 (sca-broadcast (int32_t (bv #x00000001 32)) 16)
 (vec-div
  (vec-add
   (vec-mul
    (vec-cast
     (vec-add
      (vec-mul
       (vec-cast
        (load
         (buffer input1 'uint8)
         (ramp
          (sca-add
           (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
           (sca-sub
            (sca-sub (var-lookup 't75) (var-lookup 't81))
            (var-lookup 'input1.min.0)))
          1
          16)
         (aligned 1 0))
        'int16
        16)
       (sca-broadcast (int16_t (bv #x0040 16)) 16))
      (sca-broadcast (sca-mul (int16_t t148) (int16_t (bv #xffc0 16))) 16))
     'int32
     16)
    (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
   (sca-broadcast
    (sca-mul
     (sca-cast
      (sca-mul
       (sca-sub (int16_t t149) (int16_t t150))
       (int16_t (bv #x0040 16)))
      'int32)
     (sca-cast (int16_t input2_multiplier) 'int32))
    16))
  (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
"Fold templates"
(list
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (combine
    (vs-mpy-add
     ...
     (combine
      #<load-data>
      (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))))
     (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
     #f
     #f
     #f
     'int16)
    (broadcast
     ...
     (sca-mul
      (sca-cast
       (sca-mul
        (sca-sub (int16_t t149) (int16_t t150))
        (int16_t (bv #x0040 16)))
       'int32)
      (sca-cast (int16_t input2_multiplier) 'int32))))
   (list (int8_t (bv #x01 8)) (int16_t input1_multiplier))
   #f
   #f
   #f
   'int32)
  (int32_t (bv #x0000000f 32))
  #f
  #f
  #t)
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (combine
    (vs-mpy-add
     ...
     (combine
      #<load-data>
      (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))))
     (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
     #f
     #f
     #f
     'int16)
    (broadcast
     ...
     (sca-mul
      (sca-cast
       (sca-mul
        (sca-sub (int16_t t149) (int16_t t150))
        (int16_t (bv #x0040 16)))
       'int32)
      (sca-cast (int16_t input2_multiplier) 'int32))))
   (list (int8_t (bv #x01 8)) (int16_t input1_multiplier))
   #f
   #f
   #f
   'int32)
  (int32_t (bv #x0000000f 32))
  x?$1906
  x?$1907
  x?$1908))
here(#(struct:vs-shift-right ... #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t148) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f #f #f int16) #(struct:broadcast ... #(struct:sca-mul #(struct:sca-cast #(struct:sca-mul #(struct:sca-sub #(struct:int16_t t149) #(struct:int16_t t150)) #(struct:int16_t (bv #x0040 16))) int32) #(struct:sca-cast #(struct:int16_t input2_multiplier) int32)))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t input1_multiplier)) #f #f #f int32) #(struct:int32_t (bv #x0000000f 32)) #f #f #t) #(struct:vs-shift-right ... #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t148) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f #f #f int16) #(struct:broadcast ... #(struct:sca-mul #(struct:sca-cast #(struct:sca-mul #(struct:sca-sub #(struct:int16_t t149) #(struct:int16_t t150)) #(struct:int16_t (bv #x0040 16))) int32) #(struct:sca-cast #(struct:int16_t input2_multiplier) int32)))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t input1_multiplier)) #f #f #f int32) #(struct:int32_t (bv #x0000000f 32)) x?$1906 x?$1907 x?$1908))

"Replace templates"
'()
run-x86-synthesizer
halide-expr:
  (vec-bwand
 (sca-broadcast (int32_t (bv #x00000001 32)) 16)
 (vec-div
  (vec-add
   (vec-mul
    (vec-cast
     (vec-add
      (vec-mul
       (vec-cast
        (load
         (buffer input1 'uint8)
         (ramp
          (sca-add
           (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
           (sca-sub
            (sca-sub (var-lookup 't75) (var-lookup 't81))
            (var-lookup 'input1.min.0)))
          1
          16)
         (aligned 1 0))
        'int16
        16)
       (sca-broadcast (int16_t (bv #x0040 16)) 16))
      (sca-broadcast (sca-mul (int16_t t148) (int16_t (bv #xffc0 16))) 16))
     'int32
     16)
    (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
   (sca-broadcast
    (sca-mul
     (sca-cast
      (sca-mul
       (sca-sub (int16_t t149) (int16_t t150))
       (int16_t (bv #x0040 16)))
      'int32)
     (sca-cast (int16_t input2_multiplier) 'int32))
    16))
  (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
template:
  (vs-shift-right
 ...
 (vs-mpy-add
  ...
  (combine
   (vs-mpy-add
    ...
    (combine
     #<load-data>
     (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))))
    (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
    #f
    #f
    #f
    'int16)
   (broadcast
    ...
    (sca-mul
     (sca-cast
      (sca-mul
       (sca-sub (int16_t t149) (int16_t t150))
       (int16_t (bv #x0040 16)))
      'int32)
     (sca-cast (int16_t input2_multiplier) 'int32))))
  (list (int8_t (bv #x01 8)) (int16_t input1_multiplier))
  #f
  #f
  #f
  'int32)
 (int32_t (bv #x0000000f 32))
 #f
 #f
 #t)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-bwand
 (sca-broadcast (int32_t (bv #x00000001 32)) 16)
 (vec-div
  #<abstr-halide-expr>
  (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
optimized-template:
  (vs-shift-right ... #<abstr-expr> (int32_t (bv #x0000000f 32)) #f #f #t)
optimized Halide 0:
  (int32_t
 (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$1914 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$1914 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$1914 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))))
optimized x86 0:
  (int32_t (bvashr (app abstr-vals$1914 0) (bv #x0000000f 32)))
Ran synthesizer for 454 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-bwand
 (sca-broadcast (int32_t (bv #x00000001 32)) 16)
 (vec-div
  (vec-add
   (vec-mul
    (vec-cast
     (vec-add
      (vec-mul
       (vec-cast
        (load
         (buffer input1 'uint8)
         (ramp
          (sca-add
           (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
           (sca-sub
            (sca-sub (var-lookup 't75) (var-lookup 't81))
            (var-lookup 'input1.min.0)))
          1
          16)
         (aligned 1 0))
        'int16
        16)
       (sca-broadcast (int16_t (bv #x0040 16)) 16))
      (sca-broadcast (sca-mul (int16_t t148) (int16_t (bv #xffc0 16))) 16))
     'int32
     16)
    (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
   (sca-broadcast
    (sca-mul
     (sca-cast
      (sca-mul
       (sca-sub (int16_t t149) (int16_t t150))
       (int16_t (bv #x0040 16)))
      'int32)
     (sca-cast (int16_t input2_multiplier) 'int32))
    16))
  (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
template:
  (vs-shift-right
 ...
 (vs-mpy-add
  ...
  (combine
   (vs-mpy-add
    ...
    (combine
     #<load-data>
     (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))))
    (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
    #f
    #f
    #f
    'int16)
   (broadcast
    ...
    (sca-mul
     (sca-cast
      (sca-mul
       (sca-sub (int16_t t149) (int16_t t150))
       (int16_t (bv #x0040 16)))
      'int32)
     (sca-cast (int16_t input2_multiplier) 'int32))))
  (list (int8_t (bv #x01 8)) (int16_t input1_multiplier))
  #f
  #f
  #f
  'int32)
 (int32_t (bv #x0000000f 32))
 x?$1906
 x?$1907
 x?$1908)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-bwand
 (sca-broadcast (int32_t (bv #x00000001 32)) 16)
 (vec-div
  #<abstr-halide-expr>
  (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
optimized-template:
  (vs-shift-right
 ...
 #<abstr-expr>
 (int32_t (bv #x0000000f 32))
 x?$1906
 x?$1907
 x?$1908)
optimized Halide 0:
  (int32_t
 (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$1915 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$1915 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$1915 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))))
optimized x86 0:
  (int32_t
 (ite x?$1906 (bvadd (ite x?$1908 (bvashr (app abstr-vals$1915 0) (bv #x0000000f 32)) (bvlshr (app abstr-vals$1915 0) (bv #x0000000f 32))) (bvand (bv #x00000001 32) (ite x?$1908 (bvashr (app abstr-vals$1915 0) (bv #x0000000e 32)) (bvlshr (app abstr-vals$1915 0) (bv #x0000000e 32))))) (ite x?$1908 (bvashr (app abstr-vals$1915 0) (bv #x0000000f 32)) (bvlshr (app abstr-vals$1915 0) (bv #x0000000f 32)))))
Ran synthesizer for 463 ms
(unsat)
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (vec-bwand
 (sca-broadcast (int32_t (bv #x00000001 32)) 16)
 (vec-div
  (vec-add
   (vec-mul
    (vec-cast
     (vec-add
      (vec-mul
       (vec-cast
        (load
         (buffer input1 'uint8)
         (ramp
          (sca-add
           (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
           (sca-sub
            (sca-sub (var-lookup 't75) (var-lookup 't81))
            (var-lookup 'input1.min.0)))
          1
          16)
         (aligned 1 0))
        'int16
        16)
       (sca-broadcast (int16_t (bv #x0040 16)) 16))
      (sca-broadcast (sca-mul (int16_t t148) (int16_t (bv #xffc0 16))) 16))
     'int32
     16)
    (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
   (sca-broadcast
    (sca-mul
     (sca-cast
      (sca-mul
       (sca-sub (int16_t t149) (int16_t t150))
       (int16_t (bv #x0040 16)))
      'int32)
     (sca-cast (int16_t input2_multiplier) 'int32))
    16))
  (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
template:
  (bitwise-op
 ...
 'and
 (broadcast ... (int32_t (bv #x00000001 32)))
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (combine
    (vs-mpy-add
     ...
     (combine
      #<load-data>
      (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))))
     (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
     #f
     #f
     #f
     'int16)
    (broadcast
     ...
     (sca-mul
      (sca-cast
       (sca-mul
        (sca-sub (int16_t t149) (int16_t t150))
        (int16_t (bv #x0040 16)))
       'int32)
      (sca-cast (int16_t input2_multiplier) 'int32))))
   (list (int8_t (bv #x01 8)) (int16_t input1_multiplier))
   #f
   #f
   #f
   'int32)
  (int32_t (bv #x0000000f 32))
  #f
  #f
  #t))
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$1916 idx) (bv #x00000001 32)) (bvsle (bv #x00000001 32) (app abstr-vals$1916 idx))))
 (forall (idx) (&& (bvsle (app abstr-vals$1917 idx) (bv #x0000ffff 32)) (bvsle (bv #xffff0000 32) (app abstr-vals$1917 idx)))))
optimized-halide-expr:
  (vec-bwand #<abstr-halide-expr> #<abstr-halide-expr>)
optimized-template:
  (bitwise-op ... 'and #<abstr-expr> #<abstr-expr>)
optimized Halide 0:
  (int32_t (bvand (app abstr-vals$1916 0) (app abstr-vals$1917 0)))
optimized x86 0:
  (int32_t (bvand (app abstr-vals$1916 0) (app abstr-vals$1917 0)))
Ran synthesizer for 41 ms
(model)
(vec-bwand #<abstr-halide-expr> #<abstr-halide-expr>)
(bitwise-op
 ...
 'and
 (broadcast ... (int32_t (bv #x00000001 32)))
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (combine
    (vs-mpy-add
     ...
     (combine
      #<load-data>
      (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))))
     (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
     #f
     #f
     #f
     'int16)
    (broadcast
     ...
     (sca-mul
      (sca-cast
       (sca-mul
        (sca-sub (int16_t t149) (int16_t t150))
        (int16_t (bv #x0040 16)))
       'int32)
      (sca-cast (int16_t input2_multiplier) 'int32))))
   (list (int8_t (bv #x01 8)) (int16_t input1_multiplier))
   #f
   #f
   #f
   'int32)
  (int32_t (bv #x0000000f 32))
  #f
  #f
  #t))
Ran bounds analysis for 26 ms
Ran bounds analysis for 31 ms
"Extended success?"
#t
(bitwise-op
 ...
 'and
 (broadcast ... (int32_t (bv #x00000001 32)))
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (combine
    (vs-mpy-add
     ...
     (combine
      #<load-data>
      (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))))
     (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
     #f
     #f
     #f
     'int16)
    (broadcast
     ...
     (sca-mul
      (sca-cast
       (sca-mul
        (sca-sub (int16_t t149) (int16_t t150))
        (int16_t (bv #x0040 16)))
       'int32)
      (sca-cast (int16_t input2_multiplier) 'int32))))
   (list (int8_t (bv #x01 8)) (int16_t input1_multiplier))
   #f
   #f
   #f
   'int32)
  (int32_t (bv #x0000000f 32))
  #f
  #f
  #t))
"Building Expr:"
(sca-broadcast (int32_t (bv #x00010000 32)) 16)
"Fold templates"
'()
here()

"Replace templates"
'()
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (sca-broadcast (int32_t (bv #x00010000 32)) 16)
template:
  (broadcast ... (int32_t (bv #x00010000 32)))
axioms:
  '()
optimized-halide-expr:
  (sca-broadcast (int32_t (bv #x00010000 32)) 16)
optimized-template:
  (broadcast ... (int32_t (bv #x00010000 32)))
optimized Halide 0:
  (int32_t (bv #x00010000 32))
optimized x86 0:
  (int32_t (bv #x00010000 32))
Ran synthesizer for 19 ms
(model)
(sca-broadcast (int32_t (bv #x00010000 32)) 16)
(broadcast ... (int32_t (bv #x00010000 32)))
Ran bounds analysis for 24 ms
Ran bounds analysis for 16 ms
"Extended success?"
#t
(broadcast ... (int32_t (bv #x00010000 32)))
"Building Expr:"
(vec-div
 (vec-add
  (vec-mul
   (vec-cast
    (vec-add
     (vec-mul
      (vec-cast
       (load
        (buffer input1 'uint8)
        (ramp
         (sca-add
          (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
          (sca-sub
           (sca-sub (var-lookup 't75) (var-lookup 't81))
           (var-lookup 'input1.min.0)))
         1
         16)
        (aligned 1 0))
       'int16
       16)
      (sca-broadcast (int16_t (bv #x0040 16)) 16))
     (sca-broadcast (sca-mul (int16_t t148) (int16_t (bv #xffc0 16))) 16))
    'int32
    16)
   (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
  (sca-broadcast
   (sca-mul
    (sca-cast
     (sca-mul (sca-sub (int16_t t149) (int16_t t150)) (int16_t (bv #x0040 16)))
     'int32)
    (sca-cast (int16_t input2_multiplier) 'int32))
   16))
 (sca-broadcast (int32_t (bv #x00010000 32)) 16))
"Fold templates"
'()
here()

"Replace templates"
'()
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (vec-div
 (vec-add
  (vec-mul
   (vec-cast
    (vec-add
     (vec-mul
      (vec-cast
       (load
        (buffer input1 'uint8)
        (ramp
         (sca-add
          (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
          (sca-sub
           (sca-sub (var-lookup 't75) (var-lookup 't81))
           (var-lookup 'input1.min.0)))
         1
         16)
        (aligned 1 0))
       'int16
       16)
      (sca-broadcast (int16_t (bv #x0040 16)) 16))
     (sca-broadcast (sca-mul (int16_t t148) (int16_t (bv #xffc0 16))) 16))
    'int32
    16)
   (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
  (sca-broadcast
   (sca-mul
    (sca-cast
     (sca-mul (sca-sub (int16_t t149) (int16_t t150)) (int16_t (bv #x0040 16)))
     'int32)
    (sca-cast (int16_t input2_multiplier) 'int32))
   16))
 (sca-broadcast (int32_t (bv #x00010000 32)) 16))
template:
  (vs-shift-right
 ...
 (vs-mpy-add
  ...
  (combine
   (vs-mpy-add
    ...
    (combine
     #<load-data>
     (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))))
    (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
    #f
    #f
    #f
    'int16)
   (broadcast
    ...
    (sca-mul
     (sca-cast
      (sca-mul
       (sca-sub (int16_t t149) (int16_t t150))
       (int16_t (bv #x0040 16)))
      'int32)
     (sca-cast (int16_t input2_multiplier) 'int32))))
  (list (int8_t (bv #x01 8)) (int16_t input1_multiplier))
  #f
  #f
  #f
  'int32)
 (int32_t (bv #x00000010 32))
 #f
 #f
 #t)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-div #<abstr-halide-expr> (sca-broadcast (int32_t (bv #x00010000 32)) 16))
optimized-template:
  (vs-shift-right ... #<abstr-expr> (int32_t (bv #x00000010 32)) #f #f #t)
optimized Halide 0:
  (int32_t
 (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$1930 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$1930 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$1930 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64)))))
optimized x86 0:
  (int32_t (bvashr (app abstr-vals$1930 0) (bv #x00000010 32)))
Ran synthesizer for 459 ms
(model)
(vec-div #<abstr-halide-expr> (sca-broadcast (int32_t (bv #x00010000 32)) 16))
(vs-shift-right
 ...
 (vs-mpy-add
  ...
  (combine
   (vs-mpy-add
    ...
    (combine
     #<load-data>
     (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))))
    (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
    #f
    #f
    #f
    'int16)
   (broadcast
    ...
    (sca-mul
     (sca-cast
      (sca-mul
       (sca-sub (int16_t t149) (int16_t t150))
       (int16_t (bv #x0040 16)))
      'int32)
     (sca-cast (int16_t input2_multiplier) 'int32))))
  (list (int8_t (bv #x01 8)) (int16_t input1_multiplier))
  #f
  #f
  #f
  'int32)
 (int32_t (bv #x00000010 32))
 #f
 #f
 #t)
Ran bounds analysis for 41 ms
Ran bounds analysis for 32 ms
"Extended success?"
#t
(vs-shift-right
 ...
 (vs-mpy-add
  ...
  (combine
   (vs-mpy-add
    ...
    (combine
     #<load-data>
     (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))))
    (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
    #f
    #f
    #f
    'int16)
   (broadcast
    ...
    (sca-mul
     (sca-cast
      (sca-mul
       (sca-sub (int16_t t149) (int16_t t150))
       (int16_t (bv #x0040 16)))
      'int32)
     (sca-cast (int16_t input2_multiplier) 'int32))))
  (list (int8_t (bv #x01 8)) (int16_t input1_multiplier))
  #f
  #f
  #f
  'int32)
 (int32_t (bv #x00000010 32))
 #f
 #f
 #t)
"Building Expr:"
(vec-add
 (vec-bwand
  (sca-broadcast (int32_t (bv #x00000001 32)) 16)
  (vec-div
   (vec-add
    (vec-mul
     (vec-cast
      (vec-add
       (vec-mul
        (vec-cast
         (load
          (buffer input1 'uint8)
          (ramp
           (sca-add
            (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
            (sca-sub
             (sca-sub (var-lookup 't75) (var-lookup 't81))
             (var-lookup 'input1.min.0)))
           1
           16)
          (aligned 1 0))
         'int16
         16)
        (sca-broadcast (int16_t (bv #x0040 16)) 16))
       (sca-broadcast (sca-mul (int16_t t148) (int16_t (bv #xffc0 16))) 16))
      'int32
      16)
     (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
    (sca-broadcast
     (sca-mul
      (sca-cast
       (sca-mul
        (sca-sub (int16_t t149) (int16_t t150))
        (int16_t (bv #x0040 16)))
       'int32)
      (sca-cast (int16_t input2_multiplier) 'int32))
     16))
   (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
 (vec-div
  (vec-add
   (vec-mul
    (vec-cast
     (vec-add
      (vec-mul
       (vec-cast
        (load
         (buffer input1 'uint8)
         (ramp
          (sca-add
           (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
           (sca-sub
            (sca-sub (var-lookup 't75) (var-lookup 't81))
            (var-lookup 'input1.min.0)))
          1
          16)
         (aligned 1 0))
        'int16
        16)
       (sca-broadcast (int16_t (bv #x0040 16)) 16))
      (sca-broadcast (sca-mul (int16_t t148) (int16_t (bv #xffc0 16))) 16))
     'int32
     16)
    (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
   (sca-broadcast
    (sca-mul
     (sca-cast
      (sca-mul
       (sca-sub (int16_t t149) (int16_t t150))
       (int16_t (bv #x0040 16)))
      'int32)
     (sca-cast (int16_t input2_multiplier) 'int32))
    16))
  (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
"Fold templates"
(list
 (vs-mpy-add
  ...
  (combine
   (vs-mpy-add
    ...
    (combine
     #<load-data>
     (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))))
    (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
    #f
    #f
    #f
    'int16)
   (broadcast
    ...
    (sca-mul
     (sca-cast
      (sca-mul
       (sca-sub (int16_t t149) (int16_t t150))
       (int16_t (bv #x0040 16)))
      'int32)
     (sca-cast (int16_t input2_multiplier) 'int32))))
  (list
   (int8_t (bv #x01 8))
   (int16_t input1_multiplier)
   (union [(&& (! xi?$1939) (! xi?$1940)) #(struct:int8_t (bv #x01 8))] [(|| xi?$1939 (&& xi?$1940 (! xi?$1939))) #(struct:int16_t
                                                                                                                    (ite* (⊢ xi?$1939 (bv #x0040 16)) (⊢ (&& xi?$1940 (! xi?$1939)) input1_multiplier)))]))
  #f
  #f
  #f
  'int32)
 (vs-mpy-add
  ...
  (combine
   (vs-mpy-add
    ...
    (combine
     #<load-data>
     (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))))
    (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
    #f
    #f
    #f
    'int16)
   (broadcast
    ...
    (sca-mul
     (sca-cast
      (sca-mul
       (sca-sub (int16_t t149) (int16_t t150))
       (int16_t (bv #x0040 16)))
      'int32)
     (sca-cast (int16_t input2_multiplier) 'int32))))
  (list (int8_t (bv #x01 8)) (int16_t input1_multiplier))
  #f
  x?$1937
  #f
  'int32)
 (vs-mpy-add
  ...
  (combine
   (vs-mpy-add
    ...
    (combine
     (vs-mpy-add
      ...
      (combine
       #<load-data>
       (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))))
      (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
      #f
      #f
      #f
      'int16)
     (broadcast
      ...
      (sca-mul
       (sca-cast
        (sca-mul
         (sca-sub (int16_t t149) (int16_t t150))
         (int16_t (bv #x0040 16)))
        'int32)
       (sca-cast (int16_t input2_multiplier) 'int32))))
    (list (int8_t (bv #x01 8)) (int16_t input1_multiplier))
    #f
    #f
    #f
    'int32)
   (union [x?$1941 #(struct:bitwise-op
                     ...
                     and
                     #(struct:broadcast
                       ...
                       #(struct:int32_t (bv #x00000001 32)))
                     #(struct:vs-shift-right
                       ...
                       #(struct:vs-mpy-add
                         ...
                         #<combine:
                          #(struct:vs-mpy-add
                            ...
                            #<combine:
                             #<load-data>
                             #(struct:broadcast
                               ...
                               #(struct:sca-mul
                                 #(struct:int16_t t148)
                                 #(struct:int16_t (bv #xffc0 16))))>
                            (#(struct:int8_t (bv #x01 8))
                             #(struct:int16_t (bv #x0040 16)))
                            #f
                            #f
                            #f
                            int16)
                          #(struct:broadcast
                            ...
                            #(struct:sca-mul
                              #(struct:sca-cast
                                #(struct:sca-mul
                                  #(struct:sca-sub
                                    #(struct:int16_t t149)
                                    #(struct:int16_t t150))
                                  #(struct:int16_t (bv #x0040 16)))
                                int32)
                              #(struct:sca-cast
                                #(struct:int16_t input2_multiplier)
                                int32)))>
                         (#(struct:int8_t (bv #x01 8))
                          #(struct:int16_t input1_multiplier))
                         #f
                         #f
                         #f
                         int32)
                       #(struct:int32_t (bv #x0000000f 32))
                       #f
                       #f
                       #t))] [(! x?$1941) #(struct:vs-shift-right
                                            ...
                                            #(struct:vs-mpy-add
                                              ...
                                              #<combine:
                                               #(struct:vs-mpy-add
                                                 ...
                                                 #<combine:
                                                  #<load-data>
                                                  #(struct:broadcast
                                                    ...
                                                    #(struct:sca-mul
                                                      #(struct:int16_t t148)
                                                      #(struct:int16_t
                                                        (bv #xffc0 16))))>
                                                 (#(struct:int8_t (bv #x01 8))
                                                  #(struct:int16_t
                                                    (bv #x0040 16)))
                                                 #f
                                                 #f
                                                 #f
                                                 int16)
                                               #(struct:broadcast
                                                 ...
                                                 #(struct:sca-mul
                                                   #(struct:sca-cast
                                                     #(struct:sca-mul
                                                       #(struct:sca-sub
                                                         #(struct:int16_t t149)
                                                         #(struct:int16_t
                                                           t150))
                                                       #(struct:int16_t
                                                         (bv #x0040 16)))
                                                     int32)
                                                   #(struct:sca-cast
                                                     #(struct:int16_t
                                                       input2_multiplier)
                                                     int32)))>
                                              (#(struct:int8_t (bv #x01 8))
                                               #(struct:int16_t
                                                 input1_multiplier))
                                              #f
                                              #f
                                              #f
                                              int32)
                                            #(struct:int32_t
                                              (bv #x00000010 32))
                                            #f
                                            #f
                                            #t)]))
  (list (int8_t (bv #x01 8)) (int16_t input1_multiplier) (int8_t (bv #x01 8)))
  #f
  #f
  #f
  'int32)
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (combine
    (vs-mpy-add
     ...
     (combine
      #<load-data>
      (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))))
     (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
     #f
     #f
     #f
     'int16)
    (broadcast
     ...
     (sca-mul
      (sca-cast
       (sca-mul
        (sca-sub (int16_t t149) (int16_t t150))
        (int16_t (bv #x0040 16)))
       'int32)
      (sca-cast (int16_t input2_multiplier) 'int32))))
   (list (int8_t (bv #x01 8)) (int16_t input1_multiplier))
   #f
   #f
   #f
   'int32)
  (int32_t (ite x?$1932 (bv #x00000010 32) (bv #x0000000f 32)))
  #f
  #f
  #t)
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (combine
    (vs-mpy-add
     ...
     (combine
      #<load-data>
      (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))))
     (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
     #f
     #f
     #f
     'int16)
    (broadcast
     ...
     (sca-mul
      (sca-cast
       (sca-mul
        (sca-sub (int16_t t149) (int16_t t150))
        (int16_t (bv #x0040 16)))
       'int32)
      (sca-cast (int16_t input2_multiplier) 'int32))))
   (list (int8_t (bv #x01 8)) (int16_t input1_multiplier))
   #f
   #f
   #f
   'int32)
  (int32_t (bv #x0000000f 32))
  x?$1933
  x?$1934
  x?$1935)
 (vs-mpy-add
  ...
  (combine
   (vs-mpy-add
    ...
    (combine
     #<load-data>
     (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))))
    (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
    #f
    #f
    #f
    'int16)
   (broadcast
    ...
    (sca-mul
     (sca-cast
      (sca-mul
       (sca-sub (int16_t t149) (int16_t t150))
       (int16_t (bv #x0040 16)))
      'int32)
     (sca-cast (int16_t input2_multiplier) 'int32))))
  (list
   (int8_t (bv #x01 8))
   (int16_t input1_multiplier)
   (union [(&& (! xi?$2077) (! xi?$2078)) #(struct:int8_t (bv #x01 8))] [(|| xi?$2077 (&& xi?$2078 (! xi?$2077))) #(struct:int16_t
                                                                                                                    (ite* (⊢ xi?$2077 (bv #x0040 16)) (⊢ (&& xi?$2078 (! xi?$2077)) input1_multiplier)))]))
  #f
  #f
  #f
  'int32)
 (vs-mpy-add
  ...
  (combine
   (vs-mpy-add
    ...
    (combine
     #<load-data>
     (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))))
    (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
    #f
    #f
    #f
    'int16)
   (broadcast
    ...
    (sca-mul
     (sca-cast
      (sca-mul
       (sca-sub (int16_t t149) (int16_t t150))
       (int16_t (bv #x0040 16)))
      'int32)
     (sca-cast (int16_t input2_multiplier) 'int32))))
  (list (int8_t (bv #x01 8)) (int16_t input1_multiplier))
  #f
  x?$2075
  #f
  'int32)
 (vs-mpy-add
  ...
  (combine
   (vs-mpy-add
    ...
    (combine
     (vs-mpy-add
      ...
      (combine
       #<load-data>
       (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))))
      (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
      #f
      #f
      #f
      'int16)
     (broadcast
      ...
      (sca-mul
       (sca-cast
        (sca-mul
         (sca-sub (int16_t t149) (int16_t t150))
         (int16_t (bv #x0040 16)))
        'int32)
       (sca-cast (int16_t input2_multiplier) 'int32))))
    (list (int8_t (bv #x01 8)) (int16_t input1_multiplier))
    #f
    #f
    #f
    'int32)
   (union [x?$2079 #(struct:bitwise-op
                     ...
                     and
                     #(struct:broadcast
                       ...
                       #(struct:int32_t (bv #x00000001 32)))
                     #(struct:vs-shift-right
                       ...
                       #(struct:vs-mpy-add
                         ...
                         #<combine:
                          #(struct:vs-mpy-add
                            ...
                            #<combine:
                             #<load-data>
                             #(struct:broadcast
                               ...
                               #(struct:sca-mul
                                 #(struct:int16_t t148)
                                 #(struct:int16_t (bv #xffc0 16))))>
                            (#(struct:int8_t (bv #x01 8))
                             #(struct:int16_t (bv #x0040 16)))
                            #f
                            #f
                            #f
                            int16)
                          #(struct:broadcast
                            ...
                            #(struct:sca-mul
                              #(struct:sca-cast
                                #(struct:sca-mul
                                  #(struct:sca-sub
                                    #(struct:int16_t t149)
                                    #(struct:int16_t t150))
                                  #(struct:int16_t (bv #x0040 16)))
                                int32)
                              #(struct:sca-cast
                                #(struct:int16_t input2_multiplier)
                                int32)))>
                         (#(struct:int8_t (bv #x01 8))
                          #(struct:int16_t input1_multiplier))
                         #f
                         #f
                         #f
                         int32)
                       #(struct:int32_t (bv #x0000000f 32))
                       #f
                       #f
                       #t))] [(! x?$2079) #(struct:vs-shift-right
                                            ...
                                            #(struct:vs-mpy-add
                                              ...
                                              #<combine:
                                               #(struct:vs-mpy-add
                                                 ...
                                                 #<combine:
                                                  #<load-data>
                                                  #(struct:broadcast
                                                    ...
                                                    #(struct:sca-mul
                                                      #(struct:int16_t t148)
                                                      #(struct:int16_t
                                                        (bv #xffc0 16))))>
                                                 (#(struct:int8_t (bv #x01 8))
                                                  #(struct:int16_t
                                                    (bv #x0040 16)))
                                                 #f
                                                 #f
                                                 #f
                                                 int16)
                                               #(struct:broadcast
                                                 ...
                                                 #(struct:sca-mul
                                                   #(struct:sca-cast
                                                     #(struct:sca-mul
                                                       #(struct:sca-sub
                                                         #(struct:int16_t t149)
                                                         #(struct:int16_t
                                                           t150))
                                                       #(struct:int16_t
                                                         (bv #x0040 16)))
                                                     int32)
                                                   #(struct:sca-cast
                                                     #(struct:int16_t
                                                       input2_multiplier)
                                                     int32)))>
                                              (#(struct:int8_t (bv #x01 8))
                                               #(struct:int16_t
                                                 input1_multiplier))
                                              #f
                                              #f
                                              #f
                                              int32)
                                            #(struct:int32_t
                                              (bv #x00000010 32))
                                            #f
                                            #f
                                            #t)]))
  (list (int8_t (bv #x01 8)) (int16_t input1_multiplier) (int8_t (bv #x01 8)))
  #f
  #f
  #f
  'int32)
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (combine
    (vs-mpy-add
     ...
     (combine
      #<load-data>
      (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))))
     (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
     #f
     #f
     #f
     'int16)
    (broadcast
     ...
     (sca-mul
      (sca-cast
       (sca-mul
        (sca-sub (int16_t t149) (int16_t t150))
        (int16_t (bv #x0040 16)))
       'int32)
      (sca-cast (int16_t input2_multiplier) 'int32))))
   (list (int8_t (bv #x01 8)) (int16_t input1_multiplier))
   #f
   #f
   #f
   'int32)
  (int32_t (ite x?$2070 (bv #x00000010 32) (bv #x0000000f 32)))
  #f
  #f
  #t)
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (combine
    (vs-mpy-add
     ...
     (combine
      #<load-data>
      (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))))
     (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
     #f
     #f
     #f
     'int16)
    (broadcast
     ...
     (sca-mul
      (sca-cast
       (sca-mul
        (sca-sub (int16_t t149) (int16_t t150))
        (int16_t (bv #x0040 16)))
       'int32)
      (sca-cast (int16_t input2_multiplier) 'int32))))
   (list (int8_t (bv #x01 8)) (int16_t input1_multiplier))
   #f
   #f
   #f
   'int32)
  (int32_t (bv #x00000010 32))
  x?$2071
  x?$2072
  x?$2073))
here(#(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t148) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f #f #f int16) #(struct:broadcast ... #(struct:sca-mul #(struct:sca-cast #(struct:sca-mul #(struct:sca-sub #(struct:int16_t t149) #(struct:int16_t t150)) #(struct:int16_t (bv #x0040 16))) int32) #(struct:sca-cast #(struct:int16_t input2_multiplier) int32)))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t input1_multiplier) (union #:size 2 #:hash 1419321803187)) #f #f #f int32) #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t148) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f #f #f int16) #(struct:broadcast ... #(struct:sca-mul #(struct:sca-cast #(struct:sca-mul #(struct:sca-sub #(struct:int16_t t149) #(struct:int16_t t150)) #(struct:int16_t (bv #x0040 16))) int32) #(struct:sca-cast #(struct:int16_t input2_multiplier) int32)))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t input1_multiplier)) #f x?$1937 #f int32) #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t148) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f #f #f int16) #(struct:broadcast ... #(struct:sca-mul #(struct:sca-cast #(struct:sca-mul #(struct:sca-sub #(struct:int16_t t149) #(struct:int16_t t150)) #(struct:int16_t (bv #x0040 16))) int32) #(struct:sca-cast #(struct:int16_t input2_multiplier) int32)))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t input1_multiplier)) #f #f #f int32) (union #:size 2 #:hash 416873653750)> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t input1_multiplier) #(struct:int8_t (bv #x01 8))) #f #f #f int32) #(struct:vs-shift-right ... #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t148) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f #f #f int16) #(struct:broadcast ... #(struct:sca-mul #(struct:sca-cast #(struct:sca-mul #(struct:sca-sub #(struct:int16_t t149) #(struct:int16_t t150)) #(struct:int16_t (bv #x0040 16))) int32) #(struct:sca-cast #(struct:int16_t input2_multiplier) int32)))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t input1_multiplier)) #f #f #f int32) #(struct:int32_t (ite x?$1932 (bv #x00000010 32) (bv #x0000000f 32))) #f #f #t) #(struct:vs-shift-right ... #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t148) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f #f #f int16) #(struct:broadcast ... #(struct:sca-mul #(struct:sca-cast #(struct:sca-mul #(struct:sca-sub #(struct:int16_t t149) #(struct:int16_t t150)) #(struct:int16_t (bv #x0040 16))) int32) #(struct:sca-cast #(struct:int16_t input2_multiplier) int32)))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t input1_multiplier)) #f #f #f int32) #(struct:int32_t (bv #x0000000f 32)) x?$1933 x?$1934 x?$1935) #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t148) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f #f #f int16) #(struct:broadcast ... #(struct:sca-mul #(struct:sca-cast #(struct:sca-mul #(struct:sca-sub #(struct:int16_t t149) #(struct:int16_t t150)) #(struct:int16_t (bv #x0040 16))) int32) #(struct:sca-cast #(struct:int16_t input2_multiplier) int32)))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t input1_multiplier) (union #:size 2 #:hash 1419234458481)) #f #f #f int32) #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t148) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f #f #f int16) #(struct:broadcast ... #(struct:sca-mul #(struct:sca-cast #(struct:sca-mul #(struct:sca-sub #(struct:int16_t t149) #(struct:int16_t t150)) #(struct:int16_t (bv #x0040 16))) int32) #(struct:sca-cast #(struct:int16_t input2_multiplier) int32)))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t input1_multiplier)) #f x?$2075 #f int32) #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t148) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f #f #f int16) #(struct:broadcast ... #(struct:sca-mul #(struct:sca-cast #(struct:sca-mul #(struct:sca-sub #(struct:int16_t t149) #(struct:int16_t t150)) #(struct:int16_t (bv #x0040 16))) int32) #(struct:sca-cast #(struct:int16_t input2_multiplier) int32)))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t input1_multiplier)) #f #f #f int32) (union #:size 2 #:hash 420758291800)> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t input1_multiplier) #(struct:int8_t (bv #x01 8))) #f #f #f int32) #(struct:vs-shift-right ... #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t148) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f #f #f int16) #(struct:broadcast ... #(struct:sca-mul #(struct:sca-cast #(struct:sca-mul #(struct:sca-sub #(struct:int16_t t149) #(struct:int16_t t150)) #(struct:int16_t (bv #x0040 16))) int32) #(struct:sca-cast #(struct:int16_t input2_multiplier) int32)))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t input1_multiplier)) #f #f #f int32) #(struct:int32_t (ite x?$2070 (bv #x00000010 32) (bv #x0000000f 32))) #f #f #t) #(struct:vs-shift-right ... #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t148) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f #f #f int16) #(struct:broadcast ... #(struct:sca-mul #(struct:sca-cast #(struct:sca-mul #(struct:sca-sub #(struct:int16_t t149) #(struct:int16_t t150)) #(struct:int16_t (bv #x0040 16))) int32) #(struct:sca-cast #(struct:int16_t input2_multiplier) int32)))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t input1_multiplier)) #f #f #f int32) #(struct:int32_t (bv #x00000010 32)) x?$2071 x?$2072 x?$2073))

"Replace templates"
'()
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-bwand
  (sca-broadcast (int32_t (bv #x00000001 32)) 16)
  (vec-div
   (vec-add
    (vec-mul
     (vec-cast
      (vec-add
       (vec-mul
        (vec-cast
         (load
          (buffer input1 'uint8)
          (ramp
           (sca-add
            (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
            (sca-sub
             (sca-sub (var-lookup 't75) (var-lookup 't81))
             (var-lookup 'input1.min.0)))
           1
           16)
          (aligned 1 0))
         'int16
         16)
        (sca-broadcast (int16_t (bv #x0040 16)) 16))
       (sca-broadcast (sca-mul (int16_t t148) (int16_t (bv #xffc0 16))) 16))
      'int32
      16)
     (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
    (sca-broadcast
     (sca-mul
      (sca-cast
       (sca-mul
        (sca-sub (int16_t t149) (int16_t t150))
        (int16_t (bv #x0040 16)))
       'int32)
      (sca-cast (int16_t input2_multiplier) 'int32))
     16))
   (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
 (vec-div
  (vec-add
   (vec-mul
    (vec-cast
     (vec-add
      (vec-mul
       (vec-cast
        (load
         (buffer input1 'uint8)
         (ramp
          (sca-add
           (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
           (sca-sub
            (sca-sub (var-lookup 't75) (var-lookup 't81))
            (var-lookup 'input1.min.0)))
          1
          16)
         (aligned 1 0))
        'int16
        16)
       (sca-broadcast (int16_t (bv #x0040 16)) 16))
      (sca-broadcast (sca-mul (int16_t t148) (int16_t (bv #xffc0 16))) 16))
     'int32
     16)
    (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
   (sca-broadcast
    (sca-mul
     (sca-cast
      (sca-mul
       (sca-sub (int16_t t149) (int16_t t150))
       (int16_t (bv #x0040 16)))
      'int32)
     (sca-cast (int16_t input2_multiplier) 'int32))
    16))
  (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
template:
  (vs-mpy-add
 ...
 (combine
  (vs-mpy-add
   ...
   (combine
    #<load-data>
    (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))))
   (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
   #f
   #f
   #f
   'int16)
  (broadcast
   ...
   (sca-mul
    (sca-cast
     (sca-mul (sca-sub (int16_t t149) (int16_t t150)) (int16_t (bv #x0040 16)))
     'int32)
    (sca-cast (int16_t input2_multiplier) 'int32))))
 (list
  (int8_t (bv #x01 8))
  (int16_t input1_multiplier)
  (union [(&& (! xi?$1939) (! xi?$1940)) #(struct:int8_t (bv #x01 8))] [(|| xi?$1939 (&& xi?$1940 (! xi?$1939))) #(struct:int16_t
                                                                                                                   (ite* (⊢ xi?$1939 (bv #x0040 16)) (⊢ (&& xi?$1940 (! xi?$1939)) input1_multiplier)))]))
 #f
 #f
 #f
 'int32)
axioms:
  (list
 #t
 (forall (idx) (&& (bvsle (app abstr-vals$2209 idx) (bv #x40000000 32)) (bvsle (bv #xc0008000 32) (app abstr-vals$2209 idx)))))
optimized-halide-expr:
  (vec-add
 (vec-bwand
  (sca-broadcast (int32_t (bv #x00000001 32)) 16)
  (vec-div
   (vec-add
    (vec-mul
     (vec-cast #<abstr-halide-expr> 'int32 16)
     (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
    #<abstr-halide-expr>)
   (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
 (vec-div
  (vec-add
   (vec-mul
    (vec-cast #<abstr-halide-expr> 'int32 16)
    (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
   #<abstr-halide-expr>)
  (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
optimized-template:
  (vs-mpy-add
 ...
 (combine #<abstr-expr> #<abstr-expr>)
 (list
  (int8_t (bv #x01 8))
  (int16_t input1_multiplier)
  (union [(&& (! xi?$1939) (! xi?$1940)) #(struct:int8_t (bv #x01 8))] [(|| xi?$1939 (&& xi?$1940 (! xi?$1939))) #(struct:int16_t
                                                                                                                   (ite* (⊢ xi?$1939 (bv #x0040 16)) (⊢ (&& xi?$1940 (! xi?$1939)) input1_multiplier)))]))
 #f
 #f
 #f
 'int32)
optimized Halide 0:
  (int32_t
 (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (app abstr-vals$2209 0) (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (app abstr-vals$2208 0) (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (app abstr-vals$2209 0) (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (app abstr-vals$2208 0) (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (app abstr-vals$2209 0) (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (app abstr-vals$2208 0) (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (app abstr-vals$2209 0) (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (app abstr-vals$2208 0) (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (app abstr-vals$2209 0) (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (app abstr-vals$2208 0) (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (app abstr-vals$2209 0) (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (app abstr-vals$2208 0) (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))))
optimized x86 0:
  (int32_t
 (bvadd (bvadd (app abstr-vals$2209 0) (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (app abstr-vals$2208 0) (bitvector 32)))) (bvmul (ite c$1635 (sign-extend (app abstr-vals$2208 idx$1634) (bitvector 32)) (app abstr-vals$2209 idx$1634)) (ite* (⊢ (&& (! xi?$1939) (! xi?$1940)) (bv #x00000001 32)) (⊢ (|| xi?$1939 (&& xi?$1940 (! xi?$1939))) (sign-extend (ite* (⊢ xi?$1939 (bv #x0040 16)) (⊢ (&& xi?$1940 (! xi?$1939)) input1_multiplier)) (bitvector 32)))))))
Ran synthesizer for 1280 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-bwand
  (sca-broadcast (int32_t (bv #x00000001 32)) 16)
  (vec-div
   (vec-add
    (vec-mul
     (vec-cast
      (vec-add
       (vec-mul
        (vec-cast
         (load
          (buffer input1 'uint8)
          (ramp
           (sca-add
            (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
            (sca-sub
             (sca-sub (var-lookup 't75) (var-lookup 't81))
             (var-lookup 'input1.min.0)))
           1
           16)
          (aligned 1 0))
         'int16
         16)
        (sca-broadcast (int16_t (bv #x0040 16)) 16))
       (sca-broadcast (sca-mul (int16_t t148) (int16_t (bv #xffc0 16))) 16))
      'int32
      16)
     (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
    (sca-broadcast
     (sca-mul
      (sca-cast
       (sca-mul
        (sca-sub (int16_t t149) (int16_t t150))
        (int16_t (bv #x0040 16)))
       'int32)
      (sca-cast (int16_t input2_multiplier) 'int32))
     16))
   (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
 (vec-div
  (vec-add
   (vec-mul
    (vec-cast
     (vec-add
      (vec-mul
       (vec-cast
        (load
         (buffer input1 'uint8)
         (ramp
          (sca-add
           (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
           (sca-sub
            (sca-sub (var-lookup 't75) (var-lookup 't81))
            (var-lookup 'input1.min.0)))
          1
          16)
         (aligned 1 0))
        'int16
        16)
       (sca-broadcast (int16_t (bv #x0040 16)) 16))
      (sca-broadcast (sca-mul (int16_t t148) (int16_t (bv #xffc0 16))) 16))
     'int32
     16)
    (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
   (sca-broadcast
    (sca-mul
     (sca-cast
      (sca-mul
       (sca-sub (int16_t t149) (int16_t t150))
       (int16_t (bv #x0040 16)))
      'int32)
     (sca-cast (int16_t input2_multiplier) 'int32))
    16))
  (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
template:
  (vs-mpy-add
 ...
 (combine
  (vs-mpy-add
   ...
   (combine
    #<load-data>
    (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))))
   (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
   #f
   #f
   #f
   'int16)
  (broadcast
   ...
   (sca-mul
    (sca-cast
     (sca-mul (sca-sub (int16_t t149) (int16_t t150)) (int16_t (bv #x0040 16)))
     'int32)
    (sca-cast (int16_t input2_multiplier) 'int32))))
 (list (int8_t (bv #x01 8)) (int16_t input1_multiplier))
 #f
 x?$1937
 #f
 'int32)
axioms:
  (list
 #t
 (forall (idx) (&& (bvsle (app abstr-vals$2211 idx) (bv #x40000000 32)) (bvsle (bv #xc0008000 32) (app abstr-vals$2211 idx)))))
optimized-halide-expr:
  (vec-add
 (vec-bwand
  (sca-broadcast (int32_t (bv #x00000001 32)) 16)
  (vec-div
   (vec-add
    (vec-mul
     (vec-cast #<abstr-halide-expr> 'int32 16)
     (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
    #<abstr-halide-expr>)
   (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
 (vec-div
  (vec-add
   (vec-mul
    (vec-cast #<abstr-halide-expr> 'int32 16)
    (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
   #<abstr-halide-expr>)
  (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
optimized-template:
  (vs-mpy-add
 ...
 (combine #<abstr-expr> #<abstr-expr>)
 (list (int8_t (bv #x01 8)) (int16_t input1_multiplier))
 #f
 x?$1937
 #f
 'int32)
optimized Halide 0:
  (int32_t
 (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (app abstr-vals$2211 0) (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (app abstr-vals$2210 0) (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (app abstr-vals$2211 0) (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (app abstr-vals$2210 0) (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (app abstr-vals$2211 0) (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (app abstr-vals$2210 0) (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (app abstr-vals$2211 0) (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (app abstr-vals$2210 0) (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (app abstr-vals$2211 0) (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (app abstr-vals$2210 0) (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (app abstr-vals$2211 0) (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (app abstr-vals$2210 0) (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))))
optimized x86 0:
  (int32_t
 (bvadd (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (app abstr-vals$2210 0) (bitvector 32))) (bvadd (app abstr-vals$2211 0) (ite x?$1937 (bv #x00000001 32) (bv #x00000000 32)))))
Ran synthesizer for 1157 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-bwand
  (sca-broadcast (int32_t (bv #x00000001 32)) 16)
  (vec-div
   (vec-add
    (vec-mul
     (vec-cast
      (vec-add
       (vec-mul
        (vec-cast
         (load
          (buffer input1 'uint8)
          (ramp
           (sca-add
            (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
            (sca-sub
             (sca-sub (var-lookup 't75) (var-lookup 't81))
             (var-lookup 'input1.min.0)))
           1
           16)
          (aligned 1 0))
         'int16
         16)
        (sca-broadcast (int16_t (bv #x0040 16)) 16))
       (sca-broadcast (sca-mul (int16_t t148) (int16_t (bv #xffc0 16))) 16))
      'int32
      16)
     (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
    (sca-broadcast
     (sca-mul
      (sca-cast
       (sca-mul
        (sca-sub (int16_t t149) (int16_t t150))
        (int16_t (bv #x0040 16)))
       'int32)
      (sca-cast (int16_t input2_multiplier) 'int32))
     16))
   (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
 (vec-div
  (vec-add
   (vec-mul
    (vec-cast
     (vec-add
      (vec-mul
       (vec-cast
        (load
         (buffer input1 'uint8)
         (ramp
          (sca-add
           (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
           (sca-sub
            (sca-sub (var-lookup 't75) (var-lookup 't81))
            (var-lookup 'input1.min.0)))
          1
          16)
         (aligned 1 0))
        'int16
        16)
       (sca-broadcast (int16_t (bv #x0040 16)) 16))
      (sca-broadcast (sca-mul (int16_t t148) (int16_t (bv #xffc0 16))) 16))
     'int32
     16)
    (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
   (sca-broadcast
    (sca-mul
     (sca-cast
      (sca-mul
       (sca-sub (int16_t t149) (int16_t t150))
       (int16_t (bv #x0040 16)))
      'int32)
     (sca-cast (int16_t input2_multiplier) 'int32))
    16))
  (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
template:
  (vs-mpy-add
 ...
 (combine
  (vs-mpy-add
   ...
   (combine
    #<load-data>
    (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))))
   (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
   #f
   #f
   #f
   'int16)
  (broadcast
   ...
   (sca-mul
    (sca-cast
     (sca-mul (sca-sub (int16_t t149) (int16_t t150)) (int16_t (bv #x0040 16)))
     'int32)
    (sca-cast (int16_t input2_multiplier) 'int32))))
 (list
  (int8_t (bv #x01 8))
  (int16_t input1_multiplier)
  (union [(&& (! xi?$2077) (! xi?$2078)) #(struct:int8_t (bv #x01 8))] [(|| xi?$2077 (&& xi?$2078 (! xi?$2077))) #(struct:int16_t
                                                                                                                   (ite* (⊢ xi?$2077 (bv #x0040 16)) (⊢ (&& xi?$2078 (! xi?$2077)) input1_multiplier)))]))
 #f
 #f
 #f
 'int32)
axioms:
  (list
 #t
 (forall (idx) (&& (bvsle (app abstr-vals$2213 idx) (bv #x40000000 32)) (bvsle (bv #xc0008000 32) (app abstr-vals$2213 idx)))))
optimized-halide-expr:
  (vec-add
 (vec-bwand
  (sca-broadcast (int32_t (bv #x00000001 32)) 16)
  (vec-div
   (vec-add
    (vec-mul
     (vec-cast #<abstr-halide-expr> 'int32 16)
     (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
    #<abstr-halide-expr>)
   (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
 (vec-div
  (vec-add
   (vec-mul
    (vec-cast #<abstr-halide-expr> 'int32 16)
    (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
   #<abstr-halide-expr>)
  (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
optimized-template:
  (vs-mpy-add
 ...
 (combine #<abstr-expr> #<abstr-expr>)
 (list
  (int8_t (bv #x01 8))
  (int16_t input1_multiplier)
  (union [(&& (! xi?$2077) (! xi?$2078)) #(struct:int8_t (bv #x01 8))] [(|| xi?$2077 (&& xi?$2078 (! xi?$2077))) #(struct:int16_t
                                                                                                                   (ite* (⊢ xi?$2077 (bv #x0040 16)) (⊢ (&& xi?$2078 (! xi?$2077)) input1_multiplier)))]))
 #f
 #f
 #f
 'int32)
optimized Halide 0:
  (int32_t
 (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (app abstr-vals$2213 0) (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (app abstr-vals$2212 0) (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (app abstr-vals$2213 0) (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (app abstr-vals$2212 0) (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (app abstr-vals$2213 0) (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (app abstr-vals$2212 0) (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (app abstr-vals$2213 0) (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (app abstr-vals$2212 0) (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (app abstr-vals$2213 0) (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (app abstr-vals$2212 0) (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (app abstr-vals$2213 0) (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (app abstr-vals$2212 0) (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))))
optimized x86 0:
  (int32_t
 (bvadd (bvadd (app abstr-vals$2213 0) (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (app abstr-vals$2212 0) (bitvector 32)))) (bvmul (ite c$1635 (sign-extend (app abstr-vals$2212 idx$1634) (bitvector 32)) (app abstr-vals$2213 idx$1634)) (ite* (⊢ (&& (! xi?$2077) (! xi?$2078)) (bv #x00000001 32)) (⊢ (|| xi?$2077 (&& xi?$2078 (! xi?$2077))) (sign-extend (ite* (⊢ xi?$2077 (bv #x0040 16)) (⊢ (&& xi?$2078 (! xi?$2077)) input1_multiplier)) (bitvector 32)))))))
Ran synthesizer for 1282 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-bwand
  (sca-broadcast (int32_t (bv #x00000001 32)) 16)
  (vec-div
   (vec-add
    (vec-mul
     (vec-cast
      (vec-add
       (vec-mul
        (vec-cast
         (load
          (buffer input1 'uint8)
          (ramp
           (sca-add
            (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
            (sca-sub
             (sca-sub (var-lookup 't75) (var-lookup 't81))
             (var-lookup 'input1.min.0)))
           1
           16)
          (aligned 1 0))
         'int16
         16)
        (sca-broadcast (int16_t (bv #x0040 16)) 16))
       (sca-broadcast (sca-mul (int16_t t148) (int16_t (bv #xffc0 16))) 16))
      'int32
      16)
     (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
    (sca-broadcast
     (sca-mul
      (sca-cast
       (sca-mul
        (sca-sub (int16_t t149) (int16_t t150))
        (int16_t (bv #x0040 16)))
       'int32)
      (sca-cast (int16_t input2_multiplier) 'int32))
     16))
   (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
 (vec-div
  (vec-add
   (vec-mul
    (vec-cast
     (vec-add
      (vec-mul
       (vec-cast
        (load
         (buffer input1 'uint8)
         (ramp
          (sca-add
           (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
           (sca-sub
            (sca-sub (var-lookup 't75) (var-lookup 't81))
            (var-lookup 'input1.min.0)))
          1
          16)
         (aligned 1 0))
        'int16
        16)
       (sca-broadcast (int16_t (bv #x0040 16)) 16))
      (sca-broadcast (sca-mul (int16_t t148) (int16_t (bv #xffc0 16))) 16))
     'int32
     16)
    (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
   (sca-broadcast
    (sca-mul
     (sca-cast
      (sca-mul
       (sca-sub (int16_t t149) (int16_t t150))
       (int16_t (bv #x0040 16)))
      'int32)
     (sca-cast (int16_t input2_multiplier) 'int32))
    16))
  (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
template:
  (vs-mpy-add
 ...
 (combine
  (vs-mpy-add
   ...
   (combine
    #<load-data>
    (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))))
   (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
   #f
   #f
   #f
   'int16)
  (broadcast
   ...
   (sca-mul
    (sca-cast
     (sca-mul (sca-sub (int16_t t149) (int16_t t150)) (int16_t (bv #x0040 16)))
     'int32)
    (sca-cast (int16_t input2_multiplier) 'int32))))
 (list (int8_t (bv #x01 8)) (int16_t input1_multiplier))
 #f
 x?$2075
 #f
 'int32)
axioms:
  (list
 #t
 (forall (idx) (&& (bvsle (app abstr-vals$2215 idx) (bv #x40000000 32)) (bvsle (bv #xc0008000 32) (app abstr-vals$2215 idx)))))
optimized-halide-expr:
  (vec-add
 (vec-bwand
  (sca-broadcast (int32_t (bv #x00000001 32)) 16)
  (vec-div
   (vec-add
    (vec-mul
     (vec-cast #<abstr-halide-expr> 'int32 16)
     (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
    #<abstr-halide-expr>)
   (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
 (vec-div
  (vec-add
   (vec-mul
    (vec-cast #<abstr-halide-expr> 'int32 16)
    (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
   #<abstr-halide-expr>)
  (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
optimized-template:
  (vs-mpy-add
 ...
 (combine #<abstr-expr> #<abstr-expr>)
 (list (int8_t (bv #x01 8)) (int16_t input1_multiplier))
 #f
 x?$2075
 #f
 'int32)
optimized Halide 0:
  (int32_t
 (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (app abstr-vals$2215 0) (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (app abstr-vals$2214 0) (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (app abstr-vals$2215 0) (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (app abstr-vals$2214 0) (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (app abstr-vals$2215 0) (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (app abstr-vals$2214 0) (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (app abstr-vals$2215 0) (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (app abstr-vals$2214 0) (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (app abstr-vals$2215 0) (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (app abstr-vals$2214 0) (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (app abstr-vals$2215 0) (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (app abstr-vals$2214 0) (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))))
optimized x86 0:
  (int32_t
 (bvadd (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (app abstr-vals$2214 0) (bitvector 32))) (bvadd (app abstr-vals$2215 0) (ite x?$2075 (bv #x00000001 32) (bv #x00000000 32)))))
Ran synthesizer for 1177 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-bwand
  (sca-broadcast (int32_t (bv #x00000001 32)) 16)
  (vec-div
   (vec-add
    (vec-mul
     (vec-cast
      (vec-add
       (vec-mul
        (vec-cast
         (load
          (buffer input1 'uint8)
          (ramp
           (sca-add
            (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
            (sca-sub
             (sca-sub (var-lookup 't75) (var-lookup 't81))
             (var-lookup 'input1.min.0)))
           1
           16)
          (aligned 1 0))
         'int16
         16)
        (sca-broadcast (int16_t (bv #x0040 16)) 16))
       (sca-broadcast (sca-mul (int16_t t148) (int16_t (bv #xffc0 16))) 16))
      'int32
      16)
     (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
    (sca-broadcast
     (sca-mul
      (sca-cast
       (sca-mul
        (sca-sub (int16_t t149) (int16_t t150))
        (int16_t (bv #x0040 16)))
       'int32)
      (sca-cast (int16_t input2_multiplier) 'int32))
     16))
   (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
 (vec-div
  (vec-add
   (vec-mul
    (vec-cast
     (vec-add
      (vec-mul
       (vec-cast
        (load
         (buffer input1 'uint8)
         (ramp
          (sca-add
           (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
           (sca-sub
            (sca-sub (var-lookup 't75) (var-lookup 't81))
            (var-lookup 'input1.min.0)))
          1
          16)
         (aligned 1 0))
        'int16
        16)
       (sca-broadcast (int16_t (bv #x0040 16)) 16))
      (sca-broadcast (sca-mul (int16_t t148) (int16_t (bv #xffc0 16))) 16))
     'int32
     16)
    (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
   (sca-broadcast
    (sca-mul
     (sca-cast
      (sca-mul
       (sca-sub (int16_t t149) (int16_t t150))
       (int16_t (bv #x0040 16)))
      'int32)
     (sca-cast (int16_t input2_multiplier) 'int32))
    16))
  (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
template:
  (vs-shift-right
 ...
 (vs-mpy-add
  ...
  (combine
   (vs-mpy-add
    ...
    (combine
     #<load-data>
     (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))))
    (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
    #f
    #f
    #f
    'int16)
   (broadcast
    ...
    (sca-mul
     (sca-cast
      (sca-mul
       (sca-sub (int16_t t149) (int16_t t150))
       (int16_t (bv #x0040 16)))
      'int32)
     (sca-cast (int16_t input2_multiplier) 'int32))))
  (list (int8_t (bv #x01 8)) (int16_t input1_multiplier))
  #f
  #f
  #f
  'int32)
 (int32_t (ite x?$1932 (bv #x00000010 32) (bv #x0000000f 32)))
 #f
 #f
 #t)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-add
 (vec-bwand
  (sca-broadcast (int32_t (bv #x00000001 32)) 16)
  (vec-div
   #<abstr-halide-expr>
   (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
 (vec-div
  #<abstr-halide-expr>
  (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
optimized-template:
  (vs-shift-right
 ...
 #<abstr-expr>
 (int32_t (ite x?$1932 (bv #x00000010 32) (bv #x0000000f 32)))
 #f
 #f
 #t)
optimized Halide 0:
  (int32_t
 (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$2216 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$2216 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$2216 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$2216 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$2216 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$2216 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))))
optimized x86 0:
  (int32_t
 (bvashr (app abstr-vals$2216 0) (ite x?$1932 (bv #x00000010 32) (bv #x0000000f 32))))
Ran synthesizer for 1594 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-bwand
  (sca-broadcast (int32_t (bv #x00000001 32)) 16)
  (vec-div
   (vec-add
    (vec-mul
     (vec-cast
      (vec-add
       (vec-mul
        (vec-cast
         (load
          (buffer input1 'uint8)
          (ramp
           (sca-add
            (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
            (sca-sub
             (sca-sub (var-lookup 't75) (var-lookup 't81))
             (var-lookup 'input1.min.0)))
           1
           16)
          (aligned 1 0))
         'int16
         16)
        (sca-broadcast (int16_t (bv #x0040 16)) 16))
       (sca-broadcast (sca-mul (int16_t t148) (int16_t (bv #xffc0 16))) 16))
      'int32
      16)
     (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
    (sca-broadcast
     (sca-mul
      (sca-cast
       (sca-mul
        (sca-sub (int16_t t149) (int16_t t150))
        (int16_t (bv #x0040 16)))
       'int32)
      (sca-cast (int16_t input2_multiplier) 'int32))
     16))
   (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
 (vec-div
  (vec-add
   (vec-mul
    (vec-cast
     (vec-add
      (vec-mul
       (vec-cast
        (load
         (buffer input1 'uint8)
         (ramp
          (sca-add
           (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
           (sca-sub
            (sca-sub (var-lookup 't75) (var-lookup 't81))
            (var-lookup 'input1.min.0)))
          1
          16)
         (aligned 1 0))
        'int16
        16)
       (sca-broadcast (int16_t (bv #x0040 16)) 16))
      (sca-broadcast (sca-mul (int16_t t148) (int16_t (bv #xffc0 16))) 16))
     'int32
     16)
    (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
   (sca-broadcast
    (sca-mul
     (sca-cast
      (sca-mul
       (sca-sub (int16_t t149) (int16_t t150))
       (int16_t (bv #x0040 16)))
      'int32)
     (sca-cast (int16_t input2_multiplier) 'int32))
    16))
  (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
template:
  (vs-shift-right
 ...
 (vs-mpy-add
  ...
  (combine
   (vs-mpy-add
    ...
    (combine
     #<load-data>
     (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))))
    (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
    #f
    #f
    #f
    'int16)
   (broadcast
    ...
    (sca-mul
     (sca-cast
      (sca-mul
       (sca-sub (int16_t t149) (int16_t t150))
       (int16_t (bv #x0040 16)))
      'int32)
     (sca-cast (int16_t input2_multiplier) 'int32))))
  (list (int8_t (bv #x01 8)) (int16_t input1_multiplier))
  #f
  #f
  #f
  'int32)
 (int32_t (bv #x0000000f 32))
 x?$1933
 x?$1934
 x?$1935)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-add
 (vec-bwand
  (sca-broadcast (int32_t (bv #x00000001 32)) 16)
  (vec-div
   #<abstr-halide-expr>
   (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
 (vec-div
  #<abstr-halide-expr>
  (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
optimized-template:
  (vs-shift-right
 ...
 #<abstr-expr>
 (int32_t (bv #x0000000f 32))
 x?$1933
 x?$1934
 x?$1935)
optimized Halide 0:
  (int32_t
 (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$2217 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$2217 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$2217 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$2217 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$2217 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$2217 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))))
optimized x86 0:
  (int32_t
 (ite x?$1933 (bvadd (ite x?$1935 (bvashr (app abstr-vals$2217 0) (bv #x0000000f 32)) (bvlshr (app abstr-vals$2217 0) (bv #x0000000f 32))) (bvand (bv #x00000001 32) (ite x?$1935 (bvashr (app abstr-vals$2217 0) (bv #x0000000e 32)) (bvlshr (app abstr-vals$2217 0) (bv #x0000000e 32))))) (ite x?$1935 (bvashr (app abstr-vals$2217 0) (bv #x0000000f 32)) (bvlshr (app abstr-vals$2217 0) (bv #x0000000f 32)))))
Ran synthesizer for 1055 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-bwand
  (sca-broadcast (int32_t (bv #x00000001 32)) 16)
  (vec-div
   (vec-add
    (vec-mul
     (vec-cast
      (vec-add
       (vec-mul
        (vec-cast
         (load
          (buffer input1 'uint8)
          (ramp
           (sca-add
            (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
            (sca-sub
             (sca-sub (var-lookup 't75) (var-lookup 't81))
             (var-lookup 'input1.min.0)))
           1
           16)
          (aligned 1 0))
         'int16
         16)
        (sca-broadcast (int16_t (bv #x0040 16)) 16))
       (sca-broadcast (sca-mul (int16_t t148) (int16_t (bv #xffc0 16))) 16))
      'int32
      16)
     (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
    (sca-broadcast
     (sca-mul
      (sca-cast
       (sca-mul
        (sca-sub (int16_t t149) (int16_t t150))
        (int16_t (bv #x0040 16)))
       'int32)
      (sca-cast (int16_t input2_multiplier) 'int32))
     16))
   (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
 (vec-div
  (vec-add
   (vec-mul
    (vec-cast
     (vec-add
      (vec-mul
       (vec-cast
        (load
         (buffer input1 'uint8)
         (ramp
          (sca-add
           (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
           (sca-sub
            (sca-sub (var-lookup 't75) (var-lookup 't81))
            (var-lookup 'input1.min.0)))
          1
          16)
         (aligned 1 0))
        'int16
        16)
       (sca-broadcast (int16_t (bv #x0040 16)) 16))
      (sca-broadcast (sca-mul (int16_t t148) (int16_t (bv #xffc0 16))) 16))
     'int32
     16)
    (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
   (sca-broadcast
    (sca-mul
     (sca-cast
      (sca-mul
       (sca-sub (int16_t t149) (int16_t t150))
       (int16_t (bv #x0040 16)))
      'int32)
     (sca-cast (int16_t input2_multiplier) 'int32))
    16))
  (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
template:
  (vs-shift-right
 ...
 (vs-mpy-add
  ...
  (combine
   (vs-mpy-add
    ...
    (combine
     #<load-data>
     (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))))
    (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
    #f
    #f
    #f
    'int16)
   (broadcast
    ...
    (sca-mul
     (sca-cast
      (sca-mul
       (sca-sub (int16_t t149) (int16_t t150))
       (int16_t (bv #x0040 16)))
      'int32)
     (sca-cast (int16_t input2_multiplier) 'int32))))
  (list (int8_t (bv #x01 8)) (int16_t input1_multiplier))
  #f
  #f
  #f
  'int32)
 (int32_t (ite x?$2070 (bv #x00000010 32) (bv #x0000000f 32)))
 #f
 #f
 #t)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-add
 (vec-bwand
  (sca-broadcast (int32_t (bv #x00000001 32)) 16)
  (vec-div
   #<abstr-halide-expr>
   (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
 (vec-div
  #<abstr-halide-expr>
  (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
optimized-template:
  (vs-shift-right
 ...
 #<abstr-expr>
 (int32_t (ite x?$2070 (bv #x00000010 32) (bv #x0000000f 32)))
 #f
 #f
 #t)
optimized Halide 0:
  (int32_t
 (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$2218 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$2218 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$2218 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$2218 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$2218 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$2218 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))))
optimized x86 0:
  (int32_t
 (bvashr (app abstr-vals$2218 0) (ite x?$2070 (bv #x00000010 32) (bv #x0000000f 32))))
Ran synthesizer for 1040 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-bwand
  (sca-broadcast (int32_t (bv #x00000001 32)) 16)
  (vec-div
   (vec-add
    (vec-mul
     (vec-cast
      (vec-add
       (vec-mul
        (vec-cast
         (load
          (buffer input1 'uint8)
          (ramp
           (sca-add
            (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
            (sca-sub
             (sca-sub (var-lookup 't75) (var-lookup 't81))
             (var-lookup 'input1.min.0)))
           1
           16)
          (aligned 1 0))
         'int16
         16)
        (sca-broadcast (int16_t (bv #x0040 16)) 16))
       (sca-broadcast (sca-mul (int16_t t148) (int16_t (bv #xffc0 16))) 16))
      'int32
      16)
     (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
    (sca-broadcast
     (sca-mul
      (sca-cast
       (sca-mul
        (sca-sub (int16_t t149) (int16_t t150))
        (int16_t (bv #x0040 16)))
       'int32)
      (sca-cast (int16_t input2_multiplier) 'int32))
     16))
   (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
 (vec-div
  (vec-add
   (vec-mul
    (vec-cast
     (vec-add
      (vec-mul
       (vec-cast
        (load
         (buffer input1 'uint8)
         (ramp
          (sca-add
           (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
           (sca-sub
            (sca-sub (var-lookup 't75) (var-lookup 't81))
            (var-lookup 'input1.min.0)))
          1
          16)
         (aligned 1 0))
        'int16
        16)
       (sca-broadcast (int16_t (bv #x0040 16)) 16))
      (sca-broadcast (sca-mul (int16_t t148) (int16_t (bv #xffc0 16))) 16))
     'int32
     16)
    (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
   (sca-broadcast
    (sca-mul
     (sca-cast
      (sca-mul
       (sca-sub (int16_t t149) (int16_t t150))
       (int16_t (bv #x0040 16)))
      'int32)
     (sca-cast (int16_t input2_multiplier) 'int32))
    16))
  (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
template:
  (vs-shift-right
 ...
 (vs-mpy-add
  ...
  (combine
   (vs-mpy-add
    ...
    (combine
     #<load-data>
     (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))))
    (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
    #f
    #f
    #f
    'int16)
   (broadcast
    ...
    (sca-mul
     (sca-cast
      (sca-mul
       (sca-sub (int16_t t149) (int16_t t150))
       (int16_t (bv #x0040 16)))
      'int32)
     (sca-cast (int16_t input2_multiplier) 'int32))))
  (list (int8_t (bv #x01 8)) (int16_t input1_multiplier))
  #f
  #f
  #f
  'int32)
 (int32_t (bv #x00000010 32))
 x?$2071
 x?$2072
 x?$2073)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-add
 (vec-bwand
  (sca-broadcast (int32_t (bv #x00000001 32)) 16)
  (vec-div
   #<abstr-halide-expr>
   (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
 (vec-div
  #<abstr-halide-expr>
  (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
optimized-template:
  (vs-shift-right
 ...
 #<abstr-expr>
 (int32_t (bv #x00000010 32))
 x?$2071
 x?$2072
 x?$2073)
optimized Halide 0:
  (int32_t
 (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$2219 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$2219 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$2219 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$2219 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$2219 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$2219 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))))
optimized x86 0:
  (int32_t
 (ite x?$2071 (bvadd (ite x?$2073 (bvashr (app abstr-vals$2219 0) (bv #x00000010 32)) (bvlshr (app abstr-vals$2219 0) (bv #x00000010 32))) (bvand (bv #x00000001 32) (ite x?$2073 (bvashr (app abstr-vals$2219 0) (bv #x0000000f 32)) (bvlshr (app abstr-vals$2219 0) (bv #x0000000f 32))))) (ite x?$2073 (bvashr (app abstr-vals$2219 0) (bv #x00000010 32)) (bvlshr (app abstr-vals$2219 0) (bv #x00000010 32)))))
Ran synthesizer for 998 ms
(model
 [x?$2071 #t]
 [x?$2073 #t])
(vec-add
 (vec-bwand
  (sca-broadcast (int32_t (bv #x00000001 32)) 16)
  (vec-div
   #<abstr-halide-expr>
   (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
 (vec-div
  #<abstr-halide-expr>
  (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
(vs-shift-right
 ...
 (vs-mpy-add
  ...
  (combine
   (vs-mpy-add
    ...
    (combine
     #<load-data>
     (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))))
    (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
    #f
    #f
    #f
    'int16)
   (broadcast
    ...
    (sca-mul
     (sca-cast
      (sca-mul
       (sca-sub (int16_t t149) (int16_t t150))
       (int16_t (bv #x0040 16)))
      'int32)
     (sca-cast (int16_t input2_multiplier) 'int32))))
  (list (int8_t (bv #x01 8)) (int16_t input1_multiplier))
  #f
  #f
  #f
  'int32)
 (int32_t (bv #x00000010 32))
 #t
 x?$2072
 #t)
Ran bounds analysis for 49 ms
Ran bounds analysis for 41 ms
"Success?"
#t
(vs-shift-right ... (vs-mpy-add ... (combine (vs-mpy-add ... (combine #<load-data> (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16))))) (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16))) #f #f #f 'int16) (broadcast ... (sca-mul (sca-cast (sca-mul (sca-sub (int16_t t149) (int16_t t150)) (int16_t (bv #x0040 16))) 'int32) (sca-cast (int16_t input2_multiplier) 'int32)))) (list (int8_t (bv #x01 8)) (int16_t input1_multiplier)) #f #f #f 'int32) (int32_t (bv #x00000010 32)) #t x?$2072 #t)
"Building Expr:"
(sca-broadcast (int32_t (bv #x00007fff 32)) 16)
"Fold templates"
'()
here()

"Replace templates"
'()
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (sca-broadcast (int32_t (bv #x00007fff 32)) 16)
template:
  (broadcast ... (int32_t (bv #x00007fff 32)))
axioms:
  '()
optimized-halide-expr:
  (sca-broadcast (int32_t (bv #x00007fff 32)) 16)
optimized-template:
  (broadcast ... (int32_t (bv #x00007fff 32)))
optimized Halide 0:
  (int32_t (bv #x00007fff 32))
optimized x86 0:
  (int32_t (bv #x00007fff 32))
Ran synthesizer for 22 ms
(model)
(sca-broadcast (int32_t (bv #x00007fff 32)) 16)
(broadcast ... (int32_t (bv #x00007fff 32)))
Ran bounds analysis for 27 ms
Ran bounds analysis for 19 ms
"Extended success?"
#t
(broadcast ... (int32_t (bv #x00007fff 32)))
"Building Expr:"
(vec-min
 (vec-add
  (vec-bwand
   (sca-broadcast (int32_t (bv #x00000001 32)) 16)
   (vec-div
    (vec-add
     (vec-mul
      (vec-cast
       (vec-add
        (vec-mul
         (vec-cast
          (load
           (buffer input1 'uint8)
           (ramp
            (sca-add
             (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
             (sca-sub
              (sca-sub (var-lookup 't75) (var-lookup 't81))
              (var-lookup 'input1.min.0)))
            1
            16)
           (aligned 1 0))
          'int16
          16)
         (sca-broadcast (int16_t (bv #x0040 16)) 16))
        (sca-broadcast (sca-mul (int16_t t148) (int16_t (bv #xffc0 16))) 16))
       'int32
       16)
      (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
     (sca-broadcast
      (sca-mul
       (sca-cast
        (sca-mul
         (sca-sub (int16_t t149) (int16_t t150))
         (int16_t (bv #x0040 16)))
        'int32)
       (sca-cast (int16_t input2_multiplier) 'int32))
      16))
    (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
  (vec-div
   (vec-add
    (vec-mul
     (vec-cast
      (vec-add
       (vec-mul
        (vec-cast
         (load
          (buffer input1 'uint8)
          (ramp
           (sca-add
            (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
            (sca-sub
             (sca-sub (var-lookup 't75) (var-lookup 't81))
             (var-lookup 'input1.min.0)))
           1
           16)
          (aligned 1 0))
         'int16
         16)
        (sca-broadcast (int16_t (bv #x0040 16)) 16))
       (sca-broadcast (sca-mul (int16_t t148) (int16_t (bv #xffc0 16))) 16))
      'int32
      16)
     (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
    (sca-broadcast
     (sca-mul
      (sca-cast
       (sca-mul
        (sca-sub (int16_t t149) (int16_t t150))
        (int16_t (bv #x0040 16)))
       'int32)
      (sca-cast (int16_t input2_multiplier) 'int32))
     16))
   (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
 (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
"Fold templates"
(list
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (combine
    (vs-mpy-add
     ...
     (combine
      #<load-data>
      (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))))
     (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
     #f
     #f
     #f
     'int16)
    (broadcast
     ...
     (sca-mul
      (sca-cast
       (sca-mul
        (sca-sub (int16_t t149) (int16_t t150))
        (int16_t (bv #x0040 16)))
       'int32)
      (sca-cast (int16_t input2_multiplier) 'int32))))
   (list (int8_t (bv #x01 8)) (int16_t input1_multiplier))
   #f
   #f
   #f
   'int32)
  (int32_t (ite x?$2221 (bv #x00000010 32) (bv #x0000000f 32)))
  #t
  x?$2072
  #t)
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (combine
    (vs-mpy-add
     ...
     (combine
      #<load-data>
      (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))))
     (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
     #f
     #f
     #f
     'int16)
    (broadcast
     ...
     (sca-mul
      (sca-cast
       (sca-mul
        (sca-sub (int16_t t149) (int16_t t150))
        (int16_t (bv #x0040 16)))
       'int32)
      (sca-cast (int16_t input2_multiplier) 'int32))))
   (list (int8_t (bv #x01 8)) (int16_t input1_multiplier))
   #f
   #f
   #f
   'int32)
  (int32_t (bv #x00000010 32))
  x?$2222
  x?$2223
  x?$2224))
here(#(struct:vs-shift-right ... #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t148) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f #f #f int16) #(struct:broadcast ... #(struct:sca-mul #(struct:sca-cast #(struct:sca-mul #(struct:sca-sub #(struct:int16_t t149) #(struct:int16_t t150)) #(struct:int16_t (bv #x0040 16))) int32) #(struct:sca-cast #(struct:int16_t input2_multiplier) int32)))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t input1_multiplier)) #f #f #f int32) #(struct:int32_t (ite x?$2221 (bv #x00000010 32) (bv #x0000000f 32))) #t x?$2072 #t) #(struct:vs-shift-right ... #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t148) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f #f #f int16) #(struct:broadcast ... #(struct:sca-mul #(struct:sca-cast #(struct:sca-mul #(struct:sca-sub #(struct:int16_t t149) #(struct:int16_t t150)) #(struct:int16_t (bv #x0040 16))) int32) #(struct:sca-cast #(struct:int16_t input2_multiplier) int32)))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t input1_multiplier)) #f #f #f int32) #(struct:int32_t (bv #x00000010 32)) x?$2222 x?$2223 x?$2224))

"Replace templates"
'()
run-x86-synthesizer
halide-expr:
  (vec-min
 (vec-add
  (vec-bwand
   (sca-broadcast (int32_t (bv #x00000001 32)) 16)
   (vec-div
    (vec-add
     (vec-mul
      (vec-cast
       (vec-add
        (vec-mul
         (vec-cast
          (load
           (buffer input1 'uint8)
           (ramp
            (sca-add
             (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
             (sca-sub
              (sca-sub (var-lookup 't75) (var-lookup 't81))
              (var-lookup 'input1.min.0)))
            1
            16)
           (aligned 1 0))
          'int16
          16)
         (sca-broadcast (int16_t (bv #x0040 16)) 16))
        (sca-broadcast (sca-mul (int16_t t148) (int16_t (bv #xffc0 16))) 16))
       'int32
       16)
      (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
     (sca-broadcast
      (sca-mul
       (sca-cast
        (sca-mul
         (sca-sub (int16_t t149) (int16_t t150))
         (int16_t (bv #x0040 16)))
        'int32)
       (sca-cast (int16_t input2_multiplier) 'int32))
      16))
    (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
  (vec-div
   (vec-add
    (vec-mul
     (vec-cast
      (vec-add
       (vec-mul
        (vec-cast
         (load
          (buffer input1 'uint8)
          (ramp
           (sca-add
            (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
            (sca-sub
             (sca-sub (var-lookup 't75) (var-lookup 't81))
             (var-lookup 'input1.min.0)))
           1
           16)
          (aligned 1 0))
         'int16
         16)
        (sca-broadcast (int16_t (bv #x0040 16)) 16))
       (sca-broadcast (sca-mul (int16_t t148) (int16_t (bv #xffc0 16))) 16))
      'int32
      16)
     (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
    (sca-broadcast
     (sca-mul
      (sca-cast
       (sca-mul
        (sca-sub (int16_t t149) (int16_t t150))
        (int16_t (bv #x0040 16)))
       'int32)
      (sca-cast (int16_t input2_multiplier) 'int32))
     16))
   (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
 (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
template:
  (vs-shift-right
 ...
 (vs-mpy-add
  ...
  (combine
   (vs-mpy-add
    ...
    (combine
     #<load-data>
     (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))))
    (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
    #f
    #f
    #f
    'int16)
   (broadcast
    ...
    (sca-mul
     (sca-cast
      (sca-mul
       (sca-sub (int16_t t149) (int16_t t150))
       (int16_t (bv #x0040 16)))
      'int32)
     (sca-cast (int16_t input2_multiplier) 'int32))))
  (list (int8_t (bv #x01 8)) (int16_t input1_multiplier))
  #f
  #f
  #f
  'int32)
 (int32_t (ite x?$2221 (bv #x00000010 32) (bv #x0000000f 32)))
 #t
 x?$2072
 #t)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-min
 (vec-add
  (vec-bwand
   (sca-broadcast (int32_t (bv #x00000001 32)) 16)
   (vec-div
    #<abstr-halide-expr>
    (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
  (vec-div
   #<abstr-halide-expr>
   (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
 (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
optimized-template:
  (vs-shift-right
 ...
 #<abstr-expr>
 (int32_t (ite x?$2221 (bv #x00000010 32) (bv #x0000000f 32)))
 #t
 x?$2072
 #t)
optimized Halide 0:
  (int32_t
 (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$2230 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$2230 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$2230 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$2230 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$2230 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$2230 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$2230 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$2230 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$2230 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$2230 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$2230 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$2230 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)))
optimized x86 0:
  (int32_t
 (bvadd (bvashr (app abstr-vals$2230 0) (ite x?$2221 (bv #x00000010 32) (bv #x0000000f 32))) (bvand (bv #x00000001 32) (bvashr (app abstr-vals$2230 0) (ite x?$2221 (bv #x0000000f 32) (bv #x0000000e 32))))))
Ran synthesizer for 1117 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-min
 (vec-add
  (vec-bwand
   (sca-broadcast (int32_t (bv #x00000001 32)) 16)
   (vec-div
    (vec-add
     (vec-mul
      (vec-cast
       (vec-add
        (vec-mul
         (vec-cast
          (load
           (buffer input1 'uint8)
           (ramp
            (sca-add
             (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
             (sca-sub
              (sca-sub (var-lookup 't75) (var-lookup 't81))
              (var-lookup 'input1.min.0)))
            1
            16)
           (aligned 1 0))
          'int16
          16)
         (sca-broadcast (int16_t (bv #x0040 16)) 16))
        (sca-broadcast (sca-mul (int16_t t148) (int16_t (bv #xffc0 16))) 16))
       'int32
       16)
      (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
     (sca-broadcast
      (sca-mul
       (sca-cast
        (sca-mul
         (sca-sub (int16_t t149) (int16_t t150))
         (int16_t (bv #x0040 16)))
        'int32)
       (sca-cast (int16_t input2_multiplier) 'int32))
      16))
    (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
  (vec-div
   (vec-add
    (vec-mul
     (vec-cast
      (vec-add
       (vec-mul
        (vec-cast
         (load
          (buffer input1 'uint8)
          (ramp
           (sca-add
            (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
            (sca-sub
             (sca-sub (var-lookup 't75) (var-lookup 't81))
             (var-lookup 'input1.min.0)))
           1
           16)
          (aligned 1 0))
         'int16
         16)
        (sca-broadcast (int16_t (bv #x0040 16)) 16))
       (sca-broadcast (sca-mul (int16_t t148) (int16_t (bv #xffc0 16))) 16))
      'int32
      16)
     (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
    (sca-broadcast
     (sca-mul
      (sca-cast
       (sca-mul
        (sca-sub (int16_t t149) (int16_t t150))
        (int16_t (bv #x0040 16)))
       'int32)
      (sca-cast (int16_t input2_multiplier) 'int32))
     16))
   (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
 (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
template:
  (vs-shift-right
 ...
 (vs-mpy-add
  ...
  (combine
   (vs-mpy-add
    ...
    (combine
     #<load-data>
     (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))))
    (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
    #f
    #f
    #f
    'int16)
   (broadcast
    ...
    (sca-mul
     (sca-cast
      (sca-mul
       (sca-sub (int16_t t149) (int16_t t150))
       (int16_t (bv #x0040 16)))
      'int32)
     (sca-cast (int16_t input2_multiplier) 'int32))))
  (list (int8_t (bv #x01 8)) (int16_t input1_multiplier))
  #f
  #f
  #f
  'int32)
 (int32_t (bv #x00000010 32))
 x?$2222
 x?$2223
 x?$2224)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-min
 (vec-add
  (vec-bwand
   (sca-broadcast (int32_t (bv #x00000001 32)) 16)
   (vec-div
    #<abstr-halide-expr>
    (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
  (vec-div
   #<abstr-halide-expr>
   (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
 (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
optimized-template:
  (vs-shift-right
 ...
 #<abstr-expr>
 (int32_t (bv #x00000010 32))
 x?$2222
 x?$2223
 x?$2224)
optimized Halide 0:
  (int32_t
 (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$2231 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$2231 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$2231 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$2231 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$2231 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$2231 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$2231 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$2231 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$2231 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$2231 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$2231 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$2231 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)))
optimized x86 0:
  (int32_t
 (ite x?$2222 (bvadd (ite x?$2224 (bvashr (app abstr-vals$2231 0) (bv #x00000010 32)) (bvlshr (app abstr-vals$2231 0) (bv #x00000010 32))) (bvand (bv #x00000001 32) (ite x?$2224 (bvashr (app abstr-vals$2231 0) (bv #x0000000f 32)) (bvlshr (app abstr-vals$2231 0) (bv #x0000000f 32))))) (ite x?$2224 (bvashr (app abstr-vals$2231 0) (bv #x00000010 32)) (bvlshr (app abstr-vals$2231 0) (bv #x00000010 32)))))
Ran synthesizer for 2156 ms
(unsat)
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (vec-min
 (vec-add
  (vec-bwand
   (sca-broadcast (int32_t (bv #x00000001 32)) 16)
   (vec-div
    (vec-add
     (vec-mul
      (vec-cast
       (vec-add
        (vec-mul
         (vec-cast
          (load
           (buffer input1 'uint8)
           (ramp
            (sca-add
             (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
             (sca-sub
              (sca-sub (var-lookup 't75) (var-lookup 't81))
              (var-lookup 'input1.min.0)))
            1
            16)
           (aligned 1 0))
          'int16
          16)
         (sca-broadcast (int16_t (bv #x0040 16)) 16))
        (sca-broadcast (sca-mul (int16_t t148) (int16_t (bv #xffc0 16))) 16))
       'int32
       16)
      (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
     (sca-broadcast
      (sca-mul
       (sca-cast
        (sca-mul
         (sca-sub (int16_t t149) (int16_t t150))
         (int16_t (bv #x0040 16)))
        'int32)
       (sca-cast (int16_t input2_multiplier) 'int32))
      16))
    (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
  (vec-div
   (vec-add
    (vec-mul
     (vec-cast
      (vec-add
       (vec-mul
        (vec-cast
         (load
          (buffer input1 'uint8)
          (ramp
           (sca-add
            (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
            (sca-sub
             (sca-sub (var-lookup 't75) (var-lookup 't81))
             (var-lookup 'input1.min.0)))
           1
           16)
          (aligned 1 0))
         'int16
         16)
        (sca-broadcast (int16_t (bv #x0040 16)) 16))
       (sca-broadcast (sca-mul (int16_t t148) (int16_t (bv #xffc0 16))) 16))
      'int32
      16)
     (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
    (sca-broadcast
     (sca-mul
      (sca-cast
       (sca-mul
        (sca-sub (int16_t t149) (int16_t t150))
        (int16_t (bv #x0040 16)))
       'int32)
      (sca-cast (int16_t input2_multiplier) 'int32))
     16))
   (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
 (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
template:
  (minimum
 ...
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (combine
    (vs-mpy-add
     ...
     (combine
      #<load-data>
      (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))))
     (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
     #f
     #f
     #f
     'int16)
    (broadcast
     ...
     (sca-mul
      (sca-cast
       (sca-mul
        (sca-sub (int16_t t149) (int16_t t150))
        (int16_t (bv #x0040 16)))
       'int32)
      (sca-cast (int16_t input2_multiplier) 'int32))))
   (list (int8_t (bv #x01 8)) (int16_t input1_multiplier))
   #f
   #f
   #f
   'int32)
  (int32_t (bv #x00000010 32))
  #t
  x?$2072
  #t)
 (broadcast ... (int32_t (bv #x00007fff 32))))
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$2232 idx) (bv #x00008000 32)) (bvsle (bv #xffff8000 32) (app abstr-vals$2232 idx))))
 (forall (idx) (&& (bvsle (app abstr-vals$2233 idx) (bv #x00007fff 32)) (bvsle (bv #x00007fff 32) (app abstr-vals$2233 idx)))))
optimized-halide-expr:
  (vec-min #<abstr-halide-expr> #<abstr-halide-expr>)
optimized-template:
  (minimum ... #<abstr-expr> #<abstr-expr>)
optimized Halide 0:
  (int32_t
 (ite (bvsle (app abstr-vals$2232 0) (app abstr-vals$2233 0)) (app abstr-vals$2232 0) (app abstr-vals$2233 0)))
optimized x86 0:
  (int32_t
 (ite (bvsle (app abstr-vals$2232 0) (app abstr-vals$2233 0)) (app abstr-vals$2232 0) (app abstr-vals$2233 0)))
Ran synthesizer for 62 ms
(model)
(vec-min #<abstr-halide-expr> #<abstr-halide-expr>)
(minimum
 ...
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (combine
    (vs-mpy-add
     ...
     (combine
      #<load-data>
      (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))))
     (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
     #f
     #f
     #f
     'int16)
    (broadcast
     ...
     (sca-mul
      (sca-cast
       (sca-mul
        (sca-sub (int16_t t149) (int16_t t150))
        (int16_t (bv #x0040 16)))
       'int32)
      (sca-cast (int16_t input2_multiplier) 'int32))))
   (list (int8_t (bv #x01 8)) (int16_t input1_multiplier))
   #f
   #f
   #f
   'int32)
  (int32_t (bv #x00000010 32))
  #t
  x?$2072
  #t)
 (broadcast ... (int32_t (bv #x00007fff 32))))
Ran bounds analysis for 42 ms
Ran bounds analysis for 39 ms
"Extended success?"
#t
(minimum
 ...
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (combine
    (vs-mpy-add
     ...
     (combine
      #<load-data>
      (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))))
     (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
     #f
     #f
     #f
     'int16)
    (broadcast
     ...
     (sca-mul
      (sca-cast
       (sca-mul
        (sca-sub (int16_t t149) (int16_t t150))
        (int16_t (bv #x0040 16)))
       'int32)
      (sca-cast (int16_t input2_multiplier) 'int32))))
   (list (int8_t (bv #x01 8)) (int16_t input1_multiplier))
   #f
   #f
   #f
   'int32)
  (int32_t (bv #x00000010 32))
  #t
  x?$2072
  #t)
 (broadcast ... (int32_t (bv #x00007fff 32))))
"Building Expr:"
(sca-broadcast (int32_t (bv #xffff8000 32)) 16)
"Fold templates"
'()
here()

"Replace templates"
'()
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (sca-broadcast (int32_t (bv #xffff8000 32)) 16)
template:
  (broadcast ... (int32_t (bv #xffff8000 32)))
axioms:
  '()
optimized-halide-expr:
  (sca-broadcast (int32_t (bv #xffff8000 32)) 16)
optimized-template:
  (broadcast ... (int32_t (bv #xffff8000 32)))
optimized Halide 0:
  (int32_t (bv #xffff8000 32))
optimized x86 0:
  (int32_t (bv #xffff8000 32))
Ran synthesizer for 22 ms
(model)
(sca-broadcast (int32_t (bv #xffff8000 32)) 16)
(broadcast ... (int32_t (bv #xffff8000 32)))
Ran bounds analysis for 28 ms
Ran bounds analysis for 18 ms
"Extended success?"
#t
(broadcast ... (int32_t (bv #xffff8000 32)))
"Building Expr:"
(vec-max
 (vec-min
  (vec-add
   (vec-bwand
    (sca-broadcast (int32_t (bv #x00000001 32)) 16)
    (vec-div
     (vec-add
      (vec-mul
       (vec-cast
        (vec-add
         (vec-mul
          (vec-cast
           (load
            (buffer input1 'uint8)
            (ramp
             (sca-add
              (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
              (sca-sub
               (sca-sub (var-lookup 't75) (var-lookup 't81))
               (var-lookup 'input1.min.0)))
             1
             16)
            (aligned 1 0))
           'int16
           16)
          (sca-broadcast (int16_t (bv #x0040 16)) 16))
         (sca-broadcast (sca-mul (int16_t t148) (int16_t (bv #xffc0 16))) 16))
        'int32
        16)
       (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
      (sca-broadcast
       (sca-mul
        (sca-cast
         (sca-mul
          (sca-sub (int16_t t149) (int16_t t150))
          (int16_t (bv #x0040 16)))
         'int32)
        (sca-cast (int16_t input2_multiplier) 'int32))
       16))
     (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
   (vec-div
    (vec-add
     (vec-mul
      (vec-cast
       (vec-add
        (vec-mul
         (vec-cast
          (load
           (buffer input1 'uint8)
           (ramp
            (sca-add
             (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
             (sca-sub
              (sca-sub (var-lookup 't75) (var-lookup 't81))
              (var-lookup 'input1.min.0)))
            1
            16)
           (aligned 1 0))
          'int16
          16)
         (sca-broadcast (int16_t (bv #x0040 16)) 16))
        (sca-broadcast (sca-mul (int16_t t148) (int16_t (bv #xffc0 16))) 16))
       'int32
       16)
      (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
     (sca-broadcast
      (sca-mul
       (sca-cast
        (sca-mul
         (sca-sub (int16_t t149) (int16_t t150))
         (int16_t (bv #x0040 16)))
        'int32)
       (sca-cast (int16_t input2_multiplier) 'int32))
      16))
    (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
  (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
 (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
"Fold templates"
(list
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (combine
    (vs-mpy-add
     ...
     (combine
      #<load-data>
      (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))))
     (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
     #f
     #f
     #f
     'int16)
    (broadcast
     ...
     (sca-mul
      (sca-cast
       (sca-mul
        (sca-sub (int16_t t149) (int16_t t150))
        (int16_t (bv #x0040 16)))
       'int32)
      (sca-cast (int16_t input2_multiplier) 'int32))))
   (list (int8_t (bv #x01 8)) (int16_t input1_multiplier))
   #f
   #f
   #f
   'int32)
  (int32_t (ite x?$2236 (bv #x00000010 32) (bv #x0000000f 32)))
  #t
  x?$2072
  #t)
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (combine
    (vs-mpy-add
     ...
     (combine
      #<load-data>
      (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))))
     (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
     #f
     #f
     #f
     'int16)
    (broadcast
     ...
     (sca-mul
      (sca-cast
       (sca-mul
        (sca-sub (int16_t t149) (int16_t t150))
        (int16_t (bv #x0040 16)))
       'int32)
      (sca-cast (int16_t input2_multiplier) 'int32))))
   (list (int8_t (bv #x01 8)) (int16_t input1_multiplier))
   #f
   #f
   #f
   'int32)
  (int32_t (bv #x00000010 32))
  x?$2237
  x?$2238
  x?$2239))
here(#(struct:vs-shift-right ... #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t148) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f #f #f int16) #(struct:broadcast ... #(struct:sca-mul #(struct:sca-cast #(struct:sca-mul #(struct:sca-sub #(struct:int16_t t149) #(struct:int16_t t150)) #(struct:int16_t (bv #x0040 16))) int32) #(struct:sca-cast #(struct:int16_t input2_multiplier) int32)))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t input1_multiplier)) #f #f #f int32) #(struct:int32_t (ite x?$2236 (bv #x00000010 32) (bv #x0000000f 32))) #t x?$2072 #t) #(struct:vs-shift-right ... #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t148) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f #f #f int16) #(struct:broadcast ... #(struct:sca-mul #(struct:sca-cast #(struct:sca-mul #(struct:sca-sub #(struct:int16_t t149) #(struct:int16_t t150)) #(struct:int16_t (bv #x0040 16))) int32) #(struct:sca-cast #(struct:int16_t input2_multiplier) int32)))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t input1_multiplier)) #f #f #f int32) #(struct:int32_t (bv #x00000010 32)) x?$2237 x?$2238 x?$2239))

"Replace templates"
(list
 (cast
  ...
  (vs-shift-right
   ...
   (vs-mpy-add
    ...
    (combine
     (vs-mpy-add
      ...
      (combine
       #<load-data>
       (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))))
      (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
      #f
      #f
      #f
      'int16)
     (broadcast
      ...
      (sca-mul
       (sca-cast
        (sca-mul
         (sca-sub (int16_t t149) (int16_t t150))
         (int16_t (bv #x0040 16)))
        'int32)
       (sca-cast (int16_t input2_multiplier) 'int32))))
    (list (int8_t (bv #x01 8)) (int16_t input1_multiplier))
    #f
    #f
    #f
    'int32)
   (int32_t (bv #x00000010 32))
   #t
   x?$2072
   #t)
  'int32
  #t)
 (cast ... (broadcast ... (int32_t (bv #x00007fff 32))) 'int32 #t))
run-x86-synthesizer
halide-expr:
  (vec-max
 (vec-min
  (vec-add
   (vec-bwand
    (sca-broadcast (int32_t (bv #x00000001 32)) 16)
    (vec-div
     (vec-add
      (vec-mul
       (vec-cast
        (vec-add
         (vec-mul
          (vec-cast
           (load
            (buffer input1 'uint8)
            (ramp
             (sca-add
              (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
              (sca-sub
               (sca-sub (var-lookup 't75) (var-lookup 't81))
               (var-lookup 'input1.min.0)))
             1
             16)
            (aligned 1 0))
           'int16
           16)
          (sca-broadcast (int16_t (bv #x0040 16)) 16))
         (sca-broadcast (sca-mul (int16_t t148) (int16_t (bv #xffc0 16))) 16))
        'int32
        16)
       (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
      (sca-broadcast
       (sca-mul
        (sca-cast
         (sca-mul
          (sca-sub (int16_t t149) (int16_t t150))
          (int16_t (bv #x0040 16)))
         'int32)
        (sca-cast (int16_t input2_multiplier) 'int32))
       16))
     (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
   (vec-div
    (vec-add
     (vec-mul
      (vec-cast
       (vec-add
        (vec-mul
         (vec-cast
          (load
           (buffer input1 'uint8)
           (ramp
            (sca-add
             (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
             (sca-sub
              (sca-sub (var-lookup 't75) (var-lookup 't81))
              (var-lookup 'input1.min.0)))
            1
            16)
           (aligned 1 0))
          'int16
          16)
         (sca-broadcast (int16_t (bv #x0040 16)) 16))
        (sca-broadcast (sca-mul (int16_t t148) (int16_t (bv #xffc0 16))) 16))
       'int32
       16)
      (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
     (sca-broadcast
      (sca-mul
       (sca-cast
        (sca-mul
         (sca-sub (int16_t t149) (int16_t t150))
         (int16_t (bv #x0040 16)))
        'int32)
       (sca-cast (int16_t input2_multiplier) 'int32))
      16))
    (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
  (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
 (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
template:
  (cast ... (broadcast ... (int32_t (bv #x00007fff 32))) 'int32 #t)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$2245 idx) (bv #x00007fff 32)) (bvsle (bv #x00007fff 32) (app abstr-vals$2245 idx)))))
optimized-halide-expr:
  (vec-max
 (vec-min
  (vec-add
   (vec-bwand
    (sca-broadcast (int32_t (bv #x00000001 32)) 16)
    (vec-div
     (vec-add
      (vec-mul
       (vec-cast
        (vec-add
         (vec-mul
          (vec-cast
           (load
            (buffer input1 'uint8)
            (ramp
             (sca-add
              (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
              (sca-sub
               (sca-sub (var-lookup 't75) (var-lookup 't81))
               (var-lookup 'input1.min.0)))
             1
             16)
            (aligned 1 0))
           'int16
           16)
          (sca-broadcast (int16_t (bv #x0040 16)) 16))
         (sca-broadcast (sca-mul (int16_t t148) (int16_t (bv #xffc0 16))) 16))
        'int32
        16)
       (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
      (sca-broadcast
       (sca-mul
        (sca-cast
         (sca-mul
          (sca-sub (int16_t t149) (int16_t t150))
          (int16_t (bv #x0040 16)))
         'int32)
        (sca-cast (int16_t input2_multiplier) 'int32))
       16))
     (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
   (vec-div
    (vec-add
     (vec-mul
      (vec-cast
       (vec-add
        (vec-mul
         (vec-cast
          (load
           (buffer input1 'uint8)
           (ramp
            (sca-add
             (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
             (sca-sub
              (sca-sub (var-lookup 't75) (var-lookup 't81))
              (var-lookup 'input1.min.0)))
            1
            16)
           (aligned 1 0))
          'int16
          16)
         (sca-broadcast (int16_t (bv #x0040 16)) 16))
        (sca-broadcast (sca-mul (int16_t t148) (int16_t (bv #xffc0 16))) 16))
       'int32
       16)
      (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
     (sca-broadcast
      (sca-mul
       (sca-cast
        (sca-mul
         (sca-sub (int16_t t149) (int16_t t150))
         (int16_t (bv #x0040 16)))
        'int32)
       (sca-cast (int16_t input2_multiplier) 'int32))
      16))
    (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
  #<abstr-halide-expr>)
 (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
optimized-template:
  (cast ... #<abstr-expr> 'int32 #t)
optimized Halide 0:
  (int32_t
 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (app abstr-vals$2245 0)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (app abstr-vals$2245 0))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (app abstr-vals$2245 0)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (app abstr-vals$2245 0)) (bv #xffff8000 32)))
optimized x86 0:
  (int32_t (app abstr-vals$2245 0))
run-x86-synthesizer
halide-expr:
  (vec-max
 (vec-min
  (vec-add
   (vec-bwand
    (sca-broadcast (int32_t (bv #x00000001 32)) 16)
    (vec-div
     (vec-add
      (vec-mul
       (vec-cast
        (vec-add
         (vec-mul
          (vec-cast
           (load
            (buffer input1 'uint8)
            (ramp
             (sca-add
              (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
              (sca-sub
               (sca-sub (var-lookup 't75) (var-lookup 't81))
               (var-lookup 'input1.min.0)))
             1
             16)
            (aligned 1 0))
           'int16
           16)
          (sca-broadcast (int16_t (bv #x0040 16)) 16))
         (sca-broadcast (sca-mul (int16_t t148) (int16_t (bv #xffc0 16))) 16))
        'int32
        16)
       (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
      (sca-broadcast
       (sca-mul
        (sca-cast
         (sca-mul
          (sca-sub (int16_t t149) (int16_t t150))
          (int16_t (bv #x0040 16)))
         'int32)
        (sca-cast (int16_t input2_multiplier) 'int32))
       16))
     (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
   (vec-div
    (vec-add
     (vec-mul
      (vec-cast
       (vec-add
        (vec-mul
         (vec-cast
          (load
           (buffer input1 'uint8)
           (ramp
            (sca-add
             (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
             (sca-sub
              (sca-sub (var-lookup 't75) (var-lookup 't81))
              (var-lookup 'input1.min.0)))
            1
            16)
           (aligned 1 0))
          'int16
          16)
         (sca-broadcast (int16_t (bv #x0040 16)) 16))
        (sca-broadcast (sca-mul (int16_t t148) (int16_t (bv #xffc0 16))) 16))
       'int32
       16)
      (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
     (sca-broadcast
      (sca-mul
       (sca-cast
        (sca-mul
         (sca-sub (int16_t t149) (int16_t t150))
         (int16_t (bv #x0040 16)))
        'int32)
       (sca-cast (int16_t input2_multiplier) 'int32))
      16))
    (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
  (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
 (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
template:
  (vs-shift-right
 ...
 (vs-mpy-add
  ...
  (combine
   (vs-mpy-add
    ...
    (combine
     #<load-data>
     (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))))
    (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
    #f
    #f
    #f
    'int16)
   (broadcast
    ...
    (sca-mul
     (sca-cast
      (sca-mul
       (sca-sub (int16_t t149) (int16_t t150))
       (int16_t (bv #x0040 16)))
      'int32)
     (sca-cast (int16_t input2_multiplier) 'int32))))
  (list (int8_t (bv #x01 8)) (int16_t input1_multiplier))
  #f
  #f
  #f
  'int32)
 (int32_t (ite x?$2236 (bv #x00000010 32) (bv #x0000000f 32)))
 #t
 x?$2072
 #t)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-max
 (vec-min
  (vec-add
   (vec-bwand
    (sca-broadcast (int32_t (bv #x00000001 32)) 16)
    (vec-div
     #<abstr-halide-expr>
     (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
   (vec-div
    #<abstr-halide-expr>
    (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
  (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
 (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
optimized-template:
  (vs-shift-right
 ...
 #<abstr-expr>
 (int32_t (ite x?$2236 (bv #x00000010 32) (bv #x0000000f 32)))
 #t
 x?$2072
 #t)
optimized Halide 0:
  (int32_t
 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$2246 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$2246 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$2246 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$2246 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$2246 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$2246 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$2246 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$2246 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$2246 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$2246 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$2246 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$2246 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$2246 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$2246 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$2246 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$2246 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$2246 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$2246 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$2246 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$2246 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$2246 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$2246 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$2246 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$2246 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bv #xffff8000 32)))
optimized x86 0:
  (int32_t
 (bvadd (bvashr (app abstr-vals$2246 0) (ite x?$2236 (bv #x00000010 32) (bv #x0000000f 32))) (bvand (bv #x00000001 32) (bvashr (app abstr-vals$2246 0) (ite x?$2236 (bv #x0000000f 32) (bv #x0000000e 32))))))
Ran synthesizer for 1045 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-max
 (vec-min
  (vec-add
   (vec-bwand
    (sca-broadcast (int32_t (bv #x00000001 32)) 16)
    (vec-div
     (vec-add
      (vec-mul
       (vec-cast
        (vec-add
         (vec-mul
          (vec-cast
           (load
            (buffer input1 'uint8)
            (ramp
             (sca-add
              (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
              (sca-sub
               (sca-sub (var-lookup 't75) (var-lookup 't81))
               (var-lookup 'input1.min.0)))
             1
             16)
            (aligned 1 0))
           'int16
           16)
          (sca-broadcast (int16_t (bv #x0040 16)) 16))
         (sca-broadcast (sca-mul (int16_t t148) (int16_t (bv #xffc0 16))) 16))
        'int32
        16)
       (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
      (sca-broadcast
       (sca-mul
        (sca-cast
         (sca-mul
          (sca-sub (int16_t t149) (int16_t t150))
          (int16_t (bv #x0040 16)))
         'int32)
        (sca-cast (int16_t input2_multiplier) 'int32))
       16))
     (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
   (vec-div
    (vec-add
     (vec-mul
      (vec-cast
       (vec-add
        (vec-mul
         (vec-cast
          (load
           (buffer input1 'uint8)
           (ramp
            (sca-add
             (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
             (sca-sub
              (sca-sub (var-lookup 't75) (var-lookup 't81))
              (var-lookup 'input1.min.0)))
            1
            16)
           (aligned 1 0))
          'int16
          16)
         (sca-broadcast (int16_t (bv #x0040 16)) 16))
        (sca-broadcast (sca-mul (int16_t t148) (int16_t (bv #xffc0 16))) 16))
       'int32
       16)
      (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
     (sca-broadcast
      (sca-mul
       (sca-cast
        (sca-mul
         (sca-sub (int16_t t149) (int16_t t150))
         (int16_t (bv #x0040 16)))
        'int32)
       (sca-cast (int16_t input2_multiplier) 'int32))
      16))
    (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
  (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
 (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
template:
  (vs-shift-right
 ...
 (vs-mpy-add
  ...
  (combine
   (vs-mpy-add
    ...
    (combine
     #<load-data>
     (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))))
    (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
    #f
    #f
    #f
    'int16)
   (broadcast
    ...
    (sca-mul
     (sca-cast
      (sca-mul
       (sca-sub (int16_t t149) (int16_t t150))
       (int16_t (bv #x0040 16)))
      'int32)
     (sca-cast (int16_t input2_multiplier) 'int32))))
  (list (int8_t (bv #x01 8)) (int16_t input1_multiplier))
  #f
  #f
  #f
  'int32)
 (int32_t (bv #x00000010 32))
 x?$2237
 x?$2238
 x?$2239)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-max
 (vec-min
  (vec-add
   (vec-bwand
    (sca-broadcast (int32_t (bv #x00000001 32)) 16)
    (vec-div
     #<abstr-halide-expr>
     (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
   (vec-div
    #<abstr-halide-expr>
    (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
  (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
 (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
optimized-template:
  (vs-shift-right
 ...
 #<abstr-expr>
 (int32_t (bv #x00000010 32))
 x?$2237
 x?$2238
 x?$2239)
optimized Halide 0:
  (int32_t
 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$2247 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$2247 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$2247 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$2247 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$2247 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$2247 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$2247 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$2247 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$2247 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$2247 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$2247 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$2247 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$2247 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$2247 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$2247 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$2247 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$2247 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$2247 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$2247 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$2247 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$2247 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$2247 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$2247 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$2247 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bv #xffff8000 32)))
optimized x86 0:
  (int32_t
 (ite x?$2237 (bvadd (ite x?$2239 (bvashr (app abstr-vals$2247 0) (bv #x00000010 32)) (bvlshr (app abstr-vals$2247 0) (bv #x00000010 32))) (bvand (bv #x00000001 32) (ite x?$2239 (bvashr (app abstr-vals$2247 0) (bv #x0000000f 32)) (bvlshr (app abstr-vals$2247 0) (bv #x0000000f 32))))) (ite x?$2239 (bvashr (app abstr-vals$2247 0) (bv #x00000010 32)) (bvlshr (app abstr-vals$2247 0) (bv #x00000010 32)))))
Ran synthesizer for 1607 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-max
 (vec-min
  (vec-add
   (vec-bwand
    (sca-broadcast (int32_t (bv #x00000001 32)) 16)
    (vec-div
     (vec-add
      (vec-mul
       (vec-cast
        (vec-add
         (vec-mul
          (vec-cast
           (load
            (buffer input1 'uint8)
            (ramp
             (sca-add
              (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
              (sca-sub
               (sca-sub (var-lookup 't75) (var-lookup 't81))
               (var-lookup 'input1.min.0)))
             1
             16)
            (aligned 1 0))
           'int16
           16)
          (sca-broadcast (int16_t (bv #x0040 16)) 16))
         (sca-broadcast (sca-mul (int16_t t148) (int16_t (bv #xffc0 16))) 16))
        'int32
        16)
       (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
      (sca-broadcast
       (sca-mul
        (sca-cast
         (sca-mul
          (sca-sub (int16_t t149) (int16_t t150))
          (int16_t (bv #x0040 16)))
         'int32)
        (sca-cast (int16_t input2_multiplier) 'int32))
       16))
     (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
   (vec-div
    (vec-add
     (vec-mul
      (vec-cast
       (vec-add
        (vec-mul
         (vec-cast
          (load
           (buffer input1 'uint8)
           (ramp
            (sca-add
             (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
             (sca-sub
              (sca-sub (var-lookup 't75) (var-lookup 't81))
              (var-lookup 'input1.min.0)))
            1
            16)
           (aligned 1 0))
          'int16
          16)
         (sca-broadcast (int16_t (bv #x0040 16)) 16))
        (sca-broadcast (sca-mul (int16_t t148) (int16_t (bv #xffc0 16))) 16))
       'int32
       16)
      (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
     (sca-broadcast
      (sca-mul
       (sca-cast
        (sca-mul
         (sca-sub (int16_t t149) (int16_t t150))
         (int16_t (bv #x0040 16)))
        'int32)
       (sca-cast (int16_t input2_multiplier) 'int32))
      16))
    (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
  (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
 (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
template:
  (cast
 ...
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (combine
    (vs-mpy-add
     ...
     (combine
      #<load-data>
      (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))))
     (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
     #f
     #f
     #f
     'int16)
    (broadcast
     ...
     (sca-mul
      (sca-cast
       (sca-mul
        (sca-sub (int16_t t149) (int16_t t150))
        (int16_t (bv #x0040 16)))
       'int32)
      (sca-cast (int16_t input2_multiplier) 'int32))))
   (list (int8_t (bv #x01 8)) (int16_t input1_multiplier))
   #f
   #f
   #f
   'int32)
  (int32_t (bv #x00000010 32))
  #t
  x?$2072
  #t)
 'int32
 #t)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$2248 idx) (bv #x00008000 32)) (bvsle (bv #xffff8000 32) (app abstr-vals$2248 idx)))))
optimized-halide-expr:
  (vec-max
 (vec-min #<abstr-halide-expr> (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
 (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
optimized-template:
  (cast ... #<abstr-expr> 'int32 #t)
optimized Halide 0:
  (int32_t
 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (app abstr-vals$2248 0) (bv #x00007fff 32)) (app abstr-vals$2248 0) (bv #x00007fff 32))) (ite (bvsle (app abstr-vals$2248 0) (bv #x00007fff 32)) (app abstr-vals$2248 0) (bv #x00007fff 32)) (bv #xffff8000 32)))
optimized x86 0:
  (int32_t (app abstr-vals$2248 0))
Ran synthesizer for 111 ms
(unsat)
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (vec-max
 (vec-min
  (vec-add
   (vec-bwand
    (sca-broadcast (int32_t (bv #x00000001 32)) 16)
    (vec-div
     (vec-add
      (vec-mul
       (vec-cast
        (vec-add
         (vec-mul
          (vec-cast
           (load
            (buffer input1 'uint8)
            (ramp
             (sca-add
              (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
              (sca-sub
               (sca-sub (var-lookup 't75) (var-lookup 't81))
               (var-lookup 'input1.min.0)))
             1
             16)
            (aligned 1 0))
           'int16
           16)
          (sca-broadcast (int16_t (bv #x0040 16)) 16))
         (sca-broadcast (sca-mul (int16_t t148) (int16_t (bv #xffc0 16))) 16))
        'int32
        16)
       (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
      (sca-broadcast
       (sca-mul
        (sca-cast
         (sca-mul
          (sca-sub (int16_t t149) (int16_t t150))
          (int16_t (bv #x0040 16)))
         'int32)
        (sca-cast (int16_t input2_multiplier) 'int32))
       16))
     (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
   (vec-div
    (vec-add
     (vec-mul
      (vec-cast
       (vec-add
        (vec-mul
         (vec-cast
          (load
           (buffer input1 'uint8)
           (ramp
            (sca-add
             (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
             (sca-sub
              (sca-sub (var-lookup 't75) (var-lookup 't81))
              (var-lookup 'input1.min.0)))
            1
            16)
           (aligned 1 0))
          'int16
          16)
         (sca-broadcast (int16_t (bv #x0040 16)) 16))
        (sca-broadcast (sca-mul (int16_t t148) (int16_t (bv #xffc0 16))) 16))
       'int32
       16)
      (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
     (sca-broadcast
      (sca-mul
       (sca-cast
        (sca-mul
         (sca-sub (int16_t t149) (int16_t t150))
         (int16_t (bv #x0040 16)))
        'int32)
       (sca-cast (int16_t input2_multiplier) 'int32))
      16))
    (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
  (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
 (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
template:
  (maximum
 ...
 (minimum
  ...
  (vs-shift-right
   ...
   (vs-mpy-add
    ...
    (combine
     (vs-mpy-add
      ...
      (combine
       #<load-data>
       (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))))
      (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
      #f
      #f
      #f
      'int16)
     (broadcast
      ...
      (sca-mul
       (sca-cast
        (sca-mul
         (sca-sub (int16_t t149) (int16_t t150))
         (int16_t (bv #x0040 16)))
        'int32)
       (sca-cast (int16_t input2_multiplier) 'int32))))
    (list (int8_t (bv #x01 8)) (int16_t input1_multiplier))
    #f
    #f
    #f
    'int32)
   (int32_t (bv #x00000010 32))
   #t
   x?$2072
   #t)
  (broadcast ... (int32_t (bv #x00007fff 32))))
 (broadcast ... (int32_t (bv #xffff8000 32))))
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$2249 idx) (bv #x00007fff 32)) (bvsle (bv #xffff8000 32) (app abstr-vals$2249 idx))))
 (forall (idx) (&& (bvsle (app abstr-vals$2250 idx) (bv #xffff8000 32)) (bvsle (bv #xffff8000 32) (app abstr-vals$2250 idx)))))
optimized-halide-expr:
  (vec-max #<abstr-halide-expr> #<abstr-halide-expr>)
optimized-template:
  (maximum ... #<abstr-expr> #<abstr-expr>)
optimized Halide 0:
  (int32_t
 (ite (bvsle (app abstr-vals$2250 0) (app abstr-vals$2249 0)) (app abstr-vals$2249 0) (app abstr-vals$2250 0)))
optimized x86 0:
  (int32_t
 (ite (bvsle (app abstr-vals$2250 0) (app abstr-vals$2249 0)) (app abstr-vals$2249 0) (app abstr-vals$2250 0)))
Ran synthesizer for 60 ms
(model)
(vec-max #<abstr-halide-expr> #<abstr-halide-expr>)
(maximum
 ...
 (minimum
  ...
  (vs-shift-right
   ...
   (vs-mpy-add
    ...
    (combine
     (vs-mpy-add
      ...
      (combine
       #<load-data>
       (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))))
      (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
      #f
      #f
      #f
      'int16)
     (broadcast
      ...
      (sca-mul
       (sca-cast
        (sca-mul
         (sca-sub (int16_t t149) (int16_t t150))
         (int16_t (bv #x0040 16)))
        'int32)
       (sca-cast (int16_t input2_multiplier) 'int32))))
    (list (int8_t (bv #x01 8)) (int16_t input1_multiplier))
    #f
    #f
    #f
    'int32)
   (int32_t (bv #x00000010 32))
   #t
   x?$2072
   #t)
  (broadcast ... (int32_t (bv #x00007fff 32))))
 (broadcast ... (int32_t (bv #xffff8000 32))))
Ran bounds analysis for 44 ms
Ran bounds analysis for 40 ms
"Extended success?"
#t
(maximum
 ...
 (minimum
  ...
  (vs-shift-right
   ...
   (vs-mpy-add
    ...
    (combine
     (vs-mpy-add
      ...
      (combine
       #<load-data>
       (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))))
      (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
      #f
      #f
      #f
      'int16)
     (broadcast
      ...
      (sca-mul
       (sca-cast
        (sca-mul
         (sca-sub (int16_t t149) (int16_t t150))
         (int16_t (bv #x0040 16)))
        'int32)
       (sca-cast (int16_t input2_multiplier) 'int32))))
    (list (int8_t (bv #x01 8)) (int16_t input1_multiplier))
    #f
    #f
    #f
    'int32)
   (int32_t (bv #x00000010 32))
   #t
   x?$2072
   #t)
  (broadcast ... (int32_t (bv #x00007fff 32))))
 (broadcast ... (int32_t (bv #xffff8000 32))))
"Building Expr:"
(vec-cast
 (vec-max
  (vec-min
   (vec-add
    (vec-bwand
     (sca-broadcast (int32_t (bv #x00000001 32)) 16)
     (vec-div
      (vec-add
       (vec-mul
        (vec-cast
         (vec-add
          (vec-mul
           (vec-cast
            (load
             (buffer input1 'uint8)
             (ramp
              (sca-add
               (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
               (sca-sub
                (sca-sub (var-lookup 't75) (var-lookup 't81))
                (var-lookup 'input1.min.0)))
              1
              16)
             (aligned 1 0))
            'int16
            16)
           (sca-broadcast (int16_t (bv #x0040 16)) 16))
          (sca-broadcast (sca-mul (int16_t t148) (int16_t (bv #xffc0 16))) 16))
         'int32
         16)
        (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
       (sca-broadcast
        (sca-mul
         (sca-cast
          (sca-mul
           (sca-sub (int16_t t149) (int16_t t150))
           (int16_t (bv #x0040 16)))
          'int32)
         (sca-cast (int16_t input2_multiplier) 'int32))
        16))
      (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
    (vec-div
     (vec-add
      (vec-mul
       (vec-cast
        (vec-add
         (vec-mul
          (vec-cast
           (load
            (buffer input1 'uint8)
            (ramp
             (sca-add
              (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
              (sca-sub
               (sca-sub (var-lookup 't75) (var-lookup 't81))
               (var-lookup 'input1.min.0)))
             1
             16)
            (aligned 1 0))
           'int16
           16)
          (sca-broadcast (int16_t (bv #x0040 16)) 16))
         (sca-broadcast (sca-mul (int16_t t148) (int16_t (bv #xffc0 16))) 16))
        'int32
        16)
       (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
      (sca-broadcast
       (sca-mul
        (sca-cast
         (sca-mul
          (sca-sub (int16_t t149) (int16_t t150))
          (int16_t (bv #x0040 16)))
         'int32)
        (sca-cast (int16_t input2_multiplier) 'int32))
       16))
     (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
   (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
  (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
 'int16
 16)
"Fold templates"
(list
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (combine
    (vs-mpy-add
     ...
     (combine
      #<load-data>
      (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))))
     (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
     #f
     #f
     #f
     'int16)
    (broadcast
     ...
     (sca-mul
      (sca-cast
       (sca-mul
        (sca-sub (int16_t t149) (int16_t t150))
        (int16_t (bv #x0040 16)))
       'int32)
      (sca-cast (int16_t input2_multiplier) 'int32))))
   (list (int8_t (bv #x01 8)) (int16_t input1_multiplier))
   #f
   #f
   #f
   'int32)
  (int32_t (ite x?$2253 (bv #x00000010 32) (bv #x0000000f 32)))
  #t
  x?$2072
  #t)
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (combine
    (vs-mpy-add
     ...
     (combine
      #<load-data>
      (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))))
     (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
     #f
     #f
     #f
     'int16)
    (broadcast
     ...
     (sca-mul
      (sca-cast
       (sca-mul
        (sca-sub (int16_t t149) (int16_t t150))
        (int16_t (bv #x0040 16)))
       'int32)
      (sca-cast (int16_t input2_multiplier) 'int32))))
   (list (int8_t (bv #x01 8)) (int16_t input1_multiplier))
   #f
   #f
   #f
   'int32)
  (int32_t (bv #x00000010 32))
  x?$2254
  x?$2255
  x?$2256))
here(#(struct:vs-shift-right ... #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t148) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f #f #f int16) #(struct:broadcast ... #(struct:sca-mul #(struct:sca-cast #(struct:sca-mul #(struct:sca-sub #(struct:int16_t t149) #(struct:int16_t t150)) #(struct:int16_t (bv #x0040 16))) int32) #(struct:sca-cast #(struct:int16_t input2_multiplier) int32)))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t input1_multiplier)) #f #f #f int32) #(struct:int32_t (ite x?$2253 (bv #x00000010 32) (bv #x0000000f 32))) #t x?$2072 #t) #(struct:vs-shift-right ... #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t148) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f #f #f int16) #(struct:broadcast ... #(struct:sca-mul #(struct:sca-cast #(struct:sca-mul #(struct:sca-sub #(struct:int16_t t149) #(struct:int16_t t150)) #(struct:int16_t (bv #x0040 16))) int32) #(struct:sca-cast #(struct:int16_t input2_multiplier) int32)))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t input1_multiplier)) #f #f #f int32) #(struct:int32_t (bv #x00000010 32)) x?$2254 x?$2255 x?$2256))

"Replace templates"
(list
 (cast
  ...
  (vs-shift-right
   ...
   (vs-mpy-add
    ...
    (combine
     (vs-mpy-add
      ...
      (combine
       #<load-data>
       (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))))
      (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
      #f
      #f
      #f
      'int16)
     (broadcast
      ...
      (sca-mul
       (sca-cast
        (sca-mul
         (sca-sub (int16_t t149) (int16_t t150))
         (int16_t (bv #x0040 16)))
        'int32)
       (sca-cast (int16_t input2_multiplier) 'int32))))
    (list (int8_t (bv #x01 8)) (int16_t input1_multiplier))
    #f
    #f
    #f
    'int32)
   (int32_t (bv #x00000010 32))
   #t
   x?$2072
   #t)
  'int16
  #t)
 (cast ... (broadcast ... (int32_t (bv #x00007fff 32))) 'int16 #t)
 (cast
  ...
  (minimum
   ...
   (vs-shift-right
    ...
    (vs-mpy-add
     ...
     (combine
      (vs-mpy-add
       ...
       (combine
        #<load-data>
        (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))))
       (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
       #f
       #f
       #f
       'int16)
      (broadcast
       ...
       (sca-mul
        (sca-cast
         (sca-mul
          (sca-sub (int16_t t149) (int16_t t150))
          (int16_t (bv #x0040 16)))
         'int32)
        (sca-cast (int16_t input2_multiplier) 'int32))))
     (list (int8_t (bv #x01 8)) (int16_t input1_multiplier))
     #f
     #f
     #f
     'int32)
    (int32_t (bv #x00000010 32))
    #t
    x?$2072
    #t)
   (broadcast ... (int32_t (bv #x00007fff 32))))
  'int16
  #t)
 (cast ... (broadcast ... (int32_t (bv #xffff8000 32))) 'int16 #t))
run-x86-synthesizer
halide-expr:
  (vec-cast
 (vec-max
  (vec-min
   (vec-add
    (vec-bwand
     (sca-broadcast (int32_t (bv #x00000001 32)) 16)
     (vec-div
      (vec-add
       (vec-mul
        (vec-cast
         (vec-add
          (vec-mul
           (vec-cast
            (load
             (buffer input1 'uint8)
             (ramp
              (sca-add
               (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
               (sca-sub
                (sca-sub (var-lookup 't75) (var-lookup 't81))
                (var-lookup 'input1.min.0)))
              1
              16)
             (aligned 1 0))
            'int16
            16)
           (sca-broadcast (int16_t (bv #x0040 16)) 16))
          (sca-broadcast (sca-mul (int16_t t148) (int16_t (bv #xffc0 16))) 16))
         'int32
         16)
        (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
       (sca-broadcast
        (sca-mul
         (sca-cast
          (sca-mul
           (sca-sub (int16_t t149) (int16_t t150))
           (int16_t (bv #x0040 16)))
          'int32)
         (sca-cast (int16_t input2_multiplier) 'int32))
        16))
      (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
    (vec-div
     (vec-add
      (vec-mul
       (vec-cast
        (vec-add
         (vec-mul
          (vec-cast
           (load
            (buffer input1 'uint8)
            (ramp
             (sca-add
              (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
              (sca-sub
               (sca-sub (var-lookup 't75) (var-lookup 't81))
               (var-lookup 'input1.min.0)))
             1
             16)
            (aligned 1 0))
           'int16
           16)
          (sca-broadcast (int16_t (bv #x0040 16)) 16))
         (sca-broadcast (sca-mul (int16_t t148) (int16_t (bv #xffc0 16))) 16))
        'int32
        16)
       (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
      (sca-broadcast
       (sca-mul
        (sca-cast
         (sca-mul
          (sca-sub (int16_t t149) (int16_t t150))
          (int16_t (bv #x0040 16)))
         'int32)
        (sca-cast (int16_t input2_multiplier) 'int32))
       16))
     (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
   (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
  (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
 'int16
 16)
template:
  (cast ... (broadcast ... (int32_t (bv #x00007fff 32))) 'int16 #t)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$2257 idx) (bv #x00007fff 32)) (bvsle (bv #x00007fff 32) (app abstr-vals$2257 idx)))))
optimized-halide-expr:
  (vec-cast
 (vec-max
  (vec-min
   (vec-add
    (vec-bwand
     (sca-broadcast (int32_t (bv #x00000001 32)) 16)
     (vec-div
      (vec-add
       (vec-mul
        (vec-cast
         (vec-add
          (vec-mul
           (vec-cast
            (load
             (buffer input1 'uint8)
             (ramp
              (sca-add
               (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
               (sca-sub
                (sca-sub (var-lookup 't75) (var-lookup 't81))
                (var-lookup 'input1.min.0)))
              1
              16)
             (aligned 1 0))
            'int16
            16)
           (sca-broadcast (int16_t (bv #x0040 16)) 16))
          (sca-broadcast (sca-mul (int16_t t148) (int16_t (bv #xffc0 16))) 16))
         'int32
         16)
        (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
       (sca-broadcast
        (sca-mul
         (sca-cast
          (sca-mul
           (sca-sub (int16_t t149) (int16_t t150))
           (int16_t (bv #x0040 16)))
          'int32)
         (sca-cast (int16_t input2_multiplier) 'int32))
        16))
      (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
    (vec-div
     (vec-add
      (vec-mul
       (vec-cast
        (vec-add
         (vec-mul
          (vec-cast
           (load
            (buffer input1 'uint8)
            (ramp
             (sca-add
              (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
              (sca-sub
               (sca-sub (var-lookup 't75) (var-lookup 't81))
               (var-lookup 'input1.min.0)))
             1
             16)
            (aligned 1 0))
           'int16
           16)
          (sca-broadcast (int16_t (bv #x0040 16)) 16))
         (sca-broadcast (sca-mul (int16_t t148) (int16_t (bv #xffc0 16))) 16))
        'int32
        16)
       (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
      (sca-broadcast
       (sca-mul
        (sca-cast
         (sca-mul
          (sca-sub (int16_t t149) (int16_t t150))
          (int16_t (bv #x0040 16)))
         'int32)
        (sca-cast (int16_t input2_multiplier) 'int32))
       16))
     (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
   #<abstr-halide-expr>)
  (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
 'int16
 16)
optimized-template:
  (cast ... #<abstr-expr> 'int16 #t)
optimized Halide 0:
  (int16_t
 (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (app abstr-vals$2257 0)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (app abstr-vals$2257 0))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (app abstr-vals$2257 0)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (app abstr-vals$2257 0)) (bv #xffff8000 32))))
optimized x86 0:
  (int16_t
 (ite (bvslt (app abstr-vals$2257 0) (bv #xffff8000 32)) (bv #x8000 16) (ite (bvslt (bv #x00007fff 32) (app abstr-vals$2257 0)) (bv #x7fff 16) (extract 15 0 (app abstr-vals$2257 0)))))
run-x86-synthesizer
halide-expr:
  (vec-cast
 (vec-max
  (vec-min
   (vec-add
    (vec-bwand
     (sca-broadcast (int32_t (bv #x00000001 32)) 16)
     (vec-div
      (vec-add
       (vec-mul
        (vec-cast
         (vec-add
          (vec-mul
           (vec-cast
            (load
             (buffer input1 'uint8)
             (ramp
              (sca-add
               (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
               (sca-sub
                (sca-sub (var-lookup 't75) (var-lookup 't81))
                (var-lookup 'input1.min.0)))
              1
              16)
             (aligned 1 0))
            'int16
            16)
           (sca-broadcast (int16_t (bv #x0040 16)) 16))
          (sca-broadcast (sca-mul (int16_t t148) (int16_t (bv #xffc0 16))) 16))
         'int32
         16)
        (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
       (sca-broadcast
        (sca-mul
         (sca-cast
          (sca-mul
           (sca-sub (int16_t t149) (int16_t t150))
           (int16_t (bv #x0040 16)))
          'int32)
         (sca-cast (int16_t input2_multiplier) 'int32))
        16))
      (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
    (vec-div
     (vec-add
      (vec-mul
       (vec-cast
        (vec-add
         (vec-mul
          (vec-cast
           (load
            (buffer input1 'uint8)
            (ramp
             (sca-add
              (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
              (sca-sub
               (sca-sub (var-lookup 't75) (var-lookup 't81))
               (var-lookup 'input1.min.0)))
             1
             16)
            (aligned 1 0))
           'int16
           16)
          (sca-broadcast (int16_t (bv #x0040 16)) 16))
         (sca-broadcast (sca-mul (int16_t t148) (int16_t (bv #xffc0 16))) 16))
        'int32
        16)
       (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
      (sca-broadcast
       (sca-mul
        (sca-cast
         (sca-mul
          (sca-sub (int16_t t149) (int16_t t150))
          (int16_t (bv #x0040 16)))
         'int32)
        (sca-cast (int16_t input2_multiplier) 'int32))
       16))
     (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
   (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
  (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
 'int16
 16)
template:
  (cast ... (broadcast ... (int32_t (bv #xffff8000 32))) 'int16 #t)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$2258 idx) (bv #xffff8000 32)) (bvsle (bv #xffff8000 32) (app abstr-vals$2258 idx)))))
optimized-halide-expr:
  (vec-cast
 (vec-max
  (vec-min
   (vec-add
    (vec-bwand
     (sca-broadcast (int32_t (bv #x00000001 32)) 16)
     (vec-div
      (vec-add
       (vec-mul
        (vec-cast
         (vec-add
          (vec-mul
           (vec-cast
            (load
             (buffer input1 'uint8)
             (ramp
              (sca-add
               (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
               (sca-sub
                (sca-sub (var-lookup 't75) (var-lookup 't81))
                (var-lookup 'input1.min.0)))
              1
              16)
             (aligned 1 0))
            'int16
            16)
           (sca-broadcast (int16_t (bv #x0040 16)) 16))
          (sca-broadcast (sca-mul (int16_t t148) (int16_t (bv #xffc0 16))) 16))
         'int32
         16)
        (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
       (sca-broadcast
        (sca-mul
         (sca-cast
          (sca-mul
           (sca-sub (int16_t t149) (int16_t t150))
           (int16_t (bv #x0040 16)))
          'int32)
         (sca-cast (int16_t input2_multiplier) 'int32))
        16))
      (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
    (vec-div
     (vec-add
      (vec-mul
       (vec-cast
        (vec-add
         (vec-mul
          (vec-cast
           (load
            (buffer input1 'uint8)
            (ramp
             (sca-add
              (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
              (sca-sub
               (sca-sub (var-lookup 't75) (var-lookup 't81))
               (var-lookup 'input1.min.0)))
             1
             16)
            (aligned 1 0))
           'int16
           16)
          (sca-broadcast (int16_t (bv #x0040 16)) 16))
         (sca-broadcast (sca-mul (int16_t t148) (int16_t (bv #xffc0 16))) 16))
        'int32
        16)
       (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
      (sca-broadcast
       (sca-mul
        (sca-cast
         (sca-mul
          (sca-sub (int16_t t149) (int16_t t150))
          (int16_t (bv #x0040 16)))
         'int32)
        (sca-cast (int16_t input2_multiplier) 'int32))
       16))
     (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
   (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
  #<abstr-halide-expr>)
 'int16
 16)
optimized-template:
  (cast ... #<abstr-expr> 'int16 #t)
optimized Halide 0:
  (int16_t
 (extract 15 0 (ite (bvsle (app abstr-vals$2258 0) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (app abstr-vals$2258 0))))
optimized x86 0:
  (int16_t
 (ite (bvslt (app abstr-vals$2258 0) (bv #xffff8000 32)) (bv #x8000 16) (ite (bvslt (bv #x00007fff 32) (app abstr-vals$2258 0)) (bv #x7fff 16) (extract 15 0 (app abstr-vals$2258 0)))))
run-x86-synthesizer
halide-expr:
  (vec-cast
 (vec-max
  (vec-min
   (vec-add
    (vec-bwand
     (sca-broadcast (int32_t (bv #x00000001 32)) 16)
     (vec-div
      (vec-add
       (vec-mul
        (vec-cast
         (vec-add
          (vec-mul
           (vec-cast
            (load
             (buffer input1 'uint8)
             (ramp
              (sca-add
               (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
               (sca-sub
                (sca-sub (var-lookup 't75) (var-lookup 't81))
                (var-lookup 'input1.min.0)))
              1
              16)
             (aligned 1 0))
            'int16
            16)
           (sca-broadcast (int16_t (bv #x0040 16)) 16))
          (sca-broadcast (sca-mul (int16_t t148) (int16_t (bv #xffc0 16))) 16))
         'int32
         16)
        (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
       (sca-broadcast
        (sca-mul
         (sca-cast
          (sca-mul
           (sca-sub (int16_t t149) (int16_t t150))
           (int16_t (bv #x0040 16)))
          'int32)
         (sca-cast (int16_t input2_multiplier) 'int32))
        16))
      (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
    (vec-div
     (vec-add
      (vec-mul
       (vec-cast
        (vec-add
         (vec-mul
          (vec-cast
           (load
            (buffer input1 'uint8)
            (ramp
             (sca-add
              (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
              (sca-sub
               (sca-sub (var-lookup 't75) (var-lookup 't81))
               (var-lookup 'input1.min.0)))
             1
             16)
            (aligned 1 0))
           'int16
           16)
          (sca-broadcast (int16_t (bv #x0040 16)) 16))
         (sca-broadcast (sca-mul (int16_t t148) (int16_t (bv #xffc0 16))) 16))
        'int32
        16)
       (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
      (sca-broadcast
       (sca-mul
        (sca-cast
         (sca-mul
          (sca-sub (int16_t t149) (int16_t t150))
          (int16_t (bv #x0040 16)))
         'int32)
        (sca-cast (int16_t input2_multiplier) 'int32))
       16))
     (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
   (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
  (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
 'int16
 16)
template:
  (vs-shift-right
 ...
 (vs-mpy-add
  ...
  (combine
   (vs-mpy-add
    ...
    (combine
     #<load-data>
     (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))))
    (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
    #f
    #f
    #f
    'int16)
   (broadcast
    ...
    (sca-mul
     (sca-cast
      (sca-mul
       (sca-sub (int16_t t149) (int16_t t150))
       (int16_t (bv #x0040 16)))
      'int32)
     (sca-cast (int16_t input2_multiplier) 'int32))))
  (list (int8_t (bv #x01 8)) (int16_t input1_multiplier))
  #f
  #f
  #f
  'int32)
 (int32_t (ite x?$2253 (bv #x00000010 32) (bv #x0000000f 32)))
 #t
 x?$2072
 #t)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-cast
 (vec-max
  (vec-min
   (vec-add
    (vec-bwand
     (sca-broadcast (int32_t (bv #x00000001 32)) 16)
     (vec-div
      #<abstr-halide-expr>
      (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
    (vec-div
     #<abstr-halide-expr>
     (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
   (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
  (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
 'int16
 16)
optimized-template:
  (vs-shift-right
 ...
 #<abstr-expr>
 (int32_t (ite x?$2253 (bv #x00000010 32) (bv #x0000000f 32)))
 #t
 x?$2072
 #t)
optimized Halide 0:
  (int16_t
 (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$2259 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$2259 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$2259 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$2259 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$2259 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$2259 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$2259 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$2259 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$2259 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$2259 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$2259 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$2259 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$2259 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$2259 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$2259 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$2259 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$2259 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$2259 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$2259 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$2259 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$2259 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$2259 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$2259 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$2259 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))))
optimized x86 0:
  (int32_t
 (bvadd (bvashr (app abstr-vals$2259 0) (ite x?$2253 (bv #x00000010 32) (bv #x0000000f 32))) (bvand (bv #x00000001 32) (bvashr (app abstr-vals$2259 0) (ite x?$2253 (bv #x0000000f 32) (bv #x0000000e 32))))))
Ran synthesizer for 3 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-cast
 (vec-max
  (vec-min
   (vec-add
    (vec-bwand
     (sca-broadcast (int32_t (bv #x00000001 32)) 16)
     (vec-div
      (vec-add
       (vec-mul
        (vec-cast
         (vec-add
          (vec-mul
           (vec-cast
            (load
             (buffer input1 'uint8)
             (ramp
              (sca-add
               (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
               (sca-sub
                (sca-sub (var-lookup 't75) (var-lookup 't81))
                (var-lookup 'input1.min.0)))
              1
              16)
             (aligned 1 0))
            'int16
            16)
           (sca-broadcast (int16_t (bv #x0040 16)) 16))
          (sca-broadcast (sca-mul (int16_t t148) (int16_t (bv #xffc0 16))) 16))
         'int32
         16)
        (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
       (sca-broadcast
        (sca-mul
         (sca-cast
          (sca-mul
           (sca-sub (int16_t t149) (int16_t t150))
           (int16_t (bv #x0040 16)))
          'int32)
         (sca-cast (int16_t input2_multiplier) 'int32))
        16))
      (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
    (vec-div
     (vec-add
      (vec-mul
       (vec-cast
        (vec-add
         (vec-mul
          (vec-cast
           (load
            (buffer input1 'uint8)
            (ramp
             (sca-add
              (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
              (sca-sub
               (sca-sub (var-lookup 't75) (var-lookup 't81))
               (var-lookup 'input1.min.0)))
             1
             16)
            (aligned 1 0))
           'int16
           16)
          (sca-broadcast (int16_t (bv #x0040 16)) 16))
         (sca-broadcast (sca-mul (int16_t t148) (int16_t (bv #xffc0 16))) 16))
        'int32
        16)
       (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
      (sca-broadcast
       (sca-mul
        (sca-cast
         (sca-mul
          (sca-sub (int16_t t149) (int16_t t150))
          (int16_t (bv #x0040 16)))
         'int32)
        (sca-cast (int16_t input2_multiplier) 'int32))
       16))
     (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
   (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
  (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
 'int16
 16)
template:
  (vs-shift-right
 ...
 (vs-mpy-add
  ...
  (combine
   (vs-mpy-add
    ...
    (combine
     #<load-data>
     (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))))
    (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
    #f
    #f
    #f
    'int16)
   (broadcast
    ...
    (sca-mul
     (sca-cast
      (sca-mul
       (sca-sub (int16_t t149) (int16_t t150))
       (int16_t (bv #x0040 16)))
      'int32)
     (sca-cast (int16_t input2_multiplier) 'int32))))
  (list (int8_t (bv #x01 8)) (int16_t input1_multiplier))
  #f
  #f
  #f
  'int32)
 (int32_t (bv #x00000010 32))
 x?$2254
 x?$2255
 x?$2256)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-cast
 (vec-max
  (vec-min
   (vec-add
    (vec-bwand
     (sca-broadcast (int32_t (bv #x00000001 32)) 16)
     (vec-div
      #<abstr-halide-expr>
      (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
    (vec-div
     #<abstr-halide-expr>
     (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
   (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
  (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
 'int16
 16)
optimized-template:
  (vs-shift-right
 ...
 #<abstr-expr>
 (int32_t (bv #x00000010 32))
 x?$2254
 x?$2255
 x?$2256)
optimized Halide 0:
  (int16_t
 (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$2260 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$2260 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$2260 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$2260 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$2260 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$2260 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$2260 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$2260 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$2260 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$2260 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$2260 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$2260 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$2260 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$2260 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$2260 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$2260 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$2260 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$2260 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$2260 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$2260 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$2260 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$2260 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$2260 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$2260 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))))
optimized x86 0:
  (int32_t
 (ite x?$2254 (bvadd (ite x?$2256 (bvashr (app abstr-vals$2260 0) (bv #x00000010 32)) (bvlshr (app abstr-vals$2260 0) (bv #x00000010 32))) (bvand (bv #x00000001 32) (ite x?$2256 (bvashr (app abstr-vals$2260 0) (bv #x0000000f 32)) (bvlshr (app abstr-vals$2260 0) (bv #x0000000f 32))))) (ite x?$2256 (bvashr (app abstr-vals$2260 0) (bv #x00000010 32)) (bvlshr (app abstr-vals$2260 0) (bv #x00000010 32)))))
Ran synthesizer for 3 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-cast
 (vec-max
  (vec-min
   (vec-add
    (vec-bwand
     (sca-broadcast (int32_t (bv #x00000001 32)) 16)
     (vec-div
      (vec-add
       (vec-mul
        (vec-cast
         (vec-add
          (vec-mul
           (vec-cast
            (load
             (buffer input1 'uint8)
             (ramp
              (sca-add
               (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
               (sca-sub
                (sca-sub (var-lookup 't75) (var-lookup 't81))
                (var-lookup 'input1.min.0)))
              1
              16)
             (aligned 1 0))
            'int16
            16)
           (sca-broadcast (int16_t (bv #x0040 16)) 16))
          (sca-broadcast (sca-mul (int16_t t148) (int16_t (bv #xffc0 16))) 16))
         'int32
         16)
        (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
       (sca-broadcast
        (sca-mul
         (sca-cast
          (sca-mul
           (sca-sub (int16_t t149) (int16_t t150))
           (int16_t (bv #x0040 16)))
          'int32)
         (sca-cast (int16_t input2_multiplier) 'int32))
        16))
      (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
    (vec-div
     (vec-add
      (vec-mul
       (vec-cast
        (vec-add
         (vec-mul
          (vec-cast
           (load
            (buffer input1 'uint8)
            (ramp
             (sca-add
              (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
              (sca-sub
               (sca-sub (var-lookup 't75) (var-lookup 't81))
               (var-lookup 'input1.min.0)))
             1
             16)
            (aligned 1 0))
           'int16
           16)
          (sca-broadcast (int16_t (bv #x0040 16)) 16))
         (sca-broadcast (sca-mul (int16_t t148) (int16_t (bv #xffc0 16))) 16))
        'int32
        16)
       (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
      (sca-broadcast
       (sca-mul
        (sca-cast
         (sca-mul
          (sca-sub (int16_t t149) (int16_t t150))
          (int16_t (bv #x0040 16)))
         'int32)
        (sca-cast (int16_t input2_multiplier) 'int32))
       16))
     (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
   (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
  (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
 'int16
 16)
template:
  (cast
 ...
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (combine
    (vs-mpy-add
     ...
     (combine
      #<load-data>
      (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))))
     (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
     #f
     #f
     #f
     'int16)
    (broadcast
     ...
     (sca-mul
      (sca-cast
       (sca-mul
        (sca-sub (int16_t t149) (int16_t t150))
        (int16_t (bv #x0040 16)))
       'int32)
      (sca-cast (int16_t input2_multiplier) 'int32))))
   (list (int8_t (bv #x01 8)) (int16_t input1_multiplier))
   #f
   #f
   #f
   'int32)
  (int32_t (bv #x00000010 32))
  #t
  x?$2072
  #t)
 'int16
 #t)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$2261 idx) (bv #x00008000 32)) (bvsle (bv #xffff8000 32) (app abstr-vals$2261 idx)))))
optimized-halide-expr:
  (vec-cast
 (vec-max
  (vec-min
   #<abstr-halide-expr>
   (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
  (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
 'int16
 16)
optimized-template:
  (cast ... #<abstr-expr> 'int16 #t)
optimized Halide 0:
  (int16_t
 (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (app abstr-vals$2261 0) (bv #x00007fff 32)) (app abstr-vals$2261 0) (bv #x00007fff 32))) (ite (bvsle (app abstr-vals$2261 0) (bv #x00007fff 32)) (app abstr-vals$2261 0) (bv #x00007fff 32)) (bv #xffff8000 32))))
optimized x86 0:
  (int16_t
 (ite (bvslt (app abstr-vals$2261 0) (bv #xffff8000 32)) (bv #x8000 16) (ite (bvslt (bv #x00007fff 32) (app abstr-vals$2261 0)) (bv #x7fff 16) (extract 15 0 (app abstr-vals$2261 0)))))
Ran synthesizer for 102 ms
(model)
(vec-cast
 (vec-max
  (vec-min
   #<abstr-halide-expr>
   (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
  (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
 'int16
 16)
(cast
 ...
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (combine
    (vs-mpy-add
     ...
     (combine
      #<load-data>
      (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))))
     (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
     #f
     #f
     #f
     'int16)
    (broadcast
     ...
     (sca-mul
      (sca-cast
       (sca-mul
        (sca-sub (int16_t t149) (int16_t t150))
        (int16_t (bv #x0040 16)))
       'int32)
      (sca-cast (int16_t input2_multiplier) 'int32))))
   (list (int8_t (bv #x01 8)) (int16_t input1_multiplier))
   #f
   #f
   #f
   'int32)
  (int32_t (bv #x00000010 32))
  #t
  x?$2072
  #t)
 'int16
 #t)
Ran bounds analysis for 26 ms
Ran bounds analysis for 17 ms
"Success?"
#t
(cast ... (vs-shift-right ... (vs-mpy-add ... (combine (vs-mpy-add ... (combine #<load-data> (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16))))) (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16))) #f #f #f 'int16) (broadcast ... (sca-mul (sca-cast (sca-mul (sca-sub (int16_t t149) (int16_t t150)) (int16_t (bv #x0040 16))) 'int32) (sca-cast (int16_t input2_multiplier) 'int32)))) (list (int8_t (bv #x01 8)) (int16_t input1_multiplier)) #f #f #f 'int32) (int32_t (bv #x00000010 32)) #t x?$2072 #t) 'int16 #t)
"Building Expr:"
(vec-cast
 (vec-cast
  (vec-max
   (vec-min
    (vec-add
     (vec-bwand
      (sca-broadcast (int32_t (bv #x00000001 32)) 16)
      (vec-div
       (vec-add
        (vec-mul
         (vec-cast
          (vec-add
           (vec-mul
            (vec-cast
             (load
              (buffer input1 'uint8)
              (ramp
               (sca-add
                (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
                (sca-sub
                 (sca-sub (var-lookup 't75) (var-lookup 't81))
                 (var-lookup 'input1.min.0)))
               1
               16)
              (aligned 1 0))
             'int16
             16)
            (sca-broadcast (int16_t (bv #x0040 16)) 16))
           (sca-broadcast
            (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))
            16))
          'int32
          16)
         (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
        (sca-broadcast
         (sca-mul
          (sca-cast
           (sca-mul
            (sca-sub (int16_t t149) (int16_t t150))
            (int16_t (bv #x0040 16)))
           'int32)
          (sca-cast (int16_t input2_multiplier) 'int32))
         16))
       (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
     (vec-div
      (vec-add
       (vec-mul
        (vec-cast
         (vec-add
          (vec-mul
           (vec-cast
            (load
             (buffer input1 'uint8)
             (ramp
              (sca-add
               (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
               (sca-sub
                (sca-sub (var-lookup 't75) (var-lookup 't81))
                (var-lookup 'input1.min.0)))
              1
              16)
             (aligned 1 0))
            'int16
            16)
           (sca-broadcast (int16_t (bv #x0040 16)) 16))
          (sca-broadcast (sca-mul (int16_t t148) (int16_t (bv #xffc0 16))) 16))
         'int32
         16)
        (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
       (sca-broadcast
        (sca-mul
         (sca-cast
          (sca-mul
           (sca-sub (int16_t t149) (int16_t t150))
           (int16_t (bv #x0040 16)))
          'int32)
         (sca-cast (int16_t input2_multiplier) 'int32))
        16))
      (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
    (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
   (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
  'int16
  16)
 'int32
 16)
"Fold templates"
(list
 (vs-mpy-add
  ...
  (combine
   (vs-mpy-add
    ...
    (combine
     #<load-data>
     (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))))
    (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
    #f
    #f
    #f
    'int16)
   (broadcast
    ...
    (sca-mul
     (sca-cast
      (sca-mul
       (sca-sub (int16_t t149) (int16_t t150))
       (int16_t (bv #x0040 16)))
      'int32)
     (sca-cast (int16_t input2_multiplier) 'int32))))
  (list (int8_t (bv #x01 8)) (int16_t input1_multiplier))
  x?$2268
  x?$2269
  x?$2270
  'int32)
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (combine
    (vs-mpy-add
     ...
     (combine
      #<load-data>
      (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))))
     (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
     #f
     #f
     #f
     'int16)
    (broadcast
     ...
     (sca-mul
      (sca-cast
       (sca-mul
        (sca-sub (int16_t t149) (int16_t t150))
        (int16_t (bv #x0040 16)))
       'int32)
      (sca-cast (int16_t input2_multiplier) 'int32))))
   (list (int8_t (bv #x01 8)) (int16_t input1_multiplier))
   #f
   #f
   #f
   'int32)
  (int32_t (ite x?$2264 (bv #x00000010 32) (bv #x0000000f 32)))
  #t
  x?$2072
  #t)
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (combine
    (vs-mpy-add
     ...
     (combine
      #<load-data>
      (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))))
     (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
     #f
     #f
     #f
     'int16)
    (broadcast
     ...
     (sca-mul
      (sca-cast
       (sca-mul
        (sca-sub (int16_t t149) (int16_t t150))
        (int16_t (bv #x0040 16)))
       'int32)
      (sca-cast (int16_t input2_multiplier) 'int32))))
   (list (int8_t (bv #x01 8)) (int16_t input1_multiplier))
   #f
   #f
   #f
   'int32)
  (int32_t (bv #x00000010 32))
  x?$2265
  x?$2266
  x?$2267)
 (cast
  ...
  (vs-shift-right
   ...
   (vs-mpy-add
    ...
    (combine
     (vs-mpy-add
      ...
      (combine
       #<load-data>
       (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))))
      (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
      #f
      #f
      #f
      'int16)
     (broadcast
      ...
      (sca-mul
       (sca-cast
        (sca-mul
         (sca-sub (int16_t t149) (int16_t t150))
         (int16_t (bv #x0040 16)))
        'int32)
       (sca-cast (int16_t input2_multiplier) 'int32))))
    (list (int8_t (bv #x01 8)) (int16_t input1_multiplier))
    #f
    #f
    #f
    'int32)
   (int32_t (bv #x00000010 32))
   #t
   x?$2072
   #t)
  'int32
  x?$2263))
here(#(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t148) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f #f #f int16) #(struct:broadcast ... #(struct:sca-mul #(struct:sca-cast #(struct:sca-mul #(struct:sca-sub #(struct:int16_t t149) #(struct:int16_t t150)) #(struct:int16_t (bv #x0040 16))) int32) #(struct:sca-cast #(struct:int16_t input2_multiplier) int32)))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t input1_multiplier)) x?$2268 x?$2269 x?$2270 int32) #(struct:vs-shift-right ... #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t148) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f #f #f int16) #(struct:broadcast ... #(struct:sca-mul #(struct:sca-cast #(struct:sca-mul #(struct:sca-sub #(struct:int16_t t149) #(struct:int16_t t150)) #(struct:int16_t (bv #x0040 16))) int32) #(struct:sca-cast #(struct:int16_t input2_multiplier) int32)))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t input1_multiplier)) #f #f #f int32) #(struct:int32_t (ite x?$2264 (bv #x00000010 32) (bv #x0000000f 32))) #t x?$2072 #t) #(struct:vs-shift-right ... #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t148) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f #f #f int16) #(struct:broadcast ... #(struct:sca-mul #(struct:sca-cast #(struct:sca-mul #(struct:sca-sub #(struct:int16_t t149) #(struct:int16_t t150)) #(struct:int16_t (bv #x0040 16))) int32) #(struct:sca-cast #(struct:int16_t input2_multiplier) int32)))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t input1_multiplier)) #f #f #f int32) #(struct:int32_t (bv #x00000010 32)) x?$2265 x?$2266 x?$2267) #(struct:cast ... #(struct:vs-shift-right ... #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t148) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f #f #f int16) #(struct:broadcast ... #(struct:sca-mul #(struct:sca-cast #(struct:sca-mul #(struct:sca-sub #(struct:int16_t t149) #(struct:int16_t t150)) #(struct:int16_t (bv #x0040 16))) int32) #(struct:sca-cast #(struct:int16_t input2_multiplier) int32)))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t input1_multiplier)) #f #f #f int32) #(struct:int32_t (bv #x00000010 32)) #t x?$2072 #t) int32 x?$2263))

"Replace templates"
(list
 (cast
  ...
  (vs-shift-right
   ...
   (vs-mpy-add
    ...
    (combine
     (vs-mpy-add
      ...
      (combine
       #<load-data>
       (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))))
      (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
      #f
      #f
      #f
      'int16)
     (broadcast
      ...
      (sca-mul
       (sca-cast
        (sca-mul
         (sca-sub (int16_t t149) (int16_t t150))
         (int16_t (bv #x0040 16)))
        'int32)
       (sca-cast (int16_t input2_multiplier) 'int32))))
    (list (int8_t (bv #x01 8)) (int16_t input1_multiplier))
    #f
    #f
    #f
    'int32)
   (int32_t (bv #x00000010 32))
   #t
   x?$2072
   #t)
  'int32
  #f))
run-x86-synthesizer
halide-expr:
  (vec-cast
 (vec-cast
  (vec-max
   (vec-min
    (vec-add
     (vec-bwand
      (sca-broadcast (int32_t (bv #x00000001 32)) 16)
      (vec-div
       (vec-add
        (vec-mul
         (vec-cast
          (vec-add
           (vec-mul
            (vec-cast
             (load
              (buffer input1 'uint8)
              (ramp
               (sca-add
                (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
                (sca-sub
                 (sca-sub (var-lookup 't75) (var-lookup 't81))
                 (var-lookup 'input1.min.0)))
               1
               16)
              (aligned 1 0))
             'int16
             16)
            (sca-broadcast (int16_t (bv #x0040 16)) 16))
           (sca-broadcast
            (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))
            16))
          'int32
          16)
         (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
        (sca-broadcast
         (sca-mul
          (sca-cast
           (sca-mul
            (sca-sub (int16_t t149) (int16_t t150))
            (int16_t (bv #x0040 16)))
           'int32)
          (sca-cast (int16_t input2_multiplier) 'int32))
         16))
       (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
     (vec-div
      (vec-add
       (vec-mul
        (vec-cast
         (vec-add
          (vec-mul
           (vec-cast
            (load
             (buffer input1 'uint8)
             (ramp
              (sca-add
               (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
               (sca-sub
                (sca-sub (var-lookup 't75) (var-lookup 't81))
                (var-lookup 'input1.min.0)))
              1
              16)
             (aligned 1 0))
            'int16
            16)
           (sca-broadcast (int16_t (bv #x0040 16)) 16))
          (sca-broadcast (sca-mul (int16_t t148) (int16_t (bv #xffc0 16))) 16))
         'int32
         16)
        (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
       (sca-broadcast
        (sca-mul
         (sca-cast
          (sca-mul
           (sca-sub (int16_t t149) (int16_t t150))
           (int16_t (bv #x0040 16)))
          'int32)
         (sca-cast (int16_t input2_multiplier) 'int32))
        16))
      (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
    (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
   (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
  'int16
  16)
 'int32
 16)
template:
  (vs-mpy-add
 ...
 (combine
  (vs-mpy-add
   ...
   (combine
    #<load-data>
    (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))))
   (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
   #f
   #f
   #f
   'int16)
  (broadcast
   ...
   (sca-mul
    (sca-cast
     (sca-mul (sca-sub (int16_t t149) (int16_t t150)) (int16_t (bv #x0040 16)))
     'int32)
    (sca-cast (int16_t input2_multiplier) 'int32))))
 (list (int8_t (bv #x01 8)) (int16_t input1_multiplier))
 x?$2268
 x?$2269
 x?$2270
 'int32)
axioms:
  (list
 #t
 (forall (idx) (&& (bvsle (app abstr-vals$2274 idx) (bv #x40000000 32)) (bvsle (bv #xc0008000 32) (app abstr-vals$2274 idx)))))
optimized-halide-expr:
  (vec-cast
 (vec-cast
  (vec-max
   (vec-min
    (vec-add
     (vec-bwand
      (sca-broadcast (int32_t (bv #x00000001 32)) 16)
      (vec-div
       (vec-add
        (vec-mul
         (vec-cast #<abstr-halide-expr> 'int32 16)
         (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
        #<abstr-halide-expr>)
       (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
     (vec-div
      (vec-add
       (vec-mul
        (vec-cast #<abstr-halide-expr> 'int32 16)
        (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
       #<abstr-halide-expr>)
      (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
    (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
   (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
  'int16
  16)
 'int32
 16)
optimized-template:
  (vs-mpy-add
 ...
 (combine #<abstr-expr> #<abstr-expr>)
 (list (int8_t (bv #x01 8)) (int16_t input1_multiplier))
 x?$2268
 x?$2269
 x?$2270
 'int32)
optimized Halide 0:
  (int32_t
 (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (app abstr-vals$2274 0) (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (app abstr-vals$2273 0) (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (app abstr-vals$2274 0) (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (app abstr-vals$2273 0) (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (app abstr-vals$2274 0) (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (app abstr-vals$2273 0) (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (app abstr-vals$2274 0) (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (app abstr-vals$2273 0) (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (app abstr-vals$2274 0) (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (app abstr-vals$2273 0) (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (app abstr-vals$2274 0) (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (app abstr-vals$2273 0) (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (app abstr-vals$2274 0) (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (app abstr-vals$2273 0) (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (app abstr-vals$2274 0) (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (app abstr-vals$2273 0) (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (app abstr-vals$2274 0) (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (app abstr-vals$2273 0) (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (app abstr-vals$2274 0) (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (app abstr-vals$2273 0) (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (app abstr-vals$2274 0) (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (app abstr-vals$2273 0) (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (app abstr-vals$2274 0) (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (app abstr-vals$2273 0) (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (app abstr-vals$2274 0) (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (app abstr-vals$2273 0) (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (app abstr-vals$2274 0) (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (app abstr-vals$2273 0) (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (app abstr-vals$2274 0) (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (app abstr-vals$2273 0) (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (app abstr-vals$2274 0) (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (app abstr-vals$2273 0) (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (app abstr-vals$2274 0) (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (app abstr-vals$2273 0) (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (app abstr-vals$2274 0) (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (app abstr-vals$2273 0) (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (app abstr-vals$2274 0) (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (app abstr-vals$2273 0) (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (app abstr-vals$2274 0) (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (app abstr-vals$2273 0) (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (app abstr-vals$2274 0) (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (app abstr-vals$2273 0) (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (app abstr-vals$2274 0) (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (app abstr-vals$2273 0) (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (app abstr-vals$2274 0) (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (app abstr-vals$2273 0) (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (app abstr-vals$2274 0) (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (app abstr-vals$2273 0) (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32)))
optimized x86 0:
  (int32_t
 (ite* (⊢ (&& (! x?$2270) (! (&& x?$2268 x?$2270))) (ite x?$2268 (bvadd (ite x?$2268 (bvadd (ite x?$2269 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (app abstr-vals$2274 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2269 (bv #x00000001 32) (bv #x00000000 32))))) (app abstr-vals$2274 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2269 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (app abstr-vals$2274 0) (ite x?$2269 (bv #x00000001 32) (bv #x00000000 32)))) (ite (bvsle (bvadd (bv #x80000000 32) (bvneg (ite (bvsle (ite x?$2268 (bvadd (ite x?$2269 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (app abstr-vals$2274 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2269 (bv #x00000001 32) (bv #x00000000 32))))) (app abstr-vals$2274 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2269 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (app abstr-vals$2274 0) (ite x?$2269 (bv #x00000001 32) (bv #x00000000 32)))) (bv #x00000000 32)) (ite x?$2268 (bvadd (ite x?$2269 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (app abstr-vals$2274 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2269 (bv #x00000001 32) (bv #x00000000 32))))) (app abstr-vals$2274 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2269 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (app abstr-vals$2274 0) (ite x?$2269 (bv #x00000001 32) (bv #x00000000 32)))) (bv #x00000000 32)))) (ite (bvsle (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (app abstr-vals$2273 0) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$2268 (bvadd (ite x?$2269 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (app abstr-vals$2274 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2269 (bv #x00000001 32) (bv #x00000000 32))))) (app abstr-vals$2274 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2269 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (app abstr-vals$2274 0) (ite x?$2269 (bv #x00000001 32) (bv #x00000000 32))))) (ite x?$2268 (bvadd (ite x?$2269 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (app abstr-vals$2274 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2269 (bv #x00000001 32) (bv #x00000000 32))))) (app abstr-vals$2274 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2269 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (app abstr-vals$2274 0) (ite x?$2269 (bv #x00000001 32) (bv #x00000000 32)))) (bv #x00000000 32))))) (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (app abstr-vals$2273 0) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$2268 (bvadd (ite x?$2269 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (app abstr-vals$2274 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2269 (bv #x00000001 32) (bv #x00000000 32))))) (app abstr-vals$2274 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2269 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (app abstr-vals$2274 0) (ite x?$2269 (bv #x00000001 32) (bv #x00000000 32))))) (ite x?$2268 (bvadd (ite x?$2269 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (app abstr-vals$2274 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2269 (bv #x00000001 32) (bv #x00000000 32))))) (app abstr-vals$2274 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2269 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (app abstr-vals$2274 0) (ite x?$2269 (bv #x00000001 32) (bv #x00000000 32)))) (bv #x00000000 32)))))) (ite (bvsle (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (app abstr-vals$2273 0) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$2268 (bvadd (ite x?$2269 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (app abstr-vals$2274 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2269 (bv #x00000001 32) (bv #x00000000 32))))) (app abstr-vals$2274 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2269 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (app abstr-vals$2274 0) (ite x?$2269 (bv #x00000001 32) (bv #x00000000 32))))) (ite x?$2268 (bvadd (ite x?$2269 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (app abstr-vals$2274 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2269 (bv #x00000001 32) (bv #x00000000 32))))) (app abstr-vals$2274 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2269 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (app abstr-vals$2274 0) (ite x?$2269 (bv #x00000001 32) (bv #x00000000 32)))) (bv #x00000000 32))))) (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (app abstr-vals$2273 0) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$2268 (bvadd (ite x?$2269 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (app abstr-vals$2274 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2269 (bv #x00000001 32) (bv #x00000000 32))))) (app abstr-vals$2274 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2269 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (app abstr-vals$2274 0) (ite x?$2269 (bv #x00000001 32) (bv #x00000000 32))))) (ite x?$2268 (bvadd (ite x?$2269 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (app abstr-vals$2274 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2269 (bv #x00000001 32) (bv #x00000000 32))))) (app abstr-vals$2274 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2269 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (app abstr-vals$2274 0) (ite x?$2269 (bv #x00000001 32) (bv #x00000000 32)))) (bv #x00000000 32))))) (bvadd (bv #x80000000 32) (bvneg (ite (bvsle (ite x?$2268 (bvadd (ite x?$2269 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (app abstr-vals$2274 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2269 (bv #x00000001 32) (bv #x00000000 32))))) (app abstr-vals$2274 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2269 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (app abstr-vals$2274 0) (ite x?$2269 (bv #x00000001 32) (bv #x00000000 32)))) (bv #x00000000 32)) (ite x?$2268 (bvadd (ite x?$2269 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (app abstr-vals$2274 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2269 (bv #x00000001 32) (bv #x00000000 32))))) (app abstr-vals$2274 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2269 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (app abstr-vals$2274 0) (ite x?$2269 (bv #x00000001 32) (bv #x00000000 32)))) (bv #x00000000 32)))))) (bvadd (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (app abstr-vals$2273 0) (bitvector 32))) (ite x?$2268 (bvadd (ite x?$2269 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (app abstr-vals$2274 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2269 (bv #x00000001 32) (bv #x00000000 32))))) (app abstr-vals$2274 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2269 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (app abstr-vals$2274 0) (ite x?$2269 (bv #x00000001 32) (bv #x00000000 32))))))) (⊢ (|| (&& x?$2268 x?$2270) (&& x?$2270 (! (&& x?$2268 x?$2270)))) (bvashr (ite x?$2268 (bvadd (ite x?$2268 (bvadd (ite x?$2269 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (app abstr-vals$2274 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2269 (bv #x00000001 32) (bv #x00000000 32))))) (app abstr-vals$2274 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2269 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (app abstr-vals$2274 0) (ite x?$2269 (bv #x00000001 32) (bv #x00000000 32)))) (ite (bvsle (bvadd (bv #x80000000 32) (bvneg (ite (bvsle (ite x?$2268 (bvadd (ite x?$2269 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (app abstr-vals$2274 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2269 (bv #x00000001 32) (bv #x00000000 32))))) (app abstr-vals$2274 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2269 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (app abstr-vals$2274 0) (ite x?$2269 (bv #x00000001 32) (bv #x00000000 32)))) (bv #x00000000 32)) (ite x?$2268 (bvadd (ite x?$2269 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (app abstr-vals$2274 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2269 (bv #x00000001 32) (bv #x00000000 32))))) (app abstr-vals$2274 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2269 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (app abstr-vals$2274 0) (ite x?$2269 (bv #x00000001 32) (bv #x00000000 32)))) (bv #x00000000 32)))) (ite (bvsle (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (app abstr-vals$2273 0) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$2268 (bvadd (ite x?$2269 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (app abstr-vals$2274 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2269 (bv #x00000001 32) (bv #x00000000 32))))) (app abstr-vals$2274 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2269 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (app abstr-vals$2274 0) (ite x?$2269 (bv #x00000001 32) (bv #x00000000 32))))) (ite x?$2268 (bvadd (ite x?$2269 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (app abstr-vals$2274 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2269 (bv #x00000001 32) (bv #x00000000 32))))) (app abstr-vals$2274 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2269 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (app abstr-vals$2274 0) (ite x?$2269 (bv #x00000001 32) (bv #x00000000 32)))) (bv #x00000000 32))))) (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (app abstr-vals$2273 0) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$2268 (bvadd (ite x?$2269 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (app abstr-vals$2274 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2269 (bv #x00000001 32) (bv #x00000000 32))))) (app abstr-vals$2274 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2269 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (app abstr-vals$2274 0) (ite x?$2269 (bv #x00000001 32) (bv #x00000000 32))))) (ite x?$2268 (bvadd (ite x?$2269 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (app abstr-vals$2274 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2269 (bv #x00000001 32) (bv #x00000000 32))))) (app abstr-vals$2274 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2269 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (app abstr-vals$2274 0) (ite x?$2269 (bv #x00000001 32) (bv #x00000000 32)))) (bv #x00000000 32)))))) (ite (bvsle (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (app abstr-vals$2273 0) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$2268 (bvadd (ite x?$2269 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (app abstr-vals$2274 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2269 (bv #x00000001 32) (bv #x00000000 32))))) (app abstr-vals$2274 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2269 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (app abstr-vals$2274 0) (ite x?$2269 (bv #x00000001 32) (bv #x00000000 32))))) (ite x?$2268 (bvadd (ite x?$2269 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (app abstr-vals$2274 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2269 (bv #x00000001 32) (bv #x00000000 32))))) (app abstr-vals$2274 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2269 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (app abstr-vals$2274 0) (ite x?$2269 (bv #x00000001 32) (bv #x00000000 32)))) (bv #x00000000 32))))) (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (app abstr-vals$2273 0) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$2268 (bvadd (ite x?$2269 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (app abstr-vals$2274 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2269 (bv #x00000001 32) (bv #x00000000 32))))) (app abstr-vals$2274 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2269 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (app abstr-vals$2274 0) (ite x?$2269 (bv #x00000001 32) (bv #x00000000 32))))) (ite x?$2268 (bvadd (ite x?$2269 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (app abstr-vals$2274 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2269 (bv #x00000001 32) (bv #x00000000 32))))) (app abstr-vals$2274 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2269 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (app abstr-vals$2274 0) (ite x?$2269 (bv #x00000001 32) (bv #x00000000 32)))) (bv #x00000000 32))))) (bvadd (bv #x80000000 32) (bvneg (ite (bvsle (ite x?$2268 (bvadd (ite x?$2269 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (app abstr-vals$2274 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2269 (bv #x00000001 32) (bv #x00000000 32))))) (app abstr-vals$2274 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2269 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (app abstr-vals$2274 0) (ite x?$2269 (bv #x00000001 32) (bv #x00000000 32)))) (bv #x00000000 32)) (ite x?$2268 (bvadd (ite x?$2269 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (app abstr-vals$2274 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2269 (bv #x00000001 32) (bv #x00000000 32))))) (app abstr-vals$2274 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2269 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (app abstr-vals$2274 0) (ite x?$2269 (bv #x00000001 32) (bv #x00000000 32)))) (bv #x00000000 32)))))) (bvadd (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (app abstr-vals$2273 0) (bitvector 32))) (ite x?$2268 (bvadd (ite x?$2269 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (app abstr-vals$2274 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2269 (bv #x00000001 32) (bv #x00000000 32))))) (app abstr-vals$2274 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2269 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (app abstr-vals$2274 0) (ite x?$2269 (bv #x00000001 32) (bv #x00000000 32)))))) (bv #x00000001 32)))))
Ran synthesizer for 1291 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-cast
 (vec-cast
  (vec-max
   (vec-min
    (vec-add
     (vec-bwand
      (sca-broadcast (int32_t (bv #x00000001 32)) 16)
      (vec-div
       (vec-add
        (vec-mul
         (vec-cast
          (vec-add
           (vec-mul
            (vec-cast
             (load
              (buffer input1 'uint8)
              (ramp
               (sca-add
                (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
                (sca-sub
                 (sca-sub (var-lookup 't75) (var-lookup 't81))
                 (var-lookup 'input1.min.0)))
               1
               16)
              (aligned 1 0))
             'int16
             16)
            (sca-broadcast (int16_t (bv #x0040 16)) 16))
           (sca-broadcast
            (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))
            16))
          'int32
          16)
         (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
        (sca-broadcast
         (sca-mul
          (sca-cast
           (sca-mul
            (sca-sub (int16_t t149) (int16_t t150))
            (int16_t (bv #x0040 16)))
           'int32)
          (sca-cast (int16_t input2_multiplier) 'int32))
         16))
       (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
     (vec-div
      (vec-add
       (vec-mul
        (vec-cast
         (vec-add
          (vec-mul
           (vec-cast
            (load
             (buffer input1 'uint8)
             (ramp
              (sca-add
               (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
               (sca-sub
                (sca-sub (var-lookup 't75) (var-lookup 't81))
                (var-lookup 'input1.min.0)))
              1
              16)
             (aligned 1 0))
            'int16
            16)
           (sca-broadcast (int16_t (bv #x0040 16)) 16))
          (sca-broadcast (sca-mul (int16_t t148) (int16_t (bv #xffc0 16))) 16))
         'int32
         16)
        (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
       (sca-broadcast
        (sca-mul
         (sca-cast
          (sca-mul
           (sca-sub (int16_t t149) (int16_t t150))
           (int16_t (bv #x0040 16)))
          'int32)
         (sca-cast (int16_t input2_multiplier) 'int32))
        16))
      (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
    (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
   (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
  'int16
  16)
 'int32
 16)
template:
  (vs-shift-right
 ...
 (vs-mpy-add
  ...
  (combine
   (vs-mpy-add
    ...
    (combine
     #<load-data>
     (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))))
    (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
    #f
    #f
    #f
    'int16)
   (broadcast
    ...
    (sca-mul
     (sca-cast
      (sca-mul
       (sca-sub (int16_t t149) (int16_t t150))
       (int16_t (bv #x0040 16)))
      'int32)
     (sca-cast (int16_t input2_multiplier) 'int32))))
  (list (int8_t (bv #x01 8)) (int16_t input1_multiplier))
  #f
  #f
  #f
  'int32)
 (int32_t (ite x?$2264 (bv #x00000010 32) (bv #x0000000f 32)))
 #t
 x?$2072
 #t)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-cast
 (vec-cast
  (vec-max
   (vec-min
    (vec-add
     (vec-bwand
      (sca-broadcast (int32_t (bv #x00000001 32)) 16)
      (vec-div
       #<abstr-halide-expr>
       (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
     (vec-div
      #<abstr-halide-expr>
      (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
    (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
   (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
  'int16
  16)
 'int32
 16)
optimized-template:
  (vs-shift-right
 ...
 #<abstr-expr>
 (int32_t (ite x?$2264 (bv #x00000010 32) (bv #x0000000f 32)))
 #t
 x?$2072
 #t)
optimized Halide 0:
  (int32_t
 (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$2275 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$2275 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$2275 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$2275 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$2275 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$2275 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$2275 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$2275 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$2275 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$2275 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$2275 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$2275 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$2275 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$2275 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$2275 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$2275 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$2275 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$2275 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$2275 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$2275 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$2275 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$2275 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$2275 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$2275 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32)))
optimized x86 0:
  (int32_t
 (bvadd (bvashr (app abstr-vals$2275 0) (ite x?$2264 (bv #x00000010 32) (bv #x0000000f 32))) (bvand (bv #x00000001 32) (bvashr (app abstr-vals$2275 0) (ite x?$2264 (bv #x0000000f 32) (bv #x0000000e 32))))))
Ran synthesizer for 1585 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-cast
 (vec-cast
  (vec-max
   (vec-min
    (vec-add
     (vec-bwand
      (sca-broadcast (int32_t (bv #x00000001 32)) 16)
      (vec-div
       (vec-add
        (vec-mul
         (vec-cast
          (vec-add
           (vec-mul
            (vec-cast
             (load
              (buffer input1 'uint8)
              (ramp
               (sca-add
                (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
                (sca-sub
                 (sca-sub (var-lookup 't75) (var-lookup 't81))
                 (var-lookup 'input1.min.0)))
               1
               16)
              (aligned 1 0))
             'int16
             16)
            (sca-broadcast (int16_t (bv #x0040 16)) 16))
           (sca-broadcast
            (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))
            16))
          'int32
          16)
         (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
        (sca-broadcast
         (sca-mul
          (sca-cast
           (sca-mul
            (sca-sub (int16_t t149) (int16_t t150))
            (int16_t (bv #x0040 16)))
           'int32)
          (sca-cast (int16_t input2_multiplier) 'int32))
         16))
       (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
     (vec-div
      (vec-add
       (vec-mul
        (vec-cast
         (vec-add
          (vec-mul
           (vec-cast
            (load
             (buffer input1 'uint8)
             (ramp
              (sca-add
               (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
               (sca-sub
                (sca-sub (var-lookup 't75) (var-lookup 't81))
                (var-lookup 'input1.min.0)))
              1
              16)
             (aligned 1 0))
            'int16
            16)
           (sca-broadcast (int16_t (bv #x0040 16)) 16))
          (sca-broadcast (sca-mul (int16_t t148) (int16_t (bv #xffc0 16))) 16))
         'int32
         16)
        (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
       (sca-broadcast
        (sca-mul
         (sca-cast
          (sca-mul
           (sca-sub (int16_t t149) (int16_t t150))
           (int16_t (bv #x0040 16)))
          'int32)
         (sca-cast (int16_t input2_multiplier) 'int32))
        16))
      (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
    (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
   (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
  'int16
  16)
 'int32
 16)
template:
  (vs-shift-right
 ...
 (vs-mpy-add
  ...
  (combine
   (vs-mpy-add
    ...
    (combine
     #<load-data>
     (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))))
    (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
    #f
    #f
    #f
    'int16)
   (broadcast
    ...
    (sca-mul
     (sca-cast
      (sca-mul
       (sca-sub (int16_t t149) (int16_t t150))
       (int16_t (bv #x0040 16)))
      'int32)
     (sca-cast (int16_t input2_multiplier) 'int32))))
  (list (int8_t (bv #x01 8)) (int16_t input1_multiplier))
  #f
  #f
  #f
  'int32)
 (int32_t (bv #x00000010 32))
 x?$2265
 x?$2266
 x?$2267)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-cast
 (vec-cast
  (vec-max
   (vec-min
    (vec-add
     (vec-bwand
      (sca-broadcast (int32_t (bv #x00000001 32)) 16)
      (vec-div
       #<abstr-halide-expr>
       (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
     (vec-div
      #<abstr-halide-expr>
      (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
    (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
   (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
  'int16
  16)
 'int32
 16)
optimized-template:
  (vs-shift-right
 ...
 #<abstr-expr>
 (int32_t (bv #x00000010 32))
 x?$2265
 x?$2266
 x?$2267)
optimized Halide 0:
  (int32_t
 (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$2276 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$2276 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$2276 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$2276 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$2276 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$2276 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$2276 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$2276 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$2276 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$2276 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$2276 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$2276 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$2276 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$2276 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$2276 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$2276 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$2276 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$2276 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$2276 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$2276 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$2276 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$2276 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$2276 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$2276 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32)))
optimized x86 0:
  (int32_t
 (ite x?$2265 (bvadd (ite x?$2267 (bvashr (app abstr-vals$2276 0) (bv #x00000010 32)) (bvlshr (app abstr-vals$2276 0) (bv #x00000010 32))) (bvand (bv #x00000001 32) (ite x?$2267 (bvashr (app abstr-vals$2276 0) (bv #x0000000f 32)) (bvlshr (app abstr-vals$2276 0) (bv #x0000000f 32))))) (ite x?$2267 (bvashr (app abstr-vals$2276 0) (bv #x00000010 32)) (bvlshr (app abstr-vals$2276 0) (bv #x00000010 32)))))
Ran synthesizer for 1528 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-cast
 (vec-cast
  (vec-max
   (vec-min
    (vec-add
     (vec-bwand
      (sca-broadcast (int32_t (bv #x00000001 32)) 16)
      (vec-div
       (vec-add
        (vec-mul
         (vec-cast
          (vec-add
           (vec-mul
            (vec-cast
             (load
              (buffer input1 'uint8)
              (ramp
               (sca-add
                (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
                (sca-sub
                 (sca-sub (var-lookup 't75) (var-lookup 't81))
                 (var-lookup 'input1.min.0)))
               1
               16)
              (aligned 1 0))
             'int16
             16)
            (sca-broadcast (int16_t (bv #x0040 16)) 16))
           (sca-broadcast
            (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))
            16))
          'int32
          16)
         (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
        (sca-broadcast
         (sca-mul
          (sca-cast
           (sca-mul
            (sca-sub (int16_t t149) (int16_t t150))
            (int16_t (bv #x0040 16)))
           'int32)
          (sca-cast (int16_t input2_multiplier) 'int32))
         16))
       (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
     (vec-div
      (vec-add
       (vec-mul
        (vec-cast
         (vec-add
          (vec-mul
           (vec-cast
            (load
             (buffer input1 'uint8)
             (ramp
              (sca-add
               (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
               (sca-sub
                (sca-sub (var-lookup 't75) (var-lookup 't81))
                (var-lookup 'input1.min.0)))
              1
              16)
             (aligned 1 0))
            'int16
            16)
           (sca-broadcast (int16_t (bv #x0040 16)) 16))
          (sca-broadcast (sca-mul (int16_t t148) (int16_t (bv #xffc0 16))) 16))
         'int32
         16)
        (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
       (sca-broadcast
        (sca-mul
         (sca-cast
          (sca-mul
           (sca-sub (int16_t t149) (int16_t t150))
           (int16_t (bv #x0040 16)))
          'int32)
         (sca-cast (int16_t input2_multiplier) 'int32))
        16))
      (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
    (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
   (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
  'int16
  16)
 'int32
 16)
template:
  (cast
 ...
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (combine
    (vs-mpy-add
     ...
     (combine
      #<load-data>
      (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))))
     (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
     #f
     #f
     #f
     'int16)
    (broadcast
     ...
     (sca-mul
      (sca-cast
       (sca-mul
        (sca-sub (int16_t t149) (int16_t t150))
        (int16_t (bv #x0040 16)))
       'int32)
      (sca-cast (int16_t input2_multiplier) 'int32))))
   (list (int8_t (bv #x01 8)) (int16_t input1_multiplier))
   #f
   #f
   #f
   'int32)
  (int32_t (bv #x00000010 32))
  #t
  x?$2072
  #t)
 'int32
 x?$2263)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$2277 idx) (bv #x00008000 32)) (bvsle (bv #xffff8000 32) (app abstr-vals$2277 idx)))))
optimized-halide-expr:
  (vec-cast
 (vec-cast
  (vec-max
   (vec-min
    #<abstr-halide-expr>
    (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
   (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
  'int16
  16)
 'int32
 16)
optimized-template:
  (cast ... #<abstr-expr> 'int32 x?$2263)
optimized Halide 0:
  (int32_t
 (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (app abstr-vals$2277 0) (bv #x00007fff 32)) (app abstr-vals$2277 0) (bv #x00007fff 32))) (ite (bvsle (app abstr-vals$2277 0) (bv #x00007fff 32)) (app abstr-vals$2277 0) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32)))
optimized x86 0:
  (int32_t (app abstr-vals$2277 0))
Ran synthesizer for 106 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-cast
 (vec-cast
  (vec-max
   (vec-min
    (vec-add
     (vec-bwand
      (sca-broadcast (int32_t (bv #x00000001 32)) 16)
      (vec-div
       (vec-add
        (vec-mul
         (vec-cast
          (vec-add
           (vec-mul
            (vec-cast
             (load
              (buffer input1 'uint8)
              (ramp
               (sca-add
                (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
                (sca-sub
                 (sca-sub (var-lookup 't75) (var-lookup 't81))
                 (var-lookup 'input1.min.0)))
               1
               16)
              (aligned 1 0))
             'int16
             16)
            (sca-broadcast (int16_t (bv #x0040 16)) 16))
           (sca-broadcast
            (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))
            16))
          'int32
          16)
         (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
        (sca-broadcast
         (sca-mul
          (sca-cast
           (sca-mul
            (sca-sub (int16_t t149) (int16_t t150))
            (int16_t (bv #x0040 16)))
           'int32)
          (sca-cast (int16_t input2_multiplier) 'int32))
         16))
       (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
     (vec-div
      (vec-add
       (vec-mul
        (vec-cast
         (vec-add
          (vec-mul
           (vec-cast
            (load
             (buffer input1 'uint8)
             (ramp
              (sca-add
               (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
               (sca-sub
                (sca-sub (var-lookup 't75) (var-lookup 't81))
                (var-lookup 'input1.min.0)))
              1
              16)
             (aligned 1 0))
            'int16
            16)
           (sca-broadcast (int16_t (bv #x0040 16)) 16))
          (sca-broadcast (sca-mul (int16_t t148) (int16_t (bv #xffc0 16))) 16))
         'int32
         16)
        (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
       (sca-broadcast
        (sca-mul
         (sca-cast
          (sca-mul
           (sca-sub (int16_t t149) (int16_t t150))
           (int16_t (bv #x0040 16)))
          'int32)
         (sca-cast (int16_t input2_multiplier) 'int32))
        16))
      (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
    (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
   (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
  'int16
  16)
 'int32
 16)
template:
  (cast
 ...
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (combine
    (vs-mpy-add
     ...
     (combine
      #<load-data>
      (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))))
     (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
     #f
     #f
     #f
     'int16)
    (broadcast
     ...
     (sca-mul
      (sca-cast
       (sca-mul
        (sca-sub (int16_t t149) (int16_t t150))
        (int16_t (bv #x0040 16)))
       'int32)
      (sca-cast (int16_t input2_multiplier) 'int32))))
   (list (int8_t (bv #x01 8)) (int16_t input1_multiplier))
   #f
   #f
   #f
   'int32)
  (int32_t (bv #x00000010 32))
  #t
  x?$2072
  #t)
 'int32
 #f)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$2278 idx) (bv #x00008000 32)) (bvsle (bv #xffff8000 32) (app abstr-vals$2278 idx)))))
optimized-halide-expr:
  (vec-cast
 (vec-cast
  (vec-max
   (vec-min
    #<abstr-halide-expr>
    (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
   (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
  'int16
  16)
 'int32
 16)
optimized-template:
  (cast ... #<abstr-expr> 'int32 #f)
optimized Halide 0:
  (int32_t
 (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (app abstr-vals$2278 0) (bv #x00007fff 32)) (app abstr-vals$2278 0) (bv #x00007fff 32))) (ite (bvsle (app abstr-vals$2278 0) (bv #x00007fff 32)) (app abstr-vals$2278 0) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32)))
optimized x86 0:
  (int32_t (app abstr-vals$2278 0))
Ran synthesizer for 107 ms
(unsat)
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (vec-cast
 (vec-cast
  (vec-max
   (vec-min
    (vec-add
     (vec-bwand
      (sca-broadcast (int32_t (bv #x00000001 32)) 16)
      (vec-div
       (vec-add
        (vec-mul
         (vec-cast
          (vec-add
           (vec-mul
            (vec-cast
             (load
              (buffer input1 'uint8)
              (ramp
               (sca-add
                (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
                (sca-sub
                 (sca-sub (var-lookup 't75) (var-lookup 't81))
                 (var-lookup 'input1.min.0)))
               1
               16)
              (aligned 1 0))
             'int16
             16)
            (sca-broadcast (int16_t (bv #x0040 16)) 16))
           (sca-broadcast
            (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))
            16))
          'int32
          16)
         (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
        (sca-broadcast
         (sca-mul
          (sca-cast
           (sca-mul
            (sca-sub (int16_t t149) (int16_t t150))
            (int16_t (bv #x0040 16)))
           'int32)
          (sca-cast (int16_t input2_multiplier) 'int32))
         16))
       (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
     (vec-div
      (vec-add
       (vec-mul
        (vec-cast
         (vec-add
          (vec-mul
           (vec-cast
            (load
             (buffer input1 'uint8)
             (ramp
              (sca-add
               (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
               (sca-sub
                (sca-sub (var-lookup 't75) (var-lookup 't81))
                (var-lookup 'input1.min.0)))
              1
              16)
             (aligned 1 0))
            'int16
            16)
           (sca-broadcast (int16_t (bv #x0040 16)) 16))
          (sca-broadcast (sca-mul (int16_t t148) (int16_t (bv #xffc0 16))) 16))
         'int32
         16)
        (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
       (sca-broadcast
        (sca-mul
         (sca-cast
          (sca-mul
           (sca-sub (int16_t t149) (int16_t t150))
           (int16_t (bv #x0040 16)))
          'int32)
         (sca-cast (int16_t input2_multiplier) 'int32))
        16))
      (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
    (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
   (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
  'int16
  16)
 'int32
 16)
template:
  (cast
 ...
 (cast
  ...
  (vs-shift-right
   ...
   (vs-mpy-add
    ...
    (combine
     (vs-mpy-add
      ...
      (combine
       #<load-data>
       (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))))
      (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
      #f
      #f
      #f
      'int16)
     (broadcast
      ...
      (sca-mul
       (sca-cast
        (sca-mul
         (sca-sub (int16_t t149) (int16_t t150))
         (int16_t (bv #x0040 16)))
        'int32)
       (sca-cast (int16_t input2_multiplier) 'int32))))
    (list (int8_t (bv #x01 8)) (int16_t input1_multiplier))
    #f
    #f
    #f
    'int32)
   (int32_t (bv #x00000010 32))
   #t
   x?$2072
   #t)
  'int16
  #t)
 'int32
 #f)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-cast #<abstr-halide-expr> 'int32 16)
optimized-template:
  (cast ... #<abstr-expr> 'int32 #f)
optimized Halide 0:
  (int32_t (sign-extend (app abstr-vals$2279 0) (bitvector 32)))
optimized x86 0:
  (int32_t (sign-extend (app abstr-vals$2279 0) (bitvector 32)))
Ran synthesizer for 22 ms
(model)
(vec-cast #<abstr-halide-expr> 'int32 16)
(cast
 ...
 (cast
  ...
  (vs-shift-right
   ...
   (vs-mpy-add
    ...
    (combine
     (vs-mpy-add
      ...
      (combine
       #<load-data>
       (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))))
      (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
      #f
      #f
      #f
      'int16)
     (broadcast
      ...
      (sca-mul
       (sca-cast
        (sca-mul
         (sca-sub (int16_t t149) (int16_t t150))
         (int16_t (bv #x0040 16)))
        'int32)
       (sca-cast (int16_t input2_multiplier) 'int32))))
    (list (int8_t (bv #x01 8)) (int16_t input1_multiplier))
    #f
    #f
    #f
    'int32)
   (int32_t (bv #x00000010 32))
   #t
   x?$2072
   #t)
  'int16
  #t)
 'int32
 #f)
Ran bounds analysis for 44 ms
Ran bounds analysis for 34 ms
"Extended success?"
#t
(cast
 ...
 (cast
  ...
  (vs-shift-right
   ...
   (vs-mpy-add
    ...
    (combine
     (vs-mpy-add
      ...
      (combine
       #<load-data>
       (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))))
      (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
      #f
      #f
      #f
      'int16)
     (broadcast
      ...
      (sca-mul
       (sca-cast
        (sca-mul
         (sca-sub (int16_t t149) (int16_t t150))
         (int16_t (bv #x0040 16)))
        'int32)
       (sca-cast (int16_t input2_multiplier) 'int32))))
    (list (int8_t (bv #x01 8)) (int16_t input1_multiplier))
    #f
    #f
    #f
    'int32)
   (int32_t (bv #x00000010 32))
   #t
   x?$2072
   #t)
  'int16
  #t)
 'int32
 #f)
"Building Expr:"
(sca-broadcast (int16_t t151) 16)
"Fold templates"
'()
here()

"Replace templates"
'()
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (sca-broadcast (int16_t t151) 16)
template:
  (broadcast ... (int16_t t151))
axioms:
  '()
optimized-halide-expr:
  (sca-broadcast (int16_t t151) 16)
optimized-template:
  (broadcast ... (int16_t t151))
optimized Halide 0:
  (int16_t t151)
optimized x86 0:
  (int16_t t151)
Ran synthesizer for 20 ms
(model)
(sca-broadcast (int16_t t151) 16)
(broadcast ... (int16_t t151))
Ran bounds analysis for 29 ms
Ran bounds analysis for 20 ms
"Extended success?"
#t
(broadcast ... (int16_t t151))
"Building Expr:"
(vec-cast (sca-broadcast (int16_t t151) 16) 'int32 16)
"Fold templates"
'()
here()

"Replace templates"
'()
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (vec-cast (sca-broadcast (int16_t t151) 16) 'int32 16)
template:
  (cast ... (broadcast ... (int16_t t151)) 'int32 #f)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-cast #<abstr-halide-expr> 'int32 16)
optimized-template:
  (cast ... #<abstr-expr> 'int32 #f)
optimized Halide 0:
  (int32_t (sign-extend (app abstr-vals$2281 0) (bitvector 32)))
optimized x86 0:
  (int32_t (sign-extend (app abstr-vals$2281 0) (bitvector 32)))
Ran synthesizer for 20 ms
(model)
(vec-cast #<abstr-halide-expr> 'int32 16)
(cast ... (broadcast ... (int16_t t151)) 'int32 #f)
Ran bounds analysis for 42 ms
Ran bounds analysis for 34 ms
"Extended success?"
#t
(cast ... (broadcast ... (int16_t t151)) 'int32 #f)
"Building Expr:"
(vec-add
 (vec-cast
  (vec-cast
   (vec-max
    (vec-min
     (vec-add
      (vec-bwand
       (sca-broadcast (int32_t (bv #x00000001 32)) 16)
       (vec-div
        (vec-add
         (vec-mul
          (vec-cast
           (vec-add
            (vec-mul
             (vec-cast
              (load
               (buffer input1 'uint8)
               (ramp
                (sca-add
                 (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
                 (sca-sub
                  (sca-sub (var-lookup 't75) (var-lookup 't81))
                  (var-lookup 'input1.min.0)))
                1
                16)
               (aligned 1 0))
              'int16
              16)
             (sca-broadcast (int16_t (bv #x0040 16)) 16))
            (sca-broadcast
             (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))
             16))
           'int32
           16)
          (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
         (sca-broadcast
          (sca-mul
           (sca-cast
            (sca-mul
             (sca-sub (int16_t t149) (int16_t t150))
             (int16_t (bv #x0040 16)))
            'int32)
           (sca-cast (int16_t input2_multiplier) 'int32))
          16))
        (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
      (vec-div
       (vec-add
        (vec-mul
         (vec-cast
          (vec-add
           (vec-mul
            (vec-cast
             (load
              (buffer input1 'uint8)
              (ramp
               (sca-add
                (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
                (sca-sub
                 (sca-sub (var-lookup 't75) (var-lookup 't81))
                 (var-lookup 'input1.min.0)))
               1
               16)
              (aligned 1 0))
             'int16
             16)
            (sca-broadcast (int16_t (bv #x0040 16)) 16))
           (sca-broadcast
            (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))
            16))
          'int32
          16)
         (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
        (sca-broadcast
         (sca-mul
          (sca-cast
           (sca-mul
            (sca-sub (int16_t t149) (int16_t t150))
            (int16_t (bv #x0040 16)))
           'int32)
          (sca-cast (int16_t input2_multiplier) 'int32))
         16))
       (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
     (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
    (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
   'int16
   16)
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t t151) 16) 'int32 16))
"Fold templates"
(list
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (combine
    (vs-mpy-add
     ...
     (combine
      #<load-data>
      (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))))
     (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
     #f
     #f
     #f
     'int16)
    (broadcast
     ...
     (sca-mul
      (sca-cast
       (sca-mul
        (sca-sub (int16_t t149) (int16_t t150))
        (int16_t (bv #x0040 16)))
       'int32)
      (sca-cast (int16_t input2_multiplier) 'int32))))
   (list (int8_t (bv #x01 8)) (int16_t input1_multiplier))
   #f
   #f
   #f
   'int32)
  (int32_t (ite x?$2285 (bv #x00000010 32) (bv #x0000000f 32)))
  #t
  x?$2072
  #t)
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (combine
    (vs-mpy-add
     ...
     (combine
      #<load-data>
      (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))))
     (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
     #f
     #f
     #f
     'int16)
    (broadcast
     ...
     (sca-mul
      (sca-cast
       (sca-mul
        (sca-sub (int16_t t149) (int16_t t150))
        (int16_t (bv #x0040 16)))
       'int32)
      (sca-cast (int16_t input2_multiplier) 'int32))))
   (list (int8_t (bv #x01 8)) (int16_t input1_multiplier))
   #f
   #f
   #f
   'int32)
  (int32_t (bv #x00000010 32))
  x?$2286
  x?$2287
  x?$2288)
 (cast
  ...
  (vs-shift-right
   ...
   (vs-mpy-add
    ...
    (combine
     (vs-mpy-add
      ...
      (combine
       #<load-data>
       (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))))
      (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
      #f
      #f
      #f
      'int16)
     (broadcast
      ...
      (sca-mul
       (sca-cast
        (sca-mul
         (sca-sub (int16_t t149) (int16_t t150))
         (int16_t (bv #x0040 16)))
        'int32)
       (sca-cast (int16_t input2_multiplier) 'int32))))
    (list (int8_t (bv #x01 8)) (int16_t input1_multiplier))
    #f
    #f
    #f
    'int32)
   (int32_t (bv #x00000010 32))
   #t
   x?$2072
   #t)
  'int32
  x?$2284)
 (cast
  ...
  (cast
   ...
   (vs-shift-right
    ...
    (vs-mpy-add
     ...
     (combine
      (vs-mpy-add
       ...
       (combine
        #<load-data>
        (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))))
       (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
       #f
       #f
       #f
       'int16)
      (broadcast
       ...
       (sca-mul
        (sca-cast
         (sca-mul
          (sca-sub (int16_t t149) (int16_t t150))
          (int16_t (bv #x0040 16)))
         'int32)
        (sca-cast (int16_t input2_multiplier) 'int32))))
     (list (int8_t (bv #x01 8)) (int16_t input1_multiplier))
     #f
     #f
     #f
     'int32)
    (int32_t (bv #x00000010 32))
    #t
    x?$2072
    #t)
   'int16
   #t)
  'int32
  x?$2283)
 (cast ... (broadcast ... (int16_t t151)) 'int32 x?$2289))
here(#(struct:vs-shift-right ... #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t148) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f #f #f int16) #(struct:broadcast ... #(struct:sca-mul #(struct:sca-cast #(struct:sca-mul #(struct:sca-sub #(struct:int16_t t149) #(struct:int16_t t150)) #(struct:int16_t (bv #x0040 16))) int32) #(struct:sca-cast #(struct:int16_t input2_multiplier) int32)))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t input1_multiplier)) #f #f #f int32) #(struct:int32_t (ite x?$2285 (bv #x00000010 32) (bv #x0000000f 32))) #t x?$2072 #t) #(struct:vs-shift-right ... #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t148) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f #f #f int16) #(struct:broadcast ... #(struct:sca-mul #(struct:sca-cast #(struct:sca-mul #(struct:sca-sub #(struct:int16_t t149) #(struct:int16_t t150)) #(struct:int16_t (bv #x0040 16))) int32) #(struct:sca-cast #(struct:int16_t input2_multiplier) int32)))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t input1_multiplier)) #f #f #f int32) #(struct:int32_t (bv #x00000010 32)) x?$2286 x?$2287 x?$2288) #(struct:cast ... #(struct:vs-shift-right ... #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t148) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f #f #f int16) #(struct:broadcast ... #(struct:sca-mul #(struct:sca-cast #(struct:sca-mul #(struct:sca-sub #(struct:int16_t t149) #(struct:int16_t t150)) #(struct:int16_t (bv #x0040 16))) int32) #(struct:sca-cast #(struct:int16_t input2_multiplier) int32)))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t input1_multiplier)) #f #f #f int32) #(struct:int32_t (bv #x00000010 32)) #t x?$2072 #t) int32 x?$2284) #(struct:cast ... #(struct:cast ... #(struct:vs-shift-right ... #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t148) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f #f #f int16) #(struct:broadcast ... #(struct:sca-mul #(struct:sca-cast #(struct:sca-mul #(struct:sca-sub #(struct:int16_t t149) #(struct:int16_t t150)) #(struct:int16_t (bv #x0040 16))) int32) #(struct:sca-cast #(struct:int16_t input2_multiplier) int32)))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t input1_multiplier)) #f #f #f int32) #(struct:int32_t (bv #x00000010 32)) #t x?$2072 #t) int16 #t) int32 x?$2283) #(struct:cast ... #(struct:broadcast ... #(struct:int16_t t151)) int32 x?$2289))

"Replace templates"
(list
 (vs-mpy-add
  ...
  (vs-shift-right
   ...
   (vs-mpy-add
    ...
    (combine
     (vs-mpy-add
      ...
      (combine
       #<load-data>
       (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))))
      (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
      #f
      #f
      #f
      'int16)
     (broadcast
      ...
      (sca-mul
       (sca-cast
        (sca-mul
         (sca-sub (int16_t t149) (int16_t t150))
         (int16_t (bv #x0040 16)))
        'int32)
       (sca-cast (int16_t input2_multiplier) 'int32))))
    (list (int8_t (bv #x01 8)) (int16_t input1_multiplier))
    #f
    #f
    #f
    'int32)
   (int32_t (bv #x00000010 32))
   #t
   x?$2072
   #t)
  (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
  (! x?$2297)
  (! x?$2298)
  (! x?$2299)
  'int32)
 (vs-mpy-add
  ...
  (cast
   ...
   (vs-shift-right
    ...
    (vs-mpy-add
     ...
     (combine
      (vs-mpy-add
       ...
       (combine
        #<load-data>
        (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))))
       (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
       #f
       #f
       #f
       'int16)
      (broadcast
       ...
       (sca-mul
        (sca-cast
         (sca-mul
          (sca-sub (int16_t t149) (int16_t t150))
          (int16_t (bv #x0040 16)))
         'int32)
        (sca-cast (int16_t input2_multiplier) 'int32))))
     (list (int8_t (bv #x01 8)) (int16_t input1_multiplier))
     #f
     #f
     #f
     'int32)
    (int32_t (bv #x00000010 32))
    #t
    x?$2072
    #t)
   'int16
   #t)
  (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
  (! x?$2292)
  (! x?$2293)
  (! x?$2294)
  'int32)
 (vs-mpy-add
  ...
  (broadcast ... (int16_t t151))
  (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
  (! x?$2302)
  (! x?$2303)
  (! x?$2304)
  'int32))
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-cast
  (vec-cast
   (vec-max
    (vec-min
     (vec-add
      (vec-bwand
       (sca-broadcast (int32_t (bv #x00000001 32)) 16)
       (vec-div
        (vec-add
         (vec-mul
          (vec-cast
           (vec-add
            (vec-mul
             (vec-cast
              (load
               (buffer input1 'uint8)
               (ramp
                (sca-add
                 (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
                 (sca-sub
                  (sca-sub (var-lookup 't75) (var-lookup 't81))
                  (var-lookup 'input1.min.0)))
                1
                16)
               (aligned 1 0))
              'int16
              16)
             (sca-broadcast (int16_t (bv #x0040 16)) 16))
            (sca-broadcast
             (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))
             16))
           'int32
           16)
          (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
         (sca-broadcast
          (sca-mul
           (sca-cast
            (sca-mul
             (sca-sub (int16_t t149) (int16_t t150))
             (int16_t (bv #x0040 16)))
            'int32)
           (sca-cast (int16_t input2_multiplier) 'int32))
          16))
        (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
      (vec-div
       (vec-add
        (vec-mul
         (vec-cast
          (vec-add
           (vec-mul
            (vec-cast
             (load
              (buffer input1 'uint8)
              (ramp
               (sca-add
                (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
                (sca-sub
                 (sca-sub (var-lookup 't75) (var-lookup 't81))
                 (var-lookup 'input1.min.0)))
               1
               16)
              (aligned 1 0))
             'int16
             16)
            (sca-broadcast (int16_t (bv #x0040 16)) 16))
           (sca-broadcast
            (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))
            16))
          'int32
          16)
         (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
        (sca-broadcast
         (sca-mul
          (sca-cast
           (sca-mul
            (sca-sub (int16_t t149) (int16_t t150))
            (int16_t (bv #x0040 16)))
           'int32)
          (sca-cast (int16_t input2_multiplier) 'int32))
         16))
       (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
     (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
    (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
   'int16
   16)
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t t151) 16) 'int32 16))
template:
  (cast ... (broadcast ... (int16_t t151)) 'int32 x?$2289)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-add
 (vec-cast
  (vec-cast
   (vec-max
    (vec-min
     (vec-add
      (vec-bwand
       (sca-broadcast (int32_t (bv #x00000001 32)) 16)
       (vec-div
        (vec-add
         (vec-mul
          (vec-cast
           (vec-add
            (vec-mul
             (vec-cast
              (load
               (buffer input1 'uint8)
               (ramp
                (sca-add
                 (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
                 (sca-sub
                  (sca-sub (var-lookup 't75) (var-lookup 't81))
                  (var-lookup 'input1.min.0)))
                1
                16)
               (aligned 1 0))
              'int16
              16)
             (sca-broadcast (int16_t (bv #x0040 16)) 16))
            (sca-broadcast
             (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))
             16))
           'int32
           16)
          (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
         (sca-broadcast
          (sca-mul
           (sca-cast
            (sca-mul
             (sca-sub (int16_t t149) (int16_t t150))
             (int16_t (bv #x0040 16)))
            'int32)
           (sca-cast (int16_t input2_multiplier) 'int32))
          16))
        (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
      (vec-div
       (vec-add
        (vec-mul
         (vec-cast
          (vec-add
           (vec-mul
            (vec-cast
             (load
              (buffer input1 'uint8)
              (ramp
               (sca-add
                (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
                (sca-sub
                 (sca-sub (var-lookup 't75) (var-lookup 't81))
                 (var-lookup 'input1.min.0)))
               1
               16)
              (aligned 1 0))
             'int16
             16)
            (sca-broadcast (int16_t (bv #x0040 16)) 16))
           (sca-broadcast
            (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))
            16))
          'int32
          16)
         (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
        (sca-broadcast
         (sca-mul
          (sca-cast
           (sca-mul
            (sca-sub (int16_t t149) (int16_t t150))
            (int16_t (bv #x0040 16)))
           'int32)
          (sca-cast (int16_t input2_multiplier) 'int32))
         16))
       (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
     (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
    (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
   'int16
   16)
  'int32
  16)
 (vec-cast #<abstr-halide-expr> 'int32 16))
optimized-template:
  (cast ... #<abstr-expr> 'int32 x?$2289)
optimized Halide 0:
  (int32_t
 (bvadd (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32)) (sign-extend (app abstr-vals$2305 0) (bitvector 32))))
optimized x86 0:
  (int32_t (sign-extend (app abstr-vals$2305 0) (bitvector 32)))
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-cast
  (vec-cast
   (vec-max
    (vec-min
     (vec-add
      (vec-bwand
       (sca-broadcast (int32_t (bv #x00000001 32)) 16)
       (vec-div
        (vec-add
         (vec-mul
          (vec-cast
           (vec-add
            (vec-mul
             (vec-cast
              (load
               (buffer input1 'uint8)
               (ramp
                (sca-add
                 (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
                 (sca-sub
                  (sca-sub (var-lookup 't75) (var-lookup 't81))
                  (var-lookup 'input1.min.0)))
                1
                16)
               (aligned 1 0))
              'int16
              16)
             (sca-broadcast (int16_t (bv #x0040 16)) 16))
            (sca-broadcast
             (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))
             16))
           'int32
           16)
          (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
         (sca-broadcast
          (sca-mul
           (sca-cast
            (sca-mul
             (sca-sub (int16_t t149) (int16_t t150))
             (int16_t (bv #x0040 16)))
            'int32)
           (sca-cast (int16_t input2_multiplier) 'int32))
          16))
        (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
      (vec-div
       (vec-add
        (vec-mul
         (vec-cast
          (vec-add
           (vec-mul
            (vec-cast
             (load
              (buffer input1 'uint8)
              (ramp
               (sca-add
                (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
                (sca-sub
                 (sca-sub (var-lookup 't75) (var-lookup 't81))
                 (var-lookup 'input1.min.0)))
               1
               16)
              (aligned 1 0))
             'int16
             16)
            (sca-broadcast (int16_t (bv #x0040 16)) 16))
           (sca-broadcast
            (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))
            16))
          'int32
          16)
         (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
        (sca-broadcast
         (sca-mul
          (sca-cast
           (sca-mul
            (sca-sub (int16_t t149) (int16_t t150))
            (int16_t (bv #x0040 16)))
           'int32)
          (sca-cast (int16_t input2_multiplier) 'int32))
         16))
       (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
     (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
    (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
   'int16
   16)
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t t151) 16) 'int32 16))
template:
  (vs-mpy-add
 ...
 (broadcast ... (int16_t t151))
 (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
 (! x?$2302)
 (! x?$2303)
 (! x?$2304)
 'int32)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-add
 (vec-cast
  (vec-cast
   (vec-max
    (vec-min
     (vec-add
      (vec-bwand
       (sca-broadcast (int32_t (bv #x00000001 32)) 16)
       (vec-div
        (vec-add
         (vec-mul
          (vec-cast
           (vec-add
            (vec-mul
             (vec-cast
              (load
               (buffer input1 'uint8)
               (ramp
                (sca-add
                 (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
                 (sca-sub
                  (sca-sub (var-lookup 't75) (var-lookup 't81))
                  (var-lookup 'input1.min.0)))
                1
                16)
               (aligned 1 0))
              'int16
              16)
             (sca-broadcast (int16_t (bv #x0040 16)) 16))
            (sca-broadcast
             (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))
             16))
           'int32
           16)
          (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
         (sca-broadcast
          (sca-mul
           (sca-cast
            (sca-mul
             (sca-sub (int16_t t149) (int16_t t150))
             (int16_t (bv #x0040 16)))
            'int32)
           (sca-cast (int16_t input2_multiplier) 'int32))
          16))
        (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
      (vec-div
       (vec-add
        (vec-mul
         (vec-cast
          (vec-add
           (vec-mul
            (vec-cast
             (load
              (buffer input1 'uint8)
              (ramp
               (sca-add
                (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
                (sca-sub
                 (sca-sub (var-lookup 't75) (var-lookup 't81))
                 (var-lookup 'input1.min.0)))
               1
               16)
              (aligned 1 0))
             'int16
             16)
            (sca-broadcast (int16_t (bv #x0040 16)) 16))
           (sca-broadcast
            (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))
            16))
          'int32
          16)
         (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
        (sca-broadcast
         (sca-mul
          (sca-cast
           (sca-mul
            (sca-sub (int16_t t149) (int16_t t150))
            (int16_t (bv #x0040 16)))
           'int32)
          (sca-cast (int16_t input2_multiplier) 'int32))
         16))
       (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
     (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
    (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
   'int16
   16)
  'int32
  16)
 (vec-cast #<abstr-halide-expr> 'int32 16))
optimized-template:
  (vs-mpy-add
 ...
 #<abstr-expr>
 (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
 (! x?$2302)
 (! x?$2303)
 (! x?$2304)
 'int32)
optimized Halide 0:
  (int32_t
 (bvadd (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32)) (sign-extend (app abstr-vals$2306 0) (bitvector 32))))
optimized x86 0:
  (int32_t
 (ite* (⊢ (&& x?$2304 (! (&& (! x?$2302) (! x?$2304)))) (ite x?$2302 (bvadd (sign-extend (app abstr-vals$2306 1) (bitvector 32)) (ite x?$2302 (bvadd (sign-extend (app abstr-vals$2306 0) (bitvector 32)) (ite x?$2303 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2303 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$2306 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2303 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$2306 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2303 (bv #x00000000 32) (bv #x00000001 32)))))))) (bvadd (ite x?$2302 (bvadd (sign-extend (app abstr-vals$2306 0) (bitvector 32)) (ite x?$2303 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2303 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$2306 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2303 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$2306 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2303 (bv #x00000000 32) (bv #x00000001 32))))))) (ite (bvsle (bvadd (bv #x80000000 32) (bvneg (ite (bvsle (ite x?$2302 (bvadd (sign-extend (app abstr-vals$2306 0) (bitvector 32)) (ite x?$2303 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2303 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$2306 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2303 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$2306 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2303 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)) (ite x?$2302 (bvadd (sign-extend (app abstr-vals$2306 0) (bitvector 32)) (ite x?$2303 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2303 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$2306 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2303 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$2306 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2303 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)))) (ite (bvsle (sign-extend (app abstr-vals$2306 1) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$2302 (bvadd (sign-extend (app abstr-vals$2306 0) (bitvector 32)) (ite x?$2303 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2303 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$2306 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2303 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$2306 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2303 (bv #x00000000 32) (bv #x00000001 32)))))))) (ite x?$2302 (bvadd (sign-extend (app abstr-vals$2306 0) (bitvector 32)) (ite x?$2303 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2303 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$2306 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2303 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$2306 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2303 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32))))) (sign-extend (app abstr-vals$2306 1) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$2302 (bvadd (sign-extend (app abstr-vals$2306 0) (bitvector 32)) (ite x?$2303 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2303 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$2306 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2303 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$2306 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2303 (bv #x00000000 32) (bv #x00000001 32)))))))) (ite x?$2302 (bvadd (sign-extend (app abstr-vals$2306 0) (bitvector 32)) (ite x?$2303 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2303 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$2306 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2303 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$2306 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2303 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)))))) (ite (bvsle (sign-extend (app abstr-vals$2306 1) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$2302 (bvadd (sign-extend (app abstr-vals$2306 0) (bitvector 32)) (ite x?$2303 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2303 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$2306 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2303 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$2306 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2303 (bv #x00000000 32) (bv #x00000001 32)))))))) (ite x?$2302 (bvadd (sign-extend (app abstr-vals$2306 0) (bitvector 32)) (ite x?$2303 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2303 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$2306 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2303 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$2306 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2303 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32))))) (sign-extend (app abstr-vals$2306 1) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$2302 (bvadd (sign-extend (app abstr-vals$2306 0) (bitvector 32)) (ite x?$2303 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2303 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$2306 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2303 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$2306 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2303 (bv #x00000000 32) (bv #x00000001 32)))))))) (ite x?$2302 (bvadd (sign-extend (app abstr-vals$2306 0) (bitvector 32)) (ite x?$2303 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2303 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$2306 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2303 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$2306 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2303 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32))))) (bvadd (bv #x80000000 32) (bvneg (ite (bvsle (ite x?$2302 (bvadd (sign-extend (app abstr-vals$2306 0) (bitvector 32)) (ite x?$2303 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2303 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$2306 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2303 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$2306 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2303 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)) (ite x?$2302 (bvadd (sign-extend (app abstr-vals$2306 0) (bitvector 32)) (ite x?$2303 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2303 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$2306 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2303 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$2306 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2303 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)))))))) (⊢ (|| (&& (! x?$2302) (! x?$2304)) (&& (! x?$2304) (! (&& (! x?$2302) (! x?$2304))))) (bvashr (ite x?$2302 (bvadd (sign-extend (app abstr-vals$2306 1) (bitvector 32)) (ite x?$2302 (bvadd (sign-extend (app abstr-vals$2306 0) (bitvector 32)) (ite x?$2303 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2303 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$2306 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2303 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$2306 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2303 (bv #x00000000 32) (bv #x00000001 32)))))))) (bvadd (ite x?$2302 (bvadd (sign-extend (app abstr-vals$2306 0) (bitvector 32)) (ite x?$2303 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2303 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$2306 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2303 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$2306 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2303 (bv #x00000000 32) (bv #x00000001 32))))))) (ite (bvsle (bvadd (bv #x80000000 32) (bvneg (ite (bvsle (ite x?$2302 (bvadd (sign-extend (app abstr-vals$2306 0) (bitvector 32)) (ite x?$2303 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2303 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$2306 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2303 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$2306 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2303 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)) (ite x?$2302 (bvadd (sign-extend (app abstr-vals$2306 0) (bitvector 32)) (ite x?$2303 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2303 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$2306 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2303 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$2306 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2303 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)))) (ite (bvsle (sign-extend (app abstr-vals$2306 1) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$2302 (bvadd (sign-extend (app abstr-vals$2306 0) (bitvector 32)) (ite x?$2303 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2303 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$2306 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2303 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$2306 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2303 (bv #x00000000 32) (bv #x00000001 32)))))))) (ite x?$2302 (bvadd (sign-extend (app abstr-vals$2306 0) (bitvector 32)) (ite x?$2303 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2303 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$2306 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2303 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$2306 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2303 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32))))) (sign-extend (app abstr-vals$2306 1) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$2302 (bvadd (sign-extend (app abstr-vals$2306 0) (bitvector 32)) (ite x?$2303 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2303 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$2306 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2303 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$2306 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2303 (bv #x00000000 32) (bv #x00000001 32)))))))) (ite x?$2302 (bvadd (sign-extend (app abstr-vals$2306 0) (bitvector 32)) (ite x?$2303 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2303 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$2306 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2303 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$2306 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2303 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)))))) (ite (bvsle (sign-extend (app abstr-vals$2306 1) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$2302 (bvadd (sign-extend (app abstr-vals$2306 0) (bitvector 32)) (ite x?$2303 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2303 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$2306 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2303 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$2306 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2303 (bv #x00000000 32) (bv #x00000001 32)))))))) (ite x?$2302 (bvadd (sign-extend (app abstr-vals$2306 0) (bitvector 32)) (ite x?$2303 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2303 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$2306 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2303 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$2306 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2303 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32))))) (sign-extend (app abstr-vals$2306 1) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$2302 (bvadd (sign-extend (app abstr-vals$2306 0) (bitvector 32)) (ite x?$2303 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2303 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$2306 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2303 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$2306 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2303 (bv #x00000000 32) (bv #x00000001 32)))))))) (ite x?$2302 (bvadd (sign-extend (app abstr-vals$2306 0) (bitvector 32)) (ite x?$2303 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2303 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$2306 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2303 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$2306 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2303 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32))))) (bvadd (bv #x80000000 32) (bvneg (ite (bvsle (ite x?$2302 (bvadd (sign-extend (app abstr-vals$2306 0) (bitvector 32)) (ite x?$2303 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2303 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$2306 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2303 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$2306 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2303 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)) (ite x?$2302 (bvadd (sign-extend (app abstr-vals$2306 0) (bitvector 32)) (ite x?$2303 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2303 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$2306 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2303 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$2306 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2303 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32))))))) (bv #x00000001 32)))))
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-cast
  (vec-cast
   (vec-max
    (vec-min
     (vec-add
      (vec-bwand
       (sca-broadcast (int32_t (bv #x00000001 32)) 16)
       (vec-div
        (vec-add
         (vec-mul
          (vec-cast
           (vec-add
            (vec-mul
             (vec-cast
              (load
               (buffer input1 'uint8)
               (ramp
                (sca-add
                 (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
                 (sca-sub
                  (sca-sub (var-lookup 't75) (var-lookup 't81))
                  (var-lookup 'input1.min.0)))
                1
                16)
               (aligned 1 0))
              'int16
              16)
             (sca-broadcast (int16_t (bv #x0040 16)) 16))
            (sca-broadcast
             (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))
             16))
           'int32
           16)
          (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
         (sca-broadcast
          (sca-mul
           (sca-cast
            (sca-mul
             (sca-sub (int16_t t149) (int16_t t150))
             (int16_t (bv #x0040 16)))
            'int32)
           (sca-cast (int16_t input2_multiplier) 'int32))
          16))
        (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
      (vec-div
       (vec-add
        (vec-mul
         (vec-cast
          (vec-add
           (vec-mul
            (vec-cast
             (load
              (buffer input1 'uint8)
              (ramp
               (sca-add
                (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
                (sca-sub
                 (sca-sub (var-lookup 't75) (var-lookup 't81))
                 (var-lookup 'input1.min.0)))
               1
               16)
              (aligned 1 0))
             'int16
             16)
            (sca-broadcast (int16_t (bv #x0040 16)) 16))
           (sca-broadcast
            (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))
            16))
          'int32
          16)
         (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
        (sca-broadcast
         (sca-mul
          (sca-cast
           (sca-mul
            (sca-sub (int16_t t149) (int16_t t150))
            (int16_t (bv #x0040 16)))
           'int32)
          (sca-cast (int16_t input2_multiplier) 'int32))
         16))
       (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
     (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
    (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
   'int16
   16)
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t t151) 16) 'int32 16))
template:
  (vs-shift-right
 ...
 (vs-mpy-add
  ...
  (combine
   (vs-mpy-add
    ...
    (combine
     #<load-data>
     (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))))
    (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
    #f
    #f
    #f
    'int16)
   (broadcast
    ...
    (sca-mul
     (sca-cast
      (sca-mul
       (sca-sub (int16_t t149) (int16_t t150))
       (int16_t (bv #x0040 16)))
      'int32)
     (sca-cast (int16_t input2_multiplier) 'int32))))
  (list (int8_t (bv #x01 8)) (int16_t input1_multiplier))
  #f
  #f
  #f
  'int32)
 (int32_t (ite x?$2285 (bv #x00000010 32) (bv #x0000000f 32)))
 #t
 x?$2072
 #t)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-add
 (vec-cast
  (vec-cast
   (vec-max
    (vec-min
     (vec-add
      (vec-bwand
       (sca-broadcast (int32_t (bv #x00000001 32)) 16)
       (vec-div
        #<abstr-halide-expr>
        (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
      (vec-div
       #<abstr-halide-expr>
       (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
     (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
    (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
   'int16
   16)
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t t151) 16) 'int32 16))
optimized-template:
  (vs-shift-right
 ...
 #<abstr-expr>
 (int32_t (ite x?$2285 (bv #x00000010 32) (bv #x0000000f 32)))
 #t
 x?$2072
 #t)
optimized Halide 0:
  (int32_t
 (bvadd (sign-extend t151 (bitvector 32)) (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$2307 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$2307 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$2307 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$2307 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$2307 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$2307 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$2307 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$2307 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$2307 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$2307 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$2307 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$2307 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$2307 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$2307 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$2307 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$2307 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$2307 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$2307 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$2307 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$2307 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$2307 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$2307 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$2307 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$2307 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32))))
optimized x86 0:
  (int32_t
 (bvadd (bvashr (app abstr-vals$2307 0) (ite x?$2285 (bv #x00000010 32) (bv #x0000000f 32))) (bvand (bv #x00000001 32) (bvashr (app abstr-vals$2307 0) (ite x?$2285 (bv #x0000000f 32) (bv #x0000000e 32))))))
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-cast
  (vec-cast
   (vec-max
    (vec-min
     (vec-add
      (vec-bwand
       (sca-broadcast (int32_t (bv #x00000001 32)) 16)
       (vec-div
        (vec-add
         (vec-mul
          (vec-cast
           (vec-add
            (vec-mul
             (vec-cast
              (load
               (buffer input1 'uint8)
               (ramp
                (sca-add
                 (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
                 (sca-sub
                  (sca-sub (var-lookup 't75) (var-lookup 't81))
                  (var-lookup 'input1.min.0)))
                1
                16)
               (aligned 1 0))
              'int16
              16)
             (sca-broadcast (int16_t (bv #x0040 16)) 16))
            (sca-broadcast
             (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))
             16))
           'int32
           16)
          (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
         (sca-broadcast
          (sca-mul
           (sca-cast
            (sca-mul
             (sca-sub (int16_t t149) (int16_t t150))
             (int16_t (bv #x0040 16)))
            'int32)
           (sca-cast (int16_t input2_multiplier) 'int32))
          16))
        (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
      (vec-div
       (vec-add
        (vec-mul
         (vec-cast
          (vec-add
           (vec-mul
            (vec-cast
             (load
              (buffer input1 'uint8)
              (ramp
               (sca-add
                (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
                (sca-sub
                 (sca-sub (var-lookup 't75) (var-lookup 't81))
                 (var-lookup 'input1.min.0)))
               1
               16)
              (aligned 1 0))
             'int16
             16)
            (sca-broadcast (int16_t (bv #x0040 16)) 16))
           (sca-broadcast
            (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))
            16))
          'int32
          16)
         (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
        (sca-broadcast
         (sca-mul
          (sca-cast
           (sca-mul
            (sca-sub (int16_t t149) (int16_t t150))
            (int16_t (bv #x0040 16)))
           'int32)
          (sca-cast (int16_t input2_multiplier) 'int32))
         16))
       (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
     (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
    (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
   'int16
   16)
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t t151) 16) 'int32 16))
template:
  (vs-shift-right
 ...
 (vs-mpy-add
  ...
  (combine
   (vs-mpy-add
    ...
    (combine
     #<load-data>
     (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))))
    (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
    #f
    #f
    #f
    'int16)
   (broadcast
    ...
    (sca-mul
     (sca-cast
      (sca-mul
       (sca-sub (int16_t t149) (int16_t t150))
       (int16_t (bv #x0040 16)))
      'int32)
     (sca-cast (int16_t input2_multiplier) 'int32))))
  (list (int8_t (bv #x01 8)) (int16_t input1_multiplier))
  #f
  #f
  #f
  'int32)
 (int32_t (bv #x00000010 32))
 x?$2286
 x?$2287
 x?$2288)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-add
 (vec-cast
  (vec-cast
   (vec-max
    (vec-min
     (vec-add
      (vec-bwand
       (sca-broadcast (int32_t (bv #x00000001 32)) 16)
       (vec-div
        #<abstr-halide-expr>
        (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
      (vec-div
       #<abstr-halide-expr>
       (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
     (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
    (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
   'int16
   16)
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t t151) 16) 'int32 16))
optimized-template:
  (vs-shift-right
 ...
 #<abstr-expr>
 (int32_t (bv #x00000010 32))
 x?$2286
 x?$2287
 x?$2288)
optimized Halide 0:
  (int32_t
 (bvadd (sign-extend t151 (bitvector 32)) (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$2308 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$2308 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$2308 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$2308 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$2308 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$2308 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$2308 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$2308 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$2308 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$2308 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$2308 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$2308 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$2308 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$2308 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$2308 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$2308 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$2308 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$2308 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$2308 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$2308 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$2308 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$2308 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$2308 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$2308 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32))))
optimized x86 0:
  (int32_t
 (ite x?$2286 (bvadd (ite x?$2288 (bvashr (app abstr-vals$2308 0) (bv #x00000010 32)) (bvlshr (app abstr-vals$2308 0) (bv #x00000010 32))) (bvand (bv #x00000001 32) (ite x?$2288 (bvashr (app abstr-vals$2308 0) (bv #x0000000f 32)) (bvlshr (app abstr-vals$2308 0) (bv #x0000000f 32))))) (ite x?$2288 (bvashr (app abstr-vals$2308 0) (bv #x00000010 32)) (bvlshr (app abstr-vals$2308 0) (bv #x00000010 32)))))
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-cast
  (vec-cast
   (vec-max
    (vec-min
     (vec-add
      (vec-bwand
       (sca-broadcast (int32_t (bv #x00000001 32)) 16)
       (vec-div
        (vec-add
         (vec-mul
          (vec-cast
           (vec-add
            (vec-mul
             (vec-cast
              (load
               (buffer input1 'uint8)
               (ramp
                (sca-add
                 (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
                 (sca-sub
                  (sca-sub (var-lookup 't75) (var-lookup 't81))
                  (var-lookup 'input1.min.0)))
                1
                16)
               (aligned 1 0))
              'int16
              16)
             (sca-broadcast (int16_t (bv #x0040 16)) 16))
            (sca-broadcast
             (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))
             16))
           'int32
           16)
          (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
         (sca-broadcast
          (sca-mul
           (sca-cast
            (sca-mul
             (sca-sub (int16_t t149) (int16_t t150))
             (int16_t (bv #x0040 16)))
            'int32)
           (sca-cast (int16_t input2_multiplier) 'int32))
          16))
        (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
      (vec-div
       (vec-add
        (vec-mul
         (vec-cast
          (vec-add
           (vec-mul
            (vec-cast
             (load
              (buffer input1 'uint8)
              (ramp
               (sca-add
                (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
                (sca-sub
                 (sca-sub (var-lookup 't75) (var-lookup 't81))
                 (var-lookup 'input1.min.0)))
               1
               16)
              (aligned 1 0))
             'int16
             16)
            (sca-broadcast (int16_t (bv #x0040 16)) 16))
           (sca-broadcast
            (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))
            16))
          'int32
          16)
         (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
        (sca-broadcast
         (sca-mul
          (sca-cast
           (sca-mul
            (sca-sub (int16_t t149) (int16_t t150))
            (int16_t (bv #x0040 16)))
           'int32)
          (sca-cast (int16_t input2_multiplier) 'int32))
         16))
       (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
     (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
    (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
   'int16
   16)
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t t151) 16) 'int32 16))
template:
  (cast
 ...
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (combine
    (vs-mpy-add
     ...
     (combine
      #<load-data>
      (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))))
     (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
     #f
     #f
     #f
     'int16)
    (broadcast
     ...
     (sca-mul
      (sca-cast
       (sca-mul
        (sca-sub (int16_t t149) (int16_t t150))
        (int16_t (bv #x0040 16)))
       'int32)
      (sca-cast (int16_t input2_multiplier) 'int32))))
   (list (int8_t (bv #x01 8)) (int16_t input1_multiplier))
   #f
   #f
   #f
   'int32)
  (int32_t (bv #x00000010 32))
  #t
  x?$2072
  #t)
 'int32
 x?$2284)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$2309 idx) (bv #x00008000 32)) (bvsle (bv #xffff8000 32) (app abstr-vals$2309 idx)))))
optimized-halide-expr:
  (vec-add
 (vec-cast
  (vec-cast
   (vec-max
    (vec-min
     #<abstr-halide-expr>
     (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
    (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
   'int16
   16)
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t t151) 16) 'int32 16))
optimized-template:
  (cast ... #<abstr-expr> 'int32 x?$2284)
optimized Halide 0:
  (int32_t
 (bvadd (sign-extend t151 (bitvector 32)) (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (app abstr-vals$2309 0) (bv #x00007fff 32)) (app abstr-vals$2309 0) (bv #x00007fff 32))) (ite (bvsle (app abstr-vals$2309 0) (bv #x00007fff 32)) (app abstr-vals$2309 0) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32))))
optimized x86 0:
  (int32_t (app abstr-vals$2309 0))
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-cast
  (vec-cast
   (vec-max
    (vec-min
     (vec-add
      (vec-bwand
       (sca-broadcast (int32_t (bv #x00000001 32)) 16)
       (vec-div
        (vec-add
         (vec-mul
          (vec-cast
           (vec-add
            (vec-mul
             (vec-cast
              (load
               (buffer input1 'uint8)
               (ramp
                (sca-add
                 (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
                 (sca-sub
                  (sca-sub (var-lookup 't75) (var-lookup 't81))
                  (var-lookup 'input1.min.0)))
                1
                16)
               (aligned 1 0))
              'int16
              16)
             (sca-broadcast (int16_t (bv #x0040 16)) 16))
            (sca-broadcast
             (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))
             16))
           'int32
           16)
          (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
         (sca-broadcast
          (sca-mul
           (sca-cast
            (sca-mul
             (sca-sub (int16_t t149) (int16_t t150))
             (int16_t (bv #x0040 16)))
            'int32)
           (sca-cast (int16_t input2_multiplier) 'int32))
          16))
        (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
      (vec-div
       (vec-add
        (vec-mul
         (vec-cast
          (vec-add
           (vec-mul
            (vec-cast
             (load
              (buffer input1 'uint8)
              (ramp
               (sca-add
                (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
                (sca-sub
                 (sca-sub (var-lookup 't75) (var-lookup 't81))
                 (var-lookup 'input1.min.0)))
               1
               16)
              (aligned 1 0))
             'int16
             16)
            (sca-broadcast (int16_t (bv #x0040 16)) 16))
           (sca-broadcast
            (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))
            16))
          'int32
          16)
         (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
        (sca-broadcast
         (sca-mul
          (sca-cast
           (sca-mul
            (sca-sub (int16_t t149) (int16_t t150))
            (int16_t (bv #x0040 16)))
           'int32)
          (sca-cast (int16_t input2_multiplier) 'int32))
         16))
       (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
     (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
    (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
   'int16
   16)
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t t151) 16) 'int32 16))
template:
  (vs-mpy-add
 ...
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (combine
    (vs-mpy-add
     ...
     (combine
      #<load-data>
      (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))))
     (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
     #f
     #f
     #f
     'int16)
    (broadcast
     ...
     (sca-mul
      (sca-cast
       (sca-mul
        (sca-sub (int16_t t149) (int16_t t150))
        (int16_t (bv #x0040 16)))
       'int32)
      (sca-cast (int16_t input2_multiplier) 'int32))))
   (list (int8_t (bv #x01 8)) (int16_t input1_multiplier))
   #f
   #f
   #f
   'int32)
  (int32_t (bv #x00000010 32))
  #t
  x?$2072
  #t)
 (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
 (! x?$2297)
 (! x?$2298)
 (! x?$2299)
 'int32)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$2310 idx) (bv #x00008000 32)) (bvsle (bv #xffff8000 32) (app abstr-vals$2310 idx)))))
optimized-halide-expr:
  (vec-add
 (vec-cast
  (vec-cast
   (vec-max
    (vec-min
     #<abstr-halide-expr>
     (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
    (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
   'int16
   16)
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t t151) 16) 'int32 16))
optimized-template:
  (vs-mpy-add
 ...
 #<abstr-expr>
 (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
 (! x?$2297)
 (! x?$2298)
 (! x?$2299)
 'int32)
optimized Halide 0:
  (int32_t
 (bvadd (sign-extend t151 (bitvector 32)) (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (app abstr-vals$2310 0) (bv #x00007fff 32)) (app abstr-vals$2310 0) (bv #x00007fff 32))) (ite (bvsle (app abstr-vals$2310 0) (bv #x00007fff 32)) (app abstr-vals$2310 0) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32))))
optimized x86 0:
  (int32_t
 (ite* (⊢ (&& x?$2299 (! (&& (! x?$2297) (! x?$2299)))) (ite x?$2297 (bvadd (app abstr-vals$2310 1) (ite x?$2297 (bvadd (app abstr-vals$2310 0) (ite x?$2298 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2298 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (app abstr-vals$2310 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2298 (bv #x00000000 32) (bv #x00000001 32))))) (app abstr-vals$2310 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2298 (bv #x00000000 32) (bv #x00000001 32)))))))) (bvadd (ite x?$2297 (bvadd (app abstr-vals$2310 0) (ite x?$2298 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2298 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (app abstr-vals$2310 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2298 (bv #x00000000 32) (bv #x00000001 32))))) (app abstr-vals$2310 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2298 (bv #x00000000 32) (bv #x00000001 32))))))) (ite (bvsle (bvadd (bv #x80000000 32) (bvneg (ite (bvsle (ite x?$2297 (bvadd (app abstr-vals$2310 0) (ite x?$2298 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2298 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (app abstr-vals$2310 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2298 (bv #x00000000 32) (bv #x00000001 32))))) (app abstr-vals$2310 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2298 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)) (ite x?$2297 (bvadd (app abstr-vals$2310 0) (ite x?$2298 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2298 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (app abstr-vals$2310 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2298 (bv #x00000000 32) (bv #x00000001 32))))) (app abstr-vals$2310 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2298 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)))) (ite (bvsle (app abstr-vals$2310 1) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$2297 (bvadd (app abstr-vals$2310 0) (ite x?$2298 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2298 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (app abstr-vals$2310 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2298 (bv #x00000000 32) (bv #x00000001 32))))) (app abstr-vals$2310 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2298 (bv #x00000000 32) (bv #x00000001 32)))))))) (ite x?$2297 (bvadd (app abstr-vals$2310 0) (ite x?$2298 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2298 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (app abstr-vals$2310 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2298 (bv #x00000000 32) (bv #x00000001 32))))) (app abstr-vals$2310 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2298 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32))))) (app abstr-vals$2310 1) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$2297 (bvadd (app abstr-vals$2310 0) (ite x?$2298 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2298 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (app abstr-vals$2310 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2298 (bv #x00000000 32) (bv #x00000001 32))))) (app abstr-vals$2310 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2298 (bv #x00000000 32) (bv #x00000001 32)))))))) (ite x?$2297 (bvadd (app abstr-vals$2310 0) (ite x?$2298 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2298 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (app abstr-vals$2310 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2298 (bv #x00000000 32) (bv #x00000001 32))))) (app abstr-vals$2310 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2298 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)))))) (ite (bvsle (app abstr-vals$2310 1) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$2297 (bvadd (app abstr-vals$2310 0) (ite x?$2298 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2298 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (app abstr-vals$2310 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2298 (bv #x00000000 32) (bv #x00000001 32))))) (app abstr-vals$2310 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2298 (bv #x00000000 32) (bv #x00000001 32)))))))) (ite x?$2297 (bvadd (app abstr-vals$2310 0) (ite x?$2298 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2298 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (app abstr-vals$2310 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2298 (bv #x00000000 32) (bv #x00000001 32))))) (app abstr-vals$2310 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2298 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32))))) (app abstr-vals$2310 1) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$2297 (bvadd (app abstr-vals$2310 0) (ite x?$2298 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2298 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (app abstr-vals$2310 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2298 (bv #x00000000 32) (bv #x00000001 32))))) (app abstr-vals$2310 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2298 (bv #x00000000 32) (bv #x00000001 32)))))))) (ite x?$2297 (bvadd (app abstr-vals$2310 0) (ite x?$2298 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2298 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (app abstr-vals$2310 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2298 (bv #x00000000 32) (bv #x00000001 32))))) (app abstr-vals$2310 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2298 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32))))) (bvadd (bv #x80000000 32) (bvneg (ite (bvsle (ite x?$2297 (bvadd (app abstr-vals$2310 0) (ite x?$2298 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2298 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (app abstr-vals$2310 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2298 (bv #x00000000 32) (bv #x00000001 32))))) (app abstr-vals$2310 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2298 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)) (ite x?$2297 (bvadd (app abstr-vals$2310 0) (ite x?$2298 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2298 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (app abstr-vals$2310 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2298 (bv #x00000000 32) (bv #x00000001 32))))) (app abstr-vals$2310 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2298 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)))))))) (⊢ (|| (&& (! x?$2297) (! x?$2299)) (&& (! x?$2299) (! (&& (! x?$2297) (! x?$2299))))) (bvashr (ite x?$2297 (bvadd (app abstr-vals$2310 1) (ite x?$2297 (bvadd (app abstr-vals$2310 0) (ite x?$2298 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2298 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (app abstr-vals$2310 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2298 (bv #x00000000 32) (bv #x00000001 32))))) (app abstr-vals$2310 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2298 (bv #x00000000 32) (bv #x00000001 32)))))))) (bvadd (ite x?$2297 (bvadd (app abstr-vals$2310 0) (ite x?$2298 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2298 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (app abstr-vals$2310 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2298 (bv #x00000000 32) (bv #x00000001 32))))) (app abstr-vals$2310 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2298 (bv #x00000000 32) (bv #x00000001 32))))))) (ite (bvsle (bvadd (bv #x80000000 32) (bvneg (ite (bvsle (ite x?$2297 (bvadd (app abstr-vals$2310 0) (ite x?$2298 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2298 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (app abstr-vals$2310 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2298 (bv #x00000000 32) (bv #x00000001 32))))) (app abstr-vals$2310 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2298 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)) (ite x?$2297 (bvadd (app abstr-vals$2310 0) (ite x?$2298 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2298 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (app abstr-vals$2310 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2298 (bv #x00000000 32) (bv #x00000001 32))))) (app abstr-vals$2310 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2298 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)))) (ite (bvsle (app abstr-vals$2310 1) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$2297 (bvadd (app abstr-vals$2310 0) (ite x?$2298 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2298 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (app abstr-vals$2310 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2298 (bv #x00000000 32) (bv #x00000001 32))))) (app abstr-vals$2310 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2298 (bv #x00000000 32) (bv #x00000001 32)))))))) (ite x?$2297 (bvadd (app abstr-vals$2310 0) (ite x?$2298 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2298 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (app abstr-vals$2310 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2298 (bv #x00000000 32) (bv #x00000001 32))))) (app abstr-vals$2310 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2298 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32))))) (app abstr-vals$2310 1) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$2297 (bvadd (app abstr-vals$2310 0) (ite x?$2298 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2298 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (app abstr-vals$2310 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2298 (bv #x00000000 32) (bv #x00000001 32))))) (app abstr-vals$2310 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2298 (bv #x00000000 32) (bv #x00000001 32)))))))) (ite x?$2297 (bvadd (app abstr-vals$2310 0) (ite x?$2298 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2298 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (app abstr-vals$2310 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2298 (bv #x00000000 32) (bv #x00000001 32))))) (app abstr-vals$2310 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2298 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)))))) (ite (bvsle (app abstr-vals$2310 1) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$2297 (bvadd (app abstr-vals$2310 0) (ite x?$2298 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2298 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (app abstr-vals$2310 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2298 (bv #x00000000 32) (bv #x00000001 32))))) (app abstr-vals$2310 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2298 (bv #x00000000 32) (bv #x00000001 32)))))))) (ite x?$2297 (bvadd (app abstr-vals$2310 0) (ite x?$2298 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2298 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (app abstr-vals$2310 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2298 (bv #x00000000 32) (bv #x00000001 32))))) (app abstr-vals$2310 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2298 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32))))) (app abstr-vals$2310 1) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$2297 (bvadd (app abstr-vals$2310 0) (ite x?$2298 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2298 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (app abstr-vals$2310 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2298 (bv #x00000000 32) (bv #x00000001 32))))) (app abstr-vals$2310 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2298 (bv #x00000000 32) (bv #x00000001 32)))))))) (ite x?$2297 (bvadd (app abstr-vals$2310 0) (ite x?$2298 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2298 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (app abstr-vals$2310 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2298 (bv #x00000000 32) (bv #x00000001 32))))) (app abstr-vals$2310 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2298 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32))))) (bvadd (bv #x80000000 32) (bvneg (ite (bvsle (ite x?$2297 (bvadd (app abstr-vals$2310 0) (ite x?$2298 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2298 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (app abstr-vals$2310 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2298 (bv #x00000000 32) (bv #x00000001 32))))) (app abstr-vals$2310 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2298 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)) (ite x?$2297 (bvadd (app abstr-vals$2310 0) (ite x?$2298 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2298 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (app abstr-vals$2310 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2298 (bv #x00000000 32) (bv #x00000001 32))))) (app abstr-vals$2310 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2298 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32))))))) (bv #x00000001 32)))))
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-cast
  (vec-cast
   (vec-max
    (vec-min
     (vec-add
      (vec-bwand
       (sca-broadcast (int32_t (bv #x00000001 32)) 16)
       (vec-div
        (vec-add
         (vec-mul
          (vec-cast
           (vec-add
            (vec-mul
             (vec-cast
              (load
               (buffer input1 'uint8)
               (ramp
                (sca-add
                 (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
                 (sca-sub
                  (sca-sub (var-lookup 't75) (var-lookup 't81))
                  (var-lookup 'input1.min.0)))
                1
                16)
               (aligned 1 0))
              'int16
              16)
             (sca-broadcast (int16_t (bv #x0040 16)) 16))
            (sca-broadcast
             (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))
             16))
           'int32
           16)
          (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
         (sca-broadcast
          (sca-mul
           (sca-cast
            (sca-mul
             (sca-sub (int16_t t149) (int16_t t150))
             (int16_t (bv #x0040 16)))
            'int32)
           (sca-cast (int16_t input2_multiplier) 'int32))
          16))
        (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
      (vec-div
       (vec-add
        (vec-mul
         (vec-cast
          (vec-add
           (vec-mul
            (vec-cast
             (load
              (buffer input1 'uint8)
              (ramp
               (sca-add
                (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
                (sca-sub
                 (sca-sub (var-lookup 't75) (var-lookup 't81))
                 (var-lookup 'input1.min.0)))
               1
               16)
              (aligned 1 0))
             'int16
             16)
            (sca-broadcast (int16_t (bv #x0040 16)) 16))
           (sca-broadcast
            (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))
            16))
          'int32
          16)
         (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
        (sca-broadcast
         (sca-mul
          (sca-cast
           (sca-mul
            (sca-sub (int16_t t149) (int16_t t150))
            (int16_t (bv #x0040 16)))
           'int32)
          (sca-cast (int16_t input2_multiplier) 'int32))
         16))
       (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
     (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
    (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
   'int16
   16)
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t t151) 16) 'int32 16))
template:
  (cast
 ...
 (cast
  ...
  (vs-shift-right
   ...
   (vs-mpy-add
    ...
    (combine
     (vs-mpy-add
      ...
      (combine
       #<load-data>
       (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))))
      (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
      #f
      #f
      #f
      'int16)
     (broadcast
      ...
      (sca-mul
       (sca-cast
        (sca-mul
         (sca-sub (int16_t t149) (int16_t t150))
         (int16_t (bv #x0040 16)))
        'int32)
       (sca-cast (int16_t input2_multiplier) 'int32))))
    (list (int8_t (bv #x01 8)) (int16_t input1_multiplier))
    #f
    #f
    #f
    'int32)
   (int32_t (bv #x00000010 32))
   #t
   x?$2072
   #t)
  'int16
  #t)
 'int32
 x?$2283)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-add
 (vec-cast #<abstr-halide-expr> 'int32 16)
 (vec-cast (sca-broadcast (int16_t t151) 16) 'int32 16))
optimized-template:
  (cast ... #<abstr-expr> 'int32 x?$2283)
optimized Halide 0:
  (int32_t
 (bvadd (sign-extend t151 (bitvector 32)) (sign-extend (app abstr-vals$2311 0) (bitvector 32))))
optimized x86 0:
  (int32_t (sign-extend (app abstr-vals$2311 0) (bitvector 32)))
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-cast
  (vec-cast
   (vec-max
    (vec-min
     (vec-add
      (vec-bwand
       (sca-broadcast (int32_t (bv #x00000001 32)) 16)
       (vec-div
        (vec-add
         (vec-mul
          (vec-cast
           (vec-add
            (vec-mul
             (vec-cast
              (load
               (buffer input1 'uint8)
               (ramp
                (sca-add
                 (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
                 (sca-sub
                  (sca-sub (var-lookup 't75) (var-lookup 't81))
                  (var-lookup 'input1.min.0)))
                1
                16)
               (aligned 1 0))
              'int16
              16)
             (sca-broadcast (int16_t (bv #x0040 16)) 16))
            (sca-broadcast
             (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))
             16))
           'int32
           16)
          (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
         (sca-broadcast
          (sca-mul
           (sca-cast
            (sca-mul
             (sca-sub (int16_t t149) (int16_t t150))
             (int16_t (bv #x0040 16)))
            'int32)
           (sca-cast (int16_t input2_multiplier) 'int32))
          16))
        (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
      (vec-div
       (vec-add
        (vec-mul
         (vec-cast
          (vec-add
           (vec-mul
            (vec-cast
             (load
              (buffer input1 'uint8)
              (ramp
               (sca-add
                (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
                (sca-sub
                 (sca-sub (var-lookup 't75) (var-lookup 't81))
                 (var-lookup 'input1.min.0)))
               1
               16)
              (aligned 1 0))
             'int16
             16)
            (sca-broadcast (int16_t (bv #x0040 16)) 16))
           (sca-broadcast
            (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))
            16))
          'int32
          16)
         (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
        (sca-broadcast
         (sca-mul
          (sca-cast
           (sca-mul
            (sca-sub (int16_t t149) (int16_t t150))
            (int16_t (bv #x0040 16)))
           'int32)
          (sca-cast (int16_t input2_multiplier) 'int32))
         16))
       (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
     (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
    (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
   'int16
   16)
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t t151) 16) 'int32 16))
template:
  (vs-mpy-add
 ...
 (cast
  ...
  (vs-shift-right
   ...
   (vs-mpy-add
    ...
    (combine
     (vs-mpy-add
      ...
      (combine
       #<load-data>
       (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))))
      (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
      #f
      #f
      #f
      'int16)
     (broadcast
      ...
      (sca-mul
       (sca-cast
        (sca-mul
         (sca-sub (int16_t t149) (int16_t t150))
         (int16_t (bv #x0040 16)))
        'int32)
       (sca-cast (int16_t input2_multiplier) 'int32))))
    (list (int8_t (bv #x01 8)) (int16_t input1_multiplier))
    #f
    #f
    #f
    'int32)
   (int32_t (bv #x00000010 32))
   #t
   x?$2072
   #t)
  'int16
  #t)
 (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
 (! x?$2292)
 (! x?$2293)
 (! x?$2294)
 'int32)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-add
 (vec-cast #<abstr-halide-expr> 'int32 16)
 (vec-cast (sca-broadcast (int16_t t151) 16) 'int32 16))
optimized-template:
  (vs-mpy-add
 ...
 #<abstr-expr>
 (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
 (! x?$2292)
 (! x?$2293)
 (! x?$2294)
 'int32)
optimized Halide 0:
  (int32_t
 (bvadd (sign-extend t151 (bitvector 32)) (sign-extend (app abstr-vals$2312 0) (bitvector 32))))
optimized x86 0:
  (int32_t
 (ite* (⊢ (&& x?$2294 (! (&& (! x?$2292) (! x?$2294)))) (ite x?$2292 (bvadd (sign-extend (app abstr-vals$2312 1) (bitvector 32)) (ite x?$2292 (bvadd (sign-extend (app abstr-vals$2312 0) (bitvector 32)) (ite x?$2293 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2293 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$2312 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2293 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$2312 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2293 (bv #x00000000 32) (bv #x00000001 32)))))))) (bvadd (ite x?$2292 (bvadd (sign-extend (app abstr-vals$2312 0) (bitvector 32)) (ite x?$2293 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2293 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$2312 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2293 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$2312 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2293 (bv #x00000000 32) (bv #x00000001 32))))))) (ite (bvsle (bvadd (bv #x80000000 32) (bvneg (ite (bvsle (ite x?$2292 (bvadd (sign-extend (app abstr-vals$2312 0) (bitvector 32)) (ite x?$2293 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2293 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$2312 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2293 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$2312 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2293 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)) (ite x?$2292 (bvadd (sign-extend (app abstr-vals$2312 0) (bitvector 32)) (ite x?$2293 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2293 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$2312 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2293 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$2312 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2293 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)))) (ite (bvsle (sign-extend (app abstr-vals$2312 1) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$2292 (bvadd (sign-extend (app abstr-vals$2312 0) (bitvector 32)) (ite x?$2293 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2293 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$2312 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2293 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$2312 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2293 (bv #x00000000 32) (bv #x00000001 32)))))))) (ite x?$2292 (bvadd (sign-extend (app abstr-vals$2312 0) (bitvector 32)) (ite x?$2293 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2293 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$2312 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2293 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$2312 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2293 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32))))) (sign-extend (app abstr-vals$2312 1) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$2292 (bvadd (sign-extend (app abstr-vals$2312 0) (bitvector 32)) (ite x?$2293 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2293 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$2312 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2293 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$2312 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2293 (bv #x00000000 32) (bv #x00000001 32)))))))) (ite x?$2292 (bvadd (sign-extend (app abstr-vals$2312 0) (bitvector 32)) (ite x?$2293 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2293 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$2312 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2293 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$2312 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2293 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)))))) (ite (bvsle (sign-extend (app abstr-vals$2312 1) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$2292 (bvadd (sign-extend (app abstr-vals$2312 0) (bitvector 32)) (ite x?$2293 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2293 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$2312 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2293 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$2312 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2293 (bv #x00000000 32) (bv #x00000001 32)))))))) (ite x?$2292 (bvadd (sign-extend (app abstr-vals$2312 0) (bitvector 32)) (ite x?$2293 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2293 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$2312 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2293 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$2312 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2293 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32))))) (sign-extend (app abstr-vals$2312 1) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$2292 (bvadd (sign-extend (app abstr-vals$2312 0) (bitvector 32)) (ite x?$2293 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2293 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$2312 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2293 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$2312 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2293 (bv #x00000000 32) (bv #x00000001 32)))))))) (ite x?$2292 (bvadd (sign-extend (app abstr-vals$2312 0) (bitvector 32)) (ite x?$2293 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2293 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$2312 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2293 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$2312 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2293 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32))))) (bvadd (bv #x80000000 32) (bvneg (ite (bvsle (ite x?$2292 (bvadd (sign-extend (app abstr-vals$2312 0) (bitvector 32)) (ite x?$2293 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2293 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$2312 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2293 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$2312 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2293 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)) (ite x?$2292 (bvadd (sign-extend (app abstr-vals$2312 0) (bitvector 32)) (ite x?$2293 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2293 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$2312 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2293 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$2312 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2293 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)))))))) (⊢ (|| (&& (! x?$2292) (! x?$2294)) (&& (! x?$2294) (! (&& (! x?$2292) (! x?$2294))))) (bvashr (ite x?$2292 (bvadd (sign-extend (app abstr-vals$2312 1) (bitvector 32)) (ite x?$2292 (bvadd (sign-extend (app abstr-vals$2312 0) (bitvector 32)) (ite x?$2293 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2293 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$2312 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2293 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$2312 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2293 (bv #x00000000 32) (bv #x00000001 32)))))))) (bvadd (ite x?$2292 (bvadd (sign-extend (app abstr-vals$2312 0) (bitvector 32)) (ite x?$2293 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2293 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$2312 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2293 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$2312 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2293 (bv #x00000000 32) (bv #x00000001 32))))))) (ite (bvsle (bvadd (bv #x80000000 32) (bvneg (ite (bvsle (ite x?$2292 (bvadd (sign-extend (app abstr-vals$2312 0) (bitvector 32)) (ite x?$2293 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2293 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$2312 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2293 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$2312 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2293 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)) (ite x?$2292 (bvadd (sign-extend (app abstr-vals$2312 0) (bitvector 32)) (ite x?$2293 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2293 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$2312 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2293 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$2312 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2293 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)))) (ite (bvsle (sign-extend (app abstr-vals$2312 1) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$2292 (bvadd (sign-extend (app abstr-vals$2312 0) (bitvector 32)) (ite x?$2293 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2293 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$2312 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2293 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$2312 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2293 (bv #x00000000 32) (bv #x00000001 32)))))))) (ite x?$2292 (bvadd (sign-extend (app abstr-vals$2312 0) (bitvector 32)) (ite x?$2293 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2293 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$2312 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2293 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$2312 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2293 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32))))) (sign-extend (app abstr-vals$2312 1) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$2292 (bvadd (sign-extend (app abstr-vals$2312 0) (bitvector 32)) (ite x?$2293 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2293 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$2312 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2293 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$2312 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2293 (bv #x00000000 32) (bv #x00000001 32)))))))) (ite x?$2292 (bvadd (sign-extend (app abstr-vals$2312 0) (bitvector 32)) (ite x?$2293 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2293 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$2312 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2293 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$2312 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2293 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)))))) (ite (bvsle (sign-extend (app abstr-vals$2312 1) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$2292 (bvadd (sign-extend (app abstr-vals$2312 0) (bitvector 32)) (ite x?$2293 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2293 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$2312 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2293 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$2312 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2293 (bv #x00000000 32) (bv #x00000001 32)))))))) (ite x?$2292 (bvadd (sign-extend (app abstr-vals$2312 0) (bitvector 32)) (ite x?$2293 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2293 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$2312 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2293 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$2312 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2293 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32))))) (sign-extend (app abstr-vals$2312 1) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$2292 (bvadd (sign-extend (app abstr-vals$2312 0) (bitvector 32)) (ite x?$2293 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2293 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$2312 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2293 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$2312 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2293 (bv #x00000000 32) (bv #x00000001 32)))))))) (ite x?$2292 (bvadd (sign-extend (app abstr-vals$2312 0) (bitvector 32)) (ite x?$2293 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2293 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$2312 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2293 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$2312 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2293 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32))))) (bvadd (bv #x80000000 32) (bvneg (ite (bvsle (ite x?$2292 (bvadd (sign-extend (app abstr-vals$2312 0) (bitvector 32)) (ite x?$2293 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2293 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$2312 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2293 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$2312 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2293 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)) (ite x?$2292 (bvadd (sign-extend (app abstr-vals$2312 0) (bitvector 32)) (ite x?$2293 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2293 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$2312 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2293 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$2312 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2293 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32))))))) (bv #x00000001 32)))))
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-cast
  (vec-cast
   (vec-max
    (vec-min
     (vec-add
      (vec-bwand
       (sca-broadcast (int32_t (bv #x00000001 32)) 16)
       (vec-div
        (vec-add
         (vec-mul
          (vec-cast
           (vec-add
            (vec-mul
             (vec-cast
              (load
               (buffer input1 'uint8)
               (ramp
                (sca-add
                 (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
                 (sca-sub
                  (sca-sub (var-lookup 't75) (var-lookup 't81))
                  (var-lookup 'input1.min.0)))
                1
                16)
               (aligned 1 0))
              'int16
              16)
             (sca-broadcast (int16_t (bv #x0040 16)) 16))
            (sca-broadcast
             (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))
             16))
           'int32
           16)
          (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
         (sca-broadcast
          (sca-mul
           (sca-cast
            (sca-mul
             (sca-sub (int16_t t149) (int16_t t150))
             (int16_t (bv #x0040 16)))
            'int32)
           (sca-cast (int16_t input2_multiplier) 'int32))
          16))
        (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
      (vec-div
       (vec-add
        (vec-mul
         (vec-cast
          (vec-add
           (vec-mul
            (vec-cast
             (load
              (buffer input1 'uint8)
              (ramp
               (sca-add
                (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
                (sca-sub
                 (sca-sub (var-lookup 't75) (var-lookup 't81))
                 (var-lookup 'input1.min.0)))
               1
               16)
              (aligned 1 0))
             'int16
             16)
            (sca-broadcast (int16_t (bv #x0040 16)) 16))
           (sca-broadcast
            (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))
            16))
          'int32
          16)
         (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
        (sca-broadcast
         (sca-mul
          (sca-cast
           (sca-mul
            (sca-sub (int16_t t149) (int16_t t150))
            (int16_t (bv #x0040 16)))
           'int32)
          (sca-cast (int16_t input2_multiplier) 'int32))
         16))
       (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
     (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
    (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
   'int16
   16)
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t t151) 16) 'int32 16))
template:
  (vs-mpy-add
 ...
 (union [x?$2315 #(struct:cast
                   ...
                   #(struct:cast
                     ...
                     #(struct:vs-shift-right
                       ...
                       #(struct:vs-mpy-add
                         ...
                         #<combine:
                          #(struct:vs-mpy-add
                            ...
                            #<combine:
                             #<load-data>
                             #(struct:broadcast
                               ...
                               #(struct:sca-mul
                                 #(struct:int16_t t148)
                                 #(struct:int16_t (bv #xffc0 16))))>
                            (#(struct:int8_t (bv #x01 8))
                             #(struct:int16_t (bv #x0040 16)))
                            #f
                            #f
                            #f
                            int16)
                          #(struct:broadcast
                            ...
                            #(struct:sca-mul
                              #(struct:sca-cast
                                #(struct:sca-mul
                                  #(struct:sca-sub
                                    #(struct:int16_t t149)
                                    #(struct:int16_t t150))
                                  #(struct:int16_t (bv #x0040 16)))
                                int32)
                              #(struct:sca-cast
                                #(struct:int16_t input2_multiplier)
                                int32)))>
                         (#(struct:int8_t (bv #x01 8))
                          #(struct:int16_t input1_multiplier))
                         #f
                         #f
                         #f
                         int32)
                       #(struct:int32_t (bv #x00000010 32))
                       #t
                       x?$2072
                       #t)
                     int16
                     #t)
                   int32
                   #f)] [(! x?$2315) #(struct:cast
                                       ...
                                       #(struct:broadcast
                                         ...
                                         #(struct:int16_t t151))
                                       int32
                                       #f)])
 (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
 (! x?$2316)
 (! x?$2317)
 (! x?$2318)
 'int32)
axioms:
  '()
optimized-halide-expr:
  (vec-add
 (vec-cast
  (vec-cast
   (vec-max
    (vec-min
     (vec-add
      (vec-bwand
       (sca-broadcast (int32_t (bv #x00000001 32)) 16)
       (vec-div
        (vec-add
         (vec-mul
          (vec-cast
           (vec-add
            (vec-mul
             (vec-cast
              (load
               (buffer input1 'uint8)
               (ramp
                (sca-add
                 (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
                 (sca-sub
                  (sca-sub (var-lookup 't75) (var-lookup 't81))
                  (var-lookup 'input1.min.0)))
                1
                16)
               (aligned 1 0))
              'int16
              16)
             (sca-broadcast (int16_t (bv #x0040 16)) 16))
            (sca-broadcast
             (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))
             16))
           'int32
           16)
          (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
         (sca-broadcast
          (sca-mul
           (sca-cast
            (sca-mul
             (sca-sub (int16_t t149) (int16_t t150))
             (int16_t (bv #x0040 16)))
            'int32)
           (sca-cast (int16_t input2_multiplier) 'int32))
          16))
        (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
      (vec-div
       (vec-add
        (vec-mul
         (vec-cast
          (vec-add
           (vec-mul
            (vec-cast
             (load
              (buffer input1 'uint8)
              (ramp
               (sca-add
                (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
                (sca-sub
                 (sca-sub (var-lookup 't75) (var-lookup 't81))
                 (var-lookup 'input1.min.0)))
               1
               16)
              (aligned 1 0))
             'int16
             16)
            (sca-broadcast (int16_t (bv #x0040 16)) 16))
           (sca-broadcast
            (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))
            16))
          'int32
          16)
         (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
        (sca-broadcast
         (sca-mul
          (sca-cast
           (sca-mul
            (sca-sub (int16_t t149) (int16_t t150))
            (int16_t (bv #x0040 16)))
           'int32)
          (sca-cast (int16_t input2_multiplier) 'int32))
         16))
       (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
     (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
    (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
   'int16
   16)
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t t151) 16) 'int32 16))
optimized-template:
  (vs-mpy-add
 ...
 (union [x?$2315 #(struct:cast
                   ...
                   #(struct:cast
                     ...
                     #(struct:vs-shift-right
                       ...
                       #(struct:vs-mpy-add
                         ...
                         #<combine:
                          #(struct:vs-mpy-add
                            ...
                            #<combine:
                             #<load-data>
                             #(struct:broadcast
                               ...
                               #(struct:sca-mul
                                 #(struct:int16_t t148)
                                 #(struct:int16_t (bv #xffc0 16))))>
                            (#(struct:int8_t (bv #x01 8))
                             #(struct:int16_t (bv #x0040 16)))
                            #f
                            #f
                            #f
                            int16)
                          #(struct:broadcast
                            ...
                            #(struct:sca-mul
                              #(struct:sca-cast
                                #(struct:sca-mul
                                  #(struct:sca-sub
                                    #(struct:int16_t t149)
                                    #(struct:int16_t t150))
                                  #(struct:int16_t (bv #x0040 16)))
                                int32)
                              #(struct:sca-cast
                                #(struct:int16_t input2_multiplier)
                                int32)))>
                         (#(struct:int8_t (bv #x01 8))
                          #(struct:int16_t input1_multiplier))
                         #f
                         #f
                         #f
                         int32)
                       #(struct:int32_t (bv #x00000010 32))
                       #t
                       x?$2072
                       #t)
                     int16
                     #t)
                   int32
                   #f)] [(! x?$2315) #(struct:cast
                                       ...
                                       #(struct:broadcast
                                         ...
                                         #(struct:int16_t t151))
                                       int32
                                       #f)])
 (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
 (! x?$2316)
 (! x?$2317)
 (! x?$2318)
 'int32)
optimized Halide 0:
  (int32_t
 (bvadd (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32)) (sign-extend t151 (bitvector 32))))
optimized x86 0:
  (int32_t
 (ite* (⊢ (&& x?$2318 (! (&& (! x?$2316) (! x?$2318)))) (ite x?$2316 (bvadd (ite x?$2315 (sign-extend (ite (bvslt (bvadd (bvashr (bvadd (ite c$1635 (sign-extend (bvadd (ite (|| (= 1 (* 2 idx$1634)) (&& c$602 (= 2 (* 2 idx$1634))) (&& c$604 (= 3 (* 2 idx$1634))) (&& c$606 (= 4 (* 2 idx$1634))) (&& c$608 (= 5 (* 2 idx$1634))) (&& c$610 (= 6 (* 2 idx$1634))) (&& c$612 (= 7 (* 2 idx$1634))) (&& c$614 (= 8 (* 2 idx$1634))) (&& c$616 (= 9 (* 2 idx$1634))) (&& c$618 (= 10 (* 2 idx$1634))) (&& c$620 (= 11 (* 2 idx$1634))) (&& c$622 (= 12 (* 2 idx$1634))) (&& c$624 (= 13 (* 2 idx$1634))) (&& c$626 (= 14 (* 2 idx$1634))) (&& c$628 (= 15 (* 2 idx$1634))) (&& c$630 (= 16 (* 2 idx$1634))) (&& c$632 (= 17 (* 2 idx$1634))) (&& c$634 (= 18 (* 2 idx$1634))) (&& c$636 (= 19 (* 2 idx$1634))) (&& c$638 (= 20 (* 2 idx$1634))) (&& c$640 (= 21 (* 2 idx$1634))) (&& c$642 (= 22 (* 2 idx$1634))) (&& c$644 (= 23 (* 2 idx$1634))) (&& c$646 (= 24 (* 2 idx$1634))) (&& c$648 (= 25 (* 2 idx$1634))) (&& c$650 (= 26 (* 2 idx$1634))) (&& c$652 (= 27 (* 2 idx$1634))) (&& c$654 (= 28 (* 2 idx$1634))) (&& c$656 (= 29 (* 2 idx$1634))) (&& c$658 (= 30 (* 2 idx$1634))) (&& c$660 (= 31 (* 2 idx$1634))) (&& c$662 (= 32 (* 2 idx$1634))) (&& c$664 (= 33 (* 2 idx$1634))) (&& c$666 (= 34 (* 2 idx$1634))) (&& c$668 (= 35 (* 2 idx$1634))) (&& c$670 (= 36 (* 2 idx$1634))) (&& c$672 (= 37 (* 2 idx$1634))) (&& c$674 (= 38 (* 2 idx$1634))) (&& c$676 (= 39 (* 2 idx$1634))) (&& c$678 (= 40 (* 2 idx$1634))) (&& c$680 (= 41 (* 2 idx$1634))) (&& c$682 (= 42 (* 2 idx$1634))) (&& c$684 (= 43 (* 2 idx$1634))) (&& c$686 (= 44 (* 2 idx$1634))) (&& c$688 (= 45 (* 2 idx$1634))) (&& c$690 (= 46 (* 2 idx$1634))) (&& c$692 (= 47 (* 2 idx$1634))) (&& c$694 (= 48 (* 2 idx$1634))) (&& c$696 (= 49 (* 2 idx$1634))) (&& c$698 (= 50 (* 2 idx$1634))) (&& c$700 (= 51 (* 2 idx$1634))) (&& c$702 (= 52 (* 2 idx$1634))) (&& c$704 (= 53 (* 2 idx$1634))) (&& c$706 (= 54 (* 2 idx$1634))) (&& c$708 (= 55 (* 2 idx$1634))) (&& c$710 (= 56 (* 2 idx$1634))) (&& c$712 (= 57 (* 2 idx$1634))) (&& c$714 (= 58 (* 2 idx$1634))) (&& c$716 (= 59 (* 2 idx$1634))) (&& c$718 (= 60 (* 2 idx$1634))) (&& c$720 (= 61 (* 2 idx$1634))) (&& c$722 (= 62 (* 2 idx$1634))) (&& c$724 (= 63 (* 2 idx$1634)))) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16)) (bvmul (bv #xffc0 16) t148)) (bvmul (bv #x0040 16) (ite (|| (= 1 (+ 1 (* 2 idx$1634))) (&& c$602 (= 2 (+ 1 (* 2 idx$1634)))) (&& c$604 (= 3 (+ 1 (* 2 idx$1634)))) (&& c$606 (= 4 (+ 1 (* 2 idx$1634)))) (&& c$608 (= 5 (+ 1 (* 2 idx$1634)))) (&& c$610 (= 6 (+ 1 (* 2 idx$1634)))) (&& c$612 (= 7 (+ 1 (* 2 idx$1634)))) (&& c$614 (= 8 (+ 1 (* 2 idx$1634)))) (&& c$616 (= 9 (+ 1 (* 2 idx$1634)))) (&& c$618 (= 10 (+ 1 (* 2 idx$1634)))) (&& c$620 (= 11 (+ 1 (* 2 idx$1634)))) (&& c$622 (= 12 (+ 1 (* 2 idx$1634)))) (&& c$624 (= 13 (+ 1 (* 2 idx$1634)))) (&& c$626 (= 14 (+ 1 (* 2 idx$1634)))) (&& c$628 (= 15 (+ 1 (* 2 idx$1634)))) (&& c$630 (= 16 (+ 1 (* 2 idx$1634)))) (&& c$632 (= 17 (+ 1 (* 2 idx$1634)))) (&& c$634 (= 18 (+ 1 (* 2 idx$1634)))) (&& c$636 (= 19 (+ 1 (* 2 idx$1634)))) (&& c$638 (= 20 (+ 1 (* 2 idx$1634)))) (&& c$640 (= 21 (+ 1 (* 2 idx$1634)))) (&& c$642 (= 22 (+ 1 (* 2 idx$1634)))) (&& c$644 (= 23 (+ 1 (* 2 idx$1634)))) (&& c$646 (= 24 (+ 1 (* 2 idx$1634)))) (&& c$648 (= 25 (+ 1 (* 2 idx$1634)))) (&& c$650 (= 26 (+ 1 (* 2 idx$1634)))) (&& c$652 (= 27 (+ 1 (* 2 idx$1634)))) (&& c$654 (= 28 (+ 1 (* 2 idx$1634)))) (&& c$656 (= 29 (+ 1 (* 2 idx$1634)))) (&& c$658 (= 30 (+ 1 (* 2 idx$1634)))) (&& c$660 (= 31 (+ 1 (* 2 idx$1634)))) (&& c$662 (= 32 (+ 1 (* 2 idx$1634)))) (&& c$664 (= 33 (+ 1 (* 2 idx$1634)))) (&& c$666 (= 34 (+ 1 (* 2 idx$1634)))) (&& c$668 (= 35 (+ 1 (* 2 idx$1634)))) (&& c$670 (= 36 (+ 1 (* 2 idx$1634)))) (&& c$672 (= 37 (+ 1 (* 2 idx$1634)))) (&& c$674 (= 38 (+ 1 (* 2 idx$1634)))) (&& c$676 (= 39 (+ 1 (* 2 idx$1634)))) (&& c$678 (= 40 (+ 1 (* 2 idx$1634)))) (&& c$680 (= 41 (+ 1 (* 2 idx$1634)))) (&& c$682 (= 42 (+ 1 (* 2 idx$1634)))) (&& c$684 (= 43 (+ 1 (* 2 idx$1634)))) (&& c$686 (= 44 (+ 1 (* 2 idx$1634)))) (&& c$688 (= 45 (+ 1 (* 2 idx$1634)))) (&& c$690 (= 46 (+ 1 (* 2 idx$1634)))) (&& c$692 (= 47 (+ 1 (* 2 idx$1634)))) (&& c$694 (= 48 (+ 1 (* 2 idx$1634)))) (&& c$696 (= 49 (+ 1 (* 2 idx$1634)))) (&& c$698 (= 50 (+ 1 (* 2 idx$1634)))) (&& c$700 (= 51 (+ 1 (* 2 idx$1634)))) (&& c$702 (= 52 (+ 1 (* 2 idx$1634)))) (&& c$704 (= 53 (+ 1 (* 2 idx$1634)))) (&& c$706 (= 54 (+ 1 (* 2 idx$1634)))) (&& c$708 (= 55 (+ 1 (* 2 idx$1634)))) (&& c$710 (= 56 (+ 1 (* 2 idx$1634)))) (&& c$712 (= 57 (+ 1 (* 2 idx$1634)))) (&& c$714 (= 58 (+ 1 (* 2 idx$1634)))) (&& c$716 (= 59 (+ 1 (* 2 idx$1634)))) (&& c$718 (= 60 (+ 1 (* 2 idx$1634)))) (&& c$720 (= 61 (+ 1 (* 2 idx$1634)))) (&& c$722 (= 62 (+ 1 (* 2 idx$1634)))) (&& c$724 (= 63 (+ 1 (* 2 idx$1634))))) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16)) (bvmul (bv #xffc0 16) t148)))) (bitvector 32)) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bvmul (sign-extend input1_multiplier (bitvector 32)) (ite c$1637 (sign-extend (bvadd (ite (|| (= 1 (* 2 idx$1636)) (&& c$602 (= 2 (* 2 idx$1636))) (&& c$604 (= 3 (* 2 idx$1636))) (&& c$606 (= 4 (* 2 idx$1636))) (&& c$608 (= 5 (* 2 idx$1636))) (&& c$610 (= 6 (* 2 idx$1636))) (&& c$612 (= 7 (* 2 idx$1636))) (&& c$614 (= 8 (* 2 idx$1636))) (&& c$616 (= 9 (* 2 idx$1636))) (&& c$618 (= 10 (* 2 idx$1636))) (&& c$620 (= 11 (* 2 idx$1636))) (&& c$622 (= 12 (* 2 idx$1636))) (&& c$624 (= 13 (* 2 idx$1636))) (&& c$626 (= 14 (* 2 idx$1636))) (&& c$628 (= 15 (* 2 idx$1636))) (&& c$630 (= 16 (* 2 idx$1636))) (&& c$632 (= 17 (* 2 idx$1636))) (&& c$634 (= 18 (* 2 idx$1636))) (&& c$636 (= 19 (* 2 idx$1636))) (&& c$638 (= 20 (* 2 idx$1636))) (&& c$640 (= 21 (* 2 idx$1636))) (&& c$642 (= 22 (* 2 idx$1636))) (&& c$644 (= 23 (* 2 idx$1636))) (&& c$646 (= 24 (* 2 idx$1636))) (&& c$648 (= 25 (* 2 idx$1636))) (&& c$650 (= 26 (* 2 idx$1636))) (&& c$652 (= 27 (* 2 idx$1636))) (&& c$654 (= 28 (* 2 idx$1636))) (&& c$656 (= 29 (* 2 idx$1636))) (&& c$658 (= 30 (* 2 idx$1636))) (&& c$660 (= 31 (* 2 idx$1636))) (&& c$662 (= 32 (* 2 idx$1636))) (&& c$664 (= 33 (* 2 idx$1636))) (&& c$666 (= 34 (* 2 idx$1636))) (&& c$668 (= 35 (* 2 idx$1636))) (&& c$670 (= 36 (* 2 idx$1636))) (&& c$672 (= 37 (* 2 idx$1636))) (&& c$674 (= 38 (* 2 idx$1636))) (&& c$676 (= 39 (* 2 idx$1636))) (&& c$678 (= 40 (* 2 idx$1636))) (&& c$680 (= 41 (* 2 idx$1636))) (&& c$682 (= 42 (* 2 idx$1636))) (&& c$684 (= 43 (* 2 idx$1636))) (&& c$686 (= 44 (* 2 idx$1636))) (&& c$688 (= 45 (* 2 idx$1636))) (&& c$690 (= 46 (* 2 idx$1636))) (&& c$692 (= 47 (* 2 idx$1636))) (&& c$694 (= 48 (* 2 idx$1636))) (&& c$696 (= 49 (* 2 idx$1636))) (&& c$698 (= 50 (* 2 idx$1636))) (&& c$700 (= 51 (* 2 idx$1636))) (&& c$702 (= 52 (* 2 idx$1636))) (&& c$704 (= 53 (* 2 idx$1636))) (&& c$706 (= 54 (* 2 idx$1636))) (&& c$708 (= 55 (* 2 idx$1636))) (&& c$710 (= 56 (* 2 idx$1636))) (&& c$712 (= 57 (* 2 idx$1636))) (&& c$714 (= 58 (* 2 idx$1636))) (&& c$716 (= 59 (* 2 idx$1636))) (&& c$718 (= 60 (* 2 idx$1636))) (&& c$720 (= 61 (* 2 idx$1636))) (&& c$722 (= 62 (* 2 idx$1636))) (&& c$724 (= 63 (* 2 idx$1636)))) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16)) (bvmul (bv #xffc0 16) t148)) (bvmul (bv #x0040 16) (ite (|| (= 1 (+ 1 (* 2 idx$1636))) (&& c$602 (= 2 (+ 1 (* 2 idx$1636)))) (&& c$604 (= 3 (+ 1 (* 2 idx$1636)))) (&& c$606 (= 4 (+ 1 (* 2 idx$1636)))) (&& c$608 (= 5 (+ 1 (* 2 idx$1636)))) (&& c$610 (= 6 (+ 1 (* 2 idx$1636)))) (&& c$612 (= 7 (+ 1 (* 2 idx$1636)))) (&& c$614 (= 8 (+ 1 (* 2 idx$1636)))) (&& c$616 (= 9 (+ 1 (* 2 idx$1636)))) (&& c$618 (= 10 (+ 1 (* 2 idx$1636)))) (&& c$620 (= 11 (+ 1 (* 2 idx$1636)))) (&& c$622 (= 12 (+ 1 (* 2 idx$1636)))) (&& c$624 (= 13 (+ 1 (* 2 idx$1636)))) (&& c$626 (= 14 (+ 1 (* 2 idx$1636)))) (&& c$628 (= 15 (+ 1 (* 2 idx$1636)))) (&& c$630 (= 16 (+ 1 (* 2 idx$1636)))) (&& c$632 (= 17 (+ 1 (* 2 idx$1636)))) (&& c$634 (= 18 (+ 1 (* 2 idx$1636)))) (&& c$636 (= 19 (+ 1 (* 2 idx$1636)))) (&& c$638 (= 20 (+ 1 (* 2 idx$1636)))) (&& c$640 (= 21 (+ 1 (* 2 idx$1636)))) (&& c$642 (= 22 (+ 1 (* 2 idx$1636)))) (&& c$644 (= 23 (+ 1 (* 2 idx$1636)))) (&& c$646 (= 24 (+ 1 (* 2 idx$1636)))) (&& c$648 (= 25 (+ 1 (* 2 idx$1636)))) (&& c$650 (= 26 (+ 1 (* 2 idx$1636)))) (&& c$652 (= 27 (+ 1 (* 2 idx$1636)))) (&& c$654 (= 28 (+ 1 (* 2 idx$1636)))) (&& c$656 (= 29 (+ 1 (* 2 idx$1636)))) (&& c$658 (= 30 (+ 1 (* 2 idx$1636)))) (&& c$660 (= 31 (+ 1 (* 2 idx$1636)))) (&& c$662 (= 32 (+ 1 (* 2 idx$1636)))) (&& c$664 (= 33 (+ 1 (* 2 idx$1636)))) (&& c$666 (= 34 (+ 1 (* 2 idx$1636)))) (&& c$668 (= 35 (+ 1 (* 2 idx$1636)))) (&& c$670 (= 36 (+ 1 (* 2 idx$1636)))) (&& c$672 (= 37 (+ 1 (* 2 idx$1636)))) (&& c$674 (= 38 (+ 1 (* 2 idx$1636)))) (&& c$676 (= 39 (+ 1 (* 2 idx$1636)))) (&& c$678 (= 40 (+ 1 (* 2 idx$1636)))) (&& c$680 (= 41 (+ 1 (* 2 idx$1636)))) (&& c$682 (= 42 (+ 1 (* 2 idx$1636)))) (&& c$684 (= 43 (+ 1 (* 2 idx$1636)))) (&& c$686 (= 44 (+ 1 (* 2 idx$1636)))) (&& c$688 (= 45 (+ 1 (* 2 idx$1636)))) (&& c$690 (= 46 (+ 1 (* 2 idx$1636)))) (&& c$692 (= 47 (+ 1 (* 2 idx$1636)))) (&& c$694 (= 48 (+ 1 (* 2 idx$1636)))) (&& c$696 (= 49 (+ 1 (* 2 idx$1636)))) (&& c$698 (= 50 (+ 1 (* 2 idx$1636)))) (&& c$700 (= 51 (+ 1 (* 2 idx$1636)))) (&& c$702 (= 52 (+ 1 (* 2 idx$1636)))) (&& c$704 (= 53 (+ 1 (* 2 idx$1636)))) (&& c$706 (= 54 (+ 1 (* 2 idx$1636)))) (&& c$708 (= 55 (+ 1 (* 2 idx$1636)))) (&& c$710 (= 56 (+ 1 (* 2 idx$1636)))) (&& c$712 (= 57 (+ 1 (* 2 idx$1636)))) (&& c$714 (= 58 (+ 1 (* 2 idx$1636)))) (&& c$716 (= 59 (+ 1 (* 2 idx$1636)))) (&& c$718 (= 60 (+ 1 (* 2 idx$1636)))) (&& c$720 (= 61 (+ 1 (* 2 idx$1636)))) (&& c$722 (= 62 (+ 1 (* 2 idx$1636)))) (&& c$724 (= 63 (+ 1 (* 2 idx$1636))))) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16)) (bvmul (bv #xffc0 16) t148)))) (bitvector 32)) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))))) (bv #x00000010 32)) (bvand (bv #x00000001 32) (bvashr (bvadd (ite c$1635 (sign-extend (bvadd (ite (|| (= 1 (* 2 idx$1634)) (&& c$602 (= 2 (* 2 idx$1634))) (&& c$604 (= 3 (* 2 idx$1634))) (&& c$606 (= 4 (* 2 idx$1634))) (&& c$608 (= 5 (* 2 idx$1634))) (&& c$610 (= 6 (* 2 idx$1634))) (&& c$612 (= 7 (* 2 idx$1634))) (&& c$614 (= 8 (* 2 idx$1634))) (&& c$616 (= 9 (* 2 idx$1634))) (&& c$618 (= 10 (* 2 idx$1634))) (&& c$620 (= 11 (* 2 idx$1634))) (&& c$622 (= 12 (* 2 idx$1634))) (&& c$624 (= 13 (* 2 idx$1634))) (&& c$626 (= 14 (* 2 idx$1634))) (&& c$628 (= 15 (* 2 idx$1634))) (&& c$630 (= 16 (* 2 idx$1634))) (&& c$632 (= 17 (* 2 idx$1634))) (&& c$634 (= 18 (* 2 idx$1634))) (&& c$636 (= 19 (* 2 idx$1634))) (&& c$638 (= 20 (* 2 idx$1634))) (&& c$640 (= 21 (* 2 idx$1634))) (&& c$642 (= 22 (* 2 idx$1634))) (&& c$644 (= 23 (* 2 idx$1634))) (&& c$646 (= 24 (* 2 idx$1634))) (&& c$648 (= 25 (* 2 idx$1634))) (&& c$650 (= 26 (* 2 idx$1634))) (&& c$652 (= 27 (* 2 idx$1634))) (&& c$654 (= 28 (* 2 idx$1634))) (&& c$656 (= 29 (* 2 idx$1634))) (&& c$658 (= 30 (* 2 idx$1634))) (&& c$660 (= 31 (* 2 idx$1634))) (&& c$662 (= 32 (* 2 idx$1634))) (&& c$664 (= 33 (* 2 idx$1634))) (&& c$666 (= 34 (* 2 idx$1634))) (&& c$668 (= 35 (* 2 idx$1634))) (&& c$670 (= 36 (* 2 idx$1634))) (&& c$672 (= 37 (* 2 idx$1634))) (&& c$674 (= 38 (* 2 idx$1634))) (&& c$676 (= 39 (* 2 idx$1634))) (&& c$678 (= 40 (* 2 idx$1634))) (&& c$680 (= 41 (* 2 idx$1634))) (&& c$682 (= 42 (* 2 idx$1634))) (&& c$684 (= 43 (* 2 idx$1634))) (&& c$686 (= 44 (* 2 idx$1634))) (&& c$688 (= 45 (* 2 idx$1634))) (&& c$690 (= 46 (* 2 idx$1634))) (&& c$692 (= 47 (* 2 idx$1634))) (&& c$694 (= 48 (* 2 idx$1634))) (&& c$696 (= 49 (* 2 idx$1634))) (&& c$698 (= 50 (* 2 idx$1634))) (&& c$700 (= 51 (* 2 idx$1634))) (&& c$702 (= 52 (* 2 idx$1634))) (&& c$704 (= 53 (* 2 idx$1634))) (&& c$706 (= 54 (* 2 idx$1634))) (&& c$708 (= 55 (* 2 idx$1634))) (&& c$710 (= 56 (* 2 idx$1634))) (&& c$712 (= 57 (* 2 idx$1634))) (&& c$714 (= 58 (* 2 idx$1634))) (&& c$716 (= 59 (* 2 idx$1634))) (&& c$718 (= 60 (* 2 idx$1634))) (&& c$720 (= 61 (* 2 idx$1634))) (&& c$722 (= 62 (* 2 idx$1634))) (&& c$724 (= 63 (* 2 idx$1634)))) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16)) (bvmul (bv #xffc0 16) t148)) (bvmul (bv #x0040 16) (ite (|| (= 1 (+ 1 (* 2 idx$1634))) (&& c$602 (= 2 (+ 1 (* 2 idx$1634)))) (&& c$604 (= 3 (+ 1 (* 2 idx$1634)))) (&& c$606 (= 4 (+ 1 (* 2 idx$1634)))) (&& c$608 (= 5 (+ 1 (* 2 idx$1634)))) (&& c$610 (= 6 (+ 1 (* 2 idx$1634)))) (&& c$612 (= 7 (+ 1 (* 2 idx$1634)))) (&& c$614 (= 8 (+ 1 (* 2 idx$1634)))) (&& c$616 (= 9 (+ 1 (* 2 idx$1634)))) (&& c$618 (= 10 (+ 1 (* 2 idx$1634)))) (&& c$620 (= 11 (+ 1 (* 2 idx$1634)))) (&& c$622 (= 12 (+ 1 (* 2 idx$1634)))) (&& c$624 (= 13 (+ 1 (* 2 idx$1634)))) (&& c$626 (= 14 (+ 1 (* 2 idx$1634)))) (&& c$628 (= 15 (+ 1 (* 2 idx$1634)))) (&& c$630 (= 16 (+ 1 (* 2 idx$1634)))) (&& c$632 (= 17 (+ 1 (* 2 idx$1634)))) (&& c$634 (= 18 (+ 1 (* 2 idx$1634)))) (&& c$636 (= 19 (+ 1 (* 2 idx$1634)))) (&& c$638 (= 20 (+ 1 (* 2 idx$1634)))) (&& c$640 (= 21 (+ 1 (* 2 idx$1634)))) (&& c$642 (= 22 (+ 1 (* 2 idx$1634)))) (&& c$644 (= 23 (+ 1 (* 2 idx$1634)))) (&& c$646 (= 24 (+ 1 (* 2 idx$1634)))) (&& c$648 (= 25 (+ 1 (* 2 idx$1634)))) (&& c$650 (= 26 (+ 1 (* 2 idx$1634)))) (&& c$652 (= 27 (+ 1 (* 2 idx$1634)))) (&& c$654 (= 28 (+ 1 (* 2 idx$1634)))) (&& c$656 (= 29 (+ 1 (* 2 idx$1634)))) (&& c$658 (= 30 (+ 1 (* 2 idx$1634)))) (&& c$660 (= 31 (+ 1 (* 2 idx$1634)))) (&& c$662 (= 32 (+ 1 (* 2 idx$1634)))) (&& c$664 (= 33 (+ 1 (* 2 idx$1634)))) (&& c$666 (= 34 (+ 1 (* 2 idx$1634)))) (&& c$668 (= 35 (+ 1 (* 2 idx$1634)))) (&& c$670 (= 36 (+ 1 (* 2 idx$1634)))) (&& c$672 (= 37 (+ 1 (* 2 idx$1634)))) (&& c$674 (= 38 (+ 1 (* 2 idx$1634)))) (&& c$676 (= 39 (+ 1 (* 2 idx$1634)))) (&& c$678 (= 40 (+ 1 (* 2 idx$1634)))) (&& c$680 (= 41 (+ 1 (* 2 idx$1634)))) (&& c$682 (= 42 (+ 1 (* 2 idx$1634)))) (&& c$684 (= 43 (+ 1 (* 2 idx$1634)))) (&& c$686 (= 44 (+ 1 (* 2 idx$1634)))) (&& c$688 (= 45 (+ 1 (* 2 idx$1634)))) (&& c$690 (= 46 (+ 1 (* 2 idx$1634)))) (&& c$692 (= 47 (+ 1 (* 2 idx$1634)))) (&& c$694 (= 48 (+ 1 (* 2 idx$1634)))) (&& c$696 (= 49 (+ 1 (* 2 idx$1634)))) (&& c$698 (= 50 (+ 1 (* 2 idx$1634)))) (&& c$700 (= 51 (+ 1 (* 2 idx$1634)))) (&& c$702 (= 52 (+ 1 (* 2 idx$1634)))) (&& c$704 (= 53 (+ 1 (* 2 idx$1634)))) (&& c$706 (= 54 (+ 1 (* 2 idx$1634)))) (&& c$708 (= 55 (+ 1 (* 2 idx$1634)))) (&& c$710 (= 56 (+ 1 (* 2 idx$1634)))) (&& c$712 (= 57 (+ 1 (* 2 idx$1634)))) (&& c$714 (= 58 (+ 1 (* 2 idx$1634)))) (&& c$716 (= 59 (+ 1 (* 2 idx$1634)))) (&& c$718 (= 60 (+ 1 (* 2 idx$1634)))) (&& c$720 (= 61 (+ 1 (* 2 idx$1634)))) (&& c$722 (= 62 (+ 1 (* 2 idx$1634)))) (&& c$724 (= 63 (+ 1 (* 2 idx$1634))))) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16)) (bvmul (bv #xffc0 16) t148)))) (bitvector 32)) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bvmul (sign-extend input1_multiplier (bitvector 32)) (ite c$1637 (sign-extend (bvadd (ite (|| (= 1 (* 2 idx$1636)) (&& c$602 (= 2 (* 2 idx$1636))) (&& c$604 (= 3 (* 2 idx$1636))) (&& c$606 (= 4 (* 2 idx$1636))) (&& c$608 (= 5 (* 2 idx$1636))) (&& c$610 (= 6 (* 2 idx$1636))) (&& c$612 (= 7 (* 2 idx$1636))) (&& c$614 (= 8 (* 2 idx$1636))) (&& c$616 (= 9 (* 2 idx$1636))) (&& c$618 (= 10 (* 2 idx$1636))) (&& c$620 (= 11 (* 2 idx$1636))) (&& c$622 (= 12 (* 2 idx$1636))) (&& c$624 (= 13 (* 2 idx$1636))) (&& c$626 (= 14 (* 2 idx$1636))) (&& c$628 (= 15 (* 2 idx$1636))) (&& c$630 (= 16 (* 2 idx$1636))) (&& c$632 (= 17 (* 2 idx$1636))) (&& c$634 (= 18 (* 2 idx$1636))) (&& c$636 (= 19 (* 2 idx$1636))) (&& c$638 (= 20 (* 2 idx$1636))) (&& c$640 (= 21 (* 2 idx$1636))) (&& c$642 (= 22 (* 2 idx$1636))) (&& c$644 (= 23 (* 2 idx$1636))) (&& c$646 (= 24 (* 2 idx$1636))) (&& c$648 (= 25 (* 2 idx$1636))) (&& c$650 (= 26 (* 2 idx$1636))) (&& c$652 (= 27 (* 2 idx$1636))) (&& c$654 (= 28 (* 2 idx$1636))) (&& c$656 (= 29 (* 2 idx$1636))) (&& c$658 (= 30 (* 2 idx$1636))) (&& c$660 (= 31 (* 2 idx$1636))) (&& c$662 (= 32 (* 2 idx$1636))) (&& c$664 (= 33 (* 2 idx$1636))) (&& c$666 (= 34 (* 2 idx$1636))) (&& c$668 (= 35 (* 2 idx$1636))) (&& c$670 (= 36 (* 2 idx$1636))) (&& c$672 (= 37 (* 2 idx$1636))) (&& c$674 (= 38 (* 2 idx$1636))) (&& c$676 (= 39 (* 2 idx$1636))) (&& c$678 (= 40 (* 2 idx$1636))) (&& c$680 (= 41 (* 2 idx$1636))) (&& c$682 (= 42 (* 2 idx$1636))) (&& c$684 (= 43 (* 2 idx$1636))) (&& c$686 (= 44 (* 2 idx$1636))) (&& c$688 (= 45 (* 2 idx$1636))) (&& c$690 (= 46 (* 2 idx$1636))) (&& c$692 (= 47 (* 2 idx$1636))) (&& c$694 (= 48 (* 2 idx$1636))) (&& c$696 (= 49 (* 2 idx$1636))) (&& c$698 (= 50 (* 2 idx$1636))) (&& c$700 (= 51 (* 2 idx$1636))) (&& c$702 (= 52 (* 2 idx$1636))) (&& c$704 (= 53 (* 2 idx$1636))) (&& c$706 (= 54 (* 2 idx$1636))) (&& c$708 (= 55 (* 2 idx$1636))) (&& c$710 (= 56 (* 2 idx$1636))) (&& c$712 (= 57 (* 2 idx$1636))) (&& c$714 (= 58 (* 2 idx$1636))) (&& c$716 (= 59 (* 2 idx$1636))) (&& c$718 (= 60 (* 2 idx$1636))) (&& c$720 (= 61 (* 2 idx$1636))) (&& c$722 (= 62 (* 2 idx$1636))) (&& c$724 (= 63 (* 2 idx$1636)))) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16)) (bvmul (bv #xffc0 16) t148)) (bvmul (bv #x0040 16) (ite (|| (= 1 (+ 1 (* 2 idx$1636))) (&& c$602 (= 2 (+ 1 (* 2 idx$1636)))) (&& c$604 (= 3 (+ 1 (* 2 idx$1636)))) (&& c$606 (= 4 (+ 1 (* 2 idx$1636)))) (&& c$608 (= 5 (+ 1 (* 2 idx$1636)))) (&& c$610 (= 6 (+ 1 (* 2 idx$1636)))) (&& c$612 (= 7 (+ 1 (* 2 idx$1636)))) (&& c$614 (= 8 (+ 1 (* 2 idx$1636)))) (&& c$616 (= 9 (+ 1 (* 2 idx$1636)))) (&& c$618 (= 10 (+ 1 (* 2 idx$1636)))) (&& c$620 (= 11 (+ 1 (* 2 idx$1636)))) (&& c$622 (= 12 (+ 1 (* 2 idx$1636)))) (&& c$624 (= 13 (+ 1 (* 2 idx$1636)))) (&& c$626 (= 14 (+ 1 (* 2 idx$1636)))) (&& c$628 (= 15 (+ 1 (* 2 idx$1636)))) (&& c$630 (= 16 (+ 1 (* 2 idx$1636)))) (&& c$632 (= 17 (+ 1 (* 2 idx$1636)))) (&& c$634 (= 18 (+ 1 (* 2 idx$1636)))) (&& c$636 (= 19 (+ 1 (* 2 idx$1636)))) (&& c$638 (= 20 (+ 1 (* 2 idx$1636)))) (&& c$640 (= 21 (+ 1 (* 2 idx$1636)))) (&& c$642 (= 22 (+ 1 (* 2 idx$1636)))) (&& c$644 (= 23 (+ 1 (* 2 idx$1636)))) (&& c$646 (= 24 (+ 1 (* 2 idx$1636)))) (&& c$648 (= 25 (+ 1 (* 2 idx$1636)))) (&& c$650 (= 26 (+ 1 (* 2 idx$1636)))) (&& c$652 (= 27 (+ 1 (* 2 idx$1636)))) (&& c$654 (= 28 (+ 1 (* 2 idx$1636)))) (&& c$656 (= 29 (+ 1 (* 2 idx$1636)))) (&& c$658 (= 30 (+ 1 (* 2 idx$1636)))) (&& c$660 (= 31 (+ 1 (* 2 idx$1636)))) (&& c$662 (= 32 (+ 1 (* 2 idx$1636)))) (&& c$664 (= 33 (+ 1 (* 2 idx$1636)))) (&& c$666 (= 34 (+ 1 (* 2 idx$1636)))) (&& c$668 (= 35 (+ 1 (* 2 idx$1636)))) (&& c$670 (= 36 (+ 1 (* 2 idx$1636)))) (&& c$672 (= 37 (+ 1 (* 2 idx$1636)))) (&& c$674 (= 38 (+ 1 (* 2 idx$1636)))) (&& c$676 (= 39 (+ 1 (* 2 idx$1636)))) (&& c$678 (= 40 (+ 1 (* 2 idx$1636)))) (&& c$680 (= 41 (+ 1 (* 2 idx$1636)))) (&& c$682 (= 42 (+ 1 (* 2 idx$1636)))) (&& c$684 (= 43 (+ 1 (* 2 idx$1636)))) (&& c$686 (= 44 (+ 1 (* 2 idx$1636)))) (&& c$688 (= 45 (+ 1 (* 2 idx$1636)))) (&& c$690 (= 46 (+ 1 (* 2 idx$1636)))) (&& c$692 (= 47 (+ 1 (* 2 idx$1636)))) (&& c$694 (= 48 (+ 1 (* 2 idx$1636)))) (&& c$696 (= 49 (+ 1 (* 2 idx$1636)))) (&& c$698 (= 50 (+ 1 (* 2 idx$1636)))) (&& c$700 (= 51 (+ 1 (* 2 idx$1636)))) (&& c$702 (= 52 (+ 1 (* 2 idx$1636)))) (&& c$704 (= 53 (+ 1 (* 2 idx$1636)))) (&& c$706 (= 54 (+ 1 (* 2 idx$1636)))) (&& c$708 (= 55 (+ 1 (* 2 idx$1636)))) (&& c$710 (= 56 (+ 1 (* 2 idx$1636)))) (&& c$712 (= 57 (+ 1 (* 2 idx$1636)))) (&& c$714 (= 58 (+ 1 (* 2 idx$1636)))) (&& c$716 (= 59 (+ 1 (* 2 idx$1636)))) (&& c$718 (= 60 (+ 1 (* 2 idx$1636)))) (&& c$720 (= 61 (+ 1 (* 2 idx$1636)))) (&& c$722 (= 62 (+ 1 (* 2 idx$1636)))) (&& c$724 (= 63 (+ 1 (* 2 idx$1636))))) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16)) (bvmul (bv #xffc0 16) t148)))) (bitvector 32)) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))))) (bv #x0000000f 32)))) (bv #xffff8000 32)) (bv #x8000 16) (ite (bvslt (bv #x00007fff 32) (bvadd (bvashr (bvadd (ite c$1635 (sign-extend (bvadd (ite (|| (= 1 (* 2 idx$1634)) (&& c$602 (= 2 (* 2 idx$1634))) (&& c$604 (= 3 (* 2 idx$1634))) (&& c$606 (= 4 (* 2 idx$1634))) (&& c$608 (= 5 (* 2 idx$1634))) (&& c$610 (= 6 (* 2 idx$1634))) (&& c$612 (= 7 (* 2 idx$1634))) (&& c$614 (= 8 (* 2 idx$1634))) (&& c$616 (= 9 (* 2 idx$1634))) (&& c$618 (= 10 (* 2 idx$1634))) (&& c$620 (= 11 (* 2 idx$1634))) (&& c$622 (= 12 (* 2 idx$1634))) (&& c$624 (= 13 (* 2 idx$1634))) (&& c$626 (= 14 (* 2 idx$1634))) (&& c$628 (= 15 (* 2 idx$1634))) (&& c$630 (= 16 (* 2 idx$1634))) (&& c$632 (= 17 (* 2 idx$1634))) (&& c$634 (= 18 (* 2 idx$1634))) (&& c$636 (= 19 (* 2 idx$1634))) (&& c$638 (= 20 (* 2 idx$1634))) (&& c$640 (= 21 (* 2 idx$1634))) (&& c$642 (= 22 (* 2 idx$1634))) (&& c$644 (= 23 (* 2 idx$1634))) (&& c$646 (= 24 (* 2 idx$1634))) (&& c$648 (= 25 (* 2 idx$1634))) (&& c$650 (= 26 (* 2 idx$1634))) (&& c$652 (= 27 (* 2 idx$1634))) (&& c$654 (= 28 (* 2 idx$1634))) (&& c$656 (= 29 (* 2 idx$1634))) (&& c$658 (= 30 (* 2 idx$1634))) (&& c$660 (= 31 (* 2 idx$1634))) (&& c$662 (= 32 (* 2 idx$1634))) (&& c$664 (= 33 (* 2 idx$1634))) (&& c$666 (= 34 (* 2 idx$1634))) (&& c$668 (= 35 (* 2 idx$1634))) (&& c$670 (= 36 (* 2 idx$1634))) (&& c$672 (= 37 (* 2 idx$1634))) (&& c$674 (= 38 (* 2 idx$1634))) (&& c$676 (= 39 (* 2 idx$1634))) (&& c$678 (= 40 (* 2 idx$1634))) (&& c$680 (= 41 (* 2 idx$1634))) (&& c$682 (= 42 (* 2 idx$1634))) (&& c$684 (= 43 (* 2 idx$1634))) (&& c$686 (= 44 (* 2 idx$1634))) (&& c$688 (= 45 (* 2 idx$1634))) (&& c$690 (= 46 (* 2 idx$1634))) (&& c$692 (= 47 (* 2 idx$1634))) (&& c$694 (= 48 (* 2 idx$1634))) (&& c$696 (= 49 (* 2 idx$1634))) (&& c$698 (= 50 (* 2 idx$1634))) (&& c$700 (= 51 (* 2 idx$1634))) (&& c$702 (= 52 (* 2 idx$1634))) (&& c$704 (= 53 (* 2 idx$1634))) (&& c$706 (= 54 (* 2 idx$1634))) (&& c$708 (= 55 (* 2 idx$1634))) (&& c$710 (= 56 (* 2 idx$1634))) (&& c$712 (= 57 (* 2 idx$1634))) (&& c$714 (= 58 (* 2 idx$1634))) (&& c$716 (= 59 (* 2 idx$1634))) (&& c$718 (= 60 (* 2 idx$1634))) (&& c$720 (= 61 (* 2 idx$1634))) (&& c$722 (= 62 (* 2 idx$1634))) (&& c$724 (= 63 (* 2 idx$1634)))) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16)) (bvmul (bv #xffc0 16) t148)) (bvmul (bv #x0040 16) (ite (|| (= 1 (+ 1 (* 2 idx$1634))) (&& c$602 (= 2 (+ 1 (* 2 idx$1634)))) (&& c$604 (= 3 (+ 1 (* 2 idx$1634)))) (&& c$606 (= 4 (+ 1 (* 2 idx$1634)))) (&& c$608 (= 5 (+ 1 (* 2 idx$1634)))) (&& c$610 (= 6 (+ 1 (* 2 idx$1634)))) (&& c$612 (= 7 (+ 1 (* 2 idx$1634)))) (&& c$614 (= 8 (+ 1 (* 2 idx$1634)))) (&& c$616 (= 9 (+ 1 (* 2 idx$1634)))) (&& c$618 (= 10 (+ 1 (* 2 idx$1634)))) (&& c$620 (= 11 (+ 1 (* 2 idx$1634)))) (&& c$622 (= 12 (+ 1 (* 2 idx$1634)))) (&& c$624 (= 13 (+ 1 (* 2 idx$1634)))) (&& c$626 (= 14 (+ 1 (* 2 idx$1634)))) (&& c$628 (= 15 (+ 1 (* 2 idx$1634)))) (&& c$630 (= 16 (+ 1 (* 2 idx$1634)))) (&& c$632 (= 17 (+ 1 (* 2 idx$1634)))) (&& c$634 (= 18 (+ 1 (* 2 idx$1634)))) (&& c$636 (= 19 (+ 1 (* 2 idx$1634)))) (&& c$638 (= 20 (+ 1 (* 2 idx$1634)))) (&& c$640 (= 21 (+ 1 (* 2 idx$1634)))) (&& c$642 (= 22 (+ 1 (* 2 idx$1634)))) (&& c$644 (= 23 (+ 1 (* 2 idx$1634)))) (&& c$646 (= 24 (+ 1 (* 2 idx$1634)))) (&& c$648 (= 25 (+ 1 (* 2 idx$1634)))) (&& c$650 (= 26 (+ 1 (* 2 idx$1634)))) (&& c$652 (= 27 (+ 1 (* 2 idx$1634)))) (&& c$654 (= 28 (+ 1 (* 2 idx$1634)))) (&& c$656 (= 29 (+ 1 (* 2 idx$1634)))) (&& c$658 (= 30 (+ 1 (* 2 idx$1634)))) (&& c$660 (= 31 (+ 1 (* 2 idx$1634)))) (&& c$662 (= 32 (+ 1 (* 2 idx$1634)))) (&& c$664 (= 33 (+ 1 (* 2 idx$1634)))) (&& c$666 (= 34 (+ 1 (* 2 idx$1634)))) (&& c$668 (= 35 (+ 1 (* 2 idx$1634)))) (&& c$670 (= 36 (+ 1 (* 2 idx$1634)))) (&& c$672 (= 37 (+ 1 (* 2 idx$1634)))) (&& c$674 (= 38 (+ 1 (* 2 idx$1634)))) (&& c$676 (= 39 (+ 1 (* 2 idx$1634)))) (&& c$678 (= 40 (+ 1 (* 2 idx$1634)))) (&& c$680 (= 41 (+ 1 (* 2 idx$1634)))) (&& c$682 (= 42 (+ 1 (* 2 idx$1634)))) (&& c$684 (= 43 (+ 1 (* 2 idx$1634)))) (&& c$686 (= 44 (+ 1 (* 2 idx$1634)))) (&& c$688 (= 45 (+ 1 (* 2 idx$1634)))) (&& c$690 (= 46 (+ 1 (* 2 idx$1634)))) (&& c$692 (= 47 (+ 1 (* 2 idx$1634)))) (&& c$694 (= 48 (+ 1 (* 2 idx$1634)))) (&& c$696 (= 49 (+ 1 (* 2 idx$1634)))) (&& c$698 (= 50 (+ 1 (* 2 idx$1634)))) (&& c$700 (= 51 (+ 1 (* 2 idx$1634)))) (&& c$702 (= 52 (+ 1 (* 2 idx$1634)))) (&& c$704 (= 53 (+ 1 (* 2 idx$1634)))) (&& c$706 (= 54 (+ 1 (* 2 idx$1634)))) (&& c$708 (= 55 (+ 1 (* 2 idx$1634)))) (&& c$710 (= 56 (+ 1 (* 2 idx$1634)))) (&& c$712 (= 57 (+ 1 (* 2 idx$1634)))) (&& c$714 (= 58 (+ 1 (* 2 idx$1634)))) (&& c$716 (= 59 (+ 1 (* 2 idx$1634)))) (&& c$718 (= 60 (+ 1 (* 2 idx$1634)))) (&& c$720 (= 61 (+ 1 (* 2 idx$1634)))) (&& c$722 (= 62 (+ 1 (* 2 idx$1634)))) (&& c$724 (= 63 (+ 1 (* 2 idx$1634))))) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16)) (bvmul (bv #xffc0 16) t148)))) (bitvector 32)) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bvmul (sign-extend input1_multiplier (bitvector 32)) (ite c$1637 (sign-extend (bvadd (ite (|| (= 1 (* 2 idx$1636)) (&& c$602 (= 2 (* 2 idx$1636))) (&& c$604 (= 3 (* 2 idx$1636))) (&& c$606 (= 4 (* 2 idx$1636))) (&& c$608 (= 5 (* 2 idx$1636))) (&& c$610 (= 6 (* 2 idx$1636))) (&& c$612 (= 7 (* 2 idx$1636))) (&& c$614 (= 8 (* 2 idx$1636))) (&& c$616 (= 9 (* 2 idx$1636))) (&& c$618 (= 10 (* 2 idx$1636))) (&& c$620 (= 11 (* 2 idx$1636))) (&& c$622 (= 12 (* 2 idx$1636))) (&& c$624 (= 13 (* 2 idx$1636))) (&& c$626 (= 14 (* 2 idx$1636))) (&& c$628 (= 15 (* 2 idx$1636))) (&& c$630 (= 16 (* 2 idx$1636))) (&& c$632 (= 17 (* 2 idx$1636))) (&& c$634 (= 18 (* 2 idx$1636))) (&& c$636 (= 19 (* 2 idx$1636))) (&& c$638 (= 20 (* 2 idx$1636))) (&& c$640 (= 21 (* 2 idx$1636))) (&& c$642 (= 22 (* 2 idx$1636))) (&& c$644 (= 23 (* 2 idx$1636))) (&& c$646 (= 24 (* 2 idx$1636))) (&& c$648 (= 25 (* 2 idx$1636))) (&& c$650 (= 26 (* 2 idx$1636))) (&& c$652 (= 27 (* 2 idx$1636))) (&& c$654 (= 28 (* 2 idx$1636))) (&& c$656 (= 29 (* 2 idx$1636))) (&& c$658 (= 30 (* 2 idx$1636))) (&& c$660 (= 31 (* 2 idx$1636))) (&& c$662 (= 32 (* 2 idx$1636))) (&& c$664 (= 33 (* 2 idx$1636))) (&& c$666 (= 34 (* 2 idx$1636))) (&& c$668 (= 35 (* 2 idx$1636))) (&& c$670 (= 36 (* 2 idx$1636))) (&& c$672 (= 37 (* 2 idx$1636))) (&& c$674 (= 38 (* 2 idx$1636))) (&& c$676 (= 39 (* 2 idx$1636))) (&& c$678 (= 40 (* 2 idx$1636))) (&& c$680 (= 41 (* 2 idx$1636))) (&& c$682 (= 42 (* 2 idx$1636))) (&& c$684 (= 43 (* 2 idx$1636))) (&& c$686 (= 44 (* 2 idx$1636))) (&& c$688 (= 45 (* 2 idx$1636))) (&& c$690 (= 46 (* 2 idx$1636))) (&& c$692 (= 47 (* 2 idx$1636))) (&& c$694 (= 48 (* 2 idx$1636))) (&& c$696 (= 49 (* 2 idx$1636))) (&& c$698 (= 50 (* 2 idx$1636))) (&& c$700 (= 51 (* 2 idx$1636))) (&& c$702 (= 52 (* 2 idx$1636))) (&& c$704 (= 53 (* 2 idx$1636))) (&& c$706 (= 54 (* 2 idx$1636))) (&& c$708 (= 55 (* 2 idx$1636))) (&& c$710 (= 56 (* 2 idx$1636))) (&& c$712 (= 57 (* 2 idx$1636))) (&& c$714 (= 58 (* 2 idx$1636))) (&& c$716 (= 59 (* 2 idx$1636))) (&& c$718 (= 60 (* 2 idx$1636))) (&& c$720 (= 61 (* 2 idx$1636))) (&& c$722 (= 62 (* 2 idx$1636))) (&& c$724 (= 63 (* 2 idx$1636)))) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16)) (bvmul (bv #xffc0 16) t148)) (bvmul (bv #x0040 16) (ite (|| (= 1 (+ 1 (* 2 idx$1636))) (&& c$602 (= 2 (+ 1 (* 2 idx$1636)))) (&& c$604 (= 3 (+ 1 (* 2 idx$1636)))) (&& c$606 (= 4 (+ 1 (* 2 idx$1636)))) (&& c$608 (= 5 (+ 1 (* 2 idx$1636)))) (&& c$610 (= 6 (+ 1 (* 2 idx$1636)))) (&& c$612 (= 7 (+ 1 (* 2 idx$1636)))) (&& c$614 (= 8 (+ 1 (* 2 idx$1636)))) (&& c$616 (= 9 (+ 1 (* 2 idx$1636)))) (&& c$618 (= 10 (+ 1 (* 2 idx$1636)))) (&& c$620 (= 11 (+ 1 (* 2 idx$1636)))) (&& c$622 (= 12 (+ 1 (* 2 idx$1636)))) (&& c$624 (= 13 (+ 1 (* 2 idx$1636)))) (&& c$626 (= 14 (+ 1 (* 2 idx$1636)))) (&& c$628 (= 15 (+ 1 (* 2 idx$1636)))) (&& c$630 (= 16 (+ 1 (* 2 idx$1636)))) (&& c$632 (= 17 (+ 1 (* 2 idx$1636)))) (&& c$634 (= 18 (+ 1 (* 2 idx$1636)))) (&& c$636 (= 19 (+ 1 (* 2 idx$1636)))) (&& c$638 (= 20 (+ 1 (* 2 idx$1636)))) (&& c$640 (= 21 (+ 1 (* 2 idx$1636)))) (&& c$642 (= 22 (+ 1 (* 2 idx$1636)))) (&& c$644 (= 23 (+ 1 (* 2 idx$1636)))) (&& c$646 (= 24 (+ 1 (* 2 idx$1636)))) (&& c$648 (= 25 (+ 1 (* 2 idx$1636)))) (&& c$650 (= 26 (+ 1 (* 2 idx$1636)))) (&& c$652 (= 27 (+ 1 (* 2 idx$1636)))) (&& c$654 (= 28 (+ 1 (* 2 idx$1636)))) (&& c$656 (= 29 (+ 1 (* 2 idx$1636)))) (&& c$658 (= 30 (+ 1 (* 2 idx$1636)))) (&& c$660 (= 31 (+ 1 (* 2 idx$1636)))) (&& c$662 (= 32 (+ 1 (* 2 idx$1636)))) (&& c$664 (= 33 (+ 1 (* 2 idx$1636)))) (&& c$666 (= 34 (+ 1 (* 2 idx$1636)))) (&& c$668 (= 35 (+ 1 (* 2 idx$1636)))) (&& c$670 (= 36 (+ 1 (* 2 idx$1636)))) (&& c$672 (= 37 (+ 1 (* 2 idx$1636)))) (&& c$674 (= 38 (+ 1 (* 2 idx$1636)))) (&& c$676 (= 39 (+ 1 (* 2 idx$1636)))) (&& c$678 (= 40 (+ 1 (* 2 idx$1636)))) (&& c$680 (= 41 (+ 1 (* 2 idx$1636)))) (&& c$682 (= 42 (+ 1 (* 2 idx$1636)))) (&& c$684 (= 43 (+ 1 (* 2 idx$1636)))) (&& c$686 (= 44 (+ 1 (* 2 idx$1636)))) (&& c$688 (= 45 (+ 1 (* 2 idx$1636)))) (&& c$690 (= 46 (+ 1 (* 2 idx$1636)))) (&& c$692 (= 47 (+ 1 (* 2 idx$1636)))) (&& c$694 (= 48 (+ 1 (* 2 idx$1636)))) (&& c$696 (= 49 (+ 1 (* 2 idx$1636)))) (&& c$698 (= 50 (+ 1 (* 2 idx$1636)))) (&& c$700 (= 51 (+ 1 (* 2 idx$1636)))) (&& c$702 (= 52 (+ 1 (* 2 idx$1636)))) (&& c$704 (= 53 (+ 1 (* 2 idx$1636)))) (&& c$706 (= 54 (+ 1 (* 2 idx$1636)))) (&& c$708 (= 55 (+ 1 (* 2 idx$1636)))) (&& c$710 (= 56 (+ 1 (* 2 idx$1636)))) (&& c$712 (= 57 (+ 1 (* 2 idx$1636)))) (&& c$714 (= 58 (+ 1 (* 2 idx$1636)))) (&& c$716 (= 59 (+ 1 (* 2 idx$1636)))) (&& c$718 (= 60 (+ 1 (* 2 idx$1636)))) (&& c$720 (= 61 (+ 1 (* 2 idx$1636)))) (&& c$722 (= 62 (+ 1 (* 2 idx$1636)))) (&& c$724 (= 63 (+ 1 (* 2 idx$1636))))) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16)) (bvmul (bv #xffc0 16) t148)))) (bitvector 32)) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))))) (bv #x00000010 32)) (bvand (bv #x00000001 32) (bvashr (bvadd (ite c$1635 (sign-extend (bvadd (ite (|| (= 1 (* 2 idx$1634)) (&& c$602 (= 2 (* 2 idx$1634))) (&& c$604 (= 3 (* 2 idx$1634))) (&& c$606 (= 4 (* 2 idx$1634))) (&& c$608 (= 5 (* 2 idx$1634))) (&& c$610 (= 6 (* 2 idx$1634))) (&& c$612 (= 7 (* 2 idx$1634))) (&& c$614 (= 8 (* 2 idx$1634))) (&& c$616 (= 9 (* 2 idx$1634))) (&& c$618 (= 10 (* 2 idx$1634))) (&& c$620 (= 11 (* 2 idx$1634))) (&& c$622 (= 12 (* 2 idx$1634))) (&& c$624 (= 13 (* 2 idx$1634))) (&& c$626 (= 14 (* 2 idx$1634))) (&& c$628 (= 15 (* 2 idx$1634))) (&& c$630 (= 16 (* 2 idx$1634))) (&& c$632 (= 17 (* 2 idx$1634))) (&& c$634 (= 18 (* 2 idx$1634))) (&& c$636 (= 19 (* 2 idx$1634))) (&& c$638 (= 20 (* 2 idx$1634))) (&& c$640 (= 21 (* 2 idx$1634))) (&& c$642 (= 22 (* 2 idx$1634))) (&& c$644 (= 23 (* 2 idx$1634))) (&& c$646 (= 24 (* 2 idx$1634))) (&& c$648 (= 25 (* 2 idx$1634))) (&& c$650 (= 26 (* 2 idx$1634))) (&& c$652 (= 27 (* 2 idx$1634))) (&& c$654 (= 28 (* 2 idx$1634))) (&& c$656 (= 29 (* 2 idx$1634))) (&& c$658 (= 30 (* 2 idx$1634))) (&& c$660 (= 31 (* 2 idx$1634))) (&& c$662 (= 32 (* 2 idx$1634))) (&& c$664 (= 33 (* 2 idx$1634))) (&& c$666 (= 34 (* 2 idx$1634))) (&& c$668 (= 35 (* 2 idx$1634))) (&& c$670 (= 36 (* 2 idx$1634))) (&& c$672 (= 37 (* 2 idx$1634))) (&& c$674 (= 38 (* 2 idx$1634))) (&& c$676 (= 39 (* 2 idx$1634))) (&& c$678 (= 40 (* 2 idx$1634))) (&& c$680 (= 41 (* 2 idx$1634))) (&& c$682 (= 42 (* 2 idx$1634))) (&& c$684 (= 43 (* 2 idx$1634))) (&& c$686 (= 44 (* 2 idx$1634))) (&& c$688 (= 45 (* 2 idx$1634))) (&& c$690 (= 46 (* 2 idx$1634))) (&& c$692 (= 47 (* 2 idx$1634))) (&& c$694 (= 48 (* 2 idx$1634))) (&& c$696 (= 49 (* 2 idx$1634))) (&& c$698 (= 50 (* 2 idx$1634))) (&& c$700 (= 51 (* 2 idx$1634))) (&& c$702 (= 52 (* 2 idx$1634))) (&& c$704 (= 53 (* 2 idx$1634))) (&& c$706 (= 54 (* 2 idx$1634))) (&& c$708 (= 55 (* 2 idx$1634))) (&& c$710 (= 56 (* 2 idx$1634))) (&& c$712 (= 57 (* 2 idx$1634))) (&& c$714 (= 58 (* 2 idx$1634))) (&& c$716 (= 59 (* 2 idx$1634))) (&& c$718 (= 60 (* 2 idx$1634))) (&& c$720 (= 61 (* 2 idx$1634))) (&& c$722 (= 62 (* 2 idx$1634))) (&& c$724 (= 63 (* 2 idx$1634)))) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16)) (bvmul (bv #xffc0 16) t148)) (bvmul (bv #x0040 16) (ite (|| (= 1 (+ 1 (* 2 idx$1634))) (&& c$602 (= 2 (+ 1 (* 2 idx$1634)))) (&& c$604 (= 3 (+ 1 (* 2 idx$1634)))) (&& c$606 (= 4 (+ 1 (* 2 idx$1634)))) (&& c$608 (= 5 (+ 1 (* 2 idx$1634)))) (&& c$610 (= 6 (+ 1 (* 2 idx$1634)))) (&& c$612 (= 7 (+ 1 (* 2 idx$1634)))) (&& c$614 (= 8 (+ 1 (* 2 idx$1634)))) (&& c$616 (= 9 (+ 1 (* 2 idx$1634)))) (&& c$618 (= 10 (+ 1 (* 2 idx$1634)))) (&& c$620 (= 11 (+ 1 (* 2 idx$1634)))) (&& c$622 (= 12 (+ 1 (* 2 idx$1634)))) (&& c$624 (= 13 (+ 1 (* 2 idx$1634)))) (&& c$626 (= 14 (+ 1 (* 2 idx$1634)))) (&& c$628 (= 15 (+ 1 (* 2 idx$1634)))) (&& c$630 (= 16 (+ 1 (* 2 idx$1634)))) (&& c$632 (= 17 (+ 1 (* 2 idx$1634)))) (&& c$634 (= 18 (+ 1 (* 2 idx$1634)))) (&& c$636 (= 19 (+ 1 (* 2 idx$1634)))) (&& c$638 (= 20 (+ 1 (* 2 idx$1634)))) (&& c$640 (= 21 (+ 1 (* 2 idx$1634)))) (&& c$642 (= 22 (+ 1 (* 2 idx$1634)))) (&& c$644 (= 23 (+ 1 (* 2 idx$1634)))) (&& c$646 (= 24 (+ 1 (* 2 idx$1634)))) (&& c$648 (= 25 (+ 1 (* 2 idx$1634)))) (&& c$650 (= 26 (+ 1 (* 2 idx$1634)))) (&& c$652 (= 27 (+ 1 (* 2 idx$1634)))) (&& c$654 (= 28 (+ 1 (* 2 idx$1634)))) (&& c$656 (= 29 (+ 1 (* 2 idx$1634)))) (&& c$658 (= 30 (+ 1 (* 2 idx$1634)))) (&& c$660 (= 31 (+ 1 (* 2 idx$1634)))) (&& c$662 (= 32 (+ 1 (* 2 idx$1634)))) (&& c$664 (= 33 (+ 1 (* 2 idx$1634)))) (&& c$666 (= 34 (+ 1 (* 2 idx$1634)))) (&& c$668 (= 35 (+ 1 (* 2 idx$1634)))) (&& c$670 (= 36 (+ 1 (* 2 idx$1634)))) (&& c$672 (= 37 (+ 1 (* 2 idx$1634)))) (&& c$674 (= 38 (+ 1 (* 2 idx$1634)))) (&& c$676 (= 39 (+ 1 (* 2 idx$1634)))) (&& c$678 (= 40 (+ 1 (* 2 idx$1634)))) (&& c$680 (= 41 (+ 1 (* 2 idx$1634)))) (&& c$682 (= 42 (+ 1 (* 2 idx$1634)))) (&& c$684 (= 43 (+ 1 (* 2 idx$1634)))) (&& c$686 (= 44 (+ 1 (* 2 idx$1634)))) (&& c$688 (= 45 (+ 1 (* 2 idx$1634)))) (&& c$690 (= 46 (+ 1 (* 2 idx$1634)))) (&& c$692 (= 47 (+ 1 (* 2 idx$1634)))) (&& c$694 (= 48 (+ 1 (* 2 idx$1634)))) (&& c$696 (= 49 (+ 1 (* 2 idx$1634)))) (&& c$698 (= 50 (+ 1 (* 2 idx$1634)))) (&& c$700 (= 51 (+ 1 (* 2 idx$1634)))) (&& c$702 (= 52 (+ 1 (* 2 idx$1634)))) (&& c$704 (= 53 (+ 1 (* 2 idx$1634)))) (&& c$706 (= 54 (+ 1 (* 2 idx$1634)))) (&& c$708 (= 55 (+ 1 (* 2 idx$1634)))) (&& c$710 (= 56 (+ 1 (* 2 idx$1634)))) (&& c$712 (= 57 (+ 1 (* 2 idx$1634)))) (&& c$714 (= 58 (+ 1 (* 2 idx$1634)))) (&& c$716 (= 59 (+ 1 (* 2 idx$1634)))) (&& c$718 (= 60 (+ 1 (* 2 idx$1634)))) (&& c$720 (= 61 (+ 1 (* 2 idx$1634)))) (&& c$722 (= 62 (+ 1 (* 2 idx$1634)))) (&& c$724 (= 63 (+ 1 (* 2 idx$1634))))) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16)) (bvmul (bv #xffc0 16) t148)))) (bitvector 32)) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bvmul (sign-extend input1_multiplier (bitvector 32)) (ite c$1637 (sign-extend (bvadd (ite (|| (= 1 (* 2 idx$1636)) (&& c$602 (= 2 (* 2 idx$1636))) (&& c$604 (= 3 (* 2 idx$1636))) (&& c$606 (= 4 (* 2 idx$1636))) (&& c$608 (= 5 (* 2 idx$1636))) (&& c$610 (= 6 (* 2 idx$1636))) (&& c$612 (= 7 (* 2 idx$1636))) (&& c$614 (= 8 (* 2 idx$1636))) (&& c$616 (= 9 (* 2 idx$1636))) (&& c$618 (= 10 (* 2 idx$1636))) (&& c$620 (= 11 (* 2 idx$1636))) (&& c$622 (= 12 (* 2 idx$1636))) (&& c$624 (= 13 (* 2 idx$1636))) (&& c$626 (= 14 (* 2 idx$1636))) (&& c$628 (= 15 (* 2 idx$1636))) (&& c$630 (= 16 (* 2 idx$1636))) (&& c$632 (= 17 (* 2 idx$1636))) (&& c$634 (= 18 (* 2 idx$1636))) (&& c$636 (= 19 (* 2 idx$1636))) (&& c$638 (= 20 (* 2 idx$1636))) (&& c$640 (= 21 (* 2 idx$1636))) (&& c$642 (= 22 (* 2 idx$1636))) (&& c$644 (= 23 (* 2 idx$1636))) (&& c$646 (= 24 (* 2 idx$1636))) (&& c$648 (= 25 (* 2 idx$1636))) (&& c$650 (= 26 (* 2 idx$1636))) (&& c$652 (= 27 (* 2 idx$1636))) (&& c$654 (= 28 (* 2 idx$1636))) (&& c$656 (= 29 (* 2 idx$1636))) (&& c$658 (= 30 (* 2 idx$1636))) (&& c$660 (= 31 (* 2 idx$1636))) (&& c$662 (= 32 (* 2 idx$1636))) (&& c$664 (= 33 (* 2 idx$1636))) (&& c$666 (= 34 (* 2 idx$1636))) (&& c$668 (= 35 (* 2 idx$1636))) (&& c$670 (= 36 (* 2 idx$1636))) (&& c$672 (= 37 (* 2 idx$1636))) (&& c$674 (= 38 (* 2 idx$1636))) (&& c$676 (= 39 (* 2 idx$1636))) (&& c$678 (= 40 (* 2 idx$1636))) (&& c$680 (= 41 (* 2 idx$1636))) (&& c$682 (= 42 (* 2 idx$1636))) (&& c$684 (= 43 (* 2 idx$1636))) (&& c$686 (= 44 (* 2 idx$1636))) (&& c$688 (= 45 (* 2 idx$1636))) (&& c$690 (= 46 (* 2 idx$1636))) (&& c$692 (= 47 (* 2 idx$1636))) (&& c$694 (= 48 (* 2 idx$1636))) (&& c$696 (= 49 (* 2 idx$1636))) (&& c$698 (= 50 (* 2 idx$1636))) (&& c$700 (= 51 (* 2 idx$1636))) (&& c$702 (= 52 (* 2 idx$1636))) (&& c$704 (= 53 (* 2 idx$1636))) (&& c$706 (= 54 (* 2 idx$1636))) (&& c$708 (= 55 (* 2 idx$1636))) (&& c$710 (= 56 (* 2 idx$1636))) (&& c$712 (= 57 (* 2 idx$1636))) (&& c$714 (= 58 (* 2 idx$1636))) (&& c$716 (= 59 (* 2 idx$1636))) (&& c$718 (= 60 (* 2 idx$1636))) (&& c$720 (= 61 (* 2 idx$1636))) (&& c$722 (= 62 (* 2 idx$1636))) (&& c$724 (= 63 (* 2 idx$1636)))) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16)) (bvmul (bv #xffc0 16) t148)) (bvmul (bv #x0040 16) (ite (|| (= 1 (+ 1 (* 2 idx$1636))) (&& c$602 (= 2 (+ 1 (* 2 idx$1636)))) (&& c$604 (= 3 (+ 1 (* 2 idx$1636)))) (&& c$606 (= 4 (+ 1 (* 2 idx$1636)))) (&& c$608 (= 5 (+ 1 (* 2 idx$1636)))) (&& c$610 (= 6 (+ 1 (* 2 idx$1636)))) (&& c$612 (= 7 (+ 1 (* 2 idx$1636)))) (&& c$614 (= 8 (+ 1 (* 2 idx$1636)))) (&& c$616 (= 9 (+ 1 (* 2 idx$1636)))) (&& c$618 (= 10 (+ 1 (* 2 idx$1636)))) (&& c$620 (= 11 (+ 1 (* 2 idx$1636)))) (&& c$622 (= 12 (+ 1 (* 2 idx$1636)))) (&& c$624 (= 13 (+ 1 (* 2 idx$1636)))) (&& c$626 (= 14 (+ 1 (* 2 idx$1636)))) (&& c$628 (= 15 (+ 1 (* 2 idx$1636)))) (&& c$630 (= 16 (+ 1 (* 2 idx$1636)))) (&& c$632 (= 17 (+ 1 (* 2 idx$1636)))) (&& c$634 (= 18 (+ 1 (* 2 idx$1636)))) (&& c$636 (= 19 (+ 1 (* 2 idx$1636)))) (&& c$638 (= 20 (+ 1 (* 2 idx$1636)))) (&& c$640 (= 21 (+ 1 (* 2 idx$1636)))) (&& c$642 (= 22 (+ 1 (* 2 idx$1636)))) (&& c$644 (= 23 (+ 1 (* 2 idx$1636)))) (&& c$646 (= 24 (+ 1 (* 2 idx$1636)))) (&& c$648 (= 25 (+ 1 (* 2 idx$1636)))) (&& c$650 (= 26 (+ 1 (* 2 idx$1636)))) (&& c$652 (= 27 (+ 1 (* 2 idx$1636)))) (&& c$654 (= 28 (+ 1 (* 2 idx$1636)))) (&& c$656 (= 29 (+ 1 (* 2 idx$1636)))) (&& c$658 (= 30 (+ 1 (* 2 idx$1636)))) (&& c$660 (= 31 (+ 1 (* 2 idx$1636)))) (&& c$662 (= 32 (+ 1 (* 2 idx$1636)))) (&& c$664 (= 33 (+ 1 (* 2 idx$1636)))) (&& c$666 (= 34 (+ 1 (* 2 idx$1636)))) (&& c$668 (= 35 (+ 1 (* 2 idx$1636)))) (&& c$670 (= 36 (+ 1 (* 2 idx$1636)))) (&& c$672 (= 37 (+ 1 (* 2 idx$1636)))) (&& c$674 (= 38 (+ 1 (* 2 idx$1636)))) (&& c$676 (= 39 (+ 1 (* 2 idx$1636)))) (&& c$678 (= 40 (+ 1 (* 2 idx$1636)))) (&& c$680 (= 41 (+ 1 (* 2 idx$1636)))) (&& c$682 (= 42 (+ 1 (* 2 idx$1636)))) (&& c$684 (= 43 (+ 1 (* 2 idx$1636)))) (&& c$686 (= 44 (+ 1 (* 2 idx$1636)))) (&& c$688 (= 45 (+ 1 (* 2 idx$1636)))) (&& c$690 (= 46 (+ 1 (* 2 idx$1636)))) (&& c$692 (= 47 (+ 1 (* 2 idx$1636)))) (&& c$694 (= 48 (+ 1 (* 2 idx$1636)))) (&& c$696 (= 49 (+ 1 (* 2 idx$1636)))) (&& c$698 (= 50 (+ 1 (* 2 idx$1636)))) (&& c$700 (= 51 (+ 1 (* 2 idx$1636)))) (&& c$702 (= 52 (+ 1 (* 2 idx$1636)))) (&& c$704 (= 53 (+ 1 (* 2 idx$1636)))) (&& c$706 (= 54 (+ 1 (* 2 idx$1636)))) (&& c$708 (= 55 (+ 1 (* 2 idx$1636)))) (&& c$710 (= 56 (+ 1 (* 2 idx$1636)))) (&& c$712 (= 57 (+ 1 (* 2 idx$1636)))) (&& c$714 (= 58 (+ 1 (* 2 idx$1636)))) (&& c$716 (= 59 (+ 1 (* 2 idx$1636)))) (&& c$718 (= 60 (+ 1 (* 2 idx$1636)))) (&& c$720 (= 61 (+ 1 (* 2 idx$1636)))) (&& c$722 (= 62 (+ 1 (* 2 idx$1636)))) (&& c$724 (= 63 (+ 1 (* 2 idx$1636))))) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16)) (bvmul (bv #xffc0 16) t148)))) (bitvector 32)) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))))) (bv #x0000000f 32))))) (bv #x7fff 16) (extract 15 0 (bvadd (bvashr (bvadd (ite c$1635 (sign-extend (bvadd (ite (|| (= 1 (* 2 idx$1634)) (&& c$602 (= 2 (* 2 idx$1634))) (&& c$604 (= 3 (* 2 idx$1634))) (&& c$606 (= 4 (* 2 idx$1634))) (&& c$608 (= 5 (* 2 idx$1634))) (&& c$610 (= 6 (* 2 idx$1634))) (&& c$612 (= 7 (* 2 idx$1634))) (&& c$614 (= 8 (* 2 idx$1634))) (&& c$616 (= 9 (* 2 idx$1634))) (&& c$618 (= 10 (* 2 idx$1634))) (&& c$620 (= 11 (* 2 idx$1634))) (&& c$622 (= 12 (* 2 idx$1634))) (&& c$624 (= 13 (* 2 idx$1634))) (&& c$626 (= 14 (* 2 idx$1634))) (&& c$628 (= 15 (* 2 idx$1634))) (&& c$630 (= 16 (* 2 idx$1634))) (&& c$632 (= 17 (* 2 idx$1634))) (&& c$634 (= 18 (* 2 idx$1634))) (&& c$636 (= 19 (* 2 idx$1634))) (&& c$638 (= 20 (* 2 idx$1634))) (&& c$640 (= 21 (* 2 idx$1634))) (&& c$642 (= 22 (* 2 idx$1634))) (&& c$644 (= 23 (* 2 idx$1634))) (&& c$646 (= 24 (* 2 idx$1634))) (&& c$648 (= 25 (* 2 idx$1634))) (&& c$650 (= 26 (* 2 idx$1634))) (&& c$652 (= 27 (* 2 idx$1634))) (&& c$654 (= 28 (* 2 idx$1634))) (&& c$656 (= 29 (* 2 idx$1634))) (&& c$658 (= 30 (* 2 idx$1634))) (&& c$660 (= 31 (* 2 idx$1634))) (&& c$662 (= 32 (* 2 idx$1634))) (&& c$664 (= 33 (* 2 idx$1634))) (&& c$666 (= 34 (* 2 idx$1634))) (&& c$668 (= 35 (* 2 idx$1634))) (&& c$670 (= 36 (* 2 idx$1634))) (&& c$672 (= 37 (* 2 idx$1634))) (&& c$674 (= 38 (* 2 idx$1634))) (&& c$676 (= 39 (* 2 idx$1634))) (&& c$678 (= 40 (* 2 idx$1634))) (&& c$680 (= 41 (* 2 idx$1634))) (&& c$682 (= 42 (* 2 idx$1634))) (&& c$684 (= 43 (* 2 idx$1634))) (&& c$686 (= 44 (* 2 idx$1634))) (&& c$688 (= 45 (* 2 idx$1634))) (&& c$690 (= 46 (* 2 idx$1634))) (&& c$692 (= 47 (* 2 idx$1634))) (&& c$694 (= 48 (* 2 idx$1634))) (&& c$696 (= 49 (* 2 idx$1634))) (&& c$698 (= 50 (* 2 idx$1634))) (&& c$700 (= 51 (* 2 idx$1634))) (&& c$702 (= 52 (* 2 idx$1634))) (&& c$704 (= 53 (* 2 idx$1634))) (&& c$706 (= 54 (* 2 idx$1634))) (&& c$708 (= 55 (* 2 idx$1634))) (&& c$710 (= 56 (* 2 idx$1634))) (&& c$712 (= 57 (* 2 idx$1634))) (&& c$714 (= 58 (* 2 idx$1634))) (&& c$716 (= 59 (* 2 idx$1634))) (&& c$718 (= 60 (* 2 idx$1634))) (&& c$720 (= 61 (* 2 idx$1634))) (&& c$722 (= 62 (* 2 idx$1634))) (&& c$724 (= 63 (* 2 idx$1634)))) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16)) (bvmul (bv #xffc0 16) t148)) (bvmul (bv #x0040 16) (ite (|| (= 1 (+ 1 (* 2 idx$1634))) (&& c$602 (= 2 (+ 1 (* 2 idx$1634)))) (&& c$604 (= 3 (+ 1 (* 2 idx$1634)))) (&& c$606 (= 4 (+ 1 (* 2 idx$1634)))) (&& c$608 (= 5 (+ 1 (* 2 idx$1634)))) (&& c$610 (= 6 (+ 1 (* 2 idx$1634)))) (&& c$612 (= 7 (+ 1 (* 2 idx$1634)))) (&& c$614 (= 8 (+ 1 (* 2 idx$1634)))) (&& c$616 (= 9 (+ 1 (* 2 idx$1634)))) (&& c$618 (= 10 (+ 1 (* 2 idx$1634)))) (&& c$620 (= 11 (+ 1 (* 2 idx$1634)))) (&& c$622 (= 12 (+ 1 (* 2 idx$1634)))) (&& c$624 (= 13 (+ 1 (* 2 idx$1634)))) (&& c$626 (= 14 (+ 1 (* 2 idx$1634)))) (&& c$628 (= 15 (+ 1 (* 2 idx$1634)))) (&& c$630 (= 16 (+ 1 (* 2 idx$1634)))) (&& c$632 (= 17 (+ 1 (* 2 idx$1634)))) (&& c$634 (= 18 (+ 1 (* 2 idx$1634)))) (&& c$636 (= 19 (+ 1 (* 2 idx$1634)))) (&& c$638 (= 20 (+ 1 (* 2 idx$1634)))) (&& c$640 (= 21 (+ 1 (* 2 idx$1634)))) (&& c$642 (= 22 (+ 1 (* 2 idx$1634)))) (&& c$644 (= 23 (+ 1 (* 2 idx$1634)))) (&& c$646 (= 24 (+ 1 (* 2 idx$1634)))) (&& c$648 (= 25 (+ 1 (* 2 idx$1634)))) (&& c$650 (= 26 (+ 1 (* 2 idx$1634)))) (&& c$652 (= 27 (+ 1 (* 2 idx$1634)))) (&& c$654 (= 28 (+ 1 (* 2 idx$1634)))) (&& c$656 (= 29 (+ 1 (* 2 idx$1634)))) (&& c$658 (= 30 (+ 1 (* 2 idx$1634)))) (&& c$660 (= 31 (+ 1 (* 2 idx$1634)))) (&& c$662 (= 32 (+ 1 (* 2 idx$1634)))) (&& c$664 (= 33 (+ 1 (* 2 idx$1634)))) (&& c$666 (= 34 (+ 1 (* 2 idx$1634)))) (&& c$668 (= 35 (+ 1 (* 2 idx$1634)))) (&& c$670 (= 36 (+ 1 (* 2 idx$1634)))) (&& c$672 (= 37 (+ 1 (* 2 idx$1634)))) (&& c$674 (= 38 (+ 1 (* 2 idx$1634)))) (&& c$676 (= 39 (+ 1 (* 2 idx$1634)))) (&& c$678 (= 40 (+ 1 (* 2 idx$1634)))) (&& c$680 (= 41 (+ 1 (* 2 idx$1634)))) (&& c$682 (= 42 (+ 1 (* 2 idx$1634)))) (&& c$684 (= 43 (+ 1 (* 2 idx$1634)))) (&& c$686 (= 44 (+ 1 (* 2 idx$1634)))) (&& c$688 (= 45 (+ 1 (* 2 idx$1634)))) (&& c$690 (= 46 (+ 1 (* 2 idx$1634)))) (&& c$692 (= 47 (+ 1 (* 2 idx$1634)))) (&& c$694 (= 48 (+ 1 (* 2 idx$1634)))) (&& c$696 (= 49 (+ 1 (* 2 idx$1634)))) (&& c$698 (= 50 (+ 1 (* 2 idx$1634)))) (&& c$700 (= 51 (+ 1 (* 2 idx$1634)))) (&& c$702 (= 52 (+ 1 (* 2 idx$1634)))) (&& c$704 (= 53 (+ 1 (* 2 idx$1634)))) (&& c$706 (= 54 (+ 1 (* 2 idx$1634)))) (&& c$708 (= 55 (+ 1 (* 2 idx$1634)))) (&& c$710 (= 56 (+ 1 (* 2 idx$1634)))) (&& c$712 (= 57 (+ 1 (* 2 idx$1634)))) (&& c$714 (= 58 (+ 1 (* 2 idx$1634)))) (&& c$716 (= 59 (+ 1 (* 2 idx$1634)))) (&& c$718 (= 60 (+ 1 (* 2 idx$1634)))) (&& c$720 (= 61 (+ 1 (* 2 idx$1634)))) (&& c$722 (= 62 (+ 1 (* 2 idx$1634)))) (&& c$724 (= 63 (+ 1 (* 2 idx$1634))))) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16)) (bvmul (bv #xffc0 16) t148)))) (bitvector 32)) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bvmul (sign-extend input1_multiplier (bitvector 32)) (ite c$1637 (sign-extend (bvadd (ite (|| (= 1 (* 2 idx$1636)) (&& c$602 (= 2 (* 2 idx$1636))) (&& c$604 (= 3 (* 2 idx$1636))) (&& c$606 (= 4 (* 2 idx$1636))) (&& c$608 (= 5 (* 2 idx$1636))) (&& c$610 (= 6 (* 2 idx$1636))) (&& c$612 (= 7 (* 2 idx$1636))) (&& c$614 (= 8 (* 2 idx$1636))) (&& c$616 (= 9 (* 2 idx$1636))) (&& c$618 (= 10 (* 2 idx$1636))) (&& c$620 (= 11 (* 2 idx$1636))) (&& c$622 (= 12 (* 2 idx$1636))) (&& c$624 (= 13 (* 2 idx$1636))) (&& c$626 (= 14 (* 2 idx$1636))) (&& c$628 (= 15 (* 2 idx$1636))) (&& c$630 (= 16 (* 2 idx$1636))) (&& c$632 (= 17 (* 2 idx$1636))) (&& c$634 (= 18 (* 2 idx$1636))) (&& c$636 (= 19 (* 2 idx$1636))) (&& c$638 (= 20 (* 2 idx$1636))) (&& c$640 (= 21 (* 2 idx$1636))) (&& c$642 (= 22 (* 2 idx$1636))) (&& c$644 (= 23 (* 2 idx$1636))) (&& c$646 (= 24 (* 2 idx$1636))) (&& c$648 (= 25 (* 2 idx$1636))) (&& c$650 (= 26 (* 2 idx$1636))) (&& c$652 (= 27 (* 2 idx$1636))) (&& c$654 (= 28 (* 2 idx$1636))) (&& c$656 (= 29 (* 2 idx$1636))) (&& c$658 (= 30 (* 2 idx$1636))) (&& c$660 (= 31 (* 2 idx$1636))) (&& c$662 (= 32 (* 2 idx$1636))) (&& c$664 (= 33 (* 2 idx$1636))) (&& c$666 (= 34 (* 2 idx$1636))) (&& c$668 (= 35 (* 2 idx$1636))) (&& c$670 (= 36 (* 2 idx$1636))) (&& c$672 (= 37 (* 2 idx$1636))) (&& c$674 (= 38 (* 2 idx$1636))) (&& c$676 (= 39 (* 2 idx$1636))) (&& c$678 (= 40 (* 2 idx$1636))) (&& c$680 (= 41 (* 2 idx$1636))) (&& c$682 (= 42 (* 2 idx$1636))) (&& c$684 (= 43 (* 2 idx$1636))) (&& c$686 (= 44 (* 2 idx$1636))) (&& c$688 (= 45 (* 2 idx$1636))) (&& c$690 (= 46 (* 2 idx$1636))) (&& c$692 (= 47 (* 2 idx$1636))) (&& c$694 (= 48 (* 2 idx$1636))) (&& c$696 (= 49 (* 2 idx$1636))) (&& c$698 (= 50 (* 2 idx$1636))) (&& c$700 (= 51 (* 2 idx$1636))) (&& c$702 (= 52 (* 2 idx$1636))) (&& c$704 (= 53 (* 2 idx$1636))) (&& c$706 (= 54 (* 2 idx$1636))) (&& c$708 (= 55 (* 2 idx$1636))) (&& c$710 (= 56 (* 2 idx$1636))) (&& c$712 (= 57 (* 2 idx$1636))) (&& c$714 (= 58 (* 2 idx$1636))) (&& c$716 (= 59 (* 2 idx$1636))) (&& c$718 (= 60 (* 2 idx$1636))) (&& c$720 (= 61 (* 2 idx$1636))) (&& c$722 (= 62 (* 2 idx$1636))) (&& c$724 (= 63 (* 2 idx$1636)))) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16)) (bvmul (bv #xffc0 16) t148)) (bvmul (bv #x0040 16) (ite (|| (= 1 (+ 1 (* 2 idx$1636))) (&& c$602 (= 2 (+ 1 (* 2 idx$1636)))) (&& c$604 (= 3 (+ 1 (* 2 idx$1636)))) (&& c$606 (= 4 (+ 1 (* 2 idx$1636)))) (&& c$608 (= 5 (+ 1 (* 2 idx$1636)))) (&& c$610 (= 6 (+ 1 (* 2 idx$1636)))) (&& c$612 (= 7 (+ 1 (* 2 idx$1636)))) (&& c$614 (= 8 (+ 1 (* 2 idx$1636)))) (&& c$616 (= 9 (+ 1 (* 2 idx$1636)))) (&& c$618 (= 10 (+ 1 (* 2 idx$1636)))) (&& c$620 (= 11 (+ 1 (* 2 idx$1636)))) (&& c$622 (= 12 (+ 1 (* 2 idx$1636)))) (&& c$624 (= 13 (+ 1 (* 2 idx$1636)))) (&& c$626 (= 14 (+ 1 (* 2 idx$1636)))) (&& c$628 (= 15 (+ 1 (* 2 idx$1636)))) (&& c$630 (= 16 (+ 1 (* 2 idx$1636)))) (&& c$632 (= 17 (+ 1 (* 2 idx$1636)))) (&& c$634 (= 18 (+ 1 (* 2 idx$1636)))) (&& c$636 (= 19 (+ 1 (* 2 idx$1636)))) (&& c$638 (= 20 (+ 1 (* 2 idx$1636)))) (&& c$640 (= 21 (+ 1 (* 2 idx$1636)))) (&& c$642 (= 22 (+ 1 (* 2 idx$1636)))) (&& c$644 (= 23 (+ 1 (* 2 idx$1636)))) (&& c$646 (= 24 (+ 1 (* 2 idx$1636)))) (&& c$648 (= 25 (+ 1 (* 2 idx$1636)))) (&& c$650 (= 26 (+ 1 (* 2 idx$1636)))) (&& c$652 (= 27 (+ 1 (* 2 idx$1636)))) (&& c$654 (= 28 (+ 1 (* 2 idx$1636)))) (&& c$656 (= 29 (+ 1 (* 2 idx$1636)))) (&& c$658 (= 30 (+ 1 (* 2 idx$1636)))) (&& c$660 (= 31 (+ 1 (* 2 idx$1636)))) (&& c$662 (= 32 (+ 1 (* 2 idx$1636)))) (&& c$664 (= 33 (+ 1 (* 2 idx$1636)))) (&& c$666 (= 34 (+ 1 (* 2 idx$1636)))) (&& c$668 (= 35 (+ 1 (* 2 idx$1636)))) (&& c$670 (= 36 (+ 1 (* 2 idx$1636)))) (&& c$672 (= 37 (+ 1 (* 2 idx$1636)))) (&& c$674 (= 38 (+ 1 (* 2 idx$1636)))) (&& c$676 (= 39 (+ 1 (* 2 idx$1636)))) (&& c$678 (= 40 (+ 1 (* 2 idx$1636)))) (&& c$680 (= 41 (+ 1 (* 2 idx$1636)))) (&& c$682 (= 42 (+ 1 (* 2 idx$1636)))) (&& c$684 (= 43 (+ 1 (* 2 idx$1636)))) (&& c$686 (= 44 (+ 1 (* 2 idx$1636)))) (&& c$688 (= 45 (+ 1 (* 2 idx$1636)))) (&& c$690 (= 46 (+ 1 (* 2 idx$1636)))) (&& c$692 (= 47 (+ 1 (* 2 idx$1636)))) (&& c$694 (= 48 (+ 1 (* 2 idx$1636)))) (&& c$696 (= 49 (+ 1 (* 2 idx$1636)))) (&& c$698 (= 50 (+ 1 (* 2 idx$1636)))) (&& c$700 (= 51 (+ 1 (* 2 idx$1636)))) (&& c$702 (= 52 (+ 1 (* 2 idx$1636)))) (&& c$704 (= 53 (+ 1 (* 2 idx$1636)))) (&& c$706 (= 54 (+ 1 (* 2 idx$1636)))) (&& c$708 (= 55 (+ 1 (* 2 idx$1636)))) (&& c$710 (= 56 (+ 1 (* 2 idx$1636)))) (&& c$712 (= 57 (+ 1 (* 2 idx$1636)))) (&& c$714 (= 58 (+ 1 (* 2 idx$1636)))) (&& c$716 (= 59 (+ 1 (* 2 idx$1636)))) (&& c$718 (= 60 (+ 1 (* 2 idx$1636)))) (&& c$720 (= 61 (+ 1 (* 2 idx$1636)))) (&& c$722 (= 62 (+ 1 (* 2 idx$1636)))) (&& c$724 (= 63 (+ 1 (* 2 idx$1636))))) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16)) (bvmul (bv #xffc0 16) t148)))) (bitvector 32)) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))))) (bv #x00000010 32)) (bvand (bv #x00000001 32) (bvashr (bvadd (ite c$1635 (sign-extend (bvadd (ite (|| (= 1 (* 2 idx$1634)) (&& c$602 (= 2 (* 2 idx$1634))) (&& c$604 (= 3 (* 2 idx$1634))) (&& c$606 (= 4 (* 2 idx$1634))) (&& c$608 (= 5 (* 2 idx$1634))) (&& c$610 (= 6 (* 2 idx$1634))) (&& c$612 (= 7 (* 2 idx$1634))) (&& c$614 (= 8 (* 2 idx$1634))) (&& c$616 (= 9 (* 2 idx$1634))) (&& c$618 (= 10 (* 2 idx$1634))) (&& c$620 (= 11 (* 2 idx$1634))) (&& c$622 (= 12 (* 2 idx$1634))) (&& c$624 (= 13 (* 2 idx$1634))) (&& c$626 (= 14 (* 2 idx$1634))) (&& c$628 (= 15 (* 2 idx$1634))) (&& c$630 (= 16 (* 2 idx$1634))) (&& c$632 (= 17 (* 2 idx$1634))) (&& c$634 (= 18 (* 2 idx$1634))) (&& c$636 (= 19 (* 2 idx$1634))) (&& c$638 (= 20 (* 2 idx$1634))) (&& c$640 (= 21 (* 2 idx$1634))) (&& c$642 (= 22 (* 2 idx$1634))) (&& c$644 (= 23 (* 2 idx$1634))) (&& c$646 (= 24 (* 2 idx$1634))) (&& c$648 (= 25 (* 2 idx$1634))) (&& c$650 (= 26 (* 2 idx$1634))) (&& c$652 (= 27 (* 2 idx$1634))) (&& c$654 (= 28 (* 2 idx$1634))) (&& c$656 (= 29 (* 2 idx$1634))) (&& c$658 (= 30 (* 2 idx$1634))) (&& c$660 (= 31 (* 2 idx$1634))) (&& c$662 (= 32 (* 2 idx$1634))) (&& c$664 (= 33 (* 2 idx$1634))) (&& c$666 (= 34 (* 2 idx$1634))) (&& c$668 (= 35 (* 2 idx$1634))) (&& c$670 (= 36 (* 2 idx$1634))) (&& c$672 (= 37 (* 2 idx$1634))) (&& c$674 (= 38 (* 2 idx$1634))) (&& c$676 (= 39 (* 2 idx$1634))) (&& c$678 (= 40 (* 2 idx$1634))) (&& c$680 (= 41 (* 2 idx$1634))) (&& c$682 (= 42 (* 2 idx$1634))) (&& c$684 (= 43 (* 2 idx$1634))) (&& c$686 (= 44 (* 2 idx$1634))) (&& c$688 (= 45 (* 2 idx$1634))) (&& c$690 (= 46 (* 2 idx$1634))) (&& c$692 (= 47 (* 2 idx$1634))) (&& c$694 (= 48 (* 2 idx$1634))) (&& c$696 (= 49 (* 2 idx$1634))) (&& c$698 (= 50 (* 2 idx$1634))) (&& c$700 (= 51 (* 2 idx$1634))) (&& c$702 (= 52 (* 2 idx$1634))) (&& c$704 (= 53 (* 2 idx$1634))) (&& c$706 (= 54 (* 2 idx$1634))) (&& c$708 (= 55 (* 2 idx$1634))) (&& c$710 (= 56 (* 2 idx$1634))) (&& c$712 (= 57 (* 2 idx$1634))) (&& c$714 (= 58 (* 2 idx$1634))) (&& c$716 (= 59 (* 2 idx$1634))) (&& c$718 (= 60 (* 2 idx$1634))) (&& c$720 (= 61 (* 2 idx$1634))) (&& c$722 (= 62 (* 2 idx$1634))) (&& c$724 (= 63 (* 2 idx$1634)))) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16)) (bvmul (bv #xffc0 16) t148)) (bvmul (bv #x0040 16) (ite (|| (= 1 (+ 1 (* 2 idx$1634))) (&& c$602 (= 2 (+ 1 (* 2 idx$1634)))) (&& c$604 (= 3 (+ 1 (* 2 idx$1634)))) (&& c$606 (= 4 (+ 1 (* 2 idx$1634)))) (&& c$608 (= 5 (+ 1 (* 2 idx$1634)))) (&& c$610 (= 6 (+ 1 (* 2 idx$1634)))) (&& c$612 (= 7 (+ 1 (* 2 idx$1634)))) (&& c$614 (= 8 (+ 1 (* 2 idx$1634)))) (&& c$616 (= 9 (+ 1 (* 2 idx$1634)))) (&& c$618 (= 10 (+ 1 (* 2 idx$1634)))) (&& c$620 (= 11 (+ 1 (* 2 idx$1634)))) (&& c$622 (= 12 (+ 1 (* 2 idx$1634)))) (&& c$624 (= 13 (+ 1 (* 2 idx$1634)))) (&& c$626 (= 14 (+ 1 (* 2 idx$1634)))) (&& c$628 (= 15 (+ 1 (* 2 idx$1634)))) (&& c$630 (= 16 (+ 1 (* 2 idx$1634)))) (&& c$632 (= 17 (+ 1 (* 2 idx$1634)))) (&& c$634 (= 18 (+ 1 (* 2 idx$1634)))) (&& c$636 (= 19 (+ 1 (* 2 idx$1634)))) (&& c$638 (= 20 (+ 1 (* 2 idx$1634)))) (&& c$640 (= 21 (+ 1 (* 2 idx$1634)))) (&& c$642 (= 22 (+ 1 (* 2 idx$1634)))) (&& c$644 (= 23 (+ 1 (* 2 idx$1634)))) (&& c$646 (= 24 (+ 1 (* 2 idx$1634)))) (&& c$648 (= 25 (+ 1 (* 2 idx$1634)))) (&& c$650 (= 26 (+ 1 (* 2 idx$1634)))) (&& c$652 (= 27 (+ 1 (* 2 idx$1634)))) (&& c$654 (= 28 (+ 1 (* 2 idx$1634)))) (&& c$656 (= 29 (+ 1 (* 2 idx$1634)))) (&& c$658 (= 30 (+ 1 (* 2 idx$1634)))) (&& c$660 (= 31 (+ 1 (* 2 idx$1634)))) (&& c$662 (= 32 (+ 1 (* 2 idx$1634)))) (&& c$664 (= 33 (+ 1 (* 2 idx$1634)))) (&& c$666 (= 34 (+ 1 (* 2 idx$1634)))) (&& c$668 (= 35 (+ 1 (* 2 idx$1634)))) (&& c$670 (= 36 (+ 1 (* 2 idx$1634)))) (&& c$672 (= 37 (+ 1 (* 2 idx$1634)))) (&& c$674 (= 38 (+ 1 (* 2 idx$1634)))) (&& c$676 (= 39 (+ 1 (* 2 idx$1634)))) (&& c$678 (= 40 (+ 1 (* 2 idx$1634)))) (&& c$680 (= 41 (+ 1 (* 2 idx$1634)))) (&& c$682 (= 42 (+ 1 (* 2 idx$1634)))) (&& c$684 (= 43 (+ 1 (* 2 idx$1634)))) (&& c$686 (= 44 (+ 1 (* 2 idx$1634)))) (&& c$688 (= 45 (+ 1 (* 2 idx$1634)))) (&& c$690 (= 46 (+ 1 (* 2 idx$1634)))) (&& c$692 (= 47 (+ 1 (* 2 idx$1634)))) (&& c$694 (= 48 (+ 1 (* 2 idx$1634)))) (&& c$696 (= 49 (+ 1 (* 2 idx$1634)))) (&& c$698 (= 50 (+ 1 (* 2 idx$1634)))) (&& c$700 (= 51 (+ 1 (* 2 idx$1634)))) (&& c$702 (= 52 (+ 1 (* 2 idx$1634)))) (&& c$704 (= 53 (+ 1 (* 2 idx$1634)))) (&& c$706 (= 54 (+ 1 (* 2 idx$1634)))) (&& c$708 (= 55 (+ 1 (* 2 idx$1634)))) (&& c$710 (= 56 (+ 1 (* 2 idx$1634)))) (&& c$712 (= 57 (+ 1 (* 2 idx$1634)))) (&& c$714 (= 58 (+ 1 (* 2 idx$1634)))) (&& c$716 (= 59 (+ 1 (* 2 idx$1634)))) (&& c$718 (= 60 (+ 1 (* 2 idx$1634)))) (&& c$720 (= 61 (+ 1 (* 2 idx$1634)))) (&& c$722 (= 62 (+ 1 (* 2 idx$1634)))) (&& c$724 (= 63 (+ 1 (* 2 idx$1634))))) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16)) (bvmul (bv #xffc0 16) t148)))) (bitvector 32)) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bvmul (sign-extend input1_multiplier (bitvector 32)) (ite c$1637 (sign-extend (bvadd (ite (|| (= 1 (* 2 idx$1636)) (&& c$602 (= 2 (* 2 idx$1636))) (&& c$604 (= 3 (* 2 idx$1636))) (&& c$606 (= 4 (* 2 idx$1636))) (&& c$608 (= 5 (* 2 idx$1636))) (&& c$610 (= 6 (* 2 idx$1636))) (&& c$612 (= 7 (* 2 idx$1636))) (&& c$614 (= 8 (* 2 idx$1636))) (&& c$616 (= 9 (* 2 idx$1636))) (&& c$618 (= 10 (* 2 idx$1636))) (&& c$620 (= 11 (* 2 idx$1636))) (&& c$622 (= 12 (* 2 idx$1636))) (&& c$624 (= 13 (* 2 idx$1636))) (&& c$626 (= 14 (* 2 idx$1636))) (&& c$628 (= 15 (* 2 idx$1636))) (&& c$630 (= 16 (* 2 idx$1636))) (&& c$632 (= 17 (* 2 idx$1636))) (&& c$634 (= 18 (* 2 idx$1636))) (&& c$636 (= 19 (* 2 idx$1636))) (&& c$638 (= 20 (* 2 idx$1636))) (&& c$640 (= 21 (* 2 idx$1636))) (&& c$642 (= 22 (* 2 idx$1636))) (&& c$644 (= 23 (* 2 idx$1636))) (&& c$646 (= 24 (* 2 idx$1636))) (&& c$648 (= 25 (* 2 idx$1636))) (&& c$650 (= 26 (* 2 idx$1636))) (&& c$652 (= 27 (* 2 idx$1636))) (&& c$654 (= 28 (* 2 idx$1636))) (&& c$656 (= 29 (* 2 idx$1636))) (&& c$658 (= 30 (* 2 idx$1636))) (&& c$660 (= 31 (* 2 idx$1636))) (&& c$662 (= 32 (* 2 idx$1636))) (&& c$664 (= 33 (* 2 idx$1636))) (&& c$666 (= 34 (* 2 idx$1636))) (&& c$668 (= 35 (* 2 idx$1636))) (&& c$670 (= 36 (* 2 idx$1636))) (&& c$672 (= 37 (* 2 idx$1636))) (&& c$674 (= 38 (* 2 idx$1636))) (&& c$676 (= 39 (* 2 idx$1636))) (&& c$678 (= 40 (* 2 idx$1636))) (&& c$680 (= 41 (* 2 idx$1636))) (&& c$682 (= 42 (* 2 idx$1636))) (&& c$684 (= 43 (* 2 idx$1636))) (&& c$686 (= 44 (* 2 idx$1636))) (&& c$688 (= 45 (* 2 idx$1636))) (&& c$690 (= 46 (* 2 idx$1636))) (&& c$692 (= 47 (* 2 idx$1636))) (&& c$694 (= 48 (* 2 idx$1636))) (&& c$696 (= 49 (* 2 idx$1636))) (&& c$698 (= 50 (* 2 idx$1636))) (&& c$700 (= 51 (* 2 idx$1636))) (&& c$702 (= 52 (* 2 idx$1636))) (&& c$704 (= 53 (* 2 idx$1636))) (&& c$706 (= 54 (* 2 idx$1636))) (&& c$708 (= 55 (* 2 idx$1636))) (&& c$710 (= 56 (* 2 idx$1636))) (&& c$712 (= 57 (* 2 idx$1636))) (&& c$714 (= 58 (* 2 idx$1636))) (&& c$716 (= 59 (* 2 idx$1636))) (&& c$718 (= 60 (* 2 idx$1636))) (&& c$720 (= 61 (* 2 idx$1636))) (&& c$722 (= 62 (* 2 idx$1636))) (&& c$724 (= 63 (* 2 idx$1636)))) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16)) (bvmul (bv #xffc0 16) t148)) (bvmul (bv #x0040 16) (ite (|| (= 1 (+ 1 (* 2 idx$1636))) (&& c$602 (= 2 (+ 1 (* 2 idx$1636)))) (&& c$604 (= 3 (+ 1 (* 2 idx$1636)))) (&& c$606 (= 4 (+ 1 (* 2 idx$1636)))) (&& c$608 (= 5 (+ 1 (* 2 idx$1636)))) (&& c$610 (= 6 (+ 1 (* 2 idx$1636)))) (&& c$612 (= 7 (+ 1 (* 2 idx$1636)))) (&& c$614 (= 8 (+ 1 (* 2 idx$1636)))) (&& c$616 (= 9 (+ 1 (* 2 idx$1636)))) (&& c$618 (= 10 (+ 1 (* 2 idx$1636)))) (&& c$620 (= 11 (+ 1 (* 2 idx$1636)))) (&& c$622 (= 12 (+ 1 (* 2 idx$1636)))) (&& c$624 (= 13 (+ 1 (* 2 idx$1636)))) (&& c$626 (= 14 (+ 1 (* 2 idx$1636)))) (&& c$628 (= 15 (+ 1 (* 2 idx$1636)))) (&& c$630 (= 16 (+ 1 (* 2 idx$1636)))) (&& c$632 (= 17 (+ 1 (* 2 idx$1636)))) (&& c$634 (= 18 (+ 1 (* 2 idx$1636)))) (&& c$636 (= 19 (+ 1 (* 2 idx$1636)))) (&& c$638 (= 20 (+ 1 (* 2 idx$1636)))) (&& c$640 (= 21 (+ 1 (* 2 idx$1636)))) (&& c$642 (= 22 (+ 1 (* 2 idx$1636)))) (&& c$644 (= 23 (+ 1 (* 2 idx$1636)))) (&& c$646 (= 24 (+ 1 (* 2 idx$1636)))) (&& c$648 (= 25 (+ 1 (* 2 idx$1636)))) (&& c$650 (= 26 (+ 1 (* 2 idx$1636)))) (&& c$652 (= 27 (+ 1 (* 2 idx$1636)))) (&& c$654 (= 28 (+ 1 (* 2 idx$1636)))) (&& c$656 (= 29 (+ 1 (* 2 idx$1636)))) (&& c$658 (= 30 (+ 1 (* 2 idx$1636)))) (&& c$660 (= 31 (+ 1 (* 2 idx$1636)))) (&& c$662 (= 32 (+ 1 (* 2 idx$1636)))) (&& c$664 (= 33 (+ 1 (* 2 idx$1636)))) (&& c$666 (= 34 (+ 1 (* 2 idx$1636)))) (&& c$668 (= 35 (+ 1 (* 2 idx$1636)))) (&& c$670 (= 36 (+ 1 (* 2 idx$1636)))) (&& c$672 (= 37 (+ 1 (* 2 idx$1636)))) (&& c$674 (= 38 (+ 1 (* 2 idx$1636)))) (&& c$676 (= 39 (+ 1 (* 2 idx$1636)))) (&& c$678 (= 40 (+ 1 (* 2 idx$1636)))) (&& c$680 (= 41 (+ 1 (* 2 idx$1636)))) (&& c$682 (= 42 (+ 1 (* 2 idx$1636)))) (&& c$684 (= 43 (+ 1 (* 2 idx$1636)))) (&& c$686 (= 44 (+ 1 (* 2 idx$1636)))) (&& c$688 (= 45 (+ 1 (* 2 idx$1636)))) (&& c$690 (= 46 (+ 1 (* 2 idx$1636)))) (&& c$692 (= 47 (+ 1 (* 2 idx$1636)))) (&& c$694 (= 48 (+ 1 (* 2 idx$1636)))) (&& c$696 (= 49 (+ 1 (* 2 idx$1636)))) (&& c$698 (= 50 (+ 1 (* 2 idx$1636)))) (&& c$700 (= 51 (+ 1 (* 2 idx$1636)))) (&& c$702 (= 52 (+ 1 (* 2 idx$1636)))) (&& c$704 (= 53 (+ 1 (* 2 idx$1636)))) (&& c$706 (= 54 (+ 1 (* 2 idx$1636)))) (&& c$708 (= 55 (+ 1 (* 2 idx$1636)))) (&& c$710 (= 56 (+ 1 (* 2 idx$1636)))) (&& c$712 (= 57 (+ 1 (* 2 idx$1636)))) (&& c$714 (= 58 (+ 1 (* 2 idx$1636)))) (&& c$716 (= 59 (+ 1 (* 2 idx$1636)))) (&& c$718 (= 60 (+ 1 (* 2 idx$1636)))) (&& c$720 (= 61 (+ 1 (* 2 idx$1636)))) (&& c$722 (= 62 (+ 1 (* 2 idx$1636)))) (&& c$724 (= 63 (+ 1 (* 2 idx$1636))))) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16)) (bvmul (bv #xffc0 16) t148)))) (bitvector 32)) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))))) (bv #x0000000f 32))))))) (bitvector 32)) (sign-extend t151 (bitvector 32))) (ite x?$2316 (bvadd (ite x?$2315 (sign-extend (ite (bvslt (bvadd (bvashr (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bv #x00000010 32)) (bvand (bv #x00000001 32) (bvashr (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bv #x0000000f 32)))) (bv #xffff8000 32)) (bv #x8000 16) (ite (bvslt (bv #x00007fff 32) (bvadd (bvashr (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bv #x00000010 32)) (bvand (bv #x00000001 32) (bvashr (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bv #x0000000f 32))))) (bv #x7fff 16) (extract 15 0 (bvadd (bvashr (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bv #x00000010 32)) (bvand (bv #x00000001 32) (bvashr (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bv #x0000000f 32))))))) (bitvector 32)) (sign-extend t151 (bitvector 32))) (ite x?$2317 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2317 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite x?$2315 (sign-extend (ite (bvslt (bvadd (bvashr (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bv #x00000010 32)) (bvand (bv #x00000001 32) (bvashr (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bv #x0000000f 32)))) (bv #xffff8000 32)) (bv #x8000 16) (ite (bvslt (bv #x00007fff 32) (bvadd (bvashr (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bv #x00000010 32)) (bvand (bv #x00000001 32) (bvashr (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bv #x0000000f 32))))) (bv #x7fff 16) (extract 15 0 (bvadd (bvashr (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bv #x00000010 32)) (bvand (bv #x00000001 32) (bvashr (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bv #x0000000f 32))))))) (bitvector 32)) (sign-extend t151 (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2317 (bv #x00000000 32) (bv #x00000001 32))))) (ite x?$2315 (sign-extend (ite (bvslt (bvadd (bvashr (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bv #x00000010 32)) (bvand (bv #x00000001 32) (bvashr (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bv #x0000000f 32)))) (bv #xffff8000 32)) (bv #x8000 16) (ite (bvslt (bv #x00007fff 32) (bvadd (bvashr (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bv #x00000010 32)) (bvand (bv #x00000001 32) (bvashr (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bv #x0000000f 32))))) (bv #x7fff 16) (extract 15 0 (bvadd (bvashr (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bv #x00000010 32)) (bvand (bv #x00000001 32) (bvashr (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bv #x0000000f 32))))))) (bitvector 32)) (sign-extend t151 (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2317 (bv #x00000000 32) (bv #x00000001 32)))))))) (bvadd (ite x?$2316 (bvadd (ite x?$2315 (sign-extend (ite (bvslt (bvadd (bvashr (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bv #x00000010 32)) (bvand (bv #x00000001 32) (bvashr (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bv #x0000000f 32)))) (bv #xffff8000 32)) (bv #x8000 16) (ite (bvslt (bv #x00007fff 32) (bvadd (bvashr (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bv #x00000010 32)) (bvand (bv #x00000001 32) (bvashr (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bv #x0000000f 32))))) (bv #x7fff 16) (extract 15 0 (bvadd (bvashr (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bv #x00000010 32)) (bvand (bv #x00000001 32) (bvashr (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bv #x0000000f 32))))))) (bitvector 32)) (sign-extend t151 (bitvector 32))) (ite x?$2317 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2317 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite x?$2315 (sign-extend (ite (bvslt (bvadd (bvashr (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bv #x00000010 32)) (bvand (bv #x00000001 32) (bvashr (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bv #x0000000f 32)))) (bv #xffff8000 32)) (bv #x8000 16) (ite (bvslt (bv #x00007fff 32) (bvadd (bvashr (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bv #x00000010 32)) (bvand (bv #x00000001 32) (bvashr (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bv #x0000000f 32))))) (bv #x7fff 16) (extract 15 0 (bvadd (bvashr (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bv #x00000010 32)) (bvand (bv #x00000001 32) (bvashr (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bv #x0000000f 32))))))) (bitvector 32)) (sign-extend t151 (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2317 (bv #x00000000 32) (bv #x00000001 32))))) (ite x?$2315 (sign-extend (ite (bvslt (bvadd (bvashr (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bv #x00000010 32)) (bvand (bv #x00000001 32) (bvashr (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bv #x0000000f 32)))) (bv #xffff8000 32)) (bv #x8000 16) (ite (bvslt (bv #x00007fff 32) (bvadd (bvashr (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bv #x00000010 32)) (bvand (bv #x00000001 32) (bvashr (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bv #x0000000f 32))))) (bv #x7fff 16) (extract 15 0 (bvadd (bvashr (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bv #x00000010 32)) (bvand (bv #x00000001 32) (bvashr (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bv #x0000000f 32))))))) (bitvector 32)) (sign-extend t151 (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2317 (bv #x00000000 32) (bv #x00000001 32))))))) (ite (bvsle (bvadd (bv #x80000000 32) (bvneg (ite (bvsle (ite x?$2316 (bvadd (ite x?$2315 (sign-extend (ite (bvslt (bvadd (bvashr (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bv #x00000010 32)) (bvand (bv #x00000001 32) (bvashr (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bv #x0000000f 32)))) (bv #xffff8000 32)) (bv #x8000 16) (ite (bvslt (bv #x00007fff 32) (bvadd (bvashr (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bv #x00000010 32)) (bvand (bv #x00000001 32) (bvashr (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bv #x0000000f 32))))) (bv #x7fff 16) (extract 15 0 (bvadd (bvashr (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bv #x00000010 32)) (bvand (bv #x00000001 32) (bvashr (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bv #x0000000f 32))))))) (bitvector 32)) (sign-extend t151 (bitvector 32))) (ite x?$2317 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2317 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite x?$2315 (sign-extend (ite (bvslt (bvadd (bvashr (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bv #x00000010 32)) (bvand (bv #x00000001 32) (bvashr (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bv #x0000000f 32)))) (bv #xffff8000 32)) (bv #x8000 16) (ite (bvslt (bv #x00007fff 32) (bvadd (bvashr (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bv #x00000010 32)) (bvand (bv #x00000001 32) (bvashr (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bv #x0000000f 32))))) (bv #x7fff 16) (extract 15 0 (bvadd (bvashr (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bv #x00000010 32)) (bvand (bv #x00000001 32) (bvashr (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bv #x0000000f 32))))))) (bitvector 32)) (sign-extend t151 (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2317 (bv #x00000000 32) (bv #x00000001 32))))) (ite x?$2315 (sign-extend (ite (bvslt (bvadd (bvashr (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bv #x00000010 32)) (bvand (bv #x00000001 32) (bvashr (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bv #x0000000f 32)))) (bv #xffff8000 32)) (bv #x8000 16) (ite (bvslt (bv #x00007fff 32) (bvadd (bvashr (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bv #x00000010 32)) (bvand (bv #x00000001 32) (bvashr (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bv #x0000000f 32))))) (bv #x7fff 16) (extract 15 0 (bvadd (bvashr (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bv #x00000010 32)) (bvand (bv #x00000001 32) (bvashr (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bv #x0000000f 32))))))) (bitvector 32)) (sign-extend t151 (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2317 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)) (ite x?$2316 (bvadd (ite x?$2315 (sign-extend (ite (bvslt (bvadd (bvashr (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bv #x00000010 32)) (bvand (bv #x00000001 32) (bvashr (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bv #x0000000f 32)))) (bv #xffff8000 32)) (bv #x8000 16) (ite (bvslt (bv #x00007fff 32) (bvadd (bvashr (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bv #x00000010 32)) (bvand (bv #x00000001 32) (bvashr (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bv #x0000000f 32))))) (bv #x7fff 16) (extract 15 0 (bvadd (bvashr (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bv #x00000010 32)) (bvand (bv #x00000001 32) (bvashr (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bv #x0000000f 32))))))) (bitvector 32)) (sign-extend t151 (bitvector 32))) (ite x?$2317 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2317 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite x?$2315 (sign-extend (ite (bvslt (bvadd (bvashr (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bv #x00000010 32)) (bvand (bv #x00000001 32) (bvashr (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bv #x0000000f 32)))) (bv #xffff8000 32)) (bv #x8000 16) (ite (bvslt (bv #x00007fff 32) (bvadd (bvashr (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bv #x00000010 32)) (bvand (bv #x00000001 32) (bvashr (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bv #x0000000f 32))))) (bv #x7fff 16) (extract 15 0 (bvadd (bvashr (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bv #x00000010 32)) (bvand (bv #x00000001 32) (bvashr (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bv #x0000000f 32))))))) (bitvector 32)) (sign-extend t151 (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2317 (bv #x00000000 32) (bv #x00000001 32))))) (ite x?$2315 (sign-extend (ite (bvslt (bvadd (bvashr (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bv #x00000010 32)) (bvand (bv #x00000001 32) (bvashr (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bv #x0000000f 32)))) (bv #xffff8000 32)) (bv #x8000 16) (ite (bvslt (bv #x00007fff 32) (bvadd (bvashr (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bv #x00000010 32)) (bvand (bv #x00000001 32) (bvashr (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bv #x0000000f 32))))) (bv #x7fff 16) (extract 15 0 (bvadd (bvashr (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bv #x00000010 32)) (bvand (bv #x00000001 32) (bvashr (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bv #x0000000f 32))))))) (bitvector 32)) (sign-extend t151 (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2317 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)))) (ite (bvsle (ite x?$2315 (sign-extend (ite (bvslt (bvadd (bvashr (bvadd (ite c$1635 (sign-extend (bvadd (ite (|| (= 1 (* 2 idx$1634)) (&& c$602 (= 2 (* 2 idx$1634))) (&& c$604 (= 3 (* 2 idx$1634))) (&& c$606 (= 4 (* 2 idx$1634))) (&& c$608 (= 5 (* 2 idx$1634))) (&& c$610 (= 6 (* 2 idx$1634))) (&& c$612 (= 7 (* 2 idx$1634))) (&& c$614 (= 8 (* 2 idx$1634))) (&& c$616 (= 9 (* 2 idx$1634))) (&& c$618 (= 10 (* 2 idx$1634))) (&& c$620 (= 11 (* 2 idx$1634))) (&& c$622 (= 12 (* 2 idx$1634))) (&& c$624 (= 13 (* 2 idx$1634))) (&& c$626 (= 14 (* 2 idx$1634))) (&& c$628 (= 15 (* 2 idx$1634))) (&& c$630 (= 16 (* 2 idx$1634))) (&& c$632 (= 17 (* 2 idx$1634))) (&& c$634 (= 18 (* 2 idx$1634))) (&& c$636 (= 19 (* 2 idx$1634))) (&& c$638 (= 20 (* 2 idx$1634))) (&& c$640 (= 21 (* 2 idx$1634))) (&& c$642 (= 22 (* 2 idx$1634))) (&& c$644 (= 23 (* 2 idx$1634))) (&& c$646 (= 24 (* 2 idx$1634))) (&& c$648 (= 25 (* 2 idx$1634))) (&& c$650 (= 26 (* 2 idx$1634))) (&& c$652 (= 27 (* 2 idx$1634))) (&& c$654 (= 28 (* 2 idx$1634))) (&& c$656 (= 29 (* 2 idx$1634))) (&& c$658 (= 30 (* 2 idx$1634))) (&& c$660 (= 31 (* 2 idx$1634))) (&& c$662 (= 32 (* 2 idx$1634))) (&& c$664 (= 33 (* 2 idx$1634))) (&& c$666 (= 34 (* 2 idx$1634))) (&& c$668 (= 35 (* 2 idx$1634))) (&& c$670 (= 36 (* 2 idx$1634))) (&& c$672 (= 37 (* 2 idx$1634))) (&& c$674 (= 38 (* 2 idx$1634))) (&& c$676 (= 39 (* 2 idx$1634))) (&& c$678 (= 40 (* 2 idx$1634))) (&& c$680 (= 41 (* 2 idx$1634))) (&& c$682 (= 42 (* 2 idx$1634))) (&& c$684 (= 43 (* 2 idx$1634))) (&& c$686 (= 44 (* 2 idx$1634))) (&& c$688 (= 45 (* 2 idx$1634))) (&& c$690 (= 46 (* 2 idx$1634))) (&& c$692 (= 47 (* 2 idx$1634))) (&& c$694 (= 48 (* 2 idx$1634))) (&& c$696 (= 49 (* 2 idx$1634))) (&& c$698 (= 50 (* 2 idx$1634))) (&& c$700 (= 51 (* 2 idx$1634))) (&& c$702 (= 52 (* 2 idx$1634))) (&& c$704 (= 53 (* 2 idx$1634))) (&& c$706 (= 54 (* 2 idx$1634))) (&& c$708 (= 55 (* 2 idx$1634))) (&& c$710 (= 56 (* 2 idx$1634))) (&& c$712 (= 57 (* 2 idx$1634))) (&& c$714 (= 58 (* 2 idx$1634))) (&& c$716 (= 59 (* 2 idx$1634))) (&& c$718 (= 60 (* 2 idx$1634))) (&& c$720 (= 61 (* 2 idx$1634))) (&& c$722 (= 62 (* 2 idx$1634))) (&& c$724 (= 63 (* 2 idx$1634)))) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16)) (bvmul (bv #xffc0 16) t148)) (bvmul (bv #x0040 16) (ite (|| (= 1 (+ 1 (* 2 idx$1634))) (&& c$602 (= 2 (+ 1 (* 2 idx$1634)))) (&& c$604 (= 3 (+ 1 (* 2 idx$1634)))) (&& c$606 (= 4 (+ 1 (* 2 idx$1634)))) (&& c$608 (= 5 (+ 1 (* 2 idx$1634)))) (&& c$610 (= 6 (+ 1 (* 2 idx$1634)))) (&& c$612 (= 7 (+ 1 (* 2 idx$1634)))) (&& c$614 (= 8 (+ 1 (* 2 idx$1634)))) (&& c$616 (= 9 (+ 1 (* 2 idx$1634)))) (&& c$618 (= 10 (+ 1 (* 2 idx$1634)))) (&& c$620 (= 11 (+ 1 (* 2 idx$1634)))) (&& c$622 (= 12 (+ 1 (* 2 idx$1634)))) (&& c$624 (= 13 (+ 1 (* 2 idx$1634)))) (&& c$626 (= 14 (+ 1 (* 2 idx$1634)))) (&& c$628 (= 15 (+ 1 (* 2 idx$1634)))) (&& c$630 (= 16 (+ 1 (* 2 idx$1634)))) (&& c$632 (= 17 (+ 1 (* 2 idx$1634)))) (&& c$634 (= 18 (+ 1 (* 2 idx$1634)))) (&& c$636 (= 19 (+ 1 (* 2 idx$1634)))) (&& c$638 (= 20 (+ 1 (* 2 idx$1634)))) (&& c$640 (= 21 (+ 1 (* 2 idx$1634)))) (&& c$642 (= 22 (+ 1 (* 2 idx$1634)))) (&& c$644 (= 23 (+ 1 (* 2 idx$1634)))) (&& c$646 (= 24 (+ 1 (* 2 idx$1634)))) (&& c$648 (= 25 (+ 1 (* 2 idx$1634)))) (&& c$650 (= 26 (+ 1 (* 2 idx$1634)))) (&& c$652 (= 27 (+ 1 (* 2 idx$1634)))) (&& c$654 (= 28 (+ 1 (* 2 idx$1634)))) (&& c$656 (= 29 (+ 1 (* 2 idx$1634)))) (&& c$658 (= 30 (+ 1 (* 2 idx$1634)))) (&& c$660 (= 31 (+ 1 (* 2 idx$1634)))) (&& c$662 (= 32 (+ 1 (* 2 idx$1634)))) (&& c$664 (= 33 (+ 1 (* 2 idx$1634)))) (&& c$666 (= 34 (+ 1 (* 2 idx$1634)))) (&& c$668 (= 35 (+ 1 (* 2 idx$1634)))) (&& c$670 (= 36 (+ 1 (* 2 idx$1634)))) (&& c$672 (= 37 (+ 1 (* 2 idx$1634)))) (&& c$674 (= 38 (+ 1 (* 2 idx$1634)))) (&& c$676 (= 39 (+ 1 (* 2 idx$1634)))) (&& c$678 (= 40 (+ 1 (* 2 idx$1634)))) (&& c$680 (= 41 (+ 1 (* 2 idx$1634)))) (&& c$682 (= 42 (+ 1 (* 2 idx$1634)))) (&& c$684 (= 43 (+ 1 (* 2 idx$1634)))) (&& c$686 (= 44 (+ 1 (* 2 idx$1634)))) (&& c$688 (= 45 (+ 1 (* 2 idx$1634)))) (&& c$690 (= 46 (+ 1 (* 2 idx$1634)))) (&& c$692 (= 47 (+ 1 (* 2 idx$1634)))) (&& c$694 (= 48 (+ 1 (* 2 idx$1634)))) (&& c$696 (= 49 (+ 1 (* 2 idx$1634)))) (&& c$698 (= 50 (+ 1 (* 2 idx$1634)))) (&& c$700 (= 51 (+ 1 (* 2 idx$1634)))) (&& c$702 (= 52 (+ 1 (* 2 idx$1634)))) (&& c$704 (= 53 (+ 1 (* 2 idx$1634)))) (&& c$706 (= 54 (+ 1 (* 2 idx$1634)))) (&& c$708 (= 55 (+ 1 (* 2 idx$1634)))) (&& c$710 (= 56 (+ 1 (* 2 idx$1634)))) (&& c$712 (= 57 (+ 1 (* 2 idx$1634)))) (&& c$714 (= 58 (+ 1 (* 2 idx$1634)))) (&& c$716 (= 59 (+ 1 (* 2 idx$1634)))) (&& c$718 (= 60 (+ 1 (* 2 idx$1634)))) (&& c$720 (= 61 (+ 1 (* 2 idx$1634)))) (&& c$722 (= 62 (+ 1 (* 2 idx$1634)))) (&& c$724 (= 63 (+ 1 (* 2 idx$1634))))) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16)) (bvmul (bv #xffc0 16) t148)))) (bitvector 32)) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bvmul (sign-extend input1_multiplier (bitvector 32)) (ite c$1637 (sign-extend (bvadd (ite (|| (= 1 (* 2 idx$1636)) (&& c$602 (= 2 (* 2 idx$1636))) (&& c$604 (= 3 (* 2 idx$1636))) (&& c$606 (= 4 (* 2 idx$1636))) (&& c$608 (= 5 (* 2 idx$1636))) (&& c$610 (= 6 (* 2 idx$1636))) (&& c$612 (= 7 (* 2 idx$1636))) (&& c$614 (= 8 (* 2 idx$1636))) (&& c$616 (= 9 (* 2 idx$1636))) (&& c$618 (= 10 (* 2 idx$1636))) (&& c$620 (= 11 (* 2 idx$1636))) (&& c$622 (= 12 (* 2 idx$1636))) (&& c$624 (= 13 (* 2 idx$1636))) (&& c$626 (= 14 (* 2 idx$1636))) (&& c$628 (= 15 (* 2 idx$1636))) (&& c$630 (= 16 (* 2 idx$1636))) (&& c$632 (= 17 (* 2 idx$1636))) (&& c$634 (= 18 (* 2 idx$1636))) (&& c$636 (= 19 (* 2 idx$1636))) (&& c$638 (= 20 (* 2 idx$1636))) (&& c$640 (= 21 (* 2 idx$1636))) (&& c$642 (= 22 (* 2 idx$1636))) (&& c$644 (= 23 (* 2 idx$1636))) (&& c$646 (= 24 (* 2 idx$1636))) (&& c$648 (= 25 (* 2 idx$1636))) (&& c$650 (= 26 (* 2 idx$1636))) (&& c$652 (= 27 (* 2 idx$1636))) (&& c$654 (= 28 (* 2 idx$1636))) (&& c$656 (= 29 (* 2 idx$1636))) (&& c$658 (= 30 (* 2 idx$1636))) (&& c$660 (= 31 (* 2 idx$1636))) (&& c$662 (= 32 (* 2 idx$1636))) (&& c$664 (= 33 (* 2 idx$1636))) (&& c$666 (= 34 (* 2 idx$1636))) (&& c$668 (= 35 (* 2 idx$1636))) (&& c$670 (= 36 (* 2 idx$1636))) (&& c$672 (= 37 (* 2 idx$1636))) (&& c$674 (= 38 (* 2 idx$1636))) (&& c$676 (= 39 (* 2 idx$1636))) (&& c$678 (= 40 (* 2 idx$1636))) (&& c$680 (= 41 (* 2 idx$1636))) (&& c$682 (= 42 (* 2 idx$1636))) (&& c$684 (= 43 (* 2 idx$1636))) (&& c$686 (= 44 (* 2 idx$1636))) (&& c$688 (= 45 (* 2 idx$1636))) (&& c$690 (= 46 (* 2 idx$1636))) (&& c$692 (= 47 (* 2 idx$1636))) (&& c$694 (= 48 (* 2 idx$1636))) (&& c$696 (= 49 (* 2 idx$1636))) (&& c$698 (= 50 (* 2 idx$1636))) (&& c$700 (= 51 (* 2 idx$1636))) (&& c$702 (= 52 (* 2 idx$1636))) (&& c$704 (= 53 (* 2 idx$1636))) (&& c$706 (= 54 (* 2 idx$1636))) (&& c$708 (= 55 (* 2 idx$1636))) (&& c$710 (= 56 (* 2 idx$1636))) (&& c$712 (= 57 (* 2 idx$1636))) (&& c$714 (= 58 (* 2 idx$1636))) (&& c$716 (= 59 (* 2 idx$1636))) (&& c$718 (= 60 (* 2 idx$1636))) (&& c$720 (= 61 (* 2 idx$1636))) (&& c$722 (= 62 (* 2 idx$1636))) (&& c$724 (= 63 (* 2 idx$1636)))) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16)) (bvmul (bv #xffc0 16) t148)) (bvmul (bv #x0040 16) (ite (|| (= 1 (+ 1 (* 2 idx$1636))) (&& c$602 (= 2 (+ 1 (* 2 idx$1636)))) (&& c$604 (= 3 (+ 1 (* 2 idx$1636)))) (&& c$606 (= 4 (+ 1 (* 2 idx$1636)))) (&& c$608 (= 5 (+ 1 (* 2 idx$1636)))) (&& c$610 (= 6 (+ 1 (* 2 idx$1636)))) (&& c$612 (= 7 (+ 1 (* 2 idx$1636)))) (&& c$614 (= 8 (+ 1 (* 2 idx$1636)))) (&& c$616 (= 9 (+ 1 (* 2 idx$1636)))) (&& c$618 (= 10 (+ 1 (* 2 idx$1636)))) (&& c$620 (= 11 (+ 1 (* 2 idx$1636)))) (&& c$622 (= 12 (+ 1 (* 2 idx$1636)))) (&& c$624 (= 13 (+ 1 (* 2 idx$1636)))) (&& c$626 (= 14 (+ 1 (* 2 idx$1636)))) (&& c$628 (= 15 (+ 1 (* 2 idx$1636)))) (&& c$630 (= 16 (+ 1 (* 2 idx$1636)))) (&& c$632 (= 17 (+ 1 (* 2 idx$1636)))) (&& c$634 (= 18 (+ 1 (* 2 idx$1636)))) (&& c$636 (= 19 (+ 1 (* 2 idx$1636)))) (&& c$638 (= 20 (+ 1 (* 2 idx$1636)))) (&& c$640 (= 21 (+ 1 (* 2 idx$1636)))) (&& c$642 (= 22 (+ 1 (* 2 idx$1636)))) (&& c$644 (= 23 (+ 1 (* 2 idx$1636)))) (&& c$646 (= 24 (+ 1 (* 2 idx$1636)))) (&& c$648 (= 25 (+ 1 (* 2 idx$1636)))) (&& c$650 (= 26 (+ 1 (* 2 idx$1636)))) (&& c$652 (= 27 (+ 1 (* 2 idx$1636)))) (&& c$654 (= 28 (+ 1 (* 2 idx$1636)))) (&& c$656 (= 29 (+ 1 (* 2 idx$1636)))) (&& c$658 (= 30 (+ 1 (* 2 idx$1636)))) (&& c$660 (= 31 (+ 1 (* 2 idx$1636)))) (&& c$662 (= 32 (+ 1 (* 2 idx$1636)))) (&& c$664 (= 33 (+ 1 (* 2 idx$1636)))) (&& c$666 (= 34 (+ 1 (* 2 idx$1636)))) (&& c$668 (= 35 (+ 1 (* 2 idx$1636)))) (&& c$670 (= 36 (+ 1 (* 2 idx$1636)))) (&& c$672 (= 37 (+ 1 (* 2 idx$1636)))) (&& c$674 (= 38 (+ 1 (* 2 idx$1636)))) (&& c$676 (= 39 (+ 1 (* 2 idx$1636)))) (&& c$678 (= 40 (+ 1 (* 2 idx$1636)))) (&& c$680 (= 41 (+ 1 (* 2 idx$1636)))) (&& c$682 (= 42 (+ 1 (* 2 idx$1636)))) (&& c$684 (= 43 (+ 1 (* 2 idx$1636)))) (&& c$686 (= 44 (+ 1 (* 2 idx$1636)))) (&& c$688 (= 45 (+ 1 (* 2 idx$1636)))) (&& c$690 (= 46 (+ 1 (* 2 idx$1636)))) (&& c$692 (= 47 (+ 1 (* 2 idx$1636)))) (&& c$694 (= 48 (+ 1 (* 2 idx$1636)))) (&& c$696 (= 49 (+ 1 (* 2 idx$1636)))) (&& c$698 (= 50 (+ 1 (* 2 idx$1636)))) (&& c$700 (= 51 (+ 1 (* 2 idx$1636)))) (&& c$702 (= 52 (+ 1 (* 2 idx$1636)))) (&& c$704 (= 53 (+ 1 (* 2 idx$1636)))) (&& c$706 (= 54 (+ 1 (* 2 idx$1636)))) (&& c$708 (= 55 (+ 1 (* 2 idx$1636)))) (&& c$710 (= 56 (+ 1 (* 2 idx$1636)))) (&& c$712 (= 57 (+ 1 (* 2 idx$1636)))) (&& c$714 (= 58 (+ 1 (* 2 idx$1636)))) (&& c$716 (= 59 (+ 1 (* 2 idx$1636)))) (&& c$718 (= 60 (+ 1 (* 2 idx$1636)))) (&& c$720 (= 61 (+ 1 (* 2 idx$1636)))) (&& c$722 (= 62 (+ 1 (* 2 idx$1636)))) (&& c$724 (= 63 (+ 1 (* 2 idx$1636))))) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16)) (bvmul (bv #xffc0 16) t148)))) (bitvector 32)) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))))) (bv #x00000010 32)) (bvand (bv #x00000001 32) (bvashr (bvadd (ite c$1635 (sign-extend (bvadd (ite (|| (= 1 (* 2 idx$1634)) (&& c$602 (= 2 (* 2 idx$1634))) (&& c$604 (= 3 (* 2 idx$1634))) (&& c$606 (= 4 (* 2 idx$1634))) (&& c$608 (= 5 (* 2 idx$1634))) (&& c$610 (= 6 (* 2 idx$1634))) (&& c$612 (= 7 (* 2 idx$1634))) (&& c$614 (= 8 (* 2 idx$1634))) (&& c$616 (= 9 (* 2 idx$1634))) (&& c$618 (= 10 (* 2 idx$1634))) (&& c$620 (= 11 (* 2 idx$1634))) (&& c$622 (= 12 (* 2 idx$1634))) (&& c$624 (= 13 (* 2 idx$1634))) (&& c$626 (= 14 (* 2 idx$1634))) (&& c$628 (= 15 (* 2 idx$1634))) (&& c$630 (= 16 (* 2 idx$1634))) (&& c$632 (= 17 (* 2 idx$1634))) (&& c$634 (= 18 (* 2 idx$1634))) (&& c$636 (= 19 (* 2 idx$1634))) (&& c$638 (= 20 (* 2 idx$1634))) (&& c$640 (= 21 (* 2 idx$1634))) (&& c$642 (= 22 (* 2 idx$1634))) (&& c$644 (= 23 (* 2 idx$1634))) (&& c$646 (= 24 (* 2 idx$1634))) (&& c$648 (= 25 (* 2 idx$1634))) (&& c$650 (= 26 (* 2 idx$1634))) (&& c$652 (= 27 (* 2 idx$1634))) (&& c$654 (= 28 (* 2 idx$1634))) (&& c$656 (= 29 (* 2 idx$1634))) (&& c$658 (= 30 (* 2 idx$1634))) (&& c$660 (= 31 (* 2 idx$1634))) (&& c$662 (= 32 (* 2 idx$1634))) (&& c$664 (= 33 (* 2 idx$1634))) (&& c$666 (= 34 (* 2 idx$1634))) (&& c$668 (= 35 (* 2 idx$1634))) (&& c$670 (= 36 (* 2 idx$1634))) (&& c$672 (= 37 (* 2 idx$1634))) (&& c$674 (= 38 (* 2 idx$1634))) (&& c$676 (= 39 (* 2 idx$1634))) (&& c$678 (= 40 (* 2 idx$1634))) (&& c$680 (= 41 (* 2 idx$1634))) (&& c$682 (= 42 (* 2 idx$1634))) (&& c$684 (= 43 (* 2 idx$1634))) (&& c$686 (= 44 (* 2 idx$1634))) (&& c$688 (= 45 (* 2 idx$1634))) (&& c$690 (= 46 (* 2 idx$1634))) (&& c$692 (= 47 (* 2 idx$1634))) (&& c$694 (= 48 (* 2 idx$1634))) (&& c$696 (= 49 (* 2 idx$1634))) (&& c$698 (= 50 (* 2 idx$1634))) (&& c$700 (= 51 (* 2 idx$1634))) (&& c$702 (= 52 (* 2 idx$1634))) (&& c$704 (= 53 (* 2 idx$1634))) (&& c$706 (= 54 (* 2 idx$1634))) (&& c$708 (= 55 (* 2 idx$1634))) (&& c$710 (= 56 (* 2 idx$1634))) (&& c$712 (= 57 (* 2 idx$1634))) (&& c$714 (= 58 (* 2 idx$1634))) (&& c$716 (= 59 (* 2 idx$1634))) (&& c$718 (= 60 (* 2 idx$1634))) (&& c$720 (= 61 (* 2 idx$1634))) (&& c$722 (= 62 (* 2 idx$1634))) (&& c$724 (= 63 (* 2 idx$1634)))) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16)) (bvmul (bv #xffc0 16) t148)) (bvmul (bv #x0040 16) (ite (|| (= 1 (+ 1 (* 2 idx$1634))) (&& c$602 (= 2 (+ 1 (* 2 idx$1634)))) (&& c$604 (= 3 (+ 1 (* 2 idx$1634)))) (&& c$606 (= 4 (+ 1 (* 2 idx$1634)))) (&& c$608 (= 5 (+ 1 (* 2 idx$1634)))) (&& c$610 (= 6 (+ 1 (* 2 idx$1634)))) (&& c$612 (= 7 (+ 1 (* 2 idx$1634)))) (&& c$614 (= 8 (+ 1 (* 2 idx$1634)))) (&& c$616 (= 9 (+ 1 (* 2 idx$1634)))) (&& c$618 (= 10 (+ 1 (* 2 idx$1634)))) (&& c$620 (= 11 (+ 1 (* 2 idx$1634)))) (&& c$622 (= 12 (+ 1 (* 2 idx$1634)))) (&& c$624 (= 13 (+ 1 (* 2 idx$1634)))) (&& c$626 (= 14 (+ 1 (* 2 idx$1634)))) (&& c$628 (= 15 (+ 1 (* 2 idx$1634)))) (&& c$630 (= 16 (+ 1 (* 2 idx$1634)))) (&& c$632 (= 17 (+ 1 (* 2 idx$1634)))) (&& c$634 (= 18 (+ 1 (* 2 idx$1634)))) (&& c$636 (= 19 (+ 1 (* 2 idx$1634)))) (&& c$638 (= 20 (+ 1 (* 2 idx$1634)))) (&& c$640 (= 21 (+ 1 (* 2 idx$1634)))) (&& c$642 (= 22 (+ 1 (* 2 idx$1634)))) (&& c$644 (= 23 (+ 1 (* 2 idx$1634)))) (&& c$646 (= 24 (+ 1 (* 2 idx$1634)))) (&& c$648 (= 25 (+ 1 (* 2 idx$1634)))) (&& c$650 (= 26 (+ 1 (* 2 idx$1634)))) (&& c$652 (= 27 (+ 1 (* 2 idx$1634)))) (&& c$654 (= 28 (+ 1 (* 2 idx$1634)))) (&& c$656 (= 29 (+ 1 (* 2 idx$1634)))) (&& c$658 (= 30 (+ 1 (* 2 idx$1634)))) (&& c$660 (= 31 (+ 1 (* 2 idx$1634)))) (&& c$662 (= 32 (+ 1 (* 2 idx$1634)))) (&& c$664 (= 33 (+ 1 (* 2 idx$1634)))) (&& c$666 (= 34 (+ 1 (* 2 idx$1634)))) (&& c$668 (= 35 (+ 1 (* 2 idx$1634)))) (&& c$670 (= 36 (+ 1 (* 2 idx$1634)))) (&& c$672 (= 37 (+ 1 (* 2 idx$1634)))) (&& c$674 (= 38 (+ 1 (* 2 idx$1634)))) (&& c$676 (= 39 (+ 1 (* 2 idx$1634)))) (&& c$678 (= 40 (+ 1 (* 2 idx$1634)))) (&& c$680 (= 41 (+ 1 (* 2 idx$1634)))) (&& c$682 (= 42 (+ 1 (* 2 idx$1634)))) (&& c$684 (= 43 (+ 1 (* 2 idx$1634)))) (&& c$686 (= 44 (+ 1 (* 2 idx$1634)))) (&& c$688 (= 45 (+ 1 (* 2 idx$1634)))) (&& c$690 (= 46 (+ 1 (* 2 idx$1634)))) (&& c$692 (= 47 (+ 1 (* 2 idx$1634)))) (&& c$694 (= 48 (+ 1 (* 2 idx$1634)))) (&& c$696 (= 49 (+ 1 (* 2 idx$1634)))) (&& c$698 (= 50 (+ 1 (* 2 idx$1634)))) (&& c$700 (= 51 (+ 1 (* 2 idx$1634)))) (&& c$702 (= 52 (+ 1 (* 2 idx$1634)))) (&& c$704 (= 53 (+ 1 (* 2 idx$1634)))) (&& c$706 (= 54 (+ 1 (* 2 idx$1634)))) (&& c$708 (= 55 (+ 1 (* 2 idx$1634)))) (&& c$710 (= 56 (+ 1 (* 2 idx$1634)))) (&& c$712 (= 57 (+ 1 (* 2 idx$1634)))) (&& c$714 (= 58 (+ 1 (* 2 idx$1634)))) (&& c$716 (= 59 (+ 1 (* 2 idx$1634)))) (&& c$718 (= 60 (+ 1 (* 2 idx$1634)))) (&& c$720 (= 61 (+ 1 (* 2 idx$1634)))) (&& c$722 (= 62 (+ 1 (* 2 idx$1634)))) (&& c$724 (= 63 (+ 1 (* 2 idx$1634))))) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16)) (bvmul (bv #xffc0 16) t148)))) (bitvector 32)) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bvmul (sign-extend input1_multiplier (bitvector 32)) (ite c$1637 (sign-extend (bvadd (ite (|| (= 1 (* 2 idx$1636)) (&& c$602 (= 2 (* 2 idx$1636))) (&& c$604 (= 3 (* 2 idx$1636))) (&& c$606 (= 4 (* 2 idx$1636))) (&& c$608 (= 5 (* 2 idx$1636))) (&& c$610 (= 6 (* 2 idx$1636))) (&& c$612 (= 7 (* 2 idx$1636))) (&& c$614 (= 8 (* 2 idx$1636))) (&& c$616 (= 9 (* 2 idx$1636))) (&& c$618 (= 10 (* 2 idx$1636))) (&& c$620 (= 11 (* 2 idx$1636))) (&& c$622 (= 12 (* 2 idx$1636))) (&& c$624 (= 13 (* 2 idx$1636))) (&& c$626 (= 14 (* 2 idx$1636))) (&& c$628 (= 15 (* 2 idx$1636))) (&& c$630 (= 16 (* 2 idx$1636))) (&& c$632 (= 17 (* 2 idx$1636))) (&& c$634 (= 18 (* 2 idx$1636))) (&& c$636 (= 19 (* 2 idx$1636))) (&& c$638 (= 20 (* 2 idx$1636))) (&& c$640 (= 21 (* 2 idx$1636))) (&& c$642 (= 22 (* 2 idx$1636))) (&& c$644 (= 23 (* 2 idx$1636))) (&& c$646 (= 24 (* 2 idx$1636))) (&& c$648 (= 25 (* 2 idx$1636))) (&& c$650 (= 26 (* 2 idx$1636))) (&& c$652 (= 27 (* 2 idx$1636))) (&& c$654 (= 28 (* 2 idx$1636))) (&& c$656 (= 29 (* 2 idx$1636))) (&& c$658 (= 30 (* 2 idx$1636))) (&& c$660 (= 31 (* 2 idx$1636))) (&& c$662 (= 32 (* 2 idx$1636))) (&& c$664 (= 33 (* 2 idx$1636))) (&& c$666 (= 34 (* 2 idx$1636))) (&& c$668 (= 35 (* 2 idx$1636))) (&& c$670 (= 36 (* 2 idx$1636))) (&& c$672 (= 37 (* 2 idx$1636))) (&& c$674 (= 38 (* 2 idx$1636))) (&& c$676 (= 39 (* 2 idx$1636))) (&& c$678 (= 40 (* 2 idx$1636))) (&& c$680 (= 41 (* 2 idx$1636))) (&& c$682 (= 42 (* 2 idx$1636))) (&& c$684 (= 43 (* 2 idx$1636))) (&& c$686 (= 44 (* 2 idx$1636))) (&& c$688 (= 45 (* 2 idx$1636))) (&& c$690 (= 46 (* 2 idx$1636))) (&& c$692 (= 47 (* 2 idx$1636))) (&& c$694 (= 48 (* 2 idx$1636))) (&& c$696 (= 49 (* 2 idx$1636))) (&& c$698 (= 50 (* 2 idx$1636))) (&& c$700 (= 51 (* 2 idx$1636))) (&& c$702 (= 52 (* 2 idx$1636))) (&& c$704 (= 53 (* 2 idx$1636))) (&& c$706 (= 54 (* 2 idx$1636))) (&& c$708 (= 55 (* 2 idx$1636))) (&& c$710 (= 56 (* 2 idx$1636))) (&& c$712 (= 57 (* 2 idx$1636))) (&& c$714 (= 58 (* 2 idx$1636))) (&& c$716 (= 59 (* 2 idx$1636))) (&& c$718 (= 60 (* 2 idx$1636))) (&& c$720 (= 61 (* 2 idx$1636))) (&& c$722 (= 62 (* 2 idx$1636))) (&& c$724 (= 63 (* 2 idx$1636)))) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16)) (bvmul (bv #xffc0 16) t148)) (bvmul (bv #x0040 16) (ite (|| (= 1 (+ 1 (* 2 idx$1636))) (&& c$602 (= 2 (+ 1 (* 2 idx$1636)))) (&& c$604 (= 3 (+ 1 (* 2 idx$1636)))) (&& c$606 (= 4 (+ 1 (* 2 idx$1636)))) (&& c$608 (= 5 (+ 1 (* 2 idx$1636)))) (&& c$610 (= 6 (+ 1 (* 2 idx$1636)))) (&& c$612 (= 7 (+ 1 (* 2 idx$1636)))) (&& c$614 (= 8 (+ 1 (* 2 idx$1636)))) (&& c$616 (= 9 (+ 1 (* 2 idx$1636)))) (&& c$618 (= 10 (+ 1 (* 2 idx$1636)))) (&& c$620 (= 11 (+ 1 (* 2 idx$1636)))) (&& c$622 (= 12 (+ 1 (* 2 idx$1636)))) (&& c$624 (= 13 (+ 1 (* 2 idx$1636)))) (&& c$626 (= 14 (+ 1 (* 2 idx$1636)))) (&& c$628 (= 15 (+ 1 (* 2 idx$1636)))) (&& c$630 (= 16 (+ 1 (* 2 idx$1636)))) (&& c$632 (= 17 (+ 1 (* 2 idx$1636)))) (&& c$634 (= 18 (+ 1 (* 2 idx$1636)))) (&& c$636 (= 19 (+ 1 (* 2 idx$1636)))) (&& c$638 (= 20 (+ 1 (* 2 idx$1636)))) (&& c$640 (= 21 (+ 1 (* 2 idx$1636)))) (&& c$642 (= 22 (+ 1 (* 2 idx$1636)))) (&& c$644 (= 23 (+ 1 (* 2 idx$1636)))) (&& c$646 (= 24 (+ 1 (* 2 idx$1636)))) (&& c$648 (= 25 (+ 1 (* 2 idx$1636)))) (&& c$650 (= 26 (+ 1 (* 2 idx$1636)))) (&& c$652 (= 27 (+ 1 (* 2 idx$1636)))) (&& c$654 (= 28 (+ 1 (* 2 idx$1636)))) (&& c$656 (= 29 (+ 1 (* 2 idx$1636)))) (&& c$658 (= 30 (+ 1 (* 2 idx$1636)))) (&& c$660 (= 31 (+ 1 (* 2 idx$1636)))) (&& c$662 (= 32 (+ 1 (* 2 idx$1636)))) (&& c$664 (= 33 (+ 1 (* 2 idx$1636)))) (&& c$666 (= 34 (+ 1 (* 2 idx$1636)))) (&& c$668 (= 35 (+ 1 (* 2 idx$1636)))) (&& c$670 (= 36 (+ 1 (* 2 idx$1636)))) (&& c$672 (= 37 (+ 1 (* 2 idx$1636)))) (&& c$674 (= 38 (+ 1 (* 2 idx$1636)))) (&& c$676 (= 39 (+ 1 (* 2 idx$1636)))) (&& c$678 (= 40 (+ 1 (* 2 idx$1636)))) (&& c$680 (= 41 (+ 1 (* 2 idx$1636)))) (&& c$682 (= 42 (+ 1 (* 2 idx$1636)))) (&& c$684 (= 43 (+ 1 (* 2 idx$1636)))) (&& c$686 (= 44 (+ 1 (* 2 idx$1636)))) (&& c$688 (= 45 (+ 1 (* 2 idx$1636)))) (&& c$690 (= 46 (+ 1 (* 2 idx$1636)))) (&& c$692 (= 47 (+ 1 (* 2 idx$1636)))) (&& c$694 (= 48 (+ 1 (* 2 idx$1636)))) (&& c$696 (= 49 (+ 1 (* 2 idx$1636)))) (&& c$698 (= 50 (+ 1 (* 2 idx$1636)))) (&& c$700 (= 51 (+ 1 (* 2 idx$1636)))) (&& c$702 (= 52 (+ 1 (* 2 idx$1636)))) (&& c$704 (= 53 (+ 1 (* 2 idx$1636)))) (&& c$706 (= 54 (+ 1 (* 2 idx$1636)))) (&& c$708 (= 55 (+ 1 (* 2 idx$1636)))) (&& c$710 (= 56 (+ 1 (* 2 idx$1636)))) (&& c$712 (= 57 (+ 1 (* 2 idx$1636)))) (&& c$714 (= 58 (+ 1 (* 2 idx$1636)))) (&& c$716 (= 59 (+ 1 (* 2 idx$1636)))) (&& c$718 (= 60 (+ 1 (* 2 idx$1636)))) (&& c$720 (= 61 (+ 1 (* 2 idx$1636)))) (&& c$722 (= 62 (+ 1 (* 2 idx$1636)))) (&& c$724 (= 63 (+ 1 (* 2 idx$1636))))) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16)) (bvmul (bv #xffc0 16) t148)))) (bitvector 32)) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))))) (bv #x0000000f 32)))) (bv #xffff8000 32)) (bv #x8000 16) (ite (bvslt (bv #x00007fff 32) (bvadd (bvashr (bvadd (ite c$1635 (sign-extend (bvadd (ite (|| (= 1 (* 2 idx$1634)) (&& c$602 (= 2 (* 2 idx$1634))) (&& c$604 (= 3 (* 2 idx$1634))) (&& c$606 (= 4 (* 2 idx$1634))) (&& c$608 (= 5 (* 2 idx$1634))) (&& c$610 (= 6 (* 2 idx$1634))) (&& c$612 (= 7 (* 2 idx$1634))) (&& c$614 (= 8 (* 2 idx$1634))) (&& c$616 (= 9 (* 2 idx$1634))) (&& c$618 (= 10 (* 2 idx$1634))) (&& c$620 (= 11 (* 2 idx$1634))) (&& c$622 (= 12 (* 2 idx$1634))) (&& c$624 (= 13 (* 2 idx$1634))) (&& c$626 (= 14 (* 2 idx$1634))) (&& c$628 (= 15 (* 2 idx$1634))) (&& c$630 (= 16 (* 2 idx$1634))) (&& c$632 (= 17 (* 2 idx$1634))) (&& c$634 (= 18 (* 2 idx$1634))) (&& c$636 (= 19 (* 2 idx$1634))) (&& c$638 (= 20 (* 2 idx$1634))) (&& c$640 (= 21 (* 2 idx$1634))) (&& c$642 (= 22 (* 2 idx$1634))) (&& c$644 (= 23 (* 2 idx$1634))) (&& c$646 (= 24 (* 2 idx$1634))) (&& c$648 (= 25 (* 2 idx$1634))) (&& c$650 (= 26 (* 2 idx$1634))) (&& c$652 (= 27 (* 2 idx$1634))) (&& c$654 (= 28 (* 2 idx$1634))) (&& c$656 (= 29 (* 2 idx$1634))) (&& c$658 (= 30 (* 2 idx$1634))) (&& c$660 (= 31 (* 2 idx$1634))) (&& c$662 (= 32 (* 2 idx$1634))) (&& c$664 (= 33 (* 2 idx$1634))) (&& c$666 (= 34 (* 2 idx$1634))) (&& c$668 (= 35 (* 2 idx$1634))) (&& c$670 (= 36 (* 2 idx$1634))) (&& c$672 (= 37 (* 2 idx$1634))) (&& c$674 (= 38 (* 2 idx$1634))) (&& c$676 (= 39 (* 2 idx$1634))) (&& c$678 (= 40 (* 2 idx$1634))) (&& c$680 (= 41 (* 2 idx$1634))) (&& c$682 (= 42 (* 2 idx$1634))) (&& c$684 (= 43 (* 2 idx$1634))) (&& c$686 (= 44 (* 2 idx$1634))) (&& c$688 (= 45 (* 2 idx$1634))) (&& c$690 (= 46 (* 2 idx$1634))) (&& c$692 (= 47 (* 2 idx$1634))) (&& c$694 (= 48 (* 2 idx$1634))) (&& c$696 (= 49 (* 2 idx$1634))) (&& c$698 (= 50 (* 2 idx$1634))) (&& c$700 (= 51 (* 2 idx$1634))) (&& c$702 (= 52 (* 2 idx$1634))) (&& c$704 (= 53 (* 2 idx$1634))) (&& c$706 (= 54 (* 2 idx$1634))) (&& c$708 (= 55 (* 2 idx$1634))) (&& c$710 (= 56 (* 2 idx$1634))) (&& c$712 (= 57 (* 2 idx$1634))) (&& c$714 (= 58 (* 2 idx$1634))) (&& c$716 (= 59 (* 2 idx$1634))) (&& c$718 (= 60 (* 2 idx$1634))) (&& c$720 (= 61 (* 2 idx$1634))) (&& c$722 (= 62 (* 2 idx$1634))) (&& c$724 (= 63 (* 2 idx$1634)))) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16)) (bvmul (bv #xffc0 16) t148)) (bvmul (bv #x0040 16) (ite (|| (= 1 (+ 1 (* 2 idx$1634))) (&& c$602 (= 2 (+ 1 (* 2 idx$1634)))) (&& c$604 (= 3 (+ 1 (* 2 idx$1634)))) (&& c$606 (= 4 (+ 1 (* 2 idx$1634)))) (&& c$608 (= 5 (+ 1 (* 2 idx$1634)))) (&& c$610 (= 6 (+ 1 (* 2 idx$1634)))) (&& c$612 (= 7 (+ 1 (* 2 idx$1634)))) (&& c$614 (= 8 (+ 1 (* 2 idx$1634)))) (&& c$616 (= 9 (+ 1 (* 2 idx$1634)))) (&& c$618 (= 10 (+ 1 (* 2 idx$1634)))) (&& c$620 (= 11 (+ 1 (* 2 idx$1634)))) (&& c$622 (= 12 (+ 1 (* 2 idx$1634)))) (&& c$624 (= 13 (+ 1 (* 2 idx$1634)))) (&& c$626 (= 14 (+ 1 (* 2 idx$1634)))) (&& c$628 (= 15 (+ 1 (* 2 idx$1634)))) (&& c$630 (= 16 (+ 1 (* 2 idx$1634)))) (&& c$632 (= 17 (+ 1 (* 2 idx$1634)))) (&& c$634 (= 18 (+ 1 (* 2 idx$1634)))) (&& c$636 (= 19 (+ 1 (* 2 idx$1634)))) (&& c$638 (= 20 (+ 1 (* 2 idx$1634)))) (&& c$640 (= 21 (+ 1 (* 2 idx$1634)))) (&& c$642 (= 22 (+ 1 (* 2 idx$1634)))) (&& c$644 (= 23 (+ 1 (* 2 idx$1634)))) (&& c$646 (= 24 (+ 1 (* 2 idx$1634)))) (&& c$648 (= 25 (+ 1 (* 2 idx$1634)))) (&& c$650 (= 26 (+ 1 (* 2 idx$1634)))) (&& c$652 (= 27 (+ 1 (* 2 idx$1634)))) (&& c$654 (= 28 (+ 1 (* 2 idx$1634)))) (&& c$656 (= 29 (+ 1 (* 2 idx$1634)))) (&& c$658 (= 30 (+ 1 (* 2 idx$1634)))) (&& c$660 (= 31 (+ 1 (* 2 idx$1634)))) (&& c$662 (= 32 (+ 1 (* 2 idx$1634)))) (&& c$664 (= 33 (+ 1 (* 2 idx$1634)))) (&& c$666 (= 34 (+ 1 (* 2 idx$1634)))) (&& c$668 (= 35 (+ 1 (* 2 idx$1634)))) (&& c$670 (= 36 (+ 1 (* 2 idx$1634)))) (&& c$672 (= 37 (+ 1 (* 2 idx$1634)))) (&& c$674 (= 38 (+ 1 (* 2 idx$1634)))) (&& c$676 (= 39 (+ 1 (* 2 idx$1634)))) (&& c$678 (= 40 (+ 1 (* 2 idx$1634)))) (&& c$680 (= 41 (+ 1 (* 2 idx$1634)))) (&& c$682 (= 42 (+ 1 (* 2 idx$1634)))) (&& c$684 (= 43 (+ 1 (* 2 idx$1634)))) (&& c$686 (= 44 (+ 1 (* 2 idx$1634)))) (&& c$688 (= 45 (+ 1 (* 2 idx$1634)))) (&& c$690 (= 46 (+ 1 (* 2 idx$1634)))) (&& c$692 (= 47 (+ 1 (* 2 idx$1634)))) (&& c$694 (= 48 (+ 1 (* 2 idx$1634)))) (&& c$696 (= 49 (+ 1 (* 2 idx$1634)))) (&& c$698 (= 50 (+ 1 (* 2 idx$1634)))) (&& c$700 (= 51 (+ 1 (* 2 idx$1634)))) (&& c$702 (= 52 (+ 1 (* 2 idx$1634)))) (&& c$704 (= 53 (+ 1 (* 2 idx$1634)))) (&& c$706 (= 54 (+ 1 (* 2 idx$1634)))) (&& c$708 (= 55 (+ 1 (* 2 idx$1634)))) (&& c$710 (= 56 (+ 1 (* 2 idx$1634)))) (&& c$712 (= 57 (+ 1 (* 2 idx$1634)))) (&& c$714 (= 58 (+ 1 (* 2 idx$1634)))) (&& c$716 (= 59 (+ 1 (* 2 idx$1634)))) (&& c$718 (= 60 (+ 1 (* 2 idx$1634)))) (&& c$720 (= 61 (+ 1 (* 2 idx$1634)))) (&& c$722 (= 62 (+ 1 (* 2 idx$1634)))) (&& c$724 (= 63 (+ 1 (* 2 idx$1634))))) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16)) (bvmul (bv #xffc0 16) t148)))) (bitvector 32)) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bvmul (sign-extend input1_multiplier (bitvector 32)) (ite c$1637 (sign-extend (bvadd (ite (|| (= 1 (* 2 idx$1636)) (&& c$602 (= 2 (* 2 idx$1636))) (&& c$604 (= 3 (* 2 idx$1636))) (&& c$606 (= 4 (* 2 idx$1636))) (&& c$608 (= 5 (* 2 idx$1636))) (&& c$610 (= 6 (* 2 idx$1636))) (&& c$612 (= 7 (* 2 idx$1636))) (&& c$614 (= 8 (* 2 idx$1636))) (&& c$616 (= 9 (* 2 idx$1636))) (&& c$618 (= 10 (* 2 idx$1636))) (&& c$620 (= 11 (* 2 idx$1636))) (&& c$622 (= 12 (* 2 idx$1636))) (&& c$624 (= 13 (* 2 idx$1636))) (&& c$626 (= 14 (* 2 idx$1636))) (&& c$628 (= 15 (* 2 idx$1636))) (&& c$630 (= 16 (* 2 idx$1636))) (&& c$632 (= 17 (* 2 idx$1636))) (&& c$634 (= 18 (* 2 idx$1636))) (&& c$636 (= 19 (* 2 idx$1636))) (&& c$638 (= 20 (* 2 idx$1636))) (&& c$640 (= 21 (* 2 idx$1636))) (&& c$642 (= 22 (* 2 idx$1636))) (&& c$644 (= 23 (* 2 idx$1636))) (&& c$646 (= 24 (* 2 idx$1636))) (&& c$648 (= 25 (* 2 idx$1636))) (&& c$650 (= 26 (* 2 idx$1636))) (&& c$652 (= 27 (* 2 idx$1636))) (&& c$654 (= 28 (* 2 idx$1636))) (&& c$656 (= 29 (* 2 idx$1636))) (&& c$658 (= 30 (* 2 idx$1636))) (&& c$660 (= 31 (* 2 idx$1636))) (&& c$662 (= 32 (* 2 idx$1636))) (&& c$664 (= 33 (* 2 idx$1636))) (&& c$666 (= 34 (* 2 idx$1636))) (&& c$668 (= 35 (* 2 idx$1636))) (&& c$670 (= 36 (* 2 idx$1636))) (&& c$672 (= 37 (* 2 idx$1636))) (&& c$674 (= 38 (* 2 idx$1636))) (&& c$676 (= 39 (* 2 idx$1636))) (&& c$678 (= 40 (* 2 idx$1636))) (&& c$680 (= 41 (* 2 idx$1636))) (&& c$682 (= 42 (* 2 idx$1636))) (&& c$684 (= 43 (* 2 idx$1636))) (&& c$686 (= 44 (* 2 idx$1636))) (&& c$688 (= 45 (* 2 idx$1636))) (&& c$690 (= 46 (* 2 idx$1636))) (&& c$692 (= 47 (* 2 idx$1636))) (&& c$694 (= 48 (* 2 idx$1636))) (&& c$696 (= 49 (* 2 idx$1636))) (&& c$698 (= 50 (* 2 idx$1636))) (&& c$700 (= 51 (* 2 idx$1636))) (&& c$702 (= 52 (* 2 idx$1636))) (&& c$704 (= 53 (* 2 idx$1636))) (&& c$706 (= 54 (* 2 idx$1636))) (&& c$708 (= 55 (* 2 idx$1636))) (&& c$710 (= 56 (* 2 idx$1636))) (&& c$712 (= 57 (* 2 idx$1636))) (&& c$714 (= 58 (* 2 idx$1636))) (&& c$716 (= 59 (* 2 idx$1636))) (&& c$718 (= 60 (* 2 idx$1636))) (&& c$720 (= 61 (* 2 idx$1636))) (&& c$722 (= 62 (* 2 idx$1636))) (&& c$724 (= 63 (* 2 idx$1636)))) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16)) (bvmul (bv #xffc0 16) t148)) (bvmul (bv #x0040 16) (ite (|| (= 1 (+ 1 (* 2 idx$1636))) (&& c$602 (= 2 (+ 1 (* 2 idx$1636)))) (&& c$604 (= 3 (+ 1 (* 2 idx$1636)))) (&& c$606 (= 4 (+ 1 (* 2 idx$1636)))) (&& c$608 (= 5 (+ 1 (* 2 idx$1636)))) (&& c$610 (= 6 (+ 1 (* 2 idx$1636)))) (&& c$612 (= 7 (+ 1 (* 2 idx$1636)))) (&& c$614 (= 8 (+ 1 (* 2 idx$1636)))) (&& c$616 (= 9 (+ 1 (* 2 idx$1636)))) (&& c$618 (= 10 (+ 1 (* 2 idx$1636)))) (&& c$620 (= 11 (+ 1 (* 2 idx$1636)))) (&& c$622 (= 12 (+ 1 (* 2 idx$1636)))) (&& c$624 (= 13 (+ 1 (* 2 idx$1636)))) (&& c$626 (= 14 (+ 1 (* 2 idx$1636)))) (&& c$628 (= 15 (+ 1 (* 2 idx$1636)))) (&& c$630 (= 16 (+ 1 (* 2 idx$1636)))) (&& c$632 (= 17 (+ 1 (* 2 idx$1636)))) (&& c$634 (= 18 (+ 1 (* 2 idx$1636)))) (&& c$636 (= 19 (+ 1 (* 2 idx$1636)))) (&& c$638 (= 20 (+ 1 (* 2 idx$1636)))) (&& c$640 (= 21 (+ 1 (* 2 idx$1636)))) (&& c$642 (= 22 (+ 1 (* 2 idx$1636)))) (&& c$644 (= 23 (+ 1 (* 2 idx$1636)))) (&& c$646 (= 24 (+ 1 (* 2 idx$1636)))) (&& c$648 (= 25 (+ 1 (* 2 idx$1636)))) (&& c$650 (= 26 (+ 1 (* 2 idx$1636)))) (&& c$652 (= 27 (+ 1 (* 2 idx$1636)))) (&& c$654 (= 28 (+ 1 (* 2 idx$1636)))) (&& c$656 (= 29 (+ 1 (* 2 idx$1636)))) (&& c$658 (= 30 (+ 1 (* 2 idx$1636)))) (&& c$660 (= 31 (+ 1 (* 2 idx$1636)))) (&& c$662 (= 32 (+ 1 (* 2 idx$1636)))) (&& c$664 (= 33 (+ 1 (* 2 idx$1636)))) (&& c$666 (= 34 (+ 1 (* 2 idx$1636)))) (&& c$668 (= 35 (+ 1 (* 2 idx$1636)))) (&& c$670 (= 36 (+ 1 (* 2 idx$1636)))) (&& c$672 (= 37 (+ 1 (* 2 idx$1636)))) (&& c$674 (= 38 (+ 1 (* 2 idx$1636)))) (&& c$676 (= 39 (+ 1 (* 2 idx$1636)))) (&& c$678 (= 40 (+ 1 (* 2 idx$1636)))) (&& c$680 (= 41 (+ 1 (* 2 idx$1636)))) (&& c$682 (= 42 (+ 1 (* 2 idx$1636)))) (&& c$684 (= 43 (+ 1 (* 2 idx$1636)))) (&& c$686 (= 44 (+ 1 (* 2 idx$1636)))) (&& c$688 (= 45 (+ 1 (* 2 idx$1636)))) (&& c$690 (= 46 (+ 1 (* 2 idx$1636)))) (&& c$692 (= 47 (+ 1 (* 2 idx$1636)))) (&& c$694 (= 48 (+ 1 (* 2 idx$1636)))) (&& c$696 (= 49 (+ 1 (* 2 idx$1636)))) (&& c$698 (= 50 (+ 1 (* 2 idx$1636)))) (&& c$700 (= 51 (+ 1 (* 2 idx$1636)))) (&& c$702 (= 52 (+ 1 (* 2 idx$1636)))) (&& c$704 (= 53 (+ 1 (* 2 idx$1636)))) (&& c$706 (= 54 (+ 1 (* 2 idx$1636)))) (&& c$708 (= 55 (+ 1 (* 2 idx$1636)))) (&& c$710 (= 56 (+ 1 (* 2 idx$1636)))) (&& c$712 (= 57 (+ 1 (* 2 idx$1636)))) (&& c$714 (= 58 (+ 1 (* 2 idx$1636)))) (&& c$716 (= 59 (+ 1 (* 2 idx$1636)))) (&& c$718 (= 60 (+ 1 (* 2 idx$1636)))) (&& c$720 (= 61 (+ 1 (* 2 idx$1636)))) (&& c$722 (= 62 (+ 1 (* 2 idx$1636)))) (&& c$724 (= 63 (+ 1 (* 2 idx$1636))))) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16)) (bvmul (bv #xffc0 16) t148)))) (bitvector 32)) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))))) (bv #x00000010 32)) (bvand (bv #x00000001 32) (bvashr (bvadd (ite c$1635 (sign-extend (bvadd (ite (|| (= 1 (* 2 idx$1634)) (&& c$602 (= 2 (* 2 idx$1634))) (&& c$604 (= 3 (* 2 idx$1634))) (&& c$606 (= 4 (* 2 idx$1634))) (&& c$608 (= 5 (* 2 idx$1634))) (&& c$610 (= 6 (* 2 idx$1634))) (&& c$612 (= 7 (* 2 idx$1634))) (&& c$614 (= 8 (* 2 idx$1634))) (&& c$616 (= 9 (* 2 idx$1634))) (&& c$618 (= 10 (* 2 idx$1634))) (&& c$620 (= 11 (* 2 idx$1634))) (&& c$622 (= 12 (* 2 idx$1634))) (&& c$624 (= 13 (* 2 idx$1634))) (&& c$626 (= 14 (* 2 idx$1634))) (&& c$628 (= 15 (* 2 idx$1634))) (&& c$630 (= 16 (* 2 idx$1634))) (&& c$632 (= 17 (* 2 idx$1634))) (&& c$634 (= 18 (* 2 idx$1634))) (&& c$636 (= 19 (* 2 idx$1634))) (&& c$638 (= 20 (* 2 idx$1634))) (&& c$640 (= 21 (* 2 idx$1634))) (&& c$642 (= 22 (* 2 idx$1634))) (&& c$644 (= 23 (* 2 idx$1634))) (&& c$646 (= 24 (* 2 idx$1634))) (&& c$648 (= 25 (* 2 idx$1634))) (&& c$650 (= 26 (* 2 idx$1634))) (&& c$652 (= 27 (* 2 idx$1634))) (&& c$654 (= 28 (* 2 idx$1634))) (&& c$656 (= 29 (* 2 idx$1634))) (&& c$658 (= 30 (* 2 idx$1634))) (&& c$660 (= 31 (* 2 idx$1634))) (&& c$662 (= 32 (* 2 idx$1634))) (&& c$664 (= 33 (* 2 idx$1634))) (&& c$666 (= 34 (* 2 idx$1634))) (&& c$668 (= 35 (* 2 idx$1634))) (&& c$670 (= 36 (* 2 idx$1634))) (&& c$672 (= 37 (* 2 idx$1634))) (&& c$674 (= 38 (* 2 idx$1634))) (&& c$676 (= 39 (* 2 idx$1634))) (&& c$678 (= 40 (* 2 idx$1634))) (&& c$680 (= 41 (* 2 idx$1634))) (&& c$682 (= 42 (* 2 idx$1634))) (&& c$684 (= 43 (* 2 idx$1634))) (&& c$686 (= 44 (* 2 idx$1634))) (&& c$688 (= 45 (* 2 idx$1634))) (&& c$690 (= 46 (* 2 idx$1634))) (&& c$692 (= 47 (* 2 idx$1634))) (&& c$694 (= 48 (* 2 idx$1634))) (&& c$696 (= 49 (* 2 idx$1634))) (&& c$698 (= 50 (* 2 idx$1634))) (&& c$700 (= 51 (* 2 idx$1634))) (&& c$702 (= 52 (* 2 idx$1634))) (&& c$704 (= 53 (* 2 idx$1634))) (&& c$706 (= 54 (* 2 idx$1634))) (&& c$708 (= 55 (* 2 idx$1634))) (&& c$710 (= 56 (* 2 idx$1634))) (&& c$712 (= 57 (* 2 idx$1634))) (&& c$714 (= 58 (* 2 idx$1634))) (&& c$716 (= 59 (* 2 idx$1634))) (&& c$718 (= 60 (* 2 idx$1634))) (&& c$720 (= 61 (* 2 idx$1634))) (&& c$722 (= 62 (* 2 idx$1634))) (&& c$724 (= 63 (* 2 idx$1634)))) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16)) (bvmul (bv #xffc0 16) t148)) (bvmul (bv #x0040 16) (ite (|| (= 1 (+ 1 (* 2 idx$1634))) (&& c$602 (= 2 (+ 1 (* 2 idx$1634)))) (&& c$604 (= 3 (+ 1 (* 2 idx$1634)))) (&& c$606 (= 4 (+ 1 (* 2 idx$1634)))) (&& c$608 (= 5 (+ 1 (* 2 idx$1634)))) (&& c$610 (= 6 (+ 1 (* 2 idx$1634)))) (&& c$612 (= 7 (+ 1 (* 2 idx$1634)))) (&& c$614 (= 8 (+ 1 (* 2 idx$1634)))) (&& c$616 (= 9 (+ 1 (* 2 idx$1634)))) (&& c$618 (= 10 (+ 1 (* 2 idx$1634)))) (&& c$620 (= 11 (+ 1 (* 2 idx$1634)))) (&& c$622 (= 12 (+ 1 (* 2 idx$1634)))) (&& c$624 (= 13 (+ 1 (* 2 idx$1634)))) (&& c$626 (= 14 (+ 1 (* 2 idx$1634)))) (&& c$628 (= 15 (+ 1 (* 2 idx$1634)))) (&& c$630 (= 16 (+ 1 (* 2 idx$1634)))) (&& c$632 (= 17 (+ 1 (* 2 idx$1634)))) (&& c$634 (= 18 (+ 1 (* 2 idx$1634)))) (&& c$636 (= 19 (+ 1 (* 2 idx$1634)))) (&& c$638 (= 20 (+ 1 (* 2 idx$1634)))) (&& c$640 (= 21 (+ 1 (* 2 idx$1634)))) (&& c$642 (= 22 (+ 1 (* 2 idx$1634)))) (&& c$644 (= 23 (+ 1 (* 2 idx$1634)))) (&& c$646 (= 24 (+ 1 (* 2 idx$1634)))) (&& c$648 (= 25 (+ 1 (* 2 idx$1634)))) (&& c$650 (= 26 (+ 1 (* 2 idx$1634)))) (&& c$652 (= 27 (+ 1 (* 2 idx$1634)))) (&& c$654 (= 28 (+ 1 (* 2 idx$1634)))) (&& c$656 (= 29 (+ 1 (* 2 idx$1634)))) (&& c$658 (= 30 (+ 1 (* 2 idx$1634)))) (&& c$660 (= 31 (+ 1 (* 2 idx$1634)))) (&& c$662 (= 32 (+ 1 (* 2 idx$1634)))) (&& c$664 (= 33 (+ 1 (* 2 idx$1634)))) (&& c$666 (= 34 (+ 1 (* 2 idx$1634)))) (&& c$668 (= 35 (+ 1 (* 2 idx$1634)))) (&& c$670 (= 36 (+ 1 (* 2 idx$1634)))) (&& c$672 (= 37 (+ 1 (* 2 idx$1634)))) (&& c$674 (= 38 (+ 1 (* 2 idx$1634)))) (&& c$676 (= 39 (+ 1 (* 2 idx$1634)))) (&& c$678 (= 40 (+ 1 (* 2 idx$1634)))) (&& c$680 (= 41 (+ 1 (* 2 idx$1634)))) (&& c$682 (= 42 (+ 1 (* 2 idx$1634)))) (&& c$684 (= 43 (+ 1 (* 2 idx$1634)))) (&& c$686 (= 44 (+ 1 (* 2 idx$1634)))) (&& c$688 (= 45 (+ 1 (* 2 idx$1634)))) (&& c$690 (= 46 (+ 1 (* 2 idx$1634)))) (&& c$692 (= 47 (+ 1 (* 2 idx$1634)))) (&& c$694 (= 48 (+ 1 (* 2 idx$1634)))) (&& c$696 (= 49 (+ 1 (* 2 idx$1634)))) (&& c$698 (= 50 (+ 1 (* 2 idx$1634)))) (&& c$700 (= 51 (+ 1 (* 2 idx$1634)))) (&& c$702 (= 52 (+ 1 (* 2 idx$1634)))) (&& c$704 (= 53 (+ 1 (* 2 idx$1634)))) (&& c$706 (= 54 (+ 1 (* 2 idx$1634)))) (&& c$708 (= 55 (+ 1 (* 2 idx$1634)))) (&& c$710 (= 56 (+ 1 (* 2 idx$1634)))) (&& c$712 (= 57 (+ 1 (* 2 idx$1634)))) (&& c$714 (= 58 (+ 1 (* 2 idx$1634)))) (&& c$716 (= 59 (+ 1 (* 2 idx$1634)))) (&& c$718 (= 60 (+ 1 (* 2 idx$1634)))) (&& c$720 (= 61 (+ 1 (* 2 idx$1634)))) (&& c$722 (= 62 (+ 1 (* 2 idx$1634)))) (&& c$724 (= 63 (+ 1 (* 2 idx$1634))))) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16)) (bvmul (bv #xffc0 16) t148)))) (bitvector 32)) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bvmul (sign-extend input1_multiplier (bitvector 32)) (ite c$1637 (sign-extend (bvadd (ite (|| (= 1 (* 2 idx$1636)) (&& c$602 (= 2 (* 2 idx$1636))) (&& c$604 (= 3 (* 2 idx$1636))) (&& c$606 (= 4 (* 2 idx$1636))) (&& c$608 (= 5 (* 2 idx$1636))) (&& c$610 (= 6 (* 2 idx$1636))) (&& c$612 (= 7 (* 2 idx$1636))) (&& c$614 (= 8 (* 2 idx$1636))) (&& c$616 (= 9 (* 2 idx$1636))) (&& c$618 (= 10 (* 2 idx$1636))) (&& c$620 (= 11 (* 2 idx$1636))) (&& c$622 (= 12 (* 2 idx$1636))) (&& c$624 (= 13 (* 2 idx$1636))) (&& c$626 (= 14 (* 2 idx$1636))) (&& c$628 (= 15 (* 2 idx$1636))) (&& c$630 (= 16 (* 2 idx$1636))) (&& c$632 (= 17 (* 2 idx$1636))) (&& c$634 (= 18 (* 2 idx$1636))) (&& c$636 (= 19 (* 2 idx$1636))) (&& c$638 (= 20 (* 2 idx$1636))) (&& c$640 (= 21 (* 2 idx$1636))) (&& c$642 (= 22 (* 2 idx$1636))) (&& c$644 (= 23 (* 2 idx$1636))) (&& c$646 (= 24 (* 2 idx$1636))) (&& c$648 (= 25 (* 2 idx$1636))) (&& c$650 (= 26 (* 2 idx$1636))) (&& c$652 (= 27 (* 2 idx$1636))) (&& c$654 (= 28 (* 2 idx$1636))) (&& c$656 (= 29 (* 2 idx$1636))) (&& c$658 (= 30 (* 2 idx$1636))) (&& c$660 (= 31 (* 2 idx$1636))) (&& c$662 (= 32 (* 2 idx$1636))) (&& c$664 (= 33 (* 2 idx$1636))) (&& c$666 (= 34 (* 2 idx$1636))) (&& c$668 (= 35 (* 2 idx$1636))) (&& c$670 (= 36 (* 2 idx$1636))) (&& c$672 (= 37 (* 2 idx$1636))) (&& c$674 (= 38 (* 2 idx$1636))) (&& c$676 (= 39 (* 2 idx$1636))) (&& c$678 (= 40 (* 2 idx$1636))) (&& c$680 (= 41 (* 2 idx$1636))) (&& c$682 (= 42 (* 2 idx$1636))) (&& c$684 (= 43 (* 2 idx$1636))) (&& c$686 (= 44 (* 2 idx$1636))) (&& c$688 (= 45 (* 2 idx$1636))) (&& c$690 (= 46 (* 2 idx$1636))) (&& c$692 (= 47 (* 2 idx$1636))) (&& c$694 (= 48 (* 2 idx$1636))) (&& c$696 (= 49 (* 2 idx$1636))) (&& c$698 (= 50 (* 2 idx$1636))) (&& c$700 (= 51 (* 2 idx$1636))) (&& c$702 (= 52 (* 2 idx$1636))) (&& c$704 (= 53 (* 2 idx$1636))) (&& c$706 (= 54 (* 2 idx$1636))) (&& c$708 (= 55 (* 2 idx$1636))) (&& c$710 (= 56 (* 2 idx$1636))) (&& c$712 (= 57 (* 2 idx$1636))) (&& c$714 (= 58 (* 2 idx$1636))) (&& c$716 (= 59 (* 2 idx$1636))) (&& c$718 (= 60 (* 2 idx$1636))) (&& c$720 (= 61 (* 2 idx$1636))) (&& c$722 (= 62 (* 2 idx$1636))) (&& c$724 (= 63 (* 2 idx$1636)))) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16)) (bvmul (bv #xffc0 16) t148)) (bvmul (bv #x0040 16) (ite (|| (= 1 (+ 1 (* 2 idx$1636))) (&& c$602 (= 2 (+ 1 (* 2 idx$1636)))) (&& c$604 (= 3 (+ 1 (* 2 idx$1636)))) (&& c$606 (= 4 (+ 1 (* 2 idx$1636)))) (&& c$608 (= 5 (+ 1 (* 2 idx$1636)))) (&& c$610 (= 6 (+ 1 (* 2 idx$1636)))) (&& c$612 (= 7 (+ 1 (* 2 idx$1636)))) (&& c$614 (= 8 (+ 1 (* 2 idx$1636)))) (&& c$616 (= 9 (+ 1 (* 2 idx$1636)))) (&& c$618 (= 10 (+ 1 (* 2 idx$1636)))) (&& c$620 (= 11 (+ 1 (* 2 idx$1636)))) (&& c$622 (= 12 (+ 1 (* 2 idx$1636)))) (&& c$624 (= 13 (+ 1 (* 2 idx$1636)))) (&& c$626 (= 14 (+ 1 (* 2 idx$1636)))) (&& c$628 (= 15 (+ 1 (* 2 idx$1636)))) (&& c$630 (= 16 (+ 1 (* 2 idx$1636)))) (&& c$632 (= 17 (+ 1 (* 2 idx$1636)))) (&& c$634 (= 18 (+ 1 (* 2 idx$1636)))) (&& c$636 (= 19 (+ 1 (* 2 idx$1636)))) (&& c$638 (= 20 (+ 1 (* 2 idx$1636)))) (&& c$640 (= 21 (+ 1 (* 2 idx$1636)))) (&& c$642 (= 22 (+ 1 (* 2 idx$1636)))) (&& c$644 (= 23 (+ 1 (* 2 idx$1636)))) (&& c$646 (= 24 (+ 1 (* 2 idx$1636)))) (&& c$648 (= 25 (+ 1 (* 2 idx$1636)))) (&& c$650 (= 26 (+ 1 (* 2 idx$1636)))) (&& c$652 (= 27 (+ 1 (* 2 idx$1636)))) (&& c$654 (= 28 (+ 1 (* 2 idx$1636)))) (&& c$656 (= 29 (+ 1 (* 2 idx$1636)))) (&& c$658 (= 30 (+ 1 (* 2 idx$1636)))) (&& c$660 (= 31 (+ 1 (* 2 idx$1636)))) (&& c$662 (= 32 (+ 1 (* 2 idx$1636)))) (&& c$664 (= 33 (+ 1 (* 2 idx$1636)))) (&& c$666 (= 34 (+ 1 (* 2 idx$1636)))) (&& c$668 (= 35 (+ 1 (* 2 idx$1636)))) (&& c$670 (= 36 (+ 1 (* 2 idx$1636)))) (&& c$672 (= 37 (+ 1 (* 2 idx$1636)))) (&& c$674 (= 38 (+ 1 (* 2 idx$1636)))) (&& c$676 (= 39 (+ 1 (* 2 idx$1636)))) (&& c$678 (= 40 (+ 1 (* 2 idx$1636)))) (&& c$680 (= 41 (+ 1 (* 2 idx$1636)))) (&& c$682 (= 42 (+ 1 (* 2 idx$1636)))) (&& c$684 (= 43 (+ 1 (* 2 idx$1636)))) (&& c$686 (= 44 (+ 1 (* 2 idx$1636)))) (&& c$688 (= 45 (+ 1 (* 2 idx$1636)))) (&& c$690 (= 46 (+ 1 (* 2 idx$1636)))) (&& c$692 (= 47 (+ 1 (* 2 idx$1636)))) (&& c$694 (= 48 (+ 1 (* 2 idx$1636)))) (&& c$696 (= 49 (+ 1 (* 2 idx$1636)))) (&& c$698 (= 50 (+ 1 (* 2 idx$1636)))) (&& c$700 (= 51 (+ 1 (* 2 idx$1636)))) (&& c$702 (= 52 (+ 1 (* 2 idx$1636)))) (&& c$704 (= 53 (+ 1 (* 2 idx$1636)))) (&& c$706 (= 54 (+ 1 (* 2 idx$1636)))) (&& c$708 (= 55 (+ 1 (* 2 idx$1636)))) (&& c$710 (= 56 (+ 1 (* 2 idx$1636)))) (&& c$712 (= 57 (+ 1 (* 2 idx$1636)))) (&& c$714 (= 58 (+ 1 (* 2 idx$1636)))) (&& c$716 (= 59 (+ 1 (* 2 idx$1636)))) (&& c$718 (= 60 (+ 1 (* 2 idx$1636)))) (&& c$720 (= 61 (+ 1 (* 2 idx$1636)))) (&& c$722 (= 62 (+ 1 (* 2 idx$1636)))) (&& c$724 (= 63 (+ 1 (* 2 idx$1636))))) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16)) (bvmul (bv #xffc0 16) t148)))) (bitvector 32)) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))))) (bv #x0000000f 32))))) (bv #x7fff 16) (extract 15 0 (bvadd (bvashr (bvadd (ite c$1635 (sign-extend (bvadd (ite (|| (= 1 (* 2 idx$1634)) (&& c$602 (= 2 (* 2 idx$1634))) (&& c$604 (= 3 (* 2 idx$1634))) (&& c$606 (= 4 (* 2 idx$1634))) (&& c$608 (= 5 (* 2 idx$1634))) (&& c$610 (= 6 (* 2 idx$1634))) (&& c$612 (= 7 (* 2 idx$1634))) (&& c$614 (= 8 (* 2 idx$1634))) (&& c$616 (= 9 (* 2 idx$1634))) (&& c$618 (= 10 (* 2 idx$1634))) (&& c$620 (= 11 (* 2 idx$1634))) (&& c$622 (= 12 (* 2 idx$1634))) (&& c$624 (= 13 (* 2 idx$1634))) (&& c$626 (= 14 (* 2 idx$1634))) (&& c$628 (= 15 (* 2 idx$1634))) (&& c$630 (= 16 (* 2 idx$1634))) (&& c$632 (= 17 (* 2 idx$1634))) (&& c$634 (= 18 (* 2 idx$1634))) (&& c$636 (= 19 (* 2 idx$1634))) (&& c$638 (= 20 (* 2 idx$1634))) (&& c$640 (= 21 (* 2 idx$1634))) (&& c$642 (= 22 (* 2 idx$1634))) (&& c$644 (= 23 (* 2 idx$1634))) (&& c$646 (= 24 (* 2 idx$1634))) (&& c$648 (= 25 (* 2 idx$1634))) (&& c$650 (= 26 (* 2 idx$1634))) (&& c$652 (= 27 (* 2 idx$1634))) (&& c$654 (= 28 (* 2 idx$1634))) (&& c$656 (= 29 (* 2 idx$1634))) (&& c$658 (= 30 (* 2 idx$1634))) (&& c$660 (= 31 (* 2 idx$1634))) (&& c$662 (= 32 (* 2 idx$1634))) (&& c$664 (= 33 (* 2 idx$1634))) (&& c$666 (= 34 (* 2 idx$1634))) (&& c$668 (= 35 (* 2 idx$1634))) (&& c$670 (= 36 (* 2 idx$1634))) (&& c$672 (= 37 (* 2 idx$1634))) (&& c$674 (= 38 (* 2 idx$1634))) (&& c$676 (= 39 (* 2 idx$1634))) (&& c$678 (= 40 (* 2 idx$1634))) (&& c$680 (= 41 (* 2 idx$1634))) (&& c$682 (= 42 (* 2 idx$1634))) (&& c$684 (= 43 (* 2 idx$1634))) (&& c$686 (= 44 (* 2 idx$1634))) (&& c$688 (= 45 (* 2 idx$1634))) (&& c$690 (= 46 (* 2 idx$1634))) (&& c$692 (= 47 (* 2 idx$1634))) (&& c$694 (= 48 (* 2 idx$1634))) (&& c$696 (= 49 (* 2 idx$1634))) (&& c$698 (= 50 (* 2 idx$1634))) (&& c$700 (= 51 (* 2 idx$1634))) (&& c$702 (= 52 (* 2 idx$1634))) (&& c$704 (= 53 (* 2 idx$1634))) (&& c$706 (= 54 (* 2 idx$1634))) (&& c$708 (= 55 (* 2 idx$1634))) (&& c$710 (= 56 (* 2 idx$1634))) (&& c$712 (= 57 (* 2 idx$1634))) (&& c$714 (= 58 (* 2 idx$1634))) (&& c$716 (= 59 (* 2 idx$1634))) (&& c$718 (= 60 (* 2 idx$1634))) (&& c$720 (= 61 (* 2 idx$1634))) (&& c$722 (= 62 (* 2 idx$1634))) (&& c$724 (= 63 (* 2 idx$1634)))) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16)) (bvmul (bv #xffc0 16) t148)) (bvmul (bv #x0040 16) (ite (|| (= 1 (+ 1 (* 2 idx$1634))) (&& c$602 (= 2 (+ 1 (* 2 idx$1634)))) (&& c$604 (= 3 (+ 1 (* 2 idx$1634)))) (&& c$606 (= 4 (+ 1 (* 2 idx$1634)))) (&& c$608 (= 5 (+ 1 (* 2 idx$1634)))) (&& c$610 (= 6 (+ 1 (* 2 idx$1634)))) (&& c$612 (= 7 (+ 1 (* 2 idx$1634)))) (&& c$614 (= 8 (+ 1 (* 2 idx$1634)))) (&& c$616 (= 9 (+ 1 (* 2 idx$1634)))) (&& c$618 (= 10 (+ 1 (* 2 idx$1634)))) (&& c$620 (= 11 (+ 1 (* 2 idx$1634)))) (&& c$622 (= 12 (+ 1 (* 2 idx$1634)))) (&& c$624 (= 13 (+ 1 (* 2 idx$1634)))) (&& c$626 (= 14 (+ 1 (* 2 idx$1634)))) (&& c$628 (= 15 (+ 1 (* 2 idx$1634)))) (&& c$630 (= 16 (+ 1 (* 2 idx$1634)))) (&& c$632 (= 17 (+ 1 (* 2 idx$1634)))) (&& c$634 (= 18 (+ 1 (* 2 idx$1634)))) (&& c$636 (= 19 (+ 1 (* 2 idx$1634)))) (&& c$638 (= 20 (+ 1 (* 2 idx$1634)))) (&& c$640 (= 21 (+ 1 (* 2 idx$1634)))) (&& c$642 (= 22 (+ 1 (* 2 idx$1634)))) (&& c$644 (= 23 (+ 1 (* 2 idx$1634)))) (&& c$646 (= 24 (+ 1 (* 2 idx$1634)))) (&& c$648 (= 25 (+ 1 (* 2 idx$1634)))) (&& c$650 (= 26 (+ 1 (* 2 idx$1634)))) (&& c$652 (= 27 (+ 1 (* 2 idx$1634)))) (&& c$654 (= 28 (+ 1 (* 2 idx$1634)))) (&& c$656 (= 29 (+ 1 (* 2 idx$1634)))) (&& c$658 (= 30 (+ 1 (* 2 idx$1634)))) (&& c$660 (= 31 (+ 1 (* 2 idx$1634)))) (&& c$662 (= 32 (+ 1 (* 2 idx$1634)))) (&& c$664 (= 33 (+ 1 (* 2 idx$1634)))) (&& c$666 (= 34 (+ 1 (* 2 idx$1634)))) (&& c$668 (= 35 (+ 1 (* 2 idx$1634)))) (&& c$670 (= 36 (+ 1 (* 2 idx$1634)))) (&& c$672 (= 37 (+ 1 (* 2 idx$1634)))) (&& c$674 (= 38 (+ 1 (* 2 idx$1634)))) (&& c$676 (= 39 (+ 1 (* 2 idx$1634)))) (&& c$678 (= 40 (+ 1 (* 2 idx$1634)))) (&& c$680 (= 41 (+ 1 (* 2 idx$1634)))) (&& c$682 (= 42 (+ 1 (* 2 idx$1634)))) (&& c$684 (= 43 (+ 1 (* 2 idx$1634)))) (&& c$686 (= 44 (+ 1 (* 2 idx$1634)))) (&& c$688 (= 45 (+ 1 (* 2 idx$1634)))) (&& c$690 (= 46 (+ 1 (* 2 idx$1634)))) (&& c$692 (= 47 (+ 1 (* 2 idx$1634)))) (&& c$694 (= 48 (+ 1 (* 2 idx$1634)))) (&& c$696 (= 49 (+ 1 (* 2 idx$1634)))) (&& c$698 (= 50 (+ 1 (* 2 idx$1634)))) (&& c$700 (= 51 (+ 1 (* 2 idx$1634)))) (&& c$702 (= 52 (+ 1 (* 2 idx$1634)))) (&& c$704 (= 53 (+ 1 (* 2 idx$1634)))) (&& c$706 (= 54 (+ 1 (* 2 idx$1634)))) (&& c$708 (= 55 (+ 1 (* 2 idx$1634)))) (&& c$710 (= 56 (+ 1 (* 2 idx$1634)))) (&& c$712 (= 57 (+ 1 (* 2 idx$1634)))) (&& c$714 (= 58 (+ 1 (* 2 idx$1634)))) (&& c$716 (= 59 (+ 1 (* 2 idx$1634)))) (&& c$718 (= 60 (+ 1 (* 2 idx$1634)))) (&& c$720 (= 61 (+ 1 (* 2 idx$1634)))) (&& c$722 (= 62 (+ 1 (* 2 idx$1634)))) (&& c$724 (= 63 (+ 1 (* 2 idx$1634))))) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16)) (bvmul (bv #xffc0 16) t148)))) (bitvector 32)) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bvmul (sign-extend input1_multiplier (bitvector 32)) (ite c$1637 (sign-extend (bvadd (ite (|| (= 1 (* 2 idx$1636)) (&& c$602 (= 2 (* 2 idx$1636))) (&& c$604 (= 3 (* 2 idx$1636))) (&& c$606 (= 4 (* 2 idx$1636))) (&& c$608 (= 5 (* 2 idx$1636))) (&& c$610 (= 6 (* 2 idx$1636))) (&& c$612 (= 7 (* 2 idx$1636))) (&& c$614 (= 8 (* 2 idx$1636))) (&& c$616 (= 9 (* 2 idx$1636))) (&& c$618 (= 10 (* 2 idx$1636))) (&& c$620 (= 11 (* 2 idx$1636))) (&& c$622 (= 12 (* 2 idx$1636))) (&& c$624 (= 13 (* 2 idx$1636))) (&& c$626 (= 14 (* 2 idx$1636))) (&& c$628 (= 15 (* 2 idx$1636))) (&& c$630 (= 16 (* 2 idx$1636))) (&& c$632 (= 17 (* 2 idx$1636))) (&& c$634 (= 18 (* 2 idx$1636))) (&& c$636 (= 19 (* 2 idx$1636))) (&& c$638 (= 20 (* 2 idx$1636))) (&& c$640 (= 21 (* 2 idx$1636))) (&& c$642 (= 22 (* 2 idx$1636))) (&& c$644 (= 23 (* 2 idx$1636))) (&& c$646 (= 24 (* 2 idx$1636))) (&& c$648 (= 25 (* 2 idx$1636))) (&& c$650 (= 26 (* 2 idx$1636))) (&& c$652 (= 27 (* 2 idx$1636))) (&& c$654 (= 28 (* 2 idx$1636))) (&& c$656 (= 29 (* 2 idx$1636))) (&& c$658 (= 30 (* 2 idx$1636))) (&& c$660 (= 31 (* 2 idx$1636))) (&& c$662 (= 32 (* 2 idx$1636))) (&& c$664 (= 33 (* 2 idx$1636))) (&& c$666 (= 34 (* 2 idx$1636))) (&& c$668 (= 35 (* 2 idx$1636))) (&& c$670 (= 36 (* 2 idx$1636))) (&& c$672 (= 37 (* 2 idx$1636))) (&& c$674 (= 38 (* 2 idx$1636))) (&& c$676 (= 39 (* 2 idx$1636))) (&& c$678 (= 40 (* 2 idx$1636))) (&& c$680 (= 41 (* 2 idx$1636))) (&& c$682 (= 42 (* 2 idx$1636))) (&& c$684 (= 43 (* 2 idx$1636))) (&& c$686 (= 44 (* 2 idx$1636))) (&& c$688 (= 45 (* 2 idx$1636))) (&& c$690 (= 46 (* 2 idx$1636))) (&& c$692 (= 47 (* 2 idx$1636))) (&& c$694 (= 48 (* 2 idx$1636))) (&& c$696 (= 49 (* 2 idx$1636))) (&& c$698 (= 50 (* 2 idx$1636))) (&& c$700 (= 51 (* 2 idx$1636))) (&& c$702 (= 52 (* 2 idx$1636))) (&& c$704 (= 53 (* 2 idx$1636))) (&& c$706 (= 54 (* 2 idx$1636))) (&& c$708 (= 55 (* 2 idx$1636))) (&& c$710 (= 56 (* 2 idx$1636))) (&& c$712 (= 57 (* 2 idx$1636))) (&& c$714 (= 58 (* 2 idx$1636))) (&& c$716 (= 59 (* 2 idx$1636))) (&& c$718 (= 60 (* 2 idx$1636))) (&& c$720 (= 61 (* 2 idx$1636))) (&& c$722 (= 62 (* 2 idx$1636))) (&& c$724 (= 63 (* 2 idx$1636)))) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16)) (bvmul (bv #xffc0 16) t148)) (bvmul (bv #x0040 16) (ite (|| (= 1 (+ 1 (* 2 idx$1636))) (&& c$602 (= 2 (+ 1 (* 2 idx$1636)))) (&& c$604 (= 3 (+ 1 (* 2 idx$1636)))) (&& c$606 (= 4 (+ 1 (* 2 idx$1636)))) (&& c$608 (= 5 (+ 1 (* 2 idx$1636)))) (&& c$610 (= 6 (+ 1 (* 2 idx$1636)))) (&& c$612 (= 7 (+ 1 (* 2 idx$1636)))) (&& c$614 (= 8 (+ 1 (* 2 idx$1636)))) (&& c$616 (= 9 (+ 1 (* 2 idx$1636)))) (&& c$618 (= 10 (+ 1 (* 2 idx$1636)))) (&& c$620 (= 11 (+ 1 (* 2 idx$1636)))) (&& c$622 (= 12 (+ 1 (* 2 idx$1636)))) (&& c$624 (= 13 (+ 1 (* 2 idx$1636)))) (&& c$626 (= 14 (+ 1 (* 2 idx$1636)))) (&& c$628 (= 15 (+ 1 (* 2 idx$1636)))) (&& c$630 (= 16 (+ 1 (* 2 idx$1636)))) (&& c$632 (= 17 (+ 1 (* 2 idx$1636)))) (&& c$634 (= 18 (+ 1 (* 2 idx$1636)))) (&& c$636 (= 19 (+ 1 (* 2 idx$1636)))) (&& c$638 (= 20 (+ 1 (* 2 idx$1636)))) (&& c$640 (= 21 (+ 1 (* 2 idx$1636)))) (&& c$642 (= 22 (+ 1 (* 2 idx$1636)))) (&& c$644 (= 23 (+ 1 (* 2 idx$1636)))) (&& c$646 (= 24 (+ 1 (* 2 idx$1636)))) (&& c$648 (= 25 (+ 1 (* 2 idx$1636)))) (&& c$650 (= 26 (+ 1 (* 2 idx$1636)))) (&& c$652 (= 27 (+ 1 (* 2 idx$1636)))) (&& c$654 (= 28 (+ 1 (* 2 idx$1636)))) (&& c$656 (= 29 (+ 1 (* 2 idx$1636)))) (&& c$658 (= 30 (+ 1 (* 2 idx$1636)))) (&& c$660 (= 31 (+ 1 (* 2 idx$1636)))) (&& c$662 (= 32 (+ 1 (* 2 idx$1636)))) (&& c$664 (= 33 (+ 1 (* 2 idx$1636)))) (&& c$666 (= 34 (+ 1 (* 2 idx$1636)))) (&& c$668 (= 35 (+ 1 (* 2 idx$1636)))) (&& c$670 (= 36 (+ 1 (* 2 idx$1636)))) (&& c$672 (= 37 (+ 1 (* 2 idx$1636)))) (&& c$674 (= 38 (+ 1 (* 2 idx$1636)))) (&& c$676 (= 39 (+ 1 (* 2 idx$1636)))) (&& c$678 (= 40 (+ 1 (* 2 idx$1636)))) (&& c$680 (= 41 (+ 1 (* 2 idx$1636)))) (&& c$682 (= 42 (+ 1 (* 2 idx$1636)))) (&& c$684 (= 43 (+ 1 (* 2 idx$1636)))) (&& c$686 (= 44 (+ 1 (* 2 idx$1636)))) (&& c$688 (= 45 (+ 1 (* 2 idx$1636)))) (&& c$690 (= 46 (+ 1 (* 2 idx$1636)))) (&& c$692 (= 47 (+ 1 (* 2 idx$1636)))) (&& c$694 (= 48 (+ 1 (* 2 idx$1636)))) (&& c$696 (= 49 (+ 1 (* 2 idx$1636)))) (&& c$698 (= 50 (+ 1 (* 2 idx$1636)))) (&& c$700 (= 51 (+ 1 (* 2 idx$1636)))) (&& c$702 (= 52 (+ 1 (* 2 idx$1636)))) (&& c$704 (= 53 (+ 1 (* 2 idx$1636)))) (&& c$706 (= 54 (+ 1 (* 2 idx$1636)))) (&& c$708 (= 55 (+ 1 (* 2 idx$1636)))) (&& c$710 (= 56 (+ 1 (* 2 idx$1636)))) (&& c$712 (= 57 (+ 1 (* 2 idx$1636)))) (&& c$714 (= 58 (+ 1 (* 2 idx$1636)))) (&& c$716 (= 59 (+ 1 (* 2 idx$1636)))) (&& c$718 (= 60 (+ 1 (* 2 idx$1636)))) (&& c$720 (= 61 (+ 1 (* 2 idx$1636)))) (&& c$722 (= 62 (+ 1 (* 2 idx$1636)))) (&& c$724 (= 63 (+ 1 (* 2 idx$1636))))) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16)) (bvmul (bv #xffc0 16) t148)))) (bitvector 32)) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))))) (bv #x00000010 32)) (bvand (bv #x00000001 32) (bvashr (bvadd (ite c$1635 (sign-extend (bvadd (ite (|| (= 1 (* 2 idx$1634)) (&& c$602 (= 2 (* 2 idx$1634))) (&& c$604 (= 3 (* 2 idx$1634))) (&& c$606 (= 4 (* 2 idx$1634))) (&& c$608 (= 5 (* 2 idx$1634))) (&& c$610 (= 6 (* 2 idx$1634))) (&& c$612 (= 7 (* 2 idx$1634))) (&& c$614 (= 8 (* 2 idx$1634))) (&& c$616 (= 9 (* 2 idx$1634))) (&& c$618 (= 10 (* 2 idx$1634))) (&& c$620 (= 11 (* 2 idx$1634))) (&& c$622 (= 12 (* 2 idx$1634))) (&& c$624 (= 13 (* 2 idx$1634))) (&& c$626 (= 14 (* 2 idx$1634))) (&& c$628 (= 15 (* 2 idx$1634))) (&& c$630 (= 16 (* 2 idx$1634))) (&& c$632 (= 17 (* 2 idx$1634))) (&& c$634 (= 18 (* 2 idx$1634))) (&& c$636 (= 19 (* 2 idx$1634))) (&& c$638 (= 20 (* 2 idx$1634))) (&& c$640 (= 21 (* 2 idx$1634))) (&& c$642 (= 22 (* 2 idx$1634))) (&& c$644 (= 23 (* 2 idx$1634))) (&& c$646 (= 24 (* 2 idx$1634))) (&& c$648 (= 25 (* 2 idx$1634))) (&& c$650 (= 26 (* 2 idx$1634))) (&& c$652 (= 27 (* 2 idx$1634))) (&& c$654 (= 28 (* 2 idx$1634))) (&& c$656 (= 29 (* 2 idx$1634))) (&& c$658 (= 30 (* 2 idx$1634))) (&& c$660 (= 31 (* 2 idx$1634))) (&& c$662 (= 32 (* 2 idx$1634))) (&& c$664 (= 33 (* 2 idx$1634))) (&& c$666 (= 34 (* 2 idx$1634))) (&& c$668 (= 35 (* 2 idx$1634))) (&& c$670 (= 36 (* 2 idx$1634))) (&& c$672 (= 37 (* 2 idx$1634))) (&& c$674 (= 38 (* 2 idx$1634))) (&& c$676 (= 39 (* 2 idx$1634))) (&& c$678 (= 40 (* 2 idx$1634))) (&& c$680 (= 41 (* 2 idx$1634))) (&& c$682 (= 42 (* 2 idx$1634))) (&& c$684 (= 43 (* 2 idx$1634))) (&& c$686 (= 44 (* 2 idx$1634))) (&& c$688 (= 45 (* 2 idx$1634))) (&& c$690 (= 46 (* 2 idx$1634))) (&& c$692 (= 47 (* 2 idx$1634))) (&& c$694 (= 48 (* 2 idx$1634))) (&& c$696 (= 49 (* 2 idx$1634))) (&& c$698 (= 50 (* 2 idx$1634))) (&& c$700 (= 51 (* 2 idx$1634))) (&& c$702 (= 52 (* 2 idx$1634))) (&& c$704 (= 53 (* 2 idx$1634))) (&& c$706 (= 54 (* 2 idx$1634))) (&& c$708 (= 55 (* 2 idx$1634))) (&& c$710 (= 56 (* 2 idx$1634))) (&& c$712 (= 57 (* 2 idx$1634))) (&& c$714 (= 58 (* 2 idx$1634))) (&& c$716 (= 59 (* 2 idx$1634))) (&& c$718 (= 60 (* 2 idx$1634))) (&& c$720 (= 61 (* 2 idx$1634))) (&& c$722 (= 62 (* 2 idx$1634))) (&& c$724 (= 63 (* 2 idx$1634)))) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16)) (bvmul (bv #xffc0 16) t148)) (bvmul (bv #x0040 16) (ite (|| (= 1 (+ 1 (* 2 idx$1634))) (&& c$602 (= 2 (+ 1 (* 2 idx$1634)))) (&& c$604 (= 3 (+ 1 (* 2 idx$1634)))) (&& c$606 (= 4 (+ 1 (* 2 idx$1634)))) (&& c$608 (= 5 (+ 1 (* 2 idx$1634)))) (&& c$610 (= 6 (+ 1 (* 2 idx$1634)))) (&& c$612 (= 7 (+ 1 (* 2 idx$1634)))) (&& c$614 (= 8 (+ 1 (* 2 idx$1634)))) (&& c$616 (= 9 (+ 1 (* 2 idx$1634)))) (&& c$618 (= 10 (+ 1 (* 2 idx$1634)))) (&& c$620 (= 11 (+ 1 (* 2 idx$1634)))) (&& c$622 (= 12 (+ 1 (* 2 idx$1634)))) (&& c$624 (= 13 (+ 1 (* 2 idx$1634)))) (&& c$626 (= 14 (+ 1 (* 2 idx$1634)))) (&& c$628 (= 15 (+ 1 (* 2 idx$1634)))) (&& c$630 (= 16 (+ 1 (* 2 idx$1634)))) (&& c$632 (= 17 (+ 1 (* 2 idx$1634)))) (&& c$634 (= 18 (+ 1 (* 2 idx$1634)))) (&& c$636 (= 19 (+ 1 (* 2 idx$1634)))) (&& c$638 (= 20 (+ 1 (* 2 idx$1634)))) (&& c$640 (= 21 (+ 1 (* 2 idx$1634)))) (&& c$642 (= 22 (+ 1 (* 2 idx$1634)))) (&& c$644 (= 23 (+ 1 (* 2 idx$1634)))) (&& c$646 (= 24 (+ 1 (* 2 idx$1634)))) (&& c$648 (= 25 (+ 1 (* 2 idx$1634)))) (&& c$650 (= 26 (+ 1 (* 2 idx$1634)))) (&& c$652 (= 27 (+ 1 (* 2 idx$1634)))) (&& c$654 (= 28 (+ 1 (* 2 idx$1634)))) (&& c$656 (= 29 (+ 1 (* 2 idx$1634)))) (&& c$658 (= 30 (+ 1 (* 2 idx$1634)))) (&& c$660 (= 31 (+ 1 (* 2 idx$1634)))) (&& c$662 (= 32 (+ 1 (* 2 idx$1634)))) (&& c$664 (= 33 (+ 1 (* 2 idx$1634)))) (&& c$666 (= 34 (+ 1 (* 2 idx$1634)))) (&& c$668 (= 35 (+ 1 (* 2 idx$1634)))) (&& c$670 (= 36 (+ 1 (* 2 idx$1634)))) (&& c$672 (= 37 (+ 1 (* 2 idx$1634)))) (&& c$674 (= 38 (+ 1 (* 2 idx$1634)))) (&& c$676 (= 39 (+ 1 (* 2 idx$1634)))) (&& c$678 (= 40 (+ 1 (* 2 idx$1634)))) (&& c$680 (= 41 (+ 1 (* 2 idx$1634)))) (&& c$682 (= 42 (+ 1 (* 2 idx$1634)))) (&& c$684 (= 43 (+ 1 (* 2 idx$1634)))) (&& c$686 (= 44 (+ 1 (* 2 idx$1634)))) (&& c$688 (= 45 (+ 1 (* 2 idx$1634)))) (&& c$690 (= 46 (+ 1 (* 2 idx$1634)))) (&& c$692 (= 47 (+ 1 (* 2 idx$1634)))) (&& c$694 (= 48 (+ 1 (* 2 idx$1634)))) (&& c$696 (= 49 (+ 1 (* 2 idx$1634)))) (&& c$698 (= 50 (+ 1 (* 2 idx$1634)))) (&& c$700 (= 51 (+ 1 (* 2 idx$1634)))) (&& c$702 (= 52 (+ 1 (* 2 idx$1634)))) (&& c$704 (= 53 (+ 1 (* 2 idx$1634)))) (&& c$706 (= 54 (+ 1 (* 2 idx$1634)))) (&& c$708 (= 55 (+ 1 (* 2 idx$1634)))) (&& c$710 (= 56 (+ 1 (* 2 idx$1634)))) (&& c$712 (= 57 (+ 1 (* 2 idx$1634)))) (&& c$714 (= 58 (+ 1 (* 2 idx$1634)))) (&& c$716 (= 59 (+ 1 (* 2 idx$1634)))) (&& c$718 (= 60 (+ 1 (* 2 idx$1634)))) (&& c$720 (= 61 (+ 1 (* 2 idx$1634)))) (&& c$722 (= 62 (+ 1 (* 2 idx$1634)))) (&& c$724 (= 63 (+ 1 (* 2 idx$1634))))) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16)) (bvmul (bv #xffc0 16) t148)))) (bitvector 32)) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bvmul (sign-extend input1_multiplier (bitvector 32)) (ite c$1637 (sign-extend (bvadd (ite (|| (= 1 (* 2 idx$1636)) (&& c$602 (= 2 (* 2 idx$1636))) (&& c$604 (= 3 (* 2 idx$1636))) (&& c$606 (= 4 (* 2 idx$1636))) (&& c$608 (= 5 (* 2 idx$1636))) (&& c$610 (= 6 (* 2 idx$1636))) (&& c$612 (= 7 (* 2 idx$1636))) (&& c$614 (= 8 (* 2 idx$1636))) (&& c$616 (= 9 (* 2 idx$1636))) (&& c$618 (= 10 (* 2 idx$1636))) (&& c$620 (= 11 (* 2 idx$1636))) (&& c$622 (= 12 (* 2 idx$1636))) (&& c$624 (= 13 (* 2 idx$1636))) (&& c$626 (= 14 (* 2 idx$1636))) (&& c$628 (= 15 (* 2 idx$1636))) (&& c$630 (= 16 (* 2 idx$1636))) (&& c$632 (= 17 (* 2 idx$1636))) (&& c$634 (= 18 (* 2 idx$1636))) (&& c$636 (= 19 (* 2 idx$1636))) (&& c$638 (= 20 (* 2 idx$1636))) (&& c$640 (= 21 (* 2 idx$1636))) (&& c$642 (= 22 (* 2 idx$1636))) (&& c$644 (= 23 (* 2 idx$1636))) (&& c$646 (= 24 (* 2 idx$1636))) (&& c$648 (= 25 (* 2 idx$1636))) (&& c$650 (= 26 (* 2 idx$1636))) (&& c$652 (= 27 (* 2 idx$1636))) (&& c$654 (= 28 (* 2 idx$1636))) (&& c$656 (= 29 (* 2 idx$1636))) (&& c$658 (= 30 (* 2 idx$1636))) (&& c$660 (= 31 (* 2 idx$1636))) (&& c$662 (= 32 (* 2 idx$1636))) (&& c$664 (= 33 (* 2 idx$1636))) (&& c$666 (= 34 (* 2 idx$1636))) (&& c$668 (= 35 (* 2 idx$1636))) (&& c$670 (= 36 (* 2 idx$1636))) (&& c$672 (= 37 (* 2 idx$1636))) (&& c$674 (= 38 (* 2 idx$1636))) (&& c$676 (= 39 (* 2 idx$1636))) (&& c$678 (= 40 (* 2 idx$1636))) (&& c$680 (= 41 (* 2 idx$1636))) (&& c$682 (= 42 (* 2 idx$1636))) (&& c$684 (= 43 (* 2 idx$1636))) (&& c$686 (= 44 (* 2 idx$1636))) (&& c$688 (= 45 (* 2 idx$1636))) (&& c$690 (= 46 (* 2 idx$1636))) (&& c$692 (= 47 (* 2 idx$1636))) (&& c$694 (= 48 (* 2 idx$1636))) (&& c$696 (= 49 (* 2 idx$1636))) (&& c$698 (= 50 (* 2 idx$1636))) (&& c$700 (= 51 (* 2 idx$1636))) (&& c$702 (= 52 (* 2 idx$1636))) (&& c$704 (= 53 (* 2 idx$1636))) (&& c$706 (= 54 (* 2 idx$1636))) (&& c$708 (= 55 (* 2 idx$1636))) (&& c$710 (= 56 (* 2 idx$1636))) (&& c$712 (= 57 (* 2 idx$1636))) (&& c$714 (= 58 (* 2 idx$1636))) (&& c$716 (= 59 (* 2 idx$1636))) (&& c$718 (= 60 (* 2 idx$1636))) (&& c$720 (= 61 (* 2 idx$1636))) (&& c$722 (= 62 (* 2 idx$1636))) (&& c$724 (= 63 (* 2 idx$1636)))) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16)) (bvmul (bv #xffc0 16) t148)) (bvmul (bv #x0040 16) (ite (|| (= 1 (+ 1 (* 2 idx$1636))) (&& c$602 (= 2 (+ 1 (* 2 idx$1636)))) (&& c$604 (= 3 (+ 1 (* 2 idx$1636)))) (&& c$606 (= 4 (+ 1 (* 2 idx$1636)))) (&& c$608 (= 5 (+ 1 (* 2 idx$1636)))) (&& c$610 (= 6 (+ 1 (* 2 idx$1636)))) (&& c$612 (= 7 (+ 1 (* 2 idx$1636)))) (&& c$614 (= 8 (+ 1 (* 2 idx$1636)))) (&& c$616 (= 9 (+ 1 (* 2 idx$1636)))) (&& c$618 (= 10 (+ 1 (* 2 idx$1636)))) (&& c$620 (= 11 (+ 1 (* 2 idx$1636)))) (&& c$622 (= 12 (+ 1 (* 2 idx$1636)))) (&& c$624 (= 13 (+ 1 (* 2 idx$1636)))) (&& c$626 (= 14 (+ 1 (* 2 idx$1636)))) (&& c$628 (= 15 (+ 1 (* 2 idx$1636)))) (&& c$630 (= 16 (+ 1 (* 2 idx$1636)))) (&& c$632 (= 17 (+ 1 (* 2 idx$1636)))) (&& c$634 (= 18 (+ 1 (* 2 idx$1636)))) (&& c$636 (= 19 (+ 1 (* 2 idx$1636)))) (&& c$638 (= 20 (+ 1 (* 2 idx$1636)))) (&& c$640 (= 21 (+ 1 (* 2 idx$1636)))) (&& c$642 (= 22 (+ 1 (* 2 idx$1636)))) (&& c$644 (= 23 (+ 1 (* 2 idx$1636)))) (&& c$646 (= 24 (+ 1 (* 2 idx$1636)))) (&& c$648 (= 25 (+ 1 (* 2 idx$1636)))) (&& c$650 (= 26 (+ 1 (* 2 idx$1636)))) (&& c$652 (= 27 (+ 1 (* 2 idx$1636)))) (&& c$654 (= 28 (+ 1 (* 2 idx$1636)))) (&& c$656 (= 29 (+ 1 (* 2 idx$1636)))) (&& c$658 (= 30 (+ 1 (* 2 idx$1636)))) (&& c$660 (= 31 (+ 1 (* 2 idx$1636)))) (&& c$662 (= 32 (+ 1 (* 2 idx$1636)))) (&& c$664 (= 33 (+ 1 (* 2 idx$1636)))) (&& c$666 (= 34 (+ 1 (* 2 idx$1636)))) (&& c$668 (= 35 (+ 1 (* 2 idx$1636)))) (&& c$670 (= 36 (+ 1 (* 2 idx$1636)))) (&& c$672 (= 37 (+ 1 (* 2 idx$1636)))) (&& c$674 (= 38 (+ 1 (* 2 idx$1636)))) (&& c$676 (= 39 (+ 1 (* 2 idx$1636)))) (&& c$678 (= 40 (+ 1 (* 2 idx$1636)))) (&& c$680 (= 41 (+ 1 (* 2 idx$1636)))) (&& c$682 (= 42 (+ 1 (* 2 idx$1636)))) (&& c$684 (= 43 (+ 1 (* 2 idx$1636)))) (&& c$686 (= 44 (+ 1 (* 2 idx$1636)))) (&& c$688 (= 45 (+ 1 (* 2 idx$1636)))) (&& c$690 (= 46 (+ 1 (* 2 idx$1636)))) (&& c$692 (= 47 (+ 1 (* 2 idx$1636)))) (&& c$694 (= 48 (+ 1 (* 2 idx$1636)))) (&& c$696 (= 49 (+ 1 (* 2 idx$1636)))) (&& c$698 (= 50 (+ 1 (* 2 idx$1636)))) (&& c$700 (= 51 (+ 1 (* 2 idx$1636)))) (&& c$702 (= 52 (+ 1 (* 2 idx$1636)))) (&& c$704 (= 53 (+ 1 (* 2 idx$1636)))) (&& c$706 (= 54 (+ 1 (* 2 idx$1636)))) (&& c$708 (= 55 (+ 1 (* 2 idx$1636)))) (&& c$710 (= 56 (+ 1 (* 2 idx$1636)))) (&& c$712 (= 57 (+ 1 (* 2 idx$1636)))) (&& c$714 (= 58 (+ 1 (* 2 idx$1636)))) (&& c$716 (= 59 (+ 1 (* 2 idx$1636)))) (&& c$718 (= 60 (+ 1 (* 2 idx$1636)))) (&& c$720 (= 61 (+ 1 (* 2 idx$1636)))) (&& c$722 (= 62 (+ 1 (* 2 idx$1636)))) (&& c$724 (= 63 (+ 1 (* 2 idx$1636))))) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16)) (bvmul (bv #xffc0 16) t148)))) (bitvector 32)) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))))) (bv #x0000000f 32))))))) (bitvector 32)) (sign-extend t151 (bitvector 32))) ...) ...)) ...)))) ...))
Ran synthesizer for 2208 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-cast
  (vec-cast
   (vec-max
    (vec-min
     (vec-add
      (vec-bwand
       (sca-broadcast (int32_t (bv #x00000001 32)) 16)
       (vec-div
        (vec-add
         (vec-mul
          (vec-cast
           (vec-add
            (vec-mul
             (vec-cast
              (load
               (buffer input1 'uint8)
               (ramp
                (sca-add
                 (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
                 (sca-sub
                  (sca-sub (var-lookup 't75) (var-lookup 't81))
                  (var-lookup 'input1.min.0)))
                1
                16)
               (aligned 1 0))
              'int16
              16)
             (sca-broadcast (int16_t (bv #x0040 16)) 16))
            (sca-broadcast
             (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))
             16))
           'int32
           16)
          (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
         (sca-broadcast
          (sca-mul
           (sca-cast
            (sca-mul
             (sca-sub (int16_t t149) (int16_t t150))
             (int16_t (bv #x0040 16)))
            'int32)
           (sca-cast (int16_t input2_multiplier) 'int32))
          16))
        (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
      (vec-div
       (vec-add
        (vec-mul
         (vec-cast
          (vec-add
           (vec-mul
            (vec-cast
             (load
              (buffer input1 'uint8)
              (ramp
               (sca-add
                (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
                (sca-sub
                 (sca-sub (var-lookup 't75) (var-lookup 't81))
                 (var-lookup 'input1.min.0)))
               1
               16)
              (aligned 1 0))
             'int16
             16)
            (sca-broadcast (int16_t (bv #x0040 16)) 16))
           (sca-broadcast
            (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))
            16))
          'int32
          16)
         (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
        (sca-broadcast
         (sca-mul
          (sca-cast
           (sca-mul
            (sca-sub (int16_t t149) (int16_t t150))
            (int16_t (bv #x0040 16)))
           'int32)
          (sca-cast (int16_t input2_multiplier) 'int32))
         16))
       (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
     (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
    (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
   'int16
   16)
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t t151) 16) 'int32 16))
template:
  (vs-mpy-add
 ...
 (combine
  (cast
   ...
   (vs-shift-right
    ...
    (vs-mpy-add
     ...
     (combine
      (vs-mpy-add
       ...
       (combine
        #<load-data>
        (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))))
       (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
       #f
       #f
       #f
       'int16)
      (broadcast
       ...
       (sca-mul
        (sca-cast
         (sca-mul
          (sca-sub (int16_t t149) (int16_t t150))
          (int16_t (bv #x0040 16)))
         'int32)
        (sca-cast (int16_t input2_multiplier) 'int32))))
     (list (int8_t (bv #x01 8)) (int16_t input1_multiplier))
     #f
     #f
     #f
     'int32)
    (int32_t (bv #x00000010 32))
    #t
    x?$2072
    #t)
   'int16
   #t)
  (broadcast ... (int16_t t151)))
 (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
 #f
 #f
 #f
 'int32)
axioms:
  '(#t #t)
optimized-halide-expr:
  (vec-add
 (vec-cast #<abstr-halide-expr> 'int32 16)
 (vec-cast #<abstr-halide-expr> 'int32 16))
optimized-template:
  (vs-mpy-add
 ...
 (combine #<abstr-expr> #<abstr-expr>)
 (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
 #f
 #f
 #f
 'int32)
optimized Halide 0:
  (int32_t
 (bvadd (sign-extend (app abstr-vals$2447 0) (bitvector 32)) (sign-extend (app abstr-vals$2448 0) (bitvector 32))))
optimized x86 0:
  (int32_t
 (bvadd (sign-extend (ite c$2320 (app abstr-vals$2447 idx$2319) (app abstr-vals$2448 idx$2319)) (bitvector 32)) (sign-extend (ite c$2322 (app abstr-vals$2447 idx$2321) (app abstr-vals$2448 idx$2321)) (bitvector 32))))
Ran synthesizer for 95 ms
(model
 [idx$2319 0]
 [c$2320 #f]
 [idx$2321 0]
 [c$2322 #t])
(vec-add
 (vec-cast #<abstr-halide-expr> 'int32 16)
 (vec-cast #<abstr-halide-expr> 'int32 16))
(vs-mpy-add
 ...
 (combine
  (cast
   ...
   (vs-shift-right
    ...
    (vs-mpy-add
     ...
     (combine
      (vs-mpy-add
       ...
       (combine
        #<load-data>
        (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))))
       (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
       #f
       #f
       #f
       'int16)
      (broadcast
       ...
       (sca-mul
        (sca-cast
         (sca-mul
          (sca-sub (int16_t t149) (int16_t t150))
          (int16_t (bv #x0040 16)))
         'int32)
        (sca-cast (int16_t input2_multiplier) 'int32))))
     (list (int8_t (bv #x01 8)) (int16_t input1_multiplier))
     #f
     #f
     #f
     'int32)
    (int32_t (bv #x00000010 32))
    #t
    x?$2072
    #t)
   'int16
   #t)
  (broadcast ... (int16_t t151)))
 (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
 #f
 #f
 #f
 'int32)
Ran bounds analysis for 78 ms
Ran bounds analysis for 75 ms
"Extended success?"
#t
(vs-mpy-add
 ...
 (combine
  (cast
   ...
   (vs-shift-right
    ...
    (vs-mpy-add
     ...
     (combine
      (vs-mpy-add
       ...
       (combine
        #<load-data>
        (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))))
       (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
       #f
       #f
       #f
       'int16)
      (broadcast
       ...
       (sca-mul
        (sca-cast
         (sca-mul
          (sca-sub (int16_t t149) (int16_t t150))
          (int16_t (bv #x0040 16)))
         'int32)
        (sca-cast (int16_t input2_multiplier) 'int32))))
     (list (int8_t (bv #x01 8)) (int16_t input1_multiplier))
     #f
     #f
     #f
     'int32)
    (int32_t (bv #x00000010 32))
    #t
    x?$2072
    #t)
   'int16
   #t)
  (broadcast ... (int16_t t151)))
 (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
 #f
 #f
 #f
 'int32)
"Building Expr:"
(vec-min
 (vec-add
  (vec-cast
   (vec-cast
    (vec-max
     (vec-min
      (vec-add
       (vec-bwand
        (sca-broadcast (int32_t (bv #x00000001 32)) 16)
        (vec-div
         (vec-add
          (vec-mul
           (vec-cast
            (vec-add
             (vec-mul
              (vec-cast
               (load
                (buffer input1 'uint8)
                (ramp
                 (sca-add
                  (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
                  (sca-sub
                   (sca-sub (var-lookup 't75) (var-lookup 't81))
                   (var-lookup 'input1.min.0)))
                 1
                 16)
                (aligned 1 0))
               'int16
               16)
              (sca-broadcast (int16_t (bv #x0040 16)) 16))
             (sca-broadcast
              (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))
              16))
            'int32
            16)
           (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
          (sca-broadcast
           (sca-mul
            (sca-cast
             (sca-mul
              (sca-sub (int16_t t149) (int16_t t150))
              (int16_t (bv #x0040 16)))
             'int32)
            (sca-cast (int16_t input2_multiplier) 'int32))
           16))
         (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
       (vec-div
        (vec-add
         (vec-mul
          (vec-cast
           (vec-add
            (vec-mul
             (vec-cast
              (load
               (buffer input1 'uint8)
               (ramp
                (sca-add
                 (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
                 (sca-sub
                  (sca-sub (var-lookup 't75) (var-lookup 't81))
                  (var-lookup 'input1.min.0)))
                1
                16)
               (aligned 1 0))
              'int16
              16)
             (sca-broadcast (int16_t (bv #x0040 16)) 16))
            (sca-broadcast
             (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))
             16))
           'int32
           16)
          (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
         (sca-broadcast
          (sca-mul
           (sca-cast
            (sca-mul
             (sca-sub (int16_t t149) (int16_t t150))
             (int16_t (bv #x0040 16)))
            'int32)
           (sca-cast (int16_t input2_multiplier) 'int32))
          16))
        (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
      (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
     (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
    'int16
    16)
   'int32
   16)
  (vec-cast (sca-broadcast (int16_t t151) 16) 'int32 16))
 (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
"Fold templates"
(list
 (cast
  ...
  (vs-shift-right
   ...
   (vs-mpy-add
    ...
    (combine
     (vs-mpy-add
      ...
      (combine
       #<load-data>
       (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))))
      (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
      #f
      #f
      #f
      'int16)
     (broadcast
      ...
      (sca-mul
       (sca-cast
        (sca-mul
         (sca-sub (int16_t t149) (int16_t t150))
         (int16_t (bv #x0040 16)))
        'int32)
       (sca-cast (int16_t input2_multiplier) 'int32))))
    (list (int8_t (bv #x01 8)) (int16_t input1_multiplier))
    #f
    #f
    #f
    'int32)
   (int32_t (bv #x00000010 32))
   #t
   x?$2072
   #t)
  'int32
  x?$2456))
here(#(struct:cast ... #(struct:vs-shift-right ... #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t148) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f #f #f int16) #(struct:broadcast ... #(struct:sca-mul #(struct:sca-cast #(struct:sca-mul #(struct:sca-sub #(struct:int16_t t149) #(struct:int16_t t150)) #(struct:int16_t (bv #x0040 16))) int32) #(struct:sca-cast #(struct:int16_t input2_multiplier) int32)))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t input1_multiplier)) #f #f #f int32) #(struct:int32_t (bv #x00000010 32)) #t x?$2072 #t) int32 x?$2456))

"Replace templates"
'()
run-x86-synthesizer
halide-expr:
  (vec-min
 (vec-add
  (vec-cast
   (vec-cast
    (vec-max
     (vec-min
      (vec-add
       (vec-bwand
        (sca-broadcast (int32_t (bv #x00000001 32)) 16)
        (vec-div
         (vec-add
          (vec-mul
           (vec-cast
            (vec-add
             (vec-mul
              (vec-cast
               (load
                (buffer input1 'uint8)
                (ramp
                 (sca-add
                  (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
                  (sca-sub
                   (sca-sub (var-lookup 't75) (var-lookup 't81))
                   (var-lookup 'input1.min.0)))
                 1
                 16)
                (aligned 1 0))
               'int16
               16)
              (sca-broadcast (int16_t (bv #x0040 16)) 16))
             (sca-broadcast
              (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))
              16))
            'int32
            16)
           (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
          (sca-broadcast
           (sca-mul
            (sca-cast
             (sca-mul
              (sca-sub (int16_t t149) (int16_t t150))
              (int16_t (bv #x0040 16)))
             'int32)
            (sca-cast (int16_t input2_multiplier) 'int32))
           16))
         (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
       (vec-div
        (vec-add
         (vec-mul
          (vec-cast
           (vec-add
            (vec-mul
             (vec-cast
              (load
               (buffer input1 'uint8)
               (ramp
                (sca-add
                 (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
                 (sca-sub
                  (sca-sub (var-lookup 't75) (var-lookup 't81))
                  (var-lookup 'input1.min.0)))
                1
                16)
               (aligned 1 0))
              'int16
              16)
             (sca-broadcast (int16_t (bv #x0040 16)) 16))
            (sca-broadcast
             (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))
             16))
           'int32
           16)
          (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
         (sca-broadcast
          (sca-mul
           (sca-cast
            (sca-mul
             (sca-sub (int16_t t149) (int16_t t150))
             (int16_t (bv #x0040 16)))
            'int32)
           (sca-cast (int16_t input2_multiplier) 'int32))
          16))
        (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
      (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
     (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
    'int16
    16)
   'int32
   16)
  (vec-cast (sca-broadcast (int16_t t151) 16) 'int32 16))
 (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
template:
  (cast
 ...
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (combine
    (vs-mpy-add
     ...
     (combine
      #<load-data>
      (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))))
     (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
     #f
     #f
     #f
     'int16)
    (broadcast
     ...
     (sca-mul
      (sca-cast
       (sca-mul
        (sca-sub (int16_t t149) (int16_t t150))
        (int16_t (bv #x0040 16)))
       'int32)
      (sca-cast (int16_t input2_multiplier) 'int32))))
   (list (int8_t (bv #x01 8)) (int16_t input1_multiplier))
   #f
   #f
   #f
   'int32)
  (int32_t (bv #x00000010 32))
  #t
  x?$2072
  #t)
 'int32
 x?$2456)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$2457 idx) (bv #x00008000 32)) (bvsle (bv #xffff8000 32) (app abstr-vals$2457 idx)))))
optimized-halide-expr:
  (vec-min
 (vec-add
  (vec-cast
   (vec-cast
    (vec-max
     (vec-min
      #<abstr-halide-expr>
      (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
     (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
    'int16
    16)
   'int32
   16)
  (vec-cast (sca-broadcast (int16_t t151) 16) 'int32 16))
 (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
optimized-template:
  (cast ... #<abstr-expr> 'int32 x?$2456)
optimized Halide 0:
  (int32_t
 (ite (bvsle (bvadd (sign-extend t151 (bitvector 32)) (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (app abstr-vals$2457 0) (bv #x00007fff 32)) (app abstr-vals$2457 0) (bv #x00007fff 32))) (ite (bvsle (app abstr-vals$2457 0) (bv #x00007fff 32)) (app abstr-vals$2457 0) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32))) (bv #x00007fff 32)) (bvadd (sign-extend t151 (bitvector 32)) (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (app abstr-vals$2457 0) (bv #x00007fff 32)) (app abstr-vals$2457 0) (bv #x00007fff 32))) (ite (bvsle (app abstr-vals$2457 0) (bv #x00007fff 32)) (app abstr-vals$2457 0) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32))) (bv #x00007fff 32)))
optimized x86 0:
  (int32_t (app abstr-vals$2457 0))
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (vec-min
 (vec-add
  (vec-cast
   (vec-cast
    (vec-max
     (vec-min
      (vec-add
       (vec-bwand
        (sca-broadcast (int32_t (bv #x00000001 32)) 16)
        (vec-div
         (vec-add
          (vec-mul
           (vec-cast
            (vec-add
             (vec-mul
              (vec-cast
               (load
                (buffer input1 'uint8)
                (ramp
                 (sca-add
                  (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
                  (sca-sub
                   (sca-sub (var-lookup 't75) (var-lookup 't81))
                   (var-lookup 'input1.min.0)))
                 1
                 16)
                (aligned 1 0))
               'int16
               16)
              (sca-broadcast (int16_t (bv #x0040 16)) 16))
             (sca-broadcast
              (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))
              16))
            'int32
            16)
           (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
          (sca-broadcast
           (sca-mul
            (sca-cast
             (sca-mul
              (sca-sub (int16_t t149) (int16_t t150))
              (int16_t (bv #x0040 16)))
             'int32)
            (sca-cast (int16_t input2_multiplier) 'int32))
           16))
         (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
       (vec-div
        (vec-add
         (vec-mul
          (vec-cast
           (vec-add
            (vec-mul
             (vec-cast
              (load
               (buffer input1 'uint8)
               (ramp
                (sca-add
                 (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
                 (sca-sub
                  (sca-sub (var-lookup 't75) (var-lookup 't81))
                  (var-lookup 'input1.min.0)))
                1
                16)
               (aligned 1 0))
              'int16
              16)
             (sca-broadcast (int16_t (bv #x0040 16)) 16))
            (sca-broadcast
             (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))
             16))
           'int32
           16)
          (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
         (sca-broadcast
          (sca-mul
           (sca-cast
            (sca-mul
             (sca-sub (int16_t t149) (int16_t t150))
             (int16_t (bv #x0040 16)))
            'int32)
           (sca-cast (int16_t input2_multiplier) 'int32))
          16))
        (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
      (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
     (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
    'int16
    16)
   'int32
   16)
  (vec-cast (sca-broadcast (int16_t t151) 16) 'int32 16))
 (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
template:
  (minimum
 ...
 (vs-mpy-add
  ...
  (combine
   (cast
    ...
    (vs-shift-right
     ...
     (vs-mpy-add
      ...
      (combine
       (vs-mpy-add
        ...
        (combine
         #<load-data>
         (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))))
        (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
        #f
        #f
        #f
        'int16)
       (broadcast
        ...
        (sca-mul
         (sca-cast
          (sca-mul
           (sca-sub (int16_t t149) (int16_t t150))
           (int16_t (bv #x0040 16)))
          'int32)
         (sca-cast (int16_t input2_multiplier) 'int32))))
      (list (int8_t (bv #x01 8)) (int16_t input1_multiplier))
      #f
      #f
      #f
      'int32)
     (int32_t (bv #x00000010 32))
     #t
     x?$2072
     #t)
    'int16
    #t)
   (broadcast ... (int16_t t151)))
  (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
  #f
  #f
  #f
  'int32)
 (broadcast ... (int32_t (bv #x00007fff 32))))
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$2458 idx) (bv #x0000fffe 32)) (bvsle (bv #xffff0000 32) (app abstr-vals$2458 idx))))
 (forall (idx) (&& (bvsle (app abstr-vals$2459 idx) (bv #x00007fff 32)) (bvsle (bv #x00007fff 32) (app abstr-vals$2459 idx)))))
optimized-halide-expr:
  (vec-min #<abstr-halide-expr> #<abstr-halide-expr>)
optimized-template:
  (minimum ... #<abstr-expr> #<abstr-expr>)
optimized Halide 0:
  (int32_t
 (ite (bvsle (app abstr-vals$2458 0) (app abstr-vals$2459 0)) (app abstr-vals$2458 0) (app abstr-vals$2459 0)))
optimized x86 0:
  (int32_t
 (ite (bvsle (app abstr-vals$2458 0) (app abstr-vals$2459 0)) (app abstr-vals$2458 0) (app abstr-vals$2459 0)))
Ran synthesizer for 55 ms
(model)
(vec-min #<abstr-halide-expr> #<abstr-halide-expr>)
(minimum
 ...
 (vs-mpy-add
  ...
  (combine
   (cast
    ...
    (vs-shift-right
     ...
     (vs-mpy-add
      ...
      (combine
       (vs-mpy-add
        ...
        (combine
         #<load-data>
         (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))))
        (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
        #f
        #f
        #f
        'int16)
       (broadcast
        ...
        (sca-mul
         (sca-cast
          (sca-mul
           (sca-sub (int16_t t149) (int16_t t150))
           (int16_t (bv #x0040 16)))
          'int32)
         (sca-cast (int16_t input2_multiplier) 'int32))))
      (list (int8_t (bv #x01 8)) (int16_t input1_multiplier))
      #f
      #f
      #f
      'int32)
     (int32_t (bv #x00000010 32))
     #t
     x?$2072
     #t)
    'int16
    #t)
   (broadcast ... (int16_t t151)))
  (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
  #f
  #f
  #f
  'int32)
 (broadcast ... (int32_t (bv #x00007fff 32))))
Ran bounds analysis for 48 ms
Ran bounds analysis for 61 ms
"Extended success?"
#t
(minimum
 ...
 (vs-mpy-add
  ...
  (combine
   (cast
    ...
    (vs-shift-right
     ...
     (vs-mpy-add
      ...
      (combine
       (vs-mpy-add
        ...
        (combine
         #<load-data>
         (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))))
        (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
        #f
        #f
        #f
        'int16)
       (broadcast
        ...
        (sca-mul
         (sca-cast
          (sca-mul
           (sca-sub (int16_t t149) (int16_t t150))
           (int16_t (bv #x0040 16)))
          'int32)
         (sca-cast (int16_t input2_multiplier) 'int32))))
      (list (int8_t (bv #x01 8)) (int16_t input1_multiplier))
      #f
      #f
      #f
      'int32)
     (int32_t (bv #x00000010 32))
     #t
     x?$2072
     #t)
    'int16
    #t)
   (broadcast ... (int16_t t151)))
  (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
  #f
  #f
  #f
  'int32)
 (broadcast ... (int32_t (bv #x00007fff 32))))
"Building Expr:"
(vec-max
 (vec-min
  (vec-add
   (vec-cast
    (vec-cast
     (vec-max
      (vec-min
       (vec-add
        (vec-bwand
         (sca-broadcast (int32_t (bv #x00000001 32)) 16)
         (vec-div
          (vec-add
           (vec-mul
            (vec-cast
             (vec-add
              (vec-mul
               (vec-cast
                (load
                 (buffer input1 'uint8)
                 (ramp
                  (sca-add
                   (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
                   (sca-sub
                    (sca-sub (var-lookup 't75) (var-lookup 't81))
                    (var-lookup 'input1.min.0)))
                  1
                  16)
                 (aligned 1 0))
                'int16
                16)
               (sca-broadcast (int16_t (bv #x0040 16)) 16))
              (sca-broadcast
               (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))
               16))
             'int32
             16)
            (vec-cast
             (sca-broadcast (int16_t input1_multiplier) 16)
             'int32
             16))
           (sca-broadcast
            (sca-mul
             (sca-cast
              (sca-mul
               (sca-sub (int16_t t149) (int16_t t150))
               (int16_t (bv #x0040 16)))
              'int32)
             (sca-cast (int16_t input2_multiplier) 'int32))
            16))
          (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
        (vec-div
         (vec-add
          (vec-mul
           (vec-cast
            (vec-add
             (vec-mul
              (vec-cast
               (load
                (buffer input1 'uint8)
                (ramp
                 (sca-add
                  (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
                  (sca-sub
                   (sca-sub (var-lookup 't75) (var-lookup 't81))
                   (var-lookup 'input1.min.0)))
                 1
                 16)
                (aligned 1 0))
               'int16
               16)
              (sca-broadcast (int16_t (bv #x0040 16)) 16))
             (sca-broadcast
              (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))
              16))
            'int32
            16)
           (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
          (sca-broadcast
           (sca-mul
            (sca-cast
             (sca-mul
              (sca-sub (int16_t t149) (int16_t t150))
              (int16_t (bv #x0040 16)))
             'int32)
            (sca-cast (int16_t input2_multiplier) 'int32))
           16))
         (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
       (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
      (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
     'int16
     16)
    'int32
    16)
   (vec-cast (sca-broadcast (int16_t t151) 16) 'int32 16))
  (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
 (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
"Fold templates"
'()
here()

"Replace templates"
(list
 (cast
  ...
  (vs-mpy-add
   ...
   (combine
    (cast
     ...
     (vs-shift-right
      ...
      (vs-mpy-add
       ...
       (combine
        (vs-mpy-add
         ...
         (combine
          #<load-data>
          (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))))
         (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
         #f
         #f
         #f
         'int16)
        (broadcast
         ...
         (sca-mul
          (sca-cast
           (sca-mul
            (sca-sub (int16_t t149) (int16_t t150))
            (int16_t (bv #x0040 16)))
           'int32)
          (sca-cast (int16_t input2_multiplier) 'int32))))
       (list (int8_t (bv #x01 8)) (int16_t input1_multiplier))
       #f
       #f
       #f
       'int32)
      (int32_t (bv #x00000010 32))
      #t
      x?$2072
      #t)
     'int16
     #t)
    (broadcast ... (int16_t t151)))
   (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
   #f
   #f
   #f
   'int32)
  'int32
  #t)
 (cast ... (broadcast ... (int32_t (bv #x00007fff 32))) 'int32 #t))
run-x86-synthesizer
halide-expr:
  (vec-max
 (vec-min
  (vec-add
   (vec-cast
    (vec-cast
     (vec-max
      (vec-min
       (vec-add
        (vec-bwand
         (sca-broadcast (int32_t (bv #x00000001 32)) 16)
         (vec-div
          (vec-add
           (vec-mul
            (vec-cast
             (vec-add
              (vec-mul
               (vec-cast
                (load
                 (buffer input1 'uint8)
                 (ramp
                  (sca-add
                   (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
                   (sca-sub
                    (sca-sub (var-lookup 't75) (var-lookup 't81))
                    (var-lookup 'input1.min.0)))
                  1
                  16)
                 (aligned 1 0))
                'int16
                16)
               (sca-broadcast (int16_t (bv #x0040 16)) 16))
              (sca-broadcast
               (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))
               16))
             'int32
             16)
            (vec-cast
             (sca-broadcast (int16_t input1_multiplier) 16)
             'int32
             16))
           (sca-broadcast
            (sca-mul
             (sca-cast
              (sca-mul
               (sca-sub (int16_t t149) (int16_t t150))
               (int16_t (bv #x0040 16)))
              'int32)
             (sca-cast (int16_t input2_multiplier) 'int32))
            16))
          (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
        (vec-div
         (vec-add
          (vec-mul
           (vec-cast
            (vec-add
             (vec-mul
              (vec-cast
               (load
                (buffer input1 'uint8)
                (ramp
                 (sca-add
                  (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
                  (sca-sub
                   (sca-sub (var-lookup 't75) (var-lookup 't81))
                   (var-lookup 'input1.min.0)))
                 1
                 16)
                (aligned 1 0))
               'int16
               16)
              (sca-broadcast (int16_t (bv #x0040 16)) 16))
             (sca-broadcast
              (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))
              16))
            'int32
            16)
           (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
          (sca-broadcast
           (sca-mul
            (sca-cast
             (sca-mul
              (sca-sub (int16_t t149) (int16_t t150))
              (int16_t (bv #x0040 16)))
             'int32)
            (sca-cast (int16_t input2_multiplier) 'int32))
           16))
         (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
       (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
      (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
     'int16
     16)
    'int32
    16)
   (vec-cast (sca-broadcast (int16_t t151) 16) 'int32 16))
  (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
 (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
template:
  (cast ... (broadcast ... (int32_t (bv #x00007fff 32))) 'int32 #t)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$2467 idx) (bv #x00007fff 32)) (bvsle (bv #x00007fff 32) (app abstr-vals$2467 idx)))))
optimized-halide-expr:
  (vec-max
 (vec-min
  (vec-add
   (vec-cast
    (vec-cast
     (vec-max
      (vec-min
       (vec-add
        (vec-bwand
         (sca-broadcast (int32_t (bv #x00000001 32)) 16)
         (vec-div
          (vec-add
           (vec-mul
            (vec-cast
             (vec-add
              (vec-mul
               (vec-cast
                (load
                 (buffer input1 'uint8)
                 (ramp
                  (sca-add
                   (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
                   (sca-sub
                    (sca-sub (var-lookup 't75) (var-lookup 't81))
                    (var-lookup 'input1.min.0)))
                  1
                  16)
                 (aligned 1 0))
                'int16
                16)
               (sca-broadcast (int16_t (bv #x0040 16)) 16))
              (sca-broadcast
               (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))
               16))
             'int32
             16)
            (vec-cast
             (sca-broadcast (int16_t input1_multiplier) 16)
             'int32
             16))
           (sca-broadcast
            (sca-mul
             (sca-cast
              (sca-mul
               (sca-sub (int16_t t149) (int16_t t150))
               (int16_t (bv #x0040 16)))
              'int32)
             (sca-cast (int16_t input2_multiplier) 'int32))
            16))
          (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
        (vec-div
         (vec-add
          (vec-mul
           (vec-cast
            (vec-add
             (vec-mul
              (vec-cast
               (load
                (buffer input1 'uint8)
                (ramp
                 (sca-add
                  (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
                  (sca-sub
                   (sca-sub (var-lookup 't75) (var-lookup 't81))
                   (var-lookup 'input1.min.0)))
                 1
                 16)
                (aligned 1 0))
               'int16
               16)
              (sca-broadcast (int16_t (bv #x0040 16)) 16))
             (sca-broadcast
              (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))
              16))
            'int32
            16)
           (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
          (sca-broadcast
           (sca-mul
            (sca-cast
             (sca-mul
              (sca-sub (int16_t t149) (int16_t t150))
              (int16_t (bv #x0040 16)))
             'int32)
            (sca-cast (int16_t input2_multiplier) 'int32))
           16))
         (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
       #<abstr-halide-expr>)
      (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
     'int16
     16)
    'int32
    16)
   (vec-cast (sca-broadcast (int16_t t151) 16) 'int32 16))
  #<abstr-halide-expr>)
 (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
optimized-template:
  (cast ... #<abstr-expr> 'int32 #t)
optimized Halide 0:
  (int32_t
 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (sign-extend t151 (bitvector 32)) (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (app abstr-vals$2467 0)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (app abstr-vals$2467 0))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (app abstr-vals$2467 0)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (app abstr-vals$2467 0)) (bv #xffff8000 32))) (bitvector 32))) (app abstr-vals$2467 0)) (bvadd (sign-extend t151 (bitvector 32)) (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (app abstr-vals$2467 0)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (app abstr-vals$2467 0))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (app abstr-vals$2467 0)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (app abstr-vals$2467 0)) (bv #xffff8000 32))) (bitvector 32))) (app abstr-vals$2467 0))) (ite (bvsle (bvadd (sign-extend t151 (bitvector 32)) (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (app abstr-vals$2467 0)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (app abstr-vals$2467 0))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (app abstr-vals$2467 0)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (app abstr-vals$2467 0)) (bv #xffff8000 32))) (bitvector 32))) (app abstr-vals$2467 0)) (bvadd (sign-extend t151 (bitvector 32)) (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (app abstr-vals$2467 0)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (app abstr-vals$2467 0))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (app abstr-vals$2467 0)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (app abstr-vals$2467 0)) (bv #xffff8000 32))) (bitvector 32))) (app abstr-vals$2467 0)) (bv #xffff8000 32)))
optimized x86 0:
  (int32_t (app abstr-vals$2467 0))
run-x86-synthesizer
halide-expr:
  (vec-max
 (vec-min
  (vec-add
   (vec-cast
    (vec-cast
     (vec-max
      (vec-min
       (vec-add
        (vec-bwand
         (sca-broadcast (int32_t (bv #x00000001 32)) 16)
         (vec-div
          (vec-add
           (vec-mul
            (vec-cast
             (vec-add
              (vec-mul
               (vec-cast
                (load
                 (buffer input1 'uint8)
                 (ramp
                  (sca-add
                   (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
                   (sca-sub
                    (sca-sub (var-lookup 't75) (var-lookup 't81))
                    (var-lookup 'input1.min.0)))
                  1
                  16)
                 (aligned 1 0))
                'int16
                16)
               (sca-broadcast (int16_t (bv #x0040 16)) 16))
              (sca-broadcast
               (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))
               16))
             'int32
             16)
            (vec-cast
             (sca-broadcast (int16_t input1_multiplier) 16)
             'int32
             16))
           (sca-broadcast
            (sca-mul
             (sca-cast
              (sca-mul
               (sca-sub (int16_t t149) (int16_t t150))
               (int16_t (bv #x0040 16)))
              'int32)
             (sca-cast (int16_t input2_multiplier) 'int32))
            16))
          (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
        (vec-div
         (vec-add
          (vec-mul
           (vec-cast
            (vec-add
             (vec-mul
              (vec-cast
               (load
                (buffer input1 'uint8)
                (ramp
                 (sca-add
                  (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
                  (sca-sub
                   (sca-sub (var-lookup 't75) (var-lookup 't81))
                   (var-lookup 'input1.min.0)))
                 1
                 16)
                (aligned 1 0))
               'int16
               16)
              (sca-broadcast (int16_t (bv #x0040 16)) 16))
             (sca-broadcast
              (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))
              16))
            'int32
            16)
           (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
          (sca-broadcast
           (sca-mul
            (sca-cast
             (sca-mul
              (sca-sub (int16_t t149) (int16_t t150))
              (int16_t (bv #x0040 16)))
             'int32)
            (sca-cast (int16_t input2_multiplier) 'int32))
           16))
         (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
       (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
      (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
     'int16
     16)
    'int32
    16)
   (vec-cast (sca-broadcast (int16_t t151) 16) 'int32 16))
  (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
 (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
template:
  (cast
 ...
 (vs-mpy-add
  ...
  (combine
   (cast
    ...
    (vs-shift-right
     ...
     (vs-mpy-add
      ...
      (combine
       (vs-mpy-add
        ...
        (combine
         #<load-data>
         (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))))
        (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
        #f
        #f
        #f
        'int16)
       (broadcast
        ...
        (sca-mul
         (sca-cast
          (sca-mul
           (sca-sub (int16_t t149) (int16_t t150))
           (int16_t (bv #x0040 16)))
          'int32)
         (sca-cast (int16_t input2_multiplier) 'int32))))
      (list (int8_t (bv #x01 8)) (int16_t input1_multiplier))
      #f
      #f
      #f
      'int32)
     (int32_t (bv #x00000010 32))
     #t
     x?$2072
     #t)
    'int16
    #t)
   (broadcast ... (int16_t t151)))
  (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
  #f
  #f
  #f
  'int32)
 'int32
 #t)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$2468 idx) (bv #x0000fffe 32)) (bvsle (bv #xffff0000 32) (app abstr-vals$2468 idx)))))
optimized-halide-expr:
  (vec-max
 (vec-min #<abstr-halide-expr> (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
 (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
optimized-template:
  (cast ... #<abstr-expr> 'int32 #t)
optimized Halide 0:
  (int32_t
 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (app abstr-vals$2468 0) (bv #x00007fff 32)) (app abstr-vals$2468 0) (bv #x00007fff 32))) (ite (bvsle (app abstr-vals$2468 0) (bv #x00007fff 32)) (app abstr-vals$2468 0) (bv #x00007fff 32)) (bv #xffff8000 32)))
optimized x86 0:
  (int32_t (app abstr-vals$2468 0))
Ran synthesizer for 99 ms
(unsat)
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (vec-max
 (vec-min
  (vec-add
   (vec-cast
    (vec-cast
     (vec-max
      (vec-min
       (vec-add
        (vec-bwand
         (sca-broadcast (int32_t (bv #x00000001 32)) 16)
         (vec-div
          (vec-add
           (vec-mul
            (vec-cast
             (vec-add
              (vec-mul
               (vec-cast
                (load
                 (buffer input1 'uint8)
                 (ramp
                  (sca-add
                   (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
                   (sca-sub
                    (sca-sub (var-lookup 't75) (var-lookup 't81))
                    (var-lookup 'input1.min.0)))
                  1
                  16)
                 (aligned 1 0))
                'int16
                16)
               (sca-broadcast (int16_t (bv #x0040 16)) 16))
              (sca-broadcast
               (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))
               16))
             'int32
             16)
            (vec-cast
             (sca-broadcast (int16_t input1_multiplier) 16)
             'int32
             16))
           (sca-broadcast
            (sca-mul
             (sca-cast
              (sca-mul
               (sca-sub (int16_t t149) (int16_t t150))
               (int16_t (bv #x0040 16)))
              'int32)
             (sca-cast (int16_t input2_multiplier) 'int32))
            16))
          (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
        (vec-div
         (vec-add
          (vec-mul
           (vec-cast
            (vec-add
             (vec-mul
              (vec-cast
               (load
                (buffer input1 'uint8)
                (ramp
                 (sca-add
                  (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
                  (sca-sub
                   (sca-sub (var-lookup 't75) (var-lookup 't81))
                   (var-lookup 'input1.min.0)))
                 1
                 16)
                (aligned 1 0))
               'int16
               16)
              (sca-broadcast (int16_t (bv #x0040 16)) 16))
             (sca-broadcast
              (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))
              16))
            'int32
            16)
           (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
          (sca-broadcast
           (sca-mul
            (sca-cast
             (sca-mul
              (sca-sub (int16_t t149) (int16_t t150))
              (int16_t (bv #x0040 16)))
             'int32)
            (sca-cast (int16_t input2_multiplier) 'int32))
           16))
         (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
       (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
      (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
     'int16
     16)
    'int32
    16)
   (vec-cast (sca-broadcast (int16_t t151) 16) 'int32 16))
  (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
 (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
template:
  (maximum
 ...
 (minimum
  ...
  (vs-mpy-add
   ...
   (combine
    (cast
     ...
     (vs-shift-right
      ...
      (vs-mpy-add
       ...
       (combine
        (vs-mpy-add
         ...
         (combine
          #<load-data>
          (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))))
         (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
         #f
         #f
         #f
         'int16)
        (broadcast
         ...
         (sca-mul
          (sca-cast
           (sca-mul
            (sca-sub (int16_t t149) (int16_t t150))
            (int16_t (bv #x0040 16)))
           'int32)
          (sca-cast (int16_t input2_multiplier) 'int32))))
       (list (int8_t (bv #x01 8)) (int16_t input1_multiplier))
       #f
       #f
       #f
       'int32)
      (int32_t (bv #x00000010 32))
      #t
      x?$2072
      #t)
     'int16
     #t)
    (broadcast ... (int16_t t151)))
   (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
   #f
   #f
   #f
   'int32)
  (broadcast ... (int32_t (bv #x00007fff 32))))
 (broadcast ... (int32_t (bv #xffff8000 32))))
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$2469 idx) (bv #x00007fff 32)) (bvsle (bv #xffff0000 32) (app abstr-vals$2469 idx))))
 (forall (idx) (&& (bvsle (app abstr-vals$2470 idx) (bv #xffff8000 32)) (bvsle (bv #xffff8000 32) (app abstr-vals$2470 idx)))))
optimized-halide-expr:
  (vec-max #<abstr-halide-expr> #<abstr-halide-expr>)
optimized-template:
  (maximum ... #<abstr-expr> #<abstr-expr>)
optimized Halide 0:
  (int32_t
 (ite (bvsle (app abstr-vals$2470 0) (app abstr-vals$2469 0)) (app abstr-vals$2469 0) (app abstr-vals$2470 0)))
optimized x86 0:
  (int32_t
 (ite (bvsle (app abstr-vals$2470 0) (app abstr-vals$2469 0)) (app abstr-vals$2469 0) (app abstr-vals$2470 0)))
Ran synthesizer for 55 ms
(model)
(vec-max #<abstr-halide-expr> #<abstr-halide-expr>)
(maximum
 ...
 (minimum
  ...
  (vs-mpy-add
   ...
   (combine
    (cast
     ...
     (vs-shift-right
      ...
      (vs-mpy-add
       ...
       (combine
        (vs-mpy-add
         ...
         (combine
          #<load-data>
          (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))))
         (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
         #f
         #f
         #f
         'int16)
        (broadcast
         ...
         (sca-mul
          (sca-cast
           (sca-mul
            (sca-sub (int16_t t149) (int16_t t150))
            (int16_t (bv #x0040 16)))
           'int32)
          (sca-cast (int16_t input2_multiplier) 'int32))))
       (list (int8_t (bv #x01 8)) (int16_t input1_multiplier))
       #f
       #f
       #f
       'int32)
      (int32_t (bv #x00000010 32))
      #t
      x?$2072
      #t)
     'int16
     #t)
    (broadcast ... (int16_t t151)))
   (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
   #f
   #f
   #f
   'int32)
  (broadcast ... (int32_t (bv #x00007fff 32))))
 (broadcast ... (int32_t (bv #xffff8000 32))))
Ran bounds analysis for 39 ms
Ran bounds analysis for 40 ms
"Extended success?"
#t
(maximum
 ...
 (minimum
  ...
  (vs-mpy-add
   ...
   (combine
    (cast
     ...
     (vs-shift-right
      ...
      (vs-mpy-add
       ...
       (combine
        (vs-mpy-add
         ...
         (combine
          #<load-data>
          (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))))
         (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
         #f
         #f
         #f
         'int16)
        (broadcast
         ...
         (sca-mul
          (sca-cast
           (sca-mul
            (sca-sub (int16_t t149) (int16_t t150))
            (int16_t (bv #x0040 16)))
           'int32)
          (sca-cast (int16_t input2_multiplier) 'int32))))
       (list (int8_t (bv #x01 8)) (int16_t input1_multiplier))
       #f
       #f
       #f
       'int32)
      (int32_t (bv #x00000010 32))
      #t
      x?$2072
      #t)
     'int16
     #t)
    (broadcast ... (int16_t t151)))
   (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
   #f
   #f
   #f
   'int32)
  (broadcast ... (int32_t (bv #x00007fff 32))))
 (broadcast ... (int32_t (bv #xffff8000 32))))
"Building Expr:"
(vec-cast
 (vec-max
  (vec-min
   (vec-add
    (vec-cast
     (vec-cast
      (vec-max
       (vec-min
        (vec-add
         (vec-bwand
          (sca-broadcast (int32_t (bv #x00000001 32)) 16)
          (vec-div
           (vec-add
            (vec-mul
             (vec-cast
              (vec-add
               (vec-mul
                (vec-cast
                 (load
                  (buffer input1 'uint8)
                  (ramp
                   (sca-add
                    (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
                    (sca-sub
                     (sca-sub (var-lookup 't75) (var-lookup 't81))
                     (var-lookup 'input1.min.0)))
                   1
                   16)
                  (aligned 1 0))
                 'int16
                 16)
                (sca-broadcast (int16_t (bv #x0040 16)) 16))
               (sca-broadcast
                (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))
                16))
              'int32
              16)
             (vec-cast
              (sca-broadcast (int16_t input1_multiplier) 16)
              'int32
              16))
            (sca-broadcast
             (sca-mul
              (sca-cast
               (sca-mul
                (sca-sub (int16_t t149) (int16_t t150))
                (int16_t (bv #x0040 16)))
               'int32)
              (sca-cast (int16_t input2_multiplier) 'int32))
             16))
           (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
         (vec-div
          (vec-add
           (vec-mul
            (vec-cast
             (vec-add
              (vec-mul
               (vec-cast
                (load
                 (buffer input1 'uint8)
                 (ramp
                  (sca-add
                   (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
                   (sca-sub
                    (sca-sub (var-lookup 't75) (var-lookup 't81))
                    (var-lookup 'input1.min.0)))
                  1
                  16)
                 (aligned 1 0))
                'int16
                16)
               (sca-broadcast (int16_t (bv #x0040 16)) 16))
              (sca-broadcast
               (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))
               16))
             'int32
             16)
            (vec-cast
             (sca-broadcast (int16_t input1_multiplier) 16)
             'int32
             16))
           (sca-broadcast
            (sca-mul
             (sca-cast
              (sca-mul
               (sca-sub (int16_t t149) (int16_t t150))
               (int16_t (bv #x0040 16)))
              'int32)
             (sca-cast (int16_t input2_multiplier) 'int32))
            16))
          (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
        (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
       (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
      'int16
      16)
     'int32
     16)
    (vec-cast (sca-broadcast (int16_t t151) 16) 'int32 16))
   (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
  (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
 'int16
 16)
"Fold templates"
(list
 (vs-mpy-add
  ...
  (combine
   (cast
    ...
    (vs-shift-right
     ...
     (vs-mpy-add
      ...
      (combine
       (vs-mpy-add
        ...
        (combine
         #<load-data>
         (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))))
        (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
        #f
        #f
        #f
        'int16)
       (broadcast
        ...
        (sca-mul
         (sca-cast
          (sca-mul
           (sca-sub (int16_t t149) (int16_t t150))
           (int16_t (bv #x0040 16)))
          'int32)
         (sca-cast (int16_t input2_multiplier) 'int32))))
      (list (int8_t (bv #x01 8)) (int16_t input1_multiplier))
      #f
      #f
      #f
      'int32)
     (int32_t (bv #x00000010 32))
     #t
     x?$2072
     #t)
    'int16
    #t)
   (broadcast ... (int16_t t151)))
  (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
  x?$2473
  x?$2474
  x?$2475
  'int32))
here(#(struct:vs-mpy-add ... #<combine: #(struct:cast ... #(struct:vs-shift-right ... #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t148) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f #f #f int16) #(struct:broadcast ... #(struct:sca-mul #(struct:sca-cast #(struct:sca-mul #(struct:sca-sub #(struct:int16_t t149) #(struct:int16_t t150)) #(struct:int16_t (bv #x0040 16))) int32) #(struct:sca-cast #(struct:int16_t input2_multiplier) int32)))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t input1_multiplier)) #f #f #f int32) #(struct:int32_t (bv #x00000010 32)) #t x?$2072 #t) int16 #t) #(struct:broadcast ... #(struct:int16_t t151))> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) x?$2473 x?$2474 x?$2475 int32))

"Replace templates"
(list
 (cast
  ...
  (vs-mpy-add
   ...
   (combine
    (cast
     ...
     (vs-shift-right
      ...
      (vs-mpy-add
       ...
       (combine
        (vs-mpy-add
         ...
         (combine
          #<load-data>
          (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))))
         (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
         #f
         #f
         #f
         'int16)
        (broadcast
         ...
         (sca-mul
          (sca-cast
           (sca-mul
            (sca-sub (int16_t t149) (int16_t t150))
            (int16_t (bv #x0040 16)))
           'int32)
          (sca-cast (int16_t input2_multiplier) 'int32))))
       (list (int8_t (bv #x01 8)) (int16_t input1_multiplier))
       #f
       #f
       #f
       'int32)
      (int32_t (bv #x00000010 32))
      #t
      x?$2072
      #t)
     'int16
     #t)
    (broadcast ... (int16_t t151)))
   (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
   #f
   #f
   #f
   'int32)
  'int16
  #t)
 (cast ... (broadcast ... (int32_t (bv #x00007fff 32))) 'int16 #t)
 (cast
  ...
  (minimum
   ...
   (vs-mpy-add
    ...
    (combine
     (cast
      ...
      (vs-shift-right
       ...
       (vs-mpy-add
        ...
        (combine
         (vs-mpy-add
          ...
          (combine
           #<load-data>
           (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))))
          (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
          #f
          #f
          #f
          'int16)
         (broadcast
          ...
          (sca-mul
           (sca-cast
            (sca-mul
             (sca-sub (int16_t t149) (int16_t t150))
             (int16_t (bv #x0040 16)))
            'int32)
           (sca-cast (int16_t input2_multiplier) 'int32))))
        (list (int8_t (bv #x01 8)) (int16_t input1_multiplier))
        #f
        #f
        #f
        'int32)
       (int32_t (bv #x00000010 32))
       #t
       x?$2072
       #t)
      'int16
      #t)
     (broadcast ... (int16_t t151)))
    (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
    #f
    #f
    #f
    'int32)
   (broadcast ... (int32_t (bv #x00007fff 32))))
  'int16
  #t)
 (cast ... (broadcast ... (int32_t (bv #xffff8000 32))) 'int16 #t))
run-x86-synthesizer
halide-expr:
  (vec-cast
 (vec-max
  (vec-min
   (vec-add
    (vec-cast
     (vec-cast
      (vec-max
       (vec-min
        (vec-add
         (vec-bwand
          (sca-broadcast (int32_t (bv #x00000001 32)) 16)
          (vec-div
           (vec-add
            (vec-mul
             (vec-cast
              (vec-add
               (vec-mul
                (vec-cast
                 (load
                  (buffer input1 'uint8)
                  (ramp
                   (sca-add
                    (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
                    (sca-sub
                     (sca-sub (var-lookup 't75) (var-lookup 't81))
                     (var-lookup 'input1.min.0)))
                   1
                   16)
                  (aligned 1 0))
                 'int16
                 16)
                (sca-broadcast (int16_t (bv #x0040 16)) 16))
               (sca-broadcast
                (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))
                16))
              'int32
              16)
             (vec-cast
              (sca-broadcast (int16_t input1_multiplier) 16)
              'int32
              16))
            (sca-broadcast
             (sca-mul
              (sca-cast
               (sca-mul
                (sca-sub (int16_t t149) (int16_t t150))
                (int16_t (bv #x0040 16)))
               'int32)
              (sca-cast (int16_t input2_multiplier) 'int32))
             16))
           (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
         (vec-div
          (vec-add
           (vec-mul
            (vec-cast
             (vec-add
              (vec-mul
               (vec-cast
                (load
                 (buffer input1 'uint8)
                 (ramp
                  (sca-add
                   (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
                   (sca-sub
                    (sca-sub (var-lookup 't75) (var-lookup 't81))
                    (var-lookup 'input1.min.0)))
                  1
                  16)
                 (aligned 1 0))
                'int16
                16)
               (sca-broadcast (int16_t (bv #x0040 16)) 16))
              (sca-broadcast
               (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))
               16))
             'int32
             16)
            (vec-cast
             (sca-broadcast (int16_t input1_multiplier) 16)
             'int32
             16))
           (sca-broadcast
            (sca-mul
             (sca-cast
              (sca-mul
               (sca-sub (int16_t t149) (int16_t t150))
               (int16_t (bv #x0040 16)))
              'int32)
             (sca-cast (int16_t input2_multiplier) 'int32))
            16))
          (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
        (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
       (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
      'int16
      16)
     'int32
     16)
    (vec-cast (sca-broadcast (int16_t t151) 16) 'int32 16))
   (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
  (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
 'int16
 16)
template:
  (cast ... (broadcast ... (int32_t (bv #x00007fff 32))) 'int16 #t)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$2478 idx) (bv #x00007fff 32)) (bvsle (bv #x00007fff 32) (app abstr-vals$2478 idx)))))
optimized-halide-expr:
  (vec-cast
 (vec-max
  (vec-min
   (vec-add
    (vec-cast
     (vec-cast
      (vec-max
       (vec-min
        (vec-add
         (vec-bwand
          (sca-broadcast (int32_t (bv #x00000001 32)) 16)
          (vec-div
           (vec-add
            (vec-mul
             (vec-cast
              (vec-add
               (vec-mul
                (vec-cast
                 (load
                  (buffer input1 'uint8)
                  (ramp
                   (sca-add
                    (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
                    (sca-sub
                     (sca-sub (var-lookup 't75) (var-lookup 't81))
                     (var-lookup 'input1.min.0)))
                   1
                   16)
                  (aligned 1 0))
                 'int16
                 16)
                (sca-broadcast (int16_t (bv #x0040 16)) 16))
               (sca-broadcast
                (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))
                16))
              'int32
              16)
             (vec-cast
              (sca-broadcast (int16_t input1_multiplier) 16)
              'int32
              16))
            (sca-broadcast
             (sca-mul
              (sca-cast
               (sca-mul
                (sca-sub (int16_t t149) (int16_t t150))
                (int16_t (bv #x0040 16)))
               'int32)
              (sca-cast (int16_t input2_multiplier) 'int32))
             16))
           (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
         (vec-div
          (vec-add
           (vec-mul
            (vec-cast
             (vec-add
              (vec-mul
               (vec-cast
                (load
                 (buffer input1 'uint8)
                 (ramp
                  (sca-add
                   (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
                   (sca-sub
                    (sca-sub (var-lookup 't75) (var-lookup 't81))
                    (var-lookup 'input1.min.0)))
                  1
                  16)
                 (aligned 1 0))
                'int16
                16)
               (sca-broadcast (int16_t (bv #x0040 16)) 16))
              (sca-broadcast
               (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))
               16))
             'int32
             16)
            (vec-cast
             (sca-broadcast (int16_t input1_multiplier) 16)
             'int32
             16))
           (sca-broadcast
            (sca-mul
             (sca-cast
              (sca-mul
               (sca-sub (int16_t t149) (int16_t t150))
               (int16_t (bv #x0040 16)))
              'int32)
             (sca-cast (int16_t input2_multiplier) 'int32))
            16))
          (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
        #<abstr-halide-expr>)
       (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
      'int16
      16)
     'int32
     16)
    (vec-cast (sca-broadcast (int16_t t151) 16) 'int32 16))
   #<abstr-halide-expr>)
  (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
 'int16
 16)
optimized-template:
  (cast ... #<abstr-expr> 'int16 #t)
optimized Halide 0:
  (int16_t
 (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (sign-extend t151 (bitvector 32)) (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (app abstr-vals$2478 0)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (app abstr-vals$2478 0))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (app abstr-vals$2478 0)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (app abstr-vals$2478 0)) (bv #xffff8000 32))) (bitvector 32))) (app abstr-vals$2478 0)) (bvadd (sign-extend t151 (bitvector 32)) (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (app abstr-vals$2478 0)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (app abstr-vals$2478 0))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (app abstr-vals$2478 0)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (app abstr-vals$2478 0)) (bv #xffff8000 32))) (bitvector 32))) (app abstr-vals$2478 0))) (ite (bvsle (bvadd (sign-extend t151 (bitvector 32)) (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (app abstr-vals$2478 0)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (app abstr-vals$2478 0))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (app abstr-vals$2478 0)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (app abstr-vals$2478 0)) (bv #xffff8000 32))) (bitvector 32))) (app abstr-vals$2478 0)) (bvadd (sign-extend t151 (bitvector 32)) (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (app abstr-vals$2478 0)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (app abstr-vals$2478 0))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (app abstr-vals$2478 0)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (app abstr-vals$2478 0)) (bv #xffff8000 32))) (bitvector 32))) (app abstr-vals$2478 0)) (bv #xffff8000 32))))
optimized x86 0:
  (int16_t
 (ite (bvslt (app abstr-vals$2478 0) (bv #xffff8000 32)) (bv #x8000 16) (ite (bvslt (bv #x00007fff 32) (app abstr-vals$2478 0)) (bv #x7fff 16) (extract 15 0 (app abstr-vals$2478 0)))))
run-x86-synthesizer
halide-expr:
  (vec-cast
 (vec-max
  (vec-min
   (vec-add
    (vec-cast
     (vec-cast
      (vec-max
       (vec-min
        (vec-add
         (vec-bwand
          (sca-broadcast (int32_t (bv #x00000001 32)) 16)
          (vec-div
           (vec-add
            (vec-mul
             (vec-cast
              (vec-add
               (vec-mul
                (vec-cast
                 (load
                  (buffer input1 'uint8)
                  (ramp
                   (sca-add
                    (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
                    (sca-sub
                     (sca-sub (var-lookup 't75) (var-lookup 't81))
                     (var-lookup 'input1.min.0)))
                   1
                   16)
                  (aligned 1 0))
                 'int16
                 16)
                (sca-broadcast (int16_t (bv #x0040 16)) 16))
               (sca-broadcast
                (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))
                16))
              'int32
              16)
             (vec-cast
              (sca-broadcast (int16_t input1_multiplier) 16)
              'int32
              16))
            (sca-broadcast
             (sca-mul
              (sca-cast
               (sca-mul
                (sca-sub (int16_t t149) (int16_t t150))
                (int16_t (bv #x0040 16)))
               'int32)
              (sca-cast (int16_t input2_multiplier) 'int32))
             16))
           (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
         (vec-div
          (vec-add
           (vec-mul
            (vec-cast
             (vec-add
              (vec-mul
               (vec-cast
                (load
                 (buffer input1 'uint8)
                 (ramp
                  (sca-add
                   (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
                   (sca-sub
                    (sca-sub (var-lookup 't75) (var-lookup 't81))
                    (var-lookup 'input1.min.0)))
                  1
                  16)
                 (aligned 1 0))
                'int16
                16)
               (sca-broadcast (int16_t (bv #x0040 16)) 16))
              (sca-broadcast
               (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))
               16))
             'int32
             16)
            (vec-cast
             (sca-broadcast (int16_t input1_multiplier) 16)
             'int32
             16))
           (sca-broadcast
            (sca-mul
             (sca-cast
              (sca-mul
               (sca-sub (int16_t t149) (int16_t t150))
               (int16_t (bv #x0040 16)))
              'int32)
             (sca-cast (int16_t input2_multiplier) 'int32))
            16))
          (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
        (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
       (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
      'int16
      16)
     'int32
     16)
    (vec-cast (sca-broadcast (int16_t t151) 16) 'int32 16))
   (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
  (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
 'int16
 16)
template:
  (cast ... (broadcast ... (int32_t (bv #xffff8000 32))) 'int16 #t)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$2479 idx) (bv #xffff8000 32)) (bvsle (bv #xffff8000 32) (app abstr-vals$2479 idx)))))
optimized-halide-expr:
  (vec-cast
 (vec-max
  (vec-min
   (vec-add
    (vec-cast
     (vec-cast
      (vec-max
       (vec-min
        (vec-add
         (vec-bwand
          (sca-broadcast (int32_t (bv #x00000001 32)) 16)
          (vec-div
           (vec-add
            (vec-mul
             (vec-cast
              (vec-add
               (vec-mul
                (vec-cast
                 (load
                  (buffer input1 'uint8)
                  (ramp
                   (sca-add
                    (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
                    (sca-sub
                     (sca-sub (var-lookup 't75) (var-lookup 't81))
                     (var-lookup 'input1.min.0)))
                   1
                   16)
                  (aligned 1 0))
                 'int16
                 16)
                (sca-broadcast (int16_t (bv #x0040 16)) 16))
               (sca-broadcast
                (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))
                16))
              'int32
              16)
             (vec-cast
              (sca-broadcast (int16_t input1_multiplier) 16)
              'int32
              16))
            (sca-broadcast
             (sca-mul
              (sca-cast
               (sca-mul
                (sca-sub (int16_t t149) (int16_t t150))
                (int16_t (bv #x0040 16)))
               'int32)
              (sca-cast (int16_t input2_multiplier) 'int32))
             16))
           (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
         (vec-div
          (vec-add
           (vec-mul
            (vec-cast
             (vec-add
              (vec-mul
               (vec-cast
                (load
                 (buffer input1 'uint8)
                 (ramp
                  (sca-add
                   (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
                   (sca-sub
                    (sca-sub (var-lookup 't75) (var-lookup 't81))
                    (var-lookup 'input1.min.0)))
                  1
                  16)
                 (aligned 1 0))
                'int16
                16)
               (sca-broadcast (int16_t (bv #x0040 16)) 16))
              (sca-broadcast
               (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))
               16))
             'int32
             16)
            (vec-cast
             (sca-broadcast (int16_t input1_multiplier) 16)
             'int32
             16))
           (sca-broadcast
            (sca-mul
             (sca-cast
              (sca-mul
               (sca-sub (int16_t t149) (int16_t t150))
               (int16_t (bv #x0040 16)))
              'int32)
             (sca-cast (int16_t input2_multiplier) 'int32))
            16))
          (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
        (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
       #<abstr-halide-expr>)
      'int16
      16)
     'int32
     16)
    (vec-cast (sca-broadcast (int16_t t151) 16) 'int32 16))
   (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
  #<abstr-halide-expr>)
 'int16
 16)
optimized-template:
  (cast ... #<abstr-expr> 'int16 #t)
optimized Halide 0:
  (int16_t
 (extract 15 0 (ite (bvsle (app abstr-vals$2479 0) (ite (bvsle (bvadd (sign-extend t151 (bitvector 32)) (sign-extend (extract 15 0 (ite (bvsle (app abstr-vals$2479 0) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (app abstr-vals$2479 0))) (bitvector 32))) (bv #x00007fff 32)) (bvadd (sign-extend t151 (bitvector 32)) (sign-extend (extract 15 0 (ite (bvsle (app abstr-vals$2479 0) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (app abstr-vals$2479 0))) (bitvector 32))) (bv #x00007fff 32))) (ite (bvsle (bvadd (sign-extend t151 (bitvector 32)) (sign-extend (extract 15 0 (ite (bvsle (app abstr-vals$2479 0) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (app abstr-vals$2479 0))) (bitvector 32))) (bv #x00007fff 32)) (bvadd (sign-extend t151 (bitvector 32)) (sign-extend (extract 15 0 (ite (bvsle (app abstr-vals$2479 0) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (app abstr-vals$2479 0))) (bitvector 32))) (bv #x00007fff 32)) (app abstr-vals$2479 0))))
optimized x86 0:
  (int16_t
 (ite (bvslt (app abstr-vals$2479 0) (bv #xffff8000 32)) (bv #x8000 16) (ite (bvslt (bv #x00007fff 32) (app abstr-vals$2479 0)) (bv #x7fff 16) (extract 15 0 (app abstr-vals$2479 0)))))
run-x86-synthesizer
halide-expr:
  (vec-cast
 (vec-max
  (vec-min
   (vec-add
    (vec-cast
     (vec-cast
      (vec-max
       (vec-min
        (vec-add
         (vec-bwand
          (sca-broadcast (int32_t (bv #x00000001 32)) 16)
          (vec-div
           (vec-add
            (vec-mul
             (vec-cast
              (vec-add
               (vec-mul
                (vec-cast
                 (load
                  (buffer input1 'uint8)
                  (ramp
                   (sca-add
                    (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
                    (sca-sub
                     (sca-sub (var-lookup 't75) (var-lookup 't81))
                     (var-lookup 'input1.min.0)))
                   1
                   16)
                  (aligned 1 0))
                 'int16
                 16)
                (sca-broadcast (int16_t (bv #x0040 16)) 16))
               (sca-broadcast
                (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))
                16))
              'int32
              16)
             (vec-cast
              (sca-broadcast (int16_t input1_multiplier) 16)
              'int32
              16))
            (sca-broadcast
             (sca-mul
              (sca-cast
               (sca-mul
                (sca-sub (int16_t t149) (int16_t t150))
                (int16_t (bv #x0040 16)))
               'int32)
              (sca-cast (int16_t input2_multiplier) 'int32))
             16))
           (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
         (vec-div
          (vec-add
           (vec-mul
            (vec-cast
             (vec-add
              (vec-mul
               (vec-cast
                (load
                 (buffer input1 'uint8)
                 (ramp
                  (sca-add
                   (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
                   (sca-sub
                    (sca-sub (var-lookup 't75) (var-lookup 't81))
                    (var-lookup 'input1.min.0)))
                  1
                  16)
                 (aligned 1 0))
                'int16
                16)
               (sca-broadcast (int16_t (bv #x0040 16)) 16))
              (sca-broadcast
               (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))
               16))
             'int32
             16)
            (vec-cast
             (sca-broadcast (int16_t input1_multiplier) 16)
             'int32
             16))
           (sca-broadcast
            (sca-mul
             (sca-cast
              (sca-mul
               (sca-sub (int16_t t149) (int16_t t150))
               (int16_t (bv #x0040 16)))
              'int32)
             (sca-cast (int16_t input2_multiplier) 'int32))
            16))
          (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
        (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
       (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
      'int16
      16)
     'int32
     16)
    (vec-cast (sca-broadcast (int16_t t151) 16) 'int32 16))
   (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
  (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
 'int16
 16)
template:
  (vs-mpy-add
 ...
 (combine
  (cast
   ...
   (vs-shift-right
    ...
    (vs-mpy-add
     ...
     (combine
      (vs-mpy-add
       ...
       (combine
        #<load-data>
        (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))))
       (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
       #f
       #f
       #f
       'int16)
      (broadcast
       ...
       (sca-mul
        (sca-cast
         (sca-mul
          (sca-sub (int16_t t149) (int16_t t150))
          (int16_t (bv #x0040 16)))
         'int32)
        (sca-cast (int16_t input2_multiplier) 'int32))))
     (list (int8_t (bv #x01 8)) (int16_t input1_multiplier))
     #f
     #f
     #f
     'int32)
    (int32_t (bv #x00000010 32))
    #t
    x?$2072
    #t)
   'int16
   #t)
  (broadcast ... (int16_t t151)))
 (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
 x?$2473
 x?$2474
 x?$2475
 'int32)
axioms:
  '(#t #t)
optimized-halide-expr:
  (vec-cast
 (vec-max
  (vec-min
   (vec-add
    (vec-cast #<abstr-halide-expr> 'int32 16)
    (vec-cast #<abstr-halide-expr> 'int32 16))
   (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
  (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
 'int16
 16)
optimized-template:
  (vs-mpy-add
 ...
 (combine #<abstr-expr> #<abstr-expr>)
 (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
 x?$2473
 x?$2474
 x?$2475
 'int32)
optimized Halide 0:
  (int16_t
 (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (sign-extend (app abstr-vals$2480 0) (bitvector 32)) (sign-extend (app abstr-vals$2481 0) (bitvector 32))) (bv #x00007fff 32)) (bvadd (sign-extend (app abstr-vals$2480 0) (bitvector 32)) (sign-extend (app abstr-vals$2481 0) (bitvector 32))) (bv #x00007fff 32))) (ite (bvsle (bvadd (sign-extend (app abstr-vals$2480 0) (bitvector 32)) (sign-extend (app abstr-vals$2481 0) (bitvector 32))) (bv #x00007fff 32)) (bvadd (sign-extend (app abstr-vals$2480 0) (bitvector 32)) (sign-extend (app abstr-vals$2481 0) (bitvector 32))) (bv #x00007fff 32)) (bv #xffff8000 32))))
optimized x86 0:
  (int32_t
 (ite* (⊢ (&& (! x?$2475) (! (&& x?$2473 x?$2475))) (ite x?$2473 (bvadd (ite x?$2473 (bvadd (ite x?$2474 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (sign-extend (app abstr-vals$2481 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2474 (bv #x00000001 32) (bv #x00000000 32))))) (sign-extend (app abstr-vals$2481 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2474 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (sign-extend (app abstr-vals$2481 0) (bitvector 32)) (ite x?$2474 (bv #x00000001 32) (bv #x00000000 32)))) (ite (bvsle (bvadd (bv #x80000000 32) (bvneg (ite (bvsle (ite x?$2473 (bvadd (ite x?$2474 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (sign-extend (app abstr-vals$2481 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2474 (bv #x00000001 32) (bv #x00000000 32))))) (sign-extend (app abstr-vals$2481 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2474 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (sign-extend (app abstr-vals$2481 0) (bitvector 32)) (ite x?$2474 (bv #x00000001 32) (bv #x00000000 32)))) (bv #x00000000 32)) (ite x?$2473 (bvadd (ite x?$2474 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (sign-extend (app abstr-vals$2481 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2474 (bv #x00000001 32) (bv #x00000000 32))))) (sign-extend (app abstr-vals$2481 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2474 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (sign-extend (app abstr-vals$2481 0) (bitvector 32)) (ite x?$2474 (bv #x00000001 32) (bv #x00000000 32)))) (bv #x00000000 32)))) (ite (bvsle (sign-extend (app abstr-vals$2480 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$2473 (bvadd (ite x?$2474 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (sign-extend (app abstr-vals$2481 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2474 (bv #x00000001 32) (bv #x00000000 32))))) (sign-extend (app abstr-vals$2481 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2474 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (sign-extend (app abstr-vals$2481 0) (bitvector 32)) (ite x?$2474 (bv #x00000001 32) (bv #x00000000 32))))) (ite x?$2473 (bvadd (ite x?$2474 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (sign-extend (app abstr-vals$2481 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2474 (bv #x00000001 32) (bv #x00000000 32))))) (sign-extend (app abstr-vals$2481 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2474 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (sign-extend (app abstr-vals$2481 0) (bitvector 32)) (ite x?$2474 (bv #x00000001 32) (bv #x00000000 32)))) (bv #x00000000 32))))) (sign-extend (app abstr-vals$2480 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$2473 (bvadd (ite x?$2474 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (sign-extend (app abstr-vals$2481 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2474 (bv #x00000001 32) (bv #x00000000 32))))) (sign-extend (app abstr-vals$2481 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2474 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (sign-extend (app abstr-vals$2481 0) (bitvector 32)) (ite x?$2474 (bv #x00000001 32) (bv #x00000000 32))))) (ite x?$2473 (bvadd (ite x?$2474 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (sign-extend (app abstr-vals$2481 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2474 (bv #x00000001 32) (bv #x00000000 32))))) (sign-extend (app abstr-vals$2481 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2474 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (sign-extend (app abstr-vals$2481 0) (bitvector 32)) (ite x?$2474 (bv #x00000001 32) (bv #x00000000 32)))) (bv #x00000000 32)))))) (ite (bvsle (sign-extend (app abstr-vals$2480 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$2473 (bvadd (ite x?$2474 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (sign-extend (app abstr-vals$2481 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2474 (bv #x00000001 32) (bv #x00000000 32))))) (sign-extend (app abstr-vals$2481 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2474 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (sign-extend (app abstr-vals$2481 0) (bitvector 32)) (ite x?$2474 (bv #x00000001 32) (bv #x00000000 32))))) (ite x?$2473 (bvadd (ite x?$2474 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (sign-extend (app abstr-vals$2481 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2474 (bv #x00000001 32) (bv #x00000000 32))))) (sign-extend (app abstr-vals$2481 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2474 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (sign-extend (app abstr-vals$2481 0) (bitvector 32)) (ite x?$2474 (bv #x00000001 32) (bv #x00000000 32)))) (bv #x00000000 32))))) (sign-extend (app abstr-vals$2480 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$2473 (bvadd (ite x?$2474 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (sign-extend (app abstr-vals$2481 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2474 (bv #x00000001 32) (bv #x00000000 32))))) (sign-extend (app abstr-vals$2481 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2474 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (sign-extend (app abstr-vals$2481 0) (bitvector 32)) (ite x?$2474 (bv #x00000001 32) (bv #x00000000 32))))) (ite x?$2473 (bvadd (ite x?$2474 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (sign-extend (app abstr-vals$2481 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2474 (bv #x00000001 32) (bv #x00000000 32))))) (sign-extend (app abstr-vals$2481 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2474 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (sign-extend (app abstr-vals$2481 0) (bitvector 32)) (ite x?$2474 (bv #x00000001 32) (bv #x00000000 32)))) (bv #x00000000 32))))) (bvadd (bv #x80000000 32) (bvneg (ite (bvsle (ite x?$2473 (bvadd (ite x?$2474 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (sign-extend (app abstr-vals$2481 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2474 (bv #x00000001 32) (bv #x00000000 32))))) (sign-extend (app abstr-vals$2481 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2474 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (sign-extend (app abstr-vals$2481 0) (bitvector 32)) (ite x?$2474 (bv #x00000001 32) (bv #x00000000 32)))) (bv #x00000000 32)) (ite x?$2473 (bvadd (ite x?$2474 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (sign-extend (app abstr-vals$2481 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2474 (bv #x00000001 32) (bv #x00000000 32))))) (sign-extend (app abstr-vals$2481 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2474 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (sign-extend (app abstr-vals$2481 0) (bitvector 32)) (ite x?$2474 (bv #x00000001 32) (bv #x00000000 32)))) (bv #x00000000 32)))))) (bvadd (sign-extend (app abstr-vals$2480 0) (bitvector 32)) (ite x?$2473 (bvadd (ite x?$2474 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (sign-extend (app abstr-vals$2481 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2474 (bv #x00000001 32) (bv #x00000000 32))))) (sign-extend (app abstr-vals$2481 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2474 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (sign-extend (app abstr-vals$2481 0) (bitvector 32)) (ite x?$2474 (bv #x00000001 32) (bv #x00000000 32))))))) (⊢ (|| (&& x?$2473 x?$2475) (&& x?$2475 (! (&& x?$2473 x?$2475)))) (bvashr (ite x?$2473 (bvadd (ite x?$2473 (bvadd (ite x?$2474 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (sign-extend (app abstr-vals$2481 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2474 (bv #x00000001 32) (bv #x00000000 32))))) (sign-extend (app abstr-vals$2481 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2474 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (sign-extend (app abstr-vals$2481 0) (bitvector 32)) (ite x?$2474 (bv #x00000001 32) (bv #x00000000 32)))) (ite (bvsle (bvadd (bv #x80000000 32) (bvneg (ite (bvsle (ite x?$2473 (bvadd (ite x?$2474 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (sign-extend (app abstr-vals$2481 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2474 (bv #x00000001 32) (bv #x00000000 32))))) (sign-extend (app abstr-vals$2481 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2474 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (sign-extend (app abstr-vals$2481 0) (bitvector 32)) (ite x?$2474 (bv #x00000001 32) (bv #x00000000 32)))) (bv #x00000000 32)) (ite x?$2473 (bvadd (ite x?$2474 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (sign-extend (app abstr-vals$2481 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2474 (bv #x00000001 32) (bv #x00000000 32))))) (sign-extend (app abstr-vals$2481 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2474 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (sign-extend (app abstr-vals$2481 0) (bitvector 32)) (ite x?$2474 (bv #x00000001 32) (bv #x00000000 32)))) (bv #x00000000 32)))) (ite (bvsle (sign-extend (app abstr-vals$2480 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$2473 (bvadd (ite x?$2474 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (sign-extend (app abstr-vals$2481 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2474 (bv #x00000001 32) (bv #x00000000 32))))) (sign-extend (app abstr-vals$2481 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2474 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (sign-extend (app abstr-vals$2481 0) (bitvector 32)) (ite x?$2474 (bv #x00000001 32) (bv #x00000000 32))))) (ite x?$2473 (bvadd (ite x?$2474 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (sign-extend (app abstr-vals$2481 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2474 (bv #x00000001 32) (bv #x00000000 32))))) (sign-extend (app abstr-vals$2481 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2474 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (sign-extend (app abstr-vals$2481 0) (bitvector 32)) (ite x?$2474 (bv #x00000001 32) (bv #x00000000 32)))) (bv #x00000000 32))))) (sign-extend (app abstr-vals$2480 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$2473 (bvadd (ite x?$2474 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (sign-extend (app abstr-vals$2481 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2474 (bv #x00000001 32) (bv #x00000000 32))))) (sign-extend (app abstr-vals$2481 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2474 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (sign-extend (app abstr-vals$2481 0) (bitvector 32)) (ite x?$2474 (bv #x00000001 32) (bv #x00000000 32))))) (ite x?$2473 (bvadd (ite x?$2474 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (sign-extend (app abstr-vals$2481 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2474 (bv #x00000001 32) (bv #x00000000 32))))) (sign-extend (app abstr-vals$2481 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2474 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (sign-extend (app abstr-vals$2481 0) (bitvector 32)) (ite x?$2474 (bv #x00000001 32) (bv #x00000000 32)))) (bv #x00000000 32)))))) (ite (bvsle (sign-extend (app abstr-vals$2480 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$2473 (bvadd (ite x?$2474 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (sign-extend (app abstr-vals$2481 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2474 (bv #x00000001 32) (bv #x00000000 32))))) (sign-extend (app abstr-vals$2481 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2474 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (sign-extend (app abstr-vals$2481 0) (bitvector 32)) (ite x?$2474 (bv #x00000001 32) (bv #x00000000 32))))) (ite x?$2473 (bvadd (ite x?$2474 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (sign-extend (app abstr-vals$2481 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2474 (bv #x00000001 32) (bv #x00000000 32))))) (sign-extend (app abstr-vals$2481 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2474 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (sign-extend (app abstr-vals$2481 0) (bitvector 32)) (ite x?$2474 (bv #x00000001 32) (bv #x00000000 32)))) (bv #x00000000 32))))) (sign-extend (app abstr-vals$2480 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$2473 (bvadd (ite x?$2474 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (sign-extend (app abstr-vals$2481 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2474 (bv #x00000001 32) (bv #x00000000 32))))) (sign-extend (app abstr-vals$2481 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2474 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (sign-extend (app abstr-vals$2481 0) (bitvector 32)) (ite x?$2474 (bv #x00000001 32) (bv #x00000000 32))))) (ite x?$2473 (bvadd (ite x?$2474 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (sign-extend (app abstr-vals$2481 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2474 (bv #x00000001 32) (bv #x00000000 32))))) (sign-extend (app abstr-vals$2481 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2474 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (sign-extend (app abstr-vals$2481 0) (bitvector 32)) (ite x?$2474 (bv #x00000001 32) (bv #x00000000 32)))) (bv #x00000000 32))))) (bvadd (bv #x80000000 32) (bvneg (ite (bvsle (ite x?$2473 (bvadd (ite x?$2474 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (sign-extend (app abstr-vals$2481 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2474 (bv #x00000001 32) (bv #x00000000 32))))) (sign-extend (app abstr-vals$2481 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2474 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (sign-extend (app abstr-vals$2481 0) (bitvector 32)) (ite x?$2474 (bv #x00000001 32) (bv #x00000000 32)))) (bv #x00000000 32)) (ite x?$2473 (bvadd (ite x?$2474 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (sign-extend (app abstr-vals$2481 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2474 (bv #x00000001 32) (bv #x00000000 32))))) (sign-extend (app abstr-vals$2481 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2474 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (sign-extend (app abstr-vals$2481 0) (bitvector 32)) (ite x?$2474 (bv #x00000001 32) (bv #x00000000 32)))) (bv #x00000000 32)))))) (bvadd (sign-extend (app abstr-vals$2480 0) (bitvector 32)) (ite x?$2473 (bvadd (ite x?$2474 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (sign-extend (app abstr-vals$2481 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2474 (bv #x00000001 32) (bv #x00000000 32))))) (sign-extend (app abstr-vals$2481 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2474 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (sign-extend (app abstr-vals$2481 0) (bitvector 32)) (ite x?$2474 (bv #x00000001 32) (bv #x00000000 32)))))) (bv #x00000001 32)))))
Ran synthesizer for 8 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-cast
 (vec-max
  (vec-min
   (vec-add
    (vec-cast
     (vec-cast
      (vec-max
       (vec-min
        (vec-add
         (vec-bwand
          (sca-broadcast (int32_t (bv #x00000001 32)) 16)
          (vec-div
           (vec-add
            (vec-mul
             (vec-cast
              (vec-add
               (vec-mul
                (vec-cast
                 (load
                  (buffer input1 'uint8)
                  (ramp
                   (sca-add
                    (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
                    (sca-sub
                     (sca-sub (var-lookup 't75) (var-lookup 't81))
                     (var-lookup 'input1.min.0)))
                   1
                   16)
                  (aligned 1 0))
                 'int16
                 16)
                (sca-broadcast (int16_t (bv #x0040 16)) 16))
               (sca-broadcast
                (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))
                16))
              'int32
              16)
             (vec-cast
              (sca-broadcast (int16_t input1_multiplier) 16)
              'int32
              16))
            (sca-broadcast
             (sca-mul
              (sca-cast
               (sca-mul
                (sca-sub (int16_t t149) (int16_t t150))
                (int16_t (bv #x0040 16)))
               'int32)
              (sca-cast (int16_t input2_multiplier) 'int32))
             16))
           (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
         (vec-div
          (vec-add
           (vec-mul
            (vec-cast
             (vec-add
              (vec-mul
               (vec-cast
                (load
                 (buffer input1 'uint8)
                 (ramp
                  (sca-add
                   (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
                   (sca-sub
                    (sca-sub (var-lookup 't75) (var-lookup 't81))
                    (var-lookup 'input1.min.0)))
                  1
                  16)
                 (aligned 1 0))
                'int16
                16)
               (sca-broadcast (int16_t (bv #x0040 16)) 16))
              (sca-broadcast
               (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))
               16))
             'int32
             16)
            (vec-cast
             (sca-broadcast (int16_t input1_multiplier) 16)
             'int32
             16))
           (sca-broadcast
            (sca-mul
             (sca-cast
              (sca-mul
               (sca-sub (int16_t t149) (int16_t t150))
               (int16_t (bv #x0040 16)))
              'int32)
             (sca-cast (int16_t input2_multiplier) 'int32))
            16))
          (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
        (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
       (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
      'int16
      16)
     'int32
     16)
    (vec-cast (sca-broadcast (int16_t t151) 16) 'int32 16))
   (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
  (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
 'int16
 16)
template:
  (cast
 ...
 (vs-mpy-add
  ...
  (combine
   (cast
    ...
    (vs-shift-right
     ...
     (vs-mpy-add
      ...
      (combine
       (vs-mpy-add
        ...
        (combine
         #<load-data>
         (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))))
        (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
        #f
        #f
        #f
        'int16)
       (broadcast
        ...
        (sca-mul
         (sca-cast
          (sca-mul
           (sca-sub (int16_t t149) (int16_t t150))
           (int16_t (bv #x0040 16)))
          'int32)
         (sca-cast (int16_t input2_multiplier) 'int32))))
      (list (int8_t (bv #x01 8)) (int16_t input1_multiplier))
      #f
      #f
      #f
      'int32)
     (int32_t (bv #x00000010 32))
     #t
     x?$2072
     #t)
    'int16
    #t)
   (broadcast ... (int16_t t151)))
  (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
  #f
  #f
  #f
  'int32)
 'int16
 #t)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$2482 idx) (bv #x0000fffe 32)) (bvsle (bv #xffff0000 32) (app abstr-vals$2482 idx)))))
optimized-halide-expr:
  (vec-cast
 (vec-max
  (vec-min
   #<abstr-halide-expr>
   (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
  (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
 'int16
 16)
optimized-template:
  (cast ... #<abstr-expr> 'int16 #t)
optimized Halide 0:
  (int16_t
 (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (app abstr-vals$2482 0) (bv #x00007fff 32)) (app abstr-vals$2482 0) (bv #x00007fff 32))) (ite (bvsle (app abstr-vals$2482 0) (bv #x00007fff 32)) (app abstr-vals$2482 0) (bv #x00007fff 32)) (bv #xffff8000 32))))
optimized x86 0:
  (int16_t
 (ite (bvslt (app abstr-vals$2482 0) (bv #xffff8000 32)) (bv #x8000 16) (ite (bvslt (bv #x00007fff 32) (app abstr-vals$2482 0)) (bv #x7fff 16) (extract 15 0 (app abstr-vals$2482 0)))))
Ran synthesizer for 88 ms
(model)
(vec-cast
 (vec-max
  (vec-min
   #<abstr-halide-expr>
   (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
  (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
 'int16
 16)
(cast
 ...
 (vs-mpy-add
  ...
  (combine
   (cast
    ...
    (vs-shift-right
     ...
     (vs-mpy-add
      ...
      (combine
       (vs-mpy-add
        ...
        (combine
         #<load-data>
         (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))))
        (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
        #f
        #f
        #f
        'int16)
       (broadcast
        ...
        (sca-mul
         (sca-cast
          (sca-mul
           (sca-sub (int16_t t149) (int16_t t150))
           (int16_t (bv #x0040 16)))
          'int32)
         (sca-cast (int16_t input2_multiplier) 'int32))))
      (list (int8_t (bv #x01 8)) (int16_t input1_multiplier))
      #f
      #f
      #f
      'int32)
     (int32_t (bv #x00000010 32))
     #t
     x?$2072
     #t)
    'int16
    #t)
   (broadcast ... (int16_t t151)))
  (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
  #f
  #f
  #f
  'int32)
 'int16
 #t)
Ran bounds analysis for 25 ms
Ran bounds analysis for 17 ms
"Success?"
#t
(cast ... (vs-mpy-add ... (combine (cast ... (vs-shift-right ... (vs-mpy-add ... (combine (vs-mpy-add ... (combine #<load-data> (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16))))) (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16))) #f #f #f 'int16) (broadcast ... (sca-mul (sca-cast (sca-mul (sca-sub (int16_t t149) (int16_t t150)) (int16_t (bv #x0040 16))) 'int32) (sca-cast (int16_t input2_multiplier) 'int32)))) (list (int8_t (bv #x01 8)) (int16_t input1_multiplier)) #f #f #f 'int32) (int32_t (bv #x00000010 32)) #t x?$2072 #t) 'int16 #t) (broadcast ... (int16_t t151))) (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8))) #f #f #f 'int32) 'int16 #t)
"Building Expr:"
(sca-broadcast (int16_t (bv #x00ff 16)) 16)
"Fold templates"
'()
here()

"Replace templates"
'()
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (sca-broadcast (int16_t (bv #x00ff 16)) 16)
template:
  (broadcast ... (int16_t (bv #x00ff 16)))
axioms:
  '()
optimized-halide-expr:
  (sca-broadcast (int16_t (bv #x00ff 16)) 16)
optimized-template:
  (broadcast ... (int16_t (bv #x00ff 16)))
optimized Halide 0:
  (int16_t (bv #x00ff 16))
optimized x86 0:
  (int16_t (bv #x00ff 16))
Ran synthesizer for 20 ms
(model)
(sca-broadcast (int16_t (bv #x00ff 16)) 16)
(broadcast ... (int16_t (bv #x00ff 16)))
Ran bounds analysis for 26 ms
Ran bounds analysis for 17 ms
"Extended success?"
#t
(broadcast ... (int16_t (bv #x00ff 16)))
"Building Expr:"
(vec-min
 (vec-cast
  (vec-max
   (vec-min
    (vec-add
     (vec-cast
      (vec-cast
       (vec-max
        (vec-min
         (vec-add
          (vec-bwand
           (sca-broadcast (int32_t (bv #x00000001 32)) 16)
           (vec-div
            (vec-add
             (vec-mul
              (vec-cast
               (vec-add
                (vec-mul
                 (vec-cast
                  (load
                   (buffer input1 'uint8)
                   (ramp
                    (sca-add
                     (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
                     (sca-sub
                      (sca-sub (var-lookup 't75) (var-lookup 't81))
                      (var-lookup 'input1.min.0)))
                    1
                    16)
                   (aligned 1 0))
                  'int16
                  16)
                 (sca-broadcast (int16_t (bv #x0040 16)) 16))
                (sca-broadcast
                 (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))
                 16))
               'int32
               16)
              (vec-cast
               (sca-broadcast (int16_t input1_multiplier) 16)
               'int32
               16))
             (sca-broadcast
              (sca-mul
               (sca-cast
                (sca-mul
                 (sca-sub (int16_t t149) (int16_t t150))
                 (int16_t (bv #x0040 16)))
                'int32)
               (sca-cast (int16_t input2_multiplier) 'int32))
              16))
            (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
          (vec-div
           (vec-add
            (vec-mul
             (vec-cast
              (vec-add
               (vec-mul
                (vec-cast
                 (load
                  (buffer input1 'uint8)
                  (ramp
                   (sca-add
                    (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
                    (sca-sub
                     (sca-sub (var-lookup 't75) (var-lookup 't81))
                     (var-lookup 'input1.min.0)))
                   1
                   16)
                  (aligned 1 0))
                 'int16
                 16)
                (sca-broadcast (int16_t (bv #x0040 16)) 16))
               (sca-broadcast
                (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))
                16))
              'int32
              16)
             (vec-cast
              (sca-broadcast (int16_t input1_multiplier) 16)
              'int32
              16))
            (sca-broadcast
             (sca-mul
              (sca-cast
               (sca-mul
                (sca-sub (int16_t t149) (int16_t t150))
                (int16_t (bv #x0040 16)))
               'int32)
              (sca-cast (int16_t input2_multiplier) 'int32))
             16))
           (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
         (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
        (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
       'int16
       16)
      'int32
      16)
     (vec-cast (sca-broadcast (int16_t t151) 16) 'int32 16))
    (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
   (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
  'int16
  16)
 (sca-broadcast (int16_t (bv #x00ff 16)) 16))
"Fold templates"
(list
 (cast
  ...
  (vs-mpy-add
   ...
   (combine
    (cast
     ...
     (vs-shift-right
      ...
      (vs-mpy-add
       ...
       (combine
        (vs-mpy-add
         ...
         (combine
          #<load-data>
          (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))))
         (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
         #f
         #f
         #f
         'int16)
        (broadcast
         ...
         (sca-mul
          (sca-cast
           (sca-mul
            (sca-sub (int16_t t149) (int16_t t150))
            (int16_t (bv #x0040 16)))
           'int32)
          (sca-cast (int16_t input2_multiplier) 'int32))))
       (list (int8_t (bv #x01 8)) (int16_t input1_multiplier))
       #f
       #f
       #f
       'int32)
      (int32_t (bv #x00000010 32))
      #t
      x?$2072
      #t)
     'int16
     #t)
    (broadcast ... (int16_t t151)))
   (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
   #f
   #f
   #f
   'int32)
  'int16
  x?$2484))
here(#(struct:cast ... #(struct:vs-mpy-add ... #<combine: #(struct:cast ... #(struct:vs-shift-right ... #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t148) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f #f #f int16) #(struct:broadcast ... #(struct:sca-mul #(struct:sca-cast #(struct:sca-mul #(struct:sca-sub #(struct:int16_t t149) #(struct:int16_t t150)) #(struct:int16_t (bv #x0040 16))) int32) #(struct:sca-cast #(struct:int16_t input2_multiplier) int32)))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t input1_multiplier)) #f #f #f int32) #(struct:int32_t (bv #x00000010 32)) #t x?$2072 #t) int16 #t) #(struct:broadcast ... #(struct:int16_t t151))> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32) int16 x?$2484))

"Replace templates"
'()
run-x86-synthesizer
halide-expr:
  (vec-min
 (vec-cast
  (vec-max
   (vec-min
    (vec-add
     (vec-cast
      (vec-cast
       (vec-max
        (vec-min
         (vec-add
          (vec-bwand
           (sca-broadcast (int32_t (bv #x00000001 32)) 16)
           (vec-div
            (vec-add
             (vec-mul
              (vec-cast
               (vec-add
                (vec-mul
                 (vec-cast
                  (load
                   (buffer input1 'uint8)
                   (ramp
                    (sca-add
                     (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
                     (sca-sub
                      (sca-sub (var-lookup 't75) (var-lookup 't81))
                      (var-lookup 'input1.min.0)))
                    1
                    16)
                   (aligned 1 0))
                  'int16
                  16)
                 (sca-broadcast (int16_t (bv #x0040 16)) 16))
                (sca-broadcast
                 (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))
                 16))
               'int32
               16)
              (vec-cast
               (sca-broadcast (int16_t input1_multiplier) 16)
               'int32
               16))
             (sca-broadcast
              (sca-mul
               (sca-cast
                (sca-mul
                 (sca-sub (int16_t t149) (int16_t t150))
                 (int16_t (bv #x0040 16)))
                'int32)
               (sca-cast (int16_t input2_multiplier) 'int32))
              16))
            (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
          (vec-div
           (vec-add
            (vec-mul
             (vec-cast
              (vec-add
               (vec-mul
                (vec-cast
                 (load
                  (buffer input1 'uint8)
                  (ramp
                   (sca-add
                    (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
                    (sca-sub
                     (sca-sub (var-lookup 't75) (var-lookup 't81))
                     (var-lookup 'input1.min.0)))
                   1
                   16)
                  (aligned 1 0))
                 'int16
                 16)
                (sca-broadcast (int16_t (bv #x0040 16)) 16))
               (sca-broadcast
                (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))
                16))
              'int32
              16)
             (vec-cast
              (sca-broadcast (int16_t input1_multiplier) 16)
              'int32
              16))
            (sca-broadcast
             (sca-mul
              (sca-cast
               (sca-mul
                (sca-sub (int16_t t149) (int16_t t150))
                (int16_t (bv #x0040 16)))
               'int32)
              (sca-cast (int16_t input2_multiplier) 'int32))
             16))
           (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
         (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
        (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
       'int16
       16)
      'int32
      16)
     (vec-cast (sca-broadcast (int16_t t151) 16) 'int32 16))
    (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
   (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
  'int16
  16)
 (sca-broadcast (int16_t (bv #x00ff 16)) 16))
template:
  (cast
 ...
 (vs-mpy-add
  ...
  (combine
   (cast
    ...
    (vs-shift-right
     ...
     (vs-mpy-add
      ...
      (combine
       (vs-mpy-add
        ...
        (combine
         #<load-data>
         (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))))
        (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
        #f
        #f
        #f
        'int16)
       (broadcast
        ...
        (sca-mul
         (sca-cast
          (sca-mul
           (sca-sub (int16_t t149) (int16_t t150))
           (int16_t (bv #x0040 16)))
          'int32)
         (sca-cast (int16_t input2_multiplier) 'int32))))
      (list (int8_t (bv #x01 8)) (int16_t input1_multiplier))
      #f
      #f
      #f
      'int32)
     (int32_t (bv #x00000010 32))
     #t
     x?$2072
     #t)
    'int16
    #t)
   (broadcast ... (int16_t t151)))
  (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
  #f
  #f
  #f
  'int32)
 'int16
 x?$2484)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$2490 idx) (bv #x0000fffe 32)) (bvsle (bv #xffff0000 32) (app abstr-vals$2490 idx)))))
optimized-halide-expr:
  (vec-min
 (vec-cast
  (vec-max
   (vec-min
    #<abstr-halide-expr>
    (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
   (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
  'int16
  16)
 (sca-broadcast (int16_t (bv #x00ff 16)) 16))
optimized-template:
  (cast ... #<abstr-expr> 'int16 x?$2484)
optimized Halide 0:
  (int16_t
 (ite (bvsle (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (app abstr-vals$2490 0) (bv #x00007fff 32)) (app abstr-vals$2490 0) (bv #x00007fff 32))) (ite (bvsle (app abstr-vals$2490 0) (bv #x00007fff 32)) (app abstr-vals$2490 0) (bv #x00007fff 32)) (bv #xffff8000 32))) (bv #x00ff 16)) (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (app abstr-vals$2490 0) (bv #x00007fff 32)) (app abstr-vals$2490 0) (bv #x00007fff 32))) (ite (bvsle (app abstr-vals$2490 0) (bv #x00007fff 32)) (app abstr-vals$2490 0) (bv #x00007fff 32)) (bv #xffff8000 32))) (bv #x00ff 16)))
optimized x86 0:
  (int16_t
 (ite x?$2484 (ite (bvslt (app abstr-vals$2490 0) (bv #xffff8000 32)) (bv #x8000 16) (ite (bvslt (bv #x00007fff 32) (app abstr-vals$2490 0)) (bv #x7fff 16) (extract 15 0 (app abstr-vals$2490 0)))) (extract 15 0 (app abstr-vals$2490 0))))
Ran synthesizer for 103 ms
(unsat)
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (vec-min
 (vec-cast
  (vec-max
   (vec-min
    (vec-add
     (vec-cast
      (vec-cast
       (vec-max
        (vec-min
         (vec-add
          (vec-bwand
           (sca-broadcast (int32_t (bv #x00000001 32)) 16)
           (vec-div
            (vec-add
             (vec-mul
              (vec-cast
               (vec-add
                (vec-mul
                 (vec-cast
                  (load
                   (buffer input1 'uint8)
                   (ramp
                    (sca-add
                     (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
                     (sca-sub
                      (sca-sub (var-lookup 't75) (var-lookup 't81))
                      (var-lookup 'input1.min.0)))
                    1
                    16)
                   (aligned 1 0))
                  'int16
                  16)
                 (sca-broadcast (int16_t (bv #x0040 16)) 16))
                (sca-broadcast
                 (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))
                 16))
               'int32
               16)
              (vec-cast
               (sca-broadcast (int16_t input1_multiplier) 16)
               'int32
               16))
             (sca-broadcast
              (sca-mul
               (sca-cast
                (sca-mul
                 (sca-sub (int16_t t149) (int16_t t150))
                 (int16_t (bv #x0040 16)))
                'int32)
               (sca-cast (int16_t input2_multiplier) 'int32))
              16))
            (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
          (vec-div
           (vec-add
            (vec-mul
             (vec-cast
              (vec-add
               (vec-mul
                (vec-cast
                 (load
                  (buffer input1 'uint8)
                  (ramp
                   (sca-add
                    (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
                    (sca-sub
                     (sca-sub (var-lookup 't75) (var-lookup 't81))
                     (var-lookup 'input1.min.0)))
                   1
                   16)
                  (aligned 1 0))
                 'int16
                 16)
                (sca-broadcast (int16_t (bv #x0040 16)) 16))
               (sca-broadcast
                (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))
                16))
              'int32
              16)
             (vec-cast
              (sca-broadcast (int16_t input1_multiplier) 16)
              'int32
              16))
            (sca-broadcast
             (sca-mul
              (sca-cast
               (sca-mul
                (sca-sub (int16_t t149) (int16_t t150))
                (int16_t (bv #x0040 16)))
               'int32)
              (sca-cast (int16_t input2_multiplier) 'int32))
             16))
           (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
         (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
        (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
       'int16
       16)
      'int32
      16)
     (vec-cast (sca-broadcast (int16_t t151) 16) 'int32 16))
    (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
   (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
  'int16
  16)
 (sca-broadcast (int16_t (bv #x00ff 16)) 16))
template:
  (minimum
 ...
 (cast
  ...
  (vs-mpy-add
   ...
   (combine
    (cast
     ...
     (vs-shift-right
      ...
      (vs-mpy-add
       ...
       (combine
        (vs-mpy-add
         ...
         (combine
          #<load-data>
          (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))))
         (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
         #f
         #f
         #f
         'int16)
        (broadcast
         ...
         (sca-mul
          (sca-cast
           (sca-mul
            (sca-sub (int16_t t149) (int16_t t150))
            (int16_t (bv #x0040 16)))
           'int32)
          (sca-cast (int16_t input2_multiplier) 'int32))))
       (list (int8_t (bv #x01 8)) (int16_t input1_multiplier))
       #f
       #f
       #f
       'int32)
      (int32_t (bv #x00000010 32))
      #t
      x?$2072
      #t)
     'int16
     #t)
    (broadcast ... (int16_t t151)))
   (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
   #f
   #f
   #f
   'int32)
  'int16
  #t)
 (broadcast ... (int16_t (bv #x00ff 16))))
axioms:
  (list
 #t
 (forall (idx) (&& (bvsle (app abstr-vals$2492 idx) (bv #x00ff 16)) (bvsle (bv #x00ff 16) (app abstr-vals$2492 idx)))))
optimized-halide-expr:
  (vec-min #<abstr-halide-expr> #<abstr-halide-expr>)
optimized-template:
  (minimum ... #<abstr-expr> #<abstr-expr>)
optimized Halide 0:
  (int16_t
 (ite (bvsle (app abstr-vals$2491 0) (app abstr-vals$2492 0)) (app abstr-vals$2491 0) (app abstr-vals$2492 0)))
optimized x86 0:
  (int16_t
 (ite (bvsle (app abstr-vals$2491 0) (app abstr-vals$2492 0)) (app abstr-vals$2491 0) (app abstr-vals$2492 0)))
Ran synthesizer for 47 ms
(model)
(vec-min #<abstr-halide-expr> #<abstr-halide-expr>)
(minimum
 ...
 (cast
  ...
  (vs-mpy-add
   ...
   (combine
    (cast
     ...
     (vs-shift-right
      ...
      (vs-mpy-add
       ...
       (combine
        (vs-mpy-add
         ...
         (combine
          #<load-data>
          (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))))
         (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
         #f
         #f
         #f
         'int16)
        (broadcast
         ...
         (sca-mul
          (sca-cast
           (sca-mul
            (sca-sub (int16_t t149) (int16_t t150))
            (int16_t (bv #x0040 16)))
           'int32)
          (sca-cast (int16_t input2_multiplier) 'int32))))
       (list (int8_t (bv #x01 8)) (int16_t input1_multiplier))
       #f
       #f
       #f
       'int32)
      (int32_t (bv #x00000010 32))
      #t
      x?$2072
      #t)
     'int16
     #t)
    (broadcast ... (int16_t t151)))
   (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
   #f
   #f
   #f
   'int32)
  'int16
  #t)
 (broadcast ... (int16_t (bv #x00ff 16))))
Ran bounds analysis for 32 ms
Ran bounds analysis for 19 ms
"Extended success?"
#t
(minimum
 ...
 (cast
  ...
  (vs-mpy-add
   ...
   (combine
    (cast
     ...
     (vs-shift-right
      ...
      (vs-mpy-add
       ...
       (combine
        (vs-mpy-add
         ...
         (combine
          #<load-data>
          (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))))
         (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
         #f
         #f
         #f
         'int16)
        (broadcast
         ...
         (sca-mul
          (sca-cast
           (sca-mul
            (sca-sub (int16_t t149) (int16_t t150))
            (int16_t (bv #x0040 16)))
           'int32)
          (sca-cast (int16_t input2_multiplier) 'int32))))
       (list (int8_t (bv #x01 8)) (int16_t input1_multiplier))
       #f
       #f
       #f
       'int32)
      (int32_t (bv #x00000010 32))
      #t
      x?$2072
      #t)
     'int16
     #t)
    (broadcast ... (int16_t t151)))
   (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
   #f
   #f
   #f
   'int32)
  'int16
  #t)
 (broadcast ... (int16_t (bv #x00ff 16))))
"Building Expr:"
(sca-broadcast (int16_t (bv #x0000 16)) 16)
"Fold templates"
'()
here()

"Replace templates"
'()
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (sca-broadcast (int16_t (bv #x0000 16)) 16)
template:
  (broadcast ... (int16_t (bv #x0000 16)))
axioms:
  '()
optimized-halide-expr:
  (sca-broadcast (int16_t (bv #x0000 16)) 16)
optimized-template:
  (broadcast ... (int16_t (bv #x0000 16)))
optimized Halide 0:
  (int16_t (bv #x0000 16))
optimized x86 0:
  (int16_t (bv #x0000 16))
Ran synthesizer for 20 ms
(model)
(sca-broadcast (int16_t (bv #x0000 16)) 16)
(broadcast ... (int16_t (bv #x0000 16)))
Ran bounds analysis for 26 ms
Ran bounds analysis for 16 ms
"Extended success?"
#t
(broadcast ... (int16_t (bv #x0000 16)))
"Building Expr:"
(vec-max
 (vec-min
  (vec-cast
   (vec-max
    (vec-min
     (vec-add
      (vec-cast
       (vec-cast
        (vec-max
         (vec-min
          (vec-add
           (vec-bwand
            (sca-broadcast (int32_t (bv #x00000001 32)) 16)
            (vec-div
             (vec-add
              (vec-mul
               (vec-cast
                (vec-add
                 (vec-mul
                  (vec-cast
                   (load
                    (buffer input1 'uint8)
                    (ramp
                     (sca-add
                      (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
                      (sca-sub
                       (sca-sub (var-lookup 't75) (var-lookup 't81))
                       (var-lookup 'input1.min.0)))
                     1
                     16)
                    (aligned 1 0))
                   'int16
                   16)
                  (sca-broadcast (int16_t (bv #x0040 16)) 16))
                 (sca-broadcast
                  (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))
                  16))
                'int32
                16)
               (vec-cast
                (sca-broadcast (int16_t input1_multiplier) 16)
                'int32
                16))
              (sca-broadcast
               (sca-mul
                (sca-cast
                 (sca-mul
                  (sca-sub (int16_t t149) (int16_t t150))
                  (int16_t (bv #x0040 16)))
                 'int32)
                (sca-cast (int16_t input2_multiplier) 'int32))
               16))
             (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
           (vec-div
            (vec-add
             (vec-mul
              (vec-cast
               (vec-add
                (vec-mul
                 (vec-cast
                  (load
                   (buffer input1 'uint8)
                   (ramp
                    (sca-add
                     (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
                     (sca-sub
                      (sca-sub (var-lookup 't75) (var-lookup 't81))
                      (var-lookup 'input1.min.0)))
                    1
                    16)
                   (aligned 1 0))
                  'int16
                  16)
                 (sca-broadcast (int16_t (bv #x0040 16)) 16))
                (sca-broadcast
                 (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))
                 16))
               'int32
               16)
              (vec-cast
               (sca-broadcast (int16_t input1_multiplier) 16)
               'int32
               16))
             (sca-broadcast
              (sca-mul
               (sca-cast
                (sca-mul
                 (sca-sub (int16_t t149) (int16_t t150))
                 (int16_t (bv #x0040 16)))
                'int32)
               (sca-cast (int16_t input2_multiplier) 'int32))
              16))
            (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
          (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
         (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
        'int16
        16)
       'int32
       16)
      (vec-cast (sca-broadcast (int16_t t151) 16) 'int32 16))
     (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
    (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
   'int16
   16)
  (sca-broadcast (int16_t (bv #x00ff 16)) 16))
 (sca-broadcast (int16_t (bv #x0000 16)) 16))
"Fold templates"
(list
 (cast
  ...
  (vs-mpy-add
   ...
   (combine
    (cast
     ...
     (vs-shift-right
      ...
      (vs-mpy-add
       ...
       (combine
        (vs-mpy-add
         ...
         (combine
          #<load-data>
          (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))))
         (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
         #f
         #f
         #f
         'int16)
        (broadcast
         ...
         (sca-mul
          (sca-cast
           (sca-mul
            (sca-sub (int16_t t149) (int16_t t150))
            (int16_t (bv #x0040 16)))
           'int32)
          (sca-cast (int16_t input2_multiplier) 'int32))))
       (list (int8_t (bv #x01 8)) (int16_t input1_multiplier))
       #f
       #f
       #f
       'int32)
      (int32_t (bv #x00000010 32))
      #t
      x?$2072
      #t)
     'int16
     #t)
    (broadcast ... (int16_t t151)))
   (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
   #f
   #f
   #f
   'int32)
  'int16
  x?$2495))
here(#(struct:cast ... #(struct:vs-mpy-add ... #<combine: #(struct:cast ... #(struct:vs-shift-right ... #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t148) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f #f #f int16) #(struct:broadcast ... #(struct:sca-mul #(struct:sca-cast #(struct:sca-mul #(struct:sca-sub #(struct:int16_t t149) #(struct:int16_t t150)) #(struct:int16_t (bv #x0040 16))) int32) #(struct:sca-cast #(struct:int16_t input2_multiplier) int32)))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t input1_multiplier)) #f #f #f int32) #(struct:int32_t (bv #x00000010 32)) #t x?$2072 #t) int16 #t) #(struct:broadcast ... #(struct:int16_t t151))> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32) int16 x?$2495))

"Replace templates"
(list
 (cast
  ...
  (cast
   ...
   (vs-mpy-add
    ...
    (combine
     (cast
      ...
      (vs-shift-right
       ...
       (vs-mpy-add
        ...
        (combine
         (vs-mpy-add
          ...
          (combine
           #<load-data>
           (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))))
          (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
          #f
          #f
          #f
          'int16)
         (broadcast
          ...
          (sca-mul
           (sca-cast
            (sca-mul
             (sca-sub (int16_t t149) (int16_t t150))
             (int16_t (bv #x0040 16)))
            'int32)
           (sca-cast (int16_t input2_multiplier) 'int32))))
        (list (int8_t (bv #x01 8)) (int16_t input1_multiplier))
        #f
        #f
        #f
        'int32)
       (int32_t (bv #x00000010 32))
       #t
       x?$2072
       #t)
      'int16
      #t)
     (broadcast ... (int16_t t151)))
    (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
    #f
    #f
    #f
    'int32)
   'int16
   #t)
  'int16
  #t)
 (cast ... (broadcast ... (int16_t (bv #x00ff 16))) 'int16 #t))
run-x86-synthesizer
halide-expr:
  (vec-max
 (vec-min
  (vec-cast
   (vec-max
    (vec-min
     (vec-add
      (vec-cast
       (vec-cast
        (vec-max
         (vec-min
          (vec-add
           (vec-bwand
            (sca-broadcast (int32_t (bv #x00000001 32)) 16)
            (vec-div
             (vec-add
              (vec-mul
               (vec-cast
                (vec-add
                 (vec-mul
                  (vec-cast
                   (load
                    (buffer input1 'uint8)
                    (ramp
                     (sca-add
                      (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
                      (sca-sub
                       (sca-sub (var-lookup 't75) (var-lookup 't81))
                       (var-lookup 'input1.min.0)))
                     1
                     16)
                    (aligned 1 0))
                   'int16
                   16)
                  (sca-broadcast (int16_t (bv #x0040 16)) 16))
                 (sca-broadcast
                  (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))
                  16))
                'int32
                16)
               (vec-cast
                (sca-broadcast (int16_t input1_multiplier) 16)
                'int32
                16))
              (sca-broadcast
               (sca-mul
                (sca-cast
                 (sca-mul
                  (sca-sub (int16_t t149) (int16_t t150))
                  (int16_t (bv #x0040 16)))
                 'int32)
                (sca-cast (int16_t input2_multiplier) 'int32))
               16))
             (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
           (vec-div
            (vec-add
             (vec-mul
              (vec-cast
               (vec-add
                (vec-mul
                 (vec-cast
                  (load
                   (buffer input1 'uint8)
                   (ramp
                    (sca-add
                     (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
                     (sca-sub
                      (sca-sub (var-lookup 't75) (var-lookup 't81))
                      (var-lookup 'input1.min.0)))
                    1
                    16)
                   (aligned 1 0))
                  'int16
                  16)
                 (sca-broadcast (int16_t (bv #x0040 16)) 16))
                (sca-broadcast
                 (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))
                 16))
               'int32
               16)
              (vec-cast
               (sca-broadcast (int16_t input1_multiplier) 16)
               'int32
               16))
             (sca-broadcast
              (sca-mul
               (sca-cast
                (sca-mul
                 (sca-sub (int16_t t149) (int16_t t150))
                 (int16_t (bv #x0040 16)))
                'int32)
               (sca-cast (int16_t input2_multiplier) 'int32))
              16))
            (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
          (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
         (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
        'int16
        16)
       'int32
       16)
      (vec-cast (sca-broadcast (int16_t t151) 16) 'int32 16))
     (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
    (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
   'int16
   16)
  (sca-broadcast (int16_t (bv #x00ff 16)) 16))
 (sca-broadcast (int16_t (bv #x0000 16)) 16))
template:
  (cast ... (broadcast ... (int16_t (bv #x00ff 16))) 'int16 #t)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$2501 idx) (bv #x00ff 16)) (bvsle (bv #x00ff 16) (app abstr-vals$2501 idx)))))
optimized-halide-expr:
  (vec-max
 (vec-min
  (vec-cast
   (vec-max
    (vec-min
     (vec-add
      (vec-cast
       (vec-cast
        (vec-max
         (vec-min
          (vec-add
           (vec-bwand
            (sca-broadcast (int32_t (bv #x00000001 32)) 16)
            (vec-div
             (vec-add
              (vec-mul
               (vec-cast
                (vec-add
                 (vec-mul
                  (vec-cast
                   (load
                    (buffer input1 'uint8)
                    (ramp
                     (sca-add
                      (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
                      (sca-sub
                       (sca-sub (var-lookup 't75) (var-lookup 't81))
                       (var-lookup 'input1.min.0)))
                     1
                     16)
                    (aligned 1 0))
                   'int16
                   16)
                  (sca-broadcast (int16_t (bv #x0040 16)) 16))
                 (sca-broadcast
                  (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))
                  16))
                'int32
                16)
               (vec-cast
                (sca-broadcast (int16_t input1_multiplier) 16)
                'int32
                16))
              (sca-broadcast
               (sca-mul
                (sca-cast
                 (sca-mul
                  (sca-sub (int16_t t149) (int16_t t150))
                  (int16_t (bv #x0040 16)))
                 'int32)
                (sca-cast (int16_t input2_multiplier) 'int32))
               16))
             (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
           (vec-div
            (vec-add
             (vec-mul
              (vec-cast
               (vec-add
                (vec-mul
                 (vec-cast
                  (load
                   (buffer input1 'uint8)
                   (ramp
                    (sca-add
                     (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
                     (sca-sub
                      (sca-sub (var-lookup 't75) (var-lookup 't81))
                      (var-lookup 'input1.min.0)))
                    1
                    16)
                   (aligned 1 0))
                  'int16
                  16)
                 (sca-broadcast (int16_t (bv #x0040 16)) 16))
                (sca-broadcast
                 (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))
                 16))
               'int32
               16)
              (vec-cast
               (sca-broadcast (int16_t input1_multiplier) 16)
               'int32
               16))
             (sca-broadcast
              (sca-mul
               (sca-cast
                (sca-mul
                 (sca-sub (int16_t t149) (int16_t t150))
                 (int16_t (bv #x0040 16)))
                'int32)
               (sca-cast (int16_t input2_multiplier) 'int32))
              16))
            (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
          (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
         (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
        'int16
        16)
       'int32
       16)
      (vec-cast (sca-broadcast (int16_t t151) 16) 'int32 16))
     (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
    (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
   'int16
   16)
  #<abstr-halide-expr>)
 (sca-broadcast (int16_t (bv #x0000 16)) 16))
optimized-template:
  (cast ... #<abstr-expr> 'int16 #t)
optimized Halide 0:
  (int16_t
 (ite (bvsle (bv #x0000 16) (ite (bvsle (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32)) (sign-extend t151 (bitvector 32))) (bv #x00007fff 32)) (bvadd (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32)) (sign-extend t151 (bitvector 32))) (bv #x00007fff 32))) (ite (bvsle (bvadd (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32)) (sign-extend t151 (bitvector 32))) (bv #x00007fff 32)) (bvadd (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32)) (sign-extend t151 (bitvector 32))) (bv #x00007fff 32)) (bv #xffff8000 32))) (app abstr-vals$2501 0)) (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32)) (sign-extend t151 (bitvector 32))) (bv #x00007fff 32)) (bvadd (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32)) (sign-extend t151 (bitvector 32))) (bv #x00007fff 32))) (ite (bvsle (bvadd (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32)) (sign-extend t151 (bitvector 32))) (bv #x00007fff 32)) (bvadd (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32)) (sign-extend t151 (bitvector 32))) (bv #x00007fff 32)) (bv #xffff8000 32))) (app abstr-vals$2501 0))) (ite (bvsle (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32)) (sign-extend t151 (bitvector 32))) (bv #x00007fff 32)) (bvadd (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32)) (sign-extend t151 (bitvector 32))) (bv #x00007fff 32))) (ite (bvsle (bvadd (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32)) (sign-extend t151 (bitvector 32))) (bv #x00007fff 32)) (bvadd (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32)) (sign-extend t151 (bitvector 32))) (bv #x00007fff 32)) (bv #xffff8000 32))) (app abstr-vals$2501 0)) (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32)) (sign-extend t151 (bitvector 32))) (bv #x00007fff 32)) (bvadd (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32)) (sign-extend t151 (bitvector 32))) (bv #x00007fff 32))) (ite (bvsle (bvadd (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32)) (sign-extend t151 (bitvector 32))) (bv #x00007fff 32)) (bvadd (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32)) (sign-extend t151 (bitvector 32))) (bv #x00007fff 32)) (bv #xffff8000 32))) (app abstr-vals$2501 0)) ...))
optimized x86 0:
  (int16_t (app abstr-vals$2501 0))
run-x86-synthesizer
halide-expr:
  (vec-max
 (vec-min
  (vec-cast
   (vec-max
    (vec-min
     (vec-add
      (vec-cast
       (vec-cast
        (vec-max
         (vec-min
          (vec-add
           (vec-bwand
            (sca-broadcast (int32_t (bv #x00000001 32)) 16)
            (vec-div
             (vec-add
              (vec-mul
               (vec-cast
                (vec-add
                 (vec-mul
                  (vec-cast
                   (load
                    (buffer input1 'uint8)
                    (ramp
                     (sca-add
                      (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
                      (sca-sub
                       (sca-sub (var-lookup 't75) (var-lookup 't81))
                       (var-lookup 'input1.min.0)))
                     1
                     16)
                    (aligned 1 0))
                   'int16
                   16)
                  (sca-broadcast (int16_t (bv #x0040 16)) 16))
                 (sca-broadcast
                  (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))
                  16))
                'int32
                16)
               (vec-cast
                (sca-broadcast (int16_t input1_multiplier) 16)
                'int32
                16))
              (sca-broadcast
               (sca-mul
                (sca-cast
                 (sca-mul
                  (sca-sub (int16_t t149) (int16_t t150))
                  (int16_t (bv #x0040 16)))
                 'int32)
                (sca-cast (int16_t input2_multiplier) 'int32))
               16))
             (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
           (vec-div
            (vec-add
             (vec-mul
              (vec-cast
               (vec-add
                (vec-mul
                 (vec-cast
                  (load
                   (buffer input1 'uint8)
                   (ramp
                    (sca-add
                     (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
                     (sca-sub
                      (sca-sub (var-lookup 't75) (var-lookup 't81))
                      (var-lookup 'input1.min.0)))
                    1
                    16)
                   (aligned 1 0))
                  'int16
                  16)
                 (sca-broadcast (int16_t (bv #x0040 16)) 16))
                (sca-broadcast
                 (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))
                 16))
               'int32
               16)
              (vec-cast
               (sca-broadcast (int16_t input1_multiplier) 16)
               'int32
               16))
             (sca-broadcast
              (sca-mul
               (sca-cast
                (sca-mul
                 (sca-sub (int16_t t149) (int16_t t150))
                 (int16_t (bv #x0040 16)))
                'int32)
               (sca-cast (int16_t input2_multiplier) 'int32))
              16))
            (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
          (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
         (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
        'int16
        16)
       'int32
       16)
      (vec-cast (sca-broadcast (int16_t t151) 16) 'int32 16))
     (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
    (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
   'int16
   16)
  (sca-broadcast (int16_t (bv #x00ff 16)) 16))
 (sca-broadcast (int16_t (bv #x0000 16)) 16))
template:
  (cast
 ...
 (vs-mpy-add
  ...
  (combine
   (cast
    ...
    (vs-shift-right
     ...
     (vs-mpy-add
      ...
      (combine
       (vs-mpy-add
        ...
        (combine
         #<load-data>
         (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))))
        (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
        #f
        #f
        #f
        'int16)
       (broadcast
        ...
        (sca-mul
         (sca-cast
          (sca-mul
           (sca-sub (int16_t t149) (int16_t t150))
           (int16_t (bv #x0040 16)))
          'int32)
         (sca-cast (int16_t input2_multiplier) 'int32))))
      (list (int8_t (bv #x01 8)) (int16_t input1_multiplier))
      #f
      #f
      #f
      'int32)
     (int32_t (bv #x00000010 32))
     #t
     x?$2072
     #t)
    'int16
    #t)
   (broadcast ... (int16_t t151)))
  (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
  #f
  #f
  #f
  'int32)
 'int16
 x?$2495)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$2502 idx) (bv #x0000fffe 32)) (bvsle (bv #xffff0000 32) (app abstr-vals$2502 idx)))))
optimized-halide-expr:
  (vec-max
 (vec-min
  (vec-cast
   (vec-max
    (vec-min
     #<abstr-halide-expr>
     (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
    (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
   'int16
   16)
  (sca-broadcast (int16_t (bv #x00ff 16)) 16))
 (sca-broadcast (int16_t (bv #x0000 16)) 16))
optimized-template:
  (cast ... #<abstr-expr> 'int16 x?$2495)
optimized Halide 0:
  (int16_t
 (ite (bvsle (bv #x0000 16) (ite (bvsle (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (app abstr-vals$2502 0) (bv #x00007fff 32)) (app abstr-vals$2502 0) (bv #x00007fff 32))) (ite (bvsle (app abstr-vals$2502 0) (bv #x00007fff 32)) (app abstr-vals$2502 0) (bv #x00007fff 32)) (bv #xffff8000 32))) (bv #x00ff 16)) (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (app abstr-vals$2502 0) (bv #x00007fff 32)) (app abstr-vals$2502 0) (bv #x00007fff 32))) (ite (bvsle (app abstr-vals$2502 0) (bv #x00007fff 32)) (app abstr-vals$2502 0) (bv #x00007fff 32)) (bv #xffff8000 32))) (bv #x00ff 16))) (ite (bvsle (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (app abstr-vals$2502 0) (bv #x00007fff 32)) (app abstr-vals$2502 0) (bv #x00007fff 32))) (ite (bvsle (app abstr-vals$2502 0) (bv #x00007fff 32)) (app abstr-vals$2502 0) (bv #x00007fff 32)) (bv #xffff8000 32))) (bv #x00ff 16)) (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (app abstr-vals$2502 0) (bv #x00007fff 32)) (app abstr-vals$2502 0) (bv #x00007fff 32))) (ite (bvsle (app abstr-vals$2502 0) (bv #x00007fff 32)) (app abstr-vals$2502 0) (bv #x00007fff 32)) (bv #xffff8000 32))) (bv #x00ff 16)) (bv #x0000 16)))
optimized x86 0:
  (int16_t
 (ite x?$2495 (ite (bvslt (app abstr-vals$2502 0) (bv #xffff8000 32)) (bv #x8000 16) (ite (bvslt (bv #x00007fff 32) (app abstr-vals$2502 0)) (bv #x7fff 16) (extract 15 0 (app abstr-vals$2502 0)))) (extract 15 0 (app abstr-vals$2502 0))))
Ran synthesizer for 108 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-max
 (vec-min
  (vec-cast
   (vec-max
    (vec-min
     (vec-add
      (vec-cast
       (vec-cast
        (vec-max
         (vec-min
          (vec-add
           (vec-bwand
            (sca-broadcast (int32_t (bv #x00000001 32)) 16)
            (vec-div
             (vec-add
              (vec-mul
               (vec-cast
                (vec-add
                 (vec-mul
                  (vec-cast
                   (load
                    (buffer input1 'uint8)
                    (ramp
                     (sca-add
                      (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
                      (sca-sub
                       (sca-sub (var-lookup 't75) (var-lookup 't81))
                       (var-lookup 'input1.min.0)))
                     1
                     16)
                    (aligned 1 0))
                   'int16
                   16)
                  (sca-broadcast (int16_t (bv #x0040 16)) 16))
                 (sca-broadcast
                  (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))
                  16))
                'int32
                16)
               (vec-cast
                (sca-broadcast (int16_t input1_multiplier) 16)
                'int32
                16))
              (sca-broadcast
               (sca-mul
                (sca-cast
                 (sca-mul
                  (sca-sub (int16_t t149) (int16_t t150))
                  (int16_t (bv #x0040 16)))
                 'int32)
                (sca-cast (int16_t input2_multiplier) 'int32))
               16))
             (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
           (vec-div
            (vec-add
             (vec-mul
              (vec-cast
               (vec-add
                (vec-mul
                 (vec-cast
                  (load
                   (buffer input1 'uint8)
                   (ramp
                    (sca-add
                     (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
                     (sca-sub
                      (sca-sub (var-lookup 't75) (var-lookup 't81))
                      (var-lookup 'input1.min.0)))
                    1
                    16)
                   (aligned 1 0))
                  'int16
                  16)
                 (sca-broadcast (int16_t (bv #x0040 16)) 16))
                (sca-broadcast
                 (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))
                 16))
               'int32
               16)
              (vec-cast
               (sca-broadcast (int16_t input1_multiplier) 16)
               'int32
               16))
             (sca-broadcast
              (sca-mul
               (sca-cast
                (sca-mul
                 (sca-sub (int16_t t149) (int16_t t150))
                 (int16_t (bv #x0040 16)))
                'int32)
               (sca-cast (int16_t input2_multiplier) 'int32))
              16))
            (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
          (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
         (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
        'int16
        16)
       'int32
       16)
      (vec-cast (sca-broadcast (int16_t t151) 16) 'int32 16))
     (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
    (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
   'int16
   16)
  (sca-broadcast (int16_t (bv #x00ff 16)) 16))
 (sca-broadcast (int16_t (bv #x0000 16)) 16))
template:
  (cast
 ...
 (cast
  ...
  (vs-mpy-add
   ...
   (combine
    (cast
     ...
     (vs-shift-right
      ...
      (vs-mpy-add
       ...
       (combine
        (vs-mpy-add
         ...
         (combine
          #<load-data>
          (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))))
         (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
         #f
         #f
         #f
         'int16)
        (broadcast
         ...
         (sca-mul
          (sca-cast
           (sca-mul
            (sca-sub (int16_t t149) (int16_t t150))
            (int16_t (bv #x0040 16)))
           'int32)
          (sca-cast (int16_t input2_multiplier) 'int32))))
       (list (int8_t (bv #x01 8)) (int16_t input1_multiplier))
       #f
       #f
       #f
       'int32)
      (int32_t (bv #x00000010 32))
      #t
      x?$2072
      #t)
     'int16
     #t)
    (broadcast ... (int16_t t151)))
   (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
   #f
   #f
   #f
   'int32)
  'int16
  #t)
 'int16
 #t)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-max
 (vec-min #<abstr-halide-expr> (sca-broadcast (int16_t (bv #x00ff 16)) 16))
 (sca-broadcast (int16_t (bv #x0000 16)) 16))
optimized-template:
  (cast ... #<abstr-expr> 'int16 #t)
optimized Halide 0:
  (int16_t
 (ite (bvsle (bv #x0000 16) (ite (bvsle (app abstr-vals$2503 0) (bv #x00ff 16)) (app abstr-vals$2503 0) (bv #x00ff 16))) (ite (bvsle (app abstr-vals$2503 0) (bv #x00ff 16)) (app abstr-vals$2503 0) (bv #x00ff 16)) (bv #x0000 16)))
optimized x86 0:
  (int16_t (app abstr-vals$2503 0))
Ran synthesizer for 58 ms
(unsat)
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (vec-max
 (vec-min
  (vec-cast
   (vec-max
    (vec-min
     (vec-add
      (vec-cast
       (vec-cast
        (vec-max
         (vec-min
          (vec-add
           (vec-bwand
            (sca-broadcast (int32_t (bv #x00000001 32)) 16)
            (vec-div
             (vec-add
              (vec-mul
               (vec-cast
                (vec-add
                 (vec-mul
                  (vec-cast
                   (load
                    (buffer input1 'uint8)
                    (ramp
                     (sca-add
                      (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
                      (sca-sub
                       (sca-sub (var-lookup 't75) (var-lookup 't81))
                       (var-lookup 'input1.min.0)))
                     1
                     16)
                    (aligned 1 0))
                   'int16
                   16)
                  (sca-broadcast (int16_t (bv #x0040 16)) 16))
                 (sca-broadcast
                  (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))
                  16))
                'int32
                16)
               (vec-cast
                (sca-broadcast (int16_t input1_multiplier) 16)
                'int32
                16))
              (sca-broadcast
               (sca-mul
                (sca-cast
                 (sca-mul
                  (sca-sub (int16_t t149) (int16_t t150))
                  (int16_t (bv #x0040 16)))
                 'int32)
                (sca-cast (int16_t input2_multiplier) 'int32))
               16))
             (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
           (vec-div
            (vec-add
             (vec-mul
              (vec-cast
               (vec-add
                (vec-mul
                 (vec-cast
                  (load
                   (buffer input1 'uint8)
                   (ramp
                    (sca-add
                     (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
                     (sca-sub
                      (sca-sub (var-lookup 't75) (var-lookup 't81))
                      (var-lookup 'input1.min.0)))
                    1
                    16)
                   (aligned 1 0))
                  'int16
                  16)
                 (sca-broadcast (int16_t (bv #x0040 16)) 16))
                (sca-broadcast
                 (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))
                 16))
               'int32
               16)
              (vec-cast
               (sca-broadcast (int16_t input1_multiplier) 16)
               'int32
               16))
             (sca-broadcast
              (sca-mul
               (sca-cast
                (sca-mul
                 (sca-sub (int16_t t149) (int16_t t150))
                 (int16_t (bv #x0040 16)))
                'int32)
               (sca-cast (int16_t input2_multiplier) 'int32))
              16))
            (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
          (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
         (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
        'int16
        16)
       'int32
       16)
      (vec-cast (sca-broadcast (int16_t t151) 16) 'int32 16))
     (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
    (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
   'int16
   16)
  (sca-broadcast (int16_t (bv #x00ff 16)) 16))
 (sca-broadcast (int16_t (bv #x0000 16)) 16))
template:
  (maximum
 ...
 (minimum
  ...
  (cast
   ...
   (vs-mpy-add
    ...
    (combine
     (cast
      ...
      (vs-shift-right
       ...
       (vs-mpy-add
        ...
        (combine
         (vs-mpy-add
          ...
          (combine
           #<load-data>
           (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))))
          (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
          #f
          #f
          #f
          'int16)
         (broadcast
          ...
          (sca-mul
           (sca-cast
            (sca-mul
             (sca-sub (int16_t t149) (int16_t t150))
             (int16_t (bv #x0040 16)))
            'int32)
           (sca-cast (int16_t input2_multiplier) 'int32))))
        (list (int8_t (bv #x01 8)) (int16_t input1_multiplier))
        #f
        #f
        #f
        'int32)
       (int32_t (bv #x00000010 32))
       #t
       x?$2072
       #t)
      'int16
      #t)
     (broadcast ... (int16_t t151)))
    (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
    #f
    #f
    #f
    'int32)
   'int16
   #t)
  (broadcast ... (int16_t (bv #x00ff 16))))
 (broadcast ... (int16_t (bv #x0000 16))))
axioms:
  (list
 (forall (idx) (bvsle (app abstr-vals$2504 idx) (bv #x00ff 16)))
 (forall (idx) (&& (bvsle (app abstr-vals$2505 idx) (bv #x0000 16)) (bvsle (bv #x0000 16) (app abstr-vals$2505 idx)))))
optimized-halide-expr:
  (vec-max #<abstr-halide-expr> #<abstr-halide-expr>)
optimized-template:
  (maximum ... #<abstr-expr> #<abstr-expr>)
optimized Halide 0:
  (int16_t
 (ite (bvsle (app abstr-vals$2505 0) (app abstr-vals$2504 0)) (app abstr-vals$2504 0) (app abstr-vals$2505 0)))
optimized x86 0:
  (int16_t
 (ite (bvsle (app abstr-vals$2505 0) (app abstr-vals$2504 0)) (app abstr-vals$2504 0) (app abstr-vals$2505 0)))
Ran synthesizer for 42 ms
(model)
(vec-max #<abstr-halide-expr> #<abstr-halide-expr>)
(maximum
 ...
 (minimum
  ...
  (cast
   ...
   (vs-mpy-add
    ...
    (combine
     (cast
      ...
      (vs-shift-right
       ...
       (vs-mpy-add
        ...
        (combine
         (vs-mpy-add
          ...
          (combine
           #<load-data>
           (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))))
          (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
          #f
          #f
          #f
          'int16)
         (broadcast
          ...
          (sca-mul
           (sca-cast
            (sca-mul
             (sca-sub (int16_t t149) (int16_t t150))
             (int16_t (bv #x0040 16)))
            'int32)
           (sca-cast (int16_t input2_multiplier) 'int32))))
        (list (int8_t (bv #x01 8)) (int16_t input1_multiplier))
        #f
        #f
        #f
        'int32)
       (int32_t (bv #x00000010 32))
       #t
       x?$2072
       #t)
      'int16
      #t)
     (broadcast ... (int16_t t151)))
    (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
    #f
    #f
    #f
    'int32)
   'int16
   #t)
  (broadcast ... (int16_t (bv #x00ff 16))))
 (broadcast ... (int16_t (bv #x0000 16))))
Ran bounds analysis for 25 ms
Ran bounds analysis for 23 ms
"Extended success?"
#t
(maximum
 ...
 (minimum
  ...
  (cast
   ...
   (vs-mpy-add
    ...
    (combine
     (cast
      ...
      (vs-shift-right
       ...
       (vs-mpy-add
        ...
        (combine
         (vs-mpy-add
          ...
          (combine
           #<load-data>
           (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))))
          (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
          #f
          #f
          #f
          'int16)
         (broadcast
          ...
          (sca-mul
           (sca-cast
            (sca-mul
             (sca-sub (int16_t t149) (int16_t t150))
             (int16_t (bv #x0040 16)))
            'int32)
           (sca-cast (int16_t input2_multiplier) 'int32))))
        (list (int8_t (bv #x01 8)) (int16_t input1_multiplier))
        #f
        #f
        #f
        'int32)
       (int32_t (bv #x00000010 32))
       #t
       x?$2072
       #t)
      'int16
      #t)
     (broadcast ... (int16_t t151)))
    (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
    #f
    #f
    #f
    'int32)
   'int16
   #t)
  (broadcast ... (int16_t (bv #x00ff 16))))
 (broadcast ... (int16_t (bv #x0000 16))))
"Building Expr:"
(vec-cast
 (vec-max
  (vec-min
   (vec-cast
    (vec-max
     (vec-min
      (vec-add
       (vec-cast
        (vec-cast
         (vec-max
          (vec-min
           (vec-add
            (vec-bwand
             (sca-broadcast (int32_t (bv #x00000001 32)) 16)
             (vec-div
              (vec-add
               (vec-mul
                (vec-cast
                 (vec-add
                  (vec-mul
                   (vec-cast
                    (load
                     (buffer input1 'uint8)
                     (ramp
                      (sca-add
                       (sca-mul
                        (var-lookup 'input1.stride.1)
                        (var-lookup 't53))
                       (sca-sub
                        (sca-sub (var-lookup 't75) (var-lookup 't81))
                        (var-lookup 'input1.min.0)))
                      1
                      16)
                     (aligned 1 0))
                    'int16
                    16)
                   (sca-broadcast (int16_t (bv #x0040 16)) 16))
                  (sca-broadcast
                   (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))
                   16))
                 'int32
                 16)
                (vec-cast
                 (sca-broadcast (int16_t input1_multiplier) 16)
                 'int32
                 16))
               (sca-broadcast
                (sca-mul
                 (sca-cast
                  (sca-mul
                   (sca-sub (int16_t t149) (int16_t t150))
                   (int16_t (bv #x0040 16)))
                  'int32)
                 (sca-cast (int16_t input2_multiplier) 'int32))
                16))
              (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
            (vec-div
             (vec-add
              (vec-mul
               (vec-cast
                (vec-add
                 (vec-mul
                  (vec-cast
                   (load
                    (buffer input1 'uint8)
                    (ramp
                     (sca-add
                      (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
                      (sca-sub
                       (sca-sub (var-lookup 't75) (var-lookup 't81))
                       (var-lookup 'input1.min.0)))
                     1
                     16)
                    (aligned 1 0))
                   'int16
                   16)
                  (sca-broadcast (int16_t (bv #x0040 16)) 16))
                 (sca-broadcast
                  (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))
                  16))
                'int32
                16)
               (vec-cast
                (sca-broadcast (int16_t input1_multiplier) 16)
                'int32
                16))
              (sca-broadcast
               (sca-mul
                (sca-cast
                 (sca-mul
                  (sca-sub (int16_t t149) (int16_t t150))
                  (int16_t (bv #x0040 16)))
                 'int32)
                (sca-cast (int16_t input2_multiplier) 'int32))
               16))
             (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
           (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
          (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
         'int16
         16)
        'int32
        16)
       (vec-cast (sca-broadcast (int16_t t151) 16) 'int32 16))
      (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
     (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
    'int16
    16)
   (sca-broadcast (int16_t (bv #x00ff 16)) 16))
  (sca-broadcast (int16_t (bv #x0000 16)) 16))
 'uint8
 16)
"Fold templates"
(list
 (cast
  ...
  (vs-mpy-add
   ...
   (combine
    (cast
     ...
     (vs-shift-right
      ...
      (vs-mpy-add
       ...
       (combine
        (vs-mpy-add
         ...
         (combine
          #<load-data>
          (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))))
         (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
         #f
         #f
         #f
         'int16)
        (broadcast
         ...
         (sca-mul
          (sca-cast
           (sca-mul
            (sca-sub (int16_t t149) (int16_t t150))
            (int16_t (bv #x0040 16)))
           'int32)
          (sca-cast (int16_t input2_multiplier) 'int32))))
       (list (int8_t (bv #x01 8)) (int16_t input1_multiplier))
       #f
       #f
       #f
       'int32)
      (int32_t (bv #x00000010 32))
      #t
      x?$2072
      #t)
     'int16
     #t)
    (broadcast ... (int16_t t151)))
   (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
   #f
   #f
   #f
   'int32)
  'uint8
  x?$2508))
here(#(struct:cast ... #(struct:vs-mpy-add ... #<combine: #(struct:cast ... #(struct:vs-shift-right ... #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t148) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f #f #f int16) #(struct:broadcast ... #(struct:sca-mul #(struct:sca-cast #(struct:sca-mul #(struct:sca-sub #(struct:int16_t t149) #(struct:int16_t t150)) #(struct:int16_t (bv #x0040 16))) int32) #(struct:sca-cast #(struct:int16_t input2_multiplier) int32)))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t input1_multiplier)) #f #f #f int32) #(struct:int32_t (bv #x00000010 32)) #t x?$2072 #t) int16 #t) #(struct:broadcast ... #(struct:int16_t t151))> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32) uint8 x?$2508))

"Replace templates"
(list
 (cast
  ...
  (vs-mpy-add
   ...
   (combine
    (cast
     ...
     (vs-shift-right
      ...
      (vs-mpy-add
       ...
       (combine
        (vs-mpy-add
         ...
         (combine
          #<load-data>
          (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))))
         (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
         #f
         #f
         #f
         'int16)
        (broadcast
         ...
         (sca-mul
          (sca-cast
           (sca-mul
            (sca-sub (int16_t t149) (int16_t t150))
            (int16_t (bv #x0040 16)))
           'int32)
          (sca-cast (int16_t input2_multiplier) 'int32))))
       (list (int8_t (bv #x01 8)) (int16_t input1_multiplier))
       #f
       #f
       #f
       'int32)
      (int32_t (bv #x00000010 32))
      #t
      x?$2072
      #t)
     'int16
     #t)
    (broadcast ... (int16_t t151)))
   (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
   #f
   #f
   #f
   'int32)
  'uint8
  #f)
 (cast
  ...
  (cast
   ...
   (vs-mpy-add
    ...
    (combine
     (cast
      ...
      (vs-shift-right
       ...
       (vs-mpy-add
        ...
        (combine
         (vs-mpy-add
          ...
          (combine
           #<load-data>
           (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))))
          (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
          #f
          #f
          #f
          'int16)
         (broadcast
          ...
          (sca-mul
           (sca-cast
            (sca-mul
             (sca-sub (int16_t t149) (int16_t t150))
             (int16_t (bv #x0040 16)))
            'int32)
           (sca-cast (int16_t input2_multiplier) 'int32))))
        (list (int8_t (bv #x01 8)) (int16_t input1_multiplier))
        #f
        #f
        #f
        'int32)
       (int32_t (bv #x00000010 32))
       #t
       x?$2072
       #t)
      'int16
      #t)
     (broadcast ... (int16_t t151)))
    (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
    #f
    #f
    #f
    'int32)
   'int16
   #t)
  'uint8
  #t)
 (cast ... (broadcast ... (int16_t (bv #x00ff 16))) 'uint8 #t)
 (cast
  ...
  (minimum
   ...
   (cast
    ...
    (vs-mpy-add
     ...
     (combine
      (cast
       ...
       (vs-shift-right
        ...
        (vs-mpy-add
         ...
         (combine
          (vs-mpy-add
           ...
           (combine
            #<load-data>
            (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))))
           (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
           #f
           #f
           #f
           'int16)
          (broadcast
           ...
           (sca-mul
            (sca-cast
             (sca-mul
              (sca-sub (int16_t t149) (int16_t t150))
              (int16_t (bv #x0040 16)))
             'int32)
            (sca-cast (int16_t input2_multiplier) 'int32))))
         (list (int8_t (bv #x01 8)) (int16_t input1_multiplier))
         #f
         #f
         #f
         'int32)
        (int32_t (bv #x00000010 32))
        #t
        x?$2072
        #t)
       'int16
       #t)
      (broadcast ... (int16_t t151)))
     (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
     #f
     #f
     #f
     'int32)
    'int16
    #t)
   (broadcast ... (int16_t (bv #x00ff 16))))
  'uint8
  #t)
 (cast ... (broadcast ... (int16_t (bv #x0000 16))) 'uint8 #t))
run-x86-synthesizer
halide-expr:
  (vec-cast
 (vec-max
  (vec-min
   (vec-cast
    (vec-max
     (vec-min
      (vec-add
       (vec-cast
        (vec-cast
         (vec-max
          (vec-min
           (vec-add
            (vec-bwand
             (sca-broadcast (int32_t (bv #x00000001 32)) 16)
             (vec-div
              (vec-add
               (vec-mul
                (vec-cast
                 (vec-add
                  (vec-mul
                   (vec-cast
                    (load
                     (buffer input1 'uint8)
                     (ramp
                      (sca-add
                       (sca-mul
                        (var-lookup 'input1.stride.1)
                        (var-lookup 't53))
                       (sca-sub
                        (sca-sub (var-lookup 't75) (var-lookup 't81))
                        (var-lookup 'input1.min.0)))
                      1
                      16)
                     (aligned 1 0))
                    'int16
                    16)
                   (sca-broadcast (int16_t (bv #x0040 16)) 16))
                  (sca-broadcast
                   (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))
                   16))
                 'int32
                 16)
                (vec-cast
                 (sca-broadcast (int16_t input1_multiplier) 16)
                 'int32
                 16))
               (sca-broadcast
                (sca-mul
                 (sca-cast
                  (sca-mul
                   (sca-sub (int16_t t149) (int16_t t150))
                   (int16_t (bv #x0040 16)))
                  'int32)
                 (sca-cast (int16_t input2_multiplier) 'int32))
                16))
              (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
            (vec-div
             (vec-add
              (vec-mul
               (vec-cast
                (vec-add
                 (vec-mul
                  (vec-cast
                   (load
                    (buffer input1 'uint8)
                    (ramp
                     (sca-add
                      (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
                      (sca-sub
                       (sca-sub (var-lookup 't75) (var-lookup 't81))
                       (var-lookup 'input1.min.0)))
                     1
                     16)
                    (aligned 1 0))
                   'int16
                   16)
                  (sca-broadcast (int16_t (bv #x0040 16)) 16))
                 (sca-broadcast
                  (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))
                  16))
                'int32
                16)
               (vec-cast
                (sca-broadcast (int16_t input1_multiplier) 16)
                'int32
                16))
              (sca-broadcast
               (sca-mul
                (sca-cast
                 (sca-mul
                  (sca-sub (int16_t t149) (int16_t t150))
                  (int16_t (bv #x0040 16)))
                 'int32)
                (sca-cast (int16_t input2_multiplier) 'int32))
               16))
             (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
           (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
          (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
         'int16
         16)
        'int32
        16)
       (vec-cast (sca-broadcast (int16_t t151) 16) 'int32 16))
      (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
     (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
    'int16
    16)
   (sca-broadcast (int16_t (bv #x00ff 16)) 16))
  (sca-broadcast (int16_t (bv #x0000 16)) 16))
 'uint8
 16)
template:
  (cast ... (broadcast ... (int16_t (bv #x00ff 16))) 'uint8 #t)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$2509 idx) (bv #x00ff 16)) (bvsle (bv #x00ff 16) (app abstr-vals$2509 idx)))))
optimized-halide-expr:
  (vec-cast
 (vec-max
  (vec-min
   (vec-cast
    (vec-max
     (vec-min
      (vec-add
       (vec-cast
        (vec-cast
         (vec-max
          (vec-min
           (vec-add
            (vec-bwand
             (sca-broadcast (int32_t (bv #x00000001 32)) 16)
             (vec-div
              (vec-add
               (vec-mul
                (vec-cast
                 (vec-add
                  (vec-mul
                   (vec-cast
                    (load
                     (buffer input1 'uint8)
                     (ramp
                      (sca-add
                       (sca-mul
                        (var-lookup 'input1.stride.1)
                        (var-lookup 't53))
                       (sca-sub
                        (sca-sub (var-lookup 't75) (var-lookup 't81))
                        (var-lookup 'input1.min.0)))
                      1
                      16)
                     (aligned 1 0))
                    'int16
                    16)
                   (sca-broadcast (int16_t (bv #x0040 16)) 16))
                  (sca-broadcast
                   (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))
                   16))
                 'int32
                 16)
                (vec-cast
                 (sca-broadcast (int16_t input1_multiplier) 16)
                 'int32
                 16))
               (sca-broadcast
                (sca-mul
                 (sca-cast
                  (sca-mul
                   (sca-sub (int16_t t149) (int16_t t150))
                   (int16_t (bv #x0040 16)))
                  'int32)
                 (sca-cast (int16_t input2_multiplier) 'int32))
                16))
              (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
            (vec-div
             (vec-add
              (vec-mul
               (vec-cast
                (vec-add
                 (vec-mul
                  (vec-cast
                   (load
                    (buffer input1 'uint8)
                    (ramp
                     (sca-add
                      (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
                      (sca-sub
                       (sca-sub (var-lookup 't75) (var-lookup 't81))
                       (var-lookup 'input1.min.0)))
                     1
                     16)
                    (aligned 1 0))
                   'int16
                   16)
                  (sca-broadcast (int16_t (bv #x0040 16)) 16))
                 (sca-broadcast
                  (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))
                  16))
                'int32
                16)
               (vec-cast
                (sca-broadcast (int16_t input1_multiplier) 16)
                'int32
                16))
              (sca-broadcast
               (sca-mul
                (sca-cast
                 (sca-mul
                  (sca-sub (int16_t t149) (int16_t t150))
                  (int16_t (bv #x0040 16)))
                 'int32)
                (sca-cast (int16_t input2_multiplier) 'int32))
               16))
             (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
           (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
          (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
         'int16
         16)
        'int32
        16)
       (vec-cast (sca-broadcast (int16_t t151) 16) 'int32 16))
      (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
     (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
    'int16
    16)
   #<abstr-halide-expr>)
  (sca-broadcast (int16_t (bv #x0000 16)) 16))
 'uint8
 16)
optimized-template:
  (cast ... #<abstr-expr> 'uint8 #t)
optimized Halide 0:
  (uint8_t
 (extract 7 0 (ite (bvsle (bv #x0000 16) (ite (bvsle (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32)) (sign-extend t151 (bitvector 32))) (bv #x00007fff 32)) (bvadd (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32)) (sign-extend t151 (bitvector 32))) (bv #x00007fff 32))) (ite (bvsle (bvadd (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32)) (sign-extend t151 (bitvector 32))) (bv #x00007fff 32)) (bvadd (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32)) (sign-extend t151 (bitvector 32))) (bv #x00007fff 32)) (bv #xffff8000 32))) (app abstr-vals$2509 0)) (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32)) (sign-extend t151 (bitvector 32))) (bv #x00007fff 32)) (bvadd (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32)) (sign-extend t151 (bitvector 32))) (bv #x00007fff 32))) (ite (bvsle (bvadd (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32)) (sign-extend t151 (bitvector 32))) (bv #x00007fff 32)) (bvadd (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32)) (sign-extend t151 (bitvector 32))) (bv #x00007fff 32)) (bv #xffff8000 32))) (app abstr-vals$2509 0))) (ite (bvsle (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32)) (sign-extend t151 (bitvector 32))) (bv #x00007fff 32)) (bvadd (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32)) (sign-extend t151 (bitvector 32))) (bv #x00007fff 32))) (ite (bvsle (bvadd (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32)) (sign-extend t151 (bitvector 32))) (bv #x00007fff 32)) (bvadd (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32)) (sign-extend t151 (bitvector 32))) (bv #x00007fff 32)) (bv #xffff8000 32))) (app abstr-vals$2509 0)) (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32)) (sign-extend t151 (bitvector 32))) (bv #x00007fff 32)) (bvadd (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32)) (sign-extend t151 (bitvector 32))) (bv #x00007fff 32))) (ite (bvsle (bvadd (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32)) (sign-extend t151 (bitvector 32))) (bv #x00007fff 32)) (bvadd (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32)) (sign-extend t151 (bitvector 32))) (bv #x00007fff 32)) (bv #xffff8000 32))) (app abstr-vals$2509 0)) ...)))
optimized x86 0:
  (uint8_t
 (ite (bvslt (app abstr-vals$2509 0) (bv #x0000 16)) (bv #x00 8) (ite (bvslt (bv #x00ff 16) (app abstr-vals$2509 0)) (bv #xff 8) (extract 7 0 (app abstr-vals$2509 0)))))
run-x86-synthesizer
halide-expr:
  (vec-cast
 (vec-max
  (vec-min
   (vec-cast
    (vec-max
     (vec-min
      (vec-add
       (vec-cast
        (vec-cast
         (vec-max
          (vec-min
           (vec-add
            (vec-bwand
             (sca-broadcast (int32_t (bv #x00000001 32)) 16)
             (vec-div
              (vec-add
               (vec-mul
                (vec-cast
                 (vec-add
                  (vec-mul
                   (vec-cast
                    (load
                     (buffer input1 'uint8)
                     (ramp
                      (sca-add
                       (sca-mul
                        (var-lookup 'input1.stride.1)
                        (var-lookup 't53))
                       (sca-sub
                        (sca-sub (var-lookup 't75) (var-lookup 't81))
                        (var-lookup 'input1.min.0)))
                      1
                      16)
                     (aligned 1 0))
                    'int16
                    16)
                   (sca-broadcast (int16_t (bv #x0040 16)) 16))
                  (sca-broadcast
                   (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))
                   16))
                 'int32
                 16)
                (vec-cast
                 (sca-broadcast (int16_t input1_multiplier) 16)
                 'int32
                 16))
               (sca-broadcast
                (sca-mul
                 (sca-cast
                  (sca-mul
                   (sca-sub (int16_t t149) (int16_t t150))
                   (int16_t (bv #x0040 16)))
                  'int32)
                 (sca-cast (int16_t input2_multiplier) 'int32))
                16))
              (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
            (vec-div
             (vec-add
              (vec-mul
               (vec-cast
                (vec-add
                 (vec-mul
                  (vec-cast
                   (load
                    (buffer input1 'uint8)
                    (ramp
                     (sca-add
                      (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
                      (sca-sub
                       (sca-sub (var-lookup 't75) (var-lookup 't81))
                       (var-lookup 'input1.min.0)))
                     1
                     16)
                    (aligned 1 0))
                   'int16
                   16)
                  (sca-broadcast (int16_t (bv #x0040 16)) 16))
                 (sca-broadcast
                  (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))
                  16))
                'int32
                16)
               (vec-cast
                (sca-broadcast (int16_t input1_multiplier) 16)
                'int32
                16))
              (sca-broadcast
               (sca-mul
                (sca-cast
                 (sca-mul
                  (sca-sub (int16_t t149) (int16_t t150))
                  (int16_t (bv #x0040 16)))
                 'int32)
                (sca-cast (int16_t input2_multiplier) 'int32))
               16))
             (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
           (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
          (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
         'int16
         16)
        'int32
        16)
       (vec-cast (sca-broadcast (int16_t t151) 16) 'int32 16))
      (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
     (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
    'int16
    16)
   (sca-broadcast (int16_t (bv #x00ff 16)) 16))
  (sca-broadcast (int16_t (bv #x0000 16)) 16))
 'uint8
 16)
template:
  (cast ... (broadcast ... (int16_t (bv #x0000 16))) 'uint8 #t)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$2510 idx) (bv #x0000 16)) (bvsle (bv #x0000 16) (app abstr-vals$2510 idx)))))
optimized-halide-expr:
  (vec-cast
 (vec-max
  (vec-min
   (vec-cast
    (vec-max
     (vec-min
      (vec-add
       (vec-cast
        (vec-cast
         (vec-max
          (vec-min
           (vec-add
            (vec-bwand
             (sca-broadcast (int32_t (bv #x00000001 32)) 16)
             (vec-div
              (vec-add
               (vec-mul
                (vec-cast
                 (vec-add
                  (vec-mul
                   (vec-cast
                    (load
                     (buffer input1 'uint8)
                     (ramp
                      (sca-add
                       (sca-mul
                        (var-lookup 'input1.stride.1)
                        (var-lookup 't53))
                       (sca-sub
                        (sca-sub (var-lookup 't75) (var-lookup 't81))
                        (var-lookup 'input1.min.0)))
                      1
                      16)
                     (aligned 1 0))
                    'int16
                    16)
                   (sca-broadcast (int16_t (bv #x0040 16)) 16))
                  (sca-broadcast
                   (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))
                   16))
                 'int32
                 16)
                (vec-cast
                 (sca-broadcast (int16_t input1_multiplier) 16)
                 'int32
                 16))
               (sca-broadcast
                (sca-mul
                 (sca-cast
                  (sca-mul
                   (sca-sub (int16_t t149) (int16_t t150))
                   (int16_t (bv #x0040 16)))
                  'int32)
                 (sca-cast (int16_t input2_multiplier) 'int32))
                16))
              (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
            (vec-div
             (vec-add
              (vec-mul
               (vec-cast
                (vec-add
                 (vec-mul
                  (vec-cast
                   (load
                    (buffer input1 'uint8)
                    (ramp
                     (sca-add
                      (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
                      (sca-sub
                       (sca-sub (var-lookup 't75) (var-lookup 't81))
                       (var-lookup 'input1.min.0)))
                     1
                     16)
                    (aligned 1 0))
                   'int16
                   16)
                  (sca-broadcast (int16_t (bv #x0040 16)) 16))
                 (sca-broadcast
                  (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))
                  16))
                'int32
                16)
               (vec-cast
                (sca-broadcast (int16_t input1_multiplier) 16)
                'int32
                16))
              (sca-broadcast
               (sca-mul
                (sca-cast
                 (sca-mul
                  (sca-sub (int16_t t149) (int16_t t150))
                  (int16_t (bv #x0040 16)))
                 'int32)
                (sca-cast (int16_t input2_multiplier) 'int32))
               16))
             (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
           (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
          (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
         'int16
         16)
        'int32
        16)
       (vec-cast (sca-broadcast (int16_t t151) 16) 'int32 16))
      (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
     (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
    'int16
    16)
   (sca-broadcast (int16_t (bv #x00ff 16)) 16))
  #<abstr-halide-expr>)
 'uint8
 16)
optimized-template:
  (cast ... #<abstr-expr> 'uint8 #t)
optimized Halide 0:
  (uint8_t
 (extract 7 0 (ite (bvsle (app abstr-vals$2510 0) (ite (bvsle (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32)) (sign-extend t151 (bitvector 32))) (bv #x00007fff 32)) (bvadd (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32)) (sign-extend t151 (bitvector 32))) (bv #x00007fff 32))) (ite (bvsle (bvadd (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32)) (sign-extend t151 (bitvector 32))) (bv #x00007fff 32)) (bvadd (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32)) (sign-extend t151 (bitvector 32))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bv #x00ff 16)) (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32)) (sign-extend t151 (bitvector 32))) (bv #x00007fff 32)) (bvadd (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32)) (sign-extend t151 (bitvector 32))) (bv #x00007fff 32))) (ite (bvsle (bvadd (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32)) (sign-extend t151 (bitvector 32))) (bv #x00007fff 32)) (bvadd (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32)) (sign-extend t151 (bitvector 32))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bv #x00ff 16))) (ite (bvsle (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32)) (sign-extend t151 (bitvector 32))) (bv #x00007fff 32)) (bvadd (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32)) (sign-extend t151 (bitvector 32))) (bv #x00007fff 32))) (ite (bvsle (bvadd (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32)) (sign-extend t151 (bitvector 32))) (bv #x00007fff 32)) (bvadd (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32)) (sign-extend t151 (bitvector 32))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bv #x00ff 16)) (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32)) (sign-extend t151 (bitvector 32))) (bv #x00007fff 32)) (bvadd (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32)) (sign-extend t151 (bitvector 32))) (bv #x00007fff 32))) (ite (bvsle (bvadd (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32)) (sign-extend t151 (bitvector 32))) (bv #x00007fff 32)) (bvadd (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32)) (sign-extend t151 (bitvector 32))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bv #x00ff 16)) ...)))
optimized x86 0:
  (uint8_t
 (ite (bvslt (app abstr-vals$2510 0) (bv #x0000 16)) (bv #x00 8) (ite (bvslt (bv #x00ff 16) (app abstr-vals$2510 0)) (bv #xff 8) (extract 7 0 (app abstr-vals$2510 0)))))
run-x86-synthesizer
halide-expr:
  (vec-cast
 (vec-max
  (vec-min
   (vec-cast
    (vec-max
     (vec-min
      (vec-add
       (vec-cast
        (vec-cast
         (vec-max
          (vec-min
           (vec-add
            (vec-bwand
             (sca-broadcast (int32_t (bv #x00000001 32)) 16)
             (vec-div
              (vec-add
               (vec-mul
                (vec-cast
                 (vec-add
                  (vec-mul
                   (vec-cast
                    (load
                     (buffer input1 'uint8)
                     (ramp
                      (sca-add
                       (sca-mul
                        (var-lookup 'input1.stride.1)
                        (var-lookup 't53))
                       (sca-sub
                        (sca-sub (var-lookup 't75) (var-lookup 't81))
                        (var-lookup 'input1.min.0)))
                      1
                      16)
                     (aligned 1 0))
                    'int16
                    16)
                   (sca-broadcast (int16_t (bv #x0040 16)) 16))
                  (sca-broadcast
                   (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))
                   16))
                 'int32
                 16)
                (vec-cast
                 (sca-broadcast (int16_t input1_multiplier) 16)
                 'int32
                 16))
               (sca-broadcast
                (sca-mul
                 (sca-cast
                  (sca-mul
                   (sca-sub (int16_t t149) (int16_t t150))
                   (int16_t (bv #x0040 16)))
                  'int32)
                 (sca-cast (int16_t input2_multiplier) 'int32))
                16))
              (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
            (vec-div
             (vec-add
              (vec-mul
               (vec-cast
                (vec-add
                 (vec-mul
                  (vec-cast
                   (load
                    (buffer input1 'uint8)
                    (ramp
                     (sca-add
                      (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't53))
                      (sca-sub
                       (sca-sub (var-lookup 't75) (var-lookup 't81))
                       (var-lookup 'input1.min.0)))
                     1
                     16)
                    (aligned 1 0))
                   'int16
                   16)
                  (sca-broadcast (int16_t (bv #x0040 16)) 16))
                 (sca-broadcast
                  (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))
                  16))
                'int32
                16)
               (vec-cast
                (sca-broadcast (int16_t input1_multiplier) 16)
                'int32
                16))
              (sca-broadcast
               (sca-mul
                (sca-cast
                 (sca-mul
                  (sca-sub (int16_t t149) (int16_t t150))
                  (int16_t (bv #x0040 16)))
                 'int32)
                (sca-cast (int16_t input2_multiplier) 'int32))
               16))
             (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
           (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
          (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
         'int16
         16)
        'int32
        16)
       (vec-cast (sca-broadcast (int16_t t151) 16) 'int32 16))
      (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
     (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
    'int16
    16)
   (sca-broadcast (int16_t (bv #x00ff 16)) 16))
  (sca-broadcast (int16_t (bv #x0000 16)) 16))
 'uint8
 16)
template:
  (cast
 ...
 (vs-mpy-add
  ...
  (combine
   (cast
    ...
    (vs-shift-right
     ...
     (vs-mpy-add
      ...
      (combine
       (vs-mpy-add
        ...
        (combine
         #<load-data>
         (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))))
        (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
        #f
        #f
        #f
        'int16)
       (broadcast
        ...
        (sca-mul
         (sca-cast
          (sca-mul
           (sca-sub (int16_t t149) (int16_t t150))
           (int16_t (bv #x0040 16)))
          'int32)
         (sca-cast (int16_t input2_multiplier) 'int32))))
      (list (int8_t (bv #x01 8)) (int16_t input1_multiplier))
      #f
      #f
      #f
      'int32)
     (int32_t (bv #x00000010 32))
     #t
     x?$2072
     #t)
    'int16
    #t)
   (broadcast ... (int16_t t151)))
  (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
  #f
  #f
  #f
  'int32)
 'uint8
 x?$2508)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$2511 idx) (bv #x0000fffe 32)) (bvsle (bv #xffff0000 32) (app abstr-vals$2511 idx)))))
optimized-halide-expr:
  (vec-cast
 (vec-max
  (vec-min
   (vec-cast
    (vec-max
     (vec-min
      #<abstr-halide-expr>
      (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
     (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
    'int16
    16)
   (sca-broadcast (int16_t (bv #x00ff 16)) 16))
  (sca-broadcast (int16_t (bv #x0000 16)) 16))
 'uint8
 16)
optimized-template:
  (cast ... #<abstr-expr> 'uint8 x?$2508)
optimized Halide 0:
  (uint8_t
 (extract 7 0 (ite (bvsle (bv #x0000 16) (ite (bvsle (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (app abstr-vals$2511 0) (bv #x00007fff 32)) (app abstr-vals$2511 0) (bv #x00007fff 32))) (ite (bvsle (app abstr-vals$2511 0) (bv #x00007fff 32)) (app abstr-vals$2511 0) (bv #x00007fff 32)) (bv #xffff8000 32))) (bv #x00ff 16)) (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (app abstr-vals$2511 0) (bv #x00007fff 32)) (app abstr-vals$2511 0) (bv #x00007fff 32))) (ite (bvsle (app abstr-vals$2511 0) (bv #x00007fff 32)) (app abstr-vals$2511 0) (bv #x00007fff 32)) (bv #xffff8000 32))) (bv #x00ff 16))) (ite (bvsle (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (app abstr-vals$2511 0) (bv #x00007fff 32)) (app abstr-vals$2511 0) (bv #x00007fff 32))) (ite (bvsle (app abstr-vals$2511 0) (bv #x00007fff 32)) (app abstr-vals$2511 0) (bv #x00007fff 32)) (bv #xffff8000 32))) (bv #x00ff 16)) (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (app abstr-vals$2511 0) (bv #x00007fff 32)) (app abstr-vals$2511 0) (bv #x00007fff 32))) (ite (bvsle (app abstr-vals$2511 0) (bv #x00007fff 32)) (app abstr-vals$2511 0) (bv #x00007fff 32)) (bv #xffff8000 32))) (bv #x00ff 16)) (bv #x0000 16))))
optimized x86 0:
  (uint8_t
 (ite x?$2508 (ite (bvslt (app abstr-vals$2511 0) (bv #x00000000 32)) (bv #x00 8) (ite (bvslt (bv #x000000ff 32) (app abstr-vals$2511 0)) (bv #xff 8) (extract 7 0 (app abstr-vals$2511 0)))) (extract 7 0 (app abstr-vals$2511 0))))
Ran synthesizer for 98 ms
(model
 [x?$2508 #t])
(vec-cast
 (vec-max
  (vec-min
   (vec-cast
    (vec-max
     (vec-min
      #<abstr-halide-expr>
      (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
     (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
    'int16
    16)
   (sca-broadcast (int16_t (bv #x00ff 16)) 16))
  (sca-broadcast (int16_t (bv #x0000 16)) 16))
 'uint8
 16)
(cast
 ...
 (vs-mpy-add
  ...
  (combine
   (cast
    ...
    (vs-shift-right
     ...
     (vs-mpy-add
      ...
      (combine
       (vs-mpy-add
        ...
        (combine
         #<load-data>
         (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))))
        (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
        #f
        #f
        #f
        'int16)
       (broadcast
        ...
        (sca-mul
         (sca-cast
          (sca-mul
           (sca-sub (int16_t t149) (int16_t t150))
           (int16_t (bv #x0040 16)))
          'int32)
         (sca-cast (int16_t input2_multiplier) 'int32))))
      (list (int8_t (bv #x01 8)) (int16_t input1_multiplier))
      #f
      #f
      #f
      'int32)
     (int32_t (bv #x00000010 32))
     #t
     x?$2072
     #t)
    'int16
    #t)
   (broadcast ... (int16_t t151)))
  (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
  #f
  #f
  #f
  'int32)
 'uint8
 #t)
Ran bounds analysis for 22 ms
Ran bounds analysis for 12 ms
"Success?"
#t
(cast ... (vs-mpy-add ... (combine (cast ... (vs-shift-right ... (vs-mpy-add ... (combine (vs-mpy-add ... (combine #<load-data> (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16))))) (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16))) #f #f #f 'int16) (broadcast ... (sca-mul (sca-cast (sca-mul (sca-sub (int16_t t149) (int16_t t150)) (int16_t (bv #x0040 16))) 'int32) (sca-cast (int16_t input2_multiplier) 'int32)))) (list (int8_t (bv #x01 8)) (int16_t input1_multiplier)) #f #f #f 'int32) (int32_t (bv #x00000010 32)) #t x?$2072 #t) 'int16 #t) (broadcast ... (int16_t t151))) (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8))) #f #f #f 'int32) 'uint8 #t)
"Building Expr:"
(sca-broadcast (uint8_t output_max) 16)
"Fold templates"
'()
here()

"Replace templates"
'()
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (sca-broadcast (uint8_t output_max) 16)
template:
  (broadcast ... (uint8_t output_max))
axioms:
  '()
optimized-halide-expr:
  (sca-broadcast (uint8_t output_max) 16)
optimized-template:
  (broadcast ... (uint8_t output_max))
optimized Halide 0:
  (uint8_t output_max)
optimized x86 0:
  (uint8_t output_max)
Ran synthesizer for 20 ms
(model)
(sca-broadcast (uint8_t output_max) 16)
(broadcast ... (uint8_t output_max))
Ran bounds analysis for 22 ms
Ran bounds analysis for 14 ms
"Extended success?"
#t
(broadcast ... (uint8_t output_max))
"Building Expr:"
(vec-min
 (vec-cast
  (vec-max
   (vec-min
    (vec-cast
     (vec-max
      (vec-min
       (vec-add
        (vec-cast
         (vec-cast
          (vec-max
           (vec-min
            (vec-add
             (vec-bwand
              (sca-broadcast (int32_t (bv #x00000001 32)) 16)
              (vec-div
               (vec-add
                (vec-mul
                 (vec-cast
                  (vec-add
                   (vec-mul
                    (vec-cast
                     (load
                      (buffer input1 'uint8)
                      (ramp
                       (sca-add
                        (sca-mul
                         (var-lookup 'input1.stride.1)
                         (var-lookup 't53))
                        (sca-sub
                         (sca-sub (var-lookup 't75) (var-lookup 't81))
                         (var-lookup 'input1.min.0)))
                       1
                       16)
                      (aligned 1 0))
                     'int16
                     16)
                    (sca-broadcast (int16_t (bv #x0040 16)) 16))
                   (sca-broadcast
                    (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))
                    16))
                  'int32
                  16)
                 (vec-cast
                  (sca-broadcast (int16_t input1_multiplier) 16)
                  'int32
                  16))
                (sca-broadcast
                 (sca-mul
                  (sca-cast
                   (sca-mul
                    (sca-sub (int16_t t149) (int16_t t150))
                    (int16_t (bv #x0040 16)))
                   'int32)
                  (sca-cast (int16_t input2_multiplier) 'int32))
                 16))
               (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
             (vec-div
              (vec-add
               (vec-mul
                (vec-cast
                 (vec-add
                  (vec-mul
                   (vec-cast
                    (load
                     (buffer input1 'uint8)
                     (ramp
                      (sca-add
                       (sca-mul
                        (var-lookup 'input1.stride.1)
                        (var-lookup 't53))
                       (sca-sub
                        (sca-sub (var-lookup 't75) (var-lookup 't81))
                        (var-lookup 'input1.min.0)))
                      1
                      16)
                     (aligned 1 0))
                    'int16
                    16)
                   (sca-broadcast (int16_t (bv #x0040 16)) 16))
                  (sca-broadcast
                   (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))
                   16))
                 'int32
                 16)
                (vec-cast
                 (sca-broadcast (int16_t input1_multiplier) 16)
                 'int32
                 16))
               (sca-broadcast
                (sca-mul
                 (sca-cast
                  (sca-mul
                   (sca-sub (int16_t t149) (int16_t t150))
                   (int16_t (bv #x0040 16)))
                  'int32)
                 (sca-cast (int16_t input2_multiplier) 'int32))
                16))
              (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
            (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
           (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
          'int16
          16)
         'int32
         16)
        (vec-cast (sca-broadcast (int16_t t151) 16) 'int32 16))
       (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
      (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
     'int16
     16)
    (sca-broadcast (int16_t (bv #x00ff 16)) 16))
   (sca-broadcast (int16_t (bv #x0000 16)) 16))
  'uint8
  16)
 (sca-broadcast (uint8_t output_max) 16))
"Fold templates"
(list
 (cast
  ...
  (vs-mpy-add
   ...
   (combine
    (cast
     ...
     (vs-shift-right
      ...
      (vs-mpy-add
       ...
       (combine
        (vs-mpy-add
         ...
         (combine
          #<load-data>
          (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))))
         (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
         #f
         #f
         #f
         'int16)
        (broadcast
         ...
         (sca-mul
          (sca-cast
           (sca-mul
            (sca-sub (int16_t t149) (int16_t t150))
            (int16_t (bv #x0040 16)))
           'int32)
          (sca-cast (int16_t input2_multiplier) 'int32))))
       (list (int8_t (bv #x01 8)) (int16_t input1_multiplier))
       #f
       #f
       #f
       'int32)
      (int32_t (bv #x00000010 32))
      #t
      x?$2072
      #t)
     'int16
     #t)
    (broadcast ... (int16_t t151)))
   (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
   #f
   #f
   #f
   'int32)
  'uint8
  x?$2513))
here(#(struct:cast ... #(struct:vs-mpy-add ... #<combine: #(struct:cast ... #(struct:vs-shift-right ... #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t148) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f #f #f int16) #(struct:broadcast ... #(struct:sca-mul #(struct:sca-cast #(struct:sca-mul #(struct:sca-sub #(struct:int16_t t149) #(struct:int16_t t150)) #(struct:int16_t (bv #x0040 16))) int32) #(struct:sca-cast #(struct:int16_t input2_multiplier) int32)))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t input1_multiplier)) #f #f #f int32) #(struct:int32_t (bv #x00000010 32)) #t x?$2072 #t) int16 #t) #(struct:broadcast ... #(struct:int16_t t151))> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32) uint8 x?$2513))

"Replace templates"
'()
run-x86-synthesizer
halide-expr:
  (vec-min
 (vec-cast
  (vec-max
   (vec-min
    (vec-cast
     (vec-max
      (vec-min
       (vec-add
        (vec-cast
         (vec-cast
          (vec-max
           (vec-min
            (vec-add
             (vec-bwand
              (sca-broadcast (int32_t (bv #x00000001 32)) 16)
              (vec-div
               (vec-add
                (vec-mul
                 (vec-cast
                  (vec-add
                   (vec-mul
                    (vec-cast
                     (load
                      (buffer input1 'uint8)
                      (ramp
                       (sca-add
                        (sca-mul
                         (var-lookup 'input1.stride.1)
                         (var-lookup 't53))
                        (sca-sub
                         (sca-sub (var-lookup 't75) (var-lookup 't81))
                         (var-lookup 'input1.min.0)))
                       1
                       16)
                      (aligned 1 0))
                     'int16
                     16)
                    (sca-broadcast (int16_t (bv #x0040 16)) 16))
                   (sca-broadcast
                    (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))
                    16))
                  'int32
                  16)
                 (vec-cast
                  (sca-broadcast (int16_t input1_multiplier) 16)
                  'int32
                  16))
                (sca-broadcast
                 (sca-mul
                  (sca-cast
                   (sca-mul
                    (sca-sub (int16_t t149) (int16_t t150))
                    (int16_t (bv #x0040 16)))
                   'int32)
                  (sca-cast (int16_t input2_multiplier) 'int32))
                 16))
               (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
             (vec-div
              (vec-add
               (vec-mul
                (vec-cast
                 (vec-add
                  (vec-mul
                   (vec-cast
                    (load
                     (buffer input1 'uint8)
                     (ramp
                      (sca-add
                       (sca-mul
                        (var-lookup 'input1.stride.1)
                        (var-lookup 't53))
                       (sca-sub
                        (sca-sub (var-lookup 't75) (var-lookup 't81))
                        (var-lookup 'input1.min.0)))
                      1
                      16)
                     (aligned 1 0))
                    'int16
                    16)
                   (sca-broadcast (int16_t (bv #x0040 16)) 16))
                  (sca-broadcast
                   (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))
                   16))
                 'int32
                 16)
                (vec-cast
                 (sca-broadcast (int16_t input1_multiplier) 16)
                 'int32
                 16))
               (sca-broadcast
                (sca-mul
                 (sca-cast
                  (sca-mul
                   (sca-sub (int16_t t149) (int16_t t150))
                   (int16_t (bv #x0040 16)))
                  'int32)
                 (sca-cast (int16_t input2_multiplier) 'int32))
                16))
              (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
            (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
           (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
          'int16
          16)
         'int32
         16)
        (vec-cast (sca-broadcast (int16_t t151) 16) 'int32 16))
       (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
      (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
     'int16
     16)
    (sca-broadcast (int16_t (bv #x00ff 16)) 16))
   (sca-broadcast (int16_t (bv #x0000 16)) 16))
  'uint8
  16)
 (sca-broadcast (uint8_t output_max) 16))
template:
  (cast
 ...
 (vs-mpy-add
  ...
  (combine
   (cast
    ...
    (vs-shift-right
     ...
     (vs-mpy-add
      ...
      (combine
       (vs-mpy-add
        ...
        (combine
         #<load-data>
         (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))))
        (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
        #f
        #f
        #f
        'int16)
       (broadcast
        ...
        (sca-mul
         (sca-cast
          (sca-mul
           (sca-sub (int16_t t149) (int16_t t150))
           (int16_t (bv #x0040 16)))
          'int32)
         (sca-cast (int16_t input2_multiplier) 'int32))))
      (list (int8_t (bv #x01 8)) (int16_t input1_multiplier))
      #f
      #f
      #f
      'int32)
     (int32_t (bv #x00000010 32))
     #t
     x?$2072
     #t)
    'int16
    #t)
   (broadcast ... (int16_t t151)))
  (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
  #f
  #f
  #f
  'int32)
 'uint8
 x?$2513)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$2519 idx) (bv #x0000fffe 32)) (bvsle (bv #xffff0000 32) (app abstr-vals$2519 idx)))))
optimized-halide-expr:
  (vec-min
 (vec-cast
  (vec-max
   (vec-min
    (vec-cast
     (vec-max
      (vec-min
       #<abstr-halide-expr>
       (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
      (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
     'int16
     16)
    (sca-broadcast (int16_t (bv #x00ff 16)) 16))
   (sca-broadcast (int16_t (bv #x0000 16)) 16))
  'uint8
  16)
 (sca-broadcast (uint8_t output_max) 16))
optimized-template:
  (cast ... #<abstr-expr> 'uint8 x?$2513)
optimized Halide 0:
  (uint8_t
 (ite (bvule (extract 7 0 (ite (bvsle (bv #x0000 16) (ite (bvsle (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (app abstr-vals$2519 0) (bv #x00007fff 32)) (app abstr-vals$2519 0) (bv #x00007fff 32))) (ite (bvsle (app abstr-vals$2519 0) (bv #x00007fff 32)) (app abstr-vals$2519 0) (bv #x00007fff 32)) (bv #xffff8000 32))) (bv #x00ff 16)) (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (app abstr-vals$2519 0) (bv #x00007fff 32)) (app abstr-vals$2519 0) (bv #x00007fff 32))) (ite (bvsle (app abstr-vals$2519 0) (bv #x00007fff 32)) (app abstr-vals$2519 0) (bv #x00007fff 32)) (bv #xffff8000 32))) (bv #x00ff 16))) (ite (bvsle (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (app abstr-vals$2519 0) (bv #x00007fff 32)) (app abstr-vals$2519 0) (bv #x00007fff 32))) (ite (bvsle (app abstr-vals$2519 0) (bv #x00007fff 32)) (app abstr-vals$2519 0) (bv #x00007fff 32)) (bv #xffff8000 32))) (bv #x00ff 16)) (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (app abstr-vals$2519 0) (bv #x00007fff 32)) (app abstr-vals$2519 0) (bv #x00007fff 32))) (ite (bvsle (app abstr-vals$2519 0) (bv #x00007fff 32)) (app abstr-vals$2519 0) (bv #x00007fff 32)) (bv #xffff8000 32))) (bv #x00ff 16)) (bv #x0000 16))) output_max) (extract 7 0 (ite (bvsle (bv #x0000 16) (ite (bvsle (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (app abstr-vals$2519 0) (bv #x00007fff 32)) (app abstr-vals$2519 0) (bv #x00007fff 32))) (ite (bvsle (app abstr-vals$2519 0) (bv #x00007fff 32)) (app abstr-vals$2519 0) (bv #x00007fff 32)) (bv #xffff8000 32))) (bv #x00ff 16)) (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (app abstr-vals$2519 0) (bv #x00007fff 32)) (app abstr-vals$2519 0) (bv #x00007fff 32))) (ite (bvsle (app abstr-vals$2519 0) (bv #x00007fff 32)) (app abstr-vals$2519 0) (bv #x00007fff 32)) (bv #xffff8000 32))) (bv #x00ff 16))) (ite (bvsle (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (app abstr-vals$2519 0) (bv #x00007fff 32)) (app abstr-vals$2519 0) (bv #x00007fff 32))) (ite (bvsle (app abstr-vals$2519 0) (bv #x00007fff 32)) (app abstr-vals$2519 0) (bv #x00007fff 32)) (bv #xffff8000 32))) (bv #x00ff 16)) (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (app abstr-vals$2519 0) (bv #x00007fff 32)) (app abstr-vals$2519 0) (bv #x00007fff 32))) (ite (bvsle (app abstr-vals$2519 0) (bv #x00007fff 32)) (app abstr-vals$2519 0) (bv #x00007fff 32)) (bv #xffff8000 32))) (bv #x00ff 16)) (bv #x0000 16))) output_max))
optimized x86 0:
  (uint8_t
 (ite x?$2513 (ite (bvslt (app abstr-vals$2519 0) (bv #x00000000 32)) (bv #x00 8) (ite (bvslt (bv #x000000ff 32) (app abstr-vals$2519 0)) (bv #xff 8) (extract 7 0 (app abstr-vals$2519 0)))) (extract 7 0 (app abstr-vals$2519 0))))
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (vec-min
 (vec-cast
  (vec-max
   (vec-min
    (vec-cast
     (vec-max
      (vec-min
       (vec-add
        (vec-cast
         (vec-cast
          (vec-max
           (vec-min
            (vec-add
             (vec-bwand
              (sca-broadcast (int32_t (bv #x00000001 32)) 16)
              (vec-div
               (vec-add
                (vec-mul
                 (vec-cast
                  (vec-add
                   (vec-mul
                    (vec-cast
                     (load
                      (buffer input1 'uint8)
                      (ramp
                       (sca-add
                        (sca-mul
                         (var-lookup 'input1.stride.1)
                         (var-lookup 't53))
                        (sca-sub
                         (sca-sub (var-lookup 't75) (var-lookup 't81))
                         (var-lookup 'input1.min.0)))
                       1
                       16)
                      (aligned 1 0))
                     'int16
                     16)
                    (sca-broadcast (int16_t (bv #x0040 16)) 16))
                   (sca-broadcast
                    (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))
                    16))
                  'int32
                  16)
                 (vec-cast
                  (sca-broadcast (int16_t input1_multiplier) 16)
                  'int32
                  16))
                (sca-broadcast
                 (sca-mul
                  (sca-cast
                   (sca-mul
                    (sca-sub (int16_t t149) (int16_t t150))
                    (int16_t (bv #x0040 16)))
                   'int32)
                  (sca-cast (int16_t input2_multiplier) 'int32))
                 16))
               (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
             (vec-div
              (vec-add
               (vec-mul
                (vec-cast
                 (vec-add
                  (vec-mul
                   (vec-cast
                    (load
                     (buffer input1 'uint8)
                     (ramp
                      (sca-add
                       (sca-mul
                        (var-lookup 'input1.stride.1)
                        (var-lookup 't53))
                       (sca-sub
                        (sca-sub (var-lookup 't75) (var-lookup 't81))
                        (var-lookup 'input1.min.0)))
                      1
                      16)
                     (aligned 1 0))
                    'int16
                    16)
                   (sca-broadcast (int16_t (bv #x0040 16)) 16))
                  (sca-broadcast
                   (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))
                   16))
                 'int32
                 16)
                (vec-cast
                 (sca-broadcast (int16_t input1_multiplier) 16)
                 'int32
                 16))
               (sca-broadcast
                (sca-mul
                 (sca-cast
                  (sca-mul
                   (sca-sub (int16_t t149) (int16_t t150))
                   (int16_t (bv #x0040 16)))
                  'int32)
                 (sca-cast (int16_t input2_multiplier) 'int32))
                16))
              (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
            (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
           (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
          'int16
          16)
         'int32
         16)
        (vec-cast (sca-broadcast (int16_t t151) 16) 'int32 16))
       (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
      (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
     'int16
     16)
    (sca-broadcast (int16_t (bv #x00ff 16)) 16))
   (sca-broadcast (int16_t (bv #x0000 16)) 16))
  'uint8
  16)
 (sca-broadcast (uint8_t output_max) 16))
template:
  (minimum
 ...
 (cast
  ...
  (vs-mpy-add
   ...
   (combine
    (cast
     ...
     (vs-shift-right
      ...
      (vs-mpy-add
       ...
       (combine
        (vs-mpy-add
         ...
         (combine
          #<load-data>
          (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))))
         (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
         #f
         #f
         #f
         'int16)
        (broadcast
         ...
         (sca-mul
          (sca-cast
           (sca-mul
            (sca-sub (int16_t t149) (int16_t t150))
            (int16_t (bv #x0040 16)))
           'int32)
          (sca-cast (int16_t input2_multiplier) 'int32))))
       (list (int8_t (bv #x01 8)) (int16_t input1_multiplier))
       #f
       #f
       #f
       'int32)
      (int32_t (bv #x00000010 32))
      #t
      x?$2072
      #t)
     'int16
     #t)
    (broadcast ... (int16_t t151)))
   (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
   #f
   #f
   #f
   'int32)
  'uint8
  #t)
 (broadcast ... (uint8_t output_max)))
axioms:
  '(#t #t)
optimized-halide-expr:
  (vec-min #<abstr-halide-expr> #<abstr-halide-expr>)
optimized-template:
  (minimum ... #<abstr-expr> #<abstr-expr>)
optimized Halide 0:
  (uint8_t
 (ite (bvule (app abstr-vals$2520 0) (app abstr-vals$2521 0)) (app abstr-vals$2520 0) (app abstr-vals$2521 0)))
optimized x86 0:
  (uint8_t
 (ite (bvule (app abstr-vals$2520 0) (app abstr-vals$2521 0)) (app abstr-vals$2520 0) (app abstr-vals$2521 0)))
Ran synthesizer for 20 ms
(model)
(vec-min #<abstr-halide-expr> #<abstr-halide-expr>)
(minimum
 ...
 (cast
  ...
  (vs-mpy-add
   ...
   (combine
    (cast
     ...
     (vs-shift-right
      ...
      (vs-mpy-add
       ...
       (combine
        (vs-mpy-add
         ...
         (combine
          #<load-data>
          (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))))
         (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
         #f
         #f
         #f
         'int16)
        (broadcast
         ...
         (sca-mul
          (sca-cast
           (sca-mul
            (sca-sub (int16_t t149) (int16_t t150))
            (int16_t (bv #x0040 16)))
           'int32)
          (sca-cast (int16_t input2_multiplier) 'int32))))
       (list (int8_t (bv #x01 8)) (int16_t input1_multiplier))
       #f
       #f
       #f
       'int32)
      (int32_t (bv #x00000010 32))
      #t
      x?$2072
      #t)
     'int16
     #t)
    (broadcast ... (int16_t t151)))
   (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
   #f
   #f
   #f
   'int32)
  'uint8
  #t)
 (broadcast ... (uint8_t output_max)))
Ran bounds analysis for 24 ms
Ran bounds analysis for 13 ms
"Extended success?"
#t
(minimum
 ...
 (cast
  ...
  (vs-mpy-add
   ...
   (combine
    (cast
     ...
     (vs-shift-right
      ...
      (vs-mpy-add
       ...
       (combine
        (vs-mpy-add
         ...
         (combine
          #<load-data>
          (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))))
         (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
         #f
         #f
         #f
         'int16)
        (broadcast
         ...
         (sca-mul
          (sca-cast
           (sca-mul
            (sca-sub (int16_t t149) (int16_t t150))
            (int16_t (bv #x0040 16)))
           'int32)
          (sca-cast (int16_t input2_multiplier) 'int32))))
       (list (int8_t (bv #x01 8)) (int16_t input1_multiplier))
       #f
       #f
       #f
       'int32)
      (int32_t (bv #x00000010 32))
      #t
      x?$2072
      #t)
     'int16
     #t)
    (broadcast ... (int16_t t151)))
   (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
   #f
   #f
   #f
   'int32)
  'uint8
  #t)
 (broadcast ... (uint8_t output_max)))
"Building Expr:"
(sca-broadcast (uint8_t output_min) 16)
"Fold templates"
'()
here()

"Replace templates"
'()
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (sca-broadcast (uint8_t output_min) 16)
template:
  (broadcast ... (uint8_t output_min))
axioms:
  '()
optimized-halide-expr:
  (sca-broadcast (uint8_t output_min) 16)
optimized-template:
  (broadcast ... (uint8_t output_min))
optimized Halide 0:
  (uint8_t output_min)
optimized x86 0:
  (uint8_t output_min)
Ran synthesizer for 19 ms
(model)
(sca-broadcast (uint8_t output_min) 16)
(broadcast ... (uint8_t output_min))
Ran bounds analysis for 22 ms
Ran bounds analysis for 14 ms
"Extended success?"
#t
(broadcast ... (uint8_t output_min))
"Building Expr:"
(vec-max
 (vec-min
  (vec-cast
   (vec-max
    (vec-min
     (vec-cast
      (vec-max
       (vec-min
        (vec-add
         (vec-cast
          (vec-cast
           (vec-max
            (vec-min
             (vec-add
              (vec-bwand
               (sca-broadcast (int32_t (bv #x00000001 32)) 16)
               (vec-div
                (vec-add
                 (vec-mul
                  (vec-cast
                   (vec-add
                    (vec-mul
                     (vec-cast
                      (load
                       (buffer input1 'uint8)
                       (ramp
                        (sca-add
                         (sca-mul
                          (var-lookup 'input1.stride.1)
                          (var-lookup 't53))
                         (sca-sub
                          (sca-sub (var-lookup 't75) (var-lookup 't81))
                          (var-lookup 'input1.min.0)))
                        1
                        16)
                       (aligned 1 0))
                      'int16
                      16)
                     (sca-broadcast (int16_t (bv #x0040 16)) 16))
                    (sca-broadcast
                     (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))
                     16))
                   'int32
                   16)
                  (vec-cast
                   (sca-broadcast (int16_t input1_multiplier) 16)
                   'int32
                   16))
                 (sca-broadcast
                  (sca-mul
                   (sca-cast
                    (sca-mul
                     (sca-sub (int16_t t149) (int16_t t150))
                     (int16_t (bv #x0040 16)))
                    'int32)
                   (sca-cast (int16_t input2_multiplier) 'int32))
                  16))
                (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
              (vec-div
               (vec-add
                (vec-mul
                 (vec-cast
                  (vec-add
                   (vec-mul
                    (vec-cast
                     (load
                      (buffer input1 'uint8)
                      (ramp
                       (sca-add
                        (sca-mul
                         (var-lookup 'input1.stride.1)
                         (var-lookup 't53))
                        (sca-sub
                         (sca-sub (var-lookup 't75) (var-lookup 't81))
                         (var-lookup 'input1.min.0)))
                       1
                       16)
                      (aligned 1 0))
                     'int16
                     16)
                    (sca-broadcast (int16_t (bv #x0040 16)) 16))
                   (sca-broadcast
                    (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))
                    16))
                  'int32
                  16)
                 (vec-cast
                  (sca-broadcast (int16_t input1_multiplier) 16)
                  'int32
                  16))
                (sca-broadcast
                 (sca-mul
                  (sca-cast
                   (sca-mul
                    (sca-sub (int16_t t149) (int16_t t150))
                    (int16_t (bv #x0040 16)))
                   'int32)
                  (sca-cast (int16_t input2_multiplier) 'int32))
                 16))
               (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
             (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
            (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
           'int16
           16)
          'int32
          16)
         (vec-cast (sca-broadcast (int16_t t151) 16) 'int32 16))
        (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
       (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
      'int16
      16)
     (sca-broadcast (int16_t (bv #x00ff 16)) 16))
    (sca-broadcast (int16_t (bv #x0000 16)) 16))
   'uint8
   16)
  (sca-broadcast (uint8_t output_max) 16))
 (sca-broadcast (uint8_t output_min) 16))
"Fold templates"
(list
 (cast
  ...
  (vs-mpy-add
   ...
   (combine
    (cast
     ...
     (vs-shift-right
      ...
      (vs-mpy-add
       ...
       (combine
        (vs-mpy-add
         ...
         (combine
          #<load-data>
          (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))))
         (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
         #f
         #f
         #f
         'int16)
        (broadcast
         ...
         (sca-mul
          (sca-cast
           (sca-mul
            (sca-sub (int16_t t149) (int16_t t150))
            (int16_t (bv #x0040 16)))
           'int32)
          (sca-cast (int16_t input2_multiplier) 'int32))))
       (list (int8_t (bv #x01 8)) (int16_t input1_multiplier))
       #f
       #f
       #f
       'int32)
      (int32_t (bv #x00000010 32))
      #t
      x?$2072
      #t)
     'int16
     #t)
    (broadcast ... (int16_t t151)))
   (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
   #f
   #f
   #f
   'int32)
  'uint8
  x?$2524))
here(#(struct:cast ... #(struct:vs-mpy-add ... #<combine: #(struct:cast ... #(struct:vs-shift-right ... #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t148) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f #f #f int16) #(struct:broadcast ... #(struct:sca-mul #(struct:sca-cast #(struct:sca-mul #(struct:sca-sub #(struct:int16_t t149) #(struct:int16_t t150)) #(struct:int16_t (bv #x0040 16))) int32) #(struct:sca-cast #(struct:int16_t input2_multiplier) int32)))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t input1_multiplier)) #f #f #f int32) #(struct:int32_t (bv #x00000010 32)) #t x?$2072 #t) int16 #t) #(struct:broadcast ... #(struct:int16_t t151))> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32) uint8 x?$2524))

"Replace templates"
(list
 (cast
  ...
  (cast
   ...
   (vs-mpy-add
    ...
    (combine
     (cast
      ...
      (vs-shift-right
       ...
       (vs-mpy-add
        ...
        (combine
         (vs-mpy-add
          ...
          (combine
           #<load-data>
           (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))))
          (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
          #f
          #f
          #f
          'int16)
         (broadcast
          ...
          (sca-mul
           (sca-cast
            (sca-mul
             (sca-sub (int16_t t149) (int16_t t150))
             (int16_t (bv #x0040 16)))
            'int32)
           (sca-cast (int16_t input2_multiplier) 'int32))))
        (list (int8_t (bv #x01 8)) (int16_t input1_multiplier))
        #f
        #f
        #f
        'int32)
       (int32_t (bv #x00000010 32))
       #t
       x?$2072
       #t)
      'int16
      #t)
     (broadcast ... (int16_t t151)))
    (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
    #f
    #f
    #f
    'int32)
   'uint8
   #t)
  'uint8
  #t)
 (cast ... (broadcast ... (uint8_t output_max)) 'uint8 #t))
run-x86-synthesizer
halide-expr:
  (vec-max
 (vec-min
  (vec-cast
   (vec-max
    (vec-min
     (vec-cast
      (vec-max
       (vec-min
        (vec-add
         (vec-cast
          (vec-cast
           (vec-max
            (vec-min
             (vec-add
              (vec-bwand
               (sca-broadcast (int32_t (bv #x00000001 32)) 16)
               (vec-div
                (vec-add
                 (vec-mul
                  (vec-cast
                   (vec-add
                    (vec-mul
                     (vec-cast
                      (load
                       (buffer input1 'uint8)
                       (ramp
                        (sca-add
                         (sca-mul
                          (var-lookup 'input1.stride.1)
                          (var-lookup 't53))
                         (sca-sub
                          (sca-sub (var-lookup 't75) (var-lookup 't81))
                          (var-lookup 'input1.min.0)))
                        1
                        16)
                       (aligned 1 0))
                      'int16
                      16)
                     (sca-broadcast (int16_t (bv #x0040 16)) 16))
                    (sca-broadcast
                     (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))
                     16))
                   'int32
                   16)
                  (vec-cast
                   (sca-broadcast (int16_t input1_multiplier) 16)
                   'int32
                   16))
                 (sca-broadcast
                  (sca-mul
                   (sca-cast
                    (sca-mul
                     (sca-sub (int16_t t149) (int16_t t150))
                     (int16_t (bv #x0040 16)))
                    'int32)
                   (sca-cast (int16_t input2_multiplier) 'int32))
                  16))
                (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
              (vec-div
               (vec-add
                (vec-mul
                 (vec-cast
                  (vec-add
                   (vec-mul
                    (vec-cast
                     (load
                      (buffer input1 'uint8)
                      (ramp
                       (sca-add
                        (sca-mul
                         (var-lookup 'input1.stride.1)
                         (var-lookup 't53))
                        (sca-sub
                         (sca-sub (var-lookup 't75) (var-lookup 't81))
                         (var-lookup 'input1.min.0)))
                       1
                       16)
                      (aligned 1 0))
                     'int16
                     16)
                    (sca-broadcast (int16_t (bv #x0040 16)) 16))
                   (sca-broadcast
                    (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))
                    16))
                  'int32
                  16)
                 (vec-cast
                  (sca-broadcast (int16_t input1_multiplier) 16)
                  'int32
                  16))
                (sca-broadcast
                 (sca-mul
                  (sca-cast
                   (sca-mul
                    (sca-sub (int16_t t149) (int16_t t150))
                    (int16_t (bv #x0040 16)))
                   'int32)
                  (sca-cast (int16_t input2_multiplier) 'int32))
                 16))
               (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
             (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
            (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
           'int16
           16)
          'int32
          16)
         (vec-cast (sca-broadcast (int16_t t151) 16) 'int32 16))
        (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
       (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
      'int16
      16)
     (sca-broadcast (int16_t (bv #x00ff 16)) 16))
    (sca-broadcast (int16_t (bv #x0000 16)) 16))
   'uint8
   16)
  (sca-broadcast (uint8_t output_max) 16))
 (sca-broadcast (uint8_t output_min) 16))
template:
  (cast ... (broadcast ... (uint8_t output_max)) 'uint8 #t)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-max
 (vec-min
  (vec-cast
   (vec-max
    (vec-min
     (vec-cast
      (vec-max
       (vec-min
        (vec-add
         (vec-cast
          (vec-cast
           (vec-max
            (vec-min
             (vec-add
              (vec-bwand
               (sca-broadcast (int32_t (bv #x00000001 32)) 16)
               (vec-div
                (vec-add
                 (vec-mul
                  (vec-cast
                   (vec-add
                    (vec-mul
                     (vec-cast
                      (load
                       (buffer input1 'uint8)
                       (ramp
                        (sca-add
                         (sca-mul
                          (var-lookup 'input1.stride.1)
                          (var-lookup 't53))
                         (sca-sub
                          (sca-sub (var-lookup 't75) (var-lookup 't81))
                          (var-lookup 'input1.min.0)))
                        1
                        16)
                       (aligned 1 0))
                      'int16
                      16)
                     (sca-broadcast (int16_t (bv #x0040 16)) 16))
                    (sca-broadcast
                     (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))
                     16))
                   'int32
                   16)
                  (vec-cast
                   (sca-broadcast (int16_t input1_multiplier) 16)
                   'int32
                   16))
                 (sca-broadcast
                  (sca-mul
                   (sca-cast
                    (sca-mul
                     (sca-sub (int16_t t149) (int16_t t150))
                     (int16_t (bv #x0040 16)))
                    'int32)
                   (sca-cast (int16_t input2_multiplier) 'int32))
                  16))
                (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
              (vec-div
               (vec-add
                (vec-mul
                 (vec-cast
                  (vec-add
                   (vec-mul
                    (vec-cast
                     (load
                      (buffer input1 'uint8)
                      (ramp
                       (sca-add
                        (sca-mul
                         (var-lookup 'input1.stride.1)
                         (var-lookup 't53))
                        (sca-sub
                         (sca-sub (var-lookup 't75) (var-lookup 't81))
                         (var-lookup 'input1.min.0)))
                       1
                       16)
                      (aligned 1 0))
                     'int16
                     16)
                    (sca-broadcast (int16_t (bv #x0040 16)) 16))
                   (sca-broadcast
                    (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))
                    16))
                  'int32
                  16)
                 (vec-cast
                  (sca-broadcast (int16_t input1_multiplier) 16)
                  'int32
                  16))
                (sca-broadcast
                 (sca-mul
                  (sca-cast
                   (sca-mul
                    (sca-sub (int16_t t149) (int16_t t150))
                    (int16_t (bv #x0040 16)))
                   'int32)
                  (sca-cast (int16_t input2_multiplier) 'int32))
                 16))
               (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
             (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
            (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
           'int16
           16)
          'int32
          16)
         (vec-cast (sca-broadcast (int16_t t151) 16) 'int32 16))
        (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
       (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
      'int16
      16)
     (sca-broadcast (int16_t (bv #x00ff 16)) 16))
    (sca-broadcast (int16_t (bv #x0000 16)) 16))
   'uint8
   16)
  #<abstr-halide-expr>)
 (sca-broadcast (uint8_t output_min) 16))
optimized-template:
  (cast ... #<abstr-expr> 'uint8 #t)
optimized Halide 0:
  (uint8_t
 (ite (bvule output_min (ite (bvule (extract 7 0 (ite (bvsle (bv #x0000 16) (ite (bvsle (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32)) (sign-extend t151 (bitvector 32))) (bv #x00007fff 32)) (bvadd (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32)) (sign-extend t151 (bitvector 32))) (bv #x00007fff 32))) (ite (bvsle (bvadd (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32)) (sign-extend t151 (bitvector 32))) (bv #x00007fff 32)) (bvadd (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32)) (sign-extend t151 (bitvector 32))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bv #x00ff 16)) (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32)) (sign-extend t151 (bitvector 32))) (bv #x00007fff 32)) (bvadd (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32)) (sign-extend t151 (bitvector 32))) (bv #x00007fff 32))) (ite (bvsle (bvadd (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32)) (sign-extend t151 (bitvector 32))) (bv #x00007fff 32)) (bvadd (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32)) (sign-extend t151 (bitvector 32))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bv #x00ff 16))) (ite (bvsle (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32)) (sign-extend t151 (bitvector 32))) (bv #x00007fff 32)) (bvadd (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32)) (sign-extend t151 (bitvector 32))) (bv #x00007fff 32))) (ite (bvsle (bvadd (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32)) (sign-extend t151 (bitvector 32))) (bv #x00007fff 32)) (bvadd (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32)) (sign-extend t151 (bitvector 32))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bv #x00ff 16)) (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32)) (sign-extend t151 (bitvector 32))) (bv #x00007fff 32)) (bvadd (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32)) (sign-extend t151 (bitvector 32))) (bv #x00007fff 32))) (ite (bvsle (bvadd (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32)) (sign-extend t151 (bitvector 32))) (bv #x00007fff 32)) (bvadd (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000008000 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ t91 (- (+ output.s0.y.rebased t103))) (+ (+ (+ t100 (+ -16 t138)) (- t140)) (- t86)))) (bitvector 16))) (bvmul (bv #xffc0 16) t148)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t149 (bvneg t150))) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000010000 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32)) (sign-extend t151 (bitvector 32))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bv #x00ff 16)) ...)) ...) ...)) ...))
optimized x86 0:
  (uint8_t (app abstr-vals$2530 0))
run-x86-synthesizer
halide-expr:
  (vec-max
 (vec-min
  (vec-cast
   (vec-max
    (vec-min
     (vec-cast
      (vec-max
       (vec-min
        (vec-add
         (vec-cast
          (vec-cast
           (vec-max
            (vec-min
             (vec-add
              (vec-bwand
               (sca-broadcast (int32_t (bv #x00000001 32)) 16)
               (vec-div
                (vec-add
                 (vec-mul
                  (vec-cast
                   (vec-add
                    (vec-mul
                     (vec-cast
                      (load
                       (buffer input1 'uint8)
                       (ramp
                        (sca-add
                         (sca-mul
                          (var-lookup 'input1.stride.1)
                          (var-lookup 't53))
                         (sca-sub
                          (sca-sub (var-lookup 't75) (var-lookup 't81))
                          (var-lookup 'input1.min.0)))
                        1
                        16)
                       (aligned 1 0))
                      'int16
                      16)
                     (sca-broadcast (int16_t (bv #x0040 16)) 16))
                    (sca-broadcast
                     (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))
                     16))
                   'int32
                   16)
                  (vec-cast
                   (sca-broadcast (int16_t input1_multiplier) 16)
                   'int32
                   16))
                 (sca-broadcast
                  (sca-mul
                   (sca-cast
                    (sca-mul
                     (sca-sub (int16_t t149) (int16_t t150))
                     (int16_t (bv #x0040 16)))
                    'int32)
                   (sca-cast (int16_t input2_multiplier) 'int32))
                  16))
                (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
              (vec-div
               (vec-add
                (vec-mul
                 (vec-cast
                  (vec-add
                   (vec-mul
                    (vec-cast
                     (load
                      (buffer input1 'uint8)
                      (ramp
                       (sca-add
                        (sca-mul
                         (var-lookup 'input1.stride.1)
                         (var-lookup 't53))
                        (sca-sub
                         (sca-sub (var-lookup 't75) (var-lookup 't81))
                         (var-lookup 'input1.min.0)))
                       1
                       16)
                      (aligned 1 0))
                     'int16
                     16)
                    (sca-broadcast (int16_t (bv #x0040 16)) 16))
                   (sca-broadcast
                    (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))
                    16))
                  'int32
                  16)
                 (vec-cast
                  (sca-broadcast (int16_t input1_multiplier) 16)
                  'int32
                  16))
                (sca-broadcast
                 (sca-mul
                  (sca-cast
                   (sca-mul
                    (sca-sub (int16_t t149) (int16_t t150))
                    (int16_t (bv #x0040 16)))
                   'int32)
                  (sca-cast (int16_t input2_multiplier) 'int32))
                 16))
               (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
             (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
            (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
           'int16
           16)
          'int32
          16)
         (vec-cast (sca-broadcast (int16_t t151) 16) 'int32 16))
        (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
       (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
      'int16
      16)
     (sca-broadcast (int16_t (bv #x00ff 16)) 16))
    (sca-broadcast (int16_t (bv #x0000 16)) 16))
   'uint8
   16)
  (sca-broadcast (uint8_t output_max) 16))
 (sca-broadcast (uint8_t output_min) 16))
template:
  (cast
 ...
 (vs-mpy-add
  ...
  (combine
   (cast
    ...
    (vs-shift-right
     ...
     (vs-mpy-add
      ...
      (combine
       (vs-mpy-add
        ...
        (combine
         #<load-data>
         (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))))
        (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
        #f
        #f
        #f
        'int16)
       (broadcast
        ...
        (sca-mul
         (sca-cast
          (sca-mul
           (sca-sub (int16_t t149) (int16_t t150))
           (int16_t (bv #x0040 16)))
          'int32)
         (sca-cast (int16_t input2_multiplier) 'int32))))
      (list (int8_t (bv #x01 8)) (int16_t input1_multiplier))
      #f
      #f
      #f
      'int32)
     (int32_t (bv #x00000010 32))
     #t
     x?$2072
     #t)
    'int16
    #t)
   (broadcast ... (int16_t t151)))
  (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
  #f
  #f
  #f
  'int32)
 'uint8
 x?$2524)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$2531 idx) (bv #x0000fffe 32)) (bvsle (bv #xffff0000 32) (app abstr-vals$2531 idx)))))
optimized-halide-expr:
  (vec-max
 (vec-min
  (vec-cast
   (vec-max
    (vec-min
     (vec-cast
      (vec-max
       (vec-min
        #<abstr-halide-expr>
        (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
       (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
      'int16
      16)
     (sca-broadcast (int16_t (bv #x00ff 16)) 16))
    (sca-broadcast (int16_t (bv #x0000 16)) 16))
   'uint8
   16)
  (sca-broadcast (uint8_t output_max) 16))
 (sca-broadcast (uint8_t output_min) 16))
optimized-template:
  (cast ... #<abstr-expr> 'uint8 x?$2524)
optimized Halide 0:
  (uint8_t
 (ite (bvule output_min (ite (bvule (extract 7 0 (ite (bvsle (bv #x0000 16) (ite (bvsle (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (app abstr-vals$2531 0) (bv #x00007fff 32)) (app abstr-vals$2531 0) (bv #x00007fff 32))) (ite (bvsle (app abstr-vals$2531 0) (bv #x00007fff 32)) (app abstr-vals$2531 0) (bv #x00007fff 32)) (bv #xffff8000 32))) (bv #x00ff 16)) (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (app abstr-vals$2531 0) (bv #x00007fff 32)) (app abstr-vals$2531 0) (bv #x00007fff 32))) (ite (bvsle (app abstr-vals$2531 0) (bv #x00007fff 32)) (app abstr-vals$2531 0) (bv #x00007fff 32)) (bv #xffff8000 32))) (bv #x00ff 16))) (ite (bvsle (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (app abstr-vals$2531 0) (bv #x00007fff 32)) (app abstr-vals$2531 0) (bv #x00007fff 32))) (ite (bvsle (app abstr-vals$2531 0) (bv #x00007fff 32)) (app abstr-vals$2531 0) (bv #x00007fff 32)) (bv #xffff8000 32))) (bv #x00ff 16)) (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (app abstr-vals$2531 0) (bv #x00007fff 32)) (app abstr-vals$2531 0) (bv #x00007fff 32))) (ite (bvsle (app abstr-vals$2531 0) (bv #x00007fff 32)) (app abstr-vals$2531 0) (bv #x00007fff 32)) (bv #xffff8000 32))) (bv #x00ff 16)) (bv #x0000 16))) output_max) (extract 7 0 (ite (bvsle (bv #x0000 16) (ite (bvsle (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (app abstr-vals$2531 0) (bv #x00007fff 32)) (app abstr-vals$2531 0) (bv #x00007fff 32))) (ite (bvsle (app abstr-vals$2531 0) (bv #x00007fff 32)) (app abstr-vals$2531 0) (bv #x00007fff 32)) (bv #xffff8000 32))) (bv #x00ff 16)) (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (app abstr-vals$2531 0) (bv #x00007fff 32)) (app abstr-vals$2531 0) (bv #x00007fff 32))) (ite (bvsle (app abstr-vals$2531 0) (bv #x00007fff 32)) (app abstr-vals$2531 0) (bv #x00007fff 32)) (bv #xffff8000 32))) (bv #x00ff 16))) (ite (bvsle (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (app abstr-vals$2531 0) (bv #x00007fff 32)) (app abstr-vals$2531 0) (bv #x00007fff 32))) (ite (bvsle (app abstr-vals$2531 0) (bv #x00007fff 32)) (app abstr-vals$2531 0) (bv #x00007fff 32)) (bv #xffff8000 32))) (bv #x00ff 16)) (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (app abstr-vals$2531 0) (bv #x00007fff 32)) (app abstr-vals$2531 0) (bv #x00007fff 32))) (ite (bvsle (app abstr-vals$2531 0) (bv #x00007fff 32)) (app abstr-vals$2531 0) (bv #x00007fff 32)) (bv #xffff8000 32))) (bv #x00ff 16)) (bv #x0000 16))) output_max)) (ite (bvule (extract 7 0 (ite (bvsle (bv #x0000 16) (ite (bvsle (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (app abstr-vals$2531 0) (bv #x00007fff 32)) (app abstr-vals$2531 0) (bv #x00007fff 32))) (ite (bvsle (app abstr-vals$2531 0) (bv #x00007fff 32)) (app abstr-vals$2531 0) (bv #x00007fff 32)) (bv #xffff8000 32))) (bv #x00ff 16)) (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (app abstr-vals$2531 0) (bv #x00007fff 32)) (app abstr-vals$2531 0) (bv #x00007fff 32))) (ite (bvsle (app abstr-vals$2531 0) (bv #x00007fff 32)) (app abstr-vals$2531 0) (bv #x00007fff 32)) (bv #xffff8000 32))) (bv #x00ff 16))) (ite (bvsle (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (app abstr-vals$2531 0) (bv #x00007fff 32)) (app abstr-vals$2531 0) (bv #x00007fff 32))) (ite (bvsle (app abstr-vals$2531 0) (bv #x00007fff 32)) (app abstr-vals$2531 0) (bv #x00007fff 32)) (bv #xffff8000 32))) (bv #x00ff 16)) (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (app abstr-vals$2531 0) (bv #x00007fff 32)) (app abstr-vals$2531 0) (bv #x00007fff 32))) (ite (bvsle (app abstr-vals$2531 0) (bv #x00007fff 32)) (app abstr-vals$2531 0) (bv #x00007fff 32)) (bv #xffff8000 32))) (bv #x00ff 16)) (bv #x0000 16))) output_max) (extract 7 0 (ite (bvsle (bv #x0000 16) (ite (bvsle (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (app abstr-vals$2531 0) (bv #x00007fff 32)) (app abstr-vals$2531 0) (bv #x00007fff 32))) (ite (bvsle (app abstr-vals$2531 0) (bv #x00007fff 32)) (app abstr-vals$2531 0) (bv #x00007fff 32)) (bv #xffff8000 32))) (bv #x00ff 16)) (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (app abstr-vals$2531 0) (bv #x00007fff 32)) (app abstr-vals$2531 0) (bv #x00007fff 32))) (ite (bvsle (app abstr-vals$2531 0) (bv #x00007fff 32)) (app abstr-vals$2531 0) (bv #x00007fff 32)) (bv #xffff8000 32))) (bv #x00ff 16))) (ite (bvsle (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (app abstr-vals$2531 0) (bv #x00007fff 32)) (app abstr-vals$2531 0) (bv #x00007fff 32))) (ite (bvsle (app abstr-vals$2531 0) (bv #x00007fff 32)) (app abstr-vals$2531 0) (bv #x00007fff 32)) (bv #xffff8000 32))) (bv #x00ff 16)) (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (app abstr-vals$2531 0) (bv #x00007fff 32)) (app abstr-vals$2531 0) (bv #x00007fff 32))) (ite (bvsle (app abstr-vals$2531 0) (bv #x00007fff 32)) (app abstr-vals$2531 0) (bv #x00007fff 32)) (bv #xffff8000 32))) (bv #x00ff 16)) (bv #x0000 16))) output_max) output_min))
optimized x86 0:
  (uint8_t
 (ite x?$2524 (ite (bvslt (app abstr-vals$2531 0) (bv #x00000000 32)) (bv #x00 8) (ite (bvslt (bv #x000000ff 32) (app abstr-vals$2531 0)) (bv #xff 8) (extract 7 0 (app abstr-vals$2531 0)))) (extract 7 0 (app abstr-vals$2531 0))))
run-x86-synthesizer
halide-expr:
  (vec-max
 (vec-min
  (vec-cast
   (vec-max
    (vec-min
     (vec-cast
      (vec-max
       (vec-min
        (vec-add
         (vec-cast
          (vec-cast
           (vec-max
            (vec-min
             (vec-add
              (vec-bwand
               (sca-broadcast (int32_t (bv #x00000001 32)) 16)
               (vec-div
                (vec-add
                 (vec-mul
                  (vec-cast
                   (vec-add
                    (vec-mul
                     (vec-cast
                      (load
                       (buffer input1 'uint8)
                       (ramp
                        (sca-add
                         (sca-mul
                          (var-lookup 'input1.stride.1)
                          (var-lookup 't53))
                         (sca-sub
                          (sca-sub (var-lookup 't75) (var-lookup 't81))
                          (var-lookup 'input1.min.0)))
                        1
                        16)
                       (aligned 1 0))
                      'int16
                      16)
                     (sca-broadcast (int16_t (bv #x0040 16)) 16))
                    (sca-broadcast
                     (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))
                     16))
                   'int32
                   16)
                  (vec-cast
                   (sca-broadcast (int16_t input1_multiplier) 16)
                   'int32
                   16))
                 (sca-broadcast
                  (sca-mul
                   (sca-cast
                    (sca-mul
                     (sca-sub (int16_t t149) (int16_t t150))
                     (int16_t (bv #x0040 16)))
                    'int32)
                   (sca-cast (int16_t input2_multiplier) 'int32))
                  16))
                (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
              (vec-div
               (vec-add
                (vec-mul
                 (vec-cast
                  (vec-add
                   (vec-mul
                    (vec-cast
                     (load
                      (buffer input1 'uint8)
                      (ramp
                       (sca-add
                        (sca-mul
                         (var-lookup 'input1.stride.1)
                         (var-lookup 't53))
                        (sca-sub
                         (sca-sub (var-lookup 't75) (var-lookup 't81))
                         (var-lookup 'input1.min.0)))
                       1
                       16)
                      (aligned 1 0))
                     'int16
                     16)
                    (sca-broadcast (int16_t (bv #x0040 16)) 16))
                   (sca-broadcast
                    (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))
                    16))
                  'int32
                  16)
                 (vec-cast
                  (sca-broadcast (int16_t input1_multiplier) 16)
                  'int32
                  16))
                (sca-broadcast
                 (sca-mul
                  (sca-cast
                   (sca-mul
                    (sca-sub (int16_t t149) (int16_t t150))
                    (int16_t (bv #x0040 16)))
                   'int32)
                  (sca-cast (int16_t input2_multiplier) 'int32))
                 16))
               (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
             (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
            (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
           'int16
           16)
          'int32
          16)
         (vec-cast (sca-broadcast (int16_t t151) 16) 'int32 16))
        (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
       (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
      'int16
      16)
     (sca-broadcast (int16_t (bv #x00ff 16)) 16))
    (sca-broadcast (int16_t (bv #x0000 16)) 16))
   'uint8
   16)
  (sca-broadcast (uint8_t output_max) 16))
 (sca-broadcast (uint8_t output_min) 16))
template:
  (cast
 ...
 (cast
  ...
  (vs-mpy-add
   ...
   (combine
    (cast
     ...
     (vs-shift-right
      ...
      (vs-mpy-add
       ...
       (combine
        (vs-mpy-add
         ...
         (combine
          #<load-data>
          (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))))
         (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
         #f
         #f
         #f
         'int16)
        (broadcast
         ...
         (sca-mul
          (sca-cast
           (sca-mul
            (sca-sub (int16_t t149) (int16_t t150))
            (int16_t (bv #x0040 16)))
           'int32)
          (sca-cast (int16_t input2_multiplier) 'int32))))
       (list (int8_t (bv #x01 8)) (int16_t input1_multiplier))
       #f
       #f
       #f
       'int32)
      (int32_t (bv #x00000010 32))
      #t
      x?$2072
      #t)
     'int16
     #t)
    (broadcast ... (int16_t t151)))
   (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
   #f
   #f
   #f
   'int32)
  'uint8
  #t)
 'uint8
 #t)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-max
 (vec-min #<abstr-halide-expr> (sca-broadcast (uint8_t output_max) 16))
 (sca-broadcast (uint8_t output_min) 16))
optimized-template:
  (cast ... #<abstr-expr> 'uint8 #t)
optimized Halide 0:
  (uint8_t
 (ite (bvule output_min (ite (bvule (app abstr-vals$2532 0) output_max) (app abstr-vals$2532 0) output_max)) (ite (bvule (app abstr-vals$2532 0) output_max) (app abstr-vals$2532 0) output_max) output_min))
optimized x86 0:
  (uint8_t (app abstr-vals$2532 0))
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (vec-max
 (vec-min
  (vec-cast
   (vec-max
    (vec-min
     (vec-cast
      (vec-max
       (vec-min
        (vec-add
         (vec-cast
          (vec-cast
           (vec-max
            (vec-min
             (vec-add
              (vec-bwand
               (sca-broadcast (int32_t (bv #x00000001 32)) 16)
               (vec-div
                (vec-add
                 (vec-mul
                  (vec-cast
                   (vec-add
                    (vec-mul
                     (vec-cast
                      (load
                       (buffer input1 'uint8)
                       (ramp
                        (sca-add
                         (sca-mul
                          (var-lookup 'input1.stride.1)
                          (var-lookup 't53))
                         (sca-sub
                          (sca-sub (var-lookup 't75) (var-lookup 't81))
                          (var-lookup 'input1.min.0)))
                        1
                        16)
                       (aligned 1 0))
                      'int16
                      16)
                     (sca-broadcast (int16_t (bv #x0040 16)) 16))
                    (sca-broadcast
                     (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))
                     16))
                   'int32
                   16)
                  (vec-cast
                   (sca-broadcast (int16_t input1_multiplier) 16)
                   'int32
                   16))
                 (sca-broadcast
                  (sca-mul
                   (sca-cast
                    (sca-mul
                     (sca-sub (int16_t t149) (int16_t t150))
                     (int16_t (bv #x0040 16)))
                    'int32)
                   (sca-cast (int16_t input2_multiplier) 'int32))
                  16))
                (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
              (vec-div
               (vec-add
                (vec-mul
                 (vec-cast
                  (vec-add
                   (vec-mul
                    (vec-cast
                     (load
                      (buffer input1 'uint8)
                      (ramp
                       (sca-add
                        (sca-mul
                         (var-lookup 'input1.stride.1)
                         (var-lookup 't53))
                        (sca-sub
                         (sca-sub (var-lookup 't75) (var-lookup 't81))
                         (var-lookup 'input1.min.0)))
                       1
                       16)
                      (aligned 1 0))
                     'int16
                     16)
                    (sca-broadcast (int16_t (bv #x0040 16)) 16))
                   (sca-broadcast
                    (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))
                    16))
                  'int32
                  16)
                 (vec-cast
                  (sca-broadcast (int16_t input1_multiplier) 16)
                  'int32
                  16))
                (sca-broadcast
                 (sca-mul
                  (sca-cast
                   (sca-mul
                    (sca-sub (int16_t t149) (int16_t t150))
                    (int16_t (bv #x0040 16)))
                   'int32)
                  (sca-cast (int16_t input2_multiplier) 'int32))
                 16))
               (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
             (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
            (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
           'int16
           16)
          'int32
          16)
         (vec-cast (sca-broadcast (int16_t t151) 16) 'int32 16))
        (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
       (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
      'int16
      16)
     (sca-broadcast (int16_t (bv #x00ff 16)) 16))
    (sca-broadcast (int16_t (bv #x0000 16)) 16))
   'uint8
   16)
  (sca-broadcast (uint8_t output_max) 16))
 (sca-broadcast (uint8_t output_min) 16))
template:
  (maximum
 ...
 (minimum
  ...
  (cast
   ...
   (vs-mpy-add
    ...
    (combine
     (cast
      ...
      (vs-shift-right
       ...
       (vs-mpy-add
        ...
        (combine
         (vs-mpy-add
          ...
          (combine
           #<load-data>
           (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))))
          (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
          #f
          #f
          #f
          'int16)
         (broadcast
          ...
          (sca-mul
           (sca-cast
            (sca-mul
             (sca-sub (int16_t t149) (int16_t t150))
             (int16_t (bv #x0040 16)))
            'int32)
           (sca-cast (int16_t input2_multiplier) 'int32))))
        (list (int8_t (bv #x01 8)) (int16_t input1_multiplier))
        #f
        #f
        #f
        'int32)
       (int32_t (bv #x00000010 32))
       #t
       x?$2072
       #t)
      'int16
      #t)
     (broadcast ... (int16_t t151)))
    (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
    #f
    #f
    #f
    'int32)
   'uint8
   #t)
  (broadcast ... (uint8_t output_max)))
 (broadcast ... (uint8_t output_min)))
axioms:
  '(#t #t)
optimized-halide-expr:
  (vec-max #<abstr-halide-expr> #<abstr-halide-expr>)
optimized-template:
  (maximum ... #<abstr-expr> #<abstr-expr>)
optimized Halide 0:
  (uint8_t
 (ite (bvule (app abstr-vals$2534 0) (app abstr-vals$2533 0)) (app abstr-vals$2533 0) (app abstr-vals$2534 0)))
optimized x86 0:
  (uint8_t
 (ite (bvule (app abstr-vals$2534 0) (app abstr-vals$2533 0)) (app abstr-vals$2533 0) (app abstr-vals$2534 0)))
Ran synthesizer for 20 ms
(model)
(vec-max #<abstr-halide-expr> #<abstr-halide-expr>)
(maximum
 ...
 (minimum
  ...
  (cast
   ...
   (vs-mpy-add
    ...
    (combine
     (cast
      ...
      (vs-shift-right
       ...
       (vs-mpy-add
        ...
        (combine
         (vs-mpy-add
          ...
          (combine
           #<load-data>
           (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))))
          (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
          #f
          #f
          #f
          'int16)
         (broadcast
          ...
          (sca-mul
           (sca-cast
            (sca-mul
             (sca-sub (int16_t t149) (int16_t t150))
             (int16_t (bv #x0040 16)))
            'int32)
           (sca-cast (int16_t input2_multiplier) 'int32))))
        (list (int8_t (bv #x01 8)) (int16_t input1_multiplier))
        #f
        #f
        #f
        'int32)
       (int32_t (bv #x00000010 32))
       #t
       x?$2072
       #t)
      'int16
      #t)
     (broadcast ... (int16_t t151)))
    (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
    #f
    #f
    #f
    'int32)
   'uint8
   #t)
  (broadcast ... (uint8_t output_max)))
 (broadcast ... (uint8_t output_min)))
Ran bounds analysis for 24 ms
Ran bounds analysis for 13 ms
"Extended success?"
#t
(maximum
 ...
 (minimum
  ...
  (cast
   ...
   (vs-mpy-add
    ...
    (combine
     (cast
      ...
      (vs-shift-right
       ...
       (vs-mpy-add
        ...
        (combine
         (vs-mpy-add
          ...
          (combine
           #<load-data>
           (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))))
          (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
          #f
          #f
          #f
          'int16)
         (broadcast
          ...
          (sca-mul
           (sca-cast
            (sca-mul
             (sca-sub (int16_t t149) (int16_t t150))
             (int16_t (bv #x0040 16)))
            'int32)
           (sca-cast (int16_t input2_multiplier) 'int32))))
        (list (int8_t (bv #x01 8)) (int16_t input1_multiplier))
        #f
        #f
        #f
        'int32)
       (int32_t (bv #x00000010 32))
       #t
       x?$2072
       #t)
      'int16
      #t)
     (broadcast ... (int16_t t151)))
    (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
    #f
    #f
    #f
    'int32)
   'uint8
   #t)
  (broadcast ... (uint8_t output_max)))
 (broadcast ... (uint8_t output_min)))

(x86) Successfully found an equivalent IR expression.

(maximum
 ...
 (minimum
  ...
  (cast
   ...
   (vs-mpy-add
    ...
    (combine
     (cast
      ...
      (vs-shift-right
       ...
       (vs-mpy-add
        ...
        (combine
         (vs-mpy-add
          ...
          (combine
           #<load-data>
           (broadcast ... (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))))
          (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
          #f
          #f
          #f
          'int16)
         (broadcast
          ...
          (sca-mul
           (sca-cast
            (sca-mul
             (sca-sub (int16_t t149) (int16_t t150))
             (int16_t (bv #x0040 16)))
            'int32)
           (sca-cast (int16_t input2_multiplier) 'int32))))
        (list (int8_t (bv #x01 8)) (int16_t input1_multiplier))
        #f
        #f
        #f
        'int32)
       (int32_t (bv #x00000010 32))
       #t
       x?$2072
       #t)
      'int16
      #t)
     (broadcast ... (int16_t t151)))
    (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
    #f
    #f
    #f
    'int32)
   'uint8
   #t)
  (broadcast ... (uint8_t output_max)))
 (broadcast ... (uint8_t output_min)))

Synthesis time: 35 seconds

Synthesizing x86 for:
(vec-max
 (vec-min
  (vec-cast
   (vec-max
    (vec-min
     (vec-cast
      (vec-max
       (vec-min
        (vec-add
         (vec-cast
          (vec-cast
           (vec-max
            (vec-min
             (vec-add
              (vec-bwand
               (sca-broadcast (int32_t (bv #x00000001 32)) 16)
               (vec-div
                (vec-add
                 (vec-mul
                  (vec-cast
                   (vec-add
                    (vec-mul
                     (vec-cast
                      (load
                       (buffer input1 'uint8)
                       (ramp
                        (sca-add
                         (sca-mul
                          (var-lookup 'input1.stride.1)
                          (var-lookup 't53))
                         (sca-sub
                          (sca-sub (var-lookup 't75) (var-lookup 't81))
                          (var-lookup 'input1.min.0)))
                        1
                        16)
                       (aligned 1 0))
                      'int16
                      16)
                     (sca-broadcast (int16_t (bv #x0040 16)) 16))
                    (sca-broadcast
                     (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))
                     16))
                   'int32
                   16)
                  (vec-cast
                   (sca-broadcast (int16_t input1_multiplier) 16)
                   'int32
                   16))
                 (sca-broadcast
                  (sca-mul
                   (sca-cast
                    (sca-mul
                     (sca-sub (int16_t t149) (int16_t t150))
                     (int16_t (bv #x0040 16)))
                    'int32)
                   (sca-cast (int16_t input2_multiplier) 'int32))
                  16))
                (sca-broadcast (int32_t (bv #x00008000 32)) 16)))
              (vec-div
               (vec-add
                (vec-mul
                 (vec-cast
                  (vec-add
                   (vec-mul
                    (vec-cast
                     (load
                      (buffer input1 'uint8)
                      (ramp
                       (sca-add
                        (sca-mul
                         (var-lookup 'input1.stride.1)
                         (var-lookup 't53))
                        (sca-sub
                         (sca-sub (var-lookup 't75) (var-lookup 't81))
                         (var-lookup 'input1.min.0)))
                       1
                       16)
                      (aligned 1 0))
                     'int16
                     16)
                    (sca-broadcast (int16_t (bv #x0040 16)) 16))
                   (sca-broadcast
                    (sca-mul (int16_t t148) (int16_t (bv #xffc0 16)))
                    16))
                  'int32
                  16)
                 (vec-cast
                  (sca-broadcast (int16_t input1_multiplier) 16)
                  'int32
                  16))
                (sca-broadcast
                 (sca-mul
                  (sca-cast
                   (sca-mul
                    (sca-sub (int16_t t149) (int16_t t150))
                    (int16_t (bv #x0040 16)))
                   'int32)
                  (sca-cast (int16_t input2_multiplier) 'int32))
                 16))
               (sca-broadcast (int32_t (bv #x00010000 32)) 16)))
             (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
            (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
           'int16
           16)
          'int32
          16)
         (vec-cast (sca-broadcast (int16_t t151) 16) 'int32 16))
        (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
       (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
      'int16
      16)
     (sca-broadcast (int16_t (bv #x00ff 16)) 16))
    (sca-broadcast (int16_t (bv #x0000 16)) 16))
   'uint8
   16)
  (sca-broadcast (uint8_t output_max) 16))
 (sca-broadcast (uint8_t output_min) 16))


synthesize-x86 output:
#<void>
#f
