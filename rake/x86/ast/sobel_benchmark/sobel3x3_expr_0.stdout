Lifting input expression to x86 IR...
=====================================

"Building Expr:"
(ramp
 (sca-add
  (sca-mul (int32_t bounded_input.s0.x.x) (int32_t (bv #x00000010 32)))
  (int32_t (bv #xffffffff 32)))
 (int32_t (bv #x00000001 32))
 16)
"Fold templates"
'()
here()

"Replace templates"
'()
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (ramp
 (sca-add
  (sca-mul (int32_t bounded_input.s0.x.x) (int32_t (bv #x00000010 32)))
  (int32_t (bv #xffffffff 32)))
 (int32_t (bv #x00000001 32))
 16)
template:
  (build-vec
 ...
 (sca-add
  (sca-mul (int32_t bounded_input.s0.x.x) (int32_t (bv #x00000010 32)))
  (int32_t (bv #xffffffff 32)))
 (int32_t (bv #x00000001 32))
 16)
axioms:
  '()
optimized-halide-expr:
  (ramp
 (sca-add
  (sca-mul (int32_t bounded_input.s0.x.x) (int32_t (bv #x00000010 32)))
  (int32_t (bv #xffffffff 32)))
 (int32_t (bv #x00000001 32))
 16)
optimized-template:
  (build-vec
 ...
 (sca-add
  (sca-mul (int32_t bounded_input.s0.x.x) (int32_t (bv #x00000010 32)))
  (int32_t (bv #xffffffff 32)))
 (int32_t (bv #x00000001 32))
 16)
optimized Halide 0:
  (int32_t
 (bvadd (bv #xffffffff 32) (bvmul (bv #x00000010 32) bounded_input.s0.x.x)))
optimized x86 0:
  (int32_t
 (bvadd (bv #xffffffff 32) (bvmul (bv #x00000010 32) bounded_input.s0.x.x)))
Ran synthesizer for 89 ms
(model)
(ramp
 (sca-add
  (sca-mul (int32_t bounded_input.s0.x.x) (int32_t (bv #x00000010 32)))
  (int32_t (bv #xffffffff 32)))
 (int32_t (bv #x00000001 32))
 16)
(build-vec
 ...
 (sca-add
  (sca-mul (int32_t bounded_input.s0.x.x) (int32_t (bv #x00000010 32)))
  (int32_t (bv #xffffffff 32)))
 (int32_t (bv #x00000001 32))
 16)
Ran bounds analysis for 88 ms
Ran bounds analysis for 30 ms
"Extended success?"
#t
(build-vec
 ...
 (sca-add
  (sca-mul (int32_t bounded_input.s0.x.x) (int32_t (bv #x00000010 32)))
  (int32_t (bv #xffffffff 32)))
 (int32_t (bv #x00000001 32))
 16)
"Building Expr:"
(sca-broadcast
 (sca-add (int32_t input.extent.0) (int32_t (bv #xffffffff 32)))
 16)
"Fold templates"
'()
here()

"Replace templates"
'()
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (sca-broadcast
 (sca-add (int32_t input.extent.0) (int32_t (bv #xffffffff 32)))
 16)
template:
  (broadcast ... (sca-add (int32_t input.extent.0) (int32_t (bv #xffffffff 32))))
axioms:
  '()
optimized-halide-expr:
  (sca-broadcast
 (sca-add (int32_t input.extent.0) (int32_t (bv #xffffffff 32)))
 16)
optimized-template:
  (broadcast ... (sca-add (int32_t input.extent.0) (int32_t (bv #xffffffff 32))))
optimized Halide 0:
  (int32_t (bvadd (bv #xffffffff 32) input.extent.0))
optimized x86 0:
  (int32_t (bvadd (bv #xffffffff 32) input.extent.0))
Ran synthesizer for 19 ms
(model)
(sca-broadcast
 (sca-add (int32_t input.extent.0) (int32_t (bv #xffffffff 32)))
 16)
(broadcast ... (sca-add (int32_t input.extent.0) (int32_t (bv #xffffffff 32))))
Ran bounds analysis for 34 ms
Ran bounds analysis for 21 ms
"Extended success?"
#t
(broadcast ... (sca-add (int32_t input.extent.0) (int32_t (bv #xffffffff 32))))
"Building Expr:"
(vec-min
 (ramp
  (sca-add
   (sca-mul (int32_t bounded_input.s0.x.x) (int32_t (bv #x00000010 32)))
   (int32_t (bv #xffffffff 32)))
  (int32_t (bv #x00000001 32))
  16)
 (sca-broadcast
  (sca-add (int32_t input.extent.0) (int32_t (bv #xffffffff 32)))
  16))
"Fold templates"
'()
here()

"Replace templates"
'()
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (vec-min
 (ramp
  (sca-add
   (sca-mul (int32_t bounded_input.s0.x.x) (int32_t (bv #x00000010 32)))
   (int32_t (bv #xffffffff 32)))
  (int32_t (bv #x00000001 32))
  16)
 (sca-broadcast
  (sca-add (int32_t input.extent.0) (int32_t (bv #xffffffff 32)))
  16))
template:
  (minimum
 ...
 (build-vec
  ...
  (sca-add
   (sca-mul (int32_t bounded_input.s0.x.x) (int32_t (bv #x00000010 32)))
   (int32_t (bv #xffffffff 32)))
  (int32_t (bv #x00000001 32))
  16)
 (broadcast
  ...
  (sca-add (int32_t input.extent.0) (int32_t (bv #xffffffff 32)))))
axioms:
  (list (forall (idx) (bvsle (bv #x8000000f 32) (app abstr-vals$0 idx))) #t)
optimized-halide-expr:
  (vec-min #<abstr-halide-expr> #<abstr-halide-expr>)
optimized-template:
  (minimum ... #<abstr-expr> #<abstr-expr>)
optimized Halide 0:
  (int32_t
 (ite (bvsle (app abstr-vals$0 0) (app abstr-vals$1 0)) (app abstr-vals$0 0) (app abstr-vals$1 0)))
optimized x86 0:
  (int32_t
 (ite (bvsle (app abstr-vals$0 0) (app abstr-vals$1 0)) (app abstr-vals$0 0) (app abstr-vals$1 0)))
Ran synthesizer for 33 ms
(model)
(vec-min #<abstr-halide-expr> #<abstr-halide-expr>)
(minimum
 ...
 (build-vec
  ...
  (sca-add
   (sca-mul (int32_t bounded_input.s0.x.x) (int32_t (bv #x00000010 32)))
   (int32_t (bv #xffffffff 32)))
  (int32_t (bv #x00000001 32))
  16)
 (broadcast
  ...
  (sca-add (int32_t input.extent.0) (int32_t (bv #xffffffff 32)))))
Ran bounds analysis for 35 ms
Ran bounds analysis for 18 ms
"Extended success?"
#t
(minimum
 ...
 (build-vec
  ...
  (sca-add
   (sca-mul (int32_t bounded_input.s0.x.x) (int32_t (bv #x00000010 32)))
   (int32_t (bv #xffffffff 32)))
  (int32_t (bv #x00000001 32))
  16)
 (broadcast
  ...
  (sca-add (int32_t input.extent.0) (int32_t (bv #xffffffff 32)))))
"Building Expr:"
(sca-broadcast (int32_t (bv #x00000000 32)) 16)
"Fold templates"
'()
here()

"Replace templates"
'()
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (sca-broadcast (int32_t (bv #x00000000 32)) 16)
template:
  (broadcast ... (int32_t (bv #x00000000 32)))
axioms:
  '()
optimized-halide-expr:
  (sca-broadcast (int32_t (bv #x00000000 32)) 16)
optimized-template:
  (broadcast ... (int32_t (bv #x00000000 32)))
optimized Halide 0:
  (int32_t (bv #x00000000 32))
optimized x86 0:
  (int32_t (bv #x00000000 32))
Ran synthesizer for 15 ms
(model)
(sca-broadcast (int32_t (bv #x00000000 32)) 16)
(broadcast ... (int32_t (bv #x00000000 32)))
Ran bounds analysis for 21 ms
Ran bounds analysis for 15 ms
"Extended success?"
#t
(broadcast ... (int32_t (bv #x00000000 32)))
"Building Expr:"
(vec-max
 (vec-min
  (ramp
   (sca-add
    (sca-mul (int32_t bounded_input.s0.x.x) (int32_t (bv #x00000010 32)))
    (int32_t (bv #xffffffff 32)))
   (int32_t (bv #x00000001 32))
   16)
  (sca-broadcast
   (sca-add (int32_t input.extent.0) (int32_t (bv #xffffffff 32)))
   16))
 (sca-broadcast (int32_t (bv #x00000000 32)) 16))
"Fold templates"
'()
here()

"Replace templates"
(list
 (cast
  ...
  (build-vec
   ...
   (sca-add
    (sca-mul (int32_t bounded_input.s0.x.x) (int32_t (bv #x00000010 32)))
    (int32_t (bv #xffffffff 32)))
   (int32_t (bv #x00000001 32))
   16)
  'int32
  #t)
 (cast
  ...
  (broadcast
   ...
   (sca-add (int32_t input.extent.0) (int32_t (bv #xffffffff 32))))
  'int32
  #t))
run-x86-synthesizer
halide-expr:
  (vec-max
 (vec-min
  (ramp
   (sca-add
    (sca-mul (int32_t bounded_input.s0.x.x) (int32_t (bv #x00000010 32)))
    (int32_t (bv #xffffffff 32)))
   (int32_t (bv #x00000001 32))
   16)
  (sca-broadcast
   (sca-add (int32_t input.extent.0) (int32_t (bv #xffffffff 32)))
   16))
 (sca-broadcast (int32_t (bv #x00000000 32)) 16))
template:
  (cast
 ...
 (build-vec
  ...
  (sca-add
   (sca-mul (int32_t bounded_input.s0.x.x) (int32_t (bv #x00000010 32)))
   (int32_t (bv #xffffffff 32)))
  (int32_t (bv #x00000001 32))
  16)
 'int32
 #t)
axioms:
  (list (forall (idx) (bvsle (bv #x8000000f 32) (app abstr-vals$4 idx))))
optimized-halide-expr:
  (vec-max
 (vec-min
  #<abstr-halide-expr>
  (sca-broadcast
   (sca-add (int32_t input.extent.0) (int32_t (bv #xffffffff 32)))
   16))
 (sca-broadcast (int32_t (bv #x00000000 32)) 16))
optimized-template:
  (cast ... #<abstr-expr> 'int32 #t)
optimized Halide 0:
  (int32_t
 (ite (bvsle (bv #x00000000 32) (ite (bvsle (app abstr-vals$4 0) (bvadd (bv #xffffffff 32) input.extent.0)) (app abstr-vals$4 0) (bvadd (bv #xffffffff 32) input.extent.0))) (ite (bvsle (app abstr-vals$4 0) (bvadd (bv #xffffffff 32) input.extent.0)) (app abstr-vals$4 0) (bvadd (bv #xffffffff 32) input.extent.0)) (bv #x00000000 32)))
optimized x86 0:
  (int32_t (app abstr-vals$4 0))
run-x86-synthesizer
halide-expr:
  (vec-max
 (vec-min
  (ramp
   (sca-add
    (sca-mul (int32_t bounded_input.s0.x.x) (int32_t (bv #x00000010 32)))
    (int32_t (bv #xffffffff 32)))
   (int32_t (bv #x00000001 32))
   16)
  (sca-broadcast
   (sca-add (int32_t input.extent.0) (int32_t (bv #xffffffff 32)))
   16))
 (sca-broadcast (int32_t (bv #x00000000 32)) 16))
template:
  (cast
 ...
 (broadcast
  ...
  (sca-add (int32_t input.extent.0) (int32_t (bv #xffffffff 32))))
 'int32
 #t)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-max
 (vec-min
  (ramp
   (sca-add
    (sca-mul (int32_t bounded_input.s0.x.x) (int32_t (bv #x00000010 32)))
    (int32_t (bv #xffffffff 32)))
   (int32_t (bv #x00000001 32))
   16)
  #<abstr-halide-expr>)
 (sca-broadcast (int32_t (bv #x00000000 32)) 16))
optimized-template:
  (cast ... #<abstr-expr> 'int32 #t)
optimized Halide 0:
  (int32_t
 (ite (bvsle (bv #x00000000 32) (ite (bvsle (bvadd (bv #xffffffff 32) (bvmul (bv #x00000010 32) bounded_input.s0.x.x)) (app abstr-vals$5 0)) (bvadd (bv #xffffffff 32) (bvmul (bv #x00000010 32) bounded_input.s0.x.x)) (app abstr-vals$5 0))) (ite (bvsle (bvadd (bv #xffffffff 32) (bvmul (bv #x00000010 32) bounded_input.s0.x.x)) (app abstr-vals$5 0)) (bvadd (bv #xffffffff 32) (bvmul (bv #x00000010 32) bounded_input.s0.x.x)) (app abstr-vals$5 0)) (bv #x00000000 32)))
optimized x86 0:
  (int32_t (app abstr-vals$5 0))
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (vec-max
 (vec-min
  (ramp
   (sca-add
    (sca-mul (int32_t bounded_input.s0.x.x) (int32_t (bv #x00000010 32)))
    (int32_t (bv #xffffffff 32)))
   (int32_t (bv #x00000001 32))
   16)
  (sca-broadcast
   (sca-add (int32_t input.extent.0) (int32_t (bv #xffffffff 32)))
   16))
 (sca-broadcast (int32_t (bv #x00000000 32)) 16))
template:
  (maximum
 ...
 (minimum
  ...
  (build-vec
   ...
   (sca-add
    (sca-mul (int32_t bounded_input.s0.x.x) (int32_t (bv #x00000010 32)))
    (int32_t (bv #xffffffff 32)))
   (int32_t (bv #x00000001 32))
   16)
  (broadcast
   ...
   (sca-add (int32_t input.extent.0) (int32_t (bv #xffffffff 32)))))
 (broadcast ... (int32_t (bv #x00000000 32))))
axioms:
  (list
 #t
 (forall (idx) (&& (bvsle (app abstr-vals$7 idx) (bv #x00000000 32)) (bvsle (bv #x00000000 32) (app abstr-vals$7 idx)))))
optimized-halide-expr:
  (vec-max #<abstr-halide-expr> #<abstr-halide-expr>)
optimized-template:
  (maximum ... #<abstr-expr> #<abstr-expr>)
optimized Halide 0:
  (int32_t
 (ite (bvsle (app abstr-vals$7 0) (app abstr-vals$6 0)) (app abstr-vals$6 0) (app abstr-vals$7 0)))
optimized x86 0:
  (int32_t
 (ite (bvsle (app abstr-vals$7 0) (app abstr-vals$6 0)) (app abstr-vals$6 0) (app abstr-vals$7 0)))
Ran synthesizer for 34 ms
(model)
(vec-max #<abstr-halide-expr> #<abstr-halide-expr>)
(maximum
 ...
 (minimum
  ...
  (build-vec
   ...
   (sca-add
    (sca-mul (int32_t bounded_input.s0.x.x) (int32_t (bv #x00000010 32)))
    (int32_t (bv #xffffffff 32)))
   (int32_t (bv #x00000001 32))
   16)
  (broadcast
   ...
   (sca-add (int32_t input.extent.0) (int32_t (bv #xffffffff 32)))))
 (broadcast ... (int32_t (bv #x00000000 32))))
Ran bounds analysis for 31 ms
Ran bounds analysis for 17 ms
"Extended success?"
#t
(maximum
 ...
 (minimum
  ...
  (build-vec
   ...
   (sca-add
    (sca-mul (int32_t bounded_input.s0.x.x) (int32_t (bv #x00000010 32)))
    (int32_t (bv #xffffffff 32)))
   (int32_t (bv #x00000001 32))
   16)
  (broadcast
   ...
   (sca-add (int32_t input.extent.0) (int32_t (bv #xffffffff 32)))))
 (broadcast ... (int32_t (bv #x00000000 32))))

(x86) Successfully found an equivalent IR expression.

(maximum
 ...
 (minimum
  ...
  (build-vec
   ...
   (sca-add
    (sca-mul (int32_t bounded_input.s0.x.x) (int32_t (bv #x00000010 32)))
    (int32_t (bv #xffffffff 32)))
   (int32_t (bv #x00000001 32))
   16)
  (broadcast
   ...
   (sca-add (int32_t input.extent.0) (int32_t (bv #xffffffff 32)))))
 (broadcast ... (int32_t (bv #x00000000 32))))

Synthesis time: 1 seconds

Synthesizing x86 for:
(vec-max
 (vec-min
  (ramp
   (sca-add
    (sca-mul (int32_t bounded_input.s0.x.x) (int32_t (bv #x00000010 32)))
    (int32_t (bv #xffffffff 32)))
   (int32_t (bv #x00000001 32))
   16)
  (sca-broadcast
   (sca-add (int32_t input.extent.0) (int32_t (bv #xffffffff 32)))
   16))
 (sca-broadcast (int32_t (bv #x00000000 32)) 16))


synthesize-x86 output:
#<void>
#f
