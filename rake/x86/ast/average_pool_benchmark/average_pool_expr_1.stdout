Lifting input expression to x86 IR...
=====================================

"Building Expr:"
(sca-broadcast (uint32_t (bv #x00000001 32)) 64)
"Fold templates"
'()
here()

"Replace templates"
'()
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (sca-broadcast (uint32_t (bv #x00000001 32)) 64)
template:
  (broadcast ... (uint32_t (bv #x00000001 32)))
axioms:
  '()
optimized-halide-expr:
  (sca-broadcast (uint32_t (bv #x00000001 32)) 64)
optimized-template:
  (broadcast ... (uint32_t (bv #x00000001 32)))
optimized Halide 0:
  (uint32_t (bv #x00000001 32))
optimized x86 0:
  (uint32_t (bv #x00000001 32))
Ran synthesizer for 18 ms
(model)
(sca-broadcast (uint32_t (bv #x00000001 32)) 64)
(broadcast ... (uint32_t (bv #x00000001 32)))
Ran bounds analysis for 23 ms
Ran bounds analysis for 13 ms
"Extended success?"
#t
(broadcast ... (uint32_t (bv #x00000001 32)))
"Building Expr:"
(load (buffer sum 'uint16) (ramp 0 1 64) (aligned 0 0))
"Fold templates"
'()
here()

"Replace templates"
'()
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (load (buffer sum 'uint16) (ramp 0 1 64) (aligned 0 0))
template:
  #<load-data>
axioms:
  '()
optimized-halide-expr:
  (load (buffer sum 'uint16) (ramp 0 1 64) (aligned 0 0))
optimized-template:
  #<load-data>
optimized Halide 0:
  (uint16_t (app sum 0))
optimized x86 0:
  (uint16_t (app sum 0))
Ran synthesizer for 20 ms
(model
 [idx$0 0])
(load (buffer sum 'uint16) (ramp 0 1 64) (aligned 0 0))
#<load-data>
Ran bounds analysis for 25 ms
Ran bounds analysis for 19 ms
"Extended success?"
#t
#<load-data>
"Building Expr:"
(vec-cast (load (buffer sum 'uint16) (ramp 0 1 64) (aligned 0 0)) 'uint32 64)
"Fold templates"
'(#<load-data>)
here(#<load-data>)

"Replace templates"
'()
run-x86-synthesizer
halide-expr:
  (vec-cast (load (buffer sum 'uint16) (ramp 0 1 64) (aligned 0 0)) 'uint32 64)
template:
  #<load-data>
axioms:
  '()
optimized-halide-expr:
  (vec-cast (load (buffer sum 'uint16) (ramp 0 1 64) (aligned 0 0)) 'uint32 64)
optimized-template:
  #<load-data>
optimized Halide 0:
  (uint32_t (zero-extend (app sum 0) (bitvector 32)))
optimized x86 0:
  (uint16_t (app sum 0))
Ran synthesizer for 1 ms
(unsat)
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (vec-cast (load (buffer sum 'uint16) (ramp 0 1 64) (aligned 0 0)) 'uint32 64)
template:
  (cast ... #<load-data> 'uint32 #f)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-cast #<abstr-halide-expr> 'uint32 64)
optimized-template:
  (cast ... #<abstr-expr> 'uint32 #f)
optimized Halide 0:
  (uint32_t (zero-extend (app abstr-vals$129 0) (bitvector 32)))
optimized x86 0:
  (uint32_t (zero-extend (app abstr-vals$129 0) (bitvector 32)))
Ran synthesizer for 17 ms
(model)
(vec-cast #<abstr-halide-expr> 'uint32 64)
(cast ... #<load-data> 'uint32 #f)
Ran bounds analysis for 26 ms
Ran bounds analysis for 17 ms
"Extended success?"
#t
(cast ... #<load-data> 'uint32 #f)
"Building Expr:"
(sca-broadcast (uint16_t t310) 64)
"Fold templates"
'()
here()

"Replace templates"
'()
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (sca-broadcast (uint16_t t310) 64)
template:
  (broadcast ... (uint16_t t310))
axioms:
  '()
optimized-halide-expr:
  (sca-broadcast (uint16_t t310) 64)
optimized-template:
  (broadcast ... (uint16_t t310))
optimized Halide 0:
  (uint16_t t310)
optimized x86 0:
  (uint16_t t310)
Ran synthesizer for 15 ms
(model)
(sca-broadcast (uint16_t t310) 64)
(broadcast ... (uint16_t t310))
Ran bounds analysis for 22 ms
Ran bounds analysis for 16 ms
"Extended success?"
#t
(broadcast ... (uint16_t t310))
"Building Expr:"
(vec-cast (sca-broadcast (uint16_t t310) 64) 'uint32 64)
"Fold templates"
'()
here()

"Replace templates"
'()
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (vec-cast (sca-broadcast (uint16_t t310) 64) 'uint32 64)
template:
  (cast ... (broadcast ... (uint16_t t310)) 'uint32 #f)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-cast #<abstr-halide-expr> 'uint32 64)
optimized-template:
  (cast ... #<abstr-expr> 'uint32 #f)
optimized Halide 0:
  (uint32_t (zero-extend (app abstr-vals$131 0) (bitvector 32)))
optimized x86 0:
  (uint32_t (zero-extend (app abstr-vals$131 0) (bitvector 32)))
Ran synthesizer for 15 ms
(model)
(vec-cast #<abstr-halide-expr> 'uint32 64)
(cast ... (broadcast ... (uint16_t t310)) 'uint32 #f)
Ran bounds analysis for 25 ms
Ran bounds analysis for 17 ms
"Extended success?"
#t
(cast ... (broadcast ... (uint16_t t310)) 'uint32 #f)
"Building Expr:"
(vec-mul
 (vec-cast (load (buffer sum 'uint16) (ramp 0 1 64) (aligned 0 0)) 'uint32 64)
 (vec-cast (sca-broadcast (uint16_t t310) 64) 'uint32 64))
"Fold templates"
(list
 #<load-data>
 (cast ... #<load-data> 'uint32 x?$133)
 (cast ... (broadcast ... (uint16_t t310)) 'uint32 x?$198))
here(#<load-data> #(struct:cast ... #<load-data> uint32 x?$133) #(struct:cast ... #(struct:broadcast ... #(struct:uint16_t t310)) uint32 x?$198))

(list (vs-mpy-add ... #<load-data> (list (uint16_t t310)) #f #f #f 'uint32) (vs-mpy-add ... #<load-data> (list (uint16_t t310)) #f #f #f 'uint32) (vv-mpy-add ... #<load-data> '(1) (! x?$391) (! x?$392) (! x?$393) 'uint32) (vv-mpy-add ... #<load-data> '(1) (! x?$394) (! x?$395) (! x?$396) 'uint32))
(list (vs-mpy-add ... (broadcast ... (uint16_t t310)) (list (uint16_t t310)) #f #f #f 'uint32) (vs-mpy-add ... #<load-data> (list (uint16_t t310)) #f #f #f 'uint32) (vv-mpy-add ... (broadcast ... (uint16_t t310)) '(1) (! x?$589) (! x?$590) (! x?$591) 'uint32) (vv-mpy-add ... #<load-data> '(1) (! x?$592) (! x?$593) (! x?$594) 'uint32))
"Replace templates"
(list
 (vs-mpy-add ... #<load-data> (list (uint16_t t310)) #f #f #f 'uint32)
 (vs-mpy-add ... #<load-data> (list (uint16_t t310)) #f #f #f 'uint32)
 (vv-mpy-add ... #<load-data> '(1) (! x?$391) (! x?$392) (! x?$393) 'uint32)
 (vv-mpy-add ... #<load-data> '(1) (! x?$394) (! x?$395) (! x?$396) 'uint32)
 (vs-mpy-add
  ...
  (broadcast ... (uint16_t t310))
  (list (uint16_t t310))
  #f
  #f
  #f
  'uint32)
 (vs-mpy-add ... #<load-data> (list (uint16_t t310)) #f #f #f 'uint32)
 (vv-mpy-add
  ...
  (broadcast ... (uint16_t t310))
  '(1)
  (! x?$589)
  (! x?$590)
  (! x?$591)
  'uint32)
 (vv-mpy-add ... #<load-data> '(1) (! x?$592) (! x?$593) (! x?$594) 'uint32))
run-x86-synthesizer
halide-expr:
  (vec-mul
 (vec-cast (load (buffer sum 'uint16) (ramp 0 1 64) (aligned 0 0)) 'uint32 64)
 (vec-cast (sca-broadcast (uint16_t t310) 64) 'uint32 64))
template:
  #<load-data>
axioms:
  '()
optimized-halide-expr:
  (vec-mul
 (vec-cast (load (buffer sum 'uint16) (ramp 0 1 64) (aligned 0 0)) 'uint32 64)
 (vec-cast (sca-broadcast (uint16_t t310) 64) 'uint32 64))
optimized-template:
  #<load-data>
optimized Halide 0:
  (uint32_t
 (bvmul (zero-extend (app sum 0) (bitvector 32)) (zero-extend t310 (bitvector 32))))
optimized x86 0:
  (uint16_t (app sum 0))
run-x86-synthesizer
halide-expr:
  (vec-mul
 (vec-cast (load (buffer sum 'uint16) (ramp 0 1 64) (aligned 0 0)) 'uint32 64)
 (vec-cast (sca-broadcast (uint16_t t310) 64) 'uint32 64))
template:
  (cast ... #<load-data> 'uint32 x?$133)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-mul
 (vec-cast #<abstr-halide-expr> 'uint32 64)
 (vec-cast (sca-broadcast (uint16_t t310) 64) 'uint32 64))
optimized-template:
  (cast ... #<abstr-expr> 'uint32 x?$133)
optimized Halide 0:
  (uint32_t
 (bvmul (zero-extend t310 (bitvector 32)) (zero-extend (app abstr-vals$595 0) (bitvector 32))))
optimized x86 0:
  (uint32_t (zero-extend (app abstr-vals$595 0) (bitvector 32)))
run-x86-synthesizer
halide-expr:
  (vec-mul
 (vec-cast (load (buffer sum 'uint16) (ramp 0 1 64) (aligned 0 0)) 'uint32 64)
 (vec-cast (sca-broadcast (uint16_t t310) 64) 'uint32 64))
template:
  (vs-mpy-add ... #<load-data> (list (uint16_t t310)) #f #f #f 'uint32)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-mul
 (vec-cast #<abstr-halide-expr> 'uint32 64)
 (vec-cast (sca-broadcast (uint16_t t310) 64) 'uint32 64))
optimized-template:
  (vs-mpy-add ... #<abstr-expr> (list (uint16_t t310)) #f #f #f 'uint32)
optimized Halide 0:
  (uint32_t
 (bvmul (zero-extend t310 (bitvector 32)) (zero-extend (app abstr-vals$596 0) (bitvector 32))))
optimized x86 0:
  (uint32_t
 (bvmul (zero-extend t310 (bitvector 32)) (zero-extend (app abstr-vals$596 0) (bitvector 32))))
Ran synthesizer for 17 ms
(model)
(vec-mul
 (vec-cast #<abstr-halide-expr> 'uint32 64)
 (vec-cast (sca-broadcast (uint16_t t310) 64) 'uint32 64))
(vs-mpy-add ... #<load-data> (list (uint16_t t310)) #f #f #f 'uint32)
Ran bounds analysis for 91 ms
Ran bounds analysis for 83 ms
"Success?"
#t
(vs-mpy-add ... #<load-data> (list (uint16_t t310)) #f #f #f 'uint32)
"Building Expr:"
(sca-broadcast (uint32_t (bv #x00008000 32)) 64)
"Fold templates"
'()
here()

"Replace templates"
'()
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (sca-broadcast (uint32_t (bv #x00008000 32)) 64)
template:
  (broadcast ... (uint32_t (bv #x00008000 32)))
axioms:
  '()
optimized-halide-expr:
  (sca-broadcast (uint32_t (bv #x00008000 32)) 64)
optimized-template:
  (broadcast ... (uint32_t (bv #x00008000 32)))
optimized Halide 0:
  (uint32_t (bv #x00008000 32))
optimized x86 0:
  (uint32_t (bv #x00008000 32))
Ran synthesizer for 20 ms
(model)
(sca-broadcast (uint32_t (bv #x00008000 32)) 64)
(broadcast ... (uint32_t (bv #x00008000 32)))
Ran bounds analysis for 23 ms
Ran bounds analysis for 17 ms
"Extended success?"
#t
(broadcast ... (uint32_t (bv #x00008000 32)))
"Building Expr:"
(vec-div
 (vec-mul
  (vec-cast (load (buffer sum 'uint16) (ramp 0 1 64) (aligned 0 0)) 'uint32 64)
  (vec-cast (sca-broadcast (uint16_t t310) 64) 'uint32 64))
 (sca-broadcast (uint32_t (bv #x00008000 32)) 64))
"Fold templates"
'(#<load-data>)
here(#<load-data>)

"Replace templates"
'()
run-x86-synthesizer
halide-expr:
  (vec-div
 (vec-mul
  (vec-cast (load (buffer sum 'uint16) (ramp 0 1 64) (aligned 0 0)) 'uint32 64)
  (vec-cast (sca-broadcast (uint16_t t310) 64) 'uint32 64))
 (sca-broadcast (uint32_t (bv #x00008000 32)) 64))
template:
  #<load-data>
axioms:
  '()
optimized-halide-expr:
  (vec-div
 (vec-mul
  (vec-cast (load (buffer sum 'uint16) (ramp 0 1 64) (aligned 0 0)) 'uint32 64)
  (vec-cast (sca-broadcast (uint16_t t310) 64) 'uint32 64))
 (sca-broadcast (uint32_t (bv #x00008000 32)) 64))
optimized-template:
  #<load-data>
optimized Halide 0:
  (uint32_t
 (bvudiv (bvmul (zero-extend (app sum 0) (bitvector 32)) (zero-extend t310 (bitvector 32))) (bv #x00008000 32)))
optimized x86 0:
  (uint16_t (app sum 0))
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (vec-div
 (vec-mul
  (vec-cast (load (buffer sum 'uint16) (ramp 0 1 64) (aligned 0 0)) 'uint32 64)
  (vec-cast (sca-broadcast (uint16_t t310) 64) 'uint32 64))
 (sca-broadcast (uint32_t (bv #x00008000 32)) 64))
template:
  (vs-shift-right
 ...
 (vs-mpy-add ... #<load-data> (list (uint16_t t310)) #f #f #f 'uint32)
 (uint32_t (bv #x0000000f 32))
 #f
 #f
 #f)
axioms:
  (list (forall (idx) (bvule (app abstr-vals$666 idx) (bv #xfffe0001 32))))
optimized-halide-expr:
  (vec-div #<abstr-halide-expr> (sca-broadcast (uint32_t (bv #x00008000 32)) 64))
optimized-template:
  (vs-shift-right ... #<abstr-expr> (uint32_t (bv #x0000000f 32)) #f #f #f)
optimized Halide 0:
  (uint32_t (bvudiv (app abstr-vals$666 0) (bv #x00008000 32)))
optimized x86 0:
  (uint32_t (bvlshr (app abstr-vals$666 0) (bv #x0000000f 32)))
Ran synthesizer for 52 ms
(model)
(vec-div #<abstr-halide-expr> (sca-broadcast (uint32_t (bv #x00008000 32)) 64))
(vs-shift-right
 ...
 (vs-mpy-add ... #<load-data> (list (uint16_t t310)) #f #f #f 'uint32)
 (uint32_t (bv #x0000000f 32))
 #f
 #f
 #f)
Ran bounds analysis for 29 ms
Ran bounds analysis for 21 ms
"Extended success?"
#t
(vs-shift-right
 ...
 (vs-mpy-add ... #<load-data> (list (uint16_t t310)) #f #f #f 'uint32)
 (uint32_t (bv #x0000000f 32))
 #f
 #f
 #f)
"Building Expr:"
(vec-bwand
 (sca-broadcast (uint32_t (bv #x00000001 32)) 64)
 (vec-div
  (vec-mul
   (vec-cast
    (load (buffer sum 'uint16) (ramp 0 1 64) (aligned 0 0))
    'uint32
    64)
   (vec-cast (sca-broadcast (uint16_t t310) 64) 'uint32 64))
  (sca-broadcast (uint32_t (bv #x00008000 32)) 64)))
"Fold templates"
(list
 #<load-data>
 (vs-shift-right
  ...
  (vs-mpy-add ... #<load-data> (list (uint16_t t310)) #f #f #f 'uint32)
  (uint32_t (bv #x0000000f 32))
  #f
  #f
  #f)
 (vs-shift-right
  ...
  (vs-mpy-add ... #<load-data> (list (uint16_t t310)) #f #f #f 'uint32)
  (uint32_t (bv #x0000000f 32))
  x?$668
  x?$669
  x?$670))
here(#<load-data> #(struct:vs-shift-right ... #(struct:vs-mpy-add ... #<load-data> (#(struct:uint16_t t310)) #f #f #f uint32) #(struct:uint32_t (bv #x0000000f 32)) #f #f #f) #(struct:vs-shift-right ... #(struct:vs-mpy-add ... #<load-data> (#(struct:uint16_t t310)) #f #f #f uint32) #(struct:uint32_t (bv #x0000000f 32)) x?$668 x?$669 x?$670))

"Replace templates"
'()
run-x86-synthesizer
halide-expr:
  (vec-bwand
 (sca-broadcast (uint32_t (bv #x00000001 32)) 64)
 (vec-div
  (vec-mul
   (vec-cast
    (load (buffer sum 'uint16) (ramp 0 1 64) (aligned 0 0))
    'uint32
    64)
   (vec-cast (sca-broadcast (uint16_t t310) 64) 'uint32 64))
  (sca-broadcast (uint32_t (bv #x00008000 32)) 64)))
template:
  #<load-data>
axioms:
  '()
optimized-halide-expr:
  (vec-bwand
 (sca-broadcast (uint32_t (bv #x00000001 32)) 64)
 (vec-div
  (vec-mul
   (vec-cast
    (load (buffer sum 'uint16) (ramp 0 1 64) (aligned 0 0))
    'uint32
    64)
   (vec-cast (sca-broadcast (uint16_t t310) 64) 'uint32 64))
  (sca-broadcast (uint32_t (bv #x00008000 32)) 64)))
optimized-template:
  #<load-data>
optimized Halide 0:
  (uint32_t
 (bvand (bv #x00000001 32) (bvudiv (bvmul (zero-extend (app sum 0) (bitvector 32)) (zero-extend t310 (bitvector 32))) (bv #x00008000 32))))
optimized x86 0:
  (uint16_t (app sum 0))
run-x86-synthesizer
halide-expr:
  (vec-bwand
 (sca-broadcast (uint32_t (bv #x00000001 32)) 64)
 (vec-div
  (vec-mul
   (vec-cast
    (load (buffer sum 'uint16) (ramp 0 1 64) (aligned 0 0))
    'uint32
    64)
   (vec-cast (sca-broadcast (uint16_t t310) 64) 'uint32 64))
  (sca-broadcast (uint32_t (bv #x00008000 32)) 64)))
template:
  (vs-shift-right
 ...
 (vs-mpy-add ... #<load-data> (list (uint16_t t310)) #f #f #f 'uint32)
 (uint32_t (bv #x0000000f 32))
 #f
 #f
 #f)
axioms:
  (list (forall (idx) (bvule (app abstr-vals$739 idx) (bv #xfffe0001 32))))
optimized-halide-expr:
  (vec-bwand
 (sca-broadcast (uint32_t (bv #x00000001 32)) 64)
 (vec-div
  #<abstr-halide-expr>
  (sca-broadcast (uint32_t (bv #x00008000 32)) 64)))
optimized-template:
  (vs-shift-right ... #<abstr-expr> (uint32_t (bv #x0000000f 32)) #f #f #f)
optimized Halide 0:
  (uint32_t
 (bvand (bv #x00000001 32) (bvudiv (app abstr-vals$739 0) (bv #x00008000 32))))
optimized x86 0:
  (uint32_t (bvlshr (app abstr-vals$739 0) (bv #x0000000f 32)))
Ran synthesizer for 70 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-bwand
 (sca-broadcast (uint32_t (bv #x00000001 32)) 64)
 (vec-div
  (vec-mul
   (vec-cast
    (load (buffer sum 'uint16) (ramp 0 1 64) (aligned 0 0))
    'uint32
    64)
   (vec-cast (sca-broadcast (uint16_t t310) 64) 'uint32 64))
  (sca-broadcast (uint32_t (bv #x00008000 32)) 64)))
template:
  (vs-shift-right
 ...
 (vs-mpy-add ... #<load-data> (list (uint16_t t310)) #f #f #f 'uint32)
 (uint32_t (bv #x0000000f 32))
 x?$668
 x?$669
 x?$670)
axioms:
  (list (forall (idx) (bvule (app abstr-vals$740 idx) (bv #xfffe0001 32))))
optimized-halide-expr:
  (vec-bwand
 (sca-broadcast (uint32_t (bv #x00000001 32)) 64)
 (vec-div
  #<abstr-halide-expr>
  (sca-broadcast (uint32_t (bv #x00008000 32)) 64)))
optimized-template:
  (vs-shift-right
 ...
 #<abstr-expr>
 (uint32_t (bv #x0000000f 32))
 x?$668
 x?$669
 x?$670)
optimized Halide 0:
  (uint32_t
 (bvand (bv #x00000001 32) (bvudiv (app abstr-vals$740 0) (bv #x00008000 32))))
optimized x86 0:
  (uint32_t
 (ite x?$668 (bvadd (ite x?$670 (bvashr (app abstr-vals$740 0) (bv #x0000000f 32)) (bvlshr (app abstr-vals$740 0) (bv #x0000000f 32))) (bvand (bv #x00000001 32) (ite x?$670 (bvashr (app abstr-vals$740 0) (bv #x0000000e 32)) (bvlshr (app abstr-vals$740 0) (bv #x0000000e 32))))) (ite x?$670 (bvashr (app abstr-vals$740 0) (bv #x0000000f 32)) (bvlshr (app abstr-vals$740 0) (bv #x0000000f 32)))))
Ran synthesizer for 75 ms
(unsat)
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (vec-bwand
 (sca-broadcast (uint32_t (bv #x00000001 32)) 64)
 (vec-div
  (vec-mul
   (vec-cast
    (load (buffer sum 'uint16) (ramp 0 1 64) (aligned 0 0))
    'uint32
    64)
   (vec-cast (sca-broadcast (uint16_t t310) 64) 'uint32 64))
  (sca-broadcast (uint32_t (bv #x00008000 32)) 64)))
template:
  (bitwise-op
 ...
 'and
 (broadcast ... (uint32_t (bv #x00000001 32)))
 (vs-shift-right
  ...
  (vs-mpy-add ... #<load-data> (list (uint16_t t310)) #f #f #f 'uint32)
  (uint32_t (bv #x0000000f 32))
  #f
  #f
  #f))
axioms:
  (list
 (forall (idx) (&& (bvule (app abstr-vals$741 idx) (bv #x00000001 32)) (bvule (bv #x00000001 32) (app abstr-vals$741 idx))))
 (forall (idx) (bvule (app abstr-vals$742 idx) (bv #x0001fffc 32))))
optimized-halide-expr:
  (vec-bwand #<abstr-halide-expr> #<abstr-halide-expr>)
optimized-template:
  (bitwise-op ... 'and #<abstr-expr> #<abstr-expr>)
optimized Halide 0:
  (uint32_t (bvand (app abstr-vals$741 0) (app abstr-vals$742 0)))
optimized x86 0:
  (uint32_t (bvand (app abstr-vals$741 0) (app abstr-vals$742 0)))
Ran synthesizer for 30 ms
(model)
(vec-bwand #<abstr-halide-expr> #<abstr-halide-expr>)
(bitwise-op
 ...
 'and
 (broadcast ... (uint32_t (bv #x00000001 32)))
 (vs-shift-right
  ...
  (vs-mpy-add ... #<load-data> (list (uint16_t t310)) #f #f #f 'uint32)
  (uint32_t (bv #x0000000f 32))
  #f
  #f
  #f))
Ran bounds analysis for 20 ms
Ran bounds analysis for 25 ms
"Extended success?"
#t
(bitwise-op
 ...
 'and
 (broadcast ... (uint32_t (bv #x00000001 32)))
 (vs-shift-right
  ...
  (vs-mpy-add ... #<load-data> (list (uint16_t t310)) #f #f #f 'uint32)
  (uint32_t (bv #x0000000f 32))
  #f
  #f
  #f))
"Building Expr:"
(sca-broadcast (uint32_t (bv #x00010000 32)) 64)
"Fold templates"
'()
here()

"Replace templates"
'()
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (sca-broadcast (uint32_t (bv #x00010000 32)) 64)
template:
  (broadcast ... (uint32_t (bv #x00010000 32)))
axioms:
  '()
optimized-halide-expr:
  (sca-broadcast (uint32_t (bv #x00010000 32)) 64)
optimized-template:
  (broadcast ... (uint32_t (bv #x00010000 32)))
optimized Halide 0:
  (uint32_t (bv #x00010000 32))
optimized x86 0:
  (uint32_t (bv #x00010000 32))
Ran synthesizer for 15 ms
(model)
(sca-broadcast (uint32_t (bv #x00010000 32)) 64)
(broadcast ... (uint32_t (bv #x00010000 32)))
Ran bounds analysis for 19 ms
Ran bounds analysis for 11 ms
"Extended success?"
#t
(broadcast ... (uint32_t (bv #x00010000 32)))
"Building Expr:"
(vec-div
 (vec-mul
  (vec-cast (load (buffer sum 'uint16) (ramp 0 1 64) (aligned 0 0)) 'uint32 64)
  (vec-cast (sca-broadcast (uint16_t t310) 64) 'uint32 64))
 (sca-broadcast (uint32_t (bv #x00010000 32)) 64))
"Fold templates"
'(#<load-data>)
here(#<load-data>)

"Replace templates"
'()
run-x86-synthesizer
halide-expr:
  (vec-div
 (vec-mul
  (vec-cast (load (buffer sum 'uint16) (ramp 0 1 64) (aligned 0 0)) 'uint32 64)
  (vec-cast (sca-broadcast (uint16_t t310) 64) 'uint32 64))
 (sca-broadcast (uint32_t (bv #x00010000 32)) 64))
template:
  #<load-data>
axioms:
  '()
optimized-halide-expr:
  (vec-div
 (vec-mul
  (vec-cast (load (buffer sum 'uint16) (ramp 0 1 64) (aligned 0 0)) 'uint32 64)
  (vec-cast (sca-broadcast (uint16_t t310) 64) 'uint32 64))
 (sca-broadcast (uint32_t (bv #x00010000 32)) 64))
optimized-template:
  #<load-data>
optimized Halide 0:
  (uint32_t
 (bvudiv (bvmul (zero-extend (app sum 0) (bitvector 32)) (zero-extend t310 (bitvector 32))) (bv #x00010000 32)))
optimized x86 0:
  (uint16_t (app sum 0))
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (vec-div
 (vec-mul
  (vec-cast (load (buffer sum 'uint16) (ramp 0 1 64) (aligned 0 0)) 'uint32 64)
  (vec-cast (sca-broadcast (uint16_t t310) 64) 'uint32 64))
 (sca-broadcast (uint32_t (bv #x00010000 32)) 64))
template:
  (vs-shift-right
 ...
 (vs-mpy-add ... #<load-data> (list (uint16_t t310)) #f #f #f 'uint32)
 (uint32_t (bv #x00000010 32))
 #f
 #f
 #f)
axioms:
  (list (forall (idx) (bvule (app abstr-vals$813 idx) (bv #xfffe0001 32))))
optimized-halide-expr:
  (vec-div #<abstr-halide-expr> (sca-broadcast (uint32_t (bv #x00010000 32)) 64))
optimized-template:
  (vs-shift-right ... #<abstr-expr> (uint32_t (bv #x00000010 32)) #f #f #f)
optimized Halide 0:
  (uint32_t (bvudiv (app abstr-vals$813 0) (bv #x00010000 32)))
optimized x86 0:
  (uint32_t (bvlshr (app abstr-vals$813 0) (bv #x00000010 32)))
Ran synthesizer for 42 ms
(model)
(vec-div #<abstr-halide-expr> (sca-broadcast (uint32_t (bv #x00010000 32)) 64))
(vs-shift-right
 ...
 (vs-mpy-add ... #<load-data> (list (uint16_t t310)) #f #f #f 'uint32)
 (uint32_t (bv #x00000010 32))
 #f
 #f
 #f)
Ran bounds analysis for 23 ms
Ran bounds analysis for 17 ms
"Extended success?"
#t
(vs-shift-right
 ...
 (vs-mpy-add ... #<load-data> (list (uint16_t t310)) #f #f #f 'uint32)
 (uint32_t (bv #x00000010 32))
 #f
 #f
 #f)
"Building Expr:"
(vec-add
 (vec-bwand
  (sca-broadcast (uint32_t (bv #x00000001 32)) 64)
  (vec-div
   (vec-mul
    (vec-cast
     (load (buffer sum 'uint16) (ramp 0 1 64) (aligned 0 0))
     'uint32
     64)
    (vec-cast (sca-broadcast (uint16_t t310) 64) 'uint32 64))
   (sca-broadcast (uint32_t (bv #x00008000 32)) 64)))
 (vec-div
  (vec-mul
   (vec-cast
    (load (buffer sum 'uint16) (ramp 0 1 64) (aligned 0 0))
    'uint32
    64)
   (vec-cast (sca-broadcast (uint16_t t310) 64) 'uint32 64))
  (sca-broadcast (uint32_t (bv #x00010000 32)) 64)))
"Fold templates"
(list
 (vs-mpy-add
  ...
  #<load-data>
  (list
   (uint16_t t310)
   (union [x?$822 #(struct:uint16_t t310)] [(! x?$822) #(struct:int8_t
                                                         (bv #x01 8))]))
  #f
  #f
  #f
  'uint32)
 (vs-mpy-add ... #<load-data> (list (uint16_t t310)) #f x?$820 #f 'uint32)
 (vs-mpy-add
  ...
  (combine
   (vs-mpy-add ... #<load-data> (list (uint16_t t310)) #f #f #f 'uint32)
   (union [x?$823 #(struct:bitwise-op
                    ...
                    and
                    #(struct:broadcast
                      ...
                      #(struct:uint32_t (bv #x00000001 32)))
                    #(struct:vs-shift-right
                      ...
                      #(struct:vs-mpy-add
                        ...
                        #<load-data>
                        (#(struct:uint16_t t310))
                        #f
                        #f
                        #f
                        uint32)
                      #(struct:uint32_t (bv #x0000000f 32))
                      #f
                      #f
                      #f))] [(! x?$823) #(struct:vs-shift-right
                                          ...
                                          #(struct:vs-mpy-add
                                            ...
                                            #<load-data>
                                            (#(struct:uint16_t t310))
                                            #f
                                            #f
                                            #f
                                            uint32)
                                          #(struct:uint32_t (bv #x00000010 32))
                                          #f
                                          #f
                                          #f)]))
  (list (uint16_t t310) (int8_t (bv #x01 8)))
  #f
  #f
  #f
  'uint32)
 (vs-shift-right
  ...
  (vs-mpy-add ... #<load-data> (list (uint16_t t310)) #f #f #f 'uint32)
  (uint32_t (ite x?$815 (bv #x00000010 32) (bv #x0000000f 32)))
  #f
  #f
  #f)
 (vs-shift-right
  ...
  (vs-mpy-add ... #<load-data> (list (uint16_t t310)) #f #f #f 'uint32)
  (uint32_t (bv #x0000000f 32))
  x?$816
  x?$817
  x?$818)
 #<load-data>
 (vs-mpy-add
  ...
  #<load-data>
  (list
   (uint16_t t310)
   (union [x?$959 #(struct:uint16_t t310)] [(! x?$959) #(struct:int8_t
                                                         (bv #x01 8))]))
  #f
  #f
  #f
  'uint32)
 (vs-mpy-add ... #<load-data> (list (uint16_t t310)) #f x?$957 #f 'uint32)
 (vs-mpy-add
  ...
  (combine
   (vs-mpy-add ... #<load-data> (list (uint16_t t310)) #f #f #f 'uint32)
   (union [x?$960 #(struct:bitwise-op
                    ...
                    and
                    #(struct:broadcast
                      ...
                      #(struct:uint32_t (bv #x00000001 32)))
                    #(struct:vs-shift-right
                      ...
                      #(struct:vs-mpy-add
                        ...
                        #<load-data>
                        (#(struct:uint16_t t310))
                        #f
                        #f
                        #f
                        uint32)
                      #(struct:uint32_t (bv #x0000000f 32))
                      #f
                      #f
                      #f))] [(! x?$960) #(struct:vs-shift-right
                                          ...
                                          #(struct:vs-mpy-add
                                            ...
                                            #<load-data>
                                            (#(struct:uint16_t t310))
                                            #f
                                            #f
                                            #f
                                            uint32)
                                          #(struct:uint32_t (bv #x00000010 32))
                                          #f
                                          #f
                                          #f)]))
  (list (uint16_t t310) (int8_t (bv #x01 8)))
  #f
  #f
  #f
  'uint32)
 (vs-shift-right
  ...
  (vs-mpy-add ... #<load-data> (list (uint16_t t310)) #f #f #f 'uint32)
  (uint32_t (ite x?$952 (bv #x00000010 32) (bv #x0000000f 32)))
  #f
  #f
  #f)
 (vs-shift-right
  ...
  (vs-mpy-add ... #<load-data> (list (uint16_t t310)) #f #f #f 'uint32)
  (uint32_t (bv #x00000010 32))
  x?$953
  x?$954
  x?$955))
here(#(struct:vs-mpy-add ... #<load-data> (#(struct:uint16_t t310) (union #:size 2 #:hash 409416452284)) #f #f #f uint32) #(struct:vs-mpy-add ... #<load-data> (#(struct:uint16_t t310)) #f x?$820 #f uint32) #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<load-data> (#(struct:uint16_t t310)) #f #f #f uint32) (union #:size 2 #:hash 408982930016)> (#(struct:uint16_t t310) #(struct:int8_t (bv #x01 8))) #f #f #f uint32) #(struct:vs-shift-right ... #(struct:vs-mpy-add ... #<load-data> (#(struct:uint16_t t310)) #f #f #f uint32) #(struct:uint32_t (ite x?$815 (bv #x00000010 32) (bv #x0000000f 32))) #f #f #f) #(struct:vs-shift-right ... #(struct:vs-mpy-add ... #<load-data> (#(struct:uint16_t t310)) #f #f #f uint32) #(struct:uint32_t (bv #x0000000f 32)) x?$816 x?$817 x?$818) #<load-data> #(struct:vs-mpy-add ... #<load-data> (#(struct:uint16_t t310) (union #:size 2 #:hash 409613872313)) #f #f #f uint32) #(struct:vs-mpy-add ... #<load-data> (#(struct:uint16_t t310)) #f x?$957 #f uint32) #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<load-data> (#(struct:uint16_t t310)) #f #f #f uint32) (union #:size 2 #:hash 409221375228)> (#(struct:uint16_t t310) #(struct:int8_t (bv #x01 8))) #f #f #f uint32) #(struct:vs-shift-right ... #(struct:vs-mpy-add ... #<load-data> (#(struct:uint16_t t310)) #f #f #f uint32) #(struct:uint32_t (ite x?$952 (bv #x00000010 32) (bv #x0000000f 32))) #f #f #f) #(struct:vs-shift-right ... #(struct:vs-mpy-add ... #<load-data> (#(struct:uint16_t t310)) #f #f #f uint32) #(struct:uint32_t (bv #x00000010 32)) x?$953 x?$954 x?$955))

"Replace templates"
'()
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-bwand
  (sca-broadcast (uint32_t (bv #x00000001 32)) 64)
  (vec-div
   (vec-mul
    (vec-cast
     (load (buffer sum 'uint16) (ramp 0 1 64) (aligned 0 0))
     'uint32
     64)
    (vec-cast (sca-broadcast (uint16_t t310) 64) 'uint32 64))
   (sca-broadcast (uint32_t (bv #x00008000 32)) 64)))
 (vec-div
  (vec-mul
   (vec-cast
    (load (buffer sum 'uint16) (ramp 0 1 64) (aligned 0 0))
    'uint32
    64)
   (vec-cast (sca-broadcast (uint16_t t310) 64) 'uint32 64))
  (sca-broadcast (uint32_t (bv #x00010000 32)) 64)))
template:
  #<load-data>
axioms:
  '()
optimized-halide-expr:
  (vec-add
 (vec-bwand
  (sca-broadcast (uint32_t (bv #x00000001 32)) 64)
  (vec-div
   (vec-mul
    (vec-cast
     (load (buffer sum 'uint16) (ramp 0 1 64) (aligned 0 0))
     'uint32
     64)
    (vec-cast (sca-broadcast (uint16_t t310) 64) 'uint32 64))
   (sca-broadcast (uint32_t (bv #x00008000 32)) 64)))
 (vec-div
  (vec-mul
   (vec-cast
    (load (buffer sum 'uint16) (ramp 0 1 64) (aligned 0 0))
    'uint32
    64)
   (vec-cast (sca-broadcast (uint16_t t310) 64) 'uint32 64))
  (sca-broadcast (uint32_t (bv #x00010000 32)) 64)))
optimized-template:
  #<load-data>
optimized Halide 0:
  (uint32_t
 (bvadd (bvand (bv #x00000001 32) (bvudiv (bvmul (zero-extend (app sum 0) (bitvector 32)) (zero-extend t310 (bitvector 32))) (bv #x00008000 32))) (bvudiv (bvmul (zero-extend (app sum 0) (bitvector 32)) (zero-extend t310 (bitvector 32))) (bv #x00010000 32))))
optimized x86 0:
  (uint16_t (app sum 0))
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-bwand
  (sca-broadcast (uint32_t (bv #x00000001 32)) 64)
  (vec-div
   (vec-mul
    (vec-cast
     (load (buffer sum 'uint16) (ramp 0 1 64) (aligned 0 0))
     'uint32
     64)
    (vec-cast (sca-broadcast (uint16_t t310) 64) 'uint32 64))
   (sca-broadcast (uint32_t (bv #x00008000 32)) 64)))
 (vec-div
  (vec-mul
   (vec-cast
    (load (buffer sum 'uint16) (ramp 0 1 64) (aligned 0 0))
    'uint32
    64)
   (vec-cast (sca-broadcast (uint16_t t310) 64) 'uint32 64))
  (sca-broadcast (uint32_t (bv #x00010000 32)) 64)))
template:
  (vs-mpy-add
 ...
 #<load-data>
 (list
  (uint16_t t310)
  (union [x?$822 #(struct:uint16_t t310)] [(! x?$822) #(struct:int8_t
                                                        (bv #x01 8))]))
 #f
 #f
 #f
 'uint32)
axioms:
  '()
optimized-halide-expr:
  (vec-add
 (vec-bwand
  (sca-broadcast (uint32_t (bv #x00000001 32)) 64)
  (vec-div
   (vec-mul
    (vec-cast
     (load (buffer sum 'uint16) (ramp 0 1 64) (aligned 0 0))
     'uint32
     64)
    (vec-cast (sca-broadcast (uint16_t t310) 64) 'uint32 64))
   (sca-broadcast (uint32_t (bv #x00008000 32)) 64)))
 (vec-div
  (vec-mul
   (vec-cast
    (load (buffer sum 'uint16) (ramp 0 1 64) (aligned 0 0))
    'uint32
    64)
   (vec-cast (sca-broadcast (uint16_t t310) 64) 'uint32 64))
  (sca-broadcast (uint32_t (bv #x00010000 32)) 64)))
optimized-template:
  (vs-mpy-add
 ...
 #<load-data>
 (list
  (uint16_t t310)
  (union [x?$822 #(struct:uint16_t t310)] [(! x?$822) #(struct:int8_t
                                                        (bv #x01 8))]))
 #f
 #f
 #f
 'uint32)
optimized Halide 0:
  (uint32_t
 (bvadd (bvand (bv #x00000001 32) (bvudiv (bvmul (zero-extend (app sum 0) (bitvector 32)) (zero-extend t310 (bitvector 32))) (bv #x00008000 32))) (bvudiv (bvmul (zero-extend (app sum 0) (bitvector 32)) (zero-extend t310 (bitvector 32))) (bv #x00010000 32))))
optimized x86 0:
  (uint32_t
 (bvadd (bvmul (zero-extend (app sum 0) (bitvector 32)) (zero-extend t310 (bitvector 32))) (bvmul (zero-extend (app sum 0) (bitvector 32)) (ite x?$822 (zero-extend t310 (bitvector 32)) (bv #x00000001 32)))))
Ran synthesizer for 129 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-bwand
  (sca-broadcast (uint32_t (bv #x00000001 32)) 64)
  (vec-div
   (vec-mul
    (vec-cast
     (load (buffer sum 'uint16) (ramp 0 1 64) (aligned 0 0))
     'uint32
     64)
    (vec-cast (sca-broadcast (uint16_t t310) 64) 'uint32 64))
   (sca-broadcast (uint32_t (bv #x00008000 32)) 64)))
 (vec-div
  (vec-mul
   (vec-cast
    (load (buffer sum 'uint16) (ramp 0 1 64) (aligned 0 0))
    'uint32
    64)
   (vec-cast (sca-broadcast (uint16_t t310) 64) 'uint32 64))
  (sca-broadcast (uint32_t (bv #x00010000 32)) 64)))
template:
  (vs-mpy-add ... #<load-data> (list (uint16_t t310)) #f x?$820 #f 'uint32)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-add
 (vec-bwand
  (sca-broadcast (uint32_t (bv #x00000001 32)) 64)
  (vec-div
   (vec-mul
    (vec-cast #<abstr-halide-expr> 'uint32 64)
    (vec-cast (sca-broadcast (uint16_t t310) 64) 'uint32 64))
   (sca-broadcast (uint32_t (bv #x00008000 32)) 64)))
 (vec-div
  (vec-mul
   (vec-cast #<abstr-halide-expr> 'uint32 64)
   (vec-cast (sca-broadcast (uint16_t t310) 64) 'uint32 64))
  (sca-broadcast (uint32_t (bv #x00010000 32)) 64)))
optimized-template:
  (vs-mpy-add ... #<abstr-expr> (list (uint16_t t310)) #f x?$820 #f 'uint32)
optimized Halide 0:
  (uint32_t
 (bvadd (bvand (bv #x00000001 32) (bvudiv (bvmul (zero-extend t310 (bitvector 32)) (zero-extend (app abstr-vals$1153 0) (bitvector 32))) (bv #x00008000 32))) (bvudiv (bvmul (zero-extend t310 (bitvector 32)) (zero-extend (app abstr-vals$1153 0) (bitvector 32))) (bv #x00010000 32))))
optimized x86 0:
  (uint32_t
 (bvadd (bvmul (zero-extend t310 (bitvector 32)) (zero-extend (app abstr-vals$1153 0) (bitvector 32))) (ite x?$820 (bv #x00000001 32) (bv #x00000000 32))))
Ran synthesizer for 95 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-bwand
  (sca-broadcast (uint32_t (bv #x00000001 32)) 64)
  (vec-div
   (vec-mul
    (vec-cast
     (load (buffer sum 'uint16) (ramp 0 1 64) (aligned 0 0))
     'uint32
     64)
    (vec-cast (sca-broadcast (uint16_t t310) 64) 'uint32 64))
   (sca-broadcast (uint32_t (bv #x00008000 32)) 64)))
 (vec-div
  (vec-mul
   (vec-cast
    (load (buffer sum 'uint16) (ramp 0 1 64) (aligned 0 0))
    'uint32
    64)
   (vec-cast (sca-broadcast (uint16_t t310) 64) 'uint32 64))
  (sca-broadcast (uint32_t (bv #x00010000 32)) 64)))
template:
  (vs-mpy-add
 ...
 #<load-data>
 (list
  (uint16_t t310)
  (union [x?$959 #(struct:uint16_t t310)] [(! x?$959) #(struct:int8_t
                                                        (bv #x01 8))]))
 #f
 #f
 #f
 'uint32)
axioms:
  '()
optimized-halide-expr:
  (vec-add
 (vec-bwand
  (sca-broadcast (uint32_t (bv #x00000001 32)) 64)
  (vec-div
   (vec-mul
    (vec-cast
     (load (buffer sum 'uint16) (ramp 0 1 64) (aligned 0 0))
     'uint32
     64)
    (vec-cast (sca-broadcast (uint16_t t310) 64) 'uint32 64))
   (sca-broadcast (uint32_t (bv #x00008000 32)) 64)))
 (vec-div
  (vec-mul
   (vec-cast
    (load (buffer sum 'uint16) (ramp 0 1 64) (aligned 0 0))
    'uint32
    64)
   (vec-cast (sca-broadcast (uint16_t t310) 64) 'uint32 64))
  (sca-broadcast (uint32_t (bv #x00010000 32)) 64)))
optimized-template:
  (vs-mpy-add
 ...
 #<load-data>
 (list
  (uint16_t t310)
  (union [x?$959 #(struct:uint16_t t310)] [(! x?$959) #(struct:int8_t
                                                        (bv #x01 8))]))
 #f
 #f
 #f
 'uint32)
optimized Halide 0:
  (uint32_t
 (bvadd (bvand (bv #x00000001 32) (bvudiv (bvmul (zero-extend (app sum 0) (bitvector 32)) (zero-extend t310 (bitvector 32))) (bv #x00008000 32))) (bvudiv (bvmul (zero-extend (app sum 0) (bitvector 32)) (zero-extend t310 (bitvector 32))) (bv #x00010000 32))))
optimized x86 0:
  (uint32_t
 (bvadd (bvmul (zero-extend (app sum 0) (bitvector 32)) (zero-extend t310 (bitvector 32))) (bvmul (zero-extend (app sum 0) (bitvector 32)) (ite x?$959 (zero-extend t310 (bitvector 32)) (bv #x00000001 32)))))
Ran synthesizer for 128 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-bwand
  (sca-broadcast (uint32_t (bv #x00000001 32)) 64)
  (vec-div
   (vec-mul
    (vec-cast
     (load (buffer sum 'uint16) (ramp 0 1 64) (aligned 0 0))
     'uint32
     64)
    (vec-cast (sca-broadcast (uint16_t t310) 64) 'uint32 64))
   (sca-broadcast (uint32_t (bv #x00008000 32)) 64)))
 (vec-div
  (vec-mul
   (vec-cast
    (load (buffer sum 'uint16) (ramp 0 1 64) (aligned 0 0))
    'uint32
    64)
   (vec-cast (sca-broadcast (uint16_t t310) 64) 'uint32 64))
  (sca-broadcast (uint32_t (bv #x00010000 32)) 64)))
template:
  (vs-mpy-add ... #<load-data> (list (uint16_t t310)) #f x?$957 #f 'uint32)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-add
 (vec-bwand
  (sca-broadcast (uint32_t (bv #x00000001 32)) 64)
  (vec-div
   (vec-mul
    (vec-cast #<abstr-halide-expr> 'uint32 64)
    (vec-cast (sca-broadcast (uint16_t t310) 64) 'uint32 64))
   (sca-broadcast (uint32_t (bv #x00008000 32)) 64)))
 (vec-div
  (vec-mul
   (vec-cast #<abstr-halide-expr> 'uint32 64)
   (vec-cast (sca-broadcast (uint16_t t310) 64) 'uint32 64))
  (sca-broadcast (uint32_t (bv #x00010000 32)) 64)))
optimized-template:
  (vs-mpy-add ... #<abstr-expr> (list (uint16_t t310)) #f x?$957 #f 'uint32)
optimized Halide 0:
  (uint32_t
 (bvadd (bvand (bv #x00000001 32) (bvudiv (bvmul (zero-extend t310 (bitvector 32)) (zero-extend (app abstr-vals$1154 0) (bitvector 32))) (bv #x00008000 32))) (bvudiv (bvmul (zero-extend t310 (bitvector 32)) (zero-extend (app abstr-vals$1154 0) (bitvector 32))) (bv #x00010000 32))))
optimized x86 0:
  (uint32_t
 (bvadd (bvmul (zero-extend t310 (bitvector 32)) (zero-extend (app abstr-vals$1154 0) (bitvector 32))) (ite x?$957 (bv #x00000001 32) (bv #x00000000 32))))
Ran synthesizer for 98 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-bwand
  (sca-broadcast (uint32_t (bv #x00000001 32)) 64)
  (vec-div
   (vec-mul
    (vec-cast
     (load (buffer sum 'uint16) (ramp 0 1 64) (aligned 0 0))
     'uint32
     64)
    (vec-cast (sca-broadcast (uint16_t t310) 64) 'uint32 64))
   (sca-broadcast (uint32_t (bv #x00008000 32)) 64)))
 (vec-div
  (vec-mul
   (vec-cast
    (load (buffer sum 'uint16) (ramp 0 1 64) (aligned 0 0))
    'uint32
    64)
   (vec-cast (sca-broadcast (uint16_t t310) 64) 'uint32 64))
  (sca-broadcast (uint32_t (bv #x00010000 32)) 64)))
template:
  (vs-shift-right
 ...
 (vs-mpy-add ... #<load-data> (list (uint16_t t310)) #f #f #f 'uint32)
 (uint32_t (ite x?$815 (bv #x00000010 32) (bv #x0000000f 32)))
 #f
 #f
 #f)
axioms:
  (list (forall (idx) (bvule (app abstr-vals$1155 idx) (bv #xfffe0001 32))))
optimized-halide-expr:
  (vec-add
 (vec-bwand
  (sca-broadcast (uint32_t (bv #x00000001 32)) 64)
  (vec-div
   #<abstr-halide-expr>
   (sca-broadcast (uint32_t (bv #x00008000 32)) 64)))
 (vec-div
  #<abstr-halide-expr>
  (sca-broadcast (uint32_t (bv #x00010000 32)) 64)))
optimized-template:
  (vs-shift-right
 ...
 #<abstr-expr>
 (uint32_t (ite x?$815 (bv #x00000010 32) (bv #x0000000f 32)))
 #f
 #f
 #f)
optimized Halide 0:
  (uint32_t
 (bvadd (bvand (bv #x00000001 32) (bvudiv (app abstr-vals$1155 0) (bv #x00008000 32))) (bvudiv (app abstr-vals$1155 0) (bv #x00010000 32))))
optimized x86 0:
  (uint32_t
 (bvlshr (app abstr-vals$1155 0) (ite x?$815 (bv #x00000010 32) (bv #x0000000f 32))))
Ran synthesizer for 119 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-bwand
  (sca-broadcast (uint32_t (bv #x00000001 32)) 64)
  (vec-div
   (vec-mul
    (vec-cast
     (load (buffer sum 'uint16) (ramp 0 1 64) (aligned 0 0))
     'uint32
     64)
    (vec-cast (sca-broadcast (uint16_t t310) 64) 'uint32 64))
   (sca-broadcast (uint32_t (bv #x00008000 32)) 64)))
 (vec-div
  (vec-mul
   (vec-cast
    (load (buffer sum 'uint16) (ramp 0 1 64) (aligned 0 0))
    'uint32
    64)
   (vec-cast (sca-broadcast (uint16_t t310) 64) 'uint32 64))
  (sca-broadcast (uint32_t (bv #x00010000 32)) 64)))
template:
  (vs-shift-right
 ...
 (vs-mpy-add ... #<load-data> (list (uint16_t t310)) #f #f #f 'uint32)
 (uint32_t (bv #x0000000f 32))
 x?$816
 x?$817
 x?$818)
axioms:
  (list (forall (idx) (bvule (app abstr-vals$1156 idx) (bv #xfffe0001 32))))
optimized-halide-expr:
  (vec-add
 (vec-bwand
  (sca-broadcast (uint32_t (bv #x00000001 32)) 64)
  (vec-div
   #<abstr-halide-expr>
   (sca-broadcast (uint32_t (bv #x00008000 32)) 64)))
 (vec-div
  #<abstr-halide-expr>
  (sca-broadcast (uint32_t (bv #x00010000 32)) 64)))
optimized-template:
  (vs-shift-right
 ...
 #<abstr-expr>
 (uint32_t (bv #x0000000f 32))
 x?$816
 x?$817
 x?$818)
optimized Halide 0:
  (uint32_t
 (bvadd (bvand (bv #x00000001 32) (bvudiv (app abstr-vals$1156 0) (bv #x00008000 32))) (bvudiv (app abstr-vals$1156 0) (bv #x00010000 32))))
optimized x86 0:
  (uint32_t
 (ite x?$816 (bvadd (ite x?$818 (bvashr (app abstr-vals$1156 0) (bv #x0000000f 32)) (bvlshr (app abstr-vals$1156 0) (bv #x0000000f 32))) (bvand (bv #x00000001 32) (ite x?$818 (bvashr (app abstr-vals$1156 0) (bv #x0000000e 32)) (bvlshr (app abstr-vals$1156 0) (bv #x0000000e 32))))) (ite x?$818 (bvashr (app abstr-vals$1156 0) (bv #x0000000f 32)) (bvlshr (app abstr-vals$1156 0) (bv #x0000000f 32)))))
Ran synthesizer for 76 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-bwand
  (sca-broadcast (uint32_t (bv #x00000001 32)) 64)
  (vec-div
   (vec-mul
    (vec-cast
     (load (buffer sum 'uint16) (ramp 0 1 64) (aligned 0 0))
     'uint32
     64)
    (vec-cast (sca-broadcast (uint16_t t310) 64) 'uint32 64))
   (sca-broadcast (uint32_t (bv #x00008000 32)) 64)))
 (vec-div
  (vec-mul
   (vec-cast
    (load (buffer sum 'uint16) (ramp 0 1 64) (aligned 0 0))
    'uint32
    64)
   (vec-cast (sca-broadcast (uint16_t t310) 64) 'uint32 64))
  (sca-broadcast (uint32_t (bv #x00010000 32)) 64)))
template:
  (vs-shift-right
 ...
 (vs-mpy-add ... #<load-data> (list (uint16_t t310)) #f #f #f 'uint32)
 (uint32_t (ite x?$952 (bv #x00000010 32) (bv #x0000000f 32)))
 #f
 #f
 #f)
axioms:
  (list (forall (idx) (bvule (app abstr-vals$1157 idx) (bv #xfffe0001 32))))
optimized-halide-expr:
  (vec-add
 (vec-bwand
  (sca-broadcast (uint32_t (bv #x00000001 32)) 64)
  (vec-div
   #<abstr-halide-expr>
   (sca-broadcast (uint32_t (bv #x00008000 32)) 64)))
 (vec-div
  #<abstr-halide-expr>
  (sca-broadcast (uint32_t (bv #x00010000 32)) 64)))
optimized-template:
  (vs-shift-right
 ...
 #<abstr-expr>
 (uint32_t (ite x?$952 (bv #x00000010 32) (bv #x0000000f 32)))
 #f
 #f
 #f)
optimized Halide 0:
  (uint32_t
 (bvadd (bvand (bv #x00000001 32) (bvudiv (app abstr-vals$1157 0) (bv #x00008000 32))) (bvudiv (app abstr-vals$1157 0) (bv #x00010000 32))))
optimized x86 0:
  (uint32_t
 (bvlshr (app abstr-vals$1157 0) (ite x?$952 (bv #x00000010 32) (bv #x0000000f 32))))
Ran synthesizer for 116 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-bwand
  (sca-broadcast (uint32_t (bv #x00000001 32)) 64)
  (vec-div
   (vec-mul
    (vec-cast
     (load (buffer sum 'uint16) (ramp 0 1 64) (aligned 0 0))
     'uint32
     64)
    (vec-cast (sca-broadcast (uint16_t t310) 64) 'uint32 64))
   (sca-broadcast (uint32_t (bv #x00008000 32)) 64)))
 (vec-div
  (vec-mul
   (vec-cast
    (load (buffer sum 'uint16) (ramp 0 1 64) (aligned 0 0))
    'uint32
    64)
   (vec-cast (sca-broadcast (uint16_t t310) 64) 'uint32 64))
  (sca-broadcast (uint32_t (bv #x00010000 32)) 64)))
template:
  (vs-shift-right
 ...
 (vs-mpy-add ... #<load-data> (list (uint16_t t310)) #f #f #f 'uint32)
 (uint32_t (bv #x00000010 32))
 x?$953
 x?$954
 x?$955)
axioms:
  (list (forall (idx) (bvule (app abstr-vals$1158 idx) (bv #xfffe0001 32))))
optimized-halide-expr:
  (vec-add
 (vec-bwand
  (sca-broadcast (uint32_t (bv #x00000001 32)) 64)
  (vec-div
   #<abstr-halide-expr>
   (sca-broadcast (uint32_t (bv #x00008000 32)) 64)))
 (vec-div
  #<abstr-halide-expr>
  (sca-broadcast (uint32_t (bv #x00010000 32)) 64)))
optimized-template:
  (vs-shift-right
 ...
 #<abstr-expr>
 (uint32_t (bv #x00000010 32))
 x?$953
 x?$954
 x?$955)
optimized Halide 0:
  (uint32_t
 (bvadd (bvand (bv #x00000001 32) (bvudiv (app abstr-vals$1158 0) (bv #x00008000 32))) (bvudiv (app abstr-vals$1158 0) (bv #x00010000 32))))
optimized x86 0:
  (uint32_t
 (ite x?$953 (bvadd (ite x?$955 (bvashr (app abstr-vals$1158 0) (bv #x00000010 32)) (bvlshr (app abstr-vals$1158 0) (bv #x00000010 32))) (bvand (bv #x00000001 32) (ite x?$955 (bvashr (app abstr-vals$1158 0) (bv #x0000000f 32)) (bvlshr (app abstr-vals$1158 0) (bv #x0000000f 32))))) (ite x?$955 (bvashr (app abstr-vals$1158 0) (bv #x00000010 32)) (bvlshr (app abstr-vals$1158 0) (bv #x00000010 32)))))
Ran synthesizer for 123 ms
(model
 [x?$953 #t]
 [x?$955 #f])
(vec-add
 (vec-bwand
  (sca-broadcast (uint32_t (bv #x00000001 32)) 64)
  (vec-div
   #<abstr-halide-expr>
   (sca-broadcast (uint32_t (bv #x00008000 32)) 64)))
 (vec-div
  #<abstr-halide-expr>
  (sca-broadcast (uint32_t (bv #x00010000 32)) 64)))
(vs-shift-right
 ...
 (vs-mpy-add ... #<load-data> (list (uint16_t t310)) #f #f #f 'uint32)
 (uint32_t (bv #x00000010 32))
 #t
 x?$954
 #f)
Ran bounds analysis for 30 ms
Ran bounds analysis for 29 ms
"Success?"
#t
(vs-shift-right ... (vs-mpy-add ... #<load-data> (list (uint16_t t310)) #f #f #f 'uint32) (uint32_t (bv #x00000010 32)) #t x?$954 #f)
"Building Expr:"
(vec-cast
 (vec-add
  (vec-bwand
   (sca-broadcast (uint32_t (bv #x00000001 32)) 64)
   (vec-div
    (vec-mul
     (vec-cast
      (load (buffer sum 'uint16) (ramp 0 1 64) (aligned 0 0))
      'uint32
      64)
     (vec-cast (sca-broadcast (uint16_t t310) 64) 'uint32 64))
    (sca-broadcast (uint32_t (bv #x00008000 32)) 64)))
  (vec-div
   (vec-mul
    (vec-cast
     (load (buffer sum 'uint16) (ramp 0 1 64) (aligned 0 0))
     'uint32
     64)
    (vec-cast (sca-broadcast (uint16_t t310) 64) 'uint32 64))
   (sca-broadcast (uint32_t (bv #x00010000 32)) 64)))
 'uint16
 64)
"Fold templates"
(list
 #<load-data>
 (vs-mpy-add
  ...
  #<load-data>
  (list (uint16_t t310))
  x?$1164
  x?$1165
  x?$1166
  'uint32)
 (vs-shift-right
  ...
  (vs-mpy-add ... #<load-data> (list (uint16_t t310)) #f #f #f 'uint32)
  (uint32_t (ite x?$1160 (bv #x00000010 32) (bv #x0000000f 32)))
  #t
  x?$954
  #f)
 (vs-shift-right
  ...
  (vs-mpy-add ... #<load-data> (list (uint16_t t310)) #f #f #f 'uint32)
  (uint32_t (bv #x00000010 32))
  x?$1161
  x?$1162
  x?$1163))
here(#<load-data> #(struct:vs-mpy-add ... #<load-data> (#(struct:uint16_t t310)) x?$1164 x?$1165 x?$1166 uint32) #(struct:vs-shift-right ... #(struct:vs-mpy-add ... #<load-data> (#(struct:uint16_t t310)) #f #f #f uint32) #(struct:uint32_t (ite x?$1160 (bv #x00000010 32) (bv #x0000000f 32))) #t x?$954 #f) #(struct:vs-shift-right ... #(struct:vs-mpy-add ... #<load-data> (#(struct:uint16_t t310)) #f #f #f uint32) #(struct:uint32_t (bv #x00000010 32)) x?$1161 x?$1162 x?$1163))

"Replace templates"
'()
run-x86-synthesizer
halide-expr:
  (vec-cast
 (vec-add
  (vec-bwand
   (sca-broadcast (uint32_t (bv #x00000001 32)) 64)
   (vec-div
    (vec-mul
     (vec-cast
      (load (buffer sum 'uint16) (ramp 0 1 64) (aligned 0 0))
      'uint32
      64)
     (vec-cast (sca-broadcast (uint16_t t310) 64) 'uint32 64))
    (sca-broadcast (uint32_t (bv #x00008000 32)) 64)))
  (vec-div
   (vec-mul
    (vec-cast
     (load (buffer sum 'uint16) (ramp 0 1 64) (aligned 0 0))
     'uint32
     64)
    (vec-cast (sca-broadcast (uint16_t t310) 64) 'uint32 64))
   (sca-broadcast (uint32_t (bv #x00010000 32)) 64)))
 'uint16
 64)
template:
  #<load-data>
axioms:
  '()
optimized-halide-expr:
  (vec-cast
 (vec-add
  (vec-bwand
   (sca-broadcast (uint32_t (bv #x00000001 32)) 64)
   (vec-div
    (vec-mul
     (vec-cast
      (load (buffer sum 'uint16) (ramp 0 1 64) (aligned 0 0))
      'uint32
      64)
     (vec-cast (sca-broadcast (uint16_t t310) 64) 'uint32 64))
    (sca-broadcast (uint32_t (bv #x00008000 32)) 64)))
  (vec-div
   (vec-mul
    (vec-cast
     (load (buffer sum 'uint16) (ramp 0 1 64) (aligned 0 0))
     'uint32
     64)
    (vec-cast (sca-broadcast (uint16_t t310) 64) 'uint32 64))
   (sca-broadcast (uint32_t (bv #x00010000 32)) 64)))
 'uint16
 64)
optimized-template:
  #<load-data>
optimized Halide 0:
  (uint16_t
 (extract 15 0 (bvadd (bvand (bv #x00000001 32) (bvudiv (bvmul (zero-extend (app sum 0) (bitvector 32)) (zero-extend t310 (bitvector 32))) (bv #x00008000 32))) (bvudiv (bvmul (zero-extend (app sum 0) (bitvector 32)) (zero-extend t310 (bitvector 32))) (bv #x00010000 32)))))
optimized x86 0:
  (uint16_t (app sum 0))
run-x86-synthesizer
halide-expr:
  (vec-cast
 (vec-add
  (vec-bwand
   (sca-broadcast (uint32_t (bv #x00000001 32)) 64)
   (vec-div
    (vec-mul
     (vec-cast
      (load (buffer sum 'uint16) (ramp 0 1 64) (aligned 0 0))
      'uint32
      64)
     (vec-cast (sca-broadcast (uint16_t t310) 64) 'uint32 64))
    (sca-broadcast (uint32_t (bv #x00008000 32)) 64)))
  (vec-div
   (vec-mul
    (vec-cast
     (load (buffer sum 'uint16) (ramp 0 1 64) (aligned 0 0))
     'uint32
     64)
    (vec-cast (sca-broadcast (uint16_t t310) 64) 'uint32 64))
   (sca-broadcast (uint32_t (bv #x00010000 32)) 64)))
 'uint16
 64)
template:
  (vs-mpy-add
 ...
 #<load-data>
 (list (uint16_t t310))
 x?$1164
 x?$1165
 x?$1166
 'uint32)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-cast
 (vec-add
  (vec-bwand
   (sca-broadcast (uint32_t (bv #x00000001 32)) 64)
   (vec-div
    (vec-mul
     (vec-cast #<abstr-halide-expr> 'uint32 64)
     (vec-cast (sca-broadcast (uint16_t t310) 64) 'uint32 64))
    (sca-broadcast (uint32_t (bv #x00008000 32)) 64)))
  (vec-div
   (vec-mul
    (vec-cast #<abstr-halide-expr> 'uint32 64)
    (vec-cast (sca-broadcast (uint16_t t310) 64) 'uint32 64))
   (sca-broadcast (uint32_t (bv #x00010000 32)) 64)))
 'uint16
 64)
optimized-template:
  (vs-mpy-add
 ...
 #<abstr-expr>
 (list (uint16_t t310))
 x?$1164
 x?$1165
 x?$1166
 'uint32)
optimized Halide 0:
  (uint16_t
 (extract 15 0 (bvadd (bvand (bv #x00000001 32) (bvudiv (bvmul (zero-extend t310 (bitvector 32)) (zero-extend (app abstr-vals$1232 0) (bitvector 32))) (bv #x00008000 32))) (bvudiv (bvmul (zero-extend t310 (bitvector 32)) (zero-extend (app abstr-vals$1232 0) (bitvector 32))) (bv #x00010000 32)))))
optimized x86 0:
  (uint32_t
 (ite* (⊢ (&& (! x?$1166) (! (&& x?$1164 x?$1166))) (ite x?$1164 (bvadd (ite x?$1165 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvule (bvmul (zero-extend t310 (bitvector 32)) (zero-extend (app abstr-vals$1232 0) (bitvector 32))) (bvadd (bv #xffffffff 32) (bvneg (ite x?$1165 (bv #x00000001 32) (bv #x00000000 32))))) (bvmul (zero-extend t310 (bitvector 32)) (zero-extend (app abstr-vals$1232 0) (bitvector 32))) (bvadd (bv #xffffffff 32) (bvneg (ite x?$1165 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (bvmul (zero-extend t310 (bitvector 32)) (zero-extend (app abstr-vals$1232 0) (bitvector 32))) (ite x?$1165 (bv #x00000001 32) (bv #x00000000 32))))) (⊢ (|| (&& x?$1164 x?$1166) (&& x?$1166 (! (&& x?$1164 x?$1166)))) (bvlshr (ite x?$1164 (bvadd (ite x?$1165 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvule (bvmul (zero-extend t310 (bitvector 32)) (zero-extend (app abstr-vals$1232 0) (bitvector 32))) (bvadd (bv #xffffffff 32) (bvneg (ite x?$1165 (bv #x00000001 32) (bv #x00000000 32))))) (bvmul (zero-extend t310 (bitvector 32)) (zero-extend (app abstr-vals$1232 0) (bitvector 32))) (bvadd (bv #xffffffff 32) (bvneg (ite x?$1165 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (bvmul (zero-extend t310 (bitvector 32)) (zero-extend (app abstr-vals$1232 0) (bitvector 32))) (ite x?$1165 (bv #x00000001 32) (bv #x00000000 32)))) (bv #x00000001 32)))))
Ran synthesizer for 2 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-cast
 (vec-add
  (vec-bwand
   (sca-broadcast (uint32_t (bv #x00000001 32)) 64)
   (vec-div
    (vec-mul
     (vec-cast
      (load (buffer sum 'uint16) (ramp 0 1 64) (aligned 0 0))
      'uint32
      64)
     (vec-cast (sca-broadcast (uint16_t t310) 64) 'uint32 64))
    (sca-broadcast (uint32_t (bv #x00008000 32)) 64)))
  (vec-div
   (vec-mul
    (vec-cast
     (load (buffer sum 'uint16) (ramp 0 1 64) (aligned 0 0))
     'uint32
     64)
    (vec-cast (sca-broadcast (uint16_t t310) 64) 'uint32 64))
   (sca-broadcast (uint32_t (bv #x00010000 32)) 64)))
 'uint16
 64)
template:
  (vs-shift-right
 ...
 (vs-mpy-add ... #<load-data> (list (uint16_t t310)) #f #f #f 'uint32)
 (uint32_t (ite x?$1160 (bv #x00000010 32) (bv #x0000000f 32)))
 #t
 x?$954
 #f)
axioms:
  (list (forall (idx) (bvule (app abstr-vals$1233 idx) (bv #xfffe0001 32))))
optimized-halide-expr:
  (vec-cast
 (vec-add
  (vec-bwand
   (sca-broadcast (uint32_t (bv #x00000001 32)) 64)
   (vec-div
    #<abstr-halide-expr>
    (sca-broadcast (uint32_t (bv #x00008000 32)) 64)))
  (vec-div
   #<abstr-halide-expr>
   (sca-broadcast (uint32_t (bv #x00010000 32)) 64)))
 'uint16
 64)
optimized-template:
  (vs-shift-right
 ...
 #<abstr-expr>
 (uint32_t (ite x?$1160 (bv #x00000010 32) (bv #x0000000f 32)))
 #t
 x?$954
 #f)
optimized Halide 0:
  (uint16_t
 (extract 15 0 (bvadd (bvand (bv #x00000001 32) (bvudiv (app abstr-vals$1233 0) (bv #x00008000 32))) (bvudiv (app abstr-vals$1233 0) (bv #x00010000 32)))))
optimized x86 0:
  (uint32_t
 (bvadd (bvlshr (app abstr-vals$1233 0) (ite x?$1160 (bv #x00000010 32) (bv #x0000000f 32))) (bvand (bv #x00000001 32) (bvlshr (app abstr-vals$1233 0) (ite x?$1160 (bv #x0000000f 32) (bv #x0000000e 32))))))
Ran synthesizer for 16 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-cast
 (vec-add
  (vec-bwand
   (sca-broadcast (uint32_t (bv #x00000001 32)) 64)
   (vec-div
    (vec-mul
     (vec-cast
      (load (buffer sum 'uint16) (ramp 0 1 64) (aligned 0 0))
      'uint32
      64)
     (vec-cast (sca-broadcast (uint16_t t310) 64) 'uint32 64))
    (sca-broadcast (uint32_t (bv #x00008000 32)) 64)))
  (vec-div
   (vec-mul
    (vec-cast
     (load (buffer sum 'uint16) (ramp 0 1 64) (aligned 0 0))
     'uint32
     64)
    (vec-cast (sca-broadcast (uint16_t t310) 64) 'uint32 64))
   (sca-broadcast (uint32_t (bv #x00010000 32)) 64)))
 'uint16
 64)
template:
  (vs-shift-right
 ...
 (vs-mpy-add ... #<load-data> (list (uint16_t t310)) #f #f #f 'uint32)
 (uint32_t (bv #x00000010 32))
 x?$1161
 x?$1162
 x?$1163)
axioms:
  (list (forall (idx) (bvule (app abstr-vals$1234 idx) (bv #xfffe0001 32))))
optimized-halide-expr:
  (vec-cast
 (vec-add
  (vec-bwand
   (sca-broadcast (uint32_t (bv #x00000001 32)) 64)
   (vec-div
    #<abstr-halide-expr>
    (sca-broadcast (uint32_t (bv #x00008000 32)) 64)))
  (vec-div
   #<abstr-halide-expr>
   (sca-broadcast (uint32_t (bv #x00010000 32)) 64)))
 'uint16
 64)
optimized-template:
  (vs-shift-right
 ...
 #<abstr-expr>
 (uint32_t (bv #x00000010 32))
 x?$1161
 x?$1162
 x?$1163)
optimized Halide 0:
  (uint16_t
 (extract 15 0 (bvadd (bvand (bv #x00000001 32) (bvudiv (app abstr-vals$1234 0) (bv #x00008000 32))) (bvudiv (app abstr-vals$1234 0) (bv #x00010000 32)))))
optimized x86 0:
  (uint32_t
 (ite x?$1161 (bvadd (ite x?$1163 (bvashr (app abstr-vals$1234 0) (bv #x00000010 32)) (bvlshr (app abstr-vals$1234 0) (bv #x00000010 32))) (bvand (bv #x00000001 32) (ite x?$1163 (bvashr (app abstr-vals$1234 0) (bv #x0000000f 32)) (bvlshr (app abstr-vals$1234 0) (bv #x0000000f 32))))) (ite x?$1163 (bvashr (app abstr-vals$1234 0) (bv #x00000010 32)) (bvlshr (app abstr-vals$1234 0) (bv #x00000010 32)))))
Ran synthesizer for 15 ms
(unsat)
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (vec-cast
 (vec-add
  (vec-bwand
   (sca-broadcast (uint32_t (bv #x00000001 32)) 64)
   (vec-div
    (vec-mul
     (vec-cast
      (load (buffer sum 'uint16) (ramp 0 1 64) (aligned 0 0))
      'uint32
      64)
     (vec-cast (sca-broadcast (uint16_t t310) 64) 'uint32 64))
    (sca-broadcast (uint32_t (bv #x00008000 32)) 64)))
  (vec-div
   (vec-mul
    (vec-cast
     (load (buffer sum 'uint16) (ramp 0 1 64) (aligned 0 0))
     'uint32
     64)
    (vec-cast (sca-broadcast (uint16_t t310) 64) 'uint32 64))
   (sca-broadcast (uint32_t (bv #x00010000 32)) 64)))
 'uint16
 64)
template:
  (cast
 ...
 (vs-shift-right
  ...
  (vs-mpy-add ... #<load-data> (list (uint16_t t310)) #f #f #f 'uint32)
  (uint32_t (bv #x00000010 32))
  #t
  x?$954
  #f)
 'uint16
 #f)
axioms:
  (list (forall (idx) (bvule (app abstr-vals$1235 idx) (bv #x0000fffe 32))))
optimized-halide-expr:
  (vec-cast #<abstr-halide-expr> 'uint16 64)
optimized-template:
  (cast ... #<abstr-expr> 'uint16 #f)
optimized Halide 0:
  (uint16_t (extract 15 0 (app abstr-vals$1235 0)))
optimized x86 0:
  (uint16_t (extract 15 0 (app abstr-vals$1235 0)))
Ran synthesizer for 31 ms
(model)
(vec-cast #<abstr-halide-expr> 'uint16 64)
(cast
 ...
 (vs-shift-right
  ...
  (vs-mpy-add ... #<load-data> (list (uint16_t t310)) #f #f #f 'uint32)
  (uint32_t (bv #x00000010 32))
  #t
  x?$954
  #f)
 'uint16
 #f)
Ran bounds analysis for 22 ms
Ran bounds analysis for 10 ms
"Extended success?"
#t
(cast
 ...
 (vs-shift-right
  ...
  (vs-mpy-add ... #<load-data> (list (uint16_t t310)) #f #f #f 'uint32)
  (uint32_t (bv #x00000010 32))
  #t
  x?$954
  #f)
 'uint16
 #f)
"Building Expr:"
(sca-broadcast (uint16_t (bv #x00ff 16)) 64)
"Fold templates"
'()
here()

"Replace templates"
'()
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (sca-broadcast (uint16_t (bv #x00ff 16)) 64)
template:
  (broadcast ... (uint16_t (bv #x00ff 16)))
axioms:
  '()
optimized-halide-expr:
  (sca-broadcast (uint16_t (bv #x00ff 16)) 64)
optimized-template:
  (broadcast ... (uint16_t (bv #x00ff 16)))
optimized Halide 0:
  (uint16_t (bv #x00ff 16))
optimized x86 0:
  (uint16_t (bv #x00ff 16))
Ran synthesizer for 15 ms
(model)
(sca-broadcast (uint16_t (bv #x00ff 16)) 64)
(broadcast ... (uint16_t (bv #x00ff 16)))
Ran bounds analysis for 20 ms
Ran bounds analysis for 12 ms
"Extended success?"
#t
(broadcast ... (uint16_t (bv #x00ff 16)))
"Building Expr:"
(vec-min
 (vec-cast
  (vec-add
   (vec-bwand
    (sca-broadcast (uint32_t (bv #x00000001 32)) 64)
    (vec-div
     (vec-mul
      (vec-cast
       (load (buffer sum 'uint16) (ramp 0 1 64) (aligned 0 0))
       'uint32
       64)
      (vec-cast (sca-broadcast (uint16_t t310) 64) 'uint32 64))
     (sca-broadcast (uint32_t (bv #x00008000 32)) 64)))
   (vec-div
    (vec-mul
     (vec-cast
      (load (buffer sum 'uint16) (ramp 0 1 64) (aligned 0 0))
      'uint32
      64)
     (vec-cast (sca-broadcast (uint16_t t310) 64) 'uint32 64))
    (sca-broadcast (uint32_t (bv #x00010000 32)) 64)))
  'uint16
  64)
 (sca-broadcast (uint16_t (bv #x00ff 16)) 64))
"Fold templates"
(list
 (vs-shift-right
  ...
  (vs-mpy-add ... #<load-data> (list (uint16_t t310)) #f #f #f 'uint32)
  (uint32_t (ite x?$1238 (bv #x00000010 32) (bv #x0000000f 32)))
  #t
  x?$954
  #f)
 (vs-shift-right
  ...
  (vs-mpy-add ... #<load-data> (list (uint16_t t310)) #f #f #f 'uint32)
  (uint32_t (bv #x00000010 32))
  x?$1239
  x?$1240
  x?$1241)
 (cast
  ...
  (vs-shift-right
   ...
   (vs-mpy-add ... #<load-data> (list (uint16_t t310)) #f #f #f 'uint32)
   (uint32_t (bv #x00000010 32))
   #t
   x?$954
   #f)
  'uint16
  x?$1237))
here(#(struct:vs-shift-right ... #(struct:vs-mpy-add ... #<load-data> (#(struct:uint16_t t310)) #f #f #f uint32) #(struct:uint32_t (ite x?$1238 (bv #x00000010 32) (bv #x0000000f 32))) #t x?$954 #f) #(struct:vs-shift-right ... #(struct:vs-mpy-add ... #<load-data> (#(struct:uint16_t t310)) #f #f #f uint32) #(struct:uint32_t (bv #x00000010 32)) x?$1239 x?$1240 x?$1241) #(struct:cast ... #(struct:vs-shift-right ... #(struct:vs-mpy-add ... #<load-data> (#(struct:uint16_t t310)) #f #f #f uint32) #(struct:uint32_t (bv #x00000010 32)) #t x?$954 #f) uint16 x?$1237))

"Replace templates"
'()
run-x86-synthesizer
halide-expr:
  (vec-min
 (vec-cast
  (vec-add
   (vec-bwand
    (sca-broadcast (uint32_t (bv #x00000001 32)) 64)
    (vec-div
     (vec-mul
      (vec-cast
       (load (buffer sum 'uint16) (ramp 0 1 64) (aligned 0 0))
       'uint32
       64)
      (vec-cast (sca-broadcast (uint16_t t310) 64) 'uint32 64))
     (sca-broadcast (uint32_t (bv #x00008000 32)) 64)))
   (vec-div
    (vec-mul
     (vec-cast
      (load (buffer sum 'uint16) (ramp 0 1 64) (aligned 0 0))
      'uint32
      64)
     (vec-cast (sca-broadcast (uint16_t t310) 64) 'uint32 64))
    (sca-broadcast (uint32_t (bv #x00010000 32)) 64)))
  'uint16
  64)
 (sca-broadcast (uint16_t (bv #x00ff 16)) 64))
template:
  (vs-shift-right
 ...
 (vs-mpy-add ... #<load-data> (list (uint16_t t310)) #f #f #f 'uint32)
 (uint32_t (ite x?$1238 (bv #x00000010 32) (bv #x0000000f 32)))
 #t
 x?$954
 #f)
axioms:
  (list (forall (idx) (bvule (app abstr-vals$1246 idx) (bv #xfffe0001 32))))
optimized-halide-expr:
  (vec-min
 (vec-cast
  (vec-add
   (vec-bwand
    (sca-broadcast (uint32_t (bv #x00000001 32)) 64)
    (vec-div
     #<abstr-halide-expr>
     (sca-broadcast (uint32_t (bv #x00008000 32)) 64)))
   (vec-div
    #<abstr-halide-expr>
    (sca-broadcast (uint32_t (bv #x00010000 32)) 64)))
  'uint16
  64)
 (sca-broadcast (uint16_t (bv #x00ff 16)) 64))
optimized-template:
  (vs-shift-right
 ...
 #<abstr-expr>
 (uint32_t (ite x?$1238 (bv #x00000010 32) (bv #x0000000f 32)))
 #t
 x?$954
 #f)
optimized Halide 0:
  (uint16_t
 (ite (bvule (extract 15 0 (bvadd (bvand (bv #x00000001 32) (bvudiv (app abstr-vals$1246 0) (bv #x00008000 32))) (bvudiv (app abstr-vals$1246 0) (bv #x00010000 32)))) (bv #x00ff 16)) (extract 15 0 (bvadd (bvand (bv #x00000001 32) (bvudiv (app abstr-vals$1246 0) (bv #x00008000 32))) (bvudiv (app abstr-vals$1246 0) (bv #x00010000 32)))) (bv #x00ff 16)))
optimized x86 0:
  (uint32_t
 (bvadd (bvlshr (app abstr-vals$1246 0) (ite x?$1238 (bv #x00000010 32) (bv #x0000000f 32))) (bvand (bv #x00000001 32) (bvlshr (app abstr-vals$1246 0) (ite x?$1238 (bv #x0000000f 32) (bv #x0000000e 32))))))
Ran synthesizer for 16 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-min
 (vec-cast
  (vec-add
   (vec-bwand
    (sca-broadcast (uint32_t (bv #x00000001 32)) 64)
    (vec-div
     (vec-mul
      (vec-cast
       (load (buffer sum 'uint16) (ramp 0 1 64) (aligned 0 0))
       'uint32
       64)
      (vec-cast (sca-broadcast (uint16_t t310) 64) 'uint32 64))
     (sca-broadcast (uint32_t (bv #x00008000 32)) 64)))
   (vec-div
    (vec-mul
     (vec-cast
      (load (buffer sum 'uint16) (ramp 0 1 64) (aligned 0 0))
      'uint32
      64)
     (vec-cast (sca-broadcast (uint16_t t310) 64) 'uint32 64))
    (sca-broadcast (uint32_t (bv #x00010000 32)) 64)))
  'uint16
  64)
 (sca-broadcast (uint16_t (bv #x00ff 16)) 64))
template:
  (vs-shift-right
 ...
 (vs-mpy-add ... #<load-data> (list (uint16_t t310)) #f #f #f 'uint32)
 (uint32_t (bv #x00000010 32))
 x?$1239
 x?$1240
 x?$1241)
axioms:
  (list (forall (idx) (bvule (app abstr-vals$1247 idx) (bv #xfffe0001 32))))
optimized-halide-expr:
  (vec-min
 (vec-cast
  (vec-add
   (vec-bwand
    (sca-broadcast (uint32_t (bv #x00000001 32)) 64)
    (vec-div
     #<abstr-halide-expr>
     (sca-broadcast (uint32_t (bv #x00008000 32)) 64)))
   (vec-div
    #<abstr-halide-expr>
    (sca-broadcast (uint32_t (bv #x00010000 32)) 64)))
  'uint16
  64)
 (sca-broadcast (uint16_t (bv #x00ff 16)) 64))
optimized-template:
  (vs-shift-right
 ...
 #<abstr-expr>
 (uint32_t (bv #x00000010 32))
 x?$1239
 x?$1240
 x?$1241)
optimized Halide 0:
  (uint16_t
 (ite (bvule (extract 15 0 (bvadd (bvand (bv #x00000001 32) (bvudiv (app abstr-vals$1247 0) (bv #x00008000 32))) (bvudiv (app abstr-vals$1247 0) (bv #x00010000 32)))) (bv #x00ff 16)) (extract 15 0 (bvadd (bvand (bv #x00000001 32) (bvudiv (app abstr-vals$1247 0) (bv #x00008000 32))) (bvudiv (app abstr-vals$1247 0) (bv #x00010000 32)))) (bv #x00ff 16)))
optimized x86 0:
  (uint32_t
 (ite x?$1239 (bvadd (ite x?$1241 (bvashr (app abstr-vals$1247 0) (bv #x00000010 32)) (bvlshr (app abstr-vals$1247 0) (bv #x00000010 32))) (bvand (bv #x00000001 32) (ite x?$1241 (bvashr (app abstr-vals$1247 0) (bv #x0000000f 32)) (bvlshr (app abstr-vals$1247 0) (bv #x0000000f 32))))) (ite x?$1241 (bvashr (app abstr-vals$1247 0) (bv #x00000010 32)) (bvlshr (app abstr-vals$1247 0) (bv #x00000010 32)))))
Ran synthesizer for 18 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-min
 (vec-cast
  (vec-add
   (vec-bwand
    (sca-broadcast (uint32_t (bv #x00000001 32)) 64)
    (vec-div
     (vec-mul
      (vec-cast
       (load (buffer sum 'uint16) (ramp 0 1 64) (aligned 0 0))
       'uint32
       64)
      (vec-cast (sca-broadcast (uint16_t t310) 64) 'uint32 64))
     (sca-broadcast (uint32_t (bv #x00008000 32)) 64)))
   (vec-div
    (vec-mul
     (vec-cast
      (load (buffer sum 'uint16) (ramp 0 1 64) (aligned 0 0))
      'uint32
      64)
     (vec-cast (sca-broadcast (uint16_t t310) 64) 'uint32 64))
    (sca-broadcast (uint32_t (bv #x00010000 32)) 64)))
  'uint16
  64)
 (sca-broadcast (uint16_t (bv #x00ff 16)) 64))
template:
  (cast
 ...
 (vs-shift-right
  ...
  (vs-mpy-add ... #<load-data> (list (uint16_t t310)) #f #f #f 'uint32)
  (uint32_t (bv #x00000010 32))
  #t
  x?$954
  #f)
 'uint16
 x?$1237)
axioms:
  (list (forall (idx) (bvule (app abstr-vals$1248 idx) (bv #x0000fffe 32))))
optimized-halide-expr:
  (vec-min
 (vec-cast #<abstr-halide-expr> 'uint16 64)
 (sca-broadcast (uint16_t (bv #x00ff 16)) 64))
optimized-template:
  (cast ... #<abstr-expr> 'uint16 x?$1237)
optimized Halide 0:
  (uint16_t
 (ite (bvule (extract 15 0 (app abstr-vals$1248 0)) (bv #x00ff 16)) (extract 15 0 (app abstr-vals$1248 0)) (bv #x00ff 16)))
optimized x86 0:
  (uint16_t
 (ite x?$1237 (ite (bvult (bv #x0000ffff 32) (app abstr-vals$1248 0)) (bv #xffff 16) (extract 15 0 (app abstr-vals$1248 0))) (extract 15 0 (app abstr-vals$1248 0))))
Ran synthesizer for 75 ms
(unsat)
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (vec-min
 (vec-cast
  (vec-add
   (vec-bwand
    (sca-broadcast (uint32_t (bv #x00000001 32)) 64)
    (vec-div
     (vec-mul
      (vec-cast
       (load (buffer sum 'uint16) (ramp 0 1 64) (aligned 0 0))
       'uint32
       64)
      (vec-cast (sca-broadcast (uint16_t t310) 64) 'uint32 64))
     (sca-broadcast (uint32_t (bv #x00008000 32)) 64)))
   (vec-div
    (vec-mul
     (vec-cast
      (load (buffer sum 'uint16) (ramp 0 1 64) (aligned 0 0))
      'uint32
      64)
     (vec-cast (sca-broadcast (uint16_t t310) 64) 'uint32 64))
    (sca-broadcast (uint32_t (bv #x00010000 32)) 64)))
  'uint16
  64)
 (sca-broadcast (uint16_t (bv #x00ff 16)) 64))
template:
  (minimum
 ...
 (cast
  ...
  (vs-shift-right
   ...
   (vs-mpy-add ... #<load-data> (list (uint16_t t310)) #f #f #f 'uint32)
   (uint32_t (bv #x00000010 32))
   #t
   x?$954
   #f)
  'uint16
  #f)
 (broadcast ... (uint16_t (bv #x00ff 16))))
axioms:
  (list
 (forall (idx) (bvule (app abstr-vals$1249 idx) (bv #xfffe 16)))
 (forall (idx) (&& (bvule (app abstr-vals$1250 idx) (bv #x00ff 16)) (bvule (bv #x00ff 16) (app abstr-vals$1250 idx)))))
optimized-halide-expr:
  (vec-min #<abstr-halide-expr> #<abstr-halide-expr>)
optimized-template:
  (minimum ... #<abstr-expr> #<abstr-expr>)
optimized Halide 0:
  (uint16_t
 (ite (bvule (app abstr-vals$1249 0) (app abstr-vals$1250 0)) (app abstr-vals$1249 0) (app abstr-vals$1250 0)))
optimized x86 0:
  (uint16_t
 (ite (bvule (app abstr-vals$1249 0) (app abstr-vals$1250 0)) (app abstr-vals$1249 0) (app abstr-vals$1250 0)))
Ran synthesizer for 42 ms
(model)
(vec-min #<abstr-halide-expr> #<abstr-halide-expr>)
(minimum
 ...
 (cast
  ...
  (vs-shift-right
   ...
   (vs-mpy-add ... #<load-data> (list (uint16_t t310)) #f #f #f 'uint32)
   (uint32_t (bv #x00000010 32))
   #t
   x?$954
   #f)
  'uint16
  #f)
 (broadcast ... (uint16_t (bv #x00ff 16))))
Ran bounds analysis for 24 ms
Ran bounds analysis for 19 ms
"Extended success?"
#t
(minimum
 ...
 (cast
  ...
  (vs-shift-right
   ...
   (vs-mpy-add ... #<load-data> (list (uint16_t t310)) #f #f #f 'uint32)
   (uint32_t (bv #x00000010 32))
   #t
   x?$954
   #f)
  'uint16
  #f)
 (broadcast ... (uint16_t (bv #x00ff 16))))
"Building Expr:"
(vec-cast
 (vec-min
  (vec-cast
   (vec-add
    (vec-bwand
     (sca-broadcast (uint32_t (bv #x00000001 32)) 64)
     (vec-div
      (vec-mul
       (vec-cast
        (load (buffer sum 'uint16) (ramp 0 1 64) (aligned 0 0))
        'uint32
        64)
       (vec-cast (sca-broadcast (uint16_t t310) 64) 'uint32 64))
      (sca-broadcast (uint32_t (bv #x00008000 32)) 64)))
    (vec-div
     (vec-mul
      (vec-cast
       (load (buffer sum 'uint16) (ramp 0 1 64) (aligned 0 0))
       'uint32
       64)
      (vec-cast (sca-broadcast (uint16_t t310) 64) 'uint32 64))
     (sca-broadcast (uint32_t (bv #x00010000 32)) 64)))
   'uint16
   64)
  (sca-broadcast (uint16_t (bv #x00ff 16)) 64))
 'uint8
 64)
"Fold templates"
(list
 (vs-shift-right
  ...
  (vs-mpy-add ... #<load-data> (list (uint16_t t310)) #f #f #f 'uint32)
  (uint32_t (ite x?$1254 (bv #x00000010 32) (bv #x0000000f 32)))
  #t
  x?$954
  #f)
 (vs-shift-right
  ...
  (vs-mpy-add ... #<load-data> (list (uint16_t t310)) #f #f #f 'uint32)
  (uint32_t (bv #x00000010 32))
  x?$1255
  x?$1256
  x?$1257)
 (cast
  ...
  (vs-shift-right
   ...
   (vs-mpy-add ... #<load-data> (list (uint16_t t310)) #f #f #f 'uint32)
   (uint32_t (bv #x00000010 32))
   #t
   x?$954
   #f)
  'uint8
  x?$1253))
here(#(struct:vs-shift-right ... #(struct:vs-mpy-add ... #<load-data> (#(struct:uint16_t t310)) #f #f #f uint32) #(struct:uint32_t (ite x?$1254 (bv #x00000010 32) (bv #x0000000f 32))) #t x?$954 #f) #(struct:vs-shift-right ... #(struct:vs-mpy-add ... #<load-data> (#(struct:uint16_t t310)) #f #f #f uint32) #(struct:uint32_t (bv #x00000010 32)) x?$1255 x?$1256 x?$1257) #(struct:cast ... #(struct:vs-shift-right ... #(struct:vs-mpy-add ... #<load-data> (#(struct:uint16_t t310)) #f #f #f uint32) #(struct:uint32_t (bv #x00000010 32)) #t x?$954 #f) uint8 x?$1253))

"Replace templates"
(list
 (cast
  ...
  (vs-shift-right
   ...
   (vs-mpy-add ... #<load-data> (list (uint16_t t310)) #f #f #f 'uint32)
   (uint32_t (bv #x00000010 32))
   #t
   x?$954
   #f)
  'uint8
  #f)
 (cast
  ...
  (cast
   ...
   (vs-shift-right
    ...
    (vs-mpy-add ... #<load-data> (list (uint16_t t310)) #f #f #f 'uint32)
    (uint32_t (bv #x00000010 32))
    #t
    x?$954
    #f)
   'uint16
   #f)
  'uint8
  #t)
 (cast ... (broadcast ... (uint16_t (bv #x00ff 16))) 'uint8 #t))
run-x86-synthesizer
halide-expr:
  (vec-cast
 (vec-min
  (vec-cast
   (vec-add
    (vec-bwand
     (sca-broadcast (uint32_t (bv #x00000001 32)) 64)
     (vec-div
      (vec-mul
       (vec-cast
        (load (buffer sum 'uint16) (ramp 0 1 64) (aligned 0 0))
        'uint32
        64)
       (vec-cast (sca-broadcast (uint16_t t310) 64) 'uint32 64))
      (sca-broadcast (uint32_t (bv #x00008000 32)) 64)))
    (vec-div
     (vec-mul
      (vec-cast
       (load (buffer sum 'uint16) (ramp 0 1 64) (aligned 0 0))
       'uint32
       64)
      (vec-cast (sca-broadcast (uint16_t t310) 64) 'uint32 64))
     (sca-broadcast (uint32_t (bv #x00010000 32)) 64)))
   'uint16
   64)
  (sca-broadcast (uint16_t (bv #x00ff 16)) 64))
 'uint8
 64)
template:
  (vs-shift-right
 ...
 (vs-mpy-add ... #<load-data> (list (uint16_t t310)) #f #f #f 'uint32)
 (uint32_t (ite x?$1254 (bv #x00000010 32) (bv #x0000000f 32)))
 #t
 x?$954
 #f)
axioms:
  (list (forall (idx) (bvule (app abstr-vals$1258 idx) (bv #xfffe0001 32))))
optimized-halide-expr:
  (vec-cast
 (vec-min
  (vec-cast
   (vec-add
    (vec-bwand
     (sca-broadcast (uint32_t (bv #x00000001 32)) 64)
     (vec-div
      #<abstr-halide-expr>
      (sca-broadcast (uint32_t (bv #x00008000 32)) 64)))
    (vec-div
     #<abstr-halide-expr>
     (sca-broadcast (uint32_t (bv #x00010000 32)) 64)))
   'uint16
   64)
  (sca-broadcast (uint16_t (bv #x00ff 16)) 64))
 'uint8
 64)
optimized-template:
  (vs-shift-right
 ...
 #<abstr-expr>
 (uint32_t (ite x?$1254 (bv #x00000010 32) (bv #x0000000f 32)))
 #t
 x?$954
 #f)
optimized Halide 0:
  (uint8_t
 (extract 7 0 (ite (bvule (extract 15 0 (bvadd (bvand (bv #x00000001 32) (bvudiv (app abstr-vals$1258 0) (bv #x00008000 32))) (bvudiv (app abstr-vals$1258 0) (bv #x00010000 32)))) (bv #x00ff 16)) (extract 15 0 (bvadd (bvand (bv #x00000001 32) (bvudiv (app abstr-vals$1258 0) (bv #x00008000 32))) (bvudiv (app abstr-vals$1258 0) (bv #x00010000 32)))) (bv #x00ff 16))))
optimized x86 0:
  (uint32_t
 (bvadd (bvlshr (app abstr-vals$1258 0) (ite x?$1254 (bv #x00000010 32) (bv #x0000000f 32))) (bvand (bv #x00000001 32) (bvlshr (app abstr-vals$1258 0) (ite x?$1254 (bv #x0000000f 32) (bv #x0000000e 32))))))
Ran synthesizer for 18 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-cast
 (vec-min
  (vec-cast
   (vec-add
    (vec-bwand
     (sca-broadcast (uint32_t (bv #x00000001 32)) 64)
     (vec-div
      (vec-mul
       (vec-cast
        (load (buffer sum 'uint16) (ramp 0 1 64) (aligned 0 0))
        'uint32
        64)
       (vec-cast (sca-broadcast (uint16_t t310) 64) 'uint32 64))
      (sca-broadcast (uint32_t (bv #x00008000 32)) 64)))
    (vec-div
     (vec-mul
      (vec-cast
       (load (buffer sum 'uint16) (ramp 0 1 64) (aligned 0 0))
       'uint32
       64)
      (vec-cast (sca-broadcast (uint16_t t310) 64) 'uint32 64))
     (sca-broadcast (uint32_t (bv #x00010000 32)) 64)))
   'uint16
   64)
  (sca-broadcast (uint16_t (bv #x00ff 16)) 64))
 'uint8
 64)
template:
  (vs-shift-right
 ...
 (vs-mpy-add ... #<load-data> (list (uint16_t t310)) #f #f #f 'uint32)
 (uint32_t (bv #x00000010 32))
 x?$1255
 x?$1256
 x?$1257)
axioms:
  (list (forall (idx) (bvule (app abstr-vals$1259 idx) (bv #xfffe0001 32))))
optimized-halide-expr:
  (vec-cast
 (vec-min
  (vec-cast
   (vec-add
    (vec-bwand
     (sca-broadcast (uint32_t (bv #x00000001 32)) 64)
     (vec-div
      #<abstr-halide-expr>
      (sca-broadcast (uint32_t (bv #x00008000 32)) 64)))
    (vec-div
     #<abstr-halide-expr>
     (sca-broadcast (uint32_t (bv #x00010000 32)) 64)))
   'uint16
   64)
  (sca-broadcast (uint16_t (bv #x00ff 16)) 64))
 'uint8
 64)
optimized-template:
  (vs-shift-right
 ...
 #<abstr-expr>
 (uint32_t (bv #x00000010 32))
 x?$1255
 x?$1256
 x?$1257)
optimized Halide 0:
  (uint8_t
 (extract 7 0 (ite (bvule (extract 15 0 (bvadd (bvand (bv #x00000001 32) (bvudiv (app abstr-vals$1259 0) (bv #x00008000 32))) (bvudiv (app abstr-vals$1259 0) (bv #x00010000 32)))) (bv #x00ff 16)) (extract 15 0 (bvadd (bvand (bv #x00000001 32) (bvudiv (app abstr-vals$1259 0) (bv #x00008000 32))) (bvudiv (app abstr-vals$1259 0) (bv #x00010000 32)))) (bv #x00ff 16))))
optimized x86 0:
  (uint32_t
 (ite x?$1255 (bvadd (ite x?$1257 (bvashr (app abstr-vals$1259 0) (bv #x00000010 32)) (bvlshr (app abstr-vals$1259 0) (bv #x00000010 32))) (bvand (bv #x00000001 32) (ite x?$1257 (bvashr (app abstr-vals$1259 0) (bv #x0000000f 32)) (bvlshr (app abstr-vals$1259 0) (bv #x0000000f 32))))) (ite x?$1257 (bvashr (app abstr-vals$1259 0) (bv #x00000010 32)) (bvlshr (app abstr-vals$1259 0) (bv #x00000010 32)))))
Ran synthesizer for 19 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-cast
 (vec-min
  (vec-cast
   (vec-add
    (vec-bwand
     (sca-broadcast (uint32_t (bv #x00000001 32)) 64)
     (vec-div
      (vec-mul
       (vec-cast
        (load (buffer sum 'uint16) (ramp 0 1 64) (aligned 0 0))
        'uint32
        64)
       (vec-cast (sca-broadcast (uint16_t t310) 64) 'uint32 64))
      (sca-broadcast (uint32_t (bv #x00008000 32)) 64)))
    (vec-div
     (vec-mul
      (vec-cast
       (load (buffer sum 'uint16) (ramp 0 1 64) (aligned 0 0))
       'uint32
       64)
      (vec-cast (sca-broadcast (uint16_t t310) 64) 'uint32 64))
     (sca-broadcast (uint32_t (bv #x00010000 32)) 64)))
   'uint16
   64)
  (sca-broadcast (uint16_t (bv #x00ff 16)) 64))
 'uint8
 64)
template:
  (cast ... (broadcast ... (uint16_t (bv #x00ff 16))) 'uint8 #t)
axioms:
  (list
 (forall (idx) (&& (bvule (app abstr-vals$1260 idx) (bv #x00ff 16)) (bvule (bv #x00ff 16) (app abstr-vals$1260 idx)))))
optimized-halide-expr:
  (vec-cast
 (vec-min
  (vec-cast
   (vec-add
    (vec-bwand
     (sca-broadcast (uint32_t (bv #x00000001 32)) 64)
     (vec-div
      (vec-mul
       (vec-cast
        (load (buffer sum 'uint16) (ramp 0 1 64) (aligned 0 0))
        'uint32
        64)
       (vec-cast (sca-broadcast (uint16_t t310) 64) 'uint32 64))
      (sca-broadcast (uint32_t (bv #x00008000 32)) 64)))
    (vec-div
     (vec-mul
      (vec-cast
       (load (buffer sum 'uint16) (ramp 0 1 64) (aligned 0 0))
       'uint32
       64)
      (vec-cast (sca-broadcast (uint16_t t310) 64) 'uint32 64))
     (sca-broadcast (uint32_t (bv #x00010000 32)) 64)))
   'uint16
   64)
  #<abstr-halide-expr>)
 'uint8
 64)
optimized-template:
  (cast ... #<abstr-expr> 'uint8 #t)
optimized Halide 0:
  (uint8_t
 (extract 7 0 (ite (bvule (extract 15 0 (bvadd (bvand (bv #x00000001 32) (bvudiv (bvmul (zero-extend (app sum 0) (bitvector 32)) (zero-extend t310 (bitvector 32))) (bv #x00008000 32))) (bvudiv (bvmul (zero-extend (app sum 0) (bitvector 32)) (zero-extend t310 (bitvector 32))) (bv #x00010000 32)))) (app abstr-vals$1260 0)) (extract 15 0 (bvadd (bvand (bv #x00000001 32) (bvudiv (bvmul (zero-extend (app sum 0) (bitvector 32)) (zero-extend t310 (bitvector 32))) (bv #x00008000 32))) (bvudiv (bvmul (zero-extend (app sum 0) (bitvector 32)) (zero-extend t310 (bitvector 32))) (bv #x00010000 32)))) (app abstr-vals$1260 0))))
optimized x86 0:
  (uint8_t
 (ite (bvult (bv #x00ff 16) (app abstr-vals$1260 0)) (bv #xff 8) (extract 7 0 (app abstr-vals$1260 0))))
run-x86-synthesizer
halide-expr:
  (vec-cast
 (vec-min
  (vec-cast
   (vec-add
    (vec-bwand
     (sca-broadcast (uint32_t (bv #x00000001 32)) 64)
     (vec-div
      (vec-mul
       (vec-cast
        (load (buffer sum 'uint16) (ramp 0 1 64) (aligned 0 0))
        'uint32
        64)
       (vec-cast (sca-broadcast (uint16_t t310) 64) 'uint32 64))
      (sca-broadcast (uint32_t (bv #x00008000 32)) 64)))
    (vec-div
     (vec-mul
      (vec-cast
       (load (buffer sum 'uint16) (ramp 0 1 64) (aligned 0 0))
       'uint32
       64)
      (vec-cast (sca-broadcast (uint16_t t310) 64) 'uint32 64))
     (sca-broadcast (uint32_t (bv #x00010000 32)) 64)))
   'uint16
   64)
  (sca-broadcast (uint16_t (bv #x00ff 16)) 64))
 'uint8
 64)
template:
  (cast
 ...
 (vs-shift-right
  ...
  (vs-mpy-add ... #<load-data> (list (uint16_t t310)) #f #f #f 'uint32)
  (uint32_t (bv #x00000010 32))
  #t
  x?$954
  #f)
 'uint8
 x?$1253)
axioms:
  (list (forall (idx) (bvule (app abstr-vals$1261 idx) (bv #x0000fffe 32))))
optimized-halide-expr:
  (vec-cast
 (vec-min
  (vec-cast #<abstr-halide-expr> 'uint16 64)
  (sca-broadcast (uint16_t (bv #x00ff 16)) 64))
 'uint8
 64)
optimized-template:
  (cast ... #<abstr-expr> 'uint8 x?$1253)
optimized Halide 0:
  (uint8_t
 (extract 7 0 (ite (bvule (extract 15 0 (app abstr-vals$1261 0)) (bv #x00ff 16)) (extract 15 0 (app abstr-vals$1261 0)) (bv #x00ff 16))))
optimized x86 0:
  (uint8_t
 (ite x?$1253 (ite (bvult (bv #x000000ff 32) (app abstr-vals$1261 0)) (bv #xff 8) (extract 7 0 (app abstr-vals$1261 0))) (extract 7 0 (app abstr-vals$1261 0))))
Ran synthesizer for 71 ms
(model
 [x?$1253 #t])
(vec-cast
 (vec-min
  (vec-cast #<abstr-halide-expr> 'uint16 64)
  (sca-broadcast (uint16_t (bv #x00ff 16)) 64))
 'uint8
 64)
(cast
 ...
 (vs-shift-right
  ...
  (vs-mpy-add ... #<load-data> (list (uint16_t t310)) #f #f #f 'uint32)
  (uint32_t (bv #x00000010 32))
  #t
  x?$954
  #f)
 'uint8
 #t)
Ran bounds analysis for 20 ms
Ran bounds analysis for 14 ms
"Success?"
#t
(cast ... (vs-shift-right ... (vs-mpy-add ... #<load-data> (list (uint16_t t310)) #f #f #f 'uint32) (uint32_t (bv #x00000010 32)) #t x?$954 #f) 'uint8 #t)
"Building Expr:"
(sca-broadcast (uint8_t output_max) 64)
"Fold templates"
'()
here()

"Replace templates"
'()
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (sca-broadcast (uint8_t output_max) 64)
template:
  (broadcast ... (uint8_t output_max))
axioms:
  '()
optimized-halide-expr:
  (sca-broadcast (uint8_t output_max) 64)
optimized-template:
  (broadcast ... (uint8_t output_max))
optimized Halide 0:
  (uint8_t output_max)
optimized x86 0:
  (uint8_t output_max)
Ran synthesizer for 17 ms
(model)
(sca-broadcast (uint8_t output_max) 64)
(broadcast ... (uint8_t output_max))
Ran bounds analysis for 22 ms
Ran bounds analysis for 13 ms
"Extended success?"
#t
(broadcast ... (uint8_t output_max))
"Building Expr:"
(vec-min
 (vec-cast
  (vec-min
   (vec-cast
    (vec-add
     (vec-bwand
      (sca-broadcast (uint32_t (bv #x00000001 32)) 64)
      (vec-div
       (vec-mul
        (vec-cast
         (load (buffer sum 'uint16) (ramp 0 1 64) (aligned 0 0))
         'uint32
         64)
        (vec-cast (sca-broadcast (uint16_t t310) 64) 'uint32 64))
       (sca-broadcast (uint32_t (bv #x00008000 32)) 64)))
     (vec-div
      (vec-mul
       (vec-cast
        (load (buffer sum 'uint16) (ramp 0 1 64) (aligned 0 0))
        'uint32
        64)
       (vec-cast (sca-broadcast (uint16_t t310) 64) 'uint32 64))
      (sca-broadcast (uint32_t (bv #x00010000 32)) 64)))
    'uint16
    64)
   (sca-broadcast (uint16_t (bv #x00ff 16)) 64))
  'uint8
  64)
 (sca-broadcast (uint8_t output_max) 64))
"Fold templates"
(list
 (vs-shift-right
  ...
  (vs-mpy-add ... #<load-data> (list (uint16_t t310)) #f #f #f 'uint32)
  (uint32_t (ite x?$1264 (bv #x00000010 32) (bv #x0000000f 32)))
  #t
  x?$954
  #f)
 (vs-shift-right
  ...
  (vs-mpy-add ... #<load-data> (list (uint16_t t310)) #f #f #f 'uint32)
  (uint32_t (bv #x00000010 32))
  x?$1265
  x?$1266
  x?$1267)
 (cast
  ...
  (vs-shift-right
   ...
   (vs-mpy-add ... #<load-data> (list (uint16_t t310)) #f #f #f 'uint32)
   (uint32_t (bv #x00000010 32))
   #t
   x?$954
   #f)
  'uint8
  x?$1263))
here(#(struct:vs-shift-right ... #(struct:vs-mpy-add ... #<load-data> (#(struct:uint16_t t310)) #f #f #f uint32) #(struct:uint32_t (ite x?$1264 (bv #x00000010 32) (bv #x0000000f 32))) #t x?$954 #f) #(struct:vs-shift-right ... #(struct:vs-mpy-add ... #<load-data> (#(struct:uint16_t t310)) #f #f #f uint32) #(struct:uint32_t (bv #x00000010 32)) x?$1265 x?$1266 x?$1267) #(struct:cast ... #(struct:vs-shift-right ... #(struct:vs-mpy-add ... #<load-data> (#(struct:uint16_t t310)) #f #f #f uint32) #(struct:uint32_t (bv #x00000010 32)) #t x?$954 #f) uint8 x?$1263))

"Replace templates"
'()
run-x86-synthesizer
halide-expr:
  (vec-min
 (vec-cast
  (vec-min
   (vec-cast
    (vec-add
     (vec-bwand
      (sca-broadcast (uint32_t (bv #x00000001 32)) 64)
      (vec-div
       (vec-mul
        (vec-cast
         (load (buffer sum 'uint16) (ramp 0 1 64) (aligned 0 0))
         'uint32
         64)
        (vec-cast (sca-broadcast (uint16_t t310) 64) 'uint32 64))
       (sca-broadcast (uint32_t (bv #x00008000 32)) 64)))
     (vec-div
      (vec-mul
       (vec-cast
        (load (buffer sum 'uint16) (ramp 0 1 64) (aligned 0 0))
        'uint32
        64)
       (vec-cast (sca-broadcast (uint16_t t310) 64) 'uint32 64))
      (sca-broadcast (uint32_t (bv #x00010000 32)) 64)))
    'uint16
    64)
   (sca-broadcast (uint16_t (bv #x00ff 16)) 64))
  'uint8
  64)
 (sca-broadcast (uint8_t output_max) 64))
template:
  (vs-shift-right
 ...
 (vs-mpy-add ... #<load-data> (list (uint16_t t310)) #f #f #f 'uint32)
 (uint32_t (ite x?$1264 (bv #x00000010 32) (bv #x0000000f 32)))
 #t
 x?$954
 #f)
axioms:
  (list (forall (idx) (bvule (app abstr-vals$1272 idx) (bv #xfffe0001 32))))
optimized-halide-expr:
  (vec-min
 (vec-cast
  (vec-min
   (vec-cast
    (vec-add
     (vec-bwand
      (sca-broadcast (uint32_t (bv #x00000001 32)) 64)
      (vec-div
       #<abstr-halide-expr>
       (sca-broadcast (uint32_t (bv #x00008000 32)) 64)))
     (vec-div
      #<abstr-halide-expr>
      (sca-broadcast (uint32_t (bv #x00010000 32)) 64)))
    'uint16
    64)
   (sca-broadcast (uint16_t (bv #x00ff 16)) 64))
  'uint8
  64)
 (sca-broadcast (uint8_t output_max) 64))
optimized-template:
  (vs-shift-right
 ...
 #<abstr-expr>
 (uint32_t (ite x?$1264 (bv #x00000010 32) (bv #x0000000f 32)))
 #t
 x?$954
 #f)
optimized Halide 0:
  (uint8_t
 (ite (bvule (extract 7 0 (ite (bvule (extract 15 0 (bvadd (bvand (bv #x00000001 32) (bvudiv (app abstr-vals$1272 0) (bv #x00008000 32))) (bvudiv (app abstr-vals$1272 0) (bv #x00010000 32)))) (bv #x00ff 16)) (extract 15 0 (bvadd (bvand (bv #x00000001 32) (bvudiv (app abstr-vals$1272 0) (bv #x00008000 32))) (bvudiv (app abstr-vals$1272 0) (bv #x00010000 32)))) (bv #x00ff 16))) output_max) (extract 7 0 (ite (bvule (extract 15 0 (bvadd (bvand (bv #x00000001 32) (bvudiv (app abstr-vals$1272 0) (bv #x00008000 32))) (bvudiv (app abstr-vals$1272 0) (bv #x00010000 32)))) (bv #x00ff 16)) (extract 15 0 (bvadd (bvand (bv #x00000001 32) (bvudiv (app abstr-vals$1272 0) (bv #x00008000 32))) (bvudiv (app abstr-vals$1272 0) (bv #x00010000 32)))) (bv #x00ff 16))) output_max))
optimized x86 0:
  (uint32_t
 (bvadd (bvlshr (app abstr-vals$1272 0) (ite x?$1264 (bv #x00000010 32) (bv #x0000000f 32))) (bvand (bv #x00000001 32) (bvlshr (app abstr-vals$1272 0) (ite x?$1264 (bv #x0000000f 32) (bv #x0000000e 32))))))
run-x86-synthesizer
halide-expr:
  (vec-min
 (vec-cast
  (vec-min
   (vec-cast
    (vec-add
     (vec-bwand
      (sca-broadcast (uint32_t (bv #x00000001 32)) 64)
      (vec-div
       (vec-mul
        (vec-cast
         (load (buffer sum 'uint16) (ramp 0 1 64) (aligned 0 0))
         'uint32
         64)
        (vec-cast (sca-broadcast (uint16_t t310) 64) 'uint32 64))
       (sca-broadcast (uint32_t (bv #x00008000 32)) 64)))
     (vec-div
      (vec-mul
       (vec-cast
        (load (buffer sum 'uint16) (ramp 0 1 64) (aligned 0 0))
        'uint32
        64)
       (vec-cast (sca-broadcast (uint16_t t310) 64) 'uint32 64))
      (sca-broadcast (uint32_t (bv #x00010000 32)) 64)))
    'uint16
    64)
   (sca-broadcast (uint16_t (bv #x00ff 16)) 64))
  'uint8
  64)
 (sca-broadcast (uint8_t output_max) 64))
template:
  (vs-shift-right
 ...
 (vs-mpy-add ... #<load-data> (list (uint16_t t310)) #f #f #f 'uint32)
 (uint32_t (bv #x00000010 32))
 x?$1265
 x?$1266
 x?$1267)
axioms:
  (list (forall (idx) (bvule (app abstr-vals$1273 idx) (bv #xfffe0001 32))))
optimized-halide-expr:
  (vec-min
 (vec-cast
  (vec-min
   (vec-cast
    (vec-add
     (vec-bwand
      (sca-broadcast (uint32_t (bv #x00000001 32)) 64)
      (vec-div
       #<abstr-halide-expr>
       (sca-broadcast (uint32_t (bv #x00008000 32)) 64)))
     (vec-div
      #<abstr-halide-expr>
      (sca-broadcast (uint32_t (bv #x00010000 32)) 64)))
    'uint16
    64)
   (sca-broadcast (uint16_t (bv #x00ff 16)) 64))
  'uint8
  64)
 (sca-broadcast (uint8_t output_max) 64))
optimized-template:
  (vs-shift-right
 ...
 #<abstr-expr>
 (uint32_t (bv #x00000010 32))
 x?$1265
 x?$1266
 x?$1267)
optimized Halide 0:
  (uint8_t
 (ite (bvule (extract 7 0 (ite (bvule (extract 15 0 (bvadd (bvand (bv #x00000001 32) (bvudiv (app abstr-vals$1273 0) (bv #x00008000 32))) (bvudiv (app abstr-vals$1273 0) (bv #x00010000 32)))) (bv #x00ff 16)) (extract 15 0 (bvadd (bvand (bv #x00000001 32) (bvudiv (app abstr-vals$1273 0) (bv #x00008000 32))) (bvudiv (app abstr-vals$1273 0) (bv #x00010000 32)))) (bv #x00ff 16))) output_max) (extract 7 0 (ite (bvule (extract 15 0 (bvadd (bvand (bv #x00000001 32) (bvudiv (app abstr-vals$1273 0) (bv #x00008000 32))) (bvudiv (app abstr-vals$1273 0) (bv #x00010000 32)))) (bv #x00ff 16)) (extract 15 0 (bvadd (bvand (bv #x00000001 32) (bvudiv (app abstr-vals$1273 0) (bv #x00008000 32))) (bvudiv (app abstr-vals$1273 0) (bv #x00010000 32)))) (bv #x00ff 16))) output_max))
optimized x86 0:
  (uint32_t
 (ite x?$1265 (bvadd (ite x?$1267 (bvashr (app abstr-vals$1273 0) (bv #x00000010 32)) (bvlshr (app abstr-vals$1273 0) (bv #x00000010 32))) (bvand (bv #x00000001 32) (ite x?$1267 (bvashr (app abstr-vals$1273 0) (bv #x0000000f 32)) (bvlshr (app abstr-vals$1273 0) (bv #x0000000f 32))))) (ite x?$1267 (bvashr (app abstr-vals$1273 0) (bv #x00000010 32)) (bvlshr (app abstr-vals$1273 0) (bv #x00000010 32)))))
run-x86-synthesizer
halide-expr:
  (vec-min
 (vec-cast
  (vec-min
   (vec-cast
    (vec-add
     (vec-bwand
      (sca-broadcast (uint32_t (bv #x00000001 32)) 64)
      (vec-div
       (vec-mul
        (vec-cast
         (load (buffer sum 'uint16) (ramp 0 1 64) (aligned 0 0))
         'uint32
         64)
        (vec-cast (sca-broadcast (uint16_t t310) 64) 'uint32 64))
       (sca-broadcast (uint32_t (bv #x00008000 32)) 64)))
     (vec-div
      (vec-mul
       (vec-cast
        (load (buffer sum 'uint16) (ramp 0 1 64) (aligned 0 0))
        'uint32
        64)
       (vec-cast (sca-broadcast (uint16_t t310) 64) 'uint32 64))
      (sca-broadcast (uint32_t (bv #x00010000 32)) 64)))
    'uint16
    64)
   (sca-broadcast (uint16_t (bv #x00ff 16)) 64))
  'uint8
  64)
 (sca-broadcast (uint8_t output_max) 64))
template:
  (cast
 ...
 (vs-shift-right
  ...
  (vs-mpy-add ... #<load-data> (list (uint16_t t310)) #f #f #f 'uint32)
  (uint32_t (bv #x00000010 32))
  #t
  x?$954
  #f)
 'uint8
 x?$1263)
axioms:
  (list (forall (idx) (bvule (app abstr-vals$1274 idx) (bv #x0000fffe 32))))
optimized-halide-expr:
  (vec-min
 (vec-cast
  (vec-min
   (vec-cast #<abstr-halide-expr> 'uint16 64)
   (sca-broadcast (uint16_t (bv #x00ff 16)) 64))
  'uint8
  64)
 (sca-broadcast (uint8_t output_max) 64))
optimized-template:
  (cast ... #<abstr-expr> 'uint8 x?$1263)
optimized Halide 0:
  (uint8_t
 (ite (bvule (extract 7 0 (ite (bvule (extract 15 0 (app abstr-vals$1274 0)) (bv #x00ff 16)) (extract 15 0 (app abstr-vals$1274 0)) (bv #x00ff 16))) output_max) (extract 7 0 (ite (bvule (extract 15 0 (app abstr-vals$1274 0)) (bv #x00ff 16)) (extract 15 0 (app abstr-vals$1274 0)) (bv #x00ff 16))) output_max))
optimized x86 0:
  (uint8_t
 (ite x?$1263 (ite (bvult (bv #x000000ff 32) (app abstr-vals$1274 0)) (bv #xff 8) (extract 7 0 (app abstr-vals$1274 0))) (extract 7 0 (app abstr-vals$1274 0))))
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (vec-min
 (vec-cast
  (vec-min
   (vec-cast
    (vec-add
     (vec-bwand
      (sca-broadcast (uint32_t (bv #x00000001 32)) 64)
      (vec-div
       (vec-mul
        (vec-cast
         (load (buffer sum 'uint16) (ramp 0 1 64) (aligned 0 0))
         'uint32
         64)
        (vec-cast (sca-broadcast (uint16_t t310) 64) 'uint32 64))
       (sca-broadcast (uint32_t (bv #x00008000 32)) 64)))
     (vec-div
      (vec-mul
       (vec-cast
        (load (buffer sum 'uint16) (ramp 0 1 64) (aligned 0 0))
        'uint32
        64)
       (vec-cast (sca-broadcast (uint16_t t310) 64) 'uint32 64))
      (sca-broadcast (uint32_t (bv #x00010000 32)) 64)))
    'uint16
    64)
   (sca-broadcast (uint16_t (bv #x00ff 16)) 64))
  'uint8
  64)
 (sca-broadcast (uint8_t output_max) 64))
template:
  (minimum
 ...
 (cast
  ...
  (vs-shift-right
   ...
   (vs-mpy-add ... #<load-data> (list (uint16_t t310)) #f #f #f 'uint32)
   (uint32_t (bv #x00000010 32))
   #t
   x?$954
   #f)
  'uint8
  #t)
 (broadcast ... (uint8_t output_max)))
axioms:
  '(#t #t)
optimized-halide-expr:
  (vec-min #<abstr-halide-expr> #<abstr-halide-expr>)
optimized-template:
  (minimum ... #<abstr-expr> #<abstr-expr>)
optimized Halide 0:
  (uint8_t
 (ite (bvule (app abstr-vals$1275 0) (app abstr-vals$1276 0)) (app abstr-vals$1275 0) (app abstr-vals$1276 0)))
optimized x86 0:
  (uint8_t
 (ite (bvule (app abstr-vals$1275 0) (app abstr-vals$1276 0)) (app abstr-vals$1275 0) (app abstr-vals$1276 0)))
Ran synthesizer for 18 ms
(model)
(vec-min #<abstr-halide-expr> #<abstr-halide-expr>)
(minimum
 ...
 (cast
  ...
  (vs-shift-right
   ...
   (vs-mpy-add ... #<load-data> (list (uint16_t t310)) #f #f #f 'uint32)
   (uint32_t (bv #x00000010 32))
   #t
   x?$954
   #f)
  'uint8
  #t)
 (broadcast ... (uint8_t output_max)))
Ran bounds analysis for 24 ms
Ran bounds analysis for 11 ms
"Extended success?"
#t
(minimum
 ...
 (cast
  ...
  (vs-shift-right
   ...
   (vs-mpy-add ... #<load-data> (list (uint16_t t310)) #f #f #f 'uint32)
   (uint32_t (bv #x00000010 32))
   #t
   x?$954
   #f)
  'uint8
  #t)
 (broadcast ... (uint8_t output_max)))
"Building Expr:"
(sca-broadcast (uint8_t output_min) 64)
"Fold templates"
'()
here()

"Replace templates"
'()
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (sca-broadcast (uint8_t output_min) 64)
template:
  (broadcast ... (uint8_t output_min))
axioms:
  '()
optimized-halide-expr:
  (sca-broadcast (uint8_t output_min) 64)
optimized-template:
  (broadcast ... (uint8_t output_min))
optimized Halide 0:
  (uint8_t output_min)
optimized x86 0:
  (uint8_t output_min)
Ran synthesizer for 18 ms
(model)
(sca-broadcast (uint8_t output_min) 64)
(broadcast ... (uint8_t output_min))
Ran bounds analysis for 21 ms
Ran bounds analysis for 12 ms
"Extended success?"
#t
(broadcast ... (uint8_t output_min))
"Building Expr:"
(vec-max
 (vec-min
  (vec-cast
   (vec-min
    (vec-cast
     (vec-add
      (vec-bwand
       (sca-broadcast (uint32_t (bv #x00000001 32)) 64)
       (vec-div
        (vec-mul
         (vec-cast
          (load (buffer sum 'uint16) (ramp 0 1 64) (aligned 0 0))
          'uint32
          64)
         (vec-cast (sca-broadcast (uint16_t t310) 64) 'uint32 64))
        (sca-broadcast (uint32_t (bv #x00008000 32)) 64)))
      (vec-div
       (vec-mul
        (vec-cast
         (load (buffer sum 'uint16) (ramp 0 1 64) (aligned 0 0))
         'uint32
         64)
        (vec-cast (sca-broadcast (uint16_t t310) 64) 'uint32 64))
       (sca-broadcast (uint32_t (bv #x00010000 32)) 64)))
     'uint16
     64)
    (sca-broadcast (uint16_t (bv #x00ff 16)) 64))
   'uint8
   64)
  (sca-broadcast (uint8_t output_max) 64))
 (sca-broadcast (uint8_t output_min) 64))
"Fold templates"
(list
 (vs-shift-right
  ...
  (vs-mpy-add ... #<load-data> (list (uint16_t t310)) #f #f #f 'uint32)
  (uint32_t (ite x?$1280 (bv #x00000010 32) (bv #x0000000f 32)))
  #t
  x?$954
  #f)
 (vs-shift-right
  ...
  (vs-mpy-add ... #<load-data> (list (uint16_t t310)) #f #f #f 'uint32)
  (uint32_t (bv #x00000010 32))
  x?$1281
  x?$1282
  x?$1283)
 (cast
  ...
  (vs-shift-right
   ...
   (vs-mpy-add ... #<load-data> (list (uint16_t t310)) #f #f #f 'uint32)
   (uint32_t (bv #x00000010 32))
   #t
   x?$954
   #f)
  'uint8
  x?$1279))
here(#(struct:vs-shift-right ... #(struct:vs-mpy-add ... #<load-data> (#(struct:uint16_t t310)) #f #f #f uint32) #(struct:uint32_t (ite x?$1280 (bv #x00000010 32) (bv #x0000000f 32))) #t x?$954 #f) #(struct:vs-shift-right ... #(struct:vs-mpy-add ... #<load-data> (#(struct:uint16_t t310)) #f #f #f uint32) #(struct:uint32_t (bv #x00000010 32)) x?$1281 x?$1282 x?$1283) #(struct:cast ... #(struct:vs-shift-right ... #(struct:vs-mpy-add ... #<load-data> (#(struct:uint16_t t310)) #f #f #f uint32) #(struct:uint32_t (bv #x00000010 32)) #t x?$954 #f) uint8 x?$1279))

"Replace templates"
(list
 (cast
  ...
  (cast
   ...
   (vs-shift-right
    ...
    (vs-mpy-add ... #<load-data> (list (uint16_t t310)) #f #f #f 'uint32)
    (uint32_t (bv #x00000010 32))
    #t
    x?$954
    #f)
   'uint8
   #t)
  'uint8
  #t)
 (cast ... (broadcast ... (uint8_t output_max)) 'uint8 #t))
run-x86-synthesizer
halide-expr:
  (vec-max
 (vec-min
  (vec-cast
   (vec-min
    (vec-cast
     (vec-add
      (vec-bwand
       (sca-broadcast (uint32_t (bv #x00000001 32)) 64)
       (vec-div
        (vec-mul
         (vec-cast
          (load (buffer sum 'uint16) (ramp 0 1 64) (aligned 0 0))
          'uint32
          64)
         (vec-cast (sca-broadcast (uint16_t t310) 64) 'uint32 64))
        (sca-broadcast (uint32_t (bv #x00008000 32)) 64)))
      (vec-div
       (vec-mul
        (vec-cast
         (load (buffer sum 'uint16) (ramp 0 1 64) (aligned 0 0))
         'uint32
         64)
        (vec-cast (sca-broadcast (uint16_t t310) 64) 'uint32 64))
       (sca-broadcast (uint32_t (bv #x00010000 32)) 64)))
     'uint16
     64)
    (sca-broadcast (uint16_t (bv #x00ff 16)) 64))
   'uint8
   64)
  (sca-broadcast (uint8_t output_max) 64))
 (sca-broadcast (uint8_t output_min) 64))
template:
  (vs-shift-right
 ...
 (vs-mpy-add ... #<load-data> (list (uint16_t t310)) #f #f #f 'uint32)
 (uint32_t (ite x?$1280 (bv #x00000010 32) (bv #x0000000f 32)))
 #t
 x?$954
 #f)
axioms:
  (list (forall (idx) (bvule (app abstr-vals$1284 idx) (bv #xfffe0001 32))))
optimized-halide-expr:
  (vec-max
 (vec-min
  (vec-cast
   (vec-min
    (vec-cast
     (vec-add
      (vec-bwand
       (sca-broadcast (uint32_t (bv #x00000001 32)) 64)
       (vec-div
        #<abstr-halide-expr>
        (sca-broadcast (uint32_t (bv #x00008000 32)) 64)))
      (vec-div
       #<abstr-halide-expr>
       (sca-broadcast (uint32_t (bv #x00010000 32)) 64)))
     'uint16
     64)
    (sca-broadcast (uint16_t (bv #x00ff 16)) 64))
   'uint8
   64)
  (sca-broadcast (uint8_t output_max) 64))
 (sca-broadcast (uint8_t output_min) 64))
optimized-template:
  (vs-shift-right
 ...
 #<abstr-expr>
 (uint32_t (ite x?$1280 (bv #x00000010 32) (bv #x0000000f 32)))
 #t
 x?$954
 #f)
optimized Halide 0:
  (uint8_t
 (ite (bvule output_min (ite (bvule (extract 7 0 (ite (bvule (extract 15 0 (bvadd (bvand (bv #x00000001 32) (bvudiv (app abstr-vals$1284 0) (bv #x00008000 32))) (bvudiv (app abstr-vals$1284 0) (bv #x00010000 32)))) (bv #x00ff 16)) (extract 15 0 (bvadd (bvand (bv #x00000001 32) (bvudiv (app abstr-vals$1284 0) (bv #x00008000 32))) (bvudiv (app abstr-vals$1284 0) (bv #x00010000 32)))) (bv #x00ff 16))) output_max) (extract 7 0 (ite (bvule (extract 15 0 (bvadd (bvand (bv #x00000001 32) (bvudiv (app abstr-vals$1284 0) (bv #x00008000 32))) (bvudiv (app abstr-vals$1284 0) (bv #x00010000 32)))) (bv #x00ff 16)) (extract 15 0 (bvadd (bvand (bv #x00000001 32) (bvudiv (app abstr-vals$1284 0) (bv #x00008000 32))) (bvudiv (app abstr-vals$1284 0) (bv #x00010000 32)))) (bv #x00ff 16))) output_max)) (ite (bvule (extract 7 0 (ite (bvule (extract 15 0 (bvadd (bvand (bv #x00000001 32) (bvudiv (app abstr-vals$1284 0) (bv #x00008000 32))) (bvudiv (app abstr-vals$1284 0) (bv #x00010000 32)))) (bv #x00ff 16)) (extract 15 0 (bvadd (bvand (bv #x00000001 32) (bvudiv (app abstr-vals$1284 0) (bv #x00008000 32))) (bvudiv (app abstr-vals$1284 0) (bv #x00010000 32)))) (bv #x00ff 16))) output_max) (extract 7 0 (ite (bvule (extract 15 0 (bvadd (bvand (bv #x00000001 32) (bvudiv (app abstr-vals$1284 0) (bv #x00008000 32))) (bvudiv (app abstr-vals$1284 0) (bv #x00010000 32)))) (bv #x00ff 16)) (extract 15 0 (bvadd (bvand (bv #x00000001 32) (bvudiv (app abstr-vals$1284 0) (bv #x00008000 32))) (bvudiv (app abstr-vals$1284 0) (bv #x00010000 32)))) (bv #x00ff 16))) output_max) output_min))
optimized x86 0:
  (uint32_t
 (bvadd (bvlshr (app abstr-vals$1284 0) (ite x?$1280 (bv #x00000010 32) (bv #x0000000f 32))) (bvand (bv #x00000001 32) (bvlshr (app abstr-vals$1284 0) (ite x?$1280 (bv #x0000000f 32) (bv #x0000000e 32))))))
run-x86-synthesizer
halide-expr:
  (vec-max
 (vec-min
  (vec-cast
   (vec-min
    (vec-cast
     (vec-add
      (vec-bwand
       (sca-broadcast (uint32_t (bv #x00000001 32)) 64)
       (vec-div
        (vec-mul
         (vec-cast
          (load (buffer sum 'uint16) (ramp 0 1 64) (aligned 0 0))
          'uint32
          64)
         (vec-cast (sca-broadcast (uint16_t t310) 64) 'uint32 64))
        (sca-broadcast (uint32_t (bv #x00008000 32)) 64)))
      (vec-div
       (vec-mul
        (vec-cast
         (load (buffer sum 'uint16) (ramp 0 1 64) (aligned 0 0))
         'uint32
         64)
        (vec-cast (sca-broadcast (uint16_t t310) 64) 'uint32 64))
       (sca-broadcast (uint32_t (bv #x00010000 32)) 64)))
     'uint16
     64)
    (sca-broadcast (uint16_t (bv #x00ff 16)) 64))
   'uint8
   64)
  (sca-broadcast (uint8_t output_max) 64))
 (sca-broadcast (uint8_t output_min) 64))
template:
  (vs-shift-right
 ...
 (vs-mpy-add ... #<load-data> (list (uint16_t t310)) #f #f #f 'uint32)
 (uint32_t (bv #x00000010 32))
 x?$1281
 x?$1282
 x?$1283)
axioms:
  (list (forall (idx) (bvule (app abstr-vals$1285 idx) (bv #xfffe0001 32))))
optimized-halide-expr:
  (vec-max
 (vec-min
  (vec-cast
   (vec-min
    (vec-cast
     (vec-add
      (vec-bwand
       (sca-broadcast (uint32_t (bv #x00000001 32)) 64)
       (vec-div
        #<abstr-halide-expr>
        (sca-broadcast (uint32_t (bv #x00008000 32)) 64)))
      (vec-div
       #<abstr-halide-expr>
       (sca-broadcast (uint32_t (bv #x00010000 32)) 64)))
     'uint16
     64)
    (sca-broadcast (uint16_t (bv #x00ff 16)) 64))
   'uint8
   64)
  (sca-broadcast (uint8_t output_max) 64))
 (sca-broadcast (uint8_t output_min) 64))
optimized-template:
  (vs-shift-right
 ...
 #<abstr-expr>
 (uint32_t (bv #x00000010 32))
 x?$1281
 x?$1282
 x?$1283)
optimized Halide 0:
  (uint8_t
 (ite (bvule output_min (ite (bvule (extract 7 0 (ite (bvule (extract 15 0 (bvadd (bvand (bv #x00000001 32) (bvudiv (app abstr-vals$1285 0) (bv #x00008000 32))) (bvudiv (app abstr-vals$1285 0) (bv #x00010000 32)))) (bv #x00ff 16)) (extract 15 0 (bvadd (bvand (bv #x00000001 32) (bvudiv (app abstr-vals$1285 0) (bv #x00008000 32))) (bvudiv (app abstr-vals$1285 0) (bv #x00010000 32)))) (bv #x00ff 16))) output_max) (extract 7 0 (ite (bvule (extract 15 0 (bvadd (bvand (bv #x00000001 32) (bvudiv (app abstr-vals$1285 0) (bv #x00008000 32))) (bvudiv (app abstr-vals$1285 0) (bv #x00010000 32)))) (bv #x00ff 16)) (extract 15 0 (bvadd (bvand (bv #x00000001 32) (bvudiv (app abstr-vals$1285 0) (bv #x00008000 32))) (bvudiv (app abstr-vals$1285 0) (bv #x00010000 32)))) (bv #x00ff 16))) output_max)) (ite (bvule (extract 7 0 (ite (bvule (extract 15 0 (bvadd (bvand (bv #x00000001 32) (bvudiv (app abstr-vals$1285 0) (bv #x00008000 32))) (bvudiv (app abstr-vals$1285 0) (bv #x00010000 32)))) (bv #x00ff 16)) (extract 15 0 (bvadd (bvand (bv #x00000001 32) (bvudiv (app abstr-vals$1285 0) (bv #x00008000 32))) (bvudiv (app abstr-vals$1285 0) (bv #x00010000 32)))) (bv #x00ff 16))) output_max) (extract 7 0 (ite (bvule (extract 15 0 (bvadd (bvand (bv #x00000001 32) (bvudiv (app abstr-vals$1285 0) (bv #x00008000 32))) (bvudiv (app abstr-vals$1285 0) (bv #x00010000 32)))) (bv #x00ff 16)) (extract 15 0 (bvadd (bvand (bv #x00000001 32) (bvudiv (app abstr-vals$1285 0) (bv #x00008000 32))) (bvudiv (app abstr-vals$1285 0) (bv #x00010000 32)))) (bv #x00ff 16))) output_max) output_min))
optimized x86 0:
  (uint32_t
 (ite x?$1281 (bvadd (ite x?$1283 (bvashr (app abstr-vals$1285 0) (bv #x00000010 32)) (bvlshr (app abstr-vals$1285 0) (bv #x00000010 32))) (bvand (bv #x00000001 32) (ite x?$1283 (bvashr (app abstr-vals$1285 0) (bv #x0000000f 32)) (bvlshr (app abstr-vals$1285 0) (bv #x0000000f 32))))) (ite x?$1283 (bvashr (app abstr-vals$1285 0) (bv #x00000010 32)) (bvlshr (app abstr-vals$1285 0) (bv #x00000010 32)))))
run-x86-synthesizer
halide-expr:
  (vec-max
 (vec-min
  (vec-cast
   (vec-min
    (vec-cast
     (vec-add
      (vec-bwand
       (sca-broadcast (uint32_t (bv #x00000001 32)) 64)
       (vec-div
        (vec-mul
         (vec-cast
          (load (buffer sum 'uint16) (ramp 0 1 64) (aligned 0 0))
          'uint32
          64)
         (vec-cast (sca-broadcast (uint16_t t310) 64) 'uint32 64))
        (sca-broadcast (uint32_t (bv #x00008000 32)) 64)))
      (vec-div
       (vec-mul
        (vec-cast
         (load (buffer sum 'uint16) (ramp 0 1 64) (aligned 0 0))
         'uint32
         64)
        (vec-cast (sca-broadcast (uint16_t t310) 64) 'uint32 64))
       (sca-broadcast (uint32_t (bv #x00010000 32)) 64)))
     'uint16
     64)
    (sca-broadcast (uint16_t (bv #x00ff 16)) 64))
   'uint8
   64)
  (sca-broadcast (uint8_t output_max) 64))
 (sca-broadcast (uint8_t output_min) 64))
template:
  (cast ... (broadcast ... (uint8_t output_max)) 'uint8 #t)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-max
 (vec-min
  (vec-cast
   (vec-min
    (vec-cast
     (vec-add
      (vec-bwand
       (sca-broadcast (uint32_t (bv #x00000001 32)) 64)
       (vec-div
        (vec-mul
         (vec-cast
          (load (buffer sum 'uint16) (ramp 0 1 64) (aligned 0 0))
          'uint32
          64)
         (vec-cast (sca-broadcast (uint16_t t310) 64) 'uint32 64))
        (sca-broadcast (uint32_t (bv #x00008000 32)) 64)))
      (vec-div
       (vec-mul
        (vec-cast
         (load (buffer sum 'uint16) (ramp 0 1 64) (aligned 0 0))
         'uint32
         64)
        (vec-cast (sca-broadcast (uint16_t t310) 64) 'uint32 64))
       (sca-broadcast (uint32_t (bv #x00010000 32)) 64)))
     'uint16
     64)
    (sca-broadcast (uint16_t (bv #x00ff 16)) 64))
   'uint8
   64)
  #<abstr-halide-expr>)
 (sca-broadcast (uint8_t output_min) 64))
optimized-template:
  (cast ... #<abstr-expr> 'uint8 #t)
optimized Halide 0:
  (uint8_t
 (ite (bvule output_min (ite (bvule (extract 7 0 (ite (bvule (extract 15 0 (bvadd (bvand (bv #x00000001 32) (bvudiv (bvmul (zero-extend (app sum 0) (bitvector 32)) (zero-extend t310 (bitvector 32))) (bv #x00008000 32))) (bvudiv (bvmul (zero-extend (app sum 0) (bitvector 32)) (zero-extend t310 (bitvector 32))) (bv #x00010000 32)))) (bv #x00ff 16)) (extract 15 0 (bvadd (bvand (bv #x00000001 32) (bvudiv (bvmul (zero-extend (app sum 0) (bitvector 32)) (zero-extend t310 (bitvector 32))) (bv #x00008000 32))) (bvudiv (bvmul (zero-extend (app sum 0) (bitvector 32)) (zero-extend t310 (bitvector 32))) (bv #x00010000 32)))) (bv #x00ff 16))) (app abstr-vals$1286 0)) (extract 7 0 (ite (bvule (extract 15 0 (bvadd (bvand (bv #x00000001 32) (bvudiv (bvmul (zero-extend (app sum 0) (bitvector 32)) (zero-extend t310 (bitvector 32))) (bv #x00008000 32))) (bvudiv (bvmul (zero-extend (app sum 0) (bitvector 32)) (zero-extend t310 (bitvector 32))) (bv #x00010000 32)))) (bv #x00ff 16)) (extract 15 0 (bvadd (bvand (bv #x00000001 32) (bvudiv (bvmul (zero-extend (app sum 0) (bitvector 32)) (zero-extend t310 (bitvector 32))) (bv #x00008000 32))) (bvudiv (bvmul (zero-extend (app sum 0) (bitvector 32)) (zero-extend t310 (bitvector 32))) (bv #x00010000 32)))) (bv #x00ff 16))) (app abstr-vals$1286 0))) (ite (bvule (extract 7 0 (ite (bvule (extract 15 0 (bvadd (bvand (bv #x00000001 32) (bvudiv (bvmul (zero-extend (app sum 0) (bitvector 32)) (zero-extend t310 (bitvector 32))) (bv #x00008000 32))) (bvudiv (bvmul (zero-extend (app sum 0) (bitvector 32)) (zero-extend t310 (bitvector 32))) (bv #x00010000 32)))) (bv #x00ff 16)) (extract 15 0 (bvadd (bvand (bv #x00000001 32) (bvudiv (bvmul (zero-extend (app sum 0) (bitvector 32)) (zero-extend t310 (bitvector 32))) (bv #x00008000 32))) (bvudiv (bvmul (zero-extend (app sum 0) (bitvector 32)) (zero-extend t310 (bitvector 32))) (bv #x00010000 32)))) (bv #x00ff 16))) (app abstr-vals$1286 0)) (extract 7 0 (ite (bvule (extract 15 0 (bvadd (bvand (bv #x00000001 32) (bvudiv (bvmul (zero-extend (app sum 0) (bitvector 32)) (zero-extend t310 (bitvector 32))) (bv #x00008000 32))) (bvudiv (bvmul (zero-extend (app sum 0) (bitvector 32)) (zero-extend t310 (bitvector 32))) (bv #x00010000 32)))) (bv #x00ff 16)) (extract 15 0 (bvadd (bvand (bv #x00000001 32) (bvudiv (bvmul (zero-extend (app sum 0) (bitvector 32)) (zero-extend t310 (bitvector 32))) (bv #x00008000 32))) (bvudiv (bvmul (zero-extend (app sum 0) (bitvector 32)) (zero-extend t310 (bitvector 32))) (bv #x00010000 32)))) (bv #x00ff 16))) (app abstr-vals$1286 0)) output_min))
optimized x86 0:
  (uint8_t (app abstr-vals$1286 0))
run-x86-synthesizer
halide-expr:
  (vec-max
 (vec-min
  (vec-cast
   (vec-min
    (vec-cast
     (vec-add
      (vec-bwand
       (sca-broadcast (uint32_t (bv #x00000001 32)) 64)
       (vec-div
        (vec-mul
         (vec-cast
          (load (buffer sum 'uint16) (ramp 0 1 64) (aligned 0 0))
          'uint32
          64)
         (vec-cast (sca-broadcast (uint16_t t310) 64) 'uint32 64))
        (sca-broadcast (uint32_t (bv #x00008000 32)) 64)))
      (vec-div
       (vec-mul
        (vec-cast
         (load (buffer sum 'uint16) (ramp 0 1 64) (aligned 0 0))
         'uint32
         64)
        (vec-cast (sca-broadcast (uint16_t t310) 64) 'uint32 64))
       (sca-broadcast (uint32_t (bv #x00010000 32)) 64)))
     'uint16
     64)
    (sca-broadcast (uint16_t (bv #x00ff 16)) 64))
   'uint8
   64)
  (sca-broadcast (uint8_t output_max) 64))
 (sca-broadcast (uint8_t output_min) 64))
template:
  (cast
 ...
 (vs-shift-right
  ...
  (vs-mpy-add ... #<load-data> (list (uint16_t t310)) #f #f #f 'uint32)
  (uint32_t (bv #x00000010 32))
  #t
  x?$954
  #f)
 'uint8
 x?$1279)
axioms:
  (list (forall (idx) (bvule (app abstr-vals$1287 idx) (bv #x0000fffe 32))))
optimized-halide-expr:
  (vec-max
 (vec-min
  (vec-cast
   (vec-min
    (vec-cast #<abstr-halide-expr> 'uint16 64)
    (sca-broadcast (uint16_t (bv #x00ff 16)) 64))
   'uint8
   64)
  (sca-broadcast (uint8_t output_max) 64))
 (sca-broadcast (uint8_t output_min) 64))
optimized-template:
  (cast ... #<abstr-expr> 'uint8 x?$1279)
optimized Halide 0:
  (uint8_t
 (ite (bvule output_min (ite (bvule (extract 7 0 (ite (bvule (extract 15 0 (app abstr-vals$1287 0)) (bv #x00ff 16)) (extract 15 0 (app abstr-vals$1287 0)) (bv #x00ff 16))) output_max) (extract 7 0 (ite (bvule (extract 15 0 (app abstr-vals$1287 0)) (bv #x00ff 16)) (extract 15 0 (app abstr-vals$1287 0)) (bv #x00ff 16))) output_max)) (ite (bvule (extract 7 0 (ite (bvule (extract 15 0 (app abstr-vals$1287 0)) (bv #x00ff 16)) (extract 15 0 (app abstr-vals$1287 0)) (bv #x00ff 16))) output_max) (extract 7 0 (ite (bvule (extract 15 0 (app abstr-vals$1287 0)) (bv #x00ff 16)) (extract 15 0 (app abstr-vals$1287 0)) (bv #x00ff 16))) output_max) output_min))
optimized x86 0:
  (uint8_t
 (ite x?$1279 (ite (bvult (bv #x000000ff 32) (app abstr-vals$1287 0)) (bv #xff 8) (extract 7 0 (app abstr-vals$1287 0))) (extract 7 0 (app abstr-vals$1287 0))))
run-x86-synthesizer
halide-expr:
  (vec-max
 (vec-min
  (vec-cast
   (vec-min
    (vec-cast
     (vec-add
      (vec-bwand
       (sca-broadcast (uint32_t (bv #x00000001 32)) 64)
       (vec-div
        (vec-mul
         (vec-cast
          (load (buffer sum 'uint16) (ramp 0 1 64) (aligned 0 0))
          'uint32
          64)
         (vec-cast (sca-broadcast (uint16_t t310) 64) 'uint32 64))
        (sca-broadcast (uint32_t (bv #x00008000 32)) 64)))
      (vec-div
       (vec-mul
        (vec-cast
         (load (buffer sum 'uint16) (ramp 0 1 64) (aligned 0 0))
         'uint32
         64)
        (vec-cast (sca-broadcast (uint16_t t310) 64) 'uint32 64))
       (sca-broadcast (uint32_t (bv #x00010000 32)) 64)))
     'uint16
     64)
    (sca-broadcast (uint16_t (bv #x00ff 16)) 64))
   'uint8
   64)
  (sca-broadcast (uint8_t output_max) 64))
 (sca-broadcast (uint8_t output_min) 64))
template:
  (cast
 ...
 (cast
  ...
  (vs-shift-right
   ...
   (vs-mpy-add ... #<load-data> (list (uint16_t t310)) #f #f #f 'uint32)
   (uint32_t (bv #x00000010 32))
   #t
   x?$954
   #f)
  'uint8
  #t)
 'uint8
 #t)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-max
 (vec-min #<abstr-halide-expr> (sca-broadcast (uint8_t output_max) 64))
 (sca-broadcast (uint8_t output_min) 64))
optimized-template:
  (cast ... #<abstr-expr> 'uint8 #t)
optimized Halide 0:
  (uint8_t
 (ite (bvule output_min (ite (bvule (app abstr-vals$1288 0) output_max) (app abstr-vals$1288 0) output_max)) (ite (bvule (app abstr-vals$1288 0) output_max) (app abstr-vals$1288 0) output_max) output_min))
optimized x86 0:
  (uint8_t (app abstr-vals$1288 0))
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (vec-max
 (vec-min
  (vec-cast
   (vec-min
    (vec-cast
     (vec-add
      (vec-bwand
       (sca-broadcast (uint32_t (bv #x00000001 32)) 64)
       (vec-div
        (vec-mul
         (vec-cast
          (load (buffer sum 'uint16) (ramp 0 1 64) (aligned 0 0))
          'uint32
          64)
         (vec-cast (sca-broadcast (uint16_t t310) 64) 'uint32 64))
        (sca-broadcast (uint32_t (bv #x00008000 32)) 64)))
      (vec-div
       (vec-mul
        (vec-cast
         (load (buffer sum 'uint16) (ramp 0 1 64) (aligned 0 0))
         'uint32
         64)
        (vec-cast (sca-broadcast (uint16_t t310) 64) 'uint32 64))
       (sca-broadcast (uint32_t (bv #x00010000 32)) 64)))
     'uint16
     64)
    (sca-broadcast (uint16_t (bv #x00ff 16)) 64))
   'uint8
   64)
  (sca-broadcast (uint8_t output_max) 64))
 (sca-broadcast (uint8_t output_min) 64))
template:
  (maximum
 ...
 (minimum
  ...
  (cast
   ...
   (vs-shift-right
    ...
    (vs-mpy-add ... #<load-data> (list (uint16_t t310)) #f #f #f 'uint32)
    (uint32_t (bv #x00000010 32))
    #t
    x?$954
    #f)
   'uint8
   #t)
  (broadcast ... (uint8_t output_max)))
 (broadcast ... (uint8_t output_min)))
axioms:
  '(#t #t)
optimized-halide-expr:
  (vec-max #<abstr-halide-expr> #<abstr-halide-expr>)
optimized-template:
  (maximum ... #<abstr-expr> #<abstr-expr>)
optimized Halide 0:
  (uint8_t
 (ite (bvule (app abstr-vals$1290 0) (app abstr-vals$1289 0)) (app abstr-vals$1289 0) (app abstr-vals$1290 0)))
optimized x86 0:
  (uint8_t
 (ite (bvule (app abstr-vals$1290 0) (app abstr-vals$1289 0)) (app abstr-vals$1289 0) (app abstr-vals$1290 0)))
Ran synthesizer for 17 ms
(model)
(vec-max #<abstr-halide-expr> #<abstr-halide-expr>)
(maximum
 ...
 (minimum
  ...
  (cast
   ...
   (vs-shift-right
    ...
    (vs-mpy-add ... #<load-data> (list (uint16_t t310)) #f #f #f 'uint32)
    (uint32_t (bv #x00000010 32))
    #t
    x?$954
    #f)
   'uint8
   #t)
  (broadcast ... (uint8_t output_max)))
 (broadcast ... (uint8_t output_min)))
Ran bounds analysis for 22 ms
Ran bounds analysis for 12 ms
"Extended success?"
#t
(maximum
 ...
 (minimum
  ...
  (cast
   ...
   (vs-shift-right
    ...
    (vs-mpy-add ... #<load-data> (list (uint16_t t310)) #f #f #f 'uint32)
    (uint32_t (bv #x00000010 32))
    #t
    x?$954
    #f)
   'uint8
   #t)
  (broadcast ... (uint8_t output_max)))
 (broadcast ... (uint8_t output_min)))

(x86) Successfully found an equivalent IR expression.

(maximum
 ...
 (minimum
  ...
  (cast
   ...
   (vs-shift-right
    ...
    (vs-mpy-add ... #<load-data> (list (uint16_t t310)) #f #f #f 'uint32)
    (uint32_t (bv #x00000010 32))
    #t
    x?$954
    #f)
   'uint8
   #t)
  (broadcast ... (uint8_t output_max)))
 (broadcast ... (uint8_t output_min)))

Synthesis time: 3 seconds

Synthesizing x86 for:
(vec-max
 (vec-min
  (vec-cast
   (vec-min
    (vec-cast
     (vec-add
      (vec-bwand
       (sca-broadcast (uint32_t (bv #x00000001 32)) 64)
       (vec-div
        (vec-mul
         (vec-cast
          (load (buffer sum 'uint16) (ramp 0 1 64) (aligned 0 0))
          'uint32
          64)
         (vec-cast (sca-broadcast (uint16_t t310) 64) 'uint32 64))
        (sca-broadcast (uint32_t (bv #x00008000 32)) 64)))
      (vec-div
       (vec-mul
        (vec-cast
         (load (buffer sum 'uint16) (ramp 0 1 64) (aligned 0 0))
         'uint32
         64)
        (vec-cast (sca-broadcast (uint16_t t310) 64) 'uint32 64))
       (sca-broadcast (uint32_t (bv #x00010000 32)) 64)))
     'uint16
     64)
    (sca-broadcast (uint16_t (bv #x00ff 16)) 64))
   'uint8
   64)
  (sca-broadcast (uint8_t output_max) 64))
 (sca-broadcast (uint8_t output_min) 64))


synthesize-x86 output:
#<void>
#f
