Lifting input expression to x86 IR...
=====================================

"Building Expr:"
(load (buffer sum 'uint16) (ramp 0 1 32) (aligned 0 0))
"Fold templates"
'()
here()

"Replace templates"
'()
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (load (buffer sum 'uint16) (ramp 0 1 32) (aligned 0 0))
template:
  #<load-data>
axioms:
  '()
optimized-halide-expr:
  (load (buffer sum 'uint16) (ramp 0 1 32) (aligned 0 0))
optimized-template:
  #<load-data>
optimized Halide 0:
  (uint16_t (app sum 0))
optimized x86 0:
  (uint16_t (app sum 0))
Ran synthesizer for 24 ms
(model
 [idx$0 0])
(load (buffer sum 'uint16) (ramp 0 1 32) (aligned 0 0))
#<load-data>
Ran bounds analysis for 27 ms
Ran bounds analysis for 19 ms
"Extended success?"
#t
#<load-data>
"Building Expr:"
(load
 (buffer input 'uint8)
 (ramp
  (sca-add
   (sca-mul
    (sca-add sum.s1.r$x.rebased (var-lookup 't343))
    (var-lookup 'input.stride.1))
   (var-lookup 't350))
  1
  32)
 (aligned 1 0))
"Fold templates"
'()
here()

"Replace templates"
'()
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (load
 (buffer input 'uint8)
 (ramp
  (sca-add
   (sca-mul
    (sca-add sum.s1.r$x.rebased (var-lookup 't343))
    (var-lookup 'input.stride.1))
   (var-lookup 't350))
  1
  32)
 (aligned 1 0))
template:
  #<load-data>
axioms:
  '()
optimized-halide-expr:
  (load
 (buffer input 'uint8)
 (ramp
  (sca-add
   (sca-mul
    (sca-add sum.s1.r$x.rebased (var-lookup 't343))
    (var-lookup 'input.stride.1))
   (var-lookup 't350))
  1
  32)
 (aligned 1 0))
optimized-template:
  #<load-data>
optimized Halide 0:
  (uint8_t
 (app input (+ (+ (+ sum.s1.r$x.rebased (+ t487 (ite (<= 0 (ite (<= (+ t422 (- t487)) filter_width) (+ t422 (- t487)) filter_width)) (ite (<= (+ t422 (- t487)) filter_width) (+ t422 (- t487)) filter_width) 0))) (- t424)) (+ t493 (+ (ite (<= (+ -32 output.s0.c.c) (+ -32 t420)) (+ -32 output.s0.c.c) (+ -32 t420)) (+ t491 (+ (+ (+ (+ t419 (- t482)) (- t483)) (- t484)) (- t419))))))))
optimized x86 0:
  (uint8_t
 (app input (+ (+ (+ sum.s1.r$x.rebased (+ t487 (ite (<= 0 (ite (<= (+ t422 (- t487)) filter_width) (+ t422 (- t487)) filter_width)) (ite (<= (+ t422 (- t487)) filter_width) (+ t422 (- t487)) filter_width) 0))) (- t424)) (+ t493 (+ (ite (<= (+ -32 output.s0.c.c) (+ -32 t420)) (+ -32 output.s0.c.c) (+ -32 t420)) (+ t491 (+ (+ (+ (+ t419 (- t482)) (- t483)) (- t484)) (- t419))))))))
Ran synthesizer for 23 ms
(model
 [idx$65 0])
(load
 (buffer input 'uint8)
 (ramp
  (sca-add
   (sca-mul
    (sca-add sum.s1.r$x.rebased (var-lookup 't343))
    (var-lookup 'input.stride.1))
   (var-lookup 't350))
  1
  32)
 (aligned 1 0))
#<load-data>
Ran bounds analysis for 21 ms
Ran bounds analysis for 13 ms
"Extended success?"
#t
#<load-data>
"Building Expr:"
(vec-cast
 (load
  (buffer input 'uint8)
  (ramp
   (sca-add
    (sca-mul
     (sca-add sum.s1.r$x.rebased (var-lookup 't343))
     (var-lookup 'input.stride.1))
    (var-lookup 't350))
   1
   32)
  (aligned 1 0))
 'uint16
 32)
"Fold templates"
'(#<load-data>)
here(#<load-data>)

"Replace templates"
'()
run-x86-synthesizer
halide-expr:
  (vec-cast
 (load
  (buffer input 'uint8)
  (ramp
   (sca-add
    (sca-mul
     (sca-add sum.s1.r$x.rebased (var-lookup 't343))
     (var-lookup 'input.stride.1))
    (var-lookup 't350))
   1
   32)
  (aligned 1 0))
 'uint16
 32)
template:
  #<load-data>
axioms:
  '()
optimized-halide-expr:
  (vec-cast
 (load
  (buffer input 'uint8)
  (ramp
   (sca-add
    (sca-mul
     (sca-add sum.s1.r$x.rebased (var-lookup 't343))
     (var-lookup 'input.stride.1))
    (var-lookup 't350))
   1
   32)
  (aligned 1 0))
 'uint16
 32)
optimized-template:
  #<load-data>
optimized Halide 0:
  (uint16_t
 (zero-extend (app input (+ (+ (+ sum.s1.r$x.rebased (+ t487 (ite (<= 0 (ite (<= (+ t422 (- t487)) filter_width) (+ t422 (- t487)) filter_width)) (ite (<= (+ t422 (- t487)) filter_width) (+ t422 (- t487)) filter_width) 0))) (- t424)) (+ t493 (+ (ite (<= (+ -32 output.s0.c.c) (+ -32 t420)) (+ -32 output.s0.c.c) (+ -32 t420)) (+ t491 (+ (+ (+ (+ t419 (- t482)) (- t483)) (- t484)) (- t419))))))) (bitvector 16)))
optimized x86 0:
  (uint8_t
 (app input (+ (+ (+ sum.s1.r$x.rebased (+ t487 (ite (<= 0 (ite (<= (+ t422 (- t487)) filter_width) (+ t422 (- t487)) filter_width)) (ite (<= (+ t422 (- t487)) filter_width) (+ t422 (- t487)) filter_width) 0))) (- t424)) (+ t493 (+ (ite (<= (+ -32 output.s0.c.c) (+ -32 t420)) (+ -32 output.s0.c.c) (+ -32 t420)) (+ t491 (+ (+ (+ (+ t419 (- t482)) (- t483)) (- t484)) (- t419))))))))
Ran synthesizer for 2 ms
(unsat)
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (vec-cast
 (load
  (buffer input 'uint8)
  (ramp
   (sca-add
    (sca-mul
     (sca-add sum.s1.r$x.rebased (var-lookup 't343))
     (var-lookup 'input.stride.1))
    (var-lookup 't350))
   1
   32)
  (aligned 1 0))
 'uint16
 32)
template:
  (cast ... #<load-data> 'uint16 #f)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-cast #<abstr-halide-expr> 'uint16 32)
optimized-template:
  (cast ... #<abstr-expr> 'uint16 #f)
optimized Halide 0:
  (uint16_t (zero-extend (app abstr-vals$194 0) (bitvector 16)))
optimized x86 0:
  (uint16_t (zero-extend (app abstr-vals$194 0) (bitvector 16)))
Ran synthesizer for 19 ms
(model)
(vec-cast #<abstr-halide-expr> 'uint16 32)
(cast ... #<load-data> 'uint16 #f)
Ran bounds analysis for 22 ms
Ran bounds analysis for 15 ms
"Extended success?"
#t
(cast ... #<load-data> 'uint16 #f)
"Building Expr:"
(vec-add
 (load (buffer sum 'uint16) (ramp 0 1 32) (aligned 0 0))
 (vec-cast
  (load
   (buffer input 'uint8)
   (ramp
    (sca-add
     (sca-mul
      (sca-add sum.s1.r$x.rebased (var-lookup 't343))
      (var-lookup 'input.stride.1))
     (var-lookup 't350))
    1
    32)
   (aligned 1 0))
  'uint16
  32))
"Fold templates"
(list #<load-data> #<load-data> (cast ... #<load-data> 'uint16 x?$260))
here(#<load-data> #<load-data> #(struct:cast ... #<load-data> uint16 x?$260))

"Replace templates"
(list
 (vs-mpy-add
  ...
  #<load-data>
  (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
  (! x?$389)
  (! x?$390)
  (! x?$391)
  'uint16))
run-x86-synthesizer
halide-expr:
  (vec-add
 (load (buffer sum 'uint16) (ramp 0 1 32) (aligned 0 0))
 (vec-cast
  (load
   (buffer input 'uint8)
   (ramp
    (sca-add
     (sca-mul
      (sca-add sum.s1.r$x.rebased (var-lookup 't343))
      (var-lookup 'input.stride.1))
     (var-lookup 't350))
    1
    32)
   (aligned 1 0))
  'uint16
  32))
template:
  #<load-data>
axioms:
  '()
optimized-halide-expr:
  (vec-add
 (load (buffer sum 'uint16) (ramp 0 1 32) (aligned 0 0))
 (vec-cast
  (load
   (buffer input 'uint8)
   (ramp
    (sca-add
     (sca-mul
      (sca-add sum.s1.r$x.rebased (var-lookup 't343))
      (var-lookup 'input.stride.1))
     (var-lookup 't350))
    1
    32)
   (aligned 1 0))
  'uint16
  32))
optimized-template:
  #<load-data>
optimized Halide 0:
  (uint16_t
 (bvadd (app sum 0) (zero-extend (app input (+ (+ (+ sum.s1.r$x.rebased (+ t487 (ite (<= 0 (ite (<= (+ t422 (- t487)) filter_width) (+ t422 (- t487)) filter_width)) (ite (<= (+ t422 (- t487)) filter_width) (+ t422 (- t487)) filter_width) 0))) (- t424)) (+ t493 (+ (ite (<= (+ -32 output.s0.c.c) (+ -32 t420)) (+ -32 output.s0.c.c) (+ -32 t420)) (+ t491 (+ (+ (+ (+ t419 (- t482)) (- t483)) (- t484)) (- t419))))))) (bitvector 16))))
optimized x86 0:
  (union [(= 0 idx$196) #(struct:uint8_t
                        (app input (+ (+ (+ sum.s1.r$x.rebased (+ t487 (ite (<= 0 (ite (<= (+ t422 (- t487)) filter_width) (+ t422 (- t487)) filter_width)) (ite (<= (+ t422 (- t487)) filter_width) (+ t422 (- t487)) filter_width) 0))) (- t424)) (+ t493 (+ (ite (<= (+ -32 output.s0.c.c) (+ -32 t420)) (+ -32 output.s0.c.c) (+ -32 t420)) (+ t491 (+ (+ (+ (+ t419 (- t482)) (- t483)) (- t484)) (- t419))))))))] [(= 1 idx$196) #(struct:uint16_t
                                                                                                                                                                                                                                                                                                                                                                                                                                         (app sum 0))])
Ran synthesizer for 57 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-add
 (load (buffer sum 'uint16) (ramp 0 1 32) (aligned 0 0))
 (vec-cast
  (load
   (buffer input 'uint8)
   (ramp
    (sca-add
     (sca-mul
      (sca-add sum.s1.r$x.rebased (var-lookup 't343))
      (var-lookup 'input.stride.1))
     (var-lookup 't350))
    1
    32)
   (aligned 1 0))
  'uint16
  32))
template:
  #<load-data>
axioms:
  '()
optimized-halide-expr:
  (vec-add
 (load (buffer sum 'uint16) (ramp 0 1 32) (aligned 0 0))
 (vec-cast
  (load
   (buffer input 'uint8)
   (ramp
    (sca-add
     (sca-mul
      (sca-add sum.s1.r$x.rebased (var-lookup 't343))
      (var-lookup 'input.stride.1))
     (var-lookup 't350))
    1
    32)
   (aligned 1 0))
  'uint16
  32))
optimized-template:
  #<load-data>
optimized Halide 0:
  (uint16_t
 (bvadd (app sum 0) (zero-extend (app input (+ (+ (+ sum.s1.r$x.rebased (+ t487 (ite (<= 0 (ite (<= (+ t422 (- t487)) filter_width) (+ t422 (- t487)) filter_width)) (ite (<= (+ t422 (- t487)) filter_width) (+ t422 (- t487)) filter_width) 0))) (- t424)) (+ t493 (+ (ite (<= (+ -32 output.s0.c.c) (+ -32 t420)) (+ -32 output.s0.c.c) (+ -32 t420)) (+ t491 (+ (+ (+ (+ t419 (- t482)) (- t483)) (- t484)) (- t419))))))) (bitvector 16))))
optimized x86 0:
  (union [(= 0 idx$261) #(struct:uint8_t
                        (app input (+ (+ (+ sum.s1.r$x.rebased (+ t487 (ite (<= 0 (ite (<= (+ t422 (- t487)) filter_width) (+ t422 (- t487)) filter_width)) (ite (<= (+ t422 (- t487)) filter_width) (+ t422 (- t487)) filter_width) 0))) (- t424)) (+ t493 (+ (ite (<= (+ -32 output.s0.c.c) (+ -32 t420)) (+ -32 output.s0.c.c) (+ -32 t420)) (+ t491 (+ (+ (+ (+ t419 (- t482)) (- t483)) (- t484)) (- t419))))))))] [(= 1 idx$261) #(struct:uint16_t
                                                                                                                                                                                                                                                                                                                                                                                                                                         (app sum 0))])
Ran synthesizer for 57 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-add
 (load (buffer sum 'uint16) (ramp 0 1 32) (aligned 0 0))
 (vec-cast
  (load
   (buffer input 'uint8)
   (ramp
    (sca-add
     (sca-mul
      (sca-add sum.s1.r$x.rebased (var-lookup 't343))
      (var-lookup 'input.stride.1))
     (var-lookup 't350))
    1
    32)
   (aligned 1 0))
  'uint16
  32))
template:
  (cast ... #<load-data> 'uint16 x?$260)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-add
 (load (buffer sum 'uint16) (ramp 0 1 32) (aligned 0 0))
 (vec-cast #<abstr-halide-expr> 'uint16 32))
optimized-template:
  (cast ... #<abstr-expr> 'uint16 x?$260)
optimized Halide 0:
  (uint16_t
 (bvadd (app sum 0) (zero-extend (app abstr-vals$392 0) (bitvector 16))))
optimized x86 0:
  (uint16_t (zero-extend (app abstr-vals$392 0) (bitvector 16)))
run-x86-synthesizer
halide-expr:
  (vec-add
 (load (buffer sum 'uint16) (ramp 0 1 32) (aligned 0 0))
 (vec-cast
  (load
   (buffer input 'uint8)
   (ramp
    (sca-add
     (sca-mul
      (sca-add sum.s1.r$x.rebased (var-lookup 't343))
      (var-lookup 'input.stride.1))
     (var-lookup 't350))
    1
    32)
   (aligned 1 0))
  'uint16
  32))
template:
  (vs-mpy-add
 ...
 #<load-data>
 (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
 (! x?$389)
 (! x?$390)
 (! x?$391)
 'uint16)
axioms:
  '()
optimized-halide-expr:
  (vec-add
 (load (buffer sum 'uint16) (ramp 0 1 32) (aligned 0 0))
 (vec-cast
  (load
   (buffer input 'uint8)
   (ramp
    (sca-add
     (sca-mul
      (sca-add sum.s1.r$x.rebased (var-lookup 't343))
      (var-lookup 'input.stride.1))
     (var-lookup 't350))
    1
    32)
   (aligned 1 0))
  'uint16
  32))
optimized-template:
  (vs-mpy-add
 ...
 #<load-data>
 (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
 (! x?$389)
 (! x?$390)
 (! x?$391)
 'uint16)
optimized Halide 0:
  (uint16_t
 (bvadd (app sum 0) (zero-extend (app input (+ (+ (+ sum.s1.r$x.rebased (+ t487 (ite (<= 0 (ite (<= (+ t422 (- t487)) filter_width) (+ t422 (- t487)) filter_width)) (ite (<= (+ t422 (- t487)) filter_width) (+ t422 (- t487)) filter_width) 0))) (- t424)) (+ t493 (+ (ite (<= (+ -32 output.s0.c.c) (+ -32 t420)) (+ -32 output.s0.c.c) (+ -32 t420)) (+ t491 (+ (+ (+ (+ t419 (- t482)) (- t483)) (- t484)) (- t419))))))) (bitvector 16))))
optimized x86 0:
  (uint16_t
 (ite* (⊢ (&& x?$391 (! (&& (! x?$389) (! x?$391)))) (ite x?$389 (bvadd (ite* (⊢ (= 0 idx$326) (zero-extend (app input (+ (+ (+ sum.s1.r$x.rebased (+ t487 (ite (<= 0 (ite (<= (+ t422 (- t487)) filter_width) (+ t422 (- t487)) filter_width)) (ite (<= (+ t422 (- t487)) filter_width) (+ t422 (- t487)) filter_width) 0))) (- t424)) (+ t493 (+ (ite (<= (+ -32 output.s0.c.c) (+ -32 t420)) (+ -32 output.s0.c.c) (+ -32 t420)) (+ t491 (+ (+ (+ (+ t419 (- t482)) (- t483)) (- t484)) (- t419))))))) (bitvector 16))) (⊢ (= 1 idx$326) (app sum 0))) (ite x?$389 (bvadd (ite* (⊢ (= 0 idx$325) (zero-extend (app input (+ (+ (+ sum.s1.r$x.rebased (+ t487 (ite (<= 0 (ite (<= (+ t422 (- t487)) filter_width) (+ t422 (- t487)) filter_width)) (ite (<= (+ t422 (- t487)) filter_width) (+ t422 (- t487)) filter_width) 0))) (- t424)) (+ t493 (+ (ite (<= (+ -32 output.s0.c.c) (+ -32 t420)) (+ -32 output.s0.c.c) (+ -32 t420)) (+ t491 (+ (+ (+ (+ t419 (- t482)) (- t483)) (- t484)) (- t419))))))) (bitvector 16))) (⊢ (= 1 idx$325) (app sum 0))) (ite x?$390 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$390 (bv #x0000 16) (bv #x0001 16)) (ite (bvule (ite* (⊢ (= 0 idx$325) (zero-extend (app input (+ (+ (+ sum.s1.r$x.rebased (+ t487 (ite (<= 0 (ite (<= (+ t422 (- t487)) filter_width) (+ t422 (- t487)) filter_width)) (ite (<= (+ t422 (- t487)) filter_width) (+ t422 (- t487)) filter_width) 0))) (- t424)) (+ t493 (+ (ite (<= (+ -32 output.s0.c.c) (+ -32 t420)) (+ -32 output.s0.c.c) (+ -32 t420)) (+ t491 (+ (+ (+ (+ t419 (- t482)) (- t483)) (- t484)) (- t419))))))) (bitvector 16))) (⊢ (= 1 idx$325) (app sum 0))) (bvadd (bv #xffff 16) (bvneg (ite x?$390 (bv #x0000 16) (bv #x0001 16))))) (ite* (⊢ (= 0 idx$325) (zero-extend (app input (+ (+ (+ sum.s1.r$x.rebased (+ t487 (ite (<= 0 (ite (<= (+ t422 (- t487)) filter_width) (+ t422 (- t487)) filter_width)) (ite (<= (+ t422 (- t487)) filter_width) (+ t422 (- t487)) filter_width) 0))) (- t424)) (+ t493 (+ (ite (<= (+ -32 output.s0.c.c) (+ -32 t420)) (+ -32 output.s0.c.c) (+ -32 t420)) (+ t491 (+ (+ (+ (+ t419 (- t482)) (- t483)) (- t484)) (- t419))))))) (bitvector 16))) (⊢ (= 1 idx$325) (app sum 0))) (bvadd (bv #xffff 16) (bvneg (ite x?$390 (bv #x0000 16) (bv #x0001 16)))))))) (bvadd (ite x?$389 (bvadd (ite* (⊢ (= 0 idx$325) (zero-extend (app input (+ (+ (+ sum.s1.r$x.rebased (+ t487 (ite (<= 0 (ite (<= (+ t422 (- t487)) filter_width) (+ t422 (- t487)) filter_width)) (ite (<= (+ t422 (- t487)) filter_width) (+ t422 (- t487)) filter_width) 0))) (- t424)) (+ t493 (+ (ite (<= (+ -32 output.s0.c.c) (+ -32 t420)) (+ -32 output.s0.c.c) (+ -32 t420)) (+ t491 (+ (+ (+ (+ t419 (- t482)) (- t483)) (- t484)) (- t419))))))) (bitvector 16))) (⊢ (= 1 idx$325) (app sum 0))) (ite x?$390 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$390 (bv #x0000 16) (bv #x0001 16)) (ite (bvule (ite* (⊢ (= 0 idx$325) (zero-extend (app input (+ (+ (+ sum.s1.r$x.rebased (+ t487 (ite (<= 0 (ite (<= (+ t422 (- t487)) filter_width) (+ t422 (- t487)) filter_width)) (ite (<= (+ t422 (- t487)) filter_width) (+ t422 (- t487)) filter_width) 0))) (- t424)) (+ t493 (+ (ite (<= (+ -32 output.s0.c.c) (+ -32 t420)) (+ -32 output.s0.c.c) (+ -32 t420)) (+ t491 (+ (+ (+ (+ t419 (- t482)) (- t483)) (- t484)) (- t419))))))) (bitvector 16))) (⊢ (= 1 idx$325) (app sum 0))) (bvadd (bv #xffff 16) (bvneg (ite x?$390 (bv #x0000 16) (bv #x0001 16))))) (ite* (⊢ (= 0 idx$325) (zero-extend (app input (+ (+ (+ sum.s1.r$x.rebased (+ t487 (ite (<= 0 (ite (<= (+ t422 (- t487)) filter_width) (+ t422 (- t487)) filter_width)) (ite (<= (+ t422 (- t487)) filter_width) (+ t422 (- t487)) filter_width) 0))) (- t424)) (+ t493 (+ (ite (<= (+ -32 output.s0.c.c) (+ -32 t420)) (+ -32 output.s0.c.c) (+ -32 t420)) (+ t491 (+ (+ (+ (+ t419 (- t482)) (- t483)) (- t484)) (- t419))))))) (bitvector 16))) (⊢ (= 1 idx$325) (app sum 0))) (bvadd (bv #xffff 16) (bvneg (ite x?$390 (bv #x0000 16) (bv #x0001 16))))))) (ite (bvule (bvneg (ite (bveq (bv #x0000 16) (ite x?$389 (bvadd (ite* (⊢ (= 0 idx$325) (zero-extend (app input (+ (+ (+ sum.s1.r$x.rebased (+ t487 (ite (<= 0 (ite (<= (+ t422 (- t487)) filter_width) (+ t422 (- t487)) filter_width)) (ite (<= (+ t422 (- t487)) filter_width) (+ t422 (- t487)) filter_width) 0))) (- t424)) (+ t493 (+ (ite (<= (+ -32 output.s0.c.c) (+ -32 t420)) (+ -32 output.s0.c.c) (+ -32 t420)) (+ t491 (+ (+ (+ (+ t419 (- t482)) (- t483)) (- t484)) (- t419))))))) (bitvector 16))) (⊢ (= 1 idx$325) (app sum 0))) (ite x?$390 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$390 (bv #x0000 16) (bv #x0001 16)) (ite (bvule (ite* (⊢ (= 0 idx$325) (zero-extend (app input (+ (+ (+ sum.s1.r$x.rebased (+ t487 (ite (<= 0 (ite (<= (+ t422 (- t487)) filter_width) (+ t422 (- t487)) filter_width)) (ite (<= (+ t422 (- t487)) filter_width) (+ t422 (- t487)) filter_width) 0))) (- t424)) (+ t493 (+ (ite (<= (+ -32 output.s0.c.c) (+ -32 t420)) (+ -32 output.s0.c.c) (+ -32 t420)) (+ t491 (+ (+ (+ (+ t419 (- t482)) (- t483)) (- t484)) (- t419))))))) (bitvector 16))) (⊢ (= 1 idx$325) (app sum 0))) (bvadd (bv #xffff 16) (bvneg (ite x?$390 (bv #x0000 16) (bv #x0001 16))))) (ite* (⊢ (= 0 idx$325) (zero-extend (app input (+ (+ (+ sum.s1.r$x.rebased (+ t487 (ite (<= 0 (ite (<= (+ t422 (- t487)) filter_width) (+ t422 (- t487)) filter_width)) (ite (<= (+ t422 (- t487)) filter_width) (+ t422 (- t487)) filter_width) 0))) (- t424)) (+ t493 (+ (ite (<= (+ -32 output.s0.c.c) (+ -32 t420)) (+ -32 output.s0.c.c) (+ -32 t420)) (+ t491 (+ (+ (+ (+ t419 (- t482)) (- t483)) (- t484)) (- t419))))))) (bitvector 16))) (⊢ (= 1 idx$325) (app sum 0))) (bvadd (bv #xffff 16) (bvneg (ite x?$390 (bv #x0000 16) (bv #x0001 16)))))))) (ite x?$389 (bvadd (ite* (⊢ (= 0 idx$325) (zero-extend (app input (+ (+ (+ sum.s1.r$x.rebased (+ t487 (ite (<= 0 (ite (<= (+ t422 (- t487)) filter_width) (+ t422 (- t487)) filter_width)) (ite (<= (+ t422 (- t487)) filter_width) (+ t422 (- t487)) filter_width) 0))) (- t424)) (+ t493 (+ (ite (<= (+ -32 output.s0.c.c) (+ -32 t420)) (+ -32 output.s0.c.c) (+ -32 t420)) (+ t491 (+ (+ (+ (+ t419 (- t482)) (- t483)) (- t484)) (- t419))))))) (bitvector 16))) (⊢ (= 1 idx$325) (app sum 0))) (ite x?$390 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$390 (bv #x0000 16) (bv #x0001 16)) (ite (bvule (ite* (⊢ (= 0 idx$325) (zero-extend (app input (+ (+ (+ sum.s1.r$x.rebased (+ t487 (ite (<= 0 (ite (<= (+ t422 (- t487)) filter_width) (+ t422 (- t487)) filter_width)) (ite (<= (+ t422 (- t487)) filter_width) (+ t422 (- t487)) filter_width) 0))) (- t424)) (+ t493 (+ (ite (<= (+ -32 output.s0.c.c) (+ -32 t420)) (+ -32 output.s0.c.c) (+ -32 t420)) (+ t491 (+ (+ (+ (+ t419 (- t482)) (- t483)) (- t484)) (- t419))))))) (bitvector 16))) (⊢ (= 1 idx$325) (app sum 0))) (bvadd (bv #xffff 16) (bvneg (ite x?$390 (bv #x0000 16) (bv #x0001 16))))) (ite* (⊢ (= 0 idx$325) (zero-extend (app input (+ (+ (+ sum.s1.r$x.rebased (+ t487 (ite (<= 0 (ite (<= (+ t422 (- t487)) filter_width) (+ t422 (- t487)) filter_width)) (ite (<= (+ t422 (- t487)) filter_width) (+ t422 (- t487)) filter_width) 0))) (- t424)) (+ t493 (+ (ite (<= (+ -32 output.s0.c.c) (+ -32 t420)) (+ -32 output.s0.c.c) (+ -32 t420)) (+ t491 (+ (+ (+ (+ t419 (- t482)) (- t483)) (- t484)) (- t419))))))) (bitvector 16))) (⊢ (= 1 idx$325) (app sum 0))) (bvadd (bv #xffff 16) (bvneg (ite x?$390 (bv #x0000 16) (bv #x0001 16))))))) (bv #x0000 16))) (ite (bvule (ite* (⊢ (= 0 idx$326) (zero-extend (app input (+ (+ (+ sum.s1.r$x.rebased (+ t487 (ite (<= 0 (ite (<= (+ t422 (- t487)) filter_width) (+ t422 (- t487)) filter_width)) (ite (<= (+ t422 (- t487)) filter_width) (+ t422 (- t487)) filter_width) 0))) (- t424)) (+ t493 (+ (ite (<= (+ -32 output.s0.c.c) (+ -32 t420)) (+ -32 output.s0.c.c) (+ -32 t420)) (+ t491 (+ (+ (+ (+ t419 (- t482)) (- t483)) (- t484)) (- t419))))))) (bitvector 16))) (⊢ (= 1 idx$326) (app sum 0))) (bvadd (bv #xffff 16) (bvneg (ite x?$389 (bvadd (ite* (⊢ (= 0 idx$325) (zero-extend (app input (+ (+ (+ sum.s1.r$x.rebased (+ t487 (ite (<= 0 (ite (<= (+ t422 (- t487)) filter_width) (+ t422 (- t487)) filter_width)) (ite (<= (+ t422 (- t487)) filter_width) (+ t422 (- t487)) filter_width) 0))) (- t424)) (+ t493 (+ (ite (<= (+ -32 output.s0.c.c) (+ -32 t420)) (+ -32 output.s0.c.c) (+ -32 t420)) (+ t491 (+ (+ (+ (+ t419 (- t482)) (- t483)) (- t484)) (- t419))))))) (bitvector 16))) (⊢ (= 1 idx$325) (app sum 0))) (ite x?$390 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$390 (bv #x0000 16) (bv #x0001 16)) (ite (bvule (ite* (⊢ (= 0 idx$325) (zero-extend (app input (+ (+ (+ sum.s1.r$x.rebased (+ t487 (ite (<= 0 (ite (<= (+ t422 (- t487)) filter_width) (+ t422 (- t487)) filter_width)) (ite (<= (+ t422 (- t487)) filter_width) (+ t422 (- t487)) filter_width) 0))) (- t424)) (+ t493 (+ (ite (<= (+ -32 output.s0.c.c) (+ -32 t420)) (+ -32 output.s0.c.c) (+ -32 t420)) (+ t491 (+ (+ (+ (+ t419 (- t482)) (- t483)) (- t484)) (- t419))))))) (bitvector 16))) (⊢ (= 1 idx$325) (app sum 0))) (bvadd (bv #xffff 16) (bvneg (ite x?$390 (bv #x0000 16) (bv #x0001 16))))) (ite* (⊢ (= 0 idx$325) (zero-extend (app input (+ (+ (+ sum.s1.r$x.rebased (+ t487 (ite (<= 0 (ite (<= (+ t422 (- t487)) filter_width) (+ t422 (- t487)) filter_width)) (ite (<= (+ t422 (- t487)) filter_width) (+ t422 (- t487)) filter_width) 0))) (- t424)) (+ t493 (+ (ite (<= (+ -32 output.s0.c.c) (+ -32 t420)) (+ -32 output.s0.c.c) (+ -32 t420)) (+ t491 (+ (+ (+ (+ t419 (- t482)) (- t483)) (- t484)) (- t419))))))) (bitvector 16))) (⊢ (= 1 idx$325) (app sum 0))) (bvadd (bv #xffff 16) (bvneg (ite x?$390 (bv #x0000 16) (bv #x0001 16)))))))))) (ite* (⊢ (= 0 idx$326) (zero-extend (app input (+ (+ (+ sum.s1.r$x.rebased (+ t487 (ite (<= 0 (ite (<= (+ t422 (- t487)) filter_width) (+ t422 (- t487)) filter_width)) (ite (<= (+ t422 (- t487)) filter_width) (+ t422 (- t487)) filter_width) 0))) (- t424)) (+ t493 (+ (ite (<= (+ -32 output.s0.c.c) (+ -32 t420)) (+ -32 output.s0.c.c) (+ -32 t420)) (+ t491 (+ (+ (+ (+ t419 (- t482)) (- t483)) (- t484)) (- t419))))))) (bitvector 16))) (⊢ (= 1 idx$326) (app sum 0))) (bvadd (bv #xffff 16) (bvneg (ite x?$389 (bvadd (ite* (⊢ (= 0 idx$325) (zero-extend (app input (+ (+ (+ sum.s1.r$x.rebased (+ t487 (ite (<= 0 (ite (<= (+ t422 (- t487)) filter_width) (+ t422 (- t487)) filter_width)) (ite (<= (+ t422 (- t487)) filter_width) (+ t422 (- t487)) filter_width) 0))) (- t424)) (+ t493 (+ (ite (<= (+ -32 output.s0.c.c) (+ -32 t420)) (+ -32 output.s0.c.c) (+ -32 t420)) (+ t491 (+ (+ (+ (+ t419 (- t482)) (- t483)) (- t484)) (- t419))))))) (bitvector 16))) (⊢ (= 1 idx$325) (app sum 0))) (ite x?$390 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$390 (bv #x0000 16) (bv #x0001 16)) (ite (bvule (ite* (⊢ (= 0 idx$325) (zero-extend (app input (+ (+ (+ sum.s1.r$x.rebased (+ t487 (ite (<= 0 (ite (<= (+ t422 (- t487)) filter_width) (+ t422 (- t487)) filter_width)) (ite (<= (+ t422 (- t487)) filter_width) (+ t422 (- t487)) filter_width) 0))) (- t424)) (+ t493 (+ (ite (<= (+ -32 output.s0.c.c) (+ -32 t420)) (+ -32 output.s0.c.c) (+ -32 t420)) (+ t491 (+ (+ (+ (+ t419 (- t482)) (- t483)) (- t484)) (- t419))))))) (bitvector 16))) (⊢ (= 1 idx$325) (app sum 0))) (bvadd (bv #xffff 16) (bvneg (ite x?$390 (bv #x0000 16) (bv #x0001 16))))) (ite* (⊢ (= 0 idx$325) (zero-extend (app input (+ (+ (+ sum.s1.r$x.rebased (+ t487 (ite (<= 0 (ite (<= (+ t422 (- t487)) filter_width) (+ t422 (- t487)) filter_width)) (ite (<= (+ t422 (- t487)) filter_width) (+ t422 (- t487)) filter_width) 0))) (- t424)) (+ t493 (+ (ite (<= (+ -32 output.s0.c.c) (+ -32 t420)) (+ -32 output.s0.c.c) (+ -32 t420)) (+ t491 (+ (+ (+ (+ t419 (- t482)) (- t483)) (- t484)) (- t419))))))) (bitvector 16))) (⊢ (= 1 idx$325) (app sum 0))) (bvadd (bv #xffff 16) (bvneg (ite x?$390 (bv #x0000 16) (bv #x0001 16))))))))))) (ite (bvule (ite* (⊢ (= 0 idx$326) (zero-extend (app input (+ (+ (+ sum.s1.r$x.rebased (+ t487 (ite (<= 0 (ite (<= (+ t422 (- t487)) filter_width) (+ t422 (- t487)) filter_width)) (ite (<= (+ t422 (- t487)) filter_width) (+ t422 (- t487)) filter_width) 0))) (- t424)) (+ t493 (+ (ite (<= (+ -32 output.s0.c.c) (+ -32 t420)) (+ -32 output.s0.c.c) (+ -32 t420)) (+ t491 (+ (+ (+ (+ t419 (- t482)) (- t483)) (- t484)) (- t419))))))) (bitvector 16))) (⊢ (= 1 idx$326) (app sum 0))) (bvadd (bv #xffff 16) (bvneg (ite x?$389 (bvadd (ite* (⊢ (= 0 idx$325) (zero-extend (app input (+ (+ (+ sum.s1.r$x.rebased (+ t487 (ite (<= 0 (ite (<= (+ t422 (- t487)) filter_width) (+ t422 (- t487)) filter_width)) (ite (<= (+ t422 (- t487)) filter_width) (+ t422 (- t487)) filter_width) 0))) (- t424)) (+ t493 (+ (ite (<= (+ -32 output.s0.c.c) (+ -32 t420)) (+ -32 output.s0.c.c) (+ -32 t420)) (+ t491 (+ (+ (+ (+ t419 (- t482)) (- t483)) (- t484)) (- t419))))))) (bitvector 16))) (⊢ (= 1 idx$325) (app sum 0))) (ite x?$390 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$390 (bv #x0000 16) (bv #x0001 16)) (ite (bvule (ite* (⊢ (= 0 idx$325) (zero-extend (app input (+ (+ (+ sum.s1.r$x.rebased (+ t487 (ite (<= 0 (ite (<= (+ t422 (- t487)) filter_width) (+ t422 (- t487)) filter_width)) (ite (<= (+ t422 (- t487)) filter_width) (+ t422 (- t487)) filter_width) 0))) (- t424)) (+ t493 (+ (ite (<= (+ -32 output.s0.c.c) (+ -32 t420)) (+ -32 output.s0.c.c) (+ -32 t420)) (+ t491 (+ (+ (+ (+ t419 (- t482)) (- t483)) (- t484)) (- t419))))))) (bitvector 16))) (⊢ (= 1 idx$325) (app sum 0))) (bvadd (bv #xffff 16) (bvneg (ite x?$390 (bv #x0000 16) (bv #x0001 16))))) (ite* (⊢ (= 0 idx$325) (zero-extend (app input (+ (+ (+ sum.s1.r$x.rebased (+ t487 (ite (<= 0 (ite (<= (+ t422 (- t487)) filter_width) (+ t422 (- t487)) filter_width)) (ite (<= (+ t422 (- t487)) filter_width) (+ t422 (- t487)) filter_width) 0))) (- t424)) (+ t493 (+ (ite (<= (+ -32 output.s0.c.c) (+ -32 t420)) (+ -32 output.s0.c.c) (+ -32 t420)) (+ t491 (+ (+ (+ (+ t419 (- t482)) (- t483)) (- t484)) (- t419))))))) (bitvector 16))) (⊢ (= 1 idx$325) (app sum 0))) (bvadd (bv #xffff 16) (bvneg (ite x?$390 (bv #x0000 16) (bv #x0001 16)))))))))) (ite* (⊢ (= 0 idx$326) (zero-extend (app input (+ (+ (+ sum.s1.r$x.rebased (+ t487 (ite (<= 0 (ite (<= (+ t422 (- t487)) filter_width) (+ t422 (- t487)) filter_width)) (ite (<= (+ t422 (- t487)) filter_width) (+ t422 (- t487)) filter_width) 0))) (- t424)) (+ t493 (+ (ite (<= (+ -32 output.s0.c.c) (+ -32 t420)) (+ -32 output.s0.c.c) (+ -32 t420)) (+ t491 (+ (+ (+ (+ t419 (- t482)) (- t483)) (- t484)) (- t419))))))) (bitvector 16))) (⊢ (= 1 idx$326) (app sum 0))) (bvadd (bv #xffff 16) (bvneg (ite x?$389 (bvadd (ite* (⊢ (= 0 idx$325) (zero-extend (app input (+ (+ (+ sum.s1.r$x.rebased (+ t487 (ite (<= 0 (ite (<= (+ t422 (- t487)) filter_width) (+ t422 (- t487)) filter_width)) (ite (<= (+ t422 (- t487)) filter_width) (+ t422 (- t487)) filter_width) 0))) (- t424)) (+ t493 (+ (ite (<= (+ -32 output.s0.c.c) (+ -32 t420)) (+ -32 output.s0.c.c) (+ -32 t420)) (+ t491 (+ (+ (+ (+ t419 (- t482)) (- t483)) (- t484)) (- t419))))))) (bitvector 16))) (⊢ (= 1 idx$325) (app sum 0))) (ite x?$390 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$390 (bv #x0000 16) (bv #x0001 16)) (ite (bvule (ite* (⊢ (= 0 idx$325) (zero-extend (app input (+ (+ (+ sum.s1.r$x.rebased (+ t487 (ite (<= 0 (ite (<= (+ t422 (- t487)) filter_width) (+ t422 (- t487)) filter_width)) (ite (<= (+ t422 (- t487)) filter_width) (+ t422 (- t487)) filter_width) 0))) (- t424)) (+ t493 (+ (ite (<= (+ -32 output.s0.c.c) (+ -32 t420)) (+ -32 output.s0.c.c) (+ -32 t420)) (+ t491 (+ (+ (+ (+ t419 (- t482)) (- t483)) (- t484)) (- t419))))))) (bitvector 16))) (⊢ (= 1 idx$325) (app sum 0))) (bvadd (bv #xffff 16) (bvneg (ite x?$390 (bv #x0000 16) (bv #x0001 16))))) (ite* (⊢ (= 0 idx$325) (zero-extend (app input (+ (+ (+ sum.s1.r$x.rebased (+ t487 (ite (<= 0 (ite (<= (+ t422 (- t487)) filter_width) (+ t422 (- t487)) filter_width)) (ite (<= (+ t422 (- t487)) filter_width) (+ t422 (- t487)) filter_width) 0))) (- t424)) (+ t493 (+ (ite (<= (+ -32 output.s0.c.c) (+ -32 t420)) (+ -32 output.s0.c.c) (+ -32 t420)) (+ t491 (+ (+ (+ (+ t419 (- t482)) (- t483)) (- t484)) (- t419))))))) (bitvector 16))) (⊢ (= 1 idx$325) (app sum 0))) (bvadd (bv #xffff 16) (bvneg (ite x?$390 (bv #x0000 16) (bv #x0001 16)))))))))) (bvneg (ite (bveq (bv #x0000 16) (ite x?$389 (bvadd (ite* (⊢ (= 0 idx$325) (zero-extend (app input (+ (+ (+ sum.s1.r$x.rebased (+ t487 (ite (<= 0 (ite (<= (+ t422 (- t487)) filter_width) (+ t422 (- t487)) filter_width)) (ite (<= (+ t422 (- t487)) filter_width) (+ t422 (- t487)) filter_width) 0))) (- t424)) (+ t493 (+ (ite (<= (+ -32 output.s0.c.c) (+ -32 t420)) (+ -32 output.s0.c.c) (+ -32 t420)) (+ t491 (+ (+ (+ (+ t419 (- t482)) (- t483)) (- t484)) (- t419))))))) (bitvector 16))) (⊢ (= 1 idx$325) (app sum 0))) (ite x?$390 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$390 (bv #x0000 16) (bv #x0001 16)) (ite (bvule (ite* (⊢ (= 0 idx$325) (zero-extend (app input (+ (+ (+ sum.s1.r$x.rebased (+ t487 (ite (<= 0 (ite (<= (+ t422 (- t487)) filter_width) (+ t422 (- t487)) filter_width)) (ite (<= (+ t422 (- t487)) filter_width) (+ t422 (- t487)) filter_width) 0))) (- t424)) (+ t493 (+ (ite (<= (+ -32 output.s0.c.c) (+ -32 t420)) (+ -32 output.s0.c.c) (+ -32 t420)) (+ t491 (+ (+ (+ (+ t419 (- t482)) (- t483)) (- t484)) (- t419))))))) (bitvector 16))) (⊢ (= 1 idx$325) (app sum 0))) (bvadd (bv #xffff 16) (bvneg (ite x?$390 (bv #x0000 16) (bv #x0001 16))))) (ite* (⊢ (= 0 idx$325) (zero-extend (app input (+ (+ (+ sum.s1.r$x.rebased (+ t487 (ite (<= 0 (ite (<= (+ t422 (- t487)) filter_width) (+ t422 (- t487)) filter_width)) (ite (<= (+ t422 (- t487)) filter_width) (+ t422 (- t487)) filter_width) 0))) (- t424)) (+ t493 (+ (ite (<= (+ -32 output.s0.c.c) (+ -32 t420)) (+ -32 output.s0.c.c) (+ -32 t420)) (+ t491 (+ (+ (+ (+ t419 (- t482)) (- t483)) (- t484)) (- t419))))))) (bitvector 16))) (⊢ (= 1 idx$325) (app sum 0))) (bvadd (bv #xffff 16) (bvneg (ite x?$390 (bv #x0000 16) (bv #x0001 16)))))))) (ite x?$389 (bvadd (ite* (⊢ (= 0 idx$325) (zero-extend (app input (+ (+ (+ sum.s1.r$x.rebased (+ t487 (ite (<= 0 (ite (<= (+ t422 (- t487)) filter_width) (+ t422 (- t487)) filter_width)) (ite (<= (+ t422 (- t487)) filter_width) (+ t422 (- t487)) filter_width) 0))) (- t424)) (+ t493 (+ (ite (<= (+ -32 output.s0.c.c) (+ -32 t420)) (+ -32 output.s0.c.c) (+ -32 t420)) (+ t491 (+ (+ (+ (+ t419 (- t482)) (- t483)) (- t484)) (- t419))))))) (bitvector 16))) (⊢ (= 1 idx$325) (app sum 0))) (ite x?$390 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$390 (bv #x0000 16) (bv #x0001 16)) (ite (bvule (ite* (⊢ (= 0 idx$325) (zero-extend (app input (+ (+ (+ sum.s1.r$x.rebased (+ t487 (ite (<= 0 (ite (<= (+ t422 (- t487)) filter_width) (+ t422 (- t487)) filter_width)) (ite (<= (+ t422 (- t487)) filter_width) (+ t422 (- t487)) filter_width) 0))) (- t424)) (+ t493 (+ (ite (<= (+ -32 output.s0.c.c) (+ -32 t420)) (+ -32 output.s0.c.c) (+ -32 t420)) (+ t491 (+ (+ (+ (+ t419 (- t482)) (- t483)) (- t484)) (- t419))))))) (bitvector 16))) (⊢ (= 1 idx$325) (app sum 0))) (bvadd (bv #xffff 16) (bvneg (ite x?$390 (bv #x0000 16) (bv #x0001 16))))) (ite* (⊢ (= 0 idx$325) (zero-extend (app input (+ (+ (+ sum.s1.r$x.rebased (+ t487 (ite (<= 0 (ite (<= (+ t422 (- t487)) filter_width) (+ t422 (- t487)) filter_width)) (ite (<= (+ t422 (- t487)) filter_width) (+ t422 (- t487)) filter_width) 0))) (- t424)) (+ t493 (+ (ite (<= (+ -32 output.s0.c.c) (+ -32 t420)) (+ -32 output.s0.c.c) (+ -32 t420)) (+ t491 (+ (+ (+ (+ t419 (- t482)) (- t483)) (- t484)) (- t419))))))) (bitvector 16))) (⊢ (= 1 idx$325) (app sum 0))) (bvadd (bv #xffff 16) (bvneg (ite x?$390 (bv #x0000 16) (bv #x0001 16))))))) (bv #x0000 16))))))) (⊢ (|| (&& (! x?$389) (! x?$391)) (&& (! x?$391) (! (&& (! x?$389) (! x?$391))))) (bvlshr (ite x?$389 (bvadd (ite* (⊢ (= 0 idx$326) (zero-extend (app input (+ (+ (+ sum.s1.r$x.rebased (+ t487 (ite (<= 0 (ite (<= (+ t422 (- t487)) filter_width) (+ t422 (- t487)) filter_width)) (ite (<= (+ t422 (- t487)) filter_width) (+ t422 (- t487)) filter_width) 0))) (- t424)) (+ t493 (+ (ite (<= (+ -32 output.s0.c.c) (+ -32 t420)) (+ -32 output.s0.c.c) (+ -32 t420)) (+ t491 (+ (+ (+ (+ t419 (- t482)) (- t483)) (- t484)) (- t419))))))) (bitvector 16))) (⊢ (= 1 idx$326) (app sum 0))) (ite x?$389 (bvadd (ite* (⊢ (= 0 idx$325) (zero-extend (app input (+ (+ (+ sum.s1.r$x.rebased (+ t487 (ite (<= 0 (ite (<= (+ t422 (- t487)) filter_width) (+ t422 (- t487)) filter_width)) (ite (<= (+ t422 (- t487)) filter_width) (+ t422 (- t487)) filter_width) 0))) (- t424)) (+ t493 (+ (ite (<= (+ -32 output.s0.c.c) (+ -32 t420)) (+ -32 output.s0.c.c) (+ -32 t420)) (+ t491 (+ (+ (+ (+ t419 (- t482)) (- t483)) (- t484)) (- t419))))))) (bitvector 16))) (⊢ (= 1 idx$325) (app sum 0))) (ite x?$390 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$390 (bv #x0000 16) (bv #x0001 16)) (ite (bvule (ite* (⊢ (= 0 idx$325) (zero-extend (app input (+ (+ (+ sum.s1.r$x.rebased (+ t487 (ite (<= 0 (ite (<= (+ t422 (- t487)) filter_width) (+ t422 (- t487)) filter_width)) (ite (<= (+ t422 (- t487)) filter_width) (+ t422 (- t487)) filter_width) 0))) (- t424)) (+ t493 (+ (ite (<= (+ -32 output.s0.c.c) (+ -32 t420)) (+ -32 output.s0.c.c) (+ -32 t420)) (+ t491 (+ (+ (+ (+ t419 (- t482)) (- t483)) (- t484)) (- t419))))))) (bitvector 16))) (⊢ (= 1 idx$325) (app sum 0))) (bvadd (bv #xffff 16) (bvneg (ite x?$390 (bv #x0000 16) (bv #x0001 16))))) (ite* (⊢ (= 0 idx$325) (zero-extend (app input (+ (+ (+ sum.s1.r$x.rebased (+ t487 (ite (<= 0 (ite (<= (+ t422 (- t487)) filter_width) (+ t422 (- t487)) filter_width)) (ite (<= (+ t422 (- t487)) filter_width) (+ t422 (- t487)) filter_width) 0))) (- t424)) (+ t493 (+ (ite (<= (+ -32 output.s0.c.c) (+ -32 t420)) (+ -32 output.s0.c.c) (+ -32 t420)) (+ t491 (+ (+ (+ (+ t419 (- t482)) (- t483)) (- t484)) (- t419))))))) (bitvector 16))) (⊢ (= 1 idx$325) (app sum 0))) (bvadd (bv #xffff 16) (bvneg (ite x?$390 (bv #x0000 16) (bv #x0001 16)))))))) (bvadd (ite x?$389 (bvadd (ite* (⊢ (= 0 idx$325) (zero-extend (app input (+ (+ (+ sum.s1.r$x.rebased (+ t487 (ite (<= 0 (ite (<= (+ t422 (- t487)) filter_width) (+ t422 (- t487)) filter_width)) (ite (<= (+ t422 (- t487)) filter_width) (+ t422 (- t487)) filter_width) 0))) (- t424)) (+ t493 (+ (ite (<= (+ -32 output.s0.c.c) (+ -32 t420)) (+ -32 output.s0.c.c) (+ -32 t420)) (+ t491 (+ (+ (+ (+ t419 (- t482)) (- t483)) (- t484)) (- t419))))))) (bitvector 16))) (⊢ (= 1 idx$325) (app sum 0))) (ite x?$390 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$390 (bv #x0000 16) (bv #x0001 16)) (ite (bvule (ite* (⊢ (= 0 idx$325) (zero-extend (app input (+ (+ (+ sum.s1.r$x.rebased (+ t487 (ite (<= 0 (ite (<= (+ t422 (- t487)) filter_width) (+ t422 (- t487)) filter_width)) (ite (<= (+ t422 (- t487)) filter_width) (+ t422 (- t487)) filter_width) 0))) (- t424)) (+ t493 (+ (ite (<= (+ -32 output.s0.c.c) (+ -32 t420)) (+ -32 output.s0.c.c) (+ -32 t420)) (+ t491 (+ (+ (+ (+ t419 (- t482)) (- t483)) (- t484)) (- t419))))))) (bitvector 16))) (⊢ (= 1 idx$325) (app sum 0))) (bvadd (bv #xffff 16) (bvneg (ite x?$390 (bv #x0000 16) (bv #x0001 16))))) (ite* (⊢ (= 0 idx$325) (zero-extend (app input (+ (+ (+ sum.s1.r$x.rebased (+ t487 (ite (<= 0 (ite (<= (+ t422 (- t487)) filter_width) (+ t422 (- t487)) filter_width)) (ite (<= (+ t422 (- t487)) filter_width) (+ t422 (- t487)) filter_width) 0))) (- t424)) (+ t493 (+ (ite (<= (+ -32 output.s0.c.c) (+ -32 t420)) (+ -32 output.s0.c.c) (+ -32 t420)) (+ t491 (+ (+ (+ (+ t419 (- t482)) (- t483)) (- t484)) (- t419))))))) (bitvector 16))) (⊢ (= 1 idx$325) (app sum 0))) (bvadd (bv #xffff 16) (bvneg (ite x?$390 (bv #x0000 16) (bv #x0001 16))))))) (ite (bvule (bvneg (ite (bveq (bv #x0000 16) (ite x?$389 (bvadd (ite* (⊢ (= 0 idx$325) (zero-extend (app input (+ (+ (+ sum.s1.r$x.rebased (+ t487 (ite (<= 0 (ite (<= (+ t422 (- t487)) filter_width) (+ t422 (- t487)) filter_width)) (ite (<= (+ t422 (- t487)) filter_width) (+ t422 (- t487)) filter_width) 0))) (- t424)) (+ t493 (+ (ite (<= (+ -32 output.s0.c.c) (+ -32 t420)) (+ -32 output.s0.c.c) (+ -32 t420)) (+ t491 (+ (+ (+ (+ t419 (- t482)) (- t483)) (- t484)) (- t419))))))) (bitvector 16))) (⊢ (= 1 idx$325) (app sum 0))) (ite x?$390 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$390 (bv #x0000 16) (bv #x0001 16)) (ite (bvule (ite* (⊢ (= 0 idx$325) (zero-extend (app input (+ (+ (+ sum.s1.r$x.rebased (+ t487 (ite (<= 0 (ite (<= (+ t422 (- t487)) filter_width) (+ t422 (- t487)) filter_width)) (ite (<= (+ t422 (- t487)) filter_width) (+ t422 (- t487)) filter_width) 0))) (- t424)) (+ t493 (+ (ite (<= (+ -32 output.s0.c.c) (+ -32 t420)) (+ -32 output.s0.c.c) (+ -32 t420)) (+ t491 (+ (+ (+ (+ t419 (- t482)) (- t483)) (- t484)) (- t419))))))) (bitvector 16))) (⊢ (= 1 idx$325) (app sum 0))) (bvadd (bv #xffff 16) (bvneg (ite x?$390 (bv #x0000 16) (bv #x0001 16))))) (ite* (⊢ (= 0 idx$325) (zero-extend (app input (+ (+ (+ sum.s1.r$x.rebased (+ t487 (ite (<= 0 (ite (<= (+ t422 (- t487)) filter_width) (+ t422 (- t487)) filter_width)) (ite (<= (+ t422 (- t487)) filter_width) (+ t422 (- t487)) filter_width) 0))) (- t424)) (+ t493 (+ (ite (<= (+ -32 output.s0.c.c) (+ -32 t420)) (+ -32 output.s0.c.c) (+ -32 t420)) (+ t491 (+ (+ (+ (+ t419 (- t482)) (- t483)) (- t484)) (- t419))))))) (bitvector 16))) (⊢ (= 1 idx$325) (app sum 0))) (bvadd (bv #xffff 16) (bvneg (ite x?$390 (bv #x0000 16) (bv #x0001 16)))))))) (ite x?$389 (bvadd (ite* (⊢ (= 0 idx$325) (zero-extend (app input (+ (+ (+ sum.s1.r$x.rebased (+ t487 (ite (<= 0 (ite (<= (+ t422 (- t487)) filter_width) (+ t422 (- t487)) filter_width)) (ite (<= (+ t422 (- t487)) filter_width) (+ t422 (- t487)) filter_width) 0))) (- t424)) (+ t493 (+ (ite (<= (+ -32 output.s0.c.c) (+ -32 t420)) (+ -32 output.s0.c.c) (+ -32 t420)) (+ t491 (+ (+ (+ (+ t419 (- t482)) (- t483)) (- t484)) (- t419))))))) (bitvector 16))) (⊢ (= 1 idx$325) (app sum 0))) (ite x?$390 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$390 (bv #x0000 16) (bv #x0001 16)) (ite (bvule (ite* (⊢ (= 0 idx$325) (zero-extend (app input (+ (+ (+ sum.s1.r$x.rebased (+ t487 (ite (<= 0 (ite (<= (+ t422 (- t487)) filter_width) (+ t422 (- t487)) filter_width)) (ite (<= (+ t422 (- t487)) filter_width) (+ t422 (- t487)) filter_width) 0))) (- t424)) (+ t493 (+ (ite (<= (+ -32 output.s0.c.c) (+ -32 t420)) (+ -32 output.s0.c.c) (+ -32 t420)) (+ t491 (+ (+ (+ (+ t419 (- t482)) (- t483)) (- t484)) (- t419))))))) (bitvector 16))) (⊢ (= 1 idx$325) (app sum 0))) (bvadd (bv #xffff 16) (bvneg (ite x?$390 (bv #x0000 16) (bv #x0001 16))))) (ite* (⊢ (= 0 idx$325) (zero-extend (app input (+ (+ (+ sum.s1.r$x.rebased (+ t487 (ite (<= 0 (ite (<= (+ t422 (- t487)) filter_width) (+ t422 (- t487)) filter_width)) (ite (<= (+ t422 (- t487)) filter_width) (+ t422 (- t487)) filter_width) 0))) (- t424)) (+ t493 (+ (ite (<= (+ -32 output.s0.c.c) (+ -32 t420)) (+ -32 output.s0.c.c) (+ -32 t420)) (+ t491 (+ (+ (+ (+ t419 (- t482)) (- t483)) (- t484)) (- t419))))))) (bitvector 16))) (⊢ (= 1 idx$325) (app sum 0))) (bvadd (bv #xffff 16) (bvneg (ite x?$390 (bv #x0000 16) (bv #x0001 16))))))) (bv #x0000 16))) (ite (bvule (ite* (⊢ (= 0 idx$326) (zero-extend (app input (+ (+ (+ sum.s1.r$x.rebased (+ t487 (ite (<= 0 (ite (<= (+ t422 (- t487)) filter_width) (+ t422 (- t487)) filter_width)) (ite (<= (+ t422 (- t487)) filter_width) (+ t422 (- t487)) filter_width) 0))) (- t424)) (+ t493 (+ (ite (<= (+ -32 output.s0.c.c) (+ -32 t420)) (+ -32 output.s0.c.c) (+ -32 t420)) (+ t491 (+ (+ (+ (+ t419 (- t482)) (- t483)) (- t484)) (- t419))))))) (bitvector 16))) (⊢ (= 1 idx$326) (app sum 0))) (bvadd (bv #xffff 16) (bvneg (ite x?$389 (bvadd (ite* (⊢ (= 0 idx$325) (zero-extend (app input (+ (+ (+ sum.s1.r$x.rebased (+ t487 (ite (<= 0 (ite (<= (+ t422 (- t487)) filter_width) (+ t422 (- t487)) filter_width)) (ite (<= (+ t422 (- t487)) filter_width) (+ t422 (- t487)) filter_width) 0))) (- t424)) (+ t493 (+ (ite (<= (+ -32 output.s0.c.c) (+ -32 t420)) (+ -32 output.s0.c.c) (+ -32 t420)) (+ t491 (+ (+ (+ (+ t419 (- t482)) (- t483)) (- t484)) (- t419))))))) (bitvector 16))) (⊢ (= 1 idx$325) (app sum 0))) (ite x?$390 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$390 (bv #x0000 16) (bv #x0001 16)) (ite (bvule (ite* (⊢ (= 0 idx$325) (zero-extend (app input (+ (+ (+ sum.s1.r$x.rebased (+ t487 (ite (<= 0 (ite (<= (+ t422 (- t487)) filter_width) (+ t422 (- t487)) filter_width)) (ite (<= (+ t422 (- t487)) filter_width) (+ t422 (- t487)) filter_width) 0))) (- t424)) (+ t493 (+ (ite (<= (+ -32 output.s0.c.c) (+ -32 t420)) (+ -32 output.s0.c.c) (+ -32 t420)) (+ t491 (+ (+ (+ (+ t419 (- t482)) (- t483)) (- t484)) (- t419))))))) (bitvector 16))) (⊢ (= 1 idx$325) (app sum 0))) (bvadd (bv #xffff 16) (bvneg (ite x?$390 (bv #x0000 16) (bv #x0001 16))))) (ite* (⊢ (= 0 idx$325) (zero-extend (app input (+ (+ (+ sum.s1.r$x.rebased (+ t487 (ite (<= 0 (ite (<= (+ t422 (- t487)) filter_width) (+ t422 (- t487)) filter_width)) (ite (<= (+ t422 (- t487)) filter_width) (+ t422 (- t487)) filter_width) 0))) (- t424)) (+ t493 (+ (ite (<= (+ -32 output.s0.c.c) (+ -32 t420)) (+ -32 output.s0.c.c) (+ -32 t420)) (+ t491 (+ (+ (+ (+ t419 (- t482)) (- t483)) (- t484)) (- t419))))))) (bitvector 16))) (⊢ (= 1 idx$325) (app sum 0))) (bvadd (bv #xffff 16) (bvneg (ite x?$390 (bv #x0000 16) (bv #x0001 16)))))))))) (ite* (⊢ (= 0 idx$326) (zero-extend (app input (+ (+ (+ sum.s1.r$x.rebased (+ t487 (ite (<= 0 (ite (<= (+ t422 (- t487)) filter_width) (+ t422 (- t487)) filter_width)) (ite (<= (+ t422 (- t487)) filter_width) (+ t422 (- t487)) filter_width) 0))) (- t424)) (+ t493 (+ (ite (<= (+ -32 output.s0.c.c) (+ -32 t420)) (+ -32 output.s0.c.c) (+ -32 t420)) (+ t491 (+ (+ (+ (+ t419 (- t482)) (- t483)) (- t484)) (- t419))))))) (bitvector 16))) (⊢ (= 1 idx$326) (app sum 0))) (bvadd (bv #xffff 16) (bvneg (ite x?$389 (bvadd (ite* (⊢ (= 0 idx$325) (zero-extend (app input (+ (+ (+ sum.s1.r$x.rebased (+ t487 (ite (<= 0 (ite (<= (+ t422 (- t487)) filter_width) (+ t422 (- t487)) filter_width)) (ite (<= (+ t422 (- t487)) filter_width) (+ t422 (- t487)) filter_width) 0))) (- t424)) (+ t493 (+ (ite (<= (+ -32 output.s0.c.c) (+ -32 t420)) (+ -32 output.s0.c.c) (+ -32 t420)) (+ t491 (+ (+ (+ (+ t419 (- t482)) (- t483)) (- t484)) (- t419))))))) (bitvector 16))) (⊢ (= 1 idx$325) (app sum 0))) (ite x?$390 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$390 (bv #x0000 16) (bv #x0001 16)) (ite (bvule (ite* (⊢ (= 0 idx$325) (zero-extend (app input (+ (+ (+ sum.s1.r$x.rebased (+ t487 (ite (<= 0 (ite (<= (+ t422 (- t487)) filter_width) (+ t422 (- t487)) filter_width)) (ite (<= (+ t422 (- t487)) filter_width) (+ t422 (- t487)) filter_width) 0))) (- t424)) (+ t493 (+ (ite (<= (+ -32 output.s0.c.c) (+ -32 t420)) (+ -32 output.s0.c.c) (+ -32 t420)) (+ t491 (+ (+ (+ (+ t419 (- t482)) (- t483)) (- t484)) (- t419))))))) (bitvector 16))) (⊢ (= 1 idx$325) (app sum 0))) (bvadd (bv #xffff 16) (bvneg (ite x?$390 (bv #x0000 16) (bv #x0001 16))))) (ite* (⊢ (= 0 idx$325) (zero-extend (app input (+ (+ (+ sum.s1.r$x.rebased (+ t487 (ite (<= 0 (ite (<= (+ t422 (- t487)) filter_width) (+ t422 (- t487)) filter_width)) (ite (<= (+ t422 (- t487)) filter_width) (+ t422 (- t487)) filter_width) 0))) (- t424)) (+ t493 (+ (ite (<= (+ -32 output.s0.c.c) (+ -32 t420)) (+ -32 output.s0.c.c) (+ -32 t420)) (+ t491 (+ (+ (+ (+ t419 (- t482)) (- t483)) (- t484)) (- t419))))))) (bitvector 16))) (⊢ (= 1 idx$325) (app sum 0))) (bvadd (bv #xffff 16) (bvneg (ite x?$390 (bv #x0000 16) (bv #x0001 16))))))))))) (ite (bvule (ite* (⊢ (= 0 idx$326) (zero-extend (app input (+ (+ (+ sum.s1.r$x.rebased (+ t487 (ite (<= 0 (ite (<= (+ t422 (- t487)) filter_width) (+ t422 (- t487)) filter_width)) (ite (<= (+ t422 (- t487)) filter_width) (+ t422 (- t487)) filter_width) 0))) (- t424)) (+ t493 (+ (ite (<= (+ -32 output.s0.c.c) (+ -32 t420)) (+ -32 output.s0.c.c) (+ -32 t420)) (+ t491 (+ (+ (+ (+ t419 (- t482)) (- t483)) (- t484)) (- t419))))))) (bitvector 16))) (⊢ (= 1 idx$326) (app sum 0))) (bvadd (bv #xffff 16) (bvneg (ite x?$389 (bvadd (ite* (⊢ (= 0 idx$325) (zero-extend (app input (+ (+ (+ sum.s1.r$x.rebased (+ t487 (ite (<= 0 (ite (<= (+ t422 (- t487)) filter_width) (+ t422 (- t487)) filter_width)) (ite (<= (+ t422 (- t487)) filter_width) (+ t422 (- t487)) filter_width) 0))) (- t424)) (+ t493 (+ (ite (<= (+ -32 output.s0.c.c) (+ -32 t420)) (+ -32 output.s0.c.c) (+ -32 t420)) (+ t491 (+ (+ (+ (+ t419 (- t482)) (- t483)) (- t484)) (- t419))))))) (bitvector 16))) (⊢ (= 1 idx$325) (app sum 0))) (ite x?$390 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$390 (bv #x0000 16) (bv #x0001 16)) (ite (bvule (ite* (⊢ (= 0 idx$325) (zero-extend (app input (+ (+ (+ sum.s1.r$x.rebased (+ t487 (ite (<= 0 (ite (<= (+ t422 (- t487)) filter_width) (+ t422 (- t487)) filter_width)) (ite (<= (+ t422 (- t487)) filter_width) (+ t422 (- t487)) filter_width) 0))) (- t424)) (+ t493 (+ (ite (<= (+ -32 output.s0.c.c) (+ -32 t420)) (+ -32 output.s0.c.c) (+ -32 t420)) (+ t491 (+ (+ (+ (+ t419 (- t482)) (- t483)) (- t484)) (- t419))))))) (bitvector 16))) (⊢ (= 1 idx$325) (app sum 0))) (bvadd (bv #xffff 16) (bvneg (ite x?$390 (bv #x0000 16) (bv #x0001 16))))) (ite* (⊢ (= 0 idx$325) (zero-extend (app input (+ (+ (+ sum.s1.r$x.rebased (+ t487 (ite (<= 0 (ite (<= (+ t422 (- t487)) filter_width) (+ t422 (- t487)) filter_width)) (ite (<= (+ t422 (- t487)) filter_width) (+ t422 (- t487)) filter_width) 0))) (- t424)) (+ t493 (+ (ite (<= (+ -32 output.s0.c.c) (+ -32 t420)) (+ -32 output.s0.c.c) (+ -32 t420)) (+ t491 (+ (+ (+ (+ t419 (- t482)) (- t483)) (- t484)) (- t419))))))) (bitvector 16))) (⊢ (= 1 idx$325) (app sum 0))) (bvadd (bv #xffff 16) (bvneg (ite x?$390 (bv #x0000 16) (bv #x0001 16)))))))))) (ite* (⊢ (= 0 idx$326) (zero-extend (app input (+ (+ (+ sum.s1.r$x.rebased (+ t487 (ite (<= 0 (ite (<= (+ t422 (- t487)) filter_width) (+ t422 (- t487)) filter_width)) (ite (<= (+ t422 (- t487)) filter_width) (+ t422 (- t487)) filter_width) 0))) (- t424)) (+ t493 (+ (ite (<= (+ -32 output.s0.c.c) (+ -32 t420)) (+ -32 output.s0.c.c) (+ -32 t420)) (+ t491 (+ (+ (+ (+ t419 (- t482)) (- t483)) (- t484)) (- t419))))))) (bitvector 16))) (⊢ (= 1 idx$326) (app sum 0))) (bvadd (bv #xffff 16) (bvneg (ite x?$389 (bvadd (ite* (⊢ (= 0 idx$325) (zero-extend (app input (+ (+ (+ sum.s1.r$x.rebased (+ t487 (ite (<= 0 (ite (<= (+ t422 (- t487)) filter_width) (+ t422 (- t487)) filter_width)) (ite (<= (+ t422 (- t487)) filter_width) (+ t422 (- t487)) filter_width) 0))) (- t424)) (+ t493 (+ (ite (<= (+ -32 output.s0.c.c) (+ -32 t420)) (+ -32 output.s0.c.c) (+ -32 t420)) (+ t491 (+ (+ (+ (+ t419 (- t482)) (- t483)) (- t484)) (- t419))))))) (bitvector 16))) (⊢ (= 1 idx$325) (app sum 0))) (ite x?$390 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$390 (bv #x0000 16) (bv #x0001 16)) (ite (bvule (ite* (⊢ (= 0 idx$325) (zero-extend (app input (+ (+ (+ sum.s1.r$x.rebased (+ t487 (ite (<= 0 (ite (<= (+ t422 (- t487)) filter_width) (+ t422 (- t487)) filter_width)) (ite (<= (+ t422 (- t487)) filter_width) (+ t422 (- t487)) filter_width) 0))) (- t424)) (+ t493 (+ (ite (<= (+ -32 output.s0.c.c) (+ -32 t420)) (+ -32 output.s0.c.c) (+ -32 t420)) (+ t491 (+ (+ (+ (+ t419 (- t482)) (- t483)) (- t484)) (- t419))))))) (bitvector 16))) (⊢ (= 1 idx$325) (app sum 0))) (bvadd (bv #xffff 16) (bvneg (ite x?$390 (bv #x0000 16) (bv #x0001 16))))) (ite* (⊢ (= 0 idx$325) (zero-extend (app input (+ (+ (+ sum.s1.r$x.rebased (+ t487 (ite (<= 0 (ite (<= (+ t422 (- t487)) filter_width) (+ t422 (- t487)) filter_width)) (ite (<= (+ t422 (- t487)) filter_width) (+ t422 (- t487)) filter_width) 0))) (- t424)) (+ t493 (+ (ite (<= (+ -32 output.s0.c.c) (+ -32 t420)) (+ -32 output.s0.c.c) (+ -32 t420)) (+ t491 (+ (+ (+ (+ t419 (- t482)) (- t483)) (- t484)) (- t419))))))) (bitvector 16))) (⊢ (= 1 idx$325) (app sum 0))) (bvadd (bv #xffff 16) (bvneg (ite x?$390 (bv #x0000 16) (bv #x0001 16)))))))))) (bvneg (ite (bveq (bv #x0000 16) (ite x?$389 (bvadd (ite* (⊢ (= 0 idx$325) (zero-extend (app input (+ (+ (+ sum.s1.r$x.rebased (+ t487 (ite (<= 0 (ite (<= (+ t422 (- t487)) filter_width) (+ t422 (- t487)) filter_width)) (ite (<= (+ t422 (- t487)) filter_width) (+ t422 (- t487)) filter_width) 0))) (- t424)) (+ t493 (+ (ite (<= (+ -32 output.s0.c.c) (+ -32 t420)) (+ -32 output.s0.c.c) (+ -32 t420)) (+ t491 (+ (+ (+ (+ t419 (- t482)) (- t483)) (- t484)) (- t419))))))) (bitvector 16))) (⊢ (= 1 idx$325) (app sum 0))) (ite x?$390 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$390 (bv #x0000 16) (bv #x0001 16)) (ite (bvule (ite* (⊢ (= 0 idx$325) (zero-extend (app input (+ (+ (+ sum.s1.r$x.rebased (+ t487 (ite (<= 0 (ite (<= (+ t422 (- t487)) filter_width) (+ t422 (- t487)) filter_width)) (ite (<= (+ t422 (- t487)) filter_width) (+ t422 (- t487)) filter_width) 0))) (- t424)) (+ t493 (+ (ite (<= (+ -32 output.s0.c.c) (+ -32 t420)) (+ -32 output.s0.c.c) (+ -32 t420)) (+ t491 (+ (+ (+ (+ t419 (- t482)) (- t483)) (- t484)) (- t419))))))) (bitvector 16))) (⊢ (= 1 idx$325) (app sum 0))) (bvadd (bv #xffff 16) (bvneg (ite x?$390 (bv #x0000 16) (bv #x0001 16))))) (ite* (⊢ (= 0 idx$325) (zero-extend (app input (+ (+ (+ sum.s1.r$x.rebased (+ t487 (ite (<= 0 (ite (<= (+ t422 (- t487)) filter_width) (+ t422 (- t487)) filter_width)) (ite (<= (+ t422 (- t487)) filter_width) (+ t422 (- t487)) filter_width) 0))) (- t424)) (+ t493 (+ (ite (<= (+ -32 output.s0.c.c) (+ -32 t420)) (+ -32 output.s0.c.c) (+ -32 t420)) (+ t491 (+ (+ (+ (+ t419 (- t482)) (- t483)) (- t484)) (- t419))))))) (bitvector 16))) (⊢ (= 1 idx$325) (app sum 0))) (bvadd (bv #xffff 16) (bvneg (ite x?$390 (bv #x0000 16) (bv #x0001 16)))))))) (ite x?$389 (bvadd (ite* (⊢ (= 0 idx$325) (zero-extend (app input (+ (+ (+ sum.s1.r$x.rebased (+ t487 (ite (<= 0 (ite (<= (+ t422 (- t487)) filter_width) (+ t422 (- t487)) filter_width)) (ite (<= (+ t422 (- t487)) filter_width) (+ t422 (- t487)) filter_width) 0))) (- t424)) (+ t493 (+ (ite (<= (+ -32 output.s0.c.c) (+ -32 t420)) (+ -32 output.s0.c.c) (+ -32 t420)) (+ t491 (+ (+ (+ (+ t419 (- t482)) (- t483)) (- t484)) (- t419))))))) (bitvector 16))) (⊢ (= 1 idx$325) (app sum 0))) (ite x?$390 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$390 (bv #x0000 16) (bv #x0001 16)) (ite (bvule (ite* (⊢ (= 0 idx$325) (zero-extend (app input (+ (+ (+ sum.s1.r$x.rebased (+ t487 (ite (<= 0 (ite (<= (+ t422 (- t487)) filter_width) (+ t422 (- t487)) filter_width)) (ite (<= (+ t422 (- t487)) filter_width) (+ t422 (- t487)) filter_width) 0))) (- t424)) (+ t493 (+ (ite (<= (+ -32 output.s0.c.c) (+ -32 t420)) (+ -32 output.s0.c.c) (+ -32 t420)) (+ t491 (+ (+ (+ (+ t419 (- t482)) (- t483)) (- t484)) (- t419))))))) (bitvector 16))) (⊢ (= 1 idx$325) (app sum 0))) (bvadd (bv #xffff 16) (bvneg (ite x?$390 (bv #x0000 16) (bv #x0001 16))))) (ite* (⊢ (= 0 idx$325) (zero-extend (app input (+ (+ (+ sum.s1.r$x.rebased (+ t487 (ite (<= 0 (ite (<= (+ t422 (- t487)) filter_width) (+ t422 (- t487)) filter_width)) (ite (<= (+ t422 (- t487)) filter_width) (+ t422 (- t487)) filter_width) 0))) (- t424)) (+ t493 (+ (ite (<= (+ -32 output.s0.c.c) (+ -32 t420)) (+ -32 output.s0.c.c) (+ -32 t420)) (+ t491 (+ (+ (+ (+ t419 (- t482)) (- t483)) (- t484)) (- t419))))))) (bitvector 16))) (⊢ (= 1 idx$325) (app sum 0))) (bvadd (bv #xffff 16) (bvneg (ite x?$390 (bv #x0000 16) (bv #x0001 16))))))) (bv #x0000 16)))))) (bv #x0001 16)))))
Ran synthesizer for 118 ms
(model
 [idx$325 1]
 [idx$326 0]
 [x?$389 #t]
 [x?$390 #t]
 [x?$391 #t])
(vec-add
 (load (buffer sum 'uint16) (ramp 0 1 32) (aligned 0 0))
 (vec-cast
  (load
   (buffer input 'uint8)
   (ramp
    (sca-add
     (sca-mul
      (sca-add sum.s1.r$x.rebased (var-lookup 't343))
      (var-lookup 'input.stride.1))
     (var-lookup 't350))
    1
    32)
   (aligned 1 0))
  'uint16
  32))
(vs-mpy-add
 ...
 #<load-data>
 (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
 #f
 #f
 #f
 'uint16)
Ran bounds analysis for 28 ms
Ran bounds analysis for 24 ms
"Success?"
#t
(vs-mpy-add ... #<load-data> (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8))) #f #f #f 'uint16)

(x86) Successfully found an equivalent IR expression.

(vs-mpy-add
 ...
 #<load-data>
 (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
 #f
 #f
 #f
 'uint16)

Synthesis time: 0 seconds

Synthesizing x86 for:
(vec-add
 (load (buffer sum 'uint16) (ramp 0 1 32) (aligned 0 0))
 (vec-cast
  (load
   (buffer input 'uint8)
   (ramp
    (sca-add
     (sca-mul
      (sca-add sum.s1.r$x.rebased (var-lookup 't343))
      (var-lookup 'input.stride.1))
     (var-lookup 't350))
    1
    32)
   (aligned 1 0))
  'uint16
  32))


synthesize-x86 output:
#<void>
#f
