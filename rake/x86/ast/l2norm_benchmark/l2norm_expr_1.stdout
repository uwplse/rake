Lifting input expression to x86 IR...
=====================================

"Building Expr:"
(load
 (buffer t14.s.widened.sum_input_sq.s1.rx$x.r16-buf 'int16)
 (ramp 0 1 16)
 (aligned 0 0))
"Fold templates"
'()
here()

"Replace templates"
'()
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (load
 (buffer t14.s.widened.sum_input_sq.s1.rx$x.r16-buf 'int16)
 (ramp 0 1 16)
 (aligned 0 0))
template:
  #<load-data>
axioms:
  '()
optimized-halide-expr:
  (load
 (buffer t14.s.widened.sum_input_sq.s1.rx$x.r16-buf 'int16)
 (ramp 0 1 16)
 (aligned 0 0))
optimized-template:
  #<load-data>
optimized Halide 0:
  (int16_t (app t14.s.widened.sum_input_sq.s1.rx$x.r16-buf 0))
optimized x86 0:
  (int16_t (app t14.s.widened.sum_input_sq.s1.rx$x.r16-buf 0))
Ran synthesizer for 21 ms
(model
 [idx$0 0])
(load
 (buffer t14.s.widened.sum_input_sq.s1.rx$x.r16-buf 'int16)
 (ramp 0 1 16)
 (aligned 0 0))
#<load-data>
Ran bounds analysis for 25 ms
Ran bounds analysis for 17 ms
"Extended success?"
#t
#<load-data>
"Building Expr:"
(vec-cast
 (load
  (buffer t14.s.widened.sum_input_sq.s1.rx$x.r16-buf 'int16)
  (ramp 0 1 16)
  (aligned 0 0))
 'int32
 16)
"Fold templates"
'(#<load-data>)
here(#<load-data>)

"Replace templates"
'()
run-x86-synthesizer
halide-expr:
  (vec-cast
 (load
  (buffer t14.s.widened.sum_input_sq.s1.rx$x.r16-buf 'int16)
  (ramp 0 1 16)
  (aligned 0 0))
 'int32
 16)
template:
  #<load-data>
axioms:
  '()
optimized-halide-expr:
  (vec-cast
 (load
  (buffer t14.s.widened.sum_input_sq.s1.rx$x.r16-buf 'int16)
  (ramp 0 1 16)
  (aligned 0 0))
 'int32
 16)
optimized-template:
  #<load-data>
optimized Halide 0:
  (int32_t
 (sign-extend (app t14.s.widened.sum_input_sq.s1.rx$x.r16-buf 0) (bitvector 32)))
optimized x86 0:
  (int16_t (app t14.s.widened.sum_input_sq.s1.rx$x.r16-buf 0))
Ran synthesizer for 2 ms
(unsat)
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (vec-cast
 (load
  (buffer t14.s.widened.sum_input_sq.s1.rx$x.r16-buf 'int16)
  (ramp 0 1 16)
  (aligned 0 0))
 'int32
 16)
template:
  (cast ... #<load-data> 'int32 #f)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-cast #<abstr-halide-expr> 'int32 16)
optimized-template:
  (cast ... #<abstr-expr> 'int32 #f)
optimized Halide 0:
  (int32_t (sign-extend (app abstr-vals$129 0) (bitvector 32)))
optimized x86 0:
  (int32_t (sign-extend (app abstr-vals$129 0) (bitvector 32)))
Ran synthesizer for 19 ms
(model)
(vec-cast #<abstr-halide-expr> 'int32 16)
(cast ... #<load-data> 'int32 #f)
Ran bounds analysis for 37 ms
Ran bounds analysis for 30 ms
"Extended success?"
#t
(cast ... #<load-data> 'int32 #f)
"Building Expr:"
(vec-mul
 (vec-cast
  (load
   (buffer t14.s.widened.sum_input_sq.s1.rx$x.r16-buf 'int16)
   (ramp 0 1 16)
   (aligned 0 0))
  'int32
  16)
 (vec-cast
  (load
   (buffer t14.s.widened.sum_input_sq.s1.rx$x.r16-buf 'int16)
   (ramp 0 1 16)
   (aligned 0 0))
  'int32
  16))
"Fold templates"
(list
 #<load-data>
 (cast ... #<load-data> 'int32 x?$131)
 #<load-data>
 (cast ... #<load-data> 'int32 x?$196))
here(#<load-data> #(struct:cast ... #<load-data> int32 x?$131) #<load-data> #(struct:cast ... #<load-data> int32 x?$196))

(list (vv-mpy-add ... #<load-data> '(1) (! x?$453) (! x?$454) (! x?$455) 'int32) (vv-mpy-add ... #<load-data> '(1) (! x?$456) (! x?$457) (! x?$458) 'int32))
(list (vv-mpy-add ... #<load-data> '(1) (! x?$651) (! x?$652) (! x?$653) 'int32) (vv-mpy-add ... #<load-data> '(1) (! x?$654) (! x?$655) (! x?$656) 'int32))
"Replace templates"
(list
 (vv-mpy-add ... #<load-data> '(1) (! x?$453) (! x?$454) (! x?$455) 'int32)
 (vv-mpy-add ... #<load-data> '(1) (! x?$456) (! x?$457) (! x?$458) 'int32)
 (vv-mpy-add ... #<load-data> '(1) (! x?$651) (! x?$652) (! x?$653) 'int32)
 (vv-mpy-add ... #<load-data> '(1) (! x?$654) (! x?$655) (! x?$656) 'int32))
run-x86-synthesizer
halide-expr:
  (vec-mul
 (vec-cast
  (load
   (buffer t14.s.widened.sum_input_sq.s1.rx$x.r16-buf 'int16)
   (ramp 0 1 16)
   (aligned 0 0))
  'int32
  16)
 (vec-cast
  (load
   (buffer t14.s.widened.sum_input_sq.s1.rx$x.r16-buf 'int16)
   (ramp 0 1 16)
   (aligned 0 0))
  'int32
  16))
template:
  #<load-data>
axioms:
  '()
optimized-halide-expr:
  (vec-mul
 (vec-cast
  (load
   (buffer t14.s.widened.sum_input_sq.s1.rx$x.r16-buf 'int16)
   (ramp 0 1 16)
   (aligned 0 0))
  'int32
  16)
 (vec-cast
  (load
   (buffer t14.s.widened.sum_input_sq.s1.rx$x.r16-buf 'int16)
   (ramp 0 1 16)
   (aligned 0 0))
  'int32
  16))
optimized-template:
  #<load-data>
optimized Halide 0:
  (int32_t
 (bvmul (sign-extend (app t14.s.widened.sum_input_sq.s1.rx$x.r16-buf 0) (bitvector 32)) (sign-extend (app t14.s.widened.sum_input_sq.s1.rx$x.r16-buf 0) (bitvector 32))))
optimized x86 0:
  (int16_t (app t14.s.widened.sum_input_sq.s1.rx$x.r16-buf 0))
Ran synthesizer for 1 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-mul
 (vec-cast
  (load
   (buffer t14.s.widened.sum_input_sq.s1.rx$x.r16-buf 'int16)
   (ramp 0 1 16)
   (aligned 0 0))
  'int32
  16)
 (vec-cast
  (load
   (buffer t14.s.widened.sum_input_sq.s1.rx$x.r16-buf 'int16)
   (ramp 0 1 16)
   (aligned 0 0))
  'int32
  16))
template:
  #<load-data>
axioms:
  '()
optimized-halide-expr:
  (vec-mul
 (vec-cast
  (load
   (buffer t14.s.widened.sum_input_sq.s1.rx$x.r16-buf 'int16)
   (ramp 0 1 16)
   (aligned 0 0))
  'int32
  16)
 (vec-cast
  (load
   (buffer t14.s.widened.sum_input_sq.s1.rx$x.r16-buf 'int16)
   (ramp 0 1 16)
   (aligned 0 0))
  'int32
  16))
optimized-template:
  #<load-data>
optimized Halide 0:
  (int32_t
 (bvmul (sign-extend (app t14.s.widened.sum_input_sq.s1.rx$x.r16-buf 0) (bitvector 32)) (sign-extend (app t14.s.widened.sum_input_sq.s1.rx$x.r16-buf 0) (bitvector 32))))
optimized x86 0:
  (int16_t (app t14.s.widened.sum_input_sq.s1.rx$x.r16-buf 0))
Ran synthesizer for 2 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-mul
 (vec-cast
  (load
   (buffer t14.s.widened.sum_input_sq.s1.rx$x.r16-buf 'int16)
   (ramp 0 1 16)
   (aligned 0 0))
  'int32
  16)
 (vec-cast
  (load
   (buffer t14.s.widened.sum_input_sq.s1.rx$x.r16-buf 'int16)
   (ramp 0 1 16)
   (aligned 0 0))
  'int32
  16))
template:
  (cast ... #<load-data> 'int32 x?$131)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-mul
 (vec-cast #<abstr-halide-expr> 'int32 16)
 (vec-cast #<abstr-halide-expr> 'int32 16))
optimized-template:
  (cast ... #<abstr-expr> 'int32 x?$131)
optimized Halide 0:
  (int32_t
 (bvmul (sign-extend (app abstr-vals$657 0) (bitvector 32)) (sign-extend (app abstr-vals$657 0) (bitvector 32))))
optimized x86 0:
  (int32_t (sign-extend (app abstr-vals$657 0) (bitvector 32)))
Ran synthesizer for 104 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-mul
 (vec-cast
  (load
   (buffer t14.s.widened.sum_input_sq.s1.rx$x.r16-buf 'int16)
   (ramp 0 1 16)
   (aligned 0 0))
  'int32
  16)
 (vec-cast
  (load
   (buffer t14.s.widened.sum_input_sq.s1.rx$x.r16-buf 'int16)
   (ramp 0 1 16)
   (aligned 0 0))
  'int32
  16))
template:
  (cast ... #<load-data> 'int32 x?$196)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-mul
 (vec-cast #<abstr-halide-expr> 'int32 16)
 (vec-cast #<abstr-halide-expr> 'int32 16))
optimized-template:
  (cast ... #<abstr-expr> 'int32 x?$196)
optimized Halide 0:
  (int32_t
 (bvmul (sign-extend (app abstr-vals$658 0) (bitvector 32)) (sign-extend (app abstr-vals$658 0) (bitvector 32))))
optimized x86 0:
  (int32_t (sign-extend (app abstr-vals$658 0) (bitvector 32)))
Ran synthesizer for 102 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-mul
 (vec-cast
  (load
   (buffer t14.s.widened.sum_input_sq.s1.rx$x.r16-buf 'int16)
   (ramp 0 1 16)
   (aligned 0 0))
  'int32
  16)
 (vec-cast
  (load
   (buffer t14.s.widened.sum_input_sq.s1.rx$x.r16-buf 'int16)
   (ramp 0 1 16)
   (aligned 0 0))
  'int32
  16))
template:
  (vv-mpy-add ... #<load-data> '(1) (! x?$453) (! x?$454) (! x?$455) 'int32)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-mul
 (vec-cast #<abstr-halide-expr> 'int32 16)
 (vec-cast #<abstr-halide-expr> 'int32 16))
optimized-template:
  (vv-mpy-add ... #<abstr-expr> '(1) (! x?$453) (! x?$454) (! x?$455) 'int32)
optimized Halide 0:
  (int32_t
 (bvmul (sign-extend (app abstr-vals$659 0) (bitvector 32)) (sign-extend (app abstr-vals$659 0) (bitvector 32))))
optimized x86 0:
  (int32_t
 (ite* (⊢ (&& x?$455 (! (&& (! x?$453) (! x?$455)))) (ite x?$453 (bvadd (bvmul (sign-extend (app abstr-vals$659 0) (bitvector 32)) (sign-extend (app abstr-vals$659 1) (bitvector 32))) (ite x?$454 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$454 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (bvmul (sign-extend (app abstr-vals$659 0) (bitvector 32)) (sign-extend (app abstr-vals$659 1) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$454 (bv #x00000000 32) (bv #x00000001 32))))) (bvmul (sign-extend (app abstr-vals$659 0) (bitvector 32)) (sign-extend (app abstr-vals$659 1) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$454 (bv #x00000000 32) (bv #x00000001 32)))))))) (⊢ (|| (&& (! x?$453) (! x?$455)) (&& (! x?$455) (! (&& (! x?$453) (! x?$455))))) (bvashr (ite x?$453 (bvadd (bvmul (sign-extend (app abstr-vals$659 0) (bitvector 32)) (sign-extend (app abstr-vals$659 1) (bitvector 32))) (ite x?$454 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$454 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (bvmul (sign-extend (app abstr-vals$659 0) (bitvector 32)) (sign-extend (app abstr-vals$659 1) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$454 (bv #x00000000 32) (bv #x00000001 32))))) (bvmul (sign-extend (app abstr-vals$659 0) (bitvector 32)) (sign-extend (app abstr-vals$659 1) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$454 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000001 32)))))
Ran synthesizer for 258 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-mul
 (vec-cast
  (load
   (buffer t14.s.widened.sum_input_sq.s1.rx$x.r16-buf 'int16)
   (ramp 0 1 16)
   (aligned 0 0))
  'int32
  16)
 (vec-cast
  (load
   (buffer t14.s.widened.sum_input_sq.s1.rx$x.r16-buf 'int16)
   (ramp 0 1 16)
   (aligned 0 0))
  'int32
  16))
template:
  (vv-mpy-add ... #<load-data> '(1) (! x?$456) (! x?$457) (! x?$458) 'int32)
axioms:
  '()
optimized-halide-expr:
  (vec-mul
 (vec-cast
  (load
   (buffer t14.s.widened.sum_input_sq.s1.rx$x.r16-buf 'int16)
   (ramp 0 1 16)
   (aligned 0 0))
  'int32
  16)
 (vec-cast
  (load
   (buffer t14.s.widened.sum_input_sq.s1.rx$x.r16-buf 'int16)
   (ramp 0 1 16)
   (aligned 0 0))
  'int32
  16))
optimized-template:
  (vv-mpy-add ... #<load-data> '(1) (! x?$456) (! x?$457) (! x?$458) 'int32)
optimized Halide 0:
  (int32_t
 (bvmul (sign-extend (app t14.s.widened.sum_input_sq.s1.rx$x.r16-buf 0) (bitvector 32)) (sign-extend (app t14.s.widened.sum_input_sq.s1.rx$x.r16-buf 0) (bitvector 32))))
optimized x86 0:
  (int32_t
 (ite* (⊢ (&& x?$458 (! (&& (! x?$456) (! x?$458)))) (ite x?$456 (bvadd (bvmul (sign-extend (app t14.s.widened.sum_input_sq.s1.rx$x.r16-buf 0) (bitvector 32)) (sign-extend (app t14.s.widened.sum_input_sq.s1.rx$x.r16-buf 0) (bitvector 32))) (ite x?$457 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$457 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (bvmul (sign-extend (app t14.s.widened.sum_input_sq.s1.rx$x.r16-buf 0) (bitvector 32)) (sign-extend (app t14.s.widened.sum_input_sq.s1.rx$x.r16-buf 0) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$457 (bv #x00000000 32) (bv #x00000001 32))))) (bvmul (sign-extend (app t14.s.widened.sum_input_sq.s1.rx$x.r16-buf 0) (bitvector 32)) (sign-extend (app t14.s.widened.sum_input_sq.s1.rx$x.r16-buf 0) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$457 (bv #x00000000 32) (bv #x00000001 32)))))))) (⊢ (|| (&& (! x?$456) (! x?$458)) (&& (! x?$458) (! (&& (! x?$456) (! x?$458))))) (bvashr (ite x?$456 (bvadd (bvmul (sign-extend (app t14.s.widened.sum_input_sq.s1.rx$x.r16-buf 0) (bitvector 32)) (sign-extend (app t14.s.widened.sum_input_sq.s1.rx$x.r16-buf 0) (bitvector 32))) (ite x?$457 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$457 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (bvmul (sign-extend (app t14.s.widened.sum_input_sq.s1.rx$x.r16-buf 0) (bitvector 32)) (sign-extend (app t14.s.widened.sum_input_sq.s1.rx$x.r16-buf 0) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$457 (bv #x00000000 32) (bv #x00000001 32))))) (bvmul (sign-extend (app t14.s.widened.sum_input_sq.s1.rx$x.r16-buf 0) (bitvector 32)) (sign-extend (app t14.s.widened.sum_input_sq.s1.rx$x.r16-buf 0) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$457 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000001 32)))))
Ran synthesizer for 51 ms
(model
 [idx$261 0]
 [idx$262 0]
 [x?$456 #f]
 [x?$457 #t]
 [x?$458 #t])
(vec-mul
 (vec-cast
  (load
   (buffer t14.s.widened.sum_input_sq.s1.rx$x.r16-buf 'int16)
   (ramp 0 1 16)
   (aligned 0 0))
  'int32
  16)
 (vec-cast
  (load
   (buffer t14.s.widened.sum_input_sq.s1.rx$x.r16-buf 'int16)
   (ramp 0 1 16)
   (aligned 0 0))
  'int32
  16))
(vv-mpy-add ... #<load-data> '(1) #t #f #f 'int32)
Ran bounds analysis for 747 ms
Ran bounds analysis for 261 ms
"Success?"
#t
(vv-mpy-add ... #<load-data> '(1) #t #f #f 'int32)

(x86) Successfully found an equivalent IR expression.

(vv-mpy-add ... #<load-data> '(1) #t #f #f 'int32)

Synthesis time: 2 seconds

Synthesizing x86 for:
(vec-mul
 (vec-cast
  (load
   (buffer t14.s.widened.sum_input_sq.s1.rx$x.r16-buf 'int16)
   (ramp 0 1 16)
   (aligned 0 0))
  'int32
  16)
 (vec-cast
  (load
   (buffer t14.s.widened.sum_input_sq.s1.rx$x.r16-buf 'int16)
   (ramp 0 1 16)
   (aligned 0 0))
  'int32
  16))


synthesize-x86 output:
#<void>
#f
