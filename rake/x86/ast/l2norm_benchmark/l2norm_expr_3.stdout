Lifting input expression to x86 IR...
=====================================

"Building Expr:"
(sca-broadcast (int32_t (bv #x00000001 32)) 16)
"Fold templates"
'()
here()

"Replace templates"
'()
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (sca-broadcast (int32_t (bv #x00000001 32)) 16)
template:
  (broadcast ... (int32_t (bv #x00000001 32)))
axioms:
  '()
optimized-halide-expr:
  (sca-broadcast (int32_t (bv #x00000001 32)) 16)
optimized-template:
  (broadcast ... (int32_t (bv #x00000001 32)))
optimized Halide 0:
  (int32_t (bv #x00000001 32))
optimized x86 0:
  (int32_t (bv #x00000001 32))
Ran synthesizer for 18 ms
(model)
(sca-broadcast (int32_t (bv #x00000001 32)) 16)
(broadcast ... (int32_t (bv #x00000001 32)))
Ran bounds analysis for 23 ms
Ran bounds analysis for 15 ms
"Extended success?"
#t
(broadcast ... (int32_t (bv #x00000001 32)))
"Building Expr:"
(load
 (buffer input 'uint8)
 (ramp
  (sca-add
   (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
   (sca-sub
    (sca-sub (var-lookup 't101) (var-lookup 't106))
    (var-lookup 'input.min.0)))
  1
  16)
 (aligned 1 0))
"Fold templates"
'()
here()

"Replace templates"
'()
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (load
 (buffer input 'uint8)
 (ramp
  (sca-add
   (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
   (sca-sub
    (sca-sub (var-lookup 't101) (var-lookup 't106))
    (var-lookup 'input.min.0)))
  1
  16)
 (aligned 1 0))
template:
  #<load-data>
axioms:
  '()
optimized-halide-expr:
  (load
 (buffer input 'uint8)
 (ramp
  (sca-add
   (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
   (sca-sub
    (sca-sub (var-lookup 't101) (var-lookup 't106))
    (var-lookup 'input.min.0)))
  1
  16)
 (aligned 1 0))
optimized-template:
  #<load-data>
optimized Halide 0:
  (uint8_t
 (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))))
optimized x86 0:
  (uint8_t
 (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))))
Ran synthesizer for 19 ms
(model
 [idx$0 0])
(load
 (buffer input 'uint8)
 (ramp
  (sca-add
   (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
   (sca-sub
    (sca-sub (var-lookup 't101) (var-lookup 't106))
    (var-lookup 'input.min.0)))
  1
  16)
 (aligned 1 0))
#<load-data>
Ran bounds analysis for 19 ms
Ran bounds analysis for 10 ms
"Extended success?"
#t
#<load-data>
"Building Expr:"
(vec-cast
 (load
  (buffer input 'uint8)
  (ramp
   (sca-add
    (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
    (sca-sub
     (sca-sub (var-lookup 't101) (var-lookup 't106))
     (var-lookup 'input.min.0)))
   1
   16)
  (aligned 1 0))
 'int16
 16)
"Fold templates"
'(#<load-data>)
here(#<load-data>)

"Replace templates"
'()
run-x86-synthesizer
halide-expr:
  (vec-cast
 (load
  (buffer input 'uint8)
  (ramp
   (sca-add
    (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
    (sca-sub
     (sca-sub (var-lookup 't101) (var-lookup 't106))
     (var-lookup 'input.min.0)))
   1
   16)
  (aligned 1 0))
 'int16
 16)
template:
  #<load-data>
axioms:
  '()
optimized-halide-expr:
  (vec-cast
 (load
  (buffer input 'uint8)
  (ramp
   (sca-add
    (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
    (sca-sub
     (sca-sub (var-lookup 't101) (var-lookup 't106))
     (var-lookup 'input.min.0)))
   1
   16)
  (aligned 1 0))
 'int16
 16)
optimized-template:
  #<load-data>
optimized Halide 0:
  (int16_t
 (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)))
optimized x86 0:
  (uint8_t
 (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))))
Ran synthesizer for 1 ms
(unsat)
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (vec-cast
 (load
  (buffer input 'uint8)
  (ramp
   (sca-add
    (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
    (sca-sub
     (sca-sub (var-lookup 't101) (var-lookup 't106))
     (var-lookup 'input.min.0)))
   1
   16)
  (aligned 1 0))
 'int16
 16)
template:
  (cast ... #<load-data> 'int16 #f)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-cast #<abstr-halide-expr> 'int16 16)
optimized-template:
  (cast ... #<abstr-expr> 'int16 #f)
optimized Halide 0:
  (int16_t (zero-extend (app abstr-vals$129 0) (bitvector 16)))
optimized x86 0:
  (int16_t (zero-extend (app abstr-vals$129 0) (bitvector 16)))
Ran synthesizer for 15 ms
(model)
(vec-cast #<abstr-halide-expr> 'int16 16)
(cast ... #<load-data> 'int16 #f)
Ran bounds analysis for 20 ms
Ran bounds analysis for 12 ms
"Extended success?"
#t
(cast ... #<load-data> 'int16 #f)
"Building Expr:"
(sca-broadcast (uint8_t input_zero) 16)
"Fold templates"
'()
here()

"Replace templates"
'()
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (sca-broadcast (uint8_t input_zero) 16)
template:
  (broadcast ... (uint8_t input_zero))
axioms:
  '()
optimized-halide-expr:
  (sca-broadcast (uint8_t input_zero) 16)
optimized-template:
  (broadcast ... (uint8_t input_zero))
optimized Halide 0:
  (uint8_t input_zero)
optimized x86 0:
  (uint8_t input_zero)
Ran synthesizer for 15 ms
(model)
(sca-broadcast (uint8_t input_zero) 16)
(broadcast ... (uint8_t input_zero))
Ran bounds analysis for 18 ms
Ran bounds analysis for 10 ms
"Extended success?"
#t
(broadcast ... (uint8_t input_zero))
"Building Expr:"
(vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16)
"Fold templates"
'()
here()

"Replace templates"
'()
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16)
template:
  (cast ... (broadcast ... (uint8_t input_zero)) 'int16 #f)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-cast #<abstr-halide-expr> 'int16 16)
optimized-template:
  (cast ... #<abstr-expr> 'int16 #f)
optimized Halide 0:
  (int16_t (zero-extend (app abstr-vals$131 0) (bitvector 16)))
optimized x86 0:
  (int16_t (zero-extend (app abstr-vals$131 0) (bitvector 16)))
Ran synthesizer for 14 ms
(model)
(vec-cast #<abstr-halide-expr> 'int16 16)
(cast ... (broadcast ... (uint8_t input_zero)) 'int16 #f)
Ran bounds analysis for 21 ms
Ran bounds analysis for 14 ms
"Extended success?"
#t
(cast ... (broadcast ... (uint8_t input_zero)) 'int16 #f)
"Building Expr:"
(vec-sub
 (vec-cast
  (load
   (buffer input 'uint8)
   (ramp
    (sca-add
     (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
     (sca-sub
      (sca-sub (var-lookup 't101) (var-lookup 't106))
      (var-lookup 'input.min.0)))
    1
    16)
   (aligned 1 0))
  'int16
  16)
 (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
"Fold templates"
(list
 #<load-data>
 (cast ... #<load-data> 'int16 x?$133)
 (cast ... (broadcast ... (uint8_t input_zero)) 'int16 x?$198))
here(#<load-data> #(struct:cast ... #<load-data> int16 x?$133) #(struct:cast ... #(struct:broadcast ... #(struct:uint8_t input_zero)) int16 x?$198))

"Replace templates"
(list
 (vs-mpy-add
  ...
  #<load-data>
  (list (int8_t (bv #x01 8)) (int8_t (bv #xff 8)))
  (! x?$455)
  (! x?$456)
  (! x?$457)
  'int16)
 (vs-mpy-add
  ...
  (broadcast ... (uint8_t input_zero))
  (list (int8_t (bv #x01 8)) (int8_t (bv #xff 8)))
  (! x?$650)
  (! x?$651)
  (! x?$652)
  'int16))
run-x86-synthesizer
halide-expr:
  (vec-sub
 (vec-cast
  (load
   (buffer input 'uint8)
   (ramp
    (sca-add
     (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
     (sca-sub
      (sca-sub (var-lookup 't101) (var-lookup 't106))
      (var-lookup 'input.min.0)))
    1
    16)
   (aligned 1 0))
  'int16
  16)
 (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
template:
  #<load-data>
axioms:
  '()
optimized-halide-expr:
  (vec-sub
 (vec-cast
  (load
   (buffer input 'uint8)
   (ramp
    (sca-add
     (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
     (sca-sub
      (sca-sub (var-lookup 't101) (var-lookup 't106))
      (var-lookup 'input.min.0)))
    1
    16)
   (aligned 1 0))
  'int16
  16)
 (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
optimized-template:
  #<load-data>
optimized Halide 0:
  (int16_t
 (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))))
optimized x86 0:
  (uint8_t
 (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))))
run-x86-synthesizer
halide-expr:
  (vec-sub
 (vec-cast
  (load
   (buffer input 'uint8)
   (ramp
    (sca-add
     (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
     (sca-sub
      (sca-sub (var-lookup 't101) (var-lookup 't106))
      (var-lookup 'input.min.0)))
    1
    16)
   (aligned 1 0))
  'int16
  16)
 (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
template:
  (cast ... #<load-data> 'int16 x?$133)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-sub
 (vec-cast #<abstr-halide-expr> 'int16 16)
 (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
optimized-template:
  (cast ... #<abstr-expr> 'int16 x?$133)
optimized Halide 0:
  (int16_t
 (bvadd (bvneg (zero-extend input_zero (bitvector 16))) (zero-extend (app abstr-vals$653 0) (bitvector 16))))
optimized x86 0:
  (int16_t (zero-extend (app abstr-vals$653 0) (bitvector 16)))
run-x86-synthesizer
halide-expr:
  (vec-sub
 (vec-cast
  (load
   (buffer input 'uint8)
   (ramp
    (sca-add
     (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
     (sca-sub
      (sca-sub (var-lookup 't101) (var-lookup 't106))
      (var-lookup 'input.min.0)))
    1
    16)
   (aligned 1 0))
  'int16
  16)
 (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
template:
  (vs-mpy-add
 ...
 #<load-data>
 (list (int8_t (bv #x01 8)) (int8_t (bv #xff 8)))
 (! x?$455)
 (! x?$456)
 (! x?$457)
 'int16)
axioms:
  '()
optimized-halide-expr:
  (vec-sub
 (vec-cast
  (load
   (buffer input 'uint8)
   (ramp
    (sca-add
     (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
     (sca-sub
      (sca-sub (var-lookup 't101) (var-lookup 't106))
      (var-lookup 'input.min.0)))
    1
    16)
   (aligned 1 0))
  'int16
  16)
 (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
optimized-template:
  (vs-mpy-add
 ...
 #<load-data>
 (list (int8_t (bv #x01 8)) (int8_t (bv #xff 8)))
 (! x?$455)
 (! x?$456)
 (! x?$457)
 'int16)
optimized Halide 0:
  (int16_t
 (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))))
optimized x86 0:
  (int16_t
 (ite* (⊢ (&& x?$457 (! (&& (! x?$455) (! x?$457)))) (ite x?$455 (bvadd (bvneg (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16))) (ite x?$455 (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (ite x?$456 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$456 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$456 (bv #x0000 16) (bv #x0001 16))))) (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$456 (bv #x0000 16) (bv #x0001 16)))))))) (bvadd (ite x?$455 (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (ite x?$456 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$456 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$456 (bv #x0000 16) (bv #x0001 16))))) (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$456 (bv #x0000 16) (bv #x0001 16))))))) (ite (bvsle (bvadd (bv #x8000 16) (bvneg (ite (bvsle (ite x?$455 (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (ite x?$456 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$456 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$456 (bv #x0000 16) (bv #x0001 16))))) (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$456 (bv #x0000 16) (bv #x0001 16))))))) (bv #x0000 16)) (ite x?$455 (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (ite x?$456 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$456 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$456 (bv #x0000 16) (bv #x0001 16))))) (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$456 (bv #x0000 16) (bv #x0001 16))))))) (bv #x0000 16)))) (ite (bvsle (bvneg (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16))) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$455 (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (ite x?$456 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$456 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$456 (bv #x0000 16) (bv #x0001 16))))) (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$456 (bv #x0000 16) (bv #x0001 16)))))))) (ite x?$455 (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (ite x?$456 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$456 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$456 (bv #x0000 16) (bv #x0001 16))))) (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$456 (bv #x0000 16) (bv #x0001 16))))))) (bv #x0000 16))))) (bvneg (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16))) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$455 (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (ite x?$456 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$456 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$456 (bv #x0000 16) (bv #x0001 16))))) (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$456 (bv #x0000 16) (bv #x0001 16)))))))) (ite x?$455 (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (ite x?$456 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$456 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$456 (bv #x0000 16) (bv #x0001 16))))) (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$456 (bv #x0000 16) (bv #x0001 16))))))) (bv #x0000 16)))))) (ite (bvsle (bvneg (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16))) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$455 (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (ite x?$456 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$456 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$456 (bv #x0000 16) (bv #x0001 16))))) (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$456 (bv #x0000 16) (bv #x0001 16)))))))) (ite x?$455 (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (ite x?$456 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$456 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$456 (bv #x0000 16) (bv #x0001 16))))) (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$456 (bv #x0000 16) (bv #x0001 16))))))) (bv #x0000 16))))) (bvneg (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16))) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$455 (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (ite x?$456 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$456 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$456 (bv #x0000 16) (bv #x0001 16))))) (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$456 (bv #x0000 16) (bv #x0001 16)))))))) (ite x?$455 (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (ite x?$456 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$456 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$456 (bv #x0000 16) (bv #x0001 16))))) (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$456 (bv #x0000 16) (bv #x0001 16))))))) (bv #x0000 16))))) (bvadd (bv #x8000 16) (bvneg (ite (bvsle (ite x?$455 (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (ite x?$456 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$456 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$456 (bv #x0000 16) (bv #x0001 16))))) (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$456 (bv #x0000 16) (bv #x0001 16))))))) (bv #x0000 16)) (ite x?$455 (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (ite x?$456 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$456 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$456 (bv #x0000 16) (bv #x0001 16))))) (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$456 (bv #x0000 16) (bv #x0001 16))))))) (bv #x0000 16)))))))) (⊢ (|| (&& (! x?$455) (! x?$457)) (&& (! x?$457) (! (&& (! x?$455) (! x?$457))))) (bvashr (ite x?$455 (bvadd (bvneg (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16))) (ite x?$455 (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (ite x?$456 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$456 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$456 (bv #x0000 16) (bv #x0001 16))))) (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$456 (bv #x0000 16) (bv #x0001 16)))))))) (bvadd (ite x?$455 (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (ite x?$456 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$456 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$456 (bv #x0000 16) (bv #x0001 16))))) (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$456 (bv #x0000 16) (bv #x0001 16))))))) (ite (bvsle (bvadd (bv #x8000 16) (bvneg (ite (bvsle (ite x?$455 (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (ite x?$456 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$456 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$456 (bv #x0000 16) (bv #x0001 16))))) (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$456 (bv #x0000 16) (bv #x0001 16))))))) (bv #x0000 16)) (ite x?$455 (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (ite x?$456 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$456 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$456 (bv #x0000 16) (bv #x0001 16))))) (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$456 (bv #x0000 16) (bv #x0001 16))))))) (bv #x0000 16)))) (ite (bvsle (bvneg (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16))) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$455 (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (ite x?$456 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$456 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$456 (bv #x0000 16) (bv #x0001 16))))) (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$456 (bv #x0000 16) (bv #x0001 16)))))))) (ite x?$455 (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (ite x?$456 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$456 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$456 (bv #x0000 16) (bv #x0001 16))))) (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$456 (bv #x0000 16) (bv #x0001 16))))))) (bv #x0000 16))))) (bvneg (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16))) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$455 (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (ite x?$456 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$456 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$456 (bv #x0000 16) (bv #x0001 16))))) (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$456 (bv #x0000 16) (bv #x0001 16)))))))) (ite x?$455 (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (ite x?$456 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$456 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$456 (bv #x0000 16) (bv #x0001 16))))) (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$456 (bv #x0000 16) (bv #x0001 16))))))) (bv #x0000 16)))))) (ite (bvsle (bvneg (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16))) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$455 (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (ite x?$456 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$456 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$456 (bv #x0000 16) (bv #x0001 16))))) (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$456 (bv #x0000 16) (bv #x0001 16)))))))) (ite x?$455 (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (ite x?$456 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$456 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$456 (bv #x0000 16) (bv #x0001 16))))) (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$456 (bv #x0000 16) (bv #x0001 16))))))) (bv #x0000 16))))) (bvneg (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16))) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$455 (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (ite x?$456 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$456 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$456 (bv #x0000 16) (bv #x0001 16))))) (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$456 (bv #x0000 16) (bv #x0001 16)))))))) (ite x?$455 (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (ite x?$456 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$456 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$456 (bv #x0000 16) (bv #x0001 16))))) (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$456 (bv #x0000 16) (bv #x0001 16))))))) (bv #x0000 16))))) (bvadd (bv #x8000 16) (bvneg (ite (bvsle (ite x?$455 (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (ite x?$456 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$456 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$456 (bv #x0000 16) (bv #x0001 16))))) (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$456 (bv #x0000 16) (bv #x0001 16))))))) (bv #x0000 16)) (ite x?$455 (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (ite x?$456 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$456 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$456 (bv #x0000 16) (bv #x0001 16))))) (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$456 (bv #x0000 16) (bv #x0001 16))))))) (bv #x0000 16))))))) (bv #x0001 16)))))
run-x86-synthesizer
halide-expr:
  (vec-sub
 (vec-cast
  (load
   (buffer input 'uint8)
   (ramp
    (sca-add
     (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
     (sca-sub
      (sca-sub (var-lookup 't101) (var-lookup 't106))
      (var-lookup 'input.min.0)))
    1
    16)
   (aligned 1 0))
  'int16
  16)
 (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
template:
  (cast ... (broadcast ... (uint8_t input_zero)) 'int16 x?$198)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-sub
 (vec-cast
  (load
   (buffer input 'uint8)
   (ramp
    (sca-add
     (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
     (sca-sub
      (sca-sub (var-lookup 't101) (var-lookup 't106))
      (var-lookup 'input.min.0)))
    1
    16)
   (aligned 1 0))
  'int16
  16)
 (vec-cast #<abstr-halide-expr> 'int16 16))
optimized-template:
  (cast ... #<abstr-expr> 'int16 x?$198)
optimized Halide 0:
  (int16_t
 (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend (app abstr-vals$654 0) (bitvector 16)))))
optimized x86 0:
  (int16_t (zero-extend (app abstr-vals$654 0) (bitvector 16)))
run-x86-synthesizer
halide-expr:
  (vec-sub
 (vec-cast
  (load
   (buffer input 'uint8)
   (ramp
    (sca-add
     (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
     (sca-sub
      (sca-sub (var-lookup 't101) (var-lookup 't106))
      (var-lookup 'input.min.0)))
    1
    16)
   (aligned 1 0))
  'int16
  16)
 (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
template:
  (vs-mpy-add
 ...
 (broadcast ... (uint8_t input_zero))
 (list (int8_t (bv #x01 8)) (int8_t (bv #xff 8)))
 (! x?$650)
 (! x?$651)
 (! x?$652)
 'int16)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-sub
 (vec-cast
  (load
   (buffer input 'uint8)
   (ramp
    (sca-add
     (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
     (sca-sub
      (sca-sub (var-lookup 't101) (var-lookup 't106))
      (var-lookup 'input.min.0)))
    1
    16)
   (aligned 1 0))
  'int16
  16)
 (vec-cast #<abstr-halide-expr> 'int16 16))
optimized-template:
  (vs-mpy-add
 ...
 #<abstr-expr>
 (list (int8_t (bv #x01 8)) (int8_t (bv #xff 8)))
 (! x?$650)
 (! x?$651)
 (! x?$652)
 'int16)
optimized Halide 0:
  (int16_t
 (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend (app abstr-vals$655 0) (bitvector 16)))))
optimized x86 0:
  (int16_t
 (ite* (⊢ (&& x?$652 (! (&& (! x?$650) (! x?$652)))) (ite x?$650 (bvadd (bvneg (zero-extend (app abstr-vals$655 1) (bitvector 16))) (ite x?$650 (bvadd (zero-extend (app abstr-vals$655 0) (bitvector 16)) (ite x?$651 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$651 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (zero-extend (app abstr-vals$655 0) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$651 (bv #x0000 16) (bv #x0001 16))))) (zero-extend (app abstr-vals$655 0) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$651 (bv #x0000 16) (bv #x0001 16)))))))) (bvadd (ite x?$650 (bvadd (zero-extend (app abstr-vals$655 0) (bitvector 16)) (ite x?$651 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$651 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (zero-extend (app abstr-vals$655 0) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$651 (bv #x0000 16) (bv #x0001 16))))) (zero-extend (app abstr-vals$655 0) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$651 (bv #x0000 16) (bv #x0001 16))))))) (ite (bvsle (bvadd (bv #x8000 16) (bvneg (ite (bvsle (ite x?$650 (bvadd (zero-extend (app abstr-vals$655 0) (bitvector 16)) (ite x?$651 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$651 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (zero-extend (app abstr-vals$655 0) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$651 (bv #x0000 16) (bv #x0001 16))))) (zero-extend (app abstr-vals$655 0) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$651 (bv #x0000 16) (bv #x0001 16))))))) (bv #x0000 16)) (ite x?$650 (bvadd (zero-extend (app abstr-vals$655 0) (bitvector 16)) (ite x?$651 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$651 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (zero-extend (app abstr-vals$655 0) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$651 (bv #x0000 16) (bv #x0001 16))))) (zero-extend (app abstr-vals$655 0) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$651 (bv #x0000 16) (bv #x0001 16))))))) (bv #x0000 16)))) (ite (bvsle (bvneg (zero-extend (app abstr-vals$655 1) (bitvector 16))) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$650 (bvadd (zero-extend (app abstr-vals$655 0) (bitvector 16)) (ite x?$651 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$651 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (zero-extend (app abstr-vals$655 0) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$651 (bv #x0000 16) (bv #x0001 16))))) (zero-extend (app abstr-vals$655 0) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$651 (bv #x0000 16) (bv #x0001 16)))))))) (ite x?$650 (bvadd (zero-extend (app abstr-vals$655 0) (bitvector 16)) (ite x?$651 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$651 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (zero-extend (app abstr-vals$655 0) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$651 (bv #x0000 16) (bv #x0001 16))))) (zero-extend (app abstr-vals$655 0) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$651 (bv #x0000 16) (bv #x0001 16))))))) (bv #x0000 16))))) (bvneg (zero-extend (app abstr-vals$655 1) (bitvector 16))) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$650 (bvadd (zero-extend (app abstr-vals$655 0) (bitvector 16)) (ite x?$651 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$651 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (zero-extend (app abstr-vals$655 0) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$651 (bv #x0000 16) (bv #x0001 16))))) (zero-extend (app abstr-vals$655 0) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$651 (bv #x0000 16) (bv #x0001 16)))))))) (ite x?$650 (bvadd (zero-extend (app abstr-vals$655 0) (bitvector 16)) (ite x?$651 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$651 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (zero-extend (app abstr-vals$655 0) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$651 (bv #x0000 16) (bv #x0001 16))))) (zero-extend (app abstr-vals$655 0) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$651 (bv #x0000 16) (bv #x0001 16))))))) (bv #x0000 16)))))) (ite (bvsle (bvneg (zero-extend (app abstr-vals$655 1) (bitvector 16))) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$650 (bvadd (zero-extend (app abstr-vals$655 0) (bitvector 16)) (ite x?$651 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$651 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (zero-extend (app abstr-vals$655 0) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$651 (bv #x0000 16) (bv #x0001 16))))) (zero-extend (app abstr-vals$655 0) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$651 (bv #x0000 16) (bv #x0001 16)))))))) (ite x?$650 (bvadd (zero-extend (app abstr-vals$655 0) (bitvector 16)) (ite x?$651 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$651 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (zero-extend (app abstr-vals$655 0) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$651 (bv #x0000 16) (bv #x0001 16))))) (zero-extend (app abstr-vals$655 0) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$651 (bv #x0000 16) (bv #x0001 16))))))) (bv #x0000 16))))) (bvneg (zero-extend (app abstr-vals$655 1) (bitvector 16))) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$650 (bvadd (zero-extend (app abstr-vals$655 0) (bitvector 16)) (ite x?$651 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$651 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (zero-extend (app abstr-vals$655 0) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$651 (bv #x0000 16) (bv #x0001 16))))) (zero-extend (app abstr-vals$655 0) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$651 (bv #x0000 16) (bv #x0001 16)))))))) (ite x?$650 (bvadd (zero-extend (app abstr-vals$655 0) (bitvector 16)) (ite x?$651 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$651 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (zero-extend (app abstr-vals$655 0) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$651 (bv #x0000 16) (bv #x0001 16))))) (zero-extend (app abstr-vals$655 0) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$651 (bv #x0000 16) (bv #x0001 16))))))) (bv #x0000 16))))) (bvadd (bv #x8000 16) (bvneg (ite (bvsle (ite x?$650 (bvadd (zero-extend (app abstr-vals$655 0) (bitvector 16)) (ite x?$651 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$651 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (zero-extend (app abstr-vals$655 0) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$651 (bv #x0000 16) (bv #x0001 16))))) (zero-extend (app abstr-vals$655 0) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$651 (bv #x0000 16) (bv #x0001 16))))))) (bv #x0000 16)) (ite x?$650 (bvadd (zero-extend (app abstr-vals$655 0) (bitvector 16)) (ite x?$651 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$651 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (zero-extend (app abstr-vals$655 0) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$651 (bv #x0000 16) (bv #x0001 16))))) (zero-extend (app abstr-vals$655 0) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$651 (bv #x0000 16) (bv #x0001 16))))))) (bv #x0000 16)))))))) (⊢ (|| (&& (! x?$650) (! x?$652)) (&& (! x?$652) (! (&& (! x?$650) (! x?$652))))) (bvashr (ite x?$650 (bvadd (bvneg (zero-extend (app abstr-vals$655 1) (bitvector 16))) (ite x?$650 (bvadd (zero-extend (app abstr-vals$655 0) (bitvector 16)) (ite x?$651 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$651 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (zero-extend (app abstr-vals$655 0) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$651 (bv #x0000 16) (bv #x0001 16))))) (zero-extend (app abstr-vals$655 0) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$651 (bv #x0000 16) (bv #x0001 16)))))))) (bvadd (ite x?$650 (bvadd (zero-extend (app abstr-vals$655 0) (bitvector 16)) (ite x?$651 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$651 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (zero-extend (app abstr-vals$655 0) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$651 (bv #x0000 16) (bv #x0001 16))))) (zero-extend (app abstr-vals$655 0) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$651 (bv #x0000 16) (bv #x0001 16))))))) (ite (bvsle (bvadd (bv #x8000 16) (bvneg (ite (bvsle (ite x?$650 (bvadd (zero-extend (app abstr-vals$655 0) (bitvector 16)) (ite x?$651 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$651 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (zero-extend (app abstr-vals$655 0) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$651 (bv #x0000 16) (bv #x0001 16))))) (zero-extend (app abstr-vals$655 0) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$651 (bv #x0000 16) (bv #x0001 16))))))) (bv #x0000 16)) (ite x?$650 (bvadd (zero-extend (app abstr-vals$655 0) (bitvector 16)) (ite x?$651 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$651 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (zero-extend (app abstr-vals$655 0) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$651 (bv #x0000 16) (bv #x0001 16))))) (zero-extend (app abstr-vals$655 0) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$651 (bv #x0000 16) (bv #x0001 16))))))) (bv #x0000 16)))) (ite (bvsle (bvneg (zero-extend (app abstr-vals$655 1) (bitvector 16))) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$650 (bvadd (zero-extend (app abstr-vals$655 0) (bitvector 16)) (ite x?$651 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$651 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (zero-extend (app abstr-vals$655 0) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$651 (bv #x0000 16) (bv #x0001 16))))) (zero-extend (app abstr-vals$655 0) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$651 (bv #x0000 16) (bv #x0001 16)))))))) (ite x?$650 (bvadd (zero-extend (app abstr-vals$655 0) (bitvector 16)) (ite x?$651 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$651 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (zero-extend (app abstr-vals$655 0) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$651 (bv #x0000 16) (bv #x0001 16))))) (zero-extend (app abstr-vals$655 0) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$651 (bv #x0000 16) (bv #x0001 16))))))) (bv #x0000 16))))) (bvneg (zero-extend (app abstr-vals$655 1) (bitvector 16))) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$650 (bvadd (zero-extend (app abstr-vals$655 0) (bitvector 16)) (ite x?$651 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$651 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (zero-extend (app abstr-vals$655 0) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$651 (bv #x0000 16) (bv #x0001 16))))) (zero-extend (app abstr-vals$655 0) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$651 (bv #x0000 16) (bv #x0001 16)))))))) (ite x?$650 (bvadd (zero-extend (app abstr-vals$655 0) (bitvector 16)) (ite x?$651 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$651 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (zero-extend (app abstr-vals$655 0) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$651 (bv #x0000 16) (bv #x0001 16))))) (zero-extend (app abstr-vals$655 0) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$651 (bv #x0000 16) (bv #x0001 16))))))) (bv #x0000 16)))))) (ite (bvsle (bvneg (zero-extend (app abstr-vals$655 1) (bitvector 16))) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$650 (bvadd (zero-extend (app abstr-vals$655 0) (bitvector 16)) (ite x?$651 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$651 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (zero-extend (app abstr-vals$655 0) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$651 (bv #x0000 16) (bv #x0001 16))))) (zero-extend (app abstr-vals$655 0) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$651 (bv #x0000 16) (bv #x0001 16)))))))) (ite x?$650 (bvadd (zero-extend (app abstr-vals$655 0) (bitvector 16)) (ite x?$651 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$651 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (zero-extend (app abstr-vals$655 0) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$651 (bv #x0000 16) (bv #x0001 16))))) (zero-extend (app abstr-vals$655 0) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$651 (bv #x0000 16) (bv #x0001 16))))))) (bv #x0000 16))))) (bvneg (zero-extend (app abstr-vals$655 1) (bitvector 16))) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$650 (bvadd (zero-extend (app abstr-vals$655 0) (bitvector 16)) (ite x?$651 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$651 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (zero-extend (app abstr-vals$655 0) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$651 (bv #x0000 16) (bv #x0001 16))))) (zero-extend (app abstr-vals$655 0) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$651 (bv #x0000 16) (bv #x0001 16)))))))) (ite x?$650 (bvadd (zero-extend (app abstr-vals$655 0) (bitvector 16)) (ite x?$651 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$651 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (zero-extend (app abstr-vals$655 0) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$651 (bv #x0000 16) (bv #x0001 16))))) (zero-extend (app abstr-vals$655 0) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$651 (bv #x0000 16) (bv #x0001 16))))))) (bv #x0000 16))))) (bvadd (bv #x8000 16) (bvneg (ite (bvsle (ite x?$650 (bvadd (zero-extend (app abstr-vals$655 0) (bitvector 16)) (ite x?$651 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$651 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (zero-extend (app abstr-vals$655 0) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$651 (bv #x0000 16) (bv #x0001 16))))) (zero-extend (app abstr-vals$655 0) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$651 (bv #x0000 16) (bv #x0001 16))))))) (bv #x0000 16)) (ite x?$650 (bvadd (zero-extend (app abstr-vals$655 0) (bitvector 16)) (ite x?$651 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$651 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (zero-extend (app abstr-vals$655 0) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$651 (bv #x0000 16) (bv #x0001 16))))) (zero-extend (app abstr-vals$655 0) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$651 (bv #x0000 16) (bv #x0001 16))))))) (bv #x0000 16))))))) (bv #x0001 16)))))
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (vec-sub
 (vec-cast
  (load
   (buffer input 'uint8)
   (ramp
    (sca-add
     (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
     (sca-sub
      (sca-sub (var-lookup 't101) (var-lookup 't106))
      (var-lookup 'input.min.0)))
    1
    16)
   (aligned 1 0))
  'int16
  16)
 (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
template:
  (vs-mpy-add
 ...
 (union [x?$848 #(struct:cast ... #<load-data> int16 #f)] [(! x?$848) #(struct:cast
                                                                        ...
                                                                        #(struct:broadcast
                                                                          ...
                                                                          #(struct:uint8_t
                                                                            input_zero))
                                                                        int16
                                                                        #f)])
 (list (int8_t (bv #x01 8)) (int8_t (bv #xff 8)))
 (! x?$849)
 (! x?$850)
 (! x?$851)
 'int16)
axioms:
  '()
optimized-halide-expr:
  (vec-sub
 (vec-cast
  (load
   (buffer input 'uint8)
   (ramp
    (sca-add
     (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
     (sca-sub
      (sca-sub (var-lookup 't101) (var-lookup 't106))
      (var-lookup 'input.min.0)))
    1
    16)
   (aligned 1 0))
  'int16
  16)
 (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
optimized-template:
  (vs-mpy-add
 ...
 (union [x?$848 #(struct:cast ... #<load-data> int16 #f)] [(! x?$848) #(struct:cast
                                                                        ...
                                                                        #(struct:broadcast
                                                                          ...
                                                                          #(struct:uint8_t
                                                                            input_zero))
                                                                        int16
                                                                        #f)])
 (list (int8_t (bv #x01 8)) (int8_t (bv #xff 8)))
 (! x?$849)
 (! x?$850)
 (! x?$851)
 'int16)
optimized Halide 0:
  (int16_t
 (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))))
optimized x86 0:
  (int16_t
 (ite* (⊢ (&& x?$851 (! (&& (! x?$849) (! x?$851)))) (ite x?$849 (bvadd (bvneg (ite x?$848 (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (zero-extend input_zero (bitvector 16)))) (ite x?$849 (bvadd (ite x?$848 (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (zero-extend input_zero (bitvector 16))) (ite x?$850 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$850 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (ite x?$848 (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (zero-extend input_zero (bitvector 16))) (bvadd (bv #x7fff 16) (bvneg (ite x?$850 (bv #x0000 16) (bv #x0001 16))))) (ite x?$848 (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (zero-extend input_zero (bitvector 16))) (bvadd (bv #x7fff 16) (bvneg (ite x?$850 (bv #x0000 16) (bv #x0001 16)))))))) (bvadd (ite x?$849 (bvadd (ite x?$848 (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (zero-extend input_zero (bitvector 16))) (ite x?$850 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$850 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (ite x?$848 (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (zero-extend input_zero (bitvector 16))) (bvadd (bv #x7fff 16) (bvneg (ite x?$850 (bv #x0000 16) (bv #x0001 16))))) (ite x?$848 (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (zero-extend input_zero (bitvector 16))) (bvadd (bv #x7fff 16) (bvneg (ite x?$850 (bv #x0000 16) (bv #x0001 16))))))) (ite (bvsle (bvadd (bv #x8000 16) (bvneg (ite (bvsle (ite x?$849 (bvadd (ite x?$848 (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (zero-extend input_zero (bitvector 16))) (ite x?$850 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$850 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (ite x?$848 (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (zero-extend input_zero (bitvector 16))) (bvadd (bv #x7fff 16) (bvneg (ite x?$850 (bv #x0000 16) (bv #x0001 16))))) (ite x?$848 (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (zero-extend input_zero (bitvector 16))) (bvadd (bv #x7fff 16) (bvneg (ite x?$850 (bv #x0000 16) (bv #x0001 16))))))) (bv #x0000 16)) (ite x?$849 (bvadd (ite x?$848 (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (zero-extend input_zero (bitvector 16))) (ite x?$850 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$850 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (ite x?$848 (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (zero-extend input_zero (bitvector 16))) (bvadd (bv #x7fff 16) (bvneg (ite x?$850 (bv #x0000 16) (bv #x0001 16))))) (ite x?$848 (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (zero-extend input_zero (bitvector 16))) (bvadd (bv #x7fff 16) (bvneg (ite x?$850 (bv #x0000 16) (bv #x0001 16))))))) (bv #x0000 16)))) (ite (bvsle (bvneg (ite x?$848 (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (zero-extend input_zero (bitvector 16)))) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$849 (bvadd (ite x?$848 (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (zero-extend input_zero (bitvector 16))) (ite x?$850 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$850 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (ite x?$848 (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (zero-extend input_zero (bitvector 16))) (bvadd (bv #x7fff 16) (bvneg (ite x?$850 (bv #x0000 16) (bv #x0001 16))))) (ite x?$848 (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (zero-extend input_zero (bitvector 16))) (bvadd (bv #x7fff 16) (bvneg (ite x?$850 (bv #x0000 16) (bv #x0001 16)))))))) (ite x?$849 (bvadd (ite x?$848 (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (zero-extend input_zero (bitvector 16))) (ite x?$850 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$850 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (ite x?$848 (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (zero-extend input_zero (bitvector 16))) (bvadd (bv #x7fff 16) (bvneg (ite x?$850 (bv #x0000 16) (bv #x0001 16))))) (ite x?$848 (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (zero-extend input_zero (bitvector 16))) (bvadd (bv #x7fff 16) (bvneg (ite x?$850 (bv #x0000 16) (bv #x0001 16))))))) (bv #x0000 16))))) (bvneg (ite x?$848 (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (zero-extend input_zero (bitvector 16)))) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$849 (bvadd (ite x?$848 (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (zero-extend input_zero (bitvector 16))) (ite x?$850 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$850 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (ite x?$848 (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (zero-extend input_zero (bitvector 16))) (bvadd (bv #x7fff 16) (bvneg (ite x?$850 (bv #x0000 16) (bv #x0001 16))))) (ite x?$848 (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (zero-extend input_zero (bitvector 16))) (bvadd (bv #x7fff 16) (bvneg (ite x?$850 (bv #x0000 16) (bv #x0001 16)))))))) (ite x?$849 (bvadd (ite x?$848 (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (zero-extend input_zero (bitvector 16))) (ite x?$850 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$850 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (ite x?$848 (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (zero-extend input_zero (bitvector 16))) (bvadd (bv #x7fff 16) (bvneg (ite x?$850 (bv #x0000 16) (bv #x0001 16))))) (ite x?$848 (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (zero-extend input_zero (bitvector 16))) (bvadd (bv #x7fff 16) (bvneg (ite x?$850 (bv #x0000 16) (bv #x0001 16))))))) (bv #x0000 16)))))) (ite (bvsle (bvneg (ite x?$848 (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (zero-extend input_zero (bitvector 16)))) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$849 (bvadd (ite x?$848 (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (zero-extend input_zero (bitvector 16))) (ite x?$850 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$850 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (ite x?$848 (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (zero-extend input_zero (bitvector 16))) (bvadd (bv #x7fff 16) (bvneg (ite x?$850 (bv #x0000 16) (bv #x0001 16))))) (ite x?$848 (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (zero-extend input_zero (bitvector 16))) (bvadd (bv #x7fff 16) (bvneg (ite x?$850 (bv #x0000 16) (bv #x0001 16)))))))) (ite x?$849 (bvadd (ite x?$848 (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (zero-extend input_zero (bitvector 16))) (ite x?$850 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$850 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (ite x?$848 (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (zero-extend input_zero (bitvector 16))) (bvadd (bv #x7fff 16) (bvneg (ite x?$850 (bv #x0000 16) (bv #x0001 16))))) (ite x?$848 (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (zero-extend input_zero (bitvector 16))) (bvadd (bv #x7fff 16) (bvneg (ite x?$850 (bv #x0000 16) (bv #x0001 16))))))) (bv #x0000 16))))) (bvneg (ite x?$848 (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (zero-extend input_zero (bitvector 16)))) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$849 (bvadd (ite x?$848 (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (zero-extend input_zero (bitvector 16))) (ite x?$850 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$850 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (ite x?$848 (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (zero-extend input_zero (bitvector 16))) (bvadd (bv #x7fff 16) (bvneg (ite x?$850 (bv #x0000 16) (bv #x0001 16))))) (ite x?$848 (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (zero-extend input_zero (bitvector 16))) (bvadd (bv #x7fff 16) (bvneg (ite x?$850 (bv #x0000 16) (bv #x0001 16)))))))) (ite x?$849 (bvadd (ite x?$848 (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (zero-extend input_zero (bitvector 16))) (ite x?$850 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$850 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (ite x?$848 (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (zero-extend input_zero (bitvector 16))) (bvadd (bv #x7fff 16) (bvneg (ite x?$850 (bv #x0000 16) (bv #x0001 16))))) (ite x?$848 (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (zero-extend input_zero (bitvector 16))) (bvadd (bv #x7fff 16) (bvneg (ite x?$850 (bv #x0000 16) (bv #x0001 16))))))) (bv #x0000 16))))) (bvadd (bv #x8000 16) (bvneg (ite (bvsle (ite x?$849 (bvadd (ite x?$848 (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (zero-extend input_zero (bitvector 16))) (ite x?$850 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$850 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (ite x?$848 (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (zero-extend input_zero (bitvector 16))) (bvadd (bv #x7fff 16) (bvneg (ite x?$850 (bv #x0000 16) (bv #x0001 16))))) (ite x?$848 (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (zero-extend input_zero (bitvector 16))) (bvadd (bv #x7fff 16) (bvneg (ite x?$850 (bv #x0000 16) (bv #x0001 16))))))) (bv #x0000 16)) (ite x?$849 (bvadd (ite x?$848 (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (zero-extend input_zero (bitvector 16))) (ite x?$850 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$850 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (ite x?$848 (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (zero-extend input_zero (bitvector 16))) (bvadd (bv #x7fff 16) (bvneg (ite x?$850 (bv #x0000 16) (bv #x0001 16))))) (ite x?$848 (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (zero-extend input_zero (bitvector 16))) (bvadd (bv #x7fff 16) (bvneg (ite x?$850 (bv #x0000 16) (bv #x0001 16))))))) (bv #x0000 16)))))))) (⊢ (|| (&& (! x?$849) (! x?$851)) (&& (! x?$851) (! (&& (! x?$849) (! x?$851))))) (bvashr (ite x?$849 (bvadd (bvneg (ite x?$848 (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (zero-extend input_zero (bitvector 16)))) (ite x?$849 (bvadd (ite x?$848 (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (zero-extend input_zero (bitvector 16))) (ite x?$850 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$850 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (ite x?$848 (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (zero-extend input_zero (bitvector 16))) (bvadd (bv #x7fff 16) (bvneg (ite x?$850 (bv #x0000 16) (bv #x0001 16))))) (ite x?$848 (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (zero-extend input_zero (bitvector 16))) (bvadd (bv #x7fff 16) (bvneg (ite x?$850 (bv #x0000 16) (bv #x0001 16)))))))) (bvadd (ite x?$849 (bvadd (ite x?$848 (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (zero-extend input_zero (bitvector 16))) (ite x?$850 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$850 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (ite x?$848 (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (zero-extend input_zero (bitvector 16))) (bvadd (bv #x7fff 16) (bvneg (ite x?$850 (bv #x0000 16) (bv #x0001 16))))) (ite x?$848 (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (zero-extend input_zero (bitvector 16))) (bvadd (bv #x7fff 16) (bvneg (ite x?$850 (bv #x0000 16) (bv #x0001 16))))))) (ite (bvsle (bvadd (bv #x8000 16) (bvneg (ite (bvsle (ite x?$849 (bvadd (ite x?$848 (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (zero-extend input_zero (bitvector 16))) (ite x?$850 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$850 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (ite x?$848 (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (zero-extend input_zero (bitvector 16))) (bvadd (bv #x7fff 16) (bvneg (ite x?$850 (bv #x0000 16) (bv #x0001 16))))) (ite x?$848 (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (zero-extend input_zero (bitvector 16))) (bvadd (bv #x7fff 16) (bvneg (ite x?$850 (bv #x0000 16) (bv #x0001 16))))))) (bv #x0000 16)) (ite x?$849 (bvadd (ite x?$848 (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (zero-extend input_zero (bitvector 16))) (ite x?$850 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$850 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (ite x?$848 (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (zero-extend input_zero (bitvector 16))) (bvadd (bv #x7fff 16) (bvneg (ite x?$850 (bv #x0000 16) (bv #x0001 16))))) (ite x?$848 (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (zero-extend input_zero (bitvector 16))) (bvadd (bv #x7fff 16) (bvneg (ite x?$850 (bv #x0000 16) (bv #x0001 16))))))) (bv #x0000 16)))) (ite (bvsle (bvneg (ite x?$848 (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (zero-extend input_zero (bitvector 16)))) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$849 (bvadd (ite x?$848 (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (zero-extend input_zero (bitvector 16))) (ite x?$850 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$850 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (ite x?$848 (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (zero-extend input_zero (bitvector 16))) (bvadd (bv #x7fff 16) (bvneg (ite x?$850 (bv #x0000 16) (bv #x0001 16))))) (ite x?$848 (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (zero-extend input_zero (bitvector 16))) (bvadd (bv #x7fff 16) (bvneg (ite x?$850 (bv #x0000 16) (bv #x0001 16)))))))) (ite x?$849 (bvadd (ite x?$848 (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (zero-extend input_zero (bitvector 16))) (ite x?$850 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$850 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (ite x?$848 (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (zero-extend input_zero (bitvector 16))) (bvadd (bv #x7fff 16) (bvneg (ite x?$850 (bv #x0000 16) (bv #x0001 16))))) (ite x?$848 (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (zero-extend input_zero (bitvector 16))) (bvadd (bv #x7fff 16) (bvneg (ite x?$850 (bv #x0000 16) (bv #x0001 16))))))) (bv #x0000 16))))) (bvneg (ite x?$848 (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (zero-extend input_zero (bitvector 16)))) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$849 (bvadd (ite x?$848 (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (zero-extend input_zero (bitvector 16))) (ite x?$850 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$850 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (ite x?$848 (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (zero-extend input_zero (bitvector 16))) (bvadd (bv #x7fff 16) (bvneg (ite x?$850 (bv #x0000 16) (bv #x0001 16))))) (ite x?$848 (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (zero-extend input_zero (bitvector 16))) (bvadd (bv #x7fff 16) (bvneg (ite x?$850 (bv #x0000 16) (bv #x0001 16)))))))) (ite x?$849 (bvadd (ite x?$848 (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (zero-extend input_zero (bitvector 16))) (ite x?$850 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$850 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (ite x?$848 (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (zero-extend input_zero (bitvector 16))) (bvadd (bv #x7fff 16) (bvneg (ite x?$850 (bv #x0000 16) (bv #x0001 16))))) (ite x?$848 (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (zero-extend input_zero (bitvector 16))) (bvadd (bv #x7fff 16) (bvneg (ite x?$850 (bv #x0000 16) (bv #x0001 16))))))) (bv #x0000 16)))))) (ite (bvsle (bvneg (ite x?$848 (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (zero-extend input_zero (bitvector 16)))) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$849 (bvadd (ite x?$848 (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (zero-extend input_zero (bitvector 16))) (ite x?$850 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$850 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (ite x?$848 (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (zero-extend input_zero (bitvector 16))) (bvadd (bv #x7fff 16) (bvneg (ite x?$850 (bv #x0000 16) (bv #x0001 16))))) (ite x?$848 (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (zero-extend input_zero (bitvector 16))) (bvadd (bv #x7fff 16) (bvneg (ite x?$850 (bv #x0000 16) (bv #x0001 16)))))))) (ite x?$849 (bvadd (ite x?$848 (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (zero-extend input_zero (bitvector 16))) (ite x?$850 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$850 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (ite x?$848 (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (zero-extend input_zero (bitvector 16))) (bvadd (bv #x7fff 16) (bvneg (ite x?$850 (bv #x0000 16) (bv #x0001 16))))) (ite x?$848 (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (zero-extend input_zero (bitvector 16))) (bvadd (bv #x7fff 16) (bvneg (ite x?$850 (bv #x0000 16) (bv #x0001 16))))))) (bv #x0000 16))))) (bvneg (ite x?$848 (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (zero-extend input_zero (bitvector 16)))) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$849 (bvadd (ite x?$848 (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (zero-extend input_zero (bitvector 16))) (ite x?$850 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$850 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (ite x?$848 (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (zero-extend input_zero (bitvector 16))) (bvadd (bv #x7fff 16) (bvneg (ite x?$850 (bv #x0000 16) (bv #x0001 16))))) (ite x?$848 (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (zero-extend input_zero (bitvector 16))) (bvadd (bv #x7fff 16) (bvneg (ite x?$850 (bv #x0000 16) (bv #x0001 16)))))))) (ite x?$849 (bvadd (ite x?$848 (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (zero-extend input_zero (bitvector 16))) (ite x?$850 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$850 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (ite x?$848 (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (zero-extend input_zero (bitvector 16))) (bvadd (bv #x7fff 16) (bvneg (ite x?$850 (bv #x0000 16) (bv #x0001 16))))) (ite x?$848 (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (zero-extend input_zero (bitvector 16))) (bvadd (bv #x7fff 16) (bvneg (ite x?$850 (bv #x0000 16) (bv #x0001 16))))))) (bv #x0000 16))))) (bvadd (bv #x8000 16) (bvneg (ite (bvsle (ite x?$849 (bvadd (ite x?$848 (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (zero-extend input_zero (bitvector 16))) (ite x?$850 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$850 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (ite x?$848 (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (zero-extend input_zero (bitvector 16))) (bvadd (bv #x7fff 16) (bvneg (ite x?$850 (bv #x0000 16) (bv #x0001 16))))) (ite x?$848 (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (zero-extend input_zero (bitvector 16))) (bvadd (bv #x7fff 16) (bvneg (ite x?$850 (bv #x0000 16) (bv #x0001 16))))))) (bv #x0000 16)) (ite x?$849 (bvadd (ite x?$848 (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (zero-extend input_zero (bitvector 16))) (ite x?$850 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$850 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (ite x?$848 (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (zero-extend input_zero (bitvector 16))) (bvadd (bv #x7fff 16) (bvneg (ite x?$850 (bv #x0000 16) (bv #x0001 16))))) (ite x?$848 (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (zero-extend input_zero (bitvector 16))) (bvadd (bv #x7fff 16) (bvneg (ite x?$850 (bv #x0000 16) (bv #x0001 16))))))) (bv #x0000 16))))))) (bv #x0001 16)))))
Ran synthesizer for 147 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-sub
 (vec-cast
  (load
   (buffer input 'uint8)
   (ramp
    (sca-add
     (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
     (sca-sub
      (sca-sub (var-lookup 't101) (var-lookup 't106))
      (var-lookup 'input.min.0)))
    1
    16)
   (aligned 1 0))
  'int16
  16)
 (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
template:
  (vs-mpy-add
 ...
 (combine #<load-data> (broadcast ... (uint8_t input_zero)))
 (list (int8_t (bv #x01 8)) (int8_t (bv #xff 8)))
 #f
 #f
 #f
 'int16)
axioms:
  '(#t #t)
optimized-halide-expr:
  (vec-sub
 (vec-cast #<abstr-halide-expr> 'int16 16)
 (vec-cast #<abstr-halide-expr> 'int16 16))
optimized-template:
  (vs-mpy-add
 ...
 (combine #<abstr-expr> #<abstr-expr>)
 (list (int8_t (bv #x01 8)) (int8_t (bv #xff 8)))
 #f
 #f
 #f
 'int16)
optimized Halide 0:
  (int16_t
 (bvadd (zero-extend (app abstr-vals$980 0) (bitvector 16)) (bvneg (zero-extend (app abstr-vals$981 0) (bitvector 16)))))
optimized x86 0:
  (int16_t
 (bvadd (zero-extend (ite c$853 (app abstr-vals$980 idx$852) (app abstr-vals$981 idx$852)) (bitvector 16)) (bvneg (zero-extend (ite c$855 (app abstr-vals$980 idx$854) (app abstr-vals$981 idx$854)) (bitvector 16)))))
Ran synthesizer for 95 ms
(model
 [idx$852 0]
 [c$853 #t]
 [idx$854 0]
 [c$855 #f])
(vec-sub
 (vec-cast #<abstr-halide-expr> 'int16 16)
 (vec-cast #<abstr-halide-expr> 'int16 16))
(vs-mpy-add
 ...
 (combine #<load-data> (broadcast ... (uint8_t input_zero)))
 (list (int8_t (bv #x01 8)) (int8_t (bv #xff 8)))
 #f
 #f
 #f
 'int16)
Ran bounds analysis for 26 ms
Ran bounds analysis for 18 ms
"Extended success?"
#t
(vs-mpy-add
 ...
 (combine #<load-data> (broadcast ... (uint8_t input_zero)))
 (list (int8_t (bv #x01 8)) (int8_t (bv #xff 8)))
 #f
 #f
 #f
 'int16)
"Building Expr:"
(vec-cast
 (vec-sub
  (vec-cast
   (load
    (buffer input 'uint8)
    (ramp
     (sca-add
      (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
      (sca-sub
       (sca-sub (var-lookup 't101) (var-lookup 't106))
       (var-lookup 'input.min.0)))
     1
     16)
    (aligned 1 0))
   'int16
   16)
  (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
 'int32
 16)
"Fold templates"
(list
 #<load-data>
 (vs-mpy-add
  ...
  (combine #<load-data> (broadcast ... (uint8_t input_zero)))
  (list (int8_t (bv #x01 8)) (int8_t (bv #xff 8)))
  x?$984
  x?$985
  x?$986
  'int16))
here(#<load-data> #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:uint8_t input_zero))> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #xff 8))) x?$984 x?$985 x?$986 int16))

"Replace templates"
'()
run-x86-synthesizer
halide-expr:
  (vec-cast
 (vec-sub
  (vec-cast
   (load
    (buffer input 'uint8)
    (ramp
     (sca-add
      (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
      (sca-sub
       (sca-sub (var-lookup 't101) (var-lookup 't106))
       (var-lookup 'input.min.0)))
     1
     16)
    (aligned 1 0))
   'int16
   16)
  (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
 'int32
 16)
template:
  #<load-data>
axioms:
  '()
optimized-halide-expr:
  (vec-cast
 (vec-sub
  (vec-cast
   (load
    (buffer input 'uint8)
    (ramp
     (sca-add
      (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
      (sca-sub
       (sca-sub (var-lookup 't101) (var-lookup 't106))
       (var-lookup 'input.min.0)))
     1
     16)
    (aligned 1 0))
   'int16
   16)
  (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
 'int32
 16)
optimized-template:
  #<load-data>
optimized Halide 0:
  (int32_t
 (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)))
optimized x86 0:
  (uint8_t
 (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))))
run-x86-synthesizer
halide-expr:
  (vec-cast
 (vec-sub
  (vec-cast
   (load
    (buffer input 'uint8)
    (ramp
     (sca-add
      (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
      (sca-sub
       (sca-sub (var-lookup 't101) (var-lookup 't106))
       (var-lookup 'input.min.0)))
     1
     16)
    (aligned 1 0))
   'int16
   16)
  (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
 'int32
 16)
template:
  (vs-mpy-add
 ...
 (combine #<load-data> (broadcast ... (uint8_t input_zero)))
 (list (int8_t (bv #x01 8)) (int8_t (bv #xff 8)))
 x?$984
 x?$985
 x?$986
 'int16)
axioms:
  '(#t #t)
optimized-halide-expr:
  (vec-cast
 (vec-sub
  (vec-cast #<abstr-halide-expr> 'int16 16)
  (vec-cast #<abstr-halide-expr> 'int16 16))
 'int32
 16)
optimized-template:
  (vs-mpy-add
 ...
 (combine #<abstr-expr> #<abstr-expr>)
 (list (int8_t (bv #x01 8)) (int8_t (bv #xff 8)))
 x?$984
 x?$985
 x?$986
 'int16)
optimized Halide 0:
  (int32_t
 (sign-extend (bvadd (zero-extend (app abstr-vals$1051 0) (bitvector 16)) (bvneg (zero-extend (app abstr-vals$1052 0) (bitvector 16)))) (bitvector 32)))
optimized x86 0:
  (int16_t
 (ite* (⊢ (&& (! x?$986) (! (&& x?$984 x?$986))) (ite x?$984 (bvadd (ite x?$984 (bvadd (ite x?$985 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (zero-extend (app abstr-vals$1051 0) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$985 (bv #x0001 16) (bv #x0000 16))))) (zero-extend (app abstr-vals$1051 0) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$985 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (zero-extend (app abstr-vals$1051 0) (bitvector 16)) (ite x?$985 (bv #x0001 16) (bv #x0000 16)))) (ite (bvsle (bvadd (bv #x8000 16) (bvneg (ite (bvsle (ite x?$984 (bvadd (ite x?$985 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (zero-extend (app abstr-vals$1051 0) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$985 (bv #x0001 16) (bv #x0000 16))))) (zero-extend (app abstr-vals$1051 0) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$985 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (zero-extend (app abstr-vals$1051 0) (bitvector 16)) (ite x?$985 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16)) (ite x?$984 (bvadd (ite x?$985 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (zero-extend (app abstr-vals$1051 0) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$985 (bv #x0001 16) (bv #x0000 16))))) (zero-extend (app abstr-vals$1051 0) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$985 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (zero-extend (app abstr-vals$1051 0) (bitvector 16)) (ite x?$985 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16)))) (ite (bvsle (bvneg (zero-extend (app abstr-vals$1052 0) (bitvector 16))) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$984 (bvadd (ite x?$985 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (zero-extend (app abstr-vals$1051 0) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$985 (bv #x0001 16) (bv #x0000 16))))) (zero-extend (app abstr-vals$1051 0) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$985 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (zero-extend (app abstr-vals$1051 0) (bitvector 16)) (ite x?$985 (bv #x0001 16) (bv #x0000 16))))) (ite x?$984 (bvadd (ite x?$985 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (zero-extend (app abstr-vals$1051 0) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$985 (bv #x0001 16) (bv #x0000 16))))) (zero-extend (app abstr-vals$1051 0) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$985 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (zero-extend (app abstr-vals$1051 0) (bitvector 16)) (ite x?$985 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16))))) (bvneg (zero-extend (app abstr-vals$1052 0) (bitvector 16))) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$984 (bvadd (ite x?$985 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (zero-extend (app abstr-vals$1051 0) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$985 (bv #x0001 16) (bv #x0000 16))))) (zero-extend (app abstr-vals$1051 0) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$985 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (zero-extend (app abstr-vals$1051 0) (bitvector 16)) (ite x?$985 (bv #x0001 16) (bv #x0000 16))))) (ite x?$984 (bvadd (ite x?$985 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (zero-extend (app abstr-vals$1051 0) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$985 (bv #x0001 16) (bv #x0000 16))))) (zero-extend (app abstr-vals$1051 0) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$985 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (zero-extend (app abstr-vals$1051 0) (bitvector 16)) (ite x?$985 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16)))))) (ite (bvsle (bvneg (zero-extend (app abstr-vals$1052 0) (bitvector 16))) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$984 (bvadd (ite x?$985 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (zero-extend (app abstr-vals$1051 0) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$985 (bv #x0001 16) (bv #x0000 16))))) (zero-extend (app abstr-vals$1051 0) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$985 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (zero-extend (app abstr-vals$1051 0) (bitvector 16)) (ite x?$985 (bv #x0001 16) (bv #x0000 16))))) (ite x?$984 (bvadd (ite x?$985 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (zero-extend (app abstr-vals$1051 0) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$985 (bv #x0001 16) (bv #x0000 16))))) (zero-extend (app abstr-vals$1051 0) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$985 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (zero-extend (app abstr-vals$1051 0) (bitvector 16)) (ite x?$985 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16))))) (bvneg (zero-extend (app abstr-vals$1052 0) (bitvector 16))) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$984 (bvadd (ite x?$985 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (zero-extend (app abstr-vals$1051 0) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$985 (bv #x0001 16) (bv #x0000 16))))) (zero-extend (app abstr-vals$1051 0) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$985 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (zero-extend (app abstr-vals$1051 0) (bitvector 16)) (ite x?$985 (bv #x0001 16) (bv #x0000 16))))) (ite x?$984 (bvadd (ite x?$985 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (zero-extend (app abstr-vals$1051 0) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$985 (bv #x0001 16) (bv #x0000 16))))) (zero-extend (app abstr-vals$1051 0) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$985 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (zero-extend (app abstr-vals$1051 0) (bitvector 16)) (ite x?$985 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16))))) (bvadd (bv #x8000 16) (bvneg (ite (bvsle (ite x?$984 (bvadd (ite x?$985 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (zero-extend (app abstr-vals$1051 0) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$985 (bv #x0001 16) (bv #x0000 16))))) (zero-extend (app abstr-vals$1051 0) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$985 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (zero-extend (app abstr-vals$1051 0) (bitvector 16)) (ite x?$985 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16)) (ite x?$984 (bvadd (ite x?$985 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (zero-extend (app abstr-vals$1051 0) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$985 (bv #x0001 16) (bv #x0000 16))))) (zero-extend (app abstr-vals$1051 0) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$985 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (zero-extend (app abstr-vals$1051 0) (bitvector 16)) (ite x?$985 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16)))))) (bvadd (bvneg (zero-extend (app abstr-vals$1052 0) (bitvector 16))) (ite x?$984 (bvadd (ite x?$985 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (zero-extend (app abstr-vals$1051 0) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$985 (bv #x0001 16) (bv #x0000 16))))) (zero-extend (app abstr-vals$1051 0) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$985 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (zero-extend (app abstr-vals$1051 0) (bitvector 16)) (ite x?$985 (bv #x0001 16) (bv #x0000 16))))))) (⊢ (|| (&& x?$984 x?$986) (&& x?$986 (! (&& x?$984 x?$986)))) (bvashr (ite x?$984 (bvadd (ite x?$984 (bvadd (ite x?$985 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (zero-extend (app abstr-vals$1051 0) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$985 (bv #x0001 16) (bv #x0000 16))))) (zero-extend (app abstr-vals$1051 0) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$985 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (zero-extend (app abstr-vals$1051 0) (bitvector 16)) (ite x?$985 (bv #x0001 16) (bv #x0000 16)))) (ite (bvsle (bvadd (bv #x8000 16) (bvneg (ite (bvsle (ite x?$984 (bvadd (ite x?$985 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (zero-extend (app abstr-vals$1051 0) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$985 (bv #x0001 16) (bv #x0000 16))))) (zero-extend (app abstr-vals$1051 0) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$985 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (zero-extend (app abstr-vals$1051 0) (bitvector 16)) (ite x?$985 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16)) (ite x?$984 (bvadd (ite x?$985 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (zero-extend (app abstr-vals$1051 0) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$985 (bv #x0001 16) (bv #x0000 16))))) (zero-extend (app abstr-vals$1051 0) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$985 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (zero-extend (app abstr-vals$1051 0) (bitvector 16)) (ite x?$985 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16)))) (ite (bvsle (bvneg (zero-extend (app abstr-vals$1052 0) (bitvector 16))) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$984 (bvadd (ite x?$985 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (zero-extend (app abstr-vals$1051 0) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$985 (bv #x0001 16) (bv #x0000 16))))) (zero-extend (app abstr-vals$1051 0) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$985 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (zero-extend (app abstr-vals$1051 0) (bitvector 16)) (ite x?$985 (bv #x0001 16) (bv #x0000 16))))) (ite x?$984 (bvadd (ite x?$985 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (zero-extend (app abstr-vals$1051 0) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$985 (bv #x0001 16) (bv #x0000 16))))) (zero-extend (app abstr-vals$1051 0) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$985 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (zero-extend (app abstr-vals$1051 0) (bitvector 16)) (ite x?$985 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16))))) (bvneg (zero-extend (app abstr-vals$1052 0) (bitvector 16))) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$984 (bvadd (ite x?$985 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (zero-extend (app abstr-vals$1051 0) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$985 (bv #x0001 16) (bv #x0000 16))))) (zero-extend (app abstr-vals$1051 0) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$985 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (zero-extend (app abstr-vals$1051 0) (bitvector 16)) (ite x?$985 (bv #x0001 16) (bv #x0000 16))))) (ite x?$984 (bvadd (ite x?$985 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (zero-extend (app abstr-vals$1051 0) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$985 (bv #x0001 16) (bv #x0000 16))))) (zero-extend (app abstr-vals$1051 0) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$985 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (zero-extend (app abstr-vals$1051 0) (bitvector 16)) (ite x?$985 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16)))))) (ite (bvsle (bvneg (zero-extend (app abstr-vals$1052 0) (bitvector 16))) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$984 (bvadd (ite x?$985 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (zero-extend (app abstr-vals$1051 0) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$985 (bv #x0001 16) (bv #x0000 16))))) (zero-extend (app abstr-vals$1051 0) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$985 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (zero-extend (app abstr-vals$1051 0) (bitvector 16)) (ite x?$985 (bv #x0001 16) (bv #x0000 16))))) (ite x?$984 (bvadd (ite x?$985 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (zero-extend (app abstr-vals$1051 0) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$985 (bv #x0001 16) (bv #x0000 16))))) (zero-extend (app abstr-vals$1051 0) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$985 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (zero-extend (app abstr-vals$1051 0) (bitvector 16)) (ite x?$985 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16))))) (bvneg (zero-extend (app abstr-vals$1052 0) (bitvector 16))) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$984 (bvadd (ite x?$985 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (zero-extend (app abstr-vals$1051 0) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$985 (bv #x0001 16) (bv #x0000 16))))) (zero-extend (app abstr-vals$1051 0) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$985 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (zero-extend (app abstr-vals$1051 0) (bitvector 16)) (ite x?$985 (bv #x0001 16) (bv #x0000 16))))) (ite x?$984 (bvadd (ite x?$985 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (zero-extend (app abstr-vals$1051 0) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$985 (bv #x0001 16) (bv #x0000 16))))) (zero-extend (app abstr-vals$1051 0) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$985 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (zero-extend (app abstr-vals$1051 0) (bitvector 16)) (ite x?$985 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16))))) (bvadd (bv #x8000 16) (bvneg (ite (bvsle (ite x?$984 (bvadd (ite x?$985 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (zero-extend (app abstr-vals$1051 0) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$985 (bv #x0001 16) (bv #x0000 16))))) (zero-extend (app abstr-vals$1051 0) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$985 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (zero-extend (app abstr-vals$1051 0) (bitvector 16)) (ite x?$985 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16)) (ite x?$984 (bvadd (ite x?$985 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (zero-extend (app abstr-vals$1051 0) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$985 (bv #x0001 16) (bv #x0000 16))))) (zero-extend (app abstr-vals$1051 0) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$985 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (zero-extend (app abstr-vals$1051 0) (bitvector 16)) (ite x?$985 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16)))))) (bvadd (bvneg (zero-extend (app abstr-vals$1052 0) (bitvector 16))) (ite x?$984 (bvadd (ite x?$985 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (zero-extend (app abstr-vals$1051 0) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$985 (bv #x0001 16) (bv #x0000 16))))) (zero-extend (app abstr-vals$1051 0) (bitvector 16)) (bvadd (bv #x7fff 16) (bvneg (ite x?$985 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (zero-extend (app abstr-vals$1051 0) (bitvector 16)) (ite x?$985 (bv #x0001 16) (bv #x0000 16)))))) (bv #x0001 16)))))
Ran synthesizer for 1 ms
(unsat)
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (vec-cast
 (vec-sub
  (vec-cast
   (load
    (buffer input 'uint8)
    (ramp
     (sca-add
      (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
      (sca-sub
       (sca-sub (var-lookup 't101) (var-lookup 't106))
       (var-lookup 'input.min.0)))
     1
     16)
    (aligned 1 0))
   'int16
   16)
  (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
 'int32
 16)
template:
  (cast
 ...
 (vs-mpy-add
  ...
  (combine #<load-data> (broadcast ... (uint8_t input_zero)))
  (list (int8_t (bv #x01 8)) (int8_t (bv #xff 8)))
  #f
  #f
  #f
  'int16)
 'int32
 #f)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$1053 idx) (bv #x00ff 16)) (bvsle (bv #xff01 16) (app abstr-vals$1053 idx)))))
optimized-halide-expr:
  (vec-cast #<abstr-halide-expr> 'int32 16)
optimized-template:
  (cast ... #<abstr-expr> 'int32 #f)
optimized Halide 0:
  (int32_t (sign-extend (app abstr-vals$1053 0) (bitvector 32)))
optimized x86 0:
  (int32_t (sign-extend (app abstr-vals$1053 0) (bitvector 32)))
Ran synthesizer for 32 ms
(model)
(vec-cast #<abstr-halide-expr> 'int32 16)
(cast
 ...
 (vs-mpy-add
  ...
  (combine #<load-data> (broadcast ... (uint8_t input_zero)))
  (list (int8_t (bv #x01 8)) (int8_t (bv #xff 8)))
  #f
  #f
  #f
  'int16)
 'int32
 #f)
Ran bounds analysis for 32 ms
Ran bounds analysis for 25 ms
"Extended success?"
#t
(cast
 ...
 (vs-mpy-add
  ...
  (combine #<load-data> (broadcast ... (uint8_t input_zero)))
  (list (int8_t (bv #x01 8)) (int8_t (bv #xff 8)))
  #f
  #f
  #f
  'int16)
 'int32
 #f)
"Building Expr:"
(sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16)
"Fold templates"
'()
here()

"Replace templates"
'()
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16)
template:
  (broadcast ... (load-sca (buffer inv_sqrt 'int32) 0))
axioms:
  '()
optimized-halide-expr:
  (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16)
optimized-template:
  (broadcast ... (load-sca (buffer inv_sqrt 'int32) 0))
optimized Halide 0:
  (int32_t (app inv_sqrt 0))
optimized x86 0:
  (int32_t (app inv_sqrt 0))
Ran synthesizer for 15 ms
(model)
(sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16)
(broadcast ... (load-sca (buffer inv_sqrt 'int32) 0))
Ran bounds analysis for 30 ms
Ran bounds analysis for 23 ms
"Extended success?"
#t
(broadcast ... (load-sca (buffer inv_sqrt 'int32) 0))
"Building Expr:"
(vec-mul
 (vec-cast
  (vec-sub
   (vec-cast
    (load
     (buffer input 'uint8)
     (ramp
      (sca-add
       (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
       (sca-sub
        (sca-sub (var-lookup 't101) (var-lookup 't106))
        (var-lookup 'input.min.0)))
      1
      16)
     (aligned 1 0))
    'int16
    16)
   (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
  'int32
  16)
 (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
"Fold templates"
(list
 (vs-mpy-add
  ...
  (combine #<load-data> (broadcast ... (uint8_t input_zero)))
  (list
   (sca-mul
    (sca-cast (int8_t (bv #x01 8)) 'int16)
    (sca-cast
     (union [x?$1060 #(struct:load-sca #(struct:buffer inv_sqrt int32) 0)] [(! x?$1060) #(struct:int8_t
                                                                                          (bv #x01 8))])
     'int16))
   (sca-mul
    (sca-cast (int8_t (bv #xff 8)) 'int16)
    (sca-cast
     (union [x?$1060 #(struct:load-sca #(struct:buffer inv_sqrt int32) 0)] [(! x?$1060) #(struct:int8_t
                                                                                          (bv #x01 8))])
     'int16)))
  #f
  #f
  #f
  'int16)
 (vs-mpy-add
  ...
  (combine #<load-data> (broadcast ... (uint8_t input_zero)))
  (list
   (sca-mul
    (sca-cast (int8_t (bv #x01 8)) 'int16)
    (sca-cast
     (union [x?$1060 #(struct:load-sca #(struct:buffer inv_sqrt int32) 0)] [(! x?$1060) #(struct:int8_t
                                                                                          (bv #x01 8))])
     'int16))
   (sca-mul
    (sca-cast (int8_t (bv #xff 8)) 'int16)
    (sca-cast
     (union [x?$1060 #(struct:load-sca #(struct:buffer inv_sqrt int32) 0)] [(! x?$1060) #(struct:int8_t
                                                                                          (bv #x01 8))])
     'int16)))
  #f
  #f
  #f
  'int32)
 (cast
  ...
  (vs-mpy-add
   ...
   (combine #<load-data> (broadcast ... (uint8_t input_zero)))
   (list (int8_t (bv #x01 8)) (int8_t (bv #xff 8)))
   #f
   #f
   #f
   'int16)
  'int32
  x?$1056))
here(#(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:uint8_t input_zero))> (#(struct:sca-mul #(struct:sca-cast #(struct:int8_t (bv #x01 8)) int16) #(struct:sca-cast (union #:size 2 #:hash 176684845397867769) int16)) #(struct:sca-mul #(struct:sca-cast #(struct:int8_t (bv #xff 8)) int16) #(struct:sca-cast (union #:size 2 #:hash 176684845397867769) int16))) #f #f #f int16) #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:uint8_t input_zero))> (#(struct:sca-mul #(struct:sca-cast #(struct:int8_t (bv #x01 8)) int16) #(struct:sca-cast (union #:size 2 #:hash 176684845397867769) int16)) #(struct:sca-mul #(struct:sca-cast #(struct:int8_t (bv #xff 8)) int16) #(struct:sca-cast (union #:size 2 #:hash 176684845397867769) int16))) #f #f #f int32) #(struct:cast ... #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:uint8_t input_zero))> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #xff 8))) #f #f #f int16) int32 x?$1056))

(list (vs-mpy-add ... (vs-mpy-add ... (combine #<load-data> (broadcast ... (uint8_t input_zero))) (list (int8_t (bv #x01 8)) (int8_t (bv #xff 8))) #f #f #f 'int16) (list (load-sca (buffer inv_sqrt 'int32) 0)) #f #f #f 'int32) (vs-mpy-add ... #<load-data> (list (load-sca (buffer inv_sqrt 'int32) 0)) #f #f #f 'int32) (vv-mpy-add ... (vs-mpy-add ... (combine #<load-data> (broadcast ... (uint8_t input_zero))) (list (int8_t (bv #x01 8)) (int8_t (bv #xff 8))) #f #f #f 'int16) '(1) (! x?$1253) (! x?$1254) (! x?$1255) 'int32) (vv-mpy-add ... #<load-data> '(1) (! x?$1256) (! x?$1257) (! x?$1258) 'int32))
"Replace templates"
(list
 (vs-mpy-add
  ...
  (vs-mpy-add
   ...
   (combine #<load-data> (broadcast ... (uint8_t input_zero)))
   (list (int8_t (bv #x01 8)) (int8_t (bv #xff 8)))
   #f
   #f
   #f
   'int16)
  (list (load-sca (buffer inv_sqrt 'int32) 0))
  #f
  #f
  #f
  'int32)
 (vs-mpy-add
  ...
  #<load-data>
  (list (load-sca (buffer inv_sqrt 'int32) 0))
  #f
  #f
  #f
  'int32)
 (vv-mpy-add
  ...
  (vs-mpy-add
   ...
   (combine #<load-data> (broadcast ... (uint8_t input_zero)))
   (list (int8_t (bv #x01 8)) (int8_t (bv #xff 8)))
   #f
   #f
   #f
   'int16)
  '(1)
  (! x?$1253)
  (! x?$1254)
  (! x?$1255)
  'int32)
 (vv-mpy-add ... #<load-data> '(1) (! x?$1256) (! x?$1257) (! x?$1258) 'int32))
run-x86-synthesizer
halide-expr:
  (vec-mul
 (vec-cast
  (vec-sub
   (vec-cast
    (load
     (buffer input 'uint8)
     (ramp
      (sca-add
       (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
       (sca-sub
        (sca-sub (var-lookup 't101) (var-lookup 't106))
        (var-lookup 'input.min.0)))
      1
      16)
     (aligned 1 0))
    'int16
    16)
   (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
  'int32
  16)
 (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
template:
  (vs-mpy-add
 ...
 #<load-data>
 (list (load-sca (buffer inv_sqrt 'int32) 0))
 #f
 #f
 #f
 'int32)
axioms:
  '()
optimized-halide-expr:
  (vec-mul
 (vec-cast
  (vec-sub
   (vec-cast
    (load
     (buffer input 'uint8)
     (ramp
      (sca-add
       (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
       (sca-sub
        (sca-sub (var-lookup 't101) (var-lookup 't106))
        (var-lookup 'input.min.0)))
      1
      16)
     (aligned 1 0))
    'int16
    16)
   (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
  'int32
  16)
 (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
optimized-template:
  (vs-mpy-add
 ...
 #<load-data>
 (list (load-sca (buffer inv_sqrt 'int32) 0))
 #f
 #f
 #f
 'int32)
optimized Halide 0:
  (int32_t
 (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)))
optimized x86 0:
  (int32_t
 (bvmul (app inv_sqrt 0) (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 32))))
run-x86-synthesizer
halide-expr:
  (vec-mul
 (vec-cast
  (vec-sub
   (vec-cast
    (load
     (buffer input 'uint8)
     (ramp
      (sca-add
       (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
       (sca-sub
        (sca-sub (var-lookup 't101) (var-lookup 't106))
        (var-lookup 'input.min.0)))
      1
      16)
     (aligned 1 0))
    'int16
    16)
   (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
  'int32
  16)
 (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
template:
  (vv-mpy-add ... #<load-data> '(1) (! x?$1256) (! x?$1257) (! x?$1258) 'int32)
axioms:
  '()
optimized-halide-expr:
  (vec-mul
 (vec-cast
  (vec-sub
   (vec-cast
    (load
     (buffer input 'uint8)
     (ramp
      (sca-add
       (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
       (sca-sub
        (sca-sub (var-lookup 't101) (var-lookup 't106))
        (var-lookup 'input.min.0)))
      1
      16)
     (aligned 1 0))
    'int16
    16)
   (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
  'int32
  16)
 (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
optimized-template:
  (vv-mpy-add ... #<load-data> '(1) (! x?$1256) (! x?$1257) (! x?$1258) 'int32)
optimized Halide 0:
  (int32_t
 (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)))
optimized x86 0:
  (int32_t
 (ite* (⊢ (&& x?$1258 (! (&& (! x?$1256) (! x?$1258)))) (ite x?$1256 (bvadd (bvmul (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 32)) (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 32))) (ite x?$1257 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1257 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (bvmul (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 32)) (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1257 (bv #x00000000 32) (bv #x00000001 32))))) (bvmul (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 32)) (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1257 (bv #x00000000 32) (bv #x00000001 32)))))))) (⊢ (|| (&& (! x?$1256) (! x?$1258)) (&& (! x?$1258) (! (&& (! x?$1256) (! x?$1258))))) (bvashr (ite x?$1256 (bvadd (bvmul (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 32)) (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 32))) (ite x?$1257 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1257 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (bvmul (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 32)) (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1257 (bv #x00000000 32) (bv #x00000001 32))))) (bvmul (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 32)) (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1257 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000001 32)))))
run-x86-synthesizer
halide-expr:
  (vec-mul
 (vec-cast
  (vec-sub
   (vec-cast
    (load
     (buffer input 'uint8)
     (ramp
      (sca-add
       (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
       (sca-sub
        (sca-sub (var-lookup 't101) (var-lookup 't106))
        (var-lookup 'input.min.0)))
      1
      16)
     (aligned 1 0))
    'int16
    16)
   (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
  'int32
  16)
 (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
template:
  (vs-mpy-add
 ...
 (combine #<load-data> (broadcast ... (uint8_t input_zero)))
 (list
  (sca-mul
   (sca-cast (int8_t (bv #x01 8)) 'int16)
   (sca-cast
    (union [x?$1060 #(struct:load-sca #(struct:buffer inv_sqrt int32) 0)] [(! x?$1060) #(struct:int8_t
                                                                                         (bv #x01 8))])
    'int16))
  (sca-mul
   (sca-cast (int8_t (bv #xff 8)) 'int16)
   (sca-cast
    (union [x?$1060 #(struct:load-sca #(struct:buffer inv_sqrt int32) 0)] [(! x?$1060) #(struct:int8_t
                                                                                         (bv #x01 8))])
    'int16)))
 #f
 #f
 #f
 'int16)
axioms:
  '(#t #t)
optimized-halide-expr:
  (vec-mul
 (vec-cast
  (vec-sub
   (vec-cast #<abstr-halide-expr> 'int16 16)
   (vec-cast #<abstr-halide-expr> 'int16 16))
  'int32
  16)
 (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
optimized-template:
  (vs-mpy-add
 ...
 (combine #<abstr-expr> #<abstr-expr>)
 (list
  (sca-mul
   (sca-cast (int8_t (bv #x01 8)) 'int16)
   (sca-cast
    (union [x?$1060 #(struct:load-sca #(struct:buffer inv_sqrt int32) 0)] [(! x?$1060) #(struct:int8_t
                                                                                         (bv #x01 8))])
    'int16))
  (sca-mul
   (sca-cast (int8_t (bv #xff 8)) 'int16)
   (sca-cast
    (union [x?$1060 #(struct:load-sca #(struct:buffer inv_sqrt int32) 0)] [(! x?$1060) #(struct:int8_t
                                                                                         (bv #x01 8))])
    'int16)))
 #f
 #f
 #f
 'int16)
optimized Halide 0:
  (int32_t
 (bvmul (app inv_sqrt 0) (sign-extend (bvadd (zero-extend (app abstr-vals$1259 0) (bitvector 16)) (bvneg (zero-extend (app abstr-vals$1260 0) (bitvector 16)))) (bitvector 32))))
optimized x86 0:
  (int16_t
 (bvadd (bvmul (zero-extend (app abstr-vals$1259 0) (bitvector 16)) (ite x?$1060 (extract 15 0 (app inv_sqrt 0)) (bv #x0001 16))) (bvmul (zero-extend (app abstr-vals$1260 0) (bitvector 16)) (bvneg (ite x?$1060 (extract 15 0 (app inv_sqrt 0)) (bv #x0001 16))))))
Ran synthesizer for 3 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-mul
 (vec-cast
  (vec-sub
   (vec-cast
    (load
     (buffer input 'uint8)
     (ramp
      (sca-add
       (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
       (sca-sub
        (sca-sub (var-lookup 't101) (var-lookup 't106))
        (var-lookup 'input.min.0)))
      1
      16)
     (aligned 1 0))
    'int16
    16)
   (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
  'int32
  16)
 (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
template:
  (vs-mpy-add
 ...
 (combine #<load-data> (broadcast ... (uint8_t input_zero)))
 (list
  (sca-mul
   (sca-cast (int8_t (bv #x01 8)) 'int16)
   (sca-cast
    (union [x?$1060 #(struct:load-sca #(struct:buffer inv_sqrt int32) 0)] [(! x?$1060) #(struct:int8_t
                                                                                         (bv #x01 8))])
    'int16))
  (sca-mul
   (sca-cast (int8_t (bv #xff 8)) 'int16)
   (sca-cast
    (union [x?$1060 #(struct:load-sca #(struct:buffer inv_sqrt int32) 0)] [(! x?$1060) #(struct:int8_t
                                                                                         (bv #x01 8))])
    'int16)))
 #f
 #f
 #f
 'int32)
axioms:
  '(#t #t)
optimized-halide-expr:
  (vec-mul
 (vec-cast
  (vec-sub
   (vec-cast #<abstr-halide-expr> 'int16 16)
   (vec-cast #<abstr-halide-expr> 'int16 16))
  'int32
  16)
 (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
optimized-template:
  (vs-mpy-add
 ...
 (combine #<abstr-expr> #<abstr-expr>)
 (list
  (sca-mul
   (sca-cast (int8_t (bv #x01 8)) 'int16)
   (sca-cast
    (union [x?$1060 #(struct:load-sca #(struct:buffer inv_sqrt int32) 0)] [(! x?$1060) #(struct:int8_t
                                                                                         (bv #x01 8))])
    'int16))
  (sca-mul
   (sca-cast (int8_t (bv #xff 8)) 'int16)
   (sca-cast
    (union [x?$1060 #(struct:load-sca #(struct:buffer inv_sqrt int32) 0)] [(! x?$1060) #(struct:int8_t
                                                                                         (bv #x01 8))])
    'int16)))
 #f
 #f
 #f
 'int32)
optimized Halide 0:
  (int32_t
 (bvmul (app inv_sqrt 0) (sign-extend (bvadd (zero-extend (app abstr-vals$1261 0) (bitvector 16)) (bvneg (zero-extend (app abstr-vals$1262 0) (bitvector 16)))) (bitvector 32))))
optimized x86 0:
  (int32_t
 (bvadd (bvmul (zero-extend (app abstr-vals$1261 0) (bitvector 32)) (sign-extend (ite x?$1060 (extract 15 0 (app inv_sqrt 0)) (bv #x0001 16)) (bitvector 32))) (bvmul (zero-extend (app abstr-vals$1262 0) (bitvector 32)) (sign-extend (bvneg (ite x?$1060 (extract 15 0 (app inv_sqrt 0)) (bv #x0001 16))) (bitvector 32)))))
Ran synthesizer for 211 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-mul
 (vec-cast
  (vec-sub
   (vec-cast
    (load
     (buffer input 'uint8)
     (ramp
      (sca-add
       (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
       (sca-sub
        (sca-sub (var-lookup 't101) (var-lookup 't106))
        (var-lookup 'input.min.0)))
      1
      16)
     (aligned 1 0))
    'int16
    16)
   (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
  'int32
  16)
 (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
template:
  (cast
 ...
 (vs-mpy-add
  ...
  (combine #<load-data> (broadcast ... (uint8_t input_zero)))
  (list (int8_t (bv #x01 8)) (int8_t (bv #xff 8)))
  #f
  #f
  #f
  'int16)
 'int32
 x?$1056)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$1263 idx) (bv #x00ff 16)) (bvsle (bv #xff01 16) (app abstr-vals$1263 idx)))))
optimized-halide-expr:
  (vec-mul
 (vec-cast #<abstr-halide-expr> 'int32 16)
 (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
optimized-template:
  (cast ... #<abstr-expr> 'int32 x?$1056)
optimized Halide 0:
  (int32_t
 (bvmul (app inv_sqrt 0) (sign-extend (app abstr-vals$1263 0) (bitvector 32))))
optimized x86 0:
  (int32_t (sign-extend (app abstr-vals$1263 0) (bitvector 32)))
run-x86-synthesizer
halide-expr:
  (vec-mul
 (vec-cast
  (vec-sub
   (vec-cast
    (load
     (buffer input 'uint8)
     (ramp
      (sca-add
       (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
       (sca-sub
        (sca-sub (var-lookup 't101) (var-lookup 't106))
        (var-lookup 'input.min.0)))
      1
      16)
     (aligned 1 0))
    'int16
    16)
   (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
  'int32
  16)
 (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
template:
  (vs-mpy-add
 ...
 (vs-mpy-add
  ...
  (combine #<load-data> (broadcast ... (uint8_t input_zero)))
  (list (int8_t (bv #x01 8)) (int8_t (bv #xff 8)))
  #f
  #f
  #f
  'int16)
 (list (load-sca (buffer inv_sqrt 'int32) 0))
 #f
 #f
 #f
 'int32)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$1264 idx) (bv #x00ff 16)) (bvsle (bv #xff01 16) (app abstr-vals$1264 idx)))))
optimized-halide-expr:
  (vec-mul
 (vec-cast #<abstr-halide-expr> 'int32 16)
 (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
optimized-template:
  (vs-mpy-add
 ...
 #<abstr-expr>
 (list (load-sca (buffer inv_sqrt 'int32) 0))
 #f
 #f
 #f
 'int32)
optimized Halide 0:
  (int32_t
 (bvmul (app inv_sqrt 0) (sign-extend (app abstr-vals$1264 0) (bitvector 32))))
optimized x86 0:
  (int32_t
 (bvmul (app inv_sqrt 0) (sign-extend (app abstr-vals$1264 0) (bitvector 32))))
Ran synthesizer for 32 ms
(model)
(vec-mul
 (vec-cast #<abstr-halide-expr> 'int32 16)
 (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
(vs-mpy-add
 ...
 (vs-mpy-add
  ...
  (combine #<load-data> (broadcast ... (uint8_t input_zero)))
  (list (int8_t (bv #x01 8)) (int8_t (bv #xff 8)))
  #f
  #f
  #f
  'int16)
 (list (load-sca (buffer inv_sqrt 'int32) 0))
 #f
 #f
 #f
 'int32)
Ran bounds analysis for 87 ms
Ran bounds analysis for 80 ms
"Success?"
#t
(vs-mpy-add ... (vs-mpy-add ... (combine #<load-data> (broadcast ... (uint8_t input_zero))) (list (int8_t (bv #x01 8)) (int8_t (bv #xff 8))) #f #f #f 'int16) (list (load-sca (buffer inv_sqrt 'int32) 0)) #f #f #f 'int32)
"Building Expr:"
(sca-broadcast (int32_t (bv #x00000080 32)) 16)
"Fold templates"
'()
here()

"Replace templates"
'()
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (sca-broadcast (int32_t (bv #x00000080 32)) 16)
template:
  (broadcast ... (int32_t (bv #x00000080 32)))
axioms:
  '()
optimized-halide-expr:
  (sca-broadcast (int32_t (bv #x00000080 32)) 16)
optimized-template:
  (broadcast ... (int32_t (bv #x00000080 32)))
optimized Halide 0:
  (int32_t (bv #x00000080 32))
optimized x86 0:
  (int32_t (bv #x00000080 32))
Ran synthesizer for 16 ms
(model)
(sca-broadcast (int32_t (bv #x00000080 32)) 16)
(broadcast ... (int32_t (bv #x00000080 32)))
Ran bounds analysis for 21 ms
Ran bounds analysis for 12 ms
"Extended success?"
#t
(broadcast ... (int32_t (bv #x00000080 32)))
"Building Expr:"
(vec-div
 (vec-mul
  (vec-cast
   (vec-sub
    (vec-cast
     (load
      (buffer input 'uint8)
      (ramp
       (sca-add
        (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
        (sca-sub
         (sca-sub (var-lookup 't101) (var-lookup 't106))
         (var-lookup 'input.min.0)))
       1
       16)
      (aligned 1 0))
     'int16
     16)
    (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
   'int32
   16)
  (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
 (sca-broadcast (int32_t (bv #x00000080 32)) 16))
"Fold templates"
'()
here()

"Replace templates"
'()
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (vec-div
 (vec-mul
  (vec-cast
   (vec-sub
    (vec-cast
     (load
      (buffer input 'uint8)
      (ramp
       (sca-add
        (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
        (sca-sub
         (sca-sub (var-lookup 't101) (var-lookup 't106))
         (var-lookup 'input.min.0)))
       1
       16)
      (aligned 1 0))
     'int16
     16)
    (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
   'int32
   16)
  (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
 (sca-broadcast (int32_t (bv #x00000080 32)) 16))
template:
  (vs-shift-right
 ...
 (vs-mpy-add
  ...
  (vs-mpy-add
   ...
   (combine #<load-data> (broadcast ... (uint8_t input_zero)))
   (list (int8_t (bv #x01 8)) (int8_t (bv #xff 8)))
   #f
   #f
   #f
   'int16)
  (list (load-sca (buffer inv_sqrt 'int32) 0))
  #f
  #f
  #f
  'int32)
 (int32_t (bv #x00000007 32))
 #f
 #f
 #t)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-div #<abstr-halide-expr> (sca-broadcast (int32_t (bv #x00000080 32)) 16))
optimized-template:
  (vs-shift-right ... #<abstr-expr> (int32_t (bv #x00000007 32)) #f #f #t)
optimized Halide 0:
  (int32_t
 (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$1274 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$1274 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$1274 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64)))))
optimized x86 0:
  (int32_t (bvashr (app abstr-vals$1274 0) (bv #x00000007 32)))
Ran synthesizer for 562 ms
(model)
(vec-div #<abstr-halide-expr> (sca-broadcast (int32_t (bv #x00000080 32)) 16))
(vs-shift-right
 ...
 (vs-mpy-add
  ...
  (vs-mpy-add
   ...
   (combine #<load-data> (broadcast ... (uint8_t input_zero)))
   (list (int8_t (bv #x01 8)) (int8_t (bv #xff 8)))
   #f
   #f
   #f
   'int16)
  (list (load-sca (buffer inv_sqrt 'int32) 0))
  #f
  #f
  #f
  'int32)
 (int32_t (bv #x00000007 32))
 #f
 #f
 #t)
Ran bounds analysis for 34 ms
Ran bounds analysis for 25 ms
"Extended success?"
#t
(vs-shift-right
 ...
 (vs-mpy-add
  ...
  (vs-mpy-add
   ...
   (combine #<load-data> (broadcast ... (uint8_t input_zero)))
   (list (int8_t (bv #x01 8)) (int8_t (bv #xff 8)))
   #f
   #f
   #f
   'int16)
  (list (load-sca (buffer inv_sqrt 'int32) 0))
  #f
  #f
  #f
  'int32)
 (int32_t (bv #x00000007 32))
 #f
 #f
 #t)
"Building Expr:"
(vec-bwand
 (sca-broadcast (int32_t (bv #x00000001 32)) 16)
 (vec-div
  (vec-mul
   (vec-cast
    (vec-sub
     (vec-cast
      (load
       (buffer input 'uint8)
       (ramp
        (sca-add
         (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
         (sca-sub
          (sca-sub (var-lookup 't101) (var-lookup 't106))
          (var-lookup 'input.min.0)))
        1
        16)
       (aligned 1 0))
      'int16
      16)
     (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
    'int32
    16)
   (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
  (sca-broadcast (int32_t (bv #x00000080 32)) 16)))
"Fold templates"
(list
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (vs-mpy-add
    ...
    (combine #<load-data> (broadcast ... (uint8_t input_zero)))
    (list (int8_t (bv #x01 8)) (int8_t (bv #xff 8)))
    #f
    #f
    #f
    'int16)
   (list (load-sca (buffer inv_sqrt 'int32) 0))
   #f
   #f
   #f
   'int32)
  (int32_t (bv #x00000007 32))
  #f
  #f
  #t)
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (vs-mpy-add
    ...
    (combine #<load-data> (broadcast ... (uint8_t input_zero)))
    (list (int8_t (bv #x01 8)) (int8_t (bv #xff 8)))
    #f
    #f
    #f
    'int16)
   (list (load-sca (buffer inv_sqrt 'int32) 0))
   #f
   #f
   #f
   'int32)
  (int32_t (bv #x00000007 32))
  x?$1276
  x?$1277
  x?$1278))
here(#(struct:vs-shift-right ... #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:uint8_t input_zero))> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #xff 8))) #f #f #f int16) (#(struct:load-sca #(struct:buffer inv_sqrt int32) 0)) #f #f #f int32) #(struct:int32_t (bv #x00000007 32)) #f #f #t) #(struct:vs-shift-right ... #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:uint8_t input_zero))> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #xff 8))) #f #f #f int16) (#(struct:load-sca #(struct:buffer inv_sqrt int32) 0)) #f #f #f int32) #(struct:int32_t (bv #x00000007 32)) x?$1276 x?$1277 x?$1278))

"Replace templates"
'()
run-x86-synthesizer
halide-expr:
  (vec-bwand
 (sca-broadcast (int32_t (bv #x00000001 32)) 16)
 (vec-div
  (vec-mul
   (vec-cast
    (vec-sub
     (vec-cast
      (load
       (buffer input 'uint8)
       (ramp
        (sca-add
         (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
         (sca-sub
          (sca-sub (var-lookup 't101) (var-lookup 't106))
          (var-lookup 'input.min.0)))
        1
        16)
       (aligned 1 0))
      'int16
      16)
     (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
    'int32
    16)
   (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
  (sca-broadcast (int32_t (bv #x00000080 32)) 16)))
template:
  (vs-shift-right
 ...
 (vs-mpy-add
  ...
  (vs-mpy-add
   ...
   (combine #<load-data> (broadcast ... (uint8_t input_zero)))
   (list (int8_t (bv #x01 8)) (int8_t (bv #xff 8)))
   #f
   #f
   #f
   'int16)
  (list (load-sca (buffer inv_sqrt 'int32) 0))
  #f
  #f
  #f
  'int32)
 (int32_t (bv #x00000007 32))
 #f
 #f
 #t)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-bwand
 (sca-broadcast (int32_t (bv #x00000001 32)) 16)
 (vec-div
  #<abstr-halide-expr>
  (sca-broadcast (int32_t (bv #x00000080 32)) 16)))
optimized-template:
  (vs-shift-right ... #<abstr-expr> (int32_t (bv #x00000007 32)) #f #f #t)
optimized Halide 0:
  (int32_t
 (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$1287 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$1287 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$1287 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))))
optimized x86 0:
  (int32_t (bvashr (app abstr-vals$1287 0) (bv #x00000007 32)))
Ran synthesizer for 534 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-bwand
 (sca-broadcast (int32_t (bv #x00000001 32)) 16)
 (vec-div
  (vec-mul
   (vec-cast
    (vec-sub
     (vec-cast
      (load
       (buffer input 'uint8)
       (ramp
        (sca-add
         (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
         (sca-sub
          (sca-sub (var-lookup 't101) (var-lookup 't106))
          (var-lookup 'input.min.0)))
        1
        16)
       (aligned 1 0))
      'int16
      16)
     (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
    'int32
    16)
   (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
  (sca-broadcast (int32_t (bv #x00000080 32)) 16)))
template:
  (vs-shift-right
 ...
 (vs-mpy-add
  ...
  (vs-mpy-add
   ...
   (combine #<load-data> (broadcast ... (uint8_t input_zero)))
   (list (int8_t (bv #x01 8)) (int8_t (bv #xff 8)))
   #f
   #f
   #f
   'int16)
  (list (load-sca (buffer inv_sqrt 'int32) 0))
  #f
  #f
  #f
  'int32)
 (int32_t (bv #x00000007 32))
 x?$1276
 x?$1277
 x?$1278)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-bwand
 (sca-broadcast (int32_t (bv #x00000001 32)) 16)
 (vec-div
  #<abstr-halide-expr>
  (sca-broadcast (int32_t (bv #x00000080 32)) 16)))
optimized-template:
  (vs-shift-right
 ...
 #<abstr-expr>
 (int32_t (bv #x00000007 32))
 x?$1276
 x?$1277
 x?$1278)
optimized Halide 0:
  (int32_t
 (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$1288 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$1288 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$1288 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))))
optimized x86 0:
  (int32_t
 (ite x?$1276 (bvadd (ite x?$1278 (bvashr (app abstr-vals$1288 0) (bv #x00000007 32)) (bvlshr (app abstr-vals$1288 0) (bv #x00000007 32))) (bvand (bv #x00000001 32) (ite x?$1278 (bvashr (app abstr-vals$1288 0) (bv #x00000006 32)) (bvlshr (app abstr-vals$1288 0) (bv #x00000006 32))))) (ite x?$1278 (bvashr (app abstr-vals$1288 0) (bv #x00000007 32)) (bvlshr (app abstr-vals$1288 0) (bv #x00000007 32)))))
Ran synthesizer for 559 ms
(unsat)
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (vec-bwand
 (sca-broadcast (int32_t (bv #x00000001 32)) 16)
 (vec-div
  (vec-mul
   (vec-cast
    (vec-sub
     (vec-cast
      (load
       (buffer input 'uint8)
       (ramp
        (sca-add
         (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
         (sca-sub
          (sca-sub (var-lookup 't101) (var-lookup 't106))
          (var-lookup 'input.min.0)))
        1
        16)
       (aligned 1 0))
      'int16
      16)
     (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
    'int32
    16)
   (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
  (sca-broadcast (int32_t (bv #x00000080 32)) 16)))
template:
  (bitwise-op
 ...
 'and
 (broadcast ... (int32_t (bv #x00000001 32)))
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (vs-mpy-add
    ...
    (combine #<load-data> (broadcast ... (uint8_t input_zero)))
    (list (int8_t (bv #x01 8)) (int8_t (bv #xff 8)))
    #f
    #f
    #f
    'int16)
   (list (load-sca (buffer inv_sqrt 'int32) 0))
   #f
   #f
   #f
   'int32)
  (int32_t (bv #x00000007 32))
  #f
  #f
  #t))
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$1289 idx) (bv #x00000001 32)) (bvsle (bv #x00000001 32) (app abstr-vals$1289 idx))))
 (forall (idx) (&& (bvsle (app abstr-vals$1290 idx) (bv #x00ffffff 32)) (bvsle (bv #xff000000 32) (app abstr-vals$1290 idx)))))
optimized-halide-expr:
  (vec-bwand #<abstr-halide-expr> #<abstr-halide-expr>)
optimized-template:
  (bitwise-op ... 'and #<abstr-expr> #<abstr-expr>)
optimized Halide 0:
  (int32_t (bvand (app abstr-vals$1289 0) (app abstr-vals$1290 0)))
optimized x86 0:
  (int32_t (bvand (app abstr-vals$1289 0) (app abstr-vals$1290 0)))
Ran synthesizer for 33 ms
(model)
(vec-bwand #<abstr-halide-expr> #<abstr-halide-expr>)
(bitwise-op
 ...
 'and
 (broadcast ... (int32_t (bv #x00000001 32)))
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (vs-mpy-add
    ...
    (combine #<load-data> (broadcast ... (uint8_t input_zero)))
    (list (int8_t (bv #x01 8)) (int8_t (bv #xff 8)))
    #f
    #f
    #f
    'int16)
   (list (load-sca (buffer inv_sqrt 'int32) 0))
   #f
   #f
   #f
   'int32)
  (int32_t (bv #x00000007 32))
  #f
  #f
  #t))
Ran bounds analysis for 26 ms
Ran bounds analysis for 26 ms
"Extended success?"
#t
(bitwise-op
 ...
 'and
 (broadcast ... (int32_t (bv #x00000001 32)))
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (vs-mpy-add
    ...
    (combine #<load-data> (broadcast ... (uint8_t input_zero)))
    (list (int8_t (bv #x01 8)) (int8_t (bv #xff 8)))
    #f
    #f
    #f
    'int16)
   (list (load-sca (buffer inv_sqrt 'int32) 0))
   #f
   #f
   #f
   'int32)
  (int32_t (bv #x00000007 32))
  #f
  #f
  #t))
"Building Expr:"
(sca-broadcast (int32_t (bv #x00000100 32)) 16)
"Fold templates"
'()
here()

"Replace templates"
'()
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (sca-broadcast (int32_t (bv #x00000100 32)) 16)
template:
  (broadcast ... (int32_t (bv #x00000100 32)))
axioms:
  '()
optimized-halide-expr:
  (sca-broadcast (int32_t (bv #x00000100 32)) 16)
optimized-template:
  (broadcast ... (int32_t (bv #x00000100 32)))
optimized Halide 0:
  (int32_t (bv #x00000100 32))
optimized x86 0:
  (int32_t (bv #x00000100 32))
Ran synthesizer for 14 ms
(model)
(sca-broadcast (int32_t (bv #x00000100 32)) 16)
(broadcast ... (int32_t (bv #x00000100 32)))
Ran bounds analysis for 20 ms
Ran bounds analysis for 13 ms
"Extended success?"
#t
(broadcast ... (int32_t (bv #x00000100 32)))
"Building Expr:"
(vec-div
 (vec-mul
  (vec-cast
   (vec-sub
    (vec-cast
     (load
      (buffer input 'uint8)
      (ramp
       (sca-add
        (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
        (sca-sub
         (sca-sub (var-lookup 't101) (var-lookup 't106))
         (var-lookup 'input.min.0)))
       1
       16)
      (aligned 1 0))
     'int16
     16)
    (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
   'int32
   16)
  (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
 (sca-broadcast (int32_t (bv #x00000100 32)) 16))
"Fold templates"
'()
here()

"Replace templates"
'()
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (vec-div
 (vec-mul
  (vec-cast
   (vec-sub
    (vec-cast
     (load
      (buffer input 'uint8)
      (ramp
       (sca-add
        (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
        (sca-sub
         (sca-sub (var-lookup 't101) (var-lookup 't106))
         (var-lookup 'input.min.0)))
       1
       16)
      (aligned 1 0))
     'int16
     16)
    (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
   'int32
   16)
  (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
 (sca-broadcast (int32_t (bv #x00000100 32)) 16))
template:
  (vs-shift-right
 ...
 (vs-mpy-add
  ...
  (vs-mpy-add
   ...
   (combine #<load-data> (broadcast ... (uint8_t input_zero)))
   (list (int8_t (bv #x01 8)) (int8_t (bv #xff 8)))
   #f
   #f
   #f
   'int16)
  (list (load-sca (buffer inv_sqrt 'int32) 0))
  #f
  #f
  #f
  'int32)
 (int32_t (bv #x00000008 32))
 #f
 #f
 #t)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-div #<abstr-halide-expr> (sca-broadcast (int32_t (bv #x00000100 32)) 16))
optimized-template:
  (vs-shift-right ... #<abstr-expr> (int32_t (bv #x00000008 32)) #f #f #t)
optimized Halide 0:
  (int32_t
 (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$1301 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$1301 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$1301 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64)))))
optimized x86 0:
  (int32_t (bvashr (app abstr-vals$1301 0) (bv #x00000008 32)))
Ran synthesizer for 528 ms
(model)
(vec-div #<abstr-halide-expr> (sca-broadcast (int32_t (bv #x00000100 32)) 16))
(vs-shift-right
 ...
 (vs-mpy-add
  ...
  (vs-mpy-add
   ...
   (combine #<load-data> (broadcast ... (uint8_t input_zero)))
   (list (int8_t (bv #x01 8)) (int8_t (bv #xff 8)))
   #f
   #f
   #f
   'int16)
  (list (load-sca (buffer inv_sqrt 'int32) 0))
  #f
  #f
  #f
  'int32)
 (int32_t (bv #x00000008 32))
 #f
 #f
 #t)
Ran bounds analysis for 34 ms
Ran bounds analysis for 25 ms
"Extended success?"
#t
(vs-shift-right
 ...
 (vs-mpy-add
  ...
  (vs-mpy-add
   ...
   (combine #<load-data> (broadcast ... (uint8_t input_zero)))
   (list (int8_t (bv #x01 8)) (int8_t (bv #xff 8)))
   #f
   #f
   #f
   'int16)
  (list (load-sca (buffer inv_sqrt 'int32) 0))
  #f
  #f
  #f
  'int32)
 (int32_t (bv #x00000008 32))
 #f
 #f
 #t)
"Building Expr:"
(vec-add
 (vec-bwand
  (sca-broadcast (int32_t (bv #x00000001 32)) 16)
  (vec-div
   (vec-mul
    (vec-cast
     (vec-sub
      (vec-cast
       (load
        (buffer input 'uint8)
        (ramp
         (sca-add
          (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
          (sca-sub
           (sca-sub (var-lookup 't101) (var-lookup 't106))
           (var-lookup 'input.min.0)))
         1
         16)
        (aligned 1 0))
       'int16
       16)
      (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
     'int32
     16)
    (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
   (sca-broadcast (int32_t (bv #x00000080 32)) 16)))
 (vec-div
  (vec-mul
   (vec-cast
    (vec-sub
     (vec-cast
      (load
       (buffer input 'uint8)
       (ramp
        (sca-add
         (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
         (sca-sub
          (sca-sub (var-lookup 't101) (var-lookup 't106))
          (var-lookup 'input.min.0)))
        1
        16)
       (aligned 1 0))
      'int16
      16)
     (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
    'int32
    16)
   (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
  (sca-broadcast (int32_t (bv #x00000100 32)) 16)))
"Fold templates"
(list
 (vs-mpy-add
  ...
  (vs-mpy-add
   ...
   (combine #<load-data> (broadcast ... (uint8_t input_zero)))
   (list (int8_t (bv #x01 8)) (int8_t (bv #xff 8)))
   #f
   #f
   #f
   'int16)
  (list
   (load-sca (buffer inv_sqrt 'int32) 0)
   (union [x?$1310 #(struct:load-sca #(struct:buffer inv_sqrt int32) 0)] [(! x?$1310) #(struct:int8_t
                                                                                        (bv #x01 8))]))
  #f
  #f
  #f
  'int32)
 (vs-mpy-add
  ...
  (vs-mpy-add
   ...
   (combine #<load-data> (broadcast ... (uint8_t input_zero)))
   (list (int8_t (bv #x01 8)) (int8_t (bv #xff 8)))
   #f
   #f
   #f
   'int16)
  (list (load-sca (buffer inv_sqrt 'int32) 0))
  #f
  x?$1308
  #f
  'int32)
 (vs-mpy-add
  ...
  (combine
   (vs-mpy-add
    ...
    (vs-mpy-add
     ...
     (combine #<load-data> (broadcast ... (uint8_t input_zero)))
     (list (int8_t (bv #x01 8)) (int8_t (bv #xff 8)))
     #f
     #f
     #f
     'int16)
    (list (load-sca (buffer inv_sqrt 'int32) 0))
    #f
    #f
    #f
    'int32)
   (union [x?$1311 #(struct:bitwise-op
                     ...
                     and
                     #(struct:broadcast
                       ...
                       #(struct:int32_t (bv #x00000001 32)))
                     #(struct:vs-shift-right
                       ...
                       #(struct:vs-mpy-add
                         ...
                         #(struct:vs-mpy-add
                           ...
                           #<combine:
                            #<load-data>
                            #(struct:broadcast
                              ...
                              #(struct:uint8_t input_zero))>
                           (#(struct:int8_t (bv #x01 8))
                            #(struct:int8_t (bv #xff 8)))
                           #f
                           #f
                           #f
                           int16)
                         (#(struct:load-sca #(struct:buffer inv_sqrt int32) 0))
                         #f
                         #f
                         #f
                         int32)
                       #(struct:int32_t (bv #x00000007 32))
                       #f
                       #f
                       #t))] [(! x?$1311) #(struct:vs-shift-right
                                            ...
                                            #(struct:vs-mpy-add
                                              ...
                                              #(struct:vs-mpy-add
                                                ...
                                                #<combine:
                                                 #<load-data>
                                                 #(struct:broadcast
                                                   ...
                                                   #(struct:uint8_t
                                                     input_zero))>
                                                (#(struct:int8_t (bv #x01 8))
                                                 #(struct:int8_t (bv #xff 8)))
                                                #f
                                                #f
                                                #f
                                                int16)
                                              (#(struct:load-sca
                                                 #(struct:buffer
                                                   inv_sqrt
                                                   int32)
                                                 0))
                                              #f
                                              #f
                                              #f
                                              int32)
                                            #(struct:int32_t
                                              (bv #x00000008 32))
                                            #f
                                            #f
                                            #t)]))
  (list (load-sca (buffer inv_sqrt 'int32) 0) (int8_t (bv #x01 8)))
  #f
  #f
  #f
  'int32)
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (vs-mpy-add
    ...
    (combine #<load-data> (broadcast ... (uint8_t input_zero)))
    (list (int8_t (bv #x01 8)) (int8_t (bv #xff 8)))
    #f
    #f
    #f
    'int16)
   (list (load-sca (buffer inv_sqrt 'int32) 0))
   #f
   #f
   #f
   'int32)
  (int32_t (ite x?$1303 (bv #x00000007 32) (bv #x00000008 32)))
  #f
  #f
  #t)
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (vs-mpy-add
    ...
    (combine #<load-data> (broadcast ... (uint8_t input_zero)))
    (list (int8_t (bv #x01 8)) (int8_t (bv #xff 8)))
    #f
    #f
    #f
    'int16)
   (list (load-sca (buffer inv_sqrt 'int32) 0))
   #f
   #f
   #f
   'int32)
  (int32_t (bv #x00000007 32))
  x?$1304
  x?$1305
  x?$1306)
 (vs-mpy-add
  ...
  (combine #<load-data> (broadcast ... (uint8_t input_zero)))
  (list
   (int8_t (bv #x01 8))
   (int8_t (bv #xff 8))
   (union [x?$1580 #(struct:load-sca #(struct:buffer inv_sqrt int32) 0)] [(! x?$1580) #(struct:int8_t
                                                                                        (bv #x01 8))]))
  #f
  #f
  #f
  'int32)
 (vs-mpy-add
  ...
  (combine #<load-data> (broadcast ... (uint8_t input_zero)))
  (list (int8_t (bv #x01 8)) (int8_t (bv #xff 8)))
  #f
  x?$1578
  #f
  'int32)
 (vs-mpy-add
  ...
  (combine
   (vs-mpy-add
    ...
    (combine #<load-data> (broadcast ... (uint8_t input_zero)))
    (list (int8_t (bv #x01 8)) (int8_t (bv #xff 8)))
    #f
    #f
    #f
    'int16)
   (union [x?$1581 #(struct:bitwise-op
                     ...
                     and
                     #(struct:broadcast
                       ...
                       #(struct:int32_t (bv #x00000001 32)))
                     #(struct:vs-shift-right
                       ...
                       #(struct:vs-mpy-add
                         ...
                         #(struct:vs-mpy-add
                           ...
                           #<combine:
                            #<load-data>
                            #(struct:broadcast
                              ...
                              #(struct:uint8_t input_zero))>
                           (#(struct:int8_t (bv #x01 8))
                            #(struct:int8_t (bv #xff 8)))
                           #f
                           #f
                           #f
                           int16)
                         (#(struct:load-sca #(struct:buffer inv_sqrt int32) 0))
                         #f
                         #f
                         #f
                         int32)
                       #(struct:int32_t (bv #x00000007 32))
                       #f
                       #f
                       #t))] [(! x?$1581) #(struct:vs-shift-right
                                            ...
                                            #(struct:vs-mpy-add
                                              ...
                                              #(struct:vs-mpy-add
                                                ...
                                                #<combine:
                                                 #<load-data>
                                                 #(struct:broadcast
                                                   ...
                                                   #(struct:uint8_t
                                                     input_zero))>
                                                (#(struct:int8_t (bv #x01 8))
                                                 #(struct:int8_t (bv #xff 8)))
                                                #f
                                                #f
                                                #f
                                                int16)
                                              (#(struct:load-sca
                                                 #(struct:buffer
                                                   inv_sqrt
                                                   int32)
                                                 0))
                                              #f
                                              #f
                                              #f
                                              int32)
                                            #(struct:int32_t
                                              (bv #x00000008 32))
                                            #f
                                            #f
                                            #t)]))
  (list (int8_t (bv #x01 8)) (int8_t (bv #xff 8)) (int8_t (bv #x01 8)))
  #f
  #f
  #f
  'int32)
 (vs-mpy-add
  ...
  (vs-mpy-add
   ...
   (combine #<load-data> (broadcast ... (uint8_t input_zero)))
   (list (int8_t (bv #x01 8)) (int8_t (bv #xff 8)))
   #f
   #f
   #f
   'int16)
  (list
   (load-sca (buffer inv_sqrt 'int32) 0)
   (union [x?$1447 #(struct:load-sca #(struct:buffer inv_sqrt int32) 0)] [(! x?$1447) #(struct:int8_t
                                                                                        (bv #x01 8))]))
  #f
  #f
  #f
  'int32)
 (vs-mpy-add
  ...
  (vs-mpy-add
   ...
   (combine #<load-data> (broadcast ... (uint8_t input_zero)))
   (list (int8_t (bv #x01 8)) (int8_t (bv #xff 8)))
   #f
   #f
   #f
   'int16)
  (list (load-sca (buffer inv_sqrt 'int32) 0))
  #f
  x?$1445
  #f
  'int32)
 (vs-mpy-add
  ...
  (combine
   (vs-mpy-add
    ...
    (vs-mpy-add
     ...
     (combine #<load-data> (broadcast ... (uint8_t input_zero)))
     (list (int8_t (bv #x01 8)) (int8_t (bv #xff 8)))
     #f
     #f
     #f
     'int16)
    (list (load-sca (buffer inv_sqrt 'int32) 0))
    #f
    #f
    #f
    'int32)
   (union [x?$1448 #(struct:bitwise-op
                     ...
                     and
                     #(struct:broadcast
                       ...
                       #(struct:int32_t (bv #x00000001 32)))
                     #(struct:vs-shift-right
                       ...
                       #(struct:vs-mpy-add
                         ...
                         #(struct:vs-mpy-add
                           ...
                           #<combine:
                            #<load-data>
                            #(struct:broadcast
                              ...
                              #(struct:uint8_t input_zero))>
                           (#(struct:int8_t (bv #x01 8))
                            #(struct:int8_t (bv #xff 8)))
                           #f
                           #f
                           #f
                           int16)
                         (#(struct:load-sca #(struct:buffer inv_sqrt int32) 0))
                         #f
                         #f
                         #f
                         int32)
                       #(struct:int32_t (bv #x00000007 32))
                       #f
                       #f
                       #t))] [(! x?$1448) #(struct:vs-shift-right
                                            ...
                                            #(struct:vs-mpy-add
                                              ...
                                              #(struct:vs-mpy-add
                                                ...
                                                #<combine:
                                                 #<load-data>
                                                 #(struct:broadcast
                                                   ...
                                                   #(struct:uint8_t
                                                     input_zero))>
                                                (#(struct:int8_t (bv #x01 8))
                                                 #(struct:int8_t (bv #xff 8)))
                                                #f
                                                #f
                                                #f
                                                int16)
                                              (#(struct:load-sca
                                                 #(struct:buffer
                                                   inv_sqrt
                                                   int32)
                                                 0))
                                              #f
                                              #f
                                              #f
                                              int32)
                                            #(struct:int32_t
                                              (bv #x00000008 32))
                                            #f
                                            #f
                                            #t)]))
  (list (load-sca (buffer inv_sqrt 'int32) 0) (int8_t (bv #x01 8)))
  #f
  #f
  #f
  'int32)
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (vs-mpy-add
    ...
    (combine #<load-data> (broadcast ... (uint8_t input_zero)))
    (list (int8_t (bv #x01 8)) (int8_t (bv #xff 8)))
    #f
    #f
    #f
    'int16)
   (list (load-sca (buffer inv_sqrt 'int32) 0))
   #f
   #f
   #f
   'int32)
  (int32_t (ite x?$1440 (bv #x00000007 32) (bv #x00000008 32)))
  #f
  #f
  #t)
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (vs-mpy-add
    ...
    (combine #<load-data> (broadcast ... (uint8_t input_zero)))
    (list (int8_t (bv #x01 8)) (int8_t (bv #xff 8)))
    #f
    #f
    #f
    'int16)
   (list (load-sca (buffer inv_sqrt 'int32) 0))
   #f
   #f
   #f
   'int32)
  (int32_t (bv #x00000008 32))
  x?$1441
  x?$1442
  x?$1443))
here(#(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:uint8_t input_zero))> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #xff 8))) #f #f #f int16) (#(struct:load-sca #(struct:buffer inv_sqrt int32) 0) (union #:size 2 #:hash 176684844825345205)) #f #f #f int32) #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:uint8_t input_zero))> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #xff 8))) #f #f #f int16) (#(struct:load-sca #(struct:buffer inv_sqrt int32) 0)) #f x?$1308 #f int32) #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:uint8_t input_zero))> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #xff 8))) #f #f #f int16) (#(struct:load-sca #(struct:buffer inv_sqrt int32) 0)) #f #f #f int32) (union #:size 2 #:hash 403802099520)> (#(struct:load-sca #(struct:buffer inv_sqrt int32) 0) #(struct:int8_t (bv #x01 8))) #f #f #f int32) #(struct:vs-shift-right ... #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:uint8_t input_zero))> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #xff 8))) #f #f #f int16) (#(struct:load-sca #(struct:buffer inv_sqrt int32) 0)) #f #f #f int32) #(struct:int32_t (ite x?$1303 (bv #x00000007 32) (bv #x00000008 32))) #f #f #t) #(struct:vs-shift-right ... #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:uint8_t input_zero))> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #xff 8))) #f #f #f int16) (#(struct:load-sca #(struct:buffer inv_sqrt int32) 0)) #f #f #f int32) #(struct:int32_t (bv #x00000007 32)) x?$1304 x?$1305 x?$1306) #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:uint8_t input_zero))> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #xff 8)) (union #:size 2 #:hash 176684844779051083)) #f #f #f int32) #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:uint8_t input_zero))> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #xff 8))) #f x?$1578 #f int32) #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:uint8_t input_zero))> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #xff 8))) #f #f #f int16) (union #:size 2 #:hash 403851382919)> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #xff 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32) #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:uint8_t input_zero))> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #xff 8))) #f #f #f int16) (#(struct:load-sca #(struct:buffer inv_sqrt int32) 0) (union #:size 2 #:hash 176684844806935850)) #f #f #f int32) #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:uint8_t input_zero))> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #xff 8))) #f #f #f int16) (#(struct:load-sca #(struct:buffer inv_sqrt int32) 0)) #f x?$1445 #f int32) #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:uint8_t input_zero))> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #xff 8))) #f #f #f int16) (#(struct:load-sca #(struct:buffer inv_sqrt int32) 0)) #f #f #f int32) (union #:size 2 #:hash 403859553398)> (#(struct:load-sca #(struct:buffer inv_sqrt int32) 0) #(struct:int8_t (bv #x01 8))) #f #f #f int32) #(struct:vs-shift-right ... #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:uint8_t input_zero))> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #xff 8))) #f #f #f int16) (#(struct:load-sca #(struct:buffer inv_sqrt int32) 0)) #f #f #f int32) #(struct:int32_t (ite x?$1440 (bv #x00000007 32) (bv #x00000008 32))) #f #f #t) #(struct:vs-shift-right ... #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:uint8_t input_zero))> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #xff 8))) #f #f #f int16) (#(struct:load-sca #(struct:buffer inv_sqrt int32) 0)) #f #f #f int32) #(struct:int32_t (bv #x00000008 32)) x?$1441 x?$1442 x?$1443))

"Replace templates"
'()
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-bwand
  (sca-broadcast (int32_t (bv #x00000001 32)) 16)
  (vec-div
   (vec-mul
    (vec-cast
     (vec-sub
      (vec-cast
       (load
        (buffer input 'uint8)
        (ramp
         (sca-add
          (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
          (sca-sub
           (sca-sub (var-lookup 't101) (var-lookup 't106))
           (var-lookup 'input.min.0)))
         1
         16)
        (aligned 1 0))
       'int16
       16)
      (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
     'int32
     16)
    (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
   (sca-broadcast (int32_t (bv #x00000080 32)) 16)))
 (vec-div
  (vec-mul
   (vec-cast
    (vec-sub
     (vec-cast
      (load
       (buffer input 'uint8)
       (ramp
        (sca-add
         (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
         (sca-sub
          (sca-sub (var-lookup 't101) (var-lookup 't106))
          (var-lookup 'input.min.0)))
        1
        16)
       (aligned 1 0))
      'int16
      16)
     (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
    'int32
    16)
   (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
  (sca-broadcast (int32_t (bv #x00000100 32)) 16)))
template:
  (vs-mpy-add
 ...
 (combine #<load-data> (broadcast ... (uint8_t input_zero)))
 (list
  (int8_t (bv #x01 8))
  (int8_t (bv #xff 8))
  (union [x?$1580 #(struct:load-sca #(struct:buffer inv_sqrt int32) 0)] [(! x?$1580) #(struct:int8_t
                                                                                       (bv #x01 8))]))
 #f
 #f
 #f
 'int32)
axioms:
  '(#t #t)
optimized-halide-expr:
  (vec-add
 (vec-bwand
  (sca-broadcast (int32_t (bv #x00000001 32)) 16)
  (vec-div
   (vec-mul
    (vec-cast
     (vec-sub
      (vec-cast #<abstr-halide-expr> 'int16 16)
      (vec-cast #<abstr-halide-expr> 'int16 16))
     'int32
     16)
    (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
   (sca-broadcast (int32_t (bv #x00000080 32)) 16)))
 (vec-div
  (vec-mul
   (vec-cast
    (vec-sub
     (vec-cast #<abstr-halide-expr> 'int16 16)
     (vec-cast #<abstr-halide-expr> 'int16 16))
    'int32
    16)
   (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
  (sca-broadcast (int32_t (bv #x00000100 32)) 16)))
optimized-template:
  (vs-mpy-add
 ...
 (combine #<abstr-expr> #<abstr-expr>)
 (list
  (int8_t (bv #x01 8))
  (int8_t (bv #xff 8))
  (union [x?$1580 #(struct:load-sca #(struct:buffer inv_sqrt int32) 0)] [(! x?$1580) #(struct:int8_t
                                                                                       (bv #x01 8))]))
 #f
 #f
 #f
 'int32)
optimized Halide 0:
  (int32_t
 (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (app inv_sqrt 0) (sign-extend (bvadd (zero-extend (app abstr-vals$1710 0) (bitvector 16)) (bvneg (zero-extend (app abstr-vals$1711 0) (bitvector 16)))) (bitvector 32))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (app inv_sqrt 0) (sign-extend (bvadd (zero-extend (app abstr-vals$1710 0) (bitvector 16)) (bvneg (zero-extend (app abstr-vals$1711 0) (bitvector 16)))) (bitvector 32))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (app inv_sqrt 0) (sign-extend (bvadd (zero-extend (app abstr-vals$1710 0) (bitvector 16)) (bvneg (zero-extend (app abstr-vals$1711 0) (bitvector 16)))) (bitvector 32))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (app inv_sqrt 0) (sign-extend (bvadd (zero-extend (app abstr-vals$1710 0) (bitvector 16)) (bvneg (zero-extend (app abstr-vals$1711 0) (bitvector 16)))) (bitvector 32))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (app inv_sqrt 0) (sign-extend (bvadd (zero-extend (app abstr-vals$1710 0) (bitvector 16)) (bvneg (zero-extend (app abstr-vals$1711 0) (bitvector 16)))) (bitvector 32))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (app inv_sqrt 0) (sign-extend (bvadd (zero-extend (app abstr-vals$1710 0) (bitvector 16)) (bvneg (zero-extend (app abstr-vals$1711 0) (bitvector 16)))) (bitvector 32))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))))
optimized x86 0:
  (int32_t
 (bvadd (bvmul (zero-extend (ite c$857 (app abstr-vals$1710 idx$856) (app abstr-vals$1711 idx$856)) (bitvector 32)) (ite x?$1580 (app inv_sqrt 0) (bv #x00000001 32))) (bvadd (zero-extend (app abstr-vals$1710 0) (bitvector 32)) (bvneg (zero-extend (app abstr-vals$1711 0) (bitvector 32))))))
Ran synthesizer for 1183 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-bwand
  (sca-broadcast (int32_t (bv #x00000001 32)) 16)
  (vec-div
   (vec-mul
    (vec-cast
     (vec-sub
      (vec-cast
       (load
        (buffer input 'uint8)
        (ramp
         (sca-add
          (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
          (sca-sub
           (sca-sub (var-lookup 't101) (var-lookup 't106))
           (var-lookup 'input.min.0)))
         1
         16)
        (aligned 1 0))
       'int16
       16)
      (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
     'int32
     16)
    (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
   (sca-broadcast (int32_t (bv #x00000080 32)) 16)))
 (vec-div
  (vec-mul
   (vec-cast
    (vec-sub
     (vec-cast
      (load
       (buffer input 'uint8)
       (ramp
        (sca-add
         (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
         (sca-sub
          (sca-sub (var-lookup 't101) (var-lookup 't106))
          (var-lookup 'input.min.0)))
        1
        16)
       (aligned 1 0))
      'int16
      16)
     (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
    'int32
    16)
   (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
  (sca-broadcast (int32_t (bv #x00000100 32)) 16)))
template:
  (vs-mpy-add
 ...
 (combine #<load-data> (broadcast ... (uint8_t input_zero)))
 (list (int8_t (bv #x01 8)) (int8_t (bv #xff 8)))
 #f
 x?$1578
 #f
 'int32)
axioms:
  '(#t #t)
optimized-halide-expr:
  (vec-add
 (vec-bwand
  (sca-broadcast (int32_t (bv #x00000001 32)) 16)
  (vec-div
   (vec-mul
    (vec-cast
     (vec-sub
      (vec-cast #<abstr-halide-expr> 'int16 16)
      (vec-cast #<abstr-halide-expr> 'int16 16))
     'int32
     16)
    (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
   (sca-broadcast (int32_t (bv #x00000080 32)) 16)))
 (vec-div
  (vec-mul
   (vec-cast
    (vec-sub
     (vec-cast #<abstr-halide-expr> 'int16 16)
     (vec-cast #<abstr-halide-expr> 'int16 16))
    'int32
    16)
   (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
  (sca-broadcast (int32_t (bv #x00000100 32)) 16)))
optimized-template:
  (vs-mpy-add
 ...
 (combine #<abstr-expr> #<abstr-expr>)
 (list (int8_t (bv #x01 8)) (int8_t (bv #xff 8)))
 #f
 x?$1578
 #f
 'int32)
optimized Halide 0:
  (int32_t
 (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (app inv_sqrt 0) (sign-extend (bvadd (zero-extend (app abstr-vals$1712 0) (bitvector 16)) (bvneg (zero-extend (app abstr-vals$1713 0) (bitvector 16)))) (bitvector 32))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (app inv_sqrt 0) (sign-extend (bvadd (zero-extend (app abstr-vals$1712 0) (bitvector 16)) (bvneg (zero-extend (app abstr-vals$1713 0) (bitvector 16)))) (bitvector 32))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (app inv_sqrt 0) (sign-extend (bvadd (zero-extend (app abstr-vals$1712 0) (bitvector 16)) (bvneg (zero-extend (app abstr-vals$1713 0) (bitvector 16)))) (bitvector 32))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (app inv_sqrt 0) (sign-extend (bvadd (zero-extend (app abstr-vals$1712 0) (bitvector 16)) (bvneg (zero-extend (app abstr-vals$1713 0) (bitvector 16)))) (bitvector 32))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (app inv_sqrt 0) (sign-extend (bvadd (zero-extend (app abstr-vals$1712 0) (bitvector 16)) (bvneg (zero-extend (app abstr-vals$1713 0) (bitvector 16)))) (bitvector 32))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (app inv_sqrt 0) (sign-extend (bvadd (zero-extend (app abstr-vals$1712 0) (bitvector 16)) (bvneg (zero-extend (app abstr-vals$1713 0) (bitvector 16)))) (bitvector 32))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))))
optimized x86 0:
  (int32_t
 (bvadd (bvneg (zero-extend (app abstr-vals$1713 0) (bitvector 32))) (bvadd (zero-extend (app abstr-vals$1712 0) (bitvector 32)) (ite x?$1578 (bv #x00000001 32) (bv #x00000000 32)))))
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-bwand
  (sca-broadcast (int32_t (bv #x00000001 32)) 16)
  (vec-div
   (vec-mul
    (vec-cast
     (vec-sub
      (vec-cast
       (load
        (buffer input 'uint8)
        (ramp
         (sca-add
          (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
          (sca-sub
           (sca-sub (var-lookup 't101) (var-lookup 't106))
           (var-lookup 'input.min.0)))
         1
         16)
        (aligned 1 0))
       'int16
       16)
      (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
     'int32
     16)
    (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
   (sca-broadcast (int32_t (bv #x00000080 32)) 16)))
 (vec-div
  (vec-mul
   (vec-cast
    (vec-sub
     (vec-cast
      (load
       (buffer input 'uint8)
       (ramp
        (sca-add
         (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
         (sca-sub
          (sca-sub (var-lookup 't101) (var-lookup 't106))
          (var-lookup 'input.min.0)))
        1
        16)
       (aligned 1 0))
      'int16
      16)
     (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
    'int32
    16)
   (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
  (sca-broadcast (int32_t (bv #x00000100 32)) 16)))
template:
  (vs-mpy-add
 ...
 (vs-mpy-add
  ...
  (combine #<load-data> (broadcast ... (uint8_t input_zero)))
  (list (int8_t (bv #x01 8)) (int8_t (bv #xff 8)))
  #f
  #f
  #f
  'int16)
 (list
  (load-sca (buffer inv_sqrt 'int32) 0)
  (union [x?$1310 #(struct:load-sca #(struct:buffer inv_sqrt int32) 0)] [(! x?$1310) #(struct:int8_t
                                                                                       (bv #x01 8))]))
 #f
 #f
 #f
 'int32)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$1714 idx) (bv #x00ff 16)) (bvsle (bv #xff01 16) (app abstr-vals$1714 idx)))))
optimized-halide-expr:
  (vec-add
 (vec-bwand
  (sca-broadcast (int32_t (bv #x00000001 32)) 16)
  (vec-div
   (vec-mul
    (vec-cast #<abstr-halide-expr> 'int32 16)
    (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
   (sca-broadcast (int32_t (bv #x00000080 32)) 16)))
 (vec-div
  (vec-mul
   (vec-cast #<abstr-halide-expr> 'int32 16)
   (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
  (sca-broadcast (int32_t (bv #x00000100 32)) 16)))
optimized-template:
  (vs-mpy-add
 ...
 #<abstr-expr>
 (list
  (load-sca (buffer inv_sqrt 'int32) 0)
  (union [x?$1310 #(struct:load-sca #(struct:buffer inv_sqrt int32) 0)] [(! x?$1310) #(struct:int8_t
                                                                                       (bv #x01 8))]))
 #f
 #f
 #f
 'int32)
optimized Halide 0:
  (int32_t
 (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (app inv_sqrt 0) (sign-extend (app abstr-vals$1714 0) (bitvector 32))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (app inv_sqrt 0) (sign-extend (app abstr-vals$1714 0) (bitvector 32))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (app inv_sqrt 0) (sign-extend (app abstr-vals$1714 0) (bitvector 32))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (app inv_sqrt 0) (sign-extend (app abstr-vals$1714 0) (bitvector 32))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (app inv_sqrt 0) (sign-extend (app abstr-vals$1714 0) (bitvector 32))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (app inv_sqrt 0) (sign-extend (app abstr-vals$1714 0) (bitvector 32))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))))
optimized x86 0:
  (int32_t
 (bvadd (bvmul (app inv_sqrt 0) (sign-extend (app abstr-vals$1714 0) (bitvector 32))) (bvmul (sign-extend (app abstr-vals$1714 1) (bitvector 32)) (ite x?$1310 (app inv_sqrt 0) (bv #x00000001 32)))))
Ran synthesizer for 1361 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-bwand
  (sca-broadcast (int32_t (bv #x00000001 32)) 16)
  (vec-div
   (vec-mul
    (vec-cast
     (vec-sub
      (vec-cast
       (load
        (buffer input 'uint8)
        (ramp
         (sca-add
          (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
          (sca-sub
           (sca-sub (var-lookup 't101) (var-lookup 't106))
           (var-lookup 'input.min.0)))
         1
         16)
        (aligned 1 0))
       'int16
       16)
      (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
     'int32
     16)
    (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
   (sca-broadcast (int32_t (bv #x00000080 32)) 16)))
 (vec-div
  (vec-mul
   (vec-cast
    (vec-sub
     (vec-cast
      (load
       (buffer input 'uint8)
       (ramp
        (sca-add
         (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
         (sca-sub
          (sca-sub (var-lookup 't101) (var-lookup 't106))
          (var-lookup 'input.min.0)))
        1
        16)
       (aligned 1 0))
      'int16
      16)
     (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
    'int32
    16)
   (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
  (sca-broadcast (int32_t (bv #x00000100 32)) 16)))
template:
  (vs-mpy-add
 ...
 (vs-mpy-add
  ...
  (combine #<load-data> (broadcast ... (uint8_t input_zero)))
  (list (int8_t (bv #x01 8)) (int8_t (bv #xff 8)))
  #f
  #f
  #f
  'int16)
 (list (load-sca (buffer inv_sqrt 'int32) 0))
 #f
 x?$1308
 #f
 'int32)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$1715 idx) (bv #x00ff 16)) (bvsle (bv #xff01 16) (app abstr-vals$1715 idx)))))
optimized-halide-expr:
  (vec-add
 (vec-bwand
  (sca-broadcast (int32_t (bv #x00000001 32)) 16)
  (vec-div
   (vec-mul
    (vec-cast #<abstr-halide-expr> 'int32 16)
    (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
   (sca-broadcast (int32_t (bv #x00000080 32)) 16)))
 (vec-div
  (vec-mul
   (vec-cast #<abstr-halide-expr> 'int32 16)
   (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
  (sca-broadcast (int32_t (bv #x00000100 32)) 16)))
optimized-template:
  (vs-mpy-add
 ...
 #<abstr-expr>
 (list (load-sca (buffer inv_sqrt 'int32) 0))
 #f
 x?$1308
 #f
 'int32)
optimized Halide 0:
  (int32_t
 (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (app inv_sqrt 0) (sign-extend (app abstr-vals$1715 0) (bitvector 32))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (app inv_sqrt 0) (sign-extend (app abstr-vals$1715 0) (bitvector 32))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (app inv_sqrt 0) (sign-extend (app abstr-vals$1715 0) (bitvector 32))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (app inv_sqrt 0) (sign-extend (app abstr-vals$1715 0) (bitvector 32))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (app inv_sqrt 0) (sign-extend (app abstr-vals$1715 0) (bitvector 32))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (app inv_sqrt 0) (sign-extend (app abstr-vals$1715 0) (bitvector 32))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))))
optimized x86 0:
  (int32_t
 (bvadd (bvmul (app inv_sqrt 0) (sign-extend (app abstr-vals$1715 0) (bitvector 32))) (ite x?$1308 (bv #x00000001 32) (bv #x00000000 32))))
Ran synthesizer for 1311 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-bwand
  (sca-broadcast (int32_t (bv #x00000001 32)) 16)
  (vec-div
   (vec-mul
    (vec-cast
     (vec-sub
      (vec-cast
       (load
        (buffer input 'uint8)
        (ramp
         (sca-add
          (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
          (sca-sub
           (sca-sub (var-lookup 't101) (var-lookup 't106))
           (var-lookup 'input.min.0)))
         1
         16)
        (aligned 1 0))
       'int16
       16)
      (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
     'int32
     16)
    (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
   (sca-broadcast (int32_t (bv #x00000080 32)) 16)))
 (vec-div
  (vec-mul
   (vec-cast
    (vec-sub
     (vec-cast
      (load
       (buffer input 'uint8)
       (ramp
        (sca-add
         (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
         (sca-sub
          (sca-sub (var-lookup 't101) (var-lookup 't106))
          (var-lookup 'input.min.0)))
        1
        16)
       (aligned 1 0))
      'int16
      16)
     (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
    'int32
    16)
   (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
  (sca-broadcast (int32_t (bv #x00000100 32)) 16)))
template:
  (vs-mpy-add
 ...
 (vs-mpy-add
  ...
  (combine #<load-data> (broadcast ... (uint8_t input_zero)))
  (list (int8_t (bv #x01 8)) (int8_t (bv #xff 8)))
  #f
  #f
  #f
  'int16)
 (list
  (load-sca (buffer inv_sqrt 'int32) 0)
  (union [x?$1447 #(struct:load-sca #(struct:buffer inv_sqrt int32) 0)] [(! x?$1447) #(struct:int8_t
                                                                                       (bv #x01 8))]))
 #f
 #f
 #f
 'int32)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$1716 idx) (bv #x00ff 16)) (bvsle (bv #xff01 16) (app abstr-vals$1716 idx)))))
optimized-halide-expr:
  (vec-add
 (vec-bwand
  (sca-broadcast (int32_t (bv #x00000001 32)) 16)
  (vec-div
   (vec-mul
    (vec-cast #<abstr-halide-expr> 'int32 16)
    (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
   (sca-broadcast (int32_t (bv #x00000080 32)) 16)))
 (vec-div
  (vec-mul
   (vec-cast #<abstr-halide-expr> 'int32 16)
   (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
  (sca-broadcast (int32_t (bv #x00000100 32)) 16)))
optimized-template:
  (vs-mpy-add
 ...
 #<abstr-expr>
 (list
  (load-sca (buffer inv_sqrt 'int32) 0)
  (union [x?$1447 #(struct:load-sca #(struct:buffer inv_sqrt int32) 0)] [(! x?$1447) #(struct:int8_t
                                                                                       (bv #x01 8))]))
 #f
 #f
 #f
 'int32)
optimized Halide 0:
  (int32_t
 (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (app inv_sqrt 0) (sign-extend (app abstr-vals$1716 0) (bitvector 32))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (app inv_sqrt 0) (sign-extend (app abstr-vals$1716 0) (bitvector 32))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (app inv_sqrt 0) (sign-extend (app abstr-vals$1716 0) (bitvector 32))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (app inv_sqrt 0) (sign-extend (app abstr-vals$1716 0) (bitvector 32))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (app inv_sqrt 0) (sign-extend (app abstr-vals$1716 0) (bitvector 32))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (app inv_sqrt 0) (sign-extend (app abstr-vals$1716 0) (bitvector 32))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))))
optimized x86 0:
  (int32_t
 (bvadd (bvmul (app inv_sqrt 0) (sign-extend (app abstr-vals$1716 0) (bitvector 32))) (bvmul (sign-extend (app abstr-vals$1716 1) (bitvector 32)) (ite x?$1447 (app inv_sqrt 0) (bv #x00000001 32)))))
Ran synthesizer for 1661 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-bwand
  (sca-broadcast (int32_t (bv #x00000001 32)) 16)
  (vec-div
   (vec-mul
    (vec-cast
     (vec-sub
      (vec-cast
       (load
        (buffer input 'uint8)
        (ramp
         (sca-add
          (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
          (sca-sub
           (sca-sub (var-lookup 't101) (var-lookup 't106))
           (var-lookup 'input.min.0)))
         1
         16)
        (aligned 1 0))
       'int16
       16)
      (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
     'int32
     16)
    (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
   (sca-broadcast (int32_t (bv #x00000080 32)) 16)))
 (vec-div
  (vec-mul
   (vec-cast
    (vec-sub
     (vec-cast
      (load
       (buffer input 'uint8)
       (ramp
        (sca-add
         (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
         (sca-sub
          (sca-sub (var-lookup 't101) (var-lookup 't106))
          (var-lookup 'input.min.0)))
        1
        16)
       (aligned 1 0))
      'int16
      16)
     (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
    'int32
    16)
   (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
  (sca-broadcast (int32_t (bv #x00000100 32)) 16)))
template:
  (vs-mpy-add
 ...
 (vs-mpy-add
  ...
  (combine #<load-data> (broadcast ... (uint8_t input_zero)))
  (list (int8_t (bv #x01 8)) (int8_t (bv #xff 8)))
  #f
  #f
  #f
  'int16)
 (list (load-sca (buffer inv_sqrt 'int32) 0))
 #f
 x?$1445
 #f
 'int32)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$1717 idx) (bv #x00ff 16)) (bvsle (bv #xff01 16) (app abstr-vals$1717 idx)))))
optimized-halide-expr:
  (vec-add
 (vec-bwand
  (sca-broadcast (int32_t (bv #x00000001 32)) 16)
  (vec-div
   (vec-mul
    (vec-cast #<abstr-halide-expr> 'int32 16)
    (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
   (sca-broadcast (int32_t (bv #x00000080 32)) 16)))
 (vec-div
  (vec-mul
   (vec-cast #<abstr-halide-expr> 'int32 16)
   (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
  (sca-broadcast (int32_t (bv #x00000100 32)) 16)))
optimized-template:
  (vs-mpy-add
 ...
 #<abstr-expr>
 (list (load-sca (buffer inv_sqrt 'int32) 0))
 #f
 x?$1445
 #f
 'int32)
optimized Halide 0:
  (int32_t
 (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (app inv_sqrt 0) (sign-extend (app abstr-vals$1717 0) (bitvector 32))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (app inv_sqrt 0) (sign-extend (app abstr-vals$1717 0) (bitvector 32))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (app inv_sqrt 0) (sign-extend (app abstr-vals$1717 0) (bitvector 32))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (app inv_sqrt 0) (sign-extend (app abstr-vals$1717 0) (bitvector 32))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (app inv_sqrt 0) (sign-extend (app abstr-vals$1717 0) (bitvector 32))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (app inv_sqrt 0) (sign-extend (app abstr-vals$1717 0) (bitvector 32))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))))
optimized x86 0:
  (int32_t
 (bvadd (bvmul (app inv_sqrt 0) (sign-extend (app abstr-vals$1717 0) (bitvector 32))) (ite x?$1445 (bv #x00000001 32) (bv #x00000000 32))))
Ran synthesizer for 1311 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-bwand
  (sca-broadcast (int32_t (bv #x00000001 32)) 16)
  (vec-div
   (vec-mul
    (vec-cast
     (vec-sub
      (vec-cast
       (load
        (buffer input 'uint8)
        (ramp
         (sca-add
          (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
          (sca-sub
           (sca-sub (var-lookup 't101) (var-lookup 't106))
           (var-lookup 'input.min.0)))
         1
         16)
        (aligned 1 0))
       'int16
       16)
      (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
     'int32
     16)
    (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
   (sca-broadcast (int32_t (bv #x00000080 32)) 16)))
 (vec-div
  (vec-mul
   (vec-cast
    (vec-sub
     (vec-cast
      (load
       (buffer input 'uint8)
       (ramp
        (sca-add
         (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
         (sca-sub
          (sca-sub (var-lookup 't101) (var-lookup 't106))
          (var-lookup 'input.min.0)))
        1
        16)
       (aligned 1 0))
      'int16
      16)
     (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
    'int32
    16)
   (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
  (sca-broadcast (int32_t (bv #x00000100 32)) 16)))
template:
  (vs-shift-right
 ...
 (vs-mpy-add
  ...
  (vs-mpy-add
   ...
   (combine #<load-data> (broadcast ... (uint8_t input_zero)))
   (list (int8_t (bv #x01 8)) (int8_t (bv #xff 8)))
   #f
   #f
   #f
   'int16)
  (list (load-sca (buffer inv_sqrt 'int32) 0))
  #f
  #f
  #f
  'int32)
 (int32_t (ite x?$1303 (bv #x00000007 32) (bv #x00000008 32)))
 #f
 #f
 #t)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-add
 (vec-bwand
  (sca-broadcast (int32_t (bv #x00000001 32)) 16)
  (vec-div
   #<abstr-halide-expr>
   (sca-broadcast (int32_t (bv #x00000080 32)) 16)))
 (vec-div
  #<abstr-halide-expr>
  (sca-broadcast (int32_t (bv #x00000100 32)) 16)))
optimized-template:
  (vs-shift-right
 ...
 #<abstr-expr>
 (int32_t (ite x?$1303 (bv #x00000007 32) (bv #x00000008 32)))
 #f
 #f
 #t)
optimized Halide 0:
  (int32_t
 (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$1718 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$1718 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$1718 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$1718 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$1718 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$1718 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))))
optimized x86 0:
  (int32_t
 (bvashr (app abstr-vals$1718 0) (ite x?$1303 (bv #x00000007 32) (bv #x00000008 32))))
Ran synthesizer for 1191 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-bwand
  (sca-broadcast (int32_t (bv #x00000001 32)) 16)
  (vec-div
   (vec-mul
    (vec-cast
     (vec-sub
      (vec-cast
       (load
        (buffer input 'uint8)
        (ramp
         (sca-add
          (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
          (sca-sub
           (sca-sub (var-lookup 't101) (var-lookup 't106))
           (var-lookup 'input.min.0)))
         1
         16)
        (aligned 1 0))
       'int16
       16)
      (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
     'int32
     16)
    (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
   (sca-broadcast (int32_t (bv #x00000080 32)) 16)))
 (vec-div
  (vec-mul
   (vec-cast
    (vec-sub
     (vec-cast
      (load
       (buffer input 'uint8)
       (ramp
        (sca-add
         (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
         (sca-sub
          (sca-sub (var-lookup 't101) (var-lookup 't106))
          (var-lookup 'input.min.0)))
        1
        16)
       (aligned 1 0))
      'int16
      16)
     (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
    'int32
    16)
   (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
  (sca-broadcast (int32_t (bv #x00000100 32)) 16)))
template:
  (vs-shift-right
 ...
 (vs-mpy-add
  ...
  (vs-mpy-add
   ...
   (combine #<load-data> (broadcast ... (uint8_t input_zero)))
   (list (int8_t (bv #x01 8)) (int8_t (bv #xff 8)))
   #f
   #f
   #f
   'int16)
  (list (load-sca (buffer inv_sqrt 'int32) 0))
  #f
  #f
  #f
  'int32)
 (int32_t (bv #x00000007 32))
 x?$1304
 x?$1305
 x?$1306)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-add
 (vec-bwand
  (sca-broadcast (int32_t (bv #x00000001 32)) 16)
  (vec-div
   #<abstr-halide-expr>
   (sca-broadcast (int32_t (bv #x00000080 32)) 16)))
 (vec-div
  #<abstr-halide-expr>
  (sca-broadcast (int32_t (bv #x00000100 32)) 16)))
optimized-template:
  (vs-shift-right
 ...
 #<abstr-expr>
 (int32_t (bv #x00000007 32))
 x?$1304
 x?$1305
 x?$1306)
optimized Halide 0:
  (int32_t
 (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$1719 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$1719 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$1719 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$1719 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$1719 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$1719 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))))
optimized x86 0:
  (int32_t
 (ite x?$1304 (bvadd (ite x?$1306 (bvashr (app abstr-vals$1719 0) (bv #x00000007 32)) (bvlshr (app abstr-vals$1719 0) (bv #x00000007 32))) (bvand (bv #x00000001 32) (ite x?$1306 (bvashr (app abstr-vals$1719 0) (bv #x00000006 32)) (bvlshr (app abstr-vals$1719 0) (bv #x00000006 32))))) (ite x?$1306 (bvashr (app abstr-vals$1719 0) (bv #x00000007 32)) (bvlshr (app abstr-vals$1719 0) (bv #x00000007 32)))))
Ran synthesizer for 1160 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-bwand
  (sca-broadcast (int32_t (bv #x00000001 32)) 16)
  (vec-div
   (vec-mul
    (vec-cast
     (vec-sub
      (vec-cast
       (load
        (buffer input 'uint8)
        (ramp
         (sca-add
          (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
          (sca-sub
           (sca-sub (var-lookup 't101) (var-lookup 't106))
           (var-lookup 'input.min.0)))
         1
         16)
        (aligned 1 0))
       'int16
       16)
      (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
     'int32
     16)
    (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
   (sca-broadcast (int32_t (bv #x00000080 32)) 16)))
 (vec-div
  (vec-mul
   (vec-cast
    (vec-sub
     (vec-cast
      (load
       (buffer input 'uint8)
       (ramp
        (sca-add
         (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
         (sca-sub
          (sca-sub (var-lookup 't101) (var-lookup 't106))
          (var-lookup 'input.min.0)))
        1
        16)
       (aligned 1 0))
      'int16
      16)
     (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
    'int32
    16)
   (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
  (sca-broadcast (int32_t (bv #x00000100 32)) 16)))
template:
  (vs-shift-right
 ...
 (vs-mpy-add
  ...
  (vs-mpy-add
   ...
   (combine #<load-data> (broadcast ... (uint8_t input_zero)))
   (list (int8_t (bv #x01 8)) (int8_t (bv #xff 8)))
   #f
   #f
   #f
   'int16)
  (list (load-sca (buffer inv_sqrt 'int32) 0))
  #f
  #f
  #f
  'int32)
 (int32_t (ite x?$1440 (bv #x00000007 32) (bv #x00000008 32)))
 #f
 #f
 #t)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-add
 (vec-bwand
  (sca-broadcast (int32_t (bv #x00000001 32)) 16)
  (vec-div
   #<abstr-halide-expr>
   (sca-broadcast (int32_t (bv #x00000080 32)) 16)))
 (vec-div
  #<abstr-halide-expr>
  (sca-broadcast (int32_t (bv #x00000100 32)) 16)))
optimized-template:
  (vs-shift-right
 ...
 #<abstr-expr>
 (int32_t (ite x?$1440 (bv #x00000007 32) (bv #x00000008 32)))
 #f
 #f
 #t)
optimized Halide 0:
  (int32_t
 (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$1720 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$1720 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$1720 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$1720 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$1720 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$1720 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))))
optimized x86 0:
  (int32_t
 (bvashr (app abstr-vals$1720 0) (ite x?$1440 (bv #x00000007 32) (bv #x00000008 32))))
Ran synthesizer for 1255 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-bwand
  (sca-broadcast (int32_t (bv #x00000001 32)) 16)
  (vec-div
   (vec-mul
    (vec-cast
     (vec-sub
      (vec-cast
       (load
        (buffer input 'uint8)
        (ramp
         (sca-add
          (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
          (sca-sub
           (sca-sub (var-lookup 't101) (var-lookup 't106))
           (var-lookup 'input.min.0)))
         1
         16)
        (aligned 1 0))
       'int16
       16)
      (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
     'int32
     16)
    (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
   (sca-broadcast (int32_t (bv #x00000080 32)) 16)))
 (vec-div
  (vec-mul
   (vec-cast
    (vec-sub
     (vec-cast
      (load
       (buffer input 'uint8)
       (ramp
        (sca-add
         (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
         (sca-sub
          (sca-sub (var-lookup 't101) (var-lookup 't106))
          (var-lookup 'input.min.0)))
        1
        16)
       (aligned 1 0))
      'int16
      16)
     (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
    'int32
    16)
   (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
  (sca-broadcast (int32_t (bv #x00000100 32)) 16)))
template:
  (vs-shift-right
 ...
 (vs-mpy-add
  ...
  (vs-mpy-add
   ...
   (combine #<load-data> (broadcast ... (uint8_t input_zero)))
   (list (int8_t (bv #x01 8)) (int8_t (bv #xff 8)))
   #f
   #f
   #f
   'int16)
  (list (load-sca (buffer inv_sqrt 'int32) 0))
  #f
  #f
  #f
  'int32)
 (int32_t (bv #x00000008 32))
 x?$1441
 x?$1442
 x?$1443)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-add
 (vec-bwand
  (sca-broadcast (int32_t (bv #x00000001 32)) 16)
  (vec-div
   #<abstr-halide-expr>
   (sca-broadcast (int32_t (bv #x00000080 32)) 16)))
 (vec-div
  #<abstr-halide-expr>
  (sca-broadcast (int32_t (bv #x00000100 32)) 16)))
optimized-template:
  (vs-shift-right
 ...
 #<abstr-expr>
 (int32_t (bv #x00000008 32))
 x?$1441
 x?$1442
 x?$1443)
optimized Halide 0:
  (int32_t
 (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$1721 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$1721 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$1721 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$1721 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$1721 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$1721 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))))
optimized x86 0:
  (int32_t
 (ite x?$1441 (bvadd (ite x?$1443 (bvashr (app abstr-vals$1721 0) (bv #x00000008 32)) (bvlshr (app abstr-vals$1721 0) (bv #x00000008 32))) (bvand (bv #x00000001 32) (ite x?$1443 (bvashr (app abstr-vals$1721 0) (bv #x00000007 32)) (bvlshr (app abstr-vals$1721 0) (bv #x00000007 32))))) (ite x?$1443 (bvashr (app abstr-vals$1721 0) (bv #x00000008 32)) (bvlshr (app abstr-vals$1721 0) (bv #x00000008 32)))))
Ran synthesizer for 2260 ms
(model
 [x?$1441 #t]
 [x?$1443 #t])
(vec-add
 (vec-bwand
  (sca-broadcast (int32_t (bv #x00000001 32)) 16)
  (vec-div
   #<abstr-halide-expr>
   (sca-broadcast (int32_t (bv #x00000080 32)) 16)))
 (vec-div
  #<abstr-halide-expr>
  (sca-broadcast (int32_t (bv #x00000100 32)) 16)))
(vs-shift-right
 ...
 (vs-mpy-add
  ...
  (vs-mpy-add
   ...
   (combine #<load-data> (broadcast ... (uint8_t input_zero)))
   (list (int8_t (bv #x01 8)) (int8_t (bv #xff 8)))
   #f
   #f
   #f
   'int16)
  (list (load-sca (buffer inv_sqrt 'int32) 0))
  #f
  #f
  #f
  'int32)
 (int32_t (bv #x00000008 32))
 #t
 x?$1442
 #t)
Ran bounds analysis for 43 ms
Ran bounds analysis for 35 ms
"Success?"
#t
(vs-shift-right ... (vs-mpy-add ... (vs-mpy-add ... (combine #<load-data> (broadcast ... (uint8_t input_zero))) (list (int8_t (bv #x01 8)) (int8_t (bv #xff 8))) #f #f #f 'int16) (list (load-sca (buffer inv_sqrt 'int32) 0)) #f #f #f 'int32) (int32_t (bv #x00000008 32)) #t x?$1442 #t)
"Building Expr:"
(sca-broadcast (int32_t (bv #x00007fff 32)) 16)
"Fold templates"
'()
here()

"Replace templates"
'()
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (sca-broadcast (int32_t (bv #x00007fff 32)) 16)
template:
  (broadcast ... (int32_t (bv #x00007fff 32)))
axioms:
  '()
optimized-halide-expr:
  (sca-broadcast (int32_t (bv #x00007fff 32)) 16)
optimized-template:
  (broadcast ... (int32_t (bv #x00007fff 32)))
optimized Halide 0:
  (int32_t (bv #x00007fff 32))
optimized x86 0:
  (int32_t (bv #x00007fff 32))
Ran synthesizer for 18 ms
(model)
(sca-broadcast (int32_t (bv #x00007fff 32)) 16)
(broadcast ... (int32_t (bv #x00007fff 32)))
Ran bounds analysis for 24 ms
Ran bounds analysis for 15 ms
"Extended success?"
#t
(broadcast ... (int32_t (bv #x00007fff 32)))
"Building Expr:"
(vec-min
 (vec-add
  (vec-bwand
   (sca-broadcast (int32_t (bv #x00000001 32)) 16)
   (vec-div
    (vec-mul
     (vec-cast
      (vec-sub
       (vec-cast
        (load
         (buffer input 'uint8)
         (ramp
          (sca-add
           (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
           (sca-sub
            (sca-sub (var-lookup 't101) (var-lookup 't106))
            (var-lookup 'input.min.0)))
          1
          16)
         (aligned 1 0))
        'int16
        16)
       (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
      'int32
      16)
     (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
    (sca-broadcast (int32_t (bv #x00000080 32)) 16)))
  (vec-div
   (vec-mul
    (vec-cast
     (vec-sub
      (vec-cast
       (load
        (buffer input 'uint8)
        (ramp
         (sca-add
          (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
          (sca-sub
           (sca-sub (var-lookup 't101) (var-lookup 't106))
           (var-lookup 'input.min.0)))
         1
         16)
        (aligned 1 0))
       'int16
       16)
      (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
     'int32
     16)
    (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
   (sca-broadcast (int32_t (bv #x00000100 32)) 16)))
 (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
"Fold templates"
(list
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (vs-mpy-add
    ...
    (combine #<load-data> (broadcast ... (uint8_t input_zero)))
    (list (int8_t (bv #x01 8)) (int8_t (bv #xff 8)))
    #f
    #f
    #f
    'int16)
   (list (load-sca (buffer inv_sqrt 'int32) 0))
   #f
   #f
   #f
   'int32)
  (int32_t (ite x?$1723 (bv #x00000007 32) (bv #x00000008 32)))
  #t
  x?$1442
  #t)
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (vs-mpy-add
    ...
    (combine #<load-data> (broadcast ... (uint8_t input_zero)))
    (list (int8_t (bv #x01 8)) (int8_t (bv #xff 8)))
    #f
    #f
    #f
    'int16)
   (list (load-sca (buffer inv_sqrt 'int32) 0))
   #f
   #f
   #f
   'int32)
  (int32_t (bv #x00000008 32))
  x?$1724
  x?$1725
  x?$1726))
here(#(struct:vs-shift-right ... #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:uint8_t input_zero))> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #xff 8))) #f #f #f int16) (#(struct:load-sca #(struct:buffer inv_sqrt int32) 0)) #f #f #f int32) #(struct:int32_t (ite x?$1723 (bv #x00000007 32) (bv #x00000008 32))) #t x?$1442 #t) #(struct:vs-shift-right ... #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:uint8_t input_zero))> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #xff 8))) #f #f #f int16) (#(struct:load-sca #(struct:buffer inv_sqrt int32) 0)) #f #f #f int32) #(struct:int32_t (bv #x00000008 32)) x?$1724 x?$1725 x?$1726))

"Replace templates"
'()
run-x86-synthesizer
halide-expr:
  (vec-min
 (vec-add
  (vec-bwand
   (sca-broadcast (int32_t (bv #x00000001 32)) 16)
   (vec-div
    (vec-mul
     (vec-cast
      (vec-sub
       (vec-cast
        (load
         (buffer input 'uint8)
         (ramp
          (sca-add
           (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
           (sca-sub
            (sca-sub (var-lookup 't101) (var-lookup 't106))
            (var-lookup 'input.min.0)))
          1
          16)
         (aligned 1 0))
        'int16
        16)
       (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
      'int32
      16)
     (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
    (sca-broadcast (int32_t (bv #x00000080 32)) 16)))
  (vec-div
   (vec-mul
    (vec-cast
     (vec-sub
      (vec-cast
       (load
        (buffer input 'uint8)
        (ramp
         (sca-add
          (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
          (sca-sub
           (sca-sub (var-lookup 't101) (var-lookup 't106))
           (var-lookup 'input.min.0)))
         1
         16)
        (aligned 1 0))
       'int16
       16)
      (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
     'int32
     16)
    (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
   (sca-broadcast (int32_t (bv #x00000100 32)) 16)))
 (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
template:
  (vs-shift-right
 ...
 (vs-mpy-add
  ...
  (vs-mpy-add
   ...
   (combine #<load-data> (broadcast ... (uint8_t input_zero)))
   (list (int8_t (bv #x01 8)) (int8_t (bv #xff 8)))
   #f
   #f
   #f
   'int16)
  (list (load-sca (buffer inv_sqrt 'int32) 0))
  #f
  #f
  #f
  'int32)
 (int32_t (ite x?$1723 (bv #x00000007 32) (bv #x00000008 32)))
 #t
 x?$1442
 #t)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-min
 (vec-add
  (vec-bwand
   (sca-broadcast (int32_t (bv #x00000001 32)) 16)
   (vec-div
    #<abstr-halide-expr>
    (sca-broadcast (int32_t (bv #x00000080 32)) 16)))
  (vec-div
   #<abstr-halide-expr>
   (sca-broadcast (int32_t (bv #x00000100 32)) 16)))
 (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
optimized-template:
  (vs-shift-right
 ...
 #<abstr-expr>
 (int32_t (ite x?$1723 (bv #x00000007 32) (bv #x00000008 32)))
 #t
 x?$1442
 #t)
optimized Halide 0:
  (int32_t
 (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$1735 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$1735 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$1735 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$1735 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$1735 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$1735 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$1735 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$1735 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$1735 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$1735 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$1735 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$1735 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)))
optimized x86 0:
  (int32_t
 (bvadd (bvashr (app abstr-vals$1735 0) (ite x?$1723 (bv #x00000007 32) (bv #x00000008 32))) (bvand (bv #x00000001 32) (bvashr (app abstr-vals$1735 0) (ite x?$1723 (bv #x00000006 32) (bv #x00000007 32))))))
Ran synthesizer for 1210 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-min
 (vec-add
  (vec-bwand
   (sca-broadcast (int32_t (bv #x00000001 32)) 16)
   (vec-div
    (vec-mul
     (vec-cast
      (vec-sub
       (vec-cast
        (load
         (buffer input 'uint8)
         (ramp
          (sca-add
           (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
           (sca-sub
            (sca-sub (var-lookup 't101) (var-lookup 't106))
            (var-lookup 'input.min.0)))
          1
          16)
         (aligned 1 0))
        'int16
        16)
       (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
      'int32
      16)
     (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
    (sca-broadcast (int32_t (bv #x00000080 32)) 16)))
  (vec-div
   (vec-mul
    (vec-cast
     (vec-sub
      (vec-cast
       (load
        (buffer input 'uint8)
        (ramp
         (sca-add
          (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
          (sca-sub
           (sca-sub (var-lookup 't101) (var-lookup 't106))
           (var-lookup 'input.min.0)))
         1
         16)
        (aligned 1 0))
       'int16
       16)
      (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
     'int32
     16)
    (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
   (sca-broadcast (int32_t (bv #x00000100 32)) 16)))
 (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
template:
  (vs-shift-right
 ...
 (vs-mpy-add
  ...
  (vs-mpy-add
   ...
   (combine #<load-data> (broadcast ... (uint8_t input_zero)))
   (list (int8_t (bv #x01 8)) (int8_t (bv #xff 8)))
   #f
   #f
   #f
   'int16)
  (list (load-sca (buffer inv_sqrt 'int32) 0))
  #f
  #f
  #f
  'int32)
 (int32_t (bv #x00000008 32))
 x?$1724
 x?$1725
 x?$1726)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-min
 (vec-add
  (vec-bwand
   (sca-broadcast (int32_t (bv #x00000001 32)) 16)
   (vec-div
    #<abstr-halide-expr>
    (sca-broadcast (int32_t (bv #x00000080 32)) 16)))
  (vec-div
   #<abstr-halide-expr>
   (sca-broadcast (int32_t (bv #x00000100 32)) 16)))
 (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
optimized-template:
  (vs-shift-right
 ...
 #<abstr-expr>
 (int32_t (bv #x00000008 32))
 x?$1724
 x?$1725
 x?$1726)
optimized Halide 0:
  (int32_t
 (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$1736 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$1736 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$1736 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$1736 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$1736 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$1736 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$1736 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$1736 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$1736 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$1736 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$1736 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$1736 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)))
optimized x86 0:
  (int32_t
 (ite x?$1724 (bvadd (ite x?$1726 (bvashr (app abstr-vals$1736 0) (bv #x00000008 32)) (bvlshr (app abstr-vals$1736 0) (bv #x00000008 32))) (bvand (bv #x00000001 32) (ite x?$1726 (bvashr (app abstr-vals$1736 0) (bv #x00000007 32)) (bvlshr (app abstr-vals$1736 0) (bv #x00000007 32))))) (ite x?$1726 (bvashr (app abstr-vals$1736 0) (bv #x00000008 32)) (bvlshr (app abstr-vals$1736 0) (bv #x00000008 32)))))
Ran synthesizer for 1676 ms
(unsat)
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (vec-min
 (vec-add
  (vec-bwand
   (sca-broadcast (int32_t (bv #x00000001 32)) 16)
   (vec-div
    (vec-mul
     (vec-cast
      (vec-sub
       (vec-cast
        (load
         (buffer input 'uint8)
         (ramp
          (sca-add
           (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
           (sca-sub
            (sca-sub (var-lookup 't101) (var-lookup 't106))
            (var-lookup 'input.min.0)))
          1
          16)
         (aligned 1 0))
        'int16
        16)
       (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
      'int32
      16)
     (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
    (sca-broadcast (int32_t (bv #x00000080 32)) 16)))
  (vec-div
   (vec-mul
    (vec-cast
     (vec-sub
      (vec-cast
       (load
        (buffer input 'uint8)
        (ramp
         (sca-add
          (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
          (sca-sub
           (sca-sub (var-lookup 't101) (var-lookup 't106))
           (var-lookup 'input.min.0)))
         1
         16)
        (aligned 1 0))
       'int16
       16)
      (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
     'int32
     16)
    (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
   (sca-broadcast (int32_t (bv #x00000100 32)) 16)))
 (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
template:
  (minimum
 ...
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (vs-mpy-add
    ...
    (combine #<load-data> (broadcast ... (uint8_t input_zero)))
    (list (int8_t (bv #x01 8)) (int8_t (bv #xff 8)))
    #f
    #f
    #f
    'int16)
   (list (load-sca (buffer inv_sqrt 'int32) 0))
   #f
   #f
   #f
   'int32)
  (int32_t (bv #x00000008 32))
  #t
  x?$1442
  #t)
 (broadcast ... (int32_t (bv #x00007fff 32))))
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$1737 idx) (bv #x00800000 32)) (bvsle (bv #xff800000 32) (app abstr-vals$1737 idx))))
 (forall (idx) (&& (bvsle (app abstr-vals$1738 idx) (bv #x00007fff 32)) (bvsle (bv #x00007fff 32) (app abstr-vals$1738 idx)))))
optimized-halide-expr:
  (vec-min #<abstr-halide-expr> #<abstr-halide-expr>)
optimized-template:
  (minimum ... #<abstr-expr> #<abstr-expr>)
optimized Halide 0:
  (int32_t
 (ite (bvsle (app abstr-vals$1737 0) (app abstr-vals$1738 0)) (app abstr-vals$1737 0) (app abstr-vals$1738 0)))
optimized x86 0:
  (int32_t
 (ite (bvsle (app abstr-vals$1737 0) (app abstr-vals$1738 0)) (app abstr-vals$1737 0) (app abstr-vals$1738 0)))
Ran synthesizer for 44 ms
(model)
(vec-min #<abstr-halide-expr> #<abstr-halide-expr>)
(minimum
 ...
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (vs-mpy-add
    ...
    (combine #<load-data> (broadcast ... (uint8_t input_zero)))
    (list (int8_t (bv #x01 8)) (int8_t (bv #xff 8)))
    #f
    #f
    #f
    'int16)
   (list (load-sca (buffer inv_sqrt 'int32) 0))
   #f
   #f
   #f
   'int32)
  (int32_t (bv #x00000008 32))
  #t
  x?$1442
  #t)
 (broadcast ... (int32_t (bv #x00007fff 32))))
Ran bounds analysis for 35 ms
Ran bounds analysis for 28 ms
"Extended success?"
#t
(minimum
 ...
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (vs-mpy-add
    ...
    (combine #<load-data> (broadcast ... (uint8_t input_zero)))
    (list (int8_t (bv #x01 8)) (int8_t (bv #xff 8)))
    #f
    #f
    #f
    'int16)
   (list (load-sca (buffer inv_sqrt 'int32) 0))
   #f
   #f
   #f
   'int32)
  (int32_t (bv #x00000008 32))
  #t
  x?$1442
  #t)
 (broadcast ... (int32_t (bv #x00007fff 32))))
"Building Expr:"
(sca-broadcast (int32_t (bv #xffff8000 32)) 16)
"Fold templates"
'()
here()

"Replace templates"
'()
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (sca-broadcast (int32_t (bv #xffff8000 32)) 16)
template:
  (broadcast ... (int32_t (bv #xffff8000 32)))
axioms:
  '()
optimized-halide-expr:
  (sca-broadcast (int32_t (bv #xffff8000 32)) 16)
optimized-template:
  (broadcast ... (int32_t (bv #xffff8000 32)))
optimized Halide 0:
  (int32_t (bv #xffff8000 32))
optimized x86 0:
  (int32_t (bv #xffff8000 32))
Ran synthesizer for 17 ms
(model)
(sca-broadcast (int32_t (bv #xffff8000 32)) 16)
(broadcast ... (int32_t (bv #xffff8000 32)))
Ran bounds analysis for 22 ms
Ran bounds analysis for 13 ms
"Extended success?"
#t
(broadcast ... (int32_t (bv #xffff8000 32)))
"Building Expr:"
(vec-max
 (vec-min
  (vec-add
   (vec-bwand
    (sca-broadcast (int32_t (bv #x00000001 32)) 16)
    (vec-div
     (vec-mul
      (vec-cast
       (vec-sub
        (vec-cast
         (load
          (buffer input 'uint8)
          (ramp
           (sca-add
            (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
            (sca-sub
             (sca-sub (var-lookup 't101) (var-lookup 't106))
             (var-lookup 'input.min.0)))
           1
           16)
          (aligned 1 0))
         'int16
         16)
        (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
       'int32
       16)
      (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
     (sca-broadcast (int32_t (bv #x00000080 32)) 16)))
   (vec-div
    (vec-mul
     (vec-cast
      (vec-sub
       (vec-cast
        (load
         (buffer input 'uint8)
         (ramp
          (sca-add
           (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
           (sca-sub
            (sca-sub (var-lookup 't101) (var-lookup 't106))
            (var-lookup 'input.min.0)))
          1
          16)
         (aligned 1 0))
        'int16
        16)
       (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
      'int32
      16)
     (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
    (sca-broadcast (int32_t (bv #x00000100 32)) 16)))
  (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
 (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
"Fold templates"
(list
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (vs-mpy-add
    ...
    (combine #<load-data> (broadcast ... (uint8_t input_zero)))
    (list (int8_t (bv #x01 8)) (int8_t (bv #xff 8)))
    #f
    #f
    #f
    'int16)
   (list (load-sca (buffer inv_sqrt 'int32) 0))
   #f
   #f
   #f
   'int32)
  (int32_t (ite x?$1741 (bv #x00000007 32) (bv #x00000008 32)))
  #t
  x?$1442
  #t)
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (vs-mpy-add
    ...
    (combine #<load-data> (broadcast ... (uint8_t input_zero)))
    (list (int8_t (bv #x01 8)) (int8_t (bv #xff 8)))
    #f
    #f
    #f
    'int16)
   (list (load-sca (buffer inv_sqrt 'int32) 0))
   #f
   #f
   #f
   'int32)
  (int32_t (bv #x00000008 32))
  x?$1742
  x?$1743
  x?$1744))
here(#(struct:vs-shift-right ... #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:uint8_t input_zero))> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #xff 8))) #f #f #f int16) (#(struct:load-sca #(struct:buffer inv_sqrt int32) 0)) #f #f #f int32) #(struct:int32_t (ite x?$1741 (bv #x00000007 32) (bv #x00000008 32))) #t x?$1442 #t) #(struct:vs-shift-right ... #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:uint8_t input_zero))> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #xff 8))) #f #f #f int16) (#(struct:load-sca #(struct:buffer inv_sqrt int32) 0)) #f #f #f int32) #(struct:int32_t (bv #x00000008 32)) x?$1742 x?$1743 x?$1744))

"Replace templates"
(list
 (cast
  ...
  (vs-shift-right
   ...
   (vs-mpy-add
    ...
    (vs-mpy-add
     ...
     (combine #<load-data> (broadcast ... (uint8_t input_zero)))
     (list (int8_t (bv #x01 8)) (int8_t (bv #xff 8)))
     #f
     #f
     #f
     'int16)
    (list (load-sca (buffer inv_sqrt 'int32) 0))
    #f
    #f
    #f
    'int32)
   (int32_t (bv #x00000008 32))
   #t
   x?$1442
   #t)
  'int32
  #t)
 (cast ... (broadcast ... (int32_t (bv #x00007fff 32))) 'int32 #t))
run-x86-synthesizer
halide-expr:
  (vec-max
 (vec-min
  (vec-add
   (vec-bwand
    (sca-broadcast (int32_t (bv #x00000001 32)) 16)
    (vec-div
     (vec-mul
      (vec-cast
       (vec-sub
        (vec-cast
         (load
          (buffer input 'uint8)
          (ramp
           (sca-add
            (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
            (sca-sub
             (sca-sub (var-lookup 't101) (var-lookup 't106))
             (var-lookup 'input.min.0)))
           1
           16)
          (aligned 1 0))
         'int16
         16)
        (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
       'int32
       16)
      (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
     (sca-broadcast (int32_t (bv #x00000080 32)) 16)))
   (vec-div
    (vec-mul
     (vec-cast
      (vec-sub
       (vec-cast
        (load
         (buffer input 'uint8)
         (ramp
          (sca-add
           (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
           (sca-sub
            (sca-sub (var-lookup 't101) (var-lookup 't106))
            (var-lookup 'input.min.0)))
          1
          16)
         (aligned 1 0))
        'int16
        16)
       (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
      'int32
      16)
     (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
    (sca-broadcast (int32_t (bv #x00000100 32)) 16)))
  (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
 (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
template:
  (cast ... (broadcast ... (int32_t (bv #x00007fff 32))) 'int32 #t)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$1749 idx) (bv #x00007fff 32)) (bvsle (bv #x00007fff 32) (app abstr-vals$1749 idx)))))
optimized-halide-expr:
  (vec-max
 (vec-min
  (vec-add
   (vec-bwand
    (sca-broadcast (int32_t (bv #x00000001 32)) 16)
    (vec-div
     (vec-mul
      (vec-cast
       (vec-sub
        (vec-cast
         (load
          (buffer input 'uint8)
          (ramp
           (sca-add
            (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
            (sca-sub
             (sca-sub (var-lookup 't101) (var-lookup 't106))
             (var-lookup 'input.min.0)))
           1
           16)
          (aligned 1 0))
         'int16
         16)
        (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
       'int32
       16)
      (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
     (sca-broadcast (int32_t (bv #x00000080 32)) 16)))
   (vec-div
    (vec-mul
     (vec-cast
      (vec-sub
       (vec-cast
        (load
         (buffer input 'uint8)
         (ramp
          (sca-add
           (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
           (sca-sub
            (sca-sub (var-lookup 't101) (var-lookup 't106))
            (var-lookup 'input.min.0)))
          1
          16)
         (aligned 1 0))
        'int16
        16)
       (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
      'int32
      16)
     (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
    (sca-broadcast (int32_t (bv #x00000100 32)) 16)))
  #<abstr-halide-expr>)
 (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
optimized-template:
  (cast ... #<abstr-expr> 'int32 #t)
optimized Halide 0:
  (int32_t
 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (app abstr-vals$1749 0)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (app abstr-vals$1749 0))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (app abstr-vals$1749 0)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (app abstr-vals$1749 0)) (bv #xffff8000 32)))
optimized x86 0:
  (int32_t (app abstr-vals$1749 0))
run-x86-synthesizer
halide-expr:
  (vec-max
 (vec-min
  (vec-add
   (vec-bwand
    (sca-broadcast (int32_t (bv #x00000001 32)) 16)
    (vec-div
     (vec-mul
      (vec-cast
       (vec-sub
        (vec-cast
         (load
          (buffer input 'uint8)
          (ramp
           (sca-add
            (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
            (sca-sub
             (sca-sub (var-lookup 't101) (var-lookup 't106))
             (var-lookup 'input.min.0)))
           1
           16)
          (aligned 1 0))
         'int16
         16)
        (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
       'int32
       16)
      (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
     (sca-broadcast (int32_t (bv #x00000080 32)) 16)))
   (vec-div
    (vec-mul
     (vec-cast
      (vec-sub
       (vec-cast
        (load
         (buffer input 'uint8)
         (ramp
          (sca-add
           (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
           (sca-sub
            (sca-sub (var-lookup 't101) (var-lookup 't106))
            (var-lookup 'input.min.0)))
          1
          16)
         (aligned 1 0))
        'int16
        16)
       (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
      'int32
      16)
     (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
    (sca-broadcast (int32_t (bv #x00000100 32)) 16)))
  (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
 (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
template:
  (vs-shift-right
 ...
 (vs-mpy-add
  ...
  (vs-mpy-add
   ...
   (combine #<load-data> (broadcast ... (uint8_t input_zero)))
   (list (int8_t (bv #x01 8)) (int8_t (bv #xff 8)))
   #f
   #f
   #f
   'int16)
  (list (load-sca (buffer inv_sqrt 'int32) 0))
  #f
  #f
  #f
  'int32)
 (int32_t (ite x?$1741 (bv #x00000007 32) (bv #x00000008 32)))
 #t
 x?$1442
 #t)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-max
 (vec-min
  (vec-add
   (vec-bwand
    (sca-broadcast (int32_t (bv #x00000001 32)) 16)
    (vec-div
     #<abstr-halide-expr>
     (sca-broadcast (int32_t (bv #x00000080 32)) 16)))
   (vec-div
    #<abstr-halide-expr>
    (sca-broadcast (int32_t (bv #x00000100 32)) 16)))
  (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
 (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
optimized-template:
  (vs-shift-right
 ...
 #<abstr-expr>
 (int32_t (ite x?$1741 (bv #x00000007 32) (bv #x00000008 32)))
 #t
 x?$1442
 #t)
optimized Halide 0:
  (int32_t
 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$1750 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$1750 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$1750 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$1750 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$1750 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$1750 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$1750 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$1750 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$1750 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$1750 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$1750 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$1750 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$1750 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$1750 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$1750 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$1750 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$1750 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$1750 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$1750 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$1750 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$1750 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$1750 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$1750 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$1750 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bv #xffff8000 32)))
optimized x86 0:
  (int32_t
 (bvadd (bvashr (app abstr-vals$1750 0) (ite x?$1741 (bv #x00000007 32) (bv #x00000008 32))) (bvand (bv #x00000001 32) (bvashr (app abstr-vals$1750 0) (ite x?$1741 (bv #x00000006 32) (bv #x00000007 32))))))
Ran synthesizer for 1128 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-max
 (vec-min
  (vec-add
   (vec-bwand
    (sca-broadcast (int32_t (bv #x00000001 32)) 16)
    (vec-div
     (vec-mul
      (vec-cast
       (vec-sub
        (vec-cast
         (load
          (buffer input 'uint8)
          (ramp
           (sca-add
            (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
            (sca-sub
             (sca-sub (var-lookup 't101) (var-lookup 't106))
             (var-lookup 'input.min.0)))
           1
           16)
          (aligned 1 0))
         'int16
         16)
        (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
       'int32
       16)
      (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
     (sca-broadcast (int32_t (bv #x00000080 32)) 16)))
   (vec-div
    (vec-mul
     (vec-cast
      (vec-sub
       (vec-cast
        (load
         (buffer input 'uint8)
         (ramp
          (sca-add
           (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
           (sca-sub
            (sca-sub (var-lookup 't101) (var-lookup 't106))
            (var-lookup 'input.min.0)))
          1
          16)
         (aligned 1 0))
        'int16
        16)
       (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
      'int32
      16)
     (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
    (sca-broadcast (int32_t (bv #x00000100 32)) 16)))
  (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
 (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
template:
  (vs-shift-right
 ...
 (vs-mpy-add
  ...
  (vs-mpy-add
   ...
   (combine #<load-data> (broadcast ... (uint8_t input_zero)))
   (list (int8_t (bv #x01 8)) (int8_t (bv #xff 8)))
   #f
   #f
   #f
   'int16)
  (list (load-sca (buffer inv_sqrt 'int32) 0))
  #f
  #f
  #f
  'int32)
 (int32_t (bv #x00000008 32))
 x?$1742
 x?$1743
 x?$1744)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-max
 (vec-min
  (vec-add
   (vec-bwand
    (sca-broadcast (int32_t (bv #x00000001 32)) 16)
    (vec-div
     #<abstr-halide-expr>
     (sca-broadcast (int32_t (bv #x00000080 32)) 16)))
   (vec-div
    #<abstr-halide-expr>
    (sca-broadcast (int32_t (bv #x00000100 32)) 16)))
  (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
 (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
optimized-template:
  (vs-shift-right
 ...
 #<abstr-expr>
 (int32_t (bv #x00000008 32))
 x?$1742
 x?$1743
 x?$1744)
optimized Halide 0:
  (int32_t
 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$1751 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$1751 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$1751 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$1751 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$1751 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$1751 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$1751 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$1751 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$1751 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$1751 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$1751 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$1751 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$1751 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$1751 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$1751 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$1751 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$1751 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$1751 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$1751 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$1751 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$1751 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$1751 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$1751 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$1751 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bv #xffff8000 32)))
optimized x86 0:
  (int32_t
 (ite x?$1742 (bvadd (ite x?$1744 (bvashr (app abstr-vals$1751 0) (bv #x00000008 32)) (bvlshr (app abstr-vals$1751 0) (bv #x00000008 32))) (bvand (bv #x00000001 32) (ite x?$1744 (bvashr (app abstr-vals$1751 0) (bv #x00000007 32)) (bvlshr (app abstr-vals$1751 0) (bv #x00000007 32))))) (ite x?$1744 (bvashr (app abstr-vals$1751 0) (bv #x00000008 32)) (bvlshr (app abstr-vals$1751 0) (bv #x00000008 32)))))
Ran synthesizer for 1126 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-max
 (vec-min
  (vec-add
   (vec-bwand
    (sca-broadcast (int32_t (bv #x00000001 32)) 16)
    (vec-div
     (vec-mul
      (vec-cast
       (vec-sub
        (vec-cast
         (load
          (buffer input 'uint8)
          (ramp
           (sca-add
            (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
            (sca-sub
             (sca-sub (var-lookup 't101) (var-lookup 't106))
             (var-lookup 'input.min.0)))
           1
           16)
          (aligned 1 0))
         'int16
         16)
        (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
       'int32
       16)
      (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
     (sca-broadcast (int32_t (bv #x00000080 32)) 16)))
   (vec-div
    (vec-mul
     (vec-cast
      (vec-sub
       (vec-cast
        (load
         (buffer input 'uint8)
         (ramp
          (sca-add
           (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
           (sca-sub
            (sca-sub (var-lookup 't101) (var-lookup 't106))
            (var-lookup 'input.min.0)))
          1
          16)
         (aligned 1 0))
        'int16
        16)
       (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
      'int32
      16)
     (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
    (sca-broadcast (int32_t (bv #x00000100 32)) 16)))
  (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
 (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
template:
  (cast
 ...
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (vs-mpy-add
    ...
    (combine #<load-data> (broadcast ... (uint8_t input_zero)))
    (list (int8_t (bv #x01 8)) (int8_t (bv #xff 8)))
    #f
    #f
    #f
    'int16)
   (list (load-sca (buffer inv_sqrt 'int32) 0))
   #f
   #f
   #f
   'int32)
  (int32_t (bv #x00000008 32))
  #t
  x?$1442
  #t)
 'int32
 #t)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$1752 idx) (bv #x00800000 32)) (bvsle (bv #xff800000 32) (app abstr-vals$1752 idx)))))
optimized-halide-expr:
  (vec-max
 (vec-min #<abstr-halide-expr> (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
 (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
optimized-template:
  (cast ... #<abstr-expr> 'int32 #t)
optimized Halide 0:
  (int32_t
 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (app abstr-vals$1752 0) (bv #x00007fff 32)) (app abstr-vals$1752 0) (bv #x00007fff 32))) (ite (bvsle (app abstr-vals$1752 0) (bv #x00007fff 32)) (app abstr-vals$1752 0) (bv #x00007fff 32)) (bv #xffff8000 32)))
optimized x86 0:
  (int32_t (app abstr-vals$1752 0))
Ran synthesizer for 82 ms
(unsat)
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (vec-max
 (vec-min
  (vec-add
   (vec-bwand
    (sca-broadcast (int32_t (bv #x00000001 32)) 16)
    (vec-div
     (vec-mul
      (vec-cast
       (vec-sub
        (vec-cast
         (load
          (buffer input 'uint8)
          (ramp
           (sca-add
            (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
            (sca-sub
             (sca-sub (var-lookup 't101) (var-lookup 't106))
             (var-lookup 'input.min.0)))
           1
           16)
          (aligned 1 0))
         'int16
         16)
        (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
       'int32
       16)
      (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
     (sca-broadcast (int32_t (bv #x00000080 32)) 16)))
   (vec-div
    (vec-mul
     (vec-cast
      (vec-sub
       (vec-cast
        (load
         (buffer input 'uint8)
         (ramp
          (sca-add
           (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
           (sca-sub
            (sca-sub (var-lookup 't101) (var-lookup 't106))
            (var-lookup 'input.min.0)))
          1
          16)
         (aligned 1 0))
        'int16
        16)
       (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
      'int32
      16)
     (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
    (sca-broadcast (int32_t (bv #x00000100 32)) 16)))
  (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
 (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
template:
  (maximum
 ...
 (minimum
  ...
  (vs-shift-right
   ...
   (vs-mpy-add
    ...
    (vs-mpy-add
     ...
     (combine #<load-data> (broadcast ... (uint8_t input_zero)))
     (list (int8_t (bv #x01 8)) (int8_t (bv #xff 8)))
     #f
     #f
     #f
     'int16)
    (list (load-sca (buffer inv_sqrt 'int32) 0))
    #f
    #f
    #f
    'int32)
   (int32_t (bv #x00000008 32))
   #t
   x?$1442
   #t)
  (broadcast ... (int32_t (bv #x00007fff 32))))
 (broadcast ... (int32_t (bv #xffff8000 32))))
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$1753 idx) (bv #x00007fff 32)) (bvsle (bv #xff800000 32) (app abstr-vals$1753 idx))))
 (forall (idx) (&& (bvsle (app abstr-vals$1754 idx) (bv #xffff8000 32)) (bvsle (bv #xffff8000 32) (app abstr-vals$1754 idx)))))
optimized-halide-expr:
  (vec-max #<abstr-halide-expr> #<abstr-halide-expr>)
optimized-template:
  (maximum ... #<abstr-expr> #<abstr-expr>)
optimized Halide 0:
  (int32_t
 (ite (bvsle (app abstr-vals$1754 0) (app abstr-vals$1753 0)) (app abstr-vals$1753 0) (app abstr-vals$1754 0)))
optimized x86 0:
  (int32_t
 (ite (bvsle (app abstr-vals$1754 0) (app abstr-vals$1753 0)) (app abstr-vals$1753 0) (app abstr-vals$1754 0)))
Ran synthesizer for 46 ms
(model)
(vec-max #<abstr-halide-expr> #<abstr-halide-expr>)
(maximum
 ...
 (minimum
  ...
  (vs-shift-right
   ...
   (vs-mpy-add
    ...
    (vs-mpy-add
     ...
     (combine #<load-data> (broadcast ... (uint8_t input_zero)))
     (list (int8_t (bv #x01 8)) (int8_t (bv #xff 8)))
     #f
     #f
     #f
     'int16)
    (list (load-sca (buffer inv_sqrt 'int32) 0))
    #f
    #f
    #f
    'int32)
   (int32_t (bv #x00000008 32))
   #t
   x?$1442
   #t)
  (broadcast ... (int32_t (bv #x00007fff 32))))
 (broadcast ... (int32_t (bv #xffff8000 32))))
Ran bounds analysis for 38 ms
Ran bounds analysis for 25 ms
"Extended success?"
#t
(maximum
 ...
 (minimum
  ...
  (vs-shift-right
   ...
   (vs-mpy-add
    ...
    (vs-mpy-add
     ...
     (combine #<load-data> (broadcast ... (uint8_t input_zero)))
     (list (int8_t (bv #x01 8)) (int8_t (bv #xff 8)))
     #f
     #f
     #f
     'int16)
    (list (load-sca (buffer inv_sqrt 'int32) 0))
    #f
    #f
    #f
    'int32)
   (int32_t (bv #x00000008 32))
   #t
   x?$1442
   #t)
  (broadcast ... (int32_t (bv #x00007fff 32))))
 (broadcast ... (int32_t (bv #xffff8000 32))))
"Building Expr:"
(vec-cast
 (vec-max
  (vec-min
   (vec-add
    (vec-bwand
     (sca-broadcast (int32_t (bv #x00000001 32)) 16)
     (vec-div
      (vec-mul
       (vec-cast
        (vec-sub
         (vec-cast
          (load
           (buffer input 'uint8)
           (ramp
            (sca-add
             (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
             (sca-sub
              (sca-sub (var-lookup 't101) (var-lookup 't106))
              (var-lookup 'input.min.0)))
            1
            16)
           (aligned 1 0))
          'int16
          16)
         (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
        'int32
        16)
       (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
      (sca-broadcast (int32_t (bv #x00000080 32)) 16)))
    (vec-div
     (vec-mul
      (vec-cast
       (vec-sub
        (vec-cast
         (load
          (buffer input 'uint8)
          (ramp
           (sca-add
            (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
            (sca-sub
             (sca-sub (var-lookup 't101) (var-lookup 't106))
             (var-lookup 'input.min.0)))
           1
           16)
          (aligned 1 0))
         'int16
         16)
        (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
       'int32
       16)
      (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
     (sca-broadcast (int32_t (bv #x00000100 32)) 16)))
   (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
  (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
 'int16
 16)
"Fold templates"
(list
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (vs-mpy-add
    ...
    (combine #<load-data> (broadcast ... (uint8_t input_zero)))
    (list (int8_t (bv #x01 8)) (int8_t (bv #xff 8)))
    #f
    #f
    #f
    'int16)
   (list (load-sca (buffer inv_sqrt 'int32) 0))
   #f
   #f
   #f
   'int32)
  (int32_t (ite x?$1757 (bv #x00000007 32) (bv #x00000008 32)))
  #t
  x?$1442
  #t)
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (vs-mpy-add
    ...
    (combine #<load-data> (broadcast ... (uint8_t input_zero)))
    (list (int8_t (bv #x01 8)) (int8_t (bv #xff 8)))
    #f
    #f
    #f
    'int16)
   (list (load-sca (buffer inv_sqrt 'int32) 0))
   #f
   #f
   #f
   'int32)
  (int32_t (bv #x00000008 32))
  x?$1758
  x?$1759
  x?$1760))
here(#(struct:vs-shift-right ... #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:uint8_t input_zero))> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #xff 8))) #f #f #f int16) (#(struct:load-sca #(struct:buffer inv_sqrt int32) 0)) #f #f #f int32) #(struct:int32_t (ite x?$1757 (bv #x00000007 32) (bv #x00000008 32))) #t x?$1442 #t) #(struct:vs-shift-right ... #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:uint8_t input_zero))> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #xff 8))) #f #f #f int16) (#(struct:load-sca #(struct:buffer inv_sqrt int32) 0)) #f #f #f int32) #(struct:int32_t (bv #x00000008 32)) x?$1758 x?$1759 x?$1760))

"Replace templates"
(list
 (cast
  ...
  (vs-shift-right
   ...
   (vs-mpy-add
    ...
    (vs-mpy-add
     ...
     (combine #<load-data> (broadcast ... (uint8_t input_zero)))
     (list (int8_t (bv #x01 8)) (int8_t (bv #xff 8)))
     #f
     #f
     #f
     'int16)
    (list (load-sca (buffer inv_sqrt 'int32) 0))
    #f
    #f
    #f
    'int32)
   (int32_t (bv #x00000008 32))
   #t
   x?$1442
   #t)
  'int16
  #t)
 (cast ... (broadcast ... (int32_t (bv #x00007fff 32))) 'int16 #t)
 (cast
  ...
  (minimum
   ...
   (vs-shift-right
    ...
    (vs-mpy-add
     ...
     (vs-mpy-add
      ...
      (combine #<load-data> (broadcast ... (uint8_t input_zero)))
      (list (int8_t (bv #x01 8)) (int8_t (bv #xff 8)))
      #f
      #f
      #f
      'int16)
     (list (load-sca (buffer inv_sqrt 'int32) 0))
     #f
     #f
     #f
     'int32)
    (int32_t (bv #x00000008 32))
    #t
    x?$1442
    #t)
   (broadcast ... (int32_t (bv #x00007fff 32))))
  'int16
  #t)
 (cast ... (broadcast ... (int32_t (bv #xffff8000 32))) 'int16 #t))
run-x86-synthesizer
halide-expr:
  (vec-cast
 (vec-max
  (vec-min
   (vec-add
    (vec-bwand
     (sca-broadcast (int32_t (bv #x00000001 32)) 16)
     (vec-div
      (vec-mul
       (vec-cast
        (vec-sub
         (vec-cast
          (load
           (buffer input 'uint8)
           (ramp
            (sca-add
             (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
             (sca-sub
              (sca-sub (var-lookup 't101) (var-lookup 't106))
              (var-lookup 'input.min.0)))
            1
            16)
           (aligned 1 0))
          'int16
          16)
         (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
        'int32
        16)
       (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
      (sca-broadcast (int32_t (bv #x00000080 32)) 16)))
    (vec-div
     (vec-mul
      (vec-cast
       (vec-sub
        (vec-cast
         (load
          (buffer input 'uint8)
          (ramp
           (sca-add
            (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
            (sca-sub
             (sca-sub (var-lookup 't101) (var-lookup 't106))
             (var-lookup 'input.min.0)))
           1
           16)
          (aligned 1 0))
         'int16
         16)
        (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
       'int32
       16)
      (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
     (sca-broadcast (int32_t (bv #x00000100 32)) 16)))
   (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
  (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
 'int16
 16)
template:
  (cast ... (broadcast ... (int32_t (bv #x00007fff 32))) 'int16 #t)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$1761 idx) (bv #x00007fff 32)) (bvsle (bv #x00007fff 32) (app abstr-vals$1761 idx)))))
optimized-halide-expr:
  (vec-cast
 (vec-max
  (vec-min
   (vec-add
    (vec-bwand
     (sca-broadcast (int32_t (bv #x00000001 32)) 16)
     (vec-div
      (vec-mul
       (vec-cast
        (vec-sub
         (vec-cast
          (load
           (buffer input 'uint8)
           (ramp
            (sca-add
             (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
             (sca-sub
              (sca-sub (var-lookup 't101) (var-lookup 't106))
              (var-lookup 'input.min.0)))
            1
            16)
           (aligned 1 0))
          'int16
          16)
         (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
        'int32
        16)
       (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
      (sca-broadcast (int32_t (bv #x00000080 32)) 16)))
    (vec-div
     (vec-mul
      (vec-cast
       (vec-sub
        (vec-cast
         (load
          (buffer input 'uint8)
          (ramp
           (sca-add
            (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
            (sca-sub
             (sca-sub (var-lookup 't101) (var-lookup 't106))
             (var-lookup 'input.min.0)))
           1
           16)
          (aligned 1 0))
         'int16
         16)
        (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
       'int32
       16)
      (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
     (sca-broadcast (int32_t (bv #x00000100 32)) 16)))
   #<abstr-halide-expr>)
  (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
 'int16
 16)
optimized-template:
  (cast ... #<abstr-expr> 'int16 #t)
optimized Halide 0:
  (int16_t
 (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (app abstr-vals$1761 0)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (app abstr-vals$1761 0))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (app abstr-vals$1761 0)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (app abstr-vals$1761 0)) (bv #xffff8000 32))))
optimized x86 0:
  (int16_t
 (ite (bvslt (app abstr-vals$1761 0) (bv #xffff8000 32)) (bv #x8000 16) (ite (bvslt (bv #x00007fff 32) (app abstr-vals$1761 0)) (bv #x7fff 16) (extract 15 0 (app abstr-vals$1761 0)))))
run-x86-synthesizer
halide-expr:
  (vec-cast
 (vec-max
  (vec-min
   (vec-add
    (vec-bwand
     (sca-broadcast (int32_t (bv #x00000001 32)) 16)
     (vec-div
      (vec-mul
       (vec-cast
        (vec-sub
         (vec-cast
          (load
           (buffer input 'uint8)
           (ramp
            (sca-add
             (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
             (sca-sub
              (sca-sub (var-lookup 't101) (var-lookup 't106))
              (var-lookup 'input.min.0)))
            1
            16)
           (aligned 1 0))
          'int16
          16)
         (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
        'int32
        16)
       (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
      (sca-broadcast (int32_t (bv #x00000080 32)) 16)))
    (vec-div
     (vec-mul
      (vec-cast
       (vec-sub
        (vec-cast
         (load
          (buffer input 'uint8)
          (ramp
           (sca-add
            (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
            (sca-sub
             (sca-sub (var-lookup 't101) (var-lookup 't106))
             (var-lookup 'input.min.0)))
           1
           16)
          (aligned 1 0))
         'int16
         16)
        (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
       'int32
       16)
      (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
     (sca-broadcast (int32_t (bv #x00000100 32)) 16)))
   (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
  (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
 'int16
 16)
template:
  (cast ... (broadcast ... (int32_t (bv #xffff8000 32))) 'int16 #t)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$1762 idx) (bv #xffff8000 32)) (bvsle (bv #xffff8000 32) (app abstr-vals$1762 idx)))))
optimized-halide-expr:
  (vec-cast
 (vec-max
  (vec-min
   (vec-add
    (vec-bwand
     (sca-broadcast (int32_t (bv #x00000001 32)) 16)
     (vec-div
      (vec-mul
       (vec-cast
        (vec-sub
         (vec-cast
          (load
           (buffer input 'uint8)
           (ramp
            (sca-add
             (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
             (sca-sub
              (sca-sub (var-lookup 't101) (var-lookup 't106))
              (var-lookup 'input.min.0)))
            1
            16)
           (aligned 1 0))
          'int16
          16)
         (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
        'int32
        16)
       (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
      (sca-broadcast (int32_t (bv #x00000080 32)) 16)))
    (vec-div
     (vec-mul
      (vec-cast
       (vec-sub
        (vec-cast
         (load
          (buffer input 'uint8)
          (ramp
           (sca-add
            (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
            (sca-sub
             (sca-sub (var-lookup 't101) (var-lookup 't106))
             (var-lookup 'input.min.0)))
           1
           16)
          (aligned 1 0))
         'int16
         16)
        (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
       'int32
       16)
      (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
     (sca-broadcast (int32_t (bv #x00000100 32)) 16)))
   (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
  #<abstr-halide-expr>)
 'int16
 16)
optimized-template:
  (cast ... #<abstr-expr> 'int16 #t)
optimized Halide 0:
  (int16_t
 (extract 15 0 (ite (bvsle (app abstr-vals$1762 0) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (app abstr-vals$1762 0))))
optimized x86 0:
  (int16_t
 (ite (bvslt (app abstr-vals$1762 0) (bv #xffff8000 32)) (bv #x8000 16) (ite (bvslt (bv #x00007fff 32) (app abstr-vals$1762 0)) (bv #x7fff 16) (extract 15 0 (app abstr-vals$1762 0)))))
run-x86-synthesizer
halide-expr:
  (vec-cast
 (vec-max
  (vec-min
   (vec-add
    (vec-bwand
     (sca-broadcast (int32_t (bv #x00000001 32)) 16)
     (vec-div
      (vec-mul
       (vec-cast
        (vec-sub
         (vec-cast
          (load
           (buffer input 'uint8)
           (ramp
            (sca-add
             (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
             (sca-sub
              (sca-sub (var-lookup 't101) (var-lookup 't106))
              (var-lookup 'input.min.0)))
            1
            16)
           (aligned 1 0))
          'int16
          16)
         (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
        'int32
        16)
       (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
      (sca-broadcast (int32_t (bv #x00000080 32)) 16)))
    (vec-div
     (vec-mul
      (vec-cast
       (vec-sub
        (vec-cast
         (load
          (buffer input 'uint8)
          (ramp
           (sca-add
            (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
            (sca-sub
             (sca-sub (var-lookup 't101) (var-lookup 't106))
             (var-lookup 'input.min.0)))
           1
           16)
          (aligned 1 0))
         'int16
         16)
        (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
       'int32
       16)
      (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
     (sca-broadcast (int32_t (bv #x00000100 32)) 16)))
   (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
  (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
 'int16
 16)
template:
  (vs-shift-right
 ...
 (vs-mpy-add
  ...
  (vs-mpy-add
   ...
   (combine #<load-data> (broadcast ... (uint8_t input_zero)))
   (list (int8_t (bv #x01 8)) (int8_t (bv #xff 8)))
   #f
   #f
   #f
   'int16)
  (list (load-sca (buffer inv_sqrt 'int32) 0))
  #f
  #f
  #f
  'int32)
 (int32_t (ite x?$1757 (bv #x00000007 32) (bv #x00000008 32)))
 #t
 x?$1442
 #t)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-cast
 (vec-max
  (vec-min
   (vec-add
    (vec-bwand
     (sca-broadcast (int32_t (bv #x00000001 32)) 16)
     (vec-div
      #<abstr-halide-expr>
      (sca-broadcast (int32_t (bv #x00000080 32)) 16)))
    (vec-div
     #<abstr-halide-expr>
     (sca-broadcast (int32_t (bv #x00000100 32)) 16)))
   (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
  (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
 'int16
 16)
optimized-template:
  (vs-shift-right
 ...
 #<abstr-expr>
 (int32_t (ite x?$1757 (bv #x00000007 32) (bv #x00000008 32)))
 #t
 x?$1442
 #t)
optimized Halide 0:
  (int16_t
 (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$1763 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$1763 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$1763 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$1763 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$1763 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$1763 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$1763 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$1763 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$1763 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$1763 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$1763 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$1763 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$1763 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$1763 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$1763 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$1763 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$1763 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$1763 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$1763 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$1763 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$1763 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$1763 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$1763 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$1763 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))))
optimized x86 0:
  (int32_t
 (bvadd (bvashr (app abstr-vals$1763 0) (ite x?$1757 (bv #x00000007 32) (bv #x00000008 32))) (bvand (bv #x00000001 32) (bvashr (app abstr-vals$1763 0) (ite x?$1757 (bv #x00000006 32) (bv #x00000007 32))))))
Ran synthesizer for 3 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-cast
 (vec-max
  (vec-min
   (vec-add
    (vec-bwand
     (sca-broadcast (int32_t (bv #x00000001 32)) 16)
     (vec-div
      (vec-mul
       (vec-cast
        (vec-sub
         (vec-cast
          (load
           (buffer input 'uint8)
           (ramp
            (sca-add
             (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
             (sca-sub
              (sca-sub (var-lookup 't101) (var-lookup 't106))
              (var-lookup 'input.min.0)))
            1
            16)
           (aligned 1 0))
          'int16
          16)
         (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
        'int32
        16)
       (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
      (sca-broadcast (int32_t (bv #x00000080 32)) 16)))
    (vec-div
     (vec-mul
      (vec-cast
       (vec-sub
        (vec-cast
         (load
          (buffer input 'uint8)
          (ramp
           (sca-add
            (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
            (sca-sub
             (sca-sub (var-lookup 't101) (var-lookup 't106))
             (var-lookup 'input.min.0)))
           1
           16)
          (aligned 1 0))
         'int16
         16)
        (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
       'int32
       16)
      (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
     (sca-broadcast (int32_t (bv #x00000100 32)) 16)))
   (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
  (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
 'int16
 16)
template:
  (vs-shift-right
 ...
 (vs-mpy-add
  ...
  (vs-mpy-add
   ...
   (combine #<load-data> (broadcast ... (uint8_t input_zero)))
   (list (int8_t (bv #x01 8)) (int8_t (bv #xff 8)))
   #f
   #f
   #f
   'int16)
  (list (load-sca (buffer inv_sqrt 'int32) 0))
  #f
  #f
  #f
  'int32)
 (int32_t (bv #x00000008 32))
 x?$1758
 x?$1759
 x?$1760)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-cast
 (vec-max
  (vec-min
   (vec-add
    (vec-bwand
     (sca-broadcast (int32_t (bv #x00000001 32)) 16)
     (vec-div
      #<abstr-halide-expr>
      (sca-broadcast (int32_t (bv #x00000080 32)) 16)))
    (vec-div
     #<abstr-halide-expr>
     (sca-broadcast (int32_t (bv #x00000100 32)) 16)))
   (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
  (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
 'int16
 16)
optimized-template:
  (vs-shift-right
 ...
 #<abstr-expr>
 (int32_t (bv #x00000008 32))
 x?$1758
 x?$1759
 x?$1760)
optimized Halide 0:
  (int16_t
 (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$1764 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$1764 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$1764 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$1764 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$1764 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$1764 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$1764 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$1764 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$1764 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$1764 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$1764 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$1764 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$1764 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$1764 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$1764 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$1764 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$1764 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$1764 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$1764 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$1764 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$1764 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$1764 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$1764 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$1764 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))))
optimized x86 0:
  (int32_t
 (ite x?$1758 (bvadd (ite x?$1760 (bvashr (app abstr-vals$1764 0) (bv #x00000008 32)) (bvlshr (app abstr-vals$1764 0) (bv #x00000008 32))) (bvand (bv #x00000001 32) (ite x?$1760 (bvashr (app abstr-vals$1764 0) (bv #x00000007 32)) (bvlshr (app abstr-vals$1764 0) (bv #x00000007 32))))) (ite x?$1760 (bvashr (app abstr-vals$1764 0) (bv #x00000008 32)) (bvlshr (app abstr-vals$1764 0) (bv #x00000008 32)))))
Ran synthesizer for 3 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-cast
 (vec-max
  (vec-min
   (vec-add
    (vec-bwand
     (sca-broadcast (int32_t (bv #x00000001 32)) 16)
     (vec-div
      (vec-mul
       (vec-cast
        (vec-sub
         (vec-cast
          (load
           (buffer input 'uint8)
           (ramp
            (sca-add
             (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
             (sca-sub
              (sca-sub (var-lookup 't101) (var-lookup 't106))
              (var-lookup 'input.min.0)))
            1
            16)
           (aligned 1 0))
          'int16
          16)
         (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
        'int32
        16)
       (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
      (sca-broadcast (int32_t (bv #x00000080 32)) 16)))
    (vec-div
     (vec-mul
      (vec-cast
       (vec-sub
        (vec-cast
         (load
          (buffer input 'uint8)
          (ramp
           (sca-add
            (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
            (sca-sub
             (sca-sub (var-lookup 't101) (var-lookup 't106))
             (var-lookup 'input.min.0)))
           1
           16)
          (aligned 1 0))
         'int16
         16)
        (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
       'int32
       16)
      (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
     (sca-broadcast (int32_t (bv #x00000100 32)) 16)))
   (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
  (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
 'int16
 16)
template:
  (cast
 ...
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (vs-mpy-add
    ...
    (combine #<load-data> (broadcast ... (uint8_t input_zero)))
    (list (int8_t (bv #x01 8)) (int8_t (bv #xff 8)))
    #f
    #f
    #f
    'int16)
   (list (load-sca (buffer inv_sqrt 'int32) 0))
   #f
   #f
   #f
   'int32)
  (int32_t (bv #x00000008 32))
  #t
  x?$1442
  #t)
 'int16
 #t)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$1765 idx) (bv #x00800000 32)) (bvsle (bv #xff800000 32) (app abstr-vals$1765 idx)))))
optimized-halide-expr:
  (vec-cast
 (vec-max
  (vec-min
   #<abstr-halide-expr>
   (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
  (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
 'int16
 16)
optimized-template:
  (cast ... #<abstr-expr> 'int16 #t)
optimized Halide 0:
  (int16_t
 (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (app abstr-vals$1765 0) (bv #x00007fff 32)) (app abstr-vals$1765 0) (bv #x00007fff 32))) (ite (bvsle (app abstr-vals$1765 0) (bv #x00007fff 32)) (app abstr-vals$1765 0) (bv #x00007fff 32)) (bv #xffff8000 32))))
optimized x86 0:
  (int16_t
 (ite (bvslt (app abstr-vals$1765 0) (bv #xffff8000 32)) (bv #x8000 16) (ite (bvslt (bv #x00007fff 32) (app abstr-vals$1765 0)) (bv #x7fff 16) (extract 15 0 (app abstr-vals$1765 0)))))
Ran synthesizer for 74 ms
(model)
(vec-cast
 (vec-max
  (vec-min
   #<abstr-halide-expr>
   (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
  (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
 'int16
 16)
(cast
 ...
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (vs-mpy-add
    ...
    (combine #<load-data> (broadcast ... (uint8_t input_zero)))
    (list (int8_t (bv #x01 8)) (int8_t (bv #xff 8)))
    #f
    #f
    #f
    'int16)
   (list (load-sca (buffer inv_sqrt 'int32) 0))
   #f
   #f
   #f
   'int32)
  (int32_t (bv #x00000008 32))
  #t
  x?$1442
  #t)
 'int16
 #t)
Ran bounds analysis for 21 ms
Ran bounds analysis for 14 ms
"Success?"
#t
(cast ... (vs-shift-right ... (vs-mpy-add ... (vs-mpy-add ... (combine #<load-data> (broadcast ... (uint8_t input_zero))) (list (int8_t (bv #x01 8)) (int8_t (bv #xff 8))) #f #f #f 'int16) (list (load-sca (buffer inv_sqrt 'int32) 0)) #f #f #f 'int32) (int32_t (bv #x00000008 32)) #t x?$1442 #t) 'int16 #t)
"Building Expr:"
(vec-cast
 (vec-cast
  (vec-max
   (vec-min
    (vec-add
     (vec-bwand
      (sca-broadcast (int32_t (bv #x00000001 32)) 16)
      (vec-div
       (vec-mul
        (vec-cast
         (vec-sub
          (vec-cast
           (load
            (buffer input 'uint8)
            (ramp
             (sca-add
              (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
              (sca-sub
               (sca-sub (var-lookup 't101) (var-lookup 't106))
               (var-lookup 'input.min.0)))
             1
             16)
            (aligned 1 0))
           'int16
           16)
          (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
         'int32
         16)
        (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
       (sca-broadcast (int32_t (bv #x00000080 32)) 16)))
     (vec-div
      (vec-mul
       (vec-cast
        (vec-sub
         (vec-cast
          (load
           (buffer input 'uint8)
           (ramp
            (sca-add
             (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
             (sca-sub
              (sca-sub (var-lookup 't101) (var-lookup 't106))
              (var-lookup 'input.min.0)))
            1
            16)
           (aligned 1 0))
          'int16
          16)
         (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
        'int32
        16)
       (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
      (sca-broadcast (int32_t (bv #x00000100 32)) 16)))
    (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
   (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
  'int16
  16)
 'int32
 16)
"Fold templates"
(list
 (vs-mpy-add
  ...
  (vs-mpy-add
   ...
   (combine #<load-data> (broadcast ... (uint8_t input_zero)))
   (list (int8_t (bv #x01 8)) (int8_t (bv #xff 8)))
   #f
   #f
   #f
   'int16)
  (list (load-sca (buffer inv_sqrt 'int32) 0))
  x?$1772
  x?$1773
  x?$1774
  'int32)
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (vs-mpy-add
    ...
    (combine #<load-data> (broadcast ... (uint8_t input_zero)))
    (list (int8_t (bv #x01 8)) (int8_t (bv #xff 8)))
    #f
    #f
    #f
    'int16)
   (list (load-sca (buffer inv_sqrt 'int32) 0))
   #f
   #f
   #f
   'int32)
  (int32_t (ite x?$1768 (bv #x00000007 32) (bv #x00000008 32)))
  #t
  x?$1442
  #t)
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (vs-mpy-add
    ...
    (combine #<load-data> (broadcast ... (uint8_t input_zero)))
    (list (int8_t (bv #x01 8)) (int8_t (bv #xff 8)))
    #f
    #f
    #f
    'int16)
   (list (load-sca (buffer inv_sqrt 'int32) 0))
   #f
   #f
   #f
   'int32)
  (int32_t (bv #x00000008 32))
  x?$1769
  x?$1770
  x?$1771)
 (cast
  ...
  (vs-shift-right
   ...
   (vs-mpy-add
    ...
    (vs-mpy-add
     ...
     (combine #<load-data> (broadcast ... (uint8_t input_zero)))
     (list (int8_t (bv #x01 8)) (int8_t (bv #xff 8)))
     #f
     #f
     #f
     'int16)
    (list (load-sca (buffer inv_sqrt 'int32) 0))
    #f
    #f
    #f
    'int32)
   (int32_t (bv #x00000008 32))
   #t
   x?$1442
   #t)
  'int32
  x?$1767))
here(#(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:uint8_t input_zero))> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #xff 8))) #f #f #f int16) (#(struct:load-sca #(struct:buffer inv_sqrt int32) 0)) x?$1772 x?$1773 x?$1774 int32) #(struct:vs-shift-right ... #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:uint8_t input_zero))> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #xff 8))) #f #f #f int16) (#(struct:load-sca #(struct:buffer inv_sqrt int32) 0)) #f #f #f int32) #(struct:int32_t (ite x?$1768 (bv #x00000007 32) (bv #x00000008 32))) #t x?$1442 #t) #(struct:vs-shift-right ... #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:uint8_t input_zero))> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #xff 8))) #f #f #f int16) (#(struct:load-sca #(struct:buffer inv_sqrt int32) 0)) #f #f #f int32) #(struct:int32_t (bv #x00000008 32)) x?$1769 x?$1770 x?$1771) #(struct:cast ... #(struct:vs-shift-right ... #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:uint8_t input_zero))> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #xff 8))) #f #f #f int16) (#(struct:load-sca #(struct:buffer inv_sqrt int32) 0)) #f #f #f int32) #(struct:int32_t (bv #x00000008 32)) #t x?$1442 #t) int32 x?$1767))

"Replace templates"
(list
 (cast
  ...
  (vs-shift-right
   ...
   (vs-mpy-add
    ...
    (vs-mpy-add
     ...
     (combine #<load-data> (broadcast ... (uint8_t input_zero)))
     (list (int8_t (bv #x01 8)) (int8_t (bv #xff 8)))
     #f
     #f
     #f
     'int16)
    (list (load-sca (buffer inv_sqrt 'int32) 0))
    #f
    #f
    #f
    'int32)
   (int32_t (bv #x00000008 32))
   #t
   x?$1442
   #t)
  'int32
  #f))
run-x86-synthesizer
halide-expr:
  (vec-cast
 (vec-cast
  (vec-max
   (vec-min
    (vec-add
     (vec-bwand
      (sca-broadcast (int32_t (bv #x00000001 32)) 16)
      (vec-div
       (vec-mul
        (vec-cast
         (vec-sub
          (vec-cast
           (load
            (buffer input 'uint8)
            (ramp
             (sca-add
              (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
              (sca-sub
               (sca-sub (var-lookup 't101) (var-lookup 't106))
               (var-lookup 'input.min.0)))
             1
             16)
            (aligned 1 0))
           'int16
           16)
          (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
         'int32
         16)
        (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
       (sca-broadcast (int32_t (bv #x00000080 32)) 16)))
     (vec-div
      (vec-mul
       (vec-cast
        (vec-sub
         (vec-cast
          (load
           (buffer input 'uint8)
           (ramp
            (sca-add
             (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
             (sca-sub
              (sca-sub (var-lookup 't101) (var-lookup 't106))
              (var-lookup 'input.min.0)))
            1
            16)
           (aligned 1 0))
          'int16
          16)
         (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
        'int32
        16)
       (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
      (sca-broadcast (int32_t (bv #x00000100 32)) 16)))
    (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
   (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
  'int16
  16)
 'int32
 16)
template:
  (vs-mpy-add
 ...
 (vs-mpy-add
  ...
  (combine #<load-data> (broadcast ... (uint8_t input_zero)))
  (list (int8_t (bv #x01 8)) (int8_t (bv #xff 8)))
  #f
  #f
  #f
  'int16)
 (list (load-sca (buffer inv_sqrt 'int32) 0))
 x?$1772
 x?$1773
 x?$1774
 'int32)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$1776 idx) (bv #x00ff 16)) (bvsle (bv #xff01 16) (app abstr-vals$1776 idx)))))
optimized-halide-expr:
  (vec-cast
 (vec-cast
  (vec-max
   (vec-min
    (vec-add
     (vec-bwand
      (sca-broadcast (int32_t (bv #x00000001 32)) 16)
      (vec-div
       (vec-mul
        (vec-cast #<abstr-halide-expr> 'int32 16)
        (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
       (sca-broadcast (int32_t (bv #x00000080 32)) 16)))
     (vec-div
      (vec-mul
       (vec-cast #<abstr-halide-expr> 'int32 16)
       (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
      (sca-broadcast (int32_t (bv #x00000100 32)) 16)))
    (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
   (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
  'int16
  16)
 'int32
 16)
optimized-template:
  (vs-mpy-add
 ...
 #<abstr-expr>
 (list (load-sca (buffer inv_sqrt 'int32) 0))
 x?$1772
 x?$1773
 x?$1774
 'int32)
optimized Halide 0:
  (int32_t
 (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (app inv_sqrt 0) (sign-extend (app abstr-vals$1776 0) (bitvector 32))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (app inv_sqrt 0) (sign-extend (app abstr-vals$1776 0) (bitvector 32))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (app inv_sqrt 0) (sign-extend (app abstr-vals$1776 0) (bitvector 32))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (app inv_sqrt 0) (sign-extend (app abstr-vals$1776 0) (bitvector 32))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (app inv_sqrt 0) (sign-extend (app abstr-vals$1776 0) (bitvector 32))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (app inv_sqrt 0) (sign-extend (app abstr-vals$1776 0) (bitvector 32))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (app inv_sqrt 0) (sign-extend (app abstr-vals$1776 0) (bitvector 32))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (app inv_sqrt 0) (sign-extend (app abstr-vals$1776 0) (bitvector 32))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (app inv_sqrt 0) (sign-extend (app abstr-vals$1776 0) (bitvector 32))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (app inv_sqrt 0) (sign-extend (app abstr-vals$1776 0) (bitvector 32))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (app inv_sqrt 0) (sign-extend (app abstr-vals$1776 0) (bitvector 32))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (app inv_sqrt 0) (sign-extend (app abstr-vals$1776 0) (bitvector 32))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (app inv_sqrt 0) (sign-extend (app abstr-vals$1776 0) (bitvector 32))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (app inv_sqrt 0) (sign-extend (app abstr-vals$1776 0) (bitvector 32))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (app inv_sqrt 0) (sign-extend (app abstr-vals$1776 0) (bitvector 32))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (app inv_sqrt 0) (sign-extend (app abstr-vals$1776 0) (bitvector 32))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (app inv_sqrt 0) (sign-extend (app abstr-vals$1776 0) (bitvector 32))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (app inv_sqrt 0) (sign-extend (app abstr-vals$1776 0) (bitvector 32))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (app inv_sqrt 0) (sign-extend (app abstr-vals$1776 0) (bitvector 32))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (app inv_sqrt 0) (sign-extend (app abstr-vals$1776 0) (bitvector 32))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (app inv_sqrt 0) (sign-extend (app abstr-vals$1776 0) (bitvector 32))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (app inv_sqrt 0) (sign-extend (app abstr-vals$1776 0) (bitvector 32))) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (app inv_sqrt 0) (sign-extend (app abstr-vals$1776 0) (bitvector 32))) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (app inv_sqrt 0) (sign-extend (app abstr-vals$1776 0) (bitvector 32))) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32)))
optimized x86 0:
  (int32_t
 (ite* (⊢ (&& (! x?$1774) (! (&& x?$1772 x?$1774))) (ite x?$1772 (bvadd (ite x?$1773 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (bvmul (app inv_sqrt 0) (sign-extend (app abstr-vals$1776 0) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1773 (bv #x00000001 32) (bv #x00000000 32))))) (bvmul (app inv_sqrt 0) (sign-extend (app abstr-vals$1776 0) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1773 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (bvmul (app inv_sqrt 0) (sign-extend (app abstr-vals$1776 0) (bitvector 32))) (ite x?$1773 (bv #x00000001 32) (bv #x00000000 32))))) (⊢ (|| (&& x?$1772 x?$1774) (&& x?$1774 (! (&& x?$1772 x?$1774)))) (bvashr (ite x?$1772 (bvadd (ite x?$1773 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (bvmul (app inv_sqrt 0) (sign-extend (app abstr-vals$1776 0) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1773 (bv #x00000001 32) (bv #x00000000 32))))) (bvmul (app inv_sqrt 0) (sign-extend (app abstr-vals$1776 0) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1773 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (bvmul (app inv_sqrt 0) (sign-extend (app abstr-vals$1776 0) (bitvector 32))) (ite x?$1773 (bv #x00000001 32) (bv #x00000000 32)))) (bv #x00000001 32)))))
Ran synthesizer for 1285 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-cast
 (vec-cast
  (vec-max
   (vec-min
    (vec-add
     (vec-bwand
      (sca-broadcast (int32_t (bv #x00000001 32)) 16)
      (vec-div
       (vec-mul
        (vec-cast
         (vec-sub
          (vec-cast
           (load
            (buffer input 'uint8)
            (ramp
             (sca-add
              (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
              (sca-sub
               (sca-sub (var-lookup 't101) (var-lookup 't106))
               (var-lookup 'input.min.0)))
             1
             16)
            (aligned 1 0))
           'int16
           16)
          (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
         'int32
         16)
        (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
       (sca-broadcast (int32_t (bv #x00000080 32)) 16)))
     (vec-div
      (vec-mul
       (vec-cast
        (vec-sub
         (vec-cast
          (load
           (buffer input 'uint8)
           (ramp
            (sca-add
             (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
             (sca-sub
              (sca-sub (var-lookup 't101) (var-lookup 't106))
              (var-lookup 'input.min.0)))
            1
            16)
           (aligned 1 0))
          'int16
          16)
         (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
        'int32
        16)
       (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
      (sca-broadcast (int32_t (bv #x00000100 32)) 16)))
    (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
   (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
  'int16
  16)
 'int32
 16)
template:
  (vs-shift-right
 ...
 (vs-mpy-add
  ...
  (vs-mpy-add
   ...
   (combine #<load-data> (broadcast ... (uint8_t input_zero)))
   (list (int8_t (bv #x01 8)) (int8_t (bv #xff 8)))
   #f
   #f
   #f
   'int16)
  (list (load-sca (buffer inv_sqrt 'int32) 0))
  #f
  #f
  #f
  'int32)
 (int32_t (ite x?$1768 (bv #x00000007 32) (bv #x00000008 32)))
 #t
 x?$1442
 #t)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-cast
 (vec-cast
  (vec-max
   (vec-min
    (vec-add
     (vec-bwand
      (sca-broadcast (int32_t (bv #x00000001 32)) 16)
      (vec-div
       #<abstr-halide-expr>
       (sca-broadcast (int32_t (bv #x00000080 32)) 16)))
     (vec-div
      #<abstr-halide-expr>
      (sca-broadcast (int32_t (bv #x00000100 32)) 16)))
    (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
   (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
  'int16
  16)
 'int32
 16)
optimized-template:
  (vs-shift-right
 ...
 #<abstr-expr>
 (int32_t (ite x?$1768 (bv #x00000007 32) (bv #x00000008 32)))
 #t
 x?$1442
 #t)
optimized Halide 0:
  (int32_t
 (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$1777 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$1777 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$1777 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$1777 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$1777 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$1777 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$1777 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$1777 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$1777 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$1777 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$1777 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$1777 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$1777 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$1777 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$1777 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$1777 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$1777 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$1777 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$1777 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$1777 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$1777 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$1777 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$1777 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$1777 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32)))
optimized x86 0:
  (int32_t
 (bvadd (bvashr (app abstr-vals$1777 0) (ite x?$1768 (bv #x00000007 32) (bv #x00000008 32))) (bvand (bv #x00000001 32) (bvashr (app abstr-vals$1777 0) (ite x?$1768 (bv #x00000006 32) (bv #x00000007 32))))))
Ran synthesizer for 1143 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-cast
 (vec-cast
  (vec-max
   (vec-min
    (vec-add
     (vec-bwand
      (sca-broadcast (int32_t (bv #x00000001 32)) 16)
      (vec-div
       (vec-mul
        (vec-cast
         (vec-sub
          (vec-cast
           (load
            (buffer input 'uint8)
            (ramp
             (sca-add
              (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
              (sca-sub
               (sca-sub (var-lookup 't101) (var-lookup 't106))
               (var-lookup 'input.min.0)))
             1
             16)
            (aligned 1 0))
           'int16
           16)
          (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
         'int32
         16)
        (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
       (sca-broadcast (int32_t (bv #x00000080 32)) 16)))
     (vec-div
      (vec-mul
       (vec-cast
        (vec-sub
         (vec-cast
          (load
           (buffer input 'uint8)
           (ramp
            (sca-add
             (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
             (sca-sub
              (sca-sub (var-lookup 't101) (var-lookup 't106))
              (var-lookup 'input.min.0)))
            1
            16)
           (aligned 1 0))
          'int16
          16)
         (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
        'int32
        16)
       (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
      (sca-broadcast (int32_t (bv #x00000100 32)) 16)))
    (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
   (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
  'int16
  16)
 'int32
 16)
template:
  (vs-shift-right
 ...
 (vs-mpy-add
  ...
  (vs-mpy-add
   ...
   (combine #<load-data> (broadcast ... (uint8_t input_zero)))
   (list (int8_t (bv #x01 8)) (int8_t (bv #xff 8)))
   #f
   #f
   #f
   'int16)
  (list (load-sca (buffer inv_sqrt 'int32) 0))
  #f
  #f
  #f
  'int32)
 (int32_t (bv #x00000008 32))
 x?$1769
 x?$1770
 x?$1771)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-cast
 (vec-cast
  (vec-max
   (vec-min
    (vec-add
     (vec-bwand
      (sca-broadcast (int32_t (bv #x00000001 32)) 16)
      (vec-div
       #<abstr-halide-expr>
       (sca-broadcast (int32_t (bv #x00000080 32)) 16)))
     (vec-div
      #<abstr-halide-expr>
      (sca-broadcast (int32_t (bv #x00000100 32)) 16)))
    (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
   (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
  'int16
  16)
 'int32
 16)
optimized-template:
  (vs-shift-right
 ...
 #<abstr-expr>
 (int32_t (bv #x00000008 32))
 x?$1769
 x?$1770
 x?$1771)
optimized Halide 0:
  (int32_t
 (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$1778 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$1778 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$1778 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$1778 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$1778 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$1778 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$1778 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$1778 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$1778 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$1778 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$1778 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$1778 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$1778 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$1778 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$1778 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$1778 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$1778 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$1778 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$1778 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$1778 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$1778 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$1778 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$1778 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$1778 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32)))
optimized x86 0:
  (int32_t
 (ite x?$1769 (bvadd (ite x?$1771 (bvashr (app abstr-vals$1778 0) (bv #x00000008 32)) (bvlshr (app abstr-vals$1778 0) (bv #x00000008 32))) (bvand (bv #x00000001 32) (ite x?$1771 (bvashr (app abstr-vals$1778 0) (bv #x00000007 32)) (bvlshr (app abstr-vals$1778 0) (bv #x00000007 32))))) (ite x?$1771 (bvashr (app abstr-vals$1778 0) (bv #x00000008 32)) (bvlshr (app abstr-vals$1778 0) (bv #x00000008 32)))))
Ran synthesizer for 1154 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-cast
 (vec-cast
  (vec-max
   (vec-min
    (vec-add
     (vec-bwand
      (sca-broadcast (int32_t (bv #x00000001 32)) 16)
      (vec-div
       (vec-mul
        (vec-cast
         (vec-sub
          (vec-cast
           (load
            (buffer input 'uint8)
            (ramp
             (sca-add
              (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
              (sca-sub
               (sca-sub (var-lookup 't101) (var-lookup 't106))
               (var-lookup 'input.min.0)))
             1
             16)
            (aligned 1 0))
           'int16
           16)
          (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
         'int32
         16)
        (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
       (sca-broadcast (int32_t (bv #x00000080 32)) 16)))
     (vec-div
      (vec-mul
       (vec-cast
        (vec-sub
         (vec-cast
          (load
           (buffer input 'uint8)
           (ramp
            (sca-add
             (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
             (sca-sub
              (sca-sub (var-lookup 't101) (var-lookup 't106))
              (var-lookup 'input.min.0)))
            1
            16)
           (aligned 1 0))
          'int16
          16)
         (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
        'int32
        16)
       (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
      (sca-broadcast (int32_t (bv #x00000100 32)) 16)))
    (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
   (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
  'int16
  16)
 'int32
 16)
template:
  (cast
 ...
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (vs-mpy-add
    ...
    (combine #<load-data> (broadcast ... (uint8_t input_zero)))
    (list (int8_t (bv #x01 8)) (int8_t (bv #xff 8)))
    #f
    #f
    #f
    'int16)
   (list (load-sca (buffer inv_sqrt 'int32) 0))
   #f
   #f
   #f
   'int32)
  (int32_t (bv #x00000008 32))
  #t
  x?$1442
  #t)
 'int32
 x?$1767)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$1779 idx) (bv #x00800000 32)) (bvsle (bv #xff800000 32) (app abstr-vals$1779 idx)))))
optimized-halide-expr:
  (vec-cast
 (vec-cast
  (vec-max
   (vec-min
    #<abstr-halide-expr>
    (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
   (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
  'int16
  16)
 'int32
 16)
optimized-template:
  (cast ... #<abstr-expr> 'int32 x?$1767)
optimized Halide 0:
  (int32_t
 (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (app abstr-vals$1779 0) (bv #x00007fff 32)) (app abstr-vals$1779 0) (bv #x00007fff 32))) (ite (bvsle (app abstr-vals$1779 0) (bv #x00007fff 32)) (app abstr-vals$1779 0) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32)))
optimized x86 0:
  (int32_t (app abstr-vals$1779 0))
Ran synthesizer for 88 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-cast
 (vec-cast
  (vec-max
   (vec-min
    (vec-add
     (vec-bwand
      (sca-broadcast (int32_t (bv #x00000001 32)) 16)
      (vec-div
       (vec-mul
        (vec-cast
         (vec-sub
          (vec-cast
           (load
            (buffer input 'uint8)
            (ramp
             (sca-add
              (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
              (sca-sub
               (sca-sub (var-lookup 't101) (var-lookup 't106))
               (var-lookup 'input.min.0)))
             1
             16)
            (aligned 1 0))
           'int16
           16)
          (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
         'int32
         16)
        (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
       (sca-broadcast (int32_t (bv #x00000080 32)) 16)))
     (vec-div
      (vec-mul
       (vec-cast
        (vec-sub
         (vec-cast
          (load
           (buffer input 'uint8)
           (ramp
            (sca-add
             (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
             (sca-sub
              (sca-sub (var-lookup 't101) (var-lookup 't106))
              (var-lookup 'input.min.0)))
            1
            16)
           (aligned 1 0))
          'int16
          16)
         (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
        'int32
        16)
       (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
      (sca-broadcast (int32_t (bv #x00000100 32)) 16)))
    (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
   (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
  'int16
  16)
 'int32
 16)
template:
  (cast
 ...
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (vs-mpy-add
    ...
    (combine #<load-data> (broadcast ... (uint8_t input_zero)))
    (list (int8_t (bv #x01 8)) (int8_t (bv #xff 8)))
    #f
    #f
    #f
    'int16)
   (list (load-sca (buffer inv_sqrt 'int32) 0))
   #f
   #f
   #f
   'int32)
  (int32_t (bv #x00000008 32))
  #t
  x?$1442
  #t)
 'int32
 #f)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$1780 idx) (bv #x00800000 32)) (bvsle (bv #xff800000 32) (app abstr-vals$1780 idx)))))
optimized-halide-expr:
  (vec-cast
 (vec-cast
  (vec-max
   (vec-min
    #<abstr-halide-expr>
    (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
   (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
  'int16
  16)
 'int32
 16)
optimized-template:
  (cast ... #<abstr-expr> 'int32 #f)
optimized Halide 0:
  (int32_t
 (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (app abstr-vals$1780 0) (bv #x00007fff 32)) (app abstr-vals$1780 0) (bv #x00007fff 32))) (ite (bvsle (app abstr-vals$1780 0) (bv #x00007fff 32)) (app abstr-vals$1780 0) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32)))
optimized x86 0:
  (int32_t (app abstr-vals$1780 0))
Ran synthesizer for 90 ms
(unsat)
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (vec-cast
 (vec-cast
  (vec-max
   (vec-min
    (vec-add
     (vec-bwand
      (sca-broadcast (int32_t (bv #x00000001 32)) 16)
      (vec-div
       (vec-mul
        (vec-cast
         (vec-sub
          (vec-cast
           (load
            (buffer input 'uint8)
            (ramp
             (sca-add
              (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
              (sca-sub
               (sca-sub (var-lookup 't101) (var-lookup 't106))
               (var-lookup 'input.min.0)))
             1
             16)
            (aligned 1 0))
           'int16
           16)
          (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
         'int32
         16)
        (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
       (sca-broadcast (int32_t (bv #x00000080 32)) 16)))
     (vec-div
      (vec-mul
       (vec-cast
        (vec-sub
         (vec-cast
          (load
           (buffer input 'uint8)
           (ramp
            (sca-add
             (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
             (sca-sub
              (sca-sub (var-lookup 't101) (var-lookup 't106))
              (var-lookup 'input.min.0)))
            1
            16)
           (aligned 1 0))
          'int16
          16)
         (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
        'int32
        16)
       (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
      (sca-broadcast (int32_t (bv #x00000100 32)) 16)))
    (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
   (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
  'int16
  16)
 'int32
 16)
template:
  (cast
 ...
 (cast
  ...
  (vs-shift-right
   ...
   (vs-mpy-add
    ...
    (vs-mpy-add
     ...
     (combine #<load-data> (broadcast ... (uint8_t input_zero)))
     (list (int8_t (bv #x01 8)) (int8_t (bv #xff 8)))
     #f
     #f
     #f
     'int16)
    (list (load-sca (buffer inv_sqrt 'int32) 0))
    #f
    #f
    #f
    'int32)
   (int32_t (bv #x00000008 32))
   #t
   x?$1442
   #t)
  'int16
  #t)
 'int32
 #f)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-cast #<abstr-halide-expr> 'int32 16)
optimized-template:
  (cast ... #<abstr-expr> 'int32 #f)
optimized Halide 0:
  (int32_t (sign-extend (app abstr-vals$1781 0) (bitvector 32)))
optimized x86 0:
  (int32_t (sign-extend (app abstr-vals$1781 0) (bitvector 32)))
Ran synthesizer for 18 ms
(model)
(vec-cast #<abstr-halide-expr> 'int32 16)
(cast
 ...
 (cast
  ...
  (vs-shift-right
   ...
   (vs-mpy-add
    ...
    (vs-mpy-add
     ...
     (combine #<load-data> (broadcast ... (uint8_t input_zero)))
     (list (int8_t (bv #x01 8)) (int8_t (bv #xff 8)))
     #f
     #f
     #f
     'int16)
    (list (load-sca (buffer inv_sqrt 'int32) 0))
    #f
    #f
    #f
    'int32)
   (int32_t (bv #x00000008 32))
   #t
   x?$1442
   #t)
  'int16
  #t)
 'int32
 #f)
Ran bounds analysis for 36 ms
Ran bounds analysis for 29 ms
"Extended success?"
#t
(cast
 ...
 (cast
  ...
  (vs-shift-right
   ...
   (vs-mpy-add
    ...
    (vs-mpy-add
     ...
     (combine #<load-data> (broadcast ... (uint8_t input_zero)))
     (list (int8_t (bv #x01 8)) (int8_t (bv #xff 8)))
     #f
     #f
     #f
     'int16)
    (list (load-sca (buffer inv_sqrt 'int32) 0))
    #f
    #f
    #f
    'int32)
   (int32_t (bv #x00000008 32))
   #t
   x?$1442
   #t)
  'int16
  #t)
 'int32
 #f)
"Building Expr:"
(sca-broadcast (int16_t (bv #x0080 16)) 16)
"Fold templates"
'()
here()

"Replace templates"
'()
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (sca-broadcast (int16_t (bv #x0080 16)) 16)
template:
  (broadcast ... (int16_t (bv #x0080 16)))
axioms:
  '()
optimized-halide-expr:
  (sca-broadcast (int16_t (bv #x0080 16)) 16)
optimized-template:
  (broadcast ... (int16_t (bv #x0080 16)))
optimized Halide 0:
  (int16_t (bv #x0080 16))
optimized x86 0:
  (int16_t (bv #x0080 16))
Ran synthesizer for 19 ms
(model)
(sca-broadcast (int16_t (bv #x0080 16)) 16)
(broadcast ... (int16_t (bv #x0080 16)))
Ran bounds analysis for 22 ms
Ran bounds analysis for 14 ms
"Extended success?"
#t
(broadcast ... (int16_t (bv #x0080 16)))
"Building Expr:"
(vec-cast (sca-broadcast (int16_t (bv #x0080 16)) 16) 'int32 16)
"Fold templates"
'()
here()

"Replace templates"
'()
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (vec-cast (sca-broadcast (int16_t (bv #x0080 16)) 16) 'int32 16)
template:
  (cast ... (broadcast ... (int16_t (bv #x0080 16))) 'int32 #f)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$1783 idx) (bv #x0080 16)) (bvsle (bv #x0080 16) (app abstr-vals$1783 idx)))))
optimized-halide-expr:
  (vec-cast #<abstr-halide-expr> 'int32 16)
optimized-template:
  (cast ... #<abstr-expr> 'int32 #f)
optimized Halide 0:
  (int32_t (sign-extend (app abstr-vals$1783 0) (bitvector 32)))
optimized x86 0:
  (int32_t (sign-extend (app abstr-vals$1783 0) (bitvector 32)))
Ran synthesizer for 38 ms
(model)
(vec-cast #<abstr-halide-expr> 'int32 16)
(cast ... (broadcast ... (int16_t (bv #x0080 16))) 'int32 #f)
Ran bounds analysis for 24 ms
Ran bounds analysis for 28 ms
"Extended success?"
#t
(cast ... (broadcast ... (int16_t (bv #x0080 16))) 'int32 #f)
"Building Expr:"
(vec-add
 (vec-cast
  (vec-cast
   (vec-max
    (vec-min
     (vec-add
      (vec-bwand
       (sca-broadcast (int32_t (bv #x00000001 32)) 16)
       (vec-div
        (vec-mul
         (vec-cast
          (vec-sub
           (vec-cast
            (load
             (buffer input 'uint8)
             (ramp
              (sca-add
               (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
               (sca-sub
                (sca-sub (var-lookup 't101) (var-lookup 't106))
                (var-lookup 'input.min.0)))
              1
              16)
             (aligned 1 0))
            'int16
            16)
           (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
          'int32
          16)
         (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
        (sca-broadcast (int32_t (bv #x00000080 32)) 16)))
      (vec-div
       (vec-mul
        (vec-cast
         (vec-sub
          (vec-cast
           (load
            (buffer input 'uint8)
            (ramp
             (sca-add
              (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
              (sca-sub
               (sca-sub (var-lookup 't101) (var-lookup 't106))
               (var-lookup 'input.min.0)))
             1
             16)
            (aligned 1 0))
           'int16
           16)
          (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
         'int32
         16)
        (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
       (sca-broadcast (int32_t (bv #x00000100 32)) 16)))
     (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
    (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
   'int16
   16)
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t (bv #x0080 16)) 16) 'int32 16))
"Fold templates"
(list
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (vs-mpy-add
    ...
    (combine #<load-data> (broadcast ... (uint8_t input_zero)))
    (list (int8_t (bv #x01 8)) (int8_t (bv #xff 8)))
    #f
    #f
    #f
    'int16)
   (list (load-sca (buffer inv_sqrt 'int32) 0))
   #f
   #f
   #f
   'int32)
  (int32_t (ite x?$1787 (bv #x00000007 32) (bv #x00000008 32)))
  #t
  x?$1442
  #t)
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (vs-mpy-add
    ...
    (combine #<load-data> (broadcast ... (uint8_t input_zero)))
    (list (int8_t (bv #x01 8)) (int8_t (bv #xff 8)))
    #f
    #f
    #f
    'int16)
   (list (load-sca (buffer inv_sqrt 'int32) 0))
   #f
   #f
   #f
   'int32)
  (int32_t (bv #x00000008 32))
  x?$1788
  x?$1789
  x?$1790)
 (cast
  ...
  (vs-shift-right
   ...
   (vs-mpy-add
    ...
    (vs-mpy-add
     ...
     (combine #<load-data> (broadcast ... (uint8_t input_zero)))
     (list (int8_t (bv #x01 8)) (int8_t (bv #xff 8)))
     #f
     #f
     #f
     'int16)
    (list (load-sca (buffer inv_sqrt 'int32) 0))
    #f
    #f
    #f
    'int32)
   (int32_t (bv #x00000008 32))
   #t
   x?$1442
   #t)
  'int32
  x?$1786)
 (cast
  ...
  (cast
   ...
   (vs-shift-right
    ...
    (vs-mpy-add
     ...
     (vs-mpy-add
      ...
      (combine #<load-data> (broadcast ... (uint8_t input_zero)))
      (list (int8_t (bv #x01 8)) (int8_t (bv #xff 8)))
      #f
      #f
      #f
      'int16)
     (list (load-sca (buffer inv_sqrt 'int32) 0))
     #f
     #f
     #f
     'int32)
    (int32_t (bv #x00000008 32))
    #t
    x?$1442
    #t)
   'int16
   #t)
  'int32
  x?$1785)
 (cast ... (broadcast ... (int16_t (bv #x0080 16))) 'int32 x?$1791))
here(#(struct:vs-shift-right ... #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:uint8_t input_zero))> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #xff 8))) #f #f #f int16) (#(struct:load-sca #(struct:buffer inv_sqrt int32) 0)) #f #f #f int32) #(struct:int32_t (ite x?$1787 (bv #x00000007 32) (bv #x00000008 32))) #t x?$1442 #t) #(struct:vs-shift-right ... #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:uint8_t input_zero))> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #xff 8))) #f #f #f int16) (#(struct:load-sca #(struct:buffer inv_sqrt int32) 0)) #f #f #f int32) #(struct:int32_t (bv #x00000008 32)) x?$1788 x?$1789 x?$1790) #(struct:cast ... #(struct:vs-shift-right ... #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:uint8_t input_zero))> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #xff 8))) #f #f #f int16) (#(struct:load-sca #(struct:buffer inv_sqrt int32) 0)) #f #f #f int32) #(struct:int32_t (bv #x00000008 32)) #t x?$1442 #t) int32 x?$1786) #(struct:cast ... #(struct:cast ... #(struct:vs-shift-right ... #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:uint8_t input_zero))> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #xff 8))) #f #f #f int16) (#(struct:load-sca #(struct:buffer inv_sqrt int32) 0)) #f #f #f int32) #(struct:int32_t (bv #x00000008 32)) #t x?$1442 #t) int16 #t) int32 x?$1785) #(struct:cast ... #(struct:broadcast ... #(struct:int16_t (bv #x0080 16))) int32 x?$1791))

"Replace templates"
(list
 (vs-mpy-add
  ...
  (vs-shift-right
   ...
   (vs-mpy-add
    ...
    (vs-mpy-add
     ...
     (combine #<load-data> (broadcast ... (uint8_t input_zero)))
     (list (int8_t (bv #x01 8)) (int8_t (bv #xff 8)))
     #f
     #f
     #f
     'int16)
    (list (load-sca (buffer inv_sqrt 'int32) 0))
    #f
    #f
    #f
    'int32)
   (int32_t (bv #x00000008 32))
   #t
   x?$1442
   #t)
  (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
  (! x?$1797)
  (! x?$1798)
  (! x?$1799)
  'int32)
 (vs-mpy-add
  ...
  (cast
   ...
   (vs-shift-right
    ...
    (vs-mpy-add
     ...
     (vs-mpy-add
      ...
      (combine #<load-data> (broadcast ... (uint8_t input_zero)))
      (list (int8_t (bv #x01 8)) (int8_t (bv #xff 8)))
      #f
      #f
      #f
      'int16)
     (list (load-sca (buffer inv_sqrt 'int32) 0))
     #f
     #f
     #f
     'int32)
    (int32_t (bv #x00000008 32))
    #t
    x?$1442
    #t)
   'int16
   #t)
  (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
  (! x?$1793)
  (! x?$1794)
  (! x?$1795)
  'int32)
 (vs-mpy-add
  ...
  (broadcast ... (int16_t (bv #x0080 16)))
  (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
  (! x?$1801)
  (! x?$1802)
  (! x?$1803)
  'int32))
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-cast
  (vec-cast
   (vec-max
    (vec-min
     (vec-add
      (vec-bwand
       (sca-broadcast (int32_t (bv #x00000001 32)) 16)
       (vec-div
        (vec-mul
         (vec-cast
          (vec-sub
           (vec-cast
            (load
             (buffer input 'uint8)
             (ramp
              (sca-add
               (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
               (sca-sub
                (sca-sub (var-lookup 't101) (var-lookup 't106))
                (var-lookup 'input.min.0)))
              1
              16)
             (aligned 1 0))
            'int16
            16)
           (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
          'int32
          16)
         (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
        (sca-broadcast (int32_t (bv #x00000080 32)) 16)))
      (vec-div
       (vec-mul
        (vec-cast
         (vec-sub
          (vec-cast
           (load
            (buffer input 'uint8)
            (ramp
             (sca-add
              (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
              (sca-sub
               (sca-sub (var-lookup 't101) (var-lookup 't106))
               (var-lookup 'input.min.0)))
             1
             16)
            (aligned 1 0))
           'int16
           16)
          (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
         'int32
         16)
        (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
       (sca-broadcast (int32_t (bv #x00000100 32)) 16)))
     (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
    (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
   'int16
   16)
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t (bv #x0080 16)) 16) 'int32 16))
template:
  (cast ... (broadcast ... (int16_t (bv #x0080 16))) 'int32 x?$1791)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$1804 idx) (bv #x0080 16)) (bvsle (bv #x0080 16) (app abstr-vals$1804 idx)))))
optimized-halide-expr:
  (vec-add
 (vec-cast
  (vec-cast
   (vec-max
    (vec-min
     (vec-add
      (vec-bwand
       (sca-broadcast (int32_t (bv #x00000001 32)) 16)
       (vec-div
        (vec-mul
         (vec-cast
          (vec-sub
           (vec-cast
            (load
             (buffer input 'uint8)
             (ramp
              (sca-add
               (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
               (sca-sub
                (sca-sub (var-lookup 't101) (var-lookup 't106))
                (var-lookup 'input.min.0)))
              1
              16)
             (aligned 1 0))
            'int16
            16)
           (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
          'int32
          16)
         (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
        (sca-broadcast (int32_t (bv #x00000080 32)) 16)))
      (vec-div
       (vec-mul
        (vec-cast
         (vec-sub
          (vec-cast
           (load
            (buffer input 'uint8)
            (ramp
             (sca-add
              (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
              (sca-sub
               (sca-sub (var-lookup 't101) (var-lookup 't106))
               (var-lookup 'input.min.0)))
             1
             16)
            (aligned 1 0))
           'int16
           16)
          (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
         'int32
         16)
        (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
       (sca-broadcast (int32_t (bv #x00000100 32)) 16)))
     (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
    (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
   'int16
   16)
  'int32
  16)
 (vec-cast #<abstr-halide-expr> 'int32 16))
optimized-template:
  (cast ... #<abstr-expr> 'int32 x?$1791)
optimized Halide 0:
  (int32_t
 (bvadd (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32)) (sign-extend (app abstr-vals$1804 0) (bitvector 32))))
optimized x86 0:
  (int32_t (sign-extend (app abstr-vals$1804 0) (bitvector 32)))
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-cast
  (vec-cast
   (vec-max
    (vec-min
     (vec-add
      (vec-bwand
       (sca-broadcast (int32_t (bv #x00000001 32)) 16)
       (vec-div
        (vec-mul
         (vec-cast
          (vec-sub
           (vec-cast
            (load
             (buffer input 'uint8)
             (ramp
              (sca-add
               (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
               (sca-sub
                (sca-sub (var-lookup 't101) (var-lookup 't106))
                (var-lookup 'input.min.0)))
              1
              16)
             (aligned 1 0))
            'int16
            16)
           (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
          'int32
          16)
         (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
        (sca-broadcast (int32_t (bv #x00000080 32)) 16)))
      (vec-div
       (vec-mul
        (vec-cast
         (vec-sub
          (vec-cast
           (load
            (buffer input 'uint8)
            (ramp
             (sca-add
              (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
              (sca-sub
               (sca-sub (var-lookup 't101) (var-lookup 't106))
               (var-lookup 'input.min.0)))
             1
             16)
            (aligned 1 0))
           'int16
           16)
          (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
         'int32
         16)
        (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
       (sca-broadcast (int32_t (bv #x00000100 32)) 16)))
     (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
    (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
   'int16
   16)
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t (bv #x0080 16)) 16) 'int32 16))
template:
  (vs-mpy-add
 ...
 (broadcast ... (int16_t (bv #x0080 16)))
 (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
 (! x?$1801)
 (! x?$1802)
 (! x?$1803)
 'int32)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$1805 idx) (bv #x0080 16)) (bvsle (bv #x0080 16) (app abstr-vals$1805 idx)))))
optimized-halide-expr:
  (vec-add
 (vec-cast
  (vec-cast
   (vec-max
    (vec-min
     (vec-add
      (vec-bwand
       (sca-broadcast (int32_t (bv #x00000001 32)) 16)
       (vec-div
        (vec-mul
         (vec-cast
          (vec-sub
           (vec-cast
            (load
             (buffer input 'uint8)
             (ramp
              (sca-add
               (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
               (sca-sub
                (sca-sub (var-lookup 't101) (var-lookup 't106))
                (var-lookup 'input.min.0)))
              1
              16)
             (aligned 1 0))
            'int16
            16)
           (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
          'int32
          16)
         (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
        (sca-broadcast (int32_t (bv #x00000080 32)) 16)))
      (vec-div
       (vec-mul
        (vec-cast
         (vec-sub
          (vec-cast
           (load
            (buffer input 'uint8)
            (ramp
             (sca-add
              (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
              (sca-sub
               (sca-sub (var-lookup 't101) (var-lookup 't106))
               (var-lookup 'input.min.0)))
             1
             16)
            (aligned 1 0))
           'int16
           16)
          (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
         'int32
         16)
        (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
       (sca-broadcast (int32_t (bv #x00000100 32)) 16)))
     (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
    (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
   'int16
   16)
  'int32
  16)
 (vec-cast #<abstr-halide-expr> 'int32 16))
optimized-template:
  (vs-mpy-add
 ...
 #<abstr-expr>
 (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
 (! x?$1801)
 (! x?$1802)
 (! x?$1803)
 'int32)
optimized Halide 0:
  (int32_t
 (bvadd (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32)) (sign-extend (app abstr-vals$1805 0) (bitvector 32))))
optimized x86 0:
  (int32_t
 (ite* (⊢ (&& x?$1803 (! (&& (! x?$1801) (! x?$1803)))) (ite x?$1801 (bvadd (sign-extend (app abstr-vals$1805 1) (bitvector 32)) (ite x?$1801 (bvadd (sign-extend (app abstr-vals$1805 0) (bitvector 32)) (ite x?$1802 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1802 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$1805 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1802 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$1805 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1802 (bv #x00000000 32) (bv #x00000001 32)))))))) (bvadd (ite x?$1801 (bvadd (sign-extend (app abstr-vals$1805 0) (bitvector 32)) (ite x?$1802 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1802 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$1805 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1802 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$1805 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1802 (bv #x00000000 32) (bv #x00000001 32))))))) (ite (bvsle (bvadd (bv #x80000000 32) (bvneg (ite (bvsle (ite x?$1801 (bvadd (sign-extend (app abstr-vals$1805 0) (bitvector 32)) (ite x?$1802 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1802 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$1805 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1802 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$1805 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1802 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)) (ite x?$1801 (bvadd (sign-extend (app abstr-vals$1805 0) (bitvector 32)) (ite x?$1802 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1802 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$1805 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1802 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$1805 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1802 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)))) (ite (bvsle (sign-extend (app abstr-vals$1805 1) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$1801 (bvadd (sign-extend (app abstr-vals$1805 0) (bitvector 32)) (ite x?$1802 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1802 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$1805 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1802 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$1805 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1802 (bv #x00000000 32) (bv #x00000001 32)))))))) (ite x?$1801 (bvadd (sign-extend (app abstr-vals$1805 0) (bitvector 32)) (ite x?$1802 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1802 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$1805 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1802 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$1805 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1802 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32))))) (sign-extend (app abstr-vals$1805 1) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$1801 (bvadd (sign-extend (app abstr-vals$1805 0) (bitvector 32)) (ite x?$1802 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1802 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$1805 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1802 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$1805 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1802 (bv #x00000000 32) (bv #x00000001 32)))))))) (ite x?$1801 (bvadd (sign-extend (app abstr-vals$1805 0) (bitvector 32)) (ite x?$1802 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1802 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$1805 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1802 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$1805 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1802 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)))))) (ite (bvsle (sign-extend (app abstr-vals$1805 1) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$1801 (bvadd (sign-extend (app abstr-vals$1805 0) (bitvector 32)) (ite x?$1802 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1802 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$1805 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1802 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$1805 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1802 (bv #x00000000 32) (bv #x00000001 32)))))))) (ite x?$1801 (bvadd (sign-extend (app abstr-vals$1805 0) (bitvector 32)) (ite x?$1802 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1802 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$1805 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1802 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$1805 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1802 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32))))) (sign-extend (app abstr-vals$1805 1) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$1801 (bvadd (sign-extend (app abstr-vals$1805 0) (bitvector 32)) (ite x?$1802 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1802 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$1805 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1802 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$1805 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1802 (bv #x00000000 32) (bv #x00000001 32)))))))) (ite x?$1801 (bvadd (sign-extend (app abstr-vals$1805 0) (bitvector 32)) (ite x?$1802 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1802 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$1805 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1802 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$1805 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1802 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32))))) (bvadd (bv #x80000000 32) (bvneg (ite (bvsle (ite x?$1801 (bvadd (sign-extend (app abstr-vals$1805 0) (bitvector 32)) (ite x?$1802 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1802 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$1805 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1802 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$1805 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1802 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)) (ite x?$1801 (bvadd (sign-extend (app abstr-vals$1805 0) (bitvector 32)) (ite x?$1802 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1802 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$1805 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1802 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$1805 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1802 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)))))))) (⊢ (|| (&& (! x?$1801) (! x?$1803)) (&& (! x?$1803) (! (&& (! x?$1801) (! x?$1803))))) (bvashr (ite x?$1801 (bvadd (sign-extend (app abstr-vals$1805 1) (bitvector 32)) (ite x?$1801 (bvadd (sign-extend (app abstr-vals$1805 0) (bitvector 32)) (ite x?$1802 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1802 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$1805 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1802 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$1805 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1802 (bv #x00000000 32) (bv #x00000001 32)))))))) (bvadd (ite x?$1801 (bvadd (sign-extend (app abstr-vals$1805 0) (bitvector 32)) (ite x?$1802 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1802 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$1805 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1802 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$1805 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1802 (bv #x00000000 32) (bv #x00000001 32))))))) (ite (bvsle (bvadd (bv #x80000000 32) (bvneg (ite (bvsle (ite x?$1801 (bvadd (sign-extend (app abstr-vals$1805 0) (bitvector 32)) (ite x?$1802 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1802 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$1805 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1802 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$1805 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1802 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)) (ite x?$1801 (bvadd (sign-extend (app abstr-vals$1805 0) (bitvector 32)) (ite x?$1802 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1802 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$1805 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1802 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$1805 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1802 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)))) (ite (bvsle (sign-extend (app abstr-vals$1805 1) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$1801 (bvadd (sign-extend (app abstr-vals$1805 0) (bitvector 32)) (ite x?$1802 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1802 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$1805 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1802 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$1805 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1802 (bv #x00000000 32) (bv #x00000001 32)))))))) (ite x?$1801 (bvadd (sign-extend (app abstr-vals$1805 0) (bitvector 32)) (ite x?$1802 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1802 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$1805 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1802 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$1805 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1802 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32))))) (sign-extend (app abstr-vals$1805 1) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$1801 (bvadd (sign-extend (app abstr-vals$1805 0) (bitvector 32)) (ite x?$1802 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1802 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$1805 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1802 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$1805 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1802 (bv #x00000000 32) (bv #x00000001 32)))))))) (ite x?$1801 (bvadd (sign-extend (app abstr-vals$1805 0) (bitvector 32)) (ite x?$1802 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1802 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$1805 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1802 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$1805 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1802 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)))))) (ite (bvsle (sign-extend (app abstr-vals$1805 1) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$1801 (bvadd (sign-extend (app abstr-vals$1805 0) (bitvector 32)) (ite x?$1802 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1802 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$1805 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1802 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$1805 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1802 (bv #x00000000 32) (bv #x00000001 32)))))))) (ite x?$1801 (bvadd (sign-extend (app abstr-vals$1805 0) (bitvector 32)) (ite x?$1802 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1802 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$1805 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1802 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$1805 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1802 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32))))) (sign-extend (app abstr-vals$1805 1) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$1801 (bvadd (sign-extend (app abstr-vals$1805 0) (bitvector 32)) (ite x?$1802 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1802 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$1805 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1802 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$1805 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1802 (bv #x00000000 32) (bv #x00000001 32)))))))) (ite x?$1801 (bvadd (sign-extend (app abstr-vals$1805 0) (bitvector 32)) (ite x?$1802 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1802 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$1805 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1802 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$1805 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1802 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32))))) (bvadd (bv #x80000000 32) (bvneg (ite (bvsle (ite x?$1801 (bvadd (sign-extend (app abstr-vals$1805 0) (bitvector 32)) (ite x?$1802 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1802 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$1805 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1802 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$1805 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1802 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)) (ite x?$1801 (bvadd (sign-extend (app abstr-vals$1805 0) (bitvector 32)) (ite x?$1802 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1802 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$1805 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1802 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$1805 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1802 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32))))))) (bv #x00000001 32)))))
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-cast
  (vec-cast
   (vec-max
    (vec-min
     (vec-add
      (vec-bwand
       (sca-broadcast (int32_t (bv #x00000001 32)) 16)
       (vec-div
        (vec-mul
         (vec-cast
          (vec-sub
           (vec-cast
            (load
             (buffer input 'uint8)
             (ramp
              (sca-add
               (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
               (sca-sub
                (sca-sub (var-lookup 't101) (var-lookup 't106))
                (var-lookup 'input.min.0)))
              1
              16)
             (aligned 1 0))
            'int16
            16)
           (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
          'int32
          16)
         (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
        (sca-broadcast (int32_t (bv #x00000080 32)) 16)))
      (vec-div
       (vec-mul
        (vec-cast
         (vec-sub
          (vec-cast
           (load
            (buffer input 'uint8)
            (ramp
             (sca-add
              (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
              (sca-sub
               (sca-sub (var-lookup 't101) (var-lookup 't106))
               (var-lookup 'input.min.0)))
             1
             16)
            (aligned 1 0))
           'int16
           16)
          (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
         'int32
         16)
        (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
       (sca-broadcast (int32_t (bv #x00000100 32)) 16)))
     (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
    (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
   'int16
   16)
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t (bv #x0080 16)) 16) 'int32 16))
template:
  (vs-shift-right
 ...
 (vs-mpy-add
  ...
  (vs-mpy-add
   ...
   (combine #<load-data> (broadcast ... (uint8_t input_zero)))
   (list (int8_t (bv #x01 8)) (int8_t (bv #xff 8)))
   #f
   #f
   #f
   'int16)
  (list (load-sca (buffer inv_sqrt 'int32) 0))
  #f
  #f
  #f
  'int32)
 (int32_t (ite x?$1787 (bv #x00000007 32) (bv #x00000008 32)))
 #t
 x?$1442
 #t)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-add
 (vec-cast
  (vec-cast
   (vec-max
    (vec-min
     (vec-add
      (vec-bwand
       (sca-broadcast (int32_t (bv #x00000001 32)) 16)
       (vec-div
        #<abstr-halide-expr>
        (sca-broadcast (int32_t (bv #x00000080 32)) 16)))
      (vec-div
       #<abstr-halide-expr>
       (sca-broadcast (int32_t (bv #x00000100 32)) 16)))
     (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
    (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
   'int16
   16)
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t (bv #x0080 16)) 16) 'int32 16))
optimized-template:
  (vs-shift-right
 ...
 #<abstr-expr>
 (int32_t (ite x?$1787 (bv #x00000007 32) (bv #x00000008 32)))
 #t
 x?$1442
 #t)
optimized Halide 0:
  (int32_t
 (bvadd (bv #x00000080 32) (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$1806 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$1806 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$1806 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$1806 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$1806 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$1806 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$1806 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$1806 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$1806 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$1806 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$1806 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$1806 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$1806 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$1806 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$1806 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$1806 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$1806 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$1806 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$1806 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$1806 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$1806 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$1806 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$1806 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$1806 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32))))
optimized x86 0:
  (int32_t
 (bvadd (bvashr (app abstr-vals$1806 0) (ite x?$1787 (bv #x00000007 32) (bv #x00000008 32))) (bvand (bv #x00000001 32) (bvashr (app abstr-vals$1806 0) (ite x?$1787 (bv #x00000006 32) (bv #x00000007 32))))))
Ran synthesizer for 1148 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-cast
  (vec-cast
   (vec-max
    (vec-min
     (vec-add
      (vec-bwand
       (sca-broadcast (int32_t (bv #x00000001 32)) 16)
       (vec-div
        (vec-mul
         (vec-cast
          (vec-sub
           (vec-cast
            (load
             (buffer input 'uint8)
             (ramp
              (sca-add
               (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
               (sca-sub
                (sca-sub (var-lookup 't101) (var-lookup 't106))
                (var-lookup 'input.min.0)))
              1
              16)
             (aligned 1 0))
            'int16
            16)
           (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
          'int32
          16)
         (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
        (sca-broadcast (int32_t (bv #x00000080 32)) 16)))
      (vec-div
       (vec-mul
        (vec-cast
         (vec-sub
          (vec-cast
           (load
            (buffer input 'uint8)
            (ramp
             (sca-add
              (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
              (sca-sub
               (sca-sub (var-lookup 't101) (var-lookup 't106))
               (var-lookup 'input.min.0)))
             1
             16)
            (aligned 1 0))
           'int16
           16)
          (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
         'int32
         16)
        (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
       (sca-broadcast (int32_t (bv #x00000100 32)) 16)))
     (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
    (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
   'int16
   16)
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t (bv #x0080 16)) 16) 'int32 16))
template:
  (vs-shift-right
 ...
 (vs-mpy-add
  ...
  (vs-mpy-add
   ...
   (combine #<load-data> (broadcast ... (uint8_t input_zero)))
   (list (int8_t (bv #x01 8)) (int8_t (bv #xff 8)))
   #f
   #f
   #f
   'int16)
  (list (load-sca (buffer inv_sqrt 'int32) 0))
  #f
  #f
  #f
  'int32)
 (int32_t (bv #x00000008 32))
 x?$1788
 x?$1789
 x?$1790)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-add
 (vec-cast
  (vec-cast
   (vec-max
    (vec-min
     (vec-add
      (vec-bwand
       (sca-broadcast (int32_t (bv #x00000001 32)) 16)
       (vec-div
        #<abstr-halide-expr>
        (sca-broadcast (int32_t (bv #x00000080 32)) 16)))
      (vec-div
       #<abstr-halide-expr>
       (sca-broadcast (int32_t (bv #x00000100 32)) 16)))
     (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
    (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
   'int16
   16)
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t (bv #x0080 16)) 16) 'int32 16))
optimized-template:
  (vs-shift-right
 ...
 #<abstr-expr>
 (int32_t (bv #x00000008 32))
 x?$1788
 x?$1789
 x?$1790)
optimized Halide 0:
  (int32_t
 (bvadd (bv #x00000080 32) (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$1807 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$1807 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$1807 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$1807 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$1807 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$1807 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$1807 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$1807 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$1807 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$1807 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$1807 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$1807 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$1807 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$1807 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$1807 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$1807 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$1807 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$1807 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$1807 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$1807 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$1807 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (app abstr-vals$1807 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (app abstr-vals$1807 0) (bitvector 64)) (bvneg (bvashr (sign-extend (app abstr-vals$1807 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32))))
optimized x86 0:
  (int32_t
 (ite x?$1788 (bvadd (ite x?$1790 (bvashr (app abstr-vals$1807 0) (bv #x00000008 32)) (bvlshr (app abstr-vals$1807 0) (bv #x00000008 32))) (bvand (bv #x00000001 32) (ite x?$1790 (bvashr (app abstr-vals$1807 0) (bv #x00000007 32)) (bvlshr (app abstr-vals$1807 0) (bv #x00000007 32))))) (ite x?$1790 (bvashr (app abstr-vals$1807 0) (bv #x00000008 32)) (bvlshr (app abstr-vals$1807 0) (bv #x00000008 32)))))
Ran synthesizer for 1130 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-cast
  (vec-cast
   (vec-max
    (vec-min
     (vec-add
      (vec-bwand
       (sca-broadcast (int32_t (bv #x00000001 32)) 16)
       (vec-div
        (vec-mul
         (vec-cast
          (vec-sub
           (vec-cast
            (load
             (buffer input 'uint8)
             (ramp
              (sca-add
               (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
               (sca-sub
                (sca-sub (var-lookup 't101) (var-lookup 't106))
                (var-lookup 'input.min.0)))
              1
              16)
             (aligned 1 0))
            'int16
            16)
           (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
          'int32
          16)
         (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
        (sca-broadcast (int32_t (bv #x00000080 32)) 16)))
      (vec-div
       (vec-mul
        (vec-cast
         (vec-sub
          (vec-cast
           (load
            (buffer input 'uint8)
            (ramp
             (sca-add
              (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
              (sca-sub
               (sca-sub (var-lookup 't101) (var-lookup 't106))
               (var-lookup 'input.min.0)))
             1
             16)
            (aligned 1 0))
           'int16
           16)
          (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
         'int32
         16)
        (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
       (sca-broadcast (int32_t (bv #x00000100 32)) 16)))
     (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
    (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
   'int16
   16)
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t (bv #x0080 16)) 16) 'int32 16))
template:
  (cast
 ...
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (vs-mpy-add
    ...
    (combine #<load-data> (broadcast ... (uint8_t input_zero)))
    (list (int8_t (bv #x01 8)) (int8_t (bv #xff 8)))
    #f
    #f
    #f
    'int16)
   (list (load-sca (buffer inv_sqrt 'int32) 0))
   #f
   #f
   #f
   'int32)
  (int32_t (bv #x00000008 32))
  #t
  x?$1442
  #t)
 'int32
 x?$1786)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$1808 idx) (bv #x00800000 32)) (bvsle (bv #xff800000 32) (app abstr-vals$1808 idx)))))
optimized-halide-expr:
  (vec-add
 (vec-cast
  (vec-cast
   (vec-max
    (vec-min
     #<abstr-halide-expr>
     (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
    (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
   'int16
   16)
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t (bv #x0080 16)) 16) 'int32 16))
optimized-template:
  (cast ... #<abstr-expr> 'int32 x?$1786)
optimized Halide 0:
  (int32_t
 (bvadd (bv #x00000080 32) (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (app abstr-vals$1808 0) (bv #x00007fff 32)) (app abstr-vals$1808 0) (bv #x00007fff 32))) (ite (bvsle (app abstr-vals$1808 0) (bv #x00007fff 32)) (app abstr-vals$1808 0) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32))))
optimized x86 0:
  (int32_t (app abstr-vals$1808 0))
Ran synthesizer for 87 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-cast
  (vec-cast
   (vec-max
    (vec-min
     (vec-add
      (vec-bwand
       (sca-broadcast (int32_t (bv #x00000001 32)) 16)
       (vec-div
        (vec-mul
         (vec-cast
          (vec-sub
           (vec-cast
            (load
             (buffer input 'uint8)
             (ramp
              (sca-add
               (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
               (sca-sub
                (sca-sub (var-lookup 't101) (var-lookup 't106))
                (var-lookup 'input.min.0)))
              1
              16)
             (aligned 1 0))
            'int16
            16)
           (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
          'int32
          16)
         (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
        (sca-broadcast (int32_t (bv #x00000080 32)) 16)))
      (vec-div
       (vec-mul
        (vec-cast
         (vec-sub
          (vec-cast
           (load
            (buffer input 'uint8)
            (ramp
             (sca-add
              (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
              (sca-sub
               (sca-sub (var-lookup 't101) (var-lookup 't106))
               (var-lookup 'input.min.0)))
             1
             16)
            (aligned 1 0))
           'int16
           16)
          (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
         'int32
         16)
        (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
       (sca-broadcast (int32_t (bv #x00000100 32)) 16)))
     (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
    (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
   'int16
   16)
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t (bv #x0080 16)) 16) 'int32 16))
template:
  (vs-mpy-add
 ...
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (vs-mpy-add
    ...
    (combine #<load-data> (broadcast ... (uint8_t input_zero)))
    (list (int8_t (bv #x01 8)) (int8_t (bv #xff 8)))
    #f
    #f
    #f
    'int16)
   (list (load-sca (buffer inv_sqrt 'int32) 0))
   #f
   #f
   #f
   'int32)
  (int32_t (bv #x00000008 32))
  #t
  x?$1442
  #t)
 (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
 (! x?$1797)
 (! x?$1798)
 (! x?$1799)
 'int32)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$1809 idx) (bv #x00800000 32)) (bvsle (bv #xff800000 32) (app abstr-vals$1809 idx)))))
optimized-halide-expr:
  (vec-add
 (vec-cast
  (vec-cast
   (vec-max
    (vec-min
     #<abstr-halide-expr>
     (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
    (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
   'int16
   16)
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t (bv #x0080 16)) 16) 'int32 16))
optimized-template:
  (vs-mpy-add
 ...
 #<abstr-expr>
 (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
 (! x?$1797)
 (! x?$1798)
 (! x?$1799)
 'int32)
optimized Halide 0:
  (int32_t
 (bvadd (bv #x00000080 32) (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (app abstr-vals$1809 0) (bv #x00007fff 32)) (app abstr-vals$1809 0) (bv #x00007fff 32))) (ite (bvsle (app abstr-vals$1809 0) (bv #x00007fff 32)) (app abstr-vals$1809 0) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32))))
optimized x86 0:
  (int32_t
 (ite* (⊢ (&& x?$1799 (! (&& (! x?$1797) (! x?$1799)))) (ite x?$1797 (bvadd (app abstr-vals$1809 1) (ite x?$1797 (bvadd (app abstr-vals$1809 0) (ite x?$1798 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1798 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (app abstr-vals$1809 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1798 (bv #x00000000 32) (bv #x00000001 32))))) (app abstr-vals$1809 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1798 (bv #x00000000 32) (bv #x00000001 32)))))))) (bvadd (ite x?$1797 (bvadd (app abstr-vals$1809 0) (ite x?$1798 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1798 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (app abstr-vals$1809 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1798 (bv #x00000000 32) (bv #x00000001 32))))) (app abstr-vals$1809 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1798 (bv #x00000000 32) (bv #x00000001 32))))))) (ite (bvsle (bvadd (bv #x80000000 32) (bvneg (ite (bvsle (ite x?$1797 (bvadd (app abstr-vals$1809 0) (ite x?$1798 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1798 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (app abstr-vals$1809 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1798 (bv #x00000000 32) (bv #x00000001 32))))) (app abstr-vals$1809 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1798 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)) (ite x?$1797 (bvadd (app abstr-vals$1809 0) (ite x?$1798 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1798 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (app abstr-vals$1809 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1798 (bv #x00000000 32) (bv #x00000001 32))))) (app abstr-vals$1809 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1798 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)))) (ite (bvsle (app abstr-vals$1809 1) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$1797 (bvadd (app abstr-vals$1809 0) (ite x?$1798 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1798 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (app abstr-vals$1809 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1798 (bv #x00000000 32) (bv #x00000001 32))))) (app abstr-vals$1809 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1798 (bv #x00000000 32) (bv #x00000001 32)))))))) (ite x?$1797 (bvadd (app abstr-vals$1809 0) (ite x?$1798 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1798 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (app abstr-vals$1809 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1798 (bv #x00000000 32) (bv #x00000001 32))))) (app abstr-vals$1809 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1798 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32))))) (app abstr-vals$1809 1) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$1797 (bvadd (app abstr-vals$1809 0) (ite x?$1798 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1798 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (app abstr-vals$1809 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1798 (bv #x00000000 32) (bv #x00000001 32))))) (app abstr-vals$1809 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1798 (bv #x00000000 32) (bv #x00000001 32)))))))) (ite x?$1797 (bvadd (app abstr-vals$1809 0) (ite x?$1798 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1798 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (app abstr-vals$1809 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1798 (bv #x00000000 32) (bv #x00000001 32))))) (app abstr-vals$1809 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1798 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)))))) (ite (bvsle (app abstr-vals$1809 1) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$1797 (bvadd (app abstr-vals$1809 0) (ite x?$1798 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1798 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (app abstr-vals$1809 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1798 (bv #x00000000 32) (bv #x00000001 32))))) (app abstr-vals$1809 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1798 (bv #x00000000 32) (bv #x00000001 32)))))))) (ite x?$1797 (bvadd (app abstr-vals$1809 0) (ite x?$1798 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1798 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (app abstr-vals$1809 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1798 (bv #x00000000 32) (bv #x00000001 32))))) (app abstr-vals$1809 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1798 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32))))) (app abstr-vals$1809 1) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$1797 (bvadd (app abstr-vals$1809 0) (ite x?$1798 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1798 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (app abstr-vals$1809 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1798 (bv #x00000000 32) (bv #x00000001 32))))) (app abstr-vals$1809 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1798 (bv #x00000000 32) (bv #x00000001 32)))))))) (ite x?$1797 (bvadd (app abstr-vals$1809 0) (ite x?$1798 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1798 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (app abstr-vals$1809 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1798 (bv #x00000000 32) (bv #x00000001 32))))) (app abstr-vals$1809 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1798 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32))))) (bvadd (bv #x80000000 32) (bvneg (ite (bvsle (ite x?$1797 (bvadd (app abstr-vals$1809 0) (ite x?$1798 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1798 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (app abstr-vals$1809 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1798 (bv #x00000000 32) (bv #x00000001 32))))) (app abstr-vals$1809 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1798 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)) (ite x?$1797 (bvadd (app abstr-vals$1809 0) (ite x?$1798 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1798 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (app abstr-vals$1809 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1798 (bv #x00000000 32) (bv #x00000001 32))))) (app abstr-vals$1809 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1798 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)))))))) (⊢ (|| (&& (! x?$1797) (! x?$1799)) (&& (! x?$1799) (! (&& (! x?$1797) (! x?$1799))))) (bvashr (ite x?$1797 (bvadd (app abstr-vals$1809 1) (ite x?$1797 (bvadd (app abstr-vals$1809 0) (ite x?$1798 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1798 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (app abstr-vals$1809 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1798 (bv #x00000000 32) (bv #x00000001 32))))) (app abstr-vals$1809 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1798 (bv #x00000000 32) (bv #x00000001 32)))))))) (bvadd (ite x?$1797 (bvadd (app abstr-vals$1809 0) (ite x?$1798 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1798 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (app abstr-vals$1809 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1798 (bv #x00000000 32) (bv #x00000001 32))))) (app abstr-vals$1809 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1798 (bv #x00000000 32) (bv #x00000001 32))))))) (ite (bvsle (bvadd (bv #x80000000 32) (bvneg (ite (bvsle (ite x?$1797 (bvadd (app abstr-vals$1809 0) (ite x?$1798 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1798 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (app abstr-vals$1809 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1798 (bv #x00000000 32) (bv #x00000001 32))))) (app abstr-vals$1809 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1798 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)) (ite x?$1797 (bvadd (app abstr-vals$1809 0) (ite x?$1798 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1798 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (app abstr-vals$1809 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1798 (bv #x00000000 32) (bv #x00000001 32))))) (app abstr-vals$1809 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1798 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)))) (ite (bvsle (app abstr-vals$1809 1) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$1797 (bvadd (app abstr-vals$1809 0) (ite x?$1798 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1798 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (app abstr-vals$1809 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1798 (bv #x00000000 32) (bv #x00000001 32))))) (app abstr-vals$1809 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1798 (bv #x00000000 32) (bv #x00000001 32)))))))) (ite x?$1797 (bvadd (app abstr-vals$1809 0) (ite x?$1798 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1798 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (app abstr-vals$1809 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1798 (bv #x00000000 32) (bv #x00000001 32))))) (app abstr-vals$1809 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1798 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32))))) (app abstr-vals$1809 1) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$1797 (bvadd (app abstr-vals$1809 0) (ite x?$1798 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1798 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (app abstr-vals$1809 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1798 (bv #x00000000 32) (bv #x00000001 32))))) (app abstr-vals$1809 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1798 (bv #x00000000 32) (bv #x00000001 32)))))))) (ite x?$1797 (bvadd (app abstr-vals$1809 0) (ite x?$1798 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1798 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (app abstr-vals$1809 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1798 (bv #x00000000 32) (bv #x00000001 32))))) (app abstr-vals$1809 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1798 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)))))) (ite (bvsle (app abstr-vals$1809 1) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$1797 (bvadd (app abstr-vals$1809 0) (ite x?$1798 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1798 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (app abstr-vals$1809 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1798 (bv #x00000000 32) (bv #x00000001 32))))) (app abstr-vals$1809 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1798 (bv #x00000000 32) (bv #x00000001 32)))))))) (ite x?$1797 (bvadd (app abstr-vals$1809 0) (ite x?$1798 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1798 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (app abstr-vals$1809 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1798 (bv #x00000000 32) (bv #x00000001 32))))) (app abstr-vals$1809 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1798 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32))))) (app abstr-vals$1809 1) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$1797 (bvadd (app abstr-vals$1809 0) (ite x?$1798 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1798 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (app abstr-vals$1809 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1798 (bv #x00000000 32) (bv #x00000001 32))))) (app abstr-vals$1809 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1798 (bv #x00000000 32) (bv #x00000001 32)))))))) (ite x?$1797 (bvadd (app abstr-vals$1809 0) (ite x?$1798 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1798 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (app abstr-vals$1809 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1798 (bv #x00000000 32) (bv #x00000001 32))))) (app abstr-vals$1809 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1798 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32))))) (bvadd (bv #x80000000 32) (bvneg (ite (bvsle (ite x?$1797 (bvadd (app abstr-vals$1809 0) (ite x?$1798 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1798 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (app abstr-vals$1809 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1798 (bv #x00000000 32) (bv #x00000001 32))))) (app abstr-vals$1809 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1798 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)) (ite x?$1797 (bvadd (app abstr-vals$1809 0) (ite x?$1798 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1798 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (app abstr-vals$1809 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1798 (bv #x00000000 32) (bv #x00000001 32))))) (app abstr-vals$1809 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1798 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32))))))) (bv #x00000001 32)))))
Ran synthesizer for 220 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-cast
  (vec-cast
   (vec-max
    (vec-min
     (vec-add
      (vec-bwand
       (sca-broadcast (int32_t (bv #x00000001 32)) 16)
       (vec-div
        (vec-mul
         (vec-cast
          (vec-sub
           (vec-cast
            (load
             (buffer input 'uint8)
             (ramp
              (sca-add
               (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
               (sca-sub
                (sca-sub (var-lookup 't101) (var-lookup 't106))
                (var-lookup 'input.min.0)))
              1
              16)
             (aligned 1 0))
            'int16
            16)
           (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
          'int32
          16)
         (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
        (sca-broadcast (int32_t (bv #x00000080 32)) 16)))
      (vec-div
       (vec-mul
        (vec-cast
         (vec-sub
          (vec-cast
           (load
            (buffer input 'uint8)
            (ramp
             (sca-add
              (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
              (sca-sub
               (sca-sub (var-lookup 't101) (var-lookup 't106))
               (var-lookup 'input.min.0)))
             1
             16)
            (aligned 1 0))
           'int16
           16)
          (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
         'int32
         16)
        (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
       (sca-broadcast (int32_t (bv #x00000100 32)) 16)))
     (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
    (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
   'int16
   16)
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t (bv #x0080 16)) 16) 'int32 16))
template:
  (cast
 ...
 (cast
  ...
  (vs-shift-right
   ...
   (vs-mpy-add
    ...
    (vs-mpy-add
     ...
     (combine #<load-data> (broadcast ... (uint8_t input_zero)))
     (list (int8_t (bv #x01 8)) (int8_t (bv #xff 8)))
     #f
     #f
     #f
     'int16)
    (list (load-sca (buffer inv_sqrt 'int32) 0))
    #f
    #f
    #f
    'int32)
   (int32_t (bv #x00000008 32))
   #t
   x?$1442
   #t)
  'int16
  #t)
 'int32
 x?$1785)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-add
 (vec-cast #<abstr-halide-expr> 'int32 16)
 (vec-cast (sca-broadcast (int16_t (bv #x0080 16)) 16) 'int32 16))
optimized-template:
  (cast ... #<abstr-expr> 'int32 x?$1785)
optimized Halide 0:
  (int32_t
 (bvadd (bv #x00000080 32) (sign-extend (app abstr-vals$1810 0) (bitvector 32))))
optimized x86 0:
  (int32_t (sign-extend (app abstr-vals$1810 0) (bitvector 32)))
Ran synthesizer for 18 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-cast
  (vec-cast
   (vec-max
    (vec-min
     (vec-add
      (vec-bwand
       (sca-broadcast (int32_t (bv #x00000001 32)) 16)
       (vec-div
        (vec-mul
         (vec-cast
          (vec-sub
           (vec-cast
            (load
             (buffer input 'uint8)
             (ramp
              (sca-add
               (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
               (sca-sub
                (sca-sub (var-lookup 't101) (var-lookup 't106))
                (var-lookup 'input.min.0)))
              1
              16)
             (aligned 1 0))
            'int16
            16)
           (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
          'int32
          16)
         (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
        (sca-broadcast (int32_t (bv #x00000080 32)) 16)))
      (vec-div
       (vec-mul
        (vec-cast
         (vec-sub
          (vec-cast
           (load
            (buffer input 'uint8)
            (ramp
             (sca-add
              (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
              (sca-sub
               (sca-sub (var-lookup 't101) (var-lookup 't106))
               (var-lookup 'input.min.0)))
             1
             16)
            (aligned 1 0))
           'int16
           16)
          (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
         'int32
         16)
        (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
       (sca-broadcast (int32_t (bv #x00000100 32)) 16)))
     (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
    (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
   'int16
   16)
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t (bv #x0080 16)) 16) 'int32 16))
template:
  (vs-mpy-add
 ...
 (cast
  ...
  (vs-shift-right
   ...
   (vs-mpy-add
    ...
    (vs-mpy-add
     ...
     (combine #<load-data> (broadcast ... (uint8_t input_zero)))
     (list (int8_t (bv #x01 8)) (int8_t (bv #xff 8)))
     #f
     #f
     #f
     'int16)
    (list (load-sca (buffer inv_sqrt 'int32) 0))
    #f
    #f
    #f
    'int32)
   (int32_t (bv #x00000008 32))
   #t
   x?$1442
   #t)
  'int16
  #t)
 (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
 (! x?$1793)
 (! x?$1794)
 (! x?$1795)
 'int32)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-add
 (vec-cast #<abstr-halide-expr> 'int32 16)
 (vec-cast (sca-broadcast (int16_t (bv #x0080 16)) 16) 'int32 16))
optimized-template:
  (vs-mpy-add
 ...
 #<abstr-expr>
 (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
 (! x?$1793)
 (! x?$1794)
 (! x?$1795)
 'int32)
optimized Halide 0:
  (int32_t
 (bvadd (bv #x00000080 32) (sign-extend (app abstr-vals$1811 0) (bitvector 32))))
optimized x86 0:
  (int32_t
 (ite* (⊢ (&& x?$1795 (! (&& (! x?$1793) (! x?$1795)))) (ite x?$1793 (bvadd (sign-extend (app abstr-vals$1811 1) (bitvector 32)) (ite x?$1793 (bvadd (sign-extend (app abstr-vals$1811 0) (bitvector 32)) (ite x?$1794 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1794 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$1811 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1794 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$1811 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1794 (bv #x00000000 32) (bv #x00000001 32)))))))) (bvadd (ite x?$1793 (bvadd (sign-extend (app abstr-vals$1811 0) (bitvector 32)) (ite x?$1794 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1794 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$1811 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1794 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$1811 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1794 (bv #x00000000 32) (bv #x00000001 32))))))) (ite (bvsle (bvadd (bv #x80000000 32) (bvneg (ite (bvsle (ite x?$1793 (bvadd (sign-extend (app abstr-vals$1811 0) (bitvector 32)) (ite x?$1794 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1794 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$1811 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1794 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$1811 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1794 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)) (ite x?$1793 (bvadd (sign-extend (app abstr-vals$1811 0) (bitvector 32)) (ite x?$1794 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1794 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$1811 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1794 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$1811 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1794 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)))) (ite (bvsle (sign-extend (app abstr-vals$1811 1) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$1793 (bvadd (sign-extend (app abstr-vals$1811 0) (bitvector 32)) (ite x?$1794 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1794 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$1811 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1794 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$1811 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1794 (bv #x00000000 32) (bv #x00000001 32)))))))) (ite x?$1793 (bvadd (sign-extend (app abstr-vals$1811 0) (bitvector 32)) (ite x?$1794 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1794 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$1811 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1794 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$1811 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1794 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32))))) (sign-extend (app abstr-vals$1811 1) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$1793 (bvadd (sign-extend (app abstr-vals$1811 0) (bitvector 32)) (ite x?$1794 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1794 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$1811 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1794 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$1811 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1794 (bv #x00000000 32) (bv #x00000001 32)))))))) (ite x?$1793 (bvadd (sign-extend (app abstr-vals$1811 0) (bitvector 32)) (ite x?$1794 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1794 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$1811 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1794 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$1811 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1794 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)))))) (ite (bvsle (sign-extend (app abstr-vals$1811 1) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$1793 (bvadd (sign-extend (app abstr-vals$1811 0) (bitvector 32)) (ite x?$1794 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1794 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$1811 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1794 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$1811 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1794 (bv #x00000000 32) (bv #x00000001 32)))))))) (ite x?$1793 (bvadd (sign-extend (app abstr-vals$1811 0) (bitvector 32)) (ite x?$1794 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1794 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$1811 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1794 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$1811 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1794 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32))))) (sign-extend (app abstr-vals$1811 1) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$1793 (bvadd (sign-extend (app abstr-vals$1811 0) (bitvector 32)) (ite x?$1794 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1794 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$1811 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1794 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$1811 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1794 (bv #x00000000 32) (bv #x00000001 32)))))))) (ite x?$1793 (bvadd (sign-extend (app abstr-vals$1811 0) (bitvector 32)) (ite x?$1794 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1794 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$1811 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1794 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$1811 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1794 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32))))) (bvadd (bv #x80000000 32) (bvneg (ite (bvsle (ite x?$1793 (bvadd (sign-extend (app abstr-vals$1811 0) (bitvector 32)) (ite x?$1794 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1794 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$1811 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1794 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$1811 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1794 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)) (ite x?$1793 (bvadd (sign-extend (app abstr-vals$1811 0) (bitvector 32)) (ite x?$1794 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1794 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$1811 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1794 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$1811 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1794 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)))))))) (⊢ (|| (&& (! x?$1793) (! x?$1795)) (&& (! x?$1795) (! (&& (! x?$1793) (! x?$1795))))) (bvashr (ite x?$1793 (bvadd (sign-extend (app abstr-vals$1811 1) (bitvector 32)) (ite x?$1793 (bvadd (sign-extend (app abstr-vals$1811 0) (bitvector 32)) (ite x?$1794 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1794 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$1811 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1794 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$1811 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1794 (bv #x00000000 32) (bv #x00000001 32)))))))) (bvadd (ite x?$1793 (bvadd (sign-extend (app abstr-vals$1811 0) (bitvector 32)) (ite x?$1794 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1794 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$1811 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1794 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$1811 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1794 (bv #x00000000 32) (bv #x00000001 32))))))) (ite (bvsle (bvadd (bv #x80000000 32) (bvneg (ite (bvsle (ite x?$1793 (bvadd (sign-extend (app abstr-vals$1811 0) (bitvector 32)) (ite x?$1794 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1794 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$1811 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1794 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$1811 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1794 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)) (ite x?$1793 (bvadd (sign-extend (app abstr-vals$1811 0) (bitvector 32)) (ite x?$1794 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1794 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$1811 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1794 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$1811 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1794 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)))) (ite (bvsle (sign-extend (app abstr-vals$1811 1) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$1793 (bvadd (sign-extend (app abstr-vals$1811 0) (bitvector 32)) (ite x?$1794 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1794 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$1811 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1794 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$1811 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1794 (bv #x00000000 32) (bv #x00000001 32)))))))) (ite x?$1793 (bvadd (sign-extend (app abstr-vals$1811 0) (bitvector 32)) (ite x?$1794 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1794 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$1811 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1794 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$1811 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1794 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32))))) (sign-extend (app abstr-vals$1811 1) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$1793 (bvadd (sign-extend (app abstr-vals$1811 0) (bitvector 32)) (ite x?$1794 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1794 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$1811 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1794 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$1811 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1794 (bv #x00000000 32) (bv #x00000001 32)))))))) (ite x?$1793 (bvadd (sign-extend (app abstr-vals$1811 0) (bitvector 32)) (ite x?$1794 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1794 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$1811 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1794 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$1811 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1794 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)))))) (ite (bvsle (sign-extend (app abstr-vals$1811 1) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$1793 (bvadd (sign-extend (app abstr-vals$1811 0) (bitvector 32)) (ite x?$1794 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1794 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$1811 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1794 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$1811 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1794 (bv #x00000000 32) (bv #x00000001 32)))))))) (ite x?$1793 (bvadd (sign-extend (app abstr-vals$1811 0) (bitvector 32)) (ite x?$1794 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1794 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$1811 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1794 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$1811 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1794 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32))))) (sign-extend (app abstr-vals$1811 1) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$1793 (bvadd (sign-extend (app abstr-vals$1811 0) (bitvector 32)) (ite x?$1794 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1794 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$1811 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1794 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$1811 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1794 (bv #x00000000 32) (bv #x00000001 32)))))))) (ite x?$1793 (bvadd (sign-extend (app abstr-vals$1811 0) (bitvector 32)) (ite x?$1794 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1794 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$1811 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1794 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$1811 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1794 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32))))) (bvadd (bv #x80000000 32) (bvneg (ite (bvsle (ite x?$1793 (bvadd (sign-extend (app abstr-vals$1811 0) (bitvector 32)) (ite x?$1794 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1794 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$1811 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1794 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$1811 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1794 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)) (ite x?$1793 (bvadd (sign-extend (app abstr-vals$1811 0) (bitvector 32)) (ite x?$1794 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1794 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (sign-extend (app abstr-vals$1811 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1794 (bv #x00000000 32) (bv #x00000001 32))))) (sign-extend (app abstr-vals$1811 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1794 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32))))))) (bv #x00000001 32)))))
Ran synthesizer for 126 ms
(unsat)
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-cast
  (vec-cast
   (vec-max
    (vec-min
     (vec-add
      (vec-bwand
       (sca-broadcast (int32_t (bv #x00000001 32)) 16)
       (vec-div
        (vec-mul
         (vec-cast
          (vec-sub
           (vec-cast
            (load
             (buffer input 'uint8)
             (ramp
              (sca-add
               (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
               (sca-sub
                (sca-sub (var-lookup 't101) (var-lookup 't106))
                (var-lookup 'input.min.0)))
              1
              16)
             (aligned 1 0))
            'int16
            16)
           (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
          'int32
          16)
         (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
        (sca-broadcast (int32_t (bv #x00000080 32)) 16)))
      (vec-div
       (vec-mul
        (vec-cast
         (vec-sub
          (vec-cast
           (load
            (buffer input 'uint8)
            (ramp
             (sca-add
              (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
              (sca-sub
               (sca-sub (var-lookup 't101) (var-lookup 't106))
               (var-lookup 'input.min.0)))
             1
             16)
            (aligned 1 0))
           'int16
           16)
          (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
         'int32
         16)
        (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
       (sca-broadcast (int32_t (bv #x00000100 32)) 16)))
     (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
    (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
   'int16
   16)
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t (bv #x0080 16)) 16) 'int32 16))
template:
  (vs-mpy-add
 ...
 (union [x?$1813 #(struct:cast
                   ...
                   #(struct:cast
                     ...
                     #(struct:vs-shift-right
                       ...
                       #(struct:vs-mpy-add
                         ...
                         #(struct:vs-mpy-add
                           ...
                           #<combine:
                            #<load-data>
                            #(struct:broadcast
                              ...
                              #(struct:uint8_t input_zero))>
                           (#(struct:int8_t (bv #x01 8))
                            #(struct:int8_t (bv #xff 8)))
                           #f
                           #f
                           #f
                           int16)
                         (#(struct:load-sca #(struct:buffer inv_sqrt int32) 0))
                         #f
                         #f
                         #f
                         int32)
                       #(struct:int32_t (bv #x00000008 32))
                       #t
                       x?$1442
                       #t)
                     int16
                     #t)
                   int32
                   #f)] [(! x?$1813) #(struct:cast
                                       ...
                                       #(struct:broadcast
                                         ...
                                         #(struct:int16_t (bv #x0080 16)))
                                       int32
                                       #f)])
 (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
 (! x?$1814)
 (! x?$1815)
 (! x?$1816)
 'int32)
axioms:
  '()
optimized-halide-expr:
  (vec-add
 (vec-cast
  (vec-cast
   (vec-max
    (vec-min
     (vec-add
      (vec-bwand
       (sca-broadcast (int32_t (bv #x00000001 32)) 16)
       (vec-div
        (vec-mul
         (vec-cast
          (vec-sub
           (vec-cast
            (load
             (buffer input 'uint8)
             (ramp
              (sca-add
               (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
               (sca-sub
                (sca-sub (var-lookup 't101) (var-lookup 't106))
                (var-lookup 'input.min.0)))
              1
              16)
             (aligned 1 0))
            'int16
            16)
           (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
          'int32
          16)
         (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
        (sca-broadcast (int32_t (bv #x00000080 32)) 16)))
      (vec-div
       (vec-mul
        (vec-cast
         (vec-sub
          (vec-cast
           (load
            (buffer input 'uint8)
            (ramp
             (sca-add
              (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
              (sca-sub
               (sca-sub (var-lookup 't101) (var-lookup 't106))
               (var-lookup 'input.min.0)))
             1
             16)
            (aligned 1 0))
           'int16
           16)
          (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
         'int32
         16)
        (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
       (sca-broadcast (int32_t (bv #x00000100 32)) 16)))
     (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
    (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
   'int16
   16)
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t (bv #x0080 16)) 16) 'int32 16))
optimized-template:
  (vs-mpy-add
 ...
 (union [x?$1813 #(struct:cast
                   ...
                   #(struct:cast
                     ...
                     #(struct:vs-shift-right
                       ...
                       #(struct:vs-mpy-add
                         ...
                         #(struct:vs-mpy-add
                           ...
                           #<combine:
                            #<load-data>
                            #(struct:broadcast
                              ...
                              #(struct:uint8_t input_zero))>
                           (#(struct:int8_t (bv #x01 8))
                            #(struct:int8_t (bv #xff 8)))
                           #f
                           #f
                           #f
                           int16)
                         (#(struct:load-sca #(struct:buffer inv_sqrt int32) 0))
                         #f
                         #f
                         #f
                         int32)
                       #(struct:int32_t (bv #x00000008 32))
                       #t
                       x?$1442
                       #t)
                     int16
                     #t)
                   int32
                   #f)] [(! x?$1813) #(struct:cast
                                       ...
                                       #(struct:broadcast
                                         ...
                                         #(struct:int16_t (bv #x0080 16)))
                                       int32
                                       #f)])
 (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
 (! x?$1814)
 (! x?$1815)
 (! x?$1816)
 'int32)
optimized Halide 0:
  (int32_t
 (bvadd (bv #x00000080 32) (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32))))
optimized x86 0:
  (int32_t
 (ite* (⊢ (&& x?$1816 (! (&& (! x?$1814) (! x?$1816)))) (ite x?$1814 (bvadd (ite x?$1813 (sign-extend (ite (bvslt (bvadd (bvashr (bvmul (app inv_sqrt 0) (sign-extend (bvadd (zero-extend (ite c$857 (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) input_zero) (bitvector 16)) (bvneg (zero-extend (ite c$859 (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) input_zero) (bitvector 16)))) (bitvector 32))) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (app inv_sqrt 0) (sign-extend (bvadd (zero-extend (ite c$857 (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) input_zero) (bitvector 16)) (bvneg (zero-extend (ite c$859 (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) input_zero) (bitvector 16)))) (bitvector 32))) (bv #x00000007 32)))) (bv #xffff8000 32)) (bv #x8000 16) (ite (bvslt (bv #x00007fff 32) (bvadd (bvashr (bvmul (app inv_sqrt 0) (sign-extend (bvadd (zero-extend (ite c$857 (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) input_zero) (bitvector 16)) (bvneg (zero-extend (ite c$859 (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) input_zero) (bitvector 16)))) (bitvector 32))) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (app inv_sqrt 0) (sign-extend (bvadd (zero-extend (ite c$857 (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) input_zero) (bitvector 16)) (bvneg (zero-extend (ite c$859 (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) input_zero) (bitvector 16)))) (bitvector 32))) (bv #x00000007 32))))) (bv #x7fff 16) (extract 15 0 (bvadd (bvashr (bvmul (app inv_sqrt 0) (sign-extend (bvadd (zero-extend (ite c$857 (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) input_zero) (bitvector 16)) (bvneg (zero-extend (ite c$859 (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) input_zero) (bitvector 16)))) (bitvector 32))) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (app inv_sqrt 0) (sign-extend (bvadd (zero-extend (ite c$857 (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) input_zero) (bitvector 16)) (bvneg (zero-extend (ite c$859 (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) input_zero) (bitvector 16)))) (bitvector 32))) (bv #x00000007 32))))))) (bitvector 32)) (bv #x00000080 32)) (ite x?$1814 (bvadd (ite x?$1813 (sign-extend (ite (bvslt (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32)))) (bv #xffff8000 32)) (bv #x8000 16) (ite (bvslt (bv #x00007fff 32) (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))) (bv #x7fff 16) (extract 15 0 (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))))) (bitvector 32)) (bv #x00000080 32)) (ite x?$1815 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1815 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite x?$1813 (sign-extend (ite (bvslt (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32)))) (bv #xffff8000 32)) (bv #x8000 16) (ite (bvslt (bv #x00007fff 32) (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))) (bv #x7fff 16) (extract 15 0 (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))))) (bitvector 32)) (bv #x00000080 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1815 (bv #x00000000 32) (bv #x00000001 32))))) (ite x?$1813 (sign-extend (ite (bvslt (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32)))) (bv #xffff8000 32)) (bv #x8000 16) (ite (bvslt (bv #x00007fff 32) (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))) (bv #x7fff 16) (extract 15 0 (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))))) (bitvector 32)) (bv #x00000080 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1815 (bv #x00000000 32) (bv #x00000001 32)))))))) (bvadd (ite x?$1814 (bvadd (ite x?$1813 (sign-extend (ite (bvslt (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32)))) (bv #xffff8000 32)) (bv #x8000 16) (ite (bvslt (bv #x00007fff 32) (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))) (bv #x7fff 16) (extract 15 0 (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))))) (bitvector 32)) (bv #x00000080 32)) (ite x?$1815 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1815 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite x?$1813 (sign-extend (ite (bvslt (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32)))) (bv #xffff8000 32)) (bv #x8000 16) (ite (bvslt (bv #x00007fff 32) (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))) (bv #x7fff 16) (extract 15 0 (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))))) (bitvector 32)) (bv #x00000080 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1815 (bv #x00000000 32) (bv #x00000001 32))))) (ite x?$1813 (sign-extend (ite (bvslt (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32)))) (bv #xffff8000 32)) (bv #x8000 16) (ite (bvslt (bv #x00007fff 32) (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))) (bv #x7fff 16) (extract 15 0 (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))))) (bitvector 32)) (bv #x00000080 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1815 (bv #x00000000 32) (bv #x00000001 32))))))) (ite (bvsle (bvadd (bv #x80000000 32) (bvneg (ite (bvsle (ite x?$1814 (bvadd (ite x?$1813 (sign-extend (ite (bvslt (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32)))) (bv #xffff8000 32)) (bv #x8000 16) (ite (bvslt (bv #x00007fff 32) (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))) (bv #x7fff 16) (extract 15 0 (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))))) (bitvector 32)) (bv #x00000080 32)) (ite x?$1815 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1815 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite x?$1813 (sign-extend (ite (bvslt (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32)))) (bv #xffff8000 32)) (bv #x8000 16) (ite (bvslt (bv #x00007fff 32) (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))) (bv #x7fff 16) (extract 15 0 (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))))) (bitvector 32)) (bv #x00000080 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1815 (bv #x00000000 32) (bv #x00000001 32))))) (ite x?$1813 (sign-extend (ite (bvslt (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32)))) (bv #xffff8000 32)) (bv #x8000 16) (ite (bvslt (bv #x00007fff 32) (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))) (bv #x7fff 16) (extract 15 0 (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))))) (bitvector 32)) (bv #x00000080 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1815 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)) (ite x?$1814 (bvadd (ite x?$1813 (sign-extend (ite (bvslt (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32)))) (bv #xffff8000 32)) (bv #x8000 16) (ite (bvslt (bv #x00007fff 32) (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))) (bv #x7fff 16) (extract 15 0 (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))))) (bitvector 32)) (bv #x00000080 32)) (ite x?$1815 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1815 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite x?$1813 (sign-extend (ite (bvslt (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32)))) (bv #xffff8000 32)) (bv #x8000 16) (ite (bvslt (bv #x00007fff 32) (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))) (bv #x7fff 16) (extract 15 0 (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))))) (bitvector 32)) (bv #x00000080 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1815 (bv #x00000000 32) (bv #x00000001 32))))) (ite x?$1813 (sign-extend (ite (bvslt (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32)))) (bv #xffff8000 32)) (bv #x8000 16) (ite (bvslt (bv #x00007fff 32) (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))) (bv #x7fff 16) (extract 15 0 (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))))) (bitvector 32)) (bv #x00000080 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1815 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)))) (ite (bvsle (ite x?$1813 (sign-extend (ite (bvslt (bvadd (bvashr (bvmul (app inv_sqrt 0) (sign-extend (bvadd (zero-extend (ite c$857 (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) input_zero) (bitvector 16)) (bvneg (zero-extend (ite c$859 (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) input_zero) (bitvector 16)))) (bitvector 32))) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (app inv_sqrt 0) (sign-extend (bvadd (zero-extend (ite c$857 (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) input_zero) (bitvector 16)) (bvneg (zero-extend (ite c$859 (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) input_zero) (bitvector 16)))) (bitvector 32))) (bv #x00000007 32)))) (bv #xffff8000 32)) (bv #x8000 16) (ite (bvslt (bv #x00007fff 32) (bvadd (bvashr (bvmul (app inv_sqrt 0) (sign-extend (bvadd (zero-extend (ite c$857 (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) input_zero) (bitvector 16)) (bvneg (zero-extend (ite c$859 (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) input_zero) (bitvector 16)))) (bitvector 32))) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (app inv_sqrt 0) (sign-extend (bvadd (zero-extend (ite c$857 (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) input_zero) (bitvector 16)) (bvneg (zero-extend (ite c$859 (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) input_zero) (bitvector 16)))) (bitvector 32))) (bv #x00000007 32))))) (bv #x7fff 16) (extract 15 0 (bvadd (bvashr (bvmul (app inv_sqrt 0) (sign-extend (bvadd (zero-extend (ite c$857 (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) input_zero) (bitvector 16)) (bvneg (zero-extend (ite c$859 (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) input_zero) (bitvector 16)))) (bitvector 32))) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (app inv_sqrt 0) (sign-extend (bvadd (zero-extend (ite c$857 (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) input_zero) (bitvector 16)) (bvneg (zero-extend (ite c$859 (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) input_zero) (bitvector 16)))) (bitvector 32))) (bv #x00000007 32))))))) (bitvector 32)) (bv #x00000080 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$1814 (bvadd (ite x?$1813 (sign-extend (ite (bvslt (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32)))) (bv #xffff8000 32)) (bv #x8000 16) (ite (bvslt (bv #x00007fff 32) (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))) (bv #x7fff 16) (extract 15 0 (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))))) (bitvector 32)) (bv #x00000080 32)) (ite x?$1815 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1815 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite x?$1813 (sign-extend (ite (bvslt (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32)))) (bv #xffff8000 32)) (bv #x8000 16) (ite (bvslt (bv #x00007fff 32) (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))) (bv #x7fff 16) (extract 15 0 (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))))) (bitvector 32)) (bv #x00000080 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1815 (bv #x00000000 32) (bv #x00000001 32))))) (ite x?$1813 (sign-extend (ite (bvslt (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32)))) (bv #xffff8000 32)) (bv #x8000 16) (ite (bvslt (bv #x00007fff 32) (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))) (bv #x7fff 16) (extract 15 0 (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))))) (bitvector 32)) (bv #x00000080 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1815 (bv #x00000000 32) (bv #x00000001 32)))))))) (ite x?$1814 (bvadd (ite x?$1813 (sign-extend (ite (bvslt (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32)))) (bv #xffff8000 32)) (bv #x8000 16) (ite (bvslt (bv #x00007fff 32) (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))) (bv #x7fff 16) (extract 15 0 (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))))) (bitvector 32)) (bv #x00000080 32)) (ite x?$1815 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1815 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite x?$1813 (sign-extend (ite (bvslt (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32)))) (bv #xffff8000 32)) (bv #x8000 16) (ite (bvslt (bv #x00007fff 32) (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))) (bv #x7fff 16) (extract 15 0 (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))))) (bitvector 32)) (bv #x00000080 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1815 (bv #x00000000 32) (bv #x00000001 32))))) (ite x?$1813 (sign-extend (ite (bvslt (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32)))) (bv #xffff8000 32)) (bv #x8000 16) (ite (bvslt (bv #x00007fff 32) (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))) (bv #x7fff 16) (extract 15 0 (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))))) (bitvector 32)) (bv #x00000080 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1815 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32))))) (ite x?$1813 (sign-extend (ite (bvslt (bvadd (bvashr (bvmul (app inv_sqrt 0) (sign-extend (bvadd (zero-extend (ite c$857 (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) input_zero) (bitvector 16)) (bvneg (zero-extend (ite c$859 (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) input_zero) (bitvector 16)))) (bitvector 32))) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (app inv_sqrt 0) (sign-extend (bvadd (zero-extend (ite c$857 (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) input_zero) (bitvector 16)) (bvneg (zero-extend (ite c$859 (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) input_zero) (bitvector 16)))) (bitvector 32))) (bv #x00000007 32)))) (bv #xffff8000 32)) (bv #x8000 16) (ite (bvslt (bv #x00007fff 32) (bvadd (bvashr (bvmul (app inv_sqrt 0) (sign-extend (bvadd (zero-extend (ite c$857 (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) input_zero) (bitvector 16)) (bvneg (zero-extend (ite c$859 (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) input_zero) (bitvector 16)))) (bitvector 32))) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (app inv_sqrt 0) (sign-extend (bvadd (zero-extend (ite c$857 (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) input_zero) (bitvector 16)) (bvneg (zero-extend (ite c$859 (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) input_zero) (bitvector 16)))) (bitvector 32))) (bv #x00000007 32))))) (bv #x7fff 16) (extract 15 0 (bvadd (bvashr (bvmul (app inv_sqrt 0) (sign-extend (bvadd (zero-extend (ite c$857 (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) input_zero) (bitvector 16)) (bvneg (zero-extend (ite c$859 (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) input_zero) (bitvector 16)))) (bitvector 32))) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (app inv_sqrt 0) (sign-extend (bvadd (zero-extend (ite c$857 (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) input_zero) (bitvector 16)) (bvneg (zero-extend (ite c$859 (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) input_zero) (bitvector 16)))) (bitvector 32))) (bv #x00000007 32))))))) (bitvector 32)) (bv #x00000080 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$1814 (bvadd (ite x?$1813 (sign-extend (ite (bvslt (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32)))) (bv #xffff8000 32)) (bv #x8000 16) (ite (bvslt (bv #x00007fff 32) (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))) (bv #x7fff 16) (extract 15 0 (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))))) (bitvector 32)) (bv #x00000080 32)) (ite x?$1815 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1815 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite x?$1813 (sign-extend (ite (bvslt (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32)))) (bv #xffff8000 32)) (bv #x8000 16) (ite (bvslt (bv #x00007fff 32) (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))) (bv #x7fff 16) (extract 15 0 (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))))) (bitvector 32)) (bv #x00000080 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1815 (bv #x00000000 32) (bv #x00000001 32))))) (ite x?$1813 (sign-extend (ite (bvslt (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32)))) (bv #xffff8000 32)) (bv #x8000 16) (ite (bvslt (bv #x00007fff 32) (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))) (bv #x7fff 16) (extract 15 0 (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))))) (bitvector 32)) (bv #x00000080 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1815 (bv #x00000000 32) (bv #x00000001 32)))))))) (ite x?$1814 (bvadd (ite x?$1813 (sign-extend (ite (bvslt (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32)))) (bv #xffff8000 32)) (bv #x8000 16) (ite (bvslt (bv #x00007fff 32) (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))) (bv #x7fff 16) (extract 15 0 (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))))) (bitvector 32)) (bv #x00000080 32)) (ite x?$1815 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1815 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite x?$1813 (sign-extend (ite (bvslt (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32)))) (bv #xffff8000 32)) (bv #x8000 16) (ite (bvslt (bv #x00007fff 32) (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))) (bv #x7fff 16) (extract 15 0 (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))))) (bitvector 32)) (bv #x00000080 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1815 (bv #x00000000 32) (bv #x00000001 32))))) (ite x?$1813 (sign-extend (ite (bvslt (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32)))) (bv #xffff8000 32)) (bv #x8000 16) (ite (bvslt (bv #x00007fff 32) (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))) (bv #x7fff 16) (extract 15 0 (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))))) (bitvector 32)) (bv #x00000080 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1815 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)))))) (ite (bvsle (ite x?$1813 (sign-extend (ite (bvslt (bvadd (bvashr (bvmul (app inv_sqrt 0) (sign-extend (bvadd (zero-extend (ite c$857 (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) input_zero) (bitvector 16)) (bvneg (zero-extend (ite c$859 (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) input_zero) (bitvector 16)))) (bitvector 32))) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (app inv_sqrt 0) (sign-extend (bvadd (zero-extend (ite c$857 (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) input_zero) (bitvector 16)) (bvneg (zero-extend (ite c$859 (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) input_zero) (bitvector 16)))) (bitvector 32))) (bv #x00000007 32)))) (bv #xffff8000 32)) (bv #x8000 16) (ite (bvslt (bv #x00007fff 32) (bvadd (bvashr (bvmul (app inv_sqrt 0) (sign-extend (bvadd (zero-extend (ite c$857 (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) input_zero) (bitvector 16)) (bvneg (zero-extend (ite c$859 (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) input_zero) (bitvector 16)))) (bitvector 32))) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (app inv_sqrt 0) (sign-extend (bvadd (zero-extend (ite c$857 (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) input_zero) (bitvector 16)) (bvneg (zero-extend (ite c$859 (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) input_zero) (bitvector 16)))) (bitvector 32))) (bv #x00000007 32))))) (bv #x7fff 16) (extract 15 0 (bvadd (bvashr (bvmul (app inv_sqrt 0) (sign-extend (bvadd (zero-extend (ite c$857 (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) input_zero) (bitvector 16)) (bvneg (zero-extend (ite c$859 (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) input_zero) (bitvector 16)))) (bitvector 32))) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (app inv_sqrt 0) (sign-extend (bvadd (zero-extend (ite c$857 (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) input_zero) (bitvector 16)) (bvneg (zero-extend (ite c$859 (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) input_zero) (bitvector 16)))) (bitvector 32))) (bv #x00000007 32))))))) (bitvector 32)) (bv #x00000080 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$1814 (bvadd (ite x?$1813 (sign-extend (ite (bvslt (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32)))) (bv #xffff8000 32)) (bv #x8000 16) (ite (bvslt (bv #x00007fff 32) (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))) (bv #x7fff 16) (extract 15 0 (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))))) (bitvector 32)) (bv #x00000080 32)) (ite x?$1815 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1815 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite x?$1813 (sign-extend (ite (bvslt (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32)))) (bv #xffff8000 32)) (bv #x8000 16) (ite (bvslt (bv #x00007fff 32) (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))) (bv #x7fff 16) (extract 15 0 (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))))) (bitvector 32)) (bv #x00000080 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1815 (bv #x00000000 32) (bv #x00000001 32))))) (ite x?$1813 (sign-extend (ite (bvslt (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32)))) (bv #xffff8000 32)) (bv #x8000 16) (ite (bvslt (bv #x00007fff 32) (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))) (bv #x7fff 16) (extract 15 0 (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))))) (bitvector 32)) (bv #x00000080 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1815 (bv #x00000000 32) (bv #x00000001 32)))))))) (ite x?$1814 (bvadd (ite x?$1813 (sign-extend (ite (bvslt (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32)))) (bv #xffff8000 32)) (bv #x8000 16) (ite (bvslt (bv #x00007fff 32) (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))) (bv #x7fff 16) (extract 15 0 (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))))) (bitvector 32)) (bv #x00000080 32)) (ite x?$1815 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1815 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite x?$1813 (sign-extend (ite (bvslt (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32)))) (bv #xffff8000 32)) (bv #x8000 16) (ite (bvslt (bv #x00007fff 32) (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))) (bv #x7fff 16) (extract 15 0 (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))))) (bitvector 32)) (bv #x00000080 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1815 (bv #x00000000 32) (bv #x00000001 32))))) (ite x?$1813 (sign-extend (ite (bvslt (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32)))) (bv #xffff8000 32)) (bv #x8000 16) (ite (bvslt (bv #x00007fff 32) (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))) (bv #x7fff 16) (extract 15 0 (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))))) (bitvector 32)) (bv #x00000080 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1815 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32))))) (ite x?$1813 (sign-extend (ite (bvslt (bvadd (bvashr (bvmul (app inv_sqrt 0) (sign-extend (bvadd (zero-extend (ite c$857 (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) input_zero) (bitvector 16)) (bvneg (zero-extend (ite c$859 (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) input_zero) (bitvector 16)))) (bitvector 32))) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (app inv_sqrt 0) (sign-extend (bvadd (zero-extend (ite c$857 (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) input_zero) (bitvector 16)) (bvneg (zero-extend (ite c$859 (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) input_zero) (bitvector 16)))) (bitvector 32))) (bv #x00000007 32)))) (bv #xffff8000 32)) (bv #x8000 16) (ite (bvslt (bv #x00007fff 32) (bvadd (bvashr (bvmul (app inv_sqrt 0) (sign-extend (bvadd (zero-extend (ite c$857 (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) input_zero) (bitvector 16)) (bvneg (zero-extend (ite c$859 (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) input_zero) (bitvector 16)))) (bitvector 32))) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (app inv_sqrt 0) (sign-extend (bvadd (zero-extend (ite c$857 (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) input_zero) (bitvector 16)) (bvneg (zero-extend (ite c$859 (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) input_zero) (bitvector 16)))) (bitvector 32))) (bv #x00000007 32))))) (bv #x7fff 16) (extract 15 0 (bvadd (bvashr (bvmul (app inv_sqrt 0) (sign-extend (bvadd (zero-extend (ite c$857 (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) input_zero) (bitvector 16)) (bvneg (zero-extend (ite c$859 (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) input_zero) (bitvector 16)))) (bitvector 32))) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (app inv_sqrt 0) (sign-extend (bvadd (zero-extend (ite c$857 (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) input_zero) (bitvector 16)) (bvneg (zero-extend (ite c$859 (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) input_zero) (bitvector 16)))) (bitvector 32))) (bv #x00000007 32))))))) (bitvector 32)) (bv #x00000080 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$1814 (bvadd (ite x?$1813 (sign-extend (ite (bvslt (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32)))) (bv #xffff8000 32)) (bv #x8000 16) (ite (bvslt (bv #x00007fff 32) (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))) (bv #x7fff 16) (extract 15 0 (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))))) (bitvector 32)) (bv #x00000080 32)) (ite x?$1815 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1815 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite x?$1813 (sign-extend (ite (bvslt (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32)))) (bv #xffff8000 32)) (bv #x8000 16) (ite (bvslt (bv #x00007fff 32) (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))) (bv #x7fff 16) (extract 15 0 (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))))) (bitvector 32)) (bv #x00000080 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1815 (bv #x00000000 32) (bv #x00000001 32))))) (ite x?$1813 (sign-extend (ite (bvslt (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32)))) (bv #xffff8000 32)) (bv #x8000 16) (ite (bvslt (bv #x00007fff 32) (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))) (bv #x7fff 16) (extract 15 0 (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))))) (bitvector 32)) (bv #x00000080 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1815 (bv #x00000000 32) (bv #x00000001 32)))))))) (ite x?$1814 (bvadd (ite x?$1813 (sign-extend (ite (bvslt (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32)))) (bv #xffff8000 32)) (bv #x8000 16) (ite (bvslt (bv #x00007fff 32) (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))) (bv #x7fff 16) (extract 15 0 (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))))) (bitvector 32)) (bv #x00000080 32)) (ite x?$1815 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1815 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite x?$1813 (sign-extend (ite (bvslt (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32)))) (bv #xffff8000 32)) (bv #x8000 16) (ite (bvslt (bv #x00007fff 32) (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))) (bv #x7fff 16) (extract 15 0 (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))))) (bitvector 32)) (bv #x00000080 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1815 (bv #x00000000 32) (bv #x00000001 32))))) (ite x?$1813 (sign-extend (ite (bvslt (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32)))) (bv #xffff8000 32)) (bv #x8000 16) (ite (bvslt (bv #x00007fff 32) (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))) (bv #x7fff 16) (extract 15 0 (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))))) (bitvector 32)) (bv #x00000080 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1815 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32))))) (bvadd (bv #x80000000 32) (bvneg (ite (bvsle (ite x?$1814 (bvadd (ite x?$1813 (sign-extend (ite (bvslt (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32)))) (bv #xffff8000 32)) (bv #x8000 16) (ite (bvslt (bv #x00007fff 32) (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))) (bv #x7fff 16) (extract 15 0 (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))))) (bitvector 32)) (bv #x00000080 32)) (ite x?$1815 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1815 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite x?$1813 (sign-extend (ite (bvslt (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32)))) (bv #xffff8000 32)) (bv #x8000 16) (ite (bvslt (bv #x00007fff 32) (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))) (bv #x7fff 16) (extract 15 0 (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))))) (bitvector 32)) (bv #x00000080 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1815 (bv #x00000000 32) (bv #x00000001 32))))) (ite x?$1813 (sign-extend (ite (bvslt (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32)))) (bv #xffff8000 32)) (bv #x8000 16) (ite (bvslt (bv #x00007fff 32) (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))) (bv #x7fff 16) (extract 15 0 (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))))) (bitvector 32)) (bv #x00000080 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1815 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)) (ite x?$1814 (bvadd (ite x?$1813 (sign-extend (ite (bvslt (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32)))) (bv #xffff8000 32)) (bv #x8000 16) (ite (bvslt (bv #x00007fff 32) (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))) (bv #x7fff 16) (extract 15 0 (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))))) (bitvector 32)) (bv #x00000080 32)) (ite x?$1815 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1815 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite x?$1813 (sign-extend (ite (bvslt (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32)))) (bv #xffff8000 32)) (bv #x8000 16) (ite (bvslt (bv #x00007fff 32) (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))) (bv #x7fff 16) (extract 15 0 (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))))) (bitvector 32)) (bv #x00000080 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1815 (bv #x00000000 32) (bv #x00000001 32))))) (ite x?$1813 (sign-extend (ite (bvslt (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32)))) (bv #xffff8000 32)) (bv #x8000 16) (ite (bvslt (bv #x00007fff 32) (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))) (bv #x7fff 16) (extract 15 0 (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))))) (bitvector 32)) (bv #x00000080 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1815 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)))))))) (⊢ (|| (&& (! x?$1814) (! x?$1816)) (&& (! x?$1816) (! (&& (! x?$1814) (! x?$1816))))) (bvashr (ite x?$1814 (bvadd (ite x?$1813 (sign-extend (ite (bvslt (bvadd (bvashr (bvmul (app inv_sqrt 0) (sign-extend (bvadd (zero-extend (ite c$857 (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) input_zero) (bitvector 16)) (bvneg (zero-extend (ite c$859 (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) input_zero) (bitvector 16)))) (bitvector 32))) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (app inv_sqrt 0) (sign-extend (bvadd (zero-extend (ite c$857 (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) input_zero) (bitvector 16)) (bvneg (zero-extend (ite c$859 (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) input_zero) (bitvector 16)))) (bitvector 32))) (bv #x00000007 32)))) (bv #xffff8000 32)) (bv #x8000 16) (ite (bvslt (bv #x00007fff 32) (bvadd (bvashr (bvmul (app inv_sqrt 0) (sign-extend (bvadd (zero-extend (ite c$857 (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) input_zero) (bitvector 16)) (bvneg (zero-extend (ite c$859 (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) input_zero) (bitvector 16)))) (bitvector 32))) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (app inv_sqrt 0) (sign-extend (bvadd (zero-extend (ite c$857 (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) input_zero) (bitvector 16)) (bvneg (zero-extend (ite c$859 (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) input_zero) (bitvector 16)))) (bitvector 32))) (bv #x00000007 32))))) (bv #x7fff 16) (extract 15 0 (bvadd (bvashr (bvmul (app inv_sqrt 0) (sign-extend (bvadd (zero-extend (ite c$857 (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) input_zero) (bitvector 16)) (bvneg (zero-extend (ite c$859 (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) input_zero) (bitvector 16)))) (bitvector 32))) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (app inv_sqrt 0) (sign-extend (bvadd (zero-extend (ite c$857 (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) input_zero) (bitvector 16)) (bvneg (zero-extend (ite c$859 (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) input_zero) (bitvector 16)))) (bitvector 32))) (bv #x00000007 32))))))) (bitvector 32)) (bv #x00000080 32)) (ite x?$1814 (bvadd (ite x?$1813 (sign-extend (ite (bvslt (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32)))) (bv #xffff8000 32)) (bv #x8000 16) (ite (bvslt (bv #x00007fff 32) (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))) (bv #x7fff 16) (extract 15 0 (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))))) (bitvector 32)) (bv #x00000080 32)) (ite x?$1815 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1815 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite x?$1813 (sign-extend (ite (bvslt (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32)))) (bv #xffff8000 32)) (bv #x8000 16) (ite (bvslt (bv #x00007fff 32) (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))) (bv #x7fff 16) (extract 15 0 (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))))) (bitvector 32)) (bv #x00000080 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1815 (bv #x00000000 32) (bv #x00000001 32))))) (ite x?$1813 (sign-extend (ite (bvslt (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32)))) (bv #xffff8000 32)) (bv #x8000 16) (ite (bvslt (bv #x00007fff 32) (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))) (bv #x7fff 16) (extract 15 0 (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))))) (bitvector 32)) (bv #x00000080 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1815 (bv #x00000000 32) (bv #x00000001 32)))))))) (bvadd (ite x?$1814 (bvadd (ite x?$1813 (sign-extend (ite (bvslt (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32)))) (bv #xffff8000 32)) (bv #x8000 16) (ite (bvslt (bv #x00007fff 32) (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))) (bv #x7fff 16) (extract 15 0 (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))))) (bitvector 32)) (bv #x00000080 32)) (ite x?$1815 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1815 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite x?$1813 (sign-extend (ite (bvslt (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32)))) (bv #xffff8000 32)) (bv #x8000 16) (ite (bvslt (bv #x00007fff 32) (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))) (bv #x7fff 16) (extract 15 0 (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))))) (bitvector 32)) (bv #x00000080 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1815 (bv #x00000000 32) (bv #x00000001 32))))) (ite x?$1813 (sign-extend (ite (bvslt (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32)))) (bv #xffff8000 32)) (bv #x8000 16) (ite (bvslt (bv #x00007fff 32) (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))) (bv #x7fff 16) (extract 15 0 (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))))) (bitvector 32)) (bv #x00000080 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1815 (bv #x00000000 32) (bv #x00000001 32))))))) (ite (bvsle (bvadd (bv #x80000000 32) (bvneg (ite (bvsle (ite x?$1814 (bvadd (ite x?$1813 (sign-extend (ite (bvslt (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32)))) (bv #xffff8000 32)) (bv #x8000 16) (ite (bvslt (bv #x00007fff 32) (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))) (bv #x7fff 16) (extract 15 0 (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))))) (bitvector 32)) (bv #x00000080 32)) (ite x?$1815 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1815 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite x?$1813 (sign-extend (ite (bvslt (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32)))) (bv #xffff8000 32)) (bv #x8000 16) (ite (bvslt (bv #x00007fff 32) (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))) (bv #x7fff 16) (extract 15 0 (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))))) (bitvector 32)) (bv #x00000080 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1815 (bv #x00000000 32) (bv #x00000001 32))))) (ite x?$1813 (sign-extend (ite (bvslt (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32)))) (bv #xffff8000 32)) (bv #x8000 16) (ite (bvslt (bv #x00007fff 32) (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))) (bv #x7fff 16) (extract 15 0 (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))))) (bitvector 32)) (bv #x00000080 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1815 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)) (ite x?$1814 (bvadd (ite x?$1813 (sign-extend (ite (bvslt (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32)))) (bv #xffff8000 32)) (bv #x8000 16) (ite (bvslt (bv #x00007fff 32) (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))) (bv #x7fff 16) (extract 15 0 (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))))) (bitvector 32)) (bv #x00000080 32)) (ite x?$1815 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1815 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite x?$1813 (sign-extend (ite (bvslt (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32)))) (bv #xffff8000 32)) (bv #x8000 16) (ite (bvslt (bv #x00007fff 32) (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))) (bv #x7fff 16) (extract 15 0 (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))))) (bitvector 32)) (bv #x00000080 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1815 (bv #x00000000 32) (bv #x00000001 32))))) (ite x?$1813 (sign-extend (ite (bvslt (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32)))) (bv #xffff8000 32)) (bv #x8000 16) (ite (bvslt (bv #x00007fff 32) (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))) (bv #x7fff 16) (extract 15 0 (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))))) (bitvector 32)) (bv #x00000080 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1815 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)))) (ite (bvsle (ite x?$1813 (sign-extend (ite (bvslt (bvadd (bvashr (bvmul (app inv_sqrt 0) (sign-extend (bvadd (zero-extend (ite c$857 (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) input_zero) (bitvector 16)) (bvneg (zero-extend (ite c$859 (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) input_zero) (bitvector 16)))) (bitvector 32))) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (app inv_sqrt 0) (sign-extend (bvadd (zero-extend (ite c$857 (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) input_zero) (bitvector 16)) (bvneg (zero-extend (ite c$859 (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) input_zero) (bitvector 16)))) (bitvector 32))) (bv #x00000007 32)))) (bv #xffff8000 32)) (bv #x8000 16) (ite (bvslt (bv #x00007fff 32) (bvadd (bvashr (bvmul (app inv_sqrt 0) (sign-extend (bvadd (zero-extend (ite c$857 (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) input_zero) (bitvector 16)) (bvneg (zero-extend (ite c$859 (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) input_zero) (bitvector 16)))) (bitvector 32))) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (app inv_sqrt 0) (sign-extend (bvadd (zero-extend (ite c$857 (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) input_zero) (bitvector 16)) (bvneg (zero-extend (ite c$859 (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) input_zero) (bitvector 16)))) (bitvector 32))) (bv #x00000007 32))))) (bv #x7fff 16) (extract 15 0 (bvadd (bvashr (bvmul (app inv_sqrt 0) (sign-extend (bvadd (zero-extend (ite c$857 (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) input_zero) (bitvector 16)) (bvneg (zero-extend (ite c$859 (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) input_zero) (bitvector 16)))) (bitvector 32))) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (app inv_sqrt 0) (sign-extend (bvadd (zero-extend (ite c$857 (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) input_zero) (bitvector 16)) (bvneg (zero-extend (ite c$859 (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) input_zero) (bitvector 16)))) (bitvector 32))) (bv #x00000007 32))))))) (bitvector 32)) (bv #x00000080 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$1814 (bvadd (ite x?$1813 (sign-extend (ite (bvslt (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32)))) (bv #xffff8000 32)) (bv #x8000 16) (ite (bvslt (bv #x00007fff 32) (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))) (bv #x7fff 16) (extract 15 0 (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))))) (bitvector 32)) (bv #x00000080 32)) (ite x?$1815 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1815 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite x?$1813 (sign-extend (ite (bvslt (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32)))) (bv #xffff8000 32)) (bv #x8000 16) (ite (bvslt (bv #x00007fff 32) (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))) (bv #x7fff 16) (extract 15 0 (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))))) (bitvector 32)) (bv #x00000080 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1815 (bv #x00000000 32) (bv #x00000001 32))))) (ite x?$1813 (sign-extend (ite (bvslt (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32)))) (bv #xffff8000 32)) (bv #x8000 16) (ite (bvslt (bv #x00007fff 32) (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))) (bv #x7fff 16) (extract 15 0 (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))))) (bitvector 32)) (bv #x00000080 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1815 (bv #x00000000 32) (bv #x00000001 32)))))))) (ite x?$1814 (bvadd (ite x?$1813 (sign-extend (ite (bvslt (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32)))) (bv #xffff8000 32)) (bv #x8000 16) (ite (bvslt (bv #x00007fff 32) (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))) (bv #x7fff 16) (extract 15 0 (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))))) (bitvector 32)) (bv #x00000080 32)) (ite x?$1815 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1815 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite x?$1813 (sign-extend (ite (bvslt (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32)))) (bv #xffff8000 32)) (bv #x8000 16) (ite (bvslt (bv #x00007fff 32) (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))) (bv #x7fff 16) (extract 15 0 (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))))) (bitvector 32)) (bv #x00000080 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1815 (bv #x00000000 32) (bv #x00000001 32))))) (ite x?$1813 (sign-extend (ite (bvslt (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32)))) (bv #xffff8000 32)) (bv #x8000 16) (ite (bvslt (bv #x00007fff 32) (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))) (bv #x7fff 16) (extract 15 0 (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))))) (bitvector 32)) (bv #x00000080 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1815 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32))))) (ite x?$1813 (sign-extend (ite (bvslt (bvadd (bvashr (bvmul (app inv_sqrt 0) (sign-extend (bvadd (zero-extend (ite c$857 (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) input_zero) (bitvector 16)) (bvneg (zero-extend (ite c$859 (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) input_zero) (bitvector 16)))) (bitvector 32))) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (app inv_sqrt 0) (sign-extend (bvadd (zero-extend (ite c$857 (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) input_zero) (bitvector 16)) (bvneg (zero-extend (ite c$859 (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) input_zero) (bitvector 16)))) (bitvector 32))) (bv #x00000007 32)))) (bv #xffff8000 32)) (bv #x8000 16) (ite (bvslt (bv #x00007fff 32) (bvadd (bvashr (bvmul (app inv_sqrt 0) (sign-extend (bvadd (zero-extend (ite c$857 (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) input_zero) (bitvector 16)) (bvneg (zero-extend (ite c$859 (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) input_zero) (bitvector 16)))) (bitvector 32))) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (app inv_sqrt 0) (sign-extend (bvadd (zero-extend (ite c$857 (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) input_zero) (bitvector 16)) (bvneg (zero-extend (ite c$859 (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) input_zero) (bitvector 16)))) (bitvector 32))) (bv #x00000007 32))))) (bv #x7fff 16) (extract 15 0 (bvadd (bvashr (bvmul (app inv_sqrt 0) (sign-extend (bvadd (zero-extend (ite c$857 (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) input_zero) (bitvector 16)) (bvneg (zero-extend (ite c$859 (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) input_zero) (bitvector 16)))) (bitvector 32))) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (app inv_sqrt 0) (sign-extend (bvadd (zero-extend (ite c$857 (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) input_zero) (bitvector 16)) (bvneg (zero-extend (ite c$859 (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) input_zero) (bitvector 16)))) (bitvector 32))) (bv #x00000007 32))))))) (bitvector 32)) (bv #x00000080 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$1814 (bvadd (ite x?$1813 (sign-extend (ite (bvslt (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32)))) (bv #xffff8000 32)) (bv #x8000 16) (ite (bvslt (bv #x00007fff 32) (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))) (bv #x7fff 16) (extract 15 0 (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))))) (bitvector 32)) (bv #x00000080 32)) (ite x?$1815 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1815 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite x?$1813 (sign-extend (ite (bvslt (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32)))) (bv #xffff8000 32)) (bv #x8000 16) (ite (bvslt (bv #x00007fff 32) (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))) (bv #x7fff 16) (extract 15 0 (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))))) (bitvector 32)) (bv #x00000080 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1815 (bv #x00000000 32) (bv #x00000001 32))))) (ite x?$1813 (sign-extend (ite (bvslt (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32)))) (bv #xffff8000 32)) (bv #x8000 16) (ite (bvslt (bv #x00007fff 32) (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))) (bv #x7fff 16) (extract 15 0 (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))))) (bitvector 32)) (bv #x00000080 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1815 (bv #x00000000 32) (bv #x00000001 32)))))))) (ite x?$1814 (bvadd (ite x?$1813 (sign-extend (ite (bvslt (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32)))) (bv #xffff8000 32)) (bv #x8000 16) (ite (bvslt (bv #x00007fff 32) (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))) (bv #x7fff 16) (extract 15 0 (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))))) (bitvector 32)) (bv #x00000080 32)) (ite x?$1815 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1815 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite x?$1813 (sign-extend (ite (bvslt (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32)))) (bv #xffff8000 32)) (bv #x8000 16) (ite (bvslt (bv #x00007fff 32) (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))) (bv #x7fff 16) (extract 15 0 (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))))) (bitvector 32)) (bv #x00000080 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1815 (bv #x00000000 32) (bv #x00000001 32))))) (ite x?$1813 (sign-extend (ite (bvslt (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32)))) (bv #xffff8000 32)) (bv #x8000 16) (ite (bvslt (bv #x00007fff 32) (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))) (bv #x7fff 16) (extract 15 0 (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))))) (bitvector 32)) (bv #x00000080 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1815 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)))))) (ite (bvsle (ite x?$1813 (sign-extend (ite (bvslt (bvadd (bvashr (bvmul (app inv_sqrt 0) (sign-extend (bvadd (zero-extend (ite c$857 (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) input_zero) (bitvector 16)) (bvneg (zero-extend (ite c$859 (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) input_zero) (bitvector 16)))) (bitvector 32))) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (app inv_sqrt 0) (sign-extend (bvadd (zero-extend (ite c$857 (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) input_zero) (bitvector 16)) (bvneg (zero-extend (ite c$859 (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) input_zero) (bitvector 16)))) (bitvector 32))) (bv #x00000007 32)))) (bv #xffff8000 32)) (bv #x8000 16) (ite (bvslt (bv #x00007fff 32) (bvadd (bvashr (bvmul (app inv_sqrt 0) (sign-extend (bvadd (zero-extend (ite c$857 (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) input_zero) (bitvector 16)) (bvneg (zero-extend (ite c$859 (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) input_zero) (bitvector 16)))) (bitvector 32))) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (app inv_sqrt 0) (sign-extend (bvadd (zero-extend (ite c$857 (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) input_zero) (bitvector 16)) (bvneg (zero-extend (ite c$859 (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) input_zero) (bitvector 16)))) (bitvector 32))) (bv #x00000007 32))))) (bv #x7fff 16) (extract 15 0 (bvadd (bvashr (bvmul (app inv_sqrt 0) (sign-extend (bvadd (zero-extend (ite c$857 (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) input_zero) (bitvector 16)) (bvneg (zero-extend (ite c$859 (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) input_zero) (bitvector 16)))) (bitvector 32))) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (app inv_sqrt 0) (sign-extend (bvadd (zero-extend (ite c$857 (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) input_zero) (bitvector 16)) (bvneg (zero-extend (ite c$859 (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) input_zero) (bitvector 16)))) (bitvector 32))) (bv #x00000007 32))))))) (bitvector 32)) (bv #x00000080 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$1814 (bvadd (ite x?$1813 (sign-extend (ite (bvslt (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32)))) (bv #xffff8000 32)) (bv #x8000 16) (ite (bvslt (bv #x00007fff 32) (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))) (bv #x7fff 16) (extract 15 0 (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))))) (bitvector 32)) (bv #x00000080 32)) (ite x?$1815 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1815 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite x?$1813 (sign-extend (ite (bvslt (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32)))) (bv #xffff8000 32)) (bv #x8000 16) (ite (bvslt (bv #x00007fff 32) (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))) (bv #x7fff 16) (extract 15 0 (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))))) (bitvector 32)) (bv #x00000080 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1815 (bv #x00000000 32) (bv #x00000001 32))))) (ite x?$1813 (sign-extend (ite (bvslt (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32)))) (bv #xffff8000 32)) (bv #x8000 16) (ite (bvslt (bv #x00007fff 32) (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))) (bv #x7fff 16) (extract 15 0 (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))))) (bitvector 32)) (bv #x00000080 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1815 (bv #x00000000 32) (bv #x00000001 32)))))))) (ite x?$1814 (bvadd (ite x?$1813 (sign-extend (ite (bvslt (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32)))) (bv #xffff8000 32)) (bv #x8000 16) (ite (bvslt (bv #x00007fff 32) (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))) (bv #x7fff 16) (extract 15 0 (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))))) (bitvector 32)) (bv #x00000080 32)) (ite x?$1815 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1815 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite x?$1813 (sign-extend (ite (bvslt (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32)))) (bv #xffff8000 32)) (bv #x8000 16) (ite (bvslt (bv #x00007fff 32) (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))) (bv #x7fff 16) (extract 15 0 (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))))) (bitvector 32)) (bv #x00000080 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1815 (bv #x00000000 32) (bv #x00000001 32))))) (ite x?$1813 (sign-extend (ite (bvslt (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32)))) (bv #xffff8000 32)) (bv #x8000 16) (ite (bvslt (bv #x00007fff 32) (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))) (bv #x7fff 16) (extract 15 0 (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))))) (bitvector 32)) (bv #x00000080 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1815 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32))))) (ite x?$1813 (sign-extend (ite (bvslt (bvadd (bvashr (bvmul (app inv_sqrt 0) (sign-extend (bvadd (zero-extend (ite c$857 (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) input_zero) (bitvector 16)) (bvneg (zero-extend (ite c$859 (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) input_zero) (bitvector 16)))) (bitvector 32))) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (app inv_sqrt 0) (sign-extend (bvadd (zero-extend (ite c$857 (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) input_zero) (bitvector 16)) (bvneg (zero-extend (ite c$859 (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) input_zero) (bitvector 16)))) (bitvector 32))) (bv #x00000007 32)))) (bv #xffff8000 32)) (bv #x8000 16) (ite (bvslt (bv #x00007fff 32) (bvadd (bvashr (bvmul (app inv_sqrt 0) (sign-extend (bvadd (zero-extend (ite c$857 (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) input_zero) (bitvector 16)) (bvneg (zero-extend (ite c$859 (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) input_zero) (bitvector 16)))) (bitvector 32))) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (app inv_sqrt 0) (sign-extend (bvadd (zero-extend (ite c$857 (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) input_zero) (bitvector 16)) (bvneg (zero-extend (ite c$859 (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) input_zero) (bitvector 16)))) (bitvector 32))) (bv #x00000007 32))))) (bv #x7fff 16) (extract 15 0 (bvadd (bvashr (bvmul (app inv_sqrt 0) (sign-extend (bvadd (zero-extend (ite c$857 (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) input_zero) (bitvector 16)) (bvneg (zero-extend (ite c$859 (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) input_zero) (bitvector 16)))) (bitvector 32))) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (app inv_sqrt 0) (sign-extend (bvadd (zero-extend (ite c$857 (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) input_zero) (bitvector 16)) (bvneg (zero-extend (ite c$859 (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) input_zero) (bitvector 16)))) (bitvector 32))) (bv #x00000007 32))))))) (bitvector 32)) (bv #x00000080 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$1814 (bvadd (ite x?$1813 (sign-extend (ite (bvslt (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32)))) (bv #xffff8000 32)) (bv #x8000 16) (ite (bvslt (bv #x00007fff 32) (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))) (bv #x7fff 16) (extract 15 0 (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))))) (bitvector 32)) (bv #x00000080 32)) (ite x?$1815 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1815 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite x?$1813 (sign-extend (ite (bvslt (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32)))) (bv #xffff8000 32)) (bv #x8000 16) (ite (bvslt (bv #x00007fff 32) (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))) (bv #x7fff 16) (extract 15 0 (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))))) (bitvector 32)) (bv #x00000080 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1815 (bv #x00000000 32) (bv #x00000001 32))))) (ite x?$1813 (sign-extend (ite (bvslt (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32)))) (bv #xffff8000 32)) (bv #x8000 16) (ite (bvslt (bv #x00007fff 32) (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))) (bv #x7fff 16) (extract 15 0 (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))))) (bitvector 32)) (bv #x00000080 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1815 (bv #x00000000 32) (bv #x00000001 32)))))))) (ite x?$1814 (bvadd (ite x?$1813 (sign-extend (ite (bvslt (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32)))) (bv #xffff8000 32)) (bv #x8000 16) (ite (bvslt (bv #x00007fff 32) (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))) (bv #x7fff 16) (extract 15 0 (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))))) (bitvector 32)) (bv #x00000080 32)) (ite x?$1815 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1815 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite x?$1813 (sign-extend (ite (bvslt (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32)))) (bv #xffff8000 32)) (bv #x8000 16) (ite (bvslt (bv #x00007fff 32) (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))) (bv #x7fff 16) (extract 15 0 (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))))) (bitvector 32)) (bv #x00000080 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1815 (bv #x00000000 32) (bv #x00000001 32))))) (ite x?$1813 (sign-extend (ite (bvslt (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32)))) (bv #xffff8000 32)) (bv #x8000 16) (ite (bvslt (bv #x00007fff 32) (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))) (bv #x7fff 16) (extract 15 0 (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))))) (bitvector 32)) (bv #x00000080 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1815 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32))))) (bvadd (bv #x80000000 32) (bvneg (ite (bvsle (ite x?$1814 (bvadd (ite x?$1813 (sign-extend (ite (bvslt (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32)))) (bv #xffff8000 32)) (bv #x8000 16) (ite (bvslt (bv #x00007fff 32) (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))) (bv #x7fff 16) (extract 15 0 (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))))) (bitvector 32)) (bv #x00000080 32)) (ite x?$1815 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1815 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite x?$1813 (sign-extend (ite (bvslt (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32)))) (bv #xffff8000 32)) (bv #x8000 16) (ite (bvslt (bv #x00007fff 32) (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))) (bv #x7fff 16) (extract 15 0 (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))))) (bitvector 32)) (bv #x00000080 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1815 (bv #x00000000 32) (bv #x00000001 32))))) (ite x?$1813 (sign-extend (ite (bvslt (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32)))) (bv #xffff8000 32)) (bv #x8000 16) (ite (bvslt (bv #x00007fff 32) (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))) (bv #x7fff 16) (extract 15 0 (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))))) (bitvector 32)) (bv #x00000080 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1815 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)) (ite x?$1814 (bvadd (ite x?$1813 (sign-extend (ite (bvslt (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32)))) (bv #xffff8000 32)) (bv #x8000 16) (ite (bvslt (bv #x00007fff 32) (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))) (bv #x7fff 16) (extract 15 0 (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))))) (bitvector 32)) (bv #x00000080 32)) (ite x?$1815 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1815 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite x?$1813 (sign-extend (ite (bvslt (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32)))) (bv #xffff8000 32)) (bv #x8000 16) (ite (bvslt (bv #x00007fff 32) (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))) (bv #x7fff 16) (extract 15 0 (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))))) (bitvector 32)) (bv #x00000080 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1815 (bv #x00000000 32) (bv #x00000001 32))))) (ite x?$1813 (sign-extend (ite (bvslt (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32)))) (bv #xffff8000 32)) (bv #x8000 16) (ite (bvslt (bv #x00007fff 32) (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))) (bv #x7fff 16) (extract 15 0 (bvadd (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000008 32)) (bvand (bv #x00000001 32) (bvashr (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bv #x00000007 32))))))) (bitvector 32)) (bv #x00000080 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1815 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32))))))) ...))))
Ran synthesizer for 1560 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-cast
  (vec-cast
   (vec-max
    (vec-min
     (vec-add
      (vec-bwand
       (sca-broadcast (int32_t (bv #x00000001 32)) 16)
       (vec-div
        (vec-mul
         (vec-cast
          (vec-sub
           (vec-cast
            (load
             (buffer input 'uint8)
             (ramp
              (sca-add
               (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
               (sca-sub
                (sca-sub (var-lookup 't101) (var-lookup 't106))
                (var-lookup 'input.min.0)))
              1
              16)
             (aligned 1 0))
            'int16
            16)
           (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
          'int32
          16)
         (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
        (sca-broadcast (int32_t (bv #x00000080 32)) 16)))
      (vec-div
       (vec-mul
        (vec-cast
         (vec-sub
          (vec-cast
           (load
            (buffer input 'uint8)
            (ramp
             (sca-add
              (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
              (sca-sub
               (sca-sub (var-lookup 't101) (var-lookup 't106))
               (var-lookup 'input.min.0)))
             1
             16)
            (aligned 1 0))
           'int16
           16)
          (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
         'int32
         16)
        (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
       (sca-broadcast (int32_t (bv #x00000100 32)) 16)))
     (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
    (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
   'int16
   16)
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t (bv #x0080 16)) 16) 'int32 16))
template:
  (vs-mpy-add
 ...
 (combine
  (cast
   ...
   (vs-shift-right
    ...
    (vs-mpy-add
     ...
     (vs-mpy-add
      ...
      (combine #<load-data> (broadcast ... (uint8_t input_zero)))
      (list (int8_t (bv #x01 8)) (int8_t (bv #xff 8)))
      #f
      #f
      #f
      'int16)
     (list (load-sca (buffer inv_sqrt 'int32) 0))
     #f
     #f
     #f
     'int32)
    (int32_t (bv #x00000008 32))
    #t
    x?$1442
    #t)
   'int16
   #t)
  (broadcast ... (int16_t (bv #x0080 16))))
 (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
 #f
 #f
 #f
 'int32)
axioms:
  (list
 #t
 (forall (idx) (&& (bvsle (app abstr-vals$1946 idx) (bv #x0080 16)) (bvsle (bv #x0080 16) (app abstr-vals$1946 idx)))))
optimized-halide-expr:
  (vec-add
 (vec-cast #<abstr-halide-expr> 'int32 16)
 (vec-cast #<abstr-halide-expr> 'int32 16))
optimized-template:
  (vs-mpy-add
 ...
 (combine #<abstr-expr> #<abstr-expr>)
 (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
 #f
 #f
 #f
 'int32)
optimized Halide 0:
  (int32_t
 (bvadd (sign-extend (app abstr-vals$1945 0) (bitvector 32)) (sign-extend (app abstr-vals$1946 0) (bitvector 32))))
optimized x86 0:
  (int32_t
 (bvadd (sign-extend (ite c$1818 (app abstr-vals$1945 idx$1817) (app abstr-vals$1946 idx$1817)) (bitvector 32)) (sign-extend (ite c$1820 (app abstr-vals$1945 idx$1819) (app abstr-vals$1946 idx$1819)) (bitvector 32))))
Ran synthesizer for 125 ms
(model
 [idx$1817 0]
 [c$1818 #t]
 [idx$1819 0]
 [c$1820 #f])
(vec-add
 (vec-cast #<abstr-halide-expr> 'int32 16)
 (vec-cast #<abstr-halide-expr> 'int32 16))
(vs-mpy-add
 ...
 (combine
  (cast
   ...
   (vs-shift-right
    ...
    (vs-mpy-add
     ...
     (vs-mpy-add
      ...
      (combine #<load-data> (broadcast ... (uint8_t input_zero)))
      (list (int8_t (bv #x01 8)) (int8_t (bv #xff 8)))
      #f
      #f
      #f
      'int16)
     (list (load-sca (buffer inv_sqrt 'int32) 0))
     #f
     #f
     #f
     'int32)
    (int32_t (bv #x00000008 32))
    #t
    x?$1442
    #t)
   'int16
   #t)
  (broadcast ... (int16_t (bv #x0080 16))))
 (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
 #f
 #f
 #f
 'int32)
Ran bounds analysis for 67 ms
Ran bounds analysis for 65 ms
"Extended success?"
#t
(vs-mpy-add
 ...
 (combine
  (cast
   ...
   (vs-shift-right
    ...
    (vs-mpy-add
     ...
     (vs-mpy-add
      ...
      (combine #<load-data> (broadcast ... (uint8_t input_zero)))
      (list (int8_t (bv #x01 8)) (int8_t (bv #xff 8)))
      #f
      #f
      #f
      'int16)
     (list (load-sca (buffer inv_sqrt 'int32) 0))
     #f
     #f
     #f
     'int32)
    (int32_t (bv #x00000008 32))
    #t
    x?$1442
    #t)
   'int16
   #t)
  (broadcast ... (int16_t (bv #x0080 16))))
 (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
 #f
 #f
 #f
 'int32)
"Building Expr:"
(vec-min
 (vec-add
  (vec-cast
   (vec-cast
    (vec-max
     (vec-min
      (vec-add
       (vec-bwand
        (sca-broadcast (int32_t (bv #x00000001 32)) 16)
        (vec-div
         (vec-mul
          (vec-cast
           (vec-sub
            (vec-cast
             (load
              (buffer input 'uint8)
              (ramp
               (sca-add
                (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
                (sca-sub
                 (sca-sub (var-lookup 't101) (var-lookup 't106))
                 (var-lookup 'input.min.0)))
               1
               16)
              (aligned 1 0))
             'int16
             16)
            (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
           'int32
           16)
          (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
         (sca-broadcast (int32_t (bv #x00000080 32)) 16)))
       (vec-div
        (vec-mul
         (vec-cast
          (vec-sub
           (vec-cast
            (load
             (buffer input 'uint8)
             (ramp
              (sca-add
               (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
               (sca-sub
                (sca-sub (var-lookup 't101) (var-lookup 't106))
                (var-lookup 'input.min.0)))
              1
              16)
             (aligned 1 0))
            'int16
            16)
           (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
          'int32
          16)
         (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
        (sca-broadcast (int32_t (bv #x00000100 32)) 16)))
      (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
     (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
    'int16
    16)
   'int32
   16)
  (vec-cast (sca-broadcast (int16_t (bv #x0080 16)) 16) 'int32 16))
 (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
"Fold templates"
(list
 (cast
  ...
  (vs-shift-right
   ...
   (vs-mpy-add
    ...
    (vs-mpy-add
     ...
     (combine #<load-data> (broadcast ... (uint8_t input_zero)))
     (list (int8_t (bv #x01 8)) (int8_t (bv #xff 8)))
     #f
     #f
     #f
     'int16)
    (list (load-sca (buffer inv_sqrt 'int32) 0))
    #f
    #f
    #f
    'int32)
   (int32_t (bv #x00000008 32))
   #t
   x?$1442
   #t)
  'int32
  x?$1953))
here(#(struct:cast ... #(struct:vs-shift-right ... #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:uint8_t input_zero))> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #xff 8))) #f #f #f int16) (#(struct:load-sca #(struct:buffer inv_sqrt int32) 0)) #f #f #f int32) #(struct:int32_t (bv #x00000008 32)) #t x?$1442 #t) int32 x?$1953))

"Replace templates"
'()
run-x86-synthesizer
halide-expr:
  (vec-min
 (vec-add
  (vec-cast
   (vec-cast
    (vec-max
     (vec-min
      (vec-add
       (vec-bwand
        (sca-broadcast (int32_t (bv #x00000001 32)) 16)
        (vec-div
         (vec-mul
          (vec-cast
           (vec-sub
            (vec-cast
             (load
              (buffer input 'uint8)
              (ramp
               (sca-add
                (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
                (sca-sub
                 (sca-sub (var-lookup 't101) (var-lookup 't106))
                 (var-lookup 'input.min.0)))
               1
               16)
              (aligned 1 0))
             'int16
             16)
            (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
           'int32
           16)
          (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
         (sca-broadcast (int32_t (bv #x00000080 32)) 16)))
       (vec-div
        (vec-mul
         (vec-cast
          (vec-sub
           (vec-cast
            (load
             (buffer input 'uint8)
             (ramp
              (sca-add
               (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
               (sca-sub
                (sca-sub (var-lookup 't101) (var-lookup 't106))
                (var-lookup 'input.min.0)))
              1
              16)
             (aligned 1 0))
            'int16
            16)
           (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
          'int32
          16)
         (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
        (sca-broadcast (int32_t (bv #x00000100 32)) 16)))
      (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
     (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
    'int16
    16)
   'int32
   16)
  (vec-cast (sca-broadcast (int16_t (bv #x0080 16)) 16) 'int32 16))
 (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
template:
  (cast
 ...
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (vs-mpy-add
    ...
    (combine #<load-data> (broadcast ... (uint8_t input_zero)))
    (list (int8_t (bv #x01 8)) (int8_t (bv #xff 8)))
    #f
    #f
    #f
    'int16)
   (list (load-sca (buffer inv_sqrt 'int32) 0))
   #f
   #f
   #f
   'int32)
  (int32_t (bv #x00000008 32))
  #t
  x?$1442
  #t)
 'int32
 x?$1953)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$1954 idx) (bv #x00800000 32)) (bvsle (bv #xff800000 32) (app abstr-vals$1954 idx)))))
optimized-halide-expr:
  (vec-min
 (vec-add
  (vec-cast
   (vec-cast
    (vec-max
     (vec-min
      #<abstr-halide-expr>
      (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
     (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
    'int16
    16)
   'int32
   16)
  (vec-cast (sca-broadcast (int16_t (bv #x0080 16)) 16) 'int32 16))
 (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
optimized-template:
  (cast ... #<abstr-expr> 'int32 x?$1953)
optimized Halide 0:
  (int32_t
 (ite (bvsle (bvadd (bv #x00000080 32) (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (app abstr-vals$1954 0) (bv #x00007fff 32)) (app abstr-vals$1954 0) (bv #x00007fff 32))) (ite (bvsle (app abstr-vals$1954 0) (bv #x00007fff 32)) (app abstr-vals$1954 0) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32))) (bv #x00007fff 32)) (bvadd (bv #x00000080 32) (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (app abstr-vals$1954 0) (bv #x00007fff 32)) (app abstr-vals$1954 0) (bv #x00007fff 32))) (ite (bvsle (app abstr-vals$1954 0) (bv #x00007fff 32)) (app abstr-vals$1954 0) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32))) (bv #x00007fff 32)))
optimized x86 0:
  (int32_t (app abstr-vals$1954 0))
Ran synthesizer for 103 ms
(unsat)
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (vec-min
 (vec-add
  (vec-cast
   (vec-cast
    (vec-max
     (vec-min
      (vec-add
       (vec-bwand
        (sca-broadcast (int32_t (bv #x00000001 32)) 16)
        (vec-div
         (vec-mul
          (vec-cast
           (vec-sub
            (vec-cast
             (load
              (buffer input 'uint8)
              (ramp
               (sca-add
                (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
                (sca-sub
                 (sca-sub (var-lookup 't101) (var-lookup 't106))
                 (var-lookup 'input.min.0)))
               1
               16)
              (aligned 1 0))
             'int16
             16)
            (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
           'int32
           16)
          (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
         (sca-broadcast (int32_t (bv #x00000080 32)) 16)))
       (vec-div
        (vec-mul
         (vec-cast
          (vec-sub
           (vec-cast
            (load
             (buffer input 'uint8)
             (ramp
              (sca-add
               (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
               (sca-sub
                (sca-sub (var-lookup 't101) (var-lookup 't106))
                (var-lookup 'input.min.0)))
              1
              16)
             (aligned 1 0))
            'int16
            16)
           (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
          'int32
          16)
         (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
        (sca-broadcast (int32_t (bv #x00000100 32)) 16)))
      (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
     (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
    'int16
    16)
   'int32
   16)
  (vec-cast (sca-broadcast (int16_t (bv #x0080 16)) 16) 'int32 16))
 (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
template:
  (minimum
 ...
 (vs-mpy-add
  ...
  (combine
   (cast
    ...
    (vs-shift-right
     ...
     (vs-mpy-add
      ...
      (vs-mpy-add
       ...
       (combine #<load-data> (broadcast ... (uint8_t input_zero)))
       (list (int8_t (bv #x01 8)) (int8_t (bv #xff 8)))
       #f
       #f
       #f
       'int16)
      (list (load-sca (buffer inv_sqrt 'int32) 0))
      #f
      #f
      #f
      'int32)
     (int32_t (bv #x00000008 32))
     #t
     x?$1442
     #t)
    'int16
    #t)
   (broadcast ... (int16_t (bv #x0080 16))))
  (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
  #f
  #f
  #f
  'int32)
 (broadcast ... (int32_t (bv #x00007fff 32))))
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$1955 idx) (bv #x0000807f 32)) (bvsle (bv #xffff8080 32) (app abstr-vals$1955 idx))))
 (forall (idx) (&& (bvsle (app abstr-vals$1956 idx) (bv #x00007fff 32)) (bvsle (bv #x00007fff 32) (app abstr-vals$1956 idx)))))
optimized-halide-expr:
  (vec-min #<abstr-halide-expr> #<abstr-halide-expr>)
optimized-template:
  (minimum ... #<abstr-expr> #<abstr-expr>)
optimized Halide 0:
  (int32_t
 (ite (bvsle (app abstr-vals$1955 0) (app abstr-vals$1956 0)) (app abstr-vals$1955 0) (app abstr-vals$1956 0)))
optimized x86 0:
  (int32_t
 (ite (bvsle (app abstr-vals$1955 0) (app abstr-vals$1956 0)) (app abstr-vals$1955 0) (app abstr-vals$1956 0)))
Ran synthesizer for 49 ms
(model)
(vec-min #<abstr-halide-expr> #<abstr-halide-expr>)
(minimum
 ...
 (vs-mpy-add
  ...
  (combine
   (cast
    ...
    (vs-shift-right
     ...
     (vs-mpy-add
      ...
      (vs-mpy-add
       ...
       (combine #<load-data> (broadcast ... (uint8_t input_zero)))
       (list (int8_t (bv #x01 8)) (int8_t (bv #xff 8)))
       #f
       #f
       #f
       'int16)
      (list (load-sca (buffer inv_sqrt 'int32) 0))
      #f
      #f
      #f
      'int32)
     (int32_t (bv #x00000008 32))
     #t
     x?$1442
     #t)
    'int16
    #t)
   (broadcast ... (int16_t (bv #x0080 16))))
  (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
  #f
  #f
  #f
  'int32)
 (broadcast ... (int32_t (bv #x00007fff 32))))
Ran bounds analysis for 44 ms
Ran bounds analysis for 34 ms
"Extended success?"
#t
(minimum
 ...
 (vs-mpy-add
  ...
  (combine
   (cast
    ...
    (vs-shift-right
     ...
     (vs-mpy-add
      ...
      (vs-mpy-add
       ...
       (combine #<load-data> (broadcast ... (uint8_t input_zero)))
       (list (int8_t (bv #x01 8)) (int8_t (bv #xff 8)))
       #f
       #f
       #f
       'int16)
      (list (load-sca (buffer inv_sqrt 'int32) 0))
      #f
      #f
      #f
      'int32)
     (int32_t (bv #x00000008 32))
     #t
     x?$1442
     #t)
    'int16
    #t)
   (broadcast ... (int16_t (bv #x0080 16))))
  (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
  #f
  #f
  #f
  'int32)
 (broadcast ... (int32_t (bv #x00007fff 32))))
"Building Expr:"
(vec-max
 (vec-min
  (vec-add
   (vec-cast
    (vec-cast
     (vec-max
      (vec-min
       (vec-add
        (vec-bwand
         (sca-broadcast (int32_t (bv #x00000001 32)) 16)
         (vec-div
          (vec-mul
           (vec-cast
            (vec-sub
             (vec-cast
              (load
               (buffer input 'uint8)
               (ramp
                (sca-add
                 (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
                 (sca-sub
                  (sca-sub (var-lookup 't101) (var-lookup 't106))
                  (var-lookup 'input.min.0)))
                1
                16)
               (aligned 1 0))
              'int16
              16)
             (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
            'int32
            16)
           (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
          (sca-broadcast (int32_t (bv #x00000080 32)) 16)))
        (vec-div
         (vec-mul
          (vec-cast
           (vec-sub
            (vec-cast
             (load
              (buffer input 'uint8)
              (ramp
               (sca-add
                (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
                (sca-sub
                 (sca-sub (var-lookup 't101) (var-lookup 't106))
                 (var-lookup 'input.min.0)))
               1
               16)
              (aligned 1 0))
             'int16
             16)
            (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
           'int32
           16)
          (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
         (sca-broadcast (int32_t (bv #x00000100 32)) 16)))
       (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
      (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
     'int16
     16)
    'int32
    16)
   (vec-cast (sca-broadcast (int16_t (bv #x0080 16)) 16) 'int32 16))
  (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
 (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
"Fold templates"
'()
here()

"Replace templates"
(list
 (cast
  ...
  (vs-mpy-add
   ...
   (combine
    (cast
     ...
     (vs-shift-right
      ...
      (vs-mpy-add
       ...
       (vs-mpy-add
        ...
        (combine #<load-data> (broadcast ... (uint8_t input_zero)))
        (list (int8_t (bv #x01 8)) (int8_t (bv #xff 8)))
        #f
        #f
        #f
        'int16)
       (list (load-sca (buffer inv_sqrt 'int32) 0))
       #f
       #f
       #f
       'int32)
      (int32_t (bv #x00000008 32))
      #t
      x?$1442
      #t)
     'int16
     #t)
    (broadcast ... (int16_t (bv #x0080 16))))
   (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
   #f
   #f
   #f
   'int32)
  'int32
  #t)
 (cast ... (broadcast ... (int32_t (bv #x00007fff 32))) 'int32 #t))
run-x86-synthesizer
halide-expr:
  (vec-max
 (vec-min
  (vec-add
   (vec-cast
    (vec-cast
     (vec-max
      (vec-min
       (vec-add
        (vec-bwand
         (sca-broadcast (int32_t (bv #x00000001 32)) 16)
         (vec-div
          (vec-mul
           (vec-cast
            (vec-sub
             (vec-cast
              (load
               (buffer input 'uint8)
               (ramp
                (sca-add
                 (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
                 (sca-sub
                  (sca-sub (var-lookup 't101) (var-lookup 't106))
                  (var-lookup 'input.min.0)))
                1
                16)
               (aligned 1 0))
              'int16
              16)
             (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
            'int32
            16)
           (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
          (sca-broadcast (int32_t (bv #x00000080 32)) 16)))
        (vec-div
         (vec-mul
          (vec-cast
           (vec-sub
            (vec-cast
             (load
              (buffer input 'uint8)
              (ramp
               (sca-add
                (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
                (sca-sub
                 (sca-sub (var-lookup 't101) (var-lookup 't106))
                 (var-lookup 'input.min.0)))
               1
               16)
              (aligned 1 0))
             'int16
             16)
            (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
           'int32
           16)
          (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
         (sca-broadcast (int32_t (bv #x00000100 32)) 16)))
       (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
      (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
     'int16
     16)
    'int32
    16)
   (vec-cast (sca-broadcast (int16_t (bv #x0080 16)) 16) 'int32 16))
  (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
 (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
template:
  (cast ... (broadcast ... (int32_t (bv #x00007fff 32))) 'int32 #t)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$1963 idx) (bv #x00007fff 32)) (bvsle (bv #x00007fff 32) (app abstr-vals$1963 idx)))))
optimized-halide-expr:
  (vec-max
 (vec-min
  (vec-add
   (vec-cast
    (vec-cast
     (vec-max
      (vec-min
       (vec-add
        (vec-bwand
         (sca-broadcast (int32_t (bv #x00000001 32)) 16)
         (vec-div
          (vec-mul
           (vec-cast
            (vec-sub
             (vec-cast
              (load
               (buffer input 'uint8)
               (ramp
                (sca-add
                 (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
                 (sca-sub
                  (sca-sub (var-lookup 't101) (var-lookup 't106))
                  (var-lookup 'input.min.0)))
                1
                16)
               (aligned 1 0))
              'int16
              16)
             (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
            'int32
            16)
           (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
          (sca-broadcast (int32_t (bv #x00000080 32)) 16)))
        (vec-div
         (vec-mul
          (vec-cast
           (vec-sub
            (vec-cast
             (load
              (buffer input 'uint8)
              (ramp
               (sca-add
                (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
                (sca-sub
                 (sca-sub (var-lookup 't101) (var-lookup 't106))
                 (var-lookup 'input.min.0)))
               1
               16)
              (aligned 1 0))
             'int16
             16)
            (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
           'int32
           16)
          (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
         (sca-broadcast (int32_t (bv #x00000100 32)) 16)))
       #<abstr-halide-expr>)
      (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
     'int16
     16)
    'int32
    16)
   (vec-cast (sca-broadcast (int16_t (bv #x0080 16)) 16) 'int32 16))
  #<abstr-halide-expr>)
 (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
optimized-template:
  (cast ... #<abstr-expr> 'int32 #t)
optimized Halide 0:
  (int32_t
 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bv #x00000080 32) (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (app abstr-vals$1963 0)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (app abstr-vals$1963 0))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (app abstr-vals$1963 0)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (app abstr-vals$1963 0)) (bv #xffff8000 32))) (bitvector 32))) (app abstr-vals$1963 0)) (bvadd (bv #x00000080 32) (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (app abstr-vals$1963 0)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (app abstr-vals$1963 0))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (app abstr-vals$1963 0)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (app abstr-vals$1963 0)) (bv #xffff8000 32))) (bitvector 32))) (app abstr-vals$1963 0))) (ite (bvsle (bvadd (bv #x00000080 32) (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (app abstr-vals$1963 0)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (app abstr-vals$1963 0))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (app abstr-vals$1963 0)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (app abstr-vals$1963 0)) (bv #xffff8000 32))) (bitvector 32))) (app abstr-vals$1963 0)) (bvadd (bv #x00000080 32) (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (app abstr-vals$1963 0)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (app abstr-vals$1963 0))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (app abstr-vals$1963 0)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (app abstr-vals$1963 0)) (bv #xffff8000 32))) (bitvector 32))) (app abstr-vals$1963 0)) (bv #xffff8000 32)))
optimized x86 0:
  (int32_t (app abstr-vals$1963 0))
run-x86-synthesizer
halide-expr:
  (vec-max
 (vec-min
  (vec-add
   (vec-cast
    (vec-cast
     (vec-max
      (vec-min
       (vec-add
        (vec-bwand
         (sca-broadcast (int32_t (bv #x00000001 32)) 16)
         (vec-div
          (vec-mul
           (vec-cast
            (vec-sub
             (vec-cast
              (load
               (buffer input 'uint8)
               (ramp
                (sca-add
                 (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
                 (sca-sub
                  (sca-sub (var-lookup 't101) (var-lookup 't106))
                  (var-lookup 'input.min.0)))
                1
                16)
               (aligned 1 0))
              'int16
              16)
             (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
            'int32
            16)
           (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
          (sca-broadcast (int32_t (bv #x00000080 32)) 16)))
        (vec-div
         (vec-mul
          (vec-cast
           (vec-sub
            (vec-cast
             (load
              (buffer input 'uint8)
              (ramp
               (sca-add
                (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
                (sca-sub
                 (sca-sub (var-lookup 't101) (var-lookup 't106))
                 (var-lookup 'input.min.0)))
               1
               16)
              (aligned 1 0))
             'int16
             16)
            (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
           'int32
           16)
          (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
         (sca-broadcast (int32_t (bv #x00000100 32)) 16)))
       (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
      (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
     'int16
     16)
    'int32
    16)
   (vec-cast (sca-broadcast (int16_t (bv #x0080 16)) 16) 'int32 16))
  (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
 (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
template:
  (cast
 ...
 (vs-mpy-add
  ...
  (combine
   (cast
    ...
    (vs-shift-right
     ...
     (vs-mpy-add
      ...
      (vs-mpy-add
       ...
       (combine #<load-data> (broadcast ... (uint8_t input_zero)))
       (list (int8_t (bv #x01 8)) (int8_t (bv #xff 8)))
       #f
       #f
       #f
       'int16)
      (list (load-sca (buffer inv_sqrt 'int32) 0))
      #f
      #f
      #f
      'int32)
     (int32_t (bv #x00000008 32))
     #t
     x?$1442
     #t)
    'int16
    #t)
   (broadcast ... (int16_t (bv #x0080 16))))
  (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
  #f
  #f
  #f
  'int32)
 'int32
 #t)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$1964 idx) (bv #x0000807f 32)) (bvsle (bv #xffff8080 32) (app abstr-vals$1964 idx)))))
optimized-halide-expr:
  (vec-max
 (vec-min #<abstr-halide-expr> (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
 (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
optimized-template:
  (cast ... #<abstr-expr> 'int32 #t)
optimized Halide 0:
  (int32_t
 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (app abstr-vals$1964 0) (bv #x00007fff 32)) (app abstr-vals$1964 0) (bv #x00007fff 32))) (ite (bvsle (app abstr-vals$1964 0) (bv #x00007fff 32)) (app abstr-vals$1964 0) (bv #x00007fff 32)) (bv #xffff8000 32)))
optimized x86 0:
  (int32_t (app abstr-vals$1964 0))
Ran synthesizer for 89 ms
(unsat)
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (vec-max
 (vec-min
  (vec-add
   (vec-cast
    (vec-cast
     (vec-max
      (vec-min
       (vec-add
        (vec-bwand
         (sca-broadcast (int32_t (bv #x00000001 32)) 16)
         (vec-div
          (vec-mul
           (vec-cast
            (vec-sub
             (vec-cast
              (load
               (buffer input 'uint8)
               (ramp
                (sca-add
                 (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
                 (sca-sub
                  (sca-sub (var-lookup 't101) (var-lookup 't106))
                  (var-lookup 'input.min.0)))
                1
                16)
               (aligned 1 0))
              'int16
              16)
             (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
            'int32
            16)
           (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
          (sca-broadcast (int32_t (bv #x00000080 32)) 16)))
        (vec-div
         (vec-mul
          (vec-cast
           (vec-sub
            (vec-cast
             (load
              (buffer input 'uint8)
              (ramp
               (sca-add
                (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
                (sca-sub
                 (sca-sub (var-lookup 't101) (var-lookup 't106))
                 (var-lookup 'input.min.0)))
               1
               16)
              (aligned 1 0))
             'int16
             16)
            (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
           'int32
           16)
          (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
         (sca-broadcast (int32_t (bv #x00000100 32)) 16)))
       (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
      (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
     'int16
     16)
    'int32
    16)
   (vec-cast (sca-broadcast (int16_t (bv #x0080 16)) 16) 'int32 16))
  (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
 (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
template:
  (maximum
 ...
 (minimum
  ...
  (vs-mpy-add
   ...
   (combine
    (cast
     ...
     (vs-shift-right
      ...
      (vs-mpy-add
       ...
       (vs-mpy-add
        ...
        (combine #<load-data> (broadcast ... (uint8_t input_zero)))
        (list (int8_t (bv #x01 8)) (int8_t (bv #xff 8)))
        #f
        #f
        #f
        'int16)
       (list (load-sca (buffer inv_sqrt 'int32) 0))
       #f
       #f
       #f
       'int32)
      (int32_t (bv #x00000008 32))
      #t
      x?$1442
      #t)
     'int16
     #t)
    (broadcast ... (int16_t (bv #x0080 16))))
   (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
   #f
   #f
   #f
   'int32)
  (broadcast ... (int32_t (bv #x00007fff 32))))
 (broadcast ... (int32_t (bv #xffff8000 32))))
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$1965 idx) (bv #x00007fff 32)) (bvsle (bv #xffff8080 32) (app abstr-vals$1965 idx))))
 (forall (idx) (&& (bvsle (app abstr-vals$1966 idx) (bv #xffff8000 32)) (bvsle (bv #xffff8000 32) (app abstr-vals$1966 idx)))))
optimized-halide-expr:
  (vec-max #<abstr-halide-expr> #<abstr-halide-expr>)
optimized-template:
  (maximum ... #<abstr-expr> #<abstr-expr>)
optimized Halide 0:
  (int32_t
 (ite (bvsle (app abstr-vals$1966 0) (app abstr-vals$1965 0)) (app abstr-vals$1965 0) (app abstr-vals$1966 0)))
optimized x86 0:
  (int32_t
 (ite (bvsle (app abstr-vals$1966 0) (app abstr-vals$1965 0)) (app abstr-vals$1965 0) (app abstr-vals$1966 0)))
Ran synthesizer for 47 ms
(model)
(vec-max #<abstr-halide-expr> #<abstr-halide-expr>)
(maximum
 ...
 (minimum
  ...
  (vs-mpy-add
   ...
   (combine
    (cast
     ...
     (vs-shift-right
      ...
      (vs-mpy-add
       ...
       (vs-mpy-add
        ...
        (combine #<load-data> (broadcast ... (uint8_t input_zero)))
        (list (int8_t (bv #x01 8)) (int8_t (bv #xff 8)))
        #f
        #f
        #f
        'int16)
       (list (load-sca (buffer inv_sqrt 'int32) 0))
       #f
       #f
       #f
       'int32)
      (int32_t (bv #x00000008 32))
      #t
      x?$1442
      #t)
     'int16
     #t)
    (broadcast ... (int16_t (bv #x0080 16))))
   (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
   #f
   #f
   #f
   'int32)
  (broadcast ... (int32_t (bv #x00007fff 32))))
 (broadcast ... (int32_t (bv #xffff8000 32))))
Ran bounds analysis for 41 ms
Ran bounds analysis for 27 ms
"Extended success?"
#t
(maximum
 ...
 (minimum
  ...
  (vs-mpy-add
   ...
   (combine
    (cast
     ...
     (vs-shift-right
      ...
      (vs-mpy-add
       ...
       (vs-mpy-add
        ...
        (combine #<load-data> (broadcast ... (uint8_t input_zero)))
        (list (int8_t (bv #x01 8)) (int8_t (bv #xff 8)))
        #f
        #f
        #f
        'int16)
       (list (load-sca (buffer inv_sqrt 'int32) 0))
       #f
       #f
       #f
       'int32)
      (int32_t (bv #x00000008 32))
      #t
      x?$1442
      #t)
     'int16
     #t)
    (broadcast ... (int16_t (bv #x0080 16))))
   (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
   #f
   #f
   #f
   'int32)
  (broadcast ... (int32_t (bv #x00007fff 32))))
 (broadcast ... (int32_t (bv #xffff8000 32))))
"Building Expr:"
(vec-cast
 (vec-max
  (vec-min
   (vec-add
    (vec-cast
     (vec-cast
      (vec-max
       (vec-min
        (vec-add
         (vec-bwand
          (sca-broadcast (int32_t (bv #x00000001 32)) 16)
          (vec-div
           (vec-mul
            (vec-cast
             (vec-sub
              (vec-cast
               (load
                (buffer input 'uint8)
                (ramp
                 (sca-add
                  (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
                  (sca-sub
                   (sca-sub (var-lookup 't101) (var-lookup 't106))
                   (var-lookup 'input.min.0)))
                 1
                 16)
                (aligned 1 0))
               'int16
               16)
              (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
             'int32
             16)
            (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
           (sca-broadcast (int32_t (bv #x00000080 32)) 16)))
         (vec-div
          (vec-mul
           (vec-cast
            (vec-sub
             (vec-cast
              (load
               (buffer input 'uint8)
               (ramp
                (sca-add
                 (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
                 (sca-sub
                  (sca-sub (var-lookup 't101) (var-lookup 't106))
                  (var-lookup 'input.min.0)))
                1
                16)
               (aligned 1 0))
              'int16
              16)
             (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
            'int32
            16)
           (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
          (sca-broadcast (int32_t (bv #x00000100 32)) 16)))
        (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
       (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
      'int16
      16)
     'int32
     16)
    (vec-cast (sca-broadcast (int16_t (bv #x0080 16)) 16) 'int32 16))
   (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
  (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
 'int16
 16)
"Fold templates"
(list
 (vs-mpy-add
  ...
  (combine
   (cast
    ...
    (vs-shift-right
     ...
     (vs-mpy-add
      ...
      (vs-mpy-add
       ...
       (combine #<load-data> (broadcast ... (uint8_t input_zero)))
       (list (int8_t (bv #x01 8)) (int8_t (bv #xff 8)))
       #f
       #f
       #f
       'int16)
      (list (load-sca (buffer inv_sqrt 'int32) 0))
      #f
      #f
      #f
      'int32)
     (int32_t (bv #x00000008 32))
     #t
     x?$1442
     #t)
    'int16
    #t)
   (broadcast ... (int16_t (bv #x0080 16))))
  (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
  x?$1969
  x?$1970
  x?$1971
  'int32))
here(#(struct:vs-mpy-add ... #<combine: #(struct:cast ... #(struct:vs-shift-right ... #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:uint8_t input_zero))> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #xff 8))) #f #f #f int16) (#(struct:load-sca #(struct:buffer inv_sqrt int32) 0)) #f #f #f int32) #(struct:int32_t (bv #x00000008 32)) #t x?$1442 #t) int16 #t) #(struct:broadcast ... #(struct:int16_t (bv #x0080 16)))> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) x?$1969 x?$1970 x?$1971 int32))

"Replace templates"
(list
 (cast
  ...
  (vs-mpy-add
   ...
   (combine
    (cast
     ...
     (vs-shift-right
      ...
      (vs-mpy-add
       ...
       (vs-mpy-add
        ...
        (combine #<load-data> (broadcast ... (uint8_t input_zero)))
        (list (int8_t (bv #x01 8)) (int8_t (bv #xff 8)))
        #f
        #f
        #f
        'int16)
       (list (load-sca (buffer inv_sqrt 'int32) 0))
       #f
       #f
       #f
       'int32)
      (int32_t (bv #x00000008 32))
      #t
      x?$1442
      #t)
     'int16
     #t)
    (broadcast ... (int16_t (bv #x0080 16))))
   (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
   #f
   #f
   #f
   'int32)
  'int16
  #t)
 (cast ... (broadcast ... (int32_t (bv #x00007fff 32))) 'int16 #t)
 (cast
  ...
  (minimum
   ...
   (vs-mpy-add
    ...
    (combine
     (cast
      ...
      (vs-shift-right
       ...
       (vs-mpy-add
        ...
        (vs-mpy-add
         ...
         (combine #<load-data> (broadcast ... (uint8_t input_zero)))
         (list (int8_t (bv #x01 8)) (int8_t (bv #xff 8)))
         #f
         #f
         #f
         'int16)
        (list (load-sca (buffer inv_sqrt 'int32) 0))
        #f
        #f
        #f
        'int32)
       (int32_t (bv #x00000008 32))
       #t
       x?$1442
       #t)
      'int16
      #t)
     (broadcast ... (int16_t (bv #x0080 16))))
    (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
    #f
    #f
    #f
    'int32)
   (broadcast ... (int32_t (bv #x00007fff 32))))
  'int16
  #t)
 (cast ... (broadcast ... (int32_t (bv #xffff8000 32))) 'int16 #t))
run-x86-synthesizer
halide-expr:
  (vec-cast
 (vec-max
  (vec-min
   (vec-add
    (vec-cast
     (vec-cast
      (vec-max
       (vec-min
        (vec-add
         (vec-bwand
          (sca-broadcast (int32_t (bv #x00000001 32)) 16)
          (vec-div
           (vec-mul
            (vec-cast
             (vec-sub
              (vec-cast
               (load
                (buffer input 'uint8)
                (ramp
                 (sca-add
                  (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
                  (sca-sub
                   (sca-sub (var-lookup 't101) (var-lookup 't106))
                   (var-lookup 'input.min.0)))
                 1
                 16)
                (aligned 1 0))
               'int16
               16)
              (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
             'int32
             16)
            (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
           (sca-broadcast (int32_t (bv #x00000080 32)) 16)))
         (vec-div
          (vec-mul
           (vec-cast
            (vec-sub
             (vec-cast
              (load
               (buffer input 'uint8)
               (ramp
                (sca-add
                 (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
                 (sca-sub
                  (sca-sub (var-lookup 't101) (var-lookup 't106))
                  (var-lookup 'input.min.0)))
                1
                16)
               (aligned 1 0))
              'int16
              16)
             (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
            'int32
            16)
           (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
          (sca-broadcast (int32_t (bv #x00000100 32)) 16)))
        (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
       (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
      'int16
      16)
     'int32
     16)
    (vec-cast (sca-broadcast (int16_t (bv #x0080 16)) 16) 'int32 16))
   (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
  (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
 'int16
 16)
template:
  (cast ... (broadcast ... (int32_t (bv #x00007fff 32))) 'int16 #t)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$1973 idx) (bv #x00007fff 32)) (bvsle (bv #x00007fff 32) (app abstr-vals$1973 idx)))))
optimized-halide-expr:
  (vec-cast
 (vec-max
  (vec-min
   (vec-add
    (vec-cast
     (vec-cast
      (vec-max
       (vec-min
        (vec-add
         (vec-bwand
          (sca-broadcast (int32_t (bv #x00000001 32)) 16)
          (vec-div
           (vec-mul
            (vec-cast
             (vec-sub
              (vec-cast
               (load
                (buffer input 'uint8)
                (ramp
                 (sca-add
                  (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
                  (sca-sub
                   (sca-sub (var-lookup 't101) (var-lookup 't106))
                   (var-lookup 'input.min.0)))
                 1
                 16)
                (aligned 1 0))
               'int16
               16)
              (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
             'int32
             16)
            (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
           (sca-broadcast (int32_t (bv #x00000080 32)) 16)))
         (vec-div
          (vec-mul
           (vec-cast
            (vec-sub
             (vec-cast
              (load
               (buffer input 'uint8)
               (ramp
                (sca-add
                 (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
                 (sca-sub
                  (sca-sub (var-lookup 't101) (var-lookup 't106))
                  (var-lookup 'input.min.0)))
                1
                16)
               (aligned 1 0))
              'int16
              16)
             (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
            'int32
            16)
           (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
          (sca-broadcast (int32_t (bv #x00000100 32)) 16)))
        #<abstr-halide-expr>)
       (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
      'int16
      16)
     'int32
     16)
    (vec-cast (sca-broadcast (int16_t (bv #x0080 16)) 16) 'int32 16))
   #<abstr-halide-expr>)
  (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
 'int16
 16)
optimized-template:
  (cast ... #<abstr-expr> 'int16 #t)
optimized Halide 0:
  (int16_t
 (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bv #x00000080 32) (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (app abstr-vals$1973 0)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (app abstr-vals$1973 0))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (app abstr-vals$1973 0)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (app abstr-vals$1973 0)) (bv #xffff8000 32))) (bitvector 32))) (app abstr-vals$1973 0)) (bvadd (bv #x00000080 32) (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (app abstr-vals$1973 0)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (app abstr-vals$1973 0))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (app abstr-vals$1973 0)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (app abstr-vals$1973 0)) (bv #xffff8000 32))) (bitvector 32))) (app abstr-vals$1973 0))) (ite (bvsle (bvadd (bv #x00000080 32) (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (app abstr-vals$1973 0)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (app abstr-vals$1973 0))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (app abstr-vals$1973 0)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (app abstr-vals$1973 0)) (bv #xffff8000 32))) (bitvector 32))) (app abstr-vals$1973 0)) (bvadd (bv #x00000080 32) (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (app abstr-vals$1973 0)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (app abstr-vals$1973 0))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (app abstr-vals$1973 0)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (app abstr-vals$1973 0)) (bv #xffff8000 32))) (bitvector 32))) (app abstr-vals$1973 0)) (bv #xffff8000 32))))
optimized x86 0:
  (int16_t
 (ite (bvslt (app abstr-vals$1973 0) (bv #xffff8000 32)) (bv #x8000 16) (ite (bvslt (bv #x00007fff 32) (app abstr-vals$1973 0)) (bv #x7fff 16) (extract 15 0 (app abstr-vals$1973 0)))))
run-x86-synthesizer
halide-expr:
  (vec-cast
 (vec-max
  (vec-min
   (vec-add
    (vec-cast
     (vec-cast
      (vec-max
       (vec-min
        (vec-add
         (vec-bwand
          (sca-broadcast (int32_t (bv #x00000001 32)) 16)
          (vec-div
           (vec-mul
            (vec-cast
             (vec-sub
              (vec-cast
               (load
                (buffer input 'uint8)
                (ramp
                 (sca-add
                  (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
                  (sca-sub
                   (sca-sub (var-lookup 't101) (var-lookup 't106))
                   (var-lookup 'input.min.0)))
                 1
                 16)
                (aligned 1 0))
               'int16
               16)
              (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
             'int32
             16)
            (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
           (sca-broadcast (int32_t (bv #x00000080 32)) 16)))
         (vec-div
          (vec-mul
           (vec-cast
            (vec-sub
             (vec-cast
              (load
               (buffer input 'uint8)
               (ramp
                (sca-add
                 (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
                 (sca-sub
                  (sca-sub (var-lookup 't101) (var-lookup 't106))
                  (var-lookup 'input.min.0)))
                1
                16)
               (aligned 1 0))
              'int16
              16)
             (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
            'int32
            16)
           (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
          (sca-broadcast (int32_t (bv #x00000100 32)) 16)))
        (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
       (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
      'int16
      16)
     'int32
     16)
    (vec-cast (sca-broadcast (int16_t (bv #x0080 16)) 16) 'int32 16))
   (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
  (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
 'int16
 16)
template:
  (cast ... (broadcast ... (int32_t (bv #xffff8000 32))) 'int16 #t)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$1974 idx) (bv #xffff8000 32)) (bvsle (bv #xffff8000 32) (app abstr-vals$1974 idx)))))
optimized-halide-expr:
  (vec-cast
 (vec-max
  (vec-min
   (vec-add
    (vec-cast
     (vec-cast
      (vec-max
       (vec-min
        (vec-add
         (vec-bwand
          (sca-broadcast (int32_t (bv #x00000001 32)) 16)
          (vec-div
           (vec-mul
            (vec-cast
             (vec-sub
              (vec-cast
               (load
                (buffer input 'uint8)
                (ramp
                 (sca-add
                  (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
                  (sca-sub
                   (sca-sub (var-lookup 't101) (var-lookup 't106))
                   (var-lookup 'input.min.0)))
                 1
                 16)
                (aligned 1 0))
               'int16
               16)
              (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
             'int32
             16)
            (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
           (sca-broadcast (int32_t (bv #x00000080 32)) 16)))
         (vec-div
          (vec-mul
           (vec-cast
            (vec-sub
             (vec-cast
              (load
               (buffer input 'uint8)
               (ramp
                (sca-add
                 (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
                 (sca-sub
                  (sca-sub (var-lookup 't101) (var-lookup 't106))
                  (var-lookup 'input.min.0)))
                1
                16)
               (aligned 1 0))
              'int16
              16)
             (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
            'int32
            16)
           (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
          (sca-broadcast (int32_t (bv #x00000100 32)) 16)))
        (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
       #<abstr-halide-expr>)
      'int16
      16)
     'int32
     16)
    (vec-cast (sca-broadcast (int16_t (bv #x0080 16)) 16) 'int32 16))
   (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
  #<abstr-halide-expr>)
 'int16
 16)
optimized-template:
  (cast ... #<abstr-expr> 'int16 #t)
optimized Halide 0:
  (int16_t
 (extract 15 0 (ite (bvsle (app abstr-vals$1974 0) (ite (bvsle (bvadd (bv #x00000080 32) (sign-extend (extract 15 0 (ite (bvsle (app abstr-vals$1974 0) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (app abstr-vals$1974 0))) (bitvector 32))) (bv #x00007fff 32)) (bvadd (bv #x00000080 32) (sign-extend (extract 15 0 (ite (bvsle (app abstr-vals$1974 0) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (app abstr-vals$1974 0))) (bitvector 32))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bv #x00000080 32) (sign-extend (extract 15 0 (ite (bvsle (app abstr-vals$1974 0) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (app abstr-vals$1974 0))) (bitvector 32))) (bv #x00007fff 32)) (bvadd (bv #x00000080 32) (sign-extend (extract 15 0 (ite (bvsle (app abstr-vals$1974 0) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (app abstr-vals$1974 0))) (bitvector 32))) (bv #x00007fff 32)) (app abstr-vals$1974 0))))
optimized x86 0:
  (int16_t
 (ite (bvslt (app abstr-vals$1974 0) (bv #xffff8000 32)) (bv #x8000 16) (ite (bvslt (bv #x00007fff 32) (app abstr-vals$1974 0)) (bv #x7fff 16) (extract 15 0 (app abstr-vals$1974 0)))))
run-x86-synthesizer
halide-expr:
  (vec-cast
 (vec-max
  (vec-min
   (vec-add
    (vec-cast
     (vec-cast
      (vec-max
       (vec-min
        (vec-add
         (vec-bwand
          (sca-broadcast (int32_t (bv #x00000001 32)) 16)
          (vec-div
           (vec-mul
            (vec-cast
             (vec-sub
              (vec-cast
               (load
                (buffer input 'uint8)
                (ramp
                 (sca-add
                  (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
                  (sca-sub
                   (sca-sub (var-lookup 't101) (var-lookup 't106))
                   (var-lookup 'input.min.0)))
                 1
                 16)
                (aligned 1 0))
               'int16
               16)
              (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
             'int32
             16)
            (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
           (sca-broadcast (int32_t (bv #x00000080 32)) 16)))
         (vec-div
          (vec-mul
           (vec-cast
            (vec-sub
             (vec-cast
              (load
               (buffer input 'uint8)
               (ramp
                (sca-add
                 (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
                 (sca-sub
                  (sca-sub (var-lookup 't101) (var-lookup 't106))
                  (var-lookup 'input.min.0)))
                1
                16)
               (aligned 1 0))
              'int16
              16)
             (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
            'int32
            16)
           (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
          (sca-broadcast (int32_t (bv #x00000100 32)) 16)))
        (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
       (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
      'int16
      16)
     'int32
     16)
    (vec-cast (sca-broadcast (int16_t (bv #x0080 16)) 16) 'int32 16))
   (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
  (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
 'int16
 16)
template:
  (vs-mpy-add
 ...
 (combine
  (cast
   ...
   (vs-shift-right
    ...
    (vs-mpy-add
     ...
     (vs-mpy-add
      ...
      (combine #<load-data> (broadcast ... (uint8_t input_zero)))
      (list (int8_t (bv #x01 8)) (int8_t (bv #xff 8)))
      #f
      #f
      #f
      'int16)
     (list (load-sca (buffer inv_sqrt 'int32) 0))
     #f
     #f
     #f
     'int32)
    (int32_t (bv #x00000008 32))
    #t
    x?$1442
    #t)
   'int16
   #t)
  (broadcast ... (int16_t (bv #x0080 16))))
 (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
 x?$1969
 x?$1970
 x?$1971
 'int32)
axioms:
  (list
 #t
 (forall (idx) (&& (bvsle (app abstr-vals$1976 idx) (bv #x0080 16)) (bvsle (bv #x0080 16) (app abstr-vals$1976 idx)))))
optimized-halide-expr:
  (vec-cast
 (vec-max
  (vec-min
   (vec-add
    (vec-cast #<abstr-halide-expr> 'int32 16)
    (vec-cast #<abstr-halide-expr> 'int32 16))
   (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
  (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
 'int16
 16)
optimized-template:
  (vs-mpy-add
 ...
 (combine #<abstr-expr> #<abstr-expr>)
 (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
 x?$1969
 x?$1970
 x?$1971
 'int32)
optimized Halide 0:
  (int16_t
 (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (sign-extend (app abstr-vals$1975 0) (bitvector 32)) (sign-extend (app abstr-vals$1976 0) (bitvector 32))) (bv #x00007fff 32)) (bvadd (sign-extend (app abstr-vals$1975 0) (bitvector 32)) (sign-extend (app abstr-vals$1976 0) (bitvector 32))) (bv #x00007fff 32))) (ite (bvsle (bvadd (sign-extend (app abstr-vals$1975 0) (bitvector 32)) (sign-extend (app abstr-vals$1976 0) (bitvector 32))) (bv #x00007fff 32)) (bvadd (sign-extend (app abstr-vals$1975 0) (bitvector 32)) (sign-extend (app abstr-vals$1976 0) (bitvector 32))) (bv #x00007fff 32)) (bv #xffff8000 32))))
optimized x86 0:
  (int32_t
 (ite* (⊢ (&& (! x?$1971) (! (&& x?$1969 x?$1971))) (ite x?$1969 (bvadd (ite x?$1969 (bvadd (ite x?$1970 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (sign-extend (app abstr-vals$1975 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1970 (bv #x00000001 32) (bv #x00000000 32))))) (sign-extend (app abstr-vals$1975 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1970 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (sign-extend (app abstr-vals$1975 0) (bitvector 32)) (ite x?$1970 (bv #x00000001 32) (bv #x00000000 32)))) (ite (bvsle (bvadd (bv #x80000000 32) (bvneg (ite (bvsle (ite x?$1969 (bvadd (ite x?$1970 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (sign-extend (app abstr-vals$1975 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1970 (bv #x00000001 32) (bv #x00000000 32))))) (sign-extend (app abstr-vals$1975 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1970 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (sign-extend (app abstr-vals$1975 0) (bitvector 32)) (ite x?$1970 (bv #x00000001 32) (bv #x00000000 32)))) (bv #x00000000 32)) (ite x?$1969 (bvadd (ite x?$1970 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (sign-extend (app abstr-vals$1975 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1970 (bv #x00000001 32) (bv #x00000000 32))))) (sign-extend (app abstr-vals$1975 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1970 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (sign-extend (app abstr-vals$1975 0) (bitvector 32)) (ite x?$1970 (bv #x00000001 32) (bv #x00000000 32)))) (bv #x00000000 32)))) (ite (bvsle (sign-extend (app abstr-vals$1976 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$1969 (bvadd (ite x?$1970 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (sign-extend (app abstr-vals$1975 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1970 (bv #x00000001 32) (bv #x00000000 32))))) (sign-extend (app abstr-vals$1975 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1970 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (sign-extend (app abstr-vals$1975 0) (bitvector 32)) (ite x?$1970 (bv #x00000001 32) (bv #x00000000 32))))) (ite x?$1969 (bvadd (ite x?$1970 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (sign-extend (app abstr-vals$1975 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1970 (bv #x00000001 32) (bv #x00000000 32))))) (sign-extend (app abstr-vals$1975 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1970 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (sign-extend (app abstr-vals$1975 0) (bitvector 32)) (ite x?$1970 (bv #x00000001 32) (bv #x00000000 32)))) (bv #x00000000 32))))) (sign-extend (app abstr-vals$1976 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$1969 (bvadd (ite x?$1970 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (sign-extend (app abstr-vals$1975 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1970 (bv #x00000001 32) (bv #x00000000 32))))) (sign-extend (app abstr-vals$1975 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1970 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (sign-extend (app abstr-vals$1975 0) (bitvector 32)) (ite x?$1970 (bv #x00000001 32) (bv #x00000000 32))))) (ite x?$1969 (bvadd (ite x?$1970 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (sign-extend (app abstr-vals$1975 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1970 (bv #x00000001 32) (bv #x00000000 32))))) (sign-extend (app abstr-vals$1975 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1970 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (sign-extend (app abstr-vals$1975 0) (bitvector 32)) (ite x?$1970 (bv #x00000001 32) (bv #x00000000 32)))) (bv #x00000000 32)))))) (ite (bvsle (sign-extend (app abstr-vals$1976 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$1969 (bvadd (ite x?$1970 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (sign-extend (app abstr-vals$1975 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1970 (bv #x00000001 32) (bv #x00000000 32))))) (sign-extend (app abstr-vals$1975 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1970 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (sign-extend (app abstr-vals$1975 0) (bitvector 32)) (ite x?$1970 (bv #x00000001 32) (bv #x00000000 32))))) (ite x?$1969 (bvadd (ite x?$1970 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (sign-extend (app abstr-vals$1975 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1970 (bv #x00000001 32) (bv #x00000000 32))))) (sign-extend (app abstr-vals$1975 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1970 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (sign-extend (app abstr-vals$1975 0) (bitvector 32)) (ite x?$1970 (bv #x00000001 32) (bv #x00000000 32)))) (bv #x00000000 32))))) (sign-extend (app abstr-vals$1976 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$1969 (bvadd (ite x?$1970 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (sign-extend (app abstr-vals$1975 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1970 (bv #x00000001 32) (bv #x00000000 32))))) (sign-extend (app abstr-vals$1975 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1970 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (sign-extend (app abstr-vals$1975 0) (bitvector 32)) (ite x?$1970 (bv #x00000001 32) (bv #x00000000 32))))) (ite x?$1969 (bvadd (ite x?$1970 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (sign-extend (app abstr-vals$1975 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1970 (bv #x00000001 32) (bv #x00000000 32))))) (sign-extend (app abstr-vals$1975 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1970 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (sign-extend (app abstr-vals$1975 0) (bitvector 32)) (ite x?$1970 (bv #x00000001 32) (bv #x00000000 32)))) (bv #x00000000 32))))) (bvadd (bv #x80000000 32) (bvneg (ite (bvsle (ite x?$1969 (bvadd (ite x?$1970 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (sign-extend (app abstr-vals$1975 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1970 (bv #x00000001 32) (bv #x00000000 32))))) (sign-extend (app abstr-vals$1975 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1970 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (sign-extend (app abstr-vals$1975 0) (bitvector 32)) (ite x?$1970 (bv #x00000001 32) (bv #x00000000 32)))) (bv #x00000000 32)) (ite x?$1969 (bvadd (ite x?$1970 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (sign-extend (app abstr-vals$1975 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1970 (bv #x00000001 32) (bv #x00000000 32))))) (sign-extend (app abstr-vals$1975 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1970 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (sign-extend (app abstr-vals$1975 0) (bitvector 32)) (ite x?$1970 (bv #x00000001 32) (bv #x00000000 32)))) (bv #x00000000 32)))))) (bvadd (sign-extend (app abstr-vals$1976 0) (bitvector 32)) (ite x?$1969 (bvadd (ite x?$1970 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (sign-extend (app abstr-vals$1975 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1970 (bv #x00000001 32) (bv #x00000000 32))))) (sign-extend (app abstr-vals$1975 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1970 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (sign-extend (app abstr-vals$1975 0) (bitvector 32)) (ite x?$1970 (bv #x00000001 32) (bv #x00000000 32))))))) (⊢ (|| (&& x?$1969 x?$1971) (&& x?$1971 (! (&& x?$1969 x?$1971)))) (bvashr (ite x?$1969 (bvadd (ite x?$1969 (bvadd (ite x?$1970 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (sign-extend (app abstr-vals$1975 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1970 (bv #x00000001 32) (bv #x00000000 32))))) (sign-extend (app abstr-vals$1975 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1970 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (sign-extend (app abstr-vals$1975 0) (bitvector 32)) (ite x?$1970 (bv #x00000001 32) (bv #x00000000 32)))) (ite (bvsle (bvadd (bv #x80000000 32) (bvneg (ite (bvsle (ite x?$1969 (bvadd (ite x?$1970 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (sign-extend (app abstr-vals$1975 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1970 (bv #x00000001 32) (bv #x00000000 32))))) (sign-extend (app abstr-vals$1975 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1970 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (sign-extend (app abstr-vals$1975 0) (bitvector 32)) (ite x?$1970 (bv #x00000001 32) (bv #x00000000 32)))) (bv #x00000000 32)) (ite x?$1969 (bvadd (ite x?$1970 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (sign-extend (app abstr-vals$1975 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1970 (bv #x00000001 32) (bv #x00000000 32))))) (sign-extend (app abstr-vals$1975 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1970 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (sign-extend (app abstr-vals$1975 0) (bitvector 32)) (ite x?$1970 (bv #x00000001 32) (bv #x00000000 32)))) (bv #x00000000 32)))) (ite (bvsle (sign-extend (app abstr-vals$1976 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$1969 (bvadd (ite x?$1970 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (sign-extend (app abstr-vals$1975 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1970 (bv #x00000001 32) (bv #x00000000 32))))) (sign-extend (app abstr-vals$1975 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1970 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (sign-extend (app abstr-vals$1975 0) (bitvector 32)) (ite x?$1970 (bv #x00000001 32) (bv #x00000000 32))))) (ite x?$1969 (bvadd (ite x?$1970 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (sign-extend (app abstr-vals$1975 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1970 (bv #x00000001 32) (bv #x00000000 32))))) (sign-extend (app abstr-vals$1975 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1970 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (sign-extend (app abstr-vals$1975 0) (bitvector 32)) (ite x?$1970 (bv #x00000001 32) (bv #x00000000 32)))) (bv #x00000000 32))))) (sign-extend (app abstr-vals$1976 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$1969 (bvadd (ite x?$1970 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (sign-extend (app abstr-vals$1975 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1970 (bv #x00000001 32) (bv #x00000000 32))))) (sign-extend (app abstr-vals$1975 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1970 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (sign-extend (app abstr-vals$1975 0) (bitvector 32)) (ite x?$1970 (bv #x00000001 32) (bv #x00000000 32))))) (ite x?$1969 (bvadd (ite x?$1970 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (sign-extend (app abstr-vals$1975 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1970 (bv #x00000001 32) (bv #x00000000 32))))) (sign-extend (app abstr-vals$1975 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1970 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (sign-extend (app abstr-vals$1975 0) (bitvector 32)) (ite x?$1970 (bv #x00000001 32) (bv #x00000000 32)))) (bv #x00000000 32)))))) (ite (bvsle (sign-extend (app abstr-vals$1976 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$1969 (bvadd (ite x?$1970 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (sign-extend (app abstr-vals$1975 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1970 (bv #x00000001 32) (bv #x00000000 32))))) (sign-extend (app abstr-vals$1975 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1970 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (sign-extend (app abstr-vals$1975 0) (bitvector 32)) (ite x?$1970 (bv #x00000001 32) (bv #x00000000 32))))) (ite x?$1969 (bvadd (ite x?$1970 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (sign-extend (app abstr-vals$1975 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1970 (bv #x00000001 32) (bv #x00000000 32))))) (sign-extend (app abstr-vals$1975 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1970 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (sign-extend (app abstr-vals$1975 0) (bitvector 32)) (ite x?$1970 (bv #x00000001 32) (bv #x00000000 32)))) (bv #x00000000 32))))) (sign-extend (app abstr-vals$1976 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$1969 (bvadd (ite x?$1970 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (sign-extend (app abstr-vals$1975 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1970 (bv #x00000001 32) (bv #x00000000 32))))) (sign-extend (app abstr-vals$1975 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1970 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (sign-extend (app abstr-vals$1975 0) (bitvector 32)) (ite x?$1970 (bv #x00000001 32) (bv #x00000000 32))))) (ite x?$1969 (bvadd (ite x?$1970 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (sign-extend (app abstr-vals$1975 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1970 (bv #x00000001 32) (bv #x00000000 32))))) (sign-extend (app abstr-vals$1975 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1970 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (sign-extend (app abstr-vals$1975 0) (bitvector 32)) (ite x?$1970 (bv #x00000001 32) (bv #x00000000 32)))) (bv #x00000000 32))))) (bvadd (bv #x80000000 32) (bvneg (ite (bvsle (ite x?$1969 (bvadd (ite x?$1970 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (sign-extend (app abstr-vals$1975 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1970 (bv #x00000001 32) (bv #x00000000 32))))) (sign-extend (app abstr-vals$1975 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1970 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (sign-extend (app abstr-vals$1975 0) (bitvector 32)) (ite x?$1970 (bv #x00000001 32) (bv #x00000000 32)))) (bv #x00000000 32)) (ite x?$1969 (bvadd (ite x?$1970 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (sign-extend (app abstr-vals$1975 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1970 (bv #x00000001 32) (bv #x00000000 32))))) (sign-extend (app abstr-vals$1975 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1970 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (sign-extend (app abstr-vals$1975 0) (bitvector 32)) (ite x?$1970 (bv #x00000001 32) (bv #x00000000 32)))) (bv #x00000000 32)))))) (bvadd (sign-extend (app abstr-vals$1976 0) (bitvector 32)) (ite x?$1969 (bvadd (ite x?$1970 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (sign-extend (app abstr-vals$1975 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1970 (bv #x00000001 32) (bv #x00000000 32))))) (sign-extend (app abstr-vals$1975 0) (bitvector 32)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1970 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (sign-extend (app abstr-vals$1975 0) (bitvector 32)) (ite x?$1970 (bv #x00000001 32) (bv #x00000000 32)))))) (bv #x00000001 32)))))
Ran synthesizer for 20 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-cast
 (vec-max
  (vec-min
   (vec-add
    (vec-cast
     (vec-cast
      (vec-max
       (vec-min
        (vec-add
         (vec-bwand
          (sca-broadcast (int32_t (bv #x00000001 32)) 16)
          (vec-div
           (vec-mul
            (vec-cast
             (vec-sub
              (vec-cast
               (load
                (buffer input 'uint8)
                (ramp
                 (sca-add
                  (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
                  (sca-sub
                   (sca-sub (var-lookup 't101) (var-lookup 't106))
                   (var-lookup 'input.min.0)))
                 1
                 16)
                (aligned 1 0))
               'int16
               16)
              (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
             'int32
             16)
            (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
           (sca-broadcast (int32_t (bv #x00000080 32)) 16)))
         (vec-div
          (vec-mul
           (vec-cast
            (vec-sub
             (vec-cast
              (load
               (buffer input 'uint8)
               (ramp
                (sca-add
                 (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
                 (sca-sub
                  (sca-sub (var-lookup 't101) (var-lookup 't106))
                  (var-lookup 'input.min.0)))
                1
                16)
               (aligned 1 0))
              'int16
              16)
             (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
            'int32
            16)
           (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
          (sca-broadcast (int32_t (bv #x00000100 32)) 16)))
        (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
       (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
      'int16
      16)
     'int32
     16)
    (vec-cast (sca-broadcast (int16_t (bv #x0080 16)) 16) 'int32 16))
   (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
  (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
 'int16
 16)
template:
  (cast
 ...
 (vs-mpy-add
  ...
  (combine
   (cast
    ...
    (vs-shift-right
     ...
     (vs-mpy-add
      ...
      (vs-mpy-add
       ...
       (combine #<load-data> (broadcast ... (uint8_t input_zero)))
       (list (int8_t (bv #x01 8)) (int8_t (bv #xff 8)))
       #f
       #f
       #f
       'int16)
      (list (load-sca (buffer inv_sqrt 'int32) 0))
      #f
      #f
      #f
      'int32)
     (int32_t (bv #x00000008 32))
     #t
     x?$1442
     #t)
    'int16
    #t)
   (broadcast ... (int16_t (bv #x0080 16))))
  (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
  #f
  #f
  #f
  'int32)
 'int16
 #t)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$1977 idx) (bv #x0000807f 32)) (bvsle (bv #xffff8080 32) (app abstr-vals$1977 idx)))))
optimized-halide-expr:
  (vec-cast
 (vec-max
  (vec-min
   #<abstr-halide-expr>
   (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
  (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
 'int16
 16)
optimized-template:
  (cast ... #<abstr-expr> 'int16 #t)
optimized Halide 0:
  (int16_t
 (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (app abstr-vals$1977 0) (bv #x00007fff 32)) (app abstr-vals$1977 0) (bv #x00007fff 32))) (ite (bvsle (app abstr-vals$1977 0) (bv #x00007fff 32)) (app abstr-vals$1977 0) (bv #x00007fff 32)) (bv #xffff8000 32))))
optimized x86 0:
  (int16_t
 (ite (bvslt (app abstr-vals$1977 0) (bv #xffff8000 32)) (bv #x8000 16) (ite (bvslt (bv #x00007fff 32) (app abstr-vals$1977 0)) (bv #x7fff 16) (extract 15 0 (app abstr-vals$1977 0)))))
Ran synthesizer for 83 ms
(model)
(vec-cast
 (vec-max
  (vec-min
   #<abstr-halide-expr>
   (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
  (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
 'int16
 16)
(cast
 ...
 (vs-mpy-add
  ...
  (combine
   (cast
    ...
    (vs-shift-right
     ...
     (vs-mpy-add
      ...
      (vs-mpy-add
       ...
       (combine #<load-data> (broadcast ... (uint8_t input_zero)))
       (list (int8_t (bv #x01 8)) (int8_t (bv #xff 8)))
       #f
       #f
       #f
       'int16)
      (list (load-sca (buffer inv_sqrt 'int32) 0))
      #f
      #f
      #f
      'int32)
     (int32_t (bv #x00000008 32))
     #t
     x?$1442
     #t)
    'int16
    #t)
   (broadcast ... (int16_t (bv #x0080 16))))
  (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
  #f
  #f
  #f
  'int32)
 'int16
 #t)
Ran bounds analysis for 28 ms
Ran bounds analysis for 15 ms
"Success?"
#t
(cast ... (vs-mpy-add ... (combine (cast ... (vs-shift-right ... (vs-mpy-add ... (vs-mpy-add ... (combine #<load-data> (broadcast ... (uint8_t input_zero))) (list (int8_t (bv #x01 8)) (int8_t (bv #xff 8))) #f #f #f 'int16) (list (load-sca (buffer inv_sqrt 'int32) 0)) #f #f #f 'int32) (int32_t (bv #x00000008 32)) #t x?$1442 #t) 'int16 #t) (broadcast ... (int16_t (bv #x0080 16)))) (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8))) #f #f #f 'int32) 'int16 #t)
"Building Expr:"
(sca-broadcast (int16_t (bv #x00ff 16)) 16)
"Fold templates"
'()
here()

"Replace templates"
'()
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (sca-broadcast (int16_t (bv #x00ff 16)) 16)
template:
  (broadcast ... (int16_t (bv #x00ff 16)))
axioms:
  '()
optimized-halide-expr:
  (sca-broadcast (int16_t (bv #x00ff 16)) 16)
optimized-template:
  (broadcast ... (int16_t (bv #x00ff 16)))
optimized Halide 0:
  (int16_t (bv #x00ff 16))
optimized x86 0:
  (int16_t (bv #x00ff 16))
Ran synthesizer for 18 ms
(model)
(sca-broadcast (int16_t (bv #x00ff 16)) 16)
(broadcast ... (int16_t (bv #x00ff 16)))
Ran bounds analysis for 26 ms
Ran bounds analysis for 14 ms
"Extended success?"
#t
(broadcast ... (int16_t (bv #x00ff 16)))
"Building Expr:"
(vec-min
 (vec-cast
  (vec-max
   (vec-min
    (vec-add
     (vec-cast
      (vec-cast
       (vec-max
        (vec-min
         (vec-add
          (vec-bwand
           (sca-broadcast (int32_t (bv #x00000001 32)) 16)
           (vec-div
            (vec-mul
             (vec-cast
              (vec-sub
               (vec-cast
                (load
                 (buffer input 'uint8)
                 (ramp
                  (sca-add
                   (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
                   (sca-sub
                    (sca-sub (var-lookup 't101) (var-lookup 't106))
                    (var-lookup 'input.min.0)))
                  1
                  16)
                 (aligned 1 0))
                'int16
                16)
               (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
              'int32
              16)
             (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
            (sca-broadcast (int32_t (bv #x00000080 32)) 16)))
          (vec-div
           (vec-mul
            (vec-cast
             (vec-sub
              (vec-cast
               (load
                (buffer input 'uint8)
                (ramp
                 (sca-add
                  (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
                  (sca-sub
                   (sca-sub (var-lookup 't101) (var-lookup 't106))
                   (var-lookup 'input.min.0)))
                 1
                 16)
                (aligned 1 0))
               'int16
               16)
              (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
             'int32
             16)
            (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
           (sca-broadcast (int32_t (bv #x00000100 32)) 16)))
         (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
        (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
       'int16
       16)
      'int32
      16)
     (vec-cast (sca-broadcast (int16_t (bv #x0080 16)) 16) 'int32 16))
    (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
   (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
  'int16
  16)
 (sca-broadcast (int16_t (bv #x00ff 16)) 16))
"Fold templates"
(list
 (cast
  ...
  (vs-mpy-add
   ...
   (combine
    (cast
     ...
     (vs-shift-right
      ...
      (vs-mpy-add
       ...
       (vs-mpy-add
        ...
        (combine #<load-data> (broadcast ... (uint8_t input_zero)))
        (list (int8_t (bv #x01 8)) (int8_t (bv #xff 8)))
        #f
        #f
        #f
        'int16)
       (list (load-sca (buffer inv_sqrt 'int32) 0))
       #f
       #f
       #f
       'int32)
      (int32_t (bv #x00000008 32))
      #t
      x?$1442
      #t)
     'int16
     #t)
    (broadcast ... (int16_t (bv #x0080 16))))
   (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
   #f
   #f
   #f
   'int32)
  'int16
  x?$1979))
here(#(struct:cast ... #(struct:vs-mpy-add ... #<combine: #(struct:cast ... #(struct:vs-shift-right ... #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:uint8_t input_zero))> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #xff 8))) #f #f #f int16) (#(struct:load-sca #(struct:buffer inv_sqrt int32) 0)) #f #f #f int32) #(struct:int32_t (bv #x00000008 32)) #t x?$1442 #t) int16 #t) #(struct:broadcast ... #(struct:int16_t (bv #x0080 16)))> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32) int16 x?$1979))

"Replace templates"
'()
run-x86-synthesizer
halide-expr:
  (vec-min
 (vec-cast
  (vec-max
   (vec-min
    (vec-add
     (vec-cast
      (vec-cast
       (vec-max
        (vec-min
         (vec-add
          (vec-bwand
           (sca-broadcast (int32_t (bv #x00000001 32)) 16)
           (vec-div
            (vec-mul
             (vec-cast
              (vec-sub
               (vec-cast
                (load
                 (buffer input 'uint8)
                 (ramp
                  (sca-add
                   (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
                   (sca-sub
                    (sca-sub (var-lookup 't101) (var-lookup 't106))
                    (var-lookup 'input.min.0)))
                  1
                  16)
                 (aligned 1 0))
                'int16
                16)
               (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
              'int32
              16)
             (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
            (sca-broadcast (int32_t (bv #x00000080 32)) 16)))
          (vec-div
           (vec-mul
            (vec-cast
             (vec-sub
              (vec-cast
               (load
                (buffer input 'uint8)
                (ramp
                 (sca-add
                  (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
                  (sca-sub
                   (sca-sub (var-lookup 't101) (var-lookup 't106))
                   (var-lookup 'input.min.0)))
                 1
                 16)
                (aligned 1 0))
               'int16
               16)
              (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
             'int32
             16)
            (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
           (sca-broadcast (int32_t (bv #x00000100 32)) 16)))
         (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
        (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
       'int16
       16)
      'int32
      16)
     (vec-cast (sca-broadcast (int16_t (bv #x0080 16)) 16) 'int32 16))
    (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
   (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
  'int16
  16)
 (sca-broadcast (int16_t (bv #x00ff 16)) 16))
template:
  (cast
 ...
 (vs-mpy-add
  ...
  (combine
   (cast
    ...
    (vs-shift-right
     ...
     (vs-mpy-add
      ...
      (vs-mpy-add
       ...
       (combine #<load-data> (broadcast ... (uint8_t input_zero)))
       (list (int8_t (bv #x01 8)) (int8_t (bv #xff 8)))
       #f
       #f
       #f
       'int16)
      (list (load-sca (buffer inv_sqrt 'int32) 0))
      #f
      #f
      #f
      'int32)
     (int32_t (bv #x00000008 32))
     #t
     x?$1442
     #t)
    'int16
    #t)
   (broadcast ... (int16_t (bv #x0080 16))))
  (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
  #f
  #f
  #f
  'int32)
 'int16
 x?$1979)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$1984 idx) (bv #x0000807f 32)) (bvsle (bv #xffff8080 32) (app abstr-vals$1984 idx)))))
optimized-halide-expr:
  (vec-min
 (vec-cast
  (vec-max
   (vec-min
    #<abstr-halide-expr>
    (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
   (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
  'int16
  16)
 (sca-broadcast (int16_t (bv #x00ff 16)) 16))
optimized-template:
  (cast ... #<abstr-expr> 'int16 x?$1979)
optimized Halide 0:
  (int16_t
 (ite (bvsle (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (app abstr-vals$1984 0) (bv #x00007fff 32)) (app abstr-vals$1984 0) (bv #x00007fff 32))) (ite (bvsle (app abstr-vals$1984 0) (bv #x00007fff 32)) (app abstr-vals$1984 0) (bv #x00007fff 32)) (bv #xffff8000 32))) (bv #x00ff 16)) (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (app abstr-vals$1984 0) (bv #x00007fff 32)) (app abstr-vals$1984 0) (bv #x00007fff 32))) (ite (bvsle (app abstr-vals$1984 0) (bv #x00007fff 32)) (app abstr-vals$1984 0) (bv #x00007fff 32)) (bv #xffff8000 32))) (bv #x00ff 16)))
optimized x86 0:
  (int16_t
 (ite x?$1979 (ite (bvslt (app abstr-vals$1984 0) (bv #xffff8000 32)) (bv #x8000 16) (ite (bvslt (bv #x00007fff 32) (app abstr-vals$1984 0)) (bv #x7fff 16) (extract 15 0 (app abstr-vals$1984 0)))) (extract 15 0 (app abstr-vals$1984 0))))
Ran synthesizer for 91 ms
(unsat)
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (vec-min
 (vec-cast
  (vec-max
   (vec-min
    (vec-add
     (vec-cast
      (vec-cast
       (vec-max
        (vec-min
         (vec-add
          (vec-bwand
           (sca-broadcast (int32_t (bv #x00000001 32)) 16)
           (vec-div
            (vec-mul
             (vec-cast
              (vec-sub
               (vec-cast
                (load
                 (buffer input 'uint8)
                 (ramp
                  (sca-add
                   (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
                   (sca-sub
                    (sca-sub (var-lookup 't101) (var-lookup 't106))
                    (var-lookup 'input.min.0)))
                  1
                  16)
                 (aligned 1 0))
                'int16
                16)
               (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
              'int32
              16)
             (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
            (sca-broadcast (int32_t (bv #x00000080 32)) 16)))
          (vec-div
           (vec-mul
            (vec-cast
             (vec-sub
              (vec-cast
               (load
                (buffer input 'uint8)
                (ramp
                 (sca-add
                  (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
                  (sca-sub
                   (sca-sub (var-lookup 't101) (var-lookup 't106))
                   (var-lookup 'input.min.0)))
                 1
                 16)
                (aligned 1 0))
               'int16
               16)
              (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
             'int32
             16)
            (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
           (sca-broadcast (int32_t (bv #x00000100 32)) 16)))
         (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
        (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
       'int16
       16)
      'int32
      16)
     (vec-cast (sca-broadcast (int16_t (bv #x0080 16)) 16) 'int32 16))
    (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
   (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
  'int16
  16)
 (sca-broadcast (int16_t (bv #x00ff 16)) 16))
template:
  (minimum
 ...
 (cast
  ...
  (vs-mpy-add
   ...
   (combine
    (cast
     ...
     (vs-shift-right
      ...
      (vs-mpy-add
       ...
       (vs-mpy-add
        ...
        (combine #<load-data> (broadcast ... (uint8_t input_zero)))
        (list (int8_t (bv #x01 8)) (int8_t (bv #xff 8)))
        #f
        #f
        #f
        'int16)
       (list (load-sca (buffer inv_sqrt 'int32) 0))
       #f
       #f
       #f
       'int32)
      (int32_t (bv #x00000008 32))
      #t
      x?$1442
      #t)
     'int16
     #t)
    (broadcast ... (int16_t (bv #x0080 16))))
   (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
   #f
   #f
   #f
   'int32)
  'int16
  #t)
 (broadcast ... (int16_t (bv #x00ff 16))))
axioms:
  (list
 (forall (idx) (bvsle (bv #x8080 16) (app abstr-vals$1985 idx)))
 (forall (idx) (&& (bvsle (app abstr-vals$1986 idx) (bv #x00ff 16)) (bvsle (bv #x00ff 16) (app abstr-vals$1986 idx)))))
optimized-halide-expr:
  (vec-min #<abstr-halide-expr> #<abstr-halide-expr>)
optimized-template:
  (minimum ... #<abstr-expr> #<abstr-expr>)
optimized Halide 0:
  (int16_t
 (ite (bvsle (app abstr-vals$1985 0) (app abstr-vals$1986 0)) (app abstr-vals$1985 0) (app abstr-vals$1986 0)))
optimized x86 0:
  (int16_t
 (ite (bvsle (app abstr-vals$1985 0) (app abstr-vals$1986 0)) (app abstr-vals$1985 0) (app abstr-vals$1986 0)))
Ran synthesizer for 41 ms
(model)
(vec-min #<abstr-halide-expr> #<abstr-halide-expr>)
(minimum
 ...
 (cast
  ...
  (vs-mpy-add
   ...
   (combine
    (cast
     ...
     (vs-shift-right
      ...
      (vs-mpy-add
       ...
       (vs-mpy-add
        ...
        (combine #<load-data> (broadcast ... (uint8_t input_zero)))
        (list (int8_t (bv #x01 8)) (int8_t (bv #xff 8)))
        #f
        #f
        #f
        'int16)
       (list (load-sca (buffer inv_sqrt 'int32) 0))
       #f
       #f
       #f
       'int32)
      (int32_t (bv #x00000008 32))
      #t
      x?$1442
      #t)
     'int16
     #t)
    (broadcast ... (int16_t (bv #x0080 16))))
   (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
   #f
   #f
   #f
   'int32)
  'int16
  #t)
 (broadcast ... (int16_t (bv #x00ff 16))))
Ran bounds analysis for 26 ms
Ran bounds analysis for 18 ms
"Extended success?"
#t
(minimum
 ...
 (cast
  ...
  (vs-mpy-add
   ...
   (combine
    (cast
     ...
     (vs-shift-right
      ...
      (vs-mpy-add
       ...
       (vs-mpy-add
        ...
        (combine #<load-data> (broadcast ... (uint8_t input_zero)))
        (list (int8_t (bv #x01 8)) (int8_t (bv #xff 8)))
        #f
        #f
        #f
        'int16)
       (list (load-sca (buffer inv_sqrt 'int32) 0))
       #f
       #f
       #f
       'int32)
      (int32_t (bv #x00000008 32))
      #t
      x?$1442
      #t)
     'int16
     #t)
    (broadcast ... (int16_t (bv #x0080 16))))
   (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
   #f
   #f
   #f
   'int32)
  'int16
  #t)
 (broadcast ... (int16_t (bv #x00ff 16))))
"Building Expr:"
(sca-broadcast (int16_t (bv #x0000 16)) 16)
"Fold templates"
'()
here()

"Replace templates"
'()
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (sca-broadcast (int16_t (bv #x0000 16)) 16)
template:
  (broadcast ... (int16_t (bv #x0000 16)))
axioms:
  '()
optimized-halide-expr:
  (sca-broadcast (int16_t (bv #x0000 16)) 16)
optimized-template:
  (broadcast ... (int16_t (bv #x0000 16)))
optimized Halide 0:
  (int16_t (bv #x0000 16))
optimized x86 0:
  (int16_t (bv #x0000 16))
Ran synthesizer for 18 ms
(model)
(sca-broadcast (int16_t (bv #x0000 16)) 16)
(broadcast ... (int16_t (bv #x0000 16)))
Ran bounds analysis for 22 ms
Ran bounds analysis for 16 ms
"Extended success?"
#t
(broadcast ... (int16_t (bv #x0000 16)))
"Building Expr:"
(vec-max
 (vec-min
  (vec-cast
   (vec-max
    (vec-min
     (vec-add
      (vec-cast
       (vec-cast
        (vec-max
         (vec-min
          (vec-add
           (vec-bwand
            (sca-broadcast (int32_t (bv #x00000001 32)) 16)
            (vec-div
             (vec-mul
              (vec-cast
               (vec-sub
                (vec-cast
                 (load
                  (buffer input 'uint8)
                  (ramp
                   (sca-add
                    (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
                    (sca-sub
                     (sca-sub (var-lookup 't101) (var-lookup 't106))
                     (var-lookup 'input.min.0)))
                   1
                   16)
                  (aligned 1 0))
                 'int16
                 16)
                (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
               'int32
               16)
              (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
             (sca-broadcast (int32_t (bv #x00000080 32)) 16)))
           (vec-div
            (vec-mul
             (vec-cast
              (vec-sub
               (vec-cast
                (load
                 (buffer input 'uint8)
                 (ramp
                  (sca-add
                   (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
                   (sca-sub
                    (sca-sub (var-lookup 't101) (var-lookup 't106))
                    (var-lookup 'input.min.0)))
                  1
                  16)
                 (aligned 1 0))
                'int16
                16)
               (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
              'int32
              16)
             (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
            (sca-broadcast (int32_t (bv #x00000100 32)) 16)))
          (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
         (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
        'int16
        16)
       'int32
       16)
      (vec-cast (sca-broadcast (int16_t (bv #x0080 16)) 16) 'int32 16))
     (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
    (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
   'int16
   16)
  (sca-broadcast (int16_t (bv #x00ff 16)) 16))
 (sca-broadcast (int16_t (bv #x0000 16)) 16))
"Fold templates"
(list
 (cast
  ...
  (vs-mpy-add
   ...
   (combine
    (cast
     ...
     (vs-shift-right
      ...
      (vs-mpy-add
       ...
       (vs-mpy-add
        ...
        (combine #<load-data> (broadcast ... (uint8_t input_zero)))
        (list (int8_t (bv #x01 8)) (int8_t (bv #xff 8)))
        #f
        #f
        #f
        'int16)
       (list (load-sca (buffer inv_sqrt 'int32) 0))
       #f
       #f
       #f
       'int32)
      (int32_t (bv #x00000008 32))
      #t
      x?$1442
      #t)
     'int16
     #t)
    (broadcast ... (int16_t (bv #x0080 16))))
   (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
   #f
   #f
   #f
   'int32)
  'int16
  x?$1989))
here(#(struct:cast ... #(struct:vs-mpy-add ... #<combine: #(struct:cast ... #(struct:vs-shift-right ... #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:uint8_t input_zero))> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #xff 8))) #f #f #f int16) (#(struct:load-sca #(struct:buffer inv_sqrt int32) 0)) #f #f #f int32) #(struct:int32_t (bv #x00000008 32)) #t x?$1442 #t) int16 #t) #(struct:broadcast ... #(struct:int16_t (bv #x0080 16)))> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32) int16 x?$1989))

"Replace templates"
(list
 (cast
  ...
  (cast
   ...
   (vs-mpy-add
    ...
    (combine
     (cast
      ...
      (vs-shift-right
       ...
       (vs-mpy-add
        ...
        (vs-mpy-add
         ...
         (combine #<load-data> (broadcast ... (uint8_t input_zero)))
         (list (int8_t (bv #x01 8)) (int8_t (bv #xff 8)))
         #f
         #f
         #f
         'int16)
        (list (load-sca (buffer inv_sqrt 'int32) 0))
        #f
        #f
        #f
        'int32)
       (int32_t (bv #x00000008 32))
       #t
       x?$1442
       #t)
      'int16
      #t)
     (broadcast ... (int16_t (bv #x0080 16))))
    (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
    #f
    #f
    #f
    'int32)
   'int16
   #t)
  'int16
  #t)
 (cast ... (broadcast ... (int16_t (bv #x00ff 16))) 'int16 #t))
run-x86-synthesizer
halide-expr:
  (vec-max
 (vec-min
  (vec-cast
   (vec-max
    (vec-min
     (vec-add
      (vec-cast
       (vec-cast
        (vec-max
         (vec-min
          (vec-add
           (vec-bwand
            (sca-broadcast (int32_t (bv #x00000001 32)) 16)
            (vec-div
             (vec-mul
              (vec-cast
               (vec-sub
                (vec-cast
                 (load
                  (buffer input 'uint8)
                  (ramp
                   (sca-add
                    (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
                    (sca-sub
                     (sca-sub (var-lookup 't101) (var-lookup 't106))
                     (var-lookup 'input.min.0)))
                   1
                   16)
                  (aligned 1 0))
                 'int16
                 16)
                (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
               'int32
               16)
              (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
             (sca-broadcast (int32_t (bv #x00000080 32)) 16)))
           (vec-div
            (vec-mul
             (vec-cast
              (vec-sub
               (vec-cast
                (load
                 (buffer input 'uint8)
                 (ramp
                  (sca-add
                   (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
                   (sca-sub
                    (sca-sub (var-lookup 't101) (var-lookup 't106))
                    (var-lookup 'input.min.0)))
                  1
                  16)
                 (aligned 1 0))
                'int16
                16)
               (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
              'int32
              16)
             (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
            (sca-broadcast (int32_t (bv #x00000100 32)) 16)))
          (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
         (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
        'int16
        16)
       'int32
       16)
      (vec-cast (sca-broadcast (int16_t (bv #x0080 16)) 16) 'int32 16))
     (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
    (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
   'int16
   16)
  (sca-broadcast (int16_t (bv #x00ff 16)) 16))
 (sca-broadcast (int16_t (bv #x0000 16)) 16))
template:
  (cast ... (broadcast ... (int16_t (bv #x00ff 16))) 'int16 #t)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$1994 idx) (bv #x00ff 16)) (bvsle (bv #x00ff 16) (app abstr-vals$1994 idx)))))
optimized-halide-expr:
  (vec-max
 (vec-min
  (vec-cast
   (vec-max
    (vec-min
     (vec-add
      (vec-cast
       (vec-cast
        (vec-max
         (vec-min
          (vec-add
           (vec-bwand
            (sca-broadcast (int32_t (bv #x00000001 32)) 16)
            (vec-div
             (vec-mul
              (vec-cast
               (vec-sub
                (vec-cast
                 (load
                  (buffer input 'uint8)
                  (ramp
                   (sca-add
                    (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
                    (sca-sub
                     (sca-sub (var-lookup 't101) (var-lookup 't106))
                     (var-lookup 'input.min.0)))
                   1
                   16)
                  (aligned 1 0))
                 'int16
                 16)
                (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
               'int32
               16)
              (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
             (sca-broadcast (int32_t (bv #x00000080 32)) 16)))
           (vec-div
            (vec-mul
             (vec-cast
              (vec-sub
               (vec-cast
                (load
                 (buffer input 'uint8)
                 (ramp
                  (sca-add
                   (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
                   (sca-sub
                    (sca-sub (var-lookup 't101) (var-lookup 't106))
                    (var-lookup 'input.min.0)))
                  1
                  16)
                 (aligned 1 0))
                'int16
                16)
               (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
              'int32
              16)
             (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
            (sca-broadcast (int32_t (bv #x00000100 32)) 16)))
          (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
         (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
        'int16
        16)
       'int32
       16)
      (vec-cast (sca-broadcast (int16_t (bv #x0080 16)) 16) 'int32 16))
     (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
    (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
   'int16
   16)
  #<abstr-halide-expr>)
 (sca-broadcast (int16_t (bv #x0000 16)) 16))
optimized-template:
  (cast ... #<abstr-expr> 'int16 #t)
optimized Halide 0:
  (int16_t
 (ite (bvsle (bv #x0000 16) (ite (bvsle (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bv #x00000080 32) (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32))) (bv #x00007fff 32)) (bvadd (bv #x00000080 32) (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bv #x00000080 32) (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32))) (bv #x00007fff 32)) (bvadd (bv #x00000080 32) (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32))) (bv #x00007fff 32)) (bv #xffff8000 32))) (app abstr-vals$1994 0)) (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bv #x00000080 32) (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32))) (bv #x00007fff 32)) (bvadd (bv #x00000080 32) (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bv #x00000080 32) (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32))) (bv #x00007fff 32)) (bvadd (bv #x00000080 32) (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32))) (bv #x00007fff 32)) (bv #xffff8000 32))) (app abstr-vals$1994 0))) (ite (bvsle (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bv #x00000080 32) (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32))) (bv #x00007fff 32)) (bvadd (bv #x00000080 32) (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bv #x00000080 32) (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32))) (bv #x00007fff 32)) (bvadd (bv #x00000080 32) (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32))) (bv #x00007fff 32)) (bv #xffff8000 32))) (app abstr-vals$1994 0)) (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bv #x00000080 32) (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32))) (bv #x00007fff 32)) (bvadd (bv #x00000080 32) (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bv #x00000080 32) (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32))) (bv #x00007fff 32)) (bvadd (bv #x00000080 32) (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32))) (bv #x00007fff 32)) (bv #xffff8000 32))) (app abstr-vals$1994 0)) ...))
optimized x86 0:
  (int16_t (app abstr-vals$1994 0))
run-x86-synthesizer
halide-expr:
  (vec-max
 (vec-min
  (vec-cast
   (vec-max
    (vec-min
     (vec-add
      (vec-cast
       (vec-cast
        (vec-max
         (vec-min
          (vec-add
           (vec-bwand
            (sca-broadcast (int32_t (bv #x00000001 32)) 16)
            (vec-div
             (vec-mul
              (vec-cast
               (vec-sub
                (vec-cast
                 (load
                  (buffer input 'uint8)
                  (ramp
                   (sca-add
                    (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
                    (sca-sub
                     (sca-sub (var-lookup 't101) (var-lookup 't106))
                     (var-lookup 'input.min.0)))
                   1
                   16)
                  (aligned 1 0))
                 'int16
                 16)
                (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
               'int32
               16)
              (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
             (sca-broadcast (int32_t (bv #x00000080 32)) 16)))
           (vec-div
            (vec-mul
             (vec-cast
              (vec-sub
               (vec-cast
                (load
                 (buffer input 'uint8)
                 (ramp
                  (sca-add
                   (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
                   (sca-sub
                    (sca-sub (var-lookup 't101) (var-lookup 't106))
                    (var-lookup 'input.min.0)))
                  1
                  16)
                 (aligned 1 0))
                'int16
                16)
               (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
              'int32
              16)
             (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
            (sca-broadcast (int32_t (bv #x00000100 32)) 16)))
          (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
         (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
        'int16
        16)
       'int32
       16)
      (vec-cast (sca-broadcast (int16_t (bv #x0080 16)) 16) 'int32 16))
     (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
    (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
   'int16
   16)
  (sca-broadcast (int16_t (bv #x00ff 16)) 16))
 (sca-broadcast (int16_t (bv #x0000 16)) 16))
template:
  (cast
 ...
 (vs-mpy-add
  ...
  (combine
   (cast
    ...
    (vs-shift-right
     ...
     (vs-mpy-add
      ...
      (vs-mpy-add
       ...
       (combine #<load-data> (broadcast ... (uint8_t input_zero)))
       (list (int8_t (bv #x01 8)) (int8_t (bv #xff 8)))
       #f
       #f
       #f
       'int16)
      (list (load-sca (buffer inv_sqrt 'int32) 0))
      #f
      #f
      #f
      'int32)
     (int32_t (bv #x00000008 32))
     #t
     x?$1442
     #t)
    'int16
    #t)
   (broadcast ... (int16_t (bv #x0080 16))))
  (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
  #f
  #f
  #f
  'int32)
 'int16
 x?$1989)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$1995 idx) (bv #x0000807f 32)) (bvsle (bv #xffff8080 32) (app abstr-vals$1995 idx)))))
optimized-halide-expr:
  (vec-max
 (vec-min
  (vec-cast
   (vec-max
    (vec-min
     #<abstr-halide-expr>
     (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
    (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
   'int16
   16)
  (sca-broadcast (int16_t (bv #x00ff 16)) 16))
 (sca-broadcast (int16_t (bv #x0000 16)) 16))
optimized-template:
  (cast ... #<abstr-expr> 'int16 x?$1989)
optimized Halide 0:
  (int16_t
 (ite (bvsle (bv #x0000 16) (ite (bvsle (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (app abstr-vals$1995 0) (bv #x00007fff 32)) (app abstr-vals$1995 0) (bv #x00007fff 32))) (ite (bvsle (app abstr-vals$1995 0) (bv #x00007fff 32)) (app abstr-vals$1995 0) (bv #x00007fff 32)) (bv #xffff8000 32))) (bv #x00ff 16)) (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (app abstr-vals$1995 0) (bv #x00007fff 32)) (app abstr-vals$1995 0) (bv #x00007fff 32))) (ite (bvsle (app abstr-vals$1995 0) (bv #x00007fff 32)) (app abstr-vals$1995 0) (bv #x00007fff 32)) (bv #xffff8000 32))) (bv #x00ff 16))) (ite (bvsle (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (app abstr-vals$1995 0) (bv #x00007fff 32)) (app abstr-vals$1995 0) (bv #x00007fff 32))) (ite (bvsle (app abstr-vals$1995 0) (bv #x00007fff 32)) (app abstr-vals$1995 0) (bv #x00007fff 32)) (bv #xffff8000 32))) (bv #x00ff 16)) (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (app abstr-vals$1995 0) (bv #x00007fff 32)) (app abstr-vals$1995 0) (bv #x00007fff 32))) (ite (bvsle (app abstr-vals$1995 0) (bv #x00007fff 32)) (app abstr-vals$1995 0) (bv #x00007fff 32)) (bv #xffff8000 32))) (bv #x00ff 16)) (bv #x0000 16)))
optimized x86 0:
  (int16_t
 (ite x?$1989 (ite (bvslt (app abstr-vals$1995 0) (bv #xffff8000 32)) (bv #x8000 16) (ite (bvslt (bv #x00007fff 32) (app abstr-vals$1995 0)) (bv #x7fff 16) (extract 15 0 (app abstr-vals$1995 0)))) (extract 15 0 (app abstr-vals$1995 0))))
Ran synthesizer for 90 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-max
 (vec-min
  (vec-cast
   (vec-max
    (vec-min
     (vec-add
      (vec-cast
       (vec-cast
        (vec-max
         (vec-min
          (vec-add
           (vec-bwand
            (sca-broadcast (int32_t (bv #x00000001 32)) 16)
            (vec-div
             (vec-mul
              (vec-cast
               (vec-sub
                (vec-cast
                 (load
                  (buffer input 'uint8)
                  (ramp
                   (sca-add
                    (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
                    (sca-sub
                     (sca-sub (var-lookup 't101) (var-lookup 't106))
                     (var-lookup 'input.min.0)))
                   1
                   16)
                  (aligned 1 0))
                 'int16
                 16)
                (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
               'int32
               16)
              (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
             (sca-broadcast (int32_t (bv #x00000080 32)) 16)))
           (vec-div
            (vec-mul
             (vec-cast
              (vec-sub
               (vec-cast
                (load
                 (buffer input 'uint8)
                 (ramp
                  (sca-add
                   (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
                   (sca-sub
                    (sca-sub (var-lookup 't101) (var-lookup 't106))
                    (var-lookup 'input.min.0)))
                  1
                  16)
                 (aligned 1 0))
                'int16
                16)
               (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
              'int32
              16)
             (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
            (sca-broadcast (int32_t (bv #x00000100 32)) 16)))
          (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
         (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
        'int16
        16)
       'int32
       16)
      (vec-cast (sca-broadcast (int16_t (bv #x0080 16)) 16) 'int32 16))
     (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
    (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
   'int16
   16)
  (sca-broadcast (int16_t (bv #x00ff 16)) 16))
 (sca-broadcast (int16_t (bv #x0000 16)) 16))
template:
  (cast
 ...
 (cast
  ...
  (vs-mpy-add
   ...
   (combine
    (cast
     ...
     (vs-shift-right
      ...
      (vs-mpy-add
       ...
       (vs-mpy-add
        ...
        (combine #<load-data> (broadcast ... (uint8_t input_zero)))
        (list (int8_t (bv #x01 8)) (int8_t (bv #xff 8)))
        #f
        #f
        #f
        'int16)
       (list (load-sca (buffer inv_sqrt 'int32) 0))
       #f
       #f
       #f
       'int32)
      (int32_t (bv #x00000008 32))
      #t
      x?$1442
      #t)
     'int16
     #t)
    (broadcast ... (int16_t (bv #x0080 16))))
   (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
   #f
   #f
   #f
   'int32)
  'int16
  #t)
 'int16
 #t)
axioms:
  (list (forall (idx) (bvsle (bv #x8080 16) (app abstr-vals$1996 idx))))
optimized-halide-expr:
  (vec-max
 (vec-min #<abstr-halide-expr> (sca-broadcast (int16_t (bv #x00ff 16)) 16))
 (sca-broadcast (int16_t (bv #x0000 16)) 16))
optimized-template:
  (cast ... #<abstr-expr> 'int16 #t)
optimized Halide 0:
  (int16_t
 (ite (bvsle (bv #x0000 16) (ite (bvsle (app abstr-vals$1996 0) (bv #x00ff 16)) (app abstr-vals$1996 0) (bv #x00ff 16))) (ite (bvsle (app abstr-vals$1996 0) (bv #x00ff 16)) (app abstr-vals$1996 0) (bv #x00ff 16)) (bv #x0000 16)))
optimized x86 0:
  (int16_t (app abstr-vals$1996 0))
Ran synthesizer for 74 ms
(unsat)
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (vec-max
 (vec-min
  (vec-cast
   (vec-max
    (vec-min
     (vec-add
      (vec-cast
       (vec-cast
        (vec-max
         (vec-min
          (vec-add
           (vec-bwand
            (sca-broadcast (int32_t (bv #x00000001 32)) 16)
            (vec-div
             (vec-mul
              (vec-cast
               (vec-sub
                (vec-cast
                 (load
                  (buffer input 'uint8)
                  (ramp
                   (sca-add
                    (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
                    (sca-sub
                     (sca-sub (var-lookup 't101) (var-lookup 't106))
                     (var-lookup 'input.min.0)))
                   1
                   16)
                  (aligned 1 0))
                 'int16
                 16)
                (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
               'int32
               16)
              (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
             (sca-broadcast (int32_t (bv #x00000080 32)) 16)))
           (vec-div
            (vec-mul
             (vec-cast
              (vec-sub
               (vec-cast
                (load
                 (buffer input 'uint8)
                 (ramp
                  (sca-add
                   (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
                   (sca-sub
                    (sca-sub (var-lookup 't101) (var-lookup 't106))
                    (var-lookup 'input.min.0)))
                  1
                  16)
                 (aligned 1 0))
                'int16
                16)
               (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
              'int32
              16)
             (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
            (sca-broadcast (int32_t (bv #x00000100 32)) 16)))
          (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
         (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
        'int16
        16)
       'int32
       16)
      (vec-cast (sca-broadcast (int16_t (bv #x0080 16)) 16) 'int32 16))
     (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
    (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
   'int16
   16)
  (sca-broadcast (int16_t (bv #x00ff 16)) 16))
 (sca-broadcast (int16_t (bv #x0000 16)) 16))
template:
  (maximum
 ...
 (minimum
  ...
  (cast
   ...
   (vs-mpy-add
    ...
    (combine
     (cast
      ...
      (vs-shift-right
       ...
       (vs-mpy-add
        ...
        (vs-mpy-add
         ...
         (combine #<load-data> (broadcast ... (uint8_t input_zero)))
         (list (int8_t (bv #x01 8)) (int8_t (bv #xff 8)))
         #f
         #f
         #f
         'int16)
        (list (load-sca (buffer inv_sqrt 'int32) 0))
        #f
        #f
        #f
        'int32)
       (int32_t (bv #x00000008 32))
       #t
       x?$1442
       #t)
      'int16
      #t)
     (broadcast ... (int16_t (bv #x0080 16))))
    (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
    #f
    #f
    #f
    'int32)
   'int16
   #t)
  (broadcast ... (int16_t (bv #x00ff 16))))
 (broadcast ... (int16_t (bv #x0000 16))))
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$1997 idx) (bv #x00ff 16)) (bvsle (bv #x8080 16) (app abstr-vals$1997 idx))))
 (forall (idx) (&& (bvsle (app abstr-vals$1998 idx) (bv #x0000 16)) (bvsle (bv #x0000 16) (app abstr-vals$1998 idx)))))
optimized-halide-expr:
  (vec-max #<abstr-halide-expr> #<abstr-halide-expr>)
optimized-template:
  (maximum ... #<abstr-expr> #<abstr-expr>)
optimized Halide 0:
  (int16_t
 (ite (bvsle (app abstr-vals$1998 0) (app abstr-vals$1997 0)) (app abstr-vals$1997 0) (app abstr-vals$1998 0)))
optimized x86 0:
  (int16_t
 (ite (bvsle (app abstr-vals$1998 0) (app abstr-vals$1997 0)) (app abstr-vals$1997 0) (app abstr-vals$1998 0)))
Ran synthesizer for 41 ms
(model)
(vec-max #<abstr-halide-expr> #<abstr-halide-expr>)
(maximum
 ...
 (minimum
  ...
  (cast
   ...
   (vs-mpy-add
    ...
    (combine
     (cast
      ...
      (vs-shift-right
       ...
       (vs-mpy-add
        ...
        (vs-mpy-add
         ...
         (combine #<load-data> (broadcast ... (uint8_t input_zero)))
         (list (int8_t (bv #x01 8)) (int8_t (bv #xff 8)))
         #f
         #f
         #f
         'int16)
        (list (load-sca (buffer inv_sqrt 'int32) 0))
        #f
        #f
        #f
        'int32)
       (int32_t (bv #x00000008 32))
       #t
       x?$1442
       #t)
      'int16
      #t)
     (broadcast ... (int16_t (bv #x0080 16))))
    (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
    #f
    #f
    #f
    'int32)
   'int16
   #t)
  (broadcast ... (int16_t (bv #x00ff 16))))
 (broadcast ... (int16_t (bv #x0000 16))))
Ran bounds analysis for 21 ms
Ran bounds analysis for 20 ms
"Extended success?"
#t
(maximum
 ...
 (minimum
  ...
  (cast
   ...
   (vs-mpy-add
    ...
    (combine
     (cast
      ...
      (vs-shift-right
       ...
       (vs-mpy-add
        ...
        (vs-mpy-add
         ...
         (combine #<load-data> (broadcast ... (uint8_t input_zero)))
         (list (int8_t (bv #x01 8)) (int8_t (bv #xff 8)))
         #f
         #f
         #f
         'int16)
        (list (load-sca (buffer inv_sqrt 'int32) 0))
        #f
        #f
        #f
        'int32)
       (int32_t (bv #x00000008 32))
       #t
       x?$1442
       #t)
      'int16
      #t)
     (broadcast ... (int16_t (bv #x0080 16))))
    (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
    #f
    #f
    #f
    'int32)
   'int16
   #t)
  (broadcast ... (int16_t (bv #x00ff 16))))
 (broadcast ... (int16_t (bv #x0000 16))))
"Building Expr:"
(vec-cast
 (vec-max
  (vec-min
   (vec-cast
    (vec-max
     (vec-min
      (vec-add
       (vec-cast
        (vec-cast
         (vec-max
          (vec-min
           (vec-add
            (vec-bwand
             (sca-broadcast (int32_t (bv #x00000001 32)) 16)
             (vec-div
              (vec-mul
               (vec-cast
                (vec-sub
                 (vec-cast
                  (load
                   (buffer input 'uint8)
                   (ramp
                    (sca-add
                     (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
                     (sca-sub
                      (sca-sub (var-lookup 't101) (var-lookup 't106))
                      (var-lookup 'input.min.0)))
                    1
                    16)
                   (aligned 1 0))
                  'int16
                  16)
                 (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
                'int32
                16)
               (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
              (sca-broadcast (int32_t (bv #x00000080 32)) 16)))
            (vec-div
             (vec-mul
              (vec-cast
               (vec-sub
                (vec-cast
                 (load
                  (buffer input 'uint8)
                  (ramp
                   (sca-add
                    (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
                    (sca-sub
                     (sca-sub (var-lookup 't101) (var-lookup 't106))
                     (var-lookup 'input.min.0)))
                   1
                   16)
                  (aligned 1 0))
                 'int16
                 16)
                (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
               'int32
               16)
              (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
             (sca-broadcast (int32_t (bv #x00000100 32)) 16)))
           (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
          (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
         'int16
         16)
        'int32
        16)
       (vec-cast (sca-broadcast (int16_t (bv #x0080 16)) 16) 'int32 16))
      (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
     (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
    'int16
    16)
   (sca-broadcast (int16_t (bv #x00ff 16)) 16))
  (sca-broadcast (int16_t (bv #x0000 16)) 16))
 'uint8
 16)
"Fold templates"
(list
 (cast
  ...
  (vs-mpy-add
   ...
   (combine
    (cast
     ...
     (vs-shift-right
      ...
      (vs-mpy-add
       ...
       (vs-mpy-add
        ...
        (combine #<load-data> (broadcast ... (uint8_t input_zero)))
        (list (int8_t (bv #x01 8)) (int8_t (bv #xff 8)))
        #f
        #f
        #f
        'int16)
       (list (load-sca (buffer inv_sqrt 'int32) 0))
       #f
       #f
       #f
       'int32)
      (int32_t (bv #x00000008 32))
      #t
      x?$1442
      #t)
     'int16
     #t)
    (broadcast ... (int16_t (bv #x0080 16))))
   (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
   #f
   #f
   #f
   'int32)
  'uint8
  x?$2001))
here(#(struct:cast ... #(struct:vs-mpy-add ... #<combine: #(struct:cast ... #(struct:vs-shift-right ... #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:uint8_t input_zero))> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #xff 8))) #f #f #f int16) (#(struct:load-sca #(struct:buffer inv_sqrt int32) 0)) #f #f #f int32) #(struct:int32_t (bv #x00000008 32)) #t x?$1442 #t) int16 #t) #(struct:broadcast ... #(struct:int16_t (bv #x0080 16)))> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32) uint8 x?$2001))

"Replace templates"
(list
 (cast
  ...
  (vs-mpy-add
   ...
   (combine
    (cast
     ...
     (vs-shift-right
      ...
      (vs-mpy-add
       ...
       (vs-mpy-add
        ...
        (combine #<load-data> (broadcast ... (uint8_t input_zero)))
        (list (int8_t (bv #x01 8)) (int8_t (bv #xff 8)))
        #f
        #f
        #f
        'int16)
       (list (load-sca (buffer inv_sqrt 'int32) 0))
       #f
       #f
       #f
       'int32)
      (int32_t (bv #x00000008 32))
      #t
      x?$1442
      #t)
     'int16
     #t)
    (broadcast ... (int16_t (bv #x0080 16))))
   (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
   #f
   #f
   #f
   'int32)
  'uint8
  #f)
 (cast
  ...
  (cast
   ...
   (vs-mpy-add
    ...
    (combine
     (cast
      ...
      (vs-shift-right
       ...
       (vs-mpy-add
        ...
        (vs-mpy-add
         ...
         (combine #<load-data> (broadcast ... (uint8_t input_zero)))
         (list (int8_t (bv #x01 8)) (int8_t (bv #xff 8)))
         #f
         #f
         #f
         'int16)
        (list (load-sca (buffer inv_sqrt 'int32) 0))
        #f
        #f
        #f
        'int32)
       (int32_t (bv #x00000008 32))
       #t
       x?$1442
       #t)
      'int16
      #t)
     (broadcast ... (int16_t (bv #x0080 16))))
    (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
    #f
    #f
    #f
    'int32)
   'int16
   #t)
  'uint8
  #t)
 (cast ... (broadcast ... (int16_t (bv #x00ff 16))) 'uint8 #t)
 (cast
  ...
  (minimum
   ...
   (cast
    ...
    (vs-mpy-add
     ...
     (combine
      (cast
       ...
       (vs-shift-right
        ...
        (vs-mpy-add
         ...
         (vs-mpy-add
          ...
          (combine #<load-data> (broadcast ... (uint8_t input_zero)))
          (list (int8_t (bv #x01 8)) (int8_t (bv #xff 8)))
          #f
          #f
          #f
          'int16)
         (list (load-sca (buffer inv_sqrt 'int32) 0))
         #f
         #f
         #f
         'int32)
        (int32_t (bv #x00000008 32))
        #t
        x?$1442
        #t)
       'int16
       #t)
      (broadcast ... (int16_t (bv #x0080 16))))
     (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
     #f
     #f
     #f
     'int32)
    'int16
    #t)
   (broadcast ... (int16_t (bv #x00ff 16))))
  'uint8
  #t)
 (cast ... (broadcast ... (int16_t (bv #x0000 16))) 'uint8 #t))
run-x86-synthesizer
halide-expr:
  (vec-cast
 (vec-max
  (vec-min
   (vec-cast
    (vec-max
     (vec-min
      (vec-add
       (vec-cast
        (vec-cast
         (vec-max
          (vec-min
           (vec-add
            (vec-bwand
             (sca-broadcast (int32_t (bv #x00000001 32)) 16)
             (vec-div
              (vec-mul
               (vec-cast
                (vec-sub
                 (vec-cast
                  (load
                   (buffer input 'uint8)
                   (ramp
                    (sca-add
                     (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
                     (sca-sub
                      (sca-sub (var-lookup 't101) (var-lookup 't106))
                      (var-lookup 'input.min.0)))
                    1
                    16)
                   (aligned 1 0))
                  'int16
                  16)
                 (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
                'int32
                16)
               (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
              (sca-broadcast (int32_t (bv #x00000080 32)) 16)))
            (vec-div
             (vec-mul
              (vec-cast
               (vec-sub
                (vec-cast
                 (load
                  (buffer input 'uint8)
                  (ramp
                   (sca-add
                    (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
                    (sca-sub
                     (sca-sub (var-lookup 't101) (var-lookup 't106))
                     (var-lookup 'input.min.0)))
                   1
                   16)
                  (aligned 1 0))
                 'int16
                 16)
                (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
               'int32
               16)
              (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
             (sca-broadcast (int32_t (bv #x00000100 32)) 16)))
           (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
          (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
         'int16
         16)
        'int32
        16)
       (vec-cast (sca-broadcast (int16_t (bv #x0080 16)) 16) 'int32 16))
      (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
     (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
    'int16
    16)
   (sca-broadcast (int16_t (bv #x00ff 16)) 16))
  (sca-broadcast (int16_t (bv #x0000 16)) 16))
 'uint8
 16)
template:
  (cast ... (broadcast ... (int16_t (bv #x00ff 16))) 'uint8 #t)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$2002 idx) (bv #x00ff 16)) (bvsle (bv #x00ff 16) (app abstr-vals$2002 idx)))))
optimized-halide-expr:
  (vec-cast
 (vec-max
  (vec-min
   (vec-cast
    (vec-max
     (vec-min
      (vec-add
       (vec-cast
        (vec-cast
         (vec-max
          (vec-min
           (vec-add
            (vec-bwand
             (sca-broadcast (int32_t (bv #x00000001 32)) 16)
             (vec-div
              (vec-mul
               (vec-cast
                (vec-sub
                 (vec-cast
                  (load
                   (buffer input 'uint8)
                   (ramp
                    (sca-add
                     (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
                     (sca-sub
                      (sca-sub (var-lookup 't101) (var-lookup 't106))
                      (var-lookup 'input.min.0)))
                    1
                    16)
                   (aligned 1 0))
                  'int16
                  16)
                 (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
                'int32
                16)
               (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
              (sca-broadcast (int32_t (bv #x00000080 32)) 16)))
            (vec-div
             (vec-mul
              (vec-cast
               (vec-sub
                (vec-cast
                 (load
                  (buffer input 'uint8)
                  (ramp
                   (sca-add
                    (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
                    (sca-sub
                     (sca-sub (var-lookup 't101) (var-lookup 't106))
                     (var-lookup 'input.min.0)))
                   1
                   16)
                  (aligned 1 0))
                 'int16
                 16)
                (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
               'int32
               16)
              (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
             (sca-broadcast (int32_t (bv #x00000100 32)) 16)))
           (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
          (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
         'int16
         16)
        'int32
        16)
       (vec-cast (sca-broadcast (int16_t (bv #x0080 16)) 16) 'int32 16))
      (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
     (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
    'int16
    16)
   #<abstr-halide-expr>)
  (sca-broadcast (int16_t (bv #x0000 16)) 16))
 'uint8
 16)
optimized-template:
  (cast ... #<abstr-expr> 'uint8 #t)
optimized Halide 0:
  (uint8_t
 (extract 7 0 (ite (bvsle (bv #x0000 16) (ite (bvsle (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bv #x00000080 32) (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32))) (bv #x00007fff 32)) (bvadd (bv #x00000080 32) (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bv #x00000080 32) (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32))) (bv #x00007fff 32)) (bvadd (bv #x00000080 32) (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32))) (bv #x00007fff 32)) (bv #xffff8000 32))) (app abstr-vals$2002 0)) (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bv #x00000080 32) (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32))) (bv #x00007fff 32)) (bvadd (bv #x00000080 32) (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bv #x00000080 32) (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32))) (bv #x00007fff 32)) (bvadd (bv #x00000080 32) (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32))) (bv #x00007fff 32)) (bv #xffff8000 32))) (app abstr-vals$2002 0))) (ite (bvsle (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bv #x00000080 32) (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32))) (bv #x00007fff 32)) (bvadd (bv #x00000080 32) (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bv #x00000080 32) (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32))) (bv #x00007fff 32)) (bvadd (bv #x00000080 32) (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32))) (bv #x00007fff 32)) (bv #xffff8000 32))) (app abstr-vals$2002 0)) (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bv #x00000080 32) (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32))) (bv #x00007fff 32)) (bvadd (bv #x00000080 32) (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bv #x00000080 32) (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32))) (bv #x00007fff 32)) (bvadd (bv #x00000080 32) (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32))) (bv #x00007fff 32)) (bv #xffff8000 32))) (app abstr-vals$2002 0)) ...)))
optimized x86 0:
  (uint8_t
 (ite (bvslt (app abstr-vals$2002 0) (bv #x0000 16)) (bv #x00 8) (ite (bvslt (bv #x00ff 16) (app abstr-vals$2002 0)) (bv #xff 8) (extract 7 0 (app abstr-vals$2002 0)))))
run-x86-synthesizer
halide-expr:
  (vec-cast
 (vec-max
  (vec-min
   (vec-cast
    (vec-max
     (vec-min
      (vec-add
       (vec-cast
        (vec-cast
         (vec-max
          (vec-min
           (vec-add
            (vec-bwand
             (sca-broadcast (int32_t (bv #x00000001 32)) 16)
             (vec-div
              (vec-mul
               (vec-cast
                (vec-sub
                 (vec-cast
                  (load
                   (buffer input 'uint8)
                   (ramp
                    (sca-add
                     (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
                     (sca-sub
                      (sca-sub (var-lookup 't101) (var-lookup 't106))
                      (var-lookup 'input.min.0)))
                    1
                    16)
                   (aligned 1 0))
                  'int16
                  16)
                 (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
                'int32
                16)
               (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
              (sca-broadcast (int32_t (bv #x00000080 32)) 16)))
            (vec-div
             (vec-mul
              (vec-cast
               (vec-sub
                (vec-cast
                 (load
                  (buffer input 'uint8)
                  (ramp
                   (sca-add
                    (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
                    (sca-sub
                     (sca-sub (var-lookup 't101) (var-lookup 't106))
                     (var-lookup 'input.min.0)))
                   1
                   16)
                  (aligned 1 0))
                 'int16
                 16)
                (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
               'int32
               16)
              (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
             (sca-broadcast (int32_t (bv #x00000100 32)) 16)))
           (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
          (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
         'int16
         16)
        'int32
        16)
       (vec-cast (sca-broadcast (int16_t (bv #x0080 16)) 16) 'int32 16))
      (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
     (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
    'int16
    16)
   (sca-broadcast (int16_t (bv #x00ff 16)) 16))
  (sca-broadcast (int16_t (bv #x0000 16)) 16))
 'uint8
 16)
template:
  (cast ... (broadcast ... (int16_t (bv #x0000 16))) 'uint8 #t)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$2003 idx) (bv #x0000 16)) (bvsle (bv #x0000 16) (app abstr-vals$2003 idx)))))
optimized-halide-expr:
  (vec-cast
 (vec-max
  (vec-min
   (vec-cast
    (vec-max
     (vec-min
      (vec-add
       (vec-cast
        (vec-cast
         (vec-max
          (vec-min
           (vec-add
            (vec-bwand
             (sca-broadcast (int32_t (bv #x00000001 32)) 16)
             (vec-div
              (vec-mul
               (vec-cast
                (vec-sub
                 (vec-cast
                  (load
                   (buffer input 'uint8)
                   (ramp
                    (sca-add
                     (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
                     (sca-sub
                      (sca-sub (var-lookup 't101) (var-lookup 't106))
                      (var-lookup 'input.min.0)))
                    1
                    16)
                   (aligned 1 0))
                  'int16
                  16)
                 (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
                'int32
                16)
               (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
              (sca-broadcast (int32_t (bv #x00000080 32)) 16)))
            (vec-div
             (vec-mul
              (vec-cast
               (vec-sub
                (vec-cast
                 (load
                  (buffer input 'uint8)
                  (ramp
                   (sca-add
                    (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
                    (sca-sub
                     (sca-sub (var-lookup 't101) (var-lookup 't106))
                     (var-lookup 'input.min.0)))
                   1
                   16)
                  (aligned 1 0))
                 'int16
                 16)
                (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
               'int32
               16)
              (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
             (sca-broadcast (int32_t (bv #x00000100 32)) 16)))
           (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
          (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
         'int16
         16)
        'int32
        16)
       (vec-cast (sca-broadcast (int16_t (bv #x0080 16)) 16) 'int32 16))
      (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
     (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
    'int16
    16)
   (sca-broadcast (int16_t (bv #x00ff 16)) 16))
  #<abstr-halide-expr>)
 'uint8
 16)
optimized-template:
  (cast ... #<abstr-expr> 'uint8 #t)
optimized Halide 0:
  (uint8_t
 (extract 7 0 (ite (bvsle (app abstr-vals$2003 0) (ite (bvsle (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bv #x00000080 32) (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32))) (bv #x00007fff 32)) (bvadd (bv #x00000080 32) (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bv #x00000080 32) (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32))) (bv #x00007fff 32)) (bvadd (bv #x00000080 32) (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bv #x00ff 16)) (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bv #x00000080 32) (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32))) (bv #x00007fff 32)) (bvadd (bv #x00000080 32) (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bv #x00000080 32) (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32))) (bv #x00007fff 32)) (bvadd (bv #x00000080 32) (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bv #x00ff 16))) (ite (bvsle (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bv #x00000080 32) (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32))) (bv #x00007fff 32)) (bvadd (bv #x00000080 32) (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bv #x00000080 32) (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32))) (bv #x00007fff 32)) (bvadd (bv #x00000080 32) (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bv #x00ff 16)) (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bv #x00000080 32) (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32))) (bv #x00007fff 32)) (bvadd (bv #x00000080 32) (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bv #x00000080 32) (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32))) (bv #x00007fff 32)) (bvadd (bv #x00000080 32) (sign-extend (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32))) (ite (bvsle (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bvadd (bvand (bv #x00000001 32) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000080 64))))) (extract 31 0 (bvadd (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bvneg (bvashr (sign-extend (bvmul (sign-extend (bvadd (zero-extend (app input (+ (+ t120 (- (+ t125 output.s0.y.rebased))) (+ (+ (+ t122 (+ -16 t135)) (- t136)) (- t115)))) (bitvector 16)) (bvneg (zero-extend input_zero (bitvector 16)))) (bitvector 32)) (app inv_sqrt 0)) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000000000100 64))))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bitvector 32))) (bv #x00007fff 32)) (bv #xffff8000 32))) (bv #x00ff 16)) ...)))
optimized x86 0:
  (uint8_t
 (ite (bvslt (app abstr-vals$2003 0) (bv #x0000 16)) (bv #x00 8) (ite (bvslt (bv #x00ff 16) (app abstr-vals$2003 0)) (bv #xff 8) (extract 7 0 (app abstr-vals$2003 0)))))
run-x86-synthesizer
halide-expr:
  (vec-cast
 (vec-max
  (vec-min
   (vec-cast
    (vec-max
     (vec-min
      (vec-add
       (vec-cast
        (vec-cast
         (vec-max
          (vec-min
           (vec-add
            (vec-bwand
             (sca-broadcast (int32_t (bv #x00000001 32)) 16)
             (vec-div
              (vec-mul
               (vec-cast
                (vec-sub
                 (vec-cast
                  (load
                   (buffer input 'uint8)
                   (ramp
                    (sca-add
                     (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
                     (sca-sub
                      (sca-sub (var-lookup 't101) (var-lookup 't106))
                      (var-lookup 'input.min.0)))
                    1
                    16)
                   (aligned 1 0))
                  'int16
                  16)
                 (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
                'int32
                16)
               (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
              (sca-broadcast (int32_t (bv #x00000080 32)) 16)))
            (vec-div
             (vec-mul
              (vec-cast
               (vec-sub
                (vec-cast
                 (load
                  (buffer input 'uint8)
                  (ramp
                   (sca-add
                    (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
                    (sca-sub
                     (sca-sub (var-lookup 't101) (var-lookup 't106))
                     (var-lookup 'input.min.0)))
                   1
                   16)
                  (aligned 1 0))
                 'int16
                 16)
                (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
               'int32
               16)
              (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
             (sca-broadcast (int32_t (bv #x00000100 32)) 16)))
           (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
          (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
         'int16
         16)
        'int32
        16)
       (vec-cast (sca-broadcast (int16_t (bv #x0080 16)) 16) 'int32 16))
      (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
     (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
    'int16
    16)
   (sca-broadcast (int16_t (bv #x00ff 16)) 16))
  (sca-broadcast (int16_t (bv #x0000 16)) 16))
 'uint8
 16)
template:
  (cast
 ...
 (vs-mpy-add
  ...
  (combine
   (cast
    ...
    (vs-shift-right
     ...
     (vs-mpy-add
      ...
      (vs-mpy-add
       ...
       (combine #<load-data> (broadcast ... (uint8_t input_zero)))
       (list (int8_t (bv #x01 8)) (int8_t (bv #xff 8)))
       #f
       #f
       #f
       'int16)
      (list (load-sca (buffer inv_sqrt 'int32) 0))
      #f
      #f
      #f
      'int32)
     (int32_t (bv #x00000008 32))
     #t
     x?$1442
     #t)
    'int16
    #t)
   (broadcast ... (int16_t (bv #x0080 16))))
  (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
  #f
  #f
  #f
  'int32)
 'uint8
 x?$2001)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$2004 idx) (bv #x0000807f 32)) (bvsle (bv #xffff8080 32) (app abstr-vals$2004 idx)))))
optimized-halide-expr:
  (vec-cast
 (vec-max
  (vec-min
   (vec-cast
    (vec-max
     (vec-min
      #<abstr-halide-expr>
      (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
     (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
    'int16
    16)
   (sca-broadcast (int16_t (bv #x00ff 16)) 16))
  (sca-broadcast (int16_t (bv #x0000 16)) 16))
 'uint8
 16)
optimized-template:
  (cast ... #<abstr-expr> 'uint8 x?$2001)
optimized Halide 0:
  (uint8_t
 (extract 7 0 (ite (bvsle (bv #x0000 16) (ite (bvsle (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (app abstr-vals$2004 0) (bv #x00007fff 32)) (app abstr-vals$2004 0) (bv #x00007fff 32))) (ite (bvsle (app abstr-vals$2004 0) (bv #x00007fff 32)) (app abstr-vals$2004 0) (bv #x00007fff 32)) (bv #xffff8000 32))) (bv #x00ff 16)) (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (app abstr-vals$2004 0) (bv #x00007fff 32)) (app abstr-vals$2004 0) (bv #x00007fff 32))) (ite (bvsle (app abstr-vals$2004 0) (bv #x00007fff 32)) (app abstr-vals$2004 0) (bv #x00007fff 32)) (bv #xffff8000 32))) (bv #x00ff 16))) (ite (bvsle (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (app abstr-vals$2004 0) (bv #x00007fff 32)) (app abstr-vals$2004 0) (bv #x00007fff 32))) (ite (bvsle (app abstr-vals$2004 0) (bv #x00007fff 32)) (app abstr-vals$2004 0) (bv #x00007fff 32)) (bv #xffff8000 32))) (bv #x00ff 16)) (extract 15 0 (ite (bvsle (bv #xffff8000 32) (ite (bvsle (app abstr-vals$2004 0) (bv #x00007fff 32)) (app abstr-vals$2004 0) (bv #x00007fff 32))) (ite (bvsle (app abstr-vals$2004 0) (bv #x00007fff 32)) (app abstr-vals$2004 0) (bv #x00007fff 32)) (bv #xffff8000 32))) (bv #x00ff 16)) (bv #x0000 16))))
optimized x86 0:
  (uint8_t
 (ite x?$2001 (ite (bvslt (app abstr-vals$2004 0) (bv #x00000000 32)) (bv #x00 8) (ite (bvslt (bv #x000000ff 32) (app abstr-vals$2004 0)) (bv #xff 8) (extract 7 0 (app abstr-vals$2004 0)))) (extract 7 0 (app abstr-vals$2004 0))))
Ran synthesizer for 83 ms
(model
 [x?$2001 #t])
(vec-cast
 (vec-max
  (vec-min
   (vec-cast
    (vec-max
     (vec-min
      #<abstr-halide-expr>
      (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
     (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
    'int16
    16)
   (sca-broadcast (int16_t (bv #x00ff 16)) 16))
  (sca-broadcast (int16_t (bv #x0000 16)) 16))
 'uint8
 16)
(cast
 ...
 (vs-mpy-add
  ...
  (combine
   (cast
    ...
    (vs-shift-right
     ...
     (vs-mpy-add
      ...
      (vs-mpy-add
       ...
       (combine #<load-data> (broadcast ... (uint8_t input_zero)))
       (list (int8_t (bv #x01 8)) (int8_t (bv #xff 8)))
       #f
       #f
       #f
       'int16)
      (list (load-sca (buffer inv_sqrt 'int32) 0))
      #f
      #f
      #f
      'int32)
     (int32_t (bv #x00000008 32))
     #t
     x?$1442
     #t)
    'int16
    #t)
   (broadcast ... (int16_t (bv #x0080 16))))
  (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
  #f
  #f
  #f
  'int32)
 'uint8
 #t)
Ran bounds analysis for 22 ms
Ran bounds analysis for 12 ms
"Success?"
#t
(cast ... (vs-mpy-add ... (combine (cast ... (vs-shift-right ... (vs-mpy-add ... (vs-mpy-add ... (combine #<load-data> (broadcast ... (uint8_t input_zero))) (list (int8_t (bv #x01 8)) (int8_t (bv #xff 8))) #f #f #f 'int16) (list (load-sca (buffer inv_sqrt 'int32) 0)) #f #f #f 'int32) (int32_t (bv #x00000008 32)) #t x?$1442 #t) 'int16 #t) (broadcast ... (int16_t (bv #x0080 16)))) (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8))) #f #f #f 'int32) 'uint8 #t)

(x86) Successfully found an equivalent IR expression.

(cast
 ...
 (vs-mpy-add
  ...
  (combine
   (cast
    ...
    (vs-shift-right
     ...
     (vs-mpy-add
      ...
      (vs-mpy-add
       ...
       (combine #<load-data> (broadcast ... (uint8_t input_zero)))
       (list (int8_t (bv #x01 8)) (int8_t (bv #xff 8)))
       #f
       #f
       #f
       'int16)
      (list (load-sca (buffer inv_sqrt 'int32) 0))
      #f
      #f
      #f
      'int32)
     (int32_t (bv #x00000008 32))
     #t
     x?$1442
     #t)
    'int16
    #t)
   (broadcast ... (int16_t (bv #x0080 16))))
  (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
  #f
  #f
  #f
  'int32)
 'uint8
 #t)

Synthesis time: 33 seconds

Synthesizing x86 for:
(vec-cast
 (vec-max
  (vec-min
   (vec-cast
    (vec-max
     (vec-min
      (vec-add
       (vec-cast
        (vec-cast
         (vec-max
          (vec-min
           (vec-add
            (vec-bwand
             (sca-broadcast (int32_t (bv #x00000001 32)) 16)
             (vec-div
              (vec-mul
               (vec-cast
                (vec-sub
                 (vec-cast
                  (load
                   (buffer input 'uint8)
                   (ramp
                    (sca-add
                     (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
                     (sca-sub
                      (sca-sub (var-lookup 't101) (var-lookup 't106))
                      (var-lookup 'input.min.0)))
                    1
                    16)
                   (aligned 1 0))
                  'int16
                  16)
                 (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
                'int32
                16)
               (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
              (sca-broadcast (int32_t (bv #x00000080 32)) 16)))
            (vec-div
             (vec-mul
              (vec-cast
               (vec-sub
                (vec-cast
                 (load
                  (buffer input 'uint8)
                  (ramp
                   (sca-add
                    (sca-mul (var-lookup 'input.stride.1) (var-lookup 't91))
                    (sca-sub
                     (sca-sub (var-lookup 't101) (var-lookup 't106))
                     (var-lookup 'input.min.0)))
                   1
                   16)
                  (aligned 1 0))
                 'int16
                 16)
                (vec-cast (sca-broadcast (uint8_t input_zero) 16) 'int16 16))
               'int32
               16)
              (sca-broadcast (load-sca (buffer inv_sqrt 'int32) 0) 16))
             (sca-broadcast (int32_t (bv #x00000100 32)) 16)))
           (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
          (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
         'int16
         16)
        'int32
        16)
       (vec-cast (sca-broadcast (int16_t (bv #x0080 16)) 16) 'int32 16))
      (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
     (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
    'int16
    16)
   (sca-broadcast (int16_t (bv #x00ff 16)) 16))
  (sca-broadcast (int16_t (bv #x0000 16)) 16))
 'uint8
 16)


synthesize-x86 output:
#<void>
#f
