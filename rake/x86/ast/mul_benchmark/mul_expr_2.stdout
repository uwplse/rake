Lifting input expression to x86 IR...
=====================================

"Building Expr:"
(sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
"Fold templates"
'()
here()

"Replace templates"
'()
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
template:
  (broadcast ... (int64_t (bv #x0000000000000001 64)))
axioms:
  '()
optimized-halide-expr:
  (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
optimized-template:
  (broadcast ... (int64_t (bv #x0000000000000001 64)))
optimized Halide 0:
  (int64_t (bv #x0000000000000001 64))
optimized x86 0:
  (int64_t (bv #x0000000000000001 64))
Ran synthesizer for 19 ms
(model)
(sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
(broadcast ... (int64_t (bv #x0000000000000001 64)))
Ran bounds analysis for 21 ms
Ran bounds analysis for 13 ms
"Extended success?"
#t
(broadcast ... (int64_t (bv #x0000000000000001 64)))
"Building Expr:"
(load
 (buffer input1 'uint8)
 (ramp
  (sca-add
   (sca-mul output.s0.x.x 16)
   (sca-add
    (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
    (var-lookup 't72)))
  1
  16)
 (aligned 1 0))
"Fold templates"
'()
here()

"Replace templates"
'()
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (load
 (buffer input1 'uint8)
 (ramp
  (sca-add
   (sca-mul output.s0.x.x 16)
   (sca-add
    (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
    (var-lookup 't72)))
  1
  16)
 (aligned 1 0))
template:
  #<load-data>
axioms:
  '()
optimized-halide-expr:
  (load
 (buffer input1 'uint8)
 (ramp
  (sca-add
   (sca-mul output.s0.x.x 16)
   (sca-add
    (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
    (var-lookup 't72)))
  1
  16)
 (aligned 1 0))
optimized-template:
  #<load-data>
optimized Halide 0:
  (uint8_t
 (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))))
optimized x86 0:
  (uint8_t
 (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))))
Ran synthesizer for 18 ms
(model
 [idx$0 0])
(load
 (buffer input1 'uint8)
 (ramp
  (sca-add
   (sca-mul output.s0.x.x 16)
   (sca-add
    (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
    (var-lookup 't72)))
  1
  16)
 (aligned 1 0))
#<load-data>
Ran bounds analysis for 20 ms
Ran bounds analysis for 11 ms
"Extended success?"
#t
#<load-data>
"Building Expr:"
(vec-cast
 (load
  (buffer input1 'uint8)
  (ramp
   (sca-add
    (sca-mul output.s0.x.x 16)
    (sca-add
     (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
     (var-lookup 't72)))
   1
   16)
  (aligned 1 0))
 'int16
 16)
"Fold templates"
'(#<load-data>)
here(#<load-data>)

"Replace templates"
'()
run-x86-synthesizer
halide-expr:
  (vec-cast
 (load
  (buffer input1 'uint8)
  (ramp
   (sca-add
    (sca-mul output.s0.x.x 16)
    (sca-add
     (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
     (var-lookup 't72)))
   1
   16)
  (aligned 1 0))
 'int16
 16)
template:
  #<load-data>
axioms:
  '()
optimized-halide-expr:
  (vec-cast
 (load
  (buffer input1 'uint8)
  (ramp
   (sca-add
    (sca-mul output.s0.x.x 16)
    (sca-add
     (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
     (var-lookup 't72)))
   1
   16)
  (aligned 1 0))
 'int16
 16)
optimized-template:
  #<load-data>
optimized Halide 0:
  (int16_t
 (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16)))
optimized x86 0:
  (uint8_t
 (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))))
Ran synthesizer for 1 ms
(unsat)
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (vec-cast
 (load
  (buffer input1 'uint8)
  (ramp
   (sca-add
    (sca-mul output.s0.x.x 16)
    (sca-add
     (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
     (var-lookup 't72)))
   1
   16)
  (aligned 1 0))
 'int16
 16)
template:
  (cast ... #<load-data> 'int16 #f)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-cast #<abstr-halide-expr> 'int16 16)
optimized-template:
  (cast ... #<abstr-expr> 'int16 #f)
optimized Halide 0:
  (int16_t (zero-extend (app abstr-vals$129 0) (bitvector 16)))
optimized x86 0:
  (int16_t (zero-extend (app abstr-vals$129 0) (bitvector 16)))
Ran synthesizer for 15 ms
(model)
(vec-cast #<abstr-halide-expr> 'int16 16)
(cast ... #<load-data> 'int16 #f)
Ran bounds analysis for 21 ms
Ran bounds analysis for 12 ms
"Extended success?"
#t
(cast ... #<load-data> 'int16 #f)
"Building Expr:"
(sca-broadcast (int16_t (bv #x0040 16)) 16)
"Fold templates"
'()
here()

"Replace templates"
'()
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (sca-broadcast (int16_t (bv #x0040 16)) 16)
template:
  (broadcast ... (int16_t (bv #x0040 16)))
axioms:
  '()
optimized-halide-expr:
  (sca-broadcast (int16_t (bv #x0040 16)) 16)
optimized-template:
  (broadcast ... (int16_t (bv #x0040 16)))
optimized Halide 0:
  (int16_t (bv #x0040 16))
optimized x86 0:
  (int16_t (bv #x0040 16))
Ran synthesizer for 14 ms
(model)
(sca-broadcast (int16_t (bv #x0040 16)) 16)
(broadcast ... (int16_t (bv #x0040 16)))
Ran bounds analysis for 20 ms
Ran bounds analysis for 12 ms
"Extended success?"
#t
(broadcast ... (int16_t (bv #x0040 16)))
"Building Expr:"
(vec-mul
 (vec-cast
  (load
   (buffer input1 'uint8)
   (ramp
    (sca-add
     (sca-mul output.s0.x.x 16)
     (sca-add
      (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
      (var-lookup 't72)))
    1
    16)
   (aligned 1 0))
  'int16
  16)
 (sca-broadcast (int16_t (bv #x0040 16)) 16))
"Fold templates"
(list #<load-data> (cast ... #<load-data> 'int16 x?$131))
here(#<load-data> #(struct:cast ... #<load-data> int16 x?$131))

(list (vs-mpy-add ... #<load-data> (list (int16_t (bv #x0040 16))) #f #f #f 'int16) (vs-mpy-add ... #<load-data> (list (int16_t (bv #x0040 16))) #f #f #f 'int16) (vv-mpy-add ... #<load-data> '(1) (! x?$388) (! x?$389) (! x?$390) 'int16) (vv-mpy-add ... #<load-data> '(1) (! x?$391) (! x?$392) (! x?$393) 'int16))
"Replace templates"
(list
 (vs-mpy-add ... #<load-data> (list (int16_t (bv #x0040 16))) #f #f #f 'int16)
 (vs-mpy-add ... #<load-data> (list (int16_t (bv #x0040 16))) #f #f #f 'int16)
 (vv-mpy-add ... #<load-data> '(1) (! x?$388) (! x?$389) (! x?$390) 'int16)
 (vv-mpy-add ... #<load-data> '(1) (! x?$391) (! x?$392) (! x?$393) 'int16))
run-x86-synthesizer
halide-expr:
  (vec-mul
 (vec-cast
  (load
   (buffer input1 'uint8)
   (ramp
    (sca-add
     (sca-mul output.s0.x.x 16)
     (sca-add
      (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
      (var-lookup 't72)))
    1
    16)
   (aligned 1 0))
  'int16
  16)
 (sca-broadcast (int16_t (bv #x0040 16)) 16))
template:
  #<load-data>
axioms:
  '()
optimized-halide-expr:
  (vec-mul
 (vec-cast
  (load
   (buffer input1 'uint8)
   (ramp
    (sca-add
     (sca-mul output.s0.x.x 16)
     (sca-add
      (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
      (var-lookup 't72)))
    1
    16)
   (aligned 1 0))
  'int16
  16)
 (sca-broadcast (int16_t (bv #x0040 16)) 16))
optimized-template:
  #<load-data>
optimized Halide 0:
  (int16_t
 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))))
optimized x86 0:
  (uint8_t
 (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))))
Ran synthesizer for 2 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-mul
 (vec-cast
  (load
   (buffer input1 'uint8)
   (ramp
    (sca-add
     (sca-mul output.s0.x.x 16)
     (sca-add
      (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
      (var-lookup 't72)))
    1
    16)
   (aligned 1 0))
  'int16
  16)
 (sca-broadcast (int16_t (bv #x0040 16)) 16))
template:
  (cast ... #<load-data> 'int16 x?$131)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-mul
 (vec-cast #<abstr-halide-expr> 'int16 16)
 (sca-broadcast (int16_t (bv #x0040 16)) 16))
optimized-template:
  (cast ... #<abstr-expr> 'int16 x?$131)
optimized Halide 0:
  (int16_t
 (bvmul (bv #x0040 16) (zero-extend (app abstr-vals$394 0) (bitvector 16))))
optimized x86 0:
  (int16_t (zero-extend (app abstr-vals$394 0) (bitvector 16)))
Ran synthesizer for 43 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-mul
 (vec-cast
  (load
   (buffer input1 'uint8)
   (ramp
    (sca-add
     (sca-mul output.s0.x.x 16)
     (sca-add
      (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
      (var-lookup 't72)))
    1
    16)
   (aligned 1 0))
  'int16
  16)
 (sca-broadcast (int16_t (bv #x0040 16)) 16))
template:
  (vs-mpy-add ... #<load-data> (list (int16_t (bv #x0040 16))) #f #f #f 'int16)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-mul
 (vec-cast #<abstr-halide-expr> 'int16 16)
 (sca-broadcast (int16_t (bv #x0040 16)) 16))
optimized-template:
  (vs-mpy-add ... #<abstr-expr> (list (int16_t (bv #x0040 16))) #f #f #f 'int16)
optimized Halide 0:
  (int16_t
 (bvmul (bv #x0040 16) (zero-extend (app abstr-vals$395 0) (bitvector 16))))
optimized x86 0:
  (int16_t
 (bvmul (bv #x0040 16) (zero-extend (app abstr-vals$395 0) (bitvector 16))))
Ran synthesizer for 15 ms
(model)
(vec-mul
 (vec-cast #<abstr-halide-expr> 'int16 16)
 (sca-broadcast (int16_t (bv #x0040 16)) 16))
(vs-mpy-add ... #<load-data> (list (int16_t (bv #x0040 16))) #f #f #f 'int16)
Ran bounds analysis for 23 ms
Ran bounds analysis for 19 ms
"Success?"
#t
(vs-mpy-add ... #<load-data> (list (int16_t (bv #x0040 16))) #f #f #f 'int16)
"Building Expr:"
(sca-broadcast (sca-mul (int16_t t146) (int16_t (bv #xffc0 16))) 16)
"Fold templates"
'()
here()

"Replace templates"
'()
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (sca-broadcast (sca-mul (int16_t t146) (int16_t (bv #xffc0 16))) 16)
template:
  (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16))))
axioms:
  '()
optimized-halide-expr:
  (sca-broadcast (sca-mul (int16_t t146) (int16_t (bv #xffc0 16))) 16)
optimized-template:
  (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16))))
optimized Halide 0:
  (int16_t (bvmul (bv #xffc0 16) t146))
optimized x86 0:
  (int16_t (bvmul (bv #xffc0 16) t146))
Ran synthesizer for 17 ms
(model)
(sca-broadcast (sca-mul (int16_t t146) (int16_t (bv #xffc0 16))) 16)
(broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16))))
Ran bounds analysis for 20 ms
Ran bounds analysis for 14 ms
"Extended success?"
#t
(broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16))))
"Building Expr:"
(vec-add
 (vec-mul
  (vec-cast
   (load
    (buffer input1 'uint8)
    (ramp
     (sca-add
      (sca-mul output.s0.x.x 16)
      (sca-add
       (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
       (var-lookup 't72)))
     1
     16)
    (aligned 1 0))
   'int16
   16)
  (sca-broadcast (int16_t (bv #x0040 16)) 16))
 (sca-broadcast (sca-mul (int16_t t146) (int16_t (bv #xffc0 16))) 16))
"Fold templates"
(list
 #<load-data>
 (vs-mpy-add
  ...
  #<load-data>
  (list
   (int16_t (bv #x0040 16))
   (union [x?$400 #(struct:int16_t (bv #x0040 16))] [(! x?$400) #(struct:int8_t
                                                                  (bv #x01 8))]))
  #f
  #f
  #f
  'int16)
 (vs-mpy-add
  ...
  #<load-data>
  (list (int16_t (bv #x0040 16)))
  #f
  x?$398
  #f
  'int16)
 (vs-mpy-add
  ...
  (combine
   (vs-mpy-add
    ...
    #<load-data>
    (list (int16_t (bv #x0040 16)))
    #f
    #f
    #f
    'int16)
   (union [x?$401 #(struct:vs-mpy-add
                    ...
                    #<load-data>
                    (#(struct:int16_t (bv #x0040 16)))
                    #f
                    #f
                    #f
                    int16)] [(! x?$401) #(struct:broadcast
                                          ...
                                          #(struct:sca-mul
                                            #(struct:int16_t t146)
                                            #(struct:int16_t (bv #xffc0 16))))]))
  (list (int16_t (bv #x0040 16)) (int8_t (bv #x01 8)))
  #f
  #f
  #f
  'int16))
here(#<load-data> #(struct:vs-mpy-add ... #<load-data> (#(struct:int16_t (bv #x0040 16)) (union #:size 2 #:hash 1456784425246)) #f #f #f int16) #(struct:vs-mpy-add ... #<load-data> (#(struct:int16_t (bv #x0040 16))) #f x?$398 #f int16) #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<load-data> (#(struct:int16_t (bv #x0040 16))) #f #f #f int16) (union #:size 2 #:hash 398084443179)> (#(struct:int16_t (bv #x0040 16)) #(struct:int8_t (bv #x01 8))) #f #f #f int16))

"Replace templates"
'()
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-mul
  (vec-cast
   (load
    (buffer input1 'uint8)
    (ramp
     (sca-add
      (sca-mul output.s0.x.x 16)
      (sca-add
       (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
       (var-lookup 't72)))
     1
     16)
    (aligned 1 0))
   'int16
   16)
  (sca-broadcast (int16_t (bv #x0040 16)) 16))
 (sca-broadcast (sca-mul (int16_t t146) (int16_t (bv #xffc0 16))) 16))
template:
  #<load-data>
axioms:
  '()
optimized-halide-expr:
  (vec-add
 (vec-mul
  (vec-cast
   (load
    (buffer input1 'uint8)
    (ramp
     (sca-add
      (sca-mul output.s0.x.x 16)
      (sca-add
       (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
       (var-lookup 't72)))
     1
     16)
    (aligned 1 0))
   'int16
   16)
  (sca-broadcast (int16_t (bv #x0040 16)) 16))
 (sca-broadcast (sca-mul (int16_t t146) (int16_t (bv #xffc0 16))) 16))
optimized-template:
  #<load-data>
optimized Halide 0:
  (int16_t
 (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)))
optimized x86 0:
  (uint8_t
 (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))))
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-mul
  (vec-cast
   (load
    (buffer input1 'uint8)
    (ramp
     (sca-add
      (sca-mul output.s0.x.x 16)
      (sca-add
       (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
       (var-lookup 't72)))
     1
     16)
    (aligned 1 0))
   'int16
   16)
  (sca-broadcast (int16_t (bv #x0040 16)) 16))
 (sca-broadcast (sca-mul (int16_t t146) (int16_t (bv #xffc0 16))) 16))
template:
  (vs-mpy-add
 ...
 #<load-data>
 (list
  (int16_t (bv #x0040 16))
  (union [x?$400 #(struct:int16_t (bv #x0040 16))] [(! x?$400) #(struct:int8_t
                                                                 (bv #x01 8))]))
 #f
 #f
 #f
 'int16)
axioms:
  '()
optimized-halide-expr:
  (vec-add
 (vec-mul
  (vec-cast
   (load
    (buffer input1 'uint8)
    (ramp
     (sca-add
      (sca-mul output.s0.x.x 16)
      (sca-add
       (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
       (var-lookup 't72)))
     1
     16)
    (aligned 1 0))
   'int16
   16)
  (sca-broadcast (int16_t (bv #x0040 16)) 16))
 (sca-broadcast (sca-mul (int16_t t146) (int16_t (bv #xffc0 16))) 16))
optimized-template:
  (vs-mpy-add
 ...
 #<load-data>
 (list
  (int16_t (bv #x0040 16))
  (union [x?$400 #(struct:int16_t (bv #x0040 16))] [(! x?$400) #(struct:int8_t
                                                                 (bv #x01 8))]))
 #f
 #f
 #f
 'int16)
optimized Halide 0:
  (int16_t
 (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)))
optimized x86 0:
  (int16_t
 (bvmul (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16)) (ite x?$400 (bv #x0080 16) (bv #x0041 16))))
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-mul
  (vec-cast
   (load
    (buffer input1 'uint8)
    (ramp
     (sca-add
      (sca-mul output.s0.x.x 16)
      (sca-add
       (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
       (var-lookup 't72)))
     1
     16)
    (aligned 1 0))
   'int16
   16)
  (sca-broadcast (int16_t (bv #x0040 16)) 16))
 (sca-broadcast (sca-mul (int16_t t146) (int16_t (bv #xffc0 16))) 16))
template:
  (vs-mpy-add
 ...
 #<load-data>
 (list (int16_t (bv #x0040 16)))
 #f
 x?$398
 #f
 'int16)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-add
 (vec-mul
  (vec-cast #<abstr-halide-expr> 'int16 16)
  (sca-broadcast (int16_t (bv #x0040 16)) 16))
 (sca-broadcast (sca-mul (int16_t t146) (int16_t (bv #xffc0 16))) 16))
optimized-template:
  (vs-mpy-add
 ...
 #<abstr-expr>
 (list (int16_t (bv #x0040 16)))
 #f
 x?$398
 #f
 'int16)
optimized Halide 0:
  (int16_t
 (bvadd (bvmul (bv #xffc0 16) t146) (bvmul (bv #x0040 16) (zero-extend (app abstr-vals$594 0) (bitvector 16)))))
optimized x86 0:
  (int16_t
 (bvadd (bvmul (bv #x0040 16) (zero-extend (app abstr-vals$594 0) (bitvector 16))) (ite x?$398 (bv #x0001 16) (bv #x0000 16))))
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-mul
  (vec-cast
   (load
    (buffer input1 'uint8)
    (ramp
     (sca-add
      (sca-mul output.s0.x.x 16)
      (sca-add
       (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
       (var-lookup 't72)))
     1
     16)
    (aligned 1 0))
   'int16
   16)
  (sca-broadcast (int16_t (bv #x0040 16)) 16))
 (sca-broadcast (sca-mul (int16_t t146) (int16_t (bv #xffc0 16))) 16))
template:
  (vs-mpy-add
 ...
 (combine
  (vs-mpy-add ... #<load-data> (list (int16_t (bv #x0040 16))) #f #f #f 'int16)
  (union [x?$401 #(struct:vs-mpy-add
                   ...
                   #<load-data>
                   (#(struct:int16_t (bv #x0040 16)))
                   #f
                   #f
                   #f
                   int16)] [(! x?$401) #(struct:broadcast
                                         ...
                                         #(struct:sca-mul
                                           #(struct:int16_t t146)
                                           #(struct:int16_t (bv #xffc0 16))))]))
 (list (int16_t (bv #x0040 16)) (int8_t (bv #x01 8)))
 #f
 #f
 #f
 'int16)
axioms:
  (union [x?$401 ((forall (idx) (&& (bvsle (app abstr-vals$595 idx) (bv #x3fc0 16)) (bvsle (bv #x0000 16) (app abstr-vals$595 idx))))
                (forall (idx) (&& (bvsle (app abstr-vals$595 idx) (bv #x3fc0 16)) (bvsle (bv #x0000 16) (app abstr-vals$595 idx)))))] [(! x?$401) ((forall (idx) (&& (bvsle (app abstr-vals$595 idx) (bv #x3fc0 16)) (bvsle (bv #x0000 16) (app abstr-vals$595 idx)))))])
optimized-halide-expr:
  (vec-add
 #<abstr-halide-expr>
 (sca-broadcast (sca-mul (int16_t t146) (int16_t (bv #xffc0 16))) 16))
optimized-template:
  (vs-mpy-add
 ...
 (combine
  #<abstr-expr>
  (union [x?$401 #<abstr-expr>] [(! x?$401) #(struct:broadcast
                                              ...
                                              #(struct:sca-mul
                                                #(struct:int16_t t146)
                                                #(struct:int16_t
                                                  (bv #xffc0 16))))]))
 (list (int16_t (bv #x0040 16)) (int8_t (bv #x01 8)))
 #f
 #f
 #f
 'int16)
optimized Halide 0:
  (int16_t (bvadd (bvmul (bv #xffc0 16) t146) (app abstr-vals$595 0)))
optimized x86 0:
  (int16_t
 (bvadd (bvmul (bv #x0040 16) (ite c$403 (app abstr-vals$595 idx$402) (ite x?$401 (app abstr-vals$595 idx$402) (bvmul (bv #xffc0 16) t146)))) (ite c$405 (app abstr-vals$595 idx$404) (ite x?$401 (app abstr-vals$595 idx$404) (bvmul (bv #xffc0 16) t146)))))
Ran synthesizer for 128 ms
(unsat)
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-mul
  (vec-cast
   (load
    (buffer input1 'uint8)
    (ramp
     (sca-add
      (sca-mul output.s0.x.x 16)
      (sca-add
       (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
       (var-lookup 't72)))
     1
     16)
    (aligned 1 0))
   'int16
   16)
  (sca-broadcast (int16_t (bv #x0040 16)) 16))
 (sca-broadcast (sca-mul (int16_t t146) (int16_t (bv #xffc0 16))) 16))
template:
  (vs-mpy-add
 ...
 (combine
  #<load-data>
  (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))))
 (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
 #f
 #f
 #f
 'int16)
axioms:
  (list #t (forall (idx) (bvsle (app abstr-vals$858 idx) (bv #x7fc0 16))))
optimized-halide-expr:
  (vec-add
 (vec-mul
  (vec-cast #<abstr-halide-expr> 'int16 16)
  (sca-broadcast (int16_t (bv #x0040 16)) 16))
 #<abstr-halide-expr>)
optimized-template:
  (vs-mpy-add
 ...
 (combine #<abstr-expr> #<abstr-expr>)
 (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
 #f
 #f
 #f
 'int16)
optimized Halide 0:
  (int16_t
 (bvadd (app abstr-vals$858 0) (bvmul (bv #x0040 16) (zero-extend (app abstr-vals$857 0) (bitvector 16)))))
optimized x86 0:
  (int16_t
 (bvadd (ite c$598 (zero-extend (app abstr-vals$857 idx$597) (bitvector 16)) (app abstr-vals$858 idx$597)) (bvmul (bv #x0040 16) (ite c$600 (zero-extend (app abstr-vals$857 idx$599) (bitvector 16)) (app abstr-vals$858 idx$599)))))
Ran synthesizer for 106 ms
(model
 [idx$597 0]
 [c$598 #f]
 [idx$599 0]
 [c$600 #t])
(vec-add
 (vec-mul
  (vec-cast #<abstr-halide-expr> 'int16 16)
  (sca-broadcast (int16_t (bv #x0040 16)) 16))
 #<abstr-halide-expr>)
(vs-mpy-add
 ...
 (combine
  #<load-data>
  (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))))
 (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
 #f
 #f
 #f
 'int16)
Ran bounds analysis for 29 ms
Ran bounds analysis for 21 ms
"Extended success?"
#t
(vs-mpy-add
 ...
 (combine
  #<load-data>
  (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))))
 (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
 #f
 #f
 #f
 'int16)
"Building Expr:"
(vec-cast
 (vec-add
  (vec-mul
   (vec-cast
    (load
     (buffer input1 'uint8)
     (ramp
      (sca-add
       (sca-mul output.s0.x.x 16)
       (sca-add
        (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
        (var-lookup 't72)))
      1
      16)
     (aligned 1 0))
    'int16
    16)
   (sca-broadcast (int16_t (bv #x0040 16)) 16))
  (sca-broadcast (sca-mul (int16_t t146) (int16_t (bv #xffc0 16))) 16))
 'int32
 16)
"Fold templates"
(list
 #<load-data>
 (vs-mpy-add
  ...
  (combine
   #<load-data>
   (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))))
  (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
  x?$861
  x?$862
  x?$863
  'int16))
here(#<load-data> #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t146) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) x?$861 x?$862 x?$863 int16))

"Replace templates"
'()
run-x86-synthesizer
halide-expr:
  (vec-cast
 (vec-add
  (vec-mul
   (vec-cast
    (load
     (buffer input1 'uint8)
     (ramp
      (sca-add
       (sca-mul output.s0.x.x 16)
       (sca-add
        (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
        (var-lookup 't72)))
      1
      16)
     (aligned 1 0))
    'int16
    16)
   (sca-broadcast (int16_t (bv #x0040 16)) 16))
  (sca-broadcast (sca-mul (int16_t t146) (int16_t (bv #xffc0 16))) 16))
 'int32
 16)
template:
  #<load-data>
axioms:
  '()
optimized-halide-expr:
  (vec-cast
 (vec-add
  (vec-mul
   (vec-cast
    (load
     (buffer input1 'uint8)
     (ramp
      (sca-add
       (sca-mul output.s0.x.x 16)
       (sca-add
        (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
        (var-lookup 't72)))
      1
      16)
     (aligned 1 0))
    'int16
    16)
   (sca-broadcast (int16_t (bv #x0040 16)) 16))
  (sca-broadcast (sca-mul (int16_t t146) (int16_t (bv #xffc0 16))) 16))
 'int32
 16)
optimized-template:
  #<load-data>
optimized Halide 0:
  (int32_t
 (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)))
optimized x86 0:
  (uint8_t
 (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))))
run-x86-synthesizer
halide-expr:
  (vec-cast
 (vec-add
  (vec-mul
   (vec-cast
    (load
     (buffer input1 'uint8)
     (ramp
      (sca-add
       (sca-mul output.s0.x.x 16)
       (sca-add
        (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
        (var-lookup 't72)))
      1
      16)
     (aligned 1 0))
    'int16
    16)
   (sca-broadcast (int16_t (bv #x0040 16)) 16))
  (sca-broadcast (sca-mul (int16_t t146) (int16_t (bv #xffc0 16))) 16))
 'int32
 16)
template:
  (vs-mpy-add
 ...
 (combine
  #<load-data>
  (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))))
 (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
 x?$861
 x?$862
 x?$863
 'int16)
axioms:
  (list #t (forall (idx) (bvsle (app abstr-vals$930 idx) (bv #x7fc0 16))))
optimized-halide-expr:
  (vec-cast
 (vec-add
  (vec-mul
   (vec-cast #<abstr-halide-expr> 'int16 16)
   (sca-broadcast (int16_t (bv #x0040 16)) 16))
  #<abstr-halide-expr>)
 'int32
 16)
optimized-template:
  (vs-mpy-add
 ...
 (combine #<abstr-expr> #<abstr-expr>)
 (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
 x?$861
 x?$862
 x?$863
 'int16)
optimized Halide 0:
  (int32_t
 (sign-extend (bvadd (app abstr-vals$930 0) (bvmul (bv #x0040 16) (zero-extend (app abstr-vals$929 0) (bitvector 16)))) (bitvector 32)))
optimized x86 0:
  (int16_t
 (ite* (⊢ (&& (! x?$863) (! (&& x?$861 x?$863))) (ite x?$861 (bvadd (ite x?$861 (bvadd (ite x?$862 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$930 0) (ite x?$862 (bv #x0001 16) (bv #x0000 16)))) (ite (bvsle (bvadd (bv #x8000 16) (bvneg (ite (bvsle (ite x?$861 (bvadd (ite x?$862 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$930 0) (ite x?$862 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16)) (ite x?$861 (bvadd (ite x?$862 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$930 0) (ite x?$862 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16)))) (ite (bvsle (bvmul (bv #x0040 16) (zero-extend (app abstr-vals$929 0) (bitvector 16))) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$861 (bvadd (ite x?$862 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$930 0) (ite x?$862 (bv #x0001 16) (bv #x0000 16))))) (ite x?$861 (bvadd (ite x?$862 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$930 0) (ite x?$862 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16))))) (bvmul (bv #x0040 16) (zero-extend (app abstr-vals$929 0) (bitvector 16))) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$861 (bvadd (ite x?$862 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$930 0) (ite x?$862 (bv #x0001 16) (bv #x0000 16))))) (ite x?$861 (bvadd (ite x?$862 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$930 0) (ite x?$862 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16)))))) (ite (bvsle (bvmul (bv #x0040 16) (zero-extend (app abstr-vals$929 0) (bitvector 16))) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$861 (bvadd (ite x?$862 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$930 0) (ite x?$862 (bv #x0001 16) (bv #x0000 16))))) (ite x?$861 (bvadd (ite x?$862 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$930 0) (ite x?$862 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16))))) (bvmul (bv #x0040 16) (zero-extend (app abstr-vals$929 0) (bitvector 16))) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$861 (bvadd (ite x?$862 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$930 0) (ite x?$862 (bv #x0001 16) (bv #x0000 16))))) (ite x?$861 (bvadd (ite x?$862 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$930 0) (ite x?$862 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16))))) (bvadd (bv #x8000 16) (bvneg (ite (bvsle (ite x?$861 (bvadd (ite x?$862 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$930 0) (ite x?$862 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16)) (ite x?$861 (bvadd (ite x?$862 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$930 0) (ite x?$862 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0040 16) (zero-extend (app abstr-vals$929 0) (bitvector 16))) (ite x?$861 (bvadd (ite x?$862 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$930 0) (ite x?$862 (bv #x0001 16) (bv #x0000 16))))))) (⊢ (|| (&& x?$861 x?$863) (&& x?$863 (! (&& x?$861 x?$863)))) (bvashr (ite x?$861 (bvadd (ite x?$861 (bvadd (ite x?$862 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$930 0) (ite x?$862 (bv #x0001 16) (bv #x0000 16)))) (ite (bvsle (bvadd (bv #x8000 16) (bvneg (ite (bvsle (ite x?$861 (bvadd (ite x?$862 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$930 0) (ite x?$862 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16)) (ite x?$861 (bvadd (ite x?$862 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$930 0) (ite x?$862 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16)))) (ite (bvsle (bvmul (bv #x0040 16) (zero-extend (app abstr-vals$929 0) (bitvector 16))) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$861 (bvadd (ite x?$862 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$930 0) (ite x?$862 (bv #x0001 16) (bv #x0000 16))))) (ite x?$861 (bvadd (ite x?$862 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$930 0) (ite x?$862 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16))))) (bvmul (bv #x0040 16) (zero-extend (app abstr-vals$929 0) (bitvector 16))) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$861 (bvadd (ite x?$862 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$930 0) (ite x?$862 (bv #x0001 16) (bv #x0000 16))))) (ite x?$861 (bvadd (ite x?$862 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$930 0) (ite x?$862 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16)))))) (ite (bvsle (bvmul (bv #x0040 16) (zero-extend (app abstr-vals$929 0) (bitvector 16))) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$861 (bvadd (ite x?$862 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$930 0) (ite x?$862 (bv #x0001 16) (bv #x0000 16))))) (ite x?$861 (bvadd (ite x?$862 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$930 0) (ite x?$862 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16))))) (bvmul (bv #x0040 16) (zero-extend (app abstr-vals$929 0) (bitvector 16))) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$861 (bvadd (ite x?$862 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$930 0) (ite x?$862 (bv #x0001 16) (bv #x0000 16))))) (ite x?$861 (bvadd (ite x?$862 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$930 0) (ite x?$862 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16))))) (bvadd (bv #x8000 16) (bvneg (ite (bvsle (ite x?$861 (bvadd (ite x?$862 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$930 0) (ite x?$862 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16)) (ite x?$861 (bvadd (ite x?$862 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$930 0) (ite x?$862 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0040 16) (zero-extend (app abstr-vals$929 0) (bitvector 16))) (ite x?$861 (bvadd (ite x?$862 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$930 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$862 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$930 0) (ite x?$862 (bv #x0001 16) (bv #x0000 16)))))) (bv #x0001 16)))))
Ran synthesizer for 17 ms
(unsat)
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (vec-cast
 (vec-add
  (vec-mul
   (vec-cast
    (load
     (buffer input1 'uint8)
     (ramp
      (sca-add
       (sca-mul output.s0.x.x 16)
       (sca-add
        (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
        (var-lookup 't72)))
      1
      16)
     (aligned 1 0))
    'int16
    16)
   (sca-broadcast (int16_t (bv #x0040 16)) 16))
  (sca-broadcast (sca-mul (int16_t t146) (int16_t (bv #xffc0 16))) 16))
 'int32
 16)
template:
  (cast
 ...
 (vs-mpy-add
  ...
  (combine
   #<load-data>
   (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))))
  (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
  #f
  #f
  #f
  'int16)
 'int32
 #f)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-cast #<abstr-halide-expr> 'int32 16)
optimized-template:
  (cast ... #<abstr-expr> 'int32 #f)
optimized Halide 0:
  (int32_t (sign-extend (app abstr-vals$931 0) (bitvector 32)))
optimized x86 0:
  (int32_t (sign-extend (app abstr-vals$931 0) (bitvector 32)))
Ran synthesizer for 15 ms
(model)
(vec-cast #<abstr-halide-expr> 'int32 16)
(cast
 ...
 (vs-mpy-add
  ...
  (combine
   #<load-data>
   (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))))
  (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
  #f
  #f
  #f
  'int16)
 'int32
 #f)
Ran bounds analysis for 31 ms
Ran bounds analysis for 24 ms
"Extended success?"
#t
(cast
 ...
 (vs-mpy-add
  ...
  (combine
   #<load-data>
   (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))))
  (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
  #f
  #f
  #f
  'int16)
 'int32
 #f)
"Building Expr:"
(sca-broadcast
 (sca-mul (sca-sub (int16_t t147) (int16_t t148)) (int16_t (bv #x0040 16)))
 16)
"Fold templates"
'()
here()

"Replace templates"
'()
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (sca-broadcast
 (sca-mul (sca-sub (int16_t t147) (int16_t t148)) (int16_t (bv #x0040 16)))
 16)
template:
  (broadcast
 ...
 (sca-mul (sca-sub (int16_t t147) (int16_t t148)) (int16_t (bv #x0040 16))))
axioms:
  '()
optimized-halide-expr:
  (sca-broadcast
 (sca-mul (sca-sub (int16_t t147) (int16_t t148)) (int16_t (bv #x0040 16)))
 16)
optimized-template:
  (broadcast
 ...
 (sca-mul (sca-sub (int16_t t147) (int16_t t148)) (int16_t (bv #x0040 16))))
optimized Halide 0:
  (int16_t (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))))
optimized x86 0:
  (int16_t (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))))
Ran synthesizer for 15 ms
(model)
(sca-broadcast
 (sca-mul (sca-sub (int16_t t147) (int16_t t148)) (int16_t (bv #x0040 16)))
 16)
(broadcast
 ...
 (sca-mul (sca-sub (int16_t t147) (int16_t t148)) (int16_t (bv #x0040 16))))
Ran bounds analysis for 21 ms
Ran bounds analysis for 16 ms
"Extended success?"
#t
(broadcast
 ...
 (sca-mul (sca-sub (int16_t t147) (int16_t t148)) (int16_t (bv #x0040 16))))
"Building Expr:"
(vec-cast
 (sca-broadcast
  (sca-mul (sca-sub (int16_t t147) (int16_t t148)) (int16_t (bv #x0040 16)))
  16)
 'int32
 16)
"Fold templates"
'()
here()

"Replace templates"
'()
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (vec-cast
 (sca-broadcast
  (sca-mul (sca-sub (int16_t t147) (int16_t t148)) (int16_t (bv #x0040 16)))
  16)
 'int32
 16)
template:
  (cast
 ...
 (broadcast
  ...
  (sca-mul (sca-sub (int16_t t147) (int16_t t148)) (int16_t (bv #x0040 16))))
 'int32
 #f)
axioms:
  (list (forall (idx) (bvsle (app abstr-vals$933 idx) (bv #x7fc0 16))))
optimized-halide-expr:
  (vec-cast #<abstr-halide-expr> 'int32 16)
optimized-template:
  (cast ... #<abstr-expr> 'int32 #f)
optimized Halide 0:
  (int32_t (sign-extend (app abstr-vals$933 0) (bitvector 32)))
optimized x86 0:
  (int32_t (sign-extend (app abstr-vals$933 0) (bitvector 32)))
Ran synthesizer for 29 ms
(model)
(vec-cast #<abstr-halide-expr> 'int32 16)
(cast
 ...
 (broadcast
  ...
  (sca-mul (sca-sub (int16_t t147) (int16_t t148)) (int16_t (bv #x0040 16))))
 'int32
 #f)
Ran bounds analysis for 29 ms
Ran bounds analysis for 25 ms
"Extended success?"
#t
(cast
 ...
 (broadcast
  ...
  (sca-mul (sca-sub (int16_t t147) (int16_t t148)) (int16_t (bv #x0040 16))))
 'int32
 #f)
"Building Expr:"
(vec-mul
 (vec-cast
  (vec-add
   (vec-mul
    (vec-cast
     (load
      (buffer input1 'uint8)
      (ramp
       (sca-add
        (sca-mul output.s0.x.x 16)
        (sca-add
         (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
         (var-lookup 't72)))
       1
       16)
      (aligned 1 0))
     'int16
     16)
    (sca-broadcast (int16_t (bv #x0040 16)) 16))
   (sca-broadcast (sca-mul (int16_t t146) (int16_t (bv #xffc0 16))) 16))
  'int32
  16)
 (vec-cast
  (sca-broadcast
   (sca-mul (sca-sub (int16_t t147) (int16_t t148)) (int16_t (bv #x0040 16)))
   16)
  'int32
  16))
"Fold templates"
(list
 (vs-mpy-add
  ...
  (combine
   #<load-data>
   (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))))
  (list
   (sca-mul
    (sca-cast (int8_t (bv #x01 8)) 'int16)
    (sca-cast
     (union [xi?$939 #(struct:sca-mul
                       #(struct:sca-sub
                         #(struct:int16_t t147)
                         #(struct:int16_t t148))
                       #(struct:int16_t (bv #x0040 16)))] [(&& xi?$940 (! xi?$939)) #(struct:int16_t
                                                                                      (bv #x0040 16))] [(&& (! xi?$939) (! xi?$940)) #(struct:int8_t
                                                                                                                                       (bv #x01 8))])
     'int16))
   (sca-mul
    (sca-cast (int16_t (bv #x0040 16)) 'int16)
    (sca-cast
     (union [xi?$939 #(struct:sca-mul
                       #(struct:sca-sub
                         #(struct:int16_t t147)
                         #(struct:int16_t t148))
                       #(struct:int16_t (bv #x0040 16)))] [(&& xi?$940 (! xi?$939)) #(struct:int16_t
                                                                                      (bv #x0040 16))] [(&& (! xi?$939) (! xi?$940)) #(struct:int8_t
                                                                                                                                       (bv #x01 8))])
     'int16)))
  #f
  #f
  #f
  'int16)
 (vs-mpy-add
  ...
  (combine
   #<load-data>
   (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))))
  (list
   (sca-mul
    (sca-cast (int8_t (bv #x01 8)) 'int16)
    (sca-cast
     (union [xi?$939 #(struct:sca-mul
                       #(struct:sca-sub
                         #(struct:int16_t t147)
                         #(struct:int16_t t148))
                       #(struct:int16_t (bv #x0040 16)))] [(&& xi?$940 (! xi?$939)) #(struct:int16_t
                                                                                      (bv #x0040 16))] [(&& (! xi?$939) (! xi?$940)) #(struct:int8_t
                                                                                                                                       (bv #x01 8))])
     'int16))
   (sca-mul
    (sca-cast (int16_t (bv #x0040 16)) 'int16)
    (sca-cast
     (union [xi?$939 #(struct:sca-mul
                       #(struct:sca-sub
                         #(struct:int16_t t147)
                         #(struct:int16_t t148))
                       #(struct:int16_t (bv #x0040 16)))] [(&& xi?$940 (! xi?$939)) #(struct:int16_t
                                                                                      (bv #x0040 16))] [(&& (! xi?$939) (! xi?$940)) #(struct:int8_t
                                                                                                                                       (bv #x01 8))])
     'int16)))
  #f
  #f
  #f
  'int32)
 (cast
  ...
  (vs-mpy-add
   ...
   (combine
    #<load-data>
    (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))))
   (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
   #f
   #f
   #f
   'int16)
  'int32
  x?$935)
 (cast
  ...
  (broadcast
   ...
   (sca-mul (sca-sub (int16_t t147) (int16_t t148)) (int16_t (bv #x0040 16))))
  'int32
  x?$941))
here(#(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t146) #(struct:int16_t (bv #xffc0 16))))> (#(struct:sca-mul #(struct:sca-cast #(struct:int8_t (bv #x01 8)) int16) #(struct:sca-cast (union #:size 3 #:hash 73373270277904368) int16)) #(struct:sca-mul #(struct:sca-cast #(struct:int16_t (bv #x0040 16)) int16) #(struct:sca-cast (union #:size 3 #:hash 73373270277904368) int16))) #f #f #f int16) #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t146) #(struct:int16_t (bv #xffc0 16))))> (#(struct:sca-mul #(struct:sca-cast #(struct:int8_t (bv #x01 8)) int16) #(struct:sca-cast (union #:size 3 #:hash 73373270277904368) int16)) #(struct:sca-mul #(struct:sca-cast #(struct:int16_t (bv #x0040 16)) int16) #(struct:sca-cast (union #:size 3 #:hash 73373270277904368) int16))) #f #f #f int32) #(struct:cast ... #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t146) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f #f #f int16) int32 x?$935) #(struct:cast ... #(struct:broadcast ... #(struct:sca-mul #(struct:sca-sub #(struct:int16_t t147) #(struct:int16_t t148)) #(struct:int16_t (bv #x0040 16)))) int32 x?$941))

(list (vs-mpy-add ... (vs-mpy-add ... (combine #<load-data> (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16))))) (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16))) #f #f #f 'int16) '((union [x?$1134 #(struct:sca-mul #(struct:sca-sub #(struct:int16_t t147) #(struct:int16_t t148)) #(struct:int16_t (bv #x0040 16)))] [(! x?$1134) #(struct:int16_t (bv #x0040 16))])) #f #f #f 'int32) (vs-mpy-add ... #<load-data> '((union [x?$1135 #(struct:sca-mul #(struct:sca-sub #(struct:int16_t t147) #(struct:int16_t t148)) #(struct:int16_t (bv #x0040 16)))] [(! x?$1135) #(struct:int16_t (bv #x0040 16))])) #f #f #f 'int32) (vv-mpy-add ... (vs-mpy-add ... (combine #<load-data> (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16))))) (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16))) #f #f #f 'int16) '(1) (! x?$1136) (! x?$1137) (! x?$1138) 'int32) (vv-mpy-add ... #<load-data> '(1) (! x?$1139) (! x?$1140) (! x?$1141) 'int32))
(list (vs-mpy-add ... (broadcast ... (sca-mul (sca-sub (int16_t t147) (int16_t t148)) (int16_t (bv #x0040 16)))) '((union [x?$1334 #(struct:sca-mul #(struct:sca-sub #(struct:int16_t t147) #(struct:int16_t t148)) #(struct:int16_t (bv #x0040 16)))] [(! x?$1334) #(struct:int16_t (bv #x0040 16))])) #f #f #f 'int32) (vs-mpy-add ... #<load-data> '((union [x?$1335 #(struct:sca-mul #(struct:sca-sub #(struct:int16_t t147) #(struct:int16_t t148)) #(struct:int16_t (bv #x0040 16)))] [(! x?$1335) #(struct:int16_t (bv #x0040 16))])) #f #f #f 'int32) (vv-mpy-add ... (broadcast ... (sca-mul (sca-sub (int16_t t147) (int16_t t148)) (int16_t (bv #x0040 16)))) '(1) (! x?$1336) (! x?$1337) (! x?$1338) 'int32) (vv-mpy-add ... #<load-data> '(1) (! x?$1339) (! x?$1340) (! x?$1341) 'int32))
"Replace templates"
(list
 (vs-mpy-add
  ...
  (vs-mpy-add
   ...
   (combine
    #<load-data>
    (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))))
   (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
   #f
   #f
   #f
   'int16)
  '((union [x?$1134 #(struct:sca-mul
                      #(struct:sca-sub
                        #(struct:int16_t t147)
                        #(struct:int16_t t148))
                      #(struct:int16_t (bv #x0040 16)))] [(! x?$1134) #(struct:int16_t
                                                                        (bv #x0040 16))]))
  #f
  #f
  #f
  'int32)
 (vs-mpy-add
  ...
  #<load-data>
  '((union [x?$1135 #(struct:sca-mul
                      #(struct:sca-sub
                        #(struct:int16_t t147)
                        #(struct:int16_t t148))
                      #(struct:int16_t (bv #x0040 16)))] [(! x?$1135) #(struct:int16_t
                                                                        (bv #x0040 16))]))
  #f
  #f
  #f
  'int32)
 (vv-mpy-add
  ...
  (vs-mpy-add
   ...
   (combine
    #<load-data>
    (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))))
   (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
   #f
   #f
   #f
   'int16)
  '(1)
  (! x?$1136)
  (! x?$1137)
  (! x?$1138)
  'int32)
 (vv-mpy-add ... #<load-data> '(1) (! x?$1139) (! x?$1140) (! x?$1141) 'int32)
 (vs-mpy-add
  ...
  (broadcast
   ...
   (sca-mul (sca-sub (int16_t t147) (int16_t t148)) (int16_t (bv #x0040 16))))
  '((union [x?$1334 #(struct:sca-mul
                      #(struct:sca-sub
                        #(struct:int16_t t147)
                        #(struct:int16_t t148))
                      #(struct:int16_t (bv #x0040 16)))] [(! x?$1334) #(struct:int16_t
                                                                        (bv #x0040 16))]))
  #f
  #f
  #f
  'int32)
 (vs-mpy-add
  ...
  #<load-data>
  '((union [x?$1335 #(struct:sca-mul
                      #(struct:sca-sub
                        #(struct:int16_t t147)
                        #(struct:int16_t t148))
                      #(struct:int16_t (bv #x0040 16)))] [(! x?$1335) #(struct:int16_t
                                                                        (bv #x0040 16))]))
  #f
  #f
  #f
  'int32)
 (vv-mpy-add
  ...
  (broadcast
   ...
   (sca-mul (sca-sub (int16_t t147) (int16_t t148)) (int16_t (bv #x0040 16))))
  '(1)
  (! x?$1336)
  (! x?$1337)
  (! x?$1338)
  'int32)
 (vv-mpy-add ... #<load-data> '(1) (! x?$1339) (! x?$1340) (! x?$1341) 'int32))
run-x86-synthesizer
halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-mul
    (vec-cast
     (load
      (buffer input1 'uint8)
      (ramp
       (sca-add
        (sca-mul output.s0.x.x 16)
        (sca-add
         (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
         (var-lookup 't72)))
       1
       16)
      (aligned 1 0))
     'int16
     16)
    (sca-broadcast (int16_t (bv #x0040 16)) 16))
   (sca-broadcast (sca-mul (int16_t t146) (int16_t (bv #xffc0 16))) 16))
  'int32
  16)
 (vec-cast
  (sca-broadcast
   (sca-mul (sca-sub (int16_t t147) (int16_t t148)) (int16_t (bv #x0040 16)))
   16)
  'int32
  16))
template:
  (vs-mpy-add
 ...
 #<load-data>
 '((union [x?$1135 #(struct:sca-mul
                     #(struct:sca-sub
                       #(struct:int16_t t147)
                       #(struct:int16_t t148))
                     #(struct:int16_t (bv #x0040 16)))] [(! x?$1135) #(struct:int16_t
                                                                       (bv #x0040 16))]))
 #f
 #f
 #f
 'int32)
axioms:
  '()
optimized-halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-mul
    (vec-cast
     (load
      (buffer input1 'uint8)
      (ramp
       (sca-add
        (sca-mul output.s0.x.x 16)
        (sca-add
         (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
         (var-lookup 't72)))
       1
       16)
      (aligned 1 0))
     'int16
     16)
    (sca-broadcast (int16_t (bv #x0040 16)) 16))
   (sca-broadcast (sca-mul (int16_t t146) (int16_t (bv #xffc0 16))) 16))
  'int32
  16)
 (vec-cast
  (sca-broadcast
   (sca-mul (sca-sub (int16_t t147) (int16_t t148)) (int16_t (bv #x0040 16)))
   16)
  'int32
  16))
optimized-template:
  (vs-mpy-add
 ...
 #<load-data>
 '((union [x?$1135 #(struct:sca-mul
                     #(struct:sca-sub
                       #(struct:int16_t t147)
                       #(struct:int16_t t148))
                     #(struct:int16_t (bv #x0040 16)))] [(! x?$1135) #(struct:int16_t
                                                                       (bv #x0040 16))]))
 #f
 #f
 #f
 'int32)
optimized Halide 0:
  (int32_t
 (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))))
optimized x86 0:
  (int32_t
 (bvmul (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 32)) (sign-extend (ite x?$1135 (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bv #x0040 16)) (bitvector 32))))
run-x86-synthesizer
halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-mul
    (vec-cast
     (load
      (buffer input1 'uint8)
      (ramp
       (sca-add
        (sca-mul output.s0.x.x 16)
        (sca-add
         (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
         (var-lookup 't72)))
       1
       16)
      (aligned 1 0))
     'int16
     16)
    (sca-broadcast (int16_t (bv #x0040 16)) 16))
   (sca-broadcast (sca-mul (int16_t t146) (int16_t (bv #xffc0 16))) 16))
  'int32
  16)
 (vec-cast
  (sca-broadcast
   (sca-mul (sca-sub (int16_t t147) (int16_t t148)) (int16_t (bv #x0040 16)))
   16)
  'int32
  16))
template:
  (vv-mpy-add ... #<load-data> '(1) (! x?$1139) (! x?$1140) (! x?$1141) 'int32)
axioms:
  '()
optimized-halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-mul
    (vec-cast
     (load
      (buffer input1 'uint8)
      (ramp
       (sca-add
        (sca-mul output.s0.x.x 16)
        (sca-add
         (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
         (var-lookup 't72)))
       1
       16)
      (aligned 1 0))
     'int16
     16)
    (sca-broadcast (int16_t (bv #x0040 16)) 16))
   (sca-broadcast (sca-mul (int16_t t146) (int16_t (bv #xffc0 16))) 16))
  'int32
  16)
 (vec-cast
  (sca-broadcast
   (sca-mul (sca-sub (int16_t t147) (int16_t t148)) (int16_t (bv #x0040 16)))
   16)
  'int32
  16))
optimized-template:
  (vv-mpy-add ... #<load-data> '(1) (! x?$1139) (! x?$1140) (! x?$1141) 'int32)
optimized Halide 0:
  (int32_t
 (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))))
optimized x86 0:
  (int32_t
 (ite* (⊢ (&& x?$1141 (! (&& (! x?$1139) (! x?$1141)))) (ite x?$1139 (bvadd (bvmul (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 32)) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 32))) (ite x?$1140 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1140 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (bvmul (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 32)) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1140 (bv #x00000000 32) (bv #x00000001 32))))) (bvmul (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 32)) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1140 (bv #x00000000 32) (bv #x00000001 32)))))))) (⊢ (|| (&& (! x?$1139) (! x?$1141)) (&& (! x?$1141) (! (&& (! x?$1139) (! x?$1141))))) (bvashr (ite x?$1139 (bvadd (bvmul (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 32)) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 32))) (ite x?$1140 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1140 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (bvmul (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 32)) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1140 (bv #x00000000 32) (bv #x00000001 32))))) (bvmul (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 32)) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1140 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000001 32)))))
run-x86-synthesizer
halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-mul
    (vec-cast
     (load
      (buffer input1 'uint8)
      (ramp
       (sca-add
        (sca-mul output.s0.x.x 16)
        (sca-add
         (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
         (var-lookup 't72)))
       1
       16)
      (aligned 1 0))
     'int16
     16)
    (sca-broadcast (int16_t (bv #x0040 16)) 16))
   (sca-broadcast (sca-mul (int16_t t146) (int16_t (bv #xffc0 16))) 16))
  'int32
  16)
 (vec-cast
  (sca-broadcast
   (sca-mul (sca-sub (int16_t t147) (int16_t t148)) (int16_t (bv #x0040 16)))
   16)
  'int32
  16))
template:
  (vs-mpy-add
 ...
 #<load-data>
 '((union [x?$1335 #(struct:sca-mul
                     #(struct:sca-sub
                       #(struct:int16_t t147)
                       #(struct:int16_t t148))
                     #(struct:int16_t (bv #x0040 16)))] [(! x?$1335) #(struct:int16_t
                                                                       (bv #x0040 16))]))
 #f
 #f
 #f
 'int32)
axioms:
  '()
optimized-halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-mul
    (vec-cast
     (load
      (buffer input1 'uint8)
      (ramp
       (sca-add
        (sca-mul output.s0.x.x 16)
        (sca-add
         (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
         (var-lookup 't72)))
       1
       16)
      (aligned 1 0))
     'int16
     16)
    (sca-broadcast (int16_t (bv #x0040 16)) 16))
   (sca-broadcast (sca-mul (int16_t t146) (int16_t (bv #xffc0 16))) 16))
  'int32
  16)
 (vec-cast
  (sca-broadcast
   (sca-mul (sca-sub (int16_t t147) (int16_t t148)) (int16_t (bv #x0040 16)))
   16)
  'int32
  16))
optimized-template:
  (vs-mpy-add
 ...
 #<load-data>
 '((union [x?$1335 #(struct:sca-mul
                     #(struct:sca-sub
                       #(struct:int16_t t147)
                       #(struct:int16_t t148))
                     #(struct:int16_t (bv #x0040 16)))] [(! x?$1335) #(struct:int16_t
                                                                       (bv #x0040 16))]))
 #f
 #f
 #f
 'int32)
optimized Halide 0:
  (int32_t
 (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))))
optimized x86 0:
  (int32_t
 (bvmul (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 32)) (sign-extend (ite x?$1335 (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bv #x0040 16)) (bitvector 32))))
run-x86-synthesizer
halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-mul
    (vec-cast
     (load
      (buffer input1 'uint8)
      (ramp
       (sca-add
        (sca-mul output.s0.x.x 16)
        (sca-add
         (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
         (var-lookup 't72)))
       1
       16)
      (aligned 1 0))
     'int16
     16)
    (sca-broadcast (int16_t (bv #x0040 16)) 16))
   (sca-broadcast (sca-mul (int16_t t146) (int16_t (bv #xffc0 16))) 16))
  'int32
  16)
 (vec-cast
  (sca-broadcast
   (sca-mul (sca-sub (int16_t t147) (int16_t t148)) (int16_t (bv #x0040 16)))
   16)
  'int32
  16))
template:
  (vv-mpy-add ... #<load-data> '(1) (! x?$1339) (! x?$1340) (! x?$1341) 'int32)
axioms:
  '()
optimized-halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-mul
    (vec-cast
     (load
      (buffer input1 'uint8)
      (ramp
       (sca-add
        (sca-mul output.s0.x.x 16)
        (sca-add
         (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
         (var-lookup 't72)))
       1
       16)
      (aligned 1 0))
     'int16
     16)
    (sca-broadcast (int16_t (bv #x0040 16)) 16))
   (sca-broadcast (sca-mul (int16_t t146) (int16_t (bv #xffc0 16))) 16))
  'int32
  16)
 (vec-cast
  (sca-broadcast
   (sca-mul (sca-sub (int16_t t147) (int16_t t148)) (int16_t (bv #x0040 16)))
   16)
  'int32
  16))
optimized-template:
  (vv-mpy-add ... #<load-data> '(1) (! x?$1339) (! x?$1340) (! x?$1341) 'int32)
optimized Halide 0:
  (int32_t
 (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))))
optimized x86 0:
  (int32_t
 (ite* (⊢ (&& x?$1341 (! (&& (! x?$1339) (! x?$1341)))) (ite x?$1339 (bvadd (bvmul (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 32)) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 32))) (ite x?$1340 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1340 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (bvmul (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 32)) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1340 (bv #x00000000 32) (bv #x00000001 32))))) (bvmul (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 32)) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1340 (bv #x00000000 32) (bv #x00000001 32)))))))) (⊢ (|| (&& (! x?$1339) (! x?$1341)) (&& (! x?$1341) (! (&& (! x?$1339) (! x?$1341))))) (bvashr (ite x?$1339 (bvadd (bvmul (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 32)) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 32))) (ite x?$1340 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1340 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (bvmul (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 32)) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1340 (bv #x00000000 32) (bv #x00000001 32))))) (bvmul (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 32)) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1340 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000001 32)))))
run-x86-synthesizer
halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-mul
    (vec-cast
     (load
      (buffer input1 'uint8)
      (ramp
       (sca-add
        (sca-mul output.s0.x.x 16)
        (sca-add
         (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
         (var-lookup 't72)))
       1
       16)
      (aligned 1 0))
     'int16
     16)
    (sca-broadcast (int16_t (bv #x0040 16)) 16))
   (sca-broadcast (sca-mul (int16_t t146) (int16_t (bv #xffc0 16))) 16))
  'int32
  16)
 (vec-cast
  (sca-broadcast
   (sca-mul (sca-sub (int16_t t147) (int16_t t148)) (int16_t (bv #x0040 16)))
   16)
  'int32
  16))
template:
  (cast
 ...
 (broadcast
  ...
  (sca-mul (sca-sub (int16_t t147) (int16_t t148)) (int16_t (bv #x0040 16))))
 'int32
 x?$941)
axioms:
  (list (forall (idx) (bvsle (app abstr-vals$1342 idx) (bv #x7fc0 16))))
optimized-halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-mul
    (vec-cast
     (load
      (buffer input1 'uint8)
      (ramp
       (sca-add
        (sca-mul output.s0.x.x 16)
        (sca-add
         (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
         (var-lookup 't72)))
       1
       16)
      (aligned 1 0))
     'int16
     16)
    (sca-broadcast (int16_t (bv #x0040 16)) 16))
   (sca-broadcast (sca-mul (int16_t t146) (int16_t (bv #xffc0 16))) 16))
  'int32
  16)
 (vec-cast #<abstr-halide-expr> 'int32 16))
optimized-template:
  (cast ... #<abstr-expr> 'int32 x?$941)
optimized Halide 0:
  (int32_t
 (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (app abstr-vals$1342 0) (bitvector 32))))
optimized x86 0:
  (int32_t (sign-extend (app abstr-vals$1342 0) (bitvector 32)))
run-x86-synthesizer
halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-mul
    (vec-cast
     (load
      (buffer input1 'uint8)
      (ramp
       (sca-add
        (sca-mul output.s0.x.x 16)
        (sca-add
         (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
         (var-lookup 't72)))
       1
       16)
      (aligned 1 0))
     'int16
     16)
    (sca-broadcast (int16_t (bv #x0040 16)) 16))
   (sca-broadcast (sca-mul (int16_t t146) (int16_t (bv #xffc0 16))) 16))
  'int32
  16)
 (vec-cast
  (sca-broadcast
   (sca-mul (sca-sub (int16_t t147) (int16_t t148)) (int16_t (bv #x0040 16)))
   16)
  'int32
  16))
template:
  (vs-mpy-add
 ...
 (broadcast
  ...
  (sca-mul (sca-sub (int16_t t147) (int16_t t148)) (int16_t (bv #x0040 16))))
 '((union [x?$1334 #(struct:sca-mul
                     #(struct:sca-sub
                       #(struct:int16_t t147)
                       #(struct:int16_t t148))
                     #(struct:int16_t (bv #x0040 16)))] [(! x?$1334) #(struct:int16_t
                                                                       (bv #x0040 16))]))
 #f
 #f
 #f
 'int32)
axioms:
  (list (forall (idx) (bvsle (app abstr-vals$1343 idx) (bv #x7fc0 16))))
optimized-halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-mul
    (vec-cast
     (load
      (buffer input1 'uint8)
      (ramp
       (sca-add
        (sca-mul output.s0.x.x 16)
        (sca-add
         (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
         (var-lookup 't72)))
       1
       16)
      (aligned 1 0))
     'int16
     16)
    (sca-broadcast (int16_t (bv #x0040 16)) 16))
   (sca-broadcast (sca-mul (int16_t t146) (int16_t (bv #xffc0 16))) 16))
  'int32
  16)
 (vec-cast #<abstr-halide-expr> 'int32 16))
optimized-template:
  (vs-mpy-add
 ...
 #<abstr-expr>
 '((union [x?$1334 #(struct:sca-mul
                     #(struct:sca-sub
                       #(struct:int16_t t147)
                       #(struct:int16_t t148))
                     #(struct:int16_t (bv #x0040 16)))] [(! x?$1334) #(struct:int16_t
                                                                       (bv #x0040 16))]))
 #f
 #f
 #f
 'int32)
optimized Halide 0:
  (int32_t
 (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (app abstr-vals$1343 0) (bitvector 32))))
optimized x86 0:
  (int32_t
 (bvmul (sign-extend (app abstr-vals$1343 0) (bitvector 32)) (sign-extend (ite x?$1334 (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bv #x0040 16)) (bitvector 32))))
run-x86-synthesizer
halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-mul
    (vec-cast
     (load
      (buffer input1 'uint8)
      (ramp
       (sca-add
        (sca-mul output.s0.x.x 16)
        (sca-add
         (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
         (var-lookup 't72)))
       1
       16)
      (aligned 1 0))
     'int16
     16)
    (sca-broadcast (int16_t (bv #x0040 16)) 16))
   (sca-broadcast (sca-mul (int16_t t146) (int16_t (bv #xffc0 16))) 16))
  'int32
  16)
 (vec-cast
  (sca-broadcast
   (sca-mul (sca-sub (int16_t t147) (int16_t t148)) (int16_t (bv #x0040 16)))
   16)
  'int32
  16))
template:
  (vv-mpy-add
 ...
 (broadcast
  ...
  (sca-mul (sca-sub (int16_t t147) (int16_t t148)) (int16_t (bv #x0040 16))))
 '(1)
 (! x?$1336)
 (! x?$1337)
 (! x?$1338)
 'int32)
axioms:
  (list (forall (idx) (bvsle (app abstr-vals$1344 idx) (bv #x7fc0 16))))
optimized-halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-mul
    (vec-cast
     (load
      (buffer input1 'uint8)
      (ramp
       (sca-add
        (sca-mul output.s0.x.x 16)
        (sca-add
         (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
         (var-lookup 't72)))
       1
       16)
      (aligned 1 0))
     'int16
     16)
    (sca-broadcast (int16_t (bv #x0040 16)) 16))
   (sca-broadcast (sca-mul (int16_t t146) (int16_t (bv #xffc0 16))) 16))
  'int32
  16)
 (vec-cast #<abstr-halide-expr> 'int32 16))
optimized-template:
  (vv-mpy-add ... #<abstr-expr> '(1) (! x?$1336) (! x?$1337) (! x?$1338) 'int32)
optimized Halide 0:
  (int32_t
 (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (app abstr-vals$1344 0) (bitvector 32))))
optimized x86 0:
  (int32_t
 (ite* (⊢ (&& x?$1338 (! (&& (! x?$1336) (! x?$1338)))) (ite x?$1336 (bvadd (bvmul (sign-extend (app abstr-vals$1344 0) (bitvector 32)) (sign-extend (app abstr-vals$1344 1) (bitvector 32))) (ite x?$1337 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1337 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (bvmul (sign-extend (app abstr-vals$1344 0) (bitvector 32)) (sign-extend (app abstr-vals$1344 1) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1337 (bv #x00000000 32) (bv #x00000001 32))))) (bvmul (sign-extend (app abstr-vals$1344 0) (bitvector 32)) (sign-extend (app abstr-vals$1344 1) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1337 (bv #x00000000 32) (bv #x00000001 32)))))))) (⊢ (|| (&& (! x?$1336) (! x?$1338)) (&& (! x?$1338) (! (&& (! x?$1336) (! x?$1338))))) (bvashr (ite x?$1336 (bvadd (bvmul (sign-extend (app abstr-vals$1344 0) (bitvector 32)) (sign-extend (app abstr-vals$1344 1) (bitvector 32))) (ite x?$1337 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1337 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (bvmul (sign-extend (app abstr-vals$1344 0) (bitvector 32)) (sign-extend (app abstr-vals$1344 1) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1337 (bv #x00000000 32) (bv #x00000001 32))))) (bvmul (sign-extend (app abstr-vals$1344 0) (bitvector 32)) (sign-extend (app abstr-vals$1344 1) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1337 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000001 32)))))
run-x86-synthesizer
halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-mul
    (vec-cast
     (load
      (buffer input1 'uint8)
      (ramp
       (sca-add
        (sca-mul output.s0.x.x 16)
        (sca-add
         (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
         (var-lookup 't72)))
       1
       16)
      (aligned 1 0))
     'int16
     16)
    (sca-broadcast (int16_t (bv #x0040 16)) 16))
   (sca-broadcast (sca-mul (int16_t t146) (int16_t (bv #xffc0 16))) 16))
  'int32
  16)
 (vec-cast
  (sca-broadcast
   (sca-mul (sca-sub (int16_t t147) (int16_t t148)) (int16_t (bv #x0040 16)))
   16)
  'int32
  16))
template:
  (vs-mpy-add
 ...
 (combine
  #<load-data>
  (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))))
 (list
  (sca-mul
   (sca-cast (int8_t (bv #x01 8)) 'int16)
   (sca-cast
    (union [xi?$939 #(struct:sca-mul
                      #(struct:sca-sub
                        #(struct:int16_t t147)
                        #(struct:int16_t t148))
                      #(struct:int16_t (bv #x0040 16)))] [(&& xi?$940 (! xi?$939)) #(struct:int16_t
                                                                                     (bv #x0040 16))] [(&& (! xi?$939) (! xi?$940)) #(struct:int8_t
                                                                                                                                      (bv #x01 8))])
    'int16))
  (sca-mul
   (sca-cast (int16_t (bv #x0040 16)) 'int16)
   (sca-cast
    (union [xi?$939 #(struct:sca-mul
                      #(struct:sca-sub
                        #(struct:int16_t t147)
                        #(struct:int16_t t148))
                      #(struct:int16_t (bv #x0040 16)))] [(&& xi?$940 (! xi?$939)) #(struct:int16_t
                                                                                     (bv #x0040 16))] [(&& (! xi?$939) (! xi?$940)) #(struct:int8_t
                                                                                                                                      (bv #x01 8))])
    'int16)))
 #f
 #f
 #f
 'int16)
axioms:
  (list #t (forall (idx) (bvsle (app abstr-vals$1346 idx) (bv #x7fc0 16))))
optimized-halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-mul
    (vec-cast #<abstr-halide-expr> 'int16 16)
    (sca-broadcast (int16_t (bv #x0040 16)) 16))
   #<abstr-halide-expr>)
  'int32
  16)
 (vec-cast
  (sca-broadcast
   (sca-mul (sca-sub (int16_t t147) (int16_t t148)) (int16_t (bv #x0040 16)))
   16)
  'int32
  16))
optimized-template:
  (vs-mpy-add
 ...
 (combine #<abstr-expr> #<abstr-expr>)
 (list
  (sca-mul
   (sca-cast (int8_t (bv #x01 8)) 'int16)
   (sca-cast
    (union [xi?$939 #(struct:sca-mul
                      #(struct:sca-sub
                        #(struct:int16_t t147)
                        #(struct:int16_t t148))
                      #(struct:int16_t (bv #x0040 16)))] [(&& xi?$940 (! xi?$939)) #(struct:int16_t
                                                                                     (bv #x0040 16))] [(&& (! xi?$939) (! xi?$940)) #(struct:int8_t
                                                                                                                                      (bv #x01 8))])
    'int16))
  (sca-mul
   (sca-cast (int16_t (bv #x0040 16)) 'int16)
   (sca-cast
    (union [xi?$939 #(struct:sca-mul
                      #(struct:sca-sub
                        #(struct:int16_t t147)
                        #(struct:int16_t t148))
                      #(struct:int16_t (bv #x0040 16)))] [(&& xi?$940 (! xi?$939)) #(struct:int16_t
                                                                                     (bv #x0040 16))] [(&& (! xi?$939) (! xi?$940)) #(struct:int8_t
                                                                                                                                      (bv #x01 8))])
    'int16)))
 #f
 #f
 #f
 'int16)
optimized Halide 0:
  (int32_t
 (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32)) (sign-extend (bvadd (app abstr-vals$1346 0) (bvmul (bv #x0040 16) (zero-extend (app abstr-vals$1345 0) (bitvector 16)))) (bitvector 32))))
optimized x86 0:
  (int16_t
 (bvadd (bvmul (app abstr-vals$1346 0) (ite* (⊢ (&& (! xi?$939) (! xi?$940)) (bv #x0001 16)) (⊢ (|| xi?$939 (&& xi?$940 (! xi?$939))) (ite* (⊢ xi?$939 (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148)))) (⊢ (&& xi?$940 (! xi?$939)) (bv #x0040 16)))))) (bvmul (zero-extend (app abstr-vals$1345 0) (bitvector 16)) (bvmul (bv #x0040 16) (ite* (⊢ (&& (! xi?$939) (! xi?$940)) (bv #x0001 16)) (⊢ (|| xi?$939 (&& xi?$940 (! xi?$939))) (ite* (⊢ xi?$939 (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148)))) (⊢ (&& xi?$940 (! xi?$939)) (bv #x0040 16)))))))))
Ran synthesizer for 32 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-mul
    (vec-cast
     (load
      (buffer input1 'uint8)
      (ramp
       (sca-add
        (sca-mul output.s0.x.x 16)
        (sca-add
         (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
         (var-lookup 't72)))
       1
       16)
      (aligned 1 0))
     'int16
     16)
    (sca-broadcast (int16_t (bv #x0040 16)) 16))
   (sca-broadcast (sca-mul (int16_t t146) (int16_t (bv #xffc0 16))) 16))
  'int32
  16)
 (vec-cast
  (sca-broadcast
   (sca-mul (sca-sub (int16_t t147) (int16_t t148)) (int16_t (bv #x0040 16)))
   16)
  'int32
  16))
template:
  (vs-mpy-add
 ...
 (combine
  #<load-data>
  (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))))
 (list
  (sca-mul
   (sca-cast (int8_t (bv #x01 8)) 'int16)
   (sca-cast
    (union [xi?$939 #(struct:sca-mul
                      #(struct:sca-sub
                        #(struct:int16_t t147)
                        #(struct:int16_t t148))
                      #(struct:int16_t (bv #x0040 16)))] [(&& xi?$940 (! xi?$939)) #(struct:int16_t
                                                                                     (bv #x0040 16))] [(&& (! xi?$939) (! xi?$940)) #(struct:int8_t
                                                                                                                                      (bv #x01 8))])
    'int16))
  (sca-mul
   (sca-cast (int16_t (bv #x0040 16)) 'int16)
   (sca-cast
    (union [xi?$939 #(struct:sca-mul
                      #(struct:sca-sub
                        #(struct:int16_t t147)
                        #(struct:int16_t t148))
                      #(struct:int16_t (bv #x0040 16)))] [(&& xi?$940 (! xi?$939)) #(struct:int16_t
                                                                                     (bv #x0040 16))] [(&& (! xi?$939) (! xi?$940)) #(struct:int8_t
                                                                                                                                      (bv #x01 8))])
    'int16)))
 #f
 #f
 #f
 'int32)
axioms:
  (list #t (forall (idx) (bvsle (app abstr-vals$1348 idx) (bv #x7fc0 16))))
optimized-halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-mul
    (vec-cast #<abstr-halide-expr> 'int16 16)
    (sca-broadcast (int16_t (bv #x0040 16)) 16))
   #<abstr-halide-expr>)
  'int32
  16)
 (vec-cast
  (sca-broadcast
   (sca-mul (sca-sub (int16_t t147) (int16_t t148)) (int16_t (bv #x0040 16)))
   16)
  'int32
  16))
optimized-template:
  (vs-mpy-add
 ...
 (combine #<abstr-expr> #<abstr-expr>)
 (list
  (sca-mul
   (sca-cast (int8_t (bv #x01 8)) 'int16)
   (sca-cast
    (union [xi?$939 #(struct:sca-mul
                      #(struct:sca-sub
                        #(struct:int16_t t147)
                        #(struct:int16_t t148))
                      #(struct:int16_t (bv #x0040 16)))] [(&& xi?$940 (! xi?$939)) #(struct:int16_t
                                                                                     (bv #x0040 16))] [(&& (! xi?$939) (! xi?$940)) #(struct:int8_t
                                                                                                                                      (bv #x01 8))])
    'int16))
  (sca-mul
   (sca-cast (int16_t (bv #x0040 16)) 'int16)
   (sca-cast
    (union [xi?$939 #(struct:sca-mul
                      #(struct:sca-sub
                        #(struct:int16_t t147)
                        #(struct:int16_t t148))
                      #(struct:int16_t (bv #x0040 16)))] [(&& xi?$940 (! xi?$939)) #(struct:int16_t
                                                                                     (bv #x0040 16))] [(&& (! xi?$939) (! xi?$940)) #(struct:int8_t
                                                                                                                                      (bv #x01 8))])
    'int16)))
 #f
 #f
 #f
 'int32)
optimized Halide 0:
  (int32_t
 (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32)) (sign-extend (bvadd (app abstr-vals$1348 0) (bvmul (bv #x0040 16) (zero-extend (app abstr-vals$1347 0) (bitvector 16)))) (bitvector 32))))
optimized x86 0:
  (int32_t
 (bvadd (bvmul (sign-extend (app abstr-vals$1348 0) (bitvector 32)) (sign-extend (ite* (⊢ (&& (! xi?$939) (! xi?$940)) (bv #x0001 16)) (⊢ (|| xi?$939 (&& xi?$940 (! xi?$939))) (ite* (⊢ xi?$939 (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148)))) (⊢ (&& xi?$940 (! xi?$939)) (bv #x0040 16))))) (bitvector 32))) (bvmul (zero-extend (app abstr-vals$1347 0) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (ite* (⊢ (&& (! xi?$939) (! xi?$940)) (bv #x0001 16)) (⊢ (|| xi?$939 (&& xi?$940 (! xi?$939))) (ite* (⊢ xi?$939 (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148)))) (⊢ (&& xi?$940 (! xi?$939)) (bv #x0040 16)))))) (bitvector 32)))))
Ran synthesizer for 266 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-mul
    (vec-cast
     (load
      (buffer input1 'uint8)
      (ramp
       (sca-add
        (sca-mul output.s0.x.x 16)
        (sca-add
         (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
         (var-lookup 't72)))
       1
       16)
      (aligned 1 0))
     'int16
     16)
    (sca-broadcast (int16_t (bv #x0040 16)) 16))
   (sca-broadcast (sca-mul (int16_t t146) (int16_t (bv #xffc0 16))) 16))
  'int32
  16)
 (vec-cast
  (sca-broadcast
   (sca-mul (sca-sub (int16_t t147) (int16_t t148)) (int16_t (bv #x0040 16)))
   16)
  'int32
  16))
template:
  (cast
 ...
 (vs-mpy-add
  ...
  (combine
   #<load-data>
   (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))))
  (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
  #f
  #f
  #f
  'int16)
 'int32
 x?$935)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-mul
 (vec-cast #<abstr-halide-expr> 'int32 16)
 (vec-cast
  (sca-broadcast
   (sca-mul (sca-sub (int16_t t147) (int16_t t148)) (int16_t (bv #x0040 16)))
   16)
  'int32
  16))
optimized-template:
  (cast ... #<abstr-expr> 'int32 x?$935)
optimized Halide 0:
  (int32_t
 (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32)) (sign-extend (app abstr-vals$1349 0) (bitvector 32))))
optimized x86 0:
  (int32_t (sign-extend (app abstr-vals$1349 0) (bitvector 32)))
run-x86-synthesizer
halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-mul
    (vec-cast
     (load
      (buffer input1 'uint8)
      (ramp
       (sca-add
        (sca-mul output.s0.x.x 16)
        (sca-add
         (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
         (var-lookup 't72)))
       1
       16)
      (aligned 1 0))
     'int16
     16)
    (sca-broadcast (int16_t (bv #x0040 16)) 16))
   (sca-broadcast (sca-mul (int16_t t146) (int16_t (bv #xffc0 16))) 16))
  'int32
  16)
 (vec-cast
  (sca-broadcast
   (sca-mul (sca-sub (int16_t t147) (int16_t t148)) (int16_t (bv #x0040 16)))
   16)
  'int32
  16))
template:
  (vs-mpy-add
 ...
 (vs-mpy-add
  ...
  (combine
   #<load-data>
   (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))))
  (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
  #f
  #f
  #f
  'int16)
 '((union [x?$1134 #(struct:sca-mul
                     #(struct:sca-sub
                       #(struct:int16_t t147)
                       #(struct:int16_t t148))
                     #(struct:int16_t (bv #x0040 16)))] [(! x?$1134) #(struct:int16_t
                                                                       (bv #x0040 16))]))
 #f
 #f
 #f
 'int32)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-mul
 (vec-cast #<abstr-halide-expr> 'int32 16)
 (vec-cast
  (sca-broadcast
   (sca-mul (sca-sub (int16_t t147) (int16_t t148)) (int16_t (bv #x0040 16)))
   16)
  'int32
  16))
optimized-template:
  (vs-mpy-add
 ...
 #<abstr-expr>
 '((union [x?$1134 #(struct:sca-mul
                     #(struct:sca-sub
                       #(struct:int16_t t147)
                       #(struct:int16_t t148))
                     #(struct:int16_t (bv #x0040 16)))] [(! x?$1134) #(struct:int16_t
                                                                       (bv #x0040 16))]))
 #f
 #f
 #f
 'int32)
optimized Halide 0:
  (int32_t
 (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32)) (sign-extend (app abstr-vals$1350 0) (bitvector 32))))
optimized x86 0:
  (int32_t
 (bvmul (sign-extend (app abstr-vals$1350 0) (bitvector 32)) (sign-extend (ite x?$1134 (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bv #x0040 16)) (bitvector 32))))
Ran synthesizer for 72 ms
(model
 [x?$1134 #t])
(vec-mul
 (vec-cast #<abstr-halide-expr> 'int32 16)
 (vec-cast
  (sca-broadcast
   (sca-mul (sca-sub (int16_t t147) (int16_t t148)) (int16_t (bv #x0040 16)))
   16)
  'int32
  16))
(vs-mpy-add
 ...
 (vs-mpy-add
  ...
  (combine
   #<load-data>
   (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))))
  (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
  #f
  #f
  #f
  'int16)
 (list
  (sca-mul (sca-sub (int16_t t147) (int16_t t148)) (int16_t (bv #x0040 16))))
 #f
 #f
 #f
 'int32)
Ran bounds analysis for 112 ms
Ran bounds analysis for 94 ms
"Success?"
#t
(vs-mpy-add ... (vs-mpy-add ... (combine #<load-data> (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16))))) (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16))) #f #f #f 'int16) (list (sca-mul (sca-sub (int16_t t147) (int16_t t148)) (int16_t (bv #x0040 16)))) #f #f #f 'int32)
"Building Expr:"
(vec-cast
 (vec-mul
  (vec-cast
   (vec-add
    (vec-mul
     (vec-cast
      (load
       (buffer input1 'uint8)
       (ramp
        (sca-add
         (sca-mul output.s0.x.x 16)
         (sca-add
          (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
          (var-lookup 't72)))
        1
        16)
       (aligned 1 0))
      'int16
      16)
     (sca-broadcast (int16_t (bv #x0040 16)) 16))
    (sca-broadcast (sca-mul (int16_t t146) (int16_t (bv #xffc0 16))) 16))
   'int32
   16)
  (vec-cast
   (sca-broadcast
    (sca-mul (sca-sub (int16_t t147) (int16_t t148)) (int16_t (bv #x0040 16)))
    16)
   'int32
   16))
 'int64
 16)
"Fold templates"
(list
 (vs-mpy-add
  ...
  (combine
   #<load-data>
   (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))))
  (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
  x?$1357
  x?$1358
  x?$1359
  'int16)
 (vs-mpy-add
  ...
  (vs-mpy-add
   ...
   (combine
    #<load-data>
    (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))))
   (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
   #f
   #f
   #f
   'int16)
  (list
   (sca-mul (sca-sub (int16_t t147) (int16_t t148)) (int16_t (bv #x0040 16))))
  x?$1352
  x?$1353
  x?$1354
  'int32))
here(#(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t146) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) x?$1357 x?$1358 x?$1359 int16) #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t146) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f #f #f int16) (#(struct:sca-mul #(struct:sca-sub #(struct:int16_t t147) #(struct:int16_t t148)) #(struct:int16_t (bv #x0040 16)))) x?$1352 x?$1353 x?$1354 int32))

"Replace templates"
'()
run-x86-synthesizer
halide-expr:
  (vec-cast
 (vec-mul
  (vec-cast
   (vec-add
    (vec-mul
     (vec-cast
      (load
       (buffer input1 'uint8)
       (ramp
        (sca-add
         (sca-mul output.s0.x.x 16)
         (sca-add
          (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
          (var-lookup 't72)))
        1
        16)
       (aligned 1 0))
      'int16
      16)
     (sca-broadcast (int16_t (bv #x0040 16)) 16))
    (sca-broadcast (sca-mul (int16_t t146) (int16_t (bv #xffc0 16))) 16))
   'int32
   16)
  (vec-cast
   (sca-broadcast
    (sca-mul (sca-sub (int16_t t147) (int16_t t148)) (int16_t (bv #x0040 16)))
    16)
   'int32
   16))
 'int64
 16)
template:
  (vs-mpy-add
 ...
 (combine
  #<load-data>
  (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))))
 (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
 x?$1357
 x?$1358
 x?$1359
 'int16)
axioms:
  (list #t (forall (idx) (bvsle (app abstr-vals$1363 idx) (bv #x7fc0 16))))
optimized-halide-expr:
  (vec-cast
 (vec-mul
  (vec-cast
   (vec-add
    (vec-mul
     (vec-cast #<abstr-halide-expr> 'int16 16)
     (sca-broadcast (int16_t (bv #x0040 16)) 16))
    #<abstr-halide-expr>)
   'int32
   16)
  (vec-cast
   (sca-broadcast
    (sca-mul (sca-sub (int16_t t147) (int16_t t148)) (int16_t (bv #x0040 16)))
    16)
   'int32
   16))
 'int64
 16)
optimized-template:
  (vs-mpy-add
 ...
 (combine #<abstr-expr> #<abstr-expr>)
 (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
 x?$1357
 x?$1358
 x?$1359
 'int16)
optimized Halide 0:
  (int64_t
 (sign-extend (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32)) (sign-extend (bvadd (app abstr-vals$1363 0) (bvmul (bv #x0040 16) (zero-extend (app abstr-vals$1362 0) (bitvector 16)))) (bitvector 32))) (bitvector 64)))
optimized x86 0:
  (int16_t
 (ite* (⊢ (&& (! x?$1359) (! (&& x?$1357 x?$1359))) (ite x?$1357 (bvadd (ite x?$1357 (bvadd (ite x?$1358 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$1363 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$1358 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$1363 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$1358 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$1363 0) (ite x?$1358 (bv #x0001 16) (bv #x0000 16)))) (ite (bvsle (bvadd (bv #x8000 16) (bvneg (ite (bvsle (ite x?$1357 (bvadd (ite x?$1358 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$1363 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$1358 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$1363 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$1358 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$1363 0) (ite x?$1358 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16)) (ite x?$1357 (bvadd (ite x?$1358 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$1363 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$1358 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$1363 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$1358 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$1363 0) (ite x?$1358 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16)))) (ite (bvsle (bvmul (bv #x0040 16) (zero-extend (app abstr-vals$1362 0) (bitvector 16))) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$1357 (bvadd (ite x?$1358 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$1363 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$1358 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$1363 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$1358 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$1363 0) (ite x?$1358 (bv #x0001 16) (bv #x0000 16))))) (ite x?$1357 (bvadd (ite x?$1358 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$1363 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$1358 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$1363 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$1358 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$1363 0) (ite x?$1358 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16))))) (bvmul (bv #x0040 16) (zero-extend (app abstr-vals$1362 0) (bitvector 16))) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$1357 (bvadd (ite x?$1358 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$1363 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$1358 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$1363 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$1358 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$1363 0) (ite x?$1358 (bv #x0001 16) (bv #x0000 16))))) (ite x?$1357 (bvadd (ite x?$1358 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$1363 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$1358 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$1363 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$1358 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$1363 0) (ite x?$1358 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16)))))) (ite (bvsle (bvmul (bv #x0040 16) (zero-extend (app abstr-vals$1362 0) (bitvector 16))) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$1357 (bvadd (ite x?$1358 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$1363 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$1358 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$1363 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$1358 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$1363 0) (ite x?$1358 (bv #x0001 16) (bv #x0000 16))))) (ite x?$1357 (bvadd (ite x?$1358 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$1363 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$1358 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$1363 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$1358 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$1363 0) (ite x?$1358 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16))))) (bvmul (bv #x0040 16) (zero-extend (app abstr-vals$1362 0) (bitvector 16))) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$1357 (bvadd (ite x?$1358 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$1363 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$1358 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$1363 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$1358 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$1363 0) (ite x?$1358 (bv #x0001 16) (bv #x0000 16))))) (ite x?$1357 (bvadd (ite x?$1358 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$1363 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$1358 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$1363 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$1358 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$1363 0) (ite x?$1358 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16))))) (bvadd (bv #x8000 16) (bvneg (ite (bvsle (ite x?$1357 (bvadd (ite x?$1358 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$1363 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$1358 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$1363 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$1358 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$1363 0) (ite x?$1358 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16)) (ite x?$1357 (bvadd (ite x?$1358 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$1363 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$1358 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$1363 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$1358 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$1363 0) (ite x?$1358 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0040 16) (zero-extend (app abstr-vals$1362 0) (bitvector 16))) (ite x?$1357 (bvadd (ite x?$1358 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$1363 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$1358 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$1363 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$1358 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$1363 0) (ite x?$1358 (bv #x0001 16) (bv #x0000 16))))))) (⊢ (|| (&& x?$1357 x?$1359) (&& x?$1359 (! (&& x?$1357 x?$1359)))) (bvashr (ite x?$1357 (bvadd (ite x?$1357 (bvadd (ite x?$1358 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$1363 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$1358 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$1363 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$1358 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$1363 0) (ite x?$1358 (bv #x0001 16) (bv #x0000 16)))) (ite (bvsle (bvadd (bv #x8000 16) (bvneg (ite (bvsle (ite x?$1357 (bvadd (ite x?$1358 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$1363 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$1358 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$1363 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$1358 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$1363 0) (ite x?$1358 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16)) (ite x?$1357 (bvadd (ite x?$1358 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$1363 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$1358 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$1363 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$1358 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$1363 0) (ite x?$1358 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16)))) (ite (bvsle (bvmul (bv #x0040 16) (zero-extend (app abstr-vals$1362 0) (bitvector 16))) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$1357 (bvadd (ite x?$1358 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$1363 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$1358 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$1363 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$1358 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$1363 0) (ite x?$1358 (bv #x0001 16) (bv #x0000 16))))) (ite x?$1357 (bvadd (ite x?$1358 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$1363 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$1358 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$1363 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$1358 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$1363 0) (ite x?$1358 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16))))) (bvmul (bv #x0040 16) (zero-extend (app abstr-vals$1362 0) (bitvector 16))) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$1357 (bvadd (ite x?$1358 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$1363 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$1358 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$1363 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$1358 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$1363 0) (ite x?$1358 (bv #x0001 16) (bv #x0000 16))))) (ite x?$1357 (bvadd (ite x?$1358 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$1363 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$1358 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$1363 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$1358 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$1363 0) (ite x?$1358 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16)))))) (ite (bvsle (bvmul (bv #x0040 16) (zero-extend (app abstr-vals$1362 0) (bitvector 16))) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$1357 (bvadd (ite x?$1358 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$1363 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$1358 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$1363 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$1358 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$1363 0) (ite x?$1358 (bv #x0001 16) (bv #x0000 16))))) (ite x?$1357 (bvadd (ite x?$1358 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$1363 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$1358 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$1363 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$1358 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$1363 0) (ite x?$1358 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16))))) (bvmul (bv #x0040 16) (zero-extend (app abstr-vals$1362 0) (bitvector 16))) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$1357 (bvadd (ite x?$1358 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$1363 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$1358 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$1363 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$1358 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$1363 0) (ite x?$1358 (bv #x0001 16) (bv #x0000 16))))) (ite x?$1357 (bvadd (ite x?$1358 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$1363 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$1358 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$1363 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$1358 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$1363 0) (ite x?$1358 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16))))) (bvadd (bv #x8000 16) (bvneg (ite (bvsle (ite x?$1357 (bvadd (ite x?$1358 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$1363 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$1358 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$1363 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$1358 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$1363 0) (ite x?$1358 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16)) (ite x?$1357 (bvadd (ite x?$1358 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$1363 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$1358 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$1363 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$1358 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$1363 0) (ite x?$1358 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0040 16) (zero-extend (app abstr-vals$1362 0) (bitvector 16))) (ite x?$1357 (bvadd (ite x?$1358 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$1363 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$1358 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$1363 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$1358 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$1363 0) (ite x?$1358 (bv #x0001 16) (bv #x0000 16)))))) (bv #x0001 16)))))
run-x86-synthesizer
halide-expr:
  (vec-cast
 (vec-mul
  (vec-cast
   (vec-add
    (vec-mul
     (vec-cast
      (load
       (buffer input1 'uint8)
       (ramp
        (sca-add
         (sca-mul output.s0.x.x 16)
         (sca-add
          (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
          (var-lookup 't72)))
        1
        16)
       (aligned 1 0))
      'int16
      16)
     (sca-broadcast (int16_t (bv #x0040 16)) 16))
    (sca-broadcast (sca-mul (int16_t t146) (int16_t (bv #xffc0 16))) 16))
   'int32
   16)
  (vec-cast
   (sca-broadcast
    (sca-mul (sca-sub (int16_t t147) (int16_t t148)) (int16_t (bv #x0040 16)))
    16)
   'int32
   16))
 'int64
 16)
template:
  (vs-mpy-add
 ...
 (vs-mpy-add
  ...
  (combine
   #<load-data>
   (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))))
  (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
  #f
  #f
  #f
  'int16)
 (list
  (sca-mul (sca-sub (int16_t t147) (int16_t t148)) (int16_t (bv #x0040 16))))
 x?$1352
 x?$1353
 x?$1354
 'int32)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-cast
 (vec-mul
  (vec-cast #<abstr-halide-expr> 'int32 16)
  (vec-cast
   (sca-broadcast
    (sca-mul (sca-sub (int16_t t147) (int16_t t148)) (int16_t (bv #x0040 16)))
    16)
   'int32
   16))
 'int64
 16)
optimized-template:
  (vs-mpy-add
 ...
 #<abstr-expr>
 (list
  (sca-mul (sca-sub (int16_t t147) (int16_t t148)) (int16_t (bv #x0040 16))))
 x?$1352
 x?$1353
 x?$1354
 'int32)
optimized Halide 0:
  (int64_t
 (sign-extend (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32)) (sign-extend (app abstr-vals$1364 0) (bitvector 32))) (bitvector 64)))
optimized x86 0:
  (int32_t
 (ite* (⊢ (&& (! x?$1354) (! (&& x?$1352 x?$1354))) (ite x?$1352 (bvadd (ite x?$1353 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32)) (sign-extend (app abstr-vals$1364 0) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1353 (bv #x00000001 32) (bv #x00000000 32))))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32)) (sign-extend (app abstr-vals$1364 0) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1353 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32)) (sign-extend (app abstr-vals$1364 0) (bitvector 32))) (ite x?$1353 (bv #x00000001 32) (bv #x00000000 32))))) (⊢ (|| (&& x?$1352 x?$1354) (&& x?$1354 (! (&& x?$1352 x?$1354)))) (bvashr (ite x?$1352 (bvadd (ite x?$1353 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32)) (sign-extend (app abstr-vals$1364 0) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1353 (bv #x00000001 32) (bv #x00000000 32))))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32)) (sign-extend (app abstr-vals$1364 0) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1353 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32)) (sign-extend (app abstr-vals$1364 0) (bitvector 32))) (ite x?$1353 (bv #x00000001 32) (bv #x00000000 32)))) (bv #x00000001 32)))))
Ran synthesizer for 2 ms
(unsat)
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (vec-cast
 (vec-mul
  (vec-cast
   (vec-add
    (vec-mul
     (vec-cast
      (load
       (buffer input1 'uint8)
       (ramp
        (sca-add
         (sca-mul output.s0.x.x 16)
         (sca-add
          (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
          (var-lookup 't72)))
        1
        16)
       (aligned 1 0))
      'int16
      16)
     (sca-broadcast (int16_t (bv #x0040 16)) 16))
    (sca-broadcast (sca-mul (int16_t t146) (int16_t (bv #xffc0 16))) 16))
   'int32
   16)
  (vec-cast
   (sca-broadcast
    (sca-mul (sca-sub (int16_t t147) (int16_t t148)) (int16_t (bv #x0040 16)))
    16)
   'int32
   16))
 'int64
 16)
template:
  (cast
 ...
 (vs-mpy-add
  ...
  (vs-mpy-add
   ...
   (combine
    #<load-data>
    (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))))
   (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
   #f
   #f
   #f
   'int16)
  (list
   (sca-mul (sca-sub (int16_t t147) (int16_t t148)) (int16_t (bv #x0040 16))))
  #f
  #f
  #f
  'int32)
 'int64
 #f)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$1365 idx) (bv #x40000000 32)) (bvsle (bv #xc0008000 32) (app abstr-vals$1365 idx)))))
optimized-halide-expr:
  (vec-cast #<abstr-halide-expr> 'int64 16)
optimized-template:
  (cast ... #<abstr-expr> 'int64 #f)
optimized Halide 0:
  (int64_t (sign-extend (app abstr-vals$1365 0) (bitvector 64)))
optimized x86 0:
  (int64_t (sign-extend (app abstr-vals$1365 0) (bitvector 64)))
Ran synthesizer for 33 ms
(model)
(vec-cast #<abstr-halide-expr> 'int64 16)
(cast
 ...
 (vs-mpy-add
  ...
  (vs-mpy-add
   ...
   (combine
    #<load-data>
    (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))))
   (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
   #f
   #f
   #f
   'int16)
  (list
   (sca-mul (sca-sub (int16_t t147) (int16_t t148)) (int16_t (bv #x0040 16))))
  #f
  #f
  #f
  'int32)
 'int64
 #f)
Ran bounds analysis for 53 ms
Ran bounds analysis for 41 ms
"Extended success?"
#t
(cast
 ...
 (vs-mpy-add
  ...
  (vs-mpy-add
   ...
   (combine
    #<load-data>
    (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))))
   (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
   #f
   #f
   #f
   'int16)
  (list
   (sca-mul (sca-sub (int16_t t147) (int16_t t148)) (int16_t (bv #x0040 16))))
  #f
  #f
  #f
  'int32)
 'int64
 #f)
"Building Expr:"
(sca-broadcast (int32_t output_multiplier) 16)
"Fold templates"
'()
here()

"Replace templates"
'()
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (sca-broadcast (int32_t output_multiplier) 16)
template:
  (broadcast ... (int32_t output_multiplier))
axioms:
  '()
optimized-halide-expr:
  (sca-broadcast (int32_t output_multiplier) 16)
optimized-template:
  (broadcast ... (int32_t output_multiplier))
optimized Halide 0:
  (int32_t output_multiplier)
optimized x86 0:
  (int32_t output_multiplier)
Ran synthesizer for 15 ms
(model)
(sca-broadcast (int32_t output_multiplier) 16)
(broadcast ... (int32_t output_multiplier))
Ran bounds analysis for 29 ms
Ran bounds analysis for 23 ms
"Extended success?"
#t
(broadcast ... (int32_t output_multiplier))
"Building Expr:"
(vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16)
"Fold templates"
'()
here()

"Replace templates"
'()
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16)
template:
  (cast ... (broadcast ... (int32_t output_multiplier)) 'int64 #f)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-cast #<abstr-halide-expr> 'int64 16)
optimized-template:
  (cast ... #<abstr-expr> 'int64 #f)
optimized Halide 0:
  (int64_t (sign-extend (app abstr-vals$1367 0) (bitvector 64)))
optimized x86 0:
  (int64_t (sign-extend (app abstr-vals$1367 0) (bitvector 64)))
Ran synthesizer for 15 ms
(model)
(vec-cast #<abstr-halide-expr> 'int64 16)
(cast ... (broadcast ... (int32_t output_multiplier)) 'int64 #f)
Ran bounds analysis for 48 ms
Ran bounds analysis for 41 ms
"Extended success?"
#t
(cast ... (broadcast ... (int32_t output_multiplier)) 'int64 #f)
"Building Expr:"
(vec-mul
 (vec-cast
  (vec-mul
   (vec-cast
    (vec-add
     (vec-mul
      (vec-cast
       (load
        (buffer input1 'uint8)
        (ramp
         (sca-add
          (sca-mul output.s0.x.x 16)
          (sca-add
           (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
           (var-lookup 't72)))
         1
         16)
        (aligned 1 0))
       'int16
       16)
      (sca-broadcast (int16_t (bv #x0040 16)) 16))
     (sca-broadcast (sca-mul (int16_t t146) (int16_t (bv #xffc0 16))) 16))
    'int32
    16)
   (vec-cast
    (sca-broadcast
     (sca-mul (sca-sub (int16_t t147) (int16_t t148)) (int16_t (bv #x0040 16)))
     16)
    'int32
    16))
  'int64
  16)
 (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
"Fold templates"
(list
 (vs-mpy-add
  ...
  (combine
   #<load-data>
   (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))))
  (list
   (sca-mul
    (sca-cast (int8_t (bv #x01 8)) 'int16)
    (sca-cast
     (union [xi?$1379 #(struct:sca-mul
                        #(struct:sca-sub
                          #(struct:int16_t t147)
                          #(struct:int16_t t148))
                        #(struct:int16_t (bv #x0040 16)))] [(&& xi?$1380 (! xi?$1379)) #(struct:int16_t
                                                                                         (bv #x0040 16))] [(&& (! xi?$1379) (&& xi?$1381 (! xi?$1380))) #(struct:int32_t
                                                                                                                                                          output_multiplier)] [(&& (! xi?$1379) (&& (! xi?$1380) (! xi?$1381))) #(struct:int8_t
                                                                                                                                                                                                                                  (bv #x01 8))])
     'int16))
   (sca-mul
    (sca-cast (int16_t (bv #x0040 16)) 'int16)
    (sca-cast
     (union [xi?$1379 #(struct:sca-mul
                        #(struct:sca-sub
                          #(struct:int16_t t147)
                          #(struct:int16_t t148))
                        #(struct:int16_t (bv #x0040 16)))] [(&& xi?$1380 (! xi?$1379)) #(struct:int16_t
                                                                                         (bv #x0040 16))] [(&& (! xi?$1379) (&& xi?$1381 (! xi?$1380))) #(struct:int32_t
                                                                                                                                                          output_multiplier)] [(&& (! xi?$1379) (&& (! xi?$1380) (! xi?$1381))) #(struct:int8_t
                                                                                                                                                                                                                                  (bv #x01 8))])
     'int16)))
  #f
  #f
  #f
  'int16)
 (vs-mpy-add
  ...
  (combine
   #<load-data>
   (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))))
  (list
   (sca-mul
    (sca-cast (int8_t (bv #x01 8)) 'int16)
    (sca-cast
     (union [xi?$1379 #(struct:sca-mul
                        #(struct:sca-sub
                          #(struct:int16_t t147)
                          #(struct:int16_t t148))
                        #(struct:int16_t (bv #x0040 16)))] [(&& xi?$1380 (! xi?$1379)) #(struct:int16_t
                                                                                         (bv #x0040 16))] [(&& (! xi?$1379) (&& xi?$1381 (! xi?$1380))) #(struct:int32_t
                                                                                                                                                          output_multiplier)] [(&& (! xi?$1379) (&& (! xi?$1380) (! xi?$1381))) #(struct:int8_t
                                                                                                                                                                                                                                  (bv #x01 8))])
     'int16))
   (sca-mul
    (sca-cast (int16_t (bv #x0040 16)) 'int16)
    (sca-cast
     (union [xi?$1379 #(struct:sca-mul
                        #(struct:sca-sub
                          #(struct:int16_t t147)
                          #(struct:int16_t t148))
                        #(struct:int16_t (bv #x0040 16)))] [(&& xi?$1380 (! xi?$1379)) #(struct:int16_t
                                                                                         (bv #x0040 16))] [(&& (! xi?$1379) (&& xi?$1381 (! xi?$1380))) #(struct:int32_t
                                                                                                                                                          output_multiplier)] [(&& (! xi?$1379) (&& (! xi?$1380) (! xi?$1381))) #(struct:int8_t
                                                                                                                                                                                                                                  (bv #x01 8))])
     'int16)))
  #f
  #f
  #f
  'int64)
 (vs-mpy-add
  ...
  (vs-mpy-add
   ...
   (combine
    #<load-data>
    (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))))
   (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
   #f
   #f
   #f
   'int16)
  (list
   (sca-mul
    (sca-cast
     (sca-mul (sca-sub (int16_t t147) (int16_t t148)) (int16_t (bv #x0040 16)))
     'int32)
    (sca-cast
     (union [xi?$1373 #(struct:sca-mul
                        #(struct:sca-sub
                          #(struct:int16_t t147)
                          #(struct:int16_t t148))
                        #(struct:int16_t (bv #x0040 16)))] [(&& xi?$1374 (! xi?$1373)) #(struct:int16_t
                                                                                         (bv #x0040 16))] [(&& (! xi?$1373) (&& xi?$1375 (! xi?$1374))) #(struct:int32_t
                                                                                                                                                          output_multiplier)] [(&& (! xi?$1373) (&& (! xi?$1374) (! xi?$1375))) #(struct:int8_t
                                                                                                                                                                                                                                  (bv #x01 8))])
     'int32)))
  #f
  #f
  #f
  'int32)
 (vs-mpy-add
  ...
  (vs-mpy-add
   ...
   (combine
    #<load-data>
    (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))))
   (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
   #f
   #f
   #f
   'int16)
  (list
   (sca-mul
    (sca-cast
     (sca-mul (sca-sub (int16_t t147) (int16_t t148)) (int16_t (bv #x0040 16)))
     'int32)
    (sca-cast
     (union [xi?$1373 #(struct:sca-mul
                        #(struct:sca-sub
                          #(struct:int16_t t147)
                          #(struct:int16_t t148))
                        #(struct:int16_t (bv #x0040 16)))] [(&& xi?$1374 (! xi?$1373)) #(struct:int16_t
                                                                                         (bv #x0040 16))] [(&& (! xi?$1373) (&& xi?$1375 (! xi?$1374))) #(struct:int32_t
                                                                                                                                                          output_multiplier)] [(&& (! xi?$1373) (&& (! xi?$1374) (! xi?$1375))) #(struct:int8_t
                                                                                                                                                                                                                                  (bv #x01 8))])
     'int32)))
  #f
  #f
  #f
  'int64)
 (cast
  ...
  (vs-mpy-add
   ...
   (vs-mpy-add
    ...
    (combine
     #<load-data>
     (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))))
    (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
    #f
    #f
    #f
    'int16)
   (list
    (sca-mul (sca-sub (int16_t t147) (int16_t t148)) (int16_t (bv #x0040 16))))
   #f
   #f
   #f
   'int32)
  'int64
  x?$1369)
 (cast ... (broadcast ... (int32_t output_multiplier)) 'int64 x?$1382))
here(#(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t146) #(struct:int16_t (bv #xffc0 16))))> (#(struct:sca-mul #(struct:sca-cast #(struct:int8_t (bv #x01 8)) int16) #(struct:sca-cast (union #:size 4 #:hash -867683367875918863) int16)) #(struct:sca-mul #(struct:sca-cast #(struct:int16_t (bv #x0040 16)) int16) #(struct:sca-cast (union #:size 4 #:hash -867683367875918863) int16))) #f #f #f int16) #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t146) #(struct:int16_t (bv #xffc0 16))))> (#(struct:sca-mul #(struct:sca-cast #(struct:int8_t (bv #x01 8)) int16) #(struct:sca-cast (union #:size 4 #:hash -867683367875918863) int16)) #(struct:sca-mul #(struct:sca-cast #(struct:int16_t (bv #x0040 16)) int16) #(struct:sca-cast (union #:size 4 #:hash -867683367875918863) int16))) #f #f #f int64) #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t146) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f #f #f int16) (#(struct:sca-mul #(struct:sca-cast #(struct:sca-mul #(struct:sca-sub #(struct:int16_t t147) #(struct:int16_t t148)) #(struct:int16_t (bv #x0040 16))) int32) #(struct:sca-cast (union #:size 4 #:hash -867730023626111547) int32))) #f #f #f int32) #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t146) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f #f #f int16) (#(struct:sca-mul #(struct:sca-cast #(struct:sca-mul #(struct:sca-sub #(struct:int16_t t147) #(struct:int16_t t148)) #(struct:int16_t (bv #x0040 16))) int32) #(struct:sca-cast (union #:size 4 #:hash -867730023626111547) int32))) #f #f #f int64) #(struct:cast ... #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t146) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f #f #f int16) (#(struct:sca-mul #(struct:sca-sub #(struct:int16_t t147) #(struct:int16_t t148)) #(struct:int16_t (bv #x0040 16)))) #f #f #f int32) int64 x?$1369) #(struct:cast ... #(struct:broadcast ... #(struct:int32_t output_multiplier)) int64 x?$1382))

(list (vs-mpy-add ... (vs-mpy-add ... (vs-mpy-add ... (combine #<load-data> (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16))))) (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16))) #f #f #f 'int16) (list (sca-mul (sca-sub (int16_t t147) (int16_t t148)) (int16_t (bv #x0040 16)))) #f #f #f 'int32) '((union [xi?$1575 #(struct:sca-mul #(struct:sca-sub #(struct:int16_t t147) #(struct:int16_t t148)) #(struct:int16_t (bv #x0040 16)))] [(&& xi?$1576 (! xi?$1575)) #(struct:int16_t (bv #x0040 16))] [(&& (! xi?$1575) (! xi?$1576)) #(struct:int32_t output_multiplier)])) #f #f #f 'int64) (vs-mpy-add ... #<load-data> '((union [xi?$1577 #(struct:sca-mul #(struct:sca-sub #(struct:int16_t t147) #(struct:int16_t t148)) #(struct:int16_t (bv #x0040 16)))] [(&& xi?$1578 (! xi?$1577)) #(struct:int16_t (bv #x0040 16))] [(&& (! xi?$1577) (! xi?$1578)) #(struct:int32_t output_multiplier)])) #f #f #f 'int64) (vv-mpy-add ... (vs-mpy-add ... (vs-mpy-add ... (combine #<load-data> (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16))))) (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16))) #f #f #f 'int16) (list (sca-mul (sca-sub (int16_t t147) (int16_t t148)) (int16_t (bv #x0040 16)))) #f #f #f 'int32) '(1) (! x?$1579) (! x?$1580) (! x?$1581) 'int64) (vv-mpy-add ... #<load-data> '(1) (! x?$1582) (! x?$1583) (! x?$1584) 'int64))
(list (vs-mpy-add ... (broadcast ... (int32_t output_multiplier)) '((union [xi?$1777 #(struct:sca-mul #(struct:sca-sub #(struct:int16_t t147) #(struct:int16_t t148)) #(struct:int16_t (bv #x0040 16)))] [(&& xi?$1778 (! xi?$1777)) #(struct:int16_t (bv #x0040 16))] [(&& (! xi?$1777) (! xi?$1778)) #(struct:int32_t output_multiplier)])) #f #f #f 'int64) (vs-mpy-add ... #<load-data> '((union [xi?$1779 #(struct:sca-mul #(struct:sca-sub #(struct:int16_t t147) #(struct:int16_t t148)) #(struct:int16_t (bv #x0040 16)))] [(&& xi?$1780 (! xi?$1779)) #(struct:int16_t (bv #x0040 16))] [(&& (! xi?$1779) (! xi?$1780)) #(struct:int32_t output_multiplier)])) #f #f #f 'int64) (vv-mpy-add ... (broadcast ... (int32_t output_multiplier)) '(1) (! x?$1781) (! x?$1782) (! x?$1783) 'int64) (vv-mpy-add ... #<load-data> '(1) (! x?$1784) (! x?$1785) (! x?$1786) 'int64))
"Replace templates"
(list
 (vs-mpy-add
  ...
  (vs-mpy-add
   ...
   (vs-mpy-add
    ...
    (combine
     #<load-data>
     (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))))
    (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
    #f
    #f
    #f
    'int16)
   (list
    (sca-mul (sca-sub (int16_t t147) (int16_t t148)) (int16_t (bv #x0040 16))))
   #f
   #f
   #f
   'int32)
  '((union [xi?$1575 #(struct:sca-mul
                       #(struct:sca-sub
                         #(struct:int16_t t147)
                         #(struct:int16_t t148))
                       #(struct:int16_t (bv #x0040 16)))] [(&& xi?$1576 (! xi?$1575)) #(struct:int16_t
                                                                                        (bv #x0040 16))] [(&& (! xi?$1575) (! xi?$1576)) #(struct:int32_t
                                                                                                                                           output_multiplier)]))
  #f
  #f
  #f
  'int64)
 (vs-mpy-add
  ...
  #<load-data>
  '((union [xi?$1577 #(struct:sca-mul
                       #(struct:sca-sub
                         #(struct:int16_t t147)
                         #(struct:int16_t t148))
                       #(struct:int16_t (bv #x0040 16)))] [(&& xi?$1578 (! xi?$1577)) #(struct:int16_t
                                                                                        (bv #x0040 16))] [(&& (! xi?$1577) (! xi?$1578)) #(struct:int32_t
                                                                                                                                           output_multiplier)]))
  #f
  #f
  #f
  'int64)
 (vv-mpy-add
  ...
  (vs-mpy-add
   ...
   (vs-mpy-add
    ...
    (combine
     #<load-data>
     (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))))
    (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
    #f
    #f
    #f
    'int16)
   (list
    (sca-mul (sca-sub (int16_t t147) (int16_t t148)) (int16_t (bv #x0040 16))))
   #f
   #f
   #f
   'int32)
  '(1)
  (! x?$1579)
  (! x?$1580)
  (! x?$1581)
  'int64)
 (vv-mpy-add ... #<load-data> '(1) (! x?$1582) (! x?$1583) (! x?$1584) 'int64)
 (vs-mpy-add
  ...
  (broadcast ... (int32_t output_multiplier))
  '((union [xi?$1777 #(struct:sca-mul
                       #(struct:sca-sub
                         #(struct:int16_t t147)
                         #(struct:int16_t t148))
                       #(struct:int16_t (bv #x0040 16)))] [(&& xi?$1778 (! xi?$1777)) #(struct:int16_t
                                                                                        (bv #x0040 16))] [(&& (! xi?$1777) (! xi?$1778)) #(struct:int32_t
                                                                                                                                           output_multiplier)]))
  #f
  #f
  #f
  'int64)
 (vs-mpy-add
  ...
  #<load-data>
  '((union [xi?$1779 #(struct:sca-mul
                       #(struct:sca-sub
                         #(struct:int16_t t147)
                         #(struct:int16_t t148))
                       #(struct:int16_t (bv #x0040 16)))] [(&& xi?$1780 (! xi?$1779)) #(struct:int16_t
                                                                                        (bv #x0040 16))] [(&& (! xi?$1779) (! xi?$1780)) #(struct:int32_t
                                                                                                                                           output_multiplier)]))
  #f
  #f
  #f
  'int64)
 (vv-mpy-add
  ...
  (broadcast ... (int32_t output_multiplier))
  '(1)
  (! x?$1781)
  (! x?$1782)
  (! x?$1783)
  'int64)
 (vv-mpy-add ... #<load-data> '(1) (! x?$1784) (! x?$1785) (! x?$1786) 'int64))
run-x86-synthesizer
halide-expr:
  (vec-mul
 (vec-cast
  (vec-mul
   (vec-cast
    (vec-add
     (vec-mul
      (vec-cast
       (load
        (buffer input1 'uint8)
        (ramp
         (sca-add
          (sca-mul output.s0.x.x 16)
          (sca-add
           (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
           (var-lookup 't72)))
         1
         16)
        (aligned 1 0))
       'int16
       16)
      (sca-broadcast (int16_t (bv #x0040 16)) 16))
     (sca-broadcast (sca-mul (int16_t t146) (int16_t (bv #xffc0 16))) 16))
    'int32
    16)
   (vec-cast
    (sca-broadcast
     (sca-mul (sca-sub (int16_t t147) (int16_t t148)) (int16_t (bv #x0040 16)))
     16)
    'int32
    16))
  'int64
  16)
 (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
template:
  (vs-mpy-add
 ...
 #<load-data>
 '((union [xi?$1577 #(struct:sca-mul
                      #(struct:sca-sub
                        #(struct:int16_t t147)
                        #(struct:int16_t t148))
                      #(struct:int16_t (bv #x0040 16)))] [(&& xi?$1578 (! xi?$1577)) #(struct:int16_t
                                                                                       (bv #x0040 16))] [(&& (! xi?$1577) (! xi?$1578)) #(struct:int32_t
                                                                                                                                          output_multiplier)]))
 #f
 #f
 #f
 'int64)
axioms:
  '()
optimized-halide-expr:
  (vec-mul
 (vec-cast
  (vec-mul
   (vec-cast
    (vec-add
     (vec-mul
      (vec-cast
       (load
        (buffer input1 'uint8)
        (ramp
         (sca-add
          (sca-mul output.s0.x.x 16)
          (sca-add
           (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
           (var-lookup 't72)))
         1
         16)
        (aligned 1 0))
       'int16
       16)
      (sca-broadcast (int16_t (bv #x0040 16)) 16))
     (sca-broadcast (sca-mul (int16_t t146) (int16_t (bv #xffc0 16))) 16))
    'int32
    16)
   (vec-cast
    (sca-broadcast
     (sca-mul (sca-sub (int16_t t147) (int16_t t148)) (int16_t (bv #x0040 16)))
     16)
    'int32
    16))
  'int64
  16)
 (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
optimized-template:
  (vs-mpy-add
 ...
 #<load-data>
 '((union [xi?$1577 #(struct:sca-mul
                      #(struct:sca-sub
                        #(struct:int16_t t147)
                        #(struct:int16_t t148))
                      #(struct:int16_t (bv #x0040 16)))] [(&& xi?$1578 (! xi?$1577)) #(struct:int16_t
                                                                                       (bv #x0040 16))] [(&& (! xi?$1577) (! xi?$1578)) #(struct:int32_t
                                                                                                                                          output_multiplier)]))
 #f
 #f
 #f
 'int64)
optimized Halide 0:
  (int64_t
 (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))))
optimized x86 0:
  (int64_t
 (bvmul (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 64)) (ite* (⊢ (&& (! xi?$1577) (! xi?$1578)) (sign-extend output_multiplier (bitvector 64))) (⊢ (|| xi?$1577 (&& xi?$1578 (! xi?$1577))) (sign-extend (ite* (⊢ xi?$1577 (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148)))) (⊢ (&& xi?$1578 (! xi?$1577)) (bv #x0040 16))) (bitvector 64))))))
run-x86-synthesizer
halide-expr:
  (vec-mul
 (vec-cast
  (vec-mul
   (vec-cast
    (vec-add
     (vec-mul
      (vec-cast
       (load
        (buffer input1 'uint8)
        (ramp
         (sca-add
          (sca-mul output.s0.x.x 16)
          (sca-add
           (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
           (var-lookup 't72)))
         1
         16)
        (aligned 1 0))
       'int16
       16)
      (sca-broadcast (int16_t (bv #x0040 16)) 16))
     (sca-broadcast (sca-mul (int16_t t146) (int16_t (bv #xffc0 16))) 16))
    'int32
    16)
   (vec-cast
    (sca-broadcast
     (sca-mul (sca-sub (int16_t t147) (int16_t t148)) (int16_t (bv #x0040 16)))
     16)
    'int32
    16))
  'int64
  16)
 (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
template:
  (vv-mpy-add ... #<load-data> '(1) (! x?$1582) (! x?$1583) (! x?$1584) 'int64)
axioms:
  '()
optimized-halide-expr:
  (vec-mul
 (vec-cast
  (vec-mul
   (vec-cast
    (vec-add
     (vec-mul
      (vec-cast
       (load
        (buffer input1 'uint8)
        (ramp
         (sca-add
          (sca-mul output.s0.x.x 16)
          (sca-add
           (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
           (var-lookup 't72)))
         1
         16)
        (aligned 1 0))
       'int16
       16)
      (sca-broadcast (int16_t (bv #x0040 16)) 16))
     (sca-broadcast (sca-mul (int16_t t146) (int16_t (bv #xffc0 16))) 16))
    'int32
    16)
   (vec-cast
    (sca-broadcast
     (sca-mul (sca-sub (int16_t t147) (int16_t t148)) (int16_t (bv #x0040 16)))
     16)
    'int32
    16))
  'int64
  16)
 (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
optimized-template:
  (vv-mpy-add ... #<load-data> '(1) (! x?$1582) (! x?$1583) (! x?$1584) 'int64)
optimized Halide 0:
  (int64_t
 (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))))
optimized x86 0:
  (int64_t
 (ite* (⊢ (&& x?$1584 (! (&& (! x?$1582) (! x?$1584)))) (ite x?$1582 (bvadd (bvmul (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 64)) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 64))) (ite x?$1583 (bv #x0000000000000000 64) (bv #x0000000000000001 64))) (bvadd (ite x?$1583 (bv #x0000000000000000 64) (bv #x0000000000000001 64)) (ite (bvsle (bvmul (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 64)) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 64))) (bvadd (bv #x7fffffffffffffff 64) (bvneg (ite x?$1583 (bv #x0000000000000000 64) (bv #x0000000000000001 64))))) (bvmul (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 64)) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 64))) (bvadd (bv #x7fffffffffffffff 64) (bvneg (ite x?$1583 (bv #x0000000000000000 64) (bv #x0000000000000001 64)))))))) (⊢ (|| (&& (! x?$1582) (! x?$1584)) (&& (! x?$1584) (! (&& (! x?$1582) (! x?$1584))))) (bvashr (ite x?$1582 (bvadd (bvmul (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 64)) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 64))) (ite x?$1583 (bv #x0000000000000000 64) (bv #x0000000000000001 64))) (bvadd (ite x?$1583 (bv #x0000000000000000 64) (bv #x0000000000000001 64)) (ite (bvsle (bvmul (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 64)) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 64))) (bvadd (bv #x7fffffffffffffff 64) (bvneg (ite x?$1583 (bv #x0000000000000000 64) (bv #x0000000000000001 64))))) (bvmul (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 64)) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 64))) (bvadd (bv #x7fffffffffffffff 64) (bvneg (ite x?$1583 (bv #x0000000000000000 64) (bv #x0000000000000001 64))))))) (bv #x0000000000000001 64)))))
run-x86-synthesizer
halide-expr:
  (vec-mul
 (vec-cast
  (vec-mul
   (vec-cast
    (vec-add
     (vec-mul
      (vec-cast
       (load
        (buffer input1 'uint8)
        (ramp
         (sca-add
          (sca-mul output.s0.x.x 16)
          (sca-add
           (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
           (var-lookup 't72)))
         1
         16)
        (aligned 1 0))
       'int16
       16)
      (sca-broadcast (int16_t (bv #x0040 16)) 16))
     (sca-broadcast (sca-mul (int16_t t146) (int16_t (bv #xffc0 16))) 16))
    'int32
    16)
   (vec-cast
    (sca-broadcast
     (sca-mul (sca-sub (int16_t t147) (int16_t t148)) (int16_t (bv #x0040 16)))
     16)
    'int32
    16))
  'int64
  16)
 (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
template:
  (vs-mpy-add
 ...
 #<load-data>
 '((union [xi?$1779 #(struct:sca-mul
                      #(struct:sca-sub
                        #(struct:int16_t t147)
                        #(struct:int16_t t148))
                      #(struct:int16_t (bv #x0040 16)))] [(&& xi?$1780 (! xi?$1779)) #(struct:int16_t
                                                                                       (bv #x0040 16))] [(&& (! xi?$1779) (! xi?$1780)) #(struct:int32_t
                                                                                                                                          output_multiplier)]))
 #f
 #f
 #f
 'int64)
axioms:
  '()
optimized-halide-expr:
  (vec-mul
 (vec-cast
  (vec-mul
   (vec-cast
    (vec-add
     (vec-mul
      (vec-cast
       (load
        (buffer input1 'uint8)
        (ramp
         (sca-add
          (sca-mul output.s0.x.x 16)
          (sca-add
           (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
           (var-lookup 't72)))
         1
         16)
        (aligned 1 0))
       'int16
       16)
      (sca-broadcast (int16_t (bv #x0040 16)) 16))
     (sca-broadcast (sca-mul (int16_t t146) (int16_t (bv #xffc0 16))) 16))
    'int32
    16)
   (vec-cast
    (sca-broadcast
     (sca-mul (sca-sub (int16_t t147) (int16_t t148)) (int16_t (bv #x0040 16)))
     16)
    'int32
    16))
  'int64
  16)
 (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
optimized-template:
  (vs-mpy-add
 ...
 #<load-data>
 '((union [xi?$1779 #(struct:sca-mul
                      #(struct:sca-sub
                        #(struct:int16_t t147)
                        #(struct:int16_t t148))
                      #(struct:int16_t (bv #x0040 16)))] [(&& xi?$1780 (! xi?$1779)) #(struct:int16_t
                                                                                       (bv #x0040 16))] [(&& (! xi?$1779) (! xi?$1780)) #(struct:int32_t
                                                                                                                                          output_multiplier)]))
 #f
 #f
 #f
 'int64)
optimized Halide 0:
  (int64_t
 (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))))
optimized x86 0:
  (int64_t
 (bvmul (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 64)) (ite* (⊢ (&& (! xi?$1779) (! xi?$1780)) (sign-extend output_multiplier (bitvector 64))) (⊢ (|| xi?$1779 (&& xi?$1780 (! xi?$1779))) (sign-extend (ite* (⊢ xi?$1779 (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148)))) (⊢ (&& xi?$1780 (! xi?$1779)) (bv #x0040 16))) (bitvector 64))))))
run-x86-synthesizer
halide-expr:
  (vec-mul
 (vec-cast
  (vec-mul
   (vec-cast
    (vec-add
     (vec-mul
      (vec-cast
       (load
        (buffer input1 'uint8)
        (ramp
         (sca-add
          (sca-mul output.s0.x.x 16)
          (sca-add
           (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
           (var-lookup 't72)))
         1
         16)
        (aligned 1 0))
       'int16
       16)
      (sca-broadcast (int16_t (bv #x0040 16)) 16))
     (sca-broadcast (sca-mul (int16_t t146) (int16_t (bv #xffc0 16))) 16))
    'int32
    16)
   (vec-cast
    (sca-broadcast
     (sca-mul (sca-sub (int16_t t147) (int16_t t148)) (int16_t (bv #x0040 16)))
     16)
    'int32
    16))
  'int64
  16)
 (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
template:
  (vv-mpy-add ... #<load-data> '(1) (! x?$1784) (! x?$1785) (! x?$1786) 'int64)
axioms:
  '()
optimized-halide-expr:
  (vec-mul
 (vec-cast
  (vec-mul
   (vec-cast
    (vec-add
     (vec-mul
      (vec-cast
       (load
        (buffer input1 'uint8)
        (ramp
         (sca-add
          (sca-mul output.s0.x.x 16)
          (sca-add
           (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
           (var-lookup 't72)))
         1
         16)
        (aligned 1 0))
       'int16
       16)
      (sca-broadcast (int16_t (bv #x0040 16)) 16))
     (sca-broadcast (sca-mul (int16_t t146) (int16_t (bv #xffc0 16))) 16))
    'int32
    16)
   (vec-cast
    (sca-broadcast
     (sca-mul (sca-sub (int16_t t147) (int16_t t148)) (int16_t (bv #x0040 16)))
     16)
    'int32
    16))
  'int64
  16)
 (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
optimized-template:
  (vv-mpy-add ... #<load-data> '(1) (! x?$1784) (! x?$1785) (! x?$1786) 'int64)
optimized Halide 0:
  (int64_t
 (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))))
optimized x86 0:
  (int64_t
 (ite* (⊢ (&& x?$1786 (! (&& (! x?$1784) (! x?$1786)))) (ite x?$1784 (bvadd (bvmul (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 64)) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 64))) (ite x?$1785 (bv #x0000000000000000 64) (bv #x0000000000000001 64))) (bvadd (ite x?$1785 (bv #x0000000000000000 64) (bv #x0000000000000001 64)) (ite (bvsle (bvmul (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 64)) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 64))) (bvadd (bv #x7fffffffffffffff 64) (bvneg (ite x?$1785 (bv #x0000000000000000 64) (bv #x0000000000000001 64))))) (bvmul (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 64)) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 64))) (bvadd (bv #x7fffffffffffffff 64) (bvneg (ite x?$1785 (bv #x0000000000000000 64) (bv #x0000000000000001 64)))))))) (⊢ (|| (&& (! x?$1784) (! x?$1786)) (&& (! x?$1786) (! (&& (! x?$1784) (! x?$1786))))) (bvashr (ite x?$1784 (bvadd (bvmul (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 64)) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 64))) (ite x?$1785 (bv #x0000000000000000 64) (bv #x0000000000000001 64))) (bvadd (ite x?$1785 (bv #x0000000000000000 64) (bv #x0000000000000001 64)) (ite (bvsle (bvmul (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 64)) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 64))) (bvadd (bv #x7fffffffffffffff 64) (bvneg (ite x?$1785 (bv #x0000000000000000 64) (bv #x0000000000000001 64))))) (bvmul (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 64)) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 64))) (bvadd (bv #x7fffffffffffffff 64) (bvneg (ite x?$1785 (bv #x0000000000000000 64) (bv #x0000000000000001 64))))))) (bv #x0000000000000001 64)))))
run-x86-synthesizer
halide-expr:
  (vec-mul
 (vec-cast
  (vec-mul
   (vec-cast
    (vec-add
     (vec-mul
      (vec-cast
       (load
        (buffer input1 'uint8)
        (ramp
         (sca-add
          (sca-mul output.s0.x.x 16)
          (sca-add
           (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
           (var-lookup 't72)))
         1
         16)
        (aligned 1 0))
       'int16
       16)
      (sca-broadcast (int16_t (bv #x0040 16)) 16))
     (sca-broadcast (sca-mul (int16_t t146) (int16_t (bv #xffc0 16))) 16))
    'int32
    16)
   (vec-cast
    (sca-broadcast
     (sca-mul (sca-sub (int16_t t147) (int16_t t148)) (int16_t (bv #x0040 16)))
     16)
    'int32
    16))
  'int64
  16)
 (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
template:
  (cast ... (broadcast ... (int32_t output_multiplier)) 'int64 x?$1382)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-mul
 (vec-cast
  (vec-mul
   (vec-cast
    (vec-add
     (vec-mul
      (vec-cast
       (load
        (buffer input1 'uint8)
        (ramp
         (sca-add
          (sca-mul output.s0.x.x 16)
          (sca-add
           (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
           (var-lookup 't72)))
         1
         16)
        (aligned 1 0))
       'int16
       16)
      (sca-broadcast (int16_t (bv #x0040 16)) 16))
     (sca-broadcast (sca-mul (int16_t t146) (int16_t (bv #xffc0 16))) 16))
    'int32
    16)
   (vec-cast
    (sca-broadcast
     (sca-mul (sca-sub (int16_t t147) (int16_t t148)) (int16_t (bv #x0040 16)))
     16)
    'int32
    16))
  'int64
  16)
 (vec-cast #<abstr-halide-expr> 'int64 16))
optimized-template:
  (cast ... #<abstr-expr> 'int64 x?$1382)
optimized Halide 0:
  (int64_t
 (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend (app abstr-vals$1787 0) (bitvector 64))))
optimized x86 0:
  (int64_t (sign-extend (app abstr-vals$1787 0) (bitvector 64)))
run-x86-synthesizer
halide-expr:
  (vec-mul
 (vec-cast
  (vec-mul
   (vec-cast
    (vec-add
     (vec-mul
      (vec-cast
       (load
        (buffer input1 'uint8)
        (ramp
         (sca-add
          (sca-mul output.s0.x.x 16)
          (sca-add
           (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
           (var-lookup 't72)))
         1
         16)
        (aligned 1 0))
       'int16
       16)
      (sca-broadcast (int16_t (bv #x0040 16)) 16))
     (sca-broadcast (sca-mul (int16_t t146) (int16_t (bv #xffc0 16))) 16))
    'int32
    16)
   (vec-cast
    (sca-broadcast
     (sca-mul (sca-sub (int16_t t147) (int16_t t148)) (int16_t (bv #x0040 16)))
     16)
    'int32
    16))
  'int64
  16)
 (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
template:
  (vs-mpy-add
 ...
 (broadcast ... (int32_t output_multiplier))
 '((union [xi?$1777 #(struct:sca-mul
                      #(struct:sca-sub
                        #(struct:int16_t t147)
                        #(struct:int16_t t148))
                      #(struct:int16_t (bv #x0040 16)))] [(&& xi?$1778 (! xi?$1777)) #(struct:int16_t
                                                                                       (bv #x0040 16))] [(&& (! xi?$1777) (! xi?$1778)) #(struct:int32_t
                                                                                                                                          output_multiplier)]))
 #f
 #f
 #f
 'int64)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-mul
 (vec-cast
  (vec-mul
   (vec-cast
    (vec-add
     (vec-mul
      (vec-cast
       (load
        (buffer input1 'uint8)
        (ramp
         (sca-add
          (sca-mul output.s0.x.x 16)
          (sca-add
           (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
           (var-lookup 't72)))
         1
         16)
        (aligned 1 0))
       'int16
       16)
      (sca-broadcast (int16_t (bv #x0040 16)) 16))
     (sca-broadcast (sca-mul (int16_t t146) (int16_t (bv #xffc0 16))) 16))
    'int32
    16)
   (vec-cast
    (sca-broadcast
     (sca-mul (sca-sub (int16_t t147) (int16_t t148)) (int16_t (bv #x0040 16)))
     16)
    'int32
    16))
  'int64
  16)
 (vec-cast #<abstr-halide-expr> 'int64 16))
optimized-template:
  (vs-mpy-add
 ...
 #<abstr-expr>
 '((union [xi?$1777 #(struct:sca-mul
                      #(struct:sca-sub
                        #(struct:int16_t t147)
                        #(struct:int16_t t148))
                      #(struct:int16_t (bv #x0040 16)))] [(&& xi?$1778 (! xi?$1777)) #(struct:int16_t
                                                                                       (bv #x0040 16))] [(&& (! xi?$1777) (! xi?$1778)) #(struct:int32_t
                                                                                                                                          output_multiplier)]))
 #f
 #f
 #f
 'int64)
optimized Halide 0:
  (int64_t
 (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend (app abstr-vals$1788 0) (bitvector 64))))
optimized x86 0:
  (int64_t
 (bvmul (sign-extend (app abstr-vals$1788 0) (bitvector 64)) (ite* (⊢ (&& (! xi?$1777) (! xi?$1778)) (sign-extend output_multiplier (bitvector 64))) (⊢ (|| xi?$1777 (&& xi?$1778 (! xi?$1777))) (sign-extend (ite* (⊢ xi?$1777 (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148)))) (⊢ (&& xi?$1778 (! xi?$1777)) (bv #x0040 16))) (bitvector 64))))))
run-x86-synthesizer
halide-expr:
  (vec-mul
 (vec-cast
  (vec-mul
   (vec-cast
    (vec-add
     (vec-mul
      (vec-cast
       (load
        (buffer input1 'uint8)
        (ramp
         (sca-add
          (sca-mul output.s0.x.x 16)
          (sca-add
           (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
           (var-lookup 't72)))
         1
         16)
        (aligned 1 0))
       'int16
       16)
      (sca-broadcast (int16_t (bv #x0040 16)) 16))
     (sca-broadcast (sca-mul (int16_t t146) (int16_t (bv #xffc0 16))) 16))
    'int32
    16)
   (vec-cast
    (sca-broadcast
     (sca-mul (sca-sub (int16_t t147) (int16_t t148)) (int16_t (bv #x0040 16)))
     16)
    'int32
    16))
  'int64
  16)
 (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
template:
  (vv-mpy-add
 ...
 (broadcast ... (int32_t output_multiplier))
 '(1)
 (! x?$1781)
 (! x?$1782)
 (! x?$1783)
 'int64)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-mul
 (vec-cast
  (vec-mul
   (vec-cast
    (vec-add
     (vec-mul
      (vec-cast
       (load
        (buffer input1 'uint8)
        (ramp
         (sca-add
          (sca-mul output.s0.x.x 16)
          (sca-add
           (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
           (var-lookup 't72)))
         1
         16)
        (aligned 1 0))
       'int16
       16)
      (sca-broadcast (int16_t (bv #x0040 16)) 16))
     (sca-broadcast (sca-mul (int16_t t146) (int16_t (bv #xffc0 16))) 16))
    'int32
    16)
   (vec-cast
    (sca-broadcast
     (sca-mul (sca-sub (int16_t t147) (int16_t t148)) (int16_t (bv #x0040 16)))
     16)
    'int32
    16))
  'int64
  16)
 (vec-cast #<abstr-halide-expr> 'int64 16))
optimized-template:
  (vv-mpy-add ... #<abstr-expr> '(1) (! x?$1781) (! x?$1782) (! x?$1783) 'int64)
optimized Halide 0:
  (int64_t
 (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend (app abstr-vals$1789 0) (bitvector 64))))
optimized x86 0:
  (int64_t
 (ite* (⊢ (&& x?$1783 (! (&& (! x?$1781) (! x?$1783)))) (ite x?$1781 (bvadd (bvmul (sign-extend (app abstr-vals$1789 0) (bitvector 64)) (sign-extend (app abstr-vals$1789 1) (bitvector 64))) (ite x?$1782 (bv #x0000000000000000 64) (bv #x0000000000000001 64))) (bvadd (ite x?$1782 (bv #x0000000000000000 64) (bv #x0000000000000001 64)) (ite (bvsle (bvmul (sign-extend (app abstr-vals$1789 0) (bitvector 64)) (sign-extend (app abstr-vals$1789 1) (bitvector 64))) (bvadd (bv #x7fffffffffffffff 64) (bvneg (ite x?$1782 (bv #x0000000000000000 64) (bv #x0000000000000001 64))))) (bvmul (sign-extend (app abstr-vals$1789 0) (bitvector 64)) (sign-extend (app abstr-vals$1789 1) (bitvector 64))) (bvadd (bv #x7fffffffffffffff 64) (bvneg (ite x?$1782 (bv #x0000000000000000 64) (bv #x0000000000000001 64)))))))) (⊢ (|| (&& (! x?$1781) (! x?$1783)) (&& (! x?$1783) (! (&& (! x?$1781) (! x?$1783))))) (bvashr (ite x?$1781 (bvadd (bvmul (sign-extend (app abstr-vals$1789 0) (bitvector 64)) (sign-extend (app abstr-vals$1789 1) (bitvector 64))) (ite x?$1782 (bv #x0000000000000000 64) (bv #x0000000000000001 64))) (bvadd (ite x?$1782 (bv #x0000000000000000 64) (bv #x0000000000000001 64)) (ite (bvsle (bvmul (sign-extend (app abstr-vals$1789 0) (bitvector 64)) (sign-extend (app abstr-vals$1789 1) (bitvector 64))) (bvadd (bv #x7fffffffffffffff 64) (bvneg (ite x?$1782 (bv #x0000000000000000 64) (bv #x0000000000000001 64))))) (bvmul (sign-extend (app abstr-vals$1789 0) (bitvector 64)) (sign-extend (app abstr-vals$1789 1) (bitvector 64))) (bvadd (bv #x7fffffffffffffff 64) (bvneg (ite x?$1782 (bv #x0000000000000000 64) (bv #x0000000000000001 64))))))) (bv #x0000000000000001 64)))))
run-x86-synthesizer
halide-expr:
  (vec-mul
 (vec-cast
  (vec-mul
   (vec-cast
    (vec-add
     (vec-mul
      (vec-cast
       (load
        (buffer input1 'uint8)
        (ramp
         (sca-add
          (sca-mul output.s0.x.x 16)
          (sca-add
           (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
           (var-lookup 't72)))
         1
         16)
        (aligned 1 0))
       'int16
       16)
      (sca-broadcast (int16_t (bv #x0040 16)) 16))
     (sca-broadcast (sca-mul (int16_t t146) (int16_t (bv #xffc0 16))) 16))
    'int32
    16)
   (vec-cast
    (sca-broadcast
     (sca-mul (sca-sub (int16_t t147) (int16_t t148)) (int16_t (bv #x0040 16)))
     16)
    'int32
    16))
  'int64
  16)
 (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
template:
  (vs-mpy-add
 ...
 (combine
  #<load-data>
  (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))))
 (list
  (sca-mul
   (sca-cast (int8_t (bv #x01 8)) 'int16)
   (sca-cast
    (union [xi?$1379 #(struct:sca-mul
                       #(struct:sca-sub
                         #(struct:int16_t t147)
                         #(struct:int16_t t148))
                       #(struct:int16_t (bv #x0040 16)))] [(&& xi?$1380 (! xi?$1379)) #(struct:int16_t
                                                                                        (bv #x0040 16))] [(&& (! xi?$1379) (&& xi?$1381 (! xi?$1380))) #(struct:int32_t
                                                                                                                                                         output_multiplier)] [(&& (! xi?$1379) (&& (! xi?$1380) (! xi?$1381))) #(struct:int8_t
                                                                                                                                                                                                                                 (bv #x01 8))])
    'int16))
  (sca-mul
   (sca-cast (int16_t (bv #x0040 16)) 'int16)
   (sca-cast
    (union [xi?$1379 #(struct:sca-mul
                       #(struct:sca-sub
                         #(struct:int16_t t147)
                         #(struct:int16_t t148))
                       #(struct:int16_t (bv #x0040 16)))] [(&& xi?$1380 (! xi?$1379)) #(struct:int16_t
                                                                                        (bv #x0040 16))] [(&& (! xi?$1379) (&& xi?$1381 (! xi?$1380))) #(struct:int32_t
                                                                                                                                                         output_multiplier)] [(&& (! xi?$1379) (&& (! xi?$1380) (! xi?$1381))) #(struct:int8_t
                                                                                                                                                                                                                                 (bv #x01 8))])
    'int16)))
 #f
 #f
 #f
 'int16)
axioms:
  (list #t (forall (idx) (bvsle (app abstr-vals$1791 idx) (bv #x7fc0 16))))
optimized-halide-expr:
  (vec-mul
 (vec-cast
  (vec-mul
   (vec-cast
    (vec-add
     (vec-mul
      (vec-cast #<abstr-halide-expr> 'int16 16)
      (sca-broadcast (int16_t (bv #x0040 16)) 16))
     #<abstr-halide-expr>)
    'int32
    16)
   (vec-cast
    (sca-broadcast
     (sca-mul (sca-sub (int16_t t147) (int16_t t148)) (int16_t (bv #x0040 16)))
     16)
    'int32
    16))
  'int64
  16)
 (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
optimized-template:
  (vs-mpy-add
 ...
 (combine #<abstr-expr> #<abstr-expr>)
 (list
  (sca-mul
   (sca-cast (int8_t (bv #x01 8)) 'int16)
   (sca-cast
    (union [xi?$1379 #(struct:sca-mul
                       #(struct:sca-sub
                         #(struct:int16_t t147)
                         #(struct:int16_t t148))
                       #(struct:int16_t (bv #x0040 16)))] [(&& xi?$1380 (! xi?$1379)) #(struct:int16_t
                                                                                        (bv #x0040 16))] [(&& (! xi?$1379) (&& xi?$1381 (! xi?$1380))) #(struct:int32_t
                                                                                                                                                         output_multiplier)] [(&& (! xi?$1379) (&& (! xi?$1380) (! xi?$1381))) #(struct:int8_t
                                                                                                                                                                                                                                 (bv #x01 8))])
    'int16))
  (sca-mul
   (sca-cast (int16_t (bv #x0040 16)) 'int16)
   (sca-cast
    (union [xi?$1379 #(struct:sca-mul
                       #(struct:sca-sub
                         #(struct:int16_t t147)
                         #(struct:int16_t t148))
                       #(struct:int16_t (bv #x0040 16)))] [(&& xi?$1380 (! xi?$1379)) #(struct:int16_t
                                                                                        (bv #x0040 16))] [(&& (! xi?$1379) (&& xi?$1381 (! xi?$1380))) #(struct:int32_t
                                                                                                                                                         output_multiplier)] [(&& (! xi?$1379) (&& (! xi?$1380) (! xi?$1381))) #(struct:int8_t
                                                                                                                                                                                                                                 (bv #x01 8))])
    'int16)))
 #f
 #f
 #f
 'int16)
optimized Halide 0:
  (int64_t
 (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32)) (sign-extend (bvadd (app abstr-vals$1791 0) (bvmul (bv #x0040 16) (zero-extend (app abstr-vals$1790 0) (bitvector 16)))) (bitvector 32))) (bitvector 64))))
optimized x86 0:
  (int16_t
 (bvadd (bvmul (app abstr-vals$1791 0) (ite* (⊢ (&& (! xi?$1379) (&& xi?$1381 (! xi?$1380))) (extract 15 0 output_multiplier)) (⊢ (&& (! xi?$1379) (&& (! xi?$1380) (! xi?$1381))) (bv #x0001 16)) (⊢ (|| xi?$1379 (&& xi?$1380 (! xi?$1379))) (ite* (⊢ xi?$1379 (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148)))) (⊢ (&& xi?$1380 (! xi?$1379)) (bv #x0040 16)))))) (bvmul (zero-extend (app abstr-vals$1790 0) (bitvector 16)) (bvmul (bv #x0040 16) (ite* (⊢ (&& (! xi?$1379) (&& xi?$1381 (! xi?$1380))) (extract 15 0 output_multiplier)) (⊢ (&& (! xi?$1379) (&& (! xi?$1380) (! xi?$1381))) (bv #x0001 16)) (⊢ (|| xi?$1379 (&& xi?$1380 (! xi?$1379))) (ite* (⊢ xi?$1379 (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148)))) (⊢ (&& xi?$1380 (! xi?$1379)) (bv #x0040 16)))))))))
Ran synthesizer for 44 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-mul
 (vec-cast
  (vec-mul
   (vec-cast
    (vec-add
     (vec-mul
      (vec-cast
       (load
        (buffer input1 'uint8)
        (ramp
         (sca-add
          (sca-mul output.s0.x.x 16)
          (sca-add
           (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
           (var-lookup 't72)))
         1
         16)
        (aligned 1 0))
       'int16
       16)
      (sca-broadcast (int16_t (bv #x0040 16)) 16))
     (sca-broadcast (sca-mul (int16_t t146) (int16_t (bv #xffc0 16))) 16))
    'int32
    16)
   (vec-cast
    (sca-broadcast
     (sca-mul (sca-sub (int16_t t147) (int16_t t148)) (int16_t (bv #x0040 16)))
     16)
    'int32
    16))
  'int64
  16)
 (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
template:
  (vs-mpy-add
 ...
 (combine
  #<load-data>
  (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))))
 (list
  (sca-mul
   (sca-cast (int8_t (bv #x01 8)) 'int16)
   (sca-cast
    (union [xi?$1379 #(struct:sca-mul
                       #(struct:sca-sub
                         #(struct:int16_t t147)
                         #(struct:int16_t t148))
                       #(struct:int16_t (bv #x0040 16)))] [(&& xi?$1380 (! xi?$1379)) #(struct:int16_t
                                                                                        (bv #x0040 16))] [(&& (! xi?$1379) (&& xi?$1381 (! xi?$1380))) #(struct:int32_t
                                                                                                                                                         output_multiplier)] [(&& (! xi?$1379) (&& (! xi?$1380) (! xi?$1381))) #(struct:int8_t
                                                                                                                                                                                                                                 (bv #x01 8))])
    'int16))
  (sca-mul
   (sca-cast (int16_t (bv #x0040 16)) 'int16)
   (sca-cast
    (union [xi?$1379 #(struct:sca-mul
                       #(struct:sca-sub
                         #(struct:int16_t t147)
                         #(struct:int16_t t148))
                       #(struct:int16_t (bv #x0040 16)))] [(&& xi?$1380 (! xi?$1379)) #(struct:int16_t
                                                                                        (bv #x0040 16))] [(&& (! xi?$1379) (&& xi?$1381 (! xi?$1380))) #(struct:int32_t
                                                                                                                                                         output_multiplier)] [(&& (! xi?$1379) (&& (! xi?$1380) (! xi?$1381))) #(struct:int8_t
                                                                                                                                                                                                                                 (bv #x01 8))])
    'int16)))
 #f
 #f
 #f
 'int64)
axioms:
  (list #t (forall (idx) (bvsle (app abstr-vals$1793 idx) (bv #x7fc0 16))))
optimized-halide-expr:
  (vec-mul
 (vec-cast
  (vec-mul
   (vec-cast
    (vec-add
     (vec-mul
      (vec-cast #<abstr-halide-expr> 'int16 16)
      (sca-broadcast (int16_t (bv #x0040 16)) 16))
     #<abstr-halide-expr>)
    'int32
    16)
   (vec-cast
    (sca-broadcast
     (sca-mul (sca-sub (int16_t t147) (int16_t t148)) (int16_t (bv #x0040 16)))
     16)
    'int32
    16))
  'int64
  16)
 (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
optimized-template:
  (vs-mpy-add
 ...
 (combine #<abstr-expr> #<abstr-expr>)
 (list
  (sca-mul
   (sca-cast (int8_t (bv #x01 8)) 'int16)
   (sca-cast
    (union [xi?$1379 #(struct:sca-mul
                       #(struct:sca-sub
                         #(struct:int16_t t147)
                         #(struct:int16_t t148))
                       #(struct:int16_t (bv #x0040 16)))] [(&& xi?$1380 (! xi?$1379)) #(struct:int16_t
                                                                                        (bv #x0040 16))] [(&& (! xi?$1379) (&& xi?$1381 (! xi?$1380))) #(struct:int32_t
                                                                                                                                                         output_multiplier)] [(&& (! xi?$1379) (&& (! xi?$1380) (! xi?$1381))) #(struct:int8_t
                                                                                                                                                                                                                                 (bv #x01 8))])
    'int16))
  (sca-mul
   (sca-cast (int16_t (bv #x0040 16)) 'int16)
   (sca-cast
    (union [xi?$1379 #(struct:sca-mul
                       #(struct:sca-sub
                         #(struct:int16_t t147)
                         #(struct:int16_t t148))
                       #(struct:int16_t (bv #x0040 16)))] [(&& xi?$1380 (! xi?$1379)) #(struct:int16_t
                                                                                        (bv #x0040 16))] [(&& (! xi?$1379) (&& xi?$1381 (! xi?$1380))) #(struct:int32_t
                                                                                                                                                         output_multiplier)] [(&& (! xi?$1379) (&& (! xi?$1380) (! xi?$1381))) #(struct:int8_t
                                                                                                                                                                                                                                 (bv #x01 8))])
    'int16)))
 #f
 #f
 #f
 'int64)
optimized Halide 0:
  (int64_t
 (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32)) (sign-extend (bvadd (app abstr-vals$1793 0) (bvmul (bv #x0040 16) (zero-extend (app abstr-vals$1792 0) (bitvector 16)))) (bitvector 32))) (bitvector 64))))
optimized x86 0:
  (int64_t
 (bvadd (bvmul (sign-extend (app abstr-vals$1793 0) (bitvector 64)) (sign-extend (ite* (⊢ (&& (! xi?$1379) (&& xi?$1381 (! xi?$1380))) (extract 15 0 output_multiplier)) (⊢ (&& (! xi?$1379) (&& (! xi?$1380) (! xi?$1381))) (bv #x0001 16)) (⊢ (|| xi?$1379 (&& xi?$1380 (! xi?$1379))) (ite* (⊢ xi?$1379 (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148)))) (⊢ (&& xi?$1380 (! xi?$1379)) (bv #x0040 16))))) (bitvector 64))) (bvmul (zero-extend (app abstr-vals$1792 0) (bitvector 64)) (sign-extend (bvmul (bv #x0040 16) (ite* (⊢ (&& (! xi?$1379) (&& xi?$1381 (! xi?$1380))) (extract 15 0 output_multiplier)) (⊢ (&& (! xi?$1379) (&& (! xi?$1380) (! xi?$1381))) (bv #x0001 16)) (⊢ (|| xi?$1379 (&& xi?$1380 (! xi?$1379))) (ite* (⊢ xi?$1379 (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148)))) (⊢ (&& xi?$1380 (! xi?$1379)) (bv #x0040 16)))))) (bitvector 64)))))
Ran synthesizer for 1087 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-mul
 (vec-cast
  (vec-mul
   (vec-cast
    (vec-add
     (vec-mul
      (vec-cast
       (load
        (buffer input1 'uint8)
        (ramp
         (sca-add
          (sca-mul output.s0.x.x 16)
          (sca-add
           (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
           (var-lookup 't72)))
         1
         16)
        (aligned 1 0))
       'int16
       16)
      (sca-broadcast (int16_t (bv #x0040 16)) 16))
     (sca-broadcast (sca-mul (int16_t t146) (int16_t (bv #xffc0 16))) 16))
    'int32
    16)
   (vec-cast
    (sca-broadcast
     (sca-mul (sca-sub (int16_t t147) (int16_t t148)) (int16_t (bv #x0040 16)))
     16)
    'int32
    16))
  'int64
  16)
 (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
template:
  (vs-mpy-add
 ...
 (vs-mpy-add
  ...
  (combine
   #<load-data>
   (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))))
  (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
  #f
  #f
  #f
  'int16)
 (list
  (sca-mul
   (sca-cast
    (sca-mul (sca-sub (int16_t t147) (int16_t t148)) (int16_t (bv #x0040 16)))
    'int32)
   (sca-cast
    (union [xi?$1373 #(struct:sca-mul
                       #(struct:sca-sub
                         #(struct:int16_t t147)
                         #(struct:int16_t t148))
                       #(struct:int16_t (bv #x0040 16)))] [(&& xi?$1374 (! xi?$1373)) #(struct:int16_t
                                                                                        (bv #x0040 16))] [(&& (! xi?$1373) (&& xi?$1375 (! xi?$1374))) #(struct:int32_t
                                                                                                                                                         output_multiplier)] [(&& (! xi?$1373) (&& (! xi?$1374) (! xi?$1375))) #(struct:int8_t
                                                                                                                                                                                                                                 (bv #x01 8))])
    'int32)))
 #f
 #f
 #f
 'int32)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-mul
 (vec-cast
  (vec-mul
   (vec-cast #<abstr-halide-expr> 'int32 16)
   (vec-cast
    (sca-broadcast
     (sca-mul (sca-sub (int16_t t147) (int16_t t148)) (int16_t (bv #x0040 16)))
     16)
    'int32
    16))
  'int64
  16)
 (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
optimized-template:
  (vs-mpy-add
 ...
 #<abstr-expr>
 (list
  (sca-mul
   (sca-cast
    (sca-mul (sca-sub (int16_t t147) (int16_t t148)) (int16_t (bv #x0040 16)))
    'int32)
   (sca-cast
    (union [xi?$1373 #(struct:sca-mul
                       #(struct:sca-sub
                         #(struct:int16_t t147)
                         #(struct:int16_t t148))
                       #(struct:int16_t (bv #x0040 16)))] [(&& xi?$1374 (! xi?$1373)) #(struct:int16_t
                                                                                        (bv #x0040 16))] [(&& (! xi?$1373) (&& xi?$1375 (! xi?$1374))) #(struct:int32_t
                                                                                                                                                         output_multiplier)] [(&& (! xi?$1373) (&& (! xi?$1374) (! xi?$1375))) #(struct:int8_t
                                                                                                                                                                                                                                 (bv #x01 8))])
    'int32)))
 #f
 #f
 #f
 'int32)
optimized Halide 0:
  (int64_t
 (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32)) (sign-extend (app abstr-vals$1794 0) (bitvector 32))) (bitvector 64))))
optimized x86 0:
  (int32_t
 (bvmul (sign-extend (app abstr-vals$1794 0) (bitvector 32)) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32)) (ite* (⊢ (&& (! xi?$1373) (&& xi?$1375 (! xi?$1374))) output_multiplier) (⊢ (&& (! xi?$1373) (&& (! xi?$1374) (! xi?$1375))) (bv #x00000001 32)) (⊢ (|| xi?$1373 (&& xi?$1374 (! xi?$1373))) (sign-extend (ite* (⊢ xi?$1373 (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148)))) (⊢ (&& xi?$1374 (! xi?$1373)) (bv #x0040 16))) (bitvector 32)))))))
Ran synthesizer for 18 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-mul
 (vec-cast
  (vec-mul
   (vec-cast
    (vec-add
     (vec-mul
      (vec-cast
       (load
        (buffer input1 'uint8)
        (ramp
         (sca-add
          (sca-mul output.s0.x.x 16)
          (sca-add
           (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
           (var-lookup 't72)))
         1
         16)
        (aligned 1 0))
       'int16
       16)
      (sca-broadcast (int16_t (bv #x0040 16)) 16))
     (sca-broadcast (sca-mul (int16_t t146) (int16_t (bv #xffc0 16))) 16))
    'int32
    16)
   (vec-cast
    (sca-broadcast
     (sca-mul (sca-sub (int16_t t147) (int16_t t148)) (int16_t (bv #x0040 16)))
     16)
    'int32
    16))
  'int64
  16)
 (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
template:
  (vs-mpy-add
 ...
 (vs-mpy-add
  ...
  (combine
   #<load-data>
   (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))))
  (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
  #f
  #f
  #f
  'int16)
 (list
  (sca-mul
   (sca-cast
    (sca-mul (sca-sub (int16_t t147) (int16_t t148)) (int16_t (bv #x0040 16)))
    'int32)
   (sca-cast
    (union [xi?$1373 #(struct:sca-mul
                       #(struct:sca-sub
                         #(struct:int16_t t147)
                         #(struct:int16_t t148))
                       #(struct:int16_t (bv #x0040 16)))] [(&& xi?$1374 (! xi?$1373)) #(struct:int16_t
                                                                                        (bv #x0040 16))] [(&& (! xi?$1373) (&& xi?$1375 (! xi?$1374))) #(struct:int32_t
                                                                                                                                                         output_multiplier)] [(&& (! xi?$1373) (&& (! xi?$1374) (! xi?$1375))) #(struct:int8_t
                                                                                                                                                                                                                                 (bv #x01 8))])
    'int32)))
 #f
 #f
 #f
 'int64)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-mul
 (vec-cast
  (vec-mul
   (vec-cast #<abstr-halide-expr> 'int32 16)
   (vec-cast
    (sca-broadcast
     (sca-mul (sca-sub (int16_t t147) (int16_t t148)) (int16_t (bv #x0040 16)))
     16)
    'int32
    16))
  'int64
  16)
 (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
optimized-template:
  (vs-mpy-add
 ...
 #<abstr-expr>
 (list
  (sca-mul
   (sca-cast
    (sca-mul (sca-sub (int16_t t147) (int16_t t148)) (int16_t (bv #x0040 16)))
    'int32)
   (sca-cast
    (union [xi?$1373 #(struct:sca-mul
                       #(struct:sca-sub
                         #(struct:int16_t t147)
                         #(struct:int16_t t148))
                       #(struct:int16_t (bv #x0040 16)))] [(&& xi?$1374 (! xi?$1373)) #(struct:int16_t
                                                                                        (bv #x0040 16))] [(&& (! xi?$1373) (&& xi?$1375 (! xi?$1374))) #(struct:int32_t
                                                                                                                                                         output_multiplier)] [(&& (! xi?$1373) (&& (! xi?$1374) (! xi?$1375))) #(struct:int8_t
                                                                                                                                                                                                                                 (bv #x01 8))])
    'int32)))
 #f
 #f
 #f
 'int64)
optimized Halide 0:
  (int64_t
 (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32)) (sign-extend (app abstr-vals$1795 0) (bitvector 32))) (bitvector 64))))
optimized x86 0:
  (int64_t
 (bvmul (sign-extend (app abstr-vals$1795 0) (bitvector 64)) (sign-extend (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32)) (ite* (⊢ (&& (! xi?$1373) (&& xi?$1375 (! xi?$1374))) output_multiplier) (⊢ (&& (! xi?$1373) (&& (! xi?$1374) (! xi?$1375))) (bv #x00000001 32)) (⊢ (|| xi?$1373 (&& xi?$1374 (! xi?$1373))) (sign-extend (ite* (⊢ xi?$1373 (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148)))) (⊢ (&& xi?$1374 (! xi?$1373)) (bv #x0040 16))) (bitvector 32))))) (bitvector 64))))
Ran synthesizer for 799 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-mul
 (vec-cast
  (vec-mul
   (vec-cast
    (vec-add
     (vec-mul
      (vec-cast
       (load
        (buffer input1 'uint8)
        (ramp
         (sca-add
          (sca-mul output.s0.x.x 16)
          (sca-add
           (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
           (var-lookup 't72)))
         1
         16)
        (aligned 1 0))
       'int16
       16)
      (sca-broadcast (int16_t (bv #x0040 16)) 16))
     (sca-broadcast (sca-mul (int16_t t146) (int16_t (bv #xffc0 16))) 16))
    'int32
    16)
   (vec-cast
    (sca-broadcast
     (sca-mul (sca-sub (int16_t t147) (int16_t t148)) (int16_t (bv #x0040 16)))
     16)
    'int32
    16))
  'int64
  16)
 (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
template:
  (cast
 ...
 (vs-mpy-add
  ...
  (vs-mpy-add
   ...
   (combine
    #<load-data>
    (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))))
   (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
   #f
   #f
   #f
   'int16)
  (list
   (sca-mul (sca-sub (int16_t t147) (int16_t t148)) (int16_t (bv #x0040 16))))
  #f
  #f
  #f
  'int32)
 'int64
 x?$1369)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$1796 idx) (bv #x40000000 32)) (bvsle (bv #xc0008000 32) (app abstr-vals$1796 idx)))))
optimized-halide-expr:
  (vec-mul
 (vec-cast #<abstr-halide-expr> 'int64 16)
 (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
optimized-template:
  (cast ... #<abstr-expr> 'int64 x?$1369)
optimized Halide 0:
  (int64_t
 (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (app abstr-vals$1796 0) (bitvector 64))))
optimized x86 0:
  (int64_t (sign-extend (app abstr-vals$1796 0) (bitvector 64)))
run-x86-synthesizer
halide-expr:
  (vec-mul
 (vec-cast
  (vec-mul
   (vec-cast
    (vec-add
     (vec-mul
      (vec-cast
       (load
        (buffer input1 'uint8)
        (ramp
         (sca-add
          (sca-mul output.s0.x.x 16)
          (sca-add
           (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
           (var-lookup 't72)))
         1
         16)
        (aligned 1 0))
       'int16
       16)
      (sca-broadcast (int16_t (bv #x0040 16)) 16))
     (sca-broadcast (sca-mul (int16_t t146) (int16_t (bv #xffc0 16))) 16))
    'int32
    16)
   (vec-cast
    (sca-broadcast
     (sca-mul (sca-sub (int16_t t147) (int16_t t148)) (int16_t (bv #x0040 16)))
     16)
    'int32
    16))
  'int64
  16)
 (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
template:
  (vs-mpy-add
 ...
 (vs-mpy-add
  ...
  (vs-mpy-add
   ...
   (combine
    #<load-data>
    (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))))
   (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
   #f
   #f
   #f
   'int16)
  (list
   (sca-mul (sca-sub (int16_t t147) (int16_t t148)) (int16_t (bv #x0040 16))))
  #f
  #f
  #f
  'int32)
 '((union [xi?$1575 #(struct:sca-mul
                      #(struct:sca-sub
                        #(struct:int16_t t147)
                        #(struct:int16_t t148))
                      #(struct:int16_t (bv #x0040 16)))] [(&& xi?$1576 (! xi?$1575)) #(struct:int16_t
                                                                                       (bv #x0040 16))] [(&& (! xi?$1575) (! xi?$1576)) #(struct:int32_t
                                                                                                                                          output_multiplier)]))
 #f
 #f
 #f
 'int64)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$1797 idx) (bv #x40000000 32)) (bvsle (bv #xc0008000 32) (app abstr-vals$1797 idx)))))
optimized-halide-expr:
  (vec-mul
 (vec-cast #<abstr-halide-expr> 'int64 16)
 (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
optimized-template:
  (vs-mpy-add
 ...
 #<abstr-expr>
 '((union [xi?$1575 #(struct:sca-mul
                      #(struct:sca-sub
                        #(struct:int16_t t147)
                        #(struct:int16_t t148))
                      #(struct:int16_t (bv #x0040 16)))] [(&& xi?$1576 (! xi?$1575)) #(struct:int16_t
                                                                                       (bv #x0040 16))] [(&& (! xi?$1575) (! xi?$1576)) #(struct:int32_t
                                                                                                                                          output_multiplier)]))
 #f
 #f
 #f
 'int64)
optimized Halide 0:
  (int64_t
 (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (app abstr-vals$1797 0) (bitvector 64))))
optimized x86 0:
  (int64_t
 (bvmul (sign-extend (app abstr-vals$1797 0) (bitvector 64)) (ite* (⊢ (&& (! xi?$1575) (! xi?$1576)) (sign-extend output_multiplier (bitvector 64))) (⊢ (|| xi?$1575 (&& xi?$1576 (! xi?$1575))) (sign-extend (ite* (⊢ xi?$1575 (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148)))) (⊢ (&& xi?$1576 (! xi?$1575)) (bv #x0040 16))) (bitvector 64))))))
Ran synthesizer for 539 ms
(model
 [xi?$1575 #f]
 [xi?$1576 #f])
(vec-mul
 (vec-cast #<abstr-halide-expr> 'int64 16)
 (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
(vs-mpy-add
 ...
 (vs-mpy-add
  ...
  (vs-mpy-add
   ...
   (combine
    #<load-data>
    (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))))
   (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
   #f
   #f
   #f
   'int16)
  (list
   (sca-mul (sca-sub (int16_t t147) (int16_t t148)) (int16_t (bv #x0040 16))))
  #f
  #f
  #f
  'int32)
 (list (int32_t output_multiplier))
 #f
 #f
 #f
 'int64)
Ran bounds analysis for 5795 ms
Ran bounds analysis for 7329 ms
"Success?"
#t
(vs-mpy-add ... (vs-mpy-add ... (vs-mpy-add ... (combine #<load-data> (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16))))) (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16))) #f #f #f 'int16) (list (sca-mul (sca-sub (int16_t t147) (int16_t t148)) (int16_t (bv #x0040 16)))) #f #f #f 'int32) (list (int32_t output_multiplier)) #f #f #f 'int64)
"Building Expr:"
(sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)
"Fold templates"
'()
here()

"Replace templates"
'()
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)
template:
  (broadcast ... (int64_t (bv #x0000000040000000 64)))
axioms:
  '()
optimized-halide-expr:
  (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)
optimized-template:
  (broadcast ... (int64_t (bv #x0000000040000000 64)))
optimized Halide 0:
  (int64_t (bv #x0000000040000000 64))
optimized x86 0:
  (int64_t (bv #x0000000040000000 64))
Ran synthesizer for 19 ms
(model)
(sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)
(broadcast ... (int64_t (bv #x0000000040000000 64)))
Ran bounds analysis for 21 ms
Ran bounds analysis for 13 ms
"Extended success?"
#t
(broadcast ... (int64_t (bv #x0000000040000000 64)))
"Building Expr:"
(vec-div
 (vec-mul
  (vec-cast
   (vec-mul
    (vec-cast
     (vec-add
      (vec-mul
       (vec-cast
        (load
         (buffer input1 'uint8)
         (ramp
          (sca-add
           (sca-mul output.s0.x.x 16)
           (sca-add
            (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
            (var-lookup 't72)))
          1
          16)
         (aligned 1 0))
        'int16
        16)
       (sca-broadcast (int16_t (bv #x0040 16)) 16))
      (sca-broadcast (sca-mul (int16_t t146) (int16_t (bv #xffc0 16))) 16))
     'int32
     16)
    (vec-cast
     (sca-broadcast
      (sca-mul
       (sca-sub (int16_t t147) (int16_t t148))
       (int16_t (bv #x0040 16)))
      16)
     'int32
     16))
   'int64
   16)
  (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
 (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16))
"Fold templates"
'()
here()

"Replace templates"
'()
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (vec-div
 (vec-mul
  (vec-cast
   (vec-mul
    (vec-cast
     (vec-add
      (vec-mul
       (vec-cast
        (load
         (buffer input1 'uint8)
         (ramp
          (sca-add
           (sca-mul output.s0.x.x 16)
           (sca-add
            (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
            (var-lookup 't72)))
          1
          16)
         (aligned 1 0))
        'int16
        16)
       (sca-broadcast (int16_t (bv #x0040 16)) 16))
      (sca-broadcast (sca-mul (int16_t t146) (int16_t (bv #xffc0 16))) 16))
     'int32
     16)
    (vec-cast
     (sca-broadcast
      (sca-mul
       (sca-sub (int16_t t147) (int16_t t148))
       (int16_t (bv #x0040 16)))
      16)
     'int32
     16))
   'int64
   16)
  (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
 (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16))
template:
  (vs-shift-right
 ...
 (vs-mpy-add
  ...
  (vs-mpy-add
   ...
   (vs-mpy-add
    ...
    (combine
     #<load-data>
     (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))))
    (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
    #f
    #f
    #f
    'int16)
   (list
    (sca-mul (sca-sub (int16_t t147) (int16_t t148)) (int16_t (bv #x0040 16))))
   #f
   #f
   #f
   'int32)
  (list (int32_t output_multiplier))
  #f
  #f
  #f
  'int64)
 (int64_t (bv #x000000000000001e 64))
 #f
 #f
 #t)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$1817 idx) (bv #x1fffffffc0000000 64)) (bvsle (bv #xe000000000000000 64) (app abstr-vals$1817 idx)))))
optimized-halide-expr:
  (vec-div
 #<abstr-halide-expr>
 (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16))
optimized-template:
  (vs-shift-right
 ...
 #<abstr-expr>
 (int64_t (bv #x000000000000001e 64))
 #f
 #f
 #t)
optimized Halide 0:
  (int64_t
 (bvadd (bvashr (app abstr-vals$1817 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$1817 0) (bvneg (bvashr (app abstr-vals$1817 0) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64))))
optimized x86 0:
  (int64_t (bvashr (app abstr-vals$1817 0) (bv #x000000000000001e 64)))
Ran synthesizer for 246 ms
(model)
(vec-div
 #<abstr-halide-expr>
 (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16))
(vs-shift-right
 ...
 (vs-mpy-add
  ...
  (vs-mpy-add
   ...
   (vs-mpy-add
    ...
    (combine
     #<load-data>
     (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))))
    (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
    #f
    #f
    #f
    'int16)
   (list
    (sca-mul (sca-sub (int16_t t147) (int16_t t148)) (int16_t (bv #x0040 16))))
   #f
   #f
   #f
   'int32)
  (list (int32_t output_multiplier))
  #f
  #f
  #f
  'int64)
 (int64_t (bv #x000000000000001e 64))
 #f
 #f
 #t)
Ran bounds analysis for 50 ms
Ran bounds analysis for 41 ms
"Extended success?"
#t
(vs-shift-right
 ...
 (vs-mpy-add
  ...
  (vs-mpy-add
   ...
   (vs-mpy-add
    ...
    (combine
     #<load-data>
     (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))))
    (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
    #f
    #f
    #f
    'int16)
   (list
    (sca-mul (sca-sub (int16_t t147) (int16_t t148)) (int16_t (bv #x0040 16))))
   #f
   #f
   #f
   'int32)
  (list (int32_t output_multiplier))
  #f
  #f
  #f
  'int64)
 (int64_t (bv #x000000000000001e 64))
 #f
 #f
 #t)
"Building Expr:"
(vec-bwand
 (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
 (vec-div
  (vec-mul
   (vec-cast
    (vec-mul
     (vec-cast
      (vec-add
       (vec-mul
        (vec-cast
         (load
          (buffer input1 'uint8)
          (ramp
           (sca-add
            (sca-mul output.s0.x.x 16)
            (sca-add
             (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
             (var-lookup 't72)))
           1
           16)
          (aligned 1 0))
         'int16
         16)
        (sca-broadcast (int16_t (bv #x0040 16)) 16))
       (sca-broadcast (sca-mul (int16_t t146) (int16_t (bv #xffc0 16))) 16))
      'int32
      16)
     (vec-cast
      (sca-broadcast
       (sca-mul
        (sca-sub (int16_t t147) (int16_t t148))
        (int16_t (bv #x0040 16)))
       16)
      'int32
      16))
    'int64
    16)
   (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
  (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
"Fold templates"
(list
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (vs-mpy-add
    ...
    (vs-mpy-add
     ...
     (combine
      #<load-data>
      (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))))
     (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
     #f
     #f
     #f
     'int16)
    (list
     (sca-mul
      (sca-sub (int16_t t147) (int16_t t148))
      (int16_t (bv #x0040 16))))
    #f
    #f
    #f
    'int32)
   (list (int32_t output_multiplier))
   #f
   #f
   #f
   'int64)
  (int64_t (bv #x000000000000001e 64))
  #f
  #f
  #t)
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (vs-mpy-add
    ...
    (vs-mpy-add
     ...
     (combine
      #<load-data>
      (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))))
     (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
     #f
     #f
     #f
     'int16)
    (list
     (sca-mul
      (sca-sub (int16_t t147) (int16_t t148))
      (int16_t (bv #x0040 16))))
    #f
    #f
    #f
    'int32)
   (list (int32_t output_multiplier))
   #f
   #f
   #f
   'int64)
  (int64_t (bv #x000000000000001e 64))
  x?$1819
  x?$1820
  x?$1821))
here(#(struct:vs-shift-right ... #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t146) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f #f #f int16) (#(struct:sca-mul #(struct:sca-sub #(struct:int16_t t147) #(struct:int16_t t148)) #(struct:int16_t (bv #x0040 16)))) #f #f #f int32) (#(struct:int32_t output_multiplier)) #f #f #f int64) #(struct:int64_t (bv #x000000000000001e 64)) #f #f #t) #(struct:vs-shift-right ... #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t146) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f #f #f int16) (#(struct:sca-mul #(struct:sca-sub #(struct:int16_t t147) #(struct:int16_t t148)) #(struct:int16_t (bv #x0040 16)))) #f #f #f int32) (#(struct:int32_t output_multiplier)) #f #f #f int64) #(struct:int64_t (bv #x000000000000001e 64)) x?$1819 x?$1820 x?$1821))

"Replace templates"
'()
run-x86-synthesizer
halide-expr:
  (vec-bwand
 (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
 (vec-div
  (vec-mul
   (vec-cast
    (vec-mul
     (vec-cast
      (vec-add
       (vec-mul
        (vec-cast
         (load
          (buffer input1 'uint8)
          (ramp
           (sca-add
            (sca-mul output.s0.x.x 16)
            (sca-add
             (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
             (var-lookup 't72)))
           1
           16)
          (aligned 1 0))
         'int16
         16)
        (sca-broadcast (int16_t (bv #x0040 16)) 16))
       (sca-broadcast (sca-mul (int16_t t146) (int16_t (bv #xffc0 16))) 16))
      'int32
      16)
     (vec-cast
      (sca-broadcast
       (sca-mul
        (sca-sub (int16_t t147) (int16_t t148))
        (int16_t (bv #x0040 16)))
       16)
      'int32
      16))
    'int64
    16)
   (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
  (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
template:
  (vs-shift-right
 ...
 (vs-mpy-add
  ...
  (vs-mpy-add
   ...
   (vs-mpy-add
    ...
    (combine
     #<load-data>
     (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))))
    (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
    #f
    #f
    #f
    'int16)
   (list
    (sca-mul (sca-sub (int16_t t147) (int16_t t148)) (int16_t (bv #x0040 16))))
   #f
   #f
   #f
   'int32)
  (list (int32_t output_multiplier))
  #f
  #f
  #f
  'int64)
 (int64_t (bv #x000000000000001e 64))
 #f
 #f
 #t)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$1834 idx) (bv #x1fffffffc0000000 64)) (bvsle (bv #xe000000000000000 64) (app abstr-vals$1834 idx)))))
optimized-halide-expr:
  (vec-bwand
 (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
 (vec-div
  #<abstr-halide-expr>
  (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
optimized-template:
  (vs-shift-right
 ...
 #<abstr-expr>
 (int64_t (bv #x000000000000001e 64))
 #f
 #f
 #t)
optimized Halide 0:
  (int64_t
 (bvand (bv #x0000000000000001 64) (bvadd (bvashr (app abstr-vals$1834 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$1834 0) (bvneg (bvashr (app abstr-vals$1834 0) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))))
optimized x86 0:
  (int64_t (bvashr (app abstr-vals$1834 0) (bv #x000000000000001e 64)))
Ran synthesizer for 209 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-bwand
 (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
 (vec-div
  (vec-mul
   (vec-cast
    (vec-mul
     (vec-cast
      (vec-add
       (vec-mul
        (vec-cast
         (load
          (buffer input1 'uint8)
          (ramp
           (sca-add
            (sca-mul output.s0.x.x 16)
            (sca-add
             (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
             (var-lookup 't72)))
           1
           16)
          (aligned 1 0))
         'int16
         16)
        (sca-broadcast (int16_t (bv #x0040 16)) 16))
       (sca-broadcast (sca-mul (int16_t t146) (int16_t (bv #xffc0 16))) 16))
      'int32
      16)
     (vec-cast
      (sca-broadcast
       (sca-mul
        (sca-sub (int16_t t147) (int16_t t148))
        (int16_t (bv #x0040 16)))
       16)
      'int32
      16))
    'int64
    16)
   (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
  (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
template:
  (vs-shift-right
 ...
 (vs-mpy-add
  ...
  (vs-mpy-add
   ...
   (vs-mpy-add
    ...
    (combine
     #<load-data>
     (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))))
    (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
    #f
    #f
    #f
    'int16)
   (list
    (sca-mul (sca-sub (int16_t t147) (int16_t t148)) (int16_t (bv #x0040 16))))
   #f
   #f
   #f
   'int32)
  (list (int32_t output_multiplier))
  #f
  #f
  #f
  'int64)
 (int64_t (bv #x000000000000001e 64))
 x?$1819
 x?$1820
 x?$1821)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$1835 idx) (bv #x1fffffffc0000000 64)) (bvsle (bv #xe000000000000000 64) (app abstr-vals$1835 idx)))))
optimized-halide-expr:
  (vec-bwand
 (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
 (vec-div
  #<abstr-halide-expr>
  (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
optimized-template:
  (vs-shift-right
 ...
 #<abstr-expr>
 (int64_t (bv #x000000000000001e 64))
 x?$1819
 x?$1820
 x?$1821)
optimized Halide 0:
  (int64_t
 (bvand (bv #x0000000000000001 64) (bvadd (bvashr (app abstr-vals$1835 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$1835 0) (bvneg (bvashr (app abstr-vals$1835 0) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))))
optimized x86 0:
  (int64_t
 (ite x?$1819 (bvadd (ite x?$1821 (bvashr (app abstr-vals$1835 0) (bv #x000000000000001e 64)) (bvlshr (app abstr-vals$1835 0) (bv #x000000000000001e 64))) (bvand (bv #x0000000000000001 64) (ite x?$1821 (bvashr (app abstr-vals$1835 0) (bv #x000000000000001d 64)) (bvlshr (app abstr-vals$1835 0) (bv #x000000000000001d 64))))) (ite x?$1821 (bvashr (app abstr-vals$1835 0) (bv #x000000000000001e 64)) (bvlshr (app abstr-vals$1835 0) (bv #x000000000000001e 64)))))
Ran synthesizer for 218 ms
(unsat)
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (vec-bwand
 (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
 (vec-div
  (vec-mul
   (vec-cast
    (vec-mul
     (vec-cast
      (vec-add
       (vec-mul
        (vec-cast
         (load
          (buffer input1 'uint8)
          (ramp
           (sca-add
            (sca-mul output.s0.x.x 16)
            (sca-add
             (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
             (var-lookup 't72)))
           1
           16)
          (aligned 1 0))
         'int16
         16)
        (sca-broadcast (int16_t (bv #x0040 16)) 16))
       (sca-broadcast (sca-mul (int16_t t146) (int16_t (bv #xffc0 16))) 16))
      'int32
      16)
     (vec-cast
      (sca-broadcast
       (sca-mul
        (sca-sub (int16_t t147) (int16_t t148))
        (int16_t (bv #x0040 16)))
       16)
      'int32
      16))
    'int64
    16)
   (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
  (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
template:
  (bitwise-op
 ...
 'and
 (broadcast ... (int64_t (bv #x0000000000000001 64)))
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (vs-mpy-add
    ...
    (vs-mpy-add
     ...
     (combine
      #<load-data>
      (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))))
     (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
     #f
     #f
     #f
     'int16)
    (list
     (sca-mul
      (sca-sub (int16_t t147) (int16_t t148))
      (int16_t (bv #x0040 16))))
    #f
    #f
    #f
    'int32)
   (list (int32_t output_multiplier))
   #f
   #f
   #f
   'int64)
  (int64_t (bv #x000000000000001e 64))
  #f
  #f
  #t))
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$1836 idx) (bv #x0000000000000001 64)) (bvsle (bv #x0000000000000001 64) (app abstr-vals$1836 idx))))
 (forall (idx) (&& (bvsle (app abstr-vals$1837 idx) (bv #x000000007fffffff 64)) (bvsle (bv #xffffffff80000000 64) (app abstr-vals$1837 idx)))))
optimized-halide-expr:
  (vec-bwand #<abstr-halide-expr> #<abstr-halide-expr>)
optimized-template:
  (bitwise-op ... 'and #<abstr-expr> #<abstr-expr>)
optimized Halide 0:
  (int64_t (bvand (app abstr-vals$1836 0) (app abstr-vals$1837 0)))
optimized x86 0:
  (int64_t (bvand (app abstr-vals$1836 0) (app abstr-vals$1837 0)))
Ran synthesizer for 33 ms
(model)
(vec-bwand #<abstr-halide-expr> #<abstr-halide-expr>)
(bitwise-op
 ...
 'and
 (broadcast ... (int64_t (bv #x0000000000000001 64)))
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (vs-mpy-add
    ...
    (vs-mpy-add
     ...
     (combine
      #<load-data>
      (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))))
     (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
     #f
     #f
     #f
     'int16)
    (list
     (sca-mul
      (sca-sub (int16_t t147) (int16_t t148))
      (int16_t (bv #x0040 16))))
    #f
    #f
    #f
    'int32)
   (list (int32_t output_multiplier))
   #f
   #f
   #f
   'int64)
  (int64_t (bv #x000000000000001e 64))
  #f
  #f
  #t))
Ran bounds analysis for 29 ms
Ran bounds analysis for 44 ms
"Extended success?"
#t
(bitwise-op
 ...
 'and
 (broadcast ... (int64_t (bv #x0000000000000001 64)))
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (vs-mpy-add
    ...
    (vs-mpy-add
     ...
     (combine
      #<load-data>
      (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))))
     (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
     #f
     #f
     #f
     'int16)
    (list
     (sca-mul
      (sca-sub (int16_t t147) (int16_t t148))
      (int16_t (bv #x0040 16))))
    #f
    #f
    #f
    'int32)
   (list (int32_t output_multiplier))
   #f
   #f
   #f
   'int64)
  (int64_t (bv #x000000000000001e 64))
  #f
  #f
  #t))
"Building Expr:"
(sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)
"Fold templates"
'()
here()

"Replace templates"
'()
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)
template:
  (broadcast ... (int64_t (bv #x0000000080000000 64)))
axioms:
  '()
optimized-halide-expr:
  (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)
optimized-template:
  (broadcast ... (int64_t (bv #x0000000080000000 64)))
optimized Halide 0:
  (int64_t (bv #x0000000080000000 64))
optimized x86 0:
  (int64_t (bv #x0000000080000000 64))
Ran synthesizer for 15 ms
(model)
(sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)
(broadcast ... (int64_t (bv #x0000000080000000 64)))
Ran bounds analysis for 19 ms
Ran bounds analysis for 12 ms
"Extended success?"
#t
(broadcast ... (int64_t (bv #x0000000080000000 64)))
"Building Expr:"
(vec-div
 (vec-mul
  (vec-cast
   (vec-mul
    (vec-cast
     (vec-add
      (vec-mul
       (vec-cast
        (load
         (buffer input1 'uint8)
         (ramp
          (sca-add
           (sca-mul output.s0.x.x 16)
           (sca-add
            (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
            (var-lookup 't72)))
          1
          16)
         (aligned 1 0))
        'int16
        16)
       (sca-broadcast (int16_t (bv #x0040 16)) 16))
      (sca-broadcast (sca-mul (int16_t t146) (int16_t (bv #xffc0 16))) 16))
     'int32
     16)
    (vec-cast
     (sca-broadcast
      (sca-mul
       (sca-sub (int16_t t147) (int16_t t148))
       (int16_t (bv #x0040 16)))
      16)
     'int32
     16))
   'int64
   16)
  (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
 (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16))
"Fold templates"
'()
here()

"Replace templates"
'()
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (vec-div
 (vec-mul
  (vec-cast
   (vec-mul
    (vec-cast
     (vec-add
      (vec-mul
       (vec-cast
        (load
         (buffer input1 'uint8)
         (ramp
          (sca-add
           (sca-mul output.s0.x.x 16)
           (sca-add
            (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
            (var-lookup 't72)))
          1
          16)
         (aligned 1 0))
        'int16
        16)
       (sca-broadcast (int16_t (bv #x0040 16)) 16))
      (sca-broadcast (sca-mul (int16_t t146) (int16_t (bv #xffc0 16))) 16))
     'int32
     16)
    (vec-cast
     (sca-broadcast
      (sca-mul
       (sca-sub (int16_t t147) (int16_t t148))
       (int16_t (bv #x0040 16)))
      16)
     'int32
     16))
   'int64
   16)
  (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
 (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16))
template:
  (vs-shift-right
 ...
 (vs-mpy-add
  ...
  (vs-mpy-add
   ...
   (vs-mpy-add
    ...
    (combine
     #<load-data>
     (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))))
    (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
    #f
    #f
    #f
    'int16)
   (list
    (sca-mul (sca-sub (int16_t t147) (int16_t t148)) (int16_t (bv #x0040 16))))
   #f
   #f
   #f
   'int32)
  (list (int32_t output_multiplier))
  #f
  #f
  #f
  'int64)
 (int64_t (bv #x000000000000001f 64))
 #f
 #f
 #t)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$1858 idx) (bv #x1fffffffc0000000 64)) (bvsle (bv #xe000000000000000 64) (app abstr-vals$1858 idx)))))
optimized-halide-expr:
  (vec-div
 #<abstr-halide-expr>
 (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16))
optimized-template:
  (vs-shift-right
 ...
 #<abstr-expr>
 (int64_t (bv #x000000000000001f 64))
 #f
 #f
 #t)
optimized Halide 0:
  (int64_t
 (bvadd (bvashr (app abstr-vals$1858 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$1858 0) (bvneg (bvashr (app abstr-vals$1858 0) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64))))
optimized x86 0:
  (int64_t (bvashr (app abstr-vals$1858 0) (bv #x000000000000001f 64)))
Ran synthesizer for 237 ms
(model)
(vec-div
 #<abstr-halide-expr>
 (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16))
(vs-shift-right
 ...
 (vs-mpy-add
  ...
  (vs-mpy-add
   ...
   (vs-mpy-add
    ...
    (combine
     #<load-data>
     (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))))
    (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
    #f
    #f
    #f
    'int16)
   (list
    (sca-mul (sca-sub (int16_t t147) (int16_t t148)) (int16_t (bv #x0040 16))))
   #f
   #f
   #f
   'int32)
  (list (int32_t output_multiplier))
  #f
  #f
  #f
  'int64)
 (int64_t (bv #x000000000000001f 64))
 #f
 #f
 #t)
Ran bounds analysis for 48 ms
Ran bounds analysis for 42 ms
"Extended success?"
#t
(vs-shift-right
 ...
 (vs-mpy-add
  ...
  (vs-mpy-add
   ...
   (vs-mpy-add
    ...
    (combine
     #<load-data>
     (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))))
    (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
    #f
    #f
    #f
    'int16)
   (list
    (sca-mul (sca-sub (int16_t t147) (int16_t t148)) (int16_t (bv #x0040 16))))
   #f
   #f
   #f
   'int32)
  (list (int32_t output_multiplier))
  #f
  #f
  #f
  'int64)
 (int64_t (bv #x000000000000001f 64))
 #f
 #f
 #t)
"Building Expr:"
(vec-add
 (vec-bwand
  (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
  (vec-div
   (vec-mul
    (vec-cast
     (vec-mul
      (vec-cast
       (vec-add
        (vec-mul
         (vec-cast
          (load
           (buffer input1 'uint8)
           (ramp
            (sca-add
             (sca-mul output.s0.x.x 16)
             (sca-add
              (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
              (var-lookup 't72)))
            1
            16)
           (aligned 1 0))
          'int16
          16)
         (sca-broadcast (int16_t (bv #x0040 16)) 16))
        (sca-broadcast (sca-mul (int16_t t146) (int16_t (bv #xffc0 16))) 16))
       'int32
       16)
      (vec-cast
       (sca-broadcast
        (sca-mul
         (sca-sub (int16_t t147) (int16_t t148))
         (int16_t (bv #x0040 16)))
        16)
       'int32
       16))
     'int64
     16)
    (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
   (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
 (vec-div
  (vec-mul
   (vec-cast
    (vec-mul
     (vec-cast
      (vec-add
       (vec-mul
        (vec-cast
         (load
          (buffer input1 'uint8)
          (ramp
           (sca-add
            (sca-mul output.s0.x.x 16)
            (sca-add
             (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
             (var-lookup 't72)))
           1
           16)
          (aligned 1 0))
         'int16
         16)
        (sca-broadcast (int16_t (bv #x0040 16)) 16))
       (sca-broadcast (sca-mul (int16_t t146) (int16_t (bv #xffc0 16))) 16))
      'int32
      16)
     (vec-cast
      (sca-broadcast
       (sca-mul
        (sca-sub (int16_t t147) (int16_t t148))
        (int16_t (bv #x0040 16)))
       16)
      'int32
      16))
    'int64
    16)
   (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
  (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
"Fold templates"
(list
 (vs-mpy-add
  ...
  (vs-mpy-add
   ...
   (vs-mpy-add
    ...
    (combine
     #<load-data>
     (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))))
    (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
    #f
    #f
    #f
    'int16)
   (list
    (sca-mul (sca-sub (int16_t t147) (int16_t t148)) (int16_t (bv #x0040 16))))
   #f
   #f
   #f
   'int32)
  (list
   (int32_t output_multiplier)
   (union [xi?$1867 #(struct:sca-mul
                      #(struct:sca-sub
                        #(struct:int16_t t147)
                        #(struct:int16_t t148))
                      #(struct:int16_t (bv #x0040 16)))] [(&& xi?$1868 (! xi?$1867)) #(struct:int16_t
                                                                                       (bv #x0040 16))] [(&& (! xi?$1867) (&& xi?$1869 (! xi?$1868))) #(struct:int32_t
                                                                                                                                                        output_multiplier)] [(&& (! xi?$1867) (&& (! xi?$1868) (! xi?$1869))) #(struct:int8_t
                                                                                                                                                                                                                                (bv #x01 8))]))
  #f
  #f
  #f
  'int64)
 (vs-mpy-add
  ...
  (vs-mpy-add
   ...
   (vs-mpy-add
    ...
    (combine
     #<load-data>
     (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))))
    (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
    #f
    #f
    #f
    'int16)
   (list
    (sca-mul (sca-sub (int16_t t147) (int16_t t148)) (int16_t (bv #x0040 16))))
   #f
   #f
   #f
   'int32)
  (list (int32_t output_multiplier))
  #f
  x?$1865
  #f
  'int64)
 (vs-mpy-add
  ...
  (combine
   (vs-mpy-add
    ...
    (vs-mpy-add
     ...
     (vs-mpy-add
      ...
      (combine
       #<load-data>
       (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))))
      (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
      #f
      #f
      #f
      'int16)
     (list
      (sca-mul
       (sca-sub (int16_t t147) (int16_t t148))
       (int16_t (bv #x0040 16))))
     #f
     #f
     #f
     'int32)
    (list (int32_t output_multiplier))
    #f
    #f
    #f
    'int64)
   (union [x?$1870 #(struct:bitwise-op
                     ...
                     and
                     #(struct:broadcast
                       ...
                       #(struct:int64_t (bv #x0000000000000001 64)))
                     #(struct:vs-shift-right
                       ...
                       #(struct:vs-mpy-add
                         ...
                         #(struct:vs-mpy-add
                           ...
                           #(struct:vs-mpy-add
                             ...
                             #<combine:
                              #<load-data>
                              #(struct:broadcast
                                ...
                                #(struct:sca-mul
                                  #(struct:int16_t t146)
                                  #(struct:int16_t (bv #xffc0 16))))>
                             (#(struct:int8_t (bv #x01 8))
                              #(struct:int16_t (bv #x0040 16)))
                             #f
                             #f
                             #f
                             int16)
                           (#(struct:sca-mul
                              #(struct:sca-sub
                                #(struct:int16_t t147)
                                #(struct:int16_t t148))
                              #(struct:int16_t (bv #x0040 16))))
                           #f
                           #f
                           #f
                           int32)
                         (#(struct:int32_t output_multiplier))
                         #f
                         #f
                         #f
                         int64)
                       #(struct:int64_t (bv #x000000000000001e 64))
                       #f
                       #f
                       #t))] [(! x?$1870) #(struct:vs-shift-right
                                            ...
                                            #(struct:vs-mpy-add
                                              ...
                                              #(struct:vs-mpy-add
                                                ...
                                                #(struct:vs-mpy-add
                                                  ...
                                                  #<combine:
                                                   #<load-data>
                                                   #(struct:broadcast
                                                     ...
                                                     #(struct:sca-mul
                                                       #(struct:int16_t t146)
                                                       #(struct:int16_t
                                                         (bv #xffc0 16))))>
                                                  (#(struct:int8_t (bv #x01 8))
                                                   #(struct:int16_t
                                                     (bv #x0040 16)))
                                                  #f
                                                  #f
                                                  #f
                                                  int16)
                                                (#(struct:sca-mul
                                                   #(struct:sca-sub
                                                     #(struct:int16_t t147)
                                                     #(struct:int16_t t148))
                                                   #(struct:int16_t
                                                     (bv #x0040 16))))
                                                #f
                                                #f
                                                #f
                                                int32)
                                              (#(struct:int32_t
                                                 output_multiplier))
                                              #f
                                              #f
                                              #f
                                              int64)
                                            #(struct:int64_t
                                              (bv #x000000000000001f 64))
                                            #f
                                            #f
                                            #t)]))
  (list (int32_t output_multiplier) (int8_t (bv #x01 8)))
  #f
  #f
  #f
  'int64)
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (vs-mpy-add
    ...
    (vs-mpy-add
     ...
     (combine
      #<load-data>
      (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))))
     (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
     #f
     #f
     #f
     'int16)
    (list
     (sca-mul
      (sca-sub (int16_t t147) (int16_t t148))
      (int16_t (bv #x0040 16))))
    #f
    #f
    #f
    'int32)
   (list (int32_t output_multiplier))
   #f
   #f
   #f
   'int64)
  (int64_t (ite x?$1860 (bv #x000000000000001e 64) (bv #x000000000000001f 64)))
  #f
  #f
  #t)
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (vs-mpy-add
    ...
    (vs-mpy-add
     ...
     (combine
      #<load-data>
      (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))))
     (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
     #f
     #f
     #f
     'int16)
    (list
     (sca-mul
      (sca-sub (int16_t t147) (int16_t t148))
      (int16_t (bv #x0040 16))))
    #f
    #f
    #f
    'int32)
   (list (int32_t output_multiplier))
   #f
   #f
   #f
   'int64)
  (int64_t (bv #x000000000000001e 64))
  x?$1861
  x?$1862
  x?$1863)
 (vs-mpy-add
  ...
  (vs-mpy-add
   ...
   (combine
    #<load-data>
    (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))))
   (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
   #f
   #f
   #f
   'int16)
  (list
   (sca-mul (sca-sub (int16_t t147) (int16_t t148)) (int16_t (bv #x0040 16)))
   (union [xi?$2141 #(struct:sca-mul
                      #(struct:sca-sub
                        #(struct:int16_t t147)
                        #(struct:int16_t t148))
                      #(struct:int16_t (bv #x0040 16)))] [(&& xi?$2142 (! xi?$2141)) #(struct:int16_t
                                                                                       (bv #x0040 16))] [(&& (! xi?$2141) (&& xi?$2143 (! xi?$2142))) #(struct:int32_t
                                                                                                                                                        output_multiplier)] [(&& (! xi?$2141) (&& (! xi?$2142) (! xi?$2143))) #(struct:int8_t
                                                                                                                                                                                                                                (bv #x01 8))]))
  #f
  #f
  #f
  'int64)
 (vs-mpy-add
  ...
  (vs-mpy-add
   ...
   (combine
    #<load-data>
    (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))))
   (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
   #f
   #f
   #f
   'int16)
  (list
   (sca-mul (sca-sub (int16_t t147) (int16_t t148)) (int16_t (bv #x0040 16))))
  #f
  x?$2139
  #f
  'int64)
 (vs-mpy-add
  ...
  (combine
   (vs-mpy-add
    ...
    (vs-mpy-add
     ...
     (combine
      #<load-data>
      (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))))
     (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
     #f
     #f
     #f
     'int16)
    (list
     (sca-mul
      (sca-sub (int16_t t147) (int16_t t148))
      (int16_t (bv #x0040 16))))
    #f
    #f
    #f
    'int32)
   (union [x?$2144 #(struct:bitwise-op
                     ...
                     and
                     #(struct:broadcast
                       ...
                       #(struct:int64_t (bv #x0000000000000001 64)))
                     #(struct:vs-shift-right
                       ...
                       #(struct:vs-mpy-add
                         ...
                         #(struct:vs-mpy-add
                           ...
                           #(struct:vs-mpy-add
                             ...
                             #<combine:
                              #<load-data>
                              #(struct:broadcast
                                ...
                                #(struct:sca-mul
                                  #(struct:int16_t t146)
                                  #(struct:int16_t (bv #xffc0 16))))>
                             (#(struct:int8_t (bv #x01 8))
                              #(struct:int16_t (bv #x0040 16)))
                             #f
                             #f
                             #f
                             int16)
                           (#(struct:sca-mul
                              #(struct:sca-sub
                                #(struct:int16_t t147)
                                #(struct:int16_t t148))
                              #(struct:int16_t (bv #x0040 16))))
                           #f
                           #f
                           #f
                           int32)
                         (#(struct:int32_t output_multiplier))
                         #f
                         #f
                         #f
                         int64)
                       #(struct:int64_t (bv #x000000000000001e 64))
                       #f
                       #f
                       #t))] [(! x?$2144) #(struct:vs-shift-right
                                            ...
                                            #(struct:vs-mpy-add
                                              ...
                                              #(struct:vs-mpy-add
                                                ...
                                                #(struct:vs-mpy-add
                                                  ...
                                                  #<combine:
                                                   #<load-data>
                                                   #(struct:broadcast
                                                     ...
                                                     #(struct:sca-mul
                                                       #(struct:int16_t t146)
                                                       #(struct:int16_t
                                                         (bv #xffc0 16))))>
                                                  (#(struct:int8_t (bv #x01 8))
                                                   #(struct:int16_t
                                                     (bv #x0040 16)))
                                                  #f
                                                  #f
                                                  #f
                                                  int16)
                                                (#(struct:sca-mul
                                                   #(struct:sca-sub
                                                     #(struct:int16_t t147)
                                                     #(struct:int16_t t148))
                                                   #(struct:int16_t
                                                     (bv #x0040 16))))
                                                #f
                                                #f
                                                #f
                                                int32)
                                              (#(struct:int32_t
                                                 output_multiplier))
                                              #f
                                              #f
                                              #f
                                              int64)
                                            #(struct:int64_t
                                              (bv #x000000000000001f 64))
                                            #f
                                            #f
                                            #t)]))
  (list
   (sca-mul (sca-sub (int16_t t147) (int16_t t148)) (int16_t (bv #x0040 16)))
   (int8_t (bv #x01 8)))
  #f
  #f
  #f
  'int64)
 (vs-mpy-add
  ...
  (vs-mpy-add
   ...
   (vs-mpy-add
    ...
    (combine
     #<load-data>
     (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))))
    (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
    #f
    #f
    #f
    'int16)
   (list
    (sca-mul (sca-sub (int16_t t147) (int16_t t148)) (int16_t (bv #x0040 16))))
   #f
   #f
   #f
   'int32)
  (list
   (int32_t output_multiplier)
   (union [xi?$2006 #(struct:sca-mul
                      #(struct:sca-sub
                        #(struct:int16_t t147)
                        #(struct:int16_t t148))
                      #(struct:int16_t (bv #x0040 16)))] [(&& xi?$2007 (! xi?$2006)) #(struct:int16_t
                                                                                       (bv #x0040 16))] [(&& (! xi?$2006) (&& xi?$2008 (! xi?$2007))) #(struct:int32_t
                                                                                                                                                        output_multiplier)] [(&& (! xi?$2006) (&& (! xi?$2007) (! xi?$2008))) #(struct:int8_t
                                                                                                                                                                                                                                (bv #x01 8))]))
  #f
  #f
  #f
  'int64)
 (vs-mpy-add
  ...
  (vs-mpy-add
   ...
   (vs-mpy-add
    ...
    (combine
     #<load-data>
     (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))))
    (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
    #f
    #f
    #f
    'int16)
   (list
    (sca-mul (sca-sub (int16_t t147) (int16_t t148)) (int16_t (bv #x0040 16))))
   #f
   #f
   #f
   'int32)
  (list (int32_t output_multiplier))
  #f
  x?$2004
  #f
  'int64)
 (vs-mpy-add
  ...
  (combine
   (vs-mpy-add
    ...
    (vs-mpy-add
     ...
     (vs-mpy-add
      ...
      (combine
       #<load-data>
       (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))))
      (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
      #f
      #f
      #f
      'int16)
     (list
      (sca-mul
       (sca-sub (int16_t t147) (int16_t t148))
       (int16_t (bv #x0040 16))))
     #f
     #f
     #f
     'int32)
    (list (int32_t output_multiplier))
    #f
    #f
    #f
    'int64)
   (union [x?$2009 #(struct:bitwise-op
                     ...
                     and
                     #(struct:broadcast
                       ...
                       #(struct:int64_t (bv #x0000000000000001 64)))
                     #(struct:vs-shift-right
                       ...
                       #(struct:vs-mpy-add
                         ...
                         #(struct:vs-mpy-add
                           ...
                           #(struct:vs-mpy-add
                             ...
                             #<combine:
                              #<load-data>
                              #(struct:broadcast
                                ...
                                #(struct:sca-mul
                                  #(struct:int16_t t146)
                                  #(struct:int16_t (bv #xffc0 16))))>
                             (#(struct:int8_t (bv #x01 8))
                              #(struct:int16_t (bv #x0040 16)))
                             #f
                             #f
                             #f
                             int16)
                           (#(struct:sca-mul
                              #(struct:sca-sub
                                #(struct:int16_t t147)
                                #(struct:int16_t t148))
                              #(struct:int16_t (bv #x0040 16))))
                           #f
                           #f
                           #f
                           int32)
                         (#(struct:int32_t output_multiplier))
                         #f
                         #f
                         #f
                         int64)
                       #(struct:int64_t (bv #x000000000000001e 64))
                       #f
                       #f
                       #t))] [(! x?$2009) #(struct:vs-shift-right
                                            ...
                                            #(struct:vs-mpy-add
                                              ...
                                              #(struct:vs-mpy-add
                                                ...
                                                #(struct:vs-mpy-add
                                                  ...
                                                  #<combine:
                                                   #<load-data>
                                                   #(struct:broadcast
                                                     ...
                                                     #(struct:sca-mul
                                                       #(struct:int16_t t146)
                                                       #(struct:int16_t
                                                         (bv #xffc0 16))))>
                                                  (#(struct:int8_t (bv #x01 8))
                                                   #(struct:int16_t
                                                     (bv #x0040 16)))
                                                  #f
                                                  #f
                                                  #f
                                                  int16)
                                                (#(struct:sca-mul
                                                   #(struct:sca-sub
                                                     #(struct:int16_t t147)
                                                     #(struct:int16_t t148))
                                                   #(struct:int16_t
                                                     (bv #x0040 16))))
                                                #f
                                                #f
                                                #f
                                                int32)
                                              (#(struct:int32_t
                                                 output_multiplier))
                                              #f
                                              #f
                                              #f
                                              int64)
                                            #(struct:int64_t
                                              (bv #x000000000000001f 64))
                                            #f
                                            #f
                                            #t)]))
  (list (int32_t output_multiplier) (int8_t (bv #x01 8)))
  #f
  #f
  #f
  'int64)
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (vs-mpy-add
    ...
    (vs-mpy-add
     ...
     (combine
      #<load-data>
      (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))))
     (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
     #f
     #f
     #f
     'int16)
    (list
     (sca-mul
      (sca-sub (int16_t t147) (int16_t t148))
      (int16_t (bv #x0040 16))))
    #f
    #f
    #f
    'int32)
   (list (int32_t output_multiplier))
   #f
   #f
   #f
   'int64)
  (int64_t (ite x?$1999 (bv #x000000000000001e 64) (bv #x000000000000001f 64)))
  #f
  #f
  #t)
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (vs-mpy-add
    ...
    (vs-mpy-add
     ...
     (combine
      #<load-data>
      (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))))
     (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
     #f
     #f
     #f
     'int16)
    (list
     (sca-mul
      (sca-sub (int16_t t147) (int16_t t148))
      (int16_t (bv #x0040 16))))
    #f
    #f
    #f
    'int32)
   (list (int32_t output_multiplier))
   #f
   #f
   #f
   'int64)
  (int64_t (bv #x000000000000001f 64))
  x?$2000
  x?$2001
  x?$2002))
here(#(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t146) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f #f #f int16) (#(struct:sca-mul #(struct:sca-sub #(struct:int16_t t147) #(struct:int16_t t148)) #(struct:int16_t (bv #x0040 16)))) #f #f #f int32) (#(struct:int32_t output_multiplier) (union #:size 4 #:hash -872771095899220053)) #f #f #f int64) #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t146) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f #f #f int16) (#(struct:sca-mul #(struct:sca-sub #(struct:int16_t t147) #(struct:int16_t t148)) #(struct:int16_t (bv #x0040 16)))) #f #f #f int32) (#(struct:int32_t output_multiplier)) #f x?$1865 #f int64) #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t146) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f #f #f int16) (#(struct:sca-mul #(struct:sca-sub #(struct:int16_t t147) #(struct:int16_t t148)) #(struct:int16_t (bv #x0040 16)))) #f #f #f int32) (#(struct:int32_t output_multiplier)) #f #f #f int64) (union #:size 2 #:hash 418955507145)> (#(struct:int32_t output_multiplier) #(struct:int8_t (bv #x01 8))) #f #f #f int64) #(struct:vs-shift-right ... #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t146) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f #f #f int16) (#(struct:sca-mul #(struct:sca-sub #(struct:int16_t t147) #(struct:int16_t t148)) #(struct:int16_t (bv #x0040 16)))) #f #f #f int32) (#(struct:int32_t output_multiplier)) #f #f #f int64) #(struct:int64_t (ite x?$1860 (bv #x000000000000001e 64) (bv #x000000000000001f 64))) #f #f #t) #(struct:vs-shift-right ... #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t146) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f #f #f int16) (#(struct:sca-mul #(struct:sca-sub #(struct:int16_t t147) #(struct:int16_t t148)) #(struct:int16_t (bv #x0040 16)))) #f #f #f int32) (#(struct:int32_t output_multiplier)) #f #f #f int64) #(struct:int64_t (bv #x000000000000001e 64)) x?$1861 x?$1862 x?$1863) #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t146) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f #f #f int16) (#(struct:sca-mul #(struct:sca-sub #(struct:int16_t t147) #(struct:int16_t t148)) #(struct:int16_t (bv #x0040 16))) (union #:size 4 #:hash -872776096073292168)) #f #f #f int64) #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t146) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f #f #f int16) (#(struct:sca-mul #(struct:sca-sub #(struct:int16_t t147) #(struct:int16_t t148)) #(struct:int16_t (bv #x0040 16)))) #f x?$2139 #f int64) #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t146) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f #f #f int16) (#(struct:sca-mul #(struct:sca-sub #(struct:int16_t t147) #(struct:int16_t t148)) #(struct:int16_t (bv #x0040 16)))) #f #f #f int32) (union #:size 2 #:hash 406029428388)> (#(struct:sca-mul #(struct:sca-sub #(struct:int16_t t147) #(struct:int16_t t148)) #(struct:int16_t (bv #x0040 16))) #(struct:int8_t (bv #x01 8))) #f #f #f int64) #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t146) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f #f #f int16) (#(struct:sca-mul #(struct:sca-sub #(struct:int16_t t147) #(struct:int16_t t148)) #(struct:int16_t (bv #x0040 16)))) #f #f #f int32) (#(struct:int32_t output_multiplier) (union #:size 4 #:hash -873488346476500697)) #f #f #f int64) #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t146) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f #f #f int16) (#(struct:sca-mul #(struct:sca-sub #(struct:int16_t t147) #(struct:int16_t t148)) #(struct:int16_t (bv #x0040 16)))) #f #f #f int32) (#(struct:int32_t output_multiplier)) #f x?$2004 #f int64) #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t146) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f #f #f int16) (#(struct:sca-mul #(struct:sca-sub #(struct:int16_t t147) #(struct:int16_t t148)) #(struct:int16_t (bv #x0040 16)))) #f #f #f int32) (#(struct:int32_t output_multiplier)) #f #f #f int64) (union #:size 2 #:hash 405981715242)> (#(struct:int32_t output_multiplier) #(struct:int8_t (bv #x01 8))) #f #f #f int64) #(struct:vs-shift-right ... #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t146) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f #f #f int16) (#(struct:sca-mul #(struct:sca-sub #(struct:int16_t t147) #(struct:int16_t t148)) #(struct:int16_t (bv #x0040 16)))) #f #f #f int32) (#(struct:int32_t output_multiplier)) #f #f #f int64) #(struct:int64_t (ite x?$1999 (bv #x000000000000001e 64) (bv #x000000000000001f 64))) #f #f #t) #(struct:vs-shift-right ... #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t146) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f #f #f int16) (#(struct:sca-mul #(struct:sca-sub #(struct:int16_t t147) #(struct:int16_t t148)) #(struct:int16_t (bv #x0040 16)))) #f #f #f int32) (#(struct:int32_t output_multiplier)) #f #f #f int64) #(struct:int64_t (bv #x000000000000001f 64)) x?$2000 x?$2001 x?$2002))

"Replace templates"
'()
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-bwand
  (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
  (vec-div
   (vec-mul
    (vec-cast
     (vec-mul
      (vec-cast
       (vec-add
        (vec-mul
         (vec-cast
          (load
           (buffer input1 'uint8)
           (ramp
            (sca-add
             (sca-mul output.s0.x.x 16)
             (sca-add
              (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
              (var-lookup 't72)))
            1
            16)
           (aligned 1 0))
          'int16
          16)
         (sca-broadcast (int16_t (bv #x0040 16)) 16))
        (sca-broadcast (sca-mul (int16_t t146) (int16_t (bv #xffc0 16))) 16))
       'int32
       16)
      (vec-cast
       (sca-broadcast
        (sca-mul
         (sca-sub (int16_t t147) (int16_t t148))
         (int16_t (bv #x0040 16)))
        16)
       'int32
       16))
     'int64
     16)
    (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
   (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
 (vec-div
  (vec-mul
   (vec-cast
    (vec-mul
     (vec-cast
      (vec-add
       (vec-mul
        (vec-cast
         (load
          (buffer input1 'uint8)
          (ramp
           (sca-add
            (sca-mul output.s0.x.x 16)
            (sca-add
             (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
             (var-lookup 't72)))
           1
           16)
          (aligned 1 0))
         'int16
         16)
        (sca-broadcast (int16_t (bv #x0040 16)) 16))
       (sca-broadcast (sca-mul (int16_t t146) (int16_t (bv #xffc0 16))) 16))
      'int32
      16)
     (vec-cast
      (sca-broadcast
       (sca-mul
        (sca-sub (int16_t t147) (int16_t t148))
        (int16_t (bv #x0040 16)))
       16)
      'int32
      16))
    'int64
    16)
   (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
  (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
template:
  (vs-mpy-add
 ...
 (vs-mpy-add
  ...
  (combine
   #<load-data>
   (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))))
  (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
  #f
  #f
  #f
  'int16)
 (list
  (sca-mul (sca-sub (int16_t t147) (int16_t t148)) (int16_t (bv #x0040 16)))
  (union [xi?$2141 #(struct:sca-mul
                     #(struct:sca-sub
                       #(struct:int16_t t147)
                       #(struct:int16_t t148))
                     #(struct:int16_t (bv #x0040 16)))] [(&& xi?$2142 (! xi?$2141)) #(struct:int16_t
                                                                                      (bv #x0040 16))] [(&& (! xi?$2141) (&& xi?$2143 (! xi?$2142))) #(struct:int32_t
                                                                                                                                                       output_multiplier)] [(&& (! xi?$2141) (&& (! xi?$2142) (! xi?$2143))) #(struct:int8_t
                                                                                                                                                                                                                               (bv #x01 8))]))
 #f
 #f
 #f
 'int64)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-add
 (vec-bwand
  (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
  (vec-div
   (vec-mul
    (vec-cast
     (vec-mul
      (vec-cast #<abstr-halide-expr> 'int32 16)
      (vec-cast
       (sca-broadcast
        (sca-mul
         (sca-sub (int16_t t147) (int16_t t148))
         (int16_t (bv #x0040 16)))
        16)
       'int32
       16))
     'int64
     16)
    (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
   (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
 (vec-div
  (vec-mul
   (vec-cast
    (vec-mul
     (vec-cast #<abstr-halide-expr> 'int32 16)
     (vec-cast
      (sca-broadcast
       (sca-mul
        (sca-sub (int16_t t147) (int16_t t148))
        (int16_t (bv #x0040 16)))
       16)
      'int32
      16))
    'int64
    16)
   (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
  (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
optimized-template:
  (vs-mpy-add
 ...
 #<abstr-expr>
 (list
  (sca-mul (sca-sub (int16_t t147) (int16_t t148)) (int16_t (bv #x0040 16)))
  (union [xi?$2141 #(struct:sca-mul
                     #(struct:sca-sub
                       #(struct:int16_t t147)
                       #(struct:int16_t t148))
                     #(struct:int16_t (bv #x0040 16)))] [(&& xi?$2142 (! xi?$2141)) #(struct:int16_t
                                                                                      (bv #x0040 16))] [(&& (! xi?$2141) (&& xi?$2143 (! xi?$2142))) #(struct:int32_t
                                                                                                                                                       output_multiplier)] [(&& (! xi?$2141) (&& (! xi?$2142) (! xi?$2143))) #(struct:int8_t
                                                                                                                                                                                                                               (bv #x01 8))]))
 #f
 #f
 #f
 'int64)
optimized Halide 0:
  (int64_t
 (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32)) (sign-extend (app abstr-vals$2273 0) (bitvector 32))) (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32)) (sign-extend (app abstr-vals$2273 0) (bitvector 32))) (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32)) (sign-extend (app abstr-vals$2273 0) (bitvector 32))) (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32)) (sign-extend (app abstr-vals$2273 0) (bitvector 32))) (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32)) (sign-extend (app abstr-vals$2273 0) (bitvector 32))) (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32)) (sign-extend (app abstr-vals$2273 0) (bitvector 32))) (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))))
optimized x86 0:
  (int64_t
 (bvadd (bvmul (sign-extend (app abstr-vals$2273 0) (bitvector 64)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 64))) (bvmul (sign-extend (app abstr-vals$2273 1) (bitvector 64)) (ite* (⊢ (&& (! xi?$2141) (&& xi?$2143 (! xi?$2142))) (sign-extend output_multiplier (bitvector 64))) (⊢ (&& (! xi?$2141) (&& (! xi?$2142) (! xi?$2143))) (bv #x0000000000000001 64)) (⊢ (|| xi?$2141 (&& xi?$2142 (! xi?$2141))) (sign-extend (ite* (⊢ xi?$2141 (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148)))) (⊢ (&& xi?$2142 (! xi?$2141)) (bv #x0040 16))) (bitvector 64)))))))
Ran synthesizer for 3333 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-bwand
  (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
  (vec-div
   (vec-mul
    (vec-cast
     (vec-mul
      (vec-cast
       (vec-add
        (vec-mul
         (vec-cast
          (load
           (buffer input1 'uint8)
           (ramp
            (sca-add
             (sca-mul output.s0.x.x 16)
             (sca-add
              (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
              (var-lookup 't72)))
            1
            16)
           (aligned 1 0))
          'int16
          16)
         (sca-broadcast (int16_t (bv #x0040 16)) 16))
        (sca-broadcast (sca-mul (int16_t t146) (int16_t (bv #xffc0 16))) 16))
       'int32
       16)
      (vec-cast
       (sca-broadcast
        (sca-mul
         (sca-sub (int16_t t147) (int16_t t148))
         (int16_t (bv #x0040 16)))
        16)
       'int32
       16))
     'int64
     16)
    (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
   (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
 (vec-div
  (vec-mul
   (vec-cast
    (vec-mul
     (vec-cast
      (vec-add
       (vec-mul
        (vec-cast
         (load
          (buffer input1 'uint8)
          (ramp
           (sca-add
            (sca-mul output.s0.x.x 16)
            (sca-add
             (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
             (var-lookup 't72)))
           1
           16)
          (aligned 1 0))
         'int16
         16)
        (sca-broadcast (int16_t (bv #x0040 16)) 16))
       (sca-broadcast (sca-mul (int16_t t146) (int16_t (bv #xffc0 16))) 16))
      'int32
      16)
     (vec-cast
      (sca-broadcast
       (sca-mul
        (sca-sub (int16_t t147) (int16_t t148))
        (int16_t (bv #x0040 16)))
       16)
      'int32
      16))
    'int64
    16)
   (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
  (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
template:
  (vs-mpy-add
 ...
 (vs-mpy-add
  ...
  (combine
   #<load-data>
   (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))))
  (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
  #f
  #f
  #f
  'int16)
 (list
  (sca-mul (sca-sub (int16_t t147) (int16_t t148)) (int16_t (bv #x0040 16))))
 #f
 x?$2139
 #f
 'int64)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-add
 (vec-bwand
  (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
  (vec-div
   (vec-mul
    (vec-cast
     (vec-mul
      (vec-cast #<abstr-halide-expr> 'int32 16)
      (vec-cast
       (sca-broadcast
        (sca-mul
         (sca-sub (int16_t t147) (int16_t t148))
         (int16_t (bv #x0040 16)))
        16)
       'int32
       16))
     'int64
     16)
    (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
   (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
 (vec-div
  (vec-mul
   (vec-cast
    (vec-mul
     (vec-cast #<abstr-halide-expr> 'int32 16)
     (vec-cast
      (sca-broadcast
       (sca-mul
        (sca-sub (int16_t t147) (int16_t t148))
        (int16_t (bv #x0040 16)))
       16)
      'int32
      16))
    'int64
    16)
   (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
  (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
optimized-template:
  (vs-mpy-add
 ...
 #<abstr-expr>
 (list
  (sca-mul (sca-sub (int16_t t147) (int16_t t148)) (int16_t (bv #x0040 16))))
 #f
 x?$2139
 #f
 'int64)
optimized Halide 0:
  (int64_t
 (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32)) (sign-extend (app abstr-vals$2274 0) (bitvector 32))) (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32)) (sign-extend (app abstr-vals$2274 0) (bitvector 32))) (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32)) (sign-extend (app abstr-vals$2274 0) (bitvector 32))) (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32)) (sign-extend (app abstr-vals$2274 0) (bitvector 32))) (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32)) (sign-extend (app abstr-vals$2274 0) (bitvector 32))) (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32)) (sign-extend (app abstr-vals$2274 0) (bitvector 32))) (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))))
optimized x86 0:
  (int64_t
 (bvadd (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 64)) (sign-extend (app abstr-vals$2274 0) (bitvector 64))) (ite x?$2139 (bv #x0000000000000001 64) (bv #x0000000000000000 64))))
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-bwand
  (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
  (vec-div
   (vec-mul
    (vec-cast
     (vec-mul
      (vec-cast
       (vec-add
        (vec-mul
         (vec-cast
          (load
           (buffer input1 'uint8)
           (ramp
            (sca-add
             (sca-mul output.s0.x.x 16)
             (sca-add
              (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
              (var-lookup 't72)))
            1
            16)
           (aligned 1 0))
          'int16
          16)
         (sca-broadcast (int16_t (bv #x0040 16)) 16))
        (sca-broadcast (sca-mul (int16_t t146) (int16_t (bv #xffc0 16))) 16))
       'int32
       16)
      (vec-cast
       (sca-broadcast
        (sca-mul
         (sca-sub (int16_t t147) (int16_t t148))
         (int16_t (bv #x0040 16)))
        16)
       'int32
       16))
     'int64
     16)
    (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
   (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
 (vec-div
  (vec-mul
   (vec-cast
    (vec-mul
     (vec-cast
      (vec-add
       (vec-mul
        (vec-cast
         (load
          (buffer input1 'uint8)
          (ramp
           (sca-add
            (sca-mul output.s0.x.x 16)
            (sca-add
             (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
             (var-lookup 't72)))
           1
           16)
          (aligned 1 0))
         'int16
         16)
        (sca-broadcast (int16_t (bv #x0040 16)) 16))
       (sca-broadcast (sca-mul (int16_t t146) (int16_t (bv #xffc0 16))) 16))
      'int32
      16)
     (vec-cast
      (sca-broadcast
       (sca-mul
        (sca-sub (int16_t t147) (int16_t t148))
        (int16_t (bv #x0040 16)))
       16)
      'int32
      16))
    'int64
    16)
   (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
  (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
template:
  (vs-mpy-add
 ...
 (vs-mpy-add
  ...
  (vs-mpy-add
   ...
   (combine
    #<load-data>
    (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))))
   (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
   #f
   #f
   #f
   'int16)
  (list
   (sca-mul (sca-sub (int16_t t147) (int16_t t148)) (int16_t (bv #x0040 16))))
  #f
  #f
  #f
  'int32)
 (list
  (int32_t output_multiplier)
  (union [xi?$1867 #(struct:sca-mul
                     #(struct:sca-sub
                       #(struct:int16_t t147)
                       #(struct:int16_t t148))
                     #(struct:int16_t (bv #x0040 16)))] [(&& xi?$1868 (! xi?$1867)) #(struct:int16_t
                                                                                      (bv #x0040 16))] [(&& (! xi?$1867) (&& xi?$1869 (! xi?$1868))) #(struct:int32_t
                                                                                                                                                       output_multiplier)] [(&& (! xi?$1867) (&& (! xi?$1868) (! xi?$1869))) #(struct:int8_t
                                                                                                                                                                                                                               (bv #x01 8))]))
 #f
 #f
 #f
 'int64)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$2275 idx) (bv #x40000000 32)) (bvsle (bv #xc0008000 32) (app abstr-vals$2275 idx)))))
optimized-halide-expr:
  (vec-add
 (vec-bwand
  (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
  (vec-div
   (vec-mul
    (vec-cast #<abstr-halide-expr> 'int64 16)
    (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
   (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
 (vec-div
  (vec-mul
   (vec-cast #<abstr-halide-expr> 'int64 16)
   (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
  (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
optimized-template:
  (vs-mpy-add
 ...
 #<abstr-expr>
 (list
  (int32_t output_multiplier)
  (union [xi?$1867 #(struct:sca-mul
                     #(struct:sca-sub
                       #(struct:int16_t t147)
                       #(struct:int16_t t148))
                     #(struct:int16_t (bv #x0040 16)))] [(&& xi?$1868 (! xi?$1867)) #(struct:int16_t
                                                                                      (bv #x0040 16))] [(&& (! xi?$1867) (&& xi?$1869 (! xi?$1868))) #(struct:int32_t
                                                                                                                                                       output_multiplier)] [(&& (! xi?$1867) (&& (! xi?$1868) (! xi?$1869))) #(struct:int8_t
                                                                                                                                                                                                                               (bv #x01 8))]))
 #f
 #f
 #f
 'int64)
optimized Halide 0:
  (int64_t
 (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (app abstr-vals$2275 0) (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (app abstr-vals$2275 0) (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (app abstr-vals$2275 0) (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (app abstr-vals$2275 0) (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (app abstr-vals$2275 0) (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (app abstr-vals$2275 0) (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))))
optimized x86 0:
  (int64_t
 (bvadd (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (app abstr-vals$2275 0) (bitvector 64))) (bvmul (sign-extend (app abstr-vals$2275 1) (bitvector 64)) (ite* (⊢ (&& (! xi?$1867) (&& xi?$1869 (! xi?$1868))) (sign-extend output_multiplier (bitvector 64))) (⊢ (&& (! xi?$1867) (&& (! xi?$1868) (! xi?$1869))) (bv #x0000000000000001 64)) (⊢ (|| xi?$1867 (&& xi?$1868 (! xi?$1867))) (sign-extend (ite* (⊢ xi?$1867 (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148)))) (⊢ (&& xi?$1868 (! xi?$1867)) (bv #x0040 16))) (bitvector 64)))))))
Ran synthesizer for 273507 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-bwand
  (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
  (vec-div
   (vec-mul
    (vec-cast
     (vec-mul
      (vec-cast
       (vec-add
        (vec-mul
         (vec-cast
          (load
           (buffer input1 'uint8)
           (ramp
            (sca-add
             (sca-mul output.s0.x.x 16)
             (sca-add
              (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
              (var-lookup 't72)))
            1
            16)
           (aligned 1 0))
          'int16
          16)
         (sca-broadcast (int16_t (bv #x0040 16)) 16))
        (sca-broadcast (sca-mul (int16_t t146) (int16_t (bv #xffc0 16))) 16))
       'int32
       16)
      (vec-cast
       (sca-broadcast
        (sca-mul
         (sca-sub (int16_t t147) (int16_t t148))
         (int16_t (bv #x0040 16)))
        16)
       'int32
       16))
     'int64
     16)
    (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
   (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
 (vec-div
  (vec-mul
   (vec-cast
    (vec-mul
     (vec-cast
      (vec-add
       (vec-mul
        (vec-cast
         (load
          (buffer input1 'uint8)
          (ramp
           (sca-add
            (sca-mul output.s0.x.x 16)
            (sca-add
             (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
             (var-lookup 't72)))
           1
           16)
          (aligned 1 0))
         'int16
         16)
        (sca-broadcast (int16_t (bv #x0040 16)) 16))
       (sca-broadcast (sca-mul (int16_t t146) (int16_t (bv #xffc0 16))) 16))
      'int32
      16)
     (vec-cast
      (sca-broadcast
       (sca-mul
        (sca-sub (int16_t t147) (int16_t t148))
        (int16_t (bv #x0040 16)))
       16)
      'int32
      16))
    'int64
    16)
   (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
  (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
template:
  (vs-mpy-add
 ...
 (vs-mpy-add
  ...
  (vs-mpy-add
   ...
   (combine
    #<load-data>
    (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))))
   (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
   #f
   #f
   #f
   'int16)
  (list
   (sca-mul (sca-sub (int16_t t147) (int16_t t148)) (int16_t (bv #x0040 16))))
  #f
  #f
  #f
  'int32)
 (list (int32_t output_multiplier))
 #f
 x?$1865
 #f
 'int64)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$2276 idx) (bv #x40000000 32)) (bvsle (bv #xc0008000 32) (app abstr-vals$2276 idx)))))
optimized-halide-expr:
  (vec-add
 (vec-bwand
  (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
  (vec-div
   (vec-mul
    (vec-cast #<abstr-halide-expr> 'int64 16)
    (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
   (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
 (vec-div
  (vec-mul
   (vec-cast #<abstr-halide-expr> 'int64 16)
   (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
  (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
optimized-template:
  (vs-mpy-add
 ...
 #<abstr-expr>
 (list (int32_t output_multiplier))
 #f
 x?$1865
 #f
 'int64)
optimized Halide 0:
  (int64_t
 (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (app abstr-vals$2276 0) (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (app abstr-vals$2276 0) (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (app abstr-vals$2276 0) (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (app abstr-vals$2276 0) (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (app abstr-vals$2276 0) (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (app abstr-vals$2276 0) (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))))
optimized x86 0:
  (int64_t
 (bvadd (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (app abstr-vals$2276 0) (bitvector 64))) (ite x?$1865 (bv #x0000000000000001 64) (bv #x0000000000000000 64))))
Ran synthesizer for 15772 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-bwand
  (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
  (vec-div
   (vec-mul
    (vec-cast
     (vec-mul
      (vec-cast
       (vec-add
        (vec-mul
         (vec-cast
          (load
           (buffer input1 'uint8)
           (ramp
            (sca-add
             (sca-mul output.s0.x.x 16)
             (sca-add
              (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
              (var-lookup 't72)))
            1
            16)
           (aligned 1 0))
          'int16
          16)
         (sca-broadcast (int16_t (bv #x0040 16)) 16))
        (sca-broadcast (sca-mul (int16_t t146) (int16_t (bv #xffc0 16))) 16))
       'int32
       16)
      (vec-cast
       (sca-broadcast
        (sca-mul
         (sca-sub (int16_t t147) (int16_t t148))
         (int16_t (bv #x0040 16)))
        16)
       'int32
       16))
     'int64
     16)
    (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
   (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
 (vec-div
  (vec-mul
   (vec-cast
    (vec-mul
     (vec-cast
      (vec-add
       (vec-mul
        (vec-cast
         (load
          (buffer input1 'uint8)
          (ramp
           (sca-add
            (sca-mul output.s0.x.x 16)
            (sca-add
             (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
             (var-lookup 't72)))
           1
           16)
          (aligned 1 0))
         'int16
         16)
        (sca-broadcast (int16_t (bv #x0040 16)) 16))
       (sca-broadcast (sca-mul (int16_t t146) (int16_t (bv #xffc0 16))) 16))
      'int32
      16)
     (vec-cast
      (sca-broadcast
       (sca-mul
        (sca-sub (int16_t t147) (int16_t t148))
        (int16_t (bv #x0040 16)))
       16)
      'int32
      16))
    'int64
    16)
   (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
  (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
template:
  (vs-mpy-add
 ...
 (vs-mpy-add
  ...
  (vs-mpy-add
   ...
   (combine
    #<load-data>
    (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))))
   (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
   #f
   #f
   #f
   'int16)
  (list
   (sca-mul (sca-sub (int16_t t147) (int16_t t148)) (int16_t (bv #x0040 16))))
  #f
  #f
  #f
  'int32)
 (list
  (int32_t output_multiplier)
  (union [xi?$2006 #(struct:sca-mul
                     #(struct:sca-sub
                       #(struct:int16_t t147)
                       #(struct:int16_t t148))
                     #(struct:int16_t (bv #x0040 16)))] [(&& xi?$2007 (! xi?$2006)) #(struct:int16_t
                                                                                      (bv #x0040 16))] [(&& (! xi?$2006) (&& xi?$2008 (! xi?$2007))) #(struct:int32_t
                                                                                                                                                       output_multiplier)] [(&& (! xi?$2006) (&& (! xi?$2007) (! xi?$2008))) #(struct:int8_t
                                                                                                                                                                                                                               (bv #x01 8))]))
 #f
 #f
 #f
 'int64)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$2277 idx) (bv #x40000000 32)) (bvsle (bv #xc0008000 32) (app abstr-vals$2277 idx)))))
optimized-halide-expr:
  (vec-add
 (vec-bwand
  (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
  (vec-div
   (vec-mul
    (vec-cast #<abstr-halide-expr> 'int64 16)
    (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
   (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
 (vec-div
  (vec-mul
   (vec-cast #<abstr-halide-expr> 'int64 16)
   (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
  (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
optimized-template:
  (vs-mpy-add
 ...
 #<abstr-expr>
 (list
  (int32_t output_multiplier)
  (union [xi?$2006 #(struct:sca-mul
                     #(struct:sca-sub
                       #(struct:int16_t t147)
                       #(struct:int16_t t148))
                     #(struct:int16_t (bv #x0040 16)))] [(&& xi?$2007 (! xi?$2006)) #(struct:int16_t
                                                                                      (bv #x0040 16))] [(&& (! xi?$2006) (&& xi?$2008 (! xi?$2007))) #(struct:int32_t
                                                                                                                                                       output_multiplier)] [(&& (! xi?$2006) (&& (! xi?$2007) (! xi?$2008))) #(struct:int8_t
                                                                                                                                                                                                                               (bv #x01 8))]))
 #f
 #f
 #f
 'int64)
optimized Halide 0:
  (int64_t
 (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (app abstr-vals$2277 0) (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (app abstr-vals$2277 0) (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (app abstr-vals$2277 0) (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (app abstr-vals$2277 0) (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (app abstr-vals$2277 0) (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (app abstr-vals$2277 0) (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))))
optimized x86 0:
  (int64_t
 (bvadd (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (app abstr-vals$2277 0) (bitvector 64))) (bvmul (sign-extend (app abstr-vals$2277 1) (bitvector 64)) (ite* (⊢ (&& (! xi?$2006) (&& xi?$2008 (! xi?$2007))) (sign-extend output_multiplier (bitvector 64))) (⊢ (&& (! xi?$2006) (&& (! xi?$2007) (! xi?$2008))) (bv #x0000000000000001 64)) (⊢ (|| xi?$2006 (&& xi?$2007 (! xi?$2006))) (sign-extend (ite* (⊢ xi?$2006 (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148)))) (⊢ (&& xi?$2007 (! xi?$2006)) (bv #x0040 16))) (bitvector 64)))))))
Ran synthesizer for 287513 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-bwand
  (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
  (vec-div
   (vec-mul
    (vec-cast
     (vec-mul
      (vec-cast
       (vec-add
        (vec-mul
         (vec-cast
          (load
           (buffer input1 'uint8)
           (ramp
            (sca-add
             (sca-mul output.s0.x.x 16)
             (sca-add
              (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
              (var-lookup 't72)))
            1
            16)
           (aligned 1 0))
          'int16
          16)
         (sca-broadcast (int16_t (bv #x0040 16)) 16))
        (sca-broadcast (sca-mul (int16_t t146) (int16_t (bv #xffc0 16))) 16))
       'int32
       16)
      (vec-cast
       (sca-broadcast
        (sca-mul
         (sca-sub (int16_t t147) (int16_t t148))
         (int16_t (bv #x0040 16)))
        16)
       'int32
       16))
     'int64
     16)
    (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
   (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
 (vec-div
  (vec-mul
   (vec-cast
    (vec-mul
     (vec-cast
      (vec-add
       (vec-mul
        (vec-cast
         (load
          (buffer input1 'uint8)
          (ramp
           (sca-add
            (sca-mul output.s0.x.x 16)
            (sca-add
             (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
             (var-lookup 't72)))
           1
           16)
          (aligned 1 0))
         'int16
         16)
        (sca-broadcast (int16_t (bv #x0040 16)) 16))
       (sca-broadcast (sca-mul (int16_t t146) (int16_t (bv #xffc0 16))) 16))
      'int32
      16)
     (vec-cast
      (sca-broadcast
       (sca-mul
        (sca-sub (int16_t t147) (int16_t t148))
        (int16_t (bv #x0040 16)))
       16)
      'int32
      16))
    'int64
    16)
   (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
  (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
template:
  (vs-mpy-add
 ...
 (vs-mpy-add
  ...
  (vs-mpy-add
   ...
   (combine
    #<load-data>
    (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))))
   (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
   #f
   #f
   #f
   'int16)
  (list
   (sca-mul (sca-sub (int16_t t147) (int16_t t148)) (int16_t (bv #x0040 16))))
  #f
  #f
  #f
  'int32)
 (list (int32_t output_multiplier))
 #f
 x?$2004
 #f
 'int64)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$2278 idx) (bv #x40000000 32)) (bvsle (bv #xc0008000 32) (app abstr-vals$2278 idx)))))
optimized-halide-expr:
  (vec-add
 (vec-bwand
  (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
  (vec-div
   (vec-mul
    (vec-cast #<abstr-halide-expr> 'int64 16)
    (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
   (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
 (vec-div
  (vec-mul
   (vec-cast #<abstr-halide-expr> 'int64 16)
   (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
  (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
optimized-template:
  (vs-mpy-add
 ...
 #<abstr-expr>
 (list (int32_t output_multiplier))
 #f
 x?$2004
 #f
 'int64)
optimized Halide 0:
  (int64_t
 (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (app abstr-vals$2278 0) (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (app abstr-vals$2278 0) (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (app abstr-vals$2278 0) (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (app abstr-vals$2278 0) (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (app abstr-vals$2278 0) (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (app abstr-vals$2278 0) (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))))
optimized x86 0:
  (int64_t
 (bvadd (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (app abstr-vals$2278 0) (bitvector 64))) (ite x?$2004 (bv #x0000000000000001 64) (bv #x0000000000000000 64))))
Ran synthesizer for 14570 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-bwand
  (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
  (vec-div
   (vec-mul
    (vec-cast
     (vec-mul
      (vec-cast
       (vec-add
        (vec-mul
         (vec-cast
          (load
           (buffer input1 'uint8)
           (ramp
            (sca-add
             (sca-mul output.s0.x.x 16)
             (sca-add
              (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
              (var-lookup 't72)))
            1
            16)
           (aligned 1 0))
          'int16
          16)
         (sca-broadcast (int16_t (bv #x0040 16)) 16))
        (sca-broadcast (sca-mul (int16_t t146) (int16_t (bv #xffc0 16))) 16))
       'int32
       16)
      (vec-cast
       (sca-broadcast
        (sca-mul
         (sca-sub (int16_t t147) (int16_t t148))
         (int16_t (bv #x0040 16)))
        16)
       'int32
       16))
     'int64
     16)
    (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
   (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
 (vec-div
  (vec-mul
   (vec-cast
    (vec-mul
     (vec-cast
      (vec-add
       (vec-mul
        (vec-cast
         (load
          (buffer input1 'uint8)
          (ramp
           (sca-add
            (sca-mul output.s0.x.x 16)
            (sca-add
             (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
             (var-lookup 't72)))
           1
           16)
          (aligned 1 0))
         'int16
         16)
        (sca-broadcast (int16_t (bv #x0040 16)) 16))
       (sca-broadcast (sca-mul (int16_t t146) (int16_t (bv #xffc0 16))) 16))
      'int32
      16)
     (vec-cast
      (sca-broadcast
       (sca-mul
        (sca-sub (int16_t t147) (int16_t t148))
        (int16_t (bv #x0040 16)))
       16)
      'int32
      16))
    'int64
    16)
   (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
  (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
template:
  (vs-shift-right
 ...
 (vs-mpy-add
  ...
  (vs-mpy-add
   ...
   (vs-mpy-add
    ...
    (combine
     #<load-data>
     (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))))
    (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
    #f
    #f
    #f
    'int16)
   (list
    (sca-mul (sca-sub (int16_t t147) (int16_t t148)) (int16_t (bv #x0040 16))))
   #f
   #f
   #f
   'int32)
  (list (int32_t output_multiplier))
  #f
  #f
  #f
  'int64)
 (int64_t (ite x?$1860 (bv #x000000000000001e 64) (bv #x000000000000001f 64)))
 #f
 #f
 #t)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$2279 idx) (bv #x1fffffffc0000000 64)) (bvsle (bv #xe000000000000000 64) (app abstr-vals$2279 idx)))))
optimized-halide-expr:
  (vec-add
 (vec-bwand
  (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
  (vec-div
   #<abstr-halide-expr>
   (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
 (vec-div
  #<abstr-halide-expr>
  (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
optimized-template:
  (vs-shift-right
 ...
 #<abstr-expr>
 (int64_t (ite x?$1860 (bv #x000000000000001e 64) (bv #x000000000000001f 64)))
 #f
 #f
 #t)
optimized Halide 0:
  (int64_t
 (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (app abstr-vals$2279 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$2279 0) (bvneg (bvashr (app abstr-vals$2279 0) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (app abstr-vals$2279 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$2279 0) (bvneg (bvashr (app abstr-vals$2279 0) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))))
optimized x86 0:
  (int64_t
 (bvashr (app abstr-vals$2279 0) (ite x?$1860 (bv #x000000000000001e 64) (bv #x000000000000001f 64))))
Ran synthesizer for 810 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-bwand
  (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
  (vec-div
   (vec-mul
    (vec-cast
     (vec-mul
      (vec-cast
       (vec-add
        (vec-mul
         (vec-cast
          (load
           (buffer input1 'uint8)
           (ramp
            (sca-add
             (sca-mul output.s0.x.x 16)
             (sca-add
              (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
              (var-lookup 't72)))
            1
            16)
           (aligned 1 0))
          'int16
          16)
         (sca-broadcast (int16_t (bv #x0040 16)) 16))
        (sca-broadcast (sca-mul (int16_t t146) (int16_t (bv #xffc0 16))) 16))
       'int32
       16)
      (vec-cast
       (sca-broadcast
        (sca-mul
         (sca-sub (int16_t t147) (int16_t t148))
         (int16_t (bv #x0040 16)))
        16)
       'int32
       16))
     'int64
     16)
    (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
   (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
 (vec-div
  (vec-mul
   (vec-cast
    (vec-mul
     (vec-cast
      (vec-add
       (vec-mul
        (vec-cast
         (load
          (buffer input1 'uint8)
          (ramp
           (sca-add
            (sca-mul output.s0.x.x 16)
            (sca-add
             (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
             (var-lookup 't72)))
           1
           16)
          (aligned 1 0))
         'int16
         16)
        (sca-broadcast (int16_t (bv #x0040 16)) 16))
       (sca-broadcast (sca-mul (int16_t t146) (int16_t (bv #xffc0 16))) 16))
      'int32
      16)
     (vec-cast
      (sca-broadcast
       (sca-mul
        (sca-sub (int16_t t147) (int16_t t148))
        (int16_t (bv #x0040 16)))
       16)
      'int32
      16))
    'int64
    16)
   (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
  (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
template:
  (vs-shift-right
 ...
 (vs-mpy-add
  ...
  (vs-mpy-add
   ...
   (vs-mpy-add
    ...
    (combine
     #<load-data>
     (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))))
    (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
    #f
    #f
    #f
    'int16)
   (list
    (sca-mul (sca-sub (int16_t t147) (int16_t t148)) (int16_t (bv #x0040 16))))
   #f
   #f
   #f
   'int32)
  (list (int32_t output_multiplier))
  #f
  #f
  #f
  'int64)
 (int64_t (bv #x000000000000001e 64))
 x?$1861
 x?$1862
 x?$1863)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$2280 idx) (bv #x1fffffffc0000000 64)) (bvsle (bv #xe000000000000000 64) (app abstr-vals$2280 idx)))))
optimized-halide-expr:
  (vec-add
 (vec-bwand
  (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
  (vec-div
   #<abstr-halide-expr>
   (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
 (vec-div
  #<abstr-halide-expr>
  (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
optimized-template:
  (vs-shift-right
 ...
 #<abstr-expr>
 (int64_t (bv #x000000000000001e 64))
 x?$1861
 x?$1862
 x?$1863)
optimized Halide 0:
  (int64_t
 (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (app abstr-vals$2280 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$2280 0) (bvneg (bvashr (app abstr-vals$2280 0) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (app abstr-vals$2280 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$2280 0) (bvneg (bvashr (app abstr-vals$2280 0) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))))
optimized x86 0:
  (int64_t
 (ite x?$1861 (bvadd (ite x?$1863 (bvashr (app abstr-vals$2280 0) (bv #x000000000000001e 64)) (bvlshr (app abstr-vals$2280 0) (bv #x000000000000001e 64))) (bvand (bv #x0000000000000001 64) (ite x?$1863 (bvashr (app abstr-vals$2280 0) (bv #x000000000000001d 64)) (bvlshr (app abstr-vals$2280 0) (bv #x000000000000001d 64))))) (ite x?$1863 (bvashr (app abstr-vals$2280 0) (bv #x000000000000001e 64)) (bvlshr (app abstr-vals$2280 0) (bv #x000000000000001e 64)))))
Ran synthesizer for 843 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-bwand
  (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
  (vec-div
   (vec-mul
    (vec-cast
     (vec-mul
      (vec-cast
       (vec-add
        (vec-mul
         (vec-cast
          (load
           (buffer input1 'uint8)
           (ramp
            (sca-add
             (sca-mul output.s0.x.x 16)
             (sca-add
              (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
              (var-lookup 't72)))
            1
            16)
           (aligned 1 0))
          'int16
          16)
         (sca-broadcast (int16_t (bv #x0040 16)) 16))
        (sca-broadcast (sca-mul (int16_t t146) (int16_t (bv #xffc0 16))) 16))
       'int32
       16)
      (vec-cast
       (sca-broadcast
        (sca-mul
         (sca-sub (int16_t t147) (int16_t t148))
         (int16_t (bv #x0040 16)))
        16)
       'int32
       16))
     'int64
     16)
    (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
   (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
 (vec-div
  (vec-mul
   (vec-cast
    (vec-mul
     (vec-cast
      (vec-add
       (vec-mul
        (vec-cast
         (load
          (buffer input1 'uint8)
          (ramp
           (sca-add
            (sca-mul output.s0.x.x 16)
            (sca-add
             (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
             (var-lookup 't72)))
           1
           16)
          (aligned 1 0))
         'int16
         16)
        (sca-broadcast (int16_t (bv #x0040 16)) 16))
       (sca-broadcast (sca-mul (int16_t t146) (int16_t (bv #xffc0 16))) 16))
      'int32
      16)
     (vec-cast
      (sca-broadcast
       (sca-mul
        (sca-sub (int16_t t147) (int16_t t148))
        (int16_t (bv #x0040 16)))
       16)
      'int32
      16))
    'int64
    16)
   (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
  (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
template:
  (vs-shift-right
 ...
 (vs-mpy-add
  ...
  (vs-mpy-add
   ...
   (vs-mpy-add
    ...
    (combine
     #<load-data>
     (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))))
    (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
    #f
    #f
    #f
    'int16)
   (list
    (sca-mul (sca-sub (int16_t t147) (int16_t t148)) (int16_t (bv #x0040 16))))
   #f
   #f
   #f
   'int32)
  (list (int32_t output_multiplier))
  #f
  #f
  #f
  'int64)
 (int64_t (ite x?$1999 (bv #x000000000000001e 64) (bv #x000000000000001f 64)))
 #f
 #f
 #t)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$2281 idx) (bv #x1fffffffc0000000 64)) (bvsle (bv #xe000000000000000 64) (app abstr-vals$2281 idx)))))
optimized-halide-expr:
  (vec-add
 (vec-bwand
  (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
  (vec-div
   #<abstr-halide-expr>
   (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
 (vec-div
  #<abstr-halide-expr>
  (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
optimized-template:
  (vs-shift-right
 ...
 #<abstr-expr>
 (int64_t (ite x?$1999 (bv #x000000000000001e 64) (bv #x000000000000001f 64)))
 #f
 #f
 #t)
optimized Halide 0:
  (int64_t
 (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (app abstr-vals$2281 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$2281 0) (bvneg (bvashr (app abstr-vals$2281 0) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (app abstr-vals$2281 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$2281 0) (bvneg (bvashr (app abstr-vals$2281 0) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))))
optimized x86 0:
  (int64_t
 (bvashr (app abstr-vals$2281 0) (ite x?$1999 (bv #x000000000000001e 64) (bv #x000000000000001f 64))))
Ran synthesizer for 857 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-bwand
  (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
  (vec-div
   (vec-mul
    (vec-cast
     (vec-mul
      (vec-cast
       (vec-add
        (vec-mul
         (vec-cast
          (load
           (buffer input1 'uint8)
           (ramp
            (sca-add
             (sca-mul output.s0.x.x 16)
             (sca-add
              (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
              (var-lookup 't72)))
            1
            16)
           (aligned 1 0))
          'int16
          16)
         (sca-broadcast (int16_t (bv #x0040 16)) 16))
        (sca-broadcast (sca-mul (int16_t t146) (int16_t (bv #xffc0 16))) 16))
       'int32
       16)
      (vec-cast
       (sca-broadcast
        (sca-mul
         (sca-sub (int16_t t147) (int16_t t148))
         (int16_t (bv #x0040 16)))
        16)
       'int32
       16))
     'int64
     16)
    (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
   (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
 (vec-div
  (vec-mul
   (vec-cast
    (vec-mul
     (vec-cast
      (vec-add
       (vec-mul
        (vec-cast
         (load
          (buffer input1 'uint8)
          (ramp
           (sca-add
            (sca-mul output.s0.x.x 16)
            (sca-add
             (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
             (var-lookup 't72)))
           1
           16)
          (aligned 1 0))
         'int16
         16)
        (sca-broadcast (int16_t (bv #x0040 16)) 16))
       (sca-broadcast (sca-mul (int16_t t146) (int16_t (bv #xffc0 16))) 16))
      'int32
      16)
     (vec-cast
      (sca-broadcast
       (sca-mul
        (sca-sub (int16_t t147) (int16_t t148))
        (int16_t (bv #x0040 16)))
       16)
      'int32
      16))
    'int64
    16)
   (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
  (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
template:
  (vs-shift-right
 ...
 (vs-mpy-add
  ...
  (vs-mpy-add
   ...
   (vs-mpy-add
    ...
    (combine
     #<load-data>
     (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))))
    (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
    #f
    #f
    #f
    'int16)
   (list
    (sca-mul (sca-sub (int16_t t147) (int16_t t148)) (int16_t (bv #x0040 16))))
   #f
   #f
   #f
   'int32)
  (list (int32_t output_multiplier))
  #f
  #f
  #f
  'int64)
 (int64_t (bv #x000000000000001f 64))
 x?$2000
 x?$2001
 x?$2002)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$2282 idx) (bv #x1fffffffc0000000 64)) (bvsle (bv #xe000000000000000 64) (app abstr-vals$2282 idx)))))
optimized-halide-expr:
  (vec-add
 (vec-bwand
  (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
  (vec-div
   #<abstr-halide-expr>
   (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
 (vec-div
  #<abstr-halide-expr>
  (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
optimized-template:
  (vs-shift-right
 ...
 #<abstr-expr>
 (int64_t (bv #x000000000000001f 64))
 x?$2000
 x?$2001
 x?$2002)
optimized Halide 0:
  (int64_t
 (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (app abstr-vals$2282 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$2282 0) (bvneg (bvashr (app abstr-vals$2282 0) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (app abstr-vals$2282 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$2282 0) (bvneg (bvashr (app abstr-vals$2282 0) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))))
optimized x86 0:
  (int64_t
 (ite x?$2000 (bvadd (ite x?$2002 (bvashr (app abstr-vals$2282 0) (bv #x000000000000001f 64)) (bvlshr (app abstr-vals$2282 0) (bv #x000000000000001f 64))) (bvand (bv #x0000000000000001 64) (ite x?$2002 (bvashr (app abstr-vals$2282 0) (bv #x000000000000001e 64)) (bvlshr (app abstr-vals$2282 0) (bv #x000000000000001e 64))))) (ite x?$2002 (bvashr (app abstr-vals$2282 0) (bv #x000000000000001f 64)) (bvlshr (app abstr-vals$2282 0) (bv #x000000000000001f 64)))))
Ran synthesizer for 817 ms
(model
 [x?$2000 #t]
 [x?$2002 #t])
(vec-add
 (vec-bwand
  (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
  (vec-div
   #<abstr-halide-expr>
   (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
 (vec-div
  #<abstr-halide-expr>
  (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
(vs-shift-right
 ...
 (vs-mpy-add
  ...
  (vs-mpy-add
   ...
   (vs-mpy-add
    ...
    (combine
     #<load-data>
     (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))))
    (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
    #f
    #f
    #f
    'int16)
   (list
    (sca-mul (sca-sub (int16_t t147) (int16_t t148)) (int16_t (bv #x0040 16))))
   #f
   #f
   #f
   'int32)
  (list (int32_t output_multiplier))
  #f
  #f
  #f
  'int64)
 (int64_t (bv #x000000000000001f 64))
 #t
 x?$2001
 #t)
Ran bounds analysis for 121 ms
Ran bounds analysis for 112 ms
"Success?"
#t
(vs-shift-right ... (vs-mpy-add ... (vs-mpy-add ... (vs-mpy-add ... (combine #<load-data> (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16))))) (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16))) #f #f #f 'int16) (list (sca-mul (sca-sub (int16_t t147) (int16_t t148)) (int16_t (bv #x0040 16)))) #f #f #f 'int32) (list (int32_t output_multiplier)) #f #f #f 'int64) (int64_t (bv #x000000000000001f 64)) #t x?$2001 #t)
"Building Expr:"
(sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16)
"Fold templates"
'()
here()

"Replace templates"
'()
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16)
template:
  (broadcast ... (int64_t (bv #x000000007fffffff 64)))
axioms:
  '()
optimized-halide-expr:
  (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16)
optimized-template:
  (broadcast ... (int64_t (bv #x000000007fffffff 64)))
optimized Halide 0:
  (int64_t (bv #x000000007fffffff 64))
optimized x86 0:
  (int64_t (bv #x000000007fffffff 64))
Ran synthesizer for 33 ms
(model)
(sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16)
(broadcast ... (int64_t (bv #x000000007fffffff 64)))
Ran bounds analysis for 38 ms
Ran bounds analysis for 28 ms
"Extended success?"
#t
(broadcast ... (int64_t (bv #x000000007fffffff 64)))
"Building Expr:"
(vec-min
 (vec-add
  (vec-bwand
   (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
   (vec-div
    (vec-mul
     (vec-cast
      (vec-mul
       (vec-cast
        (vec-add
         (vec-mul
          (vec-cast
           (load
            (buffer input1 'uint8)
            (ramp
             (sca-add
              (sca-mul output.s0.x.x 16)
              (sca-add
               (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
               (var-lookup 't72)))
             1
             16)
            (aligned 1 0))
           'int16
           16)
          (sca-broadcast (int16_t (bv #x0040 16)) 16))
         (sca-broadcast (sca-mul (int16_t t146) (int16_t (bv #xffc0 16))) 16))
        'int32
        16)
       (vec-cast
        (sca-broadcast
         (sca-mul
          (sca-sub (int16_t t147) (int16_t t148))
          (int16_t (bv #x0040 16)))
         16)
        'int32
        16))
      'int64
      16)
     (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
    (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
  (vec-div
   (vec-mul
    (vec-cast
     (vec-mul
      (vec-cast
       (vec-add
        (vec-mul
         (vec-cast
          (load
           (buffer input1 'uint8)
           (ramp
            (sca-add
             (sca-mul output.s0.x.x 16)
             (sca-add
              (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
              (var-lookup 't72)))
            1
            16)
           (aligned 1 0))
          'int16
          16)
         (sca-broadcast (int16_t (bv #x0040 16)) 16))
        (sca-broadcast (sca-mul (int16_t t146) (int16_t (bv #xffc0 16))) 16))
       'int32
       16)
      (vec-cast
       (sca-broadcast
        (sca-mul
         (sca-sub (int16_t t147) (int16_t t148))
         (int16_t (bv #x0040 16)))
        16)
       'int32
       16))
     'int64
     16)
    (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
   (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
 (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
"Fold templates"
(list
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (vs-mpy-add
    ...
    (vs-mpy-add
     ...
     (combine
      #<load-data>
      (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))))
     (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
     #f
     #f
     #f
     'int16)
    (list
     (sca-mul
      (sca-sub (int16_t t147) (int16_t t148))
      (int16_t (bv #x0040 16))))
    #f
    #f
    #f
    'int32)
   (list (int32_t output_multiplier))
   #f
   #f
   #f
   'int64)
  (int64_t (ite x?$2284 (bv #x000000000000001e 64) (bv #x000000000000001f 64)))
  #t
  x?$2001
  #t)
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (vs-mpy-add
    ...
    (vs-mpy-add
     ...
     (combine
      #<load-data>
      (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))))
     (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
     #f
     #f
     #f
     'int16)
    (list
     (sca-mul
      (sca-sub (int16_t t147) (int16_t t148))
      (int16_t (bv #x0040 16))))
    #f
    #f
    #f
    'int32)
   (list (int32_t output_multiplier))
   #f
   #f
   #f
   'int64)
  (int64_t (bv #x000000000000001f 64))
  x?$2285
  x?$2286
  x?$2287))
here(#(struct:vs-shift-right ... #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t146) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f #f #f int16) (#(struct:sca-mul #(struct:sca-sub #(struct:int16_t t147) #(struct:int16_t t148)) #(struct:int16_t (bv #x0040 16)))) #f #f #f int32) (#(struct:int32_t output_multiplier)) #f #f #f int64) #(struct:int64_t (ite x?$2284 (bv #x000000000000001e 64) (bv #x000000000000001f 64))) #t x?$2001 #t) #(struct:vs-shift-right ... #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t146) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f #f #f int16) (#(struct:sca-mul #(struct:sca-sub #(struct:int16_t t147) #(struct:int16_t t148)) #(struct:int16_t (bv #x0040 16)))) #f #f #f int32) (#(struct:int32_t output_multiplier)) #f #f #f int64) #(struct:int64_t (bv #x000000000000001f 64)) x?$2285 x?$2286 x?$2287))

"Replace templates"
'()
run-x86-synthesizer
halide-expr:
  (vec-min
 (vec-add
  (vec-bwand
   (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
   (vec-div
    (vec-mul
     (vec-cast
      (vec-mul
       (vec-cast
        (vec-add
         (vec-mul
          (vec-cast
           (load
            (buffer input1 'uint8)
            (ramp
             (sca-add
              (sca-mul output.s0.x.x 16)
              (sca-add
               (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
               (var-lookup 't72)))
             1
             16)
            (aligned 1 0))
           'int16
           16)
          (sca-broadcast (int16_t (bv #x0040 16)) 16))
         (sca-broadcast (sca-mul (int16_t t146) (int16_t (bv #xffc0 16))) 16))
        'int32
        16)
       (vec-cast
        (sca-broadcast
         (sca-mul
          (sca-sub (int16_t t147) (int16_t t148))
          (int16_t (bv #x0040 16)))
         16)
        'int32
        16))
      'int64
      16)
     (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
    (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
  (vec-div
   (vec-mul
    (vec-cast
     (vec-mul
      (vec-cast
       (vec-add
        (vec-mul
         (vec-cast
          (load
           (buffer input1 'uint8)
           (ramp
            (sca-add
             (sca-mul output.s0.x.x 16)
             (sca-add
              (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
              (var-lookup 't72)))
            1
            16)
           (aligned 1 0))
          'int16
          16)
         (sca-broadcast (int16_t (bv #x0040 16)) 16))
        (sca-broadcast (sca-mul (int16_t t146) (int16_t (bv #xffc0 16))) 16))
       'int32
       16)
      (vec-cast
       (sca-broadcast
        (sca-mul
         (sca-sub (int16_t t147) (int16_t t148))
         (int16_t (bv #x0040 16)))
        16)
       'int32
       16))
     'int64
     16)
    (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
   (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
 (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
template:
  (vs-shift-right
 ...
 (vs-mpy-add
  ...
  (vs-mpy-add
   ...
   (vs-mpy-add
    ...
    (combine
     #<load-data>
     (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))))
    (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
    #f
    #f
    #f
    'int16)
   (list
    (sca-mul (sca-sub (int16_t t147) (int16_t t148)) (int16_t (bv #x0040 16))))
   #f
   #f
   #f
   'int32)
  (list (int32_t output_multiplier))
  #f
  #f
  #f
  'int64)
 (int64_t (ite x?$2284 (bv #x000000000000001e 64) (bv #x000000000000001f 64)))
 #t
 x?$2001
 #t)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$2300 idx) (bv #x1fffffffc0000000 64)) (bvsle (bv #xe000000000000000 64) (app abstr-vals$2300 idx)))))
optimized-halide-expr:
  (vec-min
 (vec-add
  (vec-bwand
   (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
   (vec-div
    #<abstr-halide-expr>
    (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
  (vec-div
   #<abstr-halide-expr>
   (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
 (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
optimized-template:
  (vs-shift-right
 ...
 #<abstr-expr>
 (int64_t (ite x?$2284 (bv #x000000000000001e 64) (bv #x000000000000001f 64)))
 #t
 x?$2001
 #t)
optimized Halide 0:
  (int64_t
 (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (app abstr-vals$2300 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$2300 0) (bvneg (bvashr (app abstr-vals$2300 0) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (app abstr-vals$2300 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$2300 0) (bvneg (bvashr (app abstr-vals$2300 0) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (app abstr-vals$2300 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$2300 0) (bvneg (bvashr (app abstr-vals$2300 0) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (app abstr-vals$2300 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$2300 0) (bvneg (bvashr (app abstr-vals$2300 0) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)))
optimized x86 0:
  (int64_t
 (bvadd (bvashr (app abstr-vals$2300 0) (ite x?$2284 (bv #x000000000000001e 64) (bv #x000000000000001f 64))) (bvand (bv #x0000000000000001 64) (bvashr (app abstr-vals$2300 0) (ite x?$2284 (bv #x000000000000001d 64) (bv #x000000000000001e 64))))))
Ran synthesizer for 845 ms
(model
 [x?$2284 #f])
(vec-min
 (vec-add
  (vec-bwand
   (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
   (vec-div
    #<abstr-halide-expr>
    (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
  (vec-div
   #<abstr-halide-expr>
   (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
 (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
(vs-shift-right
 ...
 (vs-mpy-add
  ...
  (vs-mpy-add
   ...
   (vs-mpy-add
    ...
    (combine
     #<load-data>
     (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))))
    (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
    #f
    #f
    #f
    'int16)
   (list
    (sca-mul (sca-sub (int16_t t147) (int16_t t148)) (int16_t (bv #x0040 16))))
   #f
   #f
   #f
   'int32)
  (list (int32_t output_multiplier))
  #f
  #f
  #f
  'int64)
 (int64_t (bv #x000000000000001f 64))
 #t
 x?$2001
 #t)
Ran bounds analysis for 124 ms
Ran bounds analysis for 108 ms
"Success?"
#t
(vs-shift-right ... (vs-mpy-add ... (vs-mpy-add ... (vs-mpy-add ... (combine #<load-data> (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16))))) (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16))) #f #f #f 'int16) (list (sca-mul (sca-sub (int16_t t147) (int16_t t148)) (int16_t (bv #x0040 16)))) #f #f #f 'int32) (list (int32_t output_multiplier)) #f #f #f 'int64) (int64_t (bv #x000000000000001f 64)) #t x?$2001 #t)
"Building Expr:"
(sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16)
"Fold templates"
'()
here()

"Replace templates"
'()
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16)
template:
  (broadcast ... (int64_t (bv #xffffffff80000000 64)))
axioms:
  '()
optimized-halide-expr:
  (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16)
optimized-template:
  (broadcast ... (int64_t (bv #xffffffff80000000 64)))
optimized Halide 0:
  (int64_t (bv #xffffffff80000000 64))
optimized x86 0:
  (int64_t (bv #xffffffff80000000 64))
Ran synthesizer for 30 ms
(model)
(sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16)
(broadcast ... (int64_t (bv #xffffffff80000000 64)))
Ran bounds analysis for 38 ms
Ran bounds analysis for 25 ms
"Extended success?"
#t
(broadcast ... (int64_t (bv #xffffffff80000000 64)))
"Building Expr:"
(vec-max
 (vec-min
  (vec-add
   (vec-bwand
    (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
    (vec-div
     (vec-mul
      (vec-cast
       (vec-mul
        (vec-cast
         (vec-add
          (vec-mul
           (vec-cast
            (load
             (buffer input1 'uint8)
             (ramp
              (sca-add
               (sca-mul output.s0.x.x 16)
               (sca-add
                (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
                (var-lookup 't72)))
              1
              16)
             (aligned 1 0))
            'int16
            16)
           (sca-broadcast (int16_t (bv #x0040 16)) 16))
          (sca-broadcast (sca-mul (int16_t t146) (int16_t (bv #xffc0 16))) 16))
         'int32
         16)
        (vec-cast
         (sca-broadcast
          (sca-mul
           (sca-sub (int16_t t147) (int16_t t148))
           (int16_t (bv #x0040 16)))
          16)
         'int32
         16))
       'int64
       16)
      (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
     (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
   (vec-div
    (vec-mul
     (vec-cast
      (vec-mul
       (vec-cast
        (vec-add
         (vec-mul
          (vec-cast
           (load
            (buffer input1 'uint8)
            (ramp
             (sca-add
              (sca-mul output.s0.x.x 16)
              (sca-add
               (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
               (var-lookup 't72)))
             1
             16)
            (aligned 1 0))
           'int16
           16)
          (sca-broadcast (int16_t (bv #x0040 16)) 16))
         (sca-broadcast (sca-mul (int16_t t146) (int16_t (bv #xffc0 16))) 16))
        'int32
        16)
       (vec-cast
        (sca-broadcast
         (sca-mul
          (sca-sub (int16_t t147) (int16_t t148))
          (int16_t (bv #x0040 16)))
         16)
        'int32
        16))
      'int64
      16)
     (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
    (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
  (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
 (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
"Fold templates"
(list
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (vs-mpy-add
    ...
    (vs-mpy-add
     ...
     (combine
      #<load-data>
      (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))))
     (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
     #f
     #f
     #f
     'int16)
    (list
     (sca-mul
      (sca-sub (int16_t t147) (int16_t t148))
      (int16_t (bv #x0040 16))))
    #f
    #f
    #f
    'int32)
   (list (int32_t output_multiplier))
   #f
   #f
   #f
   'int64)
  (int64_t (ite x?$2302 (bv #x000000000000001e 64) (bv #x000000000000001f 64)))
  #t
  x?$2001
  #t)
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (vs-mpy-add
    ...
    (vs-mpy-add
     ...
     (combine
      #<load-data>
      (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))))
     (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
     #f
     #f
     #f
     'int16)
    (list
     (sca-mul
      (sca-sub (int16_t t147) (int16_t t148))
      (int16_t (bv #x0040 16))))
    #f
    #f
    #f
    'int32)
   (list (int32_t output_multiplier))
   #f
   #f
   #f
   'int64)
  (int64_t (bv #x000000000000001f 64))
  x?$2303
  x?$2304
  x?$2305))
here(#(struct:vs-shift-right ... #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t146) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f #f #f int16) (#(struct:sca-mul #(struct:sca-sub #(struct:int16_t t147) #(struct:int16_t t148)) #(struct:int16_t (bv #x0040 16)))) #f #f #f int32) (#(struct:int32_t output_multiplier)) #f #f #f int64) #(struct:int64_t (ite x?$2302 (bv #x000000000000001e 64) (bv #x000000000000001f 64))) #t x?$2001 #t) #(struct:vs-shift-right ... #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t146) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f #f #f int16) (#(struct:sca-mul #(struct:sca-sub #(struct:int16_t t147) #(struct:int16_t t148)) #(struct:int16_t (bv #x0040 16)))) #f #f #f int32) (#(struct:int32_t output_multiplier)) #f #f #f int64) #(struct:int64_t (bv #x000000000000001f 64)) x?$2303 x?$2304 x?$2305))

"Replace templates"
'()
run-x86-synthesizer
halide-expr:
  (vec-max
 (vec-min
  (vec-add
   (vec-bwand
    (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
    (vec-div
     (vec-mul
      (vec-cast
       (vec-mul
        (vec-cast
         (vec-add
          (vec-mul
           (vec-cast
            (load
             (buffer input1 'uint8)
             (ramp
              (sca-add
               (sca-mul output.s0.x.x 16)
               (sca-add
                (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
                (var-lookup 't72)))
              1
              16)
             (aligned 1 0))
            'int16
            16)
           (sca-broadcast (int16_t (bv #x0040 16)) 16))
          (sca-broadcast (sca-mul (int16_t t146) (int16_t (bv #xffc0 16))) 16))
         'int32
         16)
        (vec-cast
         (sca-broadcast
          (sca-mul
           (sca-sub (int16_t t147) (int16_t t148))
           (int16_t (bv #x0040 16)))
          16)
         'int32
         16))
       'int64
       16)
      (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
     (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
   (vec-div
    (vec-mul
     (vec-cast
      (vec-mul
       (vec-cast
        (vec-add
         (vec-mul
          (vec-cast
           (load
            (buffer input1 'uint8)
            (ramp
             (sca-add
              (sca-mul output.s0.x.x 16)
              (sca-add
               (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
               (var-lookup 't72)))
             1
             16)
            (aligned 1 0))
           'int16
           16)
          (sca-broadcast (int16_t (bv #x0040 16)) 16))
         (sca-broadcast (sca-mul (int16_t t146) (int16_t (bv #xffc0 16))) 16))
        'int32
        16)
       (vec-cast
        (sca-broadcast
         (sca-mul
          (sca-sub (int16_t t147) (int16_t t148))
          (int16_t (bv #x0040 16)))
         16)
        'int32
        16))
      'int64
      16)
     (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
    (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
  (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
 (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
template:
  (vs-shift-right
 ...
 (vs-mpy-add
  ...
  (vs-mpy-add
   ...
   (vs-mpy-add
    ...
    (combine
     #<load-data>
     (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))))
    (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
    #f
    #f
    #f
    'int16)
   (list
    (sca-mul (sca-sub (int16_t t147) (int16_t t148)) (int16_t (bv #x0040 16))))
   #f
   #f
   #f
   'int32)
  (list (int32_t output_multiplier))
  #f
  #f
  #f
  'int64)
 (int64_t (ite x?$2302 (bv #x000000000000001e 64) (bv #x000000000000001f 64)))
 #t
 x?$2001
 #t)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$2318 idx) (bv #x1fffffffc0000000 64)) (bvsle (bv #xe000000000000000 64) (app abstr-vals$2318 idx)))))
optimized-halide-expr:
  (vec-max
 (vec-min
  (vec-add
   (vec-bwand
    (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
    (vec-div
     #<abstr-halide-expr>
     (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
   (vec-div
    #<abstr-halide-expr>
    (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
  (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
 (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
optimized-template:
  (vs-shift-right
 ...
 #<abstr-expr>
 (int64_t (ite x?$2302 (bv #x000000000000001e 64) (bv #x000000000000001f 64)))
 #t
 x?$2001
 #t)
optimized Halide 0:
  (int64_t
 (ite (bvsle (bv #xffffffff80000000 64) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (app abstr-vals$2318 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$2318 0) (bvneg (bvashr (app abstr-vals$2318 0) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (app abstr-vals$2318 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$2318 0) (bvneg (bvashr (app abstr-vals$2318 0) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (app abstr-vals$2318 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$2318 0) (bvneg (bvashr (app abstr-vals$2318 0) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (app abstr-vals$2318 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$2318 0) (bvneg (bvashr (app abstr-vals$2318 0) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64))) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (app abstr-vals$2318 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$2318 0) (bvneg (bvashr (app abstr-vals$2318 0) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (app abstr-vals$2318 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$2318 0) (bvneg (bvashr (app abstr-vals$2318 0) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (app abstr-vals$2318 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$2318 0) (bvneg (bvashr (app abstr-vals$2318 0) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (app abstr-vals$2318 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$2318 0) (bvneg (bvashr (app abstr-vals$2318 0) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bv #xffffffff80000000 64)))
optimized x86 0:
  (int64_t
 (bvadd (bvashr (app abstr-vals$2318 0) (ite x?$2302 (bv #x000000000000001e 64) (bv #x000000000000001f 64))) (bvand (bv #x0000000000000001 64) (bvashr (app abstr-vals$2318 0) (ite x?$2302 (bv #x000000000000001d 64) (bv #x000000000000001e 64))))))
Ran synthesizer for 822 ms
(model
 [x?$2302 #f])
(vec-max
 (vec-min
  (vec-add
   (vec-bwand
    (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
    (vec-div
     #<abstr-halide-expr>
     (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
   (vec-div
    #<abstr-halide-expr>
    (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
  (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
 (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
(vs-shift-right
 ...
 (vs-mpy-add
  ...
  (vs-mpy-add
   ...
   (vs-mpy-add
    ...
    (combine
     #<load-data>
     (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))))
    (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
    #f
    #f
    #f
    'int16)
   (list
    (sca-mul (sca-sub (int16_t t147) (int16_t t148)) (int16_t (bv #x0040 16))))
   #f
   #f
   #f
   'int32)
  (list (int32_t output_multiplier))
  #f
  #f
  #f
  'int64)
 (int64_t (bv #x000000000000001f 64))
 #t
 x?$2001
 #t)
Ran bounds analysis for 117 ms
Ran bounds analysis for 106 ms
"Success?"
#t
(vs-shift-right ... (vs-mpy-add ... (vs-mpy-add ... (vs-mpy-add ... (combine #<load-data> (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16))))) (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16))) #f #f #f 'int16) (list (sca-mul (sca-sub (int16_t t147) (int16_t t148)) (int16_t (bv #x0040 16)))) #f #f #f 'int32) (list (int32_t output_multiplier)) #f #f #f 'int64) (int64_t (bv #x000000000000001f 64)) #t x?$2001 #t)
"Building Expr:"
(vec-cast
 (vec-max
  (vec-min
   (vec-add
    (vec-bwand
     (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
     (vec-div
      (vec-mul
       (vec-cast
        (vec-mul
         (vec-cast
          (vec-add
           (vec-mul
            (vec-cast
             (load
              (buffer input1 'uint8)
              (ramp
               (sca-add
                (sca-mul output.s0.x.x 16)
                (sca-add
                 (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
                 (var-lookup 't72)))
               1
               16)
              (aligned 1 0))
             'int16
             16)
            (sca-broadcast (int16_t (bv #x0040 16)) 16))
           (sca-broadcast
            (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))
            16))
          'int32
          16)
         (vec-cast
          (sca-broadcast
           (sca-mul
            (sca-sub (int16_t t147) (int16_t t148))
            (int16_t (bv #x0040 16)))
           16)
          'int32
          16))
        'int64
        16)
       (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
      (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
    (vec-div
     (vec-mul
      (vec-cast
       (vec-mul
        (vec-cast
         (vec-add
          (vec-mul
           (vec-cast
            (load
             (buffer input1 'uint8)
             (ramp
              (sca-add
               (sca-mul output.s0.x.x 16)
               (sca-add
                (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
                (var-lookup 't72)))
              1
              16)
             (aligned 1 0))
            'int16
            16)
           (sca-broadcast (int16_t (bv #x0040 16)) 16))
          (sca-broadcast (sca-mul (int16_t t146) (int16_t (bv #xffc0 16))) 16))
         'int32
         16)
        (vec-cast
         (sca-broadcast
          (sca-mul
           (sca-sub (int16_t t147) (int16_t t148))
           (int16_t (bv #x0040 16)))
          16)
         'int32
         16))
       'int64
       16)
      (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
     (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
   (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
  (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
 'int32
 16)
"Fold templates"
(list
 (vs-mpy-add
  ...
  (vs-mpy-add
   ...
   (combine
    #<load-data>
    (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))))
   (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
   #f
   #f
   #f
   'int16)
  (list
   (sca-mul (sca-sub (int16_t t147) (int16_t t148)) (int16_t (bv #x0040 16))))
  x?$2330
  x?$2331
  x?$2332
  'int32)
 (vs-mpy-add
  ...
  (vs-mpy-add
   ...
   (vs-mpy-add
    ...
    (combine
     #<load-data>
     (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))))
    (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
    #f
    #f
    #f
    'int16)
   (list
    (sca-mul (sca-sub (int16_t t147) (int16_t t148)) (int16_t (bv #x0040 16))))
   #f
   #f
   #f
   'int32)
  (list (int32_t output_multiplier))
  x?$2324
  x?$2325
  x?$2326
  'int64)
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (vs-mpy-add
    ...
    (vs-mpy-add
     ...
     (combine
      #<load-data>
      (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))))
     (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
     #f
     #f
     #f
     'int16)
    (list
     (sca-mul
      (sca-sub (int16_t t147) (int16_t t148))
      (int16_t (bv #x0040 16))))
    #f
    #f
    #f
    'int32)
   (list (int32_t output_multiplier))
   #f
   #f
   #f
   'int64)
  (int64_t (ite x?$2320 (bv #x000000000000001e 64) (bv #x000000000000001f 64)))
  #t
  x?$2001
  #t)
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (vs-mpy-add
    ...
    (vs-mpy-add
     ...
     (combine
      #<load-data>
      (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))))
     (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
     #f
     #f
     #f
     'int16)
    (list
     (sca-mul
      (sca-sub (int16_t t147) (int16_t t148))
      (int16_t (bv #x0040 16))))
    #f
    #f
    #f
    'int32)
   (list (int32_t output_multiplier))
   #f
   #f
   #f
   'int64)
  (int64_t (bv #x000000000000001f 64))
  x?$2321
  x?$2322
  x?$2323))
here(#(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t146) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f #f #f int16) (#(struct:sca-mul #(struct:sca-sub #(struct:int16_t t147) #(struct:int16_t t148)) #(struct:int16_t (bv #x0040 16)))) x?$2330 x?$2331 x?$2332 int32) #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t146) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f #f #f int16) (#(struct:sca-mul #(struct:sca-sub #(struct:int16_t t147) #(struct:int16_t t148)) #(struct:int16_t (bv #x0040 16)))) #f #f #f int32) (#(struct:int32_t output_multiplier)) x?$2324 x?$2325 x?$2326 int64) #(struct:vs-shift-right ... #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t146) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f #f #f int16) (#(struct:sca-mul #(struct:sca-sub #(struct:int16_t t147) #(struct:int16_t t148)) #(struct:int16_t (bv #x0040 16)))) #f #f #f int32) (#(struct:int32_t output_multiplier)) #f #f #f int64) #(struct:int64_t (ite x?$2320 (bv #x000000000000001e 64) (bv #x000000000000001f 64))) #t x?$2001 #t) #(struct:vs-shift-right ... #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t146) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f #f #f int16) (#(struct:sca-mul #(struct:sca-sub #(struct:int16_t t147) #(struct:int16_t t148)) #(struct:int16_t (bv #x0040 16)))) #f #f #f int32) (#(struct:int32_t output_multiplier)) #f #f #f int64) #(struct:int64_t (bv #x000000000000001f 64)) x?$2321 x?$2322 x?$2323))

"Replace templates"
'()
run-x86-synthesizer
halide-expr:
  (vec-cast
 (vec-max
  (vec-min
   (vec-add
    (vec-bwand
     (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
     (vec-div
      (vec-mul
       (vec-cast
        (vec-mul
         (vec-cast
          (vec-add
           (vec-mul
            (vec-cast
             (load
              (buffer input1 'uint8)
              (ramp
               (sca-add
                (sca-mul output.s0.x.x 16)
                (sca-add
                 (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
                 (var-lookup 't72)))
               1
               16)
              (aligned 1 0))
             'int16
             16)
            (sca-broadcast (int16_t (bv #x0040 16)) 16))
           (sca-broadcast
            (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))
            16))
          'int32
          16)
         (vec-cast
          (sca-broadcast
           (sca-mul
            (sca-sub (int16_t t147) (int16_t t148))
            (int16_t (bv #x0040 16)))
           16)
          'int32
          16))
        'int64
        16)
       (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
      (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
    (vec-div
     (vec-mul
      (vec-cast
       (vec-mul
        (vec-cast
         (vec-add
          (vec-mul
           (vec-cast
            (load
             (buffer input1 'uint8)
             (ramp
              (sca-add
               (sca-mul output.s0.x.x 16)
               (sca-add
                (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
                (var-lookup 't72)))
              1
              16)
             (aligned 1 0))
            'int16
            16)
           (sca-broadcast (int16_t (bv #x0040 16)) 16))
          (sca-broadcast (sca-mul (int16_t t146) (int16_t (bv #xffc0 16))) 16))
         'int32
         16)
        (vec-cast
         (sca-broadcast
          (sca-mul
           (sca-sub (int16_t t147) (int16_t t148))
           (int16_t (bv #x0040 16)))
          16)
         'int32
         16))
       'int64
       16)
      (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
     (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
   (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
  (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
 'int32
 16)
template:
  (vs-mpy-add
 ...
 (vs-mpy-add
  ...
  (combine
   #<load-data>
   (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))))
  (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
  #f
  #f
  #f
  'int16)
 (list
  (sca-mul (sca-sub (int16_t t147) (int16_t t148)) (int16_t (bv #x0040 16))))
 x?$2330
 x?$2331
 x?$2332
 'int32)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-cast
 (vec-max
  (vec-min
   (vec-add
    (vec-bwand
     (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
     (vec-div
      (vec-mul
       (vec-cast
        (vec-mul
         (vec-cast #<abstr-halide-expr> 'int32 16)
         (vec-cast
          (sca-broadcast
           (sca-mul
            (sca-sub (int16_t t147) (int16_t t148))
            (int16_t (bv #x0040 16)))
           16)
          'int32
          16))
        'int64
        16)
       (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
      (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
    (vec-div
     (vec-mul
      (vec-cast
       (vec-mul
        (vec-cast #<abstr-halide-expr> 'int32 16)
        (vec-cast
         (sca-broadcast
          (sca-mul
           (sca-sub (int16_t t147) (int16_t t148))
           (int16_t (bv #x0040 16)))
          16)
         'int32
         16))
       'int64
       16)
      (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
     (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
   (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
  (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
 'int32
 16)
optimized-template:
  (vs-mpy-add
 ...
 #<abstr-expr>
 (list
  (sca-mul (sca-sub (int16_t t147) (int16_t t148)) (int16_t (bv #x0040 16))))
 x?$2330
 x?$2331
 x?$2332
 'int32)
optimized Halide 0:
  (int32_t
 (extract 31 0 (ite (bvsle (bv #xffffffff80000000 64) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32)) (sign-extend (app abstr-vals$2336 0) (bitvector 32))) (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32)) (sign-extend (app abstr-vals$2336 0) (bitvector 32))) (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32)) (sign-extend (app abstr-vals$2336 0) (bitvector 32))) (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32)) (sign-extend (app abstr-vals$2336 0) (bitvector 32))) (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32)) (sign-extend (app abstr-vals$2336 0) (bitvector 32))) (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32)) (sign-extend (app abstr-vals$2336 0) (bitvector 32))) (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32)) (sign-extend (app abstr-vals$2336 0) (bitvector 32))) (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32)) (sign-extend (app abstr-vals$2336 0) (bitvector 32))) (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32)) (sign-extend (app abstr-vals$2336 0) (bitvector 32))) (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32)) (sign-extend (app abstr-vals$2336 0) (bitvector 32))) (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32)) (sign-extend (app abstr-vals$2336 0) (bitvector 32))) (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32)) (sign-extend (app abstr-vals$2336 0) (bitvector 32))) (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64))) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32)) (sign-extend (app abstr-vals$2336 0) (bitvector 32))) (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32)) (sign-extend (app abstr-vals$2336 0) (bitvector 32))) (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32)) (sign-extend (app abstr-vals$2336 0) (bitvector 32))) (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32)) (sign-extend (app abstr-vals$2336 0) (bitvector 32))) (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32)) (sign-extend (app abstr-vals$2336 0) (bitvector 32))) (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32)) (sign-extend (app abstr-vals$2336 0) (bitvector 32))) (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32)) (sign-extend (app abstr-vals$2336 0) (bitvector 32))) (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32)) (sign-extend (app abstr-vals$2336 0) (bitvector 32))) (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32)) (sign-extend (app abstr-vals$2336 0) (bitvector 32))) (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32)) (sign-extend (app abstr-vals$2336 0) (bitvector 32))) (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32)) (sign-extend (app abstr-vals$2336 0) (bitvector 32))) (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32)) (sign-extend (app abstr-vals$2336 0) (bitvector 32))) (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bv #xffffffff80000000 64))))
optimized x86 0:
  (int32_t
 (ite* (⊢ (&& (! x?$2332) (! (&& x?$2330 x?$2332))) (ite x?$2330 (bvadd (ite x?$2331 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32)) (sign-extend (app abstr-vals$2336 0) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2331 (bv #x00000001 32) (bv #x00000000 32))))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32)) (sign-extend (app abstr-vals$2336 0) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2331 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32)) (sign-extend (app abstr-vals$2336 0) (bitvector 32))) (ite x?$2331 (bv #x00000001 32) (bv #x00000000 32))))) (⊢ (|| (&& x?$2330 x?$2332) (&& x?$2332 (! (&& x?$2330 x?$2332)))) (bvashr (ite x?$2330 (bvadd (ite x?$2331 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32)) (sign-extend (app abstr-vals$2336 0) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2331 (bv #x00000001 32) (bv #x00000000 32))))) (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32)) (sign-extend (app abstr-vals$2336 0) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2331 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32)) (sign-extend (app abstr-vals$2336 0) (bitvector 32))) (ite x?$2331 (bv #x00000001 32) (bv #x00000000 32)))) (bv #x00000001 32)))))
run-x86-synthesizer
halide-expr:
  (vec-cast
 (vec-max
  (vec-min
   (vec-add
    (vec-bwand
     (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
     (vec-div
      (vec-mul
       (vec-cast
        (vec-mul
         (vec-cast
          (vec-add
           (vec-mul
            (vec-cast
             (load
              (buffer input1 'uint8)
              (ramp
               (sca-add
                (sca-mul output.s0.x.x 16)
                (sca-add
                 (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
                 (var-lookup 't72)))
               1
               16)
              (aligned 1 0))
             'int16
             16)
            (sca-broadcast (int16_t (bv #x0040 16)) 16))
           (sca-broadcast
            (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))
            16))
          'int32
          16)
         (vec-cast
          (sca-broadcast
           (sca-mul
            (sca-sub (int16_t t147) (int16_t t148))
            (int16_t (bv #x0040 16)))
           16)
          'int32
          16))
        'int64
        16)
       (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
      (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
    (vec-div
     (vec-mul
      (vec-cast
       (vec-mul
        (vec-cast
         (vec-add
          (vec-mul
           (vec-cast
            (load
             (buffer input1 'uint8)
             (ramp
              (sca-add
               (sca-mul output.s0.x.x 16)
               (sca-add
                (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
                (var-lookup 't72)))
              1
              16)
             (aligned 1 0))
            'int16
            16)
           (sca-broadcast (int16_t (bv #x0040 16)) 16))
          (sca-broadcast (sca-mul (int16_t t146) (int16_t (bv #xffc0 16))) 16))
         'int32
         16)
        (vec-cast
         (sca-broadcast
          (sca-mul
           (sca-sub (int16_t t147) (int16_t t148))
           (int16_t (bv #x0040 16)))
          16)
         'int32
         16))
       'int64
       16)
      (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
     (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
   (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
  (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
 'int32
 16)
template:
  (vs-mpy-add
 ...
 (vs-mpy-add
  ...
  (vs-mpy-add
   ...
   (combine
    #<load-data>
    (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))))
   (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
   #f
   #f
   #f
   'int16)
  (list
   (sca-mul (sca-sub (int16_t t147) (int16_t t148)) (int16_t (bv #x0040 16))))
  #f
  #f
  #f
  'int32)
 (list (int32_t output_multiplier))
 x?$2324
 x?$2325
 x?$2326
 'int64)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$2337 idx) (bv #x40000000 32)) (bvsle (bv #xc0008000 32) (app abstr-vals$2337 idx)))))
optimized-halide-expr:
  (vec-cast
 (vec-max
  (vec-min
   (vec-add
    (vec-bwand
     (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
     (vec-div
      (vec-mul
       (vec-cast #<abstr-halide-expr> 'int64 16)
       (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
      (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
    (vec-div
     (vec-mul
      (vec-cast #<abstr-halide-expr> 'int64 16)
      (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
     (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
   (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
  (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
 'int32
 16)
optimized-template:
  (vs-mpy-add
 ...
 #<abstr-expr>
 (list (int32_t output_multiplier))
 x?$2324
 x?$2325
 x?$2326
 'int64)
optimized Halide 0:
  (int32_t
 (extract 31 0 (ite (bvsle (bv #xffffffff80000000 64) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (app abstr-vals$2337 0) (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (app abstr-vals$2337 0) (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (app abstr-vals$2337 0) (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (app abstr-vals$2337 0) (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (app abstr-vals$2337 0) (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (app abstr-vals$2337 0) (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (app abstr-vals$2337 0) (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (app abstr-vals$2337 0) (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (app abstr-vals$2337 0) (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (app abstr-vals$2337 0) (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (app abstr-vals$2337 0) (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (app abstr-vals$2337 0) (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64))) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (app abstr-vals$2337 0) (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (app abstr-vals$2337 0) (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (app abstr-vals$2337 0) (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (app abstr-vals$2337 0) (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (app abstr-vals$2337 0) (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (app abstr-vals$2337 0) (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (app abstr-vals$2337 0) (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (app abstr-vals$2337 0) (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (app abstr-vals$2337 0) (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (app abstr-vals$2337 0) (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (app abstr-vals$2337 0) (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (app abstr-vals$2337 0) (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bv #xffffffff80000000 64))))
optimized x86 0:
  (int64_t
 (ite* (⊢ (&& (! x?$2326) (! (&& x?$2324 x?$2326))) (ite x?$2324 (bvadd (ite x?$2325 (bv #x0000000000000001 64) (bv #x0000000000000000 64)) (ite (bvsle (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (app abstr-vals$2337 0) (bitvector 64))) (bvadd (bv #x7fffffffffffffff 64) (bvneg (ite x?$2325 (bv #x0000000000000001 64) (bv #x0000000000000000 64))))) (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (app abstr-vals$2337 0) (bitvector 64))) (bvadd (bv #x7fffffffffffffff 64) (bvneg (ite x?$2325 (bv #x0000000000000001 64) (bv #x0000000000000000 64)))))) (bvadd (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (app abstr-vals$2337 0) (bitvector 64))) (ite x?$2325 (bv #x0000000000000001 64) (bv #x0000000000000000 64))))) (⊢ (|| (&& x?$2324 x?$2326) (&& x?$2326 (! (&& x?$2324 x?$2326)))) (bvashr (ite x?$2324 (bvadd (ite x?$2325 (bv #x0000000000000001 64) (bv #x0000000000000000 64)) (ite (bvsle (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (app abstr-vals$2337 0) (bitvector 64))) (bvadd (bv #x7fffffffffffffff 64) (bvneg (ite x?$2325 (bv #x0000000000000001 64) (bv #x0000000000000000 64))))) (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (app abstr-vals$2337 0) (bitvector 64))) (bvadd (bv #x7fffffffffffffff 64) (bvneg (ite x?$2325 (bv #x0000000000000001 64) (bv #x0000000000000000 64)))))) (bvadd (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (app abstr-vals$2337 0) (bitvector 64))) (ite x?$2325 (bv #x0000000000000001 64) (bv #x0000000000000000 64)))) (bv #x0000000000000001 64)))))
Ran synthesizer for 33 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-cast
 (vec-max
  (vec-min
   (vec-add
    (vec-bwand
     (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
     (vec-div
      (vec-mul
       (vec-cast
        (vec-mul
         (vec-cast
          (vec-add
           (vec-mul
            (vec-cast
             (load
              (buffer input1 'uint8)
              (ramp
               (sca-add
                (sca-mul output.s0.x.x 16)
                (sca-add
                 (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
                 (var-lookup 't72)))
               1
               16)
              (aligned 1 0))
             'int16
             16)
            (sca-broadcast (int16_t (bv #x0040 16)) 16))
           (sca-broadcast
            (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))
            16))
          'int32
          16)
         (vec-cast
          (sca-broadcast
           (sca-mul
            (sca-sub (int16_t t147) (int16_t t148))
            (int16_t (bv #x0040 16)))
           16)
          'int32
          16))
        'int64
        16)
       (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
      (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
    (vec-div
     (vec-mul
      (vec-cast
       (vec-mul
        (vec-cast
         (vec-add
          (vec-mul
           (vec-cast
            (load
             (buffer input1 'uint8)
             (ramp
              (sca-add
               (sca-mul output.s0.x.x 16)
               (sca-add
                (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
                (var-lookup 't72)))
              1
              16)
             (aligned 1 0))
            'int16
            16)
           (sca-broadcast (int16_t (bv #x0040 16)) 16))
          (sca-broadcast (sca-mul (int16_t t146) (int16_t (bv #xffc0 16))) 16))
         'int32
         16)
        (vec-cast
         (sca-broadcast
          (sca-mul
           (sca-sub (int16_t t147) (int16_t t148))
           (int16_t (bv #x0040 16)))
          16)
         'int32
         16))
       'int64
       16)
      (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
     (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
   (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
  (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
 'int32
 16)
template:
  (vs-shift-right
 ...
 (vs-mpy-add
  ...
  (vs-mpy-add
   ...
   (vs-mpy-add
    ...
    (combine
     #<load-data>
     (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))))
    (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
    #f
    #f
    #f
    'int16)
   (list
    (sca-mul (sca-sub (int16_t t147) (int16_t t148)) (int16_t (bv #x0040 16))))
   #f
   #f
   #f
   'int32)
  (list (int32_t output_multiplier))
  #f
  #f
  #f
  'int64)
 (int64_t (ite x?$2320 (bv #x000000000000001e 64) (bv #x000000000000001f 64)))
 #t
 x?$2001
 #t)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$2338 idx) (bv #x1fffffffc0000000 64)) (bvsle (bv #xe000000000000000 64) (app abstr-vals$2338 idx)))))
optimized-halide-expr:
  (vec-cast
 (vec-max
  (vec-min
   (vec-add
    (vec-bwand
     (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
     (vec-div
      #<abstr-halide-expr>
      (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
    (vec-div
     #<abstr-halide-expr>
     (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
   (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
  (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
 'int32
 16)
optimized-template:
  (vs-shift-right
 ...
 #<abstr-expr>
 (int64_t (ite x?$2320 (bv #x000000000000001e 64) (bv #x000000000000001f 64)))
 #t
 x?$2001
 #t)
optimized Halide 0:
  (int32_t
 (extract 31 0 (ite (bvsle (bv #xffffffff80000000 64) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (app abstr-vals$2338 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$2338 0) (bvneg (bvashr (app abstr-vals$2338 0) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (app abstr-vals$2338 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$2338 0) (bvneg (bvashr (app abstr-vals$2338 0) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (app abstr-vals$2338 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$2338 0) (bvneg (bvashr (app abstr-vals$2338 0) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (app abstr-vals$2338 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$2338 0) (bvneg (bvashr (app abstr-vals$2338 0) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64))) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (app abstr-vals$2338 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$2338 0) (bvneg (bvashr (app abstr-vals$2338 0) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (app abstr-vals$2338 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$2338 0) (bvneg (bvashr (app abstr-vals$2338 0) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (app abstr-vals$2338 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$2338 0) (bvneg (bvashr (app abstr-vals$2338 0) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (app abstr-vals$2338 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$2338 0) (bvneg (bvashr (app abstr-vals$2338 0) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bv #xffffffff80000000 64))))
optimized x86 0:
  (int64_t
 (bvadd (bvashr (app abstr-vals$2338 0) (ite x?$2320 (bv #x000000000000001e 64) (bv #x000000000000001f 64))) (bvand (bv #x0000000000000001 64) (bvashr (app abstr-vals$2338 0) (ite x?$2320 (bv #x000000000000001d 64) (bv #x000000000000001e 64))))))
Ran synthesizer for 32 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-cast
 (vec-max
  (vec-min
   (vec-add
    (vec-bwand
     (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
     (vec-div
      (vec-mul
       (vec-cast
        (vec-mul
         (vec-cast
          (vec-add
           (vec-mul
            (vec-cast
             (load
              (buffer input1 'uint8)
              (ramp
               (sca-add
                (sca-mul output.s0.x.x 16)
                (sca-add
                 (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
                 (var-lookup 't72)))
               1
               16)
              (aligned 1 0))
             'int16
             16)
            (sca-broadcast (int16_t (bv #x0040 16)) 16))
           (sca-broadcast
            (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))
            16))
          'int32
          16)
         (vec-cast
          (sca-broadcast
           (sca-mul
            (sca-sub (int16_t t147) (int16_t t148))
            (int16_t (bv #x0040 16)))
           16)
          'int32
          16))
        'int64
        16)
       (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
      (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
    (vec-div
     (vec-mul
      (vec-cast
       (vec-mul
        (vec-cast
         (vec-add
          (vec-mul
           (vec-cast
            (load
             (buffer input1 'uint8)
             (ramp
              (sca-add
               (sca-mul output.s0.x.x 16)
               (sca-add
                (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
                (var-lookup 't72)))
              1
              16)
             (aligned 1 0))
            'int16
            16)
           (sca-broadcast (int16_t (bv #x0040 16)) 16))
          (sca-broadcast (sca-mul (int16_t t146) (int16_t (bv #xffc0 16))) 16))
         'int32
         16)
        (vec-cast
         (sca-broadcast
          (sca-mul
           (sca-sub (int16_t t147) (int16_t t148))
           (int16_t (bv #x0040 16)))
          16)
         'int32
         16))
       'int64
       16)
      (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
     (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
   (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
  (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
 'int32
 16)
template:
  (vs-shift-right
 ...
 (vs-mpy-add
  ...
  (vs-mpy-add
   ...
   (vs-mpy-add
    ...
    (combine
     #<load-data>
     (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))))
    (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
    #f
    #f
    #f
    'int16)
   (list
    (sca-mul (sca-sub (int16_t t147) (int16_t t148)) (int16_t (bv #x0040 16))))
   #f
   #f
   #f
   'int32)
  (list (int32_t output_multiplier))
  #f
  #f
  #f
  'int64)
 (int64_t (bv #x000000000000001f 64))
 x?$2321
 x?$2322
 x?$2323)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$2339 idx) (bv #x1fffffffc0000000 64)) (bvsle (bv #xe000000000000000 64) (app abstr-vals$2339 idx)))))
optimized-halide-expr:
  (vec-cast
 (vec-max
  (vec-min
   (vec-add
    (vec-bwand
     (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
     (vec-div
      #<abstr-halide-expr>
      (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
    (vec-div
     #<abstr-halide-expr>
     (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
   (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
  (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
 'int32
 16)
optimized-template:
  (vs-shift-right
 ...
 #<abstr-expr>
 (int64_t (bv #x000000000000001f 64))
 x?$2321
 x?$2322
 x?$2323)
optimized Halide 0:
  (int32_t
 (extract 31 0 (ite (bvsle (bv #xffffffff80000000 64) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (app abstr-vals$2339 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$2339 0) (bvneg (bvashr (app abstr-vals$2339 0) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (app abstr-vals$2339 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$2339 0) (bvneg (bvashr (app abstr-vals$2339 0) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (app abstr-vals$2339 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$2339 0) (bvneg (bvashr (app abstr-vals$2339 0) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (app abstr-vals$2339 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$2339 0) (bvneg (bvashr (app abstr-vals$2339 0) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64))) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (app abstr-vals$2339 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$2339 0) (bvneg (bvashr (app abstr-vals$2339 0) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (app abstr-vals$2339 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$2339 0) (bvneg (bvashr (app abstr-vals$2339 0) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (app abstr-vals$2339 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$2339 0) (bvneg (bvashr (app abstr-vals$2339 0) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (app abstr-vals$2339 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$2339 0) (bvneg (bvashr (app abstr-vals$2339 0) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bv #xffffffff80000000 64))))
optimized x86 0:
  (int64_t
 (ite x?$2321 (bvadd (ite x?$2323 (bvashr (app abstr-vals$2339 0) (bv #x000000000000001f 64)) (bvlshr (app abstr-vals$2339 0) (bv #x000000000000001f 64))) (bvand (bv #x0000000000000001 64) (ite x?$2323 (bvashr (app abstr-vals$2339 0) (bv #x000000000000001e 64)) (bvlshr (app abstr-vals$2339 0) (bv #x000000000000001e 64))))) (ite x?$2323 (bvashr (app abstr-vals$2339 0) (bv #x000000000000001f 64)) (bvlshr (app abstr-vals$2339 0) (bv #x000000000000001f 64)))))
Ran synthesizer for 32 ms
(unsat)
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (vec-cast
 (vec-max
  (vec-min
   (vec-add
    (vec-bwand
     (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
     (vec-div
      (vec-mul
       (vec-cast
        (vec-mul
         (vec-cast
          (vec-add
           (vec-mul
            (vec-cast
             (load
              (buffer input1 'uint8)
              (ramp
               (sca-add
                (sca-mul output.s0.x.x 16)
                (sca-add
                 (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
                 (var-lookup 't72)))
               1
               16)
              (aligned 1 0))
             'int16
             16)
            (sca-broadcast (int16_t (bv #x0040 16)) 16))
           (sca-broadcast
            (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))
            16))
          'int32
          16)
         (vec-cast
          (sca-broadcast
           (sca-mul
            (sca-sub (int16_t t147) (int16_t t148))
            (int16_t (bv #x0040 16)))
           16)
          'int32
          16))
        'int64
        16)
       (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
      (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
    (vec-div
     (vec-mul
      (vec-cast
       (vec-mul
        (vec-cast
         (vec-add
          (vec-mul
           (vec-cast
            (load
             (buffer input1 'uint8)
             (ramp
              (sca-add
               (sca-mul output.s0.x.x 16)
               (sca-add
                (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
                (var-lookup 't72)))
              1
              16)
             (aligned 1 0))
            'int16
            16)
           (sca-broadcast (int16_t (bv #x0040 16)) 16))
          (sca-broadcast (sca-mul (int16_t t146) (int16_t (bv #xffc0 16))) 16))
         'int32
         16)
        (vec-cast
         (sca-broadcast
          (sca-mul
           (sca-sub (int16_t t147) (int16_t t148))
           (int16_t (bv #x0040 16)))
          16)
         'int32
         16))
       'int64
       16)
      (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
     (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
   (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
  (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
 'int32
 16)
template:
  (cast
 ...
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (vs-mpy-add
    ...
    (vs-mpy-add
     ...
     (combine
      #<load-data>
      (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))))
     (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
     #f
     #f
     #f
     'int16)
    (list
     (sca-mul
      (sca-sub (int16_t t147) (int16_t t148))
      (int16_t (bv #x0040 16))))
    #f
    #f
    #f
    'int32)
   (list (int32_t output_multiplier))
   #f
   #f
   #f
   'int64)
  (int64_t (bv #x000000000000001f 64))
  #t
  x?$2001
  #t)
 'int32
 #f)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$2340 idx) (bv #x0000000040000000 64)) (bvsle (bv #xffffffffc0000000 64) (app abstr-vals$2340 idx)))))
optimized-halide-expr:
  (vec-cast #<abstr-halide-expr> 'int32 16)
optimized-template:
  (cast ... #<abstr-expr> 'int32 #f)
optimized Halide 0:
  (int32_t (extract 31 0 (app abstr-vals$2340 0)))
optimized x86 0:
  (int32_t (extract 31 0 (app abstr-vals$2340 0)))
Ran synthesizer for 59 ms
(model)
(vec-cast #<abstr-halide-expr> 'int32 16)
(cast
 ...
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (vs-mpy-add
    ...
    (vs-mpy-add
     ...
     (combine
      #<load-data>
      (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))))
     (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
     #f
     #f
     #f
     'int16)
    (list
     (sca-mul
      (sca-sub (int16_t t147) (int16_t t148))
      (int16_t (bv #x0040 16))))
    #f
    #f
    #f
    'int32)
   (list (int32_t output_multiplier))
   #f
   #f
   #f
   'int64)
  (int64_t (bv #x000000000000001f 64))
  #t
  x?$2001
  #t)
 'int32
 #f)
Ran bounds analysis for 42 ms
Ran bounds analysis for 51 ms
"Extended success?"
#t
(cast
 ...
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (vs-mpy-add
    ...
    (vs-mpy-add
     ...
     (combine
      #<load-data>
      (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))))
     (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
     #f
     #f
     #f
     'int16)
    (list
     (sca-mul
      (sca-sub (int16_t t147) (int16_t t148))
      (int16_t (bv #x0040 16))))
    #f
    #f
    #f
    'int32)
   (list (int32_t output_multiplier))
   #f
   #f
   #f
   'int64)
  (int64_t (bv #x000000000000001f 64))
  #t
  x?$2001
  #t)
 'int32
 #f)
"Building Expr:"
(sca-broadcast (uint32_t t74) 16)
"Fold templates"
'()
here()

"Replace templates"
'()
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (sca-broadcast (uint32_t t74) 16)
template:
  (broadcast ... (uint32_t t74))
axioms:
  '()
optimized-halide-expr:
  (sca-broadcast (uint32_t t74) 16)
optimized-template:
  (broadcast ... (uint32_t t74))
optimized Halide 0:
  (uint32_t t74)
optimized x86 0:
  (uint32_t t74)
Ran synthesizer for 30 ms
(model)
(sca-broadcast (uint32_t t74) 16)
(broadcast ... (uint32_t t74))
Ran bounds analysis for 59 ms
Ran bounds analysis for 49 ms
"Extended success?"
#t
(broadcast ... (uint32_t t74))
"Building Expr:"
(vec-shr
 (vec-cast
  (vec-max
   (vec-min
    (vec-add
     (vec-bwand
      (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
      (vec-div
       (vec-mul
        (vec-cast
         (vec-mul
          (vec-cast
           (vec-add
            (vec-mul
             (vec-cast
              (load
               (buffer input1 'uint8)
               (ramp
                (sca-add
                 (sca-mul output.s0.x.x 16)
                 (sca-add
                  (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
                  (var-lookup 't72)))
                1
                16)
               (aligned 1 0))
              'int16
              16)
             (sca-broadcast (int16_t (bv #x0040 16)) 16))
            (sca-broadcast
             (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))
             16))
           'int32
           16)
          (vec-cast
           (sca-broadcast
            (sca-mul
             (sca-sub (int16_t t147) (int16_t t148))
             (int16_t (bv #x0040 16)))
            16)
           'int32
           16))
         'int64
         16)
        (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
       (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
     (vec-div
      (vec-mul
       (vec-cast
        (vec-mul
         (vec-cast
          (vec-add
           (vec-mul
            (vec-cast
             (load
              (buffer input1 'uint8)
              (ramp
               (sca-add
                (sca-mul output.s0.x.x 16)
                (sca-add
                 (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
                 (var-lookup 't72)))
               1
               16)
              (aligned 1 0))
             'int16
             16)
            (sca-broadcast (int16_t (bv #x0040 16)) 16))
           (sca-broadcast
            (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))
            16))
          'int32
          16)
         (vec-cast
          (sca-broadcast
           (sca-mul
            (sca-sub (int16_t t147) (int16_t t148))
            (int16_t (bv #x0040 16)))
           16)
          'int32
          16))
        'int64
        16)
       (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
      (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
    (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
   (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
  'int32
  16)
 (sca-broadcast (uint32_t t74) 16))
"Fold templates"
(list
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (vs-mpy-add
    ...
    (vs-mpy-add
     ...
     (combine
      #<load-data>
      (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))))
     (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
     #f
     #f
     #f
     'int16)
    (list
     (sca-mul
      (sca-sub (int16_t t147) (int16_t t148))
      (int16_t (bv #x0040 16))))
    #f
    #f
    #f
    'int32)
   (list (int32_t output_multiplier))
   #f
   #f
   #f
   'int64)
  (union [(&& (! xi?$2343) (! xi?$2344)) #(struct:uint32_t t74)] [(|| xi?$2343 (&& xi?$2344 (! xi?$2343))) #(struct:int64_t
                                                                                                             (ite* (⊢ xi?$2343 (bv #x000000000000001e 64)) (⊢ (&& xi?$2344 (! xi?$2343)) (bv #x000000000000001f 64))))])
  #t
  x?$2001
  #t)
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (vs-mpy-add
    ...
    (vs-mpy-add
     ...
     (combine
      #<load-data>
      (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))))
     (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
     #f
     #f
     #f
     'int16)
    (list
     (sca-mul
      (sca-sub (int16_t t147) (int16_t t148))
      (int16_t (bv #x0040 16))))
    #f
    #f
    #f
    'int32)
   (list (int32_t output_multiplier))
   #f
   #f
   #f
   'int64)
  (int64_t (bv #x000000000000001f 64))
  x?$2345
  x?$2346
  x?$2347)
 (cast
  ...
  (vs-shift-right
   ...
   (vs-mpy-add
    ...
    (vs-mpy-add
     ...
     (vs-mpy-add
      ...
      (combine
       #<load-data>
       (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))))
      (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
      #f
      #f
      #f
      'int16)
     (list
      (sca-mul
       (sca-sub (int16_t t147) (int16_t t148))
       (int16_t (bv #x0040 16))))
     #f
     #f
     #f
     'int32)
    (list (int32_t output_multiplier))
    #f
    #f
    #f
    'int64)
   (int64_t (bv #x000000000000001f 64))
   #t
   x?$2001
   #t)
  'int32
  x?$2342))
here(#(struct:vs-shift-right ... #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t146) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f #f #f int16) (#(struct:sca-mul #(struct:sca-sub #(struct:int16_t t147) #(struct:int16_t t148)) #(struct:int16_t (bv #x0040 16)))) #f #f #f int32) (#(struct:int32_t output_multiplier)) #f #f #f int64) (union #:size 2 #:hash 405393967817) #t x?$2001 #t) #(struct:vs-shift-right ... #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t146) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f #f #f int16) (#(struct:sca-mul #(struct:sca-sub #(struct:int16_t t147) #(struct:int16_t t148)) #(struct:int16_t (bv #x0040 16)))) #f #f #f int32) (#(struct:int32_t output_multiplier)) #f #f #f int64) #(struct:int64_t (bv #x000000000000001f 64)) x?$2345 x?$2346 x?$2347) #(struct:cast ... #(struct:vs-shift-right ... #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t146) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f #f #f int16) (#(struct:sca-mul #(struct:sca-sub #(struct:int16_t t147) #(struct:int16_t t148)) #(struct:int16_t (bv #x0040 16)))) #f #f #f int32) (#(struct:int32_t output_multiplier)) #f #f #f int64) #(struct:int64_t (bv #x000000000000001f 64)) #t x?$2001 #t) int32 x?$2342))

"Replace templates"
(list
 (vs-shift-right
  ...
  (vs-shift-right
   ...
   (vs-mpy-add
    ...
    (vs-mpy-add
     ...
     (vs-mpy-add
      ...
      (combine
       #<load-data>
       (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))))
      (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
      #f
      #f
      #f
      'int16)
     (list
      (sca-mul
       (sca-sub (int16_t t147) (int16_t t148))
       (int16_t (bv #x0040 16))))
     #f
     #f
     #f
     'int32)
    (list (int32_t output_multiplier))
    #f
    #f
    #f
    'int64)
   (int64_t (bv #x000000000000001f 64))
   #t
   x?$2001
   #t)
  (union [(&& (! xi?$2354) (! xi?$2355)) #(struct:uint32_t t74)] [(|| xi?$2354 (&& xi?$2355 (! xi?$2354))) #(struct:int64_t
                                                                                                             (ite* (⊢ xi?$2354 (bv #x000000000000001e 64)) (⊢ (&& xi?$2355 (! xi?$2354)) (bv #x000000000000001f 64))))])
  #f
  #f
  #t))
run-x86-synthesizer
halide-expr:
  (vec-shr
 (vec-cast
  (vec-max
   (vec-min
    (vec-add
     (vec-bwand
      (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
      (vec-div
       (vec-mul
        (vec-cast
         (vec-mul
          (vec-cast
           (vec-add
            (vec-mul
             (vec-cast
              (load
               (buffer input1 'uint8)
               (ramp
                (sca-add
                 (sca-mul output.s0.x.x 16)
                 (sca-add
                  (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
                  (var-lookup 't72)))
                1
                16)
               (aligned 1 0))
              'int16
              16)
             (sca-broadcast (int16_t (bv #x0040 16)) 16))
            (sca-broadcast
             (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))
             16))
           'int32
           16)
          (vec-cast
           (sca-broadcast
            (sca-mul
             (sca-sub (int16_t t147) (int16_t t148))
             (int16_t (bv #x0040 16)))
            16)
           'int32
           16))
         'int64
         16)
        (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
       (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
     (vec-div
      (vec-mul
       (vec-cast
        (vec-mul
         (vec-cast
          (vec-add
           (vec-mul
            (vec-cast
             (load
              (buffer input1 'uint8)
              (ramp
               (sca-add
                (sca-mul output.s0.x.x 16)
                (sca-add
                 (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
                 (var-lookup 't72)))
               1
               16)
              (aligned 1 0))
             'int16
             16)
            (sca-broadcast (int16_t (bv #x0040 16)) 16))
           (sca-broadcast
            (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))
            16))
          'int32
          16)
         (vec-cast
          (sca-broadcast
           (sca-mul
            (sca-sub (int16_t t147) (int16_t t148))
            (int16_t (bv #x0040 16)))
           16)
          'int32
          16))
        'int64
        16)
       (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
      (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
    (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
   (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
  'int32
  16)
 (sca-broadcast (uint32_t t74) 16))
template:
  (vs-shift-right
 ...
 (vs-mpy-add
  ...
  (vs-mpy-add
   ...
   (vs-mpy-add
    ...
    (combine
     #<load-data>
     (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))))
    (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
    #f
    #f
    #f
    'int16)
   (list
    (sca-mul (sca-sub (int16_t t147) (int16_t t148)) (int16_t (bv #x0040 16))))
   #f
   #f
   #f
   'int32)
  (list (int32_t output_multiplier))
  #f
  #f
  #f
  'int64)
 (union [(&& (! xi?$2343) (! xi?$2344)) #(struct:uint32_t t74)] [(|| xi?$2343 (&& xi?$2344 (! xi?$2343))) #(struct:int64_t
                                                                                                            (ite* (⊢ xi?$2343 (bv #x000000000000001e 64)) (⊢ (&& xi?$2344 (! xi?$2343)) (bv #x000000000000001f 64))))])
 #t
 x?$2001
 #t)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$2356 idx) (bv #x1fffffffc0000000 64)) (bvsle (bv #xe000000000000000 64) (app abstr-vals$2356 idx)))))
optimized-halide-expr:
  (vec-shr
 (vec-cast
  (vec-max
   (vec-min
    (vec-add
     (vec-bwand
      (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
      (vec-div
       #<abstr-halide-expr>
       (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
     (vec-div
      #<abstr-halide-expr>
      (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
    (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
   (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
  'int32
  16)
 (sca-broadcast (uint32_t t74) 16))
optimized-template:
  (vs-shift-right
 ...
 #<abstr-expr>
 (union [(&& (! xi?$2343) (! xi?$2344)) #(struct:uint32_t t74)] [(|| xi?$2343 (&& xi?$2344 (! xi?$2343))) #(struct:int64_t
                                                                                                            (ite* (⊢ xi?$2343 (bv #x000000000000001e 64)) (⊢ (&& xi?$2344 (! xi?$2343)) (bv #x000000000000001f 64))))])
 #t
 x?$2001
 #t)
optimized Halide 0:
  (int32_t
 (bvashr (extract 31 0 (ite (bvsle (bv #xffffffff80000000 64) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (app abstr-vals$2356 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$2356 0) (bvneg (bvashr (app abstr-vals$2356 0) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (app abstr-vals$2356 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$2356 0) (bvneg (bvashr (app abstr-vals$2356 0) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (app abstr-vals$2356 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$2356 0) (bvneg (bvashr (app abstr-vals$2356 0) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (app abstr-vals$2356 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$2356 0) (bvneg (bvashr (app abstr-vals$2356 0) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64))) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (app abstr-vals$2356 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$2356 0) (bvneg (bvashr (app abstr-vals$2356 0) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (app abstr-vals$2356 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$2356 0) (bvneg (bvashr (app abstr-vals$2356 0) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (app abstr-vals$2356 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$2356 0) (bvneg (bvashr (app abstr-vals$2356 0) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (app abstr-vals$2356 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$2356 0) (bvneg (bvashr (app abstr-vals$2356 0) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bv #xffffffff80000000 64))) t74))
optimized x86 0:
  (int64_t
 (bvadd (bvashr (app abstr-vals$2356 0) (ite* (⊢ (&& (! xi?$2343) (! xi?$2344)) (zero-extend t74 (bitvector 64))) (⊢ (|| xi?$2343 (&& xi?$2344 (! xi?$2343))) (ite* (⊢ xi?$2343 (bv #x000000000000001e 64)) (⊢ (&& xi?$2344 (! xi?$2343)) (bv #x000000000000001f 64)))))) (bvand (ite (bvslt (bv #x0000000000000000 64) (ite* (⊢ (&& (! xi?$2343) (! xi?$2344)) (zero-extend t74 (bitvector 64))) (⊢ (|| xi?$2343 (&& xi?$2344 (! xi?$2343))) (ite* (⊢ xi?$2343 (bv #x000000000000001e 64)) (⊢ (&& xi?$2344 (! xi?$2343)) (bv #x000000000000001f 64)))))) (bv #x0000000000000001 64) (bv #x0000000000000000 64)) (bvashr (app abstr-vals$2356 0) (bvadd (bv #xffffffffffffffff 64) (ite* (⊢ (&& (! xi?$2343) (! xi?$2344)) (zero-extend t74 (bitvector 64))) (⊢ (|| xi?$2343 (&& xi?$2344 (! xi?$2343))) (ite* (⊢ xi?$2343 (bv #x000000000000001e 64)) (⊢ (&& xi?$2344 (! xi?$2343)) (bv #x000000000000001f 64))))))))))
Ran synthesizer for 33 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-shr
 (vec-cast
  (vec-max
   (vec-min
    (vec-add
     (vec-bwand
      (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
      (vec-div
       (vec-mul
        (vec-cast
         (vec-mul
          (vec-cast
           (vec-add
            (vec-mul
             (vec-cast
              (load
               (buffer input1 'uint8)
               (ramp
                (sca-add
                 (sca-mul output.s0.x.x 16)
                 (sca-add
                  (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
                  (var-lookup 't72)))
                1
                16)
               (aligned 1 0))
              'int16
              16)
             (sca-broadcast (int16_t (bv #x0040 16)) 16))
            (sca-broadcast
             (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))
             16))
           'int32
           16)
          (vec-cast
           (sca-broadcast
            (sca-mul
             (sca-sub (int16_t t147) (int16_t t148))
             (int16_t (bv #x0040 16)))
            16)
           'int32
           16))
         'int64
         16)
        (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
       (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
     (vec-div
      (vec-mul
       (vec-cast
        (vec-mul
         (vec-cast
          (vec-add
           (vec-mul
            (vec-cast
             (load
              (buffer input1 'uint8)
              (ramp
               (sca-add
                (sca-mul output.s0.x.x 16)
                (sca-add
                 (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
                 (var-lookup 't72)))
               1
               16)
              (aligned 1 0))
             'int16
             16)
            (sca-broadcast (int16_t (bv #x0040 16)) 16))
           (sca-broadcast
            (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))
            16))
          'int32
          16)
         (vec-cast
          (sca-broadcast
           (sca-mul
            (sca-sub (int16_t t147) (int16_t t148))
            (int16_t (bv #x0040 16)))
           16)
          'int32
          16))
        'int64
        16)
       (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
      (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
    (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
   (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
  'int32
  16)
 (sca-broadcast (uint32_t t74) 16))
template:
  (vs-shift-right
 ...
 (vs-mpy-add
  ...
  (vs-mpy-add
   ...
   (vs-mpy-add
    ...
    (combine
     #<load-data>
     (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))))
    (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
    #f
    #f
    #f
    'int16)
   (list
    (sca-mul (sca-sub (int16_t t147) (int16_t t148)) (int16_t (bv #x0040 16))))
   #f
   #f
   #f
   'int32)
  (list (int32_t output_multiplier))
  #f
  #f
  #f
  'int64)
 (int64_t (bv #x000000000000001f 64))
 x?$2345
 x?$2346
 x?$2347)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$2357 idx) (bv #x1fffffffc0000000 64)) (bvsle (bv #xe000000000000000 64) (app abstr-vals$2357 idx)))))
optimized-halide-expr:
  (vec-shr
 (vec-cast
  (vec-max
   (vec-min
    (vec-add
     (vec-bwand
      (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
      (vec-div
       #<abstr-halide-expr>
       (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
     (vec-div
      #<abstr-halide-expr>
      (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
    (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
   (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
  'int32
  16)
 (sca-broadcast (uint32_t t74) 16))
optimized-template:
  (vs-shift-right
 ...
 #<abstr-expr>
 (int64_t (bv #x000000000000001f 64))
 x?$2345
 x?$2346
 x?$2347)
optimized Halide 0:
  (int32_t
 (bvashr (extract 31 0 (ite (bvsle (bv #xffffffff80000000 64) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (app abstr-vals$2357 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$2357 0) (bvneg (bvashr (app abstr-vals$2357 0) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (app abstr-vals$2357 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$2357 0) (bvneg (bvashr (app abstr-vals$2357 0) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (app abstr-vals$2357 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$2357 0) (bvneg (bvashr (app abstr-vals$2357 0) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (app abstr-vals$2357 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$2357 0) (bvneg (bvashr (app abstr-vals$2357 0) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64))) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (app abstr-vals$2357 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$2357 0) (bvneg (bvashr (app abstr-vals$2357 0) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (app abstr-vals$2357 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$2357 0) (bvneg (bvashr (app abstr-vals$2357 0) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (app abstr-vals$2357 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$2357 0) (bvneg (bvashr (app abstr-vals$2357 0) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (app abstr-vals$2357 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$2357 0) (bvneg (bvashr (app abstr-vals$2357 0) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bv #xffffffff80000000 64))) t74))
optimized x86 0:
  (int64_t
 (ite x?$2345 (bvadd (ite x?$2347 (bvashr (app abstr-vals$2357 0) (bv #x000000000000001f 64)) (bvlshr (app abstr-vals$2357 0) (bv #x000000000000001f 64))) (bvand (bv #x0000000000000001 64) (ite x?$2347 (bvashr (app abstr-vals$2357 0) (bv #x000000000000001e 64)) (bvlshr (app abstr-vals$2357 0) (bv #x000000000000001e 64))))) (ite x?$2347 (bvashr (app abstr-vals$2357 0) (bv #x000000000000001f 64)) (bvlshr (app abstr-vals$2357 0) (bv #x000000000000001f 64)))))
run-x86-synthesizer
halide-expr:
  (vec-shr
 (vec-cast
  (vec-max
   (vec-min
    (vec-add
     (vec-bwand
      (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
      (vec-div
       (vec-mul
        (vec-cast
         (vec-mul
          (vec-cast
           (vec-add
            (vec-mul
             (vec-cast
              (load
               (buffer input1 'uint8)
               (ramp
                (sca-add
                 (sca-mul output.s0.x.x 16)
                 (sca-add
                  (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
                  (var-lookup 't72)))
                1
                16)
               (aligned 1 0))
              'int16
              16)
             (sca-broadcast (int16_t (bv #x0040 16)) 16))
            (sca-broadcast
             (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))
             16))
           'int32
           16)
          (vec-cast
           (sca-broadcast
            (sca-mul
             (sca-sub (int16_t t147) (int16_t t148))
             (int16_t (bv #x0040 16)))
            16)
           'int32
           16))
         'int64
         16)
        (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
       (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
     (vec-div
      (vec-mul
       (vec-cast
        (vec-mul
         (vec-cast
          (vec-add
           (vec-mul
            (vec-cast
             (load
              (buffer input1 'uint8)
              (ramp
               (sca-add
                (sca-mul output.s0.x.x 16)
                (sca-add
                 (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
                 (var-lookup 't72)))
               1
               16)
              (aligned 1 0))
             'int16
             16)
            (sca-broadcast (int16_t (bv #x0040 16)) 16))
           (sca-broadcast
            (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))
            16))
          'int32
          16)
         (vec-cast
          (sca-broadcast
           (sca-mul
            (sca-sub (int16_t t147) (int16_t t148))
            (int16_t (bv #x0040 16)))
           16)
          'int32
          16))
        'int64
        16)
       (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
      (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
    (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
   (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
  'int32
  16)
 (sca-broadcast (uint32_t t74) 16))
template:
  (cast
 ...
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (vs-mpy-add
    ...
    (vs-mpy-add
     ...
     (combine
      #<load-data>
      (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))))
     (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
     #f
     #f
     #f
     'int16)
    (list
     (sca-mul
      (sca-sub (int16_t t147) (int16_t t148))
      (int16_t (bv #x0040 16))))
    #f
    #f
    #f
    'int32)
   (list (int32_t output_multiplier))
   #f
   #f
   #f
   'int64)
  (int64_t (bv #x000000000000001f 64))
  #t
  x?$2001
  #t)
 'int32
 x?$2342)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$2358 idx) (bv #x0000000040000000 64)) (bvsle (bv #xffffffffc0000000 64) (app abstr-vals$2358 idx)))))
optimized-halide-expr:
  (vec-shr
 (vec-cast #<abstr-halide-expr> 'int32 16)
 (sca-broadcast (uint32_t t74) 16))
optimized-template:
  (cast ... #<abstr-expr> 'int32 x?$2342)
optimized Halide 0:
  (int32_t (bvashr (extract 31 0 (app abstr-vals$2358 0)) t74))
optimized x86 0:
  (int32_t
 (ite x?$2342 (ite (bvslt (app abstr-vals$2358 0) (bv #xffffffff80000000 64)) (bv #x80000000 32) (ite (bvslt (bv #x000000007fffffff 64) (app abstr-vals$2358 0)) (bv #x7fffffff 32) (extract 31 0 (app abstr-vals$2358 0)))) (extract 31 0 (app abstr-vals$2358 0))))
run-x86-synthesizer
halide-expr:
  (vec-shr
 (vec-cast
  (vec-max
   (vec-min
    (vec-add
     (vec-bwand
      (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
      (vec-div
       (vec-mul
        (vec-cast
         (vec-mul
          (vec-cast
           (vec-add
            (vec-mul
             (vec-cast
              (load
               (buffer input1 'uint8)
               (ramp
                (sca-add
                 (sca-mul output.s0.x.x 16)
                 (sca-add
                  (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
                  (var-lookup 't72)))
                1
                16)
               (aligned 1 0))
              'int16
              16)
             (sca-broadcast (int16_t (bv #x0040 16)) 16))
            (sca-broadcast
             (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))
             16))
           'int32
           16)
          (vec-cast
           (sca-broadcast
            (sca-mul
             (sca-sub (int16_t t147) (int16_t t148))
             (int16_t (bv #x0040 16)))
            16)
           'int32
           16))
         'int64
         16)
        (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
       (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
     (vec-div
      (vec-mul
       (vec-cast
        (vec-mul
         (vec-cast
          (vec-add
           (vec-mul
            (vec-cast
             (load
              (buffer input1 'uint8)
              (ramp
               (sca-add
                (sca-mul output.s0.x.x 16)
                (sca-add
                 (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
                 (var-lookup 't72)))
               1
               16)
              (aligned 1 0))
             'int16
             16)
            (sca-broadcast (int16_t (bv #x0040 16)) 16))
           (sca-broadcast
            (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))
            16))
          'int32
          16)
         (vec-cast
          (sca-broadcast
           (sca-mul
            (sca-sub (int16_t t147) (int16_t t148))
            (int16_t (bv #x0040 16)))
           16)
          'int32
          16))
        'int64
        16)
       (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
      (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
    (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
   (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
  'int32
  16)
 (sca-broadcast (uint32_t t74) 16))
template:
  (vs-shift-right
 ...
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (vs-mpy-add
    ...
    (vs-mpy-add
     ...
     (combine
      #<load-data>
      (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))))
     (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
     #f
     #f
     #f
     'int16)
    (list
     (sca-mul
      (sca-sub (int16_t t147) (int16_t t148))
      (int16_t (bv #x0040 16))))
    #f
    #f
    #f
    'int32)
   (list (int32_t output_multiplier))
   #f
   #f
   #f
   'int64)
  (int64_t (bv #x000000000000001f 64))
  #t
  x?$2001
  #t)
 (union [(&& (! xi?$2354) (! xi?$2355)) #(struct:uint32_t t74)] [(|| xi?$2354 (&& xi?$2355 (! xi?$2354))) #(struct:int64_t
                                                                                                            (ite* (⊢ xi?$2354 (bv #x000000000000001e 64)) (⊢ (&& xi?$2355 (! xi?$2354)) (bv #x000000000000001f 64))))])
 #f
 #f
 #t)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$2359 idx) (bv #x0000000040000000 64)) (bvsle (bv #xffffffffc0000000 64) (app abstr-vals$2359 idx)))))
optimized-halide-expr:
  (vec-shr
 (vec-cast #<abstr-halide-expr> 'int32 16)
 (sca-broadcast (uint32_t t74) 16))
optimized-template:
  (vs-shift-right
 ...
 #<abstr-expr>
 (union [(&& (! xi?$2354) (! xi?$2355)) #(struct:uint32_t t74)] [(|| xi?$2354 (&& xi?$2355 (! xi?$2354))) #(struct:int64_t
                                                                                                            (ite* (⊢ xi?$2354 (bv #x000000000000001e 64)) (⊢ (&& xi?$2355 (! xi?$2354)) (bv #x000000000000001f 64))))])
 #f
 #f
 #t)
optimized Halide 0:
  (int32_t (bvashr (extract 31 0 (app abstr-vals$2359 0)) t74))
optimized x86 0:
  (int64_t
 (bvashr (app abstr-vals$2359 0) (ite* (⊢ (&& (! xi?$2354) (! xi?$2355)) (zero-extend t74 (bitvector 64))) (⊢ (|| xi?$2354 (&& xi?$2355 (! xi?$2354))) (ite* (⊢ xi?$2354 (bv #x000000000000001e 64)) (⊢ (&& xi?$2355 (! xi?$2354)) (bv #x000000000000001f 64)))))))
Ran synthesizer for 31 ms
(unsat)
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (vec-shr
 (vec-cast
  (vec-max
   (vec-min
    (vec-add
     (vec-bwand
      (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
      (vec-div
       (vec-mul
        (vec-cast
         (vec-mul
          (vec-cast
           (vec-add
            (vec-mul
             (vec-cast
              (load
               (buffer input1 'uint8)
               (ramp
                (sca-add
                 (sca-mul output.s0.x.x 16)
                 (sca-add
                  (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
                  (var-lookup 't72)))
                1
                16)
               (aligned 1 0))
              'int16
              16)
             (sca-broadcast (int16_t (bv #x0040 16)) 16))
            (sca-broadcast
             (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))
             16))
           'int32
           16)
          (vec-cast
           (sca-broadcast
            (sca-mul
             (sca-sub (int16_t t147) (int16_t t148))
             (int16_t (bv #x0040 16)))
            16)
           'int32
           16))
         'int64
         16)
        (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
       (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
     (vec-div
      (vec-mul
       (vec-cast
        (vec-mul
         (vec-cast
          (vec-add
           (vec-mul
            (vec-cast
             (load
              (buffer input1 'uint8)
              (ramp
               (sca-add
                (sca-mul output.s0.x.x 16)
                (sca-add
                 (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
                 (var-lookup 't72)))
               1
               16)
              (aligned 1 0))
             'int16
             16)
            (sca-broadcast (int16_t (bv #x0040 16)) 16))
           (sca-broadcast
            (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))
            16))
          'int32
          16)
         (vec-cast
          (sca-broadcast
           (sca-mul
            (sca-sub (int16_t t147) (int16_t t148))
            (int16_t (bv #x0040 16)))
           16)
          'int32
          16))
        'int64
        16)
       (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
      (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
    (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
   (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
  'int32
  16)
 (sca-broadcast (uint32_t t74) 16))
template:
  (vs-shift-right
 ...
 (union [x?$2360 #(struct:cast
                   ...
                   #(struct:vs-shift-right
                     ...
                     #(struct:vs-mpy-add
                       ...
                       #(struct:vs-mpy-add
                         ...
                         #(struct:vs-mpy-add
                           ...
                           #<combine:
                            #<load-data>
                            #(struct:broadcast
                              ...
                              #(struct:sca-mul
                                #(struct:int16_t t146)
                                #(struct:int16_t (bv #xffc0 16))))>
                           (#(struct:int8_t (bv #x01 8))
                            #(struct:int16_t (bv #x0040 16)))
                           #f
                           #f
                           #f
                           int16)
                         (#(struct:sca-mul
                            #(struct:sca-sub
                              #(struct:int16_t t147)
                              #(struct:int16_t t148))
                            #(struct:int16_t (bv #x0040 16))))
                         #f
                         #f
                         #f
                         int32)
                       (#(struct:int32_t output_multiplier))
                       #f
                       #f
                       #f
                       int64)
                     #(struct:int64_t (bv #x000000000000001f 64))
                     #t
                     x?$2001
                     #t)
                   int32
                   #f)] [(! x?$2360) #(struct:broadcast
                                       ...
                                       #(struct:uint32_t t74))])
 (union [(&& (! xi?$2361) (! xi?$2362)) #(struct:uint32_t t74)] [(|| xi?$2361 (&& xi?$2362 (! xi?$2361))) #(struct:int64_t
                                                                                                            (ite* (⊢ xi?$2361 (bv #x000000000000001e 64)) (⊢ (&& xi?$2362 (! xi?$2361)) (bv #x000000000000001f 64))))])
 #f
 #f
 #t)
axioms:
  '()
optimized-halide-expr:
  (vec-shr
 (vec-cast
  (vec-max
   (vec-min
    (vec-add
     (vec-bwand
      (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
      (vec-div
       (vec-mul
        (vec-cast
         (vec-mul
          (vec-cast
           (vec-add
            (vec-mul
             (vec-cast
              (load
               (buffer input1 'uint8)
               (ramp
                (sca-add
                 (sca-mul output.s0.x.x 16)
                 (sca-add
                  (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
                  (var-lookup 't72)))
                1
                16)
               (aligned 1 0))
              'int16
              16)
             (sca-broadcast (int16_t (bv #x0040 16)) 16))
            (sca-broadcast
             (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))
             16))
           'int32
           16)
          (vec-cast
           (sca-broadcast
            (sca-mul
             (sca-sub (int16_t t147) (int16_t t148))
             (int16_t (bv #x0040 16)))
            16)
           'int32
           16))
         'int64
         16)
        (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
       (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
     (vec-div
      (vec-mul
       (vec-cast
        (vec-mul
         (vec-cast
          (vec-add
           (vec-mul
            (vec-cast
             (load
              (buffer input1 'uint8)
              (ramp
               (sca-add
                (sca-mul output.s0.x.x 16)
                (sca-add
                 (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
                 (var-lookup 't72)))
               1
               16)
              (aligned 1 0))
             'int16
             16)
            (sca-broadcast (int16_t (bv #x0040 16)) 16))
           (sca-broadcast
            (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))
            16))
          'int32
          16)
         (vec-cast
          (sca-broadcast
           (sca-mul
            (sca-sub (int16_t t147) (int16_t t148))
            (int16_t (bv #x0040 16)))
           16)
          'int32
          16))
        'int64
        16)
       (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
      (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
    (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
   (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
  'int32
  16)
 (sca-broadcast (uint32_t t74) 16))
optimized-template:
  (vs-shift-right
 ...
 (union [x?$2360 #(struct:cast
                   ...
                   #(struct:vs-shift-right
                     ...
                     #(struct:vs-mpy-add
                       ...
                       #(struct:vs-mpy-add
                         ...
                         #(struct:vs-mpy-add
                           ...
                           #<combine:
                            #<load-data>
                            #(struct:broadcast
                              ...
                              #(struct:sca-mul
                                #(struct:int16_t t146)
                                #(struct:int16_t (bv #xffc0 16))))>
                           (#(struct:int8_t (bv #x01 8))
                            #(struct:int16_t (bv #x0040 16)))
                           #f
                           #f
                           #f
                           int16)
                         (#(struct:sca-mul
                            #(struct:sca-sub
                              #(struct:int16_t t147)
                              #(struct:int16_t t148))
                            #(struct:int16_t (bv #x0040 16))))
                         #f
                         #f
                         #f
                         int32)
                       (#(struct:int32_t output_multiplier))
                       #f
                       #f
                       #f
                       int64)
                     #(struct:int64_t (bv #x000000000000001f 64))
                     #t
                     x?$2001
                     #t)
                   int32
                   #f)] [(! x?$2360) #(struct:broadcast
                                       ...
                                       #(struct:uint32_t t74))])
 (union [(&& (! xi?$2361) (! xi?$2362)) #(struct:uint32_t t74)] [(|| xi?$2361 (&& xi?$2362 (! xi?$2361))) #(struct:int64_t
                                                                                                            (ite* (⊢ xi?$2361 (bv #x000000000000001e 64)) (⊢ (&& xi?$2362 (! xi?$2361)) (bv #x000000000000001f 64))))])
 #f
 #f
 #t)
optimized Halide 0:
  (int32_t
 (bvashr (extract 31 0 (ite (bvsle (bv #xffffffff80000000 64) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64))) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bv #xffffffff80000000 64))) t74))
optimized x86 0:
  (union [x?$2360 #(struct:int32_t
                  (bvashr (ite x?$2360 (extract 31 0 (bvadd (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001f 64)) (bvand (bv #x0000000000000001 64) (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001e 64))))) t74) (ite* (⊢ (|| (&& x?$2360 (&& (! xi?$2361) (! xi?$2362))) (&& x?$2360 (|| xi?$2361 (&& xi?$2362 (! xi?$2361))))) (ite* (⊢ (&& x?$2360 (&& (! xi?$2361) (! xi?$2362))) t74) (⊢ (&& x?$2360 (|| xi?$2361 (&& xi?$2362 (! xi?$2361)))) (extract 31 0 (ite* (⊢ xi?$2361 (bv #x000000000000001e 64)) (⊢ (&& xi?$2362 (! xi?$2361)) (bv #x000000000000001f 64))))))) (⊢ (|| (&& (! x?$2360) (&& (! xi?$2361) (! xi?$2362))) (&& (! x?$2360) (|| xi?$2361 (&& xi?$2362 (! xi?$2361))))) (ite* (⊢ (&& (! x?$2360) (&& (! xi?$2361) (! xi?$2362))) t74) (⊢ (&& (! x?$2360) (|| xi?$2361 (&& xi?$2362 (! xi?$2361)))) (extract 31 0 (ite* (⊢ xi?$2361 (bv #x000000000000001e 64)) (⊢ (&& xi?$2362 (! xi?$2361)) (bv #x000000000000001f 64))))))))))] [(! x?$2360) #(struct:uint32_t
bvashr (ite x?$2360 (extract 31 0 (bvadd (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001f 64)) (bvand (bv #x0000000000000001 64) (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001e 64))))) t74) (ite* (⊢ (|| (&& x?$2360 (&& (! xi?$2361) (! xi?$2362))) (&& x?$2360 (|| xi?$2361 (&& xi?$2362 (! xi?$2361))))) (ite* (⊢ (&& x?$2360 (&& (! xi?$2361) (! xi?$2362))) t74) (⊢ (&& x?$2360 (|| xi?$2361 (&& xi?$2362 (! xi?$2361)))) (extract 31 0 (ite* (⊢ xi?$2361 (bv #x000000000000001e 64)) (⊢ (&& xi?$2362 (! xi?$2361)) (bv #x000000000000001f 64))))))) (⊢ (|| (&& (! x?$2360) (&& (! xi?$2361) (! xi?$2362))) (&& (! x?$2360) (|| xi?$2361 (&& xi?$2362 (! xi?$2361))))) (ite* (⊢ (&& (! x?$2360) (&& (! xi?$2361) (! xi?$2362))) t74) (⊢ (&& (! x?$2360) (|| xi?$2361 (&& xi?$2362 (! xi?$2361)))) (extract 31 0 (ite* (⊢ xi?$2361 (bv #x000000000000001e 64)) (⊢ (&& xi?$2362 (! xi?$2361)) (bv #x000000000000001f 64))))))))))])
Ran synthesizer for 24538 ms
(model
 [x?$2360 #t]
 [xi?$2361 #f]
 [xi?$2362 #f])
(vec-shr
 (vec-cast
  (vec-max
   (vec-min
    (vec-add
     (vec-bwand
      (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
      (vec-div
       (vec-mul
        (vec-cast
         (vec-mul
          (vec-cast
           (vec-add
            (vec-mul
             (vec-cast
              (load
               (buffer input1 'uint8)
               (ramp
                (sca-add
                 (sca-mul output.s0.x.x 16)
                 (sca-add
                  (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
                  (var-lookup 't72)))
                1
                16)
               (aligned 1 0))
              'int16
              16)
             (sca-broadcast (int16_t (bv #x0040 16)) 16))
            (sca-broadcast
             (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))
             16))
           'int32
           16)
          (vec-cast
           (sca-broadcast
            (sca-mul
             (sca-sub (int16_t t147) (int16_t t148))
             (int16_t (bv #x0040 16)))
            16)
           'int32
           16))
         'int64
         16)
        (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
       (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
     (vec-div
      (vec-mul
       (vec-cast
        (vec-mul
         (vec-cast
          (vec-add
           (vec-mul
            (vec-cast
             (load
              (buffer input1 'uint8)
              (ramp
               (sca-add
                (sca-mul output.s0.x.x 16)
                (sca-add
                 (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
                 (var-lookup 't72)))
               1
               16)
              (aligned 1 0))
             'int16
             16)
            (sca-broadcast (int16_t (bv #x0040 16)) 16))
           (sca-broadcast
            (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))
            16))
          'int32
          16)
         (vec-cast
          (sca-broadcast
           (sca-mul
            (sca-sub (int16_t t147) (int16_t t148))
            (int16_t (bv #x0040 16)))
           16)
          'int32
          16))
        'int64
        16)
       (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
      (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
    (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
   (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
  'int32
  16)
 (sca-broadcast (uint32_t t74) 16))
(vs-shift-right
 ...
 (cast
  ...
  (vs-shift-right
   ...
   (vs-mpy-add
    ...
    (vs-mpy-add
     ...
     (vs-mpy-add
      ...
      (combine
       #<load-data>
       (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))))
      (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
      #f
      #f
      #f
      'int16)
     (list
      (sca-mul
       (sca-sub (int16_t t147) (int16_t t148))
       (int16_t (bv #x0040 16))))
     #f
     #f
     #f
     'int32)
    (list (int32_t output_multiplier))
    #f
    #f
    #f
    'int64)
   (int64_t (bv #x000000000000001f 64))
   #t
   x?$2001
   #t)
  'int32
  #f)
 (uint32_t t74)
 #f
 #f
 #t)
Ran bounds analysis for 7006 ms
Ran bounds analysis for 4724 ms
"Extended success?"
#t
(vs-shift-right
 ...
 (cast
  ...
  (vs-shift-right
   ...
   (vs-mpy-add
    ...
    (vs-mpy-add
     ...
     (vs-mpy-add
      ...
      (combine
       #<load-data>
       (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))))
      (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
      #f
      #f
      #f
      'int16)
     (list
      (sca-mul
       (sca-sub (int16_t t147) (int16_t t148))
       (int16_t (bv #x0040 16))))
     #f
     #f
     #f
     'int32)
    (list (int32_t output_multiplier))
    #f
    #f
    #f
    'int64)
   (int64_t (bv #x000000000000001f 64))
   #t
   x?$2001
   #t)
  'int32
  #f)
 (uint32_t t74)
 #f
 #f
 #t)
"Building Expr:"
(sca-broadcast (sca-lt (uint32_t (bv #x00000000 32)) (uint32_t t74)) 16)
"Fold templates"
'()
here()

"Replace templates"
'()
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (sca-broadcast (sca-lt (uint32_t (bv #x00000000 32)) (uint32_t t74)) 16)
template:
  (broadcast ... (sca-lt (uint32_t (bv #x00000000 32)) (uint32_t t74)))
axioms:
  '()
optimized-halide-expr:
  (sca-broadcast (sca-lt (uint32_t (bv #x00000000 32)) (uint32_t t74)) 16)
optimized-template:
  (broadcast ... (sca-lt (uint32_t (bv #x00000000 32)) (uint32_t t74)))
optimized Halide 0:
  (uint1_t (! (bveq (bv #x00000000 32) t74)))
optimized x86 0:
  (uint1_t (! (bveq (bv #x00000000 32) t74)))
Ran synthesizer for 28 ms
(model)
(sca-broadcast (sca-lt (uint32_t (bv #x00000000 32)) (uint32_t t74)) 16)
(broadcast ... (sca-lt (uint32_t (bv #x00000000 32)) (uint32_t t74)))
"Extended success?"
#t
(broadcast ... (sca-lt (uint32_t (bv #x00000000 32)) (uint32_t t74)))
"Building Expr:"
(sca-broadcast (int32_t (bv #x00000001 32)) 16)
"Fold templates"
'()
here()

"Replace templates"
'()
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (sca-broadcast (int32_t (bv #x00000001 32)) 16)
template:
  (broadcast ... (int32_t (bv #x00000001 32)))
axioms:
  '()
optimized-halide-expr:
  (sca-broadcast (int32_t (bv #x00000001 32)) 16)
optimized-template:
  (broadcast ... (int32_t (bv #x00000001 32)))
optimized Halide 0:
  (int32_t (bv #x00000001 32))
optimized x86 0:
  (int32_t (bv #x00000001 32))
Ran synthesizer for 28 ms
(model)
(sca-broadcast (int32_t (bv #x00000001 32)) 16)
(broadcast ... (int32_t (bv #x00000001 32)))
Ran bounds analysis for 37 ms
Ran bounds analysis for 26 ms
"Extended success?"
#t
(broadcast ... (int32_t (bv #x00000001 32)))
"Building Expr:"
(sca-broadcast (int32_t (bv #x00000000 32)) 16)
"Fold templates"
'()
here()

"Replace templates"
'()
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (sca-broadcast (int32_t (bv #x00000000 32)) 16)
template:
  (broadcast ... (int32_t (bv #x00000000 32)))
axioms:
  '()
optimized-halide-expr:
  (sca-broadcast (int32_t (bv #x00000000 32)) 16)
optimized-template:
  (broadcast ... (int32_t (bv #x00000000 32)))
optimized Halide 0:
  (int32_t (bv #x00000000 32))
optimized x86 0:
  (int32_t (bv #x00000000 32))
Ran synthesizer for 29 ms
(model)
(sca-broadcast (int32_t (bv #x00000000 32)) 16)
(broadcast ... (int32_t (bv #x00000000 32)))
Ran bounds analysis for 39 ms
Ran bounds analysis for 25 ms
"Extended success?"
#t
(broadcast ... (int32_t (bv #x00000000 32)))
"Building Expr:"
(vec-if
 (sca-broadcast (sca-lt (uint32_t (bv #x00000000 32)) (uint32_t t74)) 16)
 (sca-broadcast (int32_t (bv #x00000001 32)) 16)
 (sca-broadcast (int32_t (bv #x00000000 32)) 16))
"Fold templates"
'()
here()

"Replace templates"
'()
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (vec-if
 (sca-broadcast (sca-lt (uint32_t (bv #x00000000 32)) (uint32_t t74)) 16)
 (sca-broadcast (int32_t (bv #x00000001 32)) 16)
 (sca-broadcast (int32_t (bv #x00000000 32)) 16))
template:
  (select
 ...
 (broadcast ... (sca-lt (uint32_t (bv #x00000000 32)) (uint32_t t74)))
 (broadcast ... (int32_t (bv #x00000001 32)))
 (broadcast ... (int32_t (bv #x00000000 32))))
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$2364 idx) (bv #x00000001 32)) (bvsle (bv #x00000001 32) (app abstr-vals$2364 idx))))
 (forall (idx) (&& (bvsle (app abstr-vals$2365 idx) (bv #x00000000 32)) (bvsle (bv #x00000000 32) (app abstr-vals$2365 idx)))))
optimized-halide-expr:
  (vec-if #<abstr-halide-expr> #<abstr-halide-expr> #<abstr-halide-expr>)
optimized-template:
  (select ... #<abstr-expr> #<abstr-expr> #<abstr-expr>)
optimized Halide 0:
  (int32_t
 (ite (app abstr-vals$2363 0) (app abstr-vals$2364 0) (app abstr-vals$2365 0)))
optimized x86 0:
  (int32_t
 (ite (app abstr-vals$2363 0) (app abstr-vals$2364 0) (app abstr-vals$2365 0)))
Ran synthesizer for 63 ms
(model)
(vec-if #<abstr-halide-expr> #<abstr-halide-expr> #<abstr-halide-expr>)
(select
 ...
 (broadcast ... (sca-lt (uint32_t (bv #x00000000 32)) (uint32_t t74)))
 (broadcast ... (int32_t (bv #x00000001 32)))
 (broadcast ... (int32_t (bv #x00000000 32))))
Ran bounds analysis for 43 ms
Ran bounds analysis for 52 ms
"Extended success?"
#t
(select
 ...
 (broadcast ... (sca-lt (uint32_t (bv #x00000000 32)) (uint32_t t74)))
 (broadcast ... (int32_t (bv #x00000001 32)))
 (broadcast ... (int32_t (bv #x00000000 32))))
"Building Expr:"
(sca-broadcast (sca-sub (uint32_t t74) (uint32_t (bv #x00000001 32))) 16)
"Fold templates"
'()
here()

"Replace templates"
'()
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (sca-broadcast (sca-sub (uint32_t t74) (uint32_t (bv #x00000001 32))) 16)
template:
  (broadcast ... (sca-sub (uint32_t t74) (uint32_t (bv #x00000001 32))))
axioms:
  '()
optimized-halide-expr:
  (sca-broadcast (sca-sub (uint32_t t74) (uint32_t (bv #x00000001 32))) 16)
optimized-template:
  (broadcast ... (sca-sub (uint32_t t74) (uint32_t (bv #x00000001 32))))
optimized Halide 0:
  (uint32_t (bvadd (bv #xffffffff 32) t74))
optimized x86 0:
  (uint32_t (bvadd (bv #xffffffff 32) t74))
Ran synthesizer for 29 ms
(model)
(sca-broadcast (sca-sub (uint32_t t74) (uint32_t (bv #x00000001 32))) 16)
(broadcast ... (sca-sub (uint32_t t74) (uint32_t (bv #x00000001 32))))
Ran bounds analysis for 54 ms
Ran bounds analysis for 29 ms
"Extended success?"
#t
(broadcast ... (sca-sub (uint32_t t74) (uint32_t (bv #x00000001 32))))
"Building Expr:"
(vec-shr
 (vec-cast
  (vec-max
   (vec-min
    (vec-add
     (vec-bwand
      (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
      (vec-div
       (vec-mul
        (vec-cast
         (vec-mul
          (vec-cast
           (vec-add
            (vec-mul
             (vec-cast
              (load
               (buffer input1 'uint8)
               (ramp
                (sca-add
                 (sca-mul output.s0.x.x 16)
                 (sca-add
                  (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
                  (var-lookup 't72)))
                1
                16)
               (aligned 1 0))
              'int16
              16)
             (sca-broadcast (int16_t (bv #x0040 16)) 16))
            (sca-broadcast
             (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))
             16))
           'int32
           16)
          (vec-cast
           (sca-broadcast
            (sca-mul
             (sca-sub (int16_t t147) (int16_t t148))
             (int16_t (bv #x0040 16)))
            16)
           'int32
           16))
         'int64
         16)
        (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
       (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
     (vec-div
      (vec-mul
       (vec-cast
        (vec-mul
         (vec-cast
          (vec-add
           (vec-mul
            (vec-cast
             (load
              (buffer input1 'uint8)
              (ramp
               (sca-add
                (sca-mul output.s0.x.x 16)
                (sca-add
                 (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
                 (var-lookup 't72)))
               1
               16)
              (aligned 1 0))
             'int16
             16)
            (sca-broadcast (int16_t (bv #x0040 16)) 16))
           (sca-broadcast
            (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))
            16))
          'int32
          16)
         (vec-cast
          (sca-broadcast
           (sca-mul
            (sca-sub (int16_t t147) (int16_t t148))
            (int16_t (bv #x0040 16)))
           16)
          'int32
          16))
        'int64
        16)
       (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
      (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
    (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
   (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
  'int32
  16)
 (sca-broadcast (sca-sub (uint32_t t74) (uint32_t (bv #x00000001 32))) 16))
"Fold templates"
(list
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (vs-mpy-add
    ...
    (vs-mpy-add
     ...
     (combine
      #<load-data>
      (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))))
     (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
     #f
     #f
     #f
     'int16)
    (list
     (sca-mul
      (sca-sub (int16_t t147) (int16_t t148))
      (int16_t (bv #x0040 16))))
    #f
    #f
    #f
    'int32)
   (list (int32_t output_multiplier))
   #f
   #f
   #f
   'int64)
  (union [(&& (! xi?$2370) (! xi?$2371)) #(struct:sca-sub
                                           #(struct:uint32_t t74)
                                           #(struct:uint32_t
                                             (bv #x00000001 32)))] [(|| xi?$2370 (&& xi?$2371 (! xi?$2370))) #(struct:int64_t
                                                                                                               (ite* (⊢ xi?$2370 (bv #x000000000000001e 64)) (⊢ (&& xi?$2371 (! xi?$2370)) (bv #x000000000000001f 64))))])
  #t
  x?$2001
  #t)
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (vs-mpy-add
    ...
    (vs-mpy-add
     ...
     (combine
      #<load-data>
      (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))))
     (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
     #f
     #f
     #f
     'int16)
    (list
     (sca-mul
      (sca-sub (int16_t t147) (int16_t t148))
      (int16_t (bv #x0040 16))))
    #f
    #f
    #f
    'int32)
   (list (int32_t output_multiplier))
   #f
   #f
   #f
   'int64)
  (int64_t (bv #x000000000000001f 64))
  x?$2372
  x?$2373
  x?$2374)
 (cast
  ...
  (vs-shift-right
   ...
   (vs-mpy-add
    ...
    (vs-mpy-add
     ...
     (vs-mpy-add
      ...
      (combine
       #<load-data>
       (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))))
      (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
      #f
      #f
      #f
      'int16)
     (list
      (sca-mul
       (sca-sub (int16_t t147) (int16_t t148))
       (int16_t (bv #x0040 16))))
     #f
     #f
     #f
     'int32)
    (list (int32_t output_multiplier))
    #f
    #f
    #f
    'int64)
   (int64_t (bv #x000000000000001f 64))
   #t
   x?$2001
   #t)
  'int32
  x?$2369))
here(#(struct:vs-shift-right ... #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t146) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f #f #f int16) (#(struct:sca-mul #(struct:sca-sub #(struct:int16_t t147) #(struct:int16_t t148)) #(struct:int16_t (bv #x0040 16)))) #f #f #f int32) (#(struct:int32_t output_multiplier)) #f #f #f int64) (union #:size 2 #:hash 94964160361129) #t x?$2001 #t) #(struct:vs-shift-right ... #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t146) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f #f #f int16) (#(struct:sca-mul #(struct:sca-sub #(struct:int16_t t147) #(struct:int16_t t148)) #(struct:int16_t (bv #x0040 16)))) #f #f #f int32) (#(struct:int32_t output_multiplier)) #f #f #f int64) #(struct:int64_t (bv #x000000000000001f 64)) x?$2372 x?$2373 x?$2374) #(struct:cast ... #(struct:vs-shift-right ... #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t146) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f #f #f int16) (#(struct:sca-mul #(struct:sca-sub #(struct:int16_t t147) #(struct:int16_t t148)) #(struct:int16_t (bv #x0040 16)))) #f #f #f int32) (#(struct:int32_t output_multiplier)) #f #f #f int64) #(struct:int64_t (bv #x000000000000001f 64)) #t x?$2001 #t) int32 x?$2369))

"Replace templates"
(list
 (vs-shift-right
  ...
  (vs-shift-right
   ...
   (vs-mpy-add
    ...
    (vs-mpy-add
     ...
     (vs-mpy-add
      ...
      (combine
       #<load-data>
       (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))))
      (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
      #f
      #f
      #f
      'int16)
     (list
      (sca-mul
       (sca-sub (int16_t t147) (int16_t t148))
       (int16_t (bv #x0040 16))))
     #f
     #f
     #f
     'int32)
    (list (int32_t output_multiplier))
    #f
    #f
    #f
    'int64)
   (int64_t (bv #x000000000000001f 64))
   #t
   x?$2001
   #t)
  (union [(&& (! xi?$2381) (! xi?$2382)) #(struct:sca-sub
                                           #(struct:uint32_t t74)
                                           #(struct:uint32_t
                                             (bv #x00000001 32)))] [(|| xi?$2381 (&& xi?$2382 (! xi?$2381))) #(struct:int64_t
                                                                                                               (ite* (⊢ xi?$2381 (bv #x000000000000001e 64)) (⊢ (&& xi?$2382 (! xi?$2381)) (bv #x000000000000001f 64))))])
  #f
  #f
  #t))
run-x86-synthesizer
halide-expr:
  (vec-shr
 (vec-cast
  (vec-max
   (vec-min
    (vec-add
     (vec-bwand
      (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
      (vec-div
       (vec-mul
        (vec-cast
         (vec-mul
          (vec-cast
           (vec-add
            (vec-mul
             (vec-cast
              (load
               (buffer input1 'uint8)
               (ramp
                (sca-add
                 (sca-mul output.s0.x.x 16)
                 (sca-add
                  (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
                  (var-lookup 't72)))
                1
                16)
               (aligned 1 0))
              'int16
              16)
             (sca-broadcast (int16_t (bv #x0040 16)) 16))
            (sca-broadcast
             (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))
             16))
           'int32
           16)
          (vec-cast
           (sca-broadcast
            (sca-mul
             (sca-sub (int16_t t147) (int16_t t148))
             (int16_t (bv #x0040 16)))
            16)
           'int32
           16))
         'int64
         16)
        (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
       (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
     (vec-div
      (vec-mul
       (vec-cast
        (vec-mul
         (vec-cast
          (vec-add
           (vec-mul
            (vec-cast
             (load
              (buffer input1 'uint8)
              (ramp
               (sca-add
                (sca-mul output.s0.x.x 16)
                (sca-add
                 (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
                 (var-lookup 't72)))
               1
               16)
              (aligned 1 0))
             'int16
             16)
            (sca-broadcast (int16_t (bv #x0040 16)) 16))
           (sca-broadcast
            (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))
            16))
          'int32
          16)
         (vec-cast
          (sca-broadcast
           (sca-mul
            (sca-sub (int16_t t147) (int16_t t148))
            (int16_t (bv #x0040 16)))
           16)
          'int32
          16))
        'int64
        16)
       (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
      (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
    (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
   (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
  'int32
  16)
 (sca-broadcast (sca-sub (uint32_t t74) (uint32_t (bv #x00000001 32))) 16))
template:
  (vs-shift-right
 ...
 (vs-mpy-add
  ...
  (vs-mpy-add
   ...
   (vs-mpy-add
    ...
    (combine
     #<load-data>
     (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))))
    (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
    #f
    #f
    #f
    'int16)
   (list
    (sca-mul (sca-sub (int16_t t147) (int16_t t148)) (int16_t (bv #x0040 16))))
   #f
   #f
   #f
   'int32)
  (list (int32_t output_multiplier))
  #f
  #f
  #f
  'int64)
 (union [(&& (! xi?$2370) (! xi?$2371)) #(struct:sca-sub
                                          #(struct:uint32_t t74)
                                          #(struct:uint32_t
                                            (bv #x00000001 32)))] [(|| xi?$2370 (&& xi?$2371 (! xi?$2370))) #(struct:int64_t
                                                                                                              (ite* (⊢ xi?$2370 (bv #x000000000000001e 64)) (⊢ (&& xi?$2371 (! xi?$2370)) (bv #x000000000000001f 64))))])
 #t
 x?$2001
 #t)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$2383 idx) (bv #x1fffffffc0000000 64)) (bvsle (bv #xe000000000000000 64) (app abstr-vals$2383 idx)))))
optimized-halide-expr:
  (vec-shr
 (vec-cast
  (vec-max
   (vec-min
    (vec-add
     (vec-bwand
      (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
      (vec-div
       #<abstr-halide-expr>
       (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
     (vec-div
      #<abstr-halide-expr>
      (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
    (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
   (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
  'int32
  16)
 (sca-broadcast (sca-sub (uint32_t t74) (uint32_t (bv #x00000001 32))) 16))
optimized-template:
  (vs-shift-right
 ...
 #<abstr-expr>
 (union [(&& (! xi?$2370) (! xi?$2371)) #(struct:sca-sub
                                          #(struct:uint32_t t74)
                                          #(struct:uint32_t
                                            (bv #x00000001 32)))] [(|| xi?$2370 (&& xi?$2371 (! xi?$2370))) #(struct:int64_t
                                                                                                              (ite* (⊢ xi?$2370 (bv #x000000000000001e 64)) (⊢ (&& xi?$2371 (! xi?$2370)) (bv #x000000000000001f 64))))])
 #t
 x?$2001
 #t)
optimized Halide 0:
  (int32_t
 (bvashr (extract 31 0 (ite (bvsle (bv #xffffffff80000000 64) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (app abstr-vals$2383 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$2383 0) (bvneg (bvashr (app abstr-vals$2383 0) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (app abstr-vals$2383 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$2383 0) (bvneg (bvashr (app abstr-vals$2383 0) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (app abstr-vals$2383 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$2383 0) (bvneg (bvashr (app abstr-vals$2383 0) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (app abstr-vals$2383 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$2383 0) (bvneg (bvashr (app abstr-vals$2383 0) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64))) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (app abstr-vals$2383 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$2383 0) (bvneg (bvashr (app abstr-vals$2383 0) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (app abstr-vals$2383 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$2383 0) (bvneg (bvashr (app abstr-vals$2383 0) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (app abstr-vals$2383 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$2383 0) (bvneg (bvashr (app abstr-vals$2383 0) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (app abstr-vals$2383 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$2383 0) (bvneg (bvashr (app abstr-vals$2383 0) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bv #xffffffff80000000 64))) (bvadd (bv #xffffffff 32) t74)))
optimized x86 0:
  (int64_t
 (bvadd (bvashr (app abstr-vals$2383 0) (ite* (⊢ (&& (! xi?$2370) (! xi?$2371)) (zero-extend (bvadd (bv #xffffffff 32) t74) (bitvector 64))) (⊢ (|| xi?$2370 (&& xi?$2371 (! xi?$2370))) (ite* (⊢ xi?$2370 (bv #x000000000000001e 64)) (⊢ (&& xi?$2371 (! xi?$2370)) (bv #x000000000000001f 64)))))) (bvand (ite (bvslt (bv #x0000000000000000 64) (ite* (⊢ (&& (! xi?$2370) (! xi?$2371)) (zero-extend (bvadd (bv #xffffffff 32) t74) (bitvector 64))) (⊢ (|| xi?$2370 (&& xi?$2371 (! xi?$2370))) (ite* (⊢ xi?$2370 (bv #x000000000000001e 64)) (⊢ (&& xi?$2371 (! xi?$2370)) (bv #x000000000000001f 64)))))) (bv #x0000000000000001 64) (bv #x0000000000000000 64)) (bvashr (app abstr-vals$2383 0) (bvadd (bv #xffffffffffffffff 64) (ite* (⊢ (&& (! xi?$2370) (! xi?$2371)) (zero-extend (bvadd (bv #xffffffff 32) t74) (bitvector 64))) (⊢ (|| xi?$2370 (&& xi?$2371 (! xi?$2370))) (ite* (⊢ xi?$2370 (bv #x000000000000001e 64)) (⊢ (&& xi?$2371 (! xi?$2370)) (bv #x000000000000001f 64))))))))))
Ran synthesizer for 35 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-shr
 (vec-cast
  (vec-max
   (vec-min
    (vec-add
     (vec-bwand
      (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
      (vec-div
       (vec-mul
        (vec-cast
         (vec-mul
          (vec-cast
           (vec-add
            (vec-mul
             (vec-cast
              (load
               (buffer input1 'uint8)
               (ramp
                (sca-add
                 (sca-mul output.s0.x.x 16)
                 (sca-add
                  (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
                  (var-lookup 't72)))
                1
                16)
               (aligned 1 0))
              'int16
              16)
             (sca-broadcast (int16_t (bv #x0040 16)) 16))
            (sca-broadcast
             (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))
             16))
           'int32
           16)
          (vec-cast
           (sca-broadcast
            (sca-mul
             (sca-sub (int16_t t147) (int16_t t148))
             (int16_t (bv #x0040 16)))
            16)
           'int32
           16))
         'int64
         16)
        (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
       (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
     (vec-div
      (vec-mul
       (vec-cast
        (vec-mul
         (vec-cast
          (vec-add
           (vec-mul
            (vec-cast
             (load
              (buffer input1 'uint8)
              (ramp
               (sca-add
                (sca-mul output.s0.x.x 16)
                (sca-add
                 (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
                 (var-lookup 't72)))
               1
               16)
              (aligned 1 0))
             'int16
             16)
            (sca-broadcast (int16_t (bv #x0040 16)) 16))
           (sca-broadcast
            (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))
            16))
          'int32
          16)
         (vec-cast
          (sca-broadcast
           (sca-mul
            (sca-sub (int16_t t147) (int16_t t148))
            (int16_t (bv #x0040 16)))
           16)
          'int32
          16))
        'int64
        16)
       (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
      (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
    (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
   (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
  'int32
  16)
 (sca-broadcast (sca-sub (uint32_t t74) (uint32_t (bv #x00000001 32))) 16))
template:
  (vs-shift-right
 ...
 (vs-mpy-add
  ...
  (vs-mpy-add
   ...
   (vs-mpy-add
    ...
    (combine
     #<load-data>
     (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))))
    (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
    #f
    #f
    #f
    'int16)
   (list
    (sca-mul (sca-sub (int16_t t147) (int16_t t148)) (int16_t (bv #x0040 16))))
   #f
   #f
   #f
   'int32)
  (list (int32_t output_multiplier))
  #f
  #f
  #f
  'int64)
 (int64_t (bv #x000000000000001f 64))
 x?$2372
 x?$2373
 x?$2374)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$2384 idx) (bv #x1fffffffc0000000 64)) (bvsle (bv #xe000000000000000 64) (app abstr-vals$2384 idx)))))
optimized-halide-expr:
  (vec-shr
 (vec-cast
  (vec-max
   (vec-min
    (vec-add
     (vec-bwand
      (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
      (vec-div
       #<abstr-halide-expr>
       (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
     (vec-div
      #<abstr-halide-expr>
      (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
    (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
   (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
  'int32
  16)
 (sca-broadcast (sca-sub (uint32_t t74) (uint32_t (bv #x00000001 32))) 16))
optimized-template:
  (vs-shift-right
 ...
 #<abstr-expr>
 (int64_t (bv #x000000000000001f 64))
 x?$2372
 x?$2373
 x?$2374)
optimized Halide 0:
  (int32_t
 (bvashr (extract 31 0 (ite (bvsle (bv #xffffffff80000000 64) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (app abstr-vals$2384 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$2384 0) (bvneg (bvashr (app abstr-vals$2384 0) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (app abstr-vals$2384 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$2384 0) (bvneg (bvashr (app abstr-vals$2384 0) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (app abstr-vals$2384 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$2384 0) (bvneg (bvashr (app abstr-vals$2384 0) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (app abstr-vals$2384 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$2384 0) (bvneg (bvashr (app abstr-vals$2384 0) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64))) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (app abstr-vals$2384 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$2384 0) (bvneg (bvashr (app abstr-vals$2384 0) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (app abstr-vals$2384 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$2384 0) (bvneg (bvashr (app abstr-vals$2384 0) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (app abstr-vals$2384 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$2384 0) (bvneg (bvashr (app abstr-vals$2384 0) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (app abstr-vals$2384 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$2384 0) (bvneg (bvashr (app abstr-vals$2384 0) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bv #xffffffff80000000 64))) (bvadd (bv #xffffffff 32) t74)))
optimized x86 0:
  (int64_t
 (ite x?$2372 (bvadd (ite x?$2374 (bvashr (app abstr-vals$2384 0) (bv #x000000000000001f 64)) (bvlshr (app abstr-vals$2384 0) (bv #x000000000000001f 64))) (bvand (bv #x0000000000000001 64) (ite x?$2374 (bvashr (app abstr-vals$2384 0) (bv #x000000000000001e 64)) (bvlshr (app abstr-vals$2384 0) (bv #x000000000000001e 64))))) (ite x?$2374 (bvashr (app abstr-vals$2384 0) (bv #x000000000000001f 64)) (bvlshr (app abstr-vals$2384 0) (bv #x000000000000001f 64)))))
run-x86-synthesizer
halide-expr:
  (vec-shr
 (vec-cast
  (vec-max
   (vec-min
    (vec-add
     (vec-bwand
      (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
      (vec-div
       (vec-mul
        (vec-cast
         (vec-mul
          (vec-cast
           (vec-add
            (vec-mul
             (vec-cast
              (load
               (buffer input1 'uint8)
               (ramp
                (sca-add
                 (sca-mul output.s0.x.x 16)
                 (sca-add
                  (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
                  (var-lookup 't72)))
                1
                16)
               (aligned 1 0))
              'int16
              16)
             (sca-broadcast (int16_t (bv #x0040 16)) 16))
            (sca-broadcast
             (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))
             16))
           'int32
           16)
          (vec-cast
           (sca-broadcast
            (sca-mul
             (sca-sub (int16_t t147) (int16_t t148))
             (int16_t (bv #x0040 16)))
            16)
           'int32
           16))
         'int64
         16)
        (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
       (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
     (vec-div
      (vec-mul
       (vec-cast
        (vec-mul
         (vec-cast
          (vec-add
           (vec-mul
            (vec-cast
             (load
              (buffer input1 'uint8)
              (ramp
               (sca-add
                (sca-mul output.s0.x.x 16)
                (sca-add
                 (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
                 (var-lookup 't72)))
               1
               16)
              (aligned 1 0))
             'int16
             16)
            (sca-broadcast (int16_t (bv #x0040 16)) 16))
           (sca-broadcast
            (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))
            16))
          'int32
          16)
         (vec-cast
          (sca-broadcast
           (sca-mul
            (sca-sub (int16_t t147) (int16_t t148))
            (int16_t (bv #x0040 16)))
           16)
          'int32
          16))
        'int64
        16)
       (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
      (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
    (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
   (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
  'int32
  16)
 (sca-broadcast (sca-sub (uint32_t t74) (uint32_t (bv #x00000001 32))) 16))
template:
  (cast
 ...
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (vs-mpy-add
    ...
    (vs-mpy-add
     ...
     (combine
      #<load-data>
      (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))))
     (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
     #f
     #f
     #f
     'int16)
    (list
     (sca-mul
      (sca-sub (int16_t t147) (int16_t t148))
      (int16_t (bv #x0040 16))))
    #f
    #f
    #f
    'int32)
   (list (int32_t output_multiplier))
   #f
   #f
   #f
   'int64)
  (int64_t (bv #x000000000000001f 64))
  #t
  x?$2001
  #t)
 'int32
 x?$2369)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$2385 idx) (bv #x0000000040000000 64)) (bvsle (bv #xffffffffc0000000 64) (app abstr-vals$2385 idx)))))
optimized-halide-expr:
  (vec-shr
 (vec-cast #<abstr-halide-expr> 'int32 16)
 (sca-broadcast (sca-sub (uint32_t t74) (uint32_t (bv #x00000001 32))) 16))
optimized-template:
  (cast ... #<abstr-expr> 'int32 x?$2369)
optimized Halide 0:
  (int32_t
 (bvashr (extract 31 0 (app abstr-vals$2385 0)) (bvadd (bv #xffffffff 32) t74)))
optimized x86 0:
  (int32_t
 (ite x?$2369 (ite (bvslt (app abstr-vals$2385 0) (bv #xffffffff80000000 64)) (bv #x80000000 32) (ite (bvslt (bv #x000000007fffffff 64) (app abstr-vals$2385 0)) (bv #x7fffffff 32) (extract 31 0 (app abstr-vals$2385 0)))) (extract 31 0 (app abstr-vals$2385 0))))
run-x86-synthesizer
halide-expr:
  (vec-shr
 (vec-cast
  (vec-max
   (vec-min
    (vec-add
     (vec-bwand
      (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
      (vec-div
       (vec-mul
        (vec-cast
         (vec-mul
          (vec-cast
           (vec-add
            (vec-mul
             (vec-cast
              (load
               (buffer input1 'uint8)
               (ramp
                (sca-add
                 (sca-mul output.s0.x.x 16)
                 (sca-add
                  (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
                  (var-lookup 't72)))
                1
                16)
               (aligned 1 0))
              'int16
              16)
             (sca-broadcast (int16_t (bv #x0040 16)) 16))
            (sca-broadcast
             (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))
             16))
           'int32
           16)
          (vec-cast
           (sca-broadcast
            (sca-mul
             (sca-sub (int16_t t147) (int16_t t148))
             (int16_t (bv #x0040 16)))
            16)
           'int32
           16))
         'int64
         16)
        (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
       (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
     (vec-div
      (vec-mul
       (vec-cast
        (vec-mul
         (vec-cast
          (vec-add
           (vec-mul
            (vec-cast
             (load
              (buffer input1 'uint8)
              (ramp
               (sca-add
                (sca-mul output.s0.x.x 16)
                (sca-add
                 (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
                 (var-lookup 't72)))
               1
               16)
              (aligned 1 0))
             'int16
             16)
            (sca-broadcast (int16_t (bv #x0040 16)) 16))
           (sca-broadcast
            (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))
            16))
          'int32
          16)
         (vec-cast
          (sca-broadcast
           (sca-mul
            (sca-sub (int16_t t147) (int16_t t148))
            (int16_t (bv #x0040 16)))
           16)
          'int32
          16))
        'int64
        16)
       (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
      (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
    (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
   (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
  'int32
  16)
 (sca-broadcast (sca-sub (uint32_t t74) (uint32_t (bv #x00000001 32))) 16))
template:
  (vs-shift-right
 ...
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (vs-mpy-add
    ...
    (vs-mpy-add
     ...
     (combine
      #<load-data>
      (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))))
     (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
     #f
     #f
     #f
     'int16)
    (list
     (sca-mul
      (sca-sub (int16_t t147) (int16_t t148))
      (int16_t (bv #x0040 16))))
    #f
    #f
    #f
    'int32)
   (list (int32_t output_multiplier))
   #f
   #f
   #f
   'int64)
  (int64_t (bv #x000000000000001f 64))
  #t
  x?$2001
  #t)
 (union [(&& (! xi?$2381) (! xi?$2382)) #(struct:sca-sub
                                          #(struct:uint32_t t74)
                                          #(struct:uint32_t
                                            (bv #x00000001 32)))] [(|| xi?$2381 (&& xi?$2382 (! xi?$2381))) #(struct:int64_t
                                                                                                              (ite* (⊢ xi?$2381 (bv #x000000000000001e 64)) (⊢ (&& xi?$2382 (! xi?$2381)) (bv #x000000000000001f 64))))])
 #f
 #f
 #t)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$2386 idx) (bv #x0000000040000000 64)) (bvsle (bv #xffffffffc0000000 64) (app abstr-vals$2386 idx)))))
optimized-halide-expr:
  (vec-shr
 (vec-cast #<abstr-halide-expr> 'int32 16)
 (sca-broadcast (sca-sub (uint32_t t74) (uint32_t (bv #x00000001 32))) 16))
optimized-template:
  (vs-shift-right
 ...
 #<abstr-expr>
 (union [(&& (! xi?$2381) (! xi?$2382)) #(struct:sca-sub
                                          #(struct:uint32_t t74)
                                          #(struct:uint32_t
                                            (bv #x00000001 32)))] [(|| xi?$2381 (&& xi?$2382 (! xi?$2381))) #(struct:int64_t
                                                                                                              (ite* (⊢ xi?$2381 (bv #x000000000000001e 64)) (⊢ (&& xi?$2382 (! xi?$2381)) (bv #x000000000000001f 64))))])
 #f
 #f
 #t)
optimized Halide 0:
  (int32_t
 (bvashr (extract 31 0 (app abstr-vals$2386 0)) (bvadd (bv #xffffffff 32) t74)))
optimized x86 0:
  (int64_t
 (bvashr (app abstr-vals$2386 0) (ite* (⊢ (&& (! xi?$2381) (! xi?$2382)) (zero-extend (bvadd (bv #xffffffff 32) t74) (bitvector 64))) (⊢ (|| xi?$2381 (&& xi?$2382 (! xi?$2381))) (ite* (⊢ xi?$2381 (bv #x000000000000001e 64)) (⊢ (&& xi?$2382 (! xi?$2381)) (bv #x000000000000001f 64)))))))
Ran synthesizer for 32 ms
(unsat)
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (vec-shr
 (vec-cast
  (vec-max
   (vec-min
    (vec-add
     (vec-bwand
      (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
      (vec-div
       (vec-mul
        (vec-cast
         (vec-mul
          (vec-cast
           (vec-add
            (vec-mul
             (vec-cast
              (load
               (buffer input1 'uint8)
               (ramp
                (sca-add
                 (sca-mul output.s0.x.x 16)
                 (sca-add
                  (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
                  (var-lookup 't72)))
                1
                16)
               (aligned 1 0))
              'int16
              16)
             (sca-broadcast (int16_t (bv #x0040 16)) 16))
            (sca-broadcast
             (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))
             16))
           'int32
           16)
          (vec-cast
           (sca-broadcast
            (sca-mul
             (sca-sub (int16_t t147) (int16_t t148))
             (int16_t (bv #x0040 16)))
            16)
           'int32
           16))
         'int64
         16)
        (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
       (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
     (vec-div
      (vec-mul
       (vec-cast
        (vec-mul
         (vec-cast
          (vec-add
           (vec-mul
            (vec-cast
             (load
              (buffer input1 'uint8)
              (ramp
               (sca-add
                (sca-mul output.s0.x.x 16)
                (sca-add
                 (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
                 (var-lookup 't72)))
               1
               16)
              (aligned 1 0))
             'int16
             16)
            (sca-broadcast (int16_t (bv #x0040 16)) 16))
           (sca-broadcast
            (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))
            16))
          'int32
          16)
         (vec-cast
          (sca-broadcast
           (sca-mul
            (sca-sub (int16_t t147) (int16_t t148))
            (int16_t (bv #x0040 16)))
           16)
          'int32
          16))
        'int64
        16)
       (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
      (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
    (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
   (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
  'int32
  16)
 (sca-broadcast (sca-sub (uint32_t t74) (uint32_t (bv #x00000001 32))) 16))
template:
  (vs-shift-right
 ...
 (union [x?$2387 #(struct:cast
                   ...
                   #(struct:vs-shift-right
                     ...
                     #(struct:vs-mpy-add
                       ...
                       #(struct:vs-mpy-add
                         ...
                         #(struct:vs-mpy-add
                           ...
                           #<combine:
                            #<load-data>
                            #(struct:broadcast
                              ...
                              #(struct:sca-mul
                                #(struct:int16_t t146)
                                #(struct:int16_t (bv #xffc0 16))))>
                           (#(struct:int8_t (bv #x01 8))
                            #(struct:int16_t (bv #x0040 16)))
                           #f
                           #f
                           #f
                           int16)
                         (#(struct:sca-mul
                            #(struct:sca-sub
                              #(struct:int16_t t147)
                              #(struct:int16_t t148))
                            #(struct:int16_t (bv #x0040 16))))
                         #f
                         #f
                         #f
                         int32)
                       (#(struct:int32_t output_multiplier))
                       #f
                       #f
                       #f
                       int64)
                     #(struct:int64_t (bv #x000000000000001f 64))
                     #t
                     x?$2001
                     #t)
                   int32
                   #f)] [(! x?$2387) #(struct:broadcast
                                       ...
                                       #(struct:sca-sub
                                         #(struct:uint32_t t74)
                                         #(struct:uint32_t
                                           (bv #x00000001 32))))])
 (union [(&& (! xi?$2388) (! xi?$2389)) #(struct:sca-sub
                                          #(struct:uint32_t t74)
                                          #(struct:uint32_t
                                            (bv #x00000001 32)))] [(|| xi?$2388 (&& xi?$2389 (! xi?$2388))) #(struct:int64_t
                                                                                                              (ite* (⊢ xi?$2388 (bv #x000000000000001e 64)) (⊢ (&& xi?$2389 (! xi?$2388)) (bv #x000000000000001f 64))))])
 #f
 #f
 #t)
axioms:
  '()
optimized-halide-expr:
  (vec-shr
 (vec-cast
  (vec-max
   (vec-min
    (vec-add
     (vec-bwand
      (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
      (vec-div
       (vec-mul
        (vec-cast
         (vec-mul
          (vec-cast
           (vec-add
            (vec-mul
             (vec-cast
              (load
               (buffer input1 'uint8)
               (ramp
                (sca-add
                 (sca-mul output.s0.x.x 16)
                 (sca-add
                  (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
                  (var-lookup 't72)))
                1
                16)
               (aligned 1 0))
              'int16
              16)
             (sca-broadcast (int16_t (bv #x0040 16)) 16))
            (sca-broadcast
             (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))
             16))
           'int32
           16)
          (vec-cast
           (sca-broadcast
            (sca-mul
             (sca-sub (int16_t t147) (int16_t t148))
             (int16_t (bv #x0040 16)))
            16)
           'int32
           16))
         'int64
         16)
        (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
       (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
     (vec-div
      (vec-mul
       (vec-cast
        (vec-mul
         (vec-cast
          (vec-add
           (vec-mul
            (vec-cast
             (load
              (buffer input1 'uint8)
              (ramp
               (sca-add
                (sca-mul output.s0.x.x 16)
                (sca-add
                 (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
                 (var-lookup 't72)))
               1
               16)
              (aligned 1 0))
             'int16
             16)
            (sca-broadcast (int16_t (bv #x0040 16)) 16))
           (sca-broadcast
            (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))
            16))
          'int32
          16)
         (vec-cast
          (sca-broadcast
           (sca-mul
            (sca-sub (int16_t t147) (int16_t t148))
            (int16_t (bv #x0040 16)))
           16)
          'int32
          16))
        'int64
        16)
       (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
      (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
    (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
   (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
  'int32
  16)
 (sca-broadcast (sca-sub (uint32_t t74) (uint32_t (bv #x00000001 32))) 16))
optimized-template:
  (vs-shift-right
 ...
 (union [x?$2387 #(struct:cast
                   ...
                   #(struct:vs-shift-right
                     ...
                     #(struct:vs-mpy-add
                       ...
                       #(struct:vs-mpy-add
                         ...
                         #(struct:vs-mpy-add
                           ...
                           #<combine:
                            #<load-data>
                            #(struct:broadcast
                              ...
                              #(struct:sca-mul
                                #(struct:int16_t t146)
                                #(struct:int16_t (bv #xffc0 16))))>
                           (#(struct:int8_t (bv #x01 8))
                            #(struct:int16_t (bv #x0040 16)))
                           #f
                           #f
                           #f
                           int16)
                         (#(struct:sca-mul
                            #(struct:sca-sub
                              #(struct:int16_t t147)
                              #(struct:int16_t t148))
                            #(struct:int16_t (bv #x0040 16))))
                         #f
                         #f
                         #f
                         int32)
                       (#(struct:int32_t output_multiplier))
                       #f
                       #f
                       #f
                       int64)
                     #(struct:int64_t (bv #x000000000000001f 64))
                     #t
                     x?$2001
                     #t)
                   int32
                   #f)] [(! x?$2387) #(struct:broadcast
                                       ...
                                       #(struct:sca-sub
                                         #(struct:uint32_t t74)
                                         #(struct:uint32_t
                                           (bv #x00000001 32))))])
 (union [(&& (! xi?$2388) (! xi?$2389)) #(struct:sca-sub
                                          #(struct:uint32_t t74)
                                          #(struct:uint32_t
                                            (bv #x00000001 32)))] [(|| xi?$2388 (&& xi?$2389 (! xi?$2388))) #(struct:int64_t
                                                                                                              (ite* (⊢ xi?$2388 (bv #x000000000000001e 64)) (⊢ (&& xi?$2389 (! xi?$2388)) (bv #x000000000000001f 64))))])
 #f
 #f
 #t)
optimized Halide 0:
  (int32_t
 (bvashr (extract 31 0 (ite (bvsle (bv #xffffffff80000000 64) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64))) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bv #xffffffff80000000 64))) (bvadd (bv #xffffffff 32) t74)))
optimized x86 0:
  (union [x?$2387 #(struct:int32_t
                  (bvashr (ite x?$2387 (extract 31 0 (bvadd (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001f 64)) (bvand (bv #x0000000000000001 64) (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001e 64))))) (bvadd (bv #xffffffff 32) t74)) (ite* (⊢ (|| (&& x?$2387 (&& (! xi?$2388) (! xi?$2389))) (&& x?$2387 (|| xi?$2388 (&& xi?$2389 (! xi?$2388))))) (ite* (⊢ (&& x?$2387 (&& (! xi?$2388) (! xi?$2389))) (bvadd (bv #xffffffff 32) t74)) (⊢ (&& x?$2387 (|| xi?$2388 (&& xi?$2389 (! xi?$2388)))) (extract 31 0 (ite* (⊢ xi?$2388 (bv #x000000000000001e 64)) (⊢ (&& xi?$2389 (! xi?$2388)) (bv #x000000000000001f 64))))))) (⊢ (|| (&& (! x?$2387) (&& (! xi?$2388) (! xi?$2389))) (&& (! x?$2387) (|| xi?$2388 (&& xi?$2389 (! xi?$2388))))) (ite* (⊢ (&& (! x?$2387) (&& (! xi?$2388) (! xi?$2389))) (bvadd (bv #xffffffff 32) t74)) (⊢ (&& (! x?$2387) (|| xi?$2388 (&& xi?$2389 (! xi?$2388)))) (extract 31 0 (ite* (⊢ xi?$2388 (bv #x000000000000001e 64)) (⊢ (&& xi?$2389 (! xi?$2388)) (bv #x000000000000001f 64))))))))))] [(! x?$2387) #(struct:uint32_t
bvashr (ite x?$2387 (extract 31 0 (bvadd (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001f 64)) (bvand (bv #x0000000000000001 64) (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001e 64))))) (bvadd (bv #xffffffff 32) t74)) (ite* (⊢ (|| (&& x?$2387 (&& (! xi?$2388) (! xi?$2389))) (&& x?$2387 (|| xi?$2388 (&& xi?$2389 (! xi?$2388))))) (ite* (⊢ (&& x?$2387 (&& (! xi?$2388) (! xi?$2389))) (bvadd (bv #xffffffff 32) t74)) (⊢ (&& x?$2387 (|| xi?$2388 (&& xi?$2389 (! xi?$2388)))) (extract 31 0 (ite* (⊢ xi?$2388 (bv #x000000000000001e 64)) (⊢ (&& xi?$2389 (! xi?$2388)) (bv #x000000000000001f 64))))))) (⊢ (|| (&& (! x?$2387) (&& (! xi?$2388) (! xi?$2389))) (&& (! x?$2387) (|| xi?$2388 (&& xi?$2389 (! xi?$2388))))) (ite* (⊢ (&& (! x?$2387) (&& (! xi?$2388) (! xi?$2389))) (bvadd (bv #xffffffff 32) t74)) (⊢ (&& (! x?$2387) (|| xi?$2388 (&& xi?$2389 (! xi?$2388)))) (extract 31 0 (ite* (⊢ xi?$2388 (bv #x000000000000001e 64)) (⊢ (&& xi?$2389 (! xi?$2388)) (bv #x000000000000001f 64))))))))))])
Ran synthesizer for 20572 ms
(model
 [x?$2387 #t]
 [xi?$2388 #f]
 [xi?$2389 #f])
(vec-shr
 (vec-cast
  (vec-max
   (vec-min
    (vec-add
     (vec-bwand
      (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
      (vec-div
       (vec-mul
        (vec-cast
         (vec-mul
          (vec-cast
           (vec-add
            (vec-mul
             (vec-cast
              (load
               (buffer input1 'uint8)
               (ramp
                (sca-add
                 (sca-mul output.s0.x.x 16)
                 (sca-add
                  (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
                  (var-lookup 't72)))
                1
                16)
               (aligned 1 0))
              'int16
              16)
             (sca-broadcast (int16_t (bv #x0040 16)) 16))
            (sca-broadcast
             (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))
             16))
           'int32
           16)
          (vec-cast
           (sca-broadcast
            (sca-mul
             (sca-sub (int16_t t147) (int16_t t148))
             (int16_t (bv #x0040 16)))
            16)
           'int32
           16))
         'int64
         16)
        (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
       (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
     (vec-div
      (vec-mul
       (vec-cast
        (vec-mul
         (vec-cast
          (vec-add
           (vec-mul
            (vec-cast
             (load
              (buffer input1 'uint8)
              (ramp
               (sca-add
                (sca-mul output.s0.x.x 16)
                (sca-add
                 (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
                 (var-lookup 't72)))
               1
               16)
              (aligned 1 0))
             'int16
             16)
            (sca-broadcast (int16_t (bv #x0040 16)) 16))
           (sca-broadcast
            (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))
            16))
          'int32
          16)
         (vec-cast
          (sca-broadcast
           (sca-mul
            (sca-sub (int16_t t147) (int16_t t148))
            (int16_t (bv #x0040 16)))
           16)
          'int32
          16))
        'int64
        16)
       (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
      (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
    (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
   (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
  'int32
  16)
 (sca-broadcast (sca-sub (uint32_t t74) (uint32_t (bv #x00000001 32))) 16))
(vs-shift-right
 ...
 (cast
  ...
  (vs-shift-right
   ...
   (vs-mpy-add
    ...
    (vs-mpy-add
     ...
     (vs-mpy-add
      ...
      (combine
       #<load-data>
       (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))))
      (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
      #f
      #f
      #f
      'int16)
     (list
      (sca-mul
       (sca-sub (int16_t t147) (int16_t t148))
       (int16_t (bv #x0040 16))))
     #f
     #f
     #f
     'int32)
    (list (int32_t output_multiplier))
    #f
    #f
    #f
    'int64)
   (int64_t (bv #x000000000000001f 64))
   #t
   x?$2001
   #t)
  'int32
  #f)
 (sca-sub (uint32_t t74) (uint32_t (bv #x00000001 32)))
 #f
 #f
 #t)
Ran bounds analysis for 3463 ms
Ran bounds analysis for 1617 ms
"Extended success?"
#t
(vs-shift-right
 ...
 (cast
  ...
  (vs-shift-right
   ...
   (vs-mpy-add
    ...
    (vs-mpy-add
     ...
     (vs-mpy-add
      ...
      (combine
       #<load-data>
       (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))))
      (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
      #f
      #f
      #f
      'int16)
     (list
      (sca-mul
       (sca-sub (int16_t t147) (int16_t t148))
       (int16_t (bv #x0040 16))))
     #f
     #f
     #f
     'int32)
    (list (int32_t output_multiplier))
    #f
    #f
    #f
    'int64)
   (int64_t (bv #x000000000000001f 64))
   #t
   x?$2001
   #t)
  'int32
  #f)
 (sca-sub (uint32_t t74) (uint32_t (bv #x00000001 32)))
 #f
 #f
 #t)
"Building Expr:"
(vec-bwand
 (vec-if
  (sca-broadcast (sca-lt (uint32_t (bv #x00000000 32)) (uint32_t t74)) 16)
  (sca-broadcast (int32_t (bv #x00000001 32)) 16)
  (sca-broadcast (int32_t (bv #x00000000 32)) 16))
 (vec-shr
  (vec-cast
   (vec-max
    (vec-min
     (vec-add
      (vec-bwand
       (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
       (vec-div
        (vec-mul
         (vec-cast
          (vec-mul
           (vec-cast
            (vec-add
             (vec-mul
              (vec-cast
               (load
                (buffer input1 'uint8)
                (ramp
                 (sca-add
                  (sca-mul output.s0.x.x 16)
                  (sca-add
                   (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
                   (var-lookup 't72)))
                 1
                 16)
                (aligned 1 0))
               'int16
               16)
              (sca-broadcast (int16_t (bv #x0040 16)) 16))
             (sca-broadcast
              (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))
              16))
            'int32
            16)
           (vec-cast
            (sca-broadcast
             (sca-mul
              (sca-sub (int16_t t147) (int16_t t148))
              (int16_t (bv #x0040 16)))
             16)
            'int32
            16))
          'int64
          16)
         (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
        (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
      (vec-div
       (vec-mul
        (vec-cast
         (vec-mul
          (vec-cast
           (vec-add
            (vec-mul
             (vec-cast
              (load
               (buffer input1 'uint8)
               (ramp
                (sca-add
                 (sca-mul output.s0.x.x 16)
                 (sca-add
                  (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
                  (var-lookup 't72)))
                1
                16)
               (aligned 1 0))
              'int16
              16)
             (sca-broadcast (int16_t (bv #x0040 16)) 16))
            (sca-broadcast
             (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))
             16))
           'int32
           16)
          (vec-cast
           (sca-broadcast
            (sca-mul
             (sca-sub (int16_t t147) (int16_t t148))
             (int16_t (bv #x0040 16)))
            16)
           'int32
           16))
         'int64
         16)
        (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
       (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
     (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
    (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
   'int32
   16)
  (sca-broadcast (sca-sub (uint32_t t74) (uint32_t (bv #x00000001 32))) 16)))
"Fold templates"
(list
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (vs-mpy-add
    ...
    (vs-mpy-add
     ...
     (combine
      #<load-data>
      (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))))
     (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
     #f
     #f
     #f
     'int16)
    (list
     (sca-mul
      (sca-sub (int16_t t147) (int16_t t148))
      (int16_t (bv #x0040 16))))
    #f
    #f
    #f
    'int32)
   (list (int32_t output_multiplier))
   #f
   #f
   #f
   'int64)
  (union [(&& (! xi?$2396) (! xi?$2397)) #(struct:sca-sub
                                           #(struct:uint32_t t74)
                                           #(struct:uint32_t
                                             (bv #x00000001 32)))] [(|| xi?$2396 (&& xi?$2397 (! xi?$2396))) #(struct:int64_t
                                                                                                               (ite* (⊢ xi?$2396 (bv #x000000000000001e 64)) (⊢ (&& xi?$2397 (! xi?$2396)) (bv #x000000000000001f 64))))])
  #t
  x?$2001
  #t)
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (vs-mpy-add
    ...
    (vs-mpy-add
     ...
     (combine
      #<load-data>
      (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))))
     (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
     #f
     #f
     #f
     'int16)
    (list
     (sca-mul
      (sca-sub (int16_t t147) (int16_t t148))
      (int16_t (bv #x0040 16))))
    #f
    #f
    #f
    'int32)
   (list (int32_t output_multiplier))
   #f
   #f
   #f
   'int64)
  (int64_t (bv #x000000000000001f 64))
  x?$2398
  x?$2399
  x?$2400)
 (cast
  ...
  (vs-shift-right
   ...
   (vs-mpy-add
    ...
    (vs-mpy-add
     ...
     (vs-mpy-add
      ...
      (combine
       #<load-data>
       (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))))
      (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
      #f
      #f
      #f
      'int16)
     (list
      (sca-mul
       (sca-sub (int16_t t147) (int16_t t148))
       (int16_t (bv #x0040 16))))
     #f
     #f
     #f
     'int32)
    (list (int32_t output_multiplier))
    #f
    #f
    #f
    'int64)
   (int64_t (bv #x000000000000001f 64))
   #t
   x?$2001
   #t)
  'int32
  x?$2395)
 (vs-shift-right
  ...
  (cast
   ...
   (vs-shift-right
    ...
    (vs-mpy-add
     ...
     (vs-mpy-add
      ...
      (vs-mpy-add
       ...
       (combine
        #<load-data>
        (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))))
       (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
       #f
       #f
       #f
       'int16)
      (list
       (sca-mul
        (sca-sub (int16_t t147) (int16_t t148))
        (int16_t (bv #x0040 16))))
      #f
      #f
      #f
      'int32)
     (list (int32_t output_multiplier))
     #f
     #f
     #f
     'int64)
    (int64_t (bv #x000000000000001f 64))
    #t
    x?$2001
    #t)
   'int32
   #f)
  (union [(&& (! xi?$2390) (! xi?$2391)) #(struct:sca-sub
                                           #(struct:uint32_t t74)
                                           #(struct:uint32_t
                                             (bv #x00000001 32)))] [(|| xi?$2390 (&& xi?$2391 (! xi?$2390))) #(struct:int64_t
                                                                                                               (ite* (⊢ xi?$2390 (bv #x000000000000001e 64)) (⊢ (&& xi?$2391 (! xi?$2390)) (bv #x000000000000001f 64))))])
  #f
  #f
  #t)
 (vs-shift-right
  ...
  (cast
   ...
   (vs-shift-right
    ...
    (vs-mpy-add
     ...
     (vs-mpy-add
      ...
      (vs-mpy-add
       ...
       (combine
        #<load-data>
        (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))))
       (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
       #f
       #f
       #f
       'int16)
      (list
       (sca-mul
        (sca-sub (int16_t t147) (int16_t t148))
        (int16_t (bv #x0040 16))))
      #f
      #f
      #f
      'int32)
     (list (int32_t output_multiplier))
     #f
     #f
     #f
     'int64)
    (int64_t (bv #x000000000000001f 64))
    #t
    x?$2001
    #t)
   'int32
   #f)
  (sca-sub (uint32_t t74) (uint32_t (bv #x00000001 32)))
  x?$2392
  x?$2393
  x?$2394))
here(#(struct:vs-shift-right ... #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t146) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f #f #f int16) (#(struct:sca-mul #(struct:sca-sub #(struct:int16_t t147) #(struct:int16_t t148)) #(struct:int16_t (bv #x0040 16)))) #f #f #f int32) (#(struct:int32_t output_multiplier)) #f #f #f int64) (union #:size 2 #:hash 94964982395406) #t x?$2001 #t) #(struct:vs-shift-right ... #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t146) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f #f #f int16) (#(struct:sca-mul #(struct:sca-sub #(struct:int16_t t147) #(struct:int16_t t148)) #(struct:int16_t (bv #x0040 16)))) #f #f #f int32) (#(struct:int32_t output_multiplier)) #f #f #f int64) #(struct:int64_t (bv #x000000000000001f 64)) x?$2398 x?$2399 x?$2400) #(struct:cast ... #(struct:vs-shift-right ... #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t146) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f #f #f int16) (#(struct:sca-mul #(struct:sca-sub #(struct:int16_t t147) #(struct:int16_t t148)) #(struct:int16_t (bv #x0040 16)))) #f #f #f int32) (#(struct:int32_t output_multiplier)) #f #f #f int64) #(struct:int64_t (bv #x000000000000001f 64)) #t x?$2001 #t) int32 x?$2395) #(struct:vs-shift-right ... #(struct:cast ... #(struct:vs-shift-right ... #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t146) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f #f #f int16) (#(struct:sca-mul #(struct:sca-sub #(struct:int16_t t147) #(struct:int16_t t148)) #(struct:int16_t (bv #x0040 16)))) #f #f #f int32) (#(struct:int32_t output_multiplier)) #f #f #f int64) #(struct:int64_t (bv #x000000000000001f 64)) #t x?$2001 #t) int32 #f) (union #:size 2 #:hash 94964987762366) #f #f #t) #(struct:vs-shift-right ... #(struct:cast ... #(struct:vs-shift-right ... #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t146) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f #f #f int16) (#(struct:sca-mul #(struct:sca-sub #(struct:int16_t t147) #(struct:int16_t t148)) #(struct:int16_t (bv #x0040 16)))) #f #f #f int32) (#(struct:int32_t output_multiplier)) #f #f #f int64) #(struct:int64_t (bv #x000000000000001f 64)) #t x?$2001 #t) int32 #f) #(struct:sca-sub #(struct:uint32_t t74) #(struct:uint32_t (bv #x00000001 32))) x?$2392 x?$2393 x?$2394))

"Replace templates"
'()
run-x86-synthesizer
halide-expr:
  (vec-bwand
 (vec-if
  (sca-broadcast (sca-lt (uint32_t (bv #x00000000 32)) (uint32_t t74)) 16)
  (sca-broadcast (int32_t (bv #x00000001 32)) 16)
  (sca-broadcast (int32_t (bv #x00000000 32)) 16))
 (vec-shr
  (vec-cast
   (vec-max
    (vec-min
     (vec-add
      (vec-bwand
       (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
       (vec-div
        (vec-mul
         (vec-cast
          (vec-mul
           (vec-cast
            (vec-add
             (vec-mul
              (vec-cast
               (load
                (buffer input1 'uint8)
                (ramp
                 (sca-add
                  (sca-mul output.s0.x.x 16)
                  (sca-add
                   (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
                   (var-lookup 't72)))
                 1
                 16)
                (aligned 1 0))
               'int16
               16)
              (sca-broadcast (int16_t (bv #x0040 16)) 16))
             (sca-broadcast
              (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))
              16))
            'int32
            16)
           (vec-cast
            (sca-broadcast
             (sca-mul
              (sca-sub (int16_t t147) (int16_t t148))
              (int16_t (bv #x0040 16)))
             16)
            'int32
            16))
          'int64
          16)
         (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
        (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
      (vec-div
       (vec-mul
        (vec-cast
         (vec-mul
          (vec-cast
           (vec-add
            (vec-mul
             (vec-cast
              (load
               (buffer input1 'uint8)
               (ramp
                (sca-add
                 (sca-mul output.s0.x.x 16)
                 (sca-add
                  (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
                  (var-lookup 't72)))
                1
                16)
               (aligned 1 0))
              'int16
              16)
             (sca-broadcast (int16_t (bv #x0040 16)) 16))
            (sca-broadcast
             (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))
             16))
           'int32
           16)
          (vec-cast
           (sca-broadcast
            (sca-mul
             (sca-sub (int16_t t147) (int16_t t148))
             (int16_t (bv #x0040 16)))
            16)
           'int32
           16))
         'int64
         16)
        (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
       (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
     (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
    (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
   'int32
   16)
  (sca-broadcast (sca-sub (uint32_t t74) (uint32_t (bv #x00000001 32))) 16)))
template:
  (vs-shift-right
 ...
 (vs-mpy-add
  ...
  (vs-mpy-add
   ...
   (vs-mpy-add
    ...
    (combine
     #<load-data>
     (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))))
    (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
    #f
    #f
    #f
    'int16)
   (list
    (sca-mul (sca-sub (int16_t t147) (int16_t t148)) (int16_t (bv #x0040 16))))
   #f
   #f
   #f
   'int32)
  (list (int32_t output_multiplier))
  #f
  #f
  #f
  'int64)
 (union [(&& (! xi?$2396) (! xi?$2397)) #(struct:sca-sub
                                          #(struct:uint32_t t74)
                                          #(struct:uint32_t
                                            (bv #x00000001 32)))] [(|| xi?$2396 (&& xi?$2397 (! xi?$2396))) #(struct:int64_t
                                                                                                              (ite* (⊢ xi?$2396 (bv #x000000000000001e 64)) (⊢ (&& xi?$2397 (! xi?$2396)) (bv #x000000000000001f 64))))])
 #t
 x?$2001
 #t)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$2401 idx) (bv #x1fffffffc0000000 64)) (bvsle (bv #xe000000000000000 64) (app abstr-vals$2401 idx)))))
optimized-halide-expr:
  (vec-bwand
 (vec-if
  (sca-broadcast (sca-lt (uint32_t (bv #x00000000 32)) (uint32_t t74)) 16)
  (sca-broadcast (int32_t (bv #x00000001 32)) 16)
  (sca-broadcast (int32_t (bv #x00000000 32)) 16))
 (vec-shr
  (vec-cast
   (vec-max
    (vec-min
     (vec-add
      (vec-bwand
       (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
       (vec-div
        #<abstr-halide-expr>
        (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
      (vec-div
       #<abstr-halide-expr>
       (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
     (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
    (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
   'int32
   16)
  (sca-broadcast (sca-sub (uint32_t t74) (uint32_t (bv #x00000001 32))) 16)))
optimized-template:
  (vs-shift-right
 ...
 #<abstr-expr>
 (union [(&& (! xi?$2396) (! xi?$2397)) #(struct:sca-sub
                                          #(struct:uint32_t t74)
                                          #(struct:uint32_t
                                            (bv #x00000001 32)))] [(|| xi?$2396 (&& xi?$2397 (! xi?$2396))) #(struct:int64_t
                                                                                                              (ite* (⊢ xi?$2396 (bv #x000000000000001e 64)) (⊢ (&& xi?$2397 (! xi?$2396)) (bv #x000000000000001f 64))))])
 #t
 x?$2001
 #t)
optimized Halide 0:
  (int32_t
 (bvand (ite (bveq (bv #x00000000 32) t74) (bv #x00000000 32) (bv #x00000001 32)) (bvashr (extract 31 0 (ite (bvsle (bv #xffffffff80000000 64) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (app abstr-vals$2401 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$2401 0) (bvneg (bvashr (app abstr-vals$2401 0) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (app abstr-vals$2401 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$2401 0) (bvneg (bvashr (app abstr-vals$2401 0) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (app abstr-vals$2401 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$2401 0) (bvneg (bvashr (app abstr-vals$2401 0) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (app abstr-vals$2401 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$2401 0) (bvneg (bvashr (app abstr-vals$2401 0) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64))) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (app abstr-vals$2401 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$2401 0) (bvneg (bvashr (app abstr-vals$2401 0) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (app abstr-vals$2401 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$2401 0) (bvneg (bvashr (app abstr-vals$2401 0) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (app abstr-vals$2401 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$2401 0) (bvneg (bvashr (app abstr-vals$2401 0) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (app abstr-vals$2401 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$2401 0) (bvneg (bvashr (app abstr-vals$2401 0) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bv #xffffffff80000000 64))) (bvadd (bv #xffffffff 32) t74))))
optimized x86 0:
  (int64_t
 (bvadd (bvashr (app abstr-vals$2401 0) (ite* (⊢ (&& (! xi?$2396) (! xi?$2397)) (zero-extend (bvadd (bv #xffffffff 32) t74) (bitvector 64))) (⊢ (|| xi?$2396 (&& xi?$2397 (! xi?$2396))) (ite* (⊢ xi?$2396 (bv #x000000000000001e 64)) (⊢ (&& xi?$2397 (! xi?$2396)) (bv #x000000000000001f 64)))))) (bvand (ite (bvslt (bv #x0000000000000000 64) (ite* (⊢ (&& (! xi?$2396) (! xi?$2397)) (zero-extend (bvadd (bv #xffffffff 32) t74) (bitvector 64))) (⊢ (|| xi?$2396 (&& xi?$2397 (! xi?$2396))) (ite* (⊢ xi?$2396 (bv #x000000000000001e 64)) (⊢ (&& xi?$2397 (! xi?$2396)) (bv #x000000000000001f 64)))))) (bv #x0000000000000001 64) (bv #x0000000000000000 64)) (bvashr (app abstr-vals$2401 0) (bvadd (bv #xffffffffffffffff 64) (ite* (⊢ (&& (! xi?$2396) (! xi?$2397)) (zero-extend (bvadd (bv #xffffffff 32) t74) (bitvector 64))) (⊢ (|| xi?$2396 (&& xi?$2397 (! xi?$2396))) (ite* (⊢ xi?$2396 (bv #x000000000000001e 64)) (⊢ (&& xi?$2397 (! xi?$2396)) (bv #x000000000000001f 64))))))))))
Ran synthesizer for 26 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-bwand
 (vec-if
  (sca-broadcast (sca-lt (uint32_t (bv #x00000000 32)) (uint32_t t74)) 16)
  (sca-broadcast (int32_t (bv #x00000001 32)) 16)
  (sca-broadcast (int32_t (bv #x00000000 32)) 16))
 (vec-shr
  (vec-cast
   (vec-max
    (vec-min
     (vec-add
      (vec-bwand
       (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
       (vec-div
        (vec-mul
         (vec-cast
          (vec-mul
           (vec-cast
            (vec-add
             (vec-mul
              (vec-cast
               (load
                (buffer input1 'uint8)
                (ramp
                 (sca-add
                  (sca-mul output.s0.x.x 16)
                  (sca-add
                   (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
                   (var-lookup 't72)))
                 1
                 16)
                (aligned 1 0))
               'int16
               16)
              (sca-broadcast (int16_t (bv #x0040 16)) 16))
             (sca-broadcast
              (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))
              16))
            'int32
            16)
           (vec-cast
            (sca-broadcast
             (sca-mul
              (sca-sub (int16_t t147) (int16_t t148))
              (int16_t (bv #x0040 16)))
             16)
            'int32
            16))
          'int64
          16)
         (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
        (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
      (vec-div
       (vec-mul
        (vec-cast
         (vec-mul
          (vec-cast
           (vec-add
            (vec-mul
             (vec-cast
              (load
               (buffer input1 'uint8)
               (ramp
                (sca-add
                 (sca-mul output.s0.x.x 16)
                 (sca-add
                  (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
                  (var-lookup 't72)))
                1
                16)
               (aligned 1 0))
              'int16
              16)
             (sca-broadcast (int16_t (bv #x0040 16)) 16))
            (sca-broadcast
             (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))
             16))
           'int32
           16)
          (vec-cast
           (sca-broadcast
            (sca-mul
             (sca-sub (int16_t t147) (int16_t t148))
             (int16_t (bv #x0040 16)))
            16)
           'int32
           16))
         'int64
         16)
        (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
       (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
     (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
    (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
   'int32
   16)
  (sca-broadcast (sca-sub (uint32_t t74) (uint32_t (bv #x00000001 32))) 16)))
template:
  (vs-shift-right
 ...
 (vs-mpy-add
  ...
  (vs-mpy-add
   ...
   (vs-mpy-add
    ...
    (combine
     #<load-data>
     (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))))
    (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
    #f
    #f
    #f
    'int16)
   (list
    (sca-mul (sca-sub (int16_t t147) (int16_t t148)) (int16_t (bv #x0040 16))))
   #f
   #f
   #f
   'int32)
  (list (int32_t output_multiplier))
  #f
  #f
  #f
  'int64)
 (int64_t (bv #x000000000000001f 64))
 x?$2398
 x?$2399
 x?$2400)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$2402 idx) (bv #x1fffffffc0000000 64)) (bvsle (bv #xe000000000000000 64) (app abstr-vals$2402 idx)))))
optimized-halide-expr:
  (vec-bwand
 (vec-if
  (sca-broadcast (sca-lt (uint32_t (bv #x00000000 32)) (uint32_t t74)) 16)
  (sca-broadcast (int32_t (bv #x00000001 32)) 16)
  (sca-broadcast (int32_t (bv #x00000000 32)) 16))
 (vec-shr
  (vec-cast
   (vec-max
    (vec-min
     (vec-add
      (vec-bwand
       (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
       (vec-div
        #<abstr-halide-expr>
        (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
      (vec-div
       #<abstr-halide-expr>
       (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
     (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
    (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
   'int32
   16)
  (sca-broadcast (sca-sub (uint32_t t74) (uint32_t (bv #x00000001 32))) 16)))
optimized-template:
  (vs-shift-right
 ...
 #<abstr-expr>
 (int64_t (bv #x000000000000001f 64))
 x?$2398
 x?$2399
 x?$2400)
optimized Halide 0:
  (int32_t
 (bvand (ite (bveq (bv #x00000000 32) t74) (bv #x00000000 32) (bv #x00000001 32)) (bvashr (extract 31 0 (ite (bvsle (bv #xffffffff80000000 64) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (app abstr-vals$2402 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$2402 0) (bvneg (bvashr (app abstr-vals$2402 0) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (app abstr-vals$2402 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$2402 0) (bvneg (bvashr (app abstr-vals$2402 0) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (app abstr-vals$2402 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$2402 0) (bvneg (bvashr (app abstr-vals$2402 0) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (app abstr-vals$2402 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$2402 0) (bvneg (bvashr (app abstr-vals$2402 0) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64))) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (app abstr-vals$2402 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$2402 0) (bvneg (bvashr (app abstr-vals$2402 0) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (app abstr-vals$2402 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$2402 0) (bvneg (bvashr (app abstr-vals$2402 0) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (app abstr-vals$2402 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$2402 0) (bvneg (bvashr (app abstr-vals$2402 0) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (app abstr-vals$2402 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$2402 0) (bvneg (bvashr (app abstr-vals$2402 0) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bv #xffffffff80000000 64))) (bvadd (bv #xffffffff 32) t74))))
optimized x86 0:
  (int64_t
 (ite x?$2398 (bvadd (ite x?$2400 (bvashr (app abstr-vals$2402 0) (bv #x000000000000001f 64)) (bvlshr (app abstr-vals$2402 0) (bv #x000000000000001f 64))) (bvand (bv #x0000000000000001 64) (ite x?$2400 (bvashr (app abstr-vals$2402 0) (bv #x000000000000001e 64)) (bvlshr (app abstr-vals$2402 0) (bv #x000000000000001e 64))))) (ite x?$2400 (bvashr (app abstr-vals$2402 0) (bv #x000000000000001f 64)) (bvlshr (app abstr-vals$2402 0) (bv #x000000000000001f 64)))))
run-x86-synthesizer
halide-expr:
  (vec-bwand
 (vec-if
  (sca-broadcast (sca-lt (uint32_t (bv #x00000000 32)) (uint32_t t74)) 16)
  (sca-broadcast (int32_t (bv #x00000001 32)) 16)
  (sca-broadcast (int32_t (bv #x00000000 32)) 16))
 (vec-shr
  (vec-cast
   (vec-max
    (vec-min
     (vec-add
      (vec-bwand
       (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
       (vec-div
        (vec-mul
         (vec-cast
          (vec-mul
           (vec-cast
            (vec-add
             (vec-mul
              (vec-cast
               (load
                (buffer input1 'uint8)
                (ramp
                 (sca-add
                  (sca-mul output.s0.x.x 16)
                  (sca-add
                   (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
                   (var-lookup 't72)))
                 1
                 16)
                (aligned 1 0))
               'int16
               16)
              (sca-broadcast (int16_t (bv #x0040 16)) 16))
             (sca-broadcast
              (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))
              16))
            'int32
            16)
           (vec-cast
            (sca-broadcast
             (sca-mul
              (sca-sub (int16_t t147) (int16_t t148))
              (int16_t (bv #x0040 16)))
             16)
            'int32
            16))
          'int64
          16)
         (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
        (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
      (vec-div
       (vec-mul
        (vec-cast
         (vec-mul
          (vec-cast
           (vec-add
            (vec-mul
             (vec-cast
              (load
               (buffer input1 'uint8)
               (ramp
                (sca-add
                 (sca-mul output.s0.x.x 16)
                 (sca-add
                  (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
                  (var-lookup 't72)))
                1
                16)
               (aligned 1 0))
              'int16
              16)
             (sca-broadcast (int16_t (bv #x0040 16)) 16))
            (sca-broadcast
             (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))
             16))
           'int32
           16)
          (vec-cast
           (sca-broadcast
            (sca-mul
             (sca-sub (int16_t t147) (int16_t t148))
             (int16_t (bv #x0040 16)))
            16)
           'int32
           16))
         'int64
         16)
        (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
       (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
     (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
    (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
   'int32
   16)
  (sca-broadcast (sca-sub (uint32_t t74) (uint32_t (bv #x00000001 32))) 16)))
template:
  (cast
 ...
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (vs-mpy-add
    ...
    (vs-mpy-add
     ...
     (combine
      #<load-data>
      (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))))
     (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
     #f
     #f
     #f
     'int16)
    (list
     (sca-mul
      (sca-sub (int16_t t147) (int16_t t148))
      (int16_t (bv #x0040 16))))
    #f
    #f
    #f
    'int32)
   (list (int32_t output_multiplier))
   #f
   #f
   #f
   'int64)
  (int64_t (bv #x000000000000001f 64))
  #t
  x?$2001
  #t)
 'int32
 x?$2395)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$2403 idx) (bv #x0000000040000000 64)) (bvsle (bv #xffffffffc0000000 64) (app abstr-vals$2403 idx)))))
optimized-halide-expr:
  (vec-bwand
 (vec-if
  (sca-broadcast (sca-lt (uint32_t (bv #x00000000 32)) (uint32_t t74)) 16)
  (sca-broadcast (int32_t (bv #x00000001 32)) 16)
  (sca-broadcast (int32_t (bv #x00000000 32)) 16))
 (vec-shr
  (vec-cast #<abstr-halide-expr> 'int32 16)
  (sca-broadcast (sca-sub (uint32_t t74) (uint32_t (bv #x00000001 32))) 16)))
optimized-template:
  (cast ... #<abstr-expr> 'int32 x?$2395)
optimized Halide 0:
  (int32_t
 (bvand (ite (bveq (bv #x00000000 32) t74) (bv #x00000000 32) (bv #x00000001 32)) (bvashr (extract 31 0 (app abstr-vals$2403 0)) (bvadd (bv #xffffffff 32) t74))))
optimized x86 0:
  (int32_t
 (ite x?$2395 (ite (bvslt (app abstr-vals$2403 0) (bv #xffffffff80000000 64)) (bv #x80000000 32) (ite (bvslt (bv #x000000007fffffff 64) (app abstr-vals$2403 0)) (bv #x7fffffff 32) (extract 31 0 (app abstr-vals$2403 0)))) (extract 31 0 (app abstr-vals$2403 0))))
run-x86-synthesizer
halide-expr:
  (vec-bwand
 (vec-if
  (sca-broadcast (sca-lt (uint32_t (bv #x00000000 32)) (uint32_t t74)) 16)
  (sca-broadcast (int32_t (bv #x00000001 32)) 16)
  (sca-broadcast (int32_t (bv #x00000000 32)) 16))
 (vec-shr
  (vec-cast
   (vec-max
    (vec-min
     (vec-add
      (vec-bwand
       (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
       (vec-div
        (vec-mul
         (vec-cast
          (vec-mul
           (vec-cast
            (vec-add
             (vec-mul
              (vec-cast
               (load
                (buffer input1 'uint8)
                (ramp
                 (sca-add
                  (sca-mul output.s0.x.x 16)
                  (sca-add
                   (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
                   (var-lookup 't72)))
                 1
                 16)
                (aligned 1 0))
               'int16
               16)
              (sca-broadcast (int16_t (bv #x0040 16)) 16))
             (sca-broadcast
              (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))
              16))
            'int32
            16)
           (vec-cast
            (sca-broadcast
             (sca-mul
              (sca-sub (int16_t t147) (int16_t t148))
              (int16_t (bv #x0040 16)))
             16)
            'int32
            16))
          'int64
          16)
         (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
        (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
      (vec-div
       (vec-mul
        (vec-cast
         (vec-mul
          (vec-cast
           (vec-add
            (vec-mul
             (vec-cast
              (load
               (buffer input1 'uint8)
               (ramp
                (sca-add
                 (sca-mul output.s0.x.x 16)
                 (sca-add
                  (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
                  (var-lookup 't72)))
                1
                16)
               (aligned 1 0))
              'int16
              16)
             (sca-broadcast (int16_t (bv #x0040 16)) 16))
            (sca-broadcast
             (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))
             16))
           'int32
           16)
          (vec-cast
           (sca-broadcast
            (sca-mul
             (sca-sub (int16_t t147) (int16_t t148))
             (int16_t (bv #x0040 16)))
            16)
           'int32
           16))
         'int64
         16)
        (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
       (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
     (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
    (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
   'int32
   16)
  (sca-broadcast (sca-sub (uint32_t t74) (uint32_t (bv #x00000001 32))) 16)))
template:
  (vs-shift-right
 ...
 (cast
  ...
  (vs-shift-right
   ...
   (vs-mpy-add
    ...
    (vs-mpy-add
     ...
     (vs-mpy-add
      ...
      (combine
       #<load-data>
       (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))))
      (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
      #f
      #f
      #f
      'int16)
     (list
      (sca-mul
       (sca-sub (int16_t t147) (int16_t t148))
       (int16_t (bv #x0040 16))))
     #f
     #f
     #f
     'int32)
    (list (int32_t output_multiplier))
    #f
    #f
    #f
    'int64)
   (int64_t (bv #x000000000000001f 64))
   #t
   x?$2001
   #t)
  'int32
  #f)
 (union [(&& (! xi?$2390) (! xi?$2391)) #(struct:sca-sub
                                          #(struct:uint32_t t74)
                                          #(struct:uint32_t
                                            (bv #x00000001 32)))] [(|| xi?$2390 (&& xi?$2391 (! xi?$2390))) #(struct:int64_t
                                                                                                              (ite* (⊢ xi?$2390 (bv #x000000000000001e 64)) (⊢ (&& xi?$2391 (! xi?$2390)) (bv #x000000000000001f 64))))])
 #f
 #f
 #t)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$2404 idx) (bv #x40000000 32)) (bvsle (bv #xc0000000 32) (app abstr-vals$2404 idx)))))
optimized-halide-expr:
  (vec-bwand
 (vec-if
  (sca-broadcast (sca-lt (uint32_t (bv #x00000000 32)) (uint32_t t74)) 16)
  (sca-broadcast (int32_t (bv #x00000001 32)) 16)
  (sca-broadcast (int32_t (bv #x00000000 32)) 16))
 (vec-shr
  #<abstr-halide-expr>
  (sca-broadcast (sca-sub (uint32_t t74) (uint32_t (bv #x00000001 32))) 16)))
optimized-template:
  (vs-shift-right
 ...
 #<abstr-expr>
 (union [(&& (! xi?$2390) (! xi?$2391)) #(struct:sca-sub
                                          #(struct:uint32_t t74)
                                          #(struct:uint32_t
                                            (bv #x00000001 32)))] [(|| xi?$2390 (&& xi?$2391 (! xi?$2390))) #(struct:int64_t
                                                                                                              (ite* (⊢ xi?$2390 (bv #x000000000000001e 64)) (⊢ (&& xi?$2391 (! xi?$2390)) (bv #x000000000000001f 64))))])
 #f
 #f
 #t)
optimized Halide 0:
  (int32_t
 (bvand (ite (bveq (bv #x00000000 32) t74) (bv #x00000000 32) (bv #x00000001 32)) (bvashr (app abstr-vals$2404 0) (bvadd (bv #xffffffff 32) t74))))
optimized x86 0:
  (int32_t
 (bvashr (app abstr-vals$2404 0) (ite* (⊢ (&& (! xi?$2390) (! xi?$2391)) (bvadd (bv #xffffffff 32) t74)) (⊢ (|| xi?$2390 (&& xi?$2391 (! xi?$2390))) (extract 31 0 (ite* (⊢ xi?$2390 (bv #x000000000000001e 64)) (⊢ (&& xi?$2391 (! xi?$2390)) (bv #x000000000000001f 64))))))))
Ran synthesizer for 157 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-bwand
 (vec-if
  (sca-broadcast (sca-lt (uint32_t (bv #x00000000 32)) (uint32_t t74)) 16)
  (sca-broadcast (int32_t (bv #x00000001 32)) 16)
  (sca-broadcast (int32_t (bv #x00000000 32)) 16))
 (vec-shr
  (vec-cast
   (vec-max
    (vec-min
     (vec-add
      (vec-bwand
       (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
       (vec-div
        (vec-mul
         (vec-cast
          (vec-mul
           (vec-cast
            (vec-add
             (vec-mul
              (vec-cast
               (load
                (buffer input1 'uint8)
                (ramp
                 (sca-add
                  (sca-mul output.s0.x.x 16)
                  (sca-add
                   (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
                   (var-lookup 't72)))
                 1
                 16)
                (aligned 1 0))
               'int16
               16)
              (sca-broadcast (int16_t (bv #x0040 16)) 16))
             (sca-broadcast
              (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))
              16))
            'int32
            16)
           (vec-cast
            (sca-broadcast
             (sca-mul
              (sca-sub (int16_t t147) (int16_t t148))
              (int16_t (bv #x0040 16)))
             16)
            'int32
            16))
          'int64
          16)
         (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
        (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
      (vec-div
       (vec-mul
        (vec-cast
         (vec-mul
          (vec-cast
           (vec-add
            (vec-mul
             (vec-cast
              (load
               (buffer input1 'uint8)
               (ramp
                (sca-add
                 (sca-mul output.s0.x.x 16)
                 (sca-add
                  (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
                  (var-lookup 't72)))
                1
                16)
               (aligned 1 0))
              'int16
              16)
             (sca-broadcast (int16_t (bv #x0040 16)) 16))
            (sca-broadcast
             (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))
             16))
           'int32
           16)
          (vec-cast
           (sca-broadcast
            (sca-mul
             (sca-sub (int16_t t147) (int16_t t148))
             (int16_t (bv #x0040 16)))
            16)
           'int32
           16))
         'int64
         16)
        (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
       (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
     (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
    (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
   'int32
   16)
  (sca-broadcast (sca-sub (uint32_t t74) (uint32_t (bv #x00000001 32))) 16)))
template:
  (vs-shift-right
 ...
 (cast
  ...
  (vs-shift-right
   ...
   (vs-mpy-add
    ...
    (vs-mpy-add
     ...
     (vs-mpy-add
      ...
      (combine
       #<load-data>
       (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))))
      (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
      #f
      #f
      #f
      'int16)
     (list
      (sca-mul
       (sca-sub (int16_t t147) (int16_t t148))
       (int16_t (bv #x0040 16))))
     #f
     #f
     #f
     'int32)
    (list (int32_t output_multiplier))
    #f
    #f
    #f
    'int64)
   (int64_t (bv #x000000000000001f 64))
   #t
   x?$2001
   #t)
  'int32
  #f)
 (sca-sub (uint32_t t74) (uint32_t (bv #x00000001 32)))
 x?$2392
 x?$2393
 x?$2394)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$2405 idx) (bv #x40000000 32)) (bvsle (bv #xc0000000 32) (app abstr-vals$2405 idx)))))
optimized-halide-expr:
  (vec-bwand
 (vec-if
  (sca-broadcast (sca-lt (uint32_t (bv #x00000000 32)) (uint32_t t74)) 16)
  (sca-broadcast (int32_t (bv #x00000001 32)) 16)
  (sca-broadcast (int32_t (bv #x00000000 32)) 16))
 (vec-shr
  #<abstr-halide-expr>
  (sca-broadcast (sca-sub (uint32_t t74) (uint32_t (bv #x00000001 32))) 16)))
optimized-template:
  (vs-shift-right
 ...
 #<abstr-expr>
 (sca-sub (uint32_t t74) (uint32_t (bv #x00000001 32)))
 x?$2392
 x?$2393
 x?$2394)
optimized Halide 0:
  (int32_t
 (bvand (ite (bveq (bv #x00000000 32) t74) (bv #x00000000 32) (bv #x00000001 32)) (bvashr (app abstr-vals$2405 0) (bvadd (bv #xffffffff 32) t74))))
optimized x86 0:
  (int32_t
 (ite x?$2392 (bvadd (ite x?$2394 (bvashr (app abstr-vals$2405 0) (bvadd (bv #xffffffff 32) t74)) (bvlshr (app abstr-vals$2405 0) (bvadd (bv #xffffffff 32) t74))) (bvand (ite (bvslt (bv #x00000000 32) (bvadd (bv #xffffffff 32) t74)) (bv #x00000001 32) (bv #x00000000 32)) (ite x?$2394 (bvashr (app abstr-vals$2405 0) (bvadd (bv #xfffffffe 32) t74)) (bvlshr (app abstr-vals$2405 0) (bvadd (bv #xfffffffe 32) t74))))) (ite x?$2394 (bvashr (app abstr-vals$2405 0) (bvadd (bv #xffffffff 32) t74)) (bvlshr (app abstr-vals$2405 0) (bvadd (bv #xffffffff 32) t74)))))
Ran synthesizer for 339 ms
(unsat)
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (vec-bwand
 (vec-if
  (sca-broadcast (sca-lt (uint32_t (bv #x00000000 32)) (uint32_t t74)) 16)
  (sca-broadcast (int32_t (bv #x00000001 32)) 16)
  (sca-broadcast (int32_t (bv #x00000000 32)) 16))
 (vec-shr
  (vec-cast
   (vec-max
    (vec-min
     (vec-add
      (vec-bwand
       (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
       (vec-div
        (vec-mul
         (vec-cast
          (vec-mul
           (vec-cast
            (vec-add
             (vec-mul
              (vec-cast
               (load
                (buffer input1 'uint8)
                (ramp
                 (sca-add
                  (sca-mul output.s0.x.x 16)
                  (sca-add
                   (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
                   (var-lookup 't72)))
                 1
                 16)
                (aligned 1 0))
               'int16
               16)
              (sca-broadcast (int16_t (bv #x0040 16)) 16))
             (sca-broadcast
              (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))
              16))
            'int32
            16)
           (vec-cast
            (sca-broadcast
             (sca-mul
              (sca-sub (int16_t t147) (int16_t t148))
              (int16_t (bv #x0040 16)))
             16)
            'int32
            16))
          'int64
          16)
         (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
        (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
      (vec-div
       (vec-mul
        (vec-cast
         (vec-mul
          (vec-cast
           (vec-add
            (vec-mul
             (vec-cast
              (load
               (buffer input1 'uint8)
               (ramp
                (sca-add
                 (sca-mul output.s0.x.x 16)
                 (sca-add
                  (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
                  (var-lookup 't72)))
                1
                16)
               (aligned 1 0))
              'int16
              16)
             (sca-broadcast (int16_t (bv #x0040 16)) 16))
            (sca-broadcast
             (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))
             16))
           'int32
           16)
          (vec-cast
           (sca-broadcast
            (sca-mul
             (sca-sub (int16_t t147) (int16_t t148))
             (int16_t (bv #x0040 16)))
            16)
           'int32
           16))
         'int64
         16)
        (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
       (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
     (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
    (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
   'int32
   16)
  (sca-broadcast (sca-sub (uint32_t t74) (uint32_t (bv #x00000001 32))) 16)))
template:
  (bitwise-op
 ...
 'and
 (select
  ...
  (broadcast ... (sca-lt (uint32_t (bv #x00000000 32)) (uint32_t t74)))
  (broadcast ... (int32_t (bv #x00000001 32)))
  (broadcast ... (int32_t (bv #x00000000 32))))
 (vs-shift-right
  ...
  (cast
   ...
   (vs-shift-right
    ...
    (vs-mpy-add
     ...
     (vs-mpy-add
      ...
      (vs-mpy-add
       ...
       (combine
        #<load-data>
        (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))))
       (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
       #f
       #f
       #f
       'int16)
      (list
       (sca-mul
        (sca-sub (int16_t t147) (int16_t t148))
        (int16_t (bv #x0040 16))))
      #f
      #f
      #f
      'int32)
     (list (int32_t output_multiplier))
     #f
     #f
     #f
     'int64)
    (int64_t (bv #x000000000000001f 64))
    #t
    x?$2001
    #t)
   'int32
   #f)
  (sca-sub (uint32_t t74) (uint32_t (bv #x00000001 32)))
  #f
  #f
  #t))
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$2406 idx) (bv #x00000001 32)) (bvsle (bv #x00000000 32) (app abstr-vals$2406 idx))))
 (forall (idx) (&& (bvsle (app abstr-vals$2407 idx) (bv #x40000000 32)) (bvsle (bv #xc0000000 32) (app abstr-vals$2407 idx)))))
optimized-halide-expr:
  (vec-bwand #<abstr-halide-expr> #<abstr-halide-expr>)
optimized-template:
  (bitwise-op ... 'and #<abstr-expr> #<abstr-expr>)
optimized Halide 0:
  (int32_t (bvand (app abstr-vals$2406 0) (app abstr-vals$2407 0)))
optimized x86 0:
  (int32_t (bvand (app abstr-vals$2406 0) (app abstr-vals$2407 0)))
Ran synthesizer for 46 ms
(model)
(vec-bwand #<abstr-halide-expr> #<abstr-halide-expr>)
(bitwise-op
 ...
 'and
 (select
  ...
  (broadcast ... (sca-lt (uint32_t (bv #x00000000 32)) (uint32_t t74)))
  (broadcast ... (int32_t (bv #x00000001 32)))
  (broadcast ... (int32_t (bv #x00000000 32))))
 (vs-shift-right
  ...
  (cast
   ...
   (vs-shift-right
    ...
    (vs-mpy-add
     ...
     (vs-mpy-add
      ...
      (vs-mpy-add
       ...
       (combine
        #<load-data>
        (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))))
       (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
       #f
       #f
       #f
       'int16)
      (list
       (sca-mul
        (sca-sub (int16_t t147) (int16_t t148))
        (int16_t (bv #x0040 16))))
      #f
      #f
      #f
      'int32)
     (list (int32_t output_multiplier))
     #f
     #f
     #f
     'int64)
    (int64_t (bv #x000000000000001f 64))
    #t
    x?$2001
    #t)
   'int32
   #f)
  (sca-sub (uint32_t t74) (uint32_t (bv #x00000001 32)))
  #f
  #f
  #t))
Ran bounds analysis for 31 ms
Ran bounds analysis for 37 ms
"Extended success?"
#t
(bitwise-op
 ...
 'and
 (select
  ...
  (broadcast ... (sca-lt (uint32_t (bv #x00000000 32)) (uint32_t t74)))
  (broadcast ... (int32_t (bv #x00000001 32)))
  (broadcast ... (int32_t (bv #x00000000 32))))
 (vs-shift-right
  ...
  (cast
   ...
   (vs-shift-right
    ...
    (vs-mpy-add
     ...
     (vs-mpy-add
      ...
      (vs-mpy-add
       ...
       (combine
        #<load-data>
        (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))))
       (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
       #f
       #f
       #f
       'int16)
      (list
       (sca-mul
        (sca-sub (int16_t t147) (int16_t t148))
        (int16_t (bv #x0040 16))))
      #f
      #f
      #f
      'int32)
     (list (int32_t output_multiplier))
     #f
     #f
     #f
     'int64)
    (int64_t (bv #x000000000000001f 64))
    #t
    x?$2001
    #t)
   'int32
   #f)
  (sca-sub (uint32_t t74) (uint32_t (bv #x00000001 32)))
  #f
  #f
  #t))
"Building Expr:"
(vec-add
 (vec-shr
  (vec-cast
   (vec-max
    (vec-min
     (vec-add
      (vec-bwand
       (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
       (vec-div
        (vec-mul
         (vec-cast
          (vec-mul
           (vec-cast
            (vec-add
             (vec-mul
              (vec-cast
               (load
                (buffer input1 'uint8)
                (ramp
                 (sca-add
                  (sca-mul output.s0.x.x 16)
                  (sca-add
                   (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
                   (var-lookup 't72)))
                 1
                 16)
                (aligned 1 0))
               'int16
               16)
              (sca-broadcast (int16_t (bv #x0040 16)) 16))
             (sca-broadcast
              (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))
              16))
            'int32
            16)
           (vec-cast
            (sca-broadcast
             (sca-mul
              (sca-sub (int16_t t147) (int16_t t148))
              (int16_t (bv #x0040 16)))
             16)
            'int32
            16))
          'int64
          16)
         (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
        (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
      (vec-div
       (vec-mul
        (vec-cast
         (vec-mul
          (vec-cast
           (vec-add
            (vec-mul
             (vec-cast
              (load
               (buffer input1 'uint8)
               (ramp
                (sca-add
                 (sca-mul output.s0.x.x 16)
                 (sca-add
                  (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
                  (var-lookup 't72)))
                1
                16)
               (aligned 1 0))
              'int16
              16)
             (sca-broadcast (int16_t (bv #x0040 16)) 16))
            (sca-broadcast
             (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))
             16))
           'int32
           16)
          (vec-cast
           (sca-broadcast
            (sca-mul
             (sca-sub (int16_t t147) (int16_t t148))
             (int16_t (bv #x0040 16)))
            16)
           'int32
           16))
         'int64
         16)
        (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
       (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
     (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
    (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
   'int32
   16)
  (sca-broadcast (uint32_t t74) 16))
 (vec-bwand
  (vec-if
   (sca-broadcast (sca-lt (uint32_t (bv #x00000000 32)) (uint32_t t74)) 16)
   (sca-broadcast (int32_t (bv #x00000001 32)) 16)
   (sca-broadcast (int32_t (bv #x00000000 32)) 16))
  (vec-shr
   (vec-cast
    (vec-max
     (vec-min
      (vec-add
       (vec-bwand
        (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
        (vec-div
         (vec-mul
          (vec-cast
           (vec-mul
            (vec-cast
             (vec-add
              (vec-mul
               (vec-cast
                (load
                 (buffer input1 'uint8)
                 (ramp
                  (sca-add
                   (sca-mul output.s0.x.x 16)
                   (sca-add
                    (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
                    (var-lookup 't72)))
                  1
                  16)
                 (aligned 1 0))
                'int16
                16)
               (sca-broadcast (int16_t (bv #x0040 16)) 16))
              (sca-broadcast
               (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))
               16))
             'int32
             16)
            (vec-cast
             (sca-broadcast
              (sca-mul
               (sca-sub (int16_t t147) (int16_t t148))
               (int16_t (bv #x0040 16)))
              16)
             'int32
             16))
           'int64
           16)
          (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
         (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
       (vec-div
        (vec-mul
         (vec-cast
          (vec-mul
           (vec-cast
            (vec-add
             (vec-mul
              (vec-cast
               (load
                (buffer input1 'uint8)
                (ramp
                 (sca-add
                  (sca-mul output.s0.x.x 16)
                  (sca-add
                   (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
                   (var-lookup 't72)))
                 1
                 16)
                (aligned 1 0))
               'int16
               16)
              (sca-broadcast (int16_t (bv #x0040 16)) 16))
             (sca-broadcast
              (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))
              16))
            'int32
            16)
           (vec-cast
            (sca-broadcast
             (sca-mul
              (sca-sub (int16_t t147) (int16_t t148))
              (int16_t (bv #x0040 16)))
             16)
            'int32
            16))
          'int64
          16)
         (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
        (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
      (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
     (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
    'int32
    16)
   (sca-broadcast (sca-sub (uint32_t t74) (uint32_t (bv #x00000001 32))) 16))))
"Fold templates"
(list
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (vs-mpy-add
    ...
    (vs-mpy-add
     ...
     (combine
      #<load-data>
      (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))))
     (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
     #f
     #f
     #f
     'int16)
    (list
     (sca-mul
      (sca-sub (int16_t t147) (int16_t t148))
      (int16_t (bv #x0040 16))))
    #f
    #f
    #f
    'int32)
   (list (int32_t output_multiplier))
   #f
   #f
   #f
   'int64)
  (union [(&& (! xi?$2417) (&& xi?$2419 (! xi?$2418))) #(struct:uint32_t t74)] [(&& (! xi?$2417) (&& (! xi?$2418) (! xi?$2419))) #(struct:sca-sub
                                                                                                                                   #(struct:uint32_t
                                                                                                                                     t74)
                                                                                                                                   #(struct:uint32_t
                                                                                                                                     (bv #x00000001 32)))] [(|| xi?$2417 (&& xi?$2418 (! xi?$2417))) #(struct:int64_t
                                                                                                                                                                                                       (ite* (⊢ xi?$2417 (bv #x000000000000001e 64)) (⊢ (&& xi?$2418 (! xi?$2417)) (bv #x000000000000001f 64))))])
  #t
  x?$2001
  #t)
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (vs-mpy-add
    ...
    (vs-mpy-add
     ...
     (combine
      #<load-data>
      (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))))
     (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
     #f
     #f
     #f
     'int16)
    (list
     (sca-mul
      (sca-sub (int16_t t147) (int16_t t148))
      (int16_t (bv #x0040 16))))
    #f
    #f
    #f
    'int32)
   (list (int32_t output_multiplier))
   #f
   #f
   #f
   'int64)
  (int64_t (bv #x000000000000001f 64))
  x?$2420
  x?$2421
  x?$2422)
 (cast
  ...
  (vs-shift-right
   ...
   (vs-mpy-add
    ...
    (vs-mpy-add
     ...
     (vs-mpy-add
      ...
      (combine
       #<load-data>
       (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))))
      (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
      #f
      #f
      #f
      'int16)
     (list
      (sca-mul
       (sca-sub (int16_t t147) (int16_t t148))
       (int16_t (bv #x0040 16))))
     #f
     #f
     #f
     'int32)
    (list (int32_t output_multiplier))
    #f
    #f
    #f
    'int64)
   (int64_t (bv #x000000000000001f 64))
   #t
   x?$2001
   #t)
  'int32
  x?$2416)
 (vs-shift-right
  ...
  (cast
   ...
   (vs-shift-right
    ...
    (vs-mpy-add
     ...
     (vs-mpy-add
      ...
      (vs-mpy-add
       ...
       (combine
        #<load-data>
        (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))))
       (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
       #f
       #f
       #f
       'int16)
      (list
       (sca-mul
        (sca-sub (int16_t t147) (int16_t t148))
        (int16_t (bv #x0040 16))))
      #f
      #f
      #f
      'int32)
     (list (int32_t output_multiplier))
     #f
     #f
     #f
     'int64)
    (int64_t (bv #x000000000000001f 64))
    #t
    x?$2001
    #t)
   'int32
   #f)
  (union [(&& (! xi?$2410) (&& xi?$2412 (! xi?$2411))) #(struct:uint32_t t74)] [(&& (! xi?$2410) (&& (! xi?$2411) (! xi?$2412))) #(struct:sca-sub
                                                                                                                                   #(struct:uint32_t
                                                                                                                                     t74)
                                                                                                                                   #(struct:uint32_t
                                                                                                                                     (bv #x00000001 32)))] [(|| xi?$2410 (&& xi?$2411 (! xi?$2410))) #(struct:int64_t
                                                                                                                                                                                                       (ite* (⊢ xi?$2410 (bv #x000000000000001e 64)) (⊢ (&& xi?$2411 (! xi?$2410)) (bv #x000000000000001f 64))))])
  #f
  #f
  #t)
 (vs-shift-right
  ...
  (cast
   ...
   (vs-shift-right
    ...
    (vs-mpy-add
     ...
     (vs-mpy-add
      ...
      (vs-mpy-add
       ...
       (combine
        #<load-data>
        (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))))
       (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
       #f
       #f
       #f
       'int16)
      (list
       (sca-mul
        (sca-sub (int16_t t147) (int16_t t148))
        (int16_t (bv #x0040 16))))
      #f
      #f
      #f
      'int32)
     (list (int32_t output_multiplier))
     #f
     #f
     #f
     'int64)
    (int64_t (bv #x000000000000001f 64))
    #t
    x?$2001
    #t)
   'int32
   #f)
  (uint32_t t74)
  x?$2413
  x?$2414
  x?$2415)
 (cast
  ...
  (vs-shift-right
   ...
   (vs-mpy-add
    ...
    (vs-mpy-add
     ...
     (vs-mpy-add
      ...
      (combine
       #<load-data>
       (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))))
      (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
      #f
      #f
      #f
      'int16)
     (list
      (sca-mul
       (sca-sub (int16_t t147) (int16_t t148))
       (int16_t (bv #x0040 16))))
     #f
     #f
     #f
     'int32)
    (list (int32_t output_multiplier))
    #f
    #f
    #f
    'int64)
   (int64_t (bv #x000000000000001f 64))
   #t
   x?$2001
   #t)
  'int32
  x?$2429)
 (vs-shift-right
  ...
  (cast
   ...
   (vs-shift-right
    ...
    (vs-mpy-add
     ...
     (vs-mpy-add
      ...
      (vs-mpy-add
       ...
       (combine
        #<load-data>
        (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))))
       (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
       #f
       #f
       #f
       'int16)
      (list
       (sca-mul
        (sca-sub (int16_t t147) (int16_t t148))
        (int16_t (bv #x0040 16))))
      #f
      #f
      #f
      'int32)
     (list (int32_t output_multiplier))
     #f
     #f
     #f
     'int64)
    (int64_t (bv #x000000000000001f 64))
    #t
    x?$2001
    #t)
   'int32
   #f)
  (union [(&& (! xi?$2423) (&& xi?$2425 (! xi?$2424))) #(struct:uint32_t t74)] [(&& (! xi?$2423) (&& (! xi?$2424) (! xi?$2425))) #(struct:sca-sub
                                                                                                                                   #(struct:uint32_t
                                                                                                                                     t74)
                                                                                                                                   #(struct:uint32_t
                                                                                                                                     (bv #x00000001 32)))] [(|| xi?$2423 (&& xi?$2424 (! xi?$2423))) #(struct:int64_t
                                                                                                                                                                                                       (ite* (⊢ xi?$2423 (bv #x000000000000001e 64)) (⊢ (&& xi?$2424 (! xi?$2423)) (bv #x000000000000001f 64))))])
  #f
  #f
  #t)
 (vs-shift-right
  ...
  (cast
   ...
   (vs-shift-right
    ...
    (vs-mpy-add
     ...
     (vs-mpy-add
      ...
      (vs-mpy-add
       ...
       (combine
        #<load-data>
        (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))))
       (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
       #f
       #f
       #f
       'int16)
      (list
       (sca-mul
        (sca-sub (int16_t t147) (int16_t t148))
        (int16_t (bv #x0040 16))))
      #f
      #f
      #f
      'int32)
     (list (int32_t output_multiplier))
     #f
     #f
     #f
     'int64)
    (int64_t (bv #x000000000000001f 64))
    #t
    x?$2001
    #t)
   'int32
   #f)
  (sca-sub (uint32_t t74) (uint32_t (bv #x00000001 32)))
  x?$2426
  x?$2427
  x?$2428))
here(#(struct:vs-shift-right ... #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t146) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f #f #f int16) (#(struct:sca-mul #(struct:sca-sub #(struct:int16_t t147) #(struct:int16_t t148)) #(struct:int16_t (bv #x0040 16)))) #f #f #f int32) (#(struct:int32_t output_multiplier)) #f #f #f int64) (union #:size 3 #:hash 297588764685587) #t x?$2001 #t) #(struct:vs-shift-right ... #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t146) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f #f #f int16) (#(struct:sca-mul #(struct:sca-sub #(struct:int16_t t147) #(struct:int16_t t148)) #(struct:int16_t (bv #x0040 16)))) #f #f #f int32) (#(struct:int32_t output_multiplier)) #f #f #f int64) #(struct:int64_t (bv #x000000000000001f 64)) x?$2420 x?$2421 x?$2422) #(struct:cast ... #(struct:vs-shift-right ... #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t146) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f #f #f int16) (#(struct:sca-mul #(struct:sca-sub #(struct:int16_t t147) #(struct:int16_t t148)) #(struct:int16_t (bv #x0040 16)))) #f #f #f int32) (#(struct:int32_t output_multiplier)) #f #f #f int64) #(struct:int64_t (bv #x000000000000001f 64)) #t x?$2001 #t) int32 x?$2416) #(struct:vs-shift-right ... #(struct:cast ... #(struct:vs-shift-right ... #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t146) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f #f #f int16) (#(struct:sca-mul #(struct:sca-sub #(struct:int16_t t147) #(struct:int16_t t148)) #(struct:int16_t (bv #x0040 16)))) #f #f #f int32) (#(struct:int32_t output_multiplier)) #f #f #f int64) #(struct:int64_t (bv #x000000000000001f 64)) #t x?$2001 #t) int32 #f) (union #:size 3 #:hash 297653366002205) #f #f #t) #(struct:vs-shift-right ... #(struct:cast ... #(struct:vs-shift-right ... #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t146) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f #f #f int16) (#(struct:sca-mul #(struct:sca-sub #(struct:int16_t t147) #(struct:int16_t t148)) #(struct:int16_t (bv #x0040 16)))) #f #f #f int32) (#(struct:int32_t output_multiplier)) #f #f #f int64) #(struct:int64_t (bv #x000000000000001f 64)) #t x?$2001 #t) int32 #f) #(struct:uint32_t t74) x?$2413 x?$2414 x?$2415) #(struct:cast ... #(struct:vs-shift-right ... #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t146) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f #f #f int16) (#(struct:sca-mul #(struct:sca-sub #(struct:int16_t t147) #(struct:int16_t t148)) #(struct:int16_t (bv #x0040 16)))) #f #f #f int32) (#(struct:int32_t output_multiplier)) #f #f #f int64) #(struct:int64_t (bv #x000000000000001f 64)) #t x?$2001 #t) int32 x?$2429) #(struct:vs-shift-right ... #(struct:cast ... #(struct:vs-shift-right ... #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t146) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f #f #f int16) (#(struct:sca-mul #(struct:sca-sub #(struct:int16_t t147) #(struct:int16_t t148)) #(struct:int16_t (bv #x0040 16)))) #f #f #f int32) (#(struct:int32_t output_multiplier)) #f #f #f int64) #(struct:int64_t (bv #x000000000000001f 64)) #t x?$2001 #t) int32 #f) (union #:size 3 #:hash 297799000720384) #f #f #t) #(struct:vs-shift-right ... #(struct:cast ... #(struct:vs-shift-right ... #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t146) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f #f #f int16) (#(struct:sca-mul #(struct:sca-sub #(struct:int16_t t147) #(struct:int16_t t148)) #(struct:int16_t (bv #x0040 16)))) #f #f #f int32) (#(struct:int32_t output_multiplier)) #f #f #f int64) #(struct:int64_t (bv #x000000000000001f 64)) #t x?$2001 #t) int32 #f) #(struct:sca-sub #(struct:uint32_t t74) #(struct:uint32_t (bv #x00000001 32))) x?$2426 x?$2427 x?$2428))

"Replace templates"
(list
 (vs-mpy-add
  ...
  (vs-shift-right
   ...
   (vs-mpy-add
    ...
    (vs-mpy-add
     ...
     (vs-mpy-add
      ...
      (combine
       #<load-data>
       (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))))
      (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
      #f
      #f
      #f
      'int16)
     (list
      (sca-mul
       (sca-sub (int16_t t147) (int16_t t148))
       (int16_t (bv #x0040 16))))
     #f
     #f
     #f
     'int32)
    (list (int32_t output_multiplier))
    #f
    #f
    #f
    'int64)
   (int64_t (bv #x000000000000001f 64))
   #t
   x?$2001
   #t)
  (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
  (! x?$2433)
  (! x?$2434)
  (! x?$2435)
  'int32)
 (vs-mpy-add
  ...
  (vs-shift-right
   ...
   (vs-mpy-add
    ...
    (vs-mpy-add
     ...
     (vs-mpy-add
      ...
      (combine
       #<load-data>
       (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))))
      (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
      #f
      #f
      #f
      'int16)
     (list
      (sca-mul
       (sca-sub (int16_t t147) (int16_t t148))
       (int16_t (bv #x0040 16))))
     #f
     #f
     #f
     'int32)
    (list (int32_t output_multiplier))
    #f
    #f
    #f
    'int64)
   (int64_t (bv #x000000000000001f 64))
   #t
   x?$2001
   #t)
  (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
  (! x?$2439)
  (! x?$2440)
  (! x?$2441)
  'int32))
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-shr
  (vec-cast
   (vec-max
    (vec-min
     (vec-add
      (vec-bwand
       (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
       (vec-div
        (vec-mul
         (vec-cast
          (vec-mul
           (vec-cast
            (vec-add
             (vec-mul
              (vec-cast
               (load
                (buffer input1 'uint8)
                (ramp
                 (sca-add
                  (sca-mul output.s0.x.x 16)
                  (sca-add
                   (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
                   (var-lookup 't72)))
                 1
                 16)
                (aligned 1 0))
               'int16
               16)
              (sca-broadcast (int16_t (bv #x0040 16)) 16))
             (sca-broadcast
              (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))
              16))
            'int32
            16)
           (vec-cast
            (sca-broadcast
             (sca-mul
              (sca-sub (int16_t t147) (int16_t t148))
              (int16_t (bv #x0040 16)))
             16)
            'int32
            16))
          'int64
          16)
         (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
        (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
      (vec-div
       (vec-mul
        (vec-cast
         (vec-mul
          (vec-cast
           (vec-add
            (vec-mul
             (vec-cast
              (load
               (buffer input1 'uint8)
               (ramp
                (sca-add
                 (sca-mul output.s0.x.x 16)
                 (sca-add
                  (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
                  (var-lookup 't72)))
                1
                16)
               (aligned 1 0))
              'int16
              16)
             (sca-broadcast (int16_t (bv #x0040 16)) 16))
            (sca-broadcast
             (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))
             16))
           'int32
           16)
          (vec-cast
           (sca-broadcast
            (sca-mul
             (sca-sub (int16_t t147) (int16_t t148))
             (int16_t (bv #x0040 16)))
            16)
           'int32
           16))
         'int64
         16)
        (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
       (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
     (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
    (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
   'int32
   16)
  (sca-broadcast (uint32_t t74) 16))
 (vec-bwand
  (vec-if
   (sca-broadcast (sca-lt (uint32_t (bv #x00000000 32)) (uint32_t t74)) 16)
   (sca-broadcast (int32_t (bv #x00000001 32)) 16)
   (sca-broadcast (int32_t (bv #x00000000 32)) 16))
  (vec-shr
   (vec-cast
    (vec-max
     (vec-min
      (vec-add
       (vec-bwand
        (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
        (vec-div
         (vec-mul
          (vec-cast
           (vec-mul
            (vec-cast
             (vec-add
              (vec-mul
               (vec-cast
                (load
                 (buffer input1 'uint8)
                 (ramp
                  (sca-add
                   (sca-mul output.s0.x.x 16)
                   (sca-add
                    (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
                    (var-lookup 't72)))
                  1
                  16)
                 (aligned 1 0))
                'int16
                16)
               (sca-broadcast (int16_t (bv #x0040 16)) 16))
              (sca-broadcast
               (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))
               16))
             'int32
             16)
            (vec-cast
             (sca-broadcast
              (sca-mul
               (sca-sub (int16_t t147) (int16_t t148))
               (int16_t (bv #x0040 16)))
              16)
             'int32
             16))
           'int64
           16)
          (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
         (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
       (vec-div
        (vec-mul
         (vec-cast
          (vec-mul
           (vec-cast
            (vec-add
             (vec-mul
              (vec-cast
               (load
                (buffer input1 'uint8)
                (ramp
                 (sca-add
                  (sca-mul output.s0.x.x 16)
                  (sca-add
                   (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
                   (var-lookup 't72)))
                 1
                 16)
                (aligned 1 0))
               'int16
               16)
              (sca-broadcast (int16_t (bv #x0040 16)) 16))
             (sca-broadcast
              (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))
              16))
            'int32
            16)
           (vec-cast
            (sca-broadcast
             (sca-mul
              (sca-sub (int16_t t147) (int16_t t148))
              (int16_t (bv #x0040 16)))
             16)
            'int32
            16))
          'int64
          16)
         (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
        (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
      (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
     (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
    'int32
    16)
   (sca-broadcast (sca-sub (uint32_t t74) (uint32_t (bv #x00000001 32))) 16))))
template:
  (vs-shift-right
 ...
 (vs-mpy-add
  ...
  (vs-mpy-add
   ...
   (vs-mpy-add
    ...
    (combine
     #<load-data>
     (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))))
    (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
    #f
    #f
    #f
    'int16)
   (list
    (sca-mul (sca-sub (int16_t t147) (int16_t t148)) (int16_t (bv #x0040 16))))
   #f
   #f
   #f
   'int32)
  (list (int32_t output_multiplier))
  #f
  #f
  #f
  'int64)
 (union [(&& (! xi?$2417) (&& xi?$2419 (! xi?$2418))) #(struct:uint32_t t74)] [(&& (! xi?$2417) (&& (! xi?$2418) (! xi?$2419))) #(struct:sca-sub
                                                                                                                                  #(struct:uint32_t
                                                                                                                                    t74)
                                                                                                                                  #(struct:uint32_t
                                                                                                                                    (bv #x00000001 32)))] [(|| xi?$2417 (&& xi?$2418 (! xi?$2417))) #(struct:int64_t
                                                                                                                                                                                                      (ite* (⊢ xi?$2417 (bv #x000000000000001e 64)) (⊢ (&& xi?$2418 (! xi?$2417)) (bv #x000000000000001f 64))))])
 #t
 x?$2001
 #t)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$2442 idx) (bv #x1fffffffc0000000 64)) (bvsle (bv #xe000000000000000 64) (app abstr-vals$2442 idx)))))
optimized-halide-expr:
  (vec-add
 (vec-shr
  (vec-cast
   (vec-max
    (vec-min
     (vec-add
      (vec-bwand
       (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
       (vec-div
        #<abstr-halide-expr>
        (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
      (vec-div
       #<abstr-halide-expr>
       (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
     (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
    (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
   'int32
   16)
  (sca-broadcast (uint32_t t74) 16))
 (vec-bwand
  (vec-if
   (sca-broadcast (sca-lt (uint32_t (bv #x00000000 32)) (uint32_t t74)) 16)
   (sca-broadcast (int32_t (bv #x00000001 32)) 16)
   (sca-broadcast (int32_t (bv #x00000000 32)) 16))
  (vec-shr
   (vec-cast
    (vec-max
     (vec-min
      (vec-add
       (vec-bwand
        (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
        (vec-div
         #<abstr-halide-expr>
         (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
       (vec-div
        #<abstr-halide-expr>
        (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
      (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
     (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
    'int32
    16)
   (sca-broadcast (sca-sub (uint32_t t74) (uint32_t (bv #x00000001 32))) 16))))
optimized-template:
  (vs-shift-right
 ...
 #<abstr-expr>
 (union [(&& (! xi?$2417) (&& xi?$2419 (! xi?$2418))) #(struct:uint32_t t74)] [(&& (! xi?$2417) (&& (! xi?$2418) (! xi?$2419))) #(struct:sca-sub
                                                                                                                                  #(struct:uint32_t
                                                                                                                                    t74)
                                                                                                                                  #(struct:uint32_t
                                                                                                                                    (bv #x00000001 32)))] [(|| xi?$2417 (&& xi?$2418 (! xi?$2417))) #(struct:int64_t
                                                                                                                                                                                                      (ite* (⊢ xi?$2417 (bv #x000000000000001e 64)) (⊢ (&& xi?$2418 (! xi?$2417)) (bv #x000000000000001f 64))))])
 #t
 x?$2001
 #t)
optimized Halide 0:
  (int32_t
 (bvadd (bvashr (extract 31 0 (ite (bvsle (bv #xffffffff80000000 64) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (app abstr-vals$2442 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$2442 0) (bvneg (bvashr (app abstr-vals$2442 0) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (app abstr-vals$2442 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$2442 0) (bvneg (bvashr (app abstr-vals$2442 0) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (app abstr-vals$2442 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$2442 0) (bvneg (bvashr (app abstr-vals$2442 0) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (app abstr-vals$2442 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$2442 0) (bvneg (bvashr (app abstr-vals$2442 0) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64))) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (app abstr-vals$2442 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$2442 0) (bvneg (bvashr (app abstr-vals$2442 0) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (app abstr-vals$2442 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$2442 0) (bvneg (bvashr (app abstr-vals$2442 0) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (app abstr-vals$2442 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$2442 0) (bvneg (bvashr (app abstr-vals$2442 0) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (app abstr-vals$2442 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$2442 0) (bvneg (bvashr (app abstr-vals$2442 0) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bv #xffffffff80000000 64))) t74) (bvand (ite (bveq (bv #x00000000 32) t74) (bv #x00000000 32) (bv #x00000001 32)) (bvashr (extract 31 0 (ite (bvsle (bv #xffffffff80000000 64) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (app abstr-vals$2442 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$2442 0) (bvneg (bvashr (app abstr-vals$2442 0) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (app abstr-vals$2442 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$2442 0) (bvneg (bvashr (app abstr-vals$2442 0) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (app abstr-vals$2442 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$2442 0) (bvneg (bvashr (app abstr-vals$2442 0) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (app abstr-vals$2442 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$2442 0) (bvneg (bvashr (app abstr-vals$2442 0) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64))) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (app abstr-vals$2442 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$2442 0) (bvneg (bvashr (app abstr-vals$2442 0) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (app abstr-vals$2442 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$2442 0) (bvneg (bvashr (app abstr-vals$2442 0) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (app abstr-vals$2442 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$2442 0) (bvneg (bvashr (app abstr-vals$2442 0) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (app abstr-vals$2442 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$2442 0) (bvneg (bvashr (app abstr-vals$2442 0) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bv #xffffffff80000000 64))) (bvadd (bv #xffffffff 32) t74)))))
optimized x86 0:
  (int64_t
 (bvadd (bvashr (app abstr-vals$2442 0) (ite* (⊢ (|| xi?$2417 (&& xi?$2418 (! xi?$2417))) (ite* (⊢ xi?$2417 (bv #x000000000000001e 64)) (⊢ (&& xi?$2418 (! xi?$2417)) (bv #x000000000000001f 64)))) (⊢ (|| (&& (! xi?$2417) (&& xi?$2419 (! xi?$2418))) (&& (! xi?$2417) (&& (! xi?$2418) (! xi?$2419)))) (zero-extend (ite* (⊢ (&& (! xi?$2417) (&& xi?$2419 (! xi?$2418))) t74) (⊢ (&& (! xi?$2417) (&& (! xi?$2418) (! xi?$2419))) (bvadd (bv #xffffffff 32) t74))) (bitvector 64))))) (bvand (ite (bvslt (bv #x0000000000000000 64) (ite* (⊢ (|| xi?$2417 (&& xi?$2418 (! xi?$2417))) (ite* (⊢ xi?$2417 (bv #x000000000000001e 64)) (⊢ (&& xi?$2418 (! xi?$2417)) (bv #x000000000000001f 64)))) (⊢ (|| (&& (! xi?$2417) (&& xi?$2419 (! xi?$2418))) (&& (! xi?$2417) (&& (! xi?$2418) (! xi?$2419)))) (zero-extend (ite* (⊢ (&& (! xi?$2417) (&& xi?$2419 (! xi?$2418))) t74) (⊢ (&& (! xi?$2417) (&& (! xi?$2418) (! xi?$2419))) (bvadd (bv #xffffffff 32) t74))) (bitvector 64))))) (bv #x0000000000000001 64) (bv #x0000000000000000 64)) (bvashr (app abstr-vals$2442 0) (bvadd (bv #xffffffffffffffff 64) (ite* (⊢ (|| xi?$2417 (&& xi?$2418 (! xi?$2417))) (ite* (⊢ xi?$2417 (bv #x000000000000001e 64)) (⊢ (&& xi?$2418 (! xi?$2417)) (bv #x000000000000001f 64)))) (⊢ (|| (&& (! xi?$2417) (&& xi?$2419 (! xi?$2418))) (&& (! xi?$2417) (&& (! xi?$2418) (! xi?$2419)))) (zero-extend (ite* (⊢ (&& (! xi?$2417) (&& xi?$2419 (! xi?$2418))) t74) (⊢ (&& (! xi?$2417) (&& (! xi?$2418) (! xi?$2419))) (bvadd (bv #xffffffff 32) t74))) (bitvector 64)))))))))
Ran synthesizer for 28 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-shr
  (vec-cast
   (vec-max
    (vec-min
     (vec-add
      (vec-bwand
       (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
       (vec-div
        (vec-mul
         (vec-cast
          (vec-mul
           (vec-cast
            (vec-add
             (vec-mul
              (vec-cast
               (load
                (buffer input1 'uint8)
                (ramp
                 (sca-add
                  (sca-mul output.s0.x.x 16)
                  (sca-add
                   (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
                   (var-lookup 't72)))
                 1
                 16)
                (aligned 1 0))
               'int16
               16)
              (sca-broadcast (int16_t (bv #x0040 16)) 16))
             (sca-broadcast
              (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))
              16))
            'int32
            16)
           (vec-cast
            (sca-broadcast
             (sca-mul
              (sca-sub (int16_t t147) (int16_t t148))
              (int16_t (bv #x0040 16)))
             16)
            'int32
            16))
          'int64
          16)
         (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
        (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
      (vec-div
       (vec-mul
        (vec-cast
         (vec-mul
          (vec-cast
           (vec-add
            (vec-mul
             (vec-cast
              (load
               (buffer input1 'uint8)
               (ramp
                (sca-add
                 (sca-mul output.s0.x.x 16)
                 (sca-add
                  (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
                  (var-lookup 't72)))
                1
                16)
               (aligned 1 0))
              'int16
              16)
             (sca-broadcast (int16_t (bv #x0040 16)) 16))
            (sca-broadcast
             (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))
             16))
           'int32
           16)
          (vec-cast
           (sca-broadcast
            (sca-mul
             (sca-sub (int16_t t147) (int16_t t148))
             (int16_t (bv #x0040 16)))
            16)
           'int32
           16))
         'int64
         16)
        (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
       (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
     (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
    (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
   'int32
   16)
  (sca-broadcast (uint32_t t74) 16))
 (vec-bwand
  (vec-if
   (sca-broadcast (sca-lt (uint32_t (bv #x00000000 32)) (uint32_t t74)) 16)
   (sca-broadcast (int32_t (bv #x00000001 32)) 16)
   (sca-broadcast (int32_t (bv #x00000000 32)) 16))
  (vec-shr
   (vec-cast
    (vec-max
     (vec-min
      (vec-add
       (vec-bwand
        (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
        (vec-div
         (vec-mul
          (vec-cast
           (vec-mul
            (vec-cast
             (vec-add
              (vec-mul
               (vec-cast
                (load
                 (buffer input1 'uint8)
                 (ramp
                  (sca-add
                   (sca-mul output.s0.x.x 16)
                   (sca-add
                    (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
                    (var-lookup 't72)))
                  1
                  16)
                 (aligned 1 0))
                'int16
                16)
               (sca-broadcast (int16_t (bv #x0040 16)) 16))
              (sca-broadcast
               (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))
               16))
             'int32
             16)
            (vec-cast
             (sca-broadcast
              (sca-mul
               (sca-sub (int16_t t147) (int16_t t148))
               (int16_t (bv #x0040 16)))
              16)
             'int32
             16))
           'int64
           16)
          (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
         (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
       (vec-div
        (vec-mul
         (vec-cast
          (vec-mul
           (vec-cast
            (vec-add
             (vec-mul
              (vec-cast
               (load
                (buffer input1 'uint8)
                (ramp
                 (sca-add
                  (sca-mul output.s0.x.x 16)
                  (sca-add
                   (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
                   (var-lookup 't72)))
                 1
                 16)
                (aligned 1 0))
               'int16
               16)
              (sca-broadcast (int16_t (bv #x0040 16)) 16))
             (sca-broadcast
              (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))
              16))
            'int32
            16)
           (vec-cast
            (sca-broadcast
             (sca-mul
              (sca-sub (int16_t t147) (int16_t t148))
              (int16_t (bv #x0040 16)))
             16)
            'int32
            16))
          'int64
          16)
         (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
        (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
      (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
     (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
    'int32
    16)
   (sca-broadcast (sca-sub (uint32_t t74) (uint32_t (bv #x00000001 32))) 16))))
template:
  (vs-shift-right
 ...
 (vs-mpy-add
  ...
  (vs-mpy-add
   ...
   (vs-mpy-add
    ...
    (combine
     #<load-data>
     (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))))
    (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
    #f
    #f
    #f
    'int16)
   (list
    (sca-mul (sca-sub (int16_t t147) (int16_t t148)) (int16_t (bv #x0040 16))))
   #f
   #f
   #f
   'int32)
  (list (int32_t output_multiplier))
  #f
  #f
  #f
  'int64)
 (int64_t (bv #x000000000000001f 64))
 x?$2420
 x?$2421
 x?$2422)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$2443 idx) (bv #x1fffffffc0000000 64)) (bvsle (bv #xe000000000000000 64) (app abstr-vals$2443 idx)))))
optimized-halide-expr:
  (vec-add
 (vec-shr
  (vec-cast
   (vec-max
    (vec-min
     (vec-add
      (vec-bwand
       (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
       (vec-div
        #<abstr-halide-expr>
        (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
      (vec-div
       #<abstr-halide-expr>
       (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
     (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
    (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
   'int32
   16)
  (sca-broadcast (uint32_t t74) 16))
 (vec-bwand
  (vec-if
   (sca-broadcast (sca-lt (uint32_t (bv #x00000000 32)) (uint32_t t74)) 16)
   (sca-broadcast (int32_t (bv #x00000001 32)) 16)
   (sca-broadcast (int32_t (bv #x00000000 32)) 16))
  (vec-shr
   (vec-cast
    (vec-max
     (vec-min
      (vec-add
       (vec-bwand
        (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
        (vec-div
         #<abstr-halide-expr>
         (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
       (vec-div
        #<abstr-halide-expr>
        (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
      (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
     (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
    'int32
    16)
   (sca-broadcast (sca-sub (uint32_t t74) (uint32_t (bv #x00000001 32))) 16))))
optimized-template:
  (vs-shift-right
 ...
 #<abstr-expr>
 (int64_t (bv #x000000000000001f 64))
 x?$2420
 x?$2421
 x?$2422)
optimized Halide 0:
  (int32_t
 (bvadd (bvashr (extract 31 0 (ite (bvsle (bv #xffffffff80000000 64) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (app abstr-vals$2443 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$2443 0) (bvneg (bvashr (app abstr-vals$2443 0) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (app abstr-vals$2443 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$2443 0) (bvneg (bvashr (app abstr-vals$2443 0) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (app abstr-vals$2443 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$2443 0) (bvneg (bvashr (app abstr-vals$2443 0) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (app abstr-vals$2443 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$2443 0) (bvneg (bvashr (app abstr-vals$2443 0) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64))) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (app abstr-vals$2443 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$2443 0) (bvneg (bvashr (app abstr-vals$2443 0) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (app abstr-vals$2443 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$2443 0) (bvneg (bvashr (app abstr-vals$2443 0) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (app abstr-vals$2443 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$2443 0) (bvneg (bvashr (app abstr-vals$2443 0) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (app abstr-vals$2443 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$2443 0) (bvneg (bvashr (app abstr-vals$2443 0) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bv #xffffffff80000000 64))) t74) (bvand (ite (bveq (bv #x00000000 32) t74) (bv #x00000000 32) (bv #x00000001 32)) (bvashr (extract 31 0 (ite (bvsle (bv #xffffffff80000000 64) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (app abstr-vals$2443 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$2443 0) (bvneg (bvashr (app abstr-vals$2443 0) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (app abstr-vals$2443 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$2443 0) (bvneg (bvashr (app abstr-vals$2443 0) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (app abstr-vals$2443 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$2443 0) (bvneg (bvashr (app abstr-vals$2443 0) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (app abstr-vals$2443 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$2443 0) (bvneg (bvashr (app abstr-vals$2443 0) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64))) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (app abstr-vals$2443 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$2443 0) (bvneg (bvashr (app abstr-vals$2443 0) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (app abstr-vals$2443 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$2443 0) (bvneg (bvashr (app abstr-vals$2443 0) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (app abstr-vals$2443 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$2443 0) (bvneg (bvashr (app abstr-vals$2443 0) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (app abstr-vals$2443 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$2443 0) (bvneg (bvashr (app abstr-vals$2443 0) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bv #xffffffff80000000 64))) (bvadd (bv #xffffffff 32) t74)))))
optimized x86 0:
  (int64_t
 (ite x?$2420 (bvadd (ite x?$2422 (bvashr (app abstr-vals$2443 0) (bv #x000000000000001f 64)) (bvlshr (app abstr-vals$2443 0) (bv #x000000000000001f 64))) (bvand (bv #x0000000000000001 64) (ite x?$2422 (bvashr (app abstr-vals$2443 0) (bv #x000000000000001e 64)) (bvlshr (app abstr-vals$2443 0) (bv #x000000000000001e 64))))) (ite x?$2422 (bvashr (app abstr-vals$2443 0) (bv #x000000000000001f 64)) (bvlshr (app abstr-vals$2443 0) (bv #x000000000000001f 64)))))
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-shr
  (vec-cast
   (vec-max
    (vec-min
     (vec-add
      (vec-bwand
       (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
       (vec-div
        (vec-mul
         (vec-cast
          (vec-mul
           (vec-cast
            (vec-add
             (vec-mul
              (vec-cast
               (load
                (buffer input1 'uint8)
                (ramp
                 (sca-add
                  (sca-mul output.s0.x.x 16)
                  (sca-add
                   (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
                   (var-lookup 't72)))
                 1
                 16)
                (aligned 1 0))
               'int16
               16)
              (sca-broadcast (int16_t (bv #x0040 16)) 16))
             (sca-broadcast
              (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))
              16))
            'int32
            16)
           (vec-cast
            (sca-broadcast
             (sca-mul
              (sca-sub (int16_t t147) (int16_t t148))
              (int16_t (bv #x0040 16)))
             16)
            'int32
            16))
          'int64
          16)
         (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
        (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
      (vec-div
       (vec-mul
        (vec-cast
         (vec-mul
          (vec-cast
           (vec-add
            (vec-mul
             (vec-cast
              (load
               (buffer input1 'uint8)
               (ramp
                (sca-add
                 (sca-mul output.s0.x.x 16)
                 (sca-add
                  (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
                  (var-lookup 't72)))
                1
                16)
               (aligned 1 0))
              'int16
              16)
             (sca-broadcast (int16_t (bv #x0040 16)) 16))
            (sca-broadcast
             (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))
             16))
           'int32
           16)
          (vec-cast
           (sca-broadcast
            (sca-mul
             (sca-sub (int16_t t147) (int16_t t148))
             (int16_t (bv #x0040 16)))
            16)
           'int32
           16))
         'int64
         16)
        (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
       (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
     (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
    (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
   'int32
   16)
  (sca-broadcast (uint32_t t74) 16))
 (vec-bwand
  (vec-if
   (sca-broadcast (sca-lt (uint32_t (bv #x00000000 32)) (uint32_t t74)) 16)
   (sca-broadcast (int32_t (bv #x00000001 32)) 16)
   (sca-broadcast (int32_t (bv #x00000000 32)) 16))
  (vec-shr
   (vec-cast
    (vec-max
     (vec-min
      (vec-add
       (vec-bwand
        (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
        (vec-div
         (vec-mul
          (vec-cast
           (vec-mul
            (vec-cast
             (vec-add
              (vec-mul
               (vec-cast
                (load
                 (buffer input1 'uint8)
                 (ramp
                  (sca-add
                   (sca-mul output.s0.x.x 16)
                   (sca-add
                    (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
                    (var-lookup 't72)))
                  1
                  16)
                 (aligned 1 0))
                'int16
                16)
               (sca-broadcast (int16_t (bv #x0040 16)) 16))
              (sca-broadcast
               (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))
               16))
             'int32
             16)
            (vec-cast
             (sca-broadcast
              (sca-mul
               (sca-sub (int16_t t147) (int16_t t148))
               (int16_t (bv #x0040 16)))
              16)
             'int32
             16))
           'int64
           16)
          (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
         (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
       (vec-div
        (vec-mul
         (vec-cast
          (vec-mul
           (vec-cast
            (vec-add
             (vec-mul
              (vec-cast
               (load
                (buffer input1 'uint8)
                (ramp
                 (sca-add
                  (sca-mul output.s0.x.x 16)
                  (sca-add
                   (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
                   (var-lookup 't72)))
                 1
                 16)
                (aligned 1 0))
               'int16
               16)
              (sca-broadcast (int16_t (bv #x0040 16)) 16))
             (sca-broadcast
              (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))
              16))
            'int32
            16)
           (vec-cast
            (sca-broadcast
             (sca-mul
              (sca-sub (int16_t t147) (int16_t t148))
              (int16_t (bv #x0040 16)))
             16)
            'int32
            16))
          'int64
          16)
         (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
        (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
      (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
     (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
    'int32
    16)
   (sca-broadcast (sca-sub (uint32_t t74) (uint32_t (bv #x00000001 32))) 16))))
template:
  (cast
 ...
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (vs-mpy-add
    ...
    (vs-mpy-add
     ...
     (combine
      #<load-data>
      (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))))
     (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
     #f
     #f
     #f
     'int16)
    (list
     (sca-mul
      (sca-sub (int16_t t147) (int16_t t148))
      (int16_t (bv #x0040 16))))
    #f
    #f
    #f
    'int32)
   (list (int32_t output_multiplier))
   #f
   #f
   #f
   'int64)
  (int64_t (bv #x000000000000001f 64))
  #t
  x?$2001
  #t)
 'int32
 x?$2416)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$2444 idx) (bv #x0000000040000000 64)) (bvsle (bv #xffffffffc0000000 64) (app abstr-vals$2444 idx)))))
optimized-halide-expr:
  (vec-add
 (vec-shr
  (vec-cast #<abstr-halide-expr> 'int32 16)
  (sca-broadcast (uint32_t t74) 16))
 (vec-bwand
  (vec-if
   (sca-broadcast (sca-lt (uint32_t (bv #x00000000 32)) (uint32_t t74)) 16)
   (sca-broadcast (int32_t (bv #x00000001 32)) 16)
   (sca-broadcast (int32_t (bv #x00000000 32)) 16))
  (vec-shr
   (vec-cast #<abstr-halide-expr> 'int32 16)
   (sca-broadcast (sca-sub (uint32_t t74) (uint32_t (bv #x00000001 32))) 16))))
optimized-template:
  (cast ... #<abstr-expr> 'int32 x?$2416)
optimized Halide 0:
  (int32_t
 (bvadd (bvashr (extract 31 0 (app abstr-vals$2444 0)) t74) (bvand (ite (bveq (bv #x00000000 32) t74) (bv #x00000000 32) (bv #x00000001 32)) (bvashr (extract 31 0 (app abstr-vals$2444 0)) (bvadd (bv #xffffffff 32) t74)))))
optimized x86 0:
  (int32_t
 (ite x?$2416 (ite (bvslt (app abstr-vals$2444 0) (bv #xffffffff80000000 64)) (bv #x80000000 32) (ite (bvslt (bv #x000000007fffffff 64) (app abstr-vals$2444 0)) (bv #x7fffffff 32) (extract 31 0 (app abstr-vals$2444 0)))) (extract 31 0 (app abstr-vals$2444 0))))
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-shr
  (vec-cast
   (vec-max
    (vec-min
     (vec-add
      (vec-bwand
       (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
       (vec-div
        (vec-mul
         (vec-cast
          (vec-mul
           (vec-cast
            (vec-add
             (vec-mul
              (vec-cast
               (load
                (buffer input1 'uint8)
                (ramp
                 (sca-add
                  (sca-mul output.s0.x.x 16)
                  (sca-add
                   (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
                   (var-lookup 't72)))
                 1
                 16)
                (aligned 1 0))
               'int16
               16)
              (sca-broadcast (int16_t (bv #x0040 16)) 16))
             (sca-broadcast
              (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))
              16))
            'int32
            16)
           (vec-cast
            (sca-broadcast
             (sca-mul
              (sca-sub (int16_t t147) (int16_t t148))
              (int16_t (bv #x0040 16)))
             16)
            'int32
            16))
          'int64
          16)
         (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
        (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
      (vec-div
       (vec-mul
        (vec-cast
         (vec-mul
          (vec-cast
           (vec-add
            (vec-mul
             (vec-cast
              (load
               (buffer input1 'uint8)
               (ramp
                (sca-add
                 (sca-mul output.s0.x.x 16)
                 (sca-add
                  (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
                  (var-lookup 't72)))
                1
                16)
               (aligned 1 0))
              'int16
              16)
             (sca-broadcast (int16_t (bv #x0040 16)) 16))
            (sca-broadcast
             (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))
             16))
           'int32
           16)
          (vec-cast
           (sca-broadcast
            (sca-mul
             (sca-sub (int16_t t147) (int16_t t148))
             (int16_t (bv #x0040 16)))
            16)
           'int32
           16))
         'int64
         16)
        (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
       (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
     (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
    (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
   'int32
   16)
  (sca-broadcast (uint32_t t74) 16))
 (vec-bwand
  (vec-if
   (sca-broadcast (sca-lt (uint32_t (bv #x00000000 32)) (uint32_t t74)) 16)
   (sca-broadcast (int32_t (bv #x00000001 32)) 16)
   (sca-broadcast (int32_t (bv #x00000000 32)) 16))
  (vec-shr
   (vec-cast
    (vec-max
     (vec-min
      (vec-add
       (vec-bwand
        (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
        (vec-div
         (vec-mul
          (vec-cast
           (vec-mul
            (vec-cast
             (vec-add
              (vec-mul
               (vec-cast
                (load
                 (buffer input1 'uint8)
                 (ramp
                  (sca-add
                   (sca-mul output.s0.x.x 16)
                   (sca-add
                    (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
                    (var-lookup 't72)))
                  1
                  16)
                 (aligned 1 0))
                'int16
                16)
               (sca-broadcast (int16_t (bv #x0040 16)) 16))
              (sca-broadcast
               (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))
               16))
             'int32
             16)
            (vec-cast
             (sca-broadcast
              (sca-mul
               (sca-sub (int16_t t147) (int16_t t148))
               (int16_t (bv #x0040 16)))
              16)
             'int32
             16))
           'int64
           16)
          (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
         (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
       (vec-div
        (vec-mul
         (vec-cast
          (vec-mul
           (vec-cast
            (vec-add
             (vec-mul
              (vec-cast
               (load
                (buffer input1 'uint8)
                (ramp
                 (sca-add
                  (sca-mul output.s0.x.x 16)
                  (sca-add
                   (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
                   (var-lookup 't72)))
                 1
                 16)
                (aligned 1 0))
               'int16
               16)
              (sca-broadcast (int16_t (bv #x0040 16)) 16))
             (sca-broadcast
              (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))
              16))
            'int32
            16)
           (vec-cast
            (sca-broadcast
             (sca-mul
              (sca-sub (int16_t t147) (int16_t t148))
              (int16_t (bv #x0040 16)))
             16)
            'int32
            16))
          'int64
          16)
         (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
        (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
      (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
     (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
    'int32
    16)
   (sca-broadcast (sca-sub (uint32_t t74) (uint32_t (bv #x00000001 32))) 16))))
template:
  (cast
 ...
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (vs-mpy-add
    ...
    (vs-mpy-add
     ...
     (combine
      #<load-data>
      (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))))
     (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
     #f
     #f
     #f
     'int16)
    (list
     (sca-mul
      (sca-sub (int16_t t147) (int16_t t148))
      (int16_t (bv #x0040 16))))
    #f
    #f
    #f
    'int32)
   (list (int32_t output_multiplier))
   #f
   #f
   #f
   'int64)
  (int64_t (bv #x000000000000001f 64))
  #t
  x?$2001
  #t)
 'int32
 x?$2429)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$2445 idx) (bv #x0000000040000000 64)) (bvsle (bv #xffffffffc0000000 64) (app abstr-vals$2445 idx)))))
optimized-halide-expr:
  (vec-add
 (vec-shr
  (vec-cast #<abstr-halide-expr> 'int32 16)
  (sca-broadcast (uint32_t t74) 16))
 (vec-bwand
  (vec-if
   (sca-broadcast (sca-lt (uint32_t (bv #x00000000 32)) (uint32_t t74)) 16)
   (sca-broadcast (int32_t (bv #x00000001 32)) 16)
   (sca-broadcast (int32_t (bv #x00000000 32)) 16))
  (vec-shr
   (vec-cast #<abstr-halide-expr> 'int32 16)
   (sca-broadcast (sca-sub (uint32_t t74) (uint32_t (bv #x00000001 32))) 16))))
optimized-template:
  (cast ... #<abstr-expr> 'int32 x?$2429)
optimized Halide 0:
  (int32_t
 (bvadd (bvashr (extract 31 0 (app abstr-vals$2445 0)) t74) (bvand (ite (bveq (bv #x00000000 32) t74) (bv #x00000000 32) (bv #x00000001 32)) (bvashr (extract 31 0 (app abstr-vals$2445 0)) (bvadd (bv #xffffffff 32) t74)))))
optimized x86 0:
  (int32_t
 (ite x?$2429 (ite (bvslt (app abstr-vals$2445 0) (bv #xffffffff80000000 64)) (bv #x80000000 32) (ite (bvslt (bv #x000000007fffffff 64) (app abstr-vals$2445 0)) (bv #x7fffffff 32) (extract 31 0 (app abstr-vals$2445 0)))) (extract 31 0 (app abstr-vals$2445 0))))
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-shr
  (vec-cast
   (vec-max
    (vec-min
     (vec-add
      (vec-bwand
       (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
       (vec-div
        (vec-mul
         (vec-cast
          (vec-mul
           (vec-cast
            (vec-add
             (vec-mul
              (vec-cast
               (load
                (buffer input1 'uint8)
                (ramp
                 (sca-add
                  (sca-mul output.s0.x.x 16)
                  (sca-add
                   (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
                   (var-lookup 't72)))
                 1
                 16)
                (aligned 1 0))
               'int16
               16)
              (sca-broadcast (int16_t (bv #x0040 16)) 16))
             (sca-broadcast
              (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))
              16))
            'int32
            16)
           (vec-cast
            (sca-broadcast
             (sca-mul
              (sca-sub (int16_t t147) (int16_t t148))
              (int16_t (bv #x0040 16)))
             16)
            'int32
            16))
          'int64
          16)
         (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
        (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
      (vec-div
       (vec-mul
        (vec-cast
         (vec-mul
          (vec-cast
           (vec-add
            (vec-mul
             (vec-cast
              (load
               (buffer input1 'uint8)
               (ramp
                (sca-add
                 (sca-mul output.s0.x.x 16)
                 (sca-add
                  (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
                  (var-lookup 't72)))
                1
                16)
               (aligned 1 0))
              'int16
              16)
             (sca-broadcast (int16_t (bv #x0040 16)) 16))
            (sca-broadcast
             (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))
             16))
           'int32
           16)
          (vec-cast
           (sca-broadcast
            (sca-mul
             (sca-sub (int16_t t147) (int16_t t148))
             (int16_t (bv #x0040 16)))
            16)
           'int32
           16))
         'int64
         16)
        (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
       (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
     (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
    (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
   'int32
   16)
  (sca-broadcast (uint32_t t74) 16))
 (vec-bwand
  (vec-if
   (sca-broadcast (sca-lt (uint32_t (bv #x00000000 32)) (uint32_t t74)) 16)
   (sca-broadcast (int32_t (bv #x00000001 32)) 16)
   (sca-broadcast (int32_t (bv #x00000000 32)) 16))
  (vec-shr
   (vec-cast
    (vec-max
     (vec-min
      (vec-add
       (vec-bwand
        (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
        (vec-div
         (vec-mul
          (vec-cast
           (vec-mul
            (vec-cast
             (vec-add
              (vec-mul
               (vec-cast
                (load
                 (buffer input1 'uint8)
                 (ramp
                  (sca-add
                   (sca-mul output.s0.x.x 16)
                   (sca-add
                    (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
                    (var-lookup 't72)))
                  1
                  16)
                 (aligned 1 0))
                'int16
                16)
               (sca-broadcast (int16_t (bv #x0040 16)) 16))
              (sca-broadcast
               (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))
               16))
             'int32
             16)
            (vec-cast
             (sca-broadcast
              (sca-mul
               (sca-sub (int16_t t147) (int16_t t148))
               (int16_t (bv #x0040 16)))
              16)
             'int32
             16))
           'int64
           16)
          (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
         (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
       (vec-div
        (vec-mul
         (vec-cast
          (vec-mul
           (vec-cast
            (vec-add
             (vec-mul
              (vec-cast
               (load
                (buffer input1 'uint8)
                (ramp
                 (sca-add
                  (sca-mul output.s0.x.x 16)
                  (sca-add
                   (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
                   (var-lookup 't72)))
                 1
                 16)
                (aligned 1 0))
               'int16
               16)
              (sca-broadcast (int16_t (bv #x0040 16)) 16))
             (sca-broadcast
              (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))
              16))
            'int32
            16)
           (vec-cast
            (sca-broadcast
             (sca-mul
              (sca-sub (int16_t t147) (int16_t t148))
              (int16_t (bv #x0040 16)))
             16)
            'int32
            16))
          'int64
          16)
         (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
        (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
      (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
     (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
    'int32
    16)
   (sca-broadcast (sca-sub (uint32_t t74) (uint32_t (bv #x00000001 32))) 16))))
template:
  (vs-mpy-add
 ...
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (vs-mpy-add
    ...
    (vs-mpy-add
     ...
     (combine
      #<load-data>
      (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))))
     (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
     #f
     #f
     #f
     'int16)
    (list
     (sca-mul
      (sca-sub (int16_t t147) (int16_t t148))
      (int16_t (bv #x0040 16))))
    #f
    #f
    #f
    'int32)
   (list (int32_t output_multiplier))
   #f
   #f
   #f
   'int64)
  (int64_t (bv #x000000000000001f 64))
  #t
  x?$2001
  #t)
 (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
 (! x?$2433)
 (! x?$2434)
 (! x?$2435)
 'int32)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$2446 idx) (bv #x0000000040000000 64)) (bvsle (bv #xffffffffc0000000 64) (app abstr-vals$2446 idx)))))
optimized-halide-expr:
  (vec-add
 (vec-shr
  (vec-cast #<abstr-halide-expr> 'int32 16)
  (sca-broadcast (uint32_t t74) 16))
 (vec-bwand
  (vec-if
   (sca-broadcast (sca-lt (uint32_t (bv #x00000000 32)) (uint32_t t74)) 16)
   (sca-broadcast (int32_t (bv #x00000001 32)) 16)
   (sca-broadcast (int32_t (bv #x00000000 32)) 16))
  (vec-shr
   (vec-cast #<abstr-halide-expr> 'int32 16)
   (sca-broadcast (sca-sub (uint32_t t74) (uint32_t (bv #x00000001 32))) 16))))
optimized-template:
  (vs-mpy-add
 ...
 #<abstr-expr>
 (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
 (! x?$2433)
 (! x?$2434)
 (! x?$2435)
 'int32)
optimized Halide 0:
  (int32_t
 (bvadd (bvashr (extract 31 0 (app abstr-vals$2446 0)) t74) (bvand (ite (bveq (bv #x00000000 32) t74) (bv #x00000000 32) (bv #x00000001 32)) (bvashr (extract 31 0 (app abstr-vals$2446 0)) (bvadd (bv #xffffffff 32) t74)))))
optimized x86 0:
  (int32_t
 (ite* (⊢ (&& x?$2435 (! (&& (! x?$2433) (! x?$2435)))) (ite x?$2433 (bvadd (extract 31 0 (app abstr-vals$2446 1)) (ite x?$2433 (bvadd (extract 31 0 (app abstr-vals$2446 0)) (ite x?$2434 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2434 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (extract 31 0 (app abstr-vals$2446 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2434 (bv #x00000000 32) (bv #x00000001 32))))) (extract 31 0 (app abstr-vals$2446 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2434 (bv #x00000000 32) (bv #x00000001 32)))))))) (bvadd (ite x?$2433 (bvadd (extract 31 0 (app abstr-vals$2446 0)) (ite x?$2434 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2434 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (extract 31 0 (app abstr-vals$2446 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2434 (bv #x00000000 32) (bv #x00000001 32))))) (extract 31 0 (app abstr-vals$2446 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2434 (bv #x00000000 32) (bv #x00000001 32))))))) (ite (bvsle (bvadd (bv #x80000000 32) (bvneg (ite (bvsle (ite x?$2433 (bvadd (extract 31 0 (app abstr-vals$2446 0)) (ite x?$2434 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2434 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (extract 31 0 (app abstr-vals$2446 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2434 (bv #x00000000 32) (bv #x00000001 32))))) (extract 31 0 (app abstr-vals$2446 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2434 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)) (ite x?$2433 (bvadd (extract 31 0 (app abstr-vals$2446 0)) (ite x?$2434 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2434 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (extract 31 0 (app abstr-vals$2446 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2434 (bv #x00000000 32) (bv #x00000001 32))))) (extract 31 0 (app abstr-vals$2446 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2434 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)))) (ite (bvsle (extract 31 0 (app abstr-vals$2446 1)) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$2433 (bvadd (extract 31 0 (app abstr-vals$2446 0)) (ite x?$2434 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2434 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (extract 31 0 (app abstr-vals$2446 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2434 (bv #x00000000 32) (bv #x00000001 32))))) (extract 31 0 (app abstr-vals$2446 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2434 (bv #x00000000 32) (bv #x00000001 32)))))))) (ite x?$2433 (bvadd (extract 31 0 (app abstr-vals$2446 0)) (ite x?$2434 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2434 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (extract 31 0 (app abstr-vals$2446 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2434 (bv #x00000000 32) (bv #x00000001 32))))) (extract 31 0 (app abstr-vals$2446 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2434 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32))))) (extract 31 0 (app abstr-vals$2446 1)) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$2433 (bvadd (extract 31 0 (app abstr-vals$2446 0)) (ite x?$2434 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2434 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (extract 31 0 (app abstr-vals$2446 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2434 (bv #x00000000 32) (bv #x00000001 32))))) (extract 31 0 (app abstr-vals$2446 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2434 (bv #x00000000 32) (bv #x00000001 32)))))))) (ite x?$2433 (bvadd (extract 31 0 (app abstr-vals$2446 0)) (ite x?$2434 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2434 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (extract 31 0 (app abstr-vals$2446 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2434 (bv #x00000000 32) (bv #x00000001 32))))) (extract 31 0 (app abstr-vals$2446 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2434 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)))))) (ite (bvsle (extract 31 0 (app abstr-vals$2446 1)) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$2433 (bvadd (extract 31 0 (app abstr-vals$2446 0)) (ite x?$2434 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2434 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (extract 31 0 (app abstr-vals$2446 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2434 (bv #x00000000 32) (bv #x00000001 32))))) (extract 31 0 (app abstr-vals$2446 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2434 (bv #x00000000 32) (bv #x00000001 32)))))))) (ite x?$2433 (bvadd (extract 31 0 (app abstr-vals$2446 0)) (ite x?$2434 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2434 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (extract 31 0 (app abstr-vals$2446 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2434 (bv #x00000000 32) (bv #x00000001 32))))) (extract 31 0 (app abstr-vals$2446 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2434 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32))))) (extract 31 0 (app abstr-vals$2446 1)) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$2433 (bvadd (extract 31 0 (app abstr-vals$2446 0)) (ite x?$2434 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2434 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (extract 31 0 (app abstr-vals$2446 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2434 (bv #x00000000 32) (bv #x00000001 32))))) (extract 31 0 (app abstr-vals$2446 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2434 (bv #x00000000 32) (bv #x00000001 32)))))))) (ite x?$2433 (bvadd (extract 31 0 (app abstr-vals$2446 0)) (ite x?$2434 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2434 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (extract 31 0 (app abstr-vals$2446 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2434 (bv #x00000000 32) (bv #x00000001 32))))) (extract 31 0 (app abstr-vals$2446 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2434 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32))))) (bvadd (bv #x80000000 32) (bvneg (ite (bvsle (ite x?$2433 (bvadd (extract 31 0 (app abstr-vals$2446 0)) (ite x?$2434 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2434 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (extract 31 0 (app abstr-vals$2446 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2434 (bv #x00000000 32) (bv #x00000001 32))))) (extract 31 0 (app abstr-vals$2446 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2434 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)) (ite x?$2433 (bvadd (extract 31 0 (app abstr-vals$2446 0)) (ite x?$2434 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2434 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (extract 31 0 (app abstr-vals$2446 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2434 (bv #x00000000 32) (bv #x00000001 32))))) (extract 31 0 (app abstr-vals$2446 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2434 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)))))))) (⊢ (|| (&& (! x?$2433) (! x?$2435)) (&& (! x?$2435) (! (&& (! x?$2433) (! x?$2435))))) (bvashr (ite x?$2433 (bvadd (extract 31 0 (app abstr-vals$2446 1)) (ite x?$2433 (bvadd (extract 31 0 (app abstr-vals$2446 0)) (ite x?$2434 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2434 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (extract 31 0 (app abstr-vals$2446 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2434 (bv #x00000000 32) (bv #x00000001 32))))) (extract 31 0 (app abstr-vals$2446 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2434 (bv #x00000000 32) (bv #x00000001 32)))))))) (bvadd (ite x?$2433 (bvadd (extract 31 0 (app abstr-vals$2446 0)) (ite x?$2434 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2434 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (extract 31 0 (app abstr-vals$2446 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2434 (bv #x00000000 32) (bv #x00000001 32))))) (extract 31 0 (app abstr-vals$2446 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2434 (bv #x00000000 32) (bv #x00000001 32))))))) (ite (bvsle (bvadd (bv #x80000000 32) (bvneg (ite (bvsle (ite x?$2433 (bvadd (extract 31 0 (app abstr-vals$2446 0)) (ite x?$2434 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2434 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (extract 31 0 (app abstr-vals$2446 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2434 (bv #x00000000 32) (bv #x00000001 32))))) (extract 31 0 (app abstr-vals$2446 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2434 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)) (ite x?$2433 (bvadd (extract 31 0 (app abstr-vals$2446 0)) (ite x?$2434 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2434 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (extract 31 0 (app abstr-vals$2446 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2434 (bv #x00000000 32) (bv #x00000001 32))))) (extract 31 0 (app abstr-vals$2446 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2434 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)))) (ite (bvsle (extract 31 0 (app abstr-vals$2446 1)) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$2433 (bvadd (extract 31 0 (app abstr-vals$2446 0)) (ite x?$2434 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2434 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (extract 31 0 (app abstr-vals$2446 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2434 (bv #x00000000 32) (bv #x00000001 32))))) (extract 31 0 (app abstr-vals$2446 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2434 (bv #x00000000 32) (bv #x00000001 32)))))))) (ite x?$2433 (bvadd (extract 31 0 (app abstr-vals$2446 0)) (ite x?$2434 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2434 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (extract 31 0 (app abstr-vals$2446 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2434 (bv #x00000000 32) (bv #x00000001 32))))) (extract 31 0 (app abstr-vals$2446 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2434 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32))))) (extract 31 0 (app abstr-vals$2446 1)) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$2433 (bvadd (extract 31 0 (app abstr-vals$2446 0)) (ite x?$2434 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2434 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (extract 31 0 (app abstr-vals$2446 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2434 (bv #x00000000 32) (bv #x00000001 32))))) (extract 31 0 (app abstr-vals$2446 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2434 (bv #x00000000 32) (bv #x00000001 32)))))))) (ite x?$2433 (bvadd (extract 31 0 (app abstr-vals$2446 0)) (ite x?$2434 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2434 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (extract 31 0 (app abstr-vals$2446 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2434 (bv #x00000000 32) (bv #x00000001 32))))) (extract 31 0 (app abstr-vals$2446 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2434 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)))))) (ite (bvsle (extract 31 0 (app abstr-vals$2446 1)) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$2433 (bvadd (extract 31 0 (app abstr-vals$2446 0)) (ite x?$2434 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2434 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (extract 31 0 (app abstr-vals$2446 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2434 (bv #x00000000 32) (bv #x00000001 32))))) (extract 31 0 (app abstr-vals$2446 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2434 (bv #x00000000 32) (bv #x00000001 32)))))))) (ite x?$2433 (bvadd (extract 31 0 (app abstr-vals$2446 0)) (ite x?$2434 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2434 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (extract 31 0 (app abstr-vals$2446 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2434 (bv #x00000000 32) (bv #x00000001 32))))) (extract 31 0 (app abstr-vals$2446 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2434 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32))))) (extract 31 0 (app abstr-vals$2446 1)) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$2433 (bvadd (extract 31 0 (app abstr-vals$2446 0)) (ite x?$2434 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2434 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (extract 31 0 (app abstr-vals$2446 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2434 (bv #x00000000 32) (bv #x00000001 32))))) (extract 31 0 (app abstr-vals$2446 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2434 (bv #x00000000 32) (bv #x00000001 32)))))))) (ite x?$2433 (bvadd (extract 31 0 (app abstr-vals$2446 0)) (ite x?$2434 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2434 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (extract 31 0 (app abstr-vals$2446 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2434 (bv #x00000000 32) (bv #x00000001 32))))) (extract 31 0 (app abstr-vals$2446 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2434 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32))))) (bvadd (bv #x80000000 32) (bvneg (ite (bvsle (ite x?$2433 (bvadd (extract 31 0 (app abstr-vals$2446 0)) (ite x?$2434 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2434 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (extract 31 0 (app abstr-vals$2446 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2434 (bv #x00000000 32) (bv #x00000001 32))))) (extract 31 0 (app abstr-vals$2446 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2434 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)) (ite x?$2433 (bvadd (extract 31 0 (app abstr-vals$2446 0)) (ite x?$2434 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2434 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (extract 31 0 (app abstr-vals$2446 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2434 (bv #x00000000 32) (bv #x00000001 32))))) (extract 31 0 (app abstr-vals$2446 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2434 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32))))))) (bv #x00000001 32)))))
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-shr
  (vec-cast
   (vec-max
    (vec-min
     (vec-add
      (vec-bwand
       (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
       (vec-div
        (vec-mul
         (vec-cast
          (vec-mul
           (vec-cast
            (vec-add
             (vec-mul
              (vec-cast
               (load
                (buffer input1 'uint8)
                (ramp
                 (sca-add
                  (sca-mul output.s0.x.x 16)
                  (sca-add
                   (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
                   (var-lookup 't72)))
                 1
                 16)
                (aligned 1 0))
               'int16
               16)
              (sca-broadcast (int16_t (bv #x0040 16)) 16))
             (sca-broadcast
              (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))
              16))
            'int32
            16)
           (vec-cast
            (sca-broadcast
             (sca-mul
              (sca-sub (int16_t t147) (int16_t t148))
              (int16_t (bv #x0040 16)))
             16)
            'int32
            16))
          'int64
          16)
         (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
        (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
      (vec-div
       (vec-mul
        (vec-cast
         (vec-mul
          (vec-cast
           (vec-add
            (vec-mul
             (vec-cast
              (load
               (buffer input1 'uint8)
               (ramp
                (sca-add
                 (sca-mul output.s0.x.x 16)
                 (sca-add
                  (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
                  (var-lookup 't72)))
                1
                16)
               (aligned 1 0))
              'int16
              16)
             (sca-broadcast (int16_t (bv #x0040 16)) 16))
            (sca-broadcast
             (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))
             16))
           'int32
           16)
          (vec-cast
           (sca-broadcast
            (sca-mul
             (sca-sub (int16_t t147) (int16_t t148))
             (int16_t (bv #x0040 16)))
            16)
           'int32
           16))
         'int64
         16)
        (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
       (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
     (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
    (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
   'int32
   16)
  (sca-broadcast (uint32_t t74) 16))
 (vec-bwand
  (vec-if
   (sca-broadcast (sca-lt (uint32_t (bv #x00000000 32)) (uint32_t t74)) 16)
   (sca-broadcast (int32_t (bv #x00000001 32)) 16)
   (sca-broadcast (int32_t (bv #x00000000 32)) 16))
  (vec-shr
   (vec-cast
    (vec-max
     (vec-min
      (vec-add
       (vec-bwand
        (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
        (vec-div
         (vec-mul
          (vec-cast
           (vec-mul
            (vec-cast
             (vec-add
              (vec-mul
               (vec-cast
                (load
                 (buffer input1 'uint8)
                 (ramp
                  (sca-add
                   (sca-mul output.s0.x.x 16)
                   (sca-add
                    (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
                    (var-lookup 't72)))
                  1
                  16)
                 (aligned 1 0))
                'int16
                16)
               (sca-broadcast (int16_t (bv #x0040 16)) 16))
              (sca-broadcast
               (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))
               16))
             'int32
             16)
            (vec-cast
             (sca-broadcast
              (sca-mul
               (sca-sub (int16_t t147) (int16_t t148))
               (int16_t (bv #x0040 16)))
              16)
             'int32
             16))
           'int64
           16)
          (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
         (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
       (vec-div
        (vec-mul
         (vec-cast
          (vec-mul
           (vec-cast
            (vec-add
             (vec-mul
              (vec-cast
               (load
                (buffer input1 'uint8)
                (ramp
                 (sca-add
                  (sca-mul output.s0.x.x 16)
                  (sca-add
                   (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
                   (var-lookup 't72)))
                 1
                 16)
                (aligned 1 0))
               'int16
               16)
              (sca-broadcast (int16_t (bv #x0040 16)) 16))
             (sca-broadcast
              (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))
              16))
            'int32
            16)
           (vec-cast
            (sca-broadcast
             (sca-mul
              (sca-sub (int16_t t147) (int16_t t148))
              (int16_t (bv #x0040 16)))
             16)
            'int32
            16))
          'int64
          16)
         (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
        (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
      (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
     (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
    'int32
    16)
   (sca-broadcast (sca-sub (uint32_t t74) (uint32_t (bv #x00000001 32))) 16))))
template:
  (vs-mpy-add
 ...
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (vs-mpy-add
    ...
    (vs-mpy-add
     ...
     (combine
      #<load-data>
      (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))))
     (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
     #f
     #f
     #f
     'int16)
    (list
     (sca-mul
      (sca-sub (int16_t t147) (int16_t t148))
      (int16_t (bv #x0040 16))))
    #f
    #f
    #f
    'int32)
   (list (int32_t output_multiplier))
   #f
   #f
   #f
   'int64)
  (int64_t (bv #x000000000000001f 64))
  #t
  x?$2001
  #t)
 (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
 (! x?$2439)
 (! x?$2440)
 (! x?$2441)
 'int32)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$2447 idx) (bv #x0000000040000000 64)) (bvsle (bv #xffffffffc0000000 64) (app abstr-vals$2447 idx)))))
optimized-halide-expr:
  (vec-add
 (vec-shr
  (vec-cast #<abstr-halide-expr> 'int32 16)
  (sca-broadcast (uint32_t t74) 16))
 (vec-bwand
  (vec-if
   (sca-broadcast (sca-lt (uint32_t (bv #x00000000 32)) (uint32_t t74)) 16)
   (sca-broadcast (int32_t (bv #x00000001 32)) 16)
   (sca-broadcast (int32_t (bv #x00000000 32)) 16))
  (vec-shr
   (vec-cast #<abstr-halide-expr> 'int32 16)
   (sca-broadcast (sca-sub (uint32_t t74) (uint32_t (bv #x00000001 32))) 16))))
optimized-template:
  (vs-mpy-add
 ...
 #<abstr-expr>
 (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
 (! x?$2439)
 (! x?$2440)
 (! x?$2441)
 'int32)
optimized Halide 0:
  (int32_t
 (bvadd (bvashr (extract 31 0 (app abstr-vals$2447 0)) t74) (bvand (ite (bveq (bv #x00000000 32) t74) (bv #x00000000 32) (bv #x00000001 32)) (bvashr (extract 31 0 (app abstr-vals$2447 0)) (bvadd (bv #xffffffff 32) t74)))))
optimized x86 0:
  (int32_t
 (ite* (⊢ (&& x?$2441 (! (&& (! x?$2439) (! x?$2441)))) (ite x?$2439 (bvadd (extract 31 0 (app abstr-vals$2447 1)) (ite x?$2439 (bvadd (extract 31 0 (app abstr-vals$2447 0)) (ite x?$2440 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2440 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (extract 31 0 (app abstr-vals$2447 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2440 (bv #x00000000 32) (bv #x00000001 32))))) (extract 31 0 (app abstr-vals$2447 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2440 (bv #x00000000 32) (bv #x00000001 32)))))))) (bvadd (ite x?$2439 (bvadd (extract 31 0 (app abstr-vals$2447 0)) (ite x?$2440 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2440 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (extract 31 0 (app abstr-vals$2447 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2440 (bv #x00000000 32) (bv #x00000001 32))))) (extract 31 0 (app abstr-vals$2447 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2440 (bv #x00000000 32) (bv #x00000001 32))))))) (ite (bvsle (bvadd (bv #x80000000 32) (bvneg (ite (bvsle (ite x?$2439 (bvadd (extract 31 0 (app abstr-vals$2447 0)) (ite x?$2440 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2440 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (extract 31 0 (app abstr-vals$2447 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2440 (bv #x00000000 32) (bv #x00000001 32))))) (extract 31 0 (app abstr-vals$2447 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2440 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)) (ite x?$2439 (bvadd (extract 31 0 (app abstr-vals$2447 0)) (ite x?$2440 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2440 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (extract 31 0 (app abstr-vals$2447 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2440 (bv #x00000000 32) (bv #x00000001 32))))) (extract 31 0 (app abstr-vals$2447 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2440 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)))) (ite (bvsle (extract 31 0 (app abstr-vals$2447 1)) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$2439 (bvadd (extract 31 0 (app abstr-vals$2447 0)) (ite x?$2440 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2440 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (extract 31 0 (app abstr-vals$2447 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2440 (bv #x00000000 32) (bv #x00000001 32))))) (extract 31 0 (app abstr-vals$2447 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2440 (bv #x00000000 32) (bv #x00000001 32)))))))) (ite x?$2439 (bvadd (extract 31 0 (app abstr-vals$2447 0)) (ite x?$2440 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2440 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (extract 31 0 (app abstr-vals$2447 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2440 (bv #x00000000 32) (bv #x00000001 32))))) (extract 31 0 (app abstr-vals$2447 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2440 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32))))) (extract 31 0 (app abstr-vals$2447 1)) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$2439 (bvadd (extract 31 0 (app abstr-vals$2447 0)) (ite x?$2440 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2440 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (extract 31 0 (app abstr-vals$2447 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2440 (bv #x00000000 32) (bv #x00000001 32))))) (extract 31 0 (app abstr-vals$2447 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2440 (bv #x00000000 32) (bv #x00000001 32)))))))) (ite x?$2439 (bvadd (extract 31 0 (app abstr-vals$2447 0)) (ite x?$2440 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2440 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (extract 31 0 (app abstr-vals$2447 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2440 (bv #x00000000 32) (bv #x00000001 32))))) (extract 31 0 (app abstr-vals$2447 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2440 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)))))) (ite (bvsle (extract 31 0 (app abstr-vals$2447 1)) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$2439 (bvadd (extract 31 0 (app abstr-vals$2447 0)) (ite x?$2440 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2440 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (extract 31 0 (app abstr-vals$2447 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2440 (bv #x00000000 32) (bv #x00000001 32))))) (extract 31 0 (app abstr-vals$2447 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2440 (bv #x00000000 32) (bv #x00000001 32)))))))) (ite x?$2439 (bvadd (extract 31 0 (app abstr-vals$2447 0)) (ite x?$2440 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2440 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (extract 31 0 (app abstr-vals$2447 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2440 (bv #x00000000 32) (bv #x00000001 32))))) (extract 31 0 (app abstr-vals$2447 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2440 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32))))) (extract 31 0 (app abstr-vals$2447 1)) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$2439 (bvadd (extract 31 0 (app abstr-vals$2447 0)) (ite x?$2440 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2440 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (extract 31 0 (app abstr-vals$2447 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2440 (bv #x00000000 32) (bv #x00000001 32))))) (extract 31 0 (app abstr-vals$2447 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2440 (bv #x00000000 32) (bv #x00000001 32)))))))) (ite x?$2439 (bvadd (extract 31 0 (app abstr-vals$2447 0)) (ite x?$2440 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2440 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (extract 31 0 (app abstr-vals$2447 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2440 (bv #x00000000 32) (bv #x00000001 32))))) (extract 31 0 (app abstr-vals$2447 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2440 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32))))) (bvadd (bv #x80000000 32) (bvneg (ite (bvsle (ite x?$2439 (bvadd (extract 31 0 (app abstr-vals$2447 0)) (ite x?$2440 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2440 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (extract 31 0 (app abstr-vals$2447 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2440 (bv #x00000000 32) (bv #x00000001 32))))) (extract 31 0 (app abstr-vals$2447 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2440 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)) (ite x?$2439 (bvadd (extract 31 0 (app abstr-vals$2447 0)) (ite x?$2440 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2440 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (extract 31 0 (app abstr-vals$2447 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2440 (bv #x00000000 32) (bv #x00000001 32))))) (extract 31 0 (app abstr-vals$2447 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2440 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)))))))) (⊢ (|| (&& (! x?$2439) (! x?$2441)) (&& (! x?$2441) (! (&& (! x?$2439) (! x?$2441))))) (bvashr (ite x?$2439 (bvadd (extract 31 0 (app abstr-vals$2447 1)) (ite x?$2439 (bvadd (extract 31 0 (app abstr-vals$2447 0)) (ite x?$2440 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2440 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (extract 31 0 (app abstr-vals$2447 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2440 (bv #x00000000 32) (bv #x00000001 32))))) (extract 31 0 (app abstr-vals$2447 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2440 (bv #x00000000 32) (bv #x00000001 32)))))))) (bvadd (ite x?$2439 (bvadd (extract 31 0 (app abstr-vals$2447 0)) (ite x?$2440 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2440 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (extract 31 0 (app abstr-vals$2447 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2440 (bv #x00000000 32) (bv #x00000001 32))))) (extract 31 0 (app abstr-vals$2447 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2440 (bv #x00000000 32) (bv #x00000001 32))))))) (ite (bvsle (bvadd (bv #x80000000 32) (bvneg (ite (bvsle (ite x?$2439 (bvadd (extract 31 0 (app abstr-vals$2447 0)) (ite x?$2440 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2440 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (extract 31 0 (app abstr-vals$2447 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2440 (bv #x00000000 32) (bv #x00000001 32))))) (extract 31 0 (app abstr-vals$2447 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2440 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)) (ite x?$2439 (bvadd (extract 31 0 (app abstr-vals$2447 0)) (ite x?$2440 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2440 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (extract 31 0 (app abstr-vals$2447 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2440 (bv #x00000000 32) (bv #x00000001 32))))) (extract 31 0 (app abstr-vals$2447 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2440 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)))) (ite (bvsle (extract 31 0 (app abstr-vals$2447 1)) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$2439 (bvadd (extract 31 0 (app abstr-vals$2447 0)) (ite x?$2440 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2440 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (extract 31 0 (app abstr-vals$2447 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2440 (bv #x00000000 32) (bv #x00000001 32))))) (extract 31 0 (app abstr-vals$2447 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2440 (bv #x00000000 32) (bv #x00000001 32)))))))) (ite x?$2439 (bvadd (extract 31 0 (app abstr-vals$2447 0)) (ite x?$2440 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2440 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (extract 31 0 (app abstr-vals$2447 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2440 (bv #x00000000 32) (bv #x00000001 32))))) (extract 31 0 (app abstr-vals$2447 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2440 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32))))) (extract 31 0 (app abstr-vals$2447 1)) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$2439 (bvadd (extract 31 0 (app abstr-vals$2447 0)) (ite x?$2440 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2440 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (extract 31 0 (app abstr-vals$2447 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2440 (bv #x00000000 32) (bv #x00000001 32))))) (extract 31 0 (app abstr-vals$2447 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2440 (bv #x00000000 32) (bv #x00000001 32)))))))) (ite x?$2439 (bvadd (extract 31 0 (app abstr-vals$2447 0)) (ite x?$2440 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2440 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (extract 31 0 (app abstr-vals$2447 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2440 (bv #x00000000 32) (bv #x00000001 32))))) (extract 31 0 (app abstr-vals$2447 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2440 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)))))) (ite (bvsle (extract 31 0 (app abstr-vals$2447 1)) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$2439 (bvadd (extract 31 0 (app abstr-vals$2447 0)) (ite x?$2440 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2440 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (extract 31 0 (app abstr-vals$2447 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2440 (bv #x00000000 32) (bv #x00000001 32))))) (extract 31 0 (app abstr-vals$2447 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2440 (bv #x00000000 32) (bv #x00000001 32)))))))) (ite x?$2439 (bvadd (extract 31 0 (app abstr-vals$2447 0)) (ite x?$2440 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2440 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (extract 31 0 (app abstr-vals$2447 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2440 (bv #x00000000 32) (bv #x00000001 32))))) (extract 31 0 (app abstr-vals$2447 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2440 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32))))) (extract 31 0 (app abstr-vals$2447 1)) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$2439 (bvadd (extract 31 0 (app abstr-vals$2447 0)) (ite x?$2440 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2440 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (extract 31 0 (app abstr-vals$2447 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2440 (bv #x00000000 32) (bv #x00000001 32))))) (extract 31 0 (app abstr-vals$2447 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2440 (bv #x00000000 32) (bv #x00000001 32)))))))) (ite x?$2439 (bvadd (extract 31 0 (app abstr-vals$2447 0)) (ite x?$2440 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2440 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (extract 31 0 (app abstr-vals$2447 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2440 (bv #x00000000 32) (bv #x00000001 32))))) (extract 31 0 (app abstr-vals$2447 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2440 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32))))) (bvadd (bv #x80000000 32) (bvneg (ite (bvsle (ite x?$2439 (bvadd (extract 31 0 (app abstr-vals$2447 0)) (ite x?$2440 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2440 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (extract 31 0 (app abstr-vals$2447 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2440 (bv #x00000000 32) (bv #x00000001 32))))) (extract 31 0 (app abstr-vals$2447 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2440 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)) (ite x?$2439 (bvadd (extract 31 0 (app abstr-vals$2447 0)) (ite x?$2440 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2440 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (extract 31 0 (app abstr-vals$2447 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2440 (bv #x00000000 32) (bv #x00000001 32))))) (extract 31 0 (app abstr-vals$2447 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2440 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32))))))) (bv #x00000001 32)))))
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-shr
  (vec-cast
   (vec-max
    (vec-min
     (vec-add
      (vec-bwand
       (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
       (vec-div
        (vec-mul
         (vec-cast
          (vec-mul
           (vec-cast
            (vec-add
             (vec-mul
              (vec-cast
               (load
                (buffer input1 'uint8)
                (ramp
                 (sca-add
                  (sca-mul output.s0.x.x 16)
                  (sca-add
                   (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
                   (var-lookup 't72)))
                 1
                 16)
                (aligned 1 0))
               'int16
               16)
              (sca-broadcast (int16_t (bv #x0040 16)) 16))
             (sca-broadcast
              (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))
              16))
            'int32
            16)
           (vec-cast
            (sca-broadcast
             (sca-mul
              (sca-sub (int16_t t147) (int16_t t148))
              (int16_t (bv #x0040 16)))
             16)
            'int32
            16))
          'int64
          16)
         (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
        (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
      (vec-div
       (vec-mul
        (vec-cast
         (vec-mul
          (vec-cast
           (vec-add
            (vec-mul
             (vec-cast
              (load
               (buffer input1 'uint8)
               (ramp
                (sca-add
                 (sca-mul output.s0.x.x 16)
                 (sca-add
                  (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
                  (var-lookup 't72)))
                1
                16)
               (aligned 1 0))
              'int16
              16)
             (sca-broadcast (int16_t (bv #x0040 16)) 16))
            (sca-broadcast
             (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))
             16))
           'int32
           16)
          (vec-cast
           (sca-broadcast
            (sca-mul
             (sca-sub (int16_t t147) (int16_t t148))
             (int16_t (bv #x0040 16)))
            16)
           'int32
           16))
         'int64
         16)
        (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
       (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
     (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
    (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
   'int32
   16)
  (sca-broadcast (uint32_t t74) 16))
 (vec-bwand
  (vec-if
   (sca-broadcast (sca-lt (uint32_t (bv #x00000000 32)) (uint32_t t74)) 16)
   (sca-broadcast (int32_t (bv #x00000001 32)) 16)
   (sca-broadcast (int32_t (bv #x00000000 32)) 16))
  (vec-shr
   (vec-cast
    (vec-max
     (vec-min
      (vec-add
       (vec-bwand
        (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
        (vec-div
         (vec-mul
          (vec-cast
           (vec-mul
            (vec-cast
             (vec-add
              (vec-mul
               (vec-cast
                (load
                 (buffer input1 'uint8)
                 (ramp
                  (sca-add
                   (sca-mul output.s0.x.x 16)
                   (sca-add
                    (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
                    (var-lookup 't72)))
                  1
                  16)
                 (aligned 1 0))
                'int16
                16)
               (sca-broadcast (int16_t (bv #x0040 16)) 16))
              (sca-broadcast
               (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))
               16))
             'int32
             16)
            (vec-cast
             (sca-broadcast
              (sca-mul
               (sca-sub (int16_t t147) (int16_t t148))
               (int16_t (bv #x0040 16)))
              16)
             'int32
             16))
           'int64
           16)
          (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
         (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
       (vec-div
        (vec-mul
         (vec-cast
          (vec-mul
           (vec-cast
            (vec-add
             (vec-mul
              (vec-cast
               (load
                (buffer input1 'uint8)
                (ramp
                 (sca-add
                  (sca-mul output.s0.x.x 16)
                  (sca-add
                   (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
                   (var-lookup 't72)))
                 1
                 16)
                (aligned 1 0))
               'int16
               16)
              (sca-broadcast (int16_t (bv #x0040 16)) 16))
             (sca-broadcast
              (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))
              16))
            'int32
            16)
           (vec-cast
            (sca-broadcast
             (sca-mul
              (sca-sub (int16_t t147) (int16_t t148))
              (int16_t (bv #x0040 16)))
             16)
            'int32
            16))
          'int64
          16)
         (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
        (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
      (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
     (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
    'int32
    16)
   (sca-broadcast (sca-sub (uint32_t t74) (uint32_t (bv #x00000001 32))) 16))))
template:
  (vs-shift-right
 ...
 (cast
  ...
  (vs-shift-right
   ...
   (vs-mpy-add
    ...
    (vs-mpy-add
     ...
     (vs-mpy-add
      ...
      (combine
       #<load-data>
       (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))))
      (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
      #f
      #f
      #f
      'int16)
     (list
      (sca-mul
       (sca-sub (int16_t t147) (int16_t t148))
       (int16_t (bv #x0040 16))))
     #f
     #f
     #f
     'int32)
    (list (int32_t output_multiplier))
    #f
    #f
    #f
    'int64)
   (int64_t (bv #x000000000000001f 64))
   #t
   x?$2001
   #t)
  'int32
  #f)
 (union [(&& (! xi?$2410) (&& xi?$2412 (! xi?$2411))) #(struct:uint32_t t74)] [(&& (! xi?$2410) (&& (! xi?$2411) (! xi?$2412))) #(struct:sca-sub
                                                                                                                                  #(struct:uint32_t
                                                                                                                                    t74)
                                                                                                                                  #(struct:uint32_t
                                                                                                                                    (bv #x00000001 32)))] [(|| xi?$2410 (&& xi?$2411 (! xi?$2410))) #(struct:int64_t
                                                                                                                                                                                                      (ite* (⊢ xi?$2410 (bv #x000000000000001e 64)) (⊢ (&& xi?$2411 (! xi?$2410)) (bv #x000000000000001f 64))))])
 #f
 #f
 #t)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$2448 idx) (bv #x40000000 32)) (bvsle (bv #xc0000000 32) (app abstr-vals$2448 idx)))))
optimized-halide-expr:
  (vec-add
 (vec-shr #<abstr-halide-expr> (sca-broadcast (uint32_t t74) 16))
 (vec-bwand
  (vec-if
   (sca-broadcast (sca-lt (uint32_t (bv #x00000000 32)) (uint32_t t74)) 16)
   (sca-broadcast (int32_t (bv #x00000001 32)) 16)
   (sca-broadcast (int32_t (bv #x00000000 32)) 16))
  (vec-shr
   #<abstr-halide-expr>
   (sca-broadcast (sca-sub (uint32_t t74) (uint32_t (bv #x00000001 32))) 16))))
optimized-template:
  (vs-shift-right
 ...
 #<abstr-expr>
 (union [(&& (! xi?$2410) (&& xi?$2412 (! xi?$2411))) #(struct:uint32_t t74)] [(&& (! xi?$2410) (&& (! xi?$2411) (! xi?$2412))) #(struct:sca-sub
                                                                                                                                  #(struct:uint32_t
                                                                                                                                    t74)
                                                                                                                                  #(struct:uint32_t
                                                                                                                                    (bv #x00000001 32)))] [(|| xi?$2410 (&& xi?$2411 (! xi?$2410))) #(struct:int64_t
                                                                                                                                                                                                      (ite* (⊢ xi?$2410 (bv #x000000000000001e 64)) (⊢ (&& xi?$2411 (! xi?$2410)) (bv #x000000000000001f 64))))])
 #f
 #f
 #t)
optimized Halide 0:
  (int32_t
 (bvadd (bvashr (app abstr-vals$2448 0) t74) (bvand (ite (bveq (bv #x00000000 32) t74) (bv #x00000000 32) (bv #x00000001 32)) (bvashr (app abstr-vals$2448 0) (bvadd (bv #xffffffff 32) t74)))))
optimized x86 0:
  (int32_t
 (bvashr (app abstr-vals$2448 0) (ite* (⊢ (|| xi?$2410 (&& xi?$2411 (! xi?$2410))) (extract 31 0 (ite* (⊢ xi?$2410 (bv #x000000000000001e 64)) (⊢ (&& xi?$2411 (! xi?$2410)) (bv #x000000000000001f 64))))) (⊢ (|| (&& (! xi?$2410) (&& xi?$2412 (! xi?$2411))) (&& (! xi?$2410) (&& (! xi?$2411) (! xi?$2412)))) (ite* (⊢ (&& (! xi?$2410) (&& xi?$2412 (! xi?$2411))) t74) (⊢ (&& (! xi?$2410) (&& (! xi?$2411) (! xi?$2412))) (bvadd (bv #xffffffff 32) t74)))))))
Ran synthesizer for 183 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-shr
  (vec-cast
   (vec-max
    (vec-min
     (vec-add
      (vec-bwand
       (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
       (vec-div
        (vec-mul
         (vec-cast
          (vec-mul
           (vec-cast
            (vec-add
             (vec-mul
              (vec-cast
               (load
                (buffer input1 'uint8)
                (ramp
                 (sca-add
                  (sca-mul output.s0.x.x 16)
                  (sca-add
                   (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
                   (var-lookup 't72)))
                 1
                 16)
                (aligned 1 0))
               'int16
               16)
              (sca-broadcast (int16_t (bv #x0040 16)) 16))
             (sca-broadcast
              (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))
              16))
            'int32
            16)
           (vec-cast
            (sca-broadcast
             (sca-mul
              (sca-sub (int16_t t147) (int16_t t148))
              (int16_t (bv #x0040 16)))
             16)
            'int32
            16))
          'int64
          16)
         (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
        (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
      (vec-div
       (vec-mul
        (vec-cast
         (vec-mul
          (vec-cast
           (vec-add
            (vec-mul
             (vec-cast
              (load
               (buffer input1 'uint8)
               (ramp
                (sca-add
                 (sca-mul output.s0.x.x 16)
                 (sca-add
                  (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
                  (var-lookup 't72)))
                1
                16)
               (aligned 1 0))
              'int16
              16)
             (sca-broadcast (int16_t (bv #x0040 16)) 16))
            (sca-broadcast
             (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))
             16))
           'int32
           16)
          (vec-cast
           (sca-broadcast
            (sca-mul
             (sca-sub (int16_t t147) (int16_t t148))
             (int16_t (bv #x0040 16)))
            16)
           'int32
           16))
         'int64
         16)
        (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
       (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
     (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
    (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
   'int32
   16)
  (sca-broadcast (uint32_t t74) 16))
 (vec-bwand
  (vec-if
   (sca-broadcast (sca-lt (uint32_t (bv #x00000000 32)) (uint32_t t74)) 16)
   (sca-broadcast (int32_t (bv #x00000001 32)) 16)
   (sca-broadcast (int32_t (bv #x00000000 32)) 16))
  (vec-shr
   (vec-cast
    (vec-max
     (vec-min
      (vec-add
       (vec-bwand
        (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
        (vec-div
         (vec-mul
          (vec-cast
           (vec-mul
            (vec-cast
             (vec-add
              (vec-mul
               (vec-cast
                (load
                 (buffer input1 'uint8)
                 (ramp
                  (sca-add
                   (sca-mul output.s0.x.x 16)
                   (sca-add
                    (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
                    (var-lookup 't72)))
                  1
                  16)
                 (aligned 1 0))
                'int16
                16)
               (sca-broadcast (int16_t (bv #x0040 16)) 16))
              (sca-broadcast
               (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))
               16))
             'int32
             16)
            (vec-cast
             (sca-broadcast
              (sca-mul
               (sca-sub (int16_t t147) (int16_t t148))
               (int16_t (bv #x0040 16)))
              16)
             'int32
             16))
           'int64
           16)
          (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
         (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
       (vec-div
        (vec-mul
         (vec-cast
          (vec-mul
           (vec-cast
            (vec-add
             (vec-mul
              (vec-cast
               (load
                (buffer input1 'uint8)
                (ramp
                 (sca-add
                  (sca-mul output.s0.x.x 16)
                  (sca-add
                   (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
                   (var-lookup 't72)))
                 1
                 16)
                (aligned 1 0))
               'int16
               16)
              (sca-broadcast (int16_t (bv #x0040 16)) 16))
             (sca-broadcast
              (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))
              16))
            'int32
            16)
           (vec-cast
            (sca-broadcast
             (sca-mul
              (sca-sub (int16_t t147) (int16_t t148))
              (int16_t (bv #x0040 16)))
             16)
            'int32
            16))
          'int64
          16)
         (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
        (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
      (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
     (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
    'int32
    16)
   (sca-broadcast (sca-sub (uint32_t t74) (uint32_t (bv #x00000001 32))) 16))))
template:
  (vs-shift-right
 ...
 (cast
  ...
  (vs-shift-right
   ...
   (vs-mpy-add
    ...
    (vs-mpy-add
     ...
     (vs-mpy-add
      ...
      (combine
       #<load-data>
       (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))))
      (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
      #f
      #f
      #f
      'int16)
     (list
      (sca-mul
       (sca-sub (int16_t t147) (int16_t t148))
       (int16_t (bv #x0040 16))))
     #f
     #f
     #f
     'int32)
    (list (int32_t output_multiplier))
    #f
    #f
    #f
    'int64)
   (int64_t (bv #x000000000000001f 64))
   #t
   x?$2001
   #t)
  'int32
  #f)
 (uint32_t t74)
 x?$2413
 x?$2414
 x?$2415)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$2449 idx) (bv #x40000000 32)) (bvsle (bv #xc0000000 32) (app abstr-vals$2449 idx)))))
optimized-halide-expr:
  (vec-add
 (vec-shr #<abstr-halide-expr> (sca-broadcast (uint32_t t74) 16))
 (vec-bwand
  (vec-if
   (sca-broadcast (sca-lt (uint32_t (bv #x00000000 32)) (uint32_t t74)) 16)
   (sca-broadcast (int32_t (bv #x00000001 32)) 16)
   (sca-broadcast (int32_t (bv #x00000000 32)) 16))
  (vec-shr
   #<abstr-halide-expr>
   (sca-broadcast (sca-sub (uint32_t t74) (uint32_t (bv #x00000001 32))) 16))))
optimized-template:
  (vs-shift-right ... #<abstr-expr> (uint32_t t74) x?$2413 x?$2414 x?$2415)
optimized Halide 0:
  (int32_t
 (bvadd (bvashr (app abstr-vals$2449 0) t74) (bvand (ite (bveq (bv #x00000000 32) t74) (bv #x00000000 32) (bv #x00000001 32)) (bvashr (app abstr-vals$2449 0) (bvadd (bv #xffffffff 32) t74)))))
optimized x86 0:
  (int32_t
 (ite x?$2413 (bvadd (ite x?$2415 (bvashr (app abstr-vals$2449 0) t74) (bvlshr (app abstr-vals$2449 0) t74)) (bvand (ite (bvslt (bv #x00000000 32) t74) (bv #x00000001 32) (bv #x00000000 32)) (ite x?$2415 (bvashr (app abstr-vals$2449 0) (bvadd (bv #xffffffff 32) t74)) (bvlshr (app abstr-vals$2449 0) (bvadd (bv #xffffffff 32) t74))))) (ite x?$2415 (bvashr (app abstr-vals$2449 0) t74) (bvlshr (app abstr-vals$2449 0) t74))))
Ran synthesizer for 294 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-shr
  (vec-cast
   (vec-max
    (vec-min
     (vec-add
      (vec-bwand
       (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
       (vec-div
        (vec-mul
         (vec-cast
          (vec-mul
           (vec-cast
            (vec-add
             (vec-mul
              (vec-cast
               (load
                (buffer input1 'uint8)
                (ramp
                 (sca-add
                  (sca-mul output.s0.x.x 16)
                  (sca-add
                   (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
                   (var-lookup 't72)))
                 1
                 16)
                (aligned 1 0))
               'int16
               16)
              (sca-broadcast (int16_t (bv #x0040 16)) 16))
             (sca-broadcast
              (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))
              16))
            'int32
            16)
           (vec-cast
            (sca-broadcast
             (sca-mul
              (sca-sub (int16_t t147) (int16_t t148))
              (int16_t (bv #x0040 16)))
             16)
            'int32
            16))
          'int64
          16)
         (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
        (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
      (vec-div
       (vec-mul
        (vec-cast
         (vec-mul
          (vec-cast
           (vec-add
            (vec-mul
             (vec-cast
              (load
               (buffer input1 'uint8)
               (ramp
                (sca-add
                 (sca-mul output.s0.x.x 16)
                 (sca-add
                  (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
                  (var-lookup 't72)))
                1
                16)
               (aligned 1 0))
              'int16
              16)
             (sca-broadcast (int16_t (bv #x0040 16)) 16))
            (sca-broadcast
             (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))
             16))
           'int32
           16)
          (vec-cast
           (sca-broadcast
            (sca-mul
             (sca-sub (int16_t t147) (int16_t t148))
             (int16_t (bv #x0040 16)))
            16)
           'int32
           16))
         'int64
         16)
        (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
       (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
     (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
    (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
   'int32
   16)
  (sca-broadcast (uint32_t t74) 16))
 (vec-bwand
  (vec-if
   (sca-broadcast (sca-lt (uint32_t (bv #x00000000 32)) (uint32_t t74)) 16)
   (sca-broadcast (int32_t (bv #x00000001 32)) 16)
   (sca-broadcast (int32_t (bv #x00000000 32)) 16))
  (vec-shr
   (vec-cast
    (vec-max
     (vec-min
      (vec-add
       (vec-bwand
        (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
        (vec-div
         (vec-mul
          (vec-cast
           (vec-mul
            (vec-cast
             (vec-add
              (vec-mul
               (vec-cast
                (load
                 (buffer input1 'uint8)
                 (ramp
                  (sca-add
                   (sca-mul output.s0.x.x 16)
                   (sca-add
                    (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
                    (var-lookup 't72)))
                  1
                  16)
                 (aligned 1 0))
                'int16
                16)
               (sca-broadcast (int16_t (bv #x0040 16)) 16))
              (sca-broadcast
               (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))
               16))
             'int32
             16)
            (vec-cast
             (sca-broadcast
              (sca-mul
               (sca-sub (int16_t t147) (int16_t t148))
               (int16_t (bv #x0040 16)))
              16)
             'int32
             16))
           'int64
           16)
          (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
         (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
       (vec-div
        (vec-mul
         (vec-cast
          (vec-mul
           (vec-cast
            (vec-add
             (vec-mul
              (vec-cast
               (load
                (buffer input1 'uint8)
                (ramp
                 (sca-add
                  (sca-mul output.s0.x.x 16)
                  (sca-add
                   (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
                   (var-lookup 't72)))
                 1
                 16)
                (aligned 1 0))
               'int16
               16)
              (sca-broadcast (int16_t (bv #x0040 16)) 16))
             (sca-broadcast
              (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))
              16))
            'int32
            16)
           (vec-cast
            (sca-broadcast
             (sca-mul
              (sca-sub (int16_t t147) (int16_t t148))
              (int16_t (bv #x0040 16)))
             16)
            'int32
            16))
          'int64
          16)
         (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
        (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
      (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
     (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
    'int32
    16)
   (sca-broadcast (sca-sub (uint32_t t74) (uint32_t (bv #x00000001 32))) 16))))
template:
  (vs-shift-right
 ...
 (cast
  ...
  (vs-shift-right
   ...
   (vs-mpy-add
    ...
    (vs-mpy-add
     ...
     (vs-mpy-add
      ...
      (combine
       #<load-data>
       (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))))
      (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
      #f
      #f
      #f
      'int16)
     (list
      (sca-mul
       (sca-sub (int16_t t147) (int16_t t148))
       (int16_t (bv #x0040 16))))
     #f
     #f
     #f
     'int32)
    (list (int32_t output_multiplier))
    #f
    #f
    #f
    'int64)
   (int64_t (bv #x000000000000001f 64))
   #t
   x?$2001
   #t)
  'int32
  #f)
 (union [(&& (! xi?$2423) (&& xi?$2425 (! xi?$2424))) #(struct:uint32_t t74)] [(&& (! xi?$2423) (&& (! xi?$2424) (! xi?$2425))) #(struct:sca-sub
                                                                                                                                  #(struct:uint32_t
                                                                                                                                    t74)
                                                                                                                                  #(struct:uint32_t
                                                                                                                                    (bv #x00000001 32)))] [(|| xi?$2423 (&& xi?$2424 (! xi?$2423))) #(struct:int64_t
                                                                                                                                                                                                      (ite* (⊢ xi?$2423 (bv #x000000000000001e 64)) (⊢ (&& xi?$2424 (! xi?$2423)) (bv #x000000000000001f 64))))])
 #f
 #f
 #t)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$2450 idx) (bv #x40000000 32)) (bvsle (bv #xc0000000 32) (app abstr-vals$2450 idx)))))
optimized-halide-expr:
  (vec-add
 (vec-shr #<abstr-halide-expr> (sca-broadcast (uint32_t t74) 16))
 (vec-bwand
  (vec-if
   (sca-broadcast (sca-lt (uint32_t (bv #x00000000 32)) (uint32_t t74)) 16)
   (sca-broadcast (int32_t (bv #x00000001 32)) 16)
   (sca-broadcast (int32_t (bv #x00000000 32)) 16))
  (vec-shr
   #<abstr-halide-expr>
   (sca-broadcast (sca-sub (uint32_t t74) (uint32_t (bv #x00000001 32))) 16))))
optimized-template:
  (vs-shift-right
 ...
 #<abstr-expr>
 (union [(&& (! xi?$2423) (&& xi?$2425 (! xi?$2424))) #(struct:uint32_t t74)] [(&& (! xi?$2423) (&& (! xi?$2424) (! xi?$2425))) #(struct:sca-sub
                                                                                                                                  #(struct:uint32_t
                                                                                                                                    t74)
                                                                                                                                  #(struct:uint32_t
                                                                                                                                    (bv #x00000001 32)))] [(|| xi?$2423 (&& xi?$2424 (! xi?$2423))) #(struct:int64_t
                                                                                                                                                                                                      (ite* (⊢ xi?$2423 (bv #x000000000000001e 64)) (⊢ (&& xi?$2424 (! xi?$2423)) (bv #x000000000000001f 64))))])
 #f
 #f
 #t)
optimized Halide 0:
  (int32_t
 (bvadd (bvashr (app abstr-vals$2450 0) t74) (bvand (ite (bveq (bv #x00000000 32) t74) (bv #x00000000 32) (bv #x00000001 32)) (bvashr (app abstr-vals$2450 0) (bvadd (bv #xffffffff 32) t74)))))
optimized x86 0:
  (int32_t
 (bvashr (app abstr-vals$2450 0) (ite* (⊢ (|| xi?$2423 (&& xi?$2424 (! xi?$2423))) (extract 31 0 (ite* (⊢ xi?$2423 (bv #x000000000000001e 64)) (⊢ (&& xi?$2424 (! xi?$2423)) (bv #x000000000000001f 64))))) (⊢ (|| (&& (! xi?$2423) (&& xi?$2425 (! xi?$2424))) (&& (! xi?$2423) (&& (! xi?$2424) (! xi?$2425)))) (ite* (⊢ (&& (! xi?$2423) (&& xi?$2425 (! xi?$2424))) t74) (⊢ (&& (! xi?$2423) (&& (! xi?$2424) (! xi?$2425))) (bvadd (bv #xffffffff 32) t74)))))))
Ran synthesizer for 181 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-shr
  (vec-cast
   (vec-max
    (vec-min
     (vec-add
      (vec-bwand
       (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
       (vec-div
        (vec-mul
         (vec-cast
          (vec-mul
           (vec-cast
            (vec-add
             (vec-mul
              (vec-cast
               (load
                (buffer input1 'uint8)
                (ramp
                 (sca-add
                  (sca-mul output.s0.x.x 16)
                  (sca-add
                   (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
                   (var-lookup 't72)))
                 1
                 16)
                (aligned 1 0))
               'int16
               16)
              (sca-broadcast (int16_t (bv #x0040 16)) 16))
             (sca-broadcast
              (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))
              16))
            'int32
            16)
           (vec-cast
            (sca-broadcast
             (sca-mul
              (sca-sub (int16_t t147) (int16_t t148))
              (int16_t (bv #x0040 16)))
             16)
            'int32
            16))
          'int64
          16)
         (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
        (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
      (vec-div
       (vec-mul
        (vec-cast
         (vec-mul
          (vec-cast
           (vec-add
            (vec-mul
             (vec-cast
              (load
               (buffer input1 'uint8)
               (ramp
                (sca-add
                 (sca-mul output.s0.x.x 16)
                 (sca-add
                  (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
                  (var-lookup 't72)))
                1
                16)
               (aligned 1 0))
              'int16
              16)
             (sca-broadcast (int16_t (bv #x0040 16)) 16))
            (sca-broadcast
             (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))
             16))
           'int32
           16)
          (vec-cast
           (sca-broadcast
            (sca-mul
             (sca-sub (int16_t t147) (int16_t t148))
             (int16_t (bv #x0040 16)))
            16)
           'int32
           16))
         'int64
         16)
        (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
       (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
     (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
    (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
   'int32
   16)
  (sca-broadcast (uint32_t t74) 16))
 (vec-bwand
  (vec-if
   (sca-broadcast (sca-lt (uint32_t (bv #x00000000 32)) (uint32_t t74)) 16)
   (sca-broadcast (int32_t (bv #x00000001 32)) 16)
   (sca-broadcast (int32_t (bv #x00000000 32)) 16))
  (vec-shr
   (vec-cast
    (vec-max
     (vec-min
      (vec-add
       (vec-bwand
        (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
        (vec-div
         (vec-mul
          (vec-cast
           (vec-mul
            (vec-cast
             (vec-add
              (vec-mul
               (vec-cast
                (load
                 (buffer input1 'uint8)
                 (ramp
                  (sca-add
                   (sca-mul output.s0.x.x 16)
                   (sca-add
                    (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
                    (var-lookup 't72)))
                  1
                  16)
                 (aligned 1 0))
                'int16
                16)
               (sca-broadcast (int16_t (bv #x0040 16)) 16))
              (sca-broadcast
               (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))
               16))
             'int32
             16)
            (vec-cast
             (sca-broadcast
              (sca-mul
               (sca-sub (int16_t t147) (int16_t t148))
               (int16_t (bv #x0040 16)))
              16)
             'int32
             16))
           'int64
           16)
          (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
         (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
       (vec-div
        (vec-mul
         (vec-cast
          (vec-mul
           (vec-cast
            (vec-add
             (vec-mul
              (vec-cast
               (load
                (buffer input1 'uint8)
                (ramp
                 (sca-add
                  (sca-mul output.s0.x.x 16)
                  (sca-add
                   (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
                   (var-lookup 't72)))
                 1
                 16)
                (aligned 1 0))
               'int16
               16)
              (sca-broadcast (int16_t (bv #x0040 16)) 16))
             (sca-broadcast
              (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))
              16))
            'int32
            16)
           (vec-cast
            (sca-broadcast
             (sca-mul
              (sca-sub (int16_t t147) (int16_t t148))
              (int16_t (bv #x0040 16)))
             16)
            'int32
            16))
          'int64
          16)
         (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
        (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
      (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
     (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
    'int32
    16)
   (sca-broadcast (sca-sub (uint32_t t74) (uint32_t (bv #x00000001 32))) 16))))
template:
  (vs-shift-right
 ...
 (cast
  ...
  (vs-shift-right
   ...
   (vs-mpy-add
    ...
    (vs-mpy-add
     ...
     (vs-mpy-add
      ...
      (combine
       #<load-data>
       (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))))
      (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
      #f
      #f
      #f
      'int16)
     (list
      (sca-mul
       (sca-sub (int16_t t147) (int16_t t148))
       (int16_t (bv #x0040 16))))
     #f
     #f
     #f
     'int32)
    (list (int32_t output_multiplier))
    #f
    #f
    #f
    'int64)
   (int64_t (bv #x000000000000001f 64))
   #t
   x?$2001
   #t)
  'int32
  #f)
 (sca-sub (uint32_t t74) (uint32_t (bv #x00000001 32)))
 x?$2426
 x?$2427
 x?$2428)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$2451 idx) (bv #x40000000 32)) (bvsle (bv #xc0000000 32) (app abstr-vals$2451 idx)))))
optimized-halide-expr:
  (vec-add
 (vec-shr #<abstr-halide-expr> (sca-broadcast (uint32_t t74) 16))
 (vec-bwand
  (vec-if
   (sca-broadcast (sca-lt (uint32_t (bv #x00000000 32)) (uint32_t t74)) 16)
   (sca-broadcast (int32_t (bv #x00000001 32)) 16)
   (sca-broadcast (int32_t (bv #x00000000 32)) 16))
  (vec-shr
   #<abstr-halide-expr>
   (sca-broadcast (sca-sub (uint32_t t74) (uint32_t (bv #x00000001 32))) 16))))
optimized-template:
  (vs-shift-right
 ...
 #<abstr-expr>
 (sca-sub (uint32_t t74) (uint32_t (bv #x00000001 32)))
 x?$2426
 x?$2427
 x?$2428)
optimized Halide 0:
  (int32_t
 (bvadd (bvashr (app abstr-vals$2451 0) t74) (bvand (ite (bveq (bv #x00000000 32) t74) (bv #x00000000 32) (bv #x00000001 32)) (bvashr (app abstr-vals$2451 0) (bvadd (bv #xffffffff 32) t74)))))
optimized x86 0:
  (int32_t
 (ite x?$2426 (bvadd (ite x?$2428 (bvashr (app abstr-vals$2451 0) (bvadd (bv #xffffffff 32) t74)) (bvlshr (app abstr-vals$2451 0) (bvadd (bv #xffffffff 32) t74))) (bvand (ite (bvslt (bv #x00000000 32) (bvadd (bv #xffffffff 32) t74)) (bv #x00000001 32) (bv #x00000000 32)) (ite x?$2428 (bvashr (app abstr-vals$2451 0) (bvadd (bv #xfffffffe 32) t74)) (bvlshr (app abstr-vals$2451 0) (bvadd (bv #xfffffffe 32) t74))))) (ite x?$2428 (bvashr (app abstr-vals$2451 0) (bvadd (bv #xffffffff 32) t74)) (bvlshr (app abstr-vals$2451 0) (bvadd (bv #xffffffff 32) t74)))))
Ran synthesizer for 189 ms
(unsat)
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-shr
  (vec-cast
   (vec-max
    (vec-min
     (vec-add
      (vec-bwand
       (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
       (vec-div
        (vec-mul
         (vec-cast
          (vec-mul
           (vec-cast
            (vec-add
             (vec-mul
              (vec-cast
               (load
                (buffer input1 'uint8)
                (ramp
                 (sca-add
                  (sca-mul output.s0.x.x 16)
                  (sca-add
                   (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
                   (var-lookup 't72)))
                 1
                 16)
                (aligned 1 0))
               'int16
               16)
              (sca-broadcast (int16_t (bv #x0040 16)) 16))
             (sca-broadcast
              (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))
              16))
            'int32
            16)
           (vec-cast
            (sca-broadcast
             (sca-mul
              (sca-sub (int16_t t147) (int16_t t148))
              (int16_t (bv #x0040 16)))
             16)
            'int32
            16))
          'int64
          16)
         (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
        (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
      (vec-div
       (vec-mul
        (vec-cast
         (vec-mul
          (vec-cast
           (vec-add
            (vec-mul
             (vec-cast
              (load
               (buffer input1 'uint8)
               (ramp
                (sca-add
                 (sca-mul output.s0.x.x 16)
                 (sca-add
                  (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
                  (var-lookup 't72)))
                1
                16)
               (aligned 1 0))
              'int16
              16)
             (sca-broadcast (int16_t (bv #x0040 16)) 16))
            (sca-broadcast
             (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))
             16))
           'int32
           16)
          (vec-cast
           (sca-broadcast
            (sca-mul
             (sca-sub (int16_t t147) (int16_t t148))
             (int16_t (bv #x0040 16)))
            16)
           'int32
           16))
         'int64
         16)
        (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
       (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
     (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
    (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
   'int32
   16)
  (sca-broadcast (uint32_t t74) 16))
 (vec-bwand
  (vec-if
   (sca-broadcast (sca-lt (uint32_t (bv #x00000000 32)) (uint32_t t74)) 16)
   (sca-broadcast (int32_t (bv #x00000001 32)) 16)
   (sca-broadcast (int32_t (bv #x00000000 32)) 16))
  (vec-shr
   (vec-cast
    (vec-max
     (vec-min
      (vec-add
       (vec-bwand
        (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
        (vec-div
         (vec-mul
          (vec-cast
           (vec-mul
            (vec-cast
             (vec-add
              (vec-mul
               (vec-cast
                (load
                 (buffer input1 'uint8)
                 (ramp
                  (sca-add
                   (sca-mul output.s0.x.x 16)
                   (sca-add
                    (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
                    (var-lookup 't72)))
                  1
                  16)
                 (aligned 1 0))
                'int16
                16)
               (sca-broadcast (int16_t (bv #x0040 16)) 16))
              (sca-broadcast
               (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))
               16))
             'int32
             16)
            (vec-cast
             (sca-broadcast
              (sca-mul
               (sca-sub (int16_t t147) (int16_t t148))
               (int16_t (bv #x0040 16)))
              16)
             'int32
             16))
           'int64
           16)
          (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
         (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
       (vec-div
        (vec-mul
         (vec-cast
          (vec-mul
           (vec-cast
            (vec-add
             (vec-mul
              (vec-cast
               (load
                (buffer input1 'uint8)
                (ramp
                 (sca-add
                  (sca-mul output.s0.x.x 16)
                  (sca-add
                   (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
                   (var-lookup 't72)))
                 1
                 16)
                (aligned 1 0))
               'int16
               16)
              (sca-broadcast (int16_t (bv #x0040 16)) 16))
             (sca-broadcast
              (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))
              16))
            'int32
            16)
           (vec-cast
            (sca-broadcast
             (sca-mul
              (sca-sub (int16_t t147) (int16_t t148))
              (int16_t (bv #x0040 16)))
             16)
            'int32
            16))
          'int64
          16)
         (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
        (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
      (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
     (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
    'int32
    16)
   (sca-broadcast (sca-sub (uint32_t t74) (uint32_t (bv #x00000001 32))) 16))))
template:
  (vs-mpy-add
 ...
 (union [x?$2455 #(struct:vs-shift-right
                   ...
                   #(struct:cast
                     ...
                     #(struct:vs-shift-right
                       ...
                       #(struct:vs-mpy-add
                         ...
                         #(struct:vs-mpy-add
                           ...
                           #(struct:vs-mpy-add
                             ...
                             #<combine:
                              #<load-data>
                              #(struct:broadcast
                                ...
                                #(struct:sca-mul
                                  #(struct:int16_t t146)
                                  #(struct:int16_t (bv #xffc0 16))))>
                             (#(struct:int8_t (bv #x01 8))
                              #(struct:int16_t (bv #x0040 16)))
                             #f
                             #f
                             #f
                             int16)
                           (#(struct:sca-mul
                              #(struct:sca-sub
                                #(struct:int16_t t147)
                                #(struct:int16_t t148))
                              #(struct:int16_t (bv #x0040 16))))
                           #f
                           #f
                           #f
                           int32)
                         (#(struct:int32_t output_multiplier))
                         #f
                         #f
                         #f
                         int64)
                       #(struct:int64_t (bv #x000000000000001f 64))
                       #t
                       x?$2001
                       #t)
                     int32
                     #f)
                   #(struct:uint32_t t74)
                   #f
                   #f
                   #t)] [(! x?$2455) #(struct:bitwise-op
                                       ...
                                       and
                                       #(struct:select
                                         ...
                                         #(struct:broadcast
                                           ...
                                           #(struct:sca-lt
                                             #(struct:uint32_t
                                               (bv #x00000000 32))
                                             #(struct:uint32_t t74)))
                                         #(struct:broadcast
                                           ...
                                           #(struct:int32_t
                                             (bv #x00000001 32)))
                                         #(struct:broadcast
                                           ...
                                           #(struct:int32_t
                                             (bv #x00000000 32))))
                                       #(struct:vs-shift-right
                                         ...
                                         #(struct:cast
                                           ...
                                           #(struct:vs-shift-right
                                             ...
                                             #(struct:vs-mpy-add
                                               ...
                                               #(struct:vs-mpy-add
                                                 ...
                                                 #(struct:vs-mpy-add
                                                   ...
                                                   #<combine:
                                                    #<load-data>
                                                    #(struct:broadcast
                                                      ...
                                                      #(struct:sca-mul
                                                        #(struct:int16_t t146)
                                                        #(struct:int16_t
                                                          (bv #xffc0 16))))>
                                                   (#(struct:int8_t
                                                      (bv #x01 8))
                                                    #(struct:int16_t
                                                      (bv #x0040 16)))
                                                   #f
                                                   #f
                                                   #f
                                                   int16)
                                                 (#(struct:sca-mul
                                                    #(struct:sca-sub
                                                      #(struct:int16_t t147)
                                                      #(struct:int16_t t148))
                                                    #(struct:int16_t
                                                      (bv #x0040 16))))
                                                 #f
                                                 #f
                                                 #f
                                                 int32)
                                               (#(struct:int32_t
                                                  output_multiplier))
                                               #f
                                               #f
                                               #f
                                               int64)
                                             #(struct:int64_t
                                               (bv #x000000000000001f 64))
                                             #t
                                             x?$2001
                                             #t)
                                           int32
                                           #f)
                                         #(struct:sca-sub
                                           #(struct:uint32_t t74)
                                           #(struct:uint32_t
                                             (bv #x00000001 32)))
                                         #f
                                         #f
                                         #t))])
 (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
 (! x?$2456)
 (! x?$2457)
 (! x?$2458)
 'int32)
axioms:
  '()
optimized-halide-expr:
  (vec-add
 (vec-shr
  (vec-cast
   (vec-max
    (vec-min
     (vec-add
      (vec-bwand
       (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
       (vec-div
        (vec-mul
         (vec-cast
          (vec-mul
           (vec-cast
            (vec-add
             (vec-mul
              (vec-cast
               (load
                (buffer input1 'uint8)
                (ramp
                 (sca-add
                  (sca-mul output.s0.x.x 16)
                  (sca-add
                   (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
                   (var-lookup 't72)))
                 1
                 16)
                (aligned 1 0))
               'int16
               16)
              (sca-broadcast (int16_t (bv #x0040 16)) 16))
             (sca-broadcast
              (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))
              16))
            'int32
            16)
           (vec-cast
            (sca-broadcast
             (sca-mul
              (sca-sub (int16_t t147) (int16_t t148))
              (int16_t (bv #x0040 16)))
             16)
            'int32
            16))
          'int64
          16)
         (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
        (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
      (vec-div
       (vec-mul
        (vec-cast
         (vec-mul
          (vec-cast
           (vec-add
            (vec-mul
             (vec-cast
              (load
               (buffer input1 'uint8)
               (ramp
                (sca-add
                 (sca-mul output.s0.x.x 16)
                 (sca-add
                  (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
                  (var-lookup 't72)))
                1
                16)
               (aligned 1 0))
              'int16
              16)
             (sca-broadcast (int16_t (bv #x0040 16)) 16))
            (sca-broadcast
             (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))
             16))
           'int32
           16)
          (vec-cast
           (sca-broadcast
            (sca-mul
             (sca-sub (int16_t t147) (int16_t t148))
             (int16_t (bv #x0040 16)))
            16)
           'int32
           16))
         'int64
         16)
        (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
       (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
     (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
    (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
   'int32
   16)
  (sca-broadcast (uint32_t t74) 16))
 (vec-bwand
  (vec-if
   (sca-broadcast (sca-lt (uint32_t (bv #x00000000 32)) (uint32_t t74)) 16)
   (sca-broadcast (int32_t (bv #x00000001 32)) 16)
   (sca-broadcast (int32_t (bv #x00000000 32)) 16))
  (vec-shr
   (vec-cast
    (vec-max
     (vec-min
      (vec-add
       (vec-bwand
        (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
        (vec-div
         (vec-mul
          (vec-cast
           (vec-mul
            (vec-cast
             (vec-add
              (vec-mul
               (vec-cast
                (load
                 (buffer input1 'uint8)
                 (ramp
                  (sca-add
                   (sca-mul output.s0.x.x 16)
                   (sca-add
                    (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
                    (var-lookup 't72)))
                  1
                  16)
                 (aligned 1 0))
                'int16
                16)
               (sca-broadcast (int16_t (bv #x0040 16)) 16))
              (sca-broadcast
               (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))
               16))
             'int32
             16)
            (vec-cast
             (sca-broadcast
              (sca-mul
               (sca-sub (int16_t t147) (int16_t t148))
               (int16_t (bv #x0040 16)))
              16)
             'int32
             16))
           'int64
           16)
          (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
         (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
       (vec-div
        (vec-mul
         (vec-cast
          (vec-mul
           (vec-cast
            (vec-add
             (vec-mul
              (vec-cast
               (load
                (buffer input1 'uint8)
                (ramp
                 (sca-add
                  (sca-mul output.s0.x.x 16)
                  (sca-add
                   (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
                   (var-lookup 't72)))
                 1
                 16)
                (aligned 1 0))
               'int16
               16)
              (sca-broadcast (int16_t (bv #x0040 16)) 16))
             (sca-broadcast
              (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))
              16))
            'int32
            16)
           (vec-cast
            (sca-broadcast
             (sca-mul
              (sca-sub (int16_t t147) (int16_t t148))
              (int16_t (bv #x0040 16)))
             16)
            'int32
            16))
          'int64
          16)
         (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
        (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
      (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
     (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
    'int32
    16)
   (sca-broadcast (sca-sub (uint32_t t74) (uint32_t (bv #x00000001 32))) 16))))
optimized-template:
  (vs-mpy-add
 ...
 (union [x?$2455 #(struct:vs-shift-right
                   ...
                   #(struct:cast
                     ...
                     #(struct:vs-shift-right
                       ...
                       #(struct:vs-mpy-add
                         ...
                         #(struct:vs-mpy-add
                           ...
                           #(struct:vs-mpy-add
                             ...
                             #<combine:
                              #<load-data>
                              #(struct:broadcast
                                ...
                                #(struct:sca-mul
                                  #(struct:int16_t t146)
                                  #(struct:int16_t (bv #xffc0 16))))>
                             (#(struct:int8_t (bv #x01 8))
                              #(struct:int16_t (bv #x0040 16)))
                             #f
                             #f
                             #f
                             int16)
                           (#(struct:sca-mul
                              #(struct:sca-sub
                                #(struct:int16_t t147)
                                #(struct:int16_t t148))
                              #(struct:int16_t (bv #x0040 16))))
                           #f
                           #f
                           #f
                           int32)
                         (#(struct:int32_t output_multiplier))
                         #f
                         #f
                         #f
                         int64)
                       #(struct:int64_t (bv #x000000000000001f 64))
                       #t
                       x?$2001
                       #t)
                     int32
                     #f)
                   #(struct:uint32_t t74)
                   #f
                   #f
                   #t)] [(! x?$2455) #(struct:bitwise-op
                                       ...
                                       and
                                       #(struct:select
                                         ...
                                         #(struct:broadcast
                                           ...
                                           #(struct:sca-lt
                                             #(struct:uint32_t
                                               (bv #x00000000 32))
                                             #(struct:uint32_t t74)))
                                         #(struct:broadcast
                                           ...
                                           #(struct:int32_t
                                             (bv #x00000001 32)))
                                         #(struct:broadcast
                                           ...
                                           #(struct:int32_t
                                             (bv #x00000000 32))))
                                       #(struct:vs-shift-right
                                         ...
                                         #(struct:cast
                                           ...
                                           #(struct:vs-shift-right
                                             ...
                                             #(struct:vs-mpy-add
                                               ...
                                               #(struct:vs-mpy-add
                                                 ...
                                                 #(struct:vs-mpy-add
                                                   ...
                                                   #<combine:
                                                    #<load-data>
                                                    #(struct:broadcast
                                                      ...
                                                      #(struct:sca-mul
                                                        #(struct:int16_t t146)
                                                        #(struct:int16_t
                                                          (bv #xffc0 16))))>
                                                   (#(struct:int8_t
                                                      (bv #x01 8))
                                                    #(struct:int16_t
                                                      (bv #x0040 16)))
                                                   #f
                                                   #f
                                                   #f
                                                   int16)
                                                 (#(struct:sca-mul
                                                    #(struct:sca-sub
                                                      #(struct:int16_t t147)
                                                      #(struct:int16_t t148))
                                                    #(struct:int16_t
                                                      (bv #x0040 16))))
                                                 #f
                                                 #f
                                                 #f
                                                 int32)
                                               (#(struct:int32_t
                                                  output_multiplier))
                                               #f
                                               #f
                                               #f
                                               int64)
                                             #(struct:int64_t
                                               (bv #x000000000000001f 64))
                                             #t
                                             x?$2001
                                             #t)
                                           int32
                                           #f)
                                         #(struct:sca-sub
                                           #(struct:uint32_t t74)
                                           #(struct:uint32_t
                                             (bv #x00000001 32)))
                                         #f
                                         #f
                                         #t))])
 (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
 (! x?$2456)
 (! x?$2457)
 (! x?$2458)
 'int32)
optimized Halide 0:
  (int32_t
 (bvadd (bvashr (extract 31 0 (ite (bvsle (bv #xffffffff80000000 64) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64))) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bv #xffffffff80000000 64))) t74) (bvand (bvashr (extract 31 0 (ite (bvsle (bv #xffffffff80000000 64) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64))) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bv #xffffffff80000000 64))) (bvadd (bv #xffffffff 32) t74)) (ite (bveq (bv #x00000000 32) t74) (bv #x00000000 32) (bv #x00000001 32)))))
optimized x86 0:
  (int32_t
 (ite* (⊢ (&& x?$2458 (! (&& (! x?$2456) (! x?$2458)))) (ite x?$2456 (bvadd (ite x?$2455 (bvashr (extract 31 0 (bvadd (bvashr (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32)) (sign-extend (bvadd (ite c$602 (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16)) (bvmul (bv #xffc0 16) t146)) (bvmul (bv #x0040 16) (ite c$604 (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16)) (bvmul (bv #xffc0 16) t146)))) (bitvector 32))) (bitvector 64))) (bv #x000000000000001f 64)) (bvand (bv #x0000000000000001 64) (bvashr (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32)) (sign-extend (bvadd (ite c$602 (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16)) (bvmul (bv #xffc0 16) t146)) (bvmul (bv #x0040 16) (ite c$604 (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16)) (bvmul (bv #xffc0 16) t146)))) (bitvector 32))) (bitvector 64))) (bv #x000000000000001e 64))))) t74) (bvand (ite (bveq (bv #x00000000 32) t74) (bv #x00000000 32) (bv #x00000001 32)) (bvashr (extract 31 0 (bvadd (bvashr (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32)) (sign-extend (bvadd (ite c$602 (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16)) (bvmul (bv #xffc0 16) t146)) (bvmul (bv #x0040 16) (ite c$604 (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16)) (bvmul (bv #xffc0 16) t146)))) (bitvector 32))) (bitvector 64))) (bv #x000000000000001f 64)) (bvand (bv #x0000000000000001 64) (bvashr (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32)) (sign-extend (bvadd (ite c$602 (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16)) (bvmul (bv #xffc0 16) t146)) (bvmul (bv #x0040 16) (ite c$604 (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16)) (bvmul (bv #xffc0 16) t146)))) (bitvector 32))) (bitvector 64))) (bv #x000000000000001e 64))))) (bvadd (bv #xffffffff 32) t74)))) (ite x?$2456 (bvadd (ite x?$2455 (bvashr (extract 31 0 (bvadd (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001f 64)) (bvand (bv #x0000000000000001 64) (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001e 64))))) t74) (bvand (bvashr (extract 31 0 (bvadd (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001f 64)) (bvand (bv #x0000000000000001 64) (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001e 64))))) (bvadd (bv #xffffffff 32) t74)) (ite (bveq (bv #x00000000 32) t74) (bv #x00000000 32) (bv #x00000001 32)))) (ite x?$2457 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2457 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite x?$2455 (bvashr (extract 31 0 (bvadd (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001f 64)) (bvand (bv #x0000000000000001 64) (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001e 64))))) t74) (bvand (bvashr (extract 31 0 (bvadd (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001f 64)) (bvand (bv #x0000000000000001 64) (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001e 64))))) (bvadd (bv #xffffffff 32) t74)) (ite (bveq (bv #x00000000 32) t74) (bv #x00000000 32) (bv #x00000001 32)))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2457 (bv #x00000000 32) (bv #x00000001 32))))) (ite x?$2455 (bvashr (extract 31 0 (bvadd (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001f 64)) (bvand (bv #x0000000000000001 64) (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001e 64))))) t74) (bvand (bvashr (extract 31 0 (bvadd (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001f 64)) (bvand (bv #x0000000000000001 64) (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001e 64))))) (bvadd (bv #xffffffff 32) t74)) (ite (bveq (bv #x00000000 32) t74) (bv #x00000000 32) (bv #x00000001 32)))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2457 (bv #x00000000 32) (bv #x00000001 32)))))))) (bvadd (ite x?$2456 (bvadd (ite x?$2455 (bvashr (extract 31 0 (bvadd (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001f 64)) (bvand (bv #x0000000000000001 64) (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001e 64))))) t74) (bvand (bvashr (extract 31 0 (bvadd (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001f 64)) (bvand (bv #x0000000000000001 64) (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001e 64))))) (bvadd (bv #xffffffff 32) t74)) (ite (bveq (bv #x00000000 32) t74) (bv #x00000000 32) (bv #x00000001 32)))) (ite x?$2457 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2457 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite x?$2455 (bvashr (extract 31 0 (bvadd (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001f 64)) (bvand (bv #x0000000000000001 64) (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001e 64))))) t74) (bvand (bvashr (extract 31 0 (bvadd (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001f 64)) (bvand (bv #x0000000000000001 64) (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001e 64))))) (bvadd (bv #xffffffff 32) t74)) (ite (bveq (bv #x00000000 32) t74) (bv #x00000000 32) (bv #x00000001 32)))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2457 (bv #x00000000 32) (bv #x00000001 32))))) (ite x?$2455 (bvashr (extract 31 0 (bvadd (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001f 64)) (bvand (bv #x0000000000000001 64) (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001e 64))))) t74) (bvand (bvashr (extract 31 0 (bvadd (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001f 64)) (bvand (bv #x0000000000000001 64) (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001e 64))))) (bvadd (bv #xffffffff 32) t74)) (ite (bveq (bv #x00000000 32) t74) (bv #x00000000 32) (bv #x00000001 32)))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2457 (bv #x00000000 32) (bv #x00000001 32))))))) (ite (bvsle (bvadd (bv #x80000000 32) (bvneg (ite (bvsle (ite x?$2456 (bvadd (ite x?$2455 (bvashr (extract 31 0 (bvadd (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001f 64)) (bvand (bv #x0000000000000001 64) (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001e 64))))) t74) (bvand (bvashr (extract 31 0 (bvadd (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001f 64)) (bvand (bv #x0000000000000001 64) (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001e 64))))) (bvadd (bv #xffffffff 32) t74)) (ite (bveq (bv #x00000000 32) t74) (bv #x00000000 32) (bv #x00000001 32)))) (ite x?$2457 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2457 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite x?$2455 (bvashr (extract 31 0 (bvadd (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001f 64)) (bvand (bv #x0000000000000001 64) (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001e 64))))) t74) (bvand (bvashr (extract 31 0 (bvadd (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001f 64)) (bvand (bv #x0000000000000001 64) (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001e 64))))) (bvadd (bv #xffffffff 32) t74)) (ite (bveq (bv #x00000000 32) t74) (bv #x00000000 32) (bv #x00000001 32)))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2457 (bv #x00000000 32) (bv #x00000001 32))))) (ite x?$2455 (bvashr (extract 31 0 (bvadd (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001f 64)) (bvand (bv #x0000000000000001 64) (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001e 64))))) t74) (bvand (bvashr (extract 31 0 (bvadd (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001f 64)) (bvand (bv #x0000000000000001 64) (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001e 64))))) (bvadd (bv #xffffffff 32) t74)) (ite (bveq (bv #x00000000 32) t74) (bv #x00000000 32) (bv #x00000001 32)))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2457 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)) (ite x?$2456 (bvadd (ite x?$2455 (bvashr (extract 31 0 (bvadd (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001f 64)) (bvand (bv #x0000000000000001 64) (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001e 64))))) t74) (bvand (bvashr (extract 31 0 (bvadd (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001f 64)) (bvand (bv #x0000000000000001 64) (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001e 64))))) (bvadd (bv #xffffffff 32) t74)) (ite (bveq (bv #x00000000 32) t74) (bv #x00000000 32) (bv #x00000001 32)))) (ite x?$2457 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2457 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite x?$2455 (bvashr (extract 31 0 (bvadd (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001f 64)) (bvand (bv #x0000000000000001 64) (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001e 64))))) t74) (bvand (bvashr (extract 31 0 (bvadd (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001f 64)) (bvand (bv #x0000000000000001 64) (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001e 64))))) (bvadd (bv #xffffffff 32) t74)) (ite (bveq (bv #x00000000 32) t74) (bv #x00000000 32) (bv #x00000001 32)))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2457 (bv #x00000000 32) (bv #x00000001 32))))) (ite x?$2455 (bvashr (extract 31 0 (bvadd (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001f 64)) (bvand (bv #x0000000000000001 64) (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001e 64))))) t74) (bvand (bvashr (extract 31 0 (bvadd (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001f 64)) (bvand (bv #x0000000000000001 64) (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001e 64))))) (bvadd (bv #xffffffff 32) t74)) (ite (bveq (bv #x00000000 32) t74) (bv #x00000000 32) (bv #x00000001 32)))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2457 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)))) (ite (bvsle (ite x?$2455 (bvashr (extract 31 0 (bvadd (bvashr (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32)) (sign-extend (bvadd (ite c$602 (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16)) (bvmul (bv #xffc0 16) t146)) (bvmul (bv #x0040 16) (ite c$604 (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16)) (bvmul (bv #xffc0 16) t146)))) (bitvector 32))) (bitvector 64))) (bv #x000000000000001f 64)) (bvand (bv #x0000000000000001 64) (bvashr (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32)) (sign-extend (bvadd (ite c$602 (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16)) (bvmul (bv #xffc0 16) t146)) (bvmul (bv #x0040 16) (ite c$604 (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16)) (bvmul (bv #xffc0 16) t146)))) (bitvector 32))) (bitvector 64))) (bv #x000000000000001e 64))))) t74) (bvand (ite (bveq (bv #x00000000 32) t74) (bv #x00000000 32) (bv #x00000001 32)) (bvashr (extract 31 0 (bvadd (bvashr (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32)) (sign-extend (bvadd (ite c$602 (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16)) (bvmul (bv #xffc0 16) t146)) (bvmul (bv #x0040 16) (ite c$604 (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16)) (bvmul (bv #xffc0 16) t146)))) (bitvector 32))) (bitvector 64))) (bv #x000000000000001f 64)) (bvand (bv #x0000000000000001 64) (bvashr (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32)) (sign-extend (bvadd (ite c$602 (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16)) (bvmul (bv #xffc0 16) t146)) (bvmul (bv #x0040 16) (ite c$604 (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16)) (bvmul (bv #xffc0 16) t146)))) (bitvector 32))) (bitvector 64))) (bv #x000000000000001e 64))))) (bvadd (bv #xffffffff 32) t74)))) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$2456 (bvadd (ite x?$2455 (bvashr (extract 31 0 (bvadd (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001f 64)) (bvand (bv #x0000000000000001 64) (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001e 64))))) t74) (bvand (bvashr (extract 31 0 (bvadd (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001f 64)) (bvand (bv #x0000000000000001 64) (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001e 64))))) (bvadd (bv #xffffffff 32) t74)) (ite (bveq (bv #x00000000 32) t74) (bv #x00000000 32) (bv #x00000001 32)))) (ite x?$2457 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2457 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite x?$2455 (bvashr (extract 31 0 (bvadd (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001f 64)) (bvand (bv #x0000000000000001 64) (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001e 64))))) t74) (bvand (bvashr (extract 31 0 (bvadd (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001f 64)) (bvand (bv #x0000000000000001 64) (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001e 64))))) (bvadd (bv #xffffffff 32) t74)) (ite (bveq (bv #x00000000 32) t74) (bv #x00000000 32) (bv #x00000001 32)))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2457 (bv #x00000000 32) (bv #x00000001 32))))) (ite x?$2455 (bvashr (extract 31 0 (bvadd (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001f 64)) (bvand (bv #x0000000000000001 64) (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001e 64))))) t74) (bvand (bvashr (extract 31 0 (bvadd (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001f 64)) (bvand (bv #x0000000000000001 64) (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001e 64))))) (bvadd (bv #xffffffff 32) t74)) (ite (bveq (bv #x00000000 32) t74) (bv #x00000000 32) (bv #x00000001 32)))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2457 (bv #x00000000 32) (bv #x00000001 32)))))))) (ite x?$2456 (bvadd (ite x?$2455 (bvashr (extract 31 0 (bvadd (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001f 64)) (bvand (bv #x0000000000000001 64) (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001e 64))))) t74) (bvand (bvashr (extract 31 0 (bvadd (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001f 64)) (bvand (bv #x0000000000000001 64) (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001e 64))))) (bvadd (bv #xffffffff 32) t74)) (ite (bveq (bv #x00000000 32) t74) (bv #x00000000 32) (bv #x00000001 32)))) (ite x?$2457 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2457 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite x?$2455 (bvashr (extract 31 0 (bvadd (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001f 64)) (bvand (bv #x0000000000000001 64) (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001e 64))))) t74) (bvand (bvashr (extract 31 0 (bvadd (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001f 64)) (bvand (bv #x0000000000000001 64) (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001e 64))))) (bvadd (bv #xffffffff 32) t74)) (ite (bveq (bv #x00000000 32) t74) (bv #x00000000 32) (bv #x00000001 32)))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2457 (bv #x00000000 32) (bv #x00000001 32))))) (ite x?$2455 (bvashr (extract 31 0 (bvadd (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001f 64)) (bvand (bv #x0000000000000001 64) (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001e 64))))) t74) (bvand (bvashr (extract 31 0 (bvadd (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001f 64)) (bvand (bv #x0000000000000001 64) (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001e 64))))) (bvadd (bv #xffffffff 32) t74)) (ite (bveq (bv #x00000000 32) t74) (bv #x00000000 32) (bv #x00000001 32)))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2457 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32))))) (ite x?$2455 (bvashr (extract 31 0 (bvadd (bvashr (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32)) (sign-extend (bvadd (ite c$602 (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16)) (bvmul (bv #xffc0 16) t146)) (bvmul (bv #x0040 16) (ite c$604 (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16)) (bvmul (bv #xffc0 16) t146)))) (bitvector 32))) (bitvector 64))) (bv #x000000000000001f 64)) (bvand (bv #x0000000000000001 64) (bvashr (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32)) (sign-extend (bvadd (ite c$602 (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16)) (bvmul (bv #xffc0 16) t146)) (bvmul (bv #x0040 16) (ite c$604 (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16)) (bvmul (bv #xffc0 16) t146)))) (bitvector 32))) (bitvector 64))) (bv #x000000000000001e 64))))) t74) (bvand (ite (bveq (bv #x00000000 32) t74) (bv #x00000000 32) (bv #x00000001 32)) (bvashr (extract 31 0 (bvadd (bvashr (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32)) (sign-extend (bvadd (ite c$602 (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16)) (bvmul (bv #xffc0 16) t146)) (bvmul (bv #x0040 16) (ite c$604 (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16)) (bvmul (bv #xffc0 16) t146)))) (bitvector 32))) (bitvector 64))) (bv #x000000000000001f 64)) (bvand (bv #x0000000000000001 64) (bvashr (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32)) (sign-extend (bvadd (ite c$602 (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16)) (bvmul (bv #xffc0 16) t146)) (bvmul (bv #x0040 16) (ite c$604 (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16)) (bvmul (bv #xffc0 16) t146)))) (bitvector 32))) (bitvector 64))) (bv #x000000000000001e 64))))) (bvadd (bv #xffffffff 32) t74)))) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$2456 (bvadd (ite x?$2455 (bvashr (extract 31 0 (bvadd (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001f 64)) (bvand (bv #x0000000000000001 64) (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001e 64))))) t74) (bvand (bvashr (extract 31 0 (bvadd (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001f 64)) (bvand (bv #x0000000000000001 64) (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001e 64))))) (bvadd (bv #xffffffff 32) t74)) (ite (bveq (bv #x00000000 32) t74) (bv #x00000000 32) (bv #x00000001 32)))) (ite x?$2457 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2457 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite x?$2455 (bvashr (extract 31 0 (bvadd (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001f 64)) (bvand (bv #x0000000000000001 64) (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001e 64))))) t74) (bvand (bvashr (extract 31 0 (bvadd (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001f 64)) (bvand (bv #x0000000000000001 64) (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001e 64))))) (bvadd (bv #xffffffff 32) t74)) (ite (bveq (bv #x00000000 32) t74) (bv #x00000000 32) (bv #x00000001 32)))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2457 (bv #x00000000 32) (bv #x00000001 32))))) (ite x?$2455 (bvashr (extract 31 0 (bvadd (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001f 64)) (bvand (bv #x0000000000000001 64) (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001e 64))))) t74) (bvand (bvashr (extract 31 0 (bvadd (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001f 64)) (bvand (bv #x0000000000000001 64) (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001e 64))))) (bvadd (bv #xffffffff 32) t74)) (ite (bveq (bv #x00000000 32) t74) (bv #x00000000 32) (bv #x00000001 32)))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2457 (bv #x00000000 32) (bv #x00000001 32)))))))) (ite x?$2456 (bvadd (ite x?$2455 (bvashr (extract 31 0 (bvadd (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001f 64)) (bvand (bv #x0000000000000001 64) (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001e 64))))) t74) (bvand (bvashr (extract 31 0 (bvadd (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001f 64)) (bvand (bv #x0000000000000001 64) (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001e 64))))) (bvadd (bv #xffffffff 32) t74)) (ite (bveq (bv #x00000000 32) t74) (bv #x00000000 32) (bv #x00000001 32)))) (ite x?$2457 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2457 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite x?$2455 (bvashr (extract 31 0 (bvadd (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001f 64)) (bvand (bv #x0000000000000001 64) (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001e 64))))) t74) (bvand (bvashr (extract 31 0 (bvadd (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001f 64)) (bvand (bv #x0000000000000001 64) (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001e 64))))) (bvadd (bv #xffffffff 32) t74)) (ite (bveq (bv #x00000000 32) t74) (bv #x00000000 32) (bv #x00000001 32)))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2457 (bv #x00000000 32) (bv #x00000001 32))))) (ite x?$2455 (bvashr (extract 31 0 (bvadd (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001f 64)) (bvand (bv #x0000000000000001 64) (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001e 64))))) t74) (bvand (bvashr (extract 31 0 (bvadd (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001f 64)) (bvand (bv #x0000000000000001 64) (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001e 64))))) (bvadd (bv #xffffffff 32) t74)) (ite (bveq (bv #x00000000 32) t74) (bv #x00000000 32) (bv #x00000001 32)))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2457 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)))))) (ite (bvsle (ite x?$2455 (bvashr (extract 31 0 (bvadd (bvashr (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32)) (sign-extend (bvadd (ite c$602 (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16)) (bvmul (bv #xffc0 16) t146)) (bvmul (bv #x0040 16) (ite c$604 (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16)) (bvmul (bv #xffc0 16) t146)))) (bitvector 32))) (bitvector 64))) (bv #x000000000000001f 64)) (bvand (bv #x0000000000000001 64) (bvashr (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32)) (sign-extend (bvadd (ite c$602 (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16)) (bvmul (bv #xffc0 16) t146)) (bvmul (bv #x0040 16) (ite c$604 (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16)) (bvmul (bv #xffc0 16) t146)))) (bitvector 32))) (bitvector 64))) (bv #x000000000000001e 64))))) t74) (bvand (ite (bveq (bv #x00000000 32) t74) (bv #x00000000 32) (bv #x00000001 32)) (bvashr (extract 31 0 (bvadd (bvashr (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32)) (sign-extend (bvadd (ite c$602 (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16)) (bvmul (bv #xffc0 16) t146)) (bvmul (bv #x0040 16) (ite c$604 (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16)) (bvmul (bv #xffc0 16) t146)))) (bitvector 32))) (bitvector 64))) (bv #x000000000000001f 64)) (bvand (bv #x0000000000000001 64) (bvashr (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32)) (sign-extend (bvadd (ite c$602 (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16)) (bvmul (bv #xffc0 16) t146)) (bvmul (bv #x0040 16) (ite c$604 (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16)) (bvmul (bv #xffc0 16) t146)))) (bitvector 32))) (bitvector 64))) (bv #x000000000000001e 64))))) (bvadd (bv #xffffffff 32) t74)))) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$2456 (bvadd (ite x?$2455 (bvashr (extract 31 0 (bvadd (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001f 64)) (bvand (bv #x0000000000000001 64) (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001e 64))))) t74) (bvand (bvashr (extract 31 0 (bvadd (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001f 64)) (bvand (bv #x0000000000000001 64) (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001e 64))))) (bvadd (bv #xffffffff 32) t74)) (ite (bveq (bv #x00000000 32) t74) (bv #x00000000 32) (bv #x00000001 32)))) (ite x?$2457 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2457 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite x?$2455 (bvashr (extract 31 0 (bvadd (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001f 64)) (bvand (bv #x0000000000000001 64) (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001e 64))))) t74) (bvand (bvashr (extract 31 0 (bvadd (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001f 64)) (bvand (bv #x0000000000000001 64) (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001e 64))))) (bvadd (bv #xffffffff 32) t74)) (ite (bveq (bv #x00000000 32) t74) (bv #x00000000 32) (bv #x00000001 32)))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2457 (bv #x00000000 32) (bv #x00000001 32))))) (ite x?$2455 (bvashr (extract 31 0 (bvadd (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001f 64)) (bvand (bv #x0000000000000001 64) (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001e 64))))) t74) (bvand (bvashr (extract 31 0 (bvadd (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001f 64)) (bvand (bv #x0000000000000001 64) (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001e 64))))) (bvadd (bv #xffffffff 32) t74)) (ite (bveq (bv #x00000000 32) t74) (bv #x00000000 32) (bv #x00000001 32)))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2457 (bv #x00000000 32) (bv #x00000001 32)))))))) (ite x?$2456 (bvadd (ite x?$2455 (bvashr (extract 31 0 (bvadd (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001f 64)) (bvand (bv #x0000000000000001 64) (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001e 64))))) t74) (bvand (bvashr (extract 31 0 (bvadd (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001f 64)) (bvand (bv #x0000000000000001 64) (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001e 64))))) (bvadd (bv #xffffffff 32) t74)) (ite (bveq (bv #x00000000 32) t74) (bv #x00000000 32) (bv #x00000001 32)))) (ite x?$2457 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2457 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite x?$2455 (bvashr (extract 31 0 (bvadd (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001f 64)) (bvand (bv #x0000000000000001 64) (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001e 64))))) t74) (bvand (bvashr (extract 31 0 (bvadd (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001f 64)) (bvand (bv #x0000000000000001 64) (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001e 64))))) (bvadd (bv #xffffffff 32) t74)) (ite (bveq (bv #x00000000 32) t74) (bv #x00000000 32) (bv #x00000001 32)))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2457 (bv #x00000000 32) (bv #x00000001 32))))) (ite x?$2455 (bvashr (extract 31 0 (bvadd (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001f 64)) (bvand (bv #x0000000000000001 64) (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001e 64))))) t74) (bvand (bvashr (extract 31 0 (bvadd (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001f 64)) (bvand (bv #x0000000000000001 64) (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001e 64))))) (bvadd (bv #xffffffff 32) t74)) (ite (bveq (bv #x00000000 32) t74) (bv #x00000000 32) (bv #x00000001 32)))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2457 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32))))) (ite x?$2455 (bvashr (extract 31 0 (bvadd (bvashr (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32)) (sign-extend (bvadd (ite c$602 (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16)) (bvmul (bv #xffc0 16) t146)) (bvmul (bv #x0040 16) (ite c$604 (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16)) (bvmul (bv #xffc0 16) t146)))) (bitvector 32))) (bitvector 64))) (bv #x000000000000001f 64)) (bvand (bv #x0000000000000001 64) (bvashr (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32)) (sign-extend (bvadd (ite c$602 (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16)) (bvmul (bv #xffc0 16) t146)) (bvmul (bv #x0040 16) (ite c$604 (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16)) (bvmul (bv #xffc0 16) t146)))) (bitvector 32))) (bitvector 64))) (bv #x000000000000001e 64))))) t74) (bvand (ite (bveq (bv #x00000000 32) t74) (bv #x00000000 32) (bv #x00000001 32)) (bvashr (extract 31 0 (bvadd (bvashr (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32)) (sign-extend (bvadd (ite c$602 (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16)) (bvmul (bv #xffc0 16) t146)) (bvmul (bv #x0040 16) (ite c$604 (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16)) (bvmul (bv #xffc0 16) t146)))) (bitvector 32))) (bitvector 64))) (bv #x000000000000001f 64)) (bvand (bv #x0000000000000001 64) (bvashr (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (bvmul (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32)) (sign-extend (bvadd (ite c$602 (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16)) (bvmul (bv #xffc0 16) t146)) (bvmul (bv #x0040 16) (ite c$604 (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16)) (bvmul (bv #xffc0 16) t146)))) (bitvector 32))) (bitvector 64))) (bv #x000000000000001e 64))))) (bvadd (bv #xffffffff 32) t74)))) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$2456 (bvadd (ite x?$2455 (bvashr (extract 31 0 (bvadd (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001f 64)) (bvand (bv #x0000000000000001 64) (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001e 64))))) t74) (bvand (bvashr (extract 31 0 (bvadd (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001f 64)) (bvand (bv #x0000000000000001 64) (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001e 64))))) (bvadd (bv #xffffffff 32) t74)) (ite (bveq (bv #x00000000 32) t74) (bv #x00000000 32) (bv #x00000001 32)))) (ite x?$2457 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2457 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite x?$2455 (bvashr (extract 31 0 (bvadd (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001f 64)) (bvand (bv #x0000000000000001 64) (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001e 64))))) t74) (bvand (bvashr (extract 31 0 (bvadd (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001f 64)) (bvand (bv #x0000000000000001 64) (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001e 64))))) (bvadd (bv #xffffffff 32) t74)) (ite (bveq (bv #x00000000 32) t74) (bv #x00000000 32) (bv #x00000001 32)))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2457 (bv #x00000000 32) (bv #x00000001 32))))) (ite x?$2455 (bvashr (extract 31 0 (bvadd (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001f 64)) (bvand (bv #x0000000000000001 64) (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001e 64))))) t74) (bvand (bvashr (extract 31 0 (bvadd (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001f 64)) (bvand (bv #x0000000000000001 64) (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001e 64))))) (bvadd (bv #xffffffff 32) t74)) (ite (bveq (bv #x00000000 32) t74) (bv #x00000000 32) (bv #x00000001 32)))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2457 (bv #x00000000 32) (bv #x00000001 32)))))))) (ite x?$2456 (bvadd (ite x?$2455 (bvashr (extract 31 0 (bvadd (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001f 64)) (bvand (bv #x0000000000000001 64) (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001e 64))))) t74) (bvand (bvashr (extract 31 0 (bvadd (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001f 64)) (bvand (bv #x0000000000000001 64) (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001e 64))))) (bvadd (bv #xffffffff 32) t74)) (ite (bveq (bv #x00000000 32) t74) (bv #x00000000 32) (bv #x00000001 32)))) (ite x?$2457 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2457 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite x?$2455 (bvashr (extract 31 0 (bvadd (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001f 64)) (bvand (bv #x0000000000000001 64) (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001e 64))))) t74) (bvand (bvashr (extract 31 0 (bvadd (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001f 64)) (bvand (bv #x0000000000000001 64) (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001e 64))))) (bvadd (bv #xffffffff 32) t74)) (ite (bveq (bv #x00000000 32) t74) (bv #x00000000 32) (bv #x00000001 32)))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2457 (bv #x00000000 32) (bv #x00000001 32))))) (ite x?$2455 (bvashr (extract 31 0 (bvadd (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001f 64)) (bvand (bv #x0000000000000001 64) (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001e 64))))) t74) (bvand (bvashr (extract 31 0 (bvadd (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001f 64)) (bvand (bv #x0000000000000001 64) (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001e 64))))) (bvadd (bv #xffffffff 32) t74)) (ite (bveq (bv #x00000000 32) t74) (bv #x00000000 32) (bv #x00000001 32)))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2457 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32))))) (bvadd (bv #x80000000 32) (bvneg (ite (bvsle (ite x?$2456 (bvadd (ite x?$2455 (bvashr (extract 31 0 (bvadd (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001f 64)) (bvand (bv #x0000000000000001 64) (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001e 64))))) t74) (bvand (bvashr (extract 31 0 (bvadd (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001f 64)) (bvand (bv #x0000000000000001 64) (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001e 64))))) (bvadd (bv #xffffffff 32) t74)) (ite (bveq (bv #x00000000 32) t74) (bv #x00000000 32) (bv #x00000001 32)))) (ite x?$2457 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2457 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite x?$2455 (bvashr (extract 31 0 (bvadd (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001f 64)) (bvand (bv #x0000000000000001 64) (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001e 64))))) t74) (bvand (bvashr (extract 31 0 (bvadd (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001f 64)) (bvand (bv #x0000000000000001 64) (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001e 64))))) (bvadd (bv #xffffffff 32) t74)) (ite (bveq (bv #x00000000 32) t74) (bv #x00000000 32) (bv #x00000001 32)))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2457 (bv #x00000000 32) (bv #x00000001 32))))) (ite x?$2455 (bvashr (extract 31 0 (bvadd (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001f 64)) (bvand (bv #x0000000000000001 64) (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001e 64))))) t74) (bvand (bvashr (extract 31 0 (bvadd (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001f 64)) (bvand (bv #x0000000000000001 64) (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001e 64))))) (bvadd (bv #xffffffff 32) t74)) (ite (bveq (bv #x00000000 32) t74) (bv #x00000000 32) (bv #x00000001 32)))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2457 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)) (ite x?$2456 (bvadd (ite x?$2455 (bvashr (extract 31 0 (bvadd (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001f 64)) (bvand (bv #x0000000000000001 64) (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001e 64))))) t74) (bvand (bvashr (extract 31 0 (bvadd (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001f 64)) (bvand (bv #x0000000000000001 64) (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001e 64))))) (bvadd (bv #xffffffff 32) t74)) (ite (bveq (bv #x00000000 32) t74) (bv #x00000000 32) (bv #x00000001 32)))) (ite x?$2457 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2457 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite x?$2455 (bvashr (extract 31 0 (bvadd (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001f 64)) (bvand (bv #x0000000000000001 64) (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001e 64))))) t74) (bvand (bvashr (extract 31 0 (bvadd (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001f 64)) (bvand (bv #x0000000000000001 64) (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001e 64))))) (bvadd (bv #xffffffff 32) t74)) (ite (bveq (bv #x00000000 32) t74) (bv #x00000000 32) (bv #x00000001 32)))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2457 (bv #x00000000 32) (bv #x00000001 32))))) (ite x?$2455 (bvashr (extract 31 0 (bvadd (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001f 64)) (bvand (bv #x0000000000000001 64) (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001e 64))))) t74) (bvand (bvashr (extract 31 0 (bvadd (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001f 64)) (bvand (bv #x0000000000000001 64) (bvashr (bvmul (sign-extend (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t93 (- (+ t105 output.s0.y.rebased))) (+ (+ t102 (- t144)) (- t88))))) (bitvector 16))) (bvmul (bv #xffc0 16) t146)) (bitvector 32)) (sign-extend (bvmul (bv #x0040 16) (bvadd t147 (bvneg t148))) (bitvector 32))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001e 64))))) (bvadd (bv #xffffffff 32) t74)) (ite (bveq (bv #x00000000 32) t74) (bv #x00000000 32) (bv #x00000001 32)))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2457 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)))))))) ...))
Ran synthesizer for 2258 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-shr
  (vec-cast
   (vec-max
    (vec-min
     (vec-add
      (vec-bwand
       (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
       (vec-div
        (vec-mul
         (vec-cast
          (vec-mul
           (vec-cast
            (vec-add
             (vec-mul
              (vec-cast
               (load
                (buffer input1 'uint8)
                (ramp
                 (sca-add
                  (sca-mul output.s0.x.x 16)
                  (sca-add
                   (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
                   (var-lookup 't72)))
                 1
                 16)
                (aligned 1 0))
               'int16
               16)
              (sca-broadcast (int16_t (bv #x0040 16)) 16))
             (sca-broadcast
              (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))
              16))
            'int32
            16)
           (vec-cast
            (sca-broadcast
             (sca-mul
              (sca-sub (int16_t t147) (int16_t t148))
              (int16_t (bv #x0040 16)))
             16)
            'int32
            16))
          'int64
          16)
         (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
        (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
      (vec-div
       (vec-mul
        (vec-cast
         (vec-mul
          (vec-cast
           (vec-add
            (vec-mul
             (vec-cast
              (load
               (buffer input1 'uint8)
               (ramp
                (sca-add
                 (sca-mul output.s0.x.x 16)
                 (sca-add
                  (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
                  (var-lookup 't72)))
                1
                16)
               (aligned 1 0))
              'int16
              16)
             (sca-broadcast (int16_t (bv #x0040 16)) 16))
            (sca-broadcast
             (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))
             16))
           'int32
           16)
          (vec-cast
           (sca-broadcast
            (sca-mul
             (sca-sub (int16_t t147) (int16_t t148))
             (int16_t (bv #x0040 16)))
            16)
           'int32
           16))
         'int64
         16)
        (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
       (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
     (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
    (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
   'int32
   16)
  (sca-broadcast (uint32_t t74) 16))
 (vec-bwand
  (vec-if
   (sca-broadcast (sca-lt (uint32_t (bv #x00000000 32)) (uint32_t t74)) 16)
   (sca-broadcast (int32_t (bv #x00000001 32)) 16)
   (sca-broadcast (int32_t (bv #x00000000 32)) 16))
  (vec-shr
   (vec-cast
    (vec-max
     (vec-min
      (vec-add
       (vec-bwand
        (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
        (vec-div
         (vec-mul
          (vec-cast
           (vec-mul
            (vec-cast
             (vec-add
              (vec-mul
               (vec-cast
                (load
                 (buffer input1 'uint8)
                 (ramp
                  (sca-add
                   (sca-mul output.s0.x.x 16)
                   (sca-add
                    (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
                    (var-lookup 't72)))
                  1
                  16)
                 (aligned 1 0))
                'int16
                16)
               (sca-broadcast (int16_t (bv #x0040 16)) 16))
              (sca-broadcast
               (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))
               16))
             'int32
             16)
            (vec-cast
             (sca-broadcast
              (sca-mul
               (sca-sub (int16_t t147) (int16_t t148))
               (int16_t (bv #x0040 16)))
              16)
             'int32
             16))
           'int64
           16)
          (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
         (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
       (vec-div
        (vec-mul
         (vec-cast
          (vec-mul
           (vec-cast
            (vec-add
             (vec-mul
              (vec-cast
               (load
                (buffer input1 'uint8)
                (ramp
                 (sca-add
                  (sca-mul output.s0.x.x 16)
                  (sca-add
                   (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
                   (var-lookup 't72)))
                 1
                 16)
                (aligned 1 0))
               'int16
               16)
              (sca-broadcast (int16_t (bv #x0040 16)) 16))
             (sca-broadcast
              (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))
              16))
            'int32
            16)
           (vec-cast
            (sca-broadcast
             (sca-mul
              (sca-sub (int16_t t147) (int16_t t148))
              (int16_t (bv #x0040 16)))
             16)
            'int32
            16))
          'int64
          16)
         (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
        (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
      (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
     (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
    'int32
    16)
   (sca-broadcast (sca-sub (uint32_t t74) (uint32_t (bv #x00000001 32))) 16))))
template:
  (vs-mpy-add
 ...
 (combine
  (vs-shift-right
   ...
   (cast
    ...
    (vs-shift-right
     ...
     (vs-mpy-add
      ...
      (vs-mpy-add
       ...
       (vs-mpy-add
        ...
        (combine
         #<load-data>
         (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))))
        (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
        #f
        #f
        #f
        'int16)
       (list
        (sca-mul
         (sca-sub (int16_t t147) (int16_t t148))
         (int16_t (bv #x0040 16))))
       #f
       #f
       #f
       'int32)
      (list (int32_t output_multiplier))
      #f
      #f
      #f
      'int64)
     (int64_t (bv #x000000000000001f 64))
     #t
     x?$2001
     #t)
    'int32
    #f)
   (uint32_t t74)
   #f
   #f
   #t)
  (bitwise-op
   ...
   'and
   (select
    ...
    (broadcast ... (sca-lt (uint32_t (bv #x00000000 32)) (uint32_t t74)))
    (broadcast ... (int32_t (bv #x00000001 32)))
    (broadcast ... (int32_t (bv #x00000000 32))))
   (vs-shift-right
    ...
    (cast
     ...
     (vs-shift-right
      ...
      (vs-mpy-add
       ...
       (vs-mpy-add
        ...
        (vs-mpy-add
         ...
         (combine
          #<load-data>
          (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))))
         (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
         #f
         #f
         #f
         'int16)
        (list
         (sca-mul
          (sca-sub (int16_t t147) (int16_t t148))
          (int16_t (bv #x0040 16))))
        #f
        #f
        #f
        'int32)
       (list (int32_t output_multiplier))
       #f
       #f
       #f
       'int64)
      (int64_t (bv #x000000000000001f 64))
      #t
      x?$2001
      #t)
     'int32
     #f)
    (sca-sub (uint32_t t74) (uint32_t (bv #x00000001 32)))
    #f
    #f
    #t)))
 (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
 #f
 #f
 #f
 'int32)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$2587 idx) (bv #x40000000 32)) (bvsle (bv #xc0000000 32) (app abstr-vals$2587 idx))))
 (forall (idx) (&& (bvsle (app abstr-vals$2588 idx) (bv #x00000001 32)) (bvsle (bv #x00000000 32) (app abstr-vals$2588 idx)))))
optimized-halide-expr:
  (vec-add #<abstr-halide-expr> #<abstr-halide-expr>)
optimized-template:
  (vs-mpy-add
 ...
 (combine #<abstr-expr> #<abstr-expr>)
 (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
 #f
 #f
 #f
 'int32)
optimized Halide 0:
  (int32_t (bvadd (app abstr-vals$2587 0) (app abstr-vals$2588 0)))
optimized x86 0:
  (int32_t
 (bvadd (ite c$2460 (app abstr-vals$2587 idx$2459) (app abstr-vals$2588 idx$2459)) (ite c$2462 (app abstr-vals$2587 idx$2461) (app abstr-vals$2588 idx$2461))))
Ran synthesizer for 158 ms
(model
 [idx$2459 0]
 [c$2460 #f]
 [idx$2461 0]
 [c$2462 #t])
(vec-add #<abstr-halide-expr> #<abstr-halide-expr>)
(vs-mpy-add
 ...
 (combine
  (vs-shift-right
   ...
   (cast
    ...
    (vs-shift-right
     ...
     (vs-mpy-add
      ...
      (vs-mpy-add
       ...
       (vs-mpy-add
        ...
        (combine
         #<load-data>
         (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))))
        (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
        #f
        #f
        #f
        'int16)
       (list
        (sca-mul
         (sca-sub (int16_t t147) (int16_t t148))
         (int16_t (bv #x0040 16))))
       #f
       #f
       #f
       'int32)
      (list (int32_t output_multiplier))
      #f
      #f
      #f
      'int64)
     (int64_t (bv #x000000000000001f 64))
     #t
     x?$2001
     #t)
    'int32
    #f)
   (uint32_t t74)
   #f
   #f
   #t)
  (bitwise-op
   ...
   'and
   (select
    ...
    (broadcast ... (sca-lt (uint32_t (bv #x00000000 32)) (uint32_t t74)))
    (broadcast ... (int32_t (bv #x00000001 32)))
    (broadcast ... (int32_t (bv #x00000000 32))))
   (vs-shift-right
    ...
    (cast
     ...
     (vs-shift-right
      ...
      (vs-mpy-add
       ...
       (vs-mpy-add
        ...
        (vs-mpy-add
         ...
         (combine
          #<load-data>
          (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))))
         (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
         #f
         #f
         #f
         'int16)
        (list
         (sca-mul
          (sca-sub (int16_t t147) (int16_t t148))
          (int16_t (bv #x0040 16))))
        #f
        #f
        #f
        'int32)
       (list (int32_t output_multiplier))
       #f
       #f
       #f
       'int64)
      (int64_t (bv #x000000000000001f 64))
      #t
      x?$2001
      #t)
     'int32
     #f)
    (sca-sub (uint32_t t74) (uint32_t (bv #x00000001 32)))
    #f
    #f
    #t)))
 (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
 #f
 #f
 #f
 'int32)
Ran bounds analysis for 37 ms
Ran bounds analysis for 38 ms
"Extended success?"
#t
(vs-mpy-add
 ...
 (combine
  (vs-shift-right
   ...
   (cast
    ...
    (vs-shift-right
     ...
     (vs-mpy-add
      ...
      (vs-mpy-add
       ...
       (vs-mpy-add
        ...
        (combine
         #<load-data>
         (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))))
        (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
        #f
        #f
        #f
        'int16)
       (list
        (sca-mul
         (sca-sub (int16_t t147) (int16_t t148))
         (int16_t (bv #x0040 16))))
       #f
       #f
       #f
       'int32)
      (list (int32_t output_multiplier))
      #f
      #f
      #f
      'int64)
     (int64_t (bv #x000000000000001f 64))
     #t
     x?$2001
     #t)
    'int32
    #f)
   (uint32_t t74)
   #f
   #f
   #t)
  (bitwise-op
   ...
   'and
   (select
    ...
    (broadcast ... (sca-lt (uint32_t (bv #x00000000 32)) (uint32_t t74)))
    (broadcast ... (int32_t (bv #x00000001 32)))
    (broadcast ... (int32_t (bv #x00000000 32))))
   (vs-shift-right
    ...
    (cast
     ...
     (vs-shift-right
      ...
      (vs-mpy-add
       ...
       (vs-mpy-add
        ...
        (vs-mpy-add
         ...
         (combine
          #<load-data>
          (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))))
         (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
         #f
         #f
         #f
         'int16)
        (list
         (sca-mul
          (sca-sub (int16_t t147) (int16_t t148))
          (int16_t (bv #x0040 16))))
        #f
        #f
        #f
        'int32)
       (list (int32_t output_multiplier))
       #f
       #f
       #f
       'int64)
      (int64_t (bv #x000000000000001f 64))
      #t
      x?$2001
      #t)
     'int32
     #f)
    (sca-sub (uint32_t t74) (uint32_t (bv #x00000001 32)))
    #f
    #f
    #t)))
 (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
 #f
 #f
 #f
 'int32)
"Building Expr:"
(sca-broadcast (int32_t (bv #x00007fff 32)) 16)
"Fold templates"
'()
here()

"Replace templates"
'()
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (sca-broadcast (int32_t (bv #x00007fff 32)) 16)
template:
  (broadcast ... (int32_t (bv #x00007fff 32)))
axioms:
  '()
optimized-halide-expr:
  (sca-broadcast (int32_t (bv #x00007fff 32)) 16)
optimized-template:
  (broadcast ... (int32_t (bv #x00007fff 32)))
optimized Halide 0:
  (int32_t (bv #x00007fff 32))
optimized x86 0:
  (int32_t (bv #x00007fff 32))
Ran synthesizer for 22 ms
(model)
(sca-broadcast (int32_t (bv #x00007fff 32)) 16)
(broadcast ... (int32_t (bv #x00007fff 32)))
Ran bounds analysis for 29 ms
Ran bounds analysis for 18 ms
"Extended success?"
#t
(broadcast ... (int32_t (bv #x00007fff 32)))
"Building Expr:"
(vec-min
 (vec-add
  (vec-shr
   (vec-cast
    (vec-max
     (vec-min
      (vec-add
       (vec-bwand
        (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
        (vec-div
         (vec-mul
          (vec-cast
           (vec-mul
            (vec-cast
             (vec-add
              (vec-mul
               (vec-cast
                (load
                 (buffer input1 'uint8)
                 (ramp
                  (sca-add
                   (sca-mul output.s0.x.x 16)
                   (sca-add
                    (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
                    (var-lookup 't72)))
                  1
                  16)
                 (aligned 1 0))
                'int16
                16)
               (sca-broadcast (int16_t (bv #x0040 16)) 16))
              (sca-broadcast
               (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))
               16))
             'int32
             16)
            (vec-cast
             (sca-broadcast
              (sca-mul
               (sca-sub (int16_t t147) (int16_t t148))
               (int16_t (bv #x0040 16)))
              16)
             'int32
             16))
           'int64
           16)
          (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
         (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
       (vec-div
        (vec-mul
         (vec-cast
          (vec-mul
           (vec-cast
            (vec-add
             (vec-mul
              (vec-cast
               (load
                (buffer input1 'uint8)
                (ramp
                 (sca-add
                  (sca-mul output.s0.x.x 16)
                  (sca-add
                   (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
                   (var-lookup 't72)))
                 1
                 16)
                (aligned 1 0))
               'int16
               16)
              (sca-broadcast (int16_t (bv #x0040 16)) 16))
             (sca-broadcast
              (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))
              16))
            'int32
            16)
           (vec-cast
            (sca-broadcast
             (sca-mul
              (sca-sub (int16_t t147) (int16_t t148))
              (int16_t (bv #x0040 16)))
             16)
            'int32
            16))
          'int64
          16)
         (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
        (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
      (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
     (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
    'int32
    16)
   (sca-broadcast (uint32_t t74) 16))
  (vec-bwand
   (vec-if
    (sca-broadcast (sca-lt (uint32_t (bv #x00000000 32)) (uint32_t t74)) 16)
    (sca-broadcast (int32_t (bv #x00000001 32)) 16)
    (sca-broadcast (int32_t (bv #x00000000 32)) 16))
   (vec-shr
    (vec-cast
     (vec-max
      (vec-min
       (vec-add
        (vec-bwand
         (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
         (vec-div
          (vec-mul
           (vec-cast
            (vec-mul
             (vec-cast
              (vec-add
               (vec-mul
                (vec-cast
                 (load
                  (buffer input1 'uint8)
                  (ramp
                   (sca-add
                    (sca-mul output.s0.x.x 16)
                    (sca-add
                     (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
                     (var-lookup 't72)))
                   1
                   16)
                  (aligned 1 0))
                 'int16
                 16)
                (sca-broadcast (int16_t (bv #x0040 16)) 16))
               (sca-broadcast
                (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))
                16))
              'int32
              16)
             (vec-cast
              (sca-broadcast
               (sca-mul
                (sca-sub (int16_t t147) (int16_t t148))
                (int16_t (bv #x0040 16)))
               16)
              'int32
              16))
            'int64
            16)
           (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
          (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
        (vec-div
         (vec-mul
          (vec-cast
           (vec-mul
            (vec-cast
             (vec-add
              (vec-mul
               (vec-cast
                (load
                 (buffer input1 'uint8)
                 (ramp
                  (sca-add
                   (sca-mul output.s0.x.x 16)
                   (sca-add
                    (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
                    (var-lookup 't72)))
                  1
                  16)
                 (aligned 1 0))
                'int16
                16)
               (sca-broadcast (int16_t (bv #x0040 16)) 16))
              (sca-broadcast
               (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))
               16))
             'int32
             16)
            (vec-cast
             (sca-broadcast
              (sca-mul
               (sca-sub (int16_t t147) (int16_t t148))
               (int16_t (bv #x0040 16)))
              16)
             'int32
             16))
           'int64
           16)
          (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
         (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
       (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
      (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
     'int32
     16)
    (sca-broadcast
     (sca-sub (uint32_t t74) (uint32_t (bv #x00000001 32)))
     16))))
 (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
"Fold templates"
(list
 (vs-shift-right
  ...
  (cast
   ...
   (vs-shift-right
    ...
    (vs-mpy-add
     ...
     (vs-mpy-add
      ...
      (vs-mpy-add
       ...
       (combine
        #<load-data>
        (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))))
       (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
       #f
       #f
       #f
       'int16)
      (list
       (sca-mul
        (sca-sub (int16_t t147) (int16_t t148))
        (int16_t (bv #x0040 16))))
      #f
      #f
      #f
      'int32)
     (list (int32_t output_multiplier))
     #f
     #f
     #f
     'int64)
    (int64_t (bv #x000000000000001f 64))
    #t
    x?$2001
    #t)
   'int32
   #f)
  (union [(&& (! xi?$2597) (&& xi?$2599 (! xi?$2598))) #(struct:uint32_t t74)] [(&& (! xi?$2597) (&& (! xi?$2598) (! xi?$2599))) #(struct:sca-sub
                                                                                                                                   #(struct:uint32_t
                                                                                                                                     t74)
                                                                                                                                   #(struct:uint32_t
                                                                                                                                     (bv #x00000001 32)))] [(|| xi?$2597 (&& xi?$2598 (! xi?$2597))) #(struct:int64_t
                                                                                                                                                                                                       (ite* (⊢ xi?$2597 (bv #x000000000000001e 64)) (⊢ (&& xi?$2598 (! xi?$2597)) (bv #x000000000000001f 64))))])
  #f
  #f
  #t)
 (vs-shift-right
  ...
  (cast
   ...
   (vs-shift-right
    ...
    (vs-mpy-add
     ...
     (vs-mpy-add
      ...
      (vs-mpy-add
       ...
       (combine
        #<load-data>
        (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))))
       (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
       #f
       #f
       #f
       'int16)
      (list
       (sca-mul
        (sca-sub (int16_t t147) (int16_t t148))
        (int16_t (bv #x0040 16))))
      #f
      #f
      #f
      'int32)
     (list (int32_t output_multiplier))
     #f
     #f
     #f
     'int64)
    (int64_t (bv #x000000000000001f 64))
    #t
    x?$2001
    #t)
   'int32
   #f)
  (uint32_t t74)
  x?$2600
  x?$2601
  x?$2602))
here(#(struct:vs-shift-right ... #(struct:cast ... #(struct:vs-shift-right ... #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t146) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f #f #f int16) (#(struct:sca-mul #(struct:sca-sub #(struct:int16_t t147) #(struct:int16_t t148)) #(struct:int16_t (bv #x0040 16)))) #f #f #f int32) (#(struct:int32_t output_multiplier)) #f #f #f int64) #(struct:int64_t (bv #x000000000000001f 64)) #t x?$2001 #t) int32 #f) (union #:size 3 #:hash 296355199016045) #f #f #t) #(struct:vs-shift-right ... #(struct:cast ... #(struct:vs-shift-right ... #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t146) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int16_t (bv #x0040 16))) #f #f #f int16) (#(struct:sca-mul #(struct:sca-sub #(struct:int16_t t147) #(struct:int16_t t148)) #(struct:int16_t (bv #x0040 16)))) #f #f #f int32) (#(struct:int32_t output_multiplier)) #f #f #f int64) #(struct:int64_t (bv #x000000000000001f 64)) #t x?$2001 #t) int32 #f) #(struct:uint32_t t74) x?$2600 x?$2601 x?$2602))

"Replace templates"
'()
run-x86-synthesizer
halide-expr:
  (vec-min
 (vec-add
  (vec-shr
   (vec-cast
    (vec-max
     (vec-min
      (vec-add
       (vec-bwand
        (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
        (vec-div
         (vec-mul
          (vec-cast
           (vec-mul
            (vec-cast
             (vec-add
              (vec-mul
               (vec-cast
                (load
                 (buffer input1 'uint8)
                 (ramp
                  (sca-add
                   (sca-mul output.s0.x.x 16)
                   (sca-add
                    (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
                    (var-lookup 't72)))
                  1
                  16)
                 (aligned 1 0))
                'int16
                16)
               (sca-broadcast (int16_t (bv #x0040 16)) 16))
              (sca-broadcast
               (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))
               16))
             'int32
             16)
            (vec-cast
             (sca-broadcast
              (sca-mul
               (sca-sub (int16_t t147) (int16_t t148))
               (int16_t (bv #x0040 16)))
              16)
             'int32
             16))
           'int64
           16)
          (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
         (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
       (vec-div
        (vec-mul
         (vec-cast
          (vec-mul
           (vec-cast
            (vec-add
             (vec-mul
              (vec-cast
               (load
                (buffer input1 'uint8)
                (ramp
                 (sca-add
                  (sca-mul output.s0.x.x 16)
                  (sca-add
                   (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
                   (var-lookup 't72)))
                 1
                 16)
                (aligned 1 0))
               'int16
               16)
              (sca-broadcast (int16_t (bv #x0040 16)) 16))
             (sca-broadcast
              (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))
              16))
            'int32
            16)
           (vec-cast
            (sca-broadcast
             (sca-mul
              (sca-sub (int16_t t147) (int16_t t148))
              (int16_t (bv #x0040 16)))
             16)
            'int32
            16))
          'int64
          16)
         (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
        (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
      (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
     (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
    'int32
    16)
   (sca-broadcast (uint32_t t74) 16))
  (vec-bwand
   (vec-if
    (sca-broadcast (sca-lt (uint32_t (bv #x00000000 32)) (uint32_t t74)) 16)
    (sca-broadcast (int32_t (bv #x00000001 32)) 16)
    (sca-broadcast (int32_t (bv #x00000000 32)) 16))
   (vec-shr
    (vec-cast
     (vec-max
      (vec-min
       (vec-add
        (vec-bwand
         (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
         (vec-div
          (vec-mul
           (vec-cast
            (vec-mul
             (vec-cast
              (vec-add
               (vec-mul
                (vec-cast
                 (load
                  (buffer input1 'uint8)
                  (ramp
                   (sca-add
                    (sca-mul output.s0.x.x 16)
                    (sca-add
                     (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
                     (var-lookup 't72)))
                   1
                   16)
                  (aligned 1 0))
                 'int16
                 16)
                (sca-broadcast (int16_t (bv #x0040 16)) 16))
               (sca-broadcast
                (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))
                16))
              'int32
              16)
             (vec-cast
              (sca-broadcast
               (sca-mul
                (sca-sub (int16_t t147) (int16_t t148))
                (int16_t (bv #x0040 16)))
               16)
              'int32
              16))
            'int64
            16)
           (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
          (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
        (vec-div
         (vec-mul
          (vec-cast
           (vec-mul
            (vec-cast
             (vec-add
              (vec-mul
               (vec-cast
                (load
                 (buffer input1 'uint8)
                 (ramp
                  (sca-add
                   (sca-mul output.s0.x.x 16)
                   (sca-add
                    (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
                    (var-lookup 't72)))
                  1
                  16)
                 (aligned 1 0))
                'int16
                16)
               (sca-broadcast (int16_t (bv #x0040 16)) 16))
              (sca-broadcast
               (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))
               16))
             'int32
             16)
            (vec-cast
             (sca-broadcast
              (sca-mul
               (sca-sub (int16_t t147) (int16_t t148))
               (int16_t (bv #x0040 16)))
              16)
             'int32
             16))
           'int64
           16)
          (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
         (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
       (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
      (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
     'int32
     16)
    (sca-broadcast
     (sca-sub (uint32_t t74) (uint32_t (bv #x00000001 32)))
     16))))
 (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
template:
  (vs-shift-right
 ...
 (cast
  ...
  (vs-shift-right
   ...
   (vs-mpy-add
    ...
    (vs-mpy-add
     ...
     (vs-mpy-add
      ...
      (combine
       #<load-data>
       (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))))
      (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
      #f
      #f
      #f
      'int16)
     (list
      (sca-mul
       (sca-sub (int16_t t147) (int16_t t148))
       (int16_t (bv #x0040 16))))
     #f
     #f
     #f
     'int32)
    (list (int32_t output_multiplier))
    #f
    #f
    #f
    'int64)
   (int64_t (bv #x000000000000001f 64))
   #t
   x?$2001
   #t)
  'int32
  #f)
 (union [(&& (! xi?$2597) (&& xi?$2599 (! xi?$2598))) #(struct:uint32_t t74)] [(&& (! xi?$2597) (&& (! xi?$2598) (! xi?$2599))) #(struct:sca-sub
                                                                                                                                  #(struct:uint32_t
                                                                                                                                    t74)
                                                                                                                                  #(struct:uint32_t
                                                                                                                                    (bv #x00000001 32)))] [(|| xi?$2597 (&& xi?$2598 (! xi?$2597))) #(struct:int64_t
                                                                                                                                                                                                      (ite* (⊢ xi?$2597 (bv #x000000000000001e 64)) (⊢ (&& xi?$2598 (! xi?$2597)) (bv #x000000000000001f 64))))])
 #f
 #f
 #t)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$2603 idx) (bv #x40000000 32)) (bvsle (bv #xc0000000 32) (app abstr-vals$2603 idx)))))
optimized-halide-expr:
  (vec-min
 (vec-add
  (vec-shr #<abstr-halide-expr> (sca-broadcast (uint32_t t74) 16))
  (vec-bwand
   (vec-if
    (sca-broadcast (sca-lt (uint32_t (bv #x00000000 32)) (uint32_t t74)) 16)
    (sca-broadcast (int32_t (bv #x00000001 32)) 16)
    (sca-broadcast (int32_t (bv #x00000000 32)) 16))
   (vec-shr
    #<abstr-halide-expr>
    (sca-broadcast
     (sca-sub (uint32_t t74) (uint32_t (bv #x00000001 32)))
     16))))
 (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
optimized-template:
  (vs-shift-right
 ...
 #<abstr-expr>
 (union [(&& (! xi?$2597) (&& xi?$2599 (! xi?$2598))) #(struct:uint32_t t74)] [(&& (! xi?$2597) (&& (! xi?$2598) (! xi?$2599))) #(struct:sca-sub
                                                                                                                                  #(struct:uint32_t
                                                                                                                                    t74)
                                                                                                                                  #(struct:uint32_t
                                                                                                                                    (bv #x00000001 32)))] [(|| xi?$2597 (&& xi?$2598 (! xi?$2597))) #(struct:int64_t
                                                                                                                                                                                                      (ite* (⊢ xi?$2597 (bv #x000000000000001e 64)) (⊢ (&& xi?$2598 (! xi?$2597)) (bv #x000000000000001f 64))))])
 #f
 #f
 #t)
optimized Halide 0:
  (int32_t
 (ite (bvsle (bvadd (bvashr (app abstr-vals$2603 0) t74) (bvand (ite (bveq (bv #x00000000 32) t74) (bv #x00000000 32) (bv #x00000001 32)) (bvashr (app abstr-vals$2603 0) (bvadd (bv #xffffffff 32) t74)))) (bv #x00007fff 32)) (bvadd (bvashr (app abstr-vals$2603 0) t74) (bvand (ite (bveq (bv #x00000000 32) t74) (bv #x00000000 32) (bv #x00000001 32)) (bvashr (app abstr-vals$2603 0) (bvadd (bv #xffffffff 32) t74)))) (bv #x00007fff 32)))
optimized x86 0:
  (int32_t
 (bvashr (app abstr-vals$2603 0) (ite* (⊢ (|| xi?$2597 (&& xi?$2598 (! xi?$2597))) (extract 31 0 (ite* (⊢ xi?$2597 (bv #x000000000000001e 64)) (⊢ (&& xi?$2598 (! xi?$2597)) (bv #x000000000000001f 64))))) (⊢ (|| (&& (! xi?$2597) (&& xi?$2599 (! xi?$2598))) (&& (! xi?$2597) (&& (! xi?$2598) (! xi?$2599)))) (ite* (⊢ (&& (! xi?$2597) (&& xi?$2599 (! xi?$2598))) t74) (⊢ (&& (! xi?$2597) (&& (! xi?$2598) (! xi?$2599))) (bvadd (bv #xffffffff 32) t74)))))))
Ran synthesizer for 202 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-min
 (vec-add
  (vec-shr
   (vec-cast
    (vec-max
     (vec-min
      (vec-add
       (vec-bwand
        (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
        (vec-div
         (vec-mul
          (vec-cast
           (vec-mul
            (vec-cast
             (vec-add
              (vec-mul
               (vec-cast
                (load
                 (buffer input1 'uint8)
                 (ramp
                  (sca-add
                   (sca-mul output.s0.x.x 16)
                   (sca-add
                    (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
                    (var-lookup 't72)))
                  1
                  16)
                 (aligned 1 0))
                'int16
                16)
               (sca-broadcast (int16_t (bv #x0040 16)) 16))
              (sca-broadcast
               (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))
               16))
             'int32
             16)
            (vec-cast
             (sca-broadcast
              (sca-mul
               (sca-sub (int16_t t147) (int16_t t148))
               (int16_t (bv #x0040 16)))
              16)
             'int32
             16))
           'int64
           16)
          (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
         (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
       (vec-div
        (vec-mul
         (vec-cast
          (vec-mul
           (vec-cast
            (vec-add
             (vec-mul
              (vec-cast
               (load
                (buffer input1 'uint8)
                (ramp
                 (sca-add
                  (sca-mul output.s0.x.x 16)
                  (sca-add
                   (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
                   (var-lookup 't72)))
                 1
                 16)
                (aligned 1 0))
               'int16
               16)
              (sca-broadcast (int16_t (bv #x0040 16)) 16))
             (sca-broadcast
              (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))
              16))
            'int32
            16)
           (vec-cast
            (sca-broadcast
             (sca-mul
              (sca-sub (int16_t t147) (int16_t t148))
              (int16_t (bv #x0040 16)))
             16)
            'int32
            16))
          'int64
          16)
         (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
        (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
      (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
     (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
    'int32
    16)
   (sca-broadcast (uint32_t t74) 16))
  (vec-bwand
   (vec-if
    (sca-broadcast (sca-lt (uint32_t (bv #x00000000 32)) (uint32_t t74)) 16)
    (sca-broadcast (int32_t (bv #x00000001 32)) 16)
    (sca-broadcast (int32_t (bv #x00000000 32)) 16))
   (vec-shr
    (vec-cast
     (vec-max
      (vec-min
       (vec-add
        (vec-bwand
         (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
         (vec-div
          (vec-mul
           (vec-cast
            (vec-mul
             (vec-cast
              (vec-add
               (vec-mul
                (vec-cast
                 (load
                  (buffer input1 'uint8)
                  (ramp
                   (sca-add
                    (sca-mul output.s0.x.x 16)
                    (sca-add
                     (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
                     (var-lookup 't72)))
                   1
                   16)
                  (aligned 1 0))
                 'int16
                 16)
                (sca-broadcast (int16_t (bv #x0040 16)) 16))
               (sca-broadcast
                (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))
                16))
              'int32
              16)
             (vec-cast
              (sca-broadcast
               (sca-mul
                (sca-sub (int16_t t147) (int16_t t148))
                (int16_t (bv #x0040 16)))
               16)
              'int32
              16))
            'int64
            16)
           (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
          (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
        (vec-div
         (vec-mul
          (vec-cast
           (vec-mul
            (vec-cast
             (vec-add
              (vec-mul
               (vec-cast
                (load
                 (buffer input1 'uint8)
                 (ramp
                  (sca-add
                   (sca-mul output.s0.x.x 16)
                   (sca-add
                    (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
                    (var-lookup 't72)))
                  1
                  16)
                 (aligned 1 0))
                'int16
                16)
               (sca-broadcast (int16_t (bv #x0040 16)) 16))
              (sca-broadcast
               (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))
               16))
             'int32
             16)
            (vec-cast
             (sca-broadcast
              (sca-mul
               (sca-sub (int16_t t147) (int16_t t148))
               (int16_t (bv #x0040 16)))
              16)
             'int32
             16))
           'int64
           16)
          (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
         (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
       (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
      (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
     'int32
     16)
    (sca-broadcast
     (sca-sub (uint32_t t74) (uint32_t (bv #x00000001 32)))
     16))))
 (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
template:
  (vs-shift-right
 ...
 (cast
  ...
  (vs-shift-right
   ...
   (vs-mpy-add
    ...
    (vs-mpy-add
     ...
     (vs-mpy-add
      ...
      (combine
       #<load-data>
       (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))))
      (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
      #f
      #f
      #f
      'int16)
     (list
      (sca-mul
       (sca-sub (int16_t t147) (int16_t t148))
       (int16_t (bv #x0040 16))))
     #f
     #f
     #f
     'int32)
    (list (int32_t output_multiplier))
    #f
    #f
    #f
    'int64)
   (int64_t (bv #x000000000000001f 64))
   #t
   x?$2001
   #t)
  'int32
  #f)
 (uint32_t t74)
 x?$2600
 x?$2601
 x?$2602)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$2604 idx) (bv #x40000000 32)) (bvsle (bv #xc0000000 32) (app abstr-vals$2604 idx)))))
optimized-halide-expr:
  (vec-min
 (vec-add
  (vec-shr #<abstr-halide-expr> (sca-broadcast (uint32_t t74) 16))
  (vec-bwand
   (vec-if
    (sca-broadcast (sca-lt (uint32_t (bv #x00000000 32)) (uint32_t t74)) 16)
    (sca-broadcast (int32_t (bv #x00000001 32)) 16)
    (sca-broadcast (int32_t (bv #x00000000 32)) 16))
   (vec-shr
    #<abstr-halide-expr>
    (sca-broadcast
     (sca-sub (uint32_t t74) (uint32_t (bv #x00000001 32)))
     16))))
 (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
optimized-template:
  (vs-shift-right ... #<abstr-expr> (uint32_t t74) x?$2600 x?$2601 x?$2602)
optimized Halide 0:
  (int32_t
 (ite (bvsle (bvadd (bvashr (app abstr-vals$2604 0) t74) (bvand (ite (bveq (bv #x00000000 32) t74) (bv #x00000000 32) (bv #x00000001 32)) (bvashr (app abstr-vals$2604 0) (bvadd (bv #xffffffff 32) t74)))) (bv #x00007fff 32)) (bvadd (bvashr (app abstr-vals$2604 0) t74) (bvand (ite (bveq (bv #x00000000 32) t74) (bv #x00000000 32) (bv #x00000001 32)) (bvashr (app abstr-vals$2604 0) (bvadd (bv #xffffffff 32) t74)))) (bv #x00007fff 32)))
optimized x86 0:
  (int32_t
 (ite x?$2600 (bvadd (ite x?$2602 (bvashr (app abstr-vals$2604 0) t74) (bvlshr (app abstr-vals$2604 0) t74)) (bvand (ite (bvslt (bv #x00000000 32) t74) (bv #x00000001 32) (bv #x00000000 32)) (ite x?$2602 (bvashr (app abstr-vals$2604 0) (bvadd (bv #xffffffff 32) t74)) (bvlshr (app abstr-vals$2604 0) (bvadd (bv #xffffffff 32) t74))))) (ite x?$2602 (bvashr (app abstr-vals$2604 0) t74) (bvlshr (app abstr-vals$2604 0) t74))))
Ran synthesizer for 281 ms
(unsat)
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (vec-min
 (vec-add
  (vec-shr
   (vec-cast
    (vec-max
     (vec-min
      (vec-add
       (vec-bwand
        (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
        (vec-div
         (vec-mul
          (vec-cast
           (vec-mul
            (vec-cast
             (vec-add
              (vec-mul
               (vec-cast
                (load
                 (buffer input1 'uint8)
                 (ramp
                  (sca-add
                   (sca-mul output.s0.x.x 16)
                   (sca-add
                    (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
                    (var-lookup 't72)))
                  1
                  16)
                 (aligned 1 0))
                'int16
                16)
               (sca-broadcast (int16_t (bv #x0040 16)) 16))
              (sca-broadcast
               (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))
               16))
             'int32
             16)
            (vec-cast
             (sca-broadcast
              (sca-mul
               (sca-sub (int16_t t147) (int16_t t148))
               (int16_t (bv #x0040 16)))
              16)
             'int32
             16))
           'int64
           16)
          (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
         (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
       (vec-div
        (vec-mul
         (vec-cast
          (vec-mul
           (vec-cast
            (vec-add
             (vec-mul
              (vec-cast
               (load
                (buffer input1 'uint8)
                (ramp
                 (sca-add
                  (sca-mul output.s0.x.x 16)
                  (sca-add
                   (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
                   (var-lookup 't72)))
                 1
                 16)
                (aligned 1 0))
               'int16
               16)
              (sca-broadcast (int16_t (bv #x0040 16)) 16))
             (sca-broadcast
              (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))
              16))
            'int32
            16)
           (vec-cast
            (sca-broadcast
             (sca-mul
              (sca-sub (int16_t t147) (int16_t t148))
              (int16_t (bv #x0040 16)))
             16)
            'int32
            16))
          'int64
          16)
         (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
        (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
      (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
     (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
    'int32
    16)
   (sca-broadcast (uint32_t t74) 16))
  (vec-bwand
   (vec-if
    (sca-broadcast (sca-lt (uint32_t (bv #x00000000 32)) (uint32_t t74)) 16)
    (sca-broadcast (int32_t (bv #x00000001 32)) 16)
    (sca-broadcast (int32_t (bv #x00000000 32)) 16))
   (vec-shr
    (vec-cast
     (vec-max
      (vec-min
       (vec-add
        (vec-bwand
         (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
         (vec-div
          (vec-mul
           (vec-cast
            (vec-mul
             (vec-cast
              (vec-add
               (vec-mul
                (vec-cast
                 (load
                  (buffer input1 'uint8)
                  (ramp
                   (sca-add
                    (sca-mul output.s0.x.x 16)
                    (sca-add
                     (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
                     (var-lookup 't72)))
                   1
                   16)
                  (aligned 1 0))
                 'int16
                 16)
                (sca-broadcast (int16_t (bv #x0040 16)) 16))
               (sca-broadcast
                (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))
                16))
              'int32
              16)
             (vec-cast
              (sca-broadcast
               (sca-mul
                (sca-sub (int16_t t147) (int16_t t148))
                (int16_t (bv #x0040 16)))
               16)
              'int32
              16))
            'int64
            16)
           (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
          (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
        (vec-div
         (vec-mul
          (vec-cast
           (vec-mul
            (vec-cast
             (vec-add
              (vec-mul
               (vec-cast
                (load
                 (buffer input1 'uint8)
                 (ramp
                  (sca-add
                   (sca-mul output.s0.x.x 16)
                   (sca-add
                    (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
                    (var-lookup 't72)))
                  1
                  16)
                 (aligned 1 0))
                'int16
                16)
               (sca-broadcast (int16_t (bv #x0040 16)) 16))
              (sca-broadcast
               (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))
               16))
             'int32
             16)
            (vec-cast
             (sca-broadcast
              (sca-mul
               (sca-sub (int16_t t147) (int16_t t148))
               (int16_t (bv #x0040 16)))
              16)
             'int32
             16))
           'int64
           16)
          (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
         (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
       (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
      (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
     'int32
     16)
    (sca-broadcast
     (sca-sub (uint32_t t74) (uint32_t (bv #x00000001 32)))
     16))))
 (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
template:
  (minimum
 ...
 (vs-mpy-add
  ...
  (combine
   (vs-shift-right
    ...
    (cast
     ...
     (vs-shift-right
      ...
      (vs-mpy-add
       ...
       (vs-mpy-add
        ...
        (vs-mpy-add
         ...
         (combine
          #<load-data>
          (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))))
         (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
         #f
         #f
         #f
         'int16)
        (list
         (sca-mul
          (sca-sub (int16_t t147) (int16_t t148))
          (int16_t (bv #x0040 16))))
        #f
        #f
        #f
        'int32)
       (list (int32_t output_multiplier))
       #f
       #f
       #f
       'int64)
      (int64_t (bv #x000000000000001f 64))
      #t
      x?$2001
      #t)
     'int32
     #f)
    (uint32_t t74)
    #f
    #f
    #t)
   (bitwise-op
    ...
    'and
    (select
     ...
     (broadcast ... (sca-lt (uint32_t (bv #x00000000 32)) (uint32_t t74)))
     (broadcast ... (int32_t (bv #x00000001 32)))
     (broadcast ... (int32_t (bv #x00000000 32))))
    (vs-shift-right
     ...
     (cast
      ...
      (vs-shift-right
       ...
       (vs-mpy-add
        ...
        (vs-mpy-add
         ...
         (vs-mpy-add
          ...
          (combine
           #<load-data>
           (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))))
          (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
          #f
          #f
          #f
          'int16)
         (list
          (sca-mul
           (sca-sub (int16_t t147) (int16_t t148))
           (int16_t (bv #x0040 16))))
         #f
         #f
         #f
         'int32)
        (list (int32_t output_multiplier))
        #f
        #f
        #f
        'int64)
       (int64_t (bv #x000000000000001f 64))
       #t
       x?$2001
       #t)
      'int32
      #f)
     (sca-sub (uint32_t t74) (uint32_t (bv #x00000001 32)))
     #f
     #f
     #t)))
  (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
  #f
  #f
  #f
  'int32)
 (broadcast ... (int32_t (bv #x00007fff 32))))
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$2605 idx) (bv #x40000001 32)) (bvsle (bv #xc0000000 32) (app abstr-vals$2605 idx))))
 (forall (idx) (&& (bvsle (app abstr-vals$2606 idx) (bv #x00007fff 32)) (bvsle (bv #x00007fff 32) (app abstr-vals$2606 idx)))))
optimized-halide-expr:
  (vec-min #<abstr-halide-expr> #<abstr-halide-expr>)
optimized-template:
  (minimum ... #<abstr-expr> #<abstr-expr>)
optimized Halide 0:
  (int32_t
 (ite (bvsle (app abstr-vals$2605 0) (app abstr-vals$2606 0)) (app abstr-vals$2605 0) (app abstr-vals$2606 0)))
optimized x86 0:
  (int32_t
 (ite (bvsle (app abstr-vals$2605 0) (app abstr-vals$2606 0)) (app abstr-vals$2605 0) (app abstr-vals$2606 0)))
Ran synthesizer for 59 ms
(model)
(vec-min #<abstr-halide-expr> #<abstr-halide-expr>)
(minimum
 ...
 (vs-mpy-add
  ...
  (combine
   (vs-shift-right
    ...
    (cast
     ...
     (vs-shift-right
      ...
      (vs-mpy-add
       ...
       (vs-mpy-add
        ...
        (vs-mpy-add
         ...
         (combine
          #<load-data>
          (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))))
         (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
         #f
         #f
         #f
         'int16)
        (list
         (sca-mul
          (sca-sub (int16_t t147) (int16_t t148))
          (int16_t (bv #x0040 16))))
        #f
        #f
        #f
        'int32)
       (list (int32_t output_multiplier))
       #f
       #f
       #f
       'int64)
      (int64_t (bv #x000000000000001f 64))
      #t
      x?$2001
      #t)
     'int32
     #f)
    (uint32_t t74)
    #f
    #f
    #t)
   (bitwise-op
    ...
    'and
    (select
     ...
     (broadcast ... (sca-lt (uint32_t (bv #x00000000 32)) (uint32_t t74)))
     (broadcast ... (int32_t (bv #x00000001 32)))
     (broadcast ... (int32_t (bv #x00000000 32))))
    (vs-shift-right
     ...
     (cast
      ...
      (vs-shift-right
       ...
       (vs-mpy-add
        ...
        (vs-mpy-add
         ...
         (vs-mpy-add
          ...
          (combine
           #<load-data>
           (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))))
          (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
          #f
          #f
          #f
          'int16)
         (list
          (sca-mul
           (sca-sub (int16_t t147) (int16_t t148))
           (int16_t (bv #x0040 16))))
         #f
         #f
         #f
         'int32)
        (list (int32_t output_multiplier))
        #f
        #f
        #f
        'int64)
       (int64_t (bv #x000000000000001f 64))
       #t
       x?$2001
       #t)
      'int32
      #f)
     (sca-sub (uint32_t t74) (uint32_t (bv #x00000001 32)))
     #f
     #f
     #t)))
  (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
  #f
  #f
  #f
  'int32)
 (broadcast ... (int32_t (bv #x00007fff 32))))
Ran bounds analysis for 39 ms
Ran bounds analysis for 35 ms
"Extended success?"
#t
(minimum
 ...
 (vs-mpy-add
  ...
  (combine
   (vs-shift-right
    ...
    (cast
     ...
     (vs-shift-right
      ...
      (vs-mpy-add
       ...
       (vs-mpy-add
        ...
        (vs-mpy-add
         ...
         (combine
          #<load-data>
          (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))))
         (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
         #f
         #f
         #f
         'int16)
        (list
         (sca-mul
          (sca-sub (int16_t t147) (int16_t t148))
          (int16_t (bv #x0040 16))))
        #f
        #f
        #f
        'int32)
       (list (int32_t output_multiplier))
       #f
       #f
       #f
       'int64)
      (int64_t (bv #x000000000000001f 64))
      #t
      x?$2001
      #t)
     'int32
     #f)
    (uint32_t t74)
    #f
    #f
    #t)
   (bitwise-op
    ...
    'and
    (select
     ...
     (broadcast ... (sca-lt (uint32_t (bv #x00000000 32)) (uint32_t t74)))
     (broadcast ... (int32_t (bv #x00000001 32)))
     (broadcast ... (int32_t (bv #x00000000 32))))
    (vs-shift-right
     ...
     (cast
      ...
      (vs-shift-right
       ...
       (vs-mpy-add
        ...
        (vs-mpy-add
         ...
         (vs-mpy-add
          ...
          (combine
           #<load-data>
           (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))))
          (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
          #f
          #f
          #f
          'int16)
         (list
          (sca-mul
           (sca-sub (int16_t t147) (int16_t t148))
           (int16_t (bv #x0040 16))))
         #f
         #f
         #f
         'int32)
        (list (int32_t output_multiplier))
        #f
        #f
        #f
        'int64)
       (int64_t (bv #x000000000000001f 64))
       #t
       x?$2001
       #t)
      'int32
      #f)
     (sca-sub (uint32_t t74) (uint32_t (bv #x00000001 32)))
     #f
     #f
     #t)))
  (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
  #f
  #f
  #f
  'int32)
 (broadcast ... (int32_t (bv #x00007fff 32))))
"Building Expr:"
(sca-broadcast (int32_t (bv #xffff8000 32)) 16)
"Fold templates"
'()
here()

"Replace templates"
'()
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (sca-broadcast (int32_t (bv #xffff8000 32)) 16)
template:
  (broadcast ... (int32_t (bv #xffff8000 32)))
axioms:
  '()
optimized-halide-expr:
  (sca-broadcast (int32_t (bv #xffff8000 32)) 16)
optimized-template:
  (broadcast ... (int32_t (bv #xffff8000 32)))
optimized Halide 0:
  (int32_t (bv #xffff8000 32))
optimized x86 0:
  (int32_t (bv #xffff8000 32))
Ran synthesizer for 22 ms
(model)
(sca-broadcast (int32_t (bv #xffff8000 32)) 16)
(broadcast ... (int32_t (bv #xffff8000 32)))
Ran bounds analysis for 31 ms
Ran bounds analysis for 19 ms
"Extended success?"
#t
(broadcast ... (int32_t (bv #xffff8000 32)))
"Building Expr:"
(vec-max
 (vec-min
  (vec-add
   (vec-shr
    (vec-cast
     (vec-max
      (vec-min
       (vec-add
        (vec-bwand
         (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
         (vec-div
          (vec-mul
           (vec-cast
            (vec-mul
             (vec-cast
              (vec-add
               (vec-mul
                (vec-cast
                 (load
                  (buffer input1 'uint8)
                  (ramp
                   (sca-add
                    (sca-mul output.s0.x.x 16)
                    (sca-add
                     (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
                     (var-lookup 't72)))
                   1
                   16)
                  (aligned 1 0))
                 'int16
                 16)
                (sca-broadcast (int16_t (bv #x0040 16)) 16))
               (sca-broadcast
                (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))
                16))
              'int32
              16)
             (vec-cast
              (sca-broadcast
               (sca-mul
                (sca-sub (int16_t t147) (int16_t t148))
                (int16_t (bv #x0040 16)))
               16)
              'int32
              16))
            'int64
            16)
           (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
          (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
        (vec-div
         (vec-mul
          (vec-cast
           (vec-mul
            (vec-cast
             (vec-add
              (vec-mul
               (vec-cast
                (load
                 (buffer input1 'uint8)
                 (ramp
                  (sca-add
                   (sca-mul output.s0.x.x 16)
                   (sca-add
                    (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
                    (var-lookup 't72)))
                  1
                  16)
                 (aligned 1 0))
                'int16
                16)
               (sca-broadcast (int16_t (bv #x0040 16)) 16))
              (sca-broadcast
               (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))
               16))
             'int32
             16)
            (vec-cast
             (sca-broadcast
              (sca-mul
               (sca-sub (int16_t t147) (int16_t t148))
               (int16_t (bv #x0040 16)))
              16)
             'int32
             16))
           'int64
           16)
          (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
         (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
       (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
      (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
     'int32
     16)
    (sca-broadcast (uint32_t t74) 16))
   (vec-bwand
    (vec-if
     (sca-broadcast (sca-lt (uint32_t (bv #x00000000 32)) (uint32_t t74)) 16)
     (sca-broadcast (int32_t (bv #x00000001 32)) 16)
     (sca-broadcast (int32_t (bv #x00000000 32)) 16))
    (vec-shr
     (vec-cast
      (vec-max
       (vec-min
        (vec-add
         (vec-bwand
          (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
          (vec-div
           (vec-mul
            (vec-cast
             (vec-mul
              (vec-cast
               (vec-add
                (vec-mul
                 (vec-cast
                  (load
                   (buffer input1 'uint8)
                   (ramp
                    (sca-add
                     (sca-mul output.s0.x.x 16)
                     (sca-add
                      (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
                      (var-lookup 't72)))
                    1
                    16)
                   (aligned 1 0))
                  'int16
                  16)
                 (sca-broadcast (int16_t (bv #x0040 16)) 16))
                (sca-broadcast
                 (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))
                 16))
               'int32
               16)
              (vec-cast
               (sca-broadcast
                (sca-mul
                 (sca-sub (int16_t t147) (int16_t t148))
                 (int16_t (bv #x0040 16)))
                16)
               'int32
               16))
             'int64
             16)
            (vec-cast
             (sca-broadcast (int32_t output_multiplier) 16)
             'int64
             16))
           (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
         (vec-div
          (vec-mul
           (vec-cast
            (vec-mul
             (vec-cast
              (vec-add
               (vec-mul
                (vec-cast
                 (load
                  (buffer input1 'uint8)
                  (ramp
                   (sca-add
                    (sca-mul output.s0.x.x 16)
                    (sca-add
                     (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't84))
                     (var-lookup 't72)))
                   1
                   16)
                  (aligned 1 0))
                 'int16
                 16)
                (sca-broadcast (int16_t (bv #x0040 16)) 16))
               (sca-broadcast
                (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))
                16))
              'int32
              16)
             (vec-cast
              (sca-broadcast
               (sca-mul
                (sca-sub (int16_t t147) (int16_t t148))
                (int16_t (bv #x0040 16)))
               16)
              'int32
              16))
            'int64
            16)
           (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
          (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
        (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
       (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
      'int32
      16)
     (sca-broadcast
      (sca-sub (uint32_t t74) (uint32_t (bv #x00000001 32)))
      16))))
  (sca-broadcast (int32_t (bv #x00007fff 32)) 16))
 (sca-broadcast (int32_t (bv #xffff8000 32)) 16))
"Fold templates"
'()
here()

"Replace templates"
(list
 (cast
  ...
  (vs-mpy-add
   ...
   (combine
    (vs-shift-right
     ...
     (cast
      ...
      (vs-shift-right
       ...
       (vs-mpy-add
        ...
        (vs-mpy-add
         ...
         (vs-mpy-add
          ...
          (combine
           #<load-data>
           (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))))
          (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
          #f
          #f
          #f
          'int16)
         (list
          (sca-mul
           (sca-sub (int16_t t147) (int16_t t148))
           (int16_t (bv #x0040 16))))
         #f
         #f
         #f
         'int32)
        (list (int32_t output_multiplier))
        #f
        #f
        #f
        'int64)
       (int64_t (bv #x000000000000001f 64))
       #t
       x?$2001
       #t)
      'int32
      #f)
     (uint32_t t74)
     #f
     #f
     #t)
    (bitwise-op
     ...
     'and
     (select
      ...
      (broadcast ... (sca-lt (uint32_t (bv #x00000000 32)) (uint32_t t74)))
      (broadcast ... (int32_t (bv #x00000001 32)))
      (broadcast ... (int32_t (bv #x00000000 32))))
     (vs-shift-right
      ...
      (cast
       ...
       (vs-shift-right
        ...
        (vs-mpy-add
         ...
         (vs-mpy-add
          ...
          (vs-mpy-add
           ...
           (combine
            #<load-data>
            (broadcast ... (sca-mul (int16_t t146) (int16_t (bv #xffc0 16)))))
           (list (int8_t (bv #x01 8)) (int16_t (bv #x0040 16)))
           #f
           #f
           #f
           'int16)
          (list
           (sca-mul
            (sca-sub (int16_t t147) (int16_t t148))
            (int16_t (bv #x0040 16))))
          #f
          #f
          #f
          'int32)
         (list (int32_t output_multiplier))
         #f
         #f
         #f
         'int64)
        (int64_t (bv #x000000000000001f 64))
        #t
        x?$2001
        #t)
       'int32
       #f)
      (sca-sub (uint32_t t74) (uint32_t (bv #x00000001 32)))
      #f
      #f
      #t)))
   (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
   #f
   #f
   #f
   'int32)
  'int32
  #t)
 (cast ... (broadcast ... (int32_t (bv #x00007fff 32))) 'int32 #t))
