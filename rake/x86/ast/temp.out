Lifting input expression to x86 IR...
=====================================

"Building Expr:"
(load
 (buffer input1 'uint8)
 (ramp
  (sca-add
   (sca-mul output.s0.x.x 16)
   (sca-add
    (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
    (var-lookup 't55)))
  1
  16)
 (aligned 1 0))
"Fold templates"
'()
here()

"Replace templates"
'()
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (load
 (buffer input1 'uint8)
 (ramp
  (sca-add
   (sca-mul output.s0.x.x 16)
   (sca-add
    (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
    (var-lookup 't55)))
  1
  16)
 (aligned 1 0))
template:
  #<load-data>
axioms:
  '()
optimized-halide-expr:
  (load
 (buffer input1 'uint8)
 (ramp
  (sca-add
   (sca-mul output.s0.x.x 16)
   (sca-add
    (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
    (var-lookup 't55)))
  1
  16)
 (aligned 1 0))
optimized-template:
  #<load-data>
optimized Halide 0:
  (uint8_t
 (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))))
optimized x86 0:
  (uint8_t
 (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))))
Ran synthesizer for 25 ms
(model
 [idx$0 0])
(load
 (buffer input1 'uint8)
 (ramp
  (sca-add
   (sca-mul output.s0.x.x 16)
   (sca-add
    (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
    (var-lookup 't55)))
  1
  16)
 (aligned 1 0))
#<load-data>
Ran bounds analysis for 24 ms
Ran bounds analysis for 14 ms
"Extended success?"
#t
#<load-data>
"Building Expr:"
(vec-cast
 (load
  (buffer input1 'uint8)
  (ramp
   (sca-add
    (sca-mul output.s0.x.x 16)
    (sca-add
     (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
     (var-lookup 't55)))
   1
   16)
  (aligned 1 0))
 'int16
 16)
"Fold templates"
'(#<load-data>)
here(#<load-data>)

"Replace templates"
'()
run-x86-synthesizer
halide-expr:
  (vec-cast
 (load
  (buffer input1 'uint8)
  (ramp
   (sca-add
    (sca-mul output.s0.x.x 16)
    (sca-add
     (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
     (var-lookup 't55)))
   1
   16)
  (aligned 1 0))
 'int16
 16)
template:
  #<load-data>
axioms:
  '()
optimized-halide-expr:
  (vec-cast
 (load
  (buffer input1 'uint8)
  (ramp
   (sca-add
    (sca-mul output.s0.x.x 16)
    (sca-add
     (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
     (var-lookup 't55)))
   1
   16)
  (aligned 1 0))
 'int16
 16)
optimized-template:
  #<load-data>
optimized Halide 0:
  (int16_t
 (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16)))
optimized x86 0:
  (uint8_t
 (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))))
Ran synthesizer for 2 ms
(unsat)
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (vec-cast
 (load
  (buffer input1 'uint8)
  (ramp
   (sca-add
    (sca-mul output.s0.x.x 16)
    (sca-add
     (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
     (var-lookup 't55)))
   1
   16)
  (aligned 1 0))
 'int16
 16)
template:
  (cast ... #<load-data> 'int16 #f)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-cast #<abstr-halide-expr> 'int16 16)
optimized-template:
  (cast ... #<abstr-expr> 'int16 #f)
optimized Halide 0:
  (int16_t (zero-extend (app abstr-vals$51 0) (bitvector 16)))
optimized x86 0:
  (int16_t (zero-extend (app abstr-vals$51 0) (bitvector 16)))
Ran synthesizer for 19 ms
(model)
(vec-cast #<abstr-halide-expr> 'int16 16)
(cast ... #<load-data> 'int16 #f)
Ran bounds analysis for 25 ms
Ran bounds analysis for 17 ms
"Extended success?"
#t
(cast ... #<load-data> 'int16 #f)
"Building Expr:"
(sca-broadcast (int16_t (bv #x0040 16)) 16)
"Fold templates"
'()
here()

"Replace templates"
'()
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (sca-broadcast (int16_t (bv #x0040 16)) 16)
template:
  (broadcast ... (int16_t (bv #x0040 16)))
axioms:
  '()
optimized-halide-expr:
  (sca-broadcast (int16_t (bv #x0040 16)) 16)
optimized-template:
  (broadcast ... (int16_t (bv #x0040 16)))
optimized Halide 0:
  (int16_t (bv #x0040 16))
optimized x86 0:
  (int16_t (bv #x0040 16))
Ran synthesizer for 19 ms
(model)
(sca-broadcast (int16_t (bv #x0040 16)) 16)
(broadcast ... (int16_t (bv #x0040 16)))
Ran bounds analysis for 29 ms
Ran bounds analysis for 19 ms
"Extended success?"
#t
(broadcast ... (int16_t (bv #x0040 16)))
"Building Expr:"
(vec-mul
 (vec-cast
  (load
   (buffer input1 'uint8)
   (ramp
    (sca-add
     (sca-mul output.s0.x.x 16)
     (sca-add
      (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
      (var-lookup 't55)))
    1
    16)
   (aligned 1 0))
  'int16
  16)
 (sca-broadcast (int16_t (bv #x0040 16)) 16))
"Fold templates"
(list #<load-data> (cast ... #<load-data> 'int16 x?$53))
here(#<load-data> #(struct:cast ... #<load-data> int16 x?$53))

(list (vs-mpy-add ... #<load-data> (list (int16_t (bv #x0040 16))) #f #f #f 'int16) (vs-mpy-add ... #<load-data> (list (int16_t (bv #x0040 16))) #f #f #f 'int16) (vv-mpy-add ... #<load-data> '(1) (! x?$154) (! x?$155) (! x?$156) 'int16) (vv-mpy-add ... #<load-data> '(1) (! x?$157) (! x?$158) (! x?$159) 'int16))
"Replace templates"
(list
 (vs-mpy-add ... #<load-data> (list (int16_t (bv #x0040 16))) #f #f #f 'int16)
 (vs-mpy-add ... #<load-data> (list (int16_t (bv #x0040 16))) #f #f #f 'int16)
 (vv-mpy-add ... #<load-data> '(1) (! x?$154) (! x?$155) (! x?$156) 'int16)
 (vv-mpy-add ... #<load-data> '(1) (! x?$157) (! x?$158) (! x?$159) 'int16))
run-x86-synthesizer
halide-expr:
  (vec-mul
 (vec-cast
  (load
   (buffer input1 'uint8)
   (ramp
    (sca-add
     (sca-mul output.s0.x.x 16)
     (sca-add
      (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
      (var-lookup 't55)))
    1
    16)
   (aligned 1 0))
  'int16
  16)
 (sca-broadcast (int16_t (bv #x0040 16)) 16))
template:
  #<load-data>
axioms:
  '()
optimized-halide-expr:
  (vec-mul
 (vec-cast
  (load
   (buffer input1 'uint8)
   (ramp
    (sca-add
     (sca-mul output.s0.x.x 16)
     (sca-add
      (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
      (var-lookup 't55)))
    1
    16)
   (aligned 1 0))
  'int16
  16)
 (sca-broadcast (int16_t (bv #x0040 16)) 16))
optimized-template:
  #<load-data>
optimized Halide 0:
  (int16_t
 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))))
optimized x86 0:
  (uint8_t
 (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))))
Ran synthesizer for 2 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-mul
 (vec-cast
  (load
   (buffer input1 'uint8)
   (ramp
    (sca-add
     (sca-mul output.s0.x.x 16)
     (sca-add
      (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
      (var-lookup 't55)))
    1
    16)
   (aligned 1 0))
  'int16
  16)
 (sca-broadcast (int16_t (bv #x0040 16)) 16))
template:
  (cast ... #<load-data> 'int16 x?$53)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-mul
 (vec-cast #<abstr-halide-expr> 'int16 16)
 (sca-broadcast (int16_t (bv #x0040 16)) 16))
optimized-template:
  (cast ... #<abstr-expr> 'int16 x?$53)
optimized Halide 0:
  (int16_t
 (bvmul (bv #x0040 16) (zero-extend (app abstr-vals$160 0) (bitvector 16))))
optimized x86 0:
  (int16_t (zero-extend (app abstr-vals$160 0) (bitvector 16)))
Ran synthesizer for 66 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-mul
 (vec-cast
  (load
   (buffer input1 'uint8)
   (ramp
    (sca-add
     (sca-mul output.s0.x.x 16)
     (sca-add
      (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
      (var-lookup 't55)))
    1
    16)
   (aligned 1 0))
  'int16
  16)
 (sca-broadcast (int16_t (bv #x0040 16)) 16))
template:
  (vs-mpy-add ... #<load-data> (list (int16_t (bv #x0040 16))) #f #f #f 'int16)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-mul
 (vec-cast #<abstr-halide-expr> 'int16 16)
 (sca-broadcast (int16_t (bv #x0040 16)) 16))
optimized-template:
  (vs-mpy-add ... #<abstr-expr> (list (int16_t (bv #x0040 16))) #f #f #f 'int16)
optimized Halide 0:
  (int16_t
 (bvmul (bv #x0040 16) (zero-extend (app abstr-vals$161 0) (bitvector 16))))
optimized x86 0:
  (int16_t
 (bvmul (bv #x0040 16) (zero-extend (app abstr-vals$161 0) (bitvector 16))))
Ran synthesizer for 21 ms
(model)
(vec-mul
 (vec-cast #<abstr-halide-expr> 'int16 16)
 (sca-broadcast (int16_t (bv #x0040 16)) 16))
(vs-mpy-add ... #<load-data> (list (int16_t (bv #x0040 16))) #f #f #f 'int16)
Ran bounds analysis for 29 ms
Ran bounds analysis for 21 ms
"Success?"
#t
(vs-mpy-add ... #<load-data> (list (int16_t (bv #x0040 16))) #f #f #f 'int16)
"Building Expr:"
(sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16)
"Fold templates"
'()
here()

"Replace templates"
'()
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16)
template:
  (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))))
axioms:
  '()
optimized-halide-expr:
  (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16)
optimized-template:
  (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))))
optimized Halide 0:
  (int16_t (bvmul (bv #xffc0 16) t125))
optimized x86 0:
  (int16_t (bvmul (bv #xffc0 16) t125))
Ran synthesizer for 19 ms
(model)
(sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16)
(broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))))
Ran bounds analysis for 23 ms
Ran bounds analysis for 17 ms
"Extended success?"
#t
(broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))))
"Building Expr:"
(vec-add
 (vec-mul
  (vec-cast
   (load
    (buffer input1 'uint8)
    (ramp
     (sca-add
      (sca-mul output.s0.x.x 16)
      (sca-add
       (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
       (var-lookup 't55)))
     1
     16)
    (aligned 1 0))
   'int16
   16)
  (sca-broadcast (int16_t (bv #x0040 16)) 16))
 (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
"Fold templates"
(list
 #<load-data>
 (vs-mpy-add
  ...
  #<load-data>
  (list
   (int16_t (bv #x0040 16))
   (union [x?$166 #(struct:int16_t (bv #x0040 16))] [(! x?$166) #(struct:int8_t
                                                                  (bv #x01 8))]))
  #f
  #f
  #f
  'int16)
 (vs-mpy-add
  ...
  #<load-data>
  (list (int16_t (bv #x0040 16)))
  #f
  x?$164
  #f
  'int16)
 (vs-mpy-add
  ...
  (combine
   (vs-mpy-add
    ...
    #<load-data>
    (list (int16_t (bv #x0040 16)))
    #f
    #f
    #f
    'int16)
   (union [x?$167 #(struct:vs-mpy-add
                    ...
                    #<load-data>
                    (#(struct:int16_t (bv #x0040 16)))
                    #f
                    #f
                    #f
                    int16)] [(! x?$167) #(struct:broadcast
                                          ...
                                          #(struct:sca-mul
                                            #(struct:int16_t t125)
                                            #(struct:int16_t (bv #xffc0 16))))]))
  (list (int16_t (bv #x0040 16)) (int8_t (bv #x01 8)))
  #f
  #f
  #f
  'int16))
here(#<load-data> #(struct:vs-mpy-add ... #<load-data> (#(struct:int16_t (bv #x0040 16)) (union #:size 2 #:hash 1497444005540)) #f #f #f int16) #(struct:vs-mpy-add ... #<load-data> (#(struct:int16_t (bv #x0040 16))) #f x?$164 #f int16) #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<load-data> (#(struct:int16_t (bv #x0040 16))) #f #f #f int16) (union #:size 2 #:hash 364350695015)> (#(struct:int16_t (bv #x0040 16)) #(struct:int8_t (bv #x01 8))) #f #f #f int16))

"Replace templates"
'()
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-mul
  (vec-cast
   (load
    (buffer input1 'uint8)
    (ramp
     (sca-add
      (sca-mul output.s0.x.x 16)
      (sca-add
       (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
       (var-lookup 't55)))
     1
     16)
    (aligned 1 0))
   'int16
   16)
  (sca-broadcast (int16_t (bv #x0040 16)) 16))
 (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
template:
  #<load-data>
axioms:
  '()
optimized-halide-expr:
  (vec-add
 (vec-mul
  (vec-cast
   (load
    (buffer input1 'uint8)
    (ramp
     (sca-add
      (sca-mul output.s0.x.x 16)
      (sca-add
       (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
       (var-lookup 't55)))
     1
     16)
    (aligned 1 0))
   'int16
   16)
  (sca-broadcast (int16_t (bv #x0040 16)) 16))
 (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
optimized-template:
  #<load-data>
optimized Halide 0:
  (int16_t
 (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)))
optimized x86 0:
  (uint8_t
 (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))))
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-mul
  (vec-cast
   (load
    (buffer input1 'uint8)
    (ramp
     (sca-add
      (sca-mul output.s0.x.x 16)
      (sca-add
       (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
       (var-lookup 't55)))
     1
     16)
    (aligned 1 0))
   'int16
   16)
  (sca-broadcast (int16_t (bv #x0040 16)) 16))
 (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
template:
  (vs-mpy-add
 ...
 #<load-data>
 (list
  (int16_t (bv #x0040 16))
  (union [x?$166 #(struct:int16_t (bv #x0040 16))] [(! x?$166) #(struct:int8_t
                                                                 (bv #x01 8))]))
 #f
 #f
 #f
 'int16)
axioms:
  '()
optimized-halide-expr:
  (vec-add
 (vec-mul
  (vec-cast
   (load
    (buffer input1 'uint8)
    (ramp
     (sca-add
      (sca-mul output.s0.x.x 16)
      (sca-add
       (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
       (var-lookup 't55)))
     1
     16)
    (aligned 1 0))
   'int16
   16)
  (sca-broadcast (int16_t (bv #x0040 16)) 16))
 (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
optimized-template:
  (vs-mpy-add
 ...
 #<load-data>
 (list
  (int16_t (bv #x0040 16))
  (union [x?$166 #(struct:int16_t (bv #x0040 16))] [(! x?$166) #(struct:int8_t
                                                                 (bv #x01 8))]))
 #f
 #f
 #f
 'int16)
optimized Halide 0:
  (int16_t
 (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)))
optimized x86 0:
  (int16_t
 (bvmul (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16)) (ite x?$166 (bv #x0080 16) (bv #x0041 16))))
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-mul
  (vec-cast
   (load
    (buffer input1 'uint8)
    (ramp
     (sca-add
      (sca-mul output.s0.x.x 16)
      (sca-add
       (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
       (var-lookup 't55)))
     1
     16)
    (aligned 1 0))
   'int16
   16)
  (sca-broadcast (int16_t (bv #x0040 16)) 16))
 (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
template:
  (vs-mpy-add
 ...
 #<load-data>
 (list (int16_t (bv #x0040 16)))
 #f
 x?$164
 #f
 'int16)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-add
 (vec-mul
  (vec-cast #<abstr-halide-expr> 'int16 16)
  (sca-broadcast (int16_t (bv #x0040 16)) 16))
 (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
optimized-template:
  (vs-mpy-add
 ...
 #<abstr-expr>
 (list (int16_t (bv #x0040 16)))
 #f
 x?$164
 #f
 'int16)
optimized Halide 0:
  (int16_t
 (bvadd (bvmul (bv #xffc0 16) t125) (bvmul (bv #x0040 16) (zero-extend (app abstr-vals$243 0) (bitvector 16)))))
optimized x86 0:
  (int16_t
 (bvadd (bvmul (bv #x0040 16) (zero-extend (app abstr-vals$243 0) (bitvector 16))) (ite x?$164 (bv #x0001 16) (bv #x0000 16))))
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-mul
  (vec-cast
   (load
    (buffer input1 'uint8)
    (ramp
     (sca-add
      (sca-mul output.s0.x.x 16)
      (sca-add
       (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
       (var-lookup 't55)))
     1
     16)
    (aligned 1 0))
   'int16
   16)
  (sca-broadcast (int16_t (bv #x0040 16)) 16))
 (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
template:
  (vs-mpy-add
 ...
 (combine
  (vs-mpy-add ... #<load-data> (list (int16_t (bv #x0040 16))) #f #f #f 'int16)
  (union [x?$167 #(struct:vs-mpy-add
                   ...
                   #<load-data>
                   (#(struct:int16_t (bv #x0040 16)))
                   #f
                   #f
                   #f
                   int16)] [(! x?$167) #(struct:broadcast
                                         ...
                                         #(struct:sca-mul
                                           #(struct:int16_t t125)
                                           #(struct:int16_t (bv #xffc0 16))))]))
 (list (int16_t (bv #x0040 16)) (int8_t (bv #x01 8)))
 #f
 #f
 #f
 'int16)
axioms:
  (union [x?$167 ((forall (idx) (&& (bvsle (app abstr-vals$244 idx) (bv #x3fc0 16)) (bvsle (bv #x0000 16) (app abstr-vals$244 idx))))
                (forall (idx) (&& (bvsle (app abstr-vals$244 idx) (bv #x3fc0 16)) (bvsle (bv #x0000 16) (app abstr-vals$244 idx)))))] [(! x?$167) ((forall (idx) (&& (bvsle (app abstr-vals$244 idx) (bv #x3fc0 16)) (bvsle (bv #x0000 16) (app abstr-vals$244 idx)))))])
optimized-halide-expr:
  (vec-add
 #<abstr-halide-expr>
 (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
optimized-template:
  (vs-mpy-add
 ...
 (combine
  #<abstr-expr>
  (union [x?$167 #<abstr-expr>] [(! x?$167) #(struct:broadcast
                                              ...
                                              #(struct:sca-mul
                                                #(struct:int16_t t125)
                                                #(struct:int16_t
                                                  (bv #xffc0 16))))]))
 (list (int16_t (bv #x0040 16)) (int8_t (bv #x01 8)))
 #f
 #f
 #f
 'int16)
optimized Halide 0:
  (int16_t (bvadd (bvmul (bv #xffc0 16) t125) (app abstr-vals$244 0)))
optimized x86 0:
  (int16_t
 (bvadd (bvmul (bv #x0040 16) (ite c$169 (app abstr-vals$244 idx$168) (ite x?$167 (app abstr-vals$244 idx$168) (bvmul (bv #xffc0 16) t125)))) (ite c$171 (app abstr-vals$244 idx$170) (ite x?$167 (app abstr-vals$244 idx$170) (bvmul (bv #xffc0 16) t125)))))
Ran synthesizer for 131 ms
(unsat)
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-mul
  (vec-cast
   (load
    (buffer input1 'uint8)
    (ramp
     (sca-add
      (sca-mul output.s0.x.x 16)
      (sca-add
       (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
       (var-lookup 't55)))
     1
     16)
    (aligned 1 0))
   'int16
   16)
  (sca-broadcast (int16_t (bv #x0040 16)) 16))
 (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
template:
  (vs-mpy-add
 ...
 (union [x?$245 #(struct:vs-mpy-add
                  ...
                  #<load-data>
                  (#(struct:int16_t (bv #x0040 16)))
                  #f
                  #f
                  #f
                  int16)] [(! x?$245) #(struct:broadcast
                                        ...
                                        #(struct:sca-mul
                                          #(struct:int16_t t125)
                                          #(struct:int16_t (bv #xffc0 16))))])
 (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
 (! x?$246)
 (! x?$247)
 (! x?$248)
 'int16)
axioms:
  '()
optimized-halide-expr:
  (vec-add
 (vec-mul
  (vec-cast
   (load
    (buffer input1 'uint8)
    (ramp
     (sca-add
      (sca-mul output.s0.x.x 16)
      (sca-add
       (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
       (var-lookup 't55)))
     1
     16)
    (aligned 1 0))
   'int16
   16)
  (sca-broadcast (int16_t (bv #x0040 16)) 16))
 (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
optimized-template:
  (vs-mpy-add
 ...
 (union [x?$245 #(struct:vs-mpy-add
                  ...
                  #<load-data>
                  (#(struct:int16_t (bv #x0040 16)))
                  #f
                  #f
                  #f
                  int16)] [(! x?$245) #(struct:broadcast
                                        ...
                                        #(struct:sca-mul
                                          #(struct:int16_t t125)
                                          #(struct:int16_t (bv #xffc0 16))))])
 (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
 (! x?$246)
 (! x?$247)
 (! x?$248)
 'int16)
optimized Halide 0:
  (int16_t
 (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)))
optimized x86 0:
  (int16_t
 (ite* (⊢ (&& x?$248 (! (&& (! x?$246) (! x?$248)))) (ite x?$246 (bvadd (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (ite x?$246 (bvadd (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (ite x?$247 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$247 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bvadd (bv #x7fff 16) (bvneg (ite x?$247 (bv #x0000 16) (bv #x0001 16))))) (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bvadd (bv #x7fff 16) (bvneg (ite x?$247 (bv #x0000 16) (bv #x0001 16)))))))) (bvadd (ite x?$246 (bvadd (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (ite x?$247 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$247 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bvadd (bv #x7fff 16) (bvneg (ite x?$247 (bv #x0000 16) (bv #x0001 16))))) (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bvadd (bv #x7fff 16) (bvneg (ite x?$247 (bv #x0000 16) (bv #x0001 16))))))) (ite (bvsle (bvadd (bv #x8000 16) (bvneg (ite (bvsle (ite x?$246 (bvadd (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (ite x?$247 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$247 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bvadd (bv #x7fff 16) (bvneg (ite x?$247 (bv #x0000 16) (bv #x0001 16))))) (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bvadd (bv #x7fff 16) (bvneg (ite x?$247 (bv #x0000 16) (bv #x0001 16))))))) (bv #x0000 16)) (ite x?$246 (bvadd (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (ite x?$247 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$247 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bvadd (bv #x7fff 16) (bvneg (ite x?$247 (bv #x0000 16) (bv #x0001 16))))) (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bvadd (bv #x7fff 16) (bvneg (ite x?$247 (bv #x0000 16) (bv #x0001 16))))))) (bv #x0000 16)))) (ite (bvsle (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$246 (bvadd (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (ite x?$247 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$247 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bvadd (bv #x7fff 16) (bvneg (ite x?$247 (bv #x0000 16) (bv #x0001 16))))) (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bvadd (bv #x7fff 16) (bvneg (ite x?$247 (bv #x0000 16) (bv #x0001 16)))))))) (ite x?$246 (bvadd (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (ite x?$247 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$247 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bvadd (bv #x7fff 16) (bvneg (ite x?$247 (bv #x0000 16) (bv #x0001 16))))) (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bvadd (bv #x7fff 16) (bvneg (ite x?$247 (bv #x0000 16) (bv #x0001 16))))))) (bv #x0000 16))))) (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$246 (bvadd (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (ite x?$247 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$247 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bvadd (bv #x7fff 16) (bvneg (ite x?$247 (bv #x0000 16) (bv #x0001 16))))) (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bvadd (bv #x7fff 16) (bvneg (ite x?$247 (bv #x0000 16) (bv #x0001 16)))))))) (ite x?$246 (bvadd (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (ite x?$247 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$247 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bvadd (bv #x7fff 16) (bvneg (ite x?$247 (bv #x0000 16) (bv #x0001 16))))) (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bvadd (bv #x7fff 16) (bvneg (ite x?$247 (bv #x0000 16) (bv #x0001 16))))))) (bv #x0000 16)))))) (ite (bvsle (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$246 (bvadd (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (ite x?$247 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$247 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bvadd (bv #x7fff 16) (bvneg (ite x?$247 (bv #x0000 16) (bv #x0001 16))))) (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bvadd (bv #x7fff 16) (bvneg (ite x?$247 (bv #x0000 16) (bv #x0001 16)))))))) (ite x?$246 (bvadd (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (ite x?$247 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$247 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bvadd (bv #x7fff 16) (bvneg (ite x?$247 (bv #x0000 16) (bv #x0001 16))))) (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bvadd (bv #x7fff 16) (bvneg (ite x?$247 (bv #x0000 16) (bv #x0001 16))))))) (bv #x0000 16))))) (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$246 (bvadd (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (ite x?$247 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$247 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bvadd (bv #x7fff 16) (bvneg (ite x?$247 (bv #x0000 16) (bv #x0001 16))))) (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bvadd (bv #x7fff 16) (bvneg (ite x?$247 (bv #x0000 16) (bv #x0001 16)))))))) (ite x?$246 (bvadd (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (ite x?$247 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$247 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bvadd (bv #x7fff 16) (bvneg (ite x?$247 (bv #x0000 16) (bv #x0001 16))))) (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bvadd (bv #x7fff 16) (bvneg (ite x?$247 (bv #x0000 16) (bv #x0001 16))))))) (bv #x0000 16))))) (bvadd (bv #x8000 16) (bvneg (ite (bvsle (ite x?$246 (bvadd (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (ite x?$247 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$247 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bvadd (bv #x7fff 16) (bvneg (ite x?$247 (bv #x0000 16) (bv #x0001 16))))) (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bvadd (bv #x7fff 16) (bvneg (ite x?$247 (bv #x0000 16) (bv #x0001 16))))))) (bv #x0000 16)) (ite x?$246 (bvadd (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (ite x?$247 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$247 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bvadd (bv #x7fff 16) (bvneg (ite x?$247 (bv #x0000 16) (bv #x0001 16))))) (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bvadd (bv #x7fff 16) (bvneg (ite x?$247 (bv #x0000 16) (bv #x0001 16))))))) (bv #x0000 16)))))))) (⊢ (|| (&& (! x?$246) (! x?$248)) (&& (! x?$248) (! (&& (! x?$246) (! x?$248))))) (bvashr (ite x?$246 (bvadd (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (ite x?$246 (bvadd (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (ite x?$247 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$247 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bvadd (bv #x7fff 16) (bvneg (ite x?$247 (bv #x0000 16) (bv #x0001 16))))) (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bvadd (bv #x7fff 16) (bvneg (ite x?$247 (bv #x0000 16) (bv #x0001 16)))))))) (bvadd (ite x?$246 (bvadd (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (ite x?$247 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$247 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bvadd (bv #x7fff 16) (bvneg (ite x?$247 (bv #x0000 16) (bv #x0001 16))))) (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bvadd (bv #x7fff 16) (bvneg (ite x?$247 (bv #x0000 16) (bv #x0001 16))))))) (ite (bvsle (bvadd (bv #x8000 16) (bvneg (ite (bvsle (ite x?$246 (bvadd (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (ite x?$247 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$247 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bvadd (bv #x7fff 16) (bvneg (ite x?$247 (bv #x0000 16) (bv #x0001 16))))) (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bvadd (bv #x7fff 16) (bvneg (ite x?$247 (bv #x0000 16) (bv #x0001 16))))))) (bv #x0000 16)) (ite x?$246 (bvadd (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (ite x?$247 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$247 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bvadd (bv #x7fff 16) (bvneg (ite x?$247 (bv #x0000 16) (bv #x0001 16))))) (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bvadd (bv #x7fff 16) (bvneg (ite x?$247 (bv #x0000 16) (bv #x0001 16))))))) (bv #x0000 16)))) (ite (bvsle (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$246 (bvadd (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (ite x?$247 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$247 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bvadd (bv #x7fff 16) (bvneg (ite x?$247 (bv #x0000 16) (bv #x0001 16))))) (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bvadd (bv #x7fff 16) (bvneg (ite x?$247 (bv #x0000 16) (bv #x0001 16)))))))) (ite x?$246 (bvadd (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (ite x?$247 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$247 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bvadd (bv #x7fff 16) (bvneg (ite x?$247 (bv #x0000 16) (bv #x0001 16))))) (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bvadd (bv #x7fff 16) (bvneg (ite x?$247 (bv #x0000 16) (bv #x0001 16))))))) (bv #x0000 16))))) (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$246 (bvadd (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (ite x?$247 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$247 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bvadd (bv #x7fff 16) (bvneg (ite x?$247 (bv #x0000 16) (bv #x0001 16))))) (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bvadd (bv #x7fff 16) (bvneg (ite x?$247 (bv #x0000 16) (bv #x0001 16)))))))) (ite x?$246 (bvadd (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (ite x?$247 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$247 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bvadd (bv #x7fff 16) (bvneg (ite x?$247 (bv #x0000 16) (bv #x0001 16))))) (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bvadd (bv #x7fff 16) (bvneg (ite x?$247 (bv #x0000 16) (bv #x0001 16))))))) (bv #x0000 16)))))) (ite (bvsle (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$246 (bvadd (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (ite x?$247 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$247 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bvadd (bv #x7fff 16) (bvneg (ite x?$247 (bv #x0000 16) (bv #x0001 16))))) (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bvadd (bv #x7fff 16) (bvneg (ite x?$247 (bv #x0000 16) (bv #x0001 16)))))))) (ite x?$246 (bvadd (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (ite x?$247 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$247 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bvadd (bv #x7fff 16) (bvneg (ite x?$247 (bv #x0000 16) (bv #x0001 16))))) (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bvadd (bv #x7fff 16) (bvneg (ite x?$247 (bv #x0000 16) (bv #x0001 16))))))) (bv #x0000 16))))) (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$246 (bvadd (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (ite x?$247 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$247 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bvadd (bv #x7fff 16) (bvneg (ite x?$247 (bv #x0000 16) (bv #x0001 16))))) (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bvadd (bv #x7fff 16) (bvneg (ite x?$247 (bv #x0000 16) (bv #x0001 16)))))))) (ite x?$246 (bvadd (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (ite x?$247 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$247 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bvadd (bv #x7fff 16) (bvneg (ite x?$247 (bv #x0000 16) (bv #x0001 16))))) (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bvadd (bv #x7fff 16) (bvneg (ite x?$247 (bv #x0000 16) (bv #x0001 16))))))) (bv #x0000 16))))) (bvadd (bv #x8000 16) (bvneg (ite (bvsle (ite x?$246 (bvadd (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (ite x?$247 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$247 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bvadd (bv #x7fff 16) (bvneg (ite x?$247 (bv #x0000 16) (bv #x0001 16))))) (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bvadd (bv #x7fff 16) (bvneg (ite x?$247 (bv #x0000 16) (bv #x0001 16))))))) (bv #x0000 16)) (ite x?$246 (bvadd (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (ite x?$247 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$247 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bvadd (bv #x7fff 16) (bvneg (ite x?$247 (bv #x0000 16) (bv #x0001 16))))) (ite x?$245 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bvadd (bv #x7fff 16) (bvneg (ite x?$247 (bv #x0000 16) (bv #x0001 16))))))) (bv #x0000 16))))))) (bv #x0001 16)))))
Ran synthesizer for 116 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-mul
  (vec-cast
   (load
    (buffer input1 'uint8)
    (ramp
     (sca-add
      (sca-mul output.s0.x.x 16)
      (sca-add
       (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
       (var-lookup 't55)))
     1
     16)
    (aligned 1 0))
   'int16
   16)
  (sca-broadcast (int16_t (bv #x0040 16)) 16))
 (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
template:
  (vs-mpy-add
 ...
 (combine
  (vs-mpy-add ... #<load-data> (list (int16_t (bv #x0040 16))) #f #f #f 'int16)
  (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
 (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
 #f
 #f
 #f
 'int16)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$299 idx) (bv #x3fc0 16)) (bvsle (bv #x0000 16) (app abstr-vals$299 idx))))
 (forall (idx) (bvsle (app abstr-vals$300 idx) (bv #x7fc0 16))))
optimized-halide-expr:
  (vec-add #<abstr-halide-expr> #<abstr-halide-expr>)
optimized-template:
  (vs-mpy-add
 ...
 (combine #<abstr-expr> #<abstr-expr>)
 (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
 #f
 #f
 #f
 'int16)
optimized Halide 0:
  (int16_t (bvadd (app abstr-vals$299 0) (app abstr-vals$300 0)))
optimized x86 0:
  (int16_t
 (bvadd (ite c$250 (app abstr-vals$299 idx$249) (app abstr-vals$300 idx$249)) (ite c$252 (app abstr-vals$299 idx$251) (app abstr-vals$300 idx$251))))
Ran synthesizer for 141 ms
(model
 [idx$249 0]
 [c$250 #f]
 [idx$251 0]
 [c$252 #t])
(vec-add #<abstr-halide-expr> #<abstr-halide-expr>)
(vs-mpy-add
 ...
 (combine
  (vs-mpy-add ... #<load-data> (list (int16_t (bv #x0040 16))) #f #f #f 'int16)
  (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
 (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
 #f
 #f
 #f
 'int16)
Ran bounds analysis for 33 ms
Ran bounds analysis for 22 ms
"Extended success?"
#t
(vs-mpy-add
 ...
 (combine
  (vs-mpy-add ... #<load-data> (list (int16_t (bv #x0040 16))) #f #f #f 'int16)
  (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
 (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
 #f
 #f
 #f
 'int16)
"Building Expr:"
(vec-cast
 (vec-add
  (vec-mul
   (vec-cast
    (load
     (buffer input1 'uint8)
     (ramp
      (sca-add
       (sca-mul output.s0.x.x 16)
       (sca-add
        (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
        (var-lookup 't55)))
      1
      16)
     (aligned 1 0))
    'int16
    16)
   (sca-broadcast (int16_t (bv #x0040 16)) 16))
  (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
 'int32
 16)
"Fold templates"
(list
 (vs-mpy-add
  ...
  #<load-data>
  (list (int16_t (bv #x0040 16)))
  x?$307
  x?$308
  x?$309
  'int16)
 (vs-mpy-add
  ...
  (combine
   (vs-mpy-add
    ...
    #<load-data>
    (list (int16_t (bv #x0040 16)))
    #f
    #f
    #f
    'int16)
   (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
  (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
  x?$303
  x?$304
  x?$305
  'int16))
here(#(struct:vs-mpy-add ... #<load-data> (#(struct:int16_t (bv #x0040 16))) x?$307 x?$308 x?$309 int16) #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<load-data> (#(struct:int16_t (bv #x0040 16))) #f #f #f int16) #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t125) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) x?$303 x?$304 x?$305 int16))

"Replace templates"
'()
run-x86-synthesizer
halide-expr:
  (vec-cast
 (vec-add
  (vec-mul
   (vec-cast
    (load
     (buffer input1 'uint8)
     (ramp
      (sca-add
       (sca-mul output.s0.x.x 16)
       (sca-add
        (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
        (var-lookup 't55)))
      1
      16)
     (aligned 1 0))
    'int16
    16)
   (sca-broadcast (int16_t (bv #x0040 16)) 16))
  (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
 'int32
 16)
template:
  (vs-mpy-add
 ...
 #<load-data>
 (list (int16_t (bv #x0040 16)))
 x?$307
 x?$308
 x?$309
 'int16)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-cast
 (vec-add
  (vec-mul
   (vec-cast #<abstr-halide-expr> 'int16 16)
   (sca-broadcast (int16_t (bv #x0040 16)) 16))
  (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
 'int32
 16)
optimized-template:
  (vs-mpy-add
 ...
 #<abstr-expr>
 (list (int16_t (bv #x0040 16)))
 x?$307
 x?$308
 x?$309
 'int16)
optimized Halide 0:
  (int32_t
 (sign-extend (bvadd (bvmul (bv #xffc0 16) t125) (bvmul (bv #x0040 16) (zero-extend (app abstr-vals$311 0) (bitvector 16)))) (bitvector 32)))
optimized x86 0:
  (int16_t
 (ite* (⊢ (&& (! x?$309) (! (&& x?$307 x?$309))) (ite x?$307 (bvadd (ite x?$308 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0040 16) (zero-extend (app abstr-vals$311 0) (bitvector 16))) (bvadd (bv #x7fff 16) (bvneg (ite x?$308 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0040 16) (zero-extend (app abstr-vals$311 0) (bitvector 16))) (bvadd (bv #x7fff 16) (bvneg (ite x?$308 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0040 16) (zero-extend (app abstr-vals$311 0) (bitvector 16))) (ite x?$308 (bv #x0001 16) (bv #x0000 16))))) (⊢ (|| (&& x?$307 x?$309) (&& x?$309 (! (&& x?$307 x?$309)))) (bvashr (ite x?$307 (bvadd (ite x?$308 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0040 16) (zero-extend (app abstr-vals$311 0) (bitvector 16))) (bvadd (bv #x7fff 16) (bvneg (ite x?$308 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0040 16) (zero-extend (app abstr-vals$311 0) (bitvector 16))) (bvadd (bv #x7fff 16) (bvneg (ite x?$308 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0040 16) (zero-extend (app abstr-vals$311 0) (bitvector 16))) (ite x?$308 (bv #x0001 16) (bv #x0000 16)))) (bv #x0001 16)))))
run-x86-synthesizer
halide-expr:
  (vec-cast
 (vec-add
  (vec-mul
   (vec-cast
    (load
     (buffer input1 'uint8)
     (ramp
      (sca-add
       (sca-mul output.s0.x.x 16)
       (sca-add
        (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
        (var-lookup 't55)))
      1
      16)
     (aligned 1 0))
    'int16
    16)
   (sca-broadcast (int16_t (bv #x0040 16)) 16))
  (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
 'int32
 16)
template:
  (vs-mpy-add
 ...
 (combine
  (vs-mpy-add ... #<load-data> (list (int16_t (bv #x0040 16))) #f #f #f 'int16)
  (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
 (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
 x?$303
 x?$304
 x?$305
 'int16)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$312 idx) (bv #x3fc0 16)) (bvsle (bv #x0000 16) (app abstr-vals$312 idx))))
 (forall (idx) (bvsle (app abstr-vals$313 idx) (bv #x7fc0 16))))
optimized-halide-expr:
  (vec-cast (vec-add #<abstr-halide-expr> #<abstr-halide-expr>) 'int32 16)
optimized-template:
  (vs-mpy-add
 ...
 (combine #<abstr-expr> #<abstr-expr>)
 (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
 x?$303
 x?$304
 x?$305
 'int16)
optimized Halide 0:
  (int32_t
 (sign-extend (bvadd (app abstr-vals$312 0) (app abstr-vals$313 0)) (bitvector 32)))
optimized x86 0:
  (int16_t
 (ite* (⊢ (&& (! x?$305) (! (&& x?$303 x?$305))) (ite x?$303 (bvadd (ite x?$303 (bvadd (ite x?$304 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$313 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$304 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$313 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$304 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$313 0) (ite x?$304 (bv #x0001 16) (bv #x0000 16)))) (ite (bvsle (bvadd (bv #x8000 16) (bvneg (ite (bvsle (ite x?$303 (bvadd (ite x?$304 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$313 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$304 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$313 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$304 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$313 0) (ite x?$304 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16)) (ite x?$303 (bvadd (ite x?$304 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$313 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$304 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$313 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$304 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$313 0) (ite x?$304 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16)))) (ite (bvsle (app abstr-vals$312 0) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$303 (bvadd (ite x?$304 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$313 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$304 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$313 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$304 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$313 0) (ite x?$304 (bv #x0001 16) (bv #x0000 16))))) (ite x?$303 (bvadd (ite x?$304 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$313 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$304 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$313 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$304 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$313 0) (ite x?$304 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16))))) (app abstr-vals$312 0) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$303 (bvadd (ite x?$304 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$313 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$304 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$313 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$304 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$313 0) (ite x?$304 (bv #x0001 16) (bv #x0000 16))))) (ite x?$303 (bvadd (ite x?$304 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$313 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$304 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$313 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$304 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$313 0) (ite x?$304 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16)))))) (ite (bvsle (app abstr-vals$312 0) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$303 (bvadd (ite x?$304 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$313 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$304 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$313 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$304 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$313 0) (ite x?$304 (bv #x0001 16) (bv #x0000 16))))) (ite x?$303 (bvadd (ite x?$304 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$313 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$304 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$313 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$304 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$313 0) (ite x?$304 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16))))) (app abstr-vals$312 0) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$303 (bvadd (ite x?$304 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$313 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$304 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$313 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$304 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$313 0) (ite x?$304 (bv #x0001 16) (bv #x0000 16))))) (ite x?$303 (bvadd (ite x?$304 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$313 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$304 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$313 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$304 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$313 0) (ite x?$304 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16))))) (bvadd (bv #x8000 16) (bvneg (ite (bvsle (ite x?$303 (bvadd (ite x?$304 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$313 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$304 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$313 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$304 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$313 0) (ite x?$304 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16)) (ite x?$303 (bvadd (ite x?$304 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$313 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$304 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$313 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$304 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$313 0) (ite x?$304 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16)))))) (bvadd (app abstr-vals$312 0) (ite x?$303 (bvadd (ite x?$304 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$313 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$304 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$313 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$304 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$313 0) (ite x?$304 (bv #x0001 16) (bv #x0000 16))))))) (⊢ (|| (&& x?$303 x?$305) (&& x?$305 (! (&& x?$303 x?$305)))) (bvashr (ite x?$303 (bvadd (ite x?$303 (bvadd (ite x?$304 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$313 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$304 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$313 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$304 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$313 0) (ite x?$304 (bv #x0001 16) (bv #x0000 16)))) (ite (bvsle (bvadd (bv #x8000 16) (bvneg (ite (bvsle (ite x?$303 (bvadd (ite x?$304 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$313 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$304 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$313 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$304 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$313 0) (ite x?$304 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16)) (ite x?$303 (bvadd (ite x?$304 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$313 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$304 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$313 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$304 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$313 0) (ite x?$304 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16)))) (ite (bvsle (app abstr-vals$312 0) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$303 (bvadd (ite x?$304 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$313 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$304 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$313 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$304 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$313 0) (ite x?$304 (bv #x0001 16) (bv #x0000 16))))) (ite x?$303 (bvadd (ite x?$304 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$313 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$304 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$313 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$304 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$313 0) (ite x?$304 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16))))) (app abstr-vals$312 0) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$303 (bvadd (ite x?$304 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$313 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$304 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$313 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$304 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$313 0) (ite x?$304 (bv #x0001 16) (bv #x0000 16))))) (ite x?$303 (bvadd (ite x?$304 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$313 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$304 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$313 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$304 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$313 0) (ite x?$304 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16)))))) (ite (bvsle (app abstr-vals$312 0) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$303 (bvadd (ite x?$304 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$313 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$304 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$313 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$304 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$313 0) (ite x?$304 (bv #x0001 16) (bv #x0000 16))))) (ite x?$303 (bvadd (ite x?$304 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$313 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$304 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$313 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$304 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$313 0) (ite x?$304 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16))))) (app abstr-vals$312 0) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$303 (bvadd (ite x?$304 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$313 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$304 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$313 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$304 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$313 0) (ite x?$304 (bv #x0001 16) (bv #x0000 16))))) (ite x?$303 (bvadd (ite x?$304 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$313 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$304 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$313 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$304 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$313 0) (ite x?$304 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16))))) (bvadd (bv #x8000 16) (bvneg (ite (bvsle (ite x?$303 (bvadd (ite x?$304 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$313 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$304 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$313 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$304 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$313 0) (ite x?$304 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16)) (ite x?$303 (bvadd (ite x?$304 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$313 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$304 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$313 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$304 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$313 0) (ite x?$304 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16)))))) (bvadd (app abstr-vals$312 0) (ite x?$303 (bvadd (ite x?$304 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$313 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$304 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$313 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$304 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$313 0) (ite x?$304 (bv #x0001 16) (bv #x0000 16)))))) (bv #x0001 16)))))
Ran synthesizer for 24 ms
(unsat)
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (vec-cast
 (vec-add
  (vec-mul
   (vec-cast
    (load
     (buffer input1 'uint8)
     (ramp
      (sca-add
       (sca-mul output.s0.x.x 16)
       (sca-add
        (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
        (var-lookup 't55)))
      1
      16)
     (aligned 1 0))
    'int16
    16)
   (sca-broadcast (int16_t (bv #x0040 16)) 16))
  (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
 'int32
 16)
template:
  (cast
 ...
 (vs-mpy-add
  ...
  (combine
   (vs-mpy-add
    ...
    #<load-data>
    (list (int16_t (bv #x0040 16)))
    #f
    #f
    #f
    'int16)
   (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
  (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
  #f
  #f
  #f
  'int16)
 'int32
 #f)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-cast #<abstr-halide-expr> 'int32 16)
optimized-template:
  (cast ... #<abstr-expr> 'int32 #f)
optimized Halide 0:
  (int32_t (sign-extend (app abstr-vals$314 0) (bitvector 32)))
optimized x86 0:
  (int32_t (sign-extend (app abstr-vals$314 0) (bitvector 32)))
Ran synthesizer for 19 ms
(model)
(vec-cast #<abstr-halide-expr> 'int32 16)
(cast
 ...
 (vs-mpy-add
  ...
  (combine
   (vs-mpy-add
    ...
    #<load-data>
    (list (int16_t (bv #x0040 16)))
    #f
    #f
    #f
    'int16)
   (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
  (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
  #f
  #f
  #f
  'int16)
 'int32
 #f)
Ran bounds analysis for 38 ms
Ran bounds analysis for 30 ms
"Extended success?"
#t
(cast
 ...
 (vs-mpy-add
  ...
  (combine
   (vs-mpy-add
    ...
    #<load-data>
    (list (int16_t (bv #x0040 16)))
    #f
    #f
    #f
    'int16)
   (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
  (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
  #f
  #f
  #f
  'int16)
 'int32
 #f)
"Building Expr:"
(sca-broadcast (int16_t input1_multiplier) 16)
"Fold templates"
'()
here()

"Replace templates"
'()
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (sca-broadcast (int16_t input1_multiplier) 16)
template:
  (broadcast ... (int16_t input1_multiplier))
axioms:
  '()
optimized-halide-expr:
  (sca-broadcast (int16_t input1_multiplier) 16)
optimized-template:
  (broadcast ... (int16_t input1_multiplier))
optimized Halide 0:
  (int16_t input1_multiplier)
optimized x86 0:
  (int16_t input1_multiplier)
Ran synthesizer for 18 ms
(model)
(sca-broadcast (int16_t input1_multiplier) 16)
(broadcast ... (int16_t input1_multiplier))
Ran bounds analysis for 26 ms
Ran bounds analysis for 17 ms
"Extended success?"
#t
(broadcast ... (int16_t input1_multiplier))
"Building Expr:"
(vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16)
"Fold templates"
'()
here()

"Replace templates"
'()
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16)
template:
  (cast ... (broadcast ... (int16_t input1_multiplier)) 'int32 #f)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-cast #<abstr-halide-expr> 'int32 16)
optimized-template:
  (cast ... #<abstr-expr> 'int32 #f)
optimized Halide 0:
  (int32_t (sign-extend (app abstr-vals$316 0) (bitvector 32)))
optimized x86 0:
  (int32_t (sign-extend (app abstr-vals$316 0) (bitvector 32)))
Ran synthesizer for 15 ms
(model)
(vec-cast #<abstr-halide-expr> 'int32 16)
(cast ... (broadcast ... (int16_t input1_multiplier)) 'int32 #f)
Ran bounds analysis for 34 ms
Ran bounds analysis for 24 ms
"Extended success?"
#t
(cast ... (broadcast ... (int16_t input1_multiplier)) 'int32 #f)
"Building Expr:"
(vec-mul
 (vec-cast
  (vec-add
   (vec-mul
    (vec-cast
     (load
      (buffer input1 'uint8)
      (ramp
       (sca-add
        (sca-mul output.s0.x.x 16)
        (sca-add
         (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
         (var-lookup 't55)))
       1
       16)
      (aligned 1 0))
     'int16
     16)
    (sca-broadcast (int16_t (bv #x0040 16)) 16))
   (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
"Fold templates"
(list
 (vs-mpy-add
  ...
  (combine
   (vs-mpy-add
    ...
    #<load-data>
    (list (int16_t (bv #x0040 16)))
    #f
    #f
    #f
    'int16)
   (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
  (list
   (sca-mul
    (sca-cast (int8_t (bv #x01 8)) 'int16)
    (sca-cast
     (union [(&& (! xi?$322) (! xi?$323)) #(struct:int8_t (bv #x01 8))] [(|| xi?$322 (&& xi?$323 (! xi?$322))) #(struct:int16_t
                                                                                                                 (ite* (⊢ xi?$322 input1_multiplier) (⊢ (&& xi?$323 (! xi?$322)) (bv #x0040 16))))])
     'int16))
   (sca-mul
    (sca-cast (int8_t (bv #x01 8)) 'int16)
    (sca-cast
     (union [(&& (! xi?$322) (! xi?$323)) #(struct:int8_t (bv #x01 8))] [(|| xi?$322 (&& xi?$323 (! xi?$322))) #(struct:int16_t
                                                                                                                 (ite* (⊢ xi?$322 input1_multiplier) (⊢ (&& xi?$323 (! xi?$322)) (bv #x0040 16))))])
     'int16)))
  #f
  #f
  #f
  'int16)
 (cast
  ...
  (vs-mpy-add
   ...
   (combine
    (vs-mpy-add
     ...
     #<load-data>
     (list (int16_t (bv #x0040 16)))
     #f
     #f
     #f
     'int16)
    (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
   (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
   #f
   #f
   #f
   'int16)
  'int32
  x?$318)
 (cast ... (broadcast ... (int16_t input1_multiplier)) 'int32 x?$324))
here(#(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<load-data> (#(struct:int16_t (bv #x0040 16))) #f #f #f int16) #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t125) #(struct:int16_t (bv #xffc0 16))))> (#(struct:sca-mul #(struct:sca-cast #(struct:int8_t (bv #x01 8)) int16) #(struct:sca-cast (union #:size 2 #:hash 1440414223873) int16)) #(struct:sca-mul #(struct:sca-cast #(struct:int8_t (bv #x01 8)) int16) #(struct:sca-cast (union #:size 2 #:hash 1440414223873) int16))) #f #f #f int16) #(struct:cast ... #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<load-data> (#(struct:int16_t (bv #x0040 16))) #f #f #f int16) #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t125) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int16) int32 x?$318) #(struct:cast ... #(struct:broadcast ... #(struct:int16_t input1_multiplier)) int32 x?$324))

(list (vs-mpy-add ... (vs-mpy-add ... (combine (vs-mpy-add ... #<load-data> (list (int16_t (bv #x0040 16))) #f #f #f 'int16) (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))))) (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8))) #f #f #f 'int16) (list (int16_t (ite x?$400 input1_multiplier (bv #x0040 16)))) #f #f #f 'int32) (vs-mpy-add ... #<load-data> (list (int16_t (ite x?$401 input1_multiplier (bv #x0040 16)))) #f #f #f 'int32) (vv-mpy-add ... (vs-mpy-add ... (combine (vs-mpy-add ... #<load-data> (list (int16_t (bv #x0040 16))) #f #f #f 'int16) (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))))) (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8))) #f #f #f 'int16) '(1) (! x?$402) (! x?$403) (! x?$404) 'int32) (vv-mpy-add ... #<load-data> '(1) (! x?$405) (! x?$406) (! x?$407) 'int32))
(list (vs-mpy-add ... (broadcast ... (int16_t input1_multiplier)) (list (int16_t (ite x?$483 input1_multiplier (bv #x0040 16)))) #f #f #f 'int32) (vs-mpy-add ... #<load-data> (list (int16_t (ite x?$484 input1_multiplier (bv #x0040 16)))) #f #f #f 'int32) (vv-mpy-add ... (broadcast ... (int16_t input1_multiplier)) '(1) (! x?$485) (! x?$486) (! x?$487) 'int32) (vv-mpy-add ... #<load-data> '(1) (! x?$488) (! x?$489) (! x?$490) 'int32))
"Replace templates"
(list
 (vs-mpy-add
  ...
  (vs-mpy-add
   ...
   (combine
    (vs-mpy-add
     ...
     #<load-data>
     (list (int16_t (bv #x0040 16)))
     #f
     #f
     #f
     'int16)
    (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
   (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
   #f
   #f
   #f
   'int16)
  (list (int16_t (ite x?$400 input1_multiplier (bv #x0040 16))))
  #f
  #f
  #f
  'int32)
 (vs-mpy-add
  ...
  #<load-data>
  (list (int16_t (ite x?$401 input1_multiplier (bv #x0040 16))))
  #f
  #f
  #f
  'int32)
 (vv-mpy-add
  ...
  (vs-mpy-add
   ...
   (combine
    (vs-mpy-add
     ...
     #<load-data>
     (list (int16_t (bv #x0040 16)))
     #f
     #f
     #f
     'int16)
    (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
   (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
   #f
   #f
   #f
   'int16)
  '(1)
  (! x?$402)
  (! x?$403)
  (! x?$404)
  'int32)
 (vv-mpy-add ... #<load-data> '(1) (! x?$405) (! x?$406) (! x?$407) 'int32)
 (vs-mpy-add
  ...
  (broadcast ... (int16_t input1_multiplier))
  (list (int16_t (ite x?$483 input1_multiplier (bv #x0040 16))))
  #f
  #f
  #f
  'int32)
 (vs-mpy-add
  ...
  #<load-data>
  (list (int16_t (ite x?$484 input1_multiplier (bv #x0040 16))))
  #f
  #f
  #f
  'int32)
 (vv-mpy-add
  ...
  (broadcast ... (int16_t input1_multiplier))
  '(1)
  (! x?$485)
  (! x?$486)
  (! x?$487)
  'int32)
 (vv-mpy-add ... #<load-data> '(1) (! x?$488) (! x?$489) (! x?$490) 'int32))
run-x86-synthesizer
halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-mul
    (vec-cast
     (load
      (buffer input1 'uint8)
      (ramp
       (sca-add
        (sca-mul output.s0.x.x 16)
        (sca-add
         (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
         (var-lookup 't55)))
       1
       16)
      (aligned 1 0))
     'int16
     16)
    (sca-broadcast (int16_t (bv #x0040 16)) 16))
   (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
template:
  (vs-mpy-add
 ...
 #<load-data>
 (list (int16_t (ite x?$401 input1_multiplier (bv #x0040 16))))
 #f
 #f
 #f
 'int32)
axioms:
  '()
optimized-halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-mul
    (vec-cast
     (load
      (buffer input1 'uint8)
      (ramp
       (sca-add
        (sca-mul output.s0.x.x 16)
        (sca-add
         (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
         (var-lookup 't55)))
       1
       16)
      (aligned 1 0))
     'int16
     16)
    (sca-broadcast (int16_t (bv #x0040 16)) 16))
   (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
optimized-template:
  (vs-mpy-add
 ...
 #<load-data>
 (list (int16_t (ite x?$401 input1_multiplier (bv #x0040 16))))
 #f
 #f
 #f
 'int32)
optimized Halide 0:
  (int32_t
 (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))))
optimized x86 0:
  (int32_t
 (bvmul (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 32)) (sign-extend (ite x?$401 input1_multiplier (bv #x0040 16)) (bitvector 32))))
run-x86-synthesizer
halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-mul
    (vec-cast
     (load
      (buffer input1 'uint8)
      (ramp
       (sca-add
        (sca-mul output.s0.x.x 16)
        (sca-add
         (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
         (var-lookup 't55)))
       1
       16)
      (aligned 1 0))
     'int16
     16)
    (sca-broadcast (int16_t (bv #x0040 16)) 16))
   (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
template:
  (vv-mpy-add ... #<load-data> '(1) (! x?$405) (! x?$406) (! x?$407) 'int32)
axioms:
  '()
optimized-halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-mul
    (vec-cast
     (load
      (buffer input1 'uint8)
      (ramp
       (sca-add
        (sca-mul output.s0.x.x 16)
        (sca-add
         (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
         (var-lookup 't55)))
       1
       16)
      (aligned 1 0))
     'int16
     16)
    (sca-broadcast (int16_t (bv #x0040 16)) 16))
   (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
optimized-template:
  (vv-mpy-add ... #<load-data> '(1) (! x?$405) (! x?$406) (! x?$407) 'int32)
optimized Halide 0:
  (int32_t
 (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))))
optimized x86 0:
  (int32_t
 (ite* (⊢ (&& x?$407 (! (&& (! x?$405) (! x?$407)))) (ite x?$405 (bvadd (bvmul (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 32)) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 32))) (ite x?$406 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$406 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (bvmul (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 32)) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$406 (bv #x00000000 32) (bv #x00000001 32))))) (bvmul (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 32)) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$406 (bv #x00000000 32) (bv #x00000001 32)))))))) (⊢ (|| (&& (! x?$405) (! x?$407)) (&& (! x?$407) (! (&& (! x?$405) (! x?$407))))) (bvashr (ite x?$405 (bvadd (bvmul (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 32)) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 32))) (ite x?$406 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$406 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (bvmul (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 32)) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$406 (bv #x00000000 32) (bv #x00000001 32))))) (bvmul (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 32)) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$406 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000001 32)))))
run-x86-synthesizer
halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-mul
    (vec-cast
     (load
      (buffer input1 'uint8)
      (ramp
       (sca-add
        (sca-mul output.s0.x.x 16)
        (sca-add
         (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
         (var-lookup 't55)))
       1
       16)
      (aligned 1 0))
     'int16
     16)
    (sca-broadcast (int16_t (bv #x0040 16)) 16))
   (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
template:
  (vs-mpy-add
 ...
 #<load-data>
 (list (int16_t (ite x?$484 input1_multiplier (bv #x0040 16))))
 #f
 #f
 #f
 'int32)
axioms:
  '()
optimized-halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-mul
    (vec-cast
     (load
      (buffer input1 'uint8)
      (ramp
       (sca-add
        (sca-mul output.s0.x.x 16)
        (sca-add
         (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
         (var-lookup 't55)))
       1
       16)
      (aligned 1 0))
     'int16
     16)
    (sca-broadcast (int16_t (bv #x0040 16)) 16))
   (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
optimized-template:
  (vs-mpy-add
 ...
 #<load-data>
 (list (int16_t (ite x?$484 input1_multiplier (bv #x0040 16))))
 #f
 #f
 #f
 'int32)
optimized Halide 0:
  (int32_t
 (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))))
optimized x86 0:
  (int32_t
 (bvmul (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 32)) (sign-extend (ite x?$484 input1_multiplier (bv #x0040 16)) (bitvector 32))))
run-x86-synthesizer
halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-mul
    (vec-cast
     (load
      (buffer input1 'uint8)
      (ramp
       (sca-add
        (sca-mul output.s0.x.x 16)
        (sca-add
         (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
         (var-lookup 't55)))
       1
       16)
      (aligned 1 0))
     'int16
     16)
    (sca-broadcast (int16_t (bv #x0040 16)) 16))
   (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
template:
  (vv-mpy-add ... #<load-data> '(1) (! x?$488) (! x?$489) (! x?$490) 'int32)
axioms:
  '()
optimized-halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-mul
    (vec-cast
     (load
      (buffer input1 'uint8)
      (ramp
       (sca-add
        (sca-mul output.s0.x.x 16)
        (sca-add
         (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
         (var-lookup 't55)))
       1
       16)
      (aligned 1 0))
     'int16
     16)
    (sca-broadcast (int16_t (bv #x0040 16)) 16))
   (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
optimized-template:
  (vv-mpy-add ... #<load-data> '(1) (! x?$488) (! x?$489) (! x?$490) 'int32)
optimized Halide 0:
  (int32_t
 (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))))
optimized x86 0:
  (int32_t
 (ite* (⊢ (&& x?$490 (! (&& (! x?$488) (! x?$490)))) (ite x?$488 (bvadd (bvmul (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 32)) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 32))) (ite x?$489 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$489 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (bvmul (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 32)) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$489 (bv #x00000000 32) (bv #x00000001 32))))) (bvmul (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 32)) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$489 (bv #x00000000 32) (bv #x00000001 32)))))))) (⊢ (|| (&& (! x?$488) (! x?$490)) (&& (! x?$490) (! (&& (! x?$488) (! x?$490))))) (bvashr (ite x?$488 (bvadd (bvmul (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 32)) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 32))) (ite x?$489 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$489 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (bvmul (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 32)) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$489 (bv #x00000000 32) (bv #x00000001 32))))) (bvmul (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 32)) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$489 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000001 32)))))
run-x86-synthesizer
halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-mul
    (vec-cast
     (load
      (buffer input1 'uint8)
      (ramp
       (sca-add
        (sca-mul output.s0.x.x 16)
        (sca-add
         (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
         (var-lookup 't55)))
       1
       16)
      (aligned 1 0))
     'int16
     16)
    (sca-broadcast (int16_t (bv #x0040 16)) 16))
   (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
template:
  (cast ... (broadcast ... (int16_t input1_multiplier)) 'int32 x?$324)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-mul
    (vec-cast
     (load
      (buffer input1 'uint8)
      (ramp
       (sca-add
        (sca-mul output.s0.x.x 16)
        (sca-add
         (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
         (var-lookup 't55)))
       1
       16)
      (aligned 1 0))
     'int16
     16)
    (sca-broadcast (int16_t (bv #x0040 16)) 16))
   (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
  'int32
  16)
 (vec-cast #<abstr-halide-expr> 'int32 16))
optimized-template:
  (cast ... #<abstr-expr> 'int32 x?$324)
optimized Halide 0:
  (int32_t
 (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend (app abstr-vals$491 0) (bitvector 32))))
optimized x86 0:
  (int32_t (sign-extend (app abstr-vals$491 0) (bitvector 32)))
run-x86-synthesizer
halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-mul
    (vec-cast
     (load
      (buffer input1 'uint8)
      (ramp
       (sca-add
        (sca-mul output.s0.x.x 16)
        (sca-add
         (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
         (var-lookup 't55)))
       1
       16)
      (aligned 1 0))
     'int16
     16)
    (sca-broadcast (int16_t (bv #x0040 16)) 16))
   (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
template:
  (vs-mpy-add
 ...
 (broadcast ... (int16_t input1_multiplier))
 (list (int16_t (ite x?$483 input1_multiplier (bv #x0040 16))))
 #f
 #f
 #f
 'int32)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-mul
    (vec-cast
     (load
      (buffer input1 'uint8)
      (ramp
       (sca-add
        (sca-mul output.s0.x.x 16)
        (sca-add
         (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
         (var-lookup 't55)))
       1
       16)
      (aligned 1 0))
     'int16
     16)
    (sca-broadcast (int16_t (bv #x0040 16)) 16))
   (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
  'int32
  16)
 (vec-cast #<abstr-halide-expr> 'int32 16))
optimized-template:
  (vs-mpy-add
 ...
 #<abstr-expr>
 (list (int16_t (ite x?$483 input1_multiplier (bv #x0040 16))))
 #f
 #f
 #f
 'int32)
optimized Halide 0:
  (int32_t
 (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend (app abstr-vals$492 0) (bitvector 32))))
optimized x86 0:
  (int32_t
 (bvmul (sign-extend (app abstr-vals$492 0) (bitvector 32)) (sign-extend (ite x?$483 input1_multiplier (bv #x0040 16)) (bitvector 32))))
run-x86-synthesizer
halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-mul
    (vec-cast
     (load
      (buffer input1 'uint8)
      (ramp
       (sca-add
        (sca-mul output.s0.x.x 16)
        (sca-add
         (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
         (var-lookup 't55)))
       1
       16)
      (aligned 1 0))
     'int16
     16)
    (sca-broadcast (int16_t (bv #x0040 16)) 16))
   (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
template:
  (vv-mpy-add
 ...
 (broadcast ... (int16_t input1_multiplier))
 '(1)
 (! x?$485)
 (! x?$486)
 (! x?$487)
 'int32)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-mul
    (vec-cast
     (load
      (buffer input1 'uint8)
      (ramp
       (sca-add
        (sca-mul output.s0.x.x 16)
        (sca-add
         (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
         (var-lookup 't55)))
       1
       16)
      (aligned 1 0))
     'int16
     16)
    (sca-broadcast (int16_t (bv #x0040 16)) 16))
   (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
  'int32
  16)
 (vec-cast #<abstr-halide-expr> 'int32 16))
optimized-template:
  (vv-mpy-add ... #<abstr-expr> '(1) (! x?$485) (! x?$486) (! x?$487) 'int32)
optimized Halide 0:
  (int32_t
 (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend (app abstr-vals$493 0) (bitvector 32))))
optimized x86 0:
  (int32_t
 (ite* (⊢ (&& x?$487 (! (&& (! x?$485) (! x?$487)))) (ite x?$485 (bvadd (bvmul (sign-extend (app abstr-vals$493 0) (bitvector 32)) (sign-extend (app abstr-vals$493 1) (bitvector 32))) (ite x?$486 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$486 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (bvmul (sign-extend (app abstr-vals$493 0) (bitvector 32)) (sign-extend (app abstr-vals$493 1) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$486 (bv #x00000000 32) (bv #x00000001 32))))) (bvmul (sign-extend (app abstr-vals$493 0) (bitvector 32)) (sign-extend (app abstr-vals$493 1) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$486 (bv #x00000000 32) (bv #x00000001 32)))))))) (⊢ (|| (&& (! x?$485) (! x?$487)) (&& (! x?$487) (! (&& (! x?$485) (! x?$487))))) (bvashr (ite x?$485 (bvadd (bvmul (sign-extend (app abstr-vals$493 0) (bitvector 32)) (sign-extend (app abstr-vals$493 1) (bitvector 32))) (ite x?$486 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$486 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (bvmul (sign-extend (app abstr-vals$493 0) (bitvector 32)) (sign-extend (app abstr-vals$493 1) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$486 (bv #x00000000 32) (bv #x00000001 32))))) (bvmul (sign-extend (app abstr-vals$493 0) (bitvector 32)) (sign-extend (app abstr-vals$493 1) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$486 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000001 32)))))
run-x86-synthesizer
halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-mul
    (vec-cast
     (load
      (buffer input1 'uint8)
      (ramp
       (sca-add
        (sca-mul output.s0.x.x 16)
        (sca-add
         (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
         (var-lookup 't55)))
       1
       16)
      (aligned 1 0))
     'int16
     16)
    (sca-broadcast (int16_t (bv #x0040 16)) 16))
   (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
template:
  (vs-mpy-add
 ...
 (combine
  (vs-mpy-add ... #<load-data> (list (int16_t (bv #x0040 16))) #f #f #f 'int16)
  (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
 (list
  (sca-mul
   (sca-cast (int8_t (bv #x01 8)) 'int16)
   (sca-cast
    (union [(&& (! xi?$322) (! xi?$323)) #(struct:int8_t (bv #x01 8))] [(|| xi?$322 (&& xi?$323 (! xi?$322))) #(struct:int16_t
                                                                                                                (ite* (⊢ xi?$322 input1_multiplier) (⊢ (&& xi?$323 (! xi?$322)) (bv #x0040 16))))])
    'int16))
  (sca-mul
   (sca-cast (int8_t (bv #x01 8)) 'int16)
   (sca-cast
    (union [(&& (! xi?$322) (! xi?$323)) #(struct:int8_t (bv #x01 8))] [(|| xi?$322 (&& xi?$323 (! xi?$322))) #(struct:int16_t
                                                                                                                (ite* (⊢ xi?$322 input1_multiplier) (⊢ (&& xi?$323 (! xi?$322)) (bv #x0040 16))))])
    'int16)))
 #f
 #f
 #f
 'int16)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$494 idx) (bv #x3fc0 16)) (bvsle (bv #x0000 16) (app abstr-vals$494 idx))))
 (forall (idx) (bvsle (app abstr-vals$495 idx) (bv #x7fc0 16))))
optimized-halide-expr:
  (vec-mul
 (vec-cast (vec-add #<abstr-halide-expr> #<abstr-halide-expr>) 'int32 16)
 (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
optimized-template:
  (vs-mpy-add
 ...
 (combine #<abstr-expr> #<abstr-expr>)
 (list
  (sca-mul
   (sca-cast (int8_t (bv #x01 8)) 'int16)
   (sca-cast
    (union [(&& (! xi?$322) (! xi?$323)) #(struct:int8_t (bv #x01 8))] [(|| xi?$322 (&& xi?$323 (! xi?$322))) #(struct:int16_t
                                                                                                                (ite* (⊢ xi?$322 input1_multiplier) (⊢ (&& xi?$323 (! xi?$322)) (bv #x0040 16))))])
    'int16))
  (sca-mul
   (sca-cast (int8_t (bv #x01 8)) 'int16)
   (sca-cast
    (union [(&& (! xi?$322) (! xi?$323)) #(struct:int8_t (bv #x01 8))] [(|| xi?$322 (&& xi?$323 (! xi?$322))) #(struct:int16_t
                                                                                                                (ite* (⊢ xi?$322 input1_multiplier) (⊢ (&& xi?$323 (! xi?$322)) (bv #x0040 16))))])
    'int16)))
 #f
 #f
 #f
 'int16)
optimized Halide 0:
  (int32_t
 (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (bvadd (app abstr-vals$494 0) (app abstr-vals$495 0)) (bitvector 32))))
optimized x86 0:
  (int16_t
 (bvadd (bvmul (app abstr-vals$495 0) (ite* (⊢ (&& (! xi?$322) (! xi?$323)) (bv #x0001 16)) (⊢ (|| xi?$322 (&& xi?$323 (! xi?$322))) (ite* (⊢ xi?$322 input1_multiplier) (⊢ (&& xi?$323 (! xi?$322)) (bv #x0040 16)))))) (bvmul (app abstr-vals$494 0) (ite* (⊢ (&& (! xi?$322) (! xi?$323)) (bv #x0001 16)) (⊢ (|| xi?$322 (&& xi?$323 (! xi?$322))) (ite* (⊢ xi?$322 input1_multiplier) (⊢ (&& xi?$323 (! xi?$322)) (bv #x0040 16))))))))
Ran synthesizer for 58 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-mul
    (vec-cast
     (load
      (buffer input1 'uint8)
      (ramp
       (sca-add
        (sca-mul output.s0.x.x 16)
        (sca-add
         (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
         (var-lookup 't55)))
       1
       16)
      (aligned 1 0))
     'int16
     16)
    (sca-broadcast (int16_t (bv #x0040 16)) 16))
   (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
template:
  (cast
 ...
 (vs-mpy-add
  ...
  (combine
   (vs-mpy-add
    ...
    #<load-data>
    (list (int16_t (bv #x0040 16)))
    #f
    #f
    #f
    'int16)
   (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
  (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
  #f
  #f
  #f
  'int16)
 'int32
 x?$318)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-mul
 (vec-cast #<abstr-halide-expr> 'int32 16)
 (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
optimized-template:
  (cast ... #<abstr-expr> 'int32 x?$318)
optimized Halide 0:
  (int32_t
 (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (app abstr-vals$496 0) (bitvector 32))))
optimized x86 0:
  (int32_t (sign-extend (app abstr-vals$496 0) (bitvector 32)))
run-x86-synthesizer
halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-mul
    (vec-cast
     (load
      (buffer input1 'uint8)
      (ramp
       (sca-add
        (sca-mul output.s0.x.x 16)
        (sca-add
         (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
         (var-lookup 't55)))
       1
       16)
      (aligned 1 0))
     'int16
     16)
    (sca-broadcast (int16_t (bv #x0040 16)) 16))
   (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
template:
  (vs-mpy-add
 ...
 (vs-mpy-add
  ...
  (combine
   (vs-mpy-add
    ...
    #<load-data>
    (list (int16_t (bv #x0040 16)))
    #f
    #f
    #f
    'int16)
   (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
  (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
  #f
  #f
  #f
  'int16)
 (list (int16_t (ite x?$400 input1_multiplier (bv #x0040 16))))
 #f
 #f
 #f
 'int32)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-mul
 (vec-cast #<abstr-halide-expr> 'int32 16)
 (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
optimized-template:
  (vs-mpy-add
 ...
 #<abstr-expr>
 (list (int16_t (ite x?$400 input1_multiplier (bv #x0040 16))))
 #f
 #f
 #f
 'int32)
optimized Halide 0:
  (int32_t
 (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (app abstr-vals$497 0) (bitvector 32))))
optimized x86 0:
  (int32_t
 (bvmul (sign-extend (app abstr-vals$497 0) (bitvector 32)) (sign-extend (ite x?$400 input1_multiplier (bv #x0040 16)) (bitvector 32))))
Ran synthesizer for 78 ms
(model
 [x?$400 #t])
(vec-mul
 (vec-cast #<abstr-halide-expr> 'int32 16)
 (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
(vs-mpy-add
 ...
 (vs-mpy-add
  ...
  (combine
   (vs-mpy-add
    ...
    #<load-data>
    (list (int16_t (bv #x0040 16)))
    #f
    #f
    #f
    'int16)
   (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
  (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
  #f
  #f
  #f
  'int16)
 (list (int16_t input1_multiplier))
 #f
 #f
 #f
 'int32)
Ran bounds analysis for 205 ms
Ran bounds analysis for 179 ms
"Success?"
#t
(vs-mpy-add ... (vs-mpy-add ... (combine (vs-mpy-add ... #<load-data> (list (int16_t (bv #x0040 16))) #f #f #f 'int16) (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))))) (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8))) #f #f #f 'int16) (list (int16_t input1_multiplier)) #f #f #f 'int32)
"Building Expr:"
(load
 (buffer input2 'uint8)
 (ramp
  (sca-add
   (sca-mul output.s0.x.x 16)
   (sca-add
    (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
    (var-lookup 't56)))
  1
  16)
 (aligned 1 0))
"Fold templates"
'()
here()

"Replace templates"
'()
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (load
 (buffer input2 'uint8)
 (ramp
  (sca-add
   (sca-mul output.s0.x.x 16)
   (sca-add
    (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
    (var-lookup 't56)))
  1
  16)
 (aligned 1 0))
template:
  #<load-data>
axioms:
  '()
optimized-halide-expr:
  (load
 (buffer input2 'uint8)
 (ramp
  (sca-add
   (sca-mul output.s0.x.x 16)
   (sca-add
    (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
    (var-lookup 't56)))
  1
  16)
 (aligned 1 0))
optimized-template:
  #<load-data>
optimized Halide 0:
  (uint8_t
 (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))))
optimized x86 0:
  (uint8_t
 (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))))
Ran synthesizer for 23 ms
(model
 [idx$499 0])
(load
 (buffer input2 'uint8)
 (ramp
  (sca-add
   (sca-mul output.s0.x.x 16)
   (sca-add
    (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
    (var-lookup 't56)))
  1
  16)
 (aligned 1 0))
#<load-data>
Ran bounds analysis for 21 ms
Ran bounds analysis for 14 ms
"Extended success?"
#t
#<load-data>
"Building Expr:"
(vec-cast
 (load
  (buffer input2 'uint8)
  (ramp
   (sca-add
    (sca-mul output.s0.x.x 16)
    (sca-add
     (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
     (var-lookup 't56)))
   1
   16)
  (aligned 1 0))
 'int16
 16)
"Fold templates"
'(#<load-data>)
here(#<load-data>)

"Replace templates"
'()
run-x86-synthesizer
halide-expr:
  (vec-cast
 (load
  (buffer input2 'uint8)
  (ramp
   (sca-add
    (sca-mul output.s0.x.x 16)
    (sca-add
     (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
     (var-lookup 't56)))
   1
   16)
  (aligned 1 0))
 'int16
 16)
template:
  #<load-data>
axioms:
  '()
optimized-halide-expr:
  (vec-cast
 (load
  (buffer input2 'uint8)
  (ramp
   (sca-add
    (sca-mul output.s0.x.x 16)
    (sca-add
     (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
     (var-lookup 't56)))
   1
   16)
  (aligned 1 0))
 'int16
 16)
optimized-template:
  #<load-data>
optimized Halide 0:
  (int16_t
 (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16)))
optimized x86 0:
  (uint8_t
 (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))))
Ran synthesizer for 1 ms
(unsat)
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (vec-cast
 (load
  (buffer input2 'uint8)
  (ramp
   (sca-add
    (sca-mul output.s0.x.x 16)
    (sca-add
     (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
     (var-lookup 't56)))
   1
   16)
  (aligned 1 0))
 'int16
 16)
template:
  (cast ... #<load-data> 'int16 #f)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-cast #<abstr-halide-expr> 'int16 16)
optimized-template:
  (cast ... #<abstr-expr> 'int16 #f)
optimized Halide 0:
  (int16_t (zero-extend (app abstr-vals$550 0) (bitvector 16)))
optimized x86 0:
  (int16_t (zero-extend (app abstr-vals$550 0) (bitvector 16)))
Ran synthesizer for 19 ms
(model)
(vec-cast #<abstr-halide-expr> 'int16 16)
(cast ... #<load-data> 'int16 #f)
Ran bounds analysis for 24 ms
Ran bounds analysis for 15 ms
"Extended success?"
#t
(cast ... #<load-data> 'int16 #f)
"Building Expr:"
(vec-mul
 (vec-cast
  (load
   (buffer input2 'uint8)
   (ramp
    (sca-add
     (sca-mul output.s0.x.x 16)
     (sca-add
      (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
      (var-lookup 't56)))
    1
    16)
   (aligned 1 0))
  'int16
  16)
 (sca-broadcast (int16_t (bv #x0040 16)) 16))
"Fold templates"
(list #<load-data> (cast ... #<load-data> 'int16 x?$552))
here(#<load-data> #(struct:cast ... #<load-data> int16 x?$552))

(list (vs-mpy-add ... #<load-data> (list (int16_t (bv #x0040 16))) #f #f #f 'int16) (vs-mpy-add ... #<load-data> (list (int16_t (bv #x0040 16))) #f #f #f 'int16) (vv-mpy-add ... #<load-data> '(1) (! x?$653) (! x?$654) (! x?$655) 'int16) (vv-mpy-add ... #<load-data> '(1) (! x?$656) (! x?$657) (! x?$658) 'int16))
"Replace templates"
(list
 (vs-mpy-add ... #<load-data> (list (int16_t (bv #x0040 16))) #f #f #f 'int16)
 (vs-mpy-add ... #<load-data> (list (int16_t (bv #x0040 16))) #f #f #f 'int16)
 (vv-mpy-add ... #<load-data> '(1) (! x?$653) (! x?$654) (! x?$655) 'int16)
 (vv-mpy-add ... #<load-data> '(1) (! x?$656) (! x?$657) (! x?$658) 'int16))
run-x86-synthesizer
halide-expr:
  (vec-mul
 (vec-cast
  (load
   (buffer input2 'uint8)
   (ramp
    (sca-add
     (sca-mul output.s0.x.x 16)
     (sca-add
      (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
      (var-lookup 't56)))
    1
    16)
   (aligned 1 0))
  'int16
  16)
 (sca-broadcast (int16_t (bv #x0040 16)) 16))
template:
  #<load-data>
axioms:
  '()
optimized-halide-expr:
  (vec-mul
 (vec-cast
  (load
   (buffer input2 'uint8)
   (ramp
    (sca-add
     (sca-mul output.s0.x.x 16)
     (sca-add
      (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
      (var-lookup 't56)))
    1
    16)
   (aligned 1 0))
  'int16
  16)
 (sca-broadcast (int16_t (bv #x0040 16)) 16))
optimized-template:
  #<load-data>
optimized Halide 0:
  (int16_t
 (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))))
optimized x86 0:
  (uint8_t
 (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))))
Ran synthesizer for 4 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-mul
 (vec-cast
  (load
   (buffer input2 'uint8)
   (ramp
    (sca-add
     (sca-mul output.s0.x.x 16)
     (sca-add
      (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
      (var-lookup 't56)))
    1
    16)
   (aligned 1 0))
  'int16
  16)
 (sca-broadcast (int16_t (bv #x0040 16)) 16))
template:
  (cast ... #<load-data> 'int16 x?$552)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-mul
 (vec-cast #<abstr-halide-expr> 'int16 16)
 (sca-broadcast (int16_t (bv #x0040 16)) 16))
optimized-template:
  (cast ... #<abstr-expr> 'int16 x?$552)
optimized Halide 0:
  (int16_t
 (bvmul (bv #x0040 16) (zero-extend (app abstr-vals$659 0) (bitvector 16))))
optimized x86 0:
  (int16_t (zero-extend (app abstr-vals$659 0) (bitvector 16)))
Ran synthesizer for 54 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-mul
 (vec-cast
  (load
   (buffer input2 'uint8)
   (ramp
    (sca-add
     (sca-mul output.s0.x.x 16)
     (sca-add
      (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
      (var-lookup 't56)))
    1
    16)
   (aligned 1 0))
  'int16
  16)
 (sca-broadcast (int16_t (bv #x0040 16)) 16))
template:
  (vs-mpy-add ... #<load-data> (list (int16_t (bv #x0040 16))) #f #f #f 'int16)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-mul
 (vec-cast #<abstr-halide-expr> 'int16 16)
 (sca-broadcast (int16_t (bv #x0040 16)) 16))
optimized-template:
  (vs-mpy-add ... #<abstr-expr> (list (int16_t (bv #x0040 16))) #f #f #f 'int16)
optimized Halide 0:
  (int16_t
 (bvmul (bv #x0040 16) (zero-extend (app abstr-vals$660 0) (bitvector 16))))
optimized x86 0:
  (int16_t
 (bvmul (bv #x0040 16) (zero-extend (app abstr-vals$660 0) (bitvector 16))))
Ran synthesizer for 19 ms
(model)
(vec-mul
 (vec-cast #<abstr-halide-expr> 'int16 16)
 (sca-broadcast (int16_t (bv #x0040 16)) 16))
(vs-mpy-add ... #<load-data> (list (int16_t (bv #x0040 16))) #f #f #f 'int16)
Ran bounds analysis for 27 ms
Ran bounds analysis for 22 ms
"Success?"
#t
(vs-mpy-add ... #<load-data> (list (int16_t (bv #x0040 16))) #f #f #f 'int16)
"Building Expr:"
(sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16)
"Fold templates"
'()
here()

"Replace templates"
'()
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16)
template:
  (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))))
axioms:
  '()
optimized-halide-expr:
  (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16)
optimized-template:
  (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))))
optimized Halide 0:
  (int16_t (bvmul (bv #xffc0 16) t126))
optimized x86 0:
  (int16_t (bvmul (bv #xffc0 16) t126))
Ran synthesizer for 18 ms
(model)
(sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16)
(broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))))
Ran bounds analysis for 22 ms
Ran bounds analysis for 17 ms
"Extended success?"
#t
(broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))))
"Building Expr:"
(vec-add
 (vec-mul
  (vec-cast
   (load
    (buffer input2 'uint8)
    (ramp
     (sca-add
      (sca-mul output.s0.x.x 16)
      (sca-add
       (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
       (var-lookup 't56)))
     1
     16)
    (aligned 1 0))
   'int16
   16)
  (sca-broadcast (int16_t (bv #x0040 16)) 16))
 (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
"Fold templates"
(list
 #<load-data>
 (vs-mpy-add
  ...
  #<load-data>
  (list
   (int16_t (bv #x0040 16))
   (union [x?$665 #(struct:int16_t (bv #x0040 16))] [(! x?$665) #(struct:int8_t
                                                                  (bv #x01 8))]))
  #f
  #f
  #f
  'int16)
 (vs-mpy-add
  ...
  #<load-data>
  (list (int16_t (bv #x0040 16)))
  #f
  x?$663
  #f
  'int16)
 (vs-mpy-add
  ...
  (combine
   (vs-mpy-add
    ...
    #<load-data>
    (list (int16_t (bv #x0040 16)))
    #f
    #f
    #f
    'int16)
   (union [x?$666 #(struct:vs-mpy-add
                    ...
                    #<load-data>
                    (#(struct:int16_t (bv #x0040 16)))
                    #f
                    #f
                    #f
                    int16)] [(! x?$666) #(struct:broadcast
                                          ...
                                          #(struct:sca-mul
                                            #(struct:int16_t t126)
                                            #(struct:int16_t (bv #xffc0 16))))]))
  (list (int16_t (bv #x0040 16)) (int8_t (bv #x01 8)))
  #f
  #f
  #f
  'int16))
here(#<load-data> #(struct:vs-mpy-add ... #<load-data> (#(struct:int16_t (bv #x0040 16)) (union #:size 2 #:hash 1504666300012)) #f #f #f int16) #(struct:vs-mpy-add ... #<load-data> (#(struct:int16_t (bv #x0040 16))) #f x?$663 #f int16) #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<load-data> (#(struct:int16_t (bv #x0040 16))) #f #f #f int16) (union #:size 2 #:hash 373854673683)> (#(struct:int16_t (bv #x0040 16)) #(struct:int8_t (bv #x01 8))) #f #f #f int16))

"Replace templates"
'()
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-mul
  (vec-cast
   (load
    (buffer input2 'uint8)
    (ramp
     (sca-add
      (sca-mul output.s0.x.x 16)
      (sca-add
       (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
       (var-lookup 't56)))
     1
     16)
    (aligned 1 0))
   'int16
   16)
  (sca-broadcast (int16_t (bv #x0040 16)) 16))
 (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
template:
  #<load-data>
axioms:
  '()
optimized-halide-expr:
  (vec-add
 (vec-mul
  (vec-cast
   (load
    (buffer input2 'uint8)
    (ramp
     (sca-add
      (sca-mul output.s0.x.x 16)
      (sca-add
       (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
       (var-lookup 't56)))
     1
     16)
    (aligned 1 0))
   'int16
   16)
  (sca-broadcast (int16_t (bv #x0040 16)) 16))
 (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
optimized-template:
  #<load-data>
optimized Halide 0:
  (int16_t
 (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)))
optimized x86 0:
  (uint8_t
 (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))))
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-mul
  (vec-cast
   (load
    (buffer input2 'uint8)
    (ramp
     (sca-add
      (sca-mul output.s0.x.x 16)
      (sca-add
       (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
       (var-lookup 't56)))
     1
     16)
    (aligned 1 0))
   'int16
   16)
  (sca-broadcast (int16_t (bv #x0040 16)) 16))
 (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
template:
  (vs-mpy-add
 ...
 #<load-data>
 (list
  (int16_t (bv #x0040 16))
  (union [x?$665 #(struct:int16_t (bv #x0040 16))] [(! x?$665) #(struct:int8_t
                                                                 (bv #x01 8))]))
 #f
 #f
 #f
 'int16)
axioms:
  '()
optimized-halide-expr:
  (vec-add
 (vec-mul
  (vec-cast
   (load
    (buffer input2 'uint8)
    (ramp
     (sca-add
      (sca-mul output.s0.x.x 16)
      (sca-add
       (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
       (var-lookup 't56)))
     1
     16)
    (aligned 1 0))
   'int16
   16)
  (sca-broadcast (int16_t (bv #x0040 16)) 16))
 (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
optimized-template:
  (vs-mpy-add
 ...
 #<load-data>
 (list
  (int16_t (bv #x0040 16))
  (union [x?$665 #(struct:int16_t (bv #x0040 16))] [(! x?$665) #(struct:int8_t
                                                                 (bv #x01 8))]))
 #f
 #f
 #f
 'int16)
optimized Halide 0:
  (int16_t
 (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)))
optimized x86 0:
  (int16_t
 (bvmul (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16)) (ite x?$665 (bv #x0080 16) (bv #x0041 16))))
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-mul
  (vec-cast
   (load
    (buffer input2 'uint8)
    (ramp
     (sca-add
      (sca-mul output.s0.x.x 16)
      (sca-add
       (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
       (var-lookup 't56)))
     1
     16)
    (aligned 1 0))
   'int16
   16)
  (sca-broadcast (int16_t (bv #x0040 16)) 16))
 (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
template:
  (vs-mpy-add
 ...
 #<load-data>
 (list (int16_t (bv #x0040 16)))
 #f
 x?$663
 #f
 'int16)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-add
 (vec-mul
  (vec-cast #<abstr-halide-expr> 'int16 16)
  (sca-broadcast (int16_t (bv #x0040 16)) 16))
 (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
optimized-template:
  (vs-mpy-add
 ...
 #<abstr-expr>
 (list (int16_t (bv #x0040 16)))
 #f
 x?$663
 #f
 'int16)
optimized Halide 0:
  (int16_t
 (bvadd (bvmul (bv #xffc0 16) t126) (bvmul (bv #x0040 16) (zero-extend (app abstr-vals$742 0) (bitvector 16)))))
optimized x86 0:
  (int16_t
 (bvadd (bvmul (bv #x0040 16) (zero-extend (app abstr-vals$742 0) (bitvector 16))) (ite x?$663 (bv #x0001 16) (bv #x0000 16))))
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-mul
  (vec-cast
   (load
    (buffer input2 'uint8)
    (ramp
     (sca-add
      (sca-mul output.s0.x.x 16)
      (sca-add
       (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
       (var-lookup 't56)))
     1
     16)
    (aligned 1 0))
   'int16
   16)
  (sca-broadcast (int16_t (bv #x0040 16)) 16))
 (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
template:
  (vs-mpy-add
 ...
 (combine
  (vs-mpy-add ... #<load-data> (list (int16_t (bv #x0040 16))) #f #f #f 'int16)
  (union [x?$666 #(struct:vs-mpy-add
                   ...
                   #<load-data>
                   (#(struct:int16_t (bv #x0040 16)))
                   #f
                   #f
                   #f
                   int16)] [(! x?$666) #(struct:broadcast
                                         ...
                                         #(struct:sca-mul
                                           #(struct:int16_t t126)
                                           #(struct:int16_t (bv #xffc0 16))))]))
 (list (int16_t (bv #x0040 16)) (int8_t (bv #x01 8)))
 #f
 #f
 #f
 'int16)
axioms:
  (union [x?$666 ((forall (idx) (&& (bvsle (app abstr-vals$743 idx) (bv #x3fc0 16)) (bvsle (bv #x0000 16) (app abstr-vals$743 idx))))
                (forall (idx) (&& (bvsle (app abstr-vals$743 idx) (bv #x3fc0 16)) (bvsle (bv #x0000 16) (app abstr-vals$743 idx)))))] [(! x?$666) ((forall (idx) (&& (bvsle (app abstr-vals$743 idx) (bv #x3fc0 16)) (bvsle (bv #x0000 16) (app abstr-vals$743 idx)))))])
optimized-halide-expr:
  (vec-add
 #<abstr-halide-expr>
 (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
optimized-template:
  (vs-mpy-add
 ...
 (combine
  #<abstr-expr>
  (union [x?$666 #<abstr-expr>] [(! x?$666) #(struct:broadcast
                                              ...
                                              #(struct:sca-mul
                                                #(struct:int16_t t126)
                                                #(struct:int16_t
                                                  (bv #xffc0 16))))]))
 (list (int16_t (bv #x0040 16)) (int8_t (bv #x01 8)))
 #f
 #f
 #f
 'int16)
optimized Halide 0:
  (int16_t (bvadd (bvmul (bv #xffc0 16) t126) (app abstr-vals$743 0)))
optimized x86 0:
  (int16_t
 (bvadd (bvmul (bv #x0040 16) (ite c$668 (app abstr-vals$743 idx$667) (ite x?$666 (app abstr-vals$743 idx$667) (bvmul (bv #xffc0 16) t126)))) (ite c$670 (app abstr-vals$743 idx$669) (ite x?$666 (app abstr-vals$743 idx$669) (bvmul (bv #xffc0 16) t126)))))
Ran synthesizer for 131 ms
(unsat)
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-mul
  (vec-cast
   (load
    (buffer input2 'uint8)
    (ramp
     (sca-add
      (sca-mul output.s0.x.x 16)
      (sca-add
       (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
       (var-lookup 't56)))
     1
     16)
    (aligned 1 0))
   'int16
   16)
  (sca-broadcast (int16_t (bv #x0040 16)) 16))
 (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
template:
  (vs-mpy-add
 ...
 (union [x?$744 #(struct:vs-mpy-add
                  ...
                  #<load-data>
                  (#(struct:int16_t (bv #x0040 16)))
                  #f
                  #f
                  #f
                  int16)] [(! x?$744) #(struct:broadcast
                                        ...
                                        #(struct:sca-mul
                                          #(struct:int16_t t126)
                                          #(struct:int16_t (bv #xffc0 16))))])
 (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
 (! x?$745)
 (! x?$746)
 (! x?$747)
 'int16)
axioms:
  '()
optimized-halide-expr:
  (vec-add
 (vec-mul
  (vec-cast
   (load
    (buffer input2 'uint8)
    (ramp
     (sca-add
      (sca-mul output.s0.x.x 16)
      (sca-add
       (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
       (var-lookup 't56)))
     1
     16)
    (aligned 1 0))
   'int16
   16)
  (sca-broadcast (int16_t (bv #x0040 16)) 16))
 (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
optimized-template:
  (vs-mpy-add
 ...
 (union [x?$744 #(struct:vs-mpy-add
                  ...
                  #<load-data>
                  (#(struct:int16_t (bv #x0040 16)))
                  #f
                  #f
                  #f
                  int16)] [(! x?$744) #(struct:broadcast
                                        ...
                                        #(struct:sca-mul
                                          #(struct:int16_t t126)
                                          #(struct:int16_t (bv #xffc0 16))))])
 (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
 (! x?$745)
 (! x?$746)
 (! x?$747)
 'int16)
optimized Halide 0:
  (int16_t
 (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)))
optimized x86 0:
  (int16_t
 (ite* (⊢ (&& x?$747 (! (&& (! x?$745) (! x?$747)))) (ite x?$745 (bvadd (ite x?$744 (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (ite x?$745 (bvadd (ite x?$744 (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (ite x?$746 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$746 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (ite x?$744 (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bvadd (bv #x7fff 16) (bvneg (ite x?$746 (bv #x0000 16) (bv #x0001 16))))) (ite x?$744 (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bvadd (bv #x7fff 16) (bvneg (ite x?$746 (bv #x0000 16) (bv #x0001 16)))))))) (bvadd (ite x?$745 (bvadd (ite x?$744 (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (ite x?$746 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$746 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (ite x?$744 (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bvadd (bv #x7fff 16) (bvneg (ite x?$746 (bv #x0000 16) (bv #x0001 16))))) (ite x?$744 (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bvadd (bv #x7fff 16) (bvneg (ite x?$746 (bv #x0000 16) (bv #x0001 16))))))) (ite (bvsle (bvadd (bv #x8000 16) (bvneg (ite (bvsle (ite x?$745 (bvadd (ite x?$744 (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (ite x?$746 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$746 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (ite x?$744 (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bvadd (bv #x7fff 16) (bvneg (ite x?$746 (bv #x0000 16) (bv #x0001 16))))) (ite x?$744 (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bvadd (bv #x7fff 16) (bvneg (ite x?$746 (bv #x0000 16) (bv #x0001 16))))))) (bv #x0000 16)) (ite x?$745 (bvadd (ite x?$744 (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (ite x?$746 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$746 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (ite x?$744 (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bvadd (bv #x7fff 16) (bvneg (ite x?$746 (bv #x0000 16) (bv #x0001 16))))) (ite x?$744 (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bvadd (bv #x7fff 16) (bvneg (ite x?$746 (bv #x0000 16) (bv #x0001 16))))))) (bv #x0000 16)))) (ite (bvsle (ite x?$744 (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$745 (bvadd (ite x?$744 (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (ite x?$746 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$746 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (ite x?$744 (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bvadd (bv #x7fff 16) (bvneg (ite x?$746 (bv #x0000 16) (bv #x0001 16))))) (ite x?$744 (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bvadd (bv #x7fff 16) (bvneg (ite x?$746 (bv #x0000 16) (bv #x0001 16)))))))) (ite x?$745 (bvadd (ite x?$744 (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (ite x?$746 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$746 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (ite x?$744 (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bvadd (bv #x7fff 16) (bvneg (ite x?$746 (bv #x0000 16) (bv #x0001 16))))) (ite x?$744 (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bvadd (bv #x7fff 16) (bvneg (ite x?$746 (bv #x0000 16) (bv #x0001 16))))))) (bv #x0000 16))))) (ite x?$744 (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$745 (bvadd (ite x?$744 (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (ite x?$746 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$746 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (ite x?$744 (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bvadd (bv #x7fff 16) (bvneg (ite x?$746 (bv #x0000 16) (bv #x0001 16))))) (ite x?$744 (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bvadd (bv #x7fff 16) (bvneg (ite x?$746 (bv #x0000 16) (bv #x0001 16)))))))) (ite x?$745 (bvadd (ite x?$744 (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (ite x?$746 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$746 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (ite x?$744 (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bvadd (bv #x7fff 16) (bvneg (ite x?$746 (bv #x0000 16) (bv #x0001 16))))) (ite x?$744 (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bvadd (bv #x7fff 16) (bvneg (ite x?$746 (bv #x0000 16) (bv #x0001 16))))))) (bv #x0000 16)))))) (ite (bvsle (ite x?$744 (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$745 (bvadd (ite x?$744 (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (ite x?$746 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$746 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (ite x?$744 (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bvadd (bv #x7fff 16) (bvneg (ite x?$746 (bv #x0000 16) (bv #x0001 16))))) (ite x?$744 (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bvadd (bv #x7fff 16) (bvneg (ite x?$746 (bv #x0000 16) (bv #x0001 16)))))))) (ite x?$745 (bvadd (ite x?$744 (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (ite x?$746 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$746 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (ite x?$744 (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bvadd (bv #x7fff 16) (bvneg (ite x?$746 (bv #x0000 16) (bv #x0001 16))))) (ite x?$744 (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bvadd (bv #x7fff 16) (bvneg (ite x?$746 (bv #x0000 16) (bv #x0001 16))))))) (bv #x0000 16))))) (ite x?$744 (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$745 (bvadd (ite x?$744 (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (ite x?$746 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$746 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (ite x?$744 (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bvadd (bv #x7fff 16) (bvneg (ite x?$746 (bv #x0000 16) (bv #x0001 16))))) (ite x?$744 (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bvadd (bv #x7fff 16) (bvneg (ite x?$746 (bv #x0000 16) (bv #x0001 16)))))))) (ite x?$745 (bvadd (ite x?$744 (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (ite x?$746 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$746 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (ite x?$744 (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bvadd (bv #x7fff 16) (bvneg (ite x?$746 (bv #x0000 16) (bv #x0001 16))))) (ite x?$744 (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bvadd (bv #x7fff 16) (bvneg (ite x?$746 (bv #x0000 16) (bv #x0001 16))))))) (bv #x0000 16))))) (bvadd (bv #x8000 16) (bvneg (ite (bvsle (ite x?$745 (bvadd (ite x?$744 (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (ite x?$746 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$746 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (ite x?$744 (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bvadd (bv #x7fff 16) (bvneg (ite x?$746 (bv #x0000 16) (bv #x0001 16))))) (ite x?$744 (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bvadd (bv #x7fff 16) (bvneg (ite x?$746 (bv #x0000 16) (bv #x0001 16))))))) (bv #x0000 16)) (ite x?$745 (bvadd (ite x?$744 (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (ite x?$746 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$746 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (ite x?$744 (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bvadd (bv #x7fff 16) (bvneg (ite x?$746 (bv #x0000 16) (bv #x0001 16))))) (ite x?$744 (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bvadd (bv #x7fff 16) (bvneg (ite x?$746 (bv #x0000 16) (bv #x0001 16))))))) (bv #x0000 16)))))))) (⊢ (|| (&& (! x?$745) (! x?$747)) (&& (! x?$747) (! (&& (! x?$745) (! x?$747))))) (bvashr (ite x?$745 (bvadd (ite x?$744 (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (ite x?$745 (bvadd (ite x?$744 (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (ite x?$746 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$746 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (ite x?$744 (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bvadd (bv #x7fff 16) (bvneg (ite x?$746 (bv #x0000 16) (bv #x0001 16))))) (ite x?$744 (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bvadd (bv #x7fff 16) (bvneg (ite x?$746 (bv #x0000 16) (bv #x0001 16)))))))) (bvadd (ite x?$745 (bvadd (ite x?$744 (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (ite x?$746 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$746 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (ite x?$744 (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bvadd (bv #x7fff 16) (bvneg (ite x?$746 (bv #x0000 16) (bv #x0001 16))))) (ite x?$744 (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bvadd (bv #x7fff 16) (bvneg (ite x?$746 (bv #x0000 16) (bv #x0001 16))))))) (ite (bvsle (bvadd (bv #x8000 16) (bvneg (ite (bvsle (ite x?$745 (bvadd (ite x?$744 (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (ite x?$746 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$746 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (ite x?$744 (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bvadd (bv #x7fff 16) (bvneg (ite x?$746 (bv #x0000 16) (bv #x0001 16))))) (ite x?$744 (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bvadd (bv #x7fff 16) (bvneg (ite x?$746 (bv #x0000 16) (bv #x0001 16))))))) (bv #x0000 16)) (ite x?$745 (bvadd (ite x?$744 (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (ite x?$746 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$746 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (ite x?$744 (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bvadd (bv #x7fff 16) (bvneg (ite x?$746 (bv #x0000 16) (bv #x0001 16))))) (ite x?$744 (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bvadd (bv #x7fff 16) (bvneg (ite x?$746 (bv #x0000 16) (bv #x0001 16))))))) (bv #x0000 16)))) (ite (bvsle (ite x?$744 (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$745 (bvadd (ite x?$744 (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (ite x?$746 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$746 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (ite x?$744 (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bvadd (bv #x7fff 16) (bvneg (ite x?$746 (bv #x0000 16) (bv #x0001 16))))) (ite x?$744 (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bvadd (bv #x7fff 16) (bvneg (ite x?$746 (bv #x0000 16) (bv #x0001 16)))))))) (ite x?$745 (bvadd (ite x?$744 (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (ite x?$746 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$746 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (ite x?$744 (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bvadd (bv #x7fff 16) (bvneg (ite x?$746 (bv #x0000 16) (bv #x0001 16))))) (ite x?$744 (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bvadd (bv #x7fff 16) (bvneg (ite x?$746 (bv #x0000 16) (bv #x0001 16))))))) (bv #x0000 16))))) (ite x?$744 (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$745 (bvadd (ite x?$744 (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (ite x?$746 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$746 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (ite x?$744 (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bvadd (bv #x7fff 16) (bvneg (ite x?$746 (bv #x0000 16) (bv #x0001 16))))) (ite x?$744 (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bvadd (bv #x7fff 16) (bvneg (ite x?$746 (bv #x0000 16) (bv #x0001 16)))))))) (ite x?$745 (bvadd (ite x?$744 (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (ite x?$746 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$746 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (ite x?$744 (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bvadd (bv #x7fff 16) (bvneg (ite x?$746 (bv #x0000 16) (bv #x0001 16))))) (ite x?$744 (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bvadd (bv #x7fff 16) (bvneg (ite x?$746 (bv #x0000 16) (bv #x0001 16))))))) (bv #x0000 16)))))) (ite (bvsle (ite x?$744 (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$745 (bvadd (ite x?$744 (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (ite x?$746 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$746 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (ite x?$744 (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bvadd (bv #x7fff 16) (bvneg (ite x?$746 (bv #x0000 16) (bv #x0001 16))))) (ite x?$744 (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bvadd (bv #x7fff 16) (bvneg (ite x?$746 (bv #x0000 16) (bv #x0001 16)))))))) (ite x?$745 (bvadd (ite x?$744 (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (ite x?$746 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$746 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (ite x?$744 (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bvadd (bv #x7fff 16) (bvneg (ite x?$746 (bv #x0000 16) (bv #x0001 16))))) (ite x?$744 (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bvadd (bv #x7fff 16) (bvneg (ite x?$746 (bv #x0000 16) (bv #x0001 16))))))) (bv #x0000 16))))) (ite x?$744 (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$745 (bvadd (ite x?$744 (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (ite x?$746 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$746 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (ite x?$744 (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bvadd (bv #x7fff 16) (bvneg (ite x?$746 (bv #x0000 16) (bv #x0001 16))))) (ite x?$744 (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bvadd (bv #x7fff 16) (bvneg (ite x?$746 (bv #x0000 16) (bv #x0001 16)))))))) (ite x?$745 (bvadd (ite x?$744 (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (ite x?$746 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$746 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (ite x?$744 (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bvadd (bv #x7fff 16) (bvneg (ite x?$746 (bv #x0000 16) (bv #x0001 16))))) (ite x?$744 (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bvadd (bv #x7fff 16) (bvneg (ite x?$746 (bv #x0000 16) (bv #x0001 16))))))) (bv #x0000 16))))) (bvadd (bv #x8000 16) (bvneg (ite (bvsle (ite x?$745 (bvadd (ite x?$744 (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (ite x?$746 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$746 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (ite x?$744 (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bvadd (bv #x7fff 16) (bvneg (ite x?$746 (bv #x0000 16) (bv #x0001 16))))) (ite x?$744 (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bvadd (bv #x7fff 16) (bvneg (ite x?$746 (bv #x0000 16) (bv #x0001 16))))))) (bv #x0000 16)) (ite x?$745 (bvadd (ite x?$744 (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (ite x?$746 (bv #x0000 16) (bv #x0001 16))) (bvadd (ite x?$746 (bv #x0000 16) (bv #x0001 16)) (ite (bvsle (ite x?$744 (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bvadd (bv #x7fff 16) (bvneg (ite x?$746 (bv #x0000 16) (bv #x0001 16))))) (ite x?$744 (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bvadd (bv #x7fff 16) (bvneg (ite x?$746 (bv #x0000 16) (bv #x0001 16))))))) (bv #x0000 16))))))) (bv #x0001 16)))))
Ran synthesizer for 137 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-mul
  (vec-cast
   (load
    (buffer input2 'uint8)
    (ramp
     (sca-add
      (sca-mul output.s0.x.x 16)
      (sca-add
       (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
       (var-lookup 't56)))
     1
     16)
    (aligned 1 0))
   'int16
   16)
  (sca-broadcast (int16_t (bv #x0040 16)) 16))
 (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
template:
  (vs-mpy-add
 ...
 (combine
  (vs-mpy-add ... #<load-data> (list (int16_t (bv #x0040 16))) #f #f #f 'int16)
  (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
 (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
 #f
 #f
 #f
 'int16)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$798 idx) (bv #x3fc0 16)) (bvsle (bv #x0000 16) (app abstr-vals$798 idx))))
 (forall (idx) (bvsle (app abstr-vals$799 idx) (bv #x7fc0 16))))
optimized-halide-expr:
  (vec-add #<abstr-halide-expr> #<abstr-halide-expr>)
optimized-template:
  (vs-mpy-add
 ...
 (combine #<abstr-expr> #<abstr-expr>)
 (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
 #f
 #f
 #f
 'int16)
optimized Halide 0:
  (int16_t (bvadd (app abstr-vals$798 0) (app abstr-vals$799 0)))
optimized x86 0:
  (int16_t
 (bvadd (ite c$749 (app abstr-vals$798 idx$748) (app abstr-vals$799 idx$748)) (ite c$751 (app abstr-vals$798 idx$750) (app abstr-vals$799 idx$750))))
Ran synthesizer for 158 ms
(model
 [idx$748 0]
 [c$749 #f]
 [idx$750 0]
 [c$751 #t])
(vec-add #<abstr-halide-expr> #<abstr-halide-expr>)
(vs-mpy-add
 ...
 (combine
  (vs-mpy-add ... #<load-data> (list (int16_t (bv #x0040 16))) #f #f #f 'int16)
  (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
 (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
 #f
 #f
 #f
 'int16)
Ran bounds analysis for 28 ms
Ran bounds analysis for 21 ms
"Extended success?"
#t
(vs-mpy-add
 ...
 (combine
  (vs-mpy-add ... #<load-data> (list (int16_t (bv #x0040 16))) #f #f #f 'int16)
  (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
 (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
 #f
 #f
 #f
 'int16)
"Building Expr:"
(vec-cast
 (vec-add
  (vec-mul
   (vec-cast
    (load
     (buffer input2 'uint8)
     (ramp
      (sca-add
       (sca-mul output.s0.x.x 16)
       (sca-add
        (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
        (var-lookup 't56)))
      1
      16)
     (aligned 1 0))
    'int16
    16)
   (sca-broadcast (int16_t (bv #x0040 16)) 16))
  (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
 'int32
 16)
"Fold templates"
(list
 (vs-mpy-add
  ...
  #<load-data>
  (list (int16_t (bv #x0040 16)))
  x?$806
  x?$807
  x?$808
  'int16)
 (vs-mpy-add
  ...
  (combine
   (vs-mpy-add
    ...
    #<load-data>
    (list (int16_t (bv #x0040 16)))
    #f
    #f
    #f
    'int16)
   (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
  (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
  x?$802
  x?$803
  x?$804
  'int16))
here(#(struct:vs-mpy-add ... #<load-data> (#(struct:int16_t (bv #x0040 16))) x?$806 x?$807 x?$808 int16) #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<load-data> (#(struct:int16_t (bv #x0040 16))) #f #f #f int16) #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t126) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) x?$802 x?$803 x?$804 int16))

"Replace templates"
'()
run-x86-synthesizer
halide-expr:
  (vec-cast
 (vec-add
  (vec-mul
   (vec-cast
    (load
     (buffer input2 'uint8)
     (ramp
      (sca-add
       (sca-mul output.s0.x.x 16)
       (sca-add
        (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
        (var-lookup 't56)))
      1
      16)
     (aligned 1 0))
    'int16
    16)
   (sca-broadcast (int16_t (bv #x0040 16)) 16))
  (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
 'int32
 16)
template:
  (vs-mpy-add
 ...
 #<load-data>
 (list (int16_t (bv #x0040 16)))
 x?$806
 x?$807
 x?$808
 'int16)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-cast
 (vec-add
  (vec-mul
   (vec-cast #<abstr-halide-expr> 'int16 16)
   (sca-broadcast (int16_t (bv #x0040 16)) 16))
  (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
 'int32
 16)
optimized-template:
  (vs-mpy-add
 ...
 #<abstr-expr>
 (list (int16_t (bv #x0040 16)))
 x?$806
 x?$807
 x?$808
 'int16)
optimized Halide 0:
  (int32_t
 (sign-extend (bvadd (bvmul (bv #xffc0 16) t126) (bvmul (bv #x0040 16) (zero-extend (app abstr-vals$810 0) (bitvector 16)))) (bitvector 32)))
optimized x86 0:
  (int16_t
 (ite* (⊢ (&& (! x?$808) (! (&& x?$806 x?$808))) (ite x?$806 (bvadd (ite x?$807 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0040 16) (zero-extend (app abstr-vals$810 0) (bitvector 16))) (bvadd (bv #x7fff 16) (bvneg (ite x?$807 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0040 16) (zero-extend (app abstr-vals$810 0) (bitvector 16))) (bvadd (bv #x7fff 16) (bvneg (ite x?$807 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0040 16) (zero-extend (app abstr-vals$810 0) (bitvector 16))) (ite x?$807 (bv #x0001 16) (bv #x0000 16))))) (⊢ (|| (&& x?$806 x?$808) (&& x?$808 (! (&& x?$806 x?$808)))) (bvashr (ite x?$806 (bvadd (ite x?$807 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (bvmul (bv #x0040 16) (zero-extend (app abstr-vals$810 0) (bitvector 16))) (bvadd (bv #x7fff 16) (bvneg (ite x?$807 (bv #x0001 16) (bv #x0000 16))))) (bvmul (bv #x0040 16) (zero-extend (app abstr-vals$810 0) (bitvector 16))) (bvadd (bv #x7fff 16) (bvneg (ite x?$807 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (bvmul (bv #x0040 16) (zero-extend (app abstr-vals$810 0) (bitvector 16))) (ite x?$807 (bv #x0001 16) (bv #x0000 16)))) (bv #x0001 16)))))
run-x86-synthesizer
halide-expr:
  (vec-cast
 (vec-add
  (vec-mul
   (vec-cast
    (load
     (buffer input2 'uint8)
     (ramp
      (sca-add
       (sca-mul output.s0.x.x 16)
       (sca-add
        (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
        (var-lookup 't56)))
      1
      16)
     (aligned 1 0))
    'int16
    16)
   (sca-broadcast (int16_t (bv #x0040 16)) 16))
  (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
 'int32
 16)
template:
  (vs-mpy-add
 ...
 (combine
  (vs-mpy-add ... #<load-data> (list (int16_t (bv #x0040 16))) #f #f #f 'int16)
  (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
 (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
 x?$802
 x?$803
 x?$804
 'int16)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$811 idx) (bv #x3fc0 16)) (bvsle (bv #x0000 16) (app abstr-vals$811 idx))))
 (forall (idx) (bvsle (app abstr-vals$812 idx) (bv #x7fc0 16))))
optimized-halide-expr:
  (vec-cast (vec-add #<abstr-halide-expr> #<abstr-halide-expr>) 'int32 16)
optimized-template:
  (vs-mpy-add
 ...
 (combine #<abstr-expr> #<abstr-expr>)
 (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
 x?$802
 x?$803
 x?$804
 'int16)
optimized Halide 0:
  (int32_t
 (sign-extend (bvadd (app abstr-vals$811 0) (app abstr-vals$812 0)) (bitvector 32)))
optimized x86 0:
  (int16_t
 (ite* (⊢ (&& (! x?$804) (! (&& x?$802 x?$804))) (ite x?$802 (bvadd (ite x?$802 (bvadd (ite x?$803 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$812 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$803 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$812 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$803 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$812 0) (ite x?$803 (bv #x0001 16) (bv #x0000 16)))) (ite (bvsle (bvadd (bv #x8000 16) (bvneg (ite (bvsle (ite x?$802 (bvadd (ite x?$803 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$812 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$803 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$812 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$803 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$812 0) (ite x?$803 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16)) (ite x?$802 (bvadd (ite x?$803 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$812 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$803 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$812 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$803 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$812 0) (ite x?$803 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16)))) (ite (bvsle (app abstr-vals$811 0) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$802 (bvadd (ite x?$803 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$812 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$803 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$812 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$803 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$812 0) (ite x?$803 (bv #x0001 16) (bv #x0000 16))))) (ite x?$802 (bvadd (ite x?$803 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$812 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$803 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$812 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$803 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$812 0) (ite x?$803 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16))))) (app abstr-vals$811 0) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$802 (bvadd (ite x?$803 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$812 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$803 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$812 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$803 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$812 0) (ite x?$803 (bv #x0001 16) (bv #x0000 16))))) (ite x?$802 (bvadd (ite x?$803 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$812 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$803 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$812 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$803 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$812 0) (ite x?$803 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16)))))) (ite (bvsle (app abstr-vals$811 0) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$802 (bvadd (ite x?$803 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$812 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$803 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$812 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$803 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$812 0) (ite x?$803 (bv #x0001 16) (bv #x0000 16))))) (ite x?$802 (bvadd (ite x?$803 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$812 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$803 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$812 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$803 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$812 0) (ite x?$803 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16))))) (app abstr-vals$811 0) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$802 (bvadd (ite x?$803 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$812 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$803 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$812 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$803 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$812 0) (ite x?$803 (bv #x0001 16) (bv #x0000 16))))) (ite x?$802 (bvadd (ite x?$803 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$812 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$803 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$812 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$803 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$812 0) (ite x?$803 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16))))) (bvadd (bv #x8000 16) (bvneg (ite (bvsle (ite x?$802 (bvadd (ite x?$803 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$812 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$803 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$812 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$803 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$812 0) (ite x?$803 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16)) (ite x?$802 (bvadd (ite x?$803 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$812 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$803 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$812 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$803 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$812 0) (ite x?$803 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16)))))) (bvadd (app abstr-vals$811 0) (ite x?$802 (bvadd (ite x?$803 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$812 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$803 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$812 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$803 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$812 0) (ite x?$803 (bv #x0001 16) (bv #x0000 16))))))) (⊢ (|| (&& x?$802 x?$804) (&& x?$804 (! (&& x?$802 x?$804)))) (bvashr (ite x?$802 (bvadd (ite x?$802 (bvadd (ite x?$803 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$812 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$803 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$812 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$803 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$812 0) (ite x?$803 (bv #x0001 16) (bv #x0000 16)))) (ite (bvsle (bvadd (bv #x8000 16) (bvneg (ite (bvsle (ite x?$802 (bvadd (ite x?$803 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$812 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$803 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$812 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$803 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$812 0) (ite x?$803 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16)) (ite x?$802 (bvadd (ite x?$803 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$812 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$803 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$812 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$803 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$812 0) (ite x?$803 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16)))) (ite (bvsle (app abstr-vals$811 0) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$802 (bvadd (ite x?$803 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$812 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$803 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$812 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$803 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$812 0) (ite x?$803 (bv #x0001 16) (bv #x0000 16))))) (ite x?$802 (bvadd (ite x?$803 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$812 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$803 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$812 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$803 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$812 0) (ite x?$803 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16))))) (app abstr-vals$811 0) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$802 (bvadd (ite x?$803 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$812 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$803 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$812 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$803 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$812 0) (ite x?$803 (bv #x0001 16) (bv #x0000 16))))) (ite x?$802 (bvadd (ite x?$803 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$812 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$803 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$812 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$803 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$812 0) (ite x?$803 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16)))))) (ite (bvsle (app abstr-vals$811 0) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$802 (bvadd (ite x?$803 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$812 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$803 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$812 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$803 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$812 0) (ite x?$803 (bv #x0001 16) (bv #x0000 16))))) (ite x?$802 (bvadd (ite x?$803 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$812 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$803 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$812 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$803 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$812 0) (ite x?$803 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16))))) (app abstr-vals$811 0) (bvadd (bv #x7fff 16) (bvneg (ite (bvsle (bv #x0000 16) (ite x?$802 (bvadd (ite x?$803 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$812 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$803 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$812 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$803 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$812 0) (ite x?$803 (bv #x0001 16) (bv #x0000 16))))) (ite x?$802 (bvadd (ite x?$803 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$812 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$803 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$812 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$803 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$812 0) (ite x?$803 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16))))) (bvadd (bv #x8000 16) (bvneg (ite (bvsle (ite x?$802 (bvadd (ite x?$803 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$812 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$803 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$812 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$803 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$812 0) (ite x?$803 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16)) (ite x?$802 (bvadd (ite x?$803 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$812 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$803 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$812 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$803 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$812 0) (ite x?$803 (bv #x0001 16) (bv #x0000 16)))) (bv #x0000 16)))))) (bvadd (app abstr-vals$811 0) (ite x?$802 (bvadd (ite x?$803 (bv #x0001 16) (bv #x0000 16)) (ite (bvsle (app abstr-vals$812 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$803 (bv #x0001 16) (bv #x0000 16))))) (app abstr-vals$812 0) (bvadd (bv #x7fff 16) (bvneg (ite x?$803 (bv #x0001 16) (bv #x0000 16)))))) (bvadd (app abstr-vals$812 0) (ite x?$803 (bv #x0001 16) (bv #x0000 16)))))) (bv #x0001 16)))))
Ran synthesizer for 22 ms
(unsat)
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (vec-cast
 (vec-add
  (vec-mul
   (vec-cast
    (load
     (buffer input2 'uint8)
     (ramp
      (sca-add
       (sca-mul output.s0.x.x 16)
       (sca-add
        (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
        (var-lookup 't56)))
      1
      16)
     (aligned 1 0))
    'int16
    16)
   (sca-broadcast (int16_t (bv #x0040 16)) 16))
  (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
 'int32
 16)
template:
  (cast
 ...
 (vs-mpy-add
  ...
  (combine
   (vs-mpy-add
    ...
    #<load-data>
    (list (int16_t (bv #x0040 16)))
    #f
    #f
    #f
    'int16)
   (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
  (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
  #f
  #f
  #f
  'int16)
 'int32
 #f)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-cast #<abstr-halide-expr> 'int32 16)
optimized-template:
  (cast ... #<abstr-expr> 'int32 #f)
optimized Halide 0:
  (int32_t (sign-extend (app abstr-vals$813 0) (bitvector 32)))
optimized x86 0:
  (int32_t (sign-extend (app abstr-vals$813 0) (bitvector 32)))
Ran synthesizer for 18 ms
(model)
(vec-cast #<abstr-halide-expr> 'int32 16)
(cast
 ...
 (vs-mpy-add
  ...
  (combine
   (vs-mpy-add
    ...
    #<load-data>
    (list (int16_t (bv #x0040 16)))
    #f
    #f
    #f
    'int16)
   (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
  (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
  #f
  #f
  #f
  'int16)
 'int32
 #f)
Ran bounds analysis for 36 ms
Ran bounds analysis for 26 ms
"Extended success?"
#t
(cast
 ...
 (vs-mpy-add
  ...
  (combine
   (vs-mpy-add
    ...
    #<load-data>
    (list (int16_t (bv #x0040 16)))
    #f
    #f
    #f
    'int16)
   (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
  (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
  #f
  #f
  #f
  'int16)
 'int32
 #f)
"Building Expr:"
(sca-broadcast (int16_t input2_multiplier) 16)
"Fold templates"
'()
here()

"Replace templates"
'()
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (sca-broadcast (int16_t input2_multiplier) 16)
template:
  (broadcast ... (int16_t input2_multiplier))
axioms:
  '()
optimized-halide-expr:
  (sca-broadcast (int16_t input2_multiplier) 16)
optimized-template:
  (broadcast ... (int16_t input2_multiplier))
optimized Halide 0:
  (int16_t input2_multiplier)
optimized x86 0:
  (int16_t input2_multiplier)
Ran synthesizer for 16 ms
(model)
(sca-broadcast (int16_t input2_multiplier) 16)
(broadcast ... (int16_t input2_multiplier))
Ran bounds analysis for 25 ms
Ran bounds analysis for 17 ms
"Extended success?"
#t
(broadcast ... (int16_t input2_multiplier))
"Building Expr:"
(vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)
"Fold templates"
'()
here()

"Replace templates"
'()
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)
template:
  (cast ... (broadcast ... (int16_t input2_multiplier)) 'int32 #f)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-cast #<abstr-halide-expr> 'int32 16)
optimized-template:
  (cast ... #<abstr-expr> 'int32 #f)
optimized Halide 0:
  (int32_t (sign-extend (app abstr-vals$815 0) (bitvector 32)))
optimized x86 0:
  (int32_t (sign-extend (app abstr-vals$815 0) (bitvector 32)))
Ran synthesizer for 17 ms
(model)
(vec-cast #<abstr-halide-expr> 'int32 16)
(cast ... (broadcast ... (int16_t input2_multiplier)) 'int32 #f)
Ran bounds analysis for 35 ms
Ran bounds analysis for 26 ms
"Extended success?"
#t
(cast ... (broadcast ... (int16_t input2_multiplier)) 'int32 #f)
"Building Expr:"
(vec-mul
 (vec-cast
  (vec-add
   (vec-mul
    (vec-cast
     (load
      (buffer input2 'uint8)
      (ramp
       (sca-add
        (sca-mul output.s0.x.x 16)
        (sca-add
         (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
         (var-lookup 't56)))
       1
       16)
      (aligned 1 0))
     'int16
     16)
    (sca-broadcast (int16_t (bv #x0040 16)) 16))
   (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16))
"Fold templates"
(list
 (vs-mpy-add
  ...
  (combine
   (vs-mpy-add
    ...
    #<load-data>
    (list (int16_t (bv #x0040 16)))
    #f
    #f
    #f
    'int16)
   (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
  (list
   (sca-mul
    (sca-cast (int8_t (bv #x01 8)) 'int16)
    (sca-cast
     (union [(&& (! xi?$821) (! xi?$822)) #(struct:int8_t (bv #x01 8))] [(|| xi?$821 (&& xi?$822 (! xi?$821))) #(struct:int16_t
                                                                                                                 (ite* (⊢ xi?$821 (bv #x0040 16)) (⊢ (&& xi?$822 (! xi?$821)) input2_multiplier)))])
     'int16))
   (sca-mul
    (sca-cast (int8_t (bv #x01 8)) 'int16)
    (sca-cast
     (union [(&& (! xi?$821) (! xi?$822)) #(struct:int8_t (bv #x01 8))] [(|| xi?$821 (&& xi?$822 (! xi?$821))) #(struct:int16_t
                                                                                                                 (ite* (⊢ xi?$821 (bv #x0040 16)) (⊢ (&& xi?$822 (! xi?$821)) input2_multiplier)))])
     'int16)))
  #f
  #f
  #f
  'int16)
 (cast
  ...
  (vs-mpy-add
   ...
   (combine
    (vs-mpy-add
     ...
     #<load-data>
     (list (int16_t (bv #x0040 16)))
     #f
     #f
     #f
     'int16)
    (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
   (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
   #f
   #f
   #f
   'int16)
  'int32
  x?$817)
 (cast ... (broadcast ... (int16_t input2_multiplier)) 'int32 x?$823))
here(#(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<load-data> (#(struct:int16_t (bv #x0040 16))) #f #f #f int16) #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t126) #(struct:int16_t (bv #xffc0 16))))> (#(struct:sca-mul #(struct:sca-cast #(struct:int8_t (bv #x01 8)) int16) #(struct:sca-cast (union #:size 2 #:hash 1443091788451) int16)) #(struct:sca-mul #(struct:sca-cast #(struct:int8_t (bv #x01 8)) int16) #(struct:sca-cast (union #:size 2 #:hash 1443091788451) int16))) #f #f #f int16) #(struct:cast ... #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<load-data> (#(struct:int16_t (bv #x0040 16))) #f #f #f int16) #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t126) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int16) int32 x?$817) #(struct:cast ... #(struct:broadcast ... #(struct:int16_t input2_multiplier)) int32 x?$823))

(list (vs-mpy-add ... (vs-mpy-add ... (combine (vs-mpy-add ... #<load-data> (list (int16_t (bv #x0040 16))) #f #f #f 'int16) (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))))) (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8))) #f #f #f 'int16) (list (int16_t (ite x?$899 (bv #x0040 16) input2_multiplier))) #f #f #f 'int32) (vs-mpy-add ... #<load-data> (list (int16_t (ite x?$900 (bv #x0040 16) input2_multiplier))) #f #f #f 'int32) (vv-mpy-add ... (vs-mpy-add ... (combine (vs-mpy-add ... #<load-data> (list (int16_t (bv #x0040 16))) #f #f #f 'int16) (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))))) (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8))) #f #f #f 'int16) '(1) (! x?$901) (! x?$902) (! x?$903) 'int32) (vv-mpy-add ... #<load-data> '(1) (! x?$904) (! x?$905) (! x?$906) 'int32))
(list (vs-mpy-add ... (broadcast ... (int16_t input2_multiplier)) (list (int16_t (ite x?$982 (bv #x0040 16) input2_multiplier))) #f #f #f 'int32) (vs-mpy-add ... #<load-data> (list (int16_t (ite x?$983 (bv #x0040 16) input2_multiplier))) #f #f #f 'int32) (vv-mpy-add ... (broadcast ... (int16_t input2_multiplier)) '(1) (! x?$984) (! x?$985) (! x?$986) 'int32) (vv-mpy-add ... #<load-data> '(1) (! x?$987) (! x?$988) (! x?$989) 'int32))
"Replace templates"
(list
 (vs-mpy-add
  ...
  (vs-mpy-add
   ...
   (combine
    (vs-mpy-add
     ...
     #<load-data>
     (list (int16_t (bv #x0040 16)))
     #f
     #f
     #f
     'int16)
    (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
   (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
   #f
   #f
   #f
   'int16)
  (list (int16_t (ite x?$899 (bv #x0040 16) input2_multiplier)))
  #f
  #f
  #f
  'int32)
 (vs-mpy-add
  ...
  #<load-data>
  (list (int16_t (ite x?$900 (bv #x0040 16) input2_multiplier)))
  #f
  #f
  #f
  'int32)
 (vv-mpy-add
  ...
  (vs-mpy-add
   ...
   (combine
    (vs-mpy-add
     ...
     #<load-data>
     (list (int16_t (bv #x0040 16)))
     #f
     #f
     #f
     'int16)
    (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
   (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
   #f
   #f
   #f
   'int16)
  '(1)
  (! x?$901)
  (! x?$902)
  (! x?$903)
  'int32)
 (vv-mpy-add ... #<load-data> '(1) (! x?$904) (! x?$905) (! x?$906) 'int32)
 (vs-mpy-add
  ...
  (broadcast ... (int16_t input2_multiplier))
  (list (int16_t (ite x?$982 (bv #x0040 16) input2_multiplier)))
  #f
  #f
  #f
  'int32)
 (vs-mpy-add
  ...
  #<load-data>
  (list (int16_t (ite x?$983 (bv #x0040 16) input2_multiplier)))
  #f
  #f
  #f
  'int32)
 (vv-mpy-add
  ...
  (broadcast ... (int16_t input2_multiplier))
  '(1)
  (! x?$984)
  (! x?$985)
  (! x?$986)
  'int32)
 (vv-mpy-add ... #<load-data> '(1) (! x?$987) (! x?$988) (! x?$989) 'int32))
run-x86-synthesizer
halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-mul
    (vec-cast
     (load
      (buffer input2 'uint8)
      (ramp
       (sca-add
        (sca-mul output.s0.x.x 16)
        (sca-add
         (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
         (var-lookup 't56)))
       1
       16)
      (aligned 1 0))
     'int16
     16)
    (sca-broadcast (int16_t (bv #x0040 16)) 16))
   (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16))
template:
  (vs-mpy-add
 ...
 #<load-data>
 (list (int16_t (ite x?$900 (bv #x0040 16) input2_multiplier)))
 #f
 #f
 #f
 'int32)
axioms:
  '()
optimized-halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-mul
    (vec-cast
     (load
      (buffer input2 'uint8)
      (ramp
       (sca-add
        (sca-mul output.s0.x.x 16)
        (sca-add
         (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
         (var-lookup 't56)))
       1
       16)
      (aligned 1 0))
     'int16
     16)
    (sca-broadcast (int16_t (bv #x0040 16)) 16))
   (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16))
optimized-template:
  (vs-mpy-add
 ...
 #<load-data>
 (list (int16_t (ite x?$900 (bv #x0040 16) input2_multiplier)))
 #f
 #f
 #f
 'int32)
optimized Halide 0:
  (int32_t
 (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32))))
optimized x86 0:
  (int32_t
 (bvmul (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 32)) (sign-extend (ite x?$900 (bv #x0040 16) input2_multiplier) (bitvector 32))))
run-x86-synthesizer
halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-mul
    (vec-cast
     (load
      (buffer input2 'uint8)
      (ramp
       (sca-add
        (sca-mul output.s0.x.x 16)
        (sca-add
         (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
         (var-lookup 't56)))
       1
       16)
      (aligned 1 0))
     'int16
     16)
    (sca-broadcast (int16_t (bv #x0040 16)) 16))
   (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16))
template:
  (vv-mpy-add ... #<load-data> '(1) (! x?$904) (! x?$905) (! x?$906) 'int32)
axioms:
  '()
optimized-halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-mul
    (vec-cast
     (load
      (buffer input2 'uint8)
      (ramp
       (sca-add
        (sca-mul output.s0.x.x 16)
        (sca-add
         (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
         (var-lookup 't56)))
       1
       16)
      (aligned 1 0))
     'int16
     16)
    (sca-broadcast (int16_t (bv #x0040 16)) 16))
   (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16))
optimized-template:
  (vv-mpy-add ... #<load-data> '(1) (! x?$904) (! x?$905) (! x?$906) 'int32)
optimized Halide 0:
  (int32_t
 (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32))))
optimized x86 0:
  (int32_t
 (ite* (⊢ (&& x?$906 (! (&& (! x?$904) (! x?$906)))) (ite x?$904 (bvadd (bvmul (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 32)) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 32))) (ite x?$905 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$905 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (bvmul (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 32)) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$905 (bv #x00000000 32) (bv #x00000001 32))))) (bvmul (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 32)) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$905 (bv #x00000000 32) (bv #x00000001 32)))))))) (⊢ (|| (&& (! x?$904) (! x?$906)) (&& (! x?$906) (! (&& (! x?$904) (! x?$906))))) (bvashr (ite x?$904 (bvadd (bvmul (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 32)) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 32))) (ite x?$905 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$905 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (bvmul (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 32)) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$905 (bv #x00000000 32) (bv #x00000001 32))))) (bvmul (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 32)) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$905 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000001 32)))))
run-x86-synthesizer
halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-mul
    (vec-cast
     (load
      (buffer input2 'uint8)
      (ramp
       (sca-add
        (sca-mul output.s0.x.x 16)
        (sca-add
         (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
         (var-lookup 't56)))
       1
       16)
      (aligned 1 0))
     'int16
     16)
    (sca-broadcast (int16_t (bv #x0040 16)) 16))
   (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16))
template:
  (vs-mpy-add
 ...
 #<load-data>
 (list (int16_t (ite x?$983 (bv #x0040 16) input2_multiplier)))
 #f
 #f
 #f
 'int32)
axioms:
  '()
optimized-halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-mul
    (vec-cast
     (load
      (buffer input2 'uint8)
      (ramp
       (sca-add
        (sca-mul output.s0.x.x 16)
        (sca-add
         (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
         (var-lookup 't56)))
       1
       16)
      (aligned 1 0))
     'int16
     16)
    (sca-broadcast (int16_t (bv #x0040 16)) 16))
   (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16))
optimized-template:
  (vs-mpy-add
 ...
 #<load-data>
 (list (int16_t (ite x?$983 (bv #x0040 16) input2_multiplier)))
 #f
 #f
 #f
 'int32)
optimized Halide 0:
  (int32_t
 (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32))))
optimized x86 0:
  (int32_t
 (bvmul (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 32)) (sign-extend (ite x?$983 (bv #x0040 16) input2_multiplier) (bitvector 32))))
run-x86-synthesizer
halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-mul
    (vec-cast
     (load
      (buffer input2 'uint8)
      (ramp
       (sca-add
        (sca-mul output.s0.x.x 16)
        (sca-add
         (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
         (var-lookup 't56)))
       1
       16)
      (aligned 1 0))
     'int16
     16)
    (sca-broadcast (int16_t (bv #x0040 16)) 16))
   (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16))
template:
  (vv-mpy-add ... #<load-data> '(1) (! x?$987) (! x?$988) (! x?$989) 'int32)
axioms:
  '()
optimized-halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-mul
    (vec-cast
     (load
      (buffer input2 'uint8)
      (ramp
       (sca-add
        (sca-mul output.s0.x.x 16)
        (sca-add
         (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
         (var-lookup 't56)))
       1
       16)
      (aligned 1 0))
     'int16
     16)
    (sca-broadcast (int16_t (bv #x0040 16)) 16))
   (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16))
optimized-template:
  (vv-mpy-add ... #<load-data> '(1) (! x?$987) (! x?$988) (! x?$989) 'int32)
optimized Halide 0:
  (int32_t
 (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32))))
optimized x86 0:
  (int32_t
 (ite* (⊢ (&& x?$989 (! (&& (! x?$987) (! x?$989)))) (ite x?$987 (bvadd (bvmul (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 32)) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 32))) (ite x?$988 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$988 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (bvmul (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 32)) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$988 (bv #x00000000 32) (bv #x00000001 32))))) (bvmul (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 32)) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$988 (bv #x00000000 32) (bv #x00000001 32)))))))) (⊢ (|| (&& (! x?$987) (! x?$989)) (&& (! x?$989) (! (&& (! x?$987) (! x?$989))))) (bvashr (ite x?$987 (bvadd (bvmul (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 32)) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 32))) (ite x?$988 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$988 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (bvmul (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 32)) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$988 (bv #x00000000 32) (bv #x00000001 32))))) (bvmul (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 32)) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$988 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000001 32)))))
run-x86-synthesizer
halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-mul
    (vec-cast
     (load
      (buffer input2 'uint8)
      (ramp
       (sca-add
        (sca-mul output.s0.x.x 16)
        (sca-add
         (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
         (var-lookup 't56)))
       1
       16)
      (aligned 1 0))
     'int16
     16)
    (sca-broadcast (int16_t (bv #x0040 16)) 16))
   (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16))
template:
  (cast ... (broadcast ... (int16_t input2_multiplier)) 'int32 x?$823)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-mul
    (vec-cast
     (load
      (buffer input2 'uint8)
      (ramp
       (sca-add
        (sca-mul output.s0.x.x 16)
        (sca-add
         (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
         (var-lookup 't56)))
       1
       16)
      (aligned 1 0))
     'int16
     16)
    (sca-broadcast (int16_t (bv #x0040 16)) 16))
   (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
  'int32
  16)
 (vec-cast #<abstr-halide-expr> 'int32 16))
optimized-template:
  (cast ... #<abstr-expr> 'int32 x?$823)
optimized Halide 0:
  (int32_t
 (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend (app abstr-vals$990 0) (bitvector 32))))
optimized x86 0:
  (int32_t (sign-extend (app abstr-vals$990 0) (bitvector 32)))
run-x86-synthesizer
halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-mul
    (vec-cast
     (load
      (buffer input2 'uint8)
      (ramp
       (sca-add
        (sca-mul output.s0.x.x 16)
        (sca-add
         (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
         (var-lookup 't56)))
       1
       16)
      (aligned 1 0))
     'int16
     16)
    (sca-broadcast (int16_t (bv #x0040 16)) 16))
   (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16))
template:
  (vs-mpy-add
 ...
 (broadcast ... (int16_t input2_multiplier))
 (list (int16_t (ite x?$982 (bv #x0040 16) input2_multiplier)))
 #f
 #f
 #f
 'int32)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-mul
    (vec-cast
     (load
      (buffer input2 'uint8)
      (ramp
       (sca-add
        (sca-mul output.s0.x.x 16)
        (sca-add
         (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
         (var-lookup 't56)))
       1
       16)
      (aligned 1 0))
     'int16
     16)
    (sca-broadcast (int16_t (bv #x0040 16)) 16))
   (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
  'int32
  16)
 (vec-cast #<abstr-halide-expr> 'int32 16))
optimized-template:
  (vs-mpy-add
 ...
 #<abstr-expr>
 (list (int16_t (ite x?$982 (bv #x0040 16) input2_multiplier)))
 #f
 #f
 #f
 'int32)
optimized Halide 0:
  (int32_t
 (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend (app abstr-vals$991 0) (bitvector 32))))
optimized x86 0:
  (int32_t
 (bvmul (sign-extend (app abstr-vals$991 0) (bitvector 32)) (sign-extend (ite x?$982 (bv #x0040 16) input2_multiplier) (bitvector 32))))
run-x86-synthesizer
halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-mul
    (vec-cast
     (load
      (buffer input2 'uint8)
      (ramp
       (sca-add
        (sca-mul output.s0.x.x 16)
        (sca-add
         (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
         (var-lookup 't56)))
       1
       16)
      (aligned 1 0))
     'int16
     16)
    (sca-broadcast (int16_t (bv #x0040 16)) 16))
   (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16))
template:
  (vv-mpy-add
 ...
 (broadcast ... (int16_t input2_multiplier))
 '(1)
 (! x?$984)
 (! x?$985)
 (! x?$986)
 'int32)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-mul
    (vec-cast
     (load
      (buffer input2 'uint8)
      (ramp
       (sca-add
        (sca-mul output.s0.x.x 16)
        (sca-add
         (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
         (var-lookup 't56)))
       1
       16)
      (aligned 1 0))
     'int16
     16)
    (sca-broadcast (int16_t (bv #x0040 16)) 16))
   (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
  'int32
  16)
 (vec-cast #<abstr-halide-expr> 'int32 16))
optimized-template:
  (vv-mpy-add ... #<abstr-expr> '(1) (! x?$984) (! x?$985) (! x?$986) 'int32)
optimized Halide 0:
  (int32_t
 (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend (app abstr-vals$992 0) (bitvector 32))))
optimized x86 0:
  (int32_t
 (ite* (⊢ (&& x?$986 (! (&& (! x?$984) (! x?$986)))) (ite x?$984 (bvadd (bvmul (sign-extend (app abstr-vals$992 0) (bitvector 32)) (sign-extend (app abstr-vals$992 1) (bitvector 32))) (ite x?$985 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$985 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (bvmul (sign-extend (app abstr-vals$992 0) (bitvector 32)) (sign-extend (app abstr-vals$992 1) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$985 (bv #x00000000 32) (bv #x00000001 32))))) (bvmul (sign-extend (app abstr-vals$992 0) (bitvector 32)) (sign-extend (app abstr-vals$992 1) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$985 (bv #x00000000 32) (bv #x00000001 32)))))))) (⊢ (|| (&& (! x?$984) (! x?$986)) (&& (! x?$986) (! (&& (! x?$984) (! x?$986))))) (bvashr (ite x?$984 (bvadd (bvmul (sign-extend (app abstr-vals$992 0) (bitvector 32)) (sign-extend (app abstr-vals$992 1) (bitvector 32))) (ite x?$985 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$985 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (bvmul (sign-extend (app abstr-vals$992 0) (bitvector 32)) (sign-extend (app abstr-vals$992 1) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$985 (bv #x00000000 32) (bv #x00000001 32))))) (bvmul (sign-extend (app abstr-vals$992 0) (bitvector 32)) (sign-extend (app abstr-vals$992 1) (bitvector 32))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$985 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000001 32)))))
run-x86-synthesizer
halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-mul
    (vec-cast
     (load
      (buffer input2 'uint8)
      (ramp
       (sca-add
        (sca-mul output.s0.x.x 16)
        (sca-add
         (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
         (var-lookup 't56)))
       1
       16)
      (aligned 1 0))
     'int16
     16)
    (sca-broadcast (int16_t (bv #x0040 16)) 16))
   (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16))
template:
  (vs-mpy-add
 ...
 (combine
  (vs-mpy-add ... #<load-data> (list (int16_t (bv #x0040 16))) #f #f #f 'int16)
  (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
 (list
  (sca-mul
   (sca-cast (int8_t (bv #x01 8)) 'int16)
   (sca-cast
    (union [(&& (! xi?$821) (! xi?$822)) #(struct:int8_t (bv #x01 8))] [(|| xi?$821 (&& xi?$822 (! xi?$821))) #(struct:int16_t
                                                                                                                (ite* (⊢ xi?$821 (bv #x0040 16)) (⊢ (&& xi?$822 (! xi?$821)) input2_multiplier)))])
    'int16))
  (sca-mul
   (sca-cast (int8_t (bv #x01 8)) 'int16)
   (sca-cast
    (union [(&& (! xi?$821) (! xi?$822)) #(struct:int8_t (bv #x01 8))] [(|| xi?$821 (&& xi?$822 (! xi?$821))) #(struct:int16_t
                                                                                                                (ite* (⊢ xi?$821 (bv #x0040 16)) (⊢ (&& xi?$822 (! xi?$821)) input2_multiplier)))])
    'int16)))
 #f
 #f
 #f
 'int16)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$993 idx) (bv #x3fc0 16)) (bvsle (bv #x0000 16) (app abstr-vals$993 idx))))
 (forall (idx) (bvsle (app abstr-vals$994 idx) (bv #x7fc0 16))))
optimized-halide-expr:
  (vec-mul
 (vec-cast (vec-add #<abstr-halide-expr> #<abstr-halide-expr>) 'int32 16)
 (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16))
optimized-template:
  (vs-mpy-add
 ...
 (combine #<abstr-expr> #<abstr-expr>)
 (list
  (sca-mul
   (sca-cast (int8_t (bv #x01 8)) 'int16)
   (sca-cast
    (union [(&& (! xi?$821) (! xi?$822)) #(struct:int8_t (bv #x01 8))] [(|| xi?$821 (&& xi?$822 (! xi?$821))) #(struct:int16_t
                                                                                                                (ite* (⊢ xi?$821 (bv #x0040 16)) (⊢ (&& xi?$822 (! xi?$821)) input2_multiplier)))])
    'int16))
  (sca-mul
   (sca-cast (int8_t (bv #x01 8)) 'int16)
   (sca-cast
    (union [(&& (! xi?$821) (! xi?$822)) #(struct:int8_t (bv #x01 8))] [(|| xi?$821 (&& xi?$822 (! xi?$821))) #(struct:int16_t
                                                                                                                (ite* (⊢ xi?$821 (bv #x0040 16)) (⊢ (&& xi?$822 (! xi?$821)) input2_multiplier)))])
    'int16)))
 #f
 #f
 #f
 'int16)
optimized Halide 0:
  (int32_t
 (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (bvadd (app abstr-vals$993 0) (app abstr-vals$994 0)) (bitvector 32))))
optimized x86 0:
  (int16_t
 (bvadd (bvmul (app abstr-vals$994 0) (ite* (⊢ (&& (! xi?$821) (! xi?$822)) (bv #x0001 16)) (⊢ (|| xi?$821 (&& xi?$822 (! xi?$821))) (ite* (⊢ xi?$821 (bv #x0040 16)) (⊢ (&& xi?$822 (! xi?$821)) input2_multiplier))))) (bvmul (app abstr-vals$993 0) (ite* (⊢ (&& (! xi?$821) (! xi?$822)) (bv #x0001 16)) (⊢ (|| xi?$821 (&& xi?$822 (! xi?$821))) (ite* (⊢ xi?$821 (bv #x0040 16)) (⊢ (&& xi?$822 (! xi?$821)) input2_multiplier)))))))
Ran synthesizer for 40 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-mul
    (vec-cast
     (load
      (buffer input2 'uint8)
      (ramp
       (sca-add
        (sca-mul output.s0.x.x 16)
        (sca-add
         (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
         (var-lookup 't56)))
       1
       16)
      (aligned 1 0))
     'int16
     16)
    (sca-broadcast (int16_t (bv #x0040 16)) 16))
   (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16))
template:
  (cast
 ...
 (vs-mpy-add
  ...
  (combine
   (vs-mpy-add
    ...
    #<load-data>
    (list (int16_t (bv #x0040 16)))
    #f
    #f
    #f
    'int16)
   (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
  (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
  #f
  #f
  #f
  'int16)
 'int32
 x?$817)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-mul
 (vec-cast #<abstr-halide-expr> 'int32 16)
 (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16))
optimized-template:
  (cast ... #<abstr-expr> 'int32 x?$817)
optimized Halide 0:
  (int32_t
 (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (app abstr-vals$995 0) (bitvector 32))))
optimized x86 0:
  (int32_t (sign-extend (app abstr-vals$995 0) (bitvector 32)))
run-x86-synthesizer
halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-mul
    (vec-cast
     (load
      (buffer input2 'uint8)
      (ramp
       (sca-add
        (sca-mul output.s0.x.x 16)
        (sca-add
         (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
         (var-lookup 't56)))
       1
       16)
      (aligned 1 0))
     'int16
     16)
    (sca-broadcast (int16_t (bv #x0040 16)) 16))
   (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
  'int32
  16)
 (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16))
template:
  (vs-mpy-add
 ...
 (vs-mpy-add
  ...
  (combine
   (vs-mpy-add
    ...
    #<load-data>
    (list (int16_t (bv #x0040 16)))
    #f
    #f
    #f
    'int16)
   (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
  (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
  #f
  #f
  #f
  'int16)
 (list (int16_t (ite x?$899 (bv #x0040 16) input2_multiplier)))
 #f
 #f
 #f
 'int32)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-mul
 (vec-cast #<abstr-halide-expr> 'int32 16)
 (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16))
optimized-template:
  (vs-mpy-add
 ...
 #<abstr-expr>
 (list (int16_t (ite x?$899 (bv #x0040 16) input2_multiplier)))
 #f
 #f
 #f
 'int32)
optimized Halide 0:
  (int32_t
 (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (app abstr-vals$996 0) (bitvector 32))))
optimized x86 0:
  (int32_t
 (bvmul (sign-extend (app abstr-vals$996 0) (bitvector 32)) (sign-extend (ite x?$899 (bv #x0040 16) input2_multiplier) (bitvector 32))))
Ran synthesizer for 83 ms
(model
 [x?$899 #f])
(vec-mul
 (vec-cast #<abstr-halide-expr> 'int32 16)
 (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16))
(vs-mpy-add
 ...
 (vs-mpy-add
  ...
  (combine
   (vs-mpy-add
    ...
    #<load-data>
    (list (int16_t (bv #x0040 16)))
    #f
    #f
    #f
    'int16)
   (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
  (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
  #f
  #f
  #f
  'int16)
 (list (int16_t input2_multiplier))
 #f
 #f
 #f
 'int32)
Ran bounds analysis for 251 ms
Ran bounds analysis for 191 ms
"Success?"
#t
(vs-mpy-add ... (vs-mpy-add ... (combine (vs-mpy-add ... #<load-data> (list (int16_t (bv #x0040 16))) #f #f #f 'int16) (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))))) (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8))) #f #f #f 'int16) (list (int16_t input2_multiplier)) #f #f #f 'int32)
"Building Expr:"
(vec-add
 (vec-mul
  (vec-cast
   (vec-add
    (vec-mul
     (vec-cast
      (load
       (buffer input1 'uint8)
       (ramp
        (sca-add
         (sca-mul output.s0.x.x 16)
         (sca-add
          (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
          (var-lookup 't55)))
        1
        16)
       (aligned 1 0))
      'int16
      16)
     (sca-broadcast (int16_t (bv #x0040 16)) 16))
    (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
   'int32
   16)
  (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
 (vec-mul
  (vec-cast
   (vec-add
    (vec-mul
     (vec-cast
      (load
       (buffer input2 'uint8)
       (ramp
        (sca-add
         (sca-mul output.s0.x.x 16)
         (sca-add
          (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
          (var-lookup 't56)))
        1
        16)
       (aligned 1 0))
      'int16
      16)
     (sca-broadcast (int16_t (bv #x0040 16)) 16))
    (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
   'int32
   16)
  (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
"Fold templates"
(list
 (vs-mpy-add
  ...
  (combine
   (vs-mpy-add
    ...
    #<load-data>
    (list (int16_t (bv #x0040 16)))
    #f
    #f
    #f
    'int16)
   (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
  (list
   (int8_t (bv #x01 8))
   (int8_t (bv #x01 8))
   (union [(&& (! xi?$1058) (&& (! xi?$1059) (! xi?$1060))) #(struct:int8_t
                                                              (bv #x01 8))] [(|| xi?$1058 (&& (! xi?$1058) (|| xi?$1059 (&& xi?$1060 (! xi?$1059))))) #(struct:int16_t
                                                                                                                                                        (ite* (⊢ xi?$1058 input1_multiplier) (⊢ (&& (! xi?$1058) (|| xi?$1059 (&& xi?$1060 (! xi?$1059)))) (ite* (⊢ xi?$1059 (bv #x0040 16)) (⊢ (&& xi?$1060 (! xi?$1059)) input2_multiplier)))))]))
  #f
  #f
  #f
  'int32)
 (vs-mpy-add
  ...
  (combine
   (vs-mpy-add
    ...
    #<load-data>
    (list (int16_t (bv #x0040 16)))
    #f
    #f
    #f
    'int16)
   (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
  (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
  #f
  x?$1056
  #f
  'int32)
 (vs-mpy-add
  ...
  (combine
   (vs-mpy-add
    ...
    (combine
     (vs-mpy-add
      ...
      #<load-data>
      (list (int16_t (bv #x0040 16)))
      #f
      #f
      #f
      'int16)
     (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
    (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
    #f
    #f
    #f
    'int16)
   (union [x?$1061 #(struct:vs-mpy-add
                     ...
                     #(struct:vs-mpy-add
                       ...
                       #<combine:
                        #(struct:vs-mpy-add
                          ...
                          #<load-data>
                          (#(struct:int16_t (bv #x0040 16)))
                          #f
                          #f
                          #f
                          int16)
                        #(struct:broadcast
                          ...
                          #(struct:sca-mul
                            #(struct:int16_t t125)
                            #(struct:int16_t (bv #xffc0 16))))>
                       (#(struct:int8_t (bv #x01 8))
                        #(struct:int8_t (bv #x01 8)))
                       #f
                       #f
                       #f
                       int16)
                     (#(struct:int16_t input1_multiplier))
                     #f
                     #f
                     #f
                     int32)] [(! x?$1061) #(struct:vs-mpy-add
                                            ...
                                            #(struct:vs-mpy-add
                                              ...
                                              #<combine:
                                               #(struct:vs-mpy-add
                                                 ...
                                                 #<load-data>
                                                 (#(struct:int16_t
                                                    (bv #x0040 16)))
                                                 #f
                                                 #f
                                                 #f
                                                 int16)
                                               #(struct:broadcast
                                                 ...
                                                 #(struct:sca-mul
                                                   #(struct:int16_t t126)
                                                   #(struct:int16_t
                                                     (bv #xffc0 16))))>
                                              (#(struct:int8_t (bv #x01 8))
                                               #(struct:int8_t (bv #x01 8)))
                                              #f
                                              #f
                                              #f
                                              int16)
                                            (#(struct:int16_t
                                               input2_multiplier))
                                            #f
                                            #f
                                            #f
                                            int32)]))
  (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
  #f
  #f
  #f
  'int32)
 (vs-mpy-add
  ...
  (vs-mpy-add
   ...
   (combine
    (vs-mpy-add
     ...
     #<load-data>
     (list (int16_t (bv #x0040 16)))
     #f
     #f
     #f
     'int16)
    (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
   (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
   #f
   #f
   #f
   'int16)
  '(#(struct:int16_t input1_multiplier)
    (union [(&& (! xi?$1001) (&& (! xi?$1002) (! xi?$1003))) #(struct:int8_t
                                                               (bv #x01 8))] [(|| xi?$1001 (&& (! xi?$1001) (|| xi?$1002 (&& xi?$1003 (! xi?$1002))))) #(struct:int16_t
                                                                                                                                                         (ite* (⊢ xi?$1001 input1_multiplier) (⊢ (&& (! xi?$1001) (|| xi?$1002 (&& xi?$1003 (! xi?$1002)))) (ite* (⊢ xi?$1002 (bv #x0040 16)) (⊢ (&& xi?$1003 (! xi?$1002)) input2_multiplier)))))]))
  #f
  #f
  #f
  'int32)
 (vs-mpy-add
  ...
  (vs-mpy-add
   ...
   (combine
    (vs-mpy-add
     ...
     #<load-data>
     (list (int16_t (bv #x0040 16)))
     #f
     #f
     #f
     'int16)
    (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
   (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
   #f
   #f
   #f
   'int16)
  '(#(struct:int16_t input1_multiplier))
  #f
  x?$999
  #f
  'int32)
 (vs-mpy-add
  ...
  (combine
   (vs-mpy-add
    ...
    (vs-mpy-add
     ...
     (combine
      (vs-mpy-add
       ...
       #<load-data>
       (list (int16_t (bv #x0040 16)))
       #f
       #f
       #f
       'int16)
      (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
     (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
     #f
     #f
     #f
     'int16)
    '(#(struct:int16_t input1_multiplier))
    #f
    #f
    #f
    'int32)
   (union [x?$1004 #(struct:vs-mpy-add
                     ...
                     #(struct:vs-mpy-add
                       ...
                       #<combine:
                        #(struct:vs-mpy-add
                          ...
                          #<load-data>
                          (#(struct:int16_t (bv #x0040 16)))
                          #f
                          #f
                          #f
                          int16)
                        #(struct:broadcast
                          ...
                          #(struct:sca-mul
                            #(struct:int16_t t125)
                            #(struct:int16_t (bv #xffc0 16))))>
                       (#(struct:int8_t (bv #x01 8))
                        #(struct:int8_t (bv #x01 8)))
                       #f
                       #f
                       #f
                       int16)
                     (#(struct:int16_t input1_multiplier))
                     #f
                     #f
                     #f
                     int32)] [(! x?$1004) #(struct:vs-mpy-add
                                            ...
                                            #(struct:vs-mpy-add
                                              ...
                                              #<combine:
                                               #(struct:vs-mpy-add
                                                 ...
                                                 #<load-data>
                                                 (#(struct:int16_t
                                                    (bv #x0040 16)))
                                                 #f
                                                 #f
                                                 #f
                                                 int16)
                                               #(struct:broadcast
                                                 ...
                                                 #(struct:sca-mul
                                                   #(struct:int16_t t126)
                                                   #(struct:int16_t
                                                     (bv #xffc0 16))))>
                                              (#(struct:int8_t (bv #x01 8))
                                               #(struct:int8_t (bv #x01 8)))
                                              #f
                                              #f
                                              #f
                                              int16)
                                            (#(struct:int16_t
                                               input2_multiplier))
                                            #f
                                            #f
                                            #f
                                            int32)]))
  (list (int16_t input1_multiplier) (int8_t (bv #x01 8)))
  #f
  #f
  #f
  'int32)
 (vs-mpy-add
  ...
  (combine
   (vs-mpy-add
    ...
    #<load-data>
    '(#(struct:int16_t (bv #x0040 16)))
    #f
    #f
    #f
    'int16)
   (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
  '(#(struct:int8_t (bv #x01 8))
    #(struct:int8_t (bv #x01 8))
    (union [(&& (! xi?$1172) (&& (! xi?$1173) (! xi?$1174))) #(struct:int8_t
                                                               (bv #x01 8))] [(|| xi?$1172 (&& (! xi?$1172) (|| xi?$1173 (&& xi?$1174 (! xi?$1173))))) #(struct:int16_t
                                                                                                                                                         (ite* (⊢ xi?$1172 input1_multiplier) (⊢ (&& (! xi?$1172) (|| xi?$1173 (&& xi?$1174 (! xi?$1173)))) (ite* (⊢ xi?$1173 (bv #x0040 16)) (⊢ (&& xi?$1174 (! xi?$1173)) input2_multiplier)))))]))
  #f
  #f
  #f
  'int32)
 (vs-mpy-add
  ...
  (combine
   (vs-mpy-add
    ...
    #<load-data>
    '(#(struct:int16_t (bv #x0040 16)))
    #f
    #f
    #f
    'int16)
   (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
  '(#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8)))
  #f
  x?$1170
  #f
  'int32)
 (vs-mpy-add
  ...
  (combine
   (vs-mpy-add
    ...
    (combine
     (vs-mpy-add
      ...
      #<load-data>
      '(#(struct:int16_t (bv #x0040 16)))
      #f
      #f
      #f
      'int16)
     (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
    '(#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8)))
    #f
    #f
    #f
    'int16)
   (union [x?$1175 #(struct:vs-mpy-add
                     ...
                     #(struct:vs-mpy-add
                       ...
                       #<combine:
                        #(struct:vs-mpy-add
                          ...
                          #<load-data>
                          (#(struct:int16_t (bv #x0040 16)))
                          #f
                          #f
                          #f
                          int16)
                        #(struct:broadcast
                          ...
                          #(struct:sca-mul
                            #(struct:int16_t t125)
                            #(struct:int16_t (bv #xffc0 16))))>
                       (#(struct:int8_t (bv #x01 8))
                        #(struct:int8_t (bv #x01 8)))
                       #f
                       #f
                       #f
                       int16)
                     (#(struct:int16_t input1_multiplier))
                     #f
                     #f
                     #f
                     int32)] [(! x?$1175) #(struct:vs-mpy-add
                                            ...
                                            #(struct:vs-mpy-add
                                              ...
                                              #<combine:
                                               #(struct:vs-mpy-add
                                                 ...
                                                 #<load-data>
                                                 (#(struct:int16_t
                                                    (bv #x0040 16)))
                                                 #f
                                                 #f
                                                 #f
                                                 int16)
                                               #(struct:broadcast
                                                 ...
                                                 #(struct:sca-mul
                                                   #(struct:int16_t t126)
                                                   #(struct:int16_t
                                                     (bv #xffc0 16))))>
                                              (#(struct:int8_t (bv #x01 8))
                                               #(struct:int8_t (bv #x01 8)))
                                              #f
                                              #f
                                              #f
                                              int16)
                                            (#(struct:int16_t
                                               input2_multiplier))
                                            #f
                                            #f
                                            #f
                                            int32)]))
  (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
  #f
  #f
  #f
  'int32)
 (vs-mpy-add
  ...
  (vs-mpy-add
   ...
   (combine
    (vs-mpy-add
     ...
     #<load-data>
     '(#(struct:int16_t (bv #x0040 16)))
     #f
     #f
     #f
     'int16)
    (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
   '(#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8)))
   #f
   #f
   #f
   'int16)
  '(#(struct:int16_t input2_multiplier)
    (union [(&& (! xi?$1115) (&& (! xi?$1116) (! xi?$1117))) #(struct:int8_t
                                                               (bv #x01 8))] [(|| xi?$1115 (&& (! xi?$1115) (|| xi?$1116 (&& xi?$1117 (! xi?$1116))))) #(struct:int16_t
                                                                                                                                                         (ite* (⊢ xi?$1115 input1_multiplier) (⊢ (&& (! xi?$1115) (|| xi?$1116 (&& xi?$1117 (! xi?$1116)))) (ite* (⊢ xi?$1116 (bv #x0040 16)) (⊢ (&& xi?$1117 (! xi?$1116)) input2_multiplier)))))]))
  #f
  #f
  #f
  'int32)
 (vs-mpy-add
  ...
  (vs-mpy-add
   ...
   (combine
    (vs-mpy-add
     ...
     #<load-data>
     '(#(struct:int16_t (bv #x0040 16)))
     #f
     #f
     #f
     'int16)
    (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
   '(#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8)))
   #f
   #f
   #f
   'int16)
  '(#(struct:int16_t input2_multiplier))
  #f
  x?$1113
  #f
  'int32)
 (vs-mpy-add
  ...
  (combine
   (vs-mpy-add
    ...
    (vs-mpy-add
     ...
     (combine
      (vs-mpy-add
       ...
       #<load-data>
       '(#(struct:int16_t (bv #x0040 16)))
       #f
       #f
       #f
       'int16)
      (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
     '(#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8)))
     #f
     #f
     #f
     'int16)
    '(#(struct:int16_t input2_multiplier))
    #f
    #f
    #f
    'int32)
   (union [x?$1118 #(struct:vs-mpy-add
                     ...
                     #(struct:vs-mpy-add
                       ...
                       #<combine:
                        #(struct:vs-mpy-add
                          ...
                          #<load-data>
                          (#(struct:int16_t (bv #x0040 16)))
                          #f
                          #f
                          #f
                          int16)
                        #(struct:broadcast
                          ...
                          #(struct:sca-mul
                            #(struct:int16_t t125)
                            #(struct:int16_t (bv #xffc0 16))))>
                       (#(struct:int8_t (bv #x01 8))
                        #(struct:int8_t (bv #x01 8)))
                       #f
                       #f
                       #f
                       int16)
                     (#(struct:int16_t input1_multiplier))
                     #f
                     #f
                     #f
                     int32)] [(! x?$1118) #(struct:vs-mpy-add
                                            ...
                                            #(struct:vs-mpy-add
                                              ...
                                              #<combine:
                                               #(struct:vs-mpy-add
                                                 ...
                                                 #<load-data>
                                                 (#(struct:int16_t
                                                    (bv #x0040 16)))
                                                 #f
                                                 #f
                                                 #f
                                                 int16)
                                               #(struct:broadcast
                                                 ...
                                                 #(struct:sca-mul
                                                   #(struct:int16_t t126)
                                                   #(struct:int16_t
                                                     (bv #xffc0 16))))>
                                              (#(struct:int8_t (bv #x01 8))
                                               #(struct:int8_t (bv #x01 8)))
                                              #f
                                              #f
                                              #f
                                              int16)
                                            (#(struct:int16_t
                                               input2_multiplier))
                                            #f
                                            #f
                                            #f
                                            int32)]))
  (list (int16_t input2_multiplier) (int8_t (bv #x01 8)))
  #f
  #f
  #f
  'int32))
here(#(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<load-data> (#(struct:int16_t (bv #x0040 16))) #f #f #f int16) #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t125) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8)) (union #:size 2 #:hash 1435223681599)) #f #f #f int32) #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<load-data> (#(struct:int16_t (bv #x0040 16))) #f #f #f int16) #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t125) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f x?$1056 #f int32) #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<load-data> (#(struct:int16_t (bv #x0040 16))) #f #f #f int16) #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t125) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int16) (union #:size 2 #:hash 375169251234)> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32) #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<load-data> (#(struct:int16_t (bv #x0040 16))) #f #f #f int16) #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t125) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int16) (#(struct:int16_t input1_multiplier) (union #:size 2 #:hash 1435219494402)) #f #f #f int32) #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<load-data> (#(struct:int16_t (bv #x0040 16))) #f #f #f int16) #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t125) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int16) (#(struct:int16_t input1_multiplier)) #f x?$999 #f int32) #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<load-data> (#(struct:int16_t (bv #x0040 16))) #f #f #f int16) #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t125) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int16) (#(struct:int16_t input1_multiplier)) #f #f #f int32) (union #:size 2 #:hash 375222761899)> (#(struct:int16_t input1_multiplier) #(struct:int8_t (bv #x01 8))) #f #f #f int32) #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<load-data> (#(struct:int16_t (bv #x0040 16))) #f #f #f int16) #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t126) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8)) (union #:size 2 #:hash 1435214508753)) #f #f #f int32) #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<load-data> (#(struct:int16_t (bv #x0040 16))) #f #f #f int16) #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t126) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f x?$1170 #f int32) #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<load-data> (#(struct:int16_t (bv #x0040 16))) #f #f #f int16) #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t126) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int16) (union #:size 2 #:hash 375161788258)> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32) #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<load-data> (#(struct:int16_t (bv #x0040 16))) #f #f #f int16) #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t126) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int16) (#(struct:int16_t input2_multiplier) (union #:size 2 #:hash 1435210868614)) #f #f #f int32) #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<load-data> (#(struct:int16_t (bv #x0040 16))) #f #f #f int16) #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t126) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int16) (#(struct:int16_t input2_multiplier)) #f x?$1113 #f int32) #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<load-data> (#(struct:int16_t (bv #x0040 16))) #f #f #f int16) #(struct:broadcast ... #(struct:sca-mul #(struct:int16_t t126) #(struct:int16_t (bv #xffc0 16))))> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int16) (#(struct:int16_t input2_multiplier)) #f #f #f int32) (union #:size 2 #:hash 375149829848)> (#(struct:int16_t input2_multiplier) #(struct:int8_t (bv #x01 8))) #f #f #f int32))

"Replace templates"
'()
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-mul
  (vec-cast
   (vec-add
    (vec-mul
     (vec-cast
      (load
       (buffer input1 'uint8)
       (ramp
        (sca-add
         (sca-mul output.s0.x.x 16)
         (sca-add
          (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
          (var-lookup 't55)))
        1
        16)
       (aligned 1 0))
      'int16
      16)
     (sca-broadcast (int16_t (bv #x0040 16)) 16))
    (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
   'int32
   16)
  (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
 (vec-mul
  (vec-cast
   (vec-add
    (vec-mul
     (vec-cast
      (load
       (buffer input2 'uint8)
       (ramp
        (sca-add
         (sca-mul output.s0.x.x 16)
         (sca-add
          (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
          (var-lookup 't56)))
        1
        16)
       (aligned 1 0))
      'int16
      16)
     (sca-broadcast (int16_t (bv #x0040 16)) 16))
    (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
   'int32
   16)
  (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
template:
  (vs-mpy-add
 ...
 (combine
  (vs-mpy-add ... #<load-data> (list (int16_t (bv #x0040 16))) #f #f #f 'int16)
  (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
 (list
  (int8_t (bv #x01 8))
  (int8_t (bv #x01 8))
  (union [(&& (! xi?$1058) (&& (! xi?$1059) (! xi?$1060))) #(struct:int8_t
                                                             (bv #x01 8))] [(|| xi?$1058 (&& (! xi?$1058) (|| xi?$1059 (&& xi?$1060 (! xi?$1059))))) #(struct:int16_t
                                                                                                                                                       (ite* (⊢ xi?$1058 input1_multiplier) (⊢ (&& (! xi?$1058) (|| xi?$1059 (&& xi?$1060 (! xi?$1059)))) (ite* (⊢ xi?$1059 (bv #x0040 16)) (⊢ (&& xi?$1060 (! xi?$1059)) input2_multiplier)))))]))
 #f
 #f
 #f
 'int32)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$1226 idx) (bv #x3fc0 16)) (bvsle (bv #x0000 16) (app abstr-vals$1226 idx))))
 (forall (idx) (bvsle (app abstr-vals$1227 idx) (bv #x7fc0 16))))
optimized-halide-expr:
  (vec-add
 (vec-mul
  (vec-cast (vec-add #<abstr-halide-expr> #<abstr-halide-expr>) 'int32 16)
  (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
 (vec-mul
  (vec-cast
   (vec-add
    (vec-mul
     (vec-cast
      (load
       (buffer input2 'uint8)
       (ramp
        (sca-add
         (sca-mul output.s0.x.x 16)
         (sca-add
          (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
          (var-lookup 't56)))
        1
        16)
       (aligned 1 0))
      'int16
      16)
     (sca-broadcast (int16_t (bv #x0040 16)) 16))
    (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
   'int32
   16)
  (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
optimized-template:
  (vs-mpy-add
 ...
 (combine #<abstr-expr> #<abstr-expr>)
 (list
  (int8_t (bv #x01 8))
  (int8_t (bv #x01 8))
  (union [(&& (! xi?$1058) (&& (! xi?$1059) (! xi?$1060))) #(struct:int8_t
                                                             (bv #x01 8))] [(|| xi?$1058 (&& (! xi?$1058) (|| xi?$1059 (&& xi?$1060 (! xi?$1059))))) #(struct:int16_t
                                                                                                                                                       (ite* (⊢ xi?$1058 input1_multiplier) (⊢ (&& (! xi?$1058) (|| xi?$1059 (&& xi?$1060 (! xi?$1059)))) (ite* (⊢ xi?$1059 (bv #x0040 16)) (⊢ (&& xi?$1060 (! xi?$1059)) input2_multiplier)))))]))
 #f
 #f
 #f
 'int32)
optimized Halide 0:
  (int32_t
 (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32))) (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (bvadd (app abstr-vals$1226 0) (app abstr-vals$1227 0)) (bitvector 32)))))
optimized x86 0:
  (int32_t
 (bvadd (bvmul (sign-extend (ite c$254 (app abstr-vals$1226 idx$253) (app abstr-vals$1227 idx$253)) (bitvector 32)) (ite* (⊢ (&& (! xi?$1058) (&& (! xi?$1059) (! xi?$1060))) (bv #x00000001 32)) (⊢ (|| xi?$1058 (&& (! xi?$1058) (|| xi?$1059 (&& xi?$1060 (! xi?$1059))))) (sign-extend (ite* (⊢ xi?$1058 input1_multiplier) (⊢ (&& (! xi?$1058) (|| xi?$1059 (&& xi?$1060 (! xi?$1059)))) (ite* (⊢ xi?$1059 (bv #x0040 16)) (⊢ (&& xi?$1060 (! xi?$1059)) input2_multiplier)))) (bitvector 32))))) (bvadd (sign-extend (app abstr-vals$1227 0) (bitvector 32)) (sign-extend (app abstr-vals$1226 0) (bitvector 32)))))
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-mul
  (vec-cast
   (vec-add
    (vec-mul
     (vec-cast
      (load
       (buffer input1 'uint8)
       (ramp
        (sca-add
         (sca-mul output.s0.x.x 16)
         (sca-add
          (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
          (var-lookup 't55)))
        1
        16)
       (aligned 1 0))
      'int16
      16)
     (sca-broadcast (int16_t (bv #x0040 16)) 16))
    (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
   'int32
   16)
  (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
 (vec-mul
  (vec-cast
   (vec-add
    (vec-mul
     (vec-cast
      (load
       (buffer input2 'uint8)
       (ramp
        (sca-add
         (sca-mul output.s0.x.x 16)
         (sca-add
          (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
          (var-lookup 't56)))
        1
        16)
       (aligned 1 0))
      'int16
      16)
     (sca-broadcast (int16_t (bv #x0040 16)) 16))
    (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
   'int32
   16)
  (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
template:
  (vs-mpy-add
 ...
 (combine
  (vs-mpy-add ... #<load-data> (list (int16_t (bv #x0040 16))) #f #f #f 'int16)
  (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
 (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
 #f
 x?$1056
 #f
 'int32)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$1228 idx) (bv #x3fc0 16)) (bvsle (bv #x0000 16) (app abstr-vals$1228 idx))))
 (forall (idx) (bvsle (app abstr-vals$1229 idx) (bv #x7fc0 16))))
optimized-halide-expr:
  (vec-add
 (vec-mul
  (vec-cast (vec-add #<abstr-halide-expr> #<abstr-halide-expr>) 'int32 16)
  (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
 (vec-mul
  (vec-cast
   (vec-add
    (vec-mul
     (vec-cast
      (load
       (buffer input2 'uint8)
       (ramp
        (sca-add
         (sca-mul output.s0.x.x 16)
         (sca-add
          (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
          (var-lookup 't56)))
        1
        16)
       (aligned 1 0))
      'int16
      16)
     (sca-broadcast (int16_t (bv #x0040 16)) 16))
    (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
   'int32
   16)
  (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
optimized-template:
  (vs-mpy-add
 ...
 (combine #<abstr-expr> #<abstr-expr>)
 (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
 #f
 x?$1056
 #f
 'int32)
optimized Halide 0:
  (int32_t
 (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32))) (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (bvadd (app abstr-vals$1228 0) (app abstr-vals$1229 0)) (bitvector 32)))))
optimized x86 0:
  (int32_t
 (bvadd (sign-extend (app abstr-vals$1228 0) (bitvector 32)) (bvadd (sign-extend (app abstr-vals$1229 0) (bitvector 32)) (ite x?$1056 (bv #x00000001 32) (bv #x00000000 32)))))
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-mul
  (vec-cast
   (vec-add
    (vec-mul
     (vec-cast
      (load
       (buffer input1 'uint8)
       (ramp
        (sca-add
         (sca-mul output.s0.x.x 16)
         (sca-add
          (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
          (var-lookup 't55)))
        1
        16)
       (aligned 1 0))
      'int16
      16)
     (sca-broadcast (int16_t (bv #x0040 16)) 16))
    (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
   'int32
   16)
  (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
 (vec-mul
  (vec-cast
   (vec-add
    (vec-mul
     (vec-cast
      (load
       (buffer input2 'uint8)
       (ramp
        (sca-add
         (sca-mul output.s0.x.x 16)
         (sca-add
          (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
          (var-lookup 't56)))
        1
        16)
       (aligned 1 0))
      'int16
      16)
     (sca-broadcast (int16_t (bv #x0040 16)) 16))
    (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
   'int32
   16)
  (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
template:
  (vs-mpy-add
 ...
 (combine
  (vs-mpy-add ... #<load-data> (list (int16_t (bv #x0040 16))) #f #f #f 'int16)
  (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
 (list
  (int8_t (bv #x01 8))
  (int8_t (bv #x01 8))
  (union [(&& (! xi?$1172) (&& (! xi?$1173) (! xi?$1174))) #(struct:int8_t
                                                             (bv #x01 8))] [(|| xi?$1172 (&& (! xi?$1172) (|| xi?$1173 (&& xi?$1174 (! xi?$1173))))) #(struct:int16_t
                                                                                                                                                       (ite* (⊢ xi?$1172 input1_multiplier) (⊢ (&& (! xi?$1172) (|| xi?$1173 (&& xi?$1174 (! xi?$1173)))) (ite* (⊢ xi?$1173 (bv #x0040 16)) (⊢ (&& xi?$1174 (! xi?$1173)) input2_multiplier)))))]))
 #f
 #f
 #f
 'int32)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$1230 idx) (bv #x3fc0 16)) (bvsle (bv #x0000 16) (app abstr-vals$1230 idx))))
 (forall (idx) (bvsle (app abstr-vals$1231 idx) (bv #x7fc0 16))))
optimized-halide-expr:
  (vec-add
 (vec-mul
  (vec-cast
   (vec-add
    (vec-mul
     (vec-cast
      (load
       (buffer input1 'uint8)
       (ramp
        (sca-add
         (sca-mul output.s0.x.x 16)
         (sca-add
          (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
          (var-lookup 't55)))
        1
        16)
       (aligned 1 0))
      'int16
      16)
     (sca-broadcast (int16_t (bv #x0040 16)) 16))
    (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
   'int32
   16)
  (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
 (vec-mul
  (vec-cast (vec-add #<abstr-halide-expr> #<abstr-halide-expr>) 'int32 16)
  (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
optimized-template:
  (vs-mpy-add
 ...
 (combine #<abstr-expr> #<abstr-expr>)
 (list
  (int8_t (bv #x01 8))
  (int8_t (bv #x01 8))
  (union [(&& (! xi?$1172) (&& (! xi?$1173) (! xi?$1174))) #(struct:int8_t
                                                             (bv #x01 8))] [(|| xi?$1172 (&& (! xi?$1172) (|| xi?$1173 (&& xi?$1174 (! xi?$1173))))) #(struct:int16_t
                                                                                                                                                       (ite* (⊢ xi?$1172 input1_multiplier) (⊢ (&& (! xi?$1172) (|| xi?$1173 (&& xi?$1174 (! xi?$1173)))) (ite* (⊢ xi?$1173 (bv #x0040 16)) (⊢ (&& xi?$1174 (! xi?$1173)) input2_multiplier)))))]))
 #f
 #f
 #f
 'int32)
optimized Halide 0:
  (int32_t
 (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (bvadd (app abstr-vals$1230 0) (app abstr-vals$1231 0)) (bitvector 32)))))
optimized x86 0:
  (int32_t
 (bvadd (bvmul (sign-extend (ite c$753 (app abstr-vals$1230 idx$752) (app abstr-vals$1231 idx$752)) (bitvector 32)) (ite* (⊢ (&& (! xi?$1172) (&& (! xi?$1173) (! xi?$1174))) (bv #x00000001 32)) (⊢ (|| xi?$1172 (&& (! xi?$1172) (|| xi?$1173 (&& xi?$1174 (! xi?$1173))))) (sign-extend (ite* (⊢ xi?$1172 input1_multiplier) (⊢ (&& (! xi?$1172) (|| xi?$1173 (&& xi?$1174 (! xi?$1173)))) (ite* (⊢ xi?$1173 (bv #x0040 16)) (⊢ (&& xi?$1174 (! xi?$1173)) input2_multiplier)))) (bitvector 32))))) (bvadd (sign-extend (app abstr-vals$1231 0) (bitvector 32)) (sign-extend (app abstr-vals$1230 0) (bitvector 32)))))
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-mul
  (vec-cast
   (vec-add
    (vec-mul
     (vec-cast
      (load
       (buffer input1 'uint8)
       (ramp
        (sca-add
         (sca-mul output.s0.x.x 16)
         (sca-add
          (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
          (var-lookup 't55)))
        1
        16)
       (aligned 1 0))
      'int16
      16)
     (sca-broadcast (int16_t (bv #x0040 16)) 16))
    (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
   'int32
   16)
  (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
 (vec-mul
  (vec-cast
   (vec-add
    (vec-mul
     (vec-cast
      (load
       (buffer input2 'uint8)
       (ramp
        (sca-add
         (sca-mul output.s0.x.x 16)
         (sca-add
          (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
          (var-lookup 't56)))
        1
        16)
       (aligned 1 0))
      'int16
      16)
     (sca-broadcast (int16_t (bv #x0040 16)) 16))
    (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
   'int32
   16)
  (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
template:
  (vs-mpy-add
 ...
 (combine
  (vs-mpy-add ... #<load-data> (list (int16_t (bv #x0040 16))) #f #f #f 'int16)
  (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
 (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
 #f
 x?$1170
 #f
 'int32)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$1232 idx) (bv #x3fc0 16)) (bvsle (bv #x0000 16) (app abstr-vals$1232 idx))))
 (forall (idx) (bvsle (app abstr-vals$1233 idx) (bv #x7fc0 16))))
optimized-halide-expr:
  (vec-add
 (vec-mul
  (vec-cast
   (vec-add
    (vec-mul
     (vec-cast
      (load
       (buffer input1 'uint8)
       (ramp
        (sca-add
         (sca-mul output.s0.x.x 16)
         (sca-add
          (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
          (var-lookup 't55)))
        1
        16)
       (aligned 1 0))
      'int16
      16)
     (sca-broadcast (int16_t (bv #x0040 16)) 16))
    (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
   'int32
   16)
  (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
 (vec-mul
  (vec-cast (vec-add #<abstr-halide-expr> #<abstr-halide-expr>) 'int32 16)
  (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
optimized-template:
  (vs-mpy-add
 ...
 (combine #<abstr-expr> #<abstr-expr>)
 (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
 #f
 x?$1170
 #f
 'int32)
optimized Halide 0:
  (int32_t
 (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (bvadd (app abstr-vals$1232 0) (app abstr-vals$1233 0)) (bitvector 32)))))
optimized x86 0:
  (int32_t
 (bvadd (sign-extend (app abstr-vals$1232 0) (bitvector 32)) (bvadd (sign-extend (app abstr-vals$1233 0) (bitvector 32)) (ite x?$1170 (bv #x00000001 32) (bv #x00000000 32)))))
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-mul
  (vec-cast
   (vec-add
    (vec-mul
     (vec-cast
      (load
       (buffer input1 'uint8)
       (ramp
        (sca-add
         (sca-mul output.s0.x.x 16)
         (sca-add
          (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
          (var-lookup 't55)))
        1
        16)
       (aligned 1 0))
      'int16
      16)
     (sca-broadcast (int16_t (bv #x0040 16)) 16))
    (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
   'int32
   16)
  (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
 (vec-mul
  (vec-cast
   (vec-add
    (vec-mul
     (vec-cast
      (load
       (buffer input2 'uint8)
       (ramp
        (sca-add
         (sca-mul output.s0.x.x 16)
         (sca-add
          (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
          (var-lookup 't56)))
        1
        16)
       (aligned 1 0))
      'int16
      16)
     (sca-broadcast (int16_t (bv #x0040 16)) 16))
    (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
   'int32
   16)
  (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
template:
  (vs-mpy-add
 ...
 (vs-mpy-add
  ...
  (combine
   (vs-mpy-add
    ...
    #<load-data>
    (list (int16_t (bv #x0040 16)))
    #f
    #f
    #f
    'int16)
   (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
  (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
  #f
  #f
  #f
  'int16)
 (list
  (int16_t input1_multiplier)
  (union [(&& (! xi?$1001) (&& (! xi?$1002) (! xi?$1003))) #(struct:int8_t
                                                             (bv #x01 8))] [(|| xi?$1001 (&& (! xi?$1001) (|| xi?$1002 (&& xi?$1003 (! xi?$1002))))) #(struct:int16_t
                                                                                                                                                       (ite* (⊢ xi?$1001 input1_multiplier) (⊢ (&& (! xi?$1001) (|| xi?$1002 (&& xi?$1003 (! xi?$1002)))) (ite* (⊢ xi?$1002 (bv #x0040 16)) (⊢ (&& xi?$1003 (! xi?$1002)) input2_multiplier)))))]))
 #f
 #f
 #f
 'int32)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-add
 (vec-mul
  (vec-cast #<abstr-halide-expr> 'int32 16)
  (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
 (vec-mul
  (vec-cast
   (vec-add
    (vec-mul
     (vec-cast
      (load
       (buffer input2 'uint8)
       (ramp
        (sca-add
         (sca-mul output.s0.x.x 16)
         (sca-add
          (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
          (var-lookup 't56)))
        1
        16)
       (aligned 1 0))
      'int16
      16)
     (sca-broadcast (int16_t (bv #x0040 16)) 16))
    (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
   'int32
   16)
  (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
optimized-template:
  (vs-mpy-add
 ...
 #<abstr-expr>
 (list
  (int16_t input1_multiplier)
  (union [(&& (! xi?$1001) (&& (! xi?$1002) (! xi?$1003))) #(struct:int8_t
                                                             (bv #x01 8))] [(|| xi?$1001 (&& (! xi?$1001) (|| xi?$1002 (&& xi?$1003 (! xi?$1002))))) #(struct:int16_t
                                                                                                                                                       (ite* (⊢ xi?$1001 input1_multiplier) (⊢ (&& (! xi?$1001) (|| xi?$1002 (&& xi?$1003 (! xi?$1002)))) (ite* (⊢ xi?$1002 (bv #x0040 16)) (⊢ (&& xi?$1003 (! xi?$1002)) input2_multiplier)))))]))
 #f
 #f
 #f
 'int32)
optimized Halide 0:
  (int32_t
 (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32))) (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (app abstr-vals$1234 0) (bitvector 32)))))
optimized x86 0:
  (int32_t
 (bvadd (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (app abstr-vals$1234 0) (bitvector 32))) (bvmul (sign-extend (app abstr-vals$1234 1) (bitvector 32)) (ite* (⊢ (&& (! xi?$1001) (&& (! xi?$1002) (! xi?$1003))) (bv #x00000001 32)) (⊢ (|| xi?$1001 (&& (! xi?$1001) (|| xi?$1002 (&& xi?$1003 (! xi?$1002))))) (sign-extend (ite* (⊢ xi?$1001 input1_multiplier) (⊢ (&& (! xi?$1001) (|| xi?$1002 (&& xi?$1003 (! xi?$1002)))) (ite* (⊢ xi?$1002 (bv #x0040 16)) (⊢ (&& xi?$1003 (! xi?$1002)) input2_multiplier)))) (bitvector 32)))))))
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-mul
  (vec-cast
   (vec-add
    (vec-mul
     (vec-cast
      (load
       (buffer input1 'uint8)
       (ramp
        (sca-add
         (sca-mul output.s0.x.x 16)
         (sca-add
          (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
          (var-lookup 't55)))
        1
        16)
       (aligned 1 0))
      'int16
      16)
     (sca-broadcast (int16_t (bv #x0040 16)) 16))
    (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
   'int32
   16)
  (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
 (vec-mul
  (vec-cast
   (vec-add
    (vec-mul
     (vec-cast
      (load
       (buffer input2 'uint8)
       (ramp
        (sca-add
         (sca-mul output.s0.x.x 16)
         (sca-add
          (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
          (var-lookup 't56)))
        1
        16)
       (aligned 1 0))
      'int16
      16)
     (sca-broadcast (int16_t (bv #x0040 16)) 16))
    (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
   'int32
   16)
  (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
template:
  (vs-mpy-add
 ...
 (vs-mpy-add
  ...
  (combine
   (vs-mpy-add
    ...
    #<load-data>
    (list (int16_t (bv #x0040 16)))
    #f
    #f
    #f
    'int16)
   (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
  (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
  #f
  #f
  #f
  'int16)
 (list (int16_t input1_multiplier))
 #f
 x?$999
 #f
 'int32)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-add
 (vec-mul
  (vec-cast #<abstr-halide-expr> 'int32 16)
  (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
 (vec-mul
  (vec-cast
   (vec-add
    (vec-mul
     (vec-cast
      (load
       (buffer input2 'uint8)
       (ramp
        (sca-add
         (sca-mul output.s0.x.x 16)
         (sca-add
          (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
          (var-lookup 't56)))
        1
        16)
       (aligned 1 0))
      'int16
      16)
     (sca-broadcast (int16_t (bv #x0040 16)) 16))
    (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
   'int32
   16)
  (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
optimized-template:
  (vs-mpy-add
 ...
 #<abstr-expr>
 (list (int16_t input1_multiplier))
 #f
 x?$999
 #f
 'int32)
optimized Halide 0:
  (int32_t
 (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32))) (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (app abstr-vals$1235 0) (bitvector 32)))))
optimized x86 0:
  (int32_t
 (bvadd (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (app abstr-vals$1235 0) (bitvector 32))) (ite x?$999 (bv #x00000001 32) (bv #x00000000 32))))
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-mul
  (vec-cast
   (vec-add
    (vec-mul
     (vec-cast
      (load
       (buffer input1 'uint8)
       (ramp
        (sca-add
         (sca-mul output.s0.x.x 16)
         (sca-add
          (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
          (var-lookup 't55)))
        1
        16)
       (aligned 1 0))
      'int16
      16)
     (sca-broadcast (int16_t (bv #x0040 16)) 16))
    (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
   'int32
   16)
  (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
 (vec-mul
  (vec-cast
   (vec-add
    (vec-mul
     (vec-cast
      (load
       (buffer input2 'uint8)
       (ramp
        (sca-add
         (sca-mul output.s0.x.x 16)
         (sca-add
          (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
          (var-lookup 't56)))
        1
        16)
       (aligned 1 0))
      'int16
      16)
     (sca-broadcast (int16_t (bv #x0040 16)) 16))
    (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
   'int32
   16)
  (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
template:
  (vs-mpy-add
 ...
 (vs-mpy-add
  ...
  (combine
   (vs-mpy-add
    ...
    #<load-data>
    (list (int16_t (bv #x0040 16)))
    #f
    #f
    #f
    'int16)
   (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
  (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
  #f
  #f
  #f
  'int16)
 (list
  (int16_t input2_multiplier)
  (union [(&& (! xi?$1115) (&& (! xi?$1116) (! xi?$1117))) #(struct:int8_t
                                                             (bv #x01 8))] [(|| xi?$1115 (&& (! xi?$1115) (|| xi?$1116 (&& xi?$1117 (! xi?$1116))))) #(struct:int16_t
                                                                                                                                                       (ite* (⊢ xi?$1115 input1_multiplier) (⊢ (&& (! xi?$1115) (|| xi?$1116 (&& xi?$1117 (! xi?$1116)))) (ite* (⊢ xi?$1116 (bv #x0040 16)) (⊢ (&& xi?$1117 (! xi?$1116)) input2_multiplier)))))]))
 #f
 #f
 #f
 'int32)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-add
 (vec-mul
  (vec-cast
   (vec-add
    (vec-mul
     (vec-cast
      (load
       (buffer input1 'uint8)
       (ramp
        (sca-add
         (sca-mul output.s0.x.x 16)
         (sca-add
          (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
          (var-lookup 't55)))
        1
        16)
       (aligned 1 0))
      'int16
      16)
     (sca-broadcast (int16_t (bv #x0040 16)) 16))
    (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
   'int32
   16)
  (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
 (vec-mul
  (vec-cast #<abstr-halide-expr> 'int32 16)
  (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
optimized-template:
  (vs-mpy-add
 ...
 #<abstr-expr>
 (list
  (int16_t input2_multiplier)
  (union [(&& (! xi?$1115) (&& (! xi?$1116) (! xi?$1117))) #(struct:int8_t
                                                             (bv #x01 8))] [(|| xi?$1115 (&& (! xi?$1115) (|| xi?$1116 (&& xi?$1117 (! xi?$1116))))) #(struct:int16_t
                                                                                                                                                       (ite* (⊢ xi?$1115 input1_multiplier) (⊢ (&& (! xi?$1115) (|| xi?$1116 (&& xi?$1117 (! xi?$1116)))) (ite* (⊢ xi?$1116 (bv #x0040 16)) (⊢ (&& xi?$1117 (! xi?$1116)) input2_multiplier)))))]))
 #f
 #f
 #f
 'int32)
optimized Halide 0:
  (int32_t
 (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (app abstr-vals$1236 0) (bitvector 32)))))
optimized x86 0:
  (int32_t
 (bvadd (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (app abstr-vals$1236 0) (bitvector 32))) (bvmul (sign-extend (app abstr-vals$1236 1) (bitvector 32)) (ite* (⊢ (&& (! xi?$1115) (&& (! xi?$1116) (! xi?$1117))) (bv #x00000001 32)) (⊢ (|| xi?$1115 (&& (! xi?$1115) (|| xi?$1116 (&& xi?$1117 (! xi?$1116))))) (sign-extend (ite* (⊢ xi?$1115 input1_multiplier) (⊢ (&& (! xi?$1115) (|| xi?$1116 (&& xi?$1117 (! xi?$1116)))) (ite* (⊢ xi?$1116 (bv #x0040 16)) (⊢ (&& xi?$1117 (! xi?$1116)) input2_multiplier)))) (bitvector 32)))))))
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-mul
  (vec-cast
   (vec-add
    (vec-mul
     (vec-cast
      (load
       (buffer input1 'uint8)
       (ramp
        (sca-add
         (sca-mul output.s0.x.x 16)
         (sca-add
          (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
          (var-lookup 't55)))
        1
        16)
       (aligned 1 0))
      'int16
      16)
     (sca-broadcast (int16_t (bv #x0040 16)) 16))
    (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
   'int32
   16)
  (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
 (vec-mul
  (vec-cast
   (vec-add
    (vec-mul
     (vec-cast
      (load
       (buffer input2 'uint8)
       (ramp
        (sca-add
         (sca-mul output.s0.x.x 16)
         (sca-add
          (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
          (var-lookup 't56)))
        1
        16)
       (aligned 1 0))
      'int16
      16)
     (sca-broadcast (int16_t (bv #x0040 16)) 16))
    (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
   'int32
   16)
  (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
template:
  (vs-mpy-add
 ...
 (vs-mpy-add
  ...
  (combine
   (vs-mpy-add
    ...
    #<load-data>
    (list (int16_t (bv #x0040 16)))
    #f
    #f
    #f
    'int16)
   (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
  (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
  #f
  #f
  #f
  'int16)
 (list (int16_t input2_multiplier))
 #f
 x?$1113
 #f
 'int32)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-add
 (vec-mul
  (vec-cast
   (vec-add
    (vec-mul
     (vec-cast
      (load
       (buffer input1 'uint8)
       (ramp
        (sca-add
         (sca-mul output.s0.x.x 16)
         (sca-add
          (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
          (var-lookup 't55)))
        1
        16)
       (aligned 1 0))
      'int16
      16)
     (sca-broadcast (int16_t (bv #x0040 16)) 16))
    (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
   'int32
   16)
  (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
 (vec-mul
  (vec-cast #<abstr-halide-expr> 'int32 16)
  (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
optimized-template:
  (vs-mpy-add
 ...
 #<abstr-expr>
 (list (int16_t input2_multiplier))
 #f
 x?$1113
 #f
 'int32)
optimized Halide 0:
  (int32_t
 (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (app abstr-vals$1237 0) (bitvector 32)))))
optimized x86 0:
  (int32_t
 (bvadd (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (app abstr-vals$1237 0) (bitvector 32))) (ite x?$1113 (bv #x00000001 32) (bv #x00000000 32))))
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-mul
  (vec-cast
   (vec-add
    (vec-mul
     (vec-cast
      (load
       (buffer input1 'uint8)
       (ramp
        (sca-add
         (sca-mul output.s0.x.x 16)
         (sca-add
          (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
          (var-lookup 't55)))
        1
        16)
       (aligned 1 0))
      'int16
      16)
     (sca-broadcast (int16_t (bv #x0040 16)) 16))
    (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
   'int32
   16)
  (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
 (vec-mul
  (vec-cast
   (vec-add
    (vec-mul
     (vec-cast
      (load
       (buffer input2 'uint8)
       (ramp
        (sca-add
         (sca-mul output.s0.x.x 16)
         (sca-add
          (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
          (var-lookup 't56)))
        1
        16)
       (aligned 1 0))
      'int16
      16)
     (sca-broadcast (int16_t (bv #x0040 16)) 16))
    (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
   'int32
   16)
  (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
template:
  (vs-mpy-add
 ...
 (combine
  (vs-mpy-add
   ...
   (combine
    (vs-mpy-add
     ...
     #<load-data>
     (list (int16_t (bv #x0040 16)))
     #f
     #f
     #f
     'int16)
    (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
   (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
   #f
   #f
   #f
   'int16)
  (union [x?$1061 #(struct:vs-mpy-add
                    ...
                    #(struct:vs-mpy-add
                      ...
                      #<combine:
                       #(struct:vs-mpy-add
                         ...
                         #<load-data>
                         (#(struct:int16_t (bv #x0040 16)))
                         #f
                         #f
                         #f
                         int16)
                       #(struct:broadcast
                         ...
                         #(struct:sca-mul
                           #(struct:int16_t t125)
                           #(struct:int16_t (bv #xffc0 16))))>
                      (#(struct:int8_t (bv #x01 8))
                       #(struct:int8_t (bv #x01 8)))
                      #f
                      #f
                      #f
                      int16)
                    (#(struct:int16_t input1_multiplier))
                    #f
                    #f
                    #f
                    int32)] [(! x?$1061) #(struct:vs-mpy-add
                                           ...
                                           #(struct:vs-mpy-add
                                             ...
                                             #<combine:
                                              #(struct:vs-mpy-add
                                                ...
                                                #<load-data>
                                                (#(struct:int16_t
                                                   (bv #x0040 16)))
                                                #f
                                                #f
                                                #f
                                                int16)
                                              #(struct:broadcast
                                                ...
                                                #(struct:sca-mul
                                                  #(struct:int16_t t126)
                                                  #(struct:int16_t
                                                    (bv #xffc0 16))))>
                                             (#(struct:int8_t (bv #x01 8))
                                              #(struct:int8_t (bv #x01 8)))
                                             #f
                                             #f
                                             #f
                                             int16)
                                           (#(struct:int16_t
                                              input2_multiplier))
                                           #f
                                           #f
                                           #f
                                           int32)]))
 (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
 #f
 #f
 #f
 'int32)
axioms:
  (union [x?$1061 (#t #t)] [(! x?$1061) (#t)])
optimized-halide-expr:
  (vec-add
 (vec-mul
  (vec-cast #<abstr-halide-expr> 'int32 16)
  (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
 (vec-mul
  (vec-cast
   (vec-add
    (vec-mul
     (vec-cast
      (load
       (buffer input2 'uint8)
       (ramp
        (sca-add
         (sca-mul output.s0.x.x 16)
         (sca-add
          (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
          (var-lookup 't56)))
        1
        16)
       (aligned 1 0))
      'int16
      16)
     (sca-broadcast (int16_t (bv #x0040 16)) 16))
    (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
   'int32
   16)
  (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
optimized-template:
  (vs-mpy-add
 ...
 (combine
  #<abstr-expr>
  (union [x?$1061 #(struct:vs-mpy-add
                    ...
                    #<abstr-expr>
                    (#(struct:int16_t input1_multiplier))
                    #f
                    #f
                    #f
                    int32)] [(! x?$1061) #(struct:vs-mpy-add
                                           ...
                                           #(struct:vs-mpy-add
                                             ...
                                             #<combine:
                                              #(struct:vs-mpy-add
                                                ...
                                                #<load-data>
                                                (#(struct:int16_t
                                                   (bv #x0040 16)))
                                                #f
                                                #f
                                                #f
                                                int16)
                                              #(struct:broadcast
                                                ...
                                                #(struct:sca-mul
                                                  #(struct:int16_t t126)
                                                  #(struct:int16_t
                                                    (bv #xffc0 16))))>
                                             (#(struct:int8_t (bv #x01 8))
                                              #(struct:int8_t (bv #x01 8)))
                                             #f
                                             #f
                                             #f
                                             int16)
                                           (#(struct:int16_t
                                              input2_multiplier))
                                           #f
                                           #f
                                           #f
                                           int32)]))
 (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
 #f
 #f
 #f
 'int32)
optimized Halide 0:
  (int32_t
 (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32))) (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (app abstr-vals$1238 0) (bitvector 32)))))
optimized x86 0:
  (int32_t
 (bvadd (ite c$1067 (sign-extend (app abstr-vals$1238 idx$1066) (bitvector 32)) (ite x?$1061 (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (app abstr-vals$1238 idx$1066) (bitvector 32))) (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (bvadd (ite (|| (= 1 (* 2 idx$1066)) (&& c$753 (= 2 (* 2 idx$1066))) (&& c$755 (= 3 (* 2 idx$1066))) (&& c$757 (= 4 (* 2 idx$1066))) (&& c$759 (= 5 (* 2 idx$1066))) (&& c$761 (= 6 (* 2 idx$1066))) (&& c$763 (= 7 (* 2 idx$1066))) (&& c$765 (= 8 (* 2 idx$1066))) (&& c$767 (= 9 (* 2 idx$1066))) (&& c$769 (= 10 (* 2 idx$1066))) (&& c$771 (= 11 (* 2 idx$1066))) (&& c$773 (= 12 (* 2 idx$1066))) (&& c$775 (= 13 (* 2 idx$1066))) (&& c$777 (= 14 (* 2 idx$1066))) (&& c$779 (= 15 (* 2 idx$1066))) (&& c$781 (= 16 (* 2 idx$1066))) (&& c$783 (= 17 (* 2 idx$1066))) (&& c$785 (= 18 (* 2 idx$1066))) (&& c$787 (= 19 (* 2 idx$1066))) (&& c$789 (= 20 (* 2 idx$1066))) (&& c$791 (= 21 (* 2 idx$1066))) (&& c$793 (= 22 (* 2 idx$1066))) (&& c$795 (= 23 (* 2 idx$1066))) (&& c$797 (= 24 (* 2 idx$1066)))) (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (ite (|| (= 1 (+ 1 (* 2 idx$1066))) (&& c$753 (= 2 (+ 1 (* 2 idx$1066)))) (&& c$755 (= 3 (+ 1 (* 2 idx$1066)))) (&& c$757 (= 4 (+ 1 (* 2 idx$1066)))) (&& c$759 (= 5 (+ 1 (* 2 idx$1066)))) (&& c$761 (= 6 (+ 1 (* 2 idx$1066)))) (&& c$763 (= 7 (+ 1 (* 2 idx$1066)))) (&& c$765 (= 8 (+ 1 (* 2 idx$1066)))) (&& c$767 (= 9 (+ 1 (* 2 idx$1066)))) (&& c$769 (= 10 (+ 1 (* 2 idx$1066)))) (&& c$771 (= 11 (+ 1 (* 2 idx$1066)))) (&& c$773 (= 12 (+ 1 (* 2 idx$1066)))) (&& c$775 (= 13 (+ 1 (* 2 idx$1066)))) (&& c$777 (= 14 (+ 1 (* 2 idx$1066)))) (&& c$779 (= 15 (+ 1 (* 2 idx$1066)))) (&& c$781 (= 16 (+ 1 (* 2 idx$1066)))) (&& c$783 (= 17 (+ 1 (* 2 idx$1066)))) (&& c$785 (= 18 (+ 1 (* 2 idx$1066)))) (&& c$787 (= 19 (+ 1 (* 2 idx$1066)))) (&& c$789 (= 20 (+ 1 (* 2 idx$1066)))) (&& c$791 (= 21 (+ 1 (* 2 idx$1066)))) (&& c$793 (= 22 (+ 1 (* 2 idx$1066)))) (&& c$795 (= 23 (+ 1 (* 2 idx$1066)))) (&& c$797 (= 24 (+ 1 (* 2 idx$1066))))) (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126))) (bitvector 32))))) (bvadd (ite c$1063 (sign-extend (app abstr-vals$1238 idx$1062) (bitvector 32)) (ite x?$1061 (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (app abstr-vals$1238 idx$1062) (bitvector 32))) (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (bvadd (ite (|| (= 1 (* 2 idx$1062)) (&& c$753 (= 2 (* 2 idx$1062))) (&& c$755 (= 3 (* 2 idx$1062))) (&& c$757 (= 4 (* 2 idx$1062))) (&& c$759 (= 5 (* 2 idx$1062))) (&& c$761 (= 6 (* 2 idx$1062))) (&& c$763 (= 7 (* 2 idx$1062))) (&& c$765 (= 8 (* 2 idx$1062))) (&& c$767 (= 9 (* 2 idx$1062))) (&& c$769 (= 10 (* 2 idx$1062))) (&& c$771 (= 11 (* 2 idx$1062))) (&& c$773 (= 12 (* 2 idx$1062))) (&& c$775 (= 13 (* 2 idx$1062))) (&& c$777 (= 14 (* 2 idx$1062))) (&& c$779 (= 15 (* 2 idx$1062))) (&& c$781 (= 16 (* 2 idx$1062))) (&& c$783 (= 17 (* 2 idx$1062))) (&& c$785 (= 18 (* 2 idx$1062))) (&& c$787 (= 19 (* 2 idx$1062))) (&& c$789 (= 20 (* 2 idx$1062))) (&& c$791 (= 21 (* 2 idx$1062))) (&& c$793 (= 22 (* 2 idx$1062))) (&& c$795 (= 23 (* 2 idx$1062))) (&& c$797 (= 24 (* 2 idx$1062)))) (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (ite (|| (= 1 (+ 1 (* 2 idx$1062))) (&& c$753 (= 2 (+ 1 (* 2 idx$1062)))) (&& c$755 (= 3 (+ 1 (* 2 idx$1062)))) (&& c$757 (= 4 (+ 1 (* 2 idx$1062)))) (&& c$759 (= 5 (+ 1 (* 2 idx$1062)))) (&& c$761 (= 6 (+ 1 (* 2 idx$1062)))) (&& c$763 (= 7 (+ 1 (* 2 idx$1062)))) (&& c$765 (= 8 (+ 1 (* 2 idx$1062)))) (&& c$767 (= 9 (+ 1 (* 2 idx$1062)))) (&& c$769 (= 10 (+ 1 (* 2 idx$1062)))) (&& c$771 (= 11 (+ 1 (* 2 idx$1062)))) (&& c$773 (= 12 (+ 1 (* 2 idx$1062)))) (&& c$775 (= 13 (+ 1 (* 2 idx$1062)))) (&& c$777 (= 14 (+ 1 (* 2 idx$1062)))) (&& c$779 (= 15 (+ 1 (* 2 idx$1062)))) (&& c$781 (= 16 (+ 1 (* 2 idx$1062)))) (&& c$783 (= 17 (+ 1 (* 2 idx$1062)))) (&& c$785 (= 18 (+ 1 (* 2 idx$1062)))) (&& c$787 (= 19 (+ 1 (* 2 idx$1062)))) (&& c$789 (= 20 (+ 1 (* 2 idx$1062)))) (&& c$791 (= 21 (+ 1 (* 2 idx$1062)))) (&& c$793 (= 22 (+ 1 (* 2 idx$1062)))) (&& c$795 (= 23 (+ 1 (* 2 idx$1062)))) (&& c$797 (= 24 (+ 1 (* 2 idx$1062))))) (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126))) (bitvector 32))))) (ite c$1065 (sign-extend (app abstr-vals$1238 idx$1064) (bitvector 32)) (ite x?$1061 (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (app abstr-vals$1238 idx$1064) (bitvector 32))) (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (bvadd (ite (|| (= 1 (* 2 idx$1064)) (&& c$753 (= 2 (* 2 idx$1064))) (&& c$755 (= 3 (* 2 idx$1064))) (&& c$757 (= 4 (* 2 idx$1064))) (&& c$759 (= 5 (* 2 idx$1064))) (&& c$761 (= 6 (* 2 idx$1064))) (&& c$763 (= 7 (* 2 idx$1064))) (&& c$765 (= 8 (* 2 idx$1064))) (&& c$767 (= 9 (* 2 idx$1064))) (&& c$769 (= 10 (* 2 idx$1064))) (&& c$771 (= 11 (* 2 idx$1064))) (&& c$773 (= 12 (* 2 idx$1064))) (&& c$775 (= 13 (* 2 idx$1064))) (&& c$777 (= 14 (* 2 idx$1064))) (&& c$779 (= 15 (* 2 idx$1064))) (&& c$781 (= 16 (* 2 idx$1064))) (&& c$783 (= 17 (* 2 idx$1064))) (&& c$785 (= 18 (* 2 idx$1064))) (&& c$787 (= 19 (* 2 idx$1064))) (&& c$789 (= 20 (* 2 idx$1064))) (&& c$791 (= 21 (* 2 idx$1064))) (&& c$793 (= 22 (* 2 idx$1064))) (&& c$795 (= 23 (* 2 idx$1064))) (&& c$797 (= 24 (* 2 idx$1064)))) (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (ite (|| (= 1 (+ 1 (* 2 idx$1064))) (&& c$753 (= 2 (+ 1 (* 2 idx$1064)))) (&& c$755 (= 3 (+ 1 (* 2 idx$1064)))) (&& c$757 (= 4 (+ 1 (* 2 idx$1064)))) (&& c$759 (= 5 (+ 1 (* 2 idx$1064)))) (&& c$761 (= 6 (+ 1 (* 2 idx$1064)))) (&& c$763 (= 7 (+ 1 (* 2 idx$1064)))) (&& c$765 (= 8 (+ 1 (* 2 idx$1064)))) (&& c$767 (= 9 (+ 1 (* 2 idx$1064)))) (&& c$769 (= 10 (+ 1 (* 2 idx$1064)))) (&& c$771 (= 11 (+ 1 (* 2 idx$1064)))) (&& c$773 (= 12 (+ 1 (* 2 idx$1064)))) (&& c$775 (= 13 (+ 1 (* 2 idx$1064)))) (&& c$777 (= 14 (+ 1 (* 2 idx$1064)))) (&& c$779 (= 15 (+ 1 (* 2 idx$1064)))) (&& c$781 (= 16 (+ 1 (* 2 idx$1064)))) (&& c$783 (= 17 (+ 1 (* 2 idx$1064)))) (&& c$785 (= 18 (+ 1 (* 2 idx$1064)))) (&& c$787 (= 19 (+ 1 (* 2 idx$1064)))) (&& c$789 (= 20 (+ 1 (* 2 idx$1064)))) (&& c$791 (= 21 (+ 1 (* 2 idx$1064)))) (&& c$793 (= 22 (+ 1 (* 2 idx$1064)))) (&& c$795 (= 23 (+ 1 (* 2 idx$1064)))) (&& c$797 (= 24 (+ 1 (* 2 idx$1064))))) (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126))) (bitvector 32))))))))
Ran synthesizer for 1204 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-mul
  (vec-cast
   (vec-add
    (vec-mul
     (vec-cast
      (load
       (buffer input1 'uint8)
       (ramp
        (sca-add
         (sca-mul output.s0.x.x 16)
         (sca-add
          (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
          (var-lookup 't55)))
        1
        16)
       (aligned 1 0))
      'int16
      16)
     (sca-broadcast (int16_t (bv #x0040 16)) 16))
    (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
   'int32
   16)
  (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
 (vec-mul
  (vec-cast
   (vec-add
    (vec-mul
     (vec-cast
      (load
       (buffer input2 'uint8)
       (ramp
        (sca-add
         (sca-mul output.s0.x.x 16)
         (sca-add
          (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
          (var-lookup 't56)))
        1
        16)
       (aligned 1 0))
      'int16
      16)
     (sca-broadcast (int16_t (bv #x0040 16)) 16))
    (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
   'int32
   16)
  (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
template:
  (vs-mpy-add
 ...
 (combine
  (vs-mpy-add
   ...
   (combine
    (vs-mpy-add
     ...
     #<load-data>
     (list (int16_t (bv #x0040 16)))
     #f
     #f
     #f
     'int16)
    (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
   (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
   #f
   #f
   #f
   'int16)
  (union [x?$1175 #(struct:vs-mpy-add
                    ...
                    #(struct:vs-mpy-add
                      ...
                      #<combine:
                       #(struct:vs-mpy-add
                         ...
                         #<load-data>
                         (#(struct:int16_t (bv #x0040 16)))
                         #f
                         #f
                         #f
                         int16)
                       #(struct:broadcast
                         ...
                         #(struct:sca-mul
                           #(struct:int16_t t125)
                           #(struct:int16_t (bv #xffc0 16))))>
                      (#(struct:int8_t (bv #x01 8))
                       #(struct:int8_t (bv #x01 8)))
                      #f
                      #f
                      #f
                      int16)
                    (#(struct:int16_t input1_multiplier))
                    #f
                    #f
                    #f
                    int32)] [(! x?$1175) #(struct:vs-mpy-add
                                           ...
                                           #(struct:vs-mpy-add
                                             ...
                                             #<combine:
                                              #(struct:vs-mpy-add
                                                ...
                                                #<load-data>
                                                (#(struct:int16_t
                                                   (bv #x0040 16)))
                                                #f
                                                #f
                                                #f
                                                int16)
                                              #(struct:broadcast
                                                ...
                                                #(struct:sca-mul
                                                  #(struct:int16_t t126)
                                                  #(struct:int16_t
                                                    (bv #xffc0 16))))>
                                             (#(struct:int8_t (bv #x01 8))
                                              #(struct:int8_t (bv #x01 8)))
                                             #f
                                             #f
                                             #f
                                             int16)
                                           (#(struct:int16_t
                                              input2_multiplier))
                                           #f
                                           #f
                                           #f
                                           int32)]))
 (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
 #f
 #f
 #f
 'int32)
axioms:
  (union [x?$1175 (#t)] [(! x?$1175) (#t #t)])
optimized-halide-expr:
  (vec-add
 (vec-mul
  (vec-cast
   (vec-add
    (vec-mul
     (vec-cast
      (load
       (buffer input1 'uint8)
       (ramp
        (sca-add
         (sca-mul output.s0.x.x 16)
         (sca-add
          (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
          (var-lookup 't55)))
        1
        16)
       (aligned 1 0))
      'int16
      16)
     (sca-broadcast (int16_t (bv #x0040 16)) 16))
    (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
   'int32
   16)
  (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
 (vec-mul
  (vec-cast #<abstr-halide-expr> 'int32 16)
  (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
optimized-template:
  (vs-mpy-add
 ...
 (combine
  #<abstr-expr>
  (union [x?$1175 #(struct:vs-mpy-add
                    ...
                    #(struct:vs-mpy-add
                      ...
                      #<combine:
                       #(struct:vs-mpy-add
                         ...
                         #<load-data>
                         (#(struct:int16_t (bv #x0040 16)))
                         #f
                         #f
                         #f
                         int16)
                       #(struct:broadcast
                         ...
                         #(struct:sca-mul
                           #(struct:int16_t t125)
                           #(struct:int16_t (bv #xffc0 16))))>
                      (#(struct:int8_t (bv #x01 8))
                       #(struct:int8_t (bv #x01 8)))
                      #f
                      #f
                      #f
                      int16)
                    (#(struct:int16_t input1_multiplier))
                    #f
                    #f
                    #f
                    int32)] [(! x?$1175) #(struct:vs-mpy-add
                                           ...
                                           #<abstr-expr>
                                           (#(struct:int16_t
                                              input2_multiplier))
                                           #f
                                           #f
                                           #f
                                           int32)]))
 (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
 #f
 #f
 #f
 'int32)
optimized Halide 0:
  (int32_t
 (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (app abstr-vals$1239 0) (bitvector 32)))))
optimized x86 0:
  (int32_t
 (bvadd (ite c$1181 (sign-extend (app abstr-vals$1239 idx$1180) (bitvector 32)) (ite x?$1175 (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (bvadd (ite (|| (= 1 (* 2 idx$1180)) (&& c$254 (= 2 (* 2 idx$1180))) (&& c$256 (= 3 (* 2 idx$1180))) (&& c$258 (= 4 (* 2 idx$1180))) (&& c$260 (= 5 (* 2 idx$1180))) (&& c$262 (= 6 (* 2 idx$1180))) (&& c$264 (= 7 (* 2 idx$1180))) (&& c$266 (= 8 (* 2 idx$1180))) (&& c$268 (= 9 (* 2 idx$1180))) (&& c$270 (= 10 (* 2 idx$1180))) (&& c$272 (= 11 (* 2 idx$1180))) (&& c$274 (= 12 (* 2 idx$1180))) (&& c$276 (= 13 (* 2 idx$1180))) (&& c$278 (= 14 (* 2 idx$1180))) (&& c$280 (= 15 (* 2 idx$1180))) (&& c$282 (= 16 (* 2 idx$1180))) (&& c$284 (= 17 (* 2 idx$1180))) (&& c$286 (= 18 (* 2 idx$1180))) (&& c$288 (= 19 (* 2 idx$1180))) (&& c$290 (= 20 (* 2 idx$1180))) (&& c$292 (= 21 (* 2 idx$1180))) (&& c$294 (= 22 (* 2 idx$1180))) (&& c$296 (= 23 (* 2 idx$1180))) (&& c$298 (= 24 (* 2 idx$1180)))) (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (ite (|| (= 1 (+ 1 (* 2 idx$1180))) (&& c$254 (= 2 (+ 1 (* 2 idx$1180)))) (&& c$256 (= 3 (+ 1 (* 2 idx$1180)))) (&& c$258 (= 4 (+ 1 (* 2 idx$1180)))) (&& c$260 (= 5 (+ 1 (* 2 idx$1180)))) (&& c$262 (= 6 (+ 1 (* 2 idx$1180)))) (&& c$264 (= 7 (+ 1 (* 2 idx$1180)))) (&& c$266 (= 8 (+ 1 (* 2 idx$1180)))) (&& c$268 (= 9 (+ 1 (* 2 idx$1180)))) (&& c$270 (= 10 (+ 1 (* 2 idx$1180)))) (&& c$272 (= 11 (+ 1 (* 2 idx$1180)))) (&& c$274 (= 12 (+ 1 (* 2 idx$1180)))) (&& c$276 (= 13 (+ 1 (* 2 idx$1180)))) (&& c$278 (= 14 (+ 1 (* 2 idx$1180)))) (&& c$280 (= 15 (+ 1 (* 2 idx$1180)))) (&& c$282 (= 16 (+ 1 (* 2 idx$1180)))) (&& c$284 (= 17 (+ 1 (* 2 idx$1180)))) (&& c$286 (= 18 (+ 1 (* 2 idx$1180)))) (&& c$288 (= 19 (+ 1 (* 2 idx$1180)))) (&& c$290 (= 20 (+ 1 (* 2 idx$1180)))) (&& c$292 (= 21 (+ 1 (* 2 idx$1180)))) (&& c$294 (= 22 (+ 1 (* 2 idx$1180)))) (&& c$296 (= 23 (+ 1 (* 2 idx$1180)))) (&& c$298 (= 24 (+ 1 (* 2 idx$1180))))) (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125))) (bitvector 32))) (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (app abstr-vals$1239 idx$1180) (bitvector 32))))) (bvadd (ite c$1177 (sign-extend (app abstr-vals$1239 idx$1176) (bitvector 32)) (ite x?$1175 (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (bvadd (ite (|| (= 1 (* 2 idx$1176)) (&& c$254 (= 2 (* 2 idx$1176))) (&& c$256 (= 3 (* 2 idx$1176))) (&& c$258 (= 4 (* 2 idx$1176))) (&& c$260 (= 5 (* 2 idx$1176))) (&& c$262 (= 6 (* 2 idx$1176))) (&& c$264 (= 7 (* 2 idx$1176))) (&& c$266 (= 8 (* 2 idx$1176))) (&& c$268 (= 9 (* 2 idx$1176))) (&& c$270 (= 10 (* 2 idx$1176))) (&& c$272 (= 11 (* 2 idx$1176))) (&& c$274 (= 12 (* 2 idx$1176))) (&& c$276 (= 13 (* 2 idx$1176))) (&& c$278 (= 14 (* 2 idx$1176))) (&& c$280 (= 15 (* 2 idx$1176))) (&& c$282 (= 16 (* 2 idx$1176))) (&& c$284 (= 17 (* 2 idx$1176))) (&& c$286 (= 18 (* 2 idx$1176))) (&& c$288 (= 19 (* 2 idx$1176))) (&& c$290 (= 20 (* 2 idx$1176))) (&& c$292 (= 21 (* 2 idx$1176))) (&& c$294 (= 22 (* 2 idx$1176))) (&& c$296 (= 23 (* 2 idx$1176))) (&& c$298 (= 24 (* 2 idx$1176)))) (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (ite (|| (= 1 (+ 1 (* 2 idx$1176))) (&& c$254 (= 2 (+ 1 (* 2 idx$1176)))) (&& c$256 (= 3 (+ 1 (* 2 idx$1176)))) (&& c$258 (= 4 (+ 1 (* 2 idx$1176)))) (&& c$260 (= 5 (+ 1 (* 2 idx$1176)))) (&& c$262 (= 6 (+ 1 (* 2 idx$1176)))) (&& c$264 (= 7 (+ 1 (* 2 idx$1176)))) (&& c$266 (= 8 (+ 1 (* 2 idx$1176)))) (&& c$268 (= 9 (+ 1 (* 2 idx$1176)))) (&& c$270 (= 10 (+ 1 (* 2 idx$1176)))) (&& c$272 (= 11 (+ 1 (* 2 idx$1176)))) (&& c$274 (= 12 (+ 1 (* 2 idx$1176)))) (&& c$276 (= 13 (+ 1 (* 2 idx$1176)))) (&& c$278 (= 14 (+ 1 (* 2 idx$1176)))) (&& c$280 (= 15 (+ 1 (* 2 idx$1176)))) (&& c$282 (= 16 (+ 1 (* 2 idx$1176)))) (&& c$284 (= 17 (+ 1 (* 2 idx$1176)))) (&& c$286 (= 18 (+ 1 (* 2 idx$1176)))) (&& c$288 (= 19 (+ 1 (* 2 idx$1176)))) (&& c$290 (= 20 (+ 1 (* 2 idx$1176)))) (&& c$292 (= 21 (+ 1 (* 2 idx$1176)))) (&& c$294 (= 22 (+ 1 (* 2 idx$1176)))) (&& c$296 (= 23 (+ 1 (* 2 idx$1176)))) (&& c$298 (= 24 (+ 1 (* 2 idx$1176))))) (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125))) (bitvector 32))) (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (app abstr-vals$1239 idx$1176) (bitvector 32))))) (ite c$1179 (sign-extend (app abstr-vals$1239 idx$1178) (bitvector 32)) (ite x?$1175 (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (bvadd (ite (|| (= 1 (* 2 idx$1178)) (&& c$254 (= 2 (* 2 idx$1178))) (&& c$256 (= 3 (* 2 idx$1178))) (&& c$258 (= 4 (* 2 idx$1178))) (&& c$260 (= 5 (* 2 idx$1178))) (&& c$262 (= 6 (* 2 idx$1178))) (&& c$264 (= 7 (* 2 idx$1178))) (&& c$266 (= 8 (* 2 idx$1178))) (&& c$268 (= 9 (* 2 idx$1178))) (&& c$270 (= 10 (* 2 idx$1178))) (&& c$272 (= 11 (* 2 idx$1178))) (&& c$274 (= 12 (* 2 idx$1178))) (&& c$276 (= 13 (* 2 idx$1178))) (&& c$278 (= 14 (* 2 idx$1178))) (&& c$280 (= 15 (* 2 idx$1178))) (&& c$282 (= 16 (* 2 idx$1178))) (&& c$284 (= 17 (* 2 idx$1178))) (&& c$286 (= 18 (* 2 idx$1178))) (&& c$288 (= 19 (* 2 idx$1178))) (&& c$290 (= 20 (* 2 idx$1178))) (&& c$292 (= 21 (* 2 idx$1178))) (&& c$294 (= 22 (* 2 idx$1178))) (&& c$296 (= 23 (* 2 idx$1178))) (&& c$298 (= 24 (* 2 idx$1178)))) (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (ite (|| (= 1 (+ 1 (* 2 idx$1178))) (&& c$254 (= 2 (+ 1 (* 2 idx$1178)))) (&& c$256 (= 3 (+ 1 (* 2 idx$1178)))) (&& c$258 (= 4 (+ 1 (* 2 idx$1178)))) (&& c$260 (= 5 (+ 1 (* 2 idx$1178)))) (&& c$262 (= 6 (+ 1 (* 2 idx$1178)))) (&& c$264 (= 7 (+ 1 (* 2 idx$1178)))) (&& c$266 (= 8 (+ 1 (* 2 idx$1178)))) (&& c$268 (= 9 (+ 1 (* 2 idx$1178)))) (&& c$270 (= 10 (+ 1 (* 2 idx$1178)))) (&& c$272 (= 11 (+ 1 (* 2 idx$1178)))) (&& c$274 (= 12 (+ 1 (* 2 idx$1178)))) (&& c$276 (= 13 (+ 1 (* 2 idx$1178)))) (&& c$278 (= 14 (+ 1 (* 2 idx$1178)))) (&& c$280 (= 15 (+ 1 (* 2 idx$1178)))) (&& c$282 (= 16 (+ 1 (* 2 idx$1178)))) (&& c$284 (= 17 (+ 1 (* 2 idx$1178)))) (&& c$286 (= 18 (+ 1 (* 2 idx$1178)))) (&& c$288 (= 19 (+ 1 (* 2 idx$1178)))) (&& c$290 (= 20 (+ 1 (* 2 idx$1178)))) (&& c$292 (= 21 (+ 1 (* 2 idx$1178)))) (&& c$294 (= 22 (+ 1 (* 2 idx$1178)))) (&& c$296 (= 23 (+ 1 (* 2 idx$1178)))) (&& c$298 (= 24 (+ 1 (* 2 idx$1178))))) (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125))) (bitvector 32))) (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (app abstr-vals$1239 idx$1178) (bitvector 32))))))))
Ran synthesizer for 1662 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-mul
  (vec-cast
   (vec-add
    (vec-mul
     (vec-cast
      (load
       (buffer input1 'uint8)
       (ramp
        (sca-add
         (sca-mul output.s0.x.x 16)
         (sca-add
          (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
          (var-lookup 't55)))
        1
        16)
       (aligned 1 0))
      'int16
      16)
     (sca-broadcast (int16_t (bv #x0040 16)) 16))
    (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
   'int32
   16)
  (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
 (vec-mul
  (vec-cast
   (vec-add
    (vec-mul
     (vec-cast
      (load
       (buffer input2 'uint8)
       (ramp
        (sca-add
         (sca-mul output.s0.x.x 16)
         (sca-add
          (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
          (var-lookup 't56)))
        1
        16)
       (aligned 1 0))
      'int16
      16)
     (sca-broadcast (int16_t (bv #x0040 16)) 16))
    (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
   'int32
   16)
  (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
template:
  (vs-mpy-add
 ...
 (combine
  (vs-mpy-add
   ...
   (vs-mpy-add
    ...
    (combine
     (vs-mpy-add
      ...
      #<load-data>
      (list (int16_t (bv #x0040 16)))
      #f
      #f
      #f
      'int16)
     (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
    (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
    #f
    #f
    #f
    'int16)
   (list (int16_t input1_multiplier))
   #f
   #f
   #f
   'int32)
  (union [x?$1004 #(struct:vs-mpy-add
                    ...
                    #(struct:vs-mpy-add
                      ...
                      #<combine:
                       #(struct:vs-mpy-add
                         ...
                         #<load-data>
                         (#(struct:int16_t (bv #x0040 16)))
                         #f
                         #f
                         #f
                         int16)
                       #(struct:broadcast
                         ...
                         #(struct:sca-mul
                           #(struct:int16_t t125)
                           #(struct:int16_t (bv #xffc0 16))))>
                      (#(struct:int8_t (bv #x01 8))
                       #(struct:int8_t (bv #x01 8)))
                      #f
                      #f
                      #f
                      int16)
                    (#(struct:int16_t input1_multiplier))
                    #f
                    #f
                    #f
                    int32)] [(! x?$1004) #(struct:vs-mpy-add
                                           ...
                                           #(struct:vs-mpy-add
                                             ...
                                             #<combine:
                                              #(struct:vs-mpy-add
                                                ...
                                                #<load-data>
                                                (#(struct:int16_t
                                                   (bv #x0040 16)))
                                                #f
                                                #f
                                                #f
                                                int16)
                                              #(struct:broadcast
                                                ...
                                                #(struct:sca-mul
                                                  #(struct:int16_t t126)
                                                  #(struct:int16_t
                                                    (bv #xffc0 16))))>
                                             (#(struct:int8_t (bv #x01 8))
                                              #(struct:int8_t (bv #x01 8)))
                                             #f
                                             #f
                                             #f
                                             int16)
                                           (#(struct:int16_t
                                              input2_multiplier))
                                           #f
                                           #f
                                           #f
                                           int32)]))
 (list (int16_t input1_multiplier) (int8_t (bv #x01 8)))
 #f
 #f
 #f
 'int32)
axioms:
  (union [x?$1004 ((forall (idx) (&& (bvsle (app abstr-vals$1240 idx) (bv #x40000000 32)) (bvsle (bv #xc0008000 32) (app abstr-vals$1240 idx))))
                 (forall (idx) (&& (bvsle (app abstr-vals$1240 idx) (bv #x40000000 32)) (bvsle (bv #xc0008000 32) (app abstr-vals$1240 idx)))))] [(! x?$1004) ((forall (idx) (&& (bvsle (app abstr-vals$1240 idx) (bv #x40000000 32)) (bvsle (bv #xc0008000 32) (app abstr-vals$1240 idx)))))])
optimized-halide-expr:
  (vec-add
 #<abstr-halide-expr>
 (vec-mul
  (vec-cast
   (vec-add
    (vec-mul
     (vec-cast
      (load
       (buffer input2 'uint8)
       (ramp
        (sca-add
         (sca-mul output.s0.x.x 16)
         (sca-add
          (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
          (var-lookup 't56)))
        1
        16)
       (aligned 1 0))
      'int16
      16)
     (sca-broadcast (int16_t (bv #x0040 16)) 16))
    (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
   'int32
   16)
  (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
optimized-template:
  (vs-mpy-add
 ...
 (combine
  #<abstr-expr>
  (union [x?$1004 #<abstr-expr>] [(! x?$1004) #(struct:vs-mpy-add
                                                ...
                                                #(struct:vs-mpy-add
                                                  ...
                                                  #<combine:
                                                   #(struct:vs-mpy-add
                                                     ...
                                                     #<load-data>
                                                     (#(struct:int16_t
                                                        (bv #x0040 16)))
                                                     #f
                                                     #f
                                                     #f
                                                     int16)
                                                   #(struct:broadcast
                                                     ...
                                                     #(struct:sca-mul
                                                       #(struct:int16_t t126)
                                                       #(struct:int16_t
                                                         (bv #xffc0 16))))>
                                                  (#(struct:int8_t (bv #x01 8))
                                                   #(struct:int8_t
                                                     (bv #x01 8)))
                                                  #f
                                                  #f
                                                  #f
                                                  int16)
                                                (#(struct:int16_t
                                                   input2_multiplier))
                                                #f
                                                #f
                                                #f
                                                int32)]))
 (list (int16_t input1_multiplier) (int8_t (bv #x01 8)))
 #f
 #f
 #f
 'int32)
optimized Halide 0:
  (int32_t
 (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32))) (app abstr-vals$1240 0)))
optimized x86 0:
  (int32_t
 (bvadd (bvmul (sign-extend input1_multiplier (bitvector 32)) (ite c$1006 (app abstr-vals$1240 idx$1005) (ite x?$1004 (app abstr-vals$1240 idx$1005) (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (bvadd (ite (|| (= 1 (* 2 idx$1005)) (&& c$753 (= 2 (* 2 idx$1005))) (&& c$755 (= 3 (* 2 idx$1005))) (&& c$757 (= 4 (* 2 idx$1005))) (&& c$759 (= 5 (* 2 idx$1005))) (&& c$761 (= 6 (* 2 idx$1005))) (&& c$763 (= 7 (* 2 idx$1005))) (&& c$765 (= 8 (* 2 idx$1005))) (&& c$767 (= 9 (* 2 idx$1005))) (&& c$769 (= 10 (* 2 idx$1005))) (&& c$771 (= 11 (* 2 idx$1005))) (&& c$773 (= 12 (* 2 idx$1005))) (&& c$775 (= 13 (* 2 idx$1005))) (&& c$777 (= 14 (* 2 idx$1005))) (&& c$779 (= 15 (* 2 idx$1005))) (&& c$781 (= 16 (* 2 idx$1005))) (&& c$783 (= 17 (* 2 idx$1005))) (&& c$785 (= 18 (* 2 idx$1005))) (&& c$787 (= 19 (* 2 idx$1005))) (&& c$789 (= 20 (* 2 idx$1005))) (&& c$791 (= 21 (* 2 idx$1005))) (&& c$793 (= 22 (* 2 idx$1005))) (&& c$795 (= 23 (* 2 idx$1005))) (&& c$797 (= 24 (* 2 idx$1005)))) (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (ite (|| (= 1 (+ 1 (* 2 idx$1005))) (&& c$753 (= 2 (+ 1 (* 2 idx$1005)))) (&& c$755 (= 3 (+ 1 (* 2 idx$1005)))) (&& c$757 (= 4 (+ 1 (* 2 idx$1005)))) (&& c$759 (= 5 (+ 1 (* 2 idx$1005)))) (&& c$761 (= 6 (+ 1 (* 2 idx$1005)))) (&& c$763 (= 7 (+ 1 (* 2 idx$1005)))) (&& c$765 (= 8 (+ 1 (* 2 idx$1005)))) (&& c$767 (= 9 (+ 1 (* 2 idx$1005)))) (&& c$769 (= 10 (+ 1 (* 2 idx$1005)))) (&& c$771 (= 11 (+ 1 (* 2 idx$1005)))) (&& c$773 (= 12 (+ 1 (* 2 idx$1005)))) (&& c$775 (= 13 (+ 1 (* 2 idx$1005)))) (&& c$777 (= 14 (+ 1 (* 2 idx$1005)))) (&& c$779 (= 15 (+ 1 (* 2 idx$1005)))) (&& c$781 (= 16 (+ 1 (* 2 idx$1005)))) (&& c$783 (= 17 (+ 1 (* 2 idx$1005)))) (&& c$785 (= 18 (+ 1 (* 2 idx$1005)))) (&& c$787 (= 19 (+ 1 (* 2 idx$1005)))) (&& c$789 (= 20 (+ 1 (* 2 idx$1005)))) (&& c$791 (= 21 (+ 1 (* 2 idx$1005)))) (&& c$793 (= 22 (+ 1 (* 2 idx$1005)))) (&& c$795 (= 23 (+ 1 (* 2 idx$1005)))) (&& c$797 (= 24 (+ 1 (* 2 idx$1005))))) (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126))) (bitvector 32)))))) (ite c$1008 (app abstr-vals$1240 idx$1007) (ite x?$1004 (app abstr-vals$1240 idx$1007) (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (bvadd (ite (|| (= 1 (* 2 idx$1007)) (&& c$753 (= 2 (* 2 idx$1007))) (&& c$755 (= 3 (* 2 idx$1007))) (&& c$757 (= 4 (* 2 idx$1007))) (&& c$759 (= 5 (* 2 idx$1007))) (&& c$761 (= 6 (* 2 idx$1007))) (&& c$763 (= 7 (* 2 idx$1007))) (&& c$765 (= 8 (* 2 idx$1007))) (&& c$767 (= 9 (* 2 idx$1007))) (&& c$769 (= 10 (* 2 idx$1007))) (&& c$771 (= 11 (* 2 idx$1007))) (&& c$773 (= 12 (* 2 idx$1007))) (&& c$775 (= 13 (* 2 idx$1007))) (&& c$777 (= 14 (* 2 idx$1007))) (&& c$779 (= 15 (* 2 idx$1007))) (&& c$781 (= 16 (* 2 idx$1007))) (&& c$783 (= 17 (* 2 idx$1007))) (&& c$785 (= 18 (* 2 idx$1007))) (&& c$787 (= 19 (* 2 idx$1007))) (&& c$789 (= 20 (* 2 idx$1007))) (&& c$791 (= 21 (* 2 idx$1007))) (&& c$793 (= 22 (* 2 idx$1007))) (&& c$795 (= 23 (* 2 idx$1007))) (&& c$797 (= 24 (* 2 idx$1007)))) (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (ite (|| (= 1 (+ 1 (* 2 idx$1007))) (&& c$753 (= 2 (+ 1 (* 2 idx$1007)))) (&& c$755 (= 3 (+ 1 (* 2 idx$1007)))) (&& c$757 (= 4 (+ 1 (* 2 idx$1007)))) (&& c$759 (= 5 (+ 1 (* 2 idx$1007)))) (&& c$761 (= 6 (+ 1 (* 2 idx$1007)))) (&& c$763 (= 7 (+ 1 (* 2 idx$1007)))) (&& c$765 (= 8 (+ 1 (* 2 idx$1007)))) (&& c$767 (= 9 (+ 1 (* 2 idx$1007)))) (&& c$769 (= 10 (+ 1 (* 2 idx$1007)))) (&& c$771 (= 11 (+ 1 (* 2 idx$1007)))) (&& c$773 (= 12 (+ 1 (* 2 idx$1007)))) (&& c$775 (= 13 (+ 1 (* 2 idx$1007)))) (&& c$777 (= 14 (+ 1 (* 2 idx$1007)))) (&& c$779 (= 15 (+ 1 (* 2 idx$1007)))) (&& c$781 (= 16 (+ 1 (* 2 idx$1007)))) (&& c$783 (= 17 (+ 1 (* 2 idx$1007)))) (&& c$785 (= 18 (+ 1 (* 2 idx$1007)))) (&& c$787 (= 19 (+ 1 (* 2 idx$1007)))) (&& c$789 (= 20 (+ 1 (* 2 idx$1007)))) (&& c$791 (= 21 (+ 1 (* 2 idx$1007)))) (&& c$793 (= 22 (+ 1 (* 2 idx$1007)))) (&& c$795 (= 23 (+ 1 (* 2 idx$1007)))) (&& c$797 (= 24 (+ 1 (* 2 idx$1007))))) (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126))) (bitvector 32)))))))
Ran synthesizer for 1129 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-mul
  (vec-cast
   (vec-add
    (vec-mul
     (vec-cast
      (load
       (buffer input1 'uint8)
       (ramp
        (sca-add
         (sca-mul output.s0.x.x 16)
         (sca-add
          (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
          (var-lookup 't55)))
        1
        16)
       (aligned 1 0))
      'int16
      16)
     (sca-broadcast (int16_t (bv #x0040 16)) 16))
    (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
   'int32
   16)
  (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
 (vec-mul
  (vec-cast
   (vec-add
    (vec-mul
     (vec-cast
      (load
       (buffer input2 'uint8)
       (ramp
        (sca-add
         (sca-mul output.s0.x.x 16)
         (sca-add
          (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
          (var-lookup 't56)))
        1
        16)
       (aligned 1 0))
      'int16
      16)
     (sca-broadcast (int16_t (bv #x0040 16)) 16))
    (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
   'int32
   16)
  (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
template:
  (vs-mpy-add
 ...
 (combine
  (vs-mpy-add
   ...
   (vs-mpy-add
    ...
    (combine
     (vs-mpy-add
      ...
      #<load-data>
      (list (int16_t (bv #x0040 16)))
      #f
      #f
      #f
      'int16)
     (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
    (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
    #f
    #f
    #f
    'int16)
   (list (int16_t input2_multiplier))
   #f
   #f
   #f
   'int32)
  (union [x?$1118 #(struct:vs-mpy-add
                    ...
                    #(struct:vs-mpy-add
                      ...
                      #<combine:
                       #(struct:vs-mpy-add
                         ...
                         #<load-data>
                         (#(struct:int16_t (bv #x0040 16)))
                         #f
                         #f
                         #f
                         int16)
                       #(struct:broadcast
                         ...
                         #(struct:sca-mul
                           #(struct:int16_t t125)
                           #(struct:int16_t (bv #xffc0 16))))>
                      (#(struct:int8_t (bv #x01 8))
                       #(struct:int8_t (bv #x01 8)))
                      #f
                      #f
                      #f
                      int16)
                    (#(struct:int16_t input1_multiplier))
                    #f
                    #f
                    #f
                    int32)] [(! x?$1118) #(struct:vs-mpy-add
                                           ...
                                           #(struct:vs-mpy-add
                                             ...
                                             #<combine:
                                              #(struct:vs-mpy-add
                                                ...
                                                #<load-data>
                                                (#(struct:int16_t
                                                   (bv #x0040 16)))
                                                #f
                                                #f
                                                #f
                                                int16)
                                              #(struct:broadcast
                                                ...
                                                #(struct:sca-mul
                                                  #(struct:int16_t t126)
                                                  #(struct:int16_t
                                                    (bv #xffc0 16))))>
                                             (#(struct:int8_t (bv #x01 8))
                                              #(struct:int8_t (bv #x01 8)))
                                             #f
                                             #f
                                             #f
                                             int16)
                                           (#(struct:int16_t
                                              input2_multiplier))
                                           #f
                                           #f
                                           #f
                                           int32)]))
 (list (int16_t input2_multiplier) (int8_t (bv #x01 8)))
 #f
 #f
 #f
 'int32)
axioms:
  (union [x?$1118 ((forall (idx) (&& (bvsle (app abstr-vals$1241 idx) (bv #x40000000 32)) (bvsle (bv #xc0008000 32) (app abstr-vals$1241 idx)))))] [(! x?$1118) ((forall (idx) (&& (bvsle (app abstr-vals$1241 idx) (bv #x40000000 32)) (bvsle (bv #xc0008000 32) (app abstr-vals$1241 idx))))
                                                                                                                                                               (forall (idx) (&& (bvsle (app abstr-vals$1241 idx) (bv #x40000000 32)) (bvsle (bv #xc0008000 32) (app abstr-vals$1241 idx)))))])
optimized-halide-expr:
  (vec-add
 (vec-mul
  (vec-cast
   (vec-add
    (vec-mul
     (vec-cast
      (load
       (buffer input1 'uint8)
       (ramp
        (sca-add
         (sca-mul output.s0.x.x 16)
         (sca-add
          (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
          (var-lookup 't55)))
        1
        16)
       (aligned 1 0))
      'int16
      16)
     (sca-broadcast (int16_t (bv #x0040 16)) 16))
    (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
   'int32
   16)
  (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
 #<abstr-halide-expr>)
optimized-template:
  (vs-mpy-add
 ...
 (combine
  #<abstr-expr>
  (union [x?$1118 #(struct:vs-mpy-add
                    ...
                    #(struct:vs-mpy-add
                      ...
                      #<combine:
                       #(struct:vs-mpy-add
                         ...
                         #<load-data>
                         (#(struct:int16_t (bv #x0040 16)))
                         #f
                         #f
                         #f
                         int16)
                       #(struct:broadcast
                         ...
                         #(struct:sca-mul
                           #(struct:int16_t t125)
                           #(struct:int16_t (bv #xffc0 16))))>
                      (#(struct:int8_t (bv #x01 8))
                       #(struct:int8_t (bv #x01 8)))
                      #f
                      #f
                      #f
                      int16)
                    (#(struct:int16_t input1_multiplier))
                    #f
                    #f
                    #f
                    int32)] [(! x?$1118) #<abstr-expr>]))
 (list (int16_t input2_multiplier) (int8_t (bv #x01 8)))
 #f
 #f
 #f
 'int32)
optimized Halide 0:
  (int32_t
 (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (app abstr-vals$1241 0)))
optimized x86 0:
  (int32_t
 (bvadd (bvmul (sign-extend input2_multiplier (bitvector 32)) (ite c$1120 (app abstr-vals$1241 idx$1119) (ite x?$1118 (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (bvadd (ite (|| (= 1 (* 2 idx$1119)) (&& c$254 (= 2 (* 2 idx$1119))) (&& c$256 (= 3 (* 2 idx$1119))) (&& c$258 (= 4 (* 2 idx$1119))) (&& c$260 (= 5 (* 2 idx$1119))) (&& c$262 (= 6 (* 2 idx$1119))) (&& c$264 (= 7 (* 2 idx$1119))) (&& c$266 (= 8 (* 2 idx$1119))) (&& c$268 (= 9 (* 2 idx$1119))) (&& c$270 (= 10 (* 2 idx$1119))) (&& c$272 (= 11 (* 2 idx$1119))) (&& c$274 (= 12 (* 2 idx$1119))) (&& c$276 (= 13 (* 2 idx$1119))) (&& c$278 (= 14 (* 2 idx$1119))) (&& c$280 (= 15 (* 2 idx$1119))) (&& c$282 (= 16 (* 2 idx$1119))) (&& c$284 (= 17 (* 2 idx$1119))) (&& c$286 (= 18 (* 2 idx$1119))) (&& c$288 (= 19 (* 2 idx$1119))) (&& c$290 (= 20 (* 2 idx$1119))) (&& c$292 (= 21 (* 2 idx$1119))) (&& c$294 (= 22 (* 2 idx$1119))) (&& c$296 (= 23 (* 2 idx$1119))) (&& c$298 (= 24 (* 2 idx$1119)))) (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (ite (|| (= 1 (+ 1 (* 2 idx$1119))) (&& c$254 (= 2 (+ 1 (* 2 idx$1119)))) (&& c$256 (= 3 (+ 1 (* 2 idx$1119)))) (&& c$258 (= 4 (+ 1 (* 2 idx$1119)))) (&& c$260 (= 5 (+ 1 (* 2 idx$1119)))) (&& c$262 (= 6 (+ 1 (* 2 idx$1119)))) (&& c$264 (= 7 (+ 1 (* 2 idx$1119)))) (&& c$266 (= 8 (+ 1 (* 2 idx$1119)))) (&& c$268 (= 9 (+ 1 (* 2 idx$1119)))) (&& c$270 (= 10 (+ 1 (* 2 idx$1119)))) (&& c$272 (= 11 (+ 1 (* 2 idx$1119)))) (&& c$274 (= 12 (+ 1 (* 2 idx$1119)))) (&& c$276 (= 13 (+ 1 (* 2 idx$1119)))) (&& c$278 (= 14 (+ 1 (* 2 idx$1119)))) (&& c$280 (= 15 (+ 1 (* 2 idx$1119)))) (&& c$282 (= 16 (+ 1 (* 2 idx$1119)))) (&& c$284 (= 17 (+ 1 (* 2 idx$1119)))) (&& c$286 (= 18 (+ 1 (* 2 idx$1119)))) (&& c$288 (= 19 (+ 1 (* 2 idx$1119)))) (&& c$290 (= 20 (+ 1 (* 2 idx$1119)))) (&& c$292 (= 21 (+ 1 (* 2 idx$1119)))) (&& c$294 (= 22 (+ 1 (* 2 idx$1119)))) (&& c$296 (= 23 (+ 1 (* 2 idx$1119)))) (&& c$298 (= 24 (+ 1 (* 2 idx$1119))))) (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125))) (bitvector 32))) (app abstr-vals$1241 idx$1119)))) (ite c$1122 (app abstr-vals$1241 idx$1121) (ite x?$1118 (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (bvadd (ite (|| (= 1 (* 2 idx$1121)) (&& c$254 (= 2 (* 2 idx$1121))) (&& c$256 (= 3 (* 2 idx$1121))) (&& c$258 (= 4 (* 2 idx$1121))) (&& c$260 (= 5 (* 2 idx$1121))) (&& c$262 (= 6 (* 2 idx$1121))) (&& c$264 (= 7 (* 2 idx$1121))) (&& c$266 (= 8 (* 2 idx$1121))) (&& c$268 (= 9 (* 2 idx$1121))) (&& c$270 (= 10 (* 2 idx$1121))) (&& c$272 (= 11 (* 2 idx$1121))) (&& c$274 (= 12 (* 2 idx$1121))) (&& c$276 (= 13 (* 2 idx$1121))) (&& c$278 (= 14 (* 2 idx$1121))) (&& c$280 (= 15 (* 2 idx$1121))) (&& c$282 (= 16 (* 2 idx$1121))) (&& c$284 (= 17 (* 2 idx$1121))) (&& c$286 (= 18 (* 2 idx$1121))) (&& c$288 (= 19 (* 2 idx$1121))) (&& c$290 (= 20 (* 2 idx$1121))) (&& c$292 (= 21 (* 2 idx$1121))) (&& c$294 (= 22 (* 2 idx$1121))) (&& c$296 (= 23 (* 2 idx$1121))) (&& c$298 (= 24 (* 2 idx$1121)))) (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (ite (|| (= 1 (+ 1 (* 2 idx$1121))) (&& c$254 (= 2 (+ 1 (* 2 idx$1121)))) (&& c$256 (= 3 (+ 1 (* 2 idx$1121)))) (&& c$258 (= 4 (+ 1 (* 2 idx$1121)))) (&& c$260 (= 5 (+ 1 (* 2 idx$1121)))) (&& c$262 (= 6 (+ 1 (* 2 idx$1121)))) (&& c$264 (= 7 (+ 1 (* 2 idx$1121)))) (&& c$266 (= 8 (+ 1 (* 2 idx$1121)))) (&& c$268 (= 9 (+ 1 (* 2 idx$1121)))) (&& c$270 (= 10 (+ 1 (* 2 idx$1121)))) (&& c$272 (= 11 (+ 1 (* 2 idx$1121)))) (&& c$274 (= 12 (+ 1 (* 2 idx$1121)))) (&& c$276 (= 13 (+ 1 (* 2 idx$1121)))) (&& c$278 (= 14 (+ 1 (* 2 idx$1121)))) (&& c$280 (= 15 (+ 1 (* 2 idx$1121)))) (&& c$282 (= 16 (+ 1 (* 2 idx$1121)))) (&& c$284 (= 17 (+ 1 (* 2 idx$1121)))) (&& c$286 (= 18 (+ 1 (* 2 idx$1121)))) (&& c$288 (= 19 (+ 1 (* 2 idx$1121)))) (&& c$290 (= 20 (+ 1 (* 2 idx$1121)))) (&& c$292 (= 21 (+ 1 (* 2 idx$1121)))) (&& c$294 (= 22 (+ 1 (* 2 idx$1121)))) (&& c$296 (= 23 (+ 1 (* 2 idx$1121)))) (&& c$298 (= 24 (+ 1 (* 2 idx$1121))))) (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125))) (bitvector 32))) (app abstr-vals$1241 idx$1121)))))
Ran synthesizer for 1277 ms
(unsat)
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-mul
  (vec-cast
   (vec-add
    (vec-mul
     (vec-cast
      (load
       (buffer input1 'uint8)
       (ramp
        (sca-add
         (sca-mul output.s0.x.x 16)
         (sca-add
          (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
          (var-lookup 't55)))
        1
        16)
       (aligned 1 0))
      'int16
      16)
     (sca-broadcast (int16_t (bv #x0040 16)) 16))
    (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
   'int32
   16)
  (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
 (vec-mul
  (vec-cast
   (vec-add
    (vec-mul
     (vec-cast
      (load
       (buffer input2 'uint8)
       (ramp
        (sca-add
         (sca-mul output.s0.x.x 16)
         (sca-add
          (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
          (var-lookup 't56)))
        1
        16)
       (aligned 1 0))
      'int16
      16)
     (sca-broadcast (int16_t (bv #x0040 16)) 16))
    (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
   'int32
   16)
  (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
template:
  (vs-mpy-add
 ...
 (union [x?$1242 #(struct:vs-mpy-add
                   ...
                   #(struct:vs-mpy-add
                     ...
                     #<combine:
                      #(struct:vs-mpy-add
                        ...
                        #<load-data>
                        (#(struct:int16_t (bv #x0040 16)))
                        #f
                        #f
                        #f
                        int16)
                      #(struct:broadcast
                        ...
                        #(struct:sca-mul
                          #(struct:int16_t t125)
                          #(struct:int16_t (bv #xffc0 16))))>
                     (#(struct:int8_t (bv #x01 8))
                      #(struct:int8_t (bv #x01 8)))
                     #f
                     #f
                     #f
                     int16)
                   (#(struct:int16_t input1_multiplier))
                   #f
                   #f
                   #f
                   int32)] [(! x?$1242) #(struct:vs-mpy-add
                                          ...
                                          #(struct:vs-mpy-add
                                            ...
                                            #<combine:
                                             #(struct:vs-mpy-add
                                               ...
                                               #<load-data>
                                               (#(struct:int16_t
                                                  (bv #x0040 16)))
                                               #f
                                               #f
                                               #f
                                               int16)
                                             #(struct:broadcast
                                               ...
                                               #(struct:sca-mul
                                                 #(struct:int16_t t126)
                                                 #(struct:int16_t
                                                   (bv #xffc0 16))))>
                                            (#(struct:int8_t (bv #x01 8))
                                             #(struct:int8_t (bv #x01 8)))
                                            #f
                                            #f
                                            #f
                                            int16)
                                          (#(struct:int16_t input2_multiplier))
                                          #f
                                          #f
                                          #f
                                          int32)])
 (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
 (! x?$1243)
 (! x?$1244)
 (! x?$1245)
 'int32)
axioms:
  '()
optimized-halide-expr:
  (vec-add
 (vec-mul
  (vec-cast
   (vec-add
    (vec-mul
     (vec-cast
      (load
       (buffer input1 'uint8)
       (ramp
        (sca-add
         (sca-mul output.s0.x.x 16)
         (sca-add
          (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
          (var-lookup 't55)))
        1
        16)
       (aligned 1 0))
      'int16
      16)
     (sca-broadcast (int16_t (bv #x0040 16)) 16))
    (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
   'int32
   16)
  (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
 (vec-mul
  (vec-cast
   (vec-add
    (vec-mul
     (vec-cast
      (load
       (buffer input2 'uint8)
       (ramp
        (sca-add
         (sca-mul output.s0.x.x 16)
         (sca-add
          (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
          (var-lookup 't56)))
        1
        16)
       (aligned 1 0))
      'int16
      16)
     (sca-broadcast (int16_t (bv #x0040 16)) 16))
    (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
   'int32
   16)
  (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
optimized-template:
  (vs-mpy-add
 ...
 (union [x?$1242 #(struct:vs-mpy-add
                   ...
                   #(struct:vs-mpy-add
                     ...
                     #<combine:
                      #(struct:vs-mpy-add
                        ...
                        #<load-data>
                        (#(struct:int16_t (bv #x0040 16)))
                        #f
                        #f
                        #f
                        int16)
                      #(struct:broadcast
                        ...
                        #(struct:sca-mul
                          #(struct:int16_t t125)
                          #(struct:int16_t (bv #xffc0 16))))>
                     (#(struct:int8_t (bv #x01 8))
                      #(struct:int8_t (bv #x01 8)))
                     #f
                     #f
                     #f
                     int16)
                   (#(struct:int16_t input1_multiplier))
                   #f
                   #f
                   #f
                   int32)] [(! x?$1242) #(struct:vs-mpy-add
                                          ...
                                          #(struct:vs-mpy-add
                                            ...
                                            #<combine:
                                             #(struct:vs-mpy-add
                                               ...
                                               #<load-data>
                                               (#(struct:int16_t
                                                  (bv #x0040 16)))
                                               #f
                                               #f
                                               #f
                                               int16)
                                             #(struct:broadcast
                                               ...
                                               #(struct:sca-mul
                                                 #(struct:int16_t t126)
                                                 #(struct:int16_t
                                                   (bv #xffc0 16))))>
                                            (#(struct:int8_t (bv #x01 8))
                                             #(struct:int8_t (bv #x01 8)))
                                            #f
                                            #f
                                            #f
                                            int16)
                                          (#(struct:int16_t input2_multiplier))
                                          #f
                                          #f
                                          #f
                                          int32)])
 (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
 (! x?$1243)
 (! x?$1244)
 (! x?$1245)
 'int32)
optimized Halide 0:
  (int32_t
 (bvadd (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))))
optimized x86 0:
  (int32_t
 (ite* (⊢ (&& x?$1245 (! (&& (! x?$1243) (! x?$1245)))) (ite x?$1243 (bvadd (ite x?$1242 (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (bvadd (ite c$254 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (ite c$256 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125))) (bitvector 32))) (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (bvadd (ite c$753 (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (ite c$755 (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126))) (bitvector 32)))) (ite x?$1243 (bvadd (ite x?$1242 (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (ite x?$1244 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1244 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite x?$1242 (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1244 (bv #x00000000 32) (bv #x00000001 32))))) (ite x?$1242 (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1244 (bv #x00000000 32) (bv #x00000001 32)))))))) (bvadd (ite x?$1243 (bvadd (ite x?$1242 (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (ite x?$1244 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1244 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite x?$1242 (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1244 (bv #x00000000 32) (bv #x00000001 32))))) (ite x?$1242 (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1244 (bv #x00000000 32) (bv #x00000001 32))))))) (ite (bvsle (bvadd (bv #x80000000 32) (bvneg (ite (bvsle (ite x?$1243 (bvadd (ite x?$1242 (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (ite x?$1244 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1244 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite x?$1242 (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1244 (bv #x00000000 32) (bv #x00000001 32))))) (ite x?$1242 (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1244 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)) (ite x?$1243 (bvadd (ite x?$1242 (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (ite x?$1244 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1244 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite x?$1242 (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1244 (bv #x00000000 32) (bv #x00000001 32))))) (ite x?$1242 (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1244 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)))) (ite (bvsle (ite x?$1242 (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (bvadd (ite c$254 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (ite c$256 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125))) (bitvector 32))) (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (bvadd (ite c$753 (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (ite c$755 (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126))) (bitvector 32)))) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$1243 (bvadd (ite x?$1242 (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (ite x?$1244 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1244 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite x?$1242 (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1244 (bv #x00000000 32) (bv #x00000001 32))))) (ite x?$1242 (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1244 (bv #x00000000 32) (bv #x00000001 32)))))))) (ite x?$1243 (bvadd (ite x?$1242 (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (ite x?$1244 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1244 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite x?$1242 (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1244 (bv #x00000000 32) (bv #x00000001 32))))) (ite x?$1242 (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1244 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32))))) (ite x?$1242 (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (bvadd (ite c$254 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (ite c$256 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125))) (bitvector 32))) (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (bvadd (ite c$753 (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (ite c$755 (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126))) (bitvector 32)))) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$1243 (bvadd (ite x?$1242 (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (ite x?$1244 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1244 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite x?$1242 (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1244 (bv #x00000000 32) (bv #x00000001 32))))) (ite x?$1242 (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1244 (bv #x00000000 32) (bv #x00000001 32)))))))) (ite x?$1243 (bvadd (ite x?$1242 (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (ite x?$1244 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1244 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite x?$1242 (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1244 (bv #x00000000 32) (bv #x00000001 32))))) (ite x?$1242 (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1244 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)))))) (ite (bvsle (ite x?$1242 (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (bvadd (ite c$254 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (ite c$256 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125))) (bitvector 32))) (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (bvadd (ite c$753 (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (ite c$755 (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126))) (bitvector 32)))) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$1243 (bvadd (ite x?$1242 (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (ite x?$1244 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1244 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite x?$1242 (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1244 (bv #x00000000 32) (bv #x00000001 32))))) (ite x?$1242 (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1244 (bv #x00000000 32) (bv #x00000001 32)))))))) (ite x?$1243 (bvadd (ite x?$1242 (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (ite x?$1244 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1244 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite x?$1242 (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1244 (bv #x00000000 32) (bv #x00000001 32))))) (ite x?$1242 (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1244 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32))))) (ite x?$1242 (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (bvadd (ite c$254 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (ite c$256 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125))) (bitvector 32))) (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (bvadd (ite c$753 (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (ite c$755 (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126))) (bitvector 32)))) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$1243 (bvadd (ite x?$1242 (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (ite x?$1244 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1244 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite x?$1242 (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1244 (bv #x00000000 32) (bv #x00000001 32))))) (ite x?$1242 (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1244 (bv #x00000000 32) (bv #x00000001 32)))))))) (ite x?$1243 (bvadd (ite x?$1242 (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (ite x?$1244 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1244 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite x?$1242 (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1244 (bv #x00000000 32) (bv #x00000001 32))))) (ite x?$1242 (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1244 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32))))) (bvadd (bv #x80000000 32) (bvneg (ite (bvsle (ite x?$1243 (bvadd (ite x?$1242 (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (ite x?$1244 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1244 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite x?$1242 (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1244 (bv #x00000000 32) (bv #x00000001 32))))) (ite x?$1242 (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1244 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)) (ite x?$1243 (bvadd (ite x?$1242 (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (ite x?$1244 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1244 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite x?$1242 (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1244 (bv #x00000000 32) (bv #x00000001 32))))) (ite x?$1242 (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1244 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)))))))) (⊢ (|| (&& (! x?$1243) (! x?$1245)) (&& (! x?$1245) (! (&& (! x?$1243) (! x?$1245))))) (bvashr (ite x?$1243 (bvadd (ite x?$1242 (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (bvadd (ite c$254 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (ite c$256 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125))) (bitvector 32))) (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (bvadd (ite c$753 (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (ite c$755 (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126))) (bitvector 32)))) (ite x?$1243 (bvadd (ite x?$1242 (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (ite x?$1244 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1244 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite x?$1242 (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1244 (bv #x00000000 32) (bv #x00000001 32))))) (ite x?$1242 (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1244 (bv #x00000000 32) (bv #x00000001 32)))))))) (bvadd (ite x?$1243 (bvadd (ite x?$1242 (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (ite x?$1244 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1244 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite x?$1242 (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1244 (bv #x00000000 32) (bv #x00000001 32))))) (ite x?$1242 (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1244 (bv #x00000000 32) (bv #x00000001 32))))))) (ite (bvsle (bvadd (bv #x80000000 32) (bvneg (ite (bvsle (ite x?$1243 (bvadd (ite x?$1242 (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (ite x?$1244 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1244 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite x?$1242 (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1244 (bv #x00000000 32) (bv #x00000001 32))))) (ite x?$1242 (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1244 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)) (ite x?$1243 (bvadd (ite x?$1242 (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (ite x?$1244 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1244 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite x?$1242 (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1244 (bv #x00000000 32) (bv #x00000001 32))))) (ite x?$1242 (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1244 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)))) (ite (bvsle (ite x?$1242 (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (bvadd (ite c$254 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (ite c$256 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125))) (bitvector 32))) (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (bvadd (ite c$753 (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (ite c$755 (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126))) (bitvector 32)))) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$1243 (bvadd (ite x?$1242 (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (ite x?$1244 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1244 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite x?$1242 (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1244 (bv #x00000000 32) (bv #x00000001 32))))) (ite x?$1242 (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1244 (bv #x00000000 32) (bv #x00000001 32)))))))) (ite x?$1243 (bvadd (ite x?$1242 (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (ite x?$1244 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1244 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite x?$1242 (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1244 (bv #x00000000 32) (bv #x00000001 32))))) (ite x?$1242 (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1244 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32))))) (ite x?$1242 (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (bvadd (ite c$254 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (ite c$256 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125))) (bitvector 32))) (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (bvadd (ite c$753 (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (ite c$755 (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126))) (bitvector 32)))) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$1243 (bvadd (ite x?$1242 (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (ite x?$1244 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1244 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite x?$1242 (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1244 (bv #x00000000 32) (bv #x00000001 32))))) (ite x?$1242 (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1244 (bv #x00000000 32) (bv #x00000001 32)))))))) (ite x?$1243 (bvadd (ite x?$1242 (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (ite x?$1244 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1244 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite x?$1242 (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1244 (bv #x00000000 32) (bv #x00000001 32))))) (ite x?$1242 (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1244 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)))))) (ite (bvsle (ite x?$1242 (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (bvadd (ite c$254 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (ite c$256 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125))) (bitvector 32))) (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (bvadd (ite c$753 (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (ite c$755 (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126))) (bitvector 32)))) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$1243 (bvadd (ite x?$1242 (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (ite x?$1244 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1244 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite x?$1242 (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1244 (bv #x00000000 32) (bv #x00000001 32))))) (ite x?$1242 (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1244 (bv #x00000000 32) (bv #x00000001 32)))))))) (ite x?$1243 (bvadd (ite x?$1242 (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (ite x?$1244 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1244 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite x?$1242 (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1244 (bv #x00000000 32) (bv #x00000001 32))))) (ite x?$1242 (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1244 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32))))) (ite x?$1242 (bvmul (sign-extend input1_multiplier (bitvector 32)) (sign-extend (bvadd (ite c$254 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (ite c$256 (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125))) (bitvector 32))) (bvmul (sign-extend input2_multiplier (bitvector 32)) (sign-extend (bvadd (ite c$753 (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (ite c$755 (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126))) (bitvector 32)))) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$1243 (bvadd (ite x?$1242 (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (ite x?$1244 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1244 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite x?$1242 (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1244 (bv #x00000000 32) (bv #x00000001 32))))) (ite x?$1242 (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1244 (bv #x00000000 32) (bv #x00000001 32)))))))) (ite x?$1243 (bvadd (ite x?$1242 (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (ite x?$1244 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1244 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite x?$1242 (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1244 (bv #x00000000 32) (bv #x00000001 32))))) (ite x?$1242 (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1244 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32))))) (bvadd (bv #x80000000 32) (bvneg (ite (bvsle (ite x?$1243 (bvadd (ite x?$1242 (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (ite x?$1244 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1244 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite x?$1242 (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1244 (bv #x00000000 32) (bv #x00000001 32))))) (ite x?$1242 (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1244 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)) (ite x?$1243 (bvadd (ite x?$1242 (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (ite x?$1244 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1244 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite x?$1242 (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1244 (bv #x00000000 32) (bv #x00000001 32))))) (ite x?$1242 (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input1 (+ (+ -16 output.s0.x.x) (+ (+ t91 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t123)) (- t86))))) (bitvector 16))) (bvmul (bv #xffc0 16) t125)) (bitvector 32)) (sign-extend input1_multiplier (bitvector 32))) (bvmul (sign-extend (bvadd (bvmul (bv #x0040 16) (zero-extend (app input2 (+ (+ -16 output.s0.x.x) (+ (+ t98 (- (+ t103 output.s0.y.rebased))) (+ (+ t100 (- t124)) (- t93))))) (bitvector 16))) (bvmul (bv #xffc0 16) t126)) (bitvector 32)) (sign-extend input2_multiplier (bitvector 32)))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1244 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32))))))) (bv #x00000001 32)))))
Ran synthesizer for 851 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-mul
  (vec-cast
   (vec-add
    (vec-mul
     (vec-cast
      (load
       (buffer input1 'uint8)
       (ramp
        (sca-add
         (sca-mul output.s0.x.x 16)
         (sca-add
          (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
          (var-lookup 't55)))
        1
        16)
       (aligned 1 0))
      'int16
      16)
     (sca-broadcast (int16_t (bv #x0040 16)) 16))
    (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
   'int32
   16)
  (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
 (vec-mul
  (vec-cast
   (vec-add
    (vec-mul
     (vec-cast
      (load
       (buffer input2 'uint8)
       (ramp
        (sca-add
         (sca-mul output.s0.x.x 16)
         (sca-add
          (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
          (var-lookup 't56)))
        1
        16)
       (aligned 1 0))
      'int16
      16)
     (sca-broadcast (int16_t (bv #x0040 16)) 16))
    (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
   'int32
   16)
  (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))
template:
  (vs-mpy-add
 ...
 (combine
  (vs-mpy-add
   ...
   (vs-mpy-add
    ...
    (combine
     (vs-mpy-add
      ...
      #<load-data>
      (list (int16_t (bv #x0040 16)))
      #f
      #f
      #f
      'int16)
     (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
    (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
    #f
    #f
    #f
    'int16)
   (list (int16_t input1_multiplier))
   #f
   #f
   #f
   'int32)
  (vs-mpy-add
   ...
   (vs-mpy-add
    ...
    (combine
     (vs-mpy-add
      ...
      #<load-data>
      (list (int16_t (bv #x0040 16)))
      #f
      #f
      #f
      'int16)
     (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
    (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
    #f
    #f
    #f
    'int16)
   (list (int16_t input2_multiplier))
   #f
   #f
   #f
   'int32))
 (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
 #f
 #f
 #f
 'int32)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$1296 idx) (bv #x40000000 32)) (bvsle (bv #xc0008000 32) (app abstr-vals$1296 idx))))
 (forall (idx) (&& (bvsle (app abstr-vals$1297 idx) (bv #x40000000 32)) (bvsle (bv #xc0008000 32) (app abstr-vals$1297 idx)))))
optimized-halide-expr:
  (vec-add #<abstr-halide-expr> #<abstr-halide-expr>)
optimized-template:
  (vs-mpy-add
 ...
 (combine #<abstr-expr> #<abstr-expr>)
 (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
 #f
 #f
 #f
 'int32)
optimized Halide 0:
  (int32_t (bvadd (app abstr-vals$1296 0) (app abstr-vals$1297 0)))
optimized x86 0:
  (int32_t
 (bvadd (ite c$1247 (app abstr-vals$1296 idx$1246) (app abstr-vals$1297 idx$1246)) (ite c$1249 (app abstr-vals$1296 idx$1248) (app abstr-vals$1297 idx$1248))))
Ran synthesizer for 123 ms
(model
 [idx$1246 0]
 [c$1247 #f]
 [idx$1248 0]
 [c$1249 #t])
(vec-add #<abstr-halide-expr> #<abstr-halide-expr>)
(vs-mpy-add
 ...
 (combine
  (vs-mpy-add
   ...
   (vs-mpy-add
    ...
    (combine
     (vs-mpy-add
      ...
      #<load-data>
      (list (int16_t (bv #x0040 16)))
      #f
      #f
      #f
      'int16)
     (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
    (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
    #f
    #f
    #f
    'int16)
   (list (int16_t input1_multiplier))
   #f
   #f
   #f
   'int32)
  (vs-mpy-add
   ...
   (vs-mpy-add
    ...
    (combine
     (vs-mpy-add
      ...
      #<load-data>
      (list (int16_t (bv #x0040 16)))
      #f
      #f
      #f
      'int16)
     (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
    (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
    #f
    #f
    #f
    'int16)
   (list (int16_t input2_multiplier))
   #f
   #f
   #f
   'int32))
 (list (int8_t (bv #here
  context...:
   body of "/Users/alexanderroot/Projects/Rake/rake/rake/x86/ast/temp.rkt"
x01 8)) (int8_t (bv #x01 8)))
 #f
 #f
 #f
 'int32)
Ran bounds analysis for 26 ms
Ran bounds analysis for 32 ms
"Extended success?"
#t
(vs-mpy-add
 ...
 (combine
  (vs-mpy-add
   ...
   (vs-mpy-add
    ...
    (combine
     (vs-mpy-add
      ...
      #<load-data>
      (list (int16_t (bv #x0040 16)))
      #f
      #f
      #f
      'int16)
     (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
    (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
    #f
    #f
    #f
    'int16)
   (list (int16_t input1_multiplier))
   #f
   #f
   #f
   'int32)
  (vs-mpy-add
   ...
   (vs-mpy-add
    ...
    (combine
     (vs-mpy-add
      ...
      #<load-data>
      (list (int16_t (bv #x0040 16)))
      #f
      #f
      #f
      'int16)
     (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
    (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
    #f
    #f
    #f
    'int16)
   (list (int16_t input2_multiplier))
   #f
   #f
   #f
   'int32))
 (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
 #f
 #f
 #f
 'int32)

(x86) Successfully found an equivalent IR expression.

(vs-mpy-add
 ...
 (combine
  (vs-mpy-add
   ...
   (vs-mpy-add
    ...
    (combine
     (vs-mpy-add
      ...
      #<load-data>
      (list (int16_t (bv #x0040 16)))
      #f
      #f
      #f
      'int16)
     (broadcast ... (sca-mul (int16_t t125) (int16_t (bv #xffc0 16)))))
    (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
    #f
    #f
    #f
    'int16)
   (list (int16_t input1_multiplier))
   #f
   #f
   #f
   'int32)
  (vs-mpy-add
   ...
   (vs-mpy-add
    ...
    (combine
     (vs-mpy-add
      ...
      #<load-data>
      (list (int16_t (bv #x0040 16)))
      #f
      #f
      #f
      'int16)
     (broadcast ... (sca-mul (int16_t t126) (int16_t (bv #xffc0 16)))))
    (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
    #f
    #f
    #f
    'int16)
   (list (int16_t input2_multiplier))
   #f
   #f
   #f
   'int32))
 (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
 #f
 #f
 #f
 'int32)

Synthesis time: 10 seconds

Synthesizing x86 for:
(vec-add
 (vec-mul
  (vec-cast
   (vec-add
    (vec-mul
     (vec-cast
      (load
       (buffer input1 'uint8)
       (ramp
        (sca-add
         (sca-mul output.s0.x.x 16)
         (sca-add
          (sca-mul (var-lookup 'input1.stride.1) (var-lookup 't68))
          (var-lookup 't55)))
        1
        16)
       (aligned 1 0))
      'int16
      16)
     (sca-broadcast (int16_t (bv #x0040 16)) 16))
    (sca-broadcast (sca-mul (int16_t t125) (int16_t (bv #xffc0 16))) 16))
   'int32
   16)
  (vec-cast (sca-broadcast (int16_t input1_multiplier) 16) 'int32 16))
 (vec-mul
  (vec-cast
   (vec-add
    (vec-mul
     (vec-cast
      (load
       (buffer input2 'uint8)
       (ramp
        (sca-add
         (sca-mul output.s0.x.x 16)
         (sca-add
          (sca-mul (var-lookup 'input2.stride.1) (var-lookup 't68))
          (var-lookup 't56)))
        1
        16)
       (aligned 1 0))
      'int16
      16)
     (sca-broadcast (int16_t (bv #x0040 16)) 16))
    (sca-broadcast (sca-mul (int16_t t126) (int16_t (bv #xffc0 16))) 16))
   'int32
   16)
  (vec-cast (sca-broadcast (int16_t input2_multiplier) 16) 'int32 16)))


synthesize-x86 output:
#<void>
#f
