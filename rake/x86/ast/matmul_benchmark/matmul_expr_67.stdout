Lifting input expression to x86 IR...
=====================================

"Building Expr:"
(sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
"Fold templates"
'()
here()

"Replace templates"
'()
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
template:
  (broadcast ... (int64_t (bv #x0000000000000001 64)))
axioms:
  '()
optimized-halide-expr:
  (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
optimized-template:
  (broadcast ... (int64_t (bv #x0000000000000001 64)))
optimized Halide 0:
  (int64_t (bv #x0000000000000001 64))
optimized x86 0:
  (int64_t (bv #x0000000000000001 64))
Ran synthesizer for 19 ms
(model)
(sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
(broadcast ... (int64_t (bv #x0000000000000001 64)))
Ran bounds analysis for 23 ms
Ran bounds analysis for 15 ms
"Extended success?"
#t
(broadcast ... (int64_t (bv #x0000000000000001 64)))
"Building Expr:"
(load
 (buffer column_sums_b 'uint32)
 (ramp
  (sca-add (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16) 16)
  1
  16)
 (aligned 16 0))
"Fold templates"
'()
here()

"Replace templates"
'()
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (load
 (buffer column_sums_b 'uint32)
 (ramp
  (sca-add (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16) 16)
  1
  16)
 (aligned 16 0))
template:
  #<load-data>
axioms:
  '()
optimized-halide-expr:
  (load
 (buffer column_sums_b 'uint32)
 (ramp
  (sca-add (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16) 16)
  1
  16)
 (aligned 16 0))
optimized-template:
  #<load-data>
optimized Halide 0:
  (uint32_t (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1)))))
optimized x86 0:
  (uint32_t (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1)))))
Ran synthesizer for 22 ms
(model
 [idx$0 0])
(load
 (buffer column_sums_b 'uint32)
 (ramp
  (sca-add (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16) 16)
  1
  16)
 (aligned 16 0))
#<load-data>
Ran bounds analysis for 36 ms
Ran bounds analysis for 29 ms
"Extended success?"
#t
#<load-data>
"Building Expr:"
(vec-cast
 (load
  (buffer column_sums_b 'uint32)
  (ramp
   (sca-add (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16) 16)
   1
   16)
  (aligned 16 0))
 'int32
 16)
"Fold templates"
'(#<load-data>)
here(#<load-data>)

"Replace templates"
'()
run-x86-synthesizer
halide-expr:
  (vec-cast
 (load
  (buffer column_sums_b 'uint32)
  (ramp
   (sca-add (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16) 16)
   1
   16)
  (aligned 16 0))
 'int32
 16)
template:
  #<load-data>
axioms:
  '()
optimized-halide-expr:
  (vec-cast
 (load
  (buffer column_sums_b 'uint32)
  (ramp
   (sca-add (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16) 16)
   1
   16)
  (aligned 16 0))
 'int32
 16)
optimized-template:
  #<load-data>
optimized Halide 0:
  (int32_t (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1)))))
optimized x86 0:
  (uint32_t (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1)))))
Ran synthesizer for 1 ms
(unsat)
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (vec-cast
 (load
  (buffer column_sums_b 'uint32)
  (ramp
   (sca-add (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16) 16)
   1
   16)
  (aligned 16 0))
 'int32
 16)
template:
  (cast ... #<load-data> 'int32 #f)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-cast #<abstr-halide-expr> 'int32 16)
optimized-template:
  (cast ... #<abstr-expr> 'int32 #f)
optimized Halide 0:
  (int32_t (app abstr-vals$129 0))
optimized x86 0:
  (int32_t (app abstr-vals$129 0))
Ran synthesizer for 18 ms
(model)
(vec-cast #<abstr-halide-expr> 'int32 16)
(cast ... #<load-data> 'int32 #f)
Ran bounds analysis for 36 ms
Ran bounds analysis for 28 ms
"Extended success?"
#t
(cast ... #<load-data> 'int32 #f)
"Building Expr:"
(sca-broadcast (int32_t t5829) 16)
"Fold templates"
'()
here()

"Replace templates"
'()
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (sca-broadcast (int32_t t5829) 16)
template:
  (broadcast ... (int32_t t5829))
axioms:
  '()
optimized-halide-expr:
  (sca-broadcast (int32_t t5829) 16)
optimized-template:
  (broadcast ... (int32_t t5829))
optimized Halide 0:
  (int32_t t5829)
optimized x86 0:
  (int32_t t5829)
Ran synthesizer for 18 ms
(model)
(sca-broadcast (int32_t t5829) 16)
(broadcast ... (int32_t t5829))
Ran bounds analysis for 37 ms
Ran bounds analysis for 28 ms
"Extended success?"
#t
(broadcast ... (int32_t t5829))
"Building Expr:"
(vec-mul
 (vec-cast
  (load
   (buffer column_sums_b 'uint32)
   (ramp
    (sca-add (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16) 16)
    1
    16)
   (aligned 16 0))
  'int32
  16)
 (sca-broadcast (int32_t t5829) 16))
"Fold templates"
(list #<load-data> (cast ... #<load-data> 'int32 x?$131))
here(#<load-data> #(struct:cast ... #<load-data> int32 x?$131))

(list (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32) (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32) (vv-mpy-add ... #<load-data> '(1) (! x?$388) (! x?$389) (! x?$390) 'int32) (vv-mpy-add ... #<load-data> '(1) (! x?$391) (! x?$392) (! x?$393) 'int32))
"Replace templates"
(list
 (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
 (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
 (vv-mpy-add ... #<load-data> '(1) (! x?$388) (! x?$389) (! x?$390) 'int32)
 (vv-mpy-add ... #<load-data> '(1) (! x?$391) (! x?$392) (! x?$393) 'int32))
run-x86-synthesizer
halide-expr:
  (vec-mul
 (vec-cast
  (load
   (buffer column_sums_b 'uint32)
   (ramp
    (sca-add (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16) 16)
    1
    16)
   (aligned 16 0))
  'int32
  16)
 (sca-broadcast (int32_t t5829) 16))
template:
  #<load-data>
axioms:
  '()
optimized-halide-expr:
  (vec-mul
 (vec-cast
  (load
   (buffer column_sums_b 'uint32)
   (ramp
    (sca-add (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16) 16)
    1
    16)
   (aligned 16 0))
  'int32
  16)
 (sca-broadcast (int32_t t5829) 16))
optimized-template:
  #<load-data>
optimized Halide 0:
  (int32_t
 (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))))
optimized x86 0:
  (uint32_t (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1)))))
run-x86-synthesizer
halide-expr:
  (vec-mul
 (vec-cast
  (load
   (buffer column_sums_b 'uint32)
   (ramp
    (sca-add (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16) 16)
    1
    16)
   (aligned 16 0))
  'int32
  16)
 (sca-broadcast (int32_t t5829) 16))
template:
  (cast ... #<load-data> 'int32 x?$131)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-mul
 (vec-cast #<abstr-halide-expr> 'int32 16)
 (sca-broadcast (int32_t t5829) 16))
optimized-template:
  (cast ... #<abstr-expr> 'int32 x?$131)
optimized Halide 0:
  (int32_t (bvmul t5829 (app abstr-vals$394 0)))
optimized x86 0:
  (int32_t
 (ite x?$131 (ite (bvult (bv #x7fffffff 32) (app abstr-vals$394 0)) (bv #x7fffffff 32) (app abstr-vals$394 0)) (app abstr-vals$394 0)))
run-x86-synthesizer
halide-expr:
  (vec-mul
 (vec-cast
  (load
   (buffer column_sums_b 'uint32)
   (ramp
    (sca-add (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16) 16)
    1
    16)
   (aligned 16 0))
  'int32
  16)
 (sca-broadcast (int32_t t5829) 16))
template:
  (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-mul
 (vec-cast #<abstr-halide-expr> 'int32 16)
 (sca-broadcast (int32_t t5829) 16))
optimized-template:
  (vs-mpy-add ... #<abstr-expr> (list (int32_t t5829)) #f #f #f 'int32)
optimized Halide 0:
  (int32_t (bvmul t5829 (app abstr-vals$395 0)))
optimized x86 0:
  (int32_t (bvmul t5829 (app abstr-vals$395 0)))
Ran synthesizer for 18 ms
(model)
(vec-mul
 (vec-cast #<abstr-halide-expr> 'int32 16)
 (sca-broadcast (int32_t t5829) 16))
(vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
Ran bounds analysis for 112 ms
Ran bounds analysis for 81 ms
"Success?"
#t
(vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
"Building Expr:"
(load
 (buffer bias 'int32)
 (ramp (sca-mul output.s0.x.x 16) 1 16)
 (aligned 16 0))
"Fold templates"
'()
here()

"Replace templates"
'()
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (load
 (buffer bias 'int32)
 (ramp (sca-mul output.s0.x.x 16) 1 16)
 (aligned 16 0))
template:
  #<load-data>
axioms:
  '()
optimized-halide-expr:
  (load
 (buffer bias 'int32)
 (ramp (sca-mul output.s0.x.x 16) 1 16)
 (aligned 16 0))
optimized-template:
  #<load-data>
optimized Halide 0:
  (int32_t (app bias (+ -16 output.s0.x.x)))
optimized x86 0:
  (int32_t (app bias (+ -16 output.s0.x.x)))
Ran synthesizer for 22 ms
(model
 [idx$397 0])
(load
 (buffer bias 'int32)
 (ramp (sca-mul output.s0.x.x 16) 1 16)
 (aligned 16 0))
#<load-data>
Ran bounds analysis for 37 ms
Ran bounds analysis for 29 ms
"Extended success?"
#t
#<load-data>
"Building Expr:"
(sca-broadcast
 (sca-add
  (sca-mul (sca-mul (int32_t t5829) (int32_t t5830)) (int32_t mat_a.extent.0))
  (sca-mul (int32_t t5830) (int32_t t6653)))
 16)
"Fold templates"
'()
here()

"Replace templates"
'()
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (sca-broadcast
 (sca-add
  (sca-mul (sca-mul (int32_t t5829) (int32_t t5830)) (int32_t mat_a.extent.0))
  (sca-mul (int32_t t5830) (int32_t t6653)))
 16)
template:
  (broadcast
 ...
 (sca-add
  (sca-mul (sca-mul (int32_t t5829) (int32_t t5830)) (int32_t mat_a.extent.0))
  (sca-mul (int32_t t5830) (int32_t t6653))))
axioms:
  '()
optimized-halide-expr:
  (sca-broadcast
 (sca-add
  (sca-mul (sca-mul (int32_t t5829) (int32_t t5830)) (int32_t mat_a.extent.0))
  (sca-mul (int32_t t5830) (int32_t t6653)))
 16)
optimized-template:
  (broadcast
 ...
 (sca-add
  (sca-mul (sca-mul (int32_t t5829) (int32_t t5830)) (int32_t mat_a.extent.0))
  (sca-mul (int32_t t5830) (int32_t t6653))))
optimized Halide 0:
  (int32_t
 (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))
optimized x86 0:
  (int32_t
 (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))
Ran synthesizer for 18 ms
(model)
(sca-broadcast
 (sca-add
  (sca-mul (sca-mul (int32_t t5829) (int32_t t5830)) (int32_t mat_a.extent.0))
  (sca-mul (int32_t t5830) (int32_t t6653)))
 16)
(broadcast
 ...
 (sca-add
  (sca-mul (sca-mul (int32_t t5829) (int32_t t5830)) (int32_t mat_a.extent.0))
  (sca-mul (int32_t t5830) (int32_t t6653))))
Ran bounds analysis for 144 ms
Ran bounds analysis for 360 ms
"Extended success?"
#t
(broadcast
 ...
 (sca-add
  (sca-mul (sca-mul (int32_t t5829) (int32_t t5830)) (int32_t mat_a.extent.0))
  (sca-mul (int32_t t5830) (int32_t t6653))))
"Building Expr:"
(vec-add
 (load
  (buffer bias 'int32)
  (ramp (sca-mul output.s0.x.x 16) 1 16)
  (aligned 16 0))
 (sca-broadcast
  (sca-add
   (sca-mul (sca-mul (int32_t t5829) (int32_t t5830)) (int32_t mat_a.extent.0))
   (sca-mul (int32_t t5830) (int32_t t6653)))
  16))
"Fold templates"
'(#<load-data>)
here(#<load-data>)

"Replace templates"
'()
run-x86-synthesizer
halide-expr:
  (vec-add
 (load
  (buffer bias 'int32)
  (ramp (sca-mul output.s0.x.x 16) 1 16)
  (aligned 16 0))
 (sca-broadcast
  (sca-add
   (sca-mul (sca-mul (int32_t t5829) (int32_t t5830)) (int32_t mat_a.extent.0))
   (sca-mul (int32_t t5830) (int32_t t6653)))
  16))
template:
  #<load-data>
axioms:
  '()
optimized-halide-expr:
  (vec-add
 (load
  (buffer bias 'int32)
  (ramp (sca-mul output.s0.x.x 16) 1 16)
  (aligned 16 0))
 (sca-broadcast
  (sca-add
   (sca-mul (sca-mul (int32_t t5829) (int32_t t5830)) (int32_t mat_a.extent.0))
   (sca-mul (int32_t t5830) (int32_t t6653)))
  16))
optimized-template:
  #<load-data>
optimized Halide 0:
  (int32_t
 (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653))))
optimized x86 0:
  (int32_t (app bias (+ -16 output.s0.x.x)))
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (vec-add
 (load
  (buffer bias 'int32)
  (ramp (sca-mul output.s0.x.x 16) 1 16)
  (aligned 16 0))
 (sca-broadcast
  (sca-add
   (sca-mul (sca-mul (int32_t t5829) (int32_t t5830)) (int32_t mat_a.extent.0))
   (sca-mul (int32_t t5830) (int32_t t6653)))
  16))
template:
  (vs-mpy-add
 ...
 (union [x?$526 #<load-data>] [(! x?$526) #(struct:broadcast
                                            ...
                                            #(struct:sca-add
                                              #(struct:sca-mul
                                                #(struct:sca-mul
                                                  #(struct:int32_t t5829)
                                                  #(struct:int32_t t5830))
                                                #(struct:int32_t
                                                  mat_a.extent.0))
                                              #(struct:sca-mul
                                                #(struct:int32_t t5830)
                                                #(struct:int32_t t6653))))])
 (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
 (! x?$527)
 (! x?$528)
 (! x?$529)
 'int32)
axioms:
  '()
optimized-halide-expr:
  (vec-add
 (load
  (buffer bias 'int32)
  (ramp (sca-mul output.s0.x.x 16) 1 16)
  (aligned 16 0))
 (sca-broadcast
  (sca-add
   (sca-mul (sca-mul (int32_t t5829) (int32_t t5830)) (int32_t mat_a.extent.0))
   (sca-mul (int32_t t5830) (int32_t t6653)))
  16))
optimized-template:
  (vs-mpy-add
 ...
 (union [x?$526 #<load-data>] [(! x?$526) #(struct:broadcast
                                            ...
                                            #(struct:sca-add
                                              #(struct:sca-mul
                                                #(struct:sca-mul
                                                  #(struct:int32_t t5829)
                                                  #(struct:int32_t t5830))
                                                #(struct:int32_t
                                                  mat_a.extent.0))
                                              #(struct:sca-mul
                                                #(struct:int32_t t5830)
                                                #(struct:int32_t t6653))))])
 (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
 (! x?$527)
 (! x?$528)
 (! x?$529)
 'int32)
optimized Halide 0:
  (int32_t
 (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653))))
optimized x86 0:
  (int32_t
 (ite* (⊢ (&& x?$529 (! (&& (! x?$527) (! x?$529)))) (ite x?$527 (bvadd (ite x?$526 (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653))) (ite x?$527 (bvadd (ite x?$526 (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653))) (ite x?$528 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$528 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite x?$526 (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$528 (bv #x00000000 32) (bv #x00000001 32))))) (ite x?$526 (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$528 (bv #x00000000 32) (bv #x00000001 32)))))))) (bvadd (ite x?$527 (bvadd (ite x?$526 (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653))) (ite x?$528 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$528 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite x?$526 (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$528 (bv #x00000000 32) (bv #x00000001 32))))) (ite x?$526 (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$528 (bv #x00000000 32) (bv #x00000001 32))))))) (ite (bvsle (bvadd (bv #x80000000 32) (bvneg (ite (bvsle (ite x?$527 (bvadd (ite x?$526 (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653))) (ite x?$528 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$528 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite x?$526 (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$528 (bv #x00000000 32) (bv #x00000001 32))))) (ite x?$526 (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$528 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)) (ite x?$527 (bvadd (ite x?$526 (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653))) (ite x?$528 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$528 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite x?$526 (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$528 (bv #x00000000 32) (bv #x00000001 32))))) (ite x?$526 (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$528 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)))) (ite (bvsle (ite x?$526 (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653))) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$527 (bvadd (ite x?$526 (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653))) (ite x?$528 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$528 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite x?$526 (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$528 (bv #x00000000 32) (bv #x00000001 32))))) (ite x?$526 (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$528 (bv #x00000000 32) (bv #x00000001 32)))))))) (ite x?$527 (bvadd (ite x?$526 (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653))) (ite x?$528 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$528 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite x?$526 (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$528 (bv #x00000000 32) (bv #x00000001 32))))) (ite x?$526 (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$528 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32))))) (ite x?$526 (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653))) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$527 (bvadd (ite x?$526 (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653))) (ite x?$528 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$528 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite x?$526 (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$528 (bv #x00000000 32) (bv #x00000001 32))))) (ite x?$526 (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$528 (bv #x00000000 32) (bv #x00000001 32)))))))) (ite x?$527 (bvadd (ite x?$526 (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653))) (ite x?$528 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$528 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite x?$526 (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$528 (bv #x00000000 32) (bv #x00000001 32))))) (ite x?$526 (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$528 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)))))) (ite (bvsle (ite x?$526 (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653))) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$527 (bvadd (ite x?$526 (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653))) (ite x?$528 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$528 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite x?$526 (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$528 (bv #x00000000 32) (bv #x00000001 32))))) (ite x?$526 (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$528 (bv #x00000000 32) (bv #x00000001 32)))))))) (ite x?$527 (bvadd (ite x?$526 (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653))) (ite x?$528 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$528 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite x?$526 (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$528 (bv #x00000000 32) (bv #x00000001 32))))) (ite x?$526 (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$528 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32))))) (ite x?$526 (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653))) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$527 (bvadd (ite x?$526 (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653))) (ite x?$528 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$528 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite x?$526 (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$528 (bv #x00000000 32) (bv #x00000001 32))))) (ite x?$526 (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$528 (bv #x00000000 32) (bv #x00000001 32)))))))) (ite x?$527 (bvadd (ite x?$526 (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653))) (ite x?$528 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$528 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite x?$526 (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$528 (bv #x00000000 32) (bv #x00000001 32))))) (ite x?$526 (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$528 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32))))) (bvadd (bv #x80000000 32) (bvneg (ite (bvsle (ite x?$527 (bvadd (ite x?$526 (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653))) (ite x?$528 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$528 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite x?$526 (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$528 (bv #x00000000 32) (bv #x00000001 32))))) (ite x?$526 (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$528 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)) (ite x?$527 (bvadd (ite x?$526 (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653))) (ite x?$528 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$528 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite x?$526 (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$528 (bv #x00000000 32) (bv #x00000001 32))))) (ite x?$526 (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$528 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)))))))) (⊢ (|| (&& (! x?$527) (! x?$529)) (&& (! x?$529) (! (&& (! x?$527) (! x?$529))))) (bvashr (ite x?$527 (bvadd (ite x?$526 (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653))) (ite x?$527 (bvadd (ite x?$526 (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653))) (ite x?$528 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$528 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite x?$526 (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$528 (bv #x00000000 32) (bv #x00000001 32))))) (ite x?$526 (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$528 (bv #x00000000 32) (bv #x00000001 32)))))))) (bvadd (ite x?$527 (bvadd (ite x?$526 (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653))) (ite x?$528 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$528 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite x?$526 (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$528 (bv #x00000000 32) (bv #x00000001 32))))) (ite x?$526 (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$528 (bv #x00000000 32) (bv #x00000001 32))))))) (ite (bvsle (bvadd (bv #x80000000 32) (bvneg (ite (bvsle (ite x?$527 (bvadd (ite x?$526 (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653))) (ite x?$528 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$528 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite x?$526 (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$528 (bv #x00000000 32) (bv #x00000001 32))))) (ite x?$526 (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$528 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)) (ite x?$527 (bvadd (ite x?$526 (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653))) (ite x?$528 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$528 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite x?$526 (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$528 (bv #x00000000 32) (bv #x00000001 32))))) (ite x?$526 (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$528 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)))) (ite (bvsle (ite x?$526 (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653))) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$527 (bvadd (ite x?$526 (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653))) (ite x?$528 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$528 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite x?$526 (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$528 (bv #x00000000 32) (bv #x00000001 32))))) (ite x?$526 (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$528 (bv #x00000000 32) (bv #x00000001 32)))))))) (ite x?$527 (bvadd (ite x?$526 (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653))) (ite x?$528 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$528 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite x?$526 (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$528 (bv #x00000000 32) (bv #x00000001 32))))) (ite x?$526 (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$528 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32))))) (ite x?$526 (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653))) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$527 (bvadd (ite x?$526 (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653))) (ite x?$528 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$528 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite x?$526 (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$528 (bv #x00000000 32) (bv #x00000001 32))))) (ite x?$526 (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$528 (bv #x00000000 32) (bv #x00000001 32)))))))) (ite x?$527 (bvadd (ite x?$526 (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653))) (ite x?$528 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$528 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite x?$526 (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$528 (bv #x00000000 32) (bv #x00000001 32))))) (ite x?$526 (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$528 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)))))) (ite (bvsle (ite x?$526 (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653))) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$527 (bvadd (ite x?$526 (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653))) (ite x?$528 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$528 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite x?$526 (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$528 (bv #x00000000 32) (bv #x00000001 32))))) (ite x?$526 (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$528 (bv #x00000000 32) (bv #x00000001 32)))))))) (ite x?$527 (bvadd (ite x?$526 (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653))) (ite x?$528 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$528 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite x?$526 (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$528 (bv #x00000000 32) (bv #x00000001 32))))) (ite x?$526 (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$528 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32))))) (ite x?$526 (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653))) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$527 (bvadd (ite x?$526 (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653))) (ite x?$528 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$528 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite x?$526 (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$528 (bv #x00000000 32) (bv #x00000001 32))))) (ite x?$526 (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$528 (bv #x00000000 32) (bv #x00000001 32)))))))) (ite x?$527 (bvadd (ite x?$526 (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653))) (ite x?$528 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$528 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite x?$526 (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$528 (bv #x00000000 32) (bv #x00000001 32))))) (ite x?$526 (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$528 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32))))) (bvadd (bv #x80000000 32) (bvneg (ite (bvsle (ite x?$527 (bvadd (ite x?$526 (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653))) (ite x?$528 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$528 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite x?$526 (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$528 (bv #x00000000 32) (bv #x00000001 32))))) (ite x?$526 (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$528 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)) (ite x?$527 (bvadd (ite x?$526 (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653))) (ite x?$528 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$528 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite x?$526 (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$528 (bv #x00000000 32) (bv #x00000001 32))))) (ite x?$526 (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$528 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32))))))) (bv #x00000001 32)))))
Ran synthesizer for 678 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-add
 (load
  (buffer bias 'int32)
  (ramp (sca-mul output.s0.x.x 16) 1 16)
  (aligned 16 0))
 (sca-broadcast
  (sca-add
   (sca-mul (sca-mul (int32_t t5829) (int32_t t5830)) (int32_t mat_a.extent.0))
   (sca-mul (int32_t t5830) (int32_t t6653)))
  16))
template:
  (vs-mpy-add
 ...
 (combine
  #<load-data>
  (broadcast
   ...
   (sca-add
    (sca-mul
     (sca-mul (int32_t t5829) (int32_t t5830))
     (int32_t mat_a.extent.0))
    (sca-mul (int32_t t5830) (int32_t t6653)))))
 (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
 #f
 #f
 #f
 'int32)
axioms:
  '(#t #t)
optimized-halide-expr:
  (vec-add #<abstr-halide-expr> #<abstr-halide-expr>)
optimized-template:
  (vs-mpy-add
 ...
 (combine #<abstr-expr> #<abstr-expr>)
 (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
 #f
 #f
 #f
 'int32)
optimized Halide 0:
  (int32_t (bvadd (app abstr-vals$658 0) (app abstr-vals$659 0)))
optimized x86 0:
  (int32_t
 (bvadd (ite c$531 (app abstr-vals$658 idx$530) (app abstr-vals$659 idx$530)) (ite c$533 (app abstr-vals$658 idx$532) (app abstr-vals$659 idx$532))))
Ran synthesizer for 81 ms
(model
 [idx$530 0]
 [c$531 #f]
 [idx$532 0]
 [c$533 #t])
(vec-add #<abstr-halide-expr> #<abstr-halide-expr>)
(vs-mpy-add
 ...
 (combine
  #<load-data>
  (broadcast
   ...
   (sca-add
    (sca-mul
     (sca-mul (int32_t t5829) (int32_t t5830))
     (int32_t mat_a.extent.0))
    (sca-mul (int32_t t5830) (int32_t t6653)))))
 (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
 #f
 #f
 #f
 'int32)
Ran bounds analysis for 38 ms
Ran bounds analysis for 32 ms
"Extended success?"
#t
(vs-mpy-add
 ...
 (combine
  #<load-data>
  (broadcast
   ...
   (sca-add
    (sca-mul
     (sca-mul (int32_t t5829) (int32_t t5830))
     (int32_t mat_a.extent.0))
    (sca-mul (int32_t t5830) (int32_t t6653)))))
 (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
 #f
 #f
 #f
 'int32)
"Building Expr:"
(vec-add
 (vec-mul
  (vec-cast
   (load
    (buffer column_sums_b 'uint32)
    (ramp
     (sca-add (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16) 16)
     1
     16)
    (aligned 16 0))
   'int32
   16)
  (sca-broadcast (int32_t t5829) 16))
 (vec-add
  (load
   (buffer bias 'int32)
   (ramp (sca-mul output.s0.x.x 16) 1 16)
   (aligned 16 0))
  (sca-broadcast
   (sca-add
    (sca-mul
     (sca-mul (int32_t t5829) (int32_t t5830))
     (int32_t mat_a.extent.0))
    (sca-mul (int32_t t5830) (int32_t t6653)))
   16)))
"Fold templates"
(list
 #<load-data>
 (vs-mpy-add
  ...
  #<load-data>
  (list
   (int32_t t5829)
   (union [x?$665 #(struct:int32_t t5829)] [(! x?$665) #(struct:int8_t
                                                         (bv #x01 8))]))
  #f
  #f
  #f
  'int32)
 (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f x?$663 #f 'int32)
 (vs-mpy-add
  ...
  (combine
   (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
   (union [x?$666 #(struct:vs-mpy-add
                    ...
                    #<load-data>
                    (#(struct:int32_t t5829))
                    #f
                    #f
                    #f
                    int32)] [(! x?$666) #(struct:vs-mpy-add
                                          ...
                                          #<combine:
                                           #<load-data>
                                           #(struct:broadcast
                                             ...
                                             #(struct:sca-add
                                               #(struct:sca-mul
                                                 #(struct:sca-mul
                                                   #(struct:int32_t t5829)
                                                   #(struct:int32_t t5830))
                                                 #(struct:int32_t
                                                   mat_a.extent.0))
                                               #(struct:sca-mul
                                                 #(struct:int32_t t5830)
                                                 #(struct:int32_t t6653))))>
                                          (#(struct:int8_t (bv #x01 8))
                                           #(struct:int8_t (bv #x01 8)))
                                          #f
                                          #f
                                          #f
                                          int32)]))
  (list (int32_t t5829) (int8_t (bv #x01 8)))
  #f
  #f
  #f
  'int32)
 #<load-data>
 (vs-mpy-add
  ...
  (combine
   #<load-data>
   (broadcast
    ...
    (sca-add
     (sca-mul
      (sca-mul (int32_t t5829) (int32_t t5830))
      (int32_t mat_a.extent.0))
     (sca-mul (int32_t t5830) (int32_t t6653)))))
  '(#(struct:int8_t (bv #x01 8))
    #(struct:int8_t (bv #x01 8))
    (union [x?$862 #(struct:int32_t t5829)] [(! x?$862) #(struct:int8_t
                                                          (bv #x01 8))]))
  #f
  #f
  #f
  'int32)
 (vs-mpy-add
  ...
  (combine
   #<load-data>
   (broadcast
    ...
    (sca-add
     (sca-mul
      (sca-mul (int32_t t5829) (int32_t t5830))
      (int32_t mat_a.extent.0))
     (sca-mul (int32_t t5830) (int32_t t6653)))))
  '(#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8)))
  #f
  x?$860
  #f
  'int32)
 (vs-mpy-add
  ...
  (combine
   (vs-mpy-add
    ...
    (combine
     #<load-data>
     (broadcast
      ...
      (sca-add
       (sca-mul
        (sca-mul (int32_t t5829) (int32_t t5830))
        (int32_t mat_a.extent.0))
       (sca-mul (int32_t t5830) (int32_t t6653)))))
    '(#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8)))
    #f
    #f
    #f
    'int32)
   (union [x?$863 #(struct:vs-mpy-add
                    ...
                    #<load-data>
                    (#(struct:int32_t t5829))
                    #f
                    #f
                    #f
                    int32)] [(! x?$863) #(struct:vs-mpy-add
                                          ...
                                          #<combine:
                                           #<load-data>
                                           #(struct:broadcast
                                             ...
                                             #(struct:sca-add
                                               #(struct:sca-mul
                                                 #(struct:sca-mul
                                                   #(struct:int32_t t5829)
                                                   #(struct:int32_t t5830))
                                                 #(struct:int32_t
                                                   mat_a.extent.0))
                                               #(struct:sca-mul
                                                 #(struct:int32_t t5830)
                                                 #(struct:int32_t t6653))))>
                                          (#(struct:int8_t (bv #x01 8))
                                           #(struct:int8_t (bv #x01 8)))
                                          #f
                                          #f
                                          #f
                                          int32)]))
  (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
  #f
  #f
  #f
  'int32))
here(#<load-data> #(struct:vs-mpy-add ... #<load-data> (#(struct:int32_t t5829) (union #:size 2 #:hash 412937920382)) #f #f #f int32) #(struct:vs-mpy-add ... #<load-data> (#(struct:int32_t t5829)) #f x?$663 #f int32) #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<load-data> (#(struct:int32_t t5829)) #f #f #f int32) (union #:size 2 #:hash 416078746247)> (#(struct:int32_t t5829) #(struct:int8_t (bv #x01 8))) #f #f #f int32) #<load-data> #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-add #(struct:sca-mul #(struct:sca-mul #(struct:int32_t t5829) #(struct:int32_t t5830)) #(struct:int32_t mat_a.extent.0)) #(struct:sca-mul #(struct:int32_t t5830) #(struct:int32_t t6653))))> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8)) (union #:size 2 #:hash 412889501236)) #f #f #f int32) #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-add #(struct:sca-mul #(struct:sca-mul #(struct:int32_t t5829) #(struct:int32_t t5830)) #(struct:int32_t mat_a.extent.0)) #(struct:sca-mul #(struct:int32_t t5830) #(struct:int32_t t6653))))> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f x?$860 #f int32) #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-add #(struct:sca-mul #(struct:sca-mul #(struct:int32_t t5829) #(struct:int32_t t5830)) #(struct:int32_t mat_a.extent.0)) #(struct:sca-mul #(struct:int32_t t5830) #(struct:int32_t t6653))))> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32) (union #:size 2 #:hash 416081988385)> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32))

"Replace templates"
'()
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-mul
  (vec-cast
   (load
    (buffer column_sums_b 'uint32)
    (ramp
     (sca-add (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16) 16)
     1
     16)
    (aligned 16 0))
   'int32
   16)
  (sca-broadcast (int32_t t5829) 16))
 (vec-add
  (load
   (buffer bias 'int32)
   (ramp (sca-mul output.s0.x.x 16) 1 16)
   (aligned 16 0))
  (sca-broadcast
   (sca-add
    (sca-mul
     (sca-mul (int32_t t5829) (int32_t t5830))
     (int32_t mat_a.extent.0))
    (sca-mul (int32_t t5830) (int32_t t6653)))
   16)))
template:
  #<load-data>
axioms:
  '()
optimized-halide-expr:
  (vec-add
 (vec-mul
  (vec-cast
   (load
    (buffer column_sums_b 'uint32)
    (ramp
     (sca-add (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16) 16)
     1
     16)
    (aligned 16 0))
   'int32
   16)
  (sca-broadcast (int32_t t5829) 16))
 (vec-add
  (load
   (buffer bias 'int32)
   (ramp (sca-mul output.s0.x.x 16) 1 16)
   (aligned 16 0))
  (sca-broadcast
   (sca-add
    (sca-mul
     (sca-mul (int32_t t5829) (int32_t t5830))
     (int32_t mat_a.extent.0))
    (sca-mul (int32_t t5830) (int32_t t6653)))
   16)))
optimized-template:
  #<load-data>
optimized Halide 0:
  (int32_t
 (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))))
optimized x86 0:
  (union [(= 0 idx$795) #(struct:int32_t (app bias (+ -16 output.s0.x.x)))] [(= 1 idx$795) #(struct:uint32_t
                                                                                           (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1)))))])
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-mul
  (vec-cast
   (load
    (buffer column_sums_b 'uint32)
    (ramp
     (sca-add (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16) 16)
     1
     16)
    (aligned 16 0))
   'int32
   16)
  (sca-broadcast (int32_t t5829) 16))
 (vec-add
  (load
   (buffer bias 'int32)
   (ramp (sca-mul output.s0.x.x 16) 1 16)
   (aligned 16 0))
  (sca-broadcast
   (sca-add
    (sca-mul
     (sca-mul (int32_t t5829) (int32_t t5830))
     (int32_t mat_a.extent.0))
    (sca-mul (int32_t t5830) (int32_t t6653)))
   16)))
template:
  #<load-data>
axioms:
  '()
optimized-halide-expr:
  (vec-add
 (vec-mul
  (vec-cast
   (load
    (buffer column_sums_b 'uint32)
    (ramp
     (sca-add (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16) 16)
     1
     16)
    (aligned 16 0))
   'int32
   16)
  (sca-broadcast (int32_t t5829) 16))
 (vec-add
  (load
   (buffer bias 'int32)
   (ramp (sca-mul output.s0.x.x 16) 1 16)
   (aligned 16 0))
  (sca-broadcast
   (sca-add
    (sca-mul
     (sca-mul (int32_t t5829) (int32_t t5830))
     (int32_t mat_a.extent.0))
    (sca-mul (int32_t t5830) (int32_t t6653)))
   16)))
optimized-template:
  #<load-data>
optimized Halide 0:
  (int32_t
 (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))))
optimized x86 0:
  (union [(= 0 idx$992) #(struct:int32_t (app bias (+ -16 output.s0.x.x)))] [(= 1 idx$992) #(struct:uint32_t
                                                                                           (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1)))))])
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-mul
  (vec-cast
   (load
    (buffer column_sums_b 'uint32)
    (ramp
     (sca-add (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16) 16)
     1
     16)
    (aligned 16 0))
   'int32
   16)
  (sca-broadcast (int32_t t5829) 16))
 (vec-add
  (load
   (buffer bias 'int32)
   (ramp (sca-mul output.s0.x.x 16) 1 16)
   (aligned 16 0))
  (sca-broadcast
   (sca-add
    (sca-mul
     (sca-mul (int32_t t5829) (int32_t t5830))
     (int32_t mat_a.extent.0))
    (sca-mul (int32_t t5830) (int32_t t6653)))
   16)))
template:
  (vs-mpy-add
 ...
 #<load-data>
 (list
  (int32_t t5829)
  (union [x?$665 #(struct:int32_t t5829)] [(! x?$665) #(struct:int8_t
                                                        (bv #x01 8))]))
 #f
 #f
 #f
 'int32)
axioms:
  '()
optimized-halide-expr:
  (vec-add
 (vec-mul
  (vec-cast
   (load
    (buffer column_sums_b 'uint32)
    (ramp
     (sca-add (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16) 16)
     1
     16)
    (aligned 16 0))
   'int32
   16)
  (sca-broadcast (int32_t t5829) 16))
 (vec-add
  (load
   (buffer bias 'int32)
   (ramp (sca-mul output.s0.x.x 16) 1 16)
   (aligned 16 0))
  (sca-broadcast
   (sca-add
    (sca-mul
     (sca-mul (int32_t t5829) (int32_t t5830))
     (int32_t mat_a.extent.0))
    (sca-mul (int32_t t5830) (int32_t t6653)))
   16)))
optimized-template:
  (vs-mpy-add
 ...
 #<load-data>
 (list
  (int32_t t5829)
  (union [x?$665 #(struct:int32_t t5829)] [(! x?$665) #(struct:int8_t
                                                        (bv #x01 8))]))
 #f
 #f
 #f
 'int32)
optimized Halide 0:
  (int32_t
 (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))))
optimized x86 0:
  (int32_t
 (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvmul (ite* (⊢ (&& (= 0 idx$1) (= 1 idx$1)) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (⊢ (|| (= 0 idx$1) (= 1 idx$1)) (ite* (⊢ (= 0 idx$1) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (⊢ (= 1 idx$1) (app bias (+ -16 output.s0.x.x)))))) (ite x?$665 t5829 (bv #x00000001 32)))))
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-mul
  (vec-cast
   (load
    (buffer column_sums_b 'uint32)
    (ramp
     (sca-add (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16) 16)
     1
     16)
    (aligned 16 0))
   'int32
   16)
  (sca-broadcast (int32_t t5829) 16))
 (vec-add
  (load
   (buffer bias 'int32)
   (ramp (sca-mul output.s0.x.x 16) 1 16)
   (aligned 16 0))
  (sca-broadcast
   (sca-add
    (sca-mul
     (sca-mul (int32_t t5829) (int32_t t5830))
     (int32_t mat_a.extent.0))
    (sca-mul (int32_t t5830) (int32_t t6653)))
   16)))
template:
  (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f x?$663 #f 'int32)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-add
 (vec-mul
  (vec-cast #<abstr-halide-expr> 'int32 16)
  (sca-broadcast (int32_t t5829) 16))
 (vec-add
  (load
   (buffer bias 'int32)
   (ramp (sca-mul output.s0.x.x 16) 1 16)
   (aligned 16 0))
  (sca-broadcast
   (sca-add
    (sca-mul
     (sca-mul (int32_t t5829) (int32_t t5830))
     (int32_t mat_a.extent.0))
    (sca-mul (int32_t t5830) (int32_t t6653)))
   16)))
optimized-template:
  (vs-mpy-add ... #<abstr-expr> (list (int32_t t5829)) #f x?$663 #f 'int32)
optimized Halide 0:
  (int32_t
 (bvadd (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653))) (bvmul t5829 (app abstr-vals$1056 0))))
optimized x86 0:
  (int32_t
 (bvadd (bvmul t5829 (app abstr-vals$1056 0)) (ite x?$663 (bv #x00000001 32) (bv #x00000000 32))))
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-mul
  (vec-cast
   (load
    (buffer column_sums_b 'uint32)
    (ramp
     (sca-add (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16) 16)
     1
     16)
    (aligned 16 0))
   'int32
   16)
  (sca-broadcast (int32_t t5829) 16))
 (vec-add
  (load
   (buffer bias 'int32)
   (ramp (sca-mul output.s0.x.x 16) 1 16)
   (aligned 16 0))
  (sca-broadcast
   (sca-add
    (sca-mul
     (sca-mul (int32_t t5829) (int32_t t5830))
     (int32_t mat_a.extent.0))
    (sca-mul (int32_t t5830) (int32_t t6653)))
   16)))
template:
  (vs-mpy-add
 ...
 (combine
  #<load-data>
  (broadcast
   ...
   (sca-add
    (sca-mul
     (sca-mul (int32_t t5829) (int32_t t5830))
     (int32_t mat_a.extent.0))
    (sca-mul (int32_t t5830) (int32_t t6653)))))
 (list
  (int8_t (bv #x01 8))
  (int8_t (bv #x01 8))
  (union [x?$862 #(struct:int32_t t5829)] [(! x?$862) #(struct:int8_t
                                                        (bv #x01 8))]))
 #f
 #f
 #f
 'int32)
axioms:
  '(#t #t)
optimized-halide-expr:
  (vec-add
 (vec-mul
  (vec-cast
   (load
    (buffer column_sums_b 'uint32)
    (ramp
     (sca-add (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16) 16)
     1
     16)
    (aligned 16 0))
   'int32
   16)
  (sca-broadcast (int32_t t5829) 16))
 (vec-add #<abstr-halide-expr> #<abstr-halide-expr>))
optimized-template:
  (vs-mpy-add
 ...
 (combine #<abstr-expr> #<abstr-expr>)
 (list
  (int8_t (bv #x01 8))
  (int8_t (bv #x01 8))
  (union [x?$862 #(struct:int32_t t5829)] [(! x?$862) #(struct:int8_t
                                                        (bv #x01 8))]))
 #f
 #f
 #f
 'int32)
optimized Halide 0:
  (int32_t
 (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app abstr-vals$1057 0) (app abstr-vals$1058 0))))
optimized x86 0:
  (int32_t
 (bvadd (bvadd (app abstr-vals$1057 0) (app abstr-vals$1058 0)) (bvmul (ite c$535 (app abstr-vals$1057 idx$534) (app abstr-vals$1058 idx$534)) (ite x?$862 t5829 (bv #x00000001 32)))))
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-mul
  (vec-cast
   (load
    (buffer column_sums_b 'uint32)
    (ramp
     (sca-add (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16) 16)
     1
     16)
    (aligned 16 0))
   'int32
   16)
  (sca-broadcast (int32_t t5829) 16))
 (vec-add
  (load
   (buffer bias 'int32)
   (ramp (sca-mul output.s0.x.x 16) 1 16)
   (aligned 16 0))
  (sca-broadcast
   (sca-add
    (sca-mul
     (sca-mul (int32_t t5829) (int32_t t5830))
     (int32_t mat_a.extent.0))
    (sca-mul (int32_t t5830) (int32_t t6653)))
   16)))
template:
  (vs-mpy-add
 ...
 (combine
  #<load-data>
  (broadcast
   ...
   (sca-add
    (sca-mul
     (sca-mul (int32_t t5829) (int32_t t5830))
     (int32_t mat_a.extent.0))
    (sca-mul (int32_t t5830) (int32_t t6653)))))
 (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
 #f
 x?$860
 #f
 'int32)
axioms:
  '(#t #t)
optimized-halide-expr:
  (vec-add
 (vec-mul
  (vec-cast
   (load
    (buffer column_sums_b 'uint32)
    (ramp
     (sca-add (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16) 16)
     1
     16)
    (aligned 16 0))
   'int32
   16)
  (sca-broadcast (int32_t t5829) 16))
 (vec-add #<abstr-halide-expr> #<abstr-halide-expr>))
optimized-template:
  (vs-mpy-add
 ...
 (combine #<abstr-expr> #<abstr-expr>)
 (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
 #f
 x?$860
 #f
 'int32)
optimized Halide 0:
  (int32_t
 (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app abstr-vals$1059 0) (app abstr-vals$1060 0))))
optimized x86 0:
  (int32_t
 (bvadd (app abstr-vals$1059 0) (bvadd (app abstr-vals$1060 0) (ite x?$860 (bv #x00000001 32) (bv #x00000000 32)))))
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-mul
  (vec-cast
   (load
    (buffer column_sums_b 'uint32)
    (ramp
     (sca-add (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16) 16)
     1
     16)
    (aligned 16 0))
   'int32
   16)
  (sca-broadcast (int32_t t5829) 16))
 (vec-add
  (load
   (buffer bias 'int32)
   (ramp (sca-mul output.s0.x.x 16) 1 16)
   (aligned 16 0))
  (sca-broadcast
   (sca-add
    (sca-mul
     (sca-mul (int32_t t5829) (int32_t t5830))
     (int32_t mat_a.extent.0))
    (sca-mul (int32_t t5830) (int32_t t6653)))
   16)))
template:
  (vs-mpy-add
 ...
 (combine
  (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
  (union [x?$666 #(struct:vs-mpy-add
                   ...
                   #<load-data>
                   (#(struct:int32_t t5829))
                   #f
                   #f
                   #f
                   int32)] [(! x?$666) #(struct:vs-mpy-add
                                         ...
                                         #<combine:
                                          #<load-data>
                                          #(struct:broadcast
                                            ...
                                            #(struct:sca-add
                                              #(struct:sca-mul
                                                #(struct:sca-mul
                                                  #(struct:int32_t t5829)
                                                  #(struct:int32_t t5830))
                                                #(struct:int32_t
                                                  mat_a.extent.0))
                                              #(struct:sca-mul
                                                #(struct:int32_t t5830)
                                                #(struct:int32_t t6653))))>
                                         (#(struct:int8_t (bv #x01 8))
                                          #(struct:int8_t (bv #x01 8)))
                                         #f
                                         #f
                                         #f
                                         int32)]))
 (list (int32_t t5829) (int8_t (bv #x01 8)))
 #f
 #f
 #f
 'int32)
axioms:
  (union [x?$666 (#t #t)] [(! x?$666) (#t)])
optimized-halide-expr:
  (vec-add
 #<abstr-halide-expr>
 (vec-add
  (load
   (buffer bias 'int32)
   (ramp (sca-mul output.s0.x.x 16) 1 16)
   (aligned 16 0))
  (sca-broadcast
   (sca-add
    (sca-mul
     (sca-mul (int32_t t5829) (int32_t t5830))
     (int32_t mat_a.extent.0))
    (sca-mul (int32_t t5830) (int32_t t6653)))
   16)))
optimized-template:
  (vs-mpy-add
 ...
 (combine
  #<abstr-expr>
  (union [x?$666 #<abstr-expr>] [(! x?$666) #(struct:vs-mpy-add
                                              ...
                                              #<combine:
                                               #<load-data>
                                               #(struct:broadcast
                                                 ...
                                                 #(struct:sca-add
                                                   #(struct:sca-mul
                                                     #(struct:sca-mul
                                                       #(struct:int32_t t5829)
                                                       #(struct:int32_t t5830))
                                                     #(struct:int32_t
                                                       mat_a.extent.0))
                                                   #(struct:sca-mul
                                                     #(struct:int32_t t5830)
                                                     #(struct:int32_t t6653))))>
                                              (#(struct:int8_t (bv #x01 8))
                                               #(struct:int8_t (bv #x01 8)))
                                              #f
                                              #f
                                              #f
                                              int32)]))
 (list (int32_t t5829) (int8_t (bv #x01 8)))
 #f
 #f
 #f
 'int32)
optimized Halide 0:
  (int32_t
 (bvadd (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653))) (app abstr-vals$1061 0)))
optimized x86 0:
  (int32_t
 (bvadd (bvmul t5829 (ite c$668 (app abstr-vals$1061 idx$667) (ite x?$666 (app abstr-vals$1061 idx$667) (bvadd (ite (|| (= 1 (* 2 idx$667)) (&& c$535 (= 2 (* 2 idx$667))) (&& c$537 (= 3 (* 2 idx$667))) (&& c$539 (= 4 (* 2 idx$667))) (&& c$541 (= 5 (* 2 idx$667))) (&& c$543 (= 6 (* 2 idx$667))) (&& c$545 (= 7 (* 2 idx$667))) (&& c$547 (= 8 (* 2 idx$667))) (&& c$549 (= 9 (* 2 idx$667))) (&& c$551 (= 10 (* 2 idx$667))) (&& c$553 (= 11 (* 2 idx$667))) (&& c$555 (= 12 (* 2 idx$667))) (&& c$557 (= 13 (* 2 idx$667))) (&& c$559 (= 14 (* 2 idx$667))) (&& c$561 (= 15 (* 2 idx$667))) (&& c$563 (= 16 (* 2 idx$667))) (&& c$565 (= 17 (* 2 idx$667))) (&& c$567 (= 18 (* 2 idx$667))) (&& c$569 (= 19 (* 2 idx$667))) (&& c$571 (= 20 (* 2 idx$667))) (&& c$573 (= 21 (* 2 idx$667))) (&& c$575 (= 22 (* 2 idx$667))) (&& c$577 (= 23 (* 2 idx$667))) (&& c$579 (= 24 (* 2 idx$667))) (&& c$581 (= 25 (* 2 idx$667))) (&& c$583 (= 26 (* 2 idx$667))) (&& c$585 (= 27 (* 2 idx$667))) (&& c$587 (= 28 (* 2 idx$667))) (&& c$589 (= 29 (* 2 idx$667))) (&& c$591 (= 30 (* 2 idx$667))) (&& c$593 (= 31 (* 2 idx$667))) (&& c$595 (= 32 (* 2 idx$667))) (&& c$597 (= 33 (* 2 idx$667))) (&& c$599 (= 34 (* 2 idx$667))) (&& c$601 (= 35 (* 2 idx$667))) (&& c$603 (= 36 (* 2 idx$667))) (&& c$605 (= 37 (* 2 idx$667))) (&& c$607 (= 38 (* 2 idx$667))) (&& c$609 (= 39 (* 2 idx$667))) (&& c$611 (= 40 (* 2 idx$667))) (&& c$613 (= 41 (* 2 idx$667))) (&& c$615 (= 42 (* 2 idx$667))) (&& c$617 (= 43 (* 2 idx$667))) (&& c$619 (= 44 (* 2 idx$667))) (&& c$621 (= 45 (* 2 idx$667))) (&& c$623 (= 46 (* 2 idx$667))) (&& c$625 (= 47 (* 2 idx$667))) (&& c$627 (= 48 (* 2 idx$667))) (&& c$629 (= 49 (* 2 idx$667))) (&& c$631 (= 50 (* 2 idx$667))) (&& c$633 (= 51 (* 2 idx$667))) (&& c$635 (= 52 (* 2 idx$667))) (&& c$637 (= 53 (* 2 idx$667))) (&& c$639 (= 54 (* 2 idx$667))) (&& c$641 (= 55 (* 2 idx$667))) (&& c$643 (= 56 (* 2 idx$667))) (&& c$645 (= 57 (* 2 idx$667))) (&& c$647 (= 58 (* 2 idx$667))) (&& c$649 (= 59 (* 2 idx$667))) (&& c$651 (= 60 (* 2 idx$667))) (&& c$653 (= 61 (* 2 idx$667))) (&& c$655 (= 62 (* 2 idx$667))) (&& c$657 (= 63 (* 2 idx$667)))) (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653))) (ite (|| (= 1 (+ 1 (* 2 idx$667))) (&& c$535 (= 2 (+ 1 (* 2 idx$667)))) (&& c$537 (= 3 (+ 1 (* 2 idx$667)))) (&& c$539 (= 4 (+ 1 (* 2 idx$667)))) (&& c$541 (= 5 (+ 1 (* 2 idx$667)))) (&& c$543 (= 6 (+ 1 (* 2 idx$667)))) (&& c$545 (= 7 (+ 1 (* 2 idx$667)))) (&& c$547 (= 8 (+ 1 (* 2 idx$667)))) (&& c$549 (= 9 (+ 1 (* 2 idx$667)))) (&& c$551 (= 10 (+ 1 (* 2 idx$667)))) (&& c$553 (= 11 (+ 1 (* 2 idx$667)))) (&& c$555 (= 12 (+ 1 (* 2 idx$667)))) (&& c$557 (= 13 (+ 1 (* 2 idx$667)))) (&& c$559 (= 14 (+ 1 (* 2 idx$667)))) (&& c$561 (= 15 (+ 1 (* 2 idx$667)))) (&& c$563 (= 16 (+ 1 (* 2 idx$667)))) (&& c$565 (= 17 (+ 1 (* 2 idx$667)))) (&& c$567 (= 18 (+ 1 (* 2 idx$667)))) (&& c$569 (= 19 (+ 1 (* 2 idx$667)))) (&& c$571 (= 20 (+ 1 (* 2 idx$667)))) (&& c$573 (= 21 (+ 1 (* 2 idx$667)))) (&& c$575 (= 22 (+ 1 (* 2 idx$667)))) (&& c$577 (= 23 (+ 1 (* 2 idx$667)))) (&& c$579 (= 24 (+ 1 (* 2 idx$667)))) (&& c$581 (= 25 (+ 1 (* 2 idx$667)))) (&& c$583 (= 26 (+ 1 (* 2 idx$667)))) (&& c$585 (= 27 (+ 1 (* 2 idx$667)))) (&& c$587 (= 28 (+ 1 (* 2 idx$667)))) (&& c$589 (= 29 (+ 1 (* 2 idx$667)))) (&& c$591 (= 30 (+ 1 (* 2 idx$667)))) (&& c$593 (= 31 (+ 1 (* 2 idx$667)))) (&& c$595 (= 32 (+ 1 (* 2 idx$667)))) (&& c$597 (= 33 (+ 1 (* 2 idx$667)))) (&& c$599 (= 34 (+ 1 (* 2 idx$667)))) (&& c$601 (= 35 (+ 1 (* 2 idx$667)))) (&& c$603 (= 36 (+ 1 (* 2 idx$667)))) (&& c$605 (= 37 (+ 1 (* 2 idx$667)))) (&& c$607 (= 38 (+ 1 (* 2 idx$667)))) (&& c$609 (= 39 (+ 1 (* 2 idx$667)))) (&& c$611 (= 40 (+ 1 (* 2 idx$667)))) (&& c$613 (= 41 (+ 1 (* 2 idx$667)))) (&& c$615 (= 42 (+ 1 (* 2 idx$667)))) (&& c$617 (= 43 (+ 1 (* 2 idx$667)))) (&& c$619 (= 44 (+ 1 (* 2 idx$667)))) (&& c$621 (= 45 (+ 1 (* 2 idx$667)))) (&& c$623 (= 46 (+ 1 (* 2 idx$667)))) (&& c$625 (= 47 (+ 1 (* 2 idx$667)))) (&& c$627 (= 48 (+ 1 (* 2 idx$667)))) (&& c$629 (= 49 (+ 1 (* 2 idx$667)))) (&& c$631 (= 50 (+ 1 (* 2 idx$667)))) (&& c$633 (= 51 (+ 1 (* 2 idx$667)))) (&& c$635 (= 52 (+ 1 (* 2 idx$667)))) (&& c$637 (= 53 (+ 1 (* 2 idx$667)))) (&& c$639 (= 54 (+ 1 (* 2 idx$667)))) (&& c$641 (= 55 (+ 1 (* 2 idx$667)))) (&& c$643 (= 56 (+ 1 (* 2 idx$667)))) (&& c$645 (= 57 (+ 1 (* 2 idx$667)))) (&& c$647 (= 58 (+ 1 (* 2 idx$667)))) (&& c$649 (= 59 (+ 1 (* 2 idx$667)))) (&& c$651 (= 60 (+ 1 (* 2 idx$667)))) (&& c$653 (= 61 (+ 1 (* 2 idx$667)))) (&& c$655 (= 62 (+ 1 (* 2 idx$667)))) (&& c$657 (= 63 (+ 1 (* 2 idx$667))))) (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653))))))) (ite c$670 (app abstr-vals$1061 idx$669) (ite x?$666 (app abstr-vals$1061 idx$669) (bvadd (ite (|| (= 1 (* 2 idx$669)) (&& c$535 (= 2 (* 2 idx$669))) (&& c$537 (= 3 (* 2 idx$669))) (&& c$539 (= 4 (* 2 idx$669))) (&& c$541 (= 5 (* 2 idx$669))) (&& c$543 (= 6 (* 2 idx$669))) (&& c$545 (= 7 (* 2 idx$669))) (&& c$547 (= 8 (* 2 idx$669))) (&& c$549 (= 9 (* 2 idx$669))) (&& c$551 (= 10 (* 2 idx$669))) (&& c$553 (= 11 (* 2 idx$669))) (&& c$555 (= 12 (* 2 idx$669))) (&& c$557 (= 13 (* 2 idx$669))) (&& c$559 (= 14 (* 2 idx$669))) (&& c$561 (= 15 (* 2 idx$669))) (&& c$563 (= 16 (* 2 idx$669))) (&& c$565 (= 17 (* 2 idx$669))) (&& c$567 (= 18 (* 2 idx$669))) (&& c$569 (= 19 (* 2 idx$669))) (&& c$571 (= 20 (* 2 idx$669))) (&& c$573 (= 21 (* 2 idx$669))) (&& c$575 (= 22 (* 2 idx$669))) (&& c$577 (= 23 (* 2 idx$669))) (&& c$579 (= 24 (* 2 idx$669))) (&& c$581 (= 25 (* 2 idx$669))) (&& c$583 (= 26 (* 2 idx$669))) (&& c$585 (= 27 (* 2 idx$669))) (&& c$587 (= 28 (* 2 idx$669))) (&& c$589 (= 29 (* 2 idx$669))) (&& c$591 (= 30 (* 2 idx$669))) (&& c$593 (= 31 (* 2 idx$669))) (&& c$595 (= 32 (* 2 idx$669))) (&& c$597 (= 33 (* 2 idx$669))) (&& c$599 (= 34 (* 2 idx$669))) (&& c$601 (= 35 (* 2 idx$669))) (&& c$603 (= 36 (* 2 idx$669))) (&& c$605 (= 37 (* 2 idx$669))) (&& c$607 (= 38 (* 2 idx$669))) (&& c$609 (= 39 (* 2 idx$669))) (&& c$611 (= 40 (* 2 idx$669))) (&& c$613 (= 41 (* 2 idx$669))) (&& c$615 (= 42 (* 2 idx$669))) (&& c$617 (= 43 (* 2 idx$669))) (&& c$619 (= 44 (* 2 idx$669))) (&& c$621 (= 45 (* 2 idx$669))) (&& c$623 (= 46 (* 2 idx$669))) (&& c$625 (= 47 (* 2 idx$669))) (&& c$627 (= 48 (* 2 idx$669))) (&& c$629 (= 49 (* 2 idx$669))) (&& c$631 (= 50 (* 2 idx$669))) (&& c$633 (= 51 (* 2 idx$669))) (&& c$635 (= 52 (* 2 idx$669))) (&& c$637 (= 53 (* 2 idx$669))) (&& c$639 (= 54 (* 2 idx$669))) (&& c$641 (= 55 (* 2 idx$669))) (&& c$643 (= 56 (* 2 idx$669))) (&& c$645 (= 57 (* 2 idx$669))) (&& c$647 (= 58 (* 2 idx$669))) (&& c$649 (= 59 (* 2 idx$669))) (&& c$651 (= 60 (* 2 idx$669))) (&& c$653 (= 61 (* 2 idx$669))) (&& c$655 (= 62 (* 2 idx$669))) (&& c$657 (= 63 (* 2 idx$669)))) (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653))) (ite (|| (= 1 (+ 1 (* 2 idx$669))) (&& c$535 (= 2 (+ 1 (* 2 idx$669)))) (&& c$537 (= 3 (+ 1 (* 2 idx$669)))) (&& c$539 (= 4 (+ 1 (* 2 idx$669)))) (&& c$541 (= 5 (+ 1 (* 2 idx$669)))) (&& c$543 (= 6 (+ 1 (* 2 idx$669)))) (&& c$545 (= 7 (+ 1 (* 2 idx$669)))) (&& c$547 (= 8 (+ 1 (* 2 idx$669)))) (&& c$549 (= 9 (+ 1 (* 2 idx$669)))) (&& c$551 (= 10 (+ 1 (* 2 idx$669)))) (&& c$553 (= 11 (+ 1 (* 2 idx$669)))) (&& c$555 (= 12 (+ 1 (* 2 idx$669)))) (&& c$557 (= 13 (+ 1 (* 2 idx$669)))) (&& c$559 (= 14 (+ 1 (* 2 idx$669)))) (&& c$561 (= 15 (+ 1 (* 2 idx$669)))) (&& c$563 (= 16 (+ 1 (* 2 idx$669)))) (&& c$565 (= 17 (+ 1 (* 2 idx$669)))) (&& c$567 (= 18 (+ 1 (* 2 idx$669)))) (&& c$569 (= 19 (+ 1 (* 2 idx$669)))) (&& c$571 (= 20 (+ 1 (* 2 idx$669)))) (&& c$573 (= 21 (+ 1 (* 2 idx$669)))) (&& c$575 (= 22 (+ 1 (* 2 idx$669)))) (&& c$577 (= 23 (+ 1 (* 2 idx$669)))) (&& c$579 (= 24 (+ 1 (* 2 idx$669)))) (&& c$581 (= 25 (+ 1 (* 2 idx$669)))) (&& c$583 (= 26 (+ 1 (* 2 idx$669)))) (&& c$585 (= 27 (+ 1 (* 2 idx$669)))) (&& c$587 (= 28 (+ 1 (* 2 idx$669)))) (&& c$589 (= 29 (+ 1 (* 2 idx$669)))) (&& c$591 (= 30 (+ 1 (* 2 idx$669)))) (&& c$593 (= 31 (+ 1 (* 2 idx$669)))) (&& c$595 (= 32 (+ 1 (* 2 idx$669)))) (&& c$597 (= 33 (+ 1 (* 2 idx$669)))) (&& c$599 (= 34 (+ 1 (* 2 idx$669)))) (&& c$601 (= 35 (+ 1 (* 2 idx$669)))) (&& c$603 (= 36 (+ 1 (* 2 idx$669)))) (&& c$605 (= 37 (+ 1 (* 2 idx$669)))) (&& c$607 (= 38 (+ 1 (* 2 idx$669)))) (&& c$609 (= 39 (+ 1 (* 2 idx$669)))) (&& c$611 (= 40 (+ 1 (* 2 idx$669)))) (&& c$613 (= 41 (+ 1 (* 2 idx$669)))) (&& c$615 (= 42 (+ 1 (* 2 idx$669)))) (&& c$617 (= 43 (+ 1 (* 2 idx$669)))) (&& c$619 (= 44 (+ 1 (* 2 idx$669)))) (&& c$621 (= 45 (+ 1 (* 2 idx$669)))) (&& c$623 (= 46 (+ 1 (* 2 idx$669)))) (&& c$625 (= 47 (+ 1 (* 2 idx$669)))) (&& c$627 (= 48 (+ 1 (* 2 idx$669)))) (&& c$629 (= 49 (+ 1 (* 2 idx$669)))) (&& c$631 (= 50 (+ 1 (* 2 idx$669)))) (&& c$633 (= 51 (+ 1 (* 2 idx$669)))) (&& c$635 (= 52 (+ 1 (* 2 idx$669)))) (&& c$637 (= 53 (+ 1 (* 2 idx$669)))) (&& c$639 (= 54 (+ 1 (* 2 idx$669)))) (&& c$641 (= 55 (+ 1 (* 2 idx$669)))) (&& c$643 (= 56 (+ 1 (* 2 idx$669)))) (&& c$645 (= 57 (+ 1 (* 2 idx$669)))) (&& c$647 (= 58 (+ 1 (* 2 idx$669)))) (&& c$649 (= 59 (+ 1 (* 2 idx$669)))) (&& c$651 (= 60 (+ 1 (* 2 idx$669)))) (&& c$653 (= 61 (+ 1 (* 2 idx$669)))) (&& c$655 (= 62 (+ 1 (* 2 idx$669)))) (&& c$657 (= 63 (+ 1 (* 2 idx$669))))) (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653))))))))
Ran synthesizer for 1651 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-mul
  (vec-cast
   (load
    (buffer column_sums_b 'uint32)
    (ramp
     (sca-add (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16) 16)
     1
     16)
    (aligned 16 0))
   'int32
   16)
  (sca-broadcast (int32_t t5829) 16))
 (vec-add
  (load
   (buffer bias 'int32)
   (ramp (sca-mul output.s0.x.x 16) 1 16)
   (aligned 16 0))
  (sca-broadcast
   (sca-add
    (sca-mul
     (sca-mul (int32_t t5829) (int32_t t5830))
     (int32_t mat_a.extent.0))
    (sca-mul (int32_t t5830) (int32_t t6653)))
   16)))
template:
  (vs-mpy-add
 ...
 (combine
  (vs-mpy-add
   ...
   (combine
    #<load-data>
    (broadcast
     ...
     (sca-add
      (sca-mul
       (sca-mul (int32_t t5829) (int32_t t5830))
       (int32_t mat_a.extent.0))
      (sca-mul (int32_t t5830) (int32_t t6653)))))
   (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
   #f
   #f
   #f
   'int32)
  (union [x?$863 #(struct:vs-mpy-add
                   ...
                   #<load-data>
                   (#(struct:int32_t t5829))
                   #f
                   #f
                   #f
                   int32)] [(! x?$863) #(struct:vs-mpy-add
                                         ...
                                         #<combine:
                                          #<load-data>
                                          #(struct:broadcast
                                            ...
                                            #(struct:sca-add
                                              #(struct:sca-mul
                                                #(struct:sca-mul
                                                  #(struct:int32_t t5829)
                                                  #(struct:int32_t t5830))
                                                #(struct:int32_t
                                                  mat_a.extent.0))
                                              #(struct:sca-mul
                                                #(struct:int32_t t5830)
                                                #(struct:int32_t t6653))))>
                                         (#(struct:int8_t (bv #x01 8))
                                          #(struct:int8_t (bv #x01 8)))
                                         #f
                                         #f
                                         #f
                                         int32)]))
 (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
 #f
 #f
 #f
 'int32)
axioms:
  (union [x?$863 (#t)] [(! x?$863) (#t #t)])
optimized-halide-expr:
  (vec-add
 (vec-mul
  (vec-cast
   (load
    (buffer column_sums_b 'uint32)
    (ramp
     (sca-add (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16) 16)
     1
     16)
    (aligned 16 0))
   'int32
   16)
  (sca-broadcast (int32_t t5829) 16))
 #<abstr-halide-expr>)
optimized-template:
  (vs-mpy-add
 ...
 (combine
  #<abstr-expr>
  (union [x?$863 #(struct:vs-mpy-add
                   ...
                   #<load-data>
                   (#(struct:int32_t t5829))
                   #f
                   #f
                   #f
                   int32)] [(! x?$863) #<abstr-expr>]))
 (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
 #f
 #f
 #f
 'int32)
optimized Halide 0:
  (int32_t
 (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (app abstr-vals$1062 0)))
optimized x86 0:
  (int32_t
 (bvadd (ite c$869 (app abstr-vals$1062 idx$868) (ite x?$863 (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (app abstr-vals$1062 idx$868))) (bvadd (ite c$865 (app abstr-vals$1062 idx$864) (ite x?$863 (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (app abstr-vals$1062 idx$864))) (ite c$867 (app abstr-vals$1062 idx$866) (ite x?$863 (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (app abstr-vals$1062 idx$866))))))
Ran synthesizer for 505 ms
(unsat)
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-mul
  (vec-cast
   (load
    (buffer column_sums_b 'uint32)
    (ramp
     (sca-add (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16) 16)
     1
     16)
    (aligned 16 0))
   'int32
   16)
  (sca-broadcast (int32_t t5829) 16))
 (vec-add
  (load
   (buffer bias 'int32)
   (ramp (sca-mul output.s0.x.x 16) 1 16)
   (aligned 16 0))
  (sca-broadcast
   (sca-add
    (sca-mul
     (sca-mul (int32_t t5829) (int32_t t5830))
     (int32_t mat_a.extent.0))
    (sca-mul (int32_t t5830) (int32_t t6653)))
   16)))
template:
  (vs-mpy-add
 ...
 (combine
  #<load-data>
  (combine
   #<load-data>
   (broadcast
    ...
    (sca-add
     (sca-mul
      (sca-mul (int32_t t5829) (int32_t t5830))
      (int32_t mat_a.extent.0))
     (sca-mul (int32_t t5830) (int32_t t6653))))))
 '((union [x?$1063 #(struct:int32_t t5829)] [(! x?$1063) #(struct:int8_t
                                                           (bv #x01 8))])
   #(struct:int32_t t5829))
 #f
 #f
 #f
 'int32)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-add
 (vec-mul
  (vec-cast #<abstr-halide-expr> 'int32 16)
  (sca-broadcast (int32_t t5829) 16))
 (vec-add
  (load
   (buffer bias 'int32)
   (ramp (sca-mul output.s0.x.x 16) 1 16)
   (aligned 16 0))
  (sca-broadcast
   (sca-add
    (sca-mul
     (sca-mul (int32_t t5829) (int32_t t5830))
     (int32_t mat_a.extent.0))
    (sca-mul (int32_t t5830) (int32_t t6653)))
   16)))
optimized-template:
  (vs-mpy-add
 ...
 (combine
  #<abstr-expr>
  (combine
   #<load-data>
   (broadcast
    ...
    (sca-add
     (sca-mul
      (sca-mul (int32_t t5829) (int32_t t5830))
      (int32_t mat_a.extent.0))
     (sca-mul (int32_t t5830) (int32_t t6653))))))
 '((union [x?$1063 #(struct:int32_t t5829)] [(! x?$1063) #(struct:int8_t
                                                           (bv #x01 8))])
   #(struct:int32_t t5829))
 #f
 #f
 #f
 'int32)
optimized Halide 0:
  (int32_t
 (bvadd (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653))) (bvmul t5829 (app abstr-vals$1328 0))))
optimized x86 0:
  (int32_t
 (bvadd (bvmul (ite c$1065 (app abstr-vals$1328 idx$1064) (ite (|| (= 1 idx$1064) (&& c$535 (= 2 idx$1064)) (&& c$537 (= 3 idx$1064)) (&& c$539 (= 4 idx$1064)) (&& c$541 (= 5 idx$1064)) (&& c$543 (= 6 idx$1064)) (&& c$545 (= 7 idx$1064)) (&& c$547 (= 8 idx$1064)) (&& c$549 (= 9 idx$1064)) (&& c$551 (= 10 idx$1064)) (&& c$553 (= 11 idx$1064)) (&& c$555 (= 12 idx$1064)) (&& c$557 (= 13 idx$1064)) (&& c$559 (= 14 idx$1064)) (&& c$561 (= 15 idx$1064)) (&& c$563 (= 16 idx$1064)) (&& c$565 (= 17 idx$1064)) (&& c$567 (= 18 idx$1064)) (&& c$569 (= 19 idx$1064)) (&& c$571 (= 20 idx$1064)) (&& c$573 (= 21 idx$1064)) (&& c$575 (= 22 idx$1064)) (&& c$577 (= 23 idx$1064)) (&& c$579 (= 24 idx$1064)) (&& c$581 (= 25 idx$1064)) (&& c$583 (= 26 idx$1064)) (&& c$585 (= 27 idx$1064)) (&& c$587 (= 28 idx$1064)) (&& c$589 (= 29 idx$1064)) (&& c$591 (= 30 idx$1064)) (&& c$593 (= 31 idx$1064)) (&& c$595 (= 32 idx$1064)) (&& c$597 (= 33 idx$1064)) (&& c$599 (= 34 idx$1064)) (&& c$601 (= 35 idx$1064)) (&& c$603 (= 36 idx$1064)) (&& c$605 (= 37 idx$1064)) (&& c$607 (= 38 idx$1064)) (&& c$609 (= 39 idx$1064)) (&& c$611 (= 40 idx$1064)) (&& c$613 (= 41 idx$1064)) (&& c$615 (= 42 idx$1064)) (&& c$617 (= 43 idx$1064)) (&& c$619 (= 44 idx$1064)) (&& c$621 (= 45 idx$1064)) (&& c$623 (= 46 idx$1064)) (&& c$625 (= 47 idx$1064)) (&& c$627 (= 48 idx$1064)) (&& c$629 (= 49 idx$1064)) (&& c$631 (= 50 idx$1064)) (&& c$633 (= 51 idx$1064)) (&& c$635 (= 52 idx$1064)) (&& c$637 (= 53 idx$1064)) (&& c$639 (= 54 idx$1064)) (&& c$641 (= 55 idx$1064)) (&& c$643 (= 56 idx$1064)) (&& c$645 (= 57 idx$1064)) (&& c$647 (= 58 idx$1064)) (&& c$649 (= 59 idx$1064)) (&& c$651 (= 60 idx$1064)) (&& c$653 (= 61 idx$1064)) (&& c$655 (= 62 idx$1064)) (&& c$657 (= 63 idx$1064))) (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (ite x?$1063 t5829 (bv #x00000001 32))) (bvmul t5829 (ite c$1067 (app abstr-vals$1328 idx$1066) (ite (|| (= 1 idx$1066) (&& c$535 (= 2 idx$1066)) (&& c$537 (= 3 idx$1066)) (&& c$539 (= 4 idx$1066)) (&& c$541 (= 5 idx$1066)) (&& c$543 (= 6 idx$1066)) (&& c$545 (= 7 idx$1066)) (&& c$547 (= 8 idx$1066)) (&& c$549 (= 9 idx$1066)) (&& c$551 (= 10 idx$1066)) (&& c$553 (= 11 idx$1066)) (&& c$555 (= 12 idx$1066)) (&& c$557 (= 13 idx$1066)) (&& c$559 (= 14 idx$1066)) (&& c$561 (= 15 idx$1066)) (&& c$563 (= 16 idx$1066)) (&& c$565 (= 17 idx$1066)) (&& c$567 (= 18 idx$1066)) (&& c$569 (= 19 idx$1066)) (&& c$571 (= 20 idx$1066)) (&& c$573 (= 21 idx$1066)) (&& c$575 (= 22 idx$1066)) (&& c$577 (= 23 idx$1066)) (&& c$579 (= 24 idx$1066)) (&& c$581 (= 25 idx$1066)) (&& c$583 (= 26 idx$1066)) (&& c$585 (= 27 idx$1066)) (&& c$587 (= 28 idx$1066)) (&& c$589 (= 29 idx$1066)) (&& c$591 (= 30 idx$1066)) (&& c$593 (= 31 idx$1066)) (&& c$595 (= 32 idx$1066)) (&& c$597 (= 33 idx$1066)) (&& c$599 (= 34 idx$1066)) (&& c$601 (= 35 idx$1066)) (&& c$603 (= 36 idx$1066)) (&& c$605 (= 37 idx$1066)) (&& c$607 (= 38 idx$1066)) (&& c$609 (= 39 idx$1066)) (&& c$611 (= 40 idx$1066)) (&& c$613 (= 41 idx$1066)) (&& c$615 (= 42 idx$1066)) (&& c$617 (= 43 idx$1066)) (&& c$619 (= 44 idx$1066)) (&& c$621 (= 45 idx$1066)) (&& c$623 (= 46 idx$1066)) (&& c$625 (= 47 idx$1066)) (&& c$627 (= 48 idx$1066)) (&& c$629 (= 49 idx$1066)) (&& c$631 (= 50 idx$1066)) (&& c$633 (= 51 idx$1066)) (&& c$635 (= 52 idx$1066)) (&& c$637 (= 53 idx$1066)) (&& c$639 (= 54 idx$1066)) (&& c$641 (= 55 idx$1066)) (&& c$643 (= 56 idx$1066)) (&& c$645 (= 57 idx$1066)) (&& c$647 (= 58 idx$1066)) (&& c$649 (= 59 idx$1066)) (&& c$651 (= 60 idx$1066)) (&& c$653 (= 61 idx$1066)) (&& c$655 (= 62 idx$1066)) (&& c$657 (= 63 idx$1066))) (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))))))
Ran synthesizer for 1673 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-mul
  (vec-cast
   (load
    (buffer column_sums_b 'uint32)
    (ramp
     (sca-add (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16) 16)
     1
     16)
    (aligned 16 0))
   'int32
   16)
  (sca-broadcast (int32_t t5829) 16))
 (vec-add
  (load
   (buffer bias 'int32)
   (ramp (sca-mul output.s0.x.x 16) 1 16)
   (aligned 16 0))
  (sca-broadcast
   (sca-add
    (sca-mul
     (sca-mul (int32_t t5829) (int32_t t5830))
     (int32_t mat_a.extent.0))
    (sca-mul (int32_t t5830) (int32_t t6653)))
   16)))
template:
  (vs-mpy-add
 ...
 (union [x?$1196 #(struct:vs-mpy-add
                   ...
                   #<load-data>
                   (#(struct:int32_t t5829))
                   #f
                   #f
                   #f
                   int32)] [(! x?$1196) #(struct:vs-mpy-add
                                          ...
                                          #<combine:
                                           #<load-data>
                                           #(struct:broadcast
                                             ...
                                             #(struct:sca-add
                                               #(struct:sca-mul
                                                 #(struct:sca-mul
                                                   #(struct:int32_t t5829)
                                                   #(struct:int32_t t5830))
                                                 #(struct:int32_t
                                                   mat_a.extent.0))
                                               #(struct:sca-mul
                                                 #(struct:int32_t t5830)
                                                 #(struct:int32_t t6653))))>
                                          (#(struct:int8_t (bv #x01 8))
                                           #(struct:int8_t (bv #x01 8)))
                                          #f
                                          #f
                                          #f
                                          int32)])
 (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
 (! x?$1197)
 (! x?$1198)
 (! x?$1199)
 'int32)
axioms:
  '()
optimized-halide-expr:
  (vec-add
 (vec-mul
  (vec-cast
   (load
    (buffer column_sums_b 'uint32)
    (ramp
     (sca-add (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16) 16)
     1
     16)
    (aligned 16 0))
   'int32
   16)
  (sca-broadcast (int32_t t5829) 16))
 (vec-add
  (load
   (buffer bias 'int32)
   (ramp (sca-mul output.s0.x.x 16) 1 16)
   (aligned 16 0))
  (sca-broadcast
   (sca-add
    (sca-mul
     (sca-mul (int32_t t5829) (int32_t t5830))
     (int32_t mat_a.extent.0))
    (sca-mul (int32_t t5830) (int32_t t6653)))
   16)))
optimized-template:
  (vs-mpy-add
 ...
 (union [x?$1196 #(struct:vs-mpy-add
                   ...
                   #<load-data>
                   (#(struct:int32_t t5829))
                   #f
                   #f
                   #f
                   int32)] [(! x?$1196) #(struct:vs-mpy-add
                                          ...
                                          #<combine:
                                           #<load-data>
                                           #(struct:broadcast
                                             ...
                                             #(struct:sca-add
                                               #(struct:sca-mul
                                                 #(struct:sca-mul
                                                   #(struct:int32_t t5829)
                                                   #(struct:int32_t t5830))
                                                 #(struct:int32_t
                                                   mat_a.extent.0))
                                               #(struct:sca-mul
                                                 #(struct:int32_t t5830)
                                                 #(struct:int32_t t6653))))>
                                          (#(struct:int8_t (bv #x01 8))
                                           #(struct:int8_t (bv #x01 8)))
                                          #f
                                          #f
                                          #f
                                          int32)])
 (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
 (! x?$1197)
 (! x?$1198)
 (! x?$1199)
 'int32)
optimized Halide 0:
  (int32_t
 (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))))
optimized x86 0:
  (int32_t
 (ite* (⊢ (&& x?$1199 (! (&& (! x?$1197) (! x?$1199)))) (ite x?$1197 (bvadd (ite x?$1196 (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (ite c$535 (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653))) (ite c$537 (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653))))) (ite x?$1197 (bvadd (ite x?$1196 (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (ite x?$1198 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1198 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite x?$1196 (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1198 (bv #x00000000 32) (bv #x00000001 32))))) (ite x?$1196 (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1198 (bv #x00000000 32) (bv #x00000001 32)))))))) (bvadd (ite x?$1197 (bvadd (ite x?$1196 (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (ite x?$1198 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1198 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite x?$1196 (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1198 (bv #x00000000 32) (bv #x00000001 32))))) (ite x?$1196 (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1198 (bv #x00000000 32) (bv #x00000001 32))))))) (ite (bvsle (bvadd (bv #x80000000 32) (bvneg (ite (bvsle (ite x?$1197 (bvadd (ite x?$1196 (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (ite x?$1198 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1198 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite x?$1196 (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1198 (bv #x00000000 32) (bv #x00000001 32))))) (ite x?$1196 (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1198 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)) (ite x?$1197 (bvadd (ite x?$1196 (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (ite x?$1198 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1198 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite x?$1196 (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1198 (bv #x00000000 32) (bv #x00000001 32))))) (ite x?$1196 (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1198 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)))) (ite (bvsle (ite x?$1196 (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (ite c$535 (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653))) (ite c$537 (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653))))) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$1197 (bvadd (ite x?$1196 (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (ite x?$1198 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1198 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite x?$1196 (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1198 (bv #x00000000 32) (bv #x00000001 32))))) (ite x?$1196 (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1198 (bv #x00000000 32) (bv #x00000001 32)))))))) (ite x?$1197 (bvadd (ite x?$1196 (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (ite x?$1198 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1198 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite x?$1196 (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1198 (bv #x00000000 32) (bv #x00000001 32))))) (ite x?$1196 (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1198 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32))))) (ite x?$1196 (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (ite c$535 (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653))) (ite c$537 (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653))))) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$1197 (bvadd (ite x?$1196 (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (ite x?$1198 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1198 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite x?$1196 (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1198 (bv #x00000000 32) (bv #x00000001 32))))) (ite x?$1196 (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1198 (bv #x00000000 32) (bv #x00000001 32)))))))) (ite x?$1197 (bvadd (ite x?$1196 (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (ite x?$1198 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1198 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite x?$1196 (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1198 (bv #x00000000 32) (bv #x00000001 32))))) (ite x?$1196 (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1198 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)))))) (ite (bvsle (ite x?$1196 (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (ite c$535 (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653))) (ite c$537 (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653))))) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$1197 (bvadd (ite x?$1196 (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (ite x?$1198 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1198 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite x?$1196 (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1198 (bv #x00000000 32) (bv #x00000001 32))))) (ite x?$1196 (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1198 (bv #x00000000 32) (bv #x00000001 32)))))))) (ite x?$1197 (bvadd (ite x?$1196 (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (ite x?$1198 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1198 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite x?$1196 (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1198 (bv #x00000000 32) (bv #x00000001 32))))) (ite x?$1196 (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1198 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32))))) (ite x?$1196 (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (ite c$535 (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653))) (ite c$537 (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653))))) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$1197 (bvadd (ite x?$1196 (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (ite x?$1198 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1198 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite x?$1196 (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1198 (bv #x00000000 32) (bv #x00000001 32))))) (ite x?$1196 (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1198 (bv #x00000000 32) (bv #x00000001 32)))))))) (ite x?$1197 (bvadd (ite x?$1196 (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (ite x?$1198 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1198 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite x?$1196 (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1198 (bv #x00000000 32) (bv #x00000001 32))))) (ite x?$1196 (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1198 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32))))) (bvadd (bv #x80000000 32) (bvneg (ite (bvsle (ite x?$1197 (bvadd (ite x?$1196 (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (ite x?$1198 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1198 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite x?$1196 (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1198 (bv #x00000000 32) (bv #x00000001 32))))) (ite x?$1196 (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1198 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)) (ite x?$1197 (bvadd (ite x?$1196 (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (ite x?$1198 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1198 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite x?$1196 (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1198 (bv #x00000000 32) (bv #x00000001 32))))) (ite x?$1196 (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1198 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)))))))) (⊢ (|| (&& (! x?$1197) (! x?$1199)) (&& (! x?$1199) (! (&& (! x?$1197) (! x?$1199))))) (bvashr (ite x?$1197 (bvadd (ite x?$1196 (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (ite c$535 (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653))) (ite c$537 (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653))))) (ite x?$1197 (bvadd (ite x?$1196 (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (ite x?$1198 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1198 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite x?$1196 (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1198 (bv #x00000000 32) (bv #x00000001 32))))) (ite x?$1196 (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1198 (bv #x00000000 32) (bv #x00000001 32)))))))) (bvadd (ite x?$1197 (bvadd (ite x?$1196 (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (ite x?$1198 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1198 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite x?$1196 (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1198 (bv #x00000000 32) (bv #x00000001 32))))) (ite x?$1196 (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1198 (bv #x00000000 32) (bv #x00000001 32))))))) (ite (bvsle (bvadd (bv #x80000000 32) (bvneg (ite (bvsle (ite x?$1197 (bvadd (ite x?$1196 (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (ite x?$1198 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1198 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite x?$1196 (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1198 (bv #x00000000 32) (bv #x00000001 32))))) (ite x?$1196 (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1198 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)) (ite x?$1197 (bvadd (ite x?$1196 (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (ite x?$1198 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1198 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite x?$1196 (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1198 (bv #x00000000 32) (bv #x00000001 32))))) (ite x?$1196 (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1198 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)))) (ite (bvsle (ite x?$1196 (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (ite c$535 (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653))) (ite c$537 (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653))))) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$1197 (bvadd (ite x?$1196 (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (ite x?$1198 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1198 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite x?$1196 (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1198 (bv #x00000000 32) (bv #x00000001 32))))) (ite x?$1196 (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1198 (bv #x00000000 32) (bv #x00000001 32)))))))) (ite x?$1197 (bvadd (ite x?$1196 (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (ite x?$1198 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1198 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite x?$1196 (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1198 (bv #x00000000 32) (bv #x00000001 32))))) (ite x?$1196 (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1198 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32))))) (ite x?$1196 (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (ite c$535 (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653))) (ite c$537 (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653))))) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$1197 (bvadd (ite x?$1196 (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (ite x?$1198 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1198 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite x?$1196 (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1198 (bv #x00000000 32) (bv #x00000001 32))))) (ite x?$1196 (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1198 (bv #x00000000 32) (bv #x00000001 32)))))))) (ite x?$1197 (bvadd (ite x?$1196 (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (ite x?$1198 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1198 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite x?$1196 (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1198 (bv #x00000000 32) (bv #x00000001 32))))) (ite x?$1196 (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1198 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)))))) (ite (bvsle (ite x?$1196 (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (ite c$535 (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653))) (ite c$537 (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653))))) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$1197 (bvadd (ite x?$1196 (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (ite x?$1198 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1198 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite x?$1196 (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1198 (bv #x00000000 32) (bv #x00000001 32))))) (ite x?$1196 (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1198 (bv #x00000000 32) (bv #x00000001 32)))))))) (ite x?$1197 (bvadd (ite x?$1196 (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (ite x?$1198 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1198 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite x?$1196 (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1198 (bv #x00000000 32) (bv #x00000001 32))))) (ite x?$1196 (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1198 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32))))) (ite x?$1196 (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (ite c$535 (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653))) (ite c$537 (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653))))) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$1197 (bvadd (ite x?$1196 (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (ite x?$1198 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1198 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite x?$1196 (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1198 (bv #x00000000 32) (bv #x00000001 32))))) (ite x?$1196 (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1198 (bv #x00000000 32) (bv #x00000001 32)))))))) (ite x?$1197 (bvadd (ite x?$1196 (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (ite x?$1198 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1198 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite x?$1196 (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1198 (bv #x00000000 32) (bv #x00000001 32))))) (ite x?$1196 (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1198 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32))))) (bvadd (bv #x80000000 32) (bvneg (ite (bvsle (ite x?$1197 (bvadd (ite x?$1196 (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (ite x?$1198 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1198 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite x?$1196 (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1198 (bv #x00000000 32) (bv #x00000001 32))))) (ite x?$1196 (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1198 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)) (ite x?$1197 (bvadd (ite x?$1196 (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (ite x?$1198 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1198 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite x?$1196 (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1198 (bv #x00000000 32) (bv #x00000001 32))))) (ite x?$1196 (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1198 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32))))))) (bv #x00000001 32)))))
Ran synthesizer for 1422 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-mul
  (vec-cast
   (load
    (buffer column_sums_b 'uint32)
    (ramp
     (sca-add (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16) 16)
     1
     16)
    (aligned 16 0))
   'int32
   16)
  (sca-broadcast (int32_t t5829) 16))
 (vec-add
  (load
   (buffer bias 'int32)
   (ramp (sca-mul output.s0.x.x 16) 1 16)
   (aligned 16 0))
  (sca-broadcast
   (sca-add
    (sca-mul
     (sca-mul (int32_t t5829) (int32_t t5830))
     (int32_t mat_a.extent.0))
    (sca-mul (int32_t t5830) (int32_t t6653)))
   16)))
template:
  (vs-mpy-add
 ...
 (combine
  (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
  (vs-mpy-add
   ...
   (combine
    #<load-data>
    (broadcast
     ...
     (sca-add
      (sca-mul
       (sca-mul (int32_t t5829) (int32_t t5830))
       (int32_t mat_a.extent.0))
      (sca-mul (int32_t t5830) (int32_t t6653)))))
   (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
   #f
   #f
   #f
   'int32))
 (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
 #f
 #f
 #f
 'int32)
axioms:
  '(#t #t)
optimized-halide-expr:
  (vec-add #<abstr-halide-expr> #<abstr-halide-expr>)
optimized-template:
  (vs-mpy-add
 ...
 (combine #<abstr-expr> #<abstr-expr>)
 (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
 #f
 #f
 #f
 'int32)
optimized Halide 0:
  (int32_t (bvadd (app abstr-vals$1329 0) (app abstr-vals$1330 0)))
optimized x86 0:
  (int32_t
 (bvadd (ite c$1201 (app abstr-vals$1329 idx$1200) (app abstr-vals$1330 idx$1200)) (ite c$1203 (app abstr-vals$1329 idx$1202) (app abstr-vals$1330 idx$1202))))
Ran synthesizer for 94 ms
(model
 [idx$1200 0]
 [c$1201 #f]
 [idx$1202 0]
 [c$1203 #t])
(vec-add #<abstr-halide-expr> #<abstr-halide-expr>)
(vs-mpy-add
 ...
 (combine
  (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
  (vs-mpy-add
   ...
   (combine
    #<load-data>
    (broadcast
     ...
     (sca-add
      (sca-mul
       (sca-mul (int32_t t5829) (int32_t t5830))
       (int32_t mat_a.extent.0))
      (sca-mul (int32_t t5830) (int32_t t6653)))))
   (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
   #f
   #f
   #f
   'int32))
 (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
 #f
 #f
 #f
 'int32)
Ran bounds analysis for 46 ms
Ran bounds analysis for 36 ms
"Extended success?"
#t
(vs-mpy-add
 ...
 (combine
  (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
  (vs-mpy-add
   ...
   (combine
    #<load-data>
    (broadcast
     ...
     (sca-add
      (sca-mul
       (sca-mul (int32_t t5829) (int32_t t5830))
       (int32_t mat_a.extent.0))
      (sca-mul (int32_t t5830) (int32_t t6653)))))
   (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
   #f
   #f
   #f
   'int32))
 (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
 #f
 #f
 #f
 'int32)
"Building Expr:"
(load
 (buffer multiplied_no_offsets 'uint32)
 (ramp
  (sca-add (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121)) 4)
  1
  16)
 (aligned 4 0))
"Fold templates"
'()
here()

"Replace templates"
'()
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (load
 (buffer multiplied_no_offsets 'uint32)
 (ramp
  (sca-add (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121)) 4)
  1
  16)
 (aligned 4 0))
template:
  #<load-data>
axioms:
  '()
optimized-halide-expr:
  (load
 (buffer multiplied_no_offsets 'uint32)
 (ramp
  (sca-add (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121)) 4)
  1
  16)
 (aligned 4 0))
optimized-template:
  #<load-data>
optimized Halide 0:
  (uint32_t
 (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4)))))))
optimized x86 0:
  (uint32_t
 (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4)))))))
Ran synthesizer for 24 ms
(model
 [idx$1333 0])
(load
 (buffer multiplied_no_offsets 'uint32)
 (ramp
  (sca-add (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121)) 4)
  1
  16)
 (aligned 4 0))
#<load-data>
Ran bounds analysis for 40 ms
Ran bounds analysis for 33 ms
"Extended success?"
#t
#<load-data>
"Building Expr:"
(vec-cast
 (load
  (buffer multiplied_no_offsets 'uint32)
  (ramp
   (sca-add (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121)) 4)
   1
   16)
  (aligned 4 0))
 'int32
 16)
"Fold templates"
'(#<load-data>)
here(#<load-data>)

"Replace templates"
'()
run-x86-synthesizer
halide-expr:
  (vec-cast
 (load
  (buffer multiplied_no_offsets 'uint32)
  (ramp
   (sca-add (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121)) 4)
   1
   16)
  (aligned 4 0))
 'int32
 16)
template:
  #<load-data>
axioms:
  '()
optimized-halide-expr:
  (vec-cast
 (load
  (buffer multiplied_no_offsets 'uint32)
  (ramp
   (sca-add (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121)) 4)
   1
   16)
  (aligned 4 0))
 'int32
 16)
optimized-template:
  #<load-data>
optimized Halide 0:
  (int32_t
 (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4)))))))
optimized x86 0:
  (uint32_t
 (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4)))))))
Ran synthesizer for 1 ms
(unsat)
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (vec-cast
 (load
  (buffer multiplied_no_offsets 'uint32)
  (ramp
   (sca-add (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121)) 4)
   1
   16)
  (aligned 4 0))
 'int32
 16)
template:
  (cast ... #<load-data> 'int32 #f)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-cast #<abstr-halide-expr> 'int32 16)
optimized-template:
  (cast ... #<abstr-expr> 'int32 #f)
optimized Halide 0:
  (int32_t (app abstr-vals$1462 0))
optimized x86 0:
  (int32_t (app abstr-vals$1462 0))
Ran synthesizer for 21 ms
(model)
(vec-cast #<abstr-halide-expr> 'int32 16)
(cast ... #<load-data> 'int32 #f)
Ran bounds analysis for 41 ms
Ran bounds analysis for 32 ms
"Extended success?"
#t
(cast ... #<load-data> 'int32 #f)
"Building Expr:"
(vec-add
 (vec-add
  (vec-mul
   (vec-cast
    (load
     (buffer column_sums_b 'uint32)
     (ramp
      (sca-add (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16) 16)
      1
      16)
     (aligned 16 0))
    'int32
    16)
   (sca-broadcast (int32_t t5829) 16))
  (vec-add
   (load
    (buffer bias 'int32)
    (ramp (sca-mul output.s0.x.x 16) 1 16)
    (aligned 16 0))
   (sca-broadcast
    (sca-add
     (sca-mul
      (sca-mul (int32_t t5829) (int32_t t5830))
      (int32_t mat_a.extent.0))
     (sca-mul (int32_t t5830) (int32_t t6653)))
    16)))
 (vec-cast
  (load
   (buffer multiplied_no_offsets 'uint32)
   (ramp
    (sca-add (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121)) 4)
    1
    16)
   (aligned 4 0))
  'int32
  16))
"Fold templates"
(list
 (vs-mpy-add
  ...
  #<load-data>
  (list
   (int32_t t5829)
   (union [x?$1600 #(struct:int32_t t5829)] [(! x?$1600) #(struct:int8_t
                                                           (bv #x01 8))]))
  #f
  #f
  #f
  'int32)
 (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f x?$1598 #f 'int32)
 (vs-mpy-add
  ...
  (combine
   (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
   (union [x?$1601 #(struct:vs-mpy-add
                     ...
                     #<combine:
                      #(struct:vs-mpy-add
                        ...
                        #<load-data>
                        (#(struct:int32_t t5829))
                        #f
                        #f
                        #f
                        int32)
                      #(struct:vs-mpy-add
                        ...
                        #<combine:
                         #<load-data>
                         #(struct:broadcast
                           ...
                           #(struct:sca-add
                             #(struct:sca-mul
                               #(struct:sca-mul
                                 #(struct:int32_t t5829)
                                 #(struct:int32_t t5830))
                               #(struct:int32_t mat_a.extent.0))
                             #(struct:sca-mul
                               #(struct:int32_t t5830)
                               #(struct:int32_t t6653))))>
                        (#(struct:int8_t (bv #x01 8))
                         #(struct:int8_t (bv #x01 8)))
                        #f
                        #f
                        #f
                        int32)>
                     (#(struct:int8_t (bv #x01 8))
                      #(struct:int8_t (bv #x01 8)))
                     #f
                     #f
                     #f
                     int32)] [(! x?$1601) #(struct:cast
                                            ...
                                            #<load-data>
                                            int32
                                            #f)]))
  (list (int32_t t5829) (int8_t (bv #x01 8)))
  #f
  #f
  #f
  'int32)
 (vs-mpy-add
  ...
  (combine
   #<load-data>
   (broadcast
    ...
    (sca-add
     (sca-mul
      (sca-mul (int32_t t5829) (int32_t t5830))
      (int32_t mat_a.extent.0))
     (sca-mul (int32_t t5830) (int32_t t6653)))))
  '(#(struct:int8_t (bv #x01 8))
    #(struct:int8_t (bv #x01 8))
    (union [x?$1733 #(struct:int32_t t5829)] [(! x?$1733) #(struct:int8_t
                                                            (bv #x01 8))]))
  #f
  #f
  #f
  'int32)
 (vs-mpy-add
  ...
  (combine
   #<load-data>
   (broadcast
    ...
    (sca-add
     (sca-mul
      (sca-mul (int32_t t5829) (int32_t t5830))
      (int32_t mat_a.extent.0))
     (sca-mul (int32_t t5830) (int32_t t6653)))))
  '(#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8)))
  #f
  x?$1731
  #f
  'int32)
 (vs-mpy-add
  ...
  (combine
   (vs-mpy-add
    ...
    (combine
     #<load-data>
     (broadcast
      ...
      (sca-add
       (sca-mul
        (sca-mul (int32_t t5829) (int32_t t5830))
        (int32_t mat_a.extent.0))
       (sca-mul (int32_t t5830) (int32_t t6653)))))
    '(#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8)))
    #f
    #f
    #f
    'int32)
   (union [x?$1734 #(struct:vs-mpy-add
                     ...
                     #<combine:
                      #(struct:vs-mpy-add
                        ...
                        #<load-data>
                        (#(struct:int32_t t5829))
                        #f
                        #f
                        #f
                        int32)
                      #(struct:vs-mpy-add
                        ...
                        #<combine:
                         #<load-data>
                         #(struct:broadcast
                           ...
                           #(struct:sca-add
                             #(struct:sca-mul
                               #(struct:sca-mul
                                 #(struct:int32_t t5829)
                                 #(struct:int32_t t5830))
                               #(struct:int32_t mat_a.extent.0))
                             #(struct:sca-mul
                               #(struct:int32_t t5830)
                               #(struct:int32_t t6653))))>
                        (#(struct:int8_t (bv #x01 8))
                         #(struct:int8_t (bv #x01 8)))
                        #f
                        #f
                        #f
                        int32)>
                     (#(struct:int8_t (bv #x01 8))
                      #(struct:int8_t (bv #x01 8)))
                     #f
                     #f
                     #f
                     int32)] [(! x?$1734) #(struct:cast
                                            ...
                                            #<load-data>
                                            int32
                                            #f)]))
  (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
  #f
  #f
  #f
  'int32)
 (vs-mpy-add
  ...
  (combine
   (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
   (vs-mpy-add
    ...
    (combine
     #<load-data>
     (broadcast
      ...
      (sca-add
       (sca-mul
        (sca-mul (int32_t t5829) (int32_t t5830))
        (int32_t mat_a.extent.0))
       (sca-mul (int32_t t5830) (int32_t t6653)))))
    '(#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8)))
    #f
    #f
    #f
    'int32))
  '(#(struct:int8_t (bv #x01 8))
    #(struct:int8_t (bv #x01 8))
    (union [x?$1467 #(struct:int32_t t5829)] [(! x?$1467) #(struct:int8_t
                                                            (bv #x01 8))]))
  #f
  #f
  #f
  'int32)
 (vs-mpy-add
  ...
  (combine
   (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
   (vs-mpy-add
    ...
    (combine
     #<load-data>
     (broadcast
      ...
      (sca-add
       (sca-mul
        (sca-mul (int32_t t5829) (int32_t t5830))
        (int32_t mat_a.extent.0))
       (sca-mul (int32_t t5830) (int32_t t6653)))))
    '(#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8)))
    #f
    #f
    #f
    'int32))
  '(#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8)))
  #f
  x?$1465
  #f
  'int32)
 (vs-mpy-add
  ...
  (combine
   (vs-mpy-add
    ...
    (combine
     (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
     (vs-mpy-add
      ...
      (combine
       #<load-data>
       (broadcast
        ...
        (sca-add
         (sca-mul
          (sca-mul (int32_t t5829) (int32_t t5830))
          (int32_t mat_a.extent.0))
         (sca-mul (int32_t t5830) (int32_t t6653)))))
      '(#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8)))
      #f
      #f
      #f
      'int32))
    '(#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8)))
    #f
    #f
    #f
    'int32)
   (union [x?$1468 #(struct:vs-mpy-add
                     ...
                     #<combine:
                      #(struct:vs-mpy-add
                        ...
                        #<load-data>
                        (#(struct:int32_t t5829))
                        #f
                        #f
                        #f
                        int32)
                      #(struct:vs-mpy-add
                        ...
                        #<combine:
                         #<load-data>
                         #(struct:broadcast
                           ...
                           #(struct:sca-add
                             #(struct:sca-mul
                               #(struct:sca-mul
                                 #(struct:int32_t t5829)
                                 #(struct:int32_t t5830))
                               #(struct:int32_t mat_a.extent.0))
                             #(struct:sca-mul
                               #(struct:int32_t t5830)
                               #(struct:int32_t t6653))))>
                        (#(struct:int8_t (bv #x01 8))
                         #(struct:int8_t (bv #x01 8)))
                        #f
                        #f
                        #f
                        int32)>
                     (#(struct:int8_t (bv #x01 8))
                      #(struct:int8_t (bv #x01 8)))
                     #f
                     #f
                     #f
                     int32)] [(! x?$1468) #(struct:cast
                                            ...
                                            #<load-data>
                                            int32
                                            #f)]))
  (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
  #f
  #f
  #f
  'int32)
 #<load-data>
 (cast ... #<load-data> 'int32 x?$1863))
here(#(struct:vs-mpy-add ... #<load-data> (#(struct:int32_t t5829) (union #:size 2 #:hash 425735712347)) #f #f #f int32) #(struct:vs-mpy-add ... #<load-data> (#(struct:int32_t t5829)) #f x?$1598 #f int32) #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<load-data> (#(struct:int32_t t5829)) #f #f #f int32) (union #:size 2 #:hash 424524356221)> (#(struct:int32_t t5829) #(struct:int8_t (bv #x01 8))) #f #f #f int32) #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-add #(struct:sca-mul #(struct:sca-mul #(struct:int32_t t5829) #(struct:int32_t t5830)) #(struct:int32_t mat_a.extent.0)) #(struct:sca-mul #(struct:int32_t t5830) #(struct:int32_t t6653))))> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8)) (union #:size 2 #:hash 425644917560)) #f #f #f int32) #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-add #(struct:sca-mul #(struct:sca-mul #(struct:int32_t t5829) #(struct:int32_t t5830)) #(struct:int32_t mat_a.extent.0)) #(struct:sca-mul #(struct:int32_t t5830) #(struct:int32_t t6653))))> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f x?$1731 #f int32) #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-add #(struct:sca-mul #(struct:sca-mul #(struct:int32_t t5829) #(struct:int32_t t5830)) #(struct:int32_t mat_a.extent.0)) #(struct:sca-mul #(struct:int32_t t5830) #(struct:int32_t t6653))))> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32) (union #:size 2 #:hash 424397717907)> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32) #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<load-data> (#(struct:int32_t t5829)) #f #f #f int32) #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-add #(struct:sca-mul #(struct:sca-mul #(struct:int32_t t5829) #(struct:int32_t t5830)) #(struct:int32_t mat_a.extent.0)) #(struct:sca-mul #(struct:int32_t t5830) #(struct:int32_t t6653))))> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32)> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8)) (union #:size 2 #:hash 425736671524)) #f #f #f int32) #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<load-data> (#(struct:int32_t t5829)) #f #f #f int32) #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-add #(struct:sca-mul #(struct:sca-mul #(struct:int32_t t5829) #(struct:int32_t t5830)) #(struct:int32_t mat_a.extent.0)) #(struct:sca-mul #(struct:int32_t t5830) #(struct:int32_t t6653))))> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32)> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f x?$1465 #f int32) #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<load-data> (#(struct:int32_t t5829)) #f #f #f int32) #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-add #(struct:sca-mul #(struct:sca-mul #(struct:int32_t t5829) #(struct:int32_t t5830)) #(struct:int32_t mat_a.extent.0)) #(struct:sca-mul #(struct:int32_t t5830) #(struct:int32_t t6653))))> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32)> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32) (union #:size 2 #:hash 424512258024)> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32) #<load-data> #(struct:cast ... #<load-data> int32 x?$1863))

"Replace templates"
(list
 (vs-mpy-add
  ...
  #<load-data>
  (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
  (! x?$1993)
  (! x?$1994)
  (! x?$1995)
  'int32))
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-add
  (vec-mul
   (vec-cast
    (load
     (buffer column_sums_b 'uint32)
     (ramp
      (sca-add (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16) 16)
      1
      16)
     (aligned 16 0))
    'int32
    16)
   (sca-broadcast (int32_t t5829) 16))
  (vec-add
   (load
    (buffer bias 'int32)
    (ramp (sca-mul output.s0.x.x 16) 1 16)
    (aligned 16 0))
   (sca-broadcast
    (sca-add
     (sca-mul
      (sca-mul (int32_t t5829) (int32_t t5830))
      (int32_t mat_a.extent.0))
     (sca-mul (int32_t t5830) (int32_t t6653)))
    16)))
 (vec-cast
  (load
   (buffer multiplied_no_offsets 'uint32)
   (ramp
    (sca-add (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121)) 4)
    1
    16)
   (aligned 4 0))
  'int32
  16))
template:
  #<load-data>
axioms:
  '()
optimized-halide-expr:
  (vec-add
 (vec-add
  (vec-mul
   (vec-cast
    (load
     (buffer column_sums_b 'uint32)
     (ramp
      (sca-add (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16) 16)
      1
      16)
     (aligned 16 0))
    'int32
    16)
   (sca-broadcast (int32_t t5829) 16))
  (vec-add
   (load
    (buffer bias 'int32)
    (ramp (sca-mul output.s0.x.x 16) 1 16)
    (aligned 16 0))
   (sca-broadcast
    (sca-add
     (sca-mul
      (sca-mul (int32_t t5829) (int32_t t5830))
      (int32_t mat_a.extent.0))
     (sca-mul (int32_t t5830) (int32_t t6653)))
    16)))
 (vec-cast
  (load
   (buffer multiplied_no_offsets 'uint32)
   (ramp
    (sca-add (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121)) 4)
    1
    16)
   (aligned 4 0))
  'int32
  16))
optimized-template:
  #<load-data>
optimized Halide 0:
  (int32_t
 (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))))
optimized x86 0:
  (union [(= 1 idx$1864) #(struct:int32_t (app bias (+ -16 output.s0.x.x)))] [(|| (= 0 idx$1864) (= 2 idx$1864)) #(struct:uint32_t
                                                                                                                 (ite* (⊢ (= 0 idx$1864) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1864) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1)))))))])
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-add
  (vec-mul
   (vec-cast
    (load
     (buffer column_sums_b 'uint32)
     (ramp
      (sca-add (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16) 16)
      1
      16)
     (aligned 16 0))
    'int32
    16)
   (sca-broadcast (int32_t t5829) 16))
  (vec-add
   (load
    (buffer bias 'int32)
    (ramp (sca-mul output.s0.x.x 16) 1 16)
    (aligned 16 0))
   (sca-broadcast
    (sca-add
     (sca-mul
      (sca-mul (int32_t t5829) (int32_t t5830))
      (int32_t mat_a.extent.0))
     (sca-mul (int32_t t5830) (int32_t t6653)))
    16)))
 (vec-cast
  (load
   (buffer multiplied_no_offsets 'uint32)
   (ramp
    (sca-add (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121)) 4)
    1
    16)
   (aligned 4 0))
  'int32
  16))
template:
  (vs-mpy-add
 ...
 #<load-data>
 (list
  (int32_t t5829)
  (union [x?$1600 #(struct:int32_t t5829)] [(! x?$1600) #(struct:int8_t
                                                          (bv #x01 8))]))
 #f
 #f
 #f
 'int32)
axioms:
  '()
optimized-halide-expr:
  (vec-add
 (vec-add
  (vec-mul
   (vec-cast
    (load
     (buffer column_sums_b 'uint32)
     (ramp
      (sca-add (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16) 16)
      1
      16)
     (aligned 16 0))
    'int32
    16)
   (sca-broadcast (int32_t t5829) 16))
  (vec-add
   (load
    (buffer bias 'int32)
    (ramp (sca-mul output.s0.x.x 16) 1 16)
    (aligned 16 0))
   (sca-broadcast
    (sca-add
     (sca-mul
      (sca-mul (int32_t t5829) (int32_t t5830))
      (int32_t mat_a.extent.0))
     (sca-mul (int32_t t5830) (int32_t t6653)))
    16)))
 (vec-cast
  (load
   (buffer multiplied_no_offsets 'uint32)
   (ramp
    (sca-add (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121)) 4)
    1
    16)
   (aligned 4 0))
  'int32
  16))
optimized-template:
  (vs-mpy-add
 ...
 #<load-data>
 (list
  (int32_t t5829)
  (union [x?$1600 #(struct:int32_t t5829)] [(! x?$1600) #(struct:int8_t
                                                          (bv #x01 8))]))
 #f
 #f
 #f
 'int32)
optimized Halide 0:
  (int32_t
 (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))))
optimized x86 0:
  (int32_t
 (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvmul (ite* (⊢ (&& (|| (= 0 idx$1) (= 1 idx$1)) (= 2 idx$1)) (ite* (⊢ (= 0 idx$1) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (⊢ (= 1 idx$1) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))))) (⊢ (|| (|| (= 0 idx$1) (= 1 idx$1)) (= 2 idx$1)) (ite* (⊢ (|| (= 0 idx$1) (= 1 idx$1)) (ite* (⊢ (= 0 idx$1) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (⊢ (= 1 idx$1) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))))) (⊢ (= 2 idx$1) (app bias (+ -16 output.s0.x.x)))))) (ite x?$1600 t5829 (bv #x00000001 32)))))
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-add
  (vec-mul
   (vec-cast
    (load
     (buffer column_sums_b 'uint32)
     (ramp
      (sca-add (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16) 16)
      1
      16)
     (aligned 16 0))
    'int32
    16)
   (sca-broadcast (int32_t t5829) 16))
  (vec-add
   (load
    (buffer bias 'int32)
    (ramp (sca-mul output.s0.x.x 16) 1 16)
    (aligned 16 0))
   (sca-broadcast
    (sca-add
     (sca-mul
      (sca-mul (int32_t t5829) (int32_t t5830))
      (int32_t mat_a.extent.0))
     (sca-mul (int32_t t5830) (int32_t t6653)))
    16)))
 (vec-cast
  (load
   (buffer multiplied_no_offsets 'uint32)
   (ramp
    (sca-add (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121)) 4)
    1
    16)
   (aligned 4 0))
  'int32
  16))
template:
  (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f x?$1598 #f 'int32)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-add
 (vec-add
  (vec-mul
   (vec-cast #<abstr-halide-expr> 'int32 16)
   (sca-broadcast (int32_t t5829) 16))
  (vec-add
   (load
    (buffer bias 'int32)
    (ramp (sca-mul output.s0.x.x 16) 1 16)
    (aligned 16 0))
   (sca-broadcast
    (sca-add
     (sca-mul
      (sca-mul (int32_t t5829) (int32_t t5830))
      (int32_t mat_a.extent.0))
     (sca-mul (int32_t t5830) (int32_t t6653)))
    16)))
 (vec-cast
  (load
   (buffer multiplied_no_offsets 'uint32)
   (ramp
    (sca-add (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121)) 4)
    1
    16)
   (aligned 4 0))
  'int32
  16))
optimized-template:
  (vs-mpy-add ... #<abstr-expr> (list (int32_t t5829)) #f x?$1598 #f 'int32)
optimized Halide 0:
  (int32_t
 (bvadd (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4)))))) (bvadd (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653))) (bvmul t5829 (app abstr-vals$1996 0)))))
optimized x86 0:
  (int32_t
 (bvadd (bvmul t5829 (app abstr-vals$1996 0)) (ite x?$1598 (bv #x00000001 32) (bv #x00000000 32))))
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-add
  (vec-mul
   (vec-cast
    (load
     (buffer column_sums_b 'uint32)
     (ramp
      (sca-add (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16) 16)
      1
      16)
     (aligned 16 0))
    'int32
    16)
   (sca-broadcast (int32_t t5829) 16))
  (vec-add
   (load
    (buffer bias 'int32)
    (ramp (sca-mul output.s0.x.x 16) 1 16)
    (aligned 16 0))
   (sca-broadcast
    (sca-add
     (sca-mul
      (sca-mul (int32_t t5829) (int32_t t5830))
      (int32_t mat_a.extent.0))
     (sca-mul (int32_t t5830) (int32_t t6653)))
    16)))
 (vec-cast
  (load
   (buffer multiplied_no_offsets 'uint32)
   (ramp
    (sca-add (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121)) 4)
    1
    16)
   (aligned 4 0))
  'int32
  16))
template:
  (cast ... #<load-data> 'int32 x?$1863)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-add
 (vec-add
  (vec-mul
   (vec-cast
    (load
     (buffer column_sums_b 'uint32)
     (ramp
      (sca-add (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16) 16)
      1
      16)
     (aligned 16 0))
    'int32
    16)
   (sca-broadcast (int32_t t5829) 16))
  (vec-add
   (load
    (buffer bias 'int32)
    (ramp (sca-mul output.s0.x.x 16) 1 16)
    (aligned 16 0))
   (sca-broadcast
    (sca-add
     (sca-mul
      (sca-mul (int32_t t5829) (int32_t t5830))
      (int32_t mat_a.extent.0))
     (sca-mul (int32_t t5830) (int32_t t6653)))
    16)))
 (vec-cast #<abstr-halide-expr> 'int32 16))
optimized-template:
  (cast ... #<abstr-expr> 'int32 x?$1863)
optimized Halide 0:
  (int32_t
 (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app abstr-vals$1997 0)))
optimized x86 0:
  (int32_t
 (ite x?$1863 (ite (bvult (bv #x7fffffff 32) (app abstr-vals$1997 0)) (bv #x7fffffff 32) (app abstr-vals$1997 0)) (app abstr-vals$1997 0)))
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-add
  (vec-mul
   (vec-cast
    (load
     (buffer column_sums_b 'uint32)
     (ramp
      (sca-add (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16) 16)
      1
      16)
     (aligned 16 0))
    'int32
    16)
   (sca-broadcast (int32_t t5829) 16))
  (vec-add
   (load
    (buffer bias 'int32)
    (ramp (sca-mul output.s0.x.x 16) 1 16)
    (aligned 16 0))
   (sca-broadcast
    (sca-add
     (sca-mul
      (sca-mul (int32_t t5829) (int32_t t5830))
      (int32_t mat_a.extent.0))
     (sca-mul (int32_t t5830) (int32_t t6653)))
    16)))
 (vec-cast
  (load
   (buffer multiplied_no_offsets 'uint32)
   (ramp
    (sca-add (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121)) 4)
    1
    16)
   (aligned 4 0))
  'int32
  16))
template:
  (vs-mpy-add
 ...
 #<load-data>
 (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
 (! x?$1993)
 (! x?$1994)
 (! x?$1995)
 'int32)
axioms:
  '()
optimized-halide-expr:
  (vec-add
 (vec-add
  (vec-mul
   (vec-cast
    (load
     (buffer column_sums_b 'uint32)
     (ramp
      (sca-add (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16) 16)
      1
      16)
     (aligned 16 0))
    'int32
    16)
   (sca-broadcast (int32_t t5829) 16))
  (vec-add
   (load
    (buffer bias 'int32)
    (ramp (sca-mul output.s0.x.x 16) 1 16)
    (aligned 16 0))
   (sca-broadcast
    (sca-add
     (sca-mul
      (sca-mul (int32_t t5829) (int32_t t5830))
      (int32_t mat_a.extent.0))
     (sca-mul (int32_t t5830) (int32_t t6653)))
    16)))
 (vec-cast
  (load
   (buffer multiplied_no_offsets 'uint32)
   (ramp
    (sca-add (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121)) 4)
    1
    16)
   (aligned 4 0))
  'int32
  16))
optimized-template:
  (vs-mpy-add
 ...
 #<load-data>
 (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
 (! x?$1993)
 (! x?$1994)
 (! x?$1995)
 'int32)
optimized Halide 0:
  (int32_t
 (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))))
optimized x86 0:
  (int32_t
 (ite* (⊢ (&& x?$1995 (! (&& (! x?$1993) (! x?$1995)))) (ite x?$1993 (bvadd (ite* (⊢ (&& (= 1 idx$1930) (|| (= 0 idx$1930) (= 2 idx$1930))) (ite* (⊢ (= 0 idx$1930) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1930) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))))) (⊢ (|| (= 1 idx$1930) (|| (= 0 idx$1930) (= 2 idx$1930))) (ite* (⊢ (= 1 idx$1930) (app bias (+ -16 output.s0.x.x))) (⊢ (|| (= 0 idx$1930) (= 2 idx$1930)) (ite* (⊢ (= 0 idx$1930) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1930) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1)))))))))) (ite x?$1993 (bvadd (ite* (⊢ (&& (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))))) (⊢ (|| (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 1 idx$1929) (app bias (+ -16 output.s0.x.x))) (⊢ (|| (= 0 idx$1929) (= 2 idx$1929)) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1)))))))))) (ite x?$1994 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1994 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite* (⊢ (&& (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))))) (⊢ (|| (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 1 idx$1929) (app bias (+ -16 output.s0.x.x))) (⊢ (|| (= 0 idx$1929) (= 2 idx$1929)) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1)))))))))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1994 (bv #x00000000 32) (bv #x00000001 32))))) (ite* (⊢ (&& (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))))) (⊢ (|| (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 1 idx$1929) (app bias (+ -16 output.s0.x.x))) (⊢ (|| (= 0 idx$1929) (= 2 idx$1929)) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1)))))))))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1994 (bv #x00000000 32) (bv #x00000001 32)))))))) (bvadd (ite x?$1993 (bvadd (ite* (⊢ (&& (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))))) (⊢ (|| (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 1 idx$1929) (app bias (+ -16 output.s0.x.x))) (⊢ (|| (= 0 idx$1929) (= 2 idx$1929)) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1)))))))))) (ite x?$1994 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1994 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite* (⊢ (&& (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))))) (⊢ (|| (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 1 idx$1929) (app bias (+ -16 output.s0.x.x))) (⊢ (|| (= 0 idx$1929) (= 2 idx$1929)) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1)))))))))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1994 (bv #x00000000 32) (bv #x00000001 32))))) (ite* (⊢ (&& (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))))) (⊢ (|| (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 1 idx$1929) (app bias (+ -16 output.s0.x.x))) (⊢ (|| (= 0 idx$1929) (= 2 idx$1929)) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1)))))))))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1994 (bv #x00000000 32) (bv #x00000001 32))))))) (ite (bvsle (bvadd (bv #x80000000 32) (bvneg (ite (bvsle (ite x?$1993 (bvadd (ite* (⊢ (&& (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))))) (⊢ (|| (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 1 idx$1929) (app bias (+ -16 output.s0.x.x))) (⊢ (|| (= 0 idx$1929) (= 2 idx$1929)) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1)))))))))) (ite x?$1994 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1994 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite* (⊢ (&& (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))))) (⊢ (|| (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 1 idx$1929) (app bias (+ -16 output.s0.x.x))) (⊢ (|| (= 0 idx$1929) (= 2 idx$1929)) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1)))))))))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1994 (bv #x00000000 32) (bv #x00000001 32))))) (ite* (⊢ (&& (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))))) (⊢ (|| (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 1 idx$1929) (app bias (+ -16 output.s0.x.x))) (⊢ (|| (= 0 idx$1929) (= 2 idx$1929)) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1)))))))))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1994 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)) (ite x?$1993 (bvadd (ite* (⊢ (&& (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))))) (⊢ (|| (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 1 idx$1929) (app bias (+ -16 output.s0.x.x))) (⊢ (|| (= 0 idx$1929) (= 2 idx$1929)) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1)))))))))) (ite x?$1994 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1994 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite* (⊢ (&& (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))))) (⊢ (|| (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 1 idx$1929) (app bias (+ -16 output.s0.x.x))) (⊢ (|| (= 0 idx$1929) (= 2 idx$1929)) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1)))))))))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1994 (bv #x00000000 32) (bv #x00000001 32))))) (ite* (⊢ (&& (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))))) (⊢ (|| (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 1 idx$1929) (app bias (+ -16 output.s0.x.x))) (⊢ (|| (= 0 idx$1929) (= 2 idx$1929)) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1)))))))))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1994 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)))) (ite (bvsle (ite* (⊢ (&& (= 1 idx$1930) (|| (= 0 idx$1930) (= 2 idx$1930))) (ite* (⊢ (= 0 idx$1930) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1930) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))))) (⊢ (|| (= 1 idx$1930) (|| (= 0 idx$1930) (= 2 idx$1930))) (ite* (⊢ (= 1 idx$1930) (app bias (+ -16 output.s0.x.x))) (⊢ (|| (= 0 idx$1930) (= 2 idx$1930)) (ite* (⊢ (= 0 idx$1930) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1930) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1)))))))))) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$1993 (bvadd (ite* (⊢ (&& (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))))) (⊢ (|| (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 1 idx$1929) (app bias (+ -16 output.s0.x.x))) (⊢ (|| (= 0 idx$1929) (= 2 idx$1929)) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1)))))))))) (ite x?$1994 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1994 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite* (⊢ (&& (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))))) (⊢ (|| (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 1 idx$1929) (app bias (+ -16 output.s0.x.x))) (⊢ (|| (= 0 idx$1929) (= 2 idx$1929)) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1)))))))))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1994 (bv #x00000000 32) (bv #x00000001 32))))) (ite* (⊢ (&& (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))))) (⊢ (|| (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 1 idx$1929) (app bias (+ -16 output.s0.x.x))) (⊢ (|| (= 0 idx$1929) (= 2 idx$1929)) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1)))))))))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1994 (bv #x00000000 32) (bv #x00000001 32)))))))) (ite x?$1993 (bvadd (ite* (⊢ (&& (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))))) (⊢ (|| (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 1 idx$1929) (app bias (+ -16 output.s0.x.x))) (⊢ (|| (= 0 idx$1929) (= 2 idx$1929)) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1)))))))))) (ite x?$1994 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1994 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite* (⊢ (&& (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))))) (⊢ (|| (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 1 idx$1929) (app bias (+ -16 output.s0.x.x))) (⊢ (|| (= 0 idx$1929) (= 2 idx$1929)) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1)))))))))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1994 (bv #x00000000 32) (bv #x00000001 32))))) (ite* (⊢ (&& (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))))) (⊢ (|| (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 1 idx$1929) (app bias (+ -16 output.s0.x.x))) (⊢ (|| (= 0 idx$1929) (= 2 idx$1929)) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1)))))))))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1994 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32))))) (ite* (⊢ (&& (= 1 idx$1930) (|| (= 0 idx$1930) (= 2 idx$1930))) (ite* (⊢ (= 0 idx$1930) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1930) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))))) (⊢ (|| (= 1 idx$1930) (|| (= 0 idx$1930) (= 2 idx$1930))) (ite* (⊢ (= 1 idx$1930) (app bias (+ -16 output.s0.x.x))) (⊢ (|| (= 0 idx$1930) (= 2 idx$1930)) (ite* (⊢ (= 0 idx$1930) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1930) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1)))))))))) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$1993 (bvadd (ite* (⊢ (&& (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))))) (⊢ (|| (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 1 idx$1929) (app bias (+ -16 output.s0.x.x))) (⊢ (|| (= 0 idx$1929) (= 2 idx$1929)) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1)))))))))) (ite x?$1994 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1994 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite* (⊢ (&& (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))))) (⊢ (|| (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 1 idx$1929) (app bias (+ -16 output.s0.x.x))) (⊢ (|| (= 0 idx$1929) (= 2 idx$1929)) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1)))))))))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1994 (bv #x00000000 32) (bv #x00000001 32))))) (ite* (⊢ (&& (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))))) (⊢ (|| (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 1 idx$1929) (app bias (+ -16 output.s0.x.x))) (⊢ (|| (= 0 idx$1929) (= 2 idx$1929)) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1)))))))))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1994 (bv #x00000000 32) (bv #x00000001 32)))))))) (ite x?$1993 (bvadd (ite* (⊢ (&& (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))))) (⊢ (|| (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 1 idx$1929) (app bias (+ -16 output.s0.x.x))) (⊢ (|| (= 0 idx$1929) (= 2 idx$1929)) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1)))))))))) (ite x?$1994 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1994 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite* (⊢ (&& (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))))) (⊢ (|| (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 1 idx$1929) (app bias (+ -16 output.s0.x.x))) (⊢ (|| (= 0 idx$1929) (= 2 idx$1929)) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1)))))))))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1994 (bv #x00000000 32) (bv #x00000001 32))))) (ite* (⊢ (&& (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))))) (⊢ (|| (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 1 idx$1929) (app bias (+ -16 output.s0.x.x))) (⊢ (|| (= 0 idx$1929) (= 2 idx$1929)) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1)))))))))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1994 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)))))) (ite (bvsle (ite* (⊢ (&& (= 1 idx$1930) (|| (= 0 idx$1930) (= 2 idx$1930))) (ite* (⊢ (= 0 idx$1930) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1930) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))))) (⊢ (|| (= 1 idx$1930) (|| (= 0 idx$1930) (= 2 idx$1930))) (ite* (⊢ (= 1 idx$1930) (app bias (+ -16 output.s0.x.x))) (⊢ (|| (= 0 idx$1930) (= 2 idx$1930)) (ite* (⊢ (= 0 idx$1930) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1930) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1)))))))))) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$1993 (bvadd (ite* (⊢ (&& (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))))) (⊢ (|| (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 1 idx$1929) (app bias (+ -16 output.s0.x.x))) (⊢ (|| (= 0 idx$1929) (= 2 idx$1929)) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1)))))))))) (ite x?$1994 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1994 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite* (⊢ (&& (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))))) (⊢ (|| (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 1 idx$1929) (app bias (+ -16 output.s0.x.x))) (⊢ (|| (= 0 idx$1929) (= 2 idx$1929)) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1)))))))))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1994 (bv #x00000000 32) (bv #x00000001 32))))) (ite* (⊢ (&& (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))))) (⊢ (|| (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 1 idx$1929) (app bias (+ -16 output.s0.x.x))) (⊢ (|| (= 0 idx$1929) (= 2 idx$1929)) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1)))))))))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1994 (bv #x00000000 32) (bv #x00000001 32)))))))) (ite x?$1993 (bvadd (ite* (⊢ (&& (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))))) (⊢ (|| (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 1 idx$1929) (app bias (+ -16 output.s0.x.x))) (⊢ (|| (= 0 idx$1929) (= 2 idx$1929)) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1)))))))))) (ite x?$1994 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1994 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite* (⊢ (&& (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))))) (⊢ (|| (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 1 idx$1929) (app bias (+ -16 output.s0.x.x))) (⊢ (|| (= 0 idx$1929) (= 2 idx$1929)) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1)))))))))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1994 (bv #x00000000 32) (bv #x00000001 32))))) (ite* (⊢ (&& (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))))) (⊢ (|| (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 1 idx$1929) (app bias (+ -16 output.s0.x.x))) (⊢ (|| (= 0 idx$1929) (= 2 idx$1929)) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1)))))))))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1994 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32))))) (ite* (⊢ (&& (= 1 idx$1930) (|| (= 0 idx$1930) (= 2 idx$1930))) (ite* (⊢ (= 0 idx$1930) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1930) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))))) (⊢ (|| (= 1 idx$1930) (|| (= 0 idx$1930) (= 2 idx$1930))) (ite* (⊢ (= 1 idx$1930) (app bias (+ -16 output.s0.x.x))) (⊢ (|| (= 0 idx$1930) (= 2 idx$1930)) (ite* (⊢ (= 0 idx$1930) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1930) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1)))))))))) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$1993 (bvadd (ite* (⊢ (&& (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))))) (⊢ (|| (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 1 idx$1929) (app bias (+ -16 output.s0.x.x))) (⊢ (|| (= 0 idx$1929) (= 2 idx$1929)) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1)))))))))) (ite x?$1994 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1994 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite* (⊢ (&& (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))))) (⊢ (|| (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 1 idx$1929) (app bias (+ -16 output.s0.x.x))) (⊢ (|| (= 0 idx$1929) (= 2 idx$1929)) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1)))))))))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1994 (bv #x00000000 32) (bv #x00000001 32))))) (ite* (⊢ (&& (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))))) (⊢ (|| (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 1 idx$1929) (app bias (+ -16 output.s0.x.x))) (⊢ (|| (= 0 idx$1929) (= 2 idx$1929)) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1)))))))))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1994 (bv #x00000000 32) (bv #x00000001 32)))))))) (ite x?$1993 (bvadd (ite* (⊢ (&& (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))))) (⊢ (|| (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 1 idx$1929) (app bias (+ -16 output.s0.x.x))) (⊢ (|| (= 0 idx$1929) (= 2 idx$1929)) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1)))))))))) (ite x?$1994 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1994 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite* (⊢ (&& (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))))) (⊢ (|| (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 1 idx$1929) (app bias (+ -16 output.s0.x.x))) (⊢ (|| (= 0 idx$1929) (= 2 idx$1929)) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1)))))))))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1994 (bv #x00000000 32) (bv #x00000001 32))))) (ite* (⊢ (&& (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))))) (⊢ (|| (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 1 idx$1929) (app bias (+ -16 output.s0.x.x))) (⊢ (|| (= 0 idx$1929) (= 2 idx$1929)) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1)))))))))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1994 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32))))) (bvadd (bv #x80000000 32) (bvneg (ite (bvsle (ite x?$1993 (bvadd (ite* (⊢ (&& (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))))) (⊢ (|| (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 1 idx$1929) (app bias (+ -16 output.s0.x.x))) (⊢ (|| (= 0 idx$1929) (= 2 idx$1929)) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1)))))))))) (ite x?$1994 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1994 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite* (⊢ (&& (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))))) (⊢ (|| (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 1 idx$1929) (app bias (+ -16 output.s0.x.x))) (⊢ (|| (= 0 idx$1929) (= 2 idx$1929)) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1)))))))))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1994 (bv #x00000000 32) (bv #x00000001 32))))) (ite* (⊢ (&& (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))))) (⊢ (|| (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 1 idx$1929) (app bias (+ -16 output.s0.x.x))) (⊢ (|| (= 0 idx$1929) (= 2 idx$1929)) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1)))))))))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1994 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)) (ite x?$1993 (bvadd (ite* (⊢ (&& (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))))) (⊢ (|| (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 1 idx$1929) (app bias (+ -16 output.s0.x.x))) (⊢ (|| (= 0 idx$1929) (= 2 idx$1929)) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1)))))))))) (ite x?$1994 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1994 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite* (⊢ (&& (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))))) (⊢ (|| (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 1 idx$1929) (app bias (+ -16 output.s0.x.x))) (⊢ (|| (= 0 idx$1929) (= 2 idx$1929)) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1)))))))))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1994 (bv #x00000000 32) (bv #x00000001 32))))) (ite* (⊢ (&& (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))))) (⊢ (|| (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 1 idx$1929) (app bias (+ -16 output.s0.x.x))) (⊢ (|| (= 0 idx$1929) (= 2 idx$1929)) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1)))))))))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1994 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)))))))) (⊢ (|| (&& (! x?$1993) (! x?$1995)) (&& (! x?$1995) (! (&& (! x?$1993) (! x?$1995))))) (bvashr (ite x?$1993 (bvadd (ite* (⊢ (&& (= 1 idx$1930) (|| (= 0 idx$1930) (= 2 idx$1930))) (ite* (⊢ (= 0 idx$1930) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1930) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))))) (⊢ (|| (= 1 idx$1930) (|| (= 0 idx$1930) (= 2 idx$1930))) (ite* (⊢ (= 1 idx$1930) (app bias (+ -16 output.s0.x.x))) (⊢ (|| (= 0 idx$1930) (= 2 idx$1930)) (ite* (⊢ (= 0 idx$1930) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1930) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1)))))))))) (ite x?$1993 (bvadd (ite* (⊢ (&& (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))))) (⊢ (|| (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 1 idx$1929) (app bias (+ -16 output.s0.x.x))) (⊢ (|| (= 0 idx$1929) (= 2 idx$1929)) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1)))))))))) (ite x?$1994 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1994 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite* (⊢ (&& (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))))) (⊢ (|| (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 1 idx$1929) (app bias (+ -16 output.s0.x.x))) (⊢ (|| (= 0 idx$1929) (= 2 idx$1929)) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1)))))))))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1994 (bv #x00000000 32) (bv #x00000001 32))))) (ite* (⊢ (&& (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))))) (⊢ (|| (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 1 idx$1929) (app bias (+ -16 output.s0.x.x))) (⊢ (|| (= 0 idx$1929) (= 2 idx$1929)) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1)))))))))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1994 (bv #x00000000 32) (bv #x00000001 32)))))))) (bvadd (ite x?$1993 (bvadd (ite* (⊢ (&& (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))))) (⊢ (|| (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 1 idx$1929) (app bias (+ -16 output.s0.x.x))) (⊢ (|| (= 0 idx$1929) (= 2 idx$1929)) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1)))))))))) (ite x?$1994 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1994 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite* (⊢ (&& (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))))) (⊢ (|| (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 1 idx$1929) (app bias (+ -16 output.s0.x.x))) (⊢ (|| (= 0 idx$1929) (= 2 idx$1929)) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1)))))))))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1994 (bv #x00000000 32) (bv #x00000001 32))))) (ite* (⊢ (&& (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))))) (⊢ (|| (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 1 idx$1929) (app bias (+ -16 output.s0.x.x))) (⊢ (|| (= 0 idx$1929) (= 2 idx$1929)) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1)))))))))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1994 (bv #x00000000 32) (bv #x00000001 32))))))) (ite (bvsle (bvadd (bv #x80000000 32) (bvneg (ite (bvsle (ite x?$1993 (bvadd (ite* (⊢ (&& (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))))) (⊢ (|| (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 1 idx$1929) (app bias (+ -16 output.s0.x.x))) (⊢ (|| (= 0 idx$1929) (= 2 idx$1929)) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1)))))))))) (ite x?$1994 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1994 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite* (⊢ (&& (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))))) (⊢ (|| (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 1 idx$1929) (app bias (+ -16 output.s0.x.x))) (⊢ (|| (= 0 idx$1929) (= 2 idx$1929)) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1)))))))))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1994 (bv #x00000000 32) (bv #x00000001 32))))) (ite* (⊢ (&& (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))))) (⊢ (|| (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 1 idx$1929) (app bias (+ -16 output.s0.x.x))) (⊢ (|| (= 0 idx$1929) (= 2 idx$1929)) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1)))))))))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1994 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)) (ite x?$1993 (bvadd (ite* (⊢ (&& (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))))) (⊢ (|| (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 1 idx$1929) (app bias (+ -16 output.s0.x.x))) (⊢ (|| (= 0 idx$1929) (= 2 idx$1929)) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1)))))))))) (ite x?$1994 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1994 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite* (⊢ (&& (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))))) (⊢ (|| (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 1 idx$1929) (app bias (+ -16 output.s0.x.x))) (⊢ (|| (= 0 idx$1929) (= 2 idx$1929)) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1)))))))))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1994 (bv #x00000000 32) (bv #x00000001 32))))) (ite* (⊢ (&& (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))))) (⊢ (|| (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 1 idx$1929) (app bias (+ -16 output.s0.x.x))) (⊢ (|| (= 0 idx$1929) (= 2 idx$1929)) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1)))))))))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1994 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)))) (ite (bvsle (ite* (⊢ (&& (= 1 idx$1930) (|| (= 0 idx$1930) (= 2 idx$1930))) (ite* (⊢ (= 0 idx$1930) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1930) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))))) (⊢ (|| (= 1 idx$1930) (|| (= 0 idx$1930) (= 2 idx$1930))) (ite* (⊢ (= 1 idx$1930) (app bias (+ -16 output.s0.x.x))) (⊢ (|| (= 0 idx$1930) (= 2 idx$1930)) (ite* (⊢ (= 0 idx$1930) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1930) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1)))))))))) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$1993 (bvadd (ite* (⊢ (&& (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))))) (⊢ (|| (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 1 idx$1929) (app bias (+ -16 output.s0.x.x))) (⊢ (|| (= 0 idx$1929) (= 2 idx$1929)) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1)))))))))) (ite x?$1994 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1994 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite* (⊢ (&& (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))))) (⊢ (|| (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 1 idx$1929) (app bias (+ -16 output.s0.x.x))) (⊢ (|| (= 0 idx$1929) (= 2 idx$1929)) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1)))))))))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1994 (bv #x00000000 32) (bv #x00000001 32))))) (ite* (⊢ (&& (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))))) (⊢ (|| (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 1 idx$1929) (app bias (+ -16 output.s0.x.x))) (⊢ (|| (= 0 idx$1929) (= 2 idx$1929)) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1)))))))))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1994 (bv #x00000000 32) (bv #x00000001 32)))))))) (ite x?$1993 (bvadd (ite* (⊢ (&& (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))))) (⊢ (|| (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 1 idx$1929) (app bias (+ -16 output.s0.x.x))) (⊢ (|| (= 0 idx$1929) (= 2 idx$1929)) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1)))))))))) (ite x?$1994 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1994 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite* (⊢ (&& (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))))) (⊢ (|| (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 1 idx$1929) (app bias (+ -16 output.s0.x.x))) (⊢ (|| (= 0 idx$1929) (= 2 idx$1929)) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1)))))))))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1994 (bv #x00000000 32) (bv #x00000001 32))))) (ite* (⊢ (&& (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))))) (⊢ (|| (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 1 idx$1929) (app bias (+ -16 output.s0.x.x))) (⊢ (|| (= 0 idx$1929) (= 2 idx$1929)) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1)))))))))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1994 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32))))) (ite* (⊢ (&& (= 1 idx$1930) (|| (= 0 idx$1930) (= 2 idx$1930))) (ite* (⊢ (= 0 idx$1930) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1930) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))))) (⊢ (|| (= 1 idx$1930) (|| (= 0 idx$1930) (= 2 idx$1930))) (ite* (⊢ (= 1 idx$1930) (app bias (+ -16 output.s0.x.x))) (⊢ (|| (= 0 idx$1930) (= 2 idx$1930)) (ite* (⊢ (= 0 idx$1930) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1930) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1)))))))))) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$1993 (bvadd (ite* (⊢ (&& (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))))) (⊢ (|| (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 1 idx$1929) (app bias (+ -16 output.s0.x.x))) (⊢ (|| (= 0 idx$1929) (= 2 idx$1929)) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1)))))))))) (ite x?$1994 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1994 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite* (⊢ (&& (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))))) (⊢ (|| (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 1 idx$1929) (app bias (+ -16 output.s0.x.x))) (⊢ (|| (= 0 idx$1929) (= 2 idx$1929)) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1)))))))))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1994 (bv #x00000000 32) (bv #x00000001 32))))) (ite* (⊢ (&& (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))))) (⊢ (|| (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 1 idx$1929) (app bias (+ -16 output.s0.x.x))) (⊢ (|| (= 0 idx$1929) (= 2 idx$1929)) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1)))))))))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1994 (bv #x00000000 32) (bv #x00000001 32)))))))) (ite x?$1993 (bvadd (ite* (⊢ (&& (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))))) (⊢ (|| (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 1 idx$1929) (app bias (+ -16 output.s0.x.x))) (⊢ (|| (= 0 idx$1929) (= 2 idx$1929)) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1)))))))))) (ite x?$1994 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1994 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite* (⊢ (&& (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))))) (⊢ (|| (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 1 idx$1929) (app bias (+ -16 output.s0.x.x))) (⊢ (|| (= 0 idx$1929) (= 2 idx$1929)) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1)))))))))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1994 (bv #x00000000 32) (bv #x00000001 32))))) (ite* (⊢ (&& (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))))) (⊢ (|| (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 1 idx$1929) (app bias (+ -16 output.s0.x.x))) (⊢ (|| (= 0 idx$1929) (= 2 idx$1929)) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1)))))))))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1994 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)))))) (ite (bvsle (ite* (⊢ (&& (= 1 idx$1930) (|| (= 0 idx$1930) (= 2 idx$1930))) (ite* (⊢ (= 0 idx$1930) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1930) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))))) (⊢ (|| (= 1 idx$1930) (|| (= 0 idx$1930) (= 2 idx$1930))) (ite* (⊢ (= 1 idx$1930) (app bias (+ -16 output.s0.x.x))) (⊢ (|| (= 0 idx$1930) (= 2 idx$1930)) (ite* (⊢ (= 0 idx$1930) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1930) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1)))))))))) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$1993 (bvadd (ite* (⊢ (&& (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))))) (⊢ (|| (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 1 idx$1929) (app bias (+ -16 output.s0.x.x))) (⊢ (|| (= 0 idx$1929) (= 2 idx$1929)) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1)))))))))) (ite x?$1994 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1994 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite* (⊢ (&& (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))))) (⊢ (|| (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 1 idx$1929) (app bias (+ -16 output.s0.x.x))) (⊢ (|| (= 0 idx$1929) (= 2 idx$1929)) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1)))))))))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1994 (bv #x00000000 32) (bv #x00000001 32))))) (ite* (⊢ (&& (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))))) (⊢ (|| (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 1 idx$1929) (app bias (+ -16 output.s0.x.x))) (⊢ (|| (= 0 idx$1929) (= 2 idx$1929)) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1)))))))))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1994 (bv #x00000000 32) (bv #x00000001 32)))))))) (ite x?$1993 (bvadd (ite* (⊢ (&& (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))))) (⊢ (|| (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 1 idx$1929) (app bias (+ -16 output.s0.x.x))) (⊢ (|| (= 0 idx$1929) (= 2 idx$1929)) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1)))))))))) (ite x?$1994 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1994 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite* (⊢ (&& (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))))) (⊢ (|| (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 1 idx$1929) (app bias (+ -16 output.s0.x.x))) (⊢ (|| (= 0 idx$1929) (= 2 idx$1929)) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1)))))))))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1994 (bv #x00000000 32) (bv #x00000001 32))))) (ite* (⊢ (&& (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))))) (⊢ (|| (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 1 idx$1929) (app bias (+ -16 output.s0.x.x))) (⊢ (|| (= 0 idx$1929) (= 2 idx$1929)) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1)))))))))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1994 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32))))) (ite* (⊢ (&& (= 1 idx$1930) (|| (= 0 idx$1930) (= 2 idx$1930))) (ite* (⊢ (= 0 idx$1930) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1930) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))))) (⊢ (|| (= 1 idx$1930) (|| (= 0 idx$1930) (= 2 idx$1930))) (ite* (⊢ (= 1 idx$1930) (app bias (+ -16 output.s0.x.x))) (⊢ (|| (= 0 idx$1930) (= 2 idx$1930)) (ite* (⊢ (= 0 idx$1930) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1930) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1)))))))))) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$1993 (bvadd (ite* (⊢ (&& (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))))) (⊢ (|| (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 1 idx$1929) (app bias (+ -16 output.s0.x.x))) (⊢ (|| (= 0 idx$1929) (= 2 idx$1929)) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1)))))))))) (ite x?$1994 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1994 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite* (⊢ (&& (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))))) (⊢ (|| (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 1 idx$1929) (app bias (+ -16 output.s0.x.x))) (⊢ (|| (= 0 idx$1929) (= 2 idx$1929)) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1)))))))))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1994 (bv #x00000000 32) (bv #x00000001 32))))) (ite* (⊢ (&& (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))))) (⊢ (|| (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 1 idx$1929) (app bias (+ -16 output.s0.x.x))) (⊢ (|| (= 0 idx$1929) (= 2 idx$1929)) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1)))))))))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1994 (bv #x00000000 32) (bv #x00000001 32)))))))) (ite x?$1993 (bvadd (ite* (⊢ (&& (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))))) (⊢ (|| (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 1 idx$1929) (app bias (+ -16 output.s0.x.x))) (⊢ (|| (= 0 idx$1929) (= 2 idx$1929)) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1)))))))))) (ite x?$1994 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1994 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite* (⊢ (&& (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))))) (⊢ (|| (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 1 idx$1929) (app bias (+ -16 output.s0.x.x))) (⊢ (|| (= 0 idx$1929) (= 2 idx$1929)) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1)))))))))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1994 (bv #x00000000 32) (bv #x00000001 32))))) (ite* (⊢ (&& (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))))) (⊢ (|| (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 1 idx$1929) (app bias (+ -16 output.s0.x.x))) (⊢ (|| (= 0 idx$1929) (= 2 idx$1929)) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1)))))))))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1994 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32))))) (bvadd (bv #x80000000 32) (bvneg (ite (bvsle (ite x?$1993 (bvadd (ite* (⊢ (&& (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))))) (⊢ (|| (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 1 idx$1929) (app bias (+ -16 output.s0.x.x))) (⊢ (|| (= 0 idx$1929) (= 2 idx$1929)) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1)))))))))) (ite x?$1994 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1994 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite* (⊢ (&& (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))))) (⊢ (|| (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 1 idx$1929) (app bias (+ -16 output.s0.x.x))) (⊢ (|| (= 0 idx$1929) (= 2 idx$1929)) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1)))))))))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1994 (bv #x00000000 32) (bv #x00000001 32))))) (ite* (⊢ (&& (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))))) (⊢ (|| (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 1 idx$1929) (app bias (+ -16 output.s0.x.x))) (⊢ (|| (= 0 idx$1929) (= 2 idx$1929)) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1)))))))))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1994 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)) (ite x?$1993 (bvadd (ite* (⊢ (&& (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))))) (⊢ (|| (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 1 idx$1929) (app bias (+ -16 output.s0.x.x))) (⊢ (|| (= 0 idx$1929) (= 2 idx$1929)) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1)))))))))) (ite x?$1994 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$1994 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite* (⊢ (&& (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))))) (⊢ (|| (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 1 idx$1929) (app bias (+ -16 output.s0.x.x))) (⊢ (|| (= 0 idx$1929) (= 2 idx$1929)) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1)))))))))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1994 (bv #x00000000 32) (bv #x00000001 32))))) (ite* (⊢ (&& (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))))) (⊢ (|| (= 1 idx$1929) (|| (= 0 idx$1929) (= 2 idx$1929))) (ite* (⊢ (= 1 idx$1929) (app bias (+ -16 output.s0.x.x))) (⊢ (|| (= 0 idx$1929) (= 2 idx$1929)) (ite* (⊢ (= 0 idx$1929) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$1929) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1)))))))))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$1994 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32))))))) (bv #x00000001 32)))))
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-add
  (vec-mul
   (vec-cast
    (load
     (buffer column_sums_b 'uint32)
     (ramp
      (sca-add (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16) 16)
      1
      16)
     (aligned 16 0))
    'int32
    16)
   (sca-broadcast (int32_t t5829) 16))
  (vec-add
   (load
    (buffer bias 'int32)
    (ramp (sca-mul output.s0.x.x 16) 1 16)
    (aligned 16 0))
   (sca-broadcast
    (sca-add
     (sca-mul
      (sca-mul (int32_t t5829) (int32_t t5830))
      (int32_t mat_a.extent.0))
     (sca-mul (int32_t t5830) (int32_t t6653)))
    16)))
 (vec-cast
  (load
   (buffer multiplied_no_offsets 'uint32)
   (ramp
    (sca-add (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121)) 4)
    1
    16)
   (aligned 4 0))
  'int32
  16))
template:
  (vs-mpy-add
 ...
 (combine
  #<load-data>
  (broadcast
   ...
   (sca-add
    (sca-mul
     (sca-mul (int32_t t5829) (int32_t t5830))
     (int32_t mat_a.extent.0))
    (sca-mul (int32_t t5830) (int32_t t6653)))))
 (list
  (int8_t (bv #x01 8))
  (int8_t (bv #x01 8))
  (union [x?$1733 #(struct:int32_t t5829)] [(! x?$1733) #(struct:int8_t
                                                          (bv #x01 8))]))
 #f
 #f
 #f
 'int32)
axioms:
  '(#t #t)
optimized-halide-expr:
  (vec-add
 (vec-add
  (vec-mul
   (vec-cast
    (load
     (buffer column_sums_b 'uint32)
     (ramp
      (sca-add (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16) 16)
      1
      16)
     (aligned 16 0))
    'int32
    16)
   (sca-broadcast (int32_t t5829) 16))
  (vec-add #<abstr-halide-expr> #<abstr-halide-expr>))
 (vec-cast
  (load
   (buffer multiplied_no_offsets 'uint32)
   (ramp
    (sca-add (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121)) 4)
    1
    16)
   (aligned 4 0))
  'int32
  16))
optimized-template:
  (vs-mpy-add
 ...
 (combine #<abstr-expr> #<abstr-expr>)
 (list
  (int8_t (bv #x01 8))
  (int8_t (bv #x01 8))
  (union [x?$1733 #(struct:int32_t t5829)] [(! x?$1733) #(struct:int8_t
                                                          (bv #x01 8))]))
 #f
 #f
 #f
 'int32)
optimized Halide 0:
  (int32_t
 (bvadd (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4)))))) (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app abstr-vals$1998 0) (app abstr-vals$1999 0)))))
optimized x86 0:
  (int32_t
 (bvadd (bvadd (app abstr-vals$1998 0) (app abstr-vals$1999 0)) (bvmul (ite c$535 (app abstr-vals$1998 idx$534) (app abstr-vals$1999 idx$534)) (ite x?$1733 t5829 (bv #x00000001 32)))))
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-add
  (vec-mul
   (vec-cast
    (load
     (buffer column_sums_b 'uint32)
     (ramp
      (sca-add (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16) 16)
      1
      16)
     (aligned 16 0))
    'int32
    16)
   (sca-broadcast (int32_t t5829) 16))
  (vec-add
   (load
    (buffer bias 'int32)
    (ramp (sca-mul output.s0.x.x 16) 1 16)
    (aligned 16 0))
   (sca-broadcast
    (sca-add
     (sca-mul
      (sca-mul (int32_t t5829) (int32_t t5830))
      (int32_t mat_a.extent.0))
     (sca-mul (int32_t t5830) (int32_t t6653)))
    16)))
 (vec-cast
  (load
   (buffer multiplied_no_offsets 'uint32)
   (ramp
    (sca-add (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121)) 4)
    1
    16)
   (aligned 4 0))
  'int32
  16))
template:
  (vs-mpy-add
 ...
 (combine
  #<load-data>
  (broadcast
   ...
   (sca-add
    (sca-mul
     (sca-mul (int32_t t5829) (int32_t t5830))
     (int32_t mat_a.extent.0))
    (sca-mul (int32_t t5830) (int32_t t6653)))))
 (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
 #f
 x?$1731
 #f
 'int32)
axioms:
  '(#t #t)
optimized-halide-expr:
  (vec-add
 (vec-add
  (vec-mul
   (vec-cast
    (load
     (buffer column_sums_b 'uint32)
     (ramp
      (sca-add (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16) 16)
      1
      16)
     (aligned 16 0))
    'int32
    16)
   (sca-broadcast (int32_t t5829) 16))
  (vec-add #<abstr-halide-expr> #<abstr-halide-expr>))
 (vec-cast
  (load
   (buffer multiplied_no_offsets 'uint32)
   (ramp
    (sca-add (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121)) 4)
    1
    16)
   (aligned 4 0))
  'int32
  16))
optimized-template:
  (vs-mpy-add
 ...
 (combine #<abstr-expr> #<abstr-expr>)
 (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
 #f
 x?$1731
 #f
 'int32)
optimized Halide 0:
  (int32_t
 (bvadd (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4)))))) (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app abstr-vals$2000 0) (app abstr-vals$2001 0)))))
optimized x86 0:
  (int32_t
 (bvadd (app abstr-vals$2000 0) (bvadd (app abstr-vals$2001 0) (ite x?$1731 (bv #x00000001 32) (bv #x00000000 32)))))
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-add
  (vec-mul
   (vec-cast
    (load
     (buffer column_sums_b 'uint32)
     (ramp
      (sca-add (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16) 16)
      1
      16)
     (aligned 16 0))
    'int32
    16)
   (sca-broadcast (int32_t t5829) 16))
  (vec-add
   (load
    (buffer bias 'int32)
    (ramp (sca-mul output.s0.x.x 16) 1 16)
    (aligned 16 0))
   (sca-broadcast
    (sca-add
     (sca-mul
      (sca-mul (int32_t t5829) (int32_t t5830))
      (int32_t mat_a.extent.0))
     (sca-mul (int32_t t5830) (int32_t t6653)))
    16)))
 (vec-cast
  (load
   (buffer multiplied_no_offsets 'uint32)
   (ramp
    (sca-add (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121)) 4)
    1
    16)
   (aligned 4 0))
  'int32
  16))
template:
  (vs-mpy-add
 ...
 (combine
  (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
  (vs-mpy-add
   ...
   (combine
    #<load-data>
    (broadcast
     ...
     (sca-add
      (sca-mul
       (sca-mul (int32_t t5829) (int32_t t5830))
       (int32_t mat_a.extent.0))
      (sca-mul (int32_t t5830) (int32_t t6653)))))
   (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
   #f
   #f
   #f
   'int32))
 (list
  (int8_t (bv #x01 8))
  (int8_t (bv #x01 8))
  (union [x?$1467 #(struct:int32_t t5829)] [(! x?$1467) #(struct:int8_t
                                                          (bv #x01 8))]))
 #f
 #f
 #f
 'int32)
axioms:
  '(#t #t)
optimized-halide-expr:
  (vec-add
 (vec-add #<abstr-halide-expr> #<abstr-halide-expr>)
 (vec-cast
  (load
   (buffer multiplied_no_offsets 'uint32)
   (ramp
    (sca-add (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121)) 4)
    1
    16)
   (aligned 4 0))
  'int32
  16))
optimized-template:
  (vs-mpy-add
 ...
 (combine #<abstr-expr> #<abstr-expr>)
 (list
  (int8_t (bv #x01 8))
  (int8_t (bv #x01 8))
  (union [x?$1467 #(struct:int32_t t5829)] [(! x?$1467) #(struct:int8_t
                                                          (bv #x01 8))]))
 #f
 #f
 #f
 'int32)
optimized Halide 0:
  (int32_t
 (bvadd (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4)))))) (bvadd (app abstr-vals$2002 0) (app abstr-vals$2003 0))))
optimized x86 0:
  (int32_t
 (bvadd (bvadd (app abstr-vals$2002 0) (app abstr-vals$2003 0)) (bvmul (ite c$1205 (app abstr-vals$2002 idx$1204) (app abstr-vals$2003 idx$1204)) (ite x?$1467 t5829 (bv #x00000001 32)))))
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-add
  (vec-mul
   (vec-cast
    (load
     (buffer column_sums_b 'uint32)
     (ramp
      (sca-add (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16) 16)
      1
      16)
     (aligned 16 0))
    'int32
    16)
   (sca-broadcast (int32_t t5829) 16))
  (vec-add
   (load
    (buffer bias 'int32)
    (ramp (sca-mul output.s0.x.x 16) 1 16)
    (aligned 16 0))
   (sca-broadcast
    (sca-add
     (sca-mul
      (sca-mul (int32_t t5829) (int32_t t5830))
      (int32_t mat_a.extent.0))
     (sca-mul (int32_t t5830) (int32_t t6653)))
    16)))
 (vec-cast
  (load
   (buffer multiplied_no_offsets 'uint32)
   (ramp
    (sca-add (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121)) 4)
    1
    16)
   (aligned 4 0))
  'int32
  16))
template:
  (vs-mpy-add
 ...
 (combine
  (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
  (vs-mpy-add
   ...
   (combine
    #<load-data>
    (broadcast
     ...
     (sca-add
      (sca-mul
       (sca-mul (int32_t t5829) (int32_t t5830))
       (int32_t mat_a.extent.0))
      (sca-mul (int32_t t5830) (int32_t t6653)))))
   (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
   #f
   #f
   #f
   'int32))
 (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
 #f
 x?$1465
 #f
 'int32)
axioms:
  '(#t #t)
optimized-halide-expr:
  (vec-add
 (vec-add #<abstr-halide-expr> #<abstr-halide-expr>)
 (vec-cast
  (load
   (buffer multiplied_no_offsets 'uint32)
   (ramp
    (sca-add (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121)) 4)
    1
    16)
   (aligned 4 0))
  'int32
  16))
optimized-template:
  (vs-mpy-add
 ...
 (combine #<abstr-expr> #<abstr-expr>)
 (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
 #f
 x?$1465
 #f
 'int32)
optimized Halide 0:
  (int32_t
 (bvadd (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4)))))) (bvadd (app abstr-vals$2004 0) (app abstr-vals$2005 0))))
optimized x86 0:
  (int32_t
 (bvadd (app abstr-vals$2004 0) (bvadd (app abstr-vals$2005 0) (ite x?$1465 (bv #x00000001 32) (bv #x00000000 32)))))
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-add
  (vec-mul
   (vec-cast
    (load
     (buffer column_sums_b 'uint32)
     (ramp
      (sca-add (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16) 16)
      1
      16)
     (aligned 16 0))
    'int32
    16)
   (sca-broadcast (int32_t t5829) 16))
  (vec-add
   (load
    (buffer bias 'int32)
    (ramp (sca-mul output.s0.x.x 16) 1 16)
    (aligned 16 0))
   (sca-broadcast
    (sca-add
     (sca-mul
      (sca-mul (int32_t t5829) (int32_t t5830))
      (int32_t mat_a.extent.0))
     (sca-mul (int32_t t5830) (int32_t t6653)))
    16)))
 (vec-cast
  (load
   (buffer multiplied_no_offsets 'uint32)
   (ramp
    (sca-add (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121)) 4)
    1
    16)
   (aligned 4 0))
  'int32
  16))
template:
  (vs-mpy-add
 ...
 (combine
  (vs-mpy-add
   ...
   (combine
    (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
    (vs-mpy-add
     ...
     (combine
      #<load-data>
      (broadcast
       ...
       (sca-add
        (sca-mul
         (sca-mul (int32_t t5829) (int32_t t5830))
         (int32_t mat_a.extent.0))
        (sca-mul (int32_t t5830) (int32_t t6653)))))
     (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
     #f
     #f
     #f
     'int32))
   (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
   #f
   #f
   #f
   'int32)
  (union [x?$1468 #(struct:vs-mpy-add
                    ...
                    #<combine:
                     #(struct:vs-mpy-add
                       ...
                       #<load-data>
                       (#(struct:int32_t t5829))
                       #f
                       #f
                       #f
                       int32)
                     #(struct:vs-mpy-add
                       ...
                       #<combine:
                        #<load-data>
                        #(struct:broadcast
                          ...
                          #(struct:sca-add
                            #(struct:sca-mul
                              #(struct:sca-mul
                                #(struct:int32_t t5829)
                                #(struct:int32_t t5830))
                              #(struct:int32_t mat_a.extent.0))
                            #(struct:sca-mul
                              #(struct:int32_t t5830)
                              #(struct:int32_t t6653))))>
                       (#(struct:int8_t (bv #x01 8))
                        #(struct:int8_t (bv #x01 8)))
                       #f
                       #f
                       #f
                       int32)>
                    (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8)))
                    #f
                    #f
                    #f
                    int32)] [(! x?$1468) #(struct:cast
                                           ...
                                           #<load-data>
                                           int32
                                           #f)]))
 (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
 #f
 #f
 #f
 'int32)
axioms:
  (union [x?$1468 (#t #t)] [(! x?$1468) (#t)])
optimized-halide-expr:
  (vec-add
 #<abstr-halide-expr>
 (vec-cast
  (load
   (buffer multiplied_no_offsets 'uint32)
   (ramp
    (sca-add (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121)) 4)
    1
    16)
   (aligned 4 0))
  'int32
  16))
optimized-template:
  (vs-mpy-add
 ...
 (combine
  #<abstr-expr>
  (union [x?$1468 #<abstr-expr>] [(! x?$1468) #(struct:cast
                                                ...
                                                #<load-data>
                                                int32
                                                #f)]))
 (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
 #f
 #f
 #f
 'int32)
optimized Halide 0:
  (int32_t
 (bvadd (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4)))))) (app abstr-vals$2006 0)))
optimized x86 0:
  (int32_t
 (bvadd (ite c$1474 (app abstr-vals$2006 idx$1473) (ite x?$1468 (app abstr-vals$2006 idx$1473) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4)))))))) (bvadd (ite c$1470 (app abstr-vals$2006 idx$1469) (ite x?$1468 (app abstr-vals$2006 idx$1469) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4)))))))) (ite c$1472 (app abstr-vals$2006 idx$1471) (ite x?$1468 (app abstr-vals$2006 idx$1471) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4)))))))))))
Ran synthesizer for 401 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-add
  (vec-mul
   (vec-cast
    (load
     (buffer column_sums_b 'uint32)
     (ramp
      (sca-add (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16) 16)
      1
      16)
     (aligned 16 0))
    'int32
    16)
   (sca-broadcast (int32_t t5829) 16))
  (vec-add
   (load
    (buffer bias 'int32)
    (ramp (sca-mul output.s0.x.x 16) 1 16)
    (aligned 16 0))
   (sca-broadcast
    (sca-add
     (sca-mul
      (sca-mul (int32_t t5829) (int32_t t5830))
      (int32_t mat_a.extent.0))
     (sca-mul (int32_t t5830) (int32_t t6653)))
    16)))
 (vec-cast
  (load
   (buffer multiplied_no_offsets 'uint32)
   (ramp
    (sca-add (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121)) 4)
    1
    16)
   (aligned 4 0))
  'int32
  16))
template:
  (vs-mpy-add
 ...
 (combine
  (vs-mpy-add
   ...
   (combine
    #<load-data>
    (broadcast
     ...
     (sca-add
      (sca-mul
       (sca-mul (int32_t t5829) (int32_t t5830))
       (int32_t mat_a.extent.0))
      (sca-mul (int32_t t5830) (int32_t t6653)))))
   (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
   #f
   #f
   #f
   'int32)
  (union [x?$1734 #(struct:vs-mpy-add
                    ...
                    #<combine:
                     #(struct:vs-mpy-add
                       ...
                       #<load-data>
                       (#(struct:int32_t t5829))
                       #f
                       #f
                       #f
                       int32)
                     #(struct:vs-mpy-add
                       ...
                       #<combine:
                        #<load-data>
                        #(struct:broadcast
                          ...
                          #(struct:sca-add
                            #(struct:sca-mul
                              #(struct:sca-mul
                                #(struct:int32_t t5829)
                                #(struct:int32_t t5830))
                              #(struct:int32_t mat_a.extent.0))
                            #(struct:sca-mul
                              #(struct:int32_t t5830)
                              #(struct:int32_t t6653))))>
                       (#(struct:int8_t (bv #x01 8))
                        #(struct:int8_t (bv #x01 8)))
                       #f
                       #f
                       #f
                       int32)>
                    (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8)))
                    #f
                    #f
                    #f
                    int32)] [(! x?$1734) #(struct:cast
                                           ...
                                           #<load-data>
                                           int32
                                           #f)]))
 (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
 #f
 #f
 #f
 'int32)
axioms:
  (union [x?$1734 (#t #t)] [(! x?$1734) (#t)])
optimized-halide-expr:
  (vec-add
 (vec-add
  (vec-mul
   (vec-cast
    (load
     (buffer column_sums_b 'uint32)
     (ramp
      (sca-add (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16) 16)
      1
      16)
     (aligned 16 0))
    'int32
    16)
   (sca-broadcast (int32_t t5829) 16))
  #<abstr-halide-expr>)
 (vec-cast
  (load
   (buffer multiplied_no_offsets 'uint32)
   (ramp
    (sca-add (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121)) 4)
    1
    16)
   (aligned 4 0))
  'int32
  16))
optimized-template:
  (vs-mpy-add
 ...
 (combine
  #<abstr-expr>
  (union [x?$1734 #(struct:vs-mpy-add
                    ...
                    #<combine:
                     #(struct:vs-mpy-add
                       ...
                       #<load-data>
                       (#(struct:int32_t t5829))
                       #f
                       #f
                       #f
                       int32)
                     #<abstr-expr>>
                    (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8)))
                    #f
                    #f
                    #f
                    int32)] [(! x?$1734) #(struct:cast
                                           ...
                                           #<load-data>
                                           int32
                                           #f)]))
 (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
 #f
 #f
 #f
 'int32)
optimized Halide 0:
  (int32_t
 (bvadd (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4)))))) (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (app abstr-vals$2007 0))))
optimized x86 0:
  (int32_t
 (bvadd (ite c$1740 (app abstr-vals$2007 idx$1739) (ite x?$1734 (bvadd (ite (|| (= 1 (* 2 idx$1739)) (&& c$1205 (= 2 (* 2 idx$1739))) (&& c$1207 (= 3 (* 2 idx$1739))) (&& c$1209 (= 4 (* 2 idx$1739))) (&& c$1211 (= 5 (* 2 idx$1739))) (&& c$1213 (= 6 (* 2 idx$1739))) (&& c$1215 (= 7 (* 2 idx$1739))) (&& c$1217 (= 8 (* 2 idx$1739))) (&& c$1219 (= 9 (* 2 idx$1739))) (&& c$1221 (= 10 (* 2 idx$1739))) (&& c$1223 (= 11 (* 2 idx$1739))) (&& c$1225 (= 12 (* 2 idx$1739))) (&& c$1227 (= 13 (* 2 idx$1739))) (&& c$1229 (= 14 (* 2 idx$1739))) (&& c$1231 (= 15 (* 2 idx$1739))) (&& c$1233 (= 16 (* 2 idx$1739))) (&& c$1235 (= 17 (* 2 idx$1739))) (&& c$1237 (= 18 (* 2 idx$1739))) (&& c$1239 (= 19 (* 2 idx$1739))) (&& c$1241 (= 20 (* 2 idx$1739))) (&& c$1243 (= 21 (* 2 idx$1739))) (&& c$1245 (= 22 (* 2 idx$1739))) (&& c$1247 (= 23 (* 2 idx$1739))) (&& c$1249 (= 24 (* 2 idx$1739))) (&& c$1251 (= 25 (* 2 idx$1739))) (&& c$1253 (= 26 (* 2 idx$1739))) (&& c$1255 (= 27 (* 2 idx$1739))) (&& c$1257 (= 28 (* 2 idx$1739))) (&& c$1259 (= 29 (* 2 idx$1739))) (&& c$1261 (= 30 (* 2 idx$1739))) (&& c$1263 (= 31 (* 2 idx$1739))) (&& c$1265 (= 32 (* 2 idx$1739))) (&& c$1267 (= 33 (* 2 idx$1739))) (&& c$1269 (= 34 (* 2 idx$1739))) (&& c$1271 (= 35 (* 2 idx$1739))) (&& c$1273 (= 36 (* 2 idx$1739))) (&& c$1275 (= 37 (* 2 idx$1739))) (&& c$1277 (= 38 (* 2 idx$1739))) (&& c$1279 (= 39 (* 2 idx$1739))) (&& c$1281 (= 40 (* 2 idx$1739))) (&& c$1283 (= 41 (* 2 idx$1739))) (&& c$1285 (= 42 (* 2 idx$1739))) (&& c$1287 (= 43 (* 2 idx$1739))) (&& c$1289 (= 44 (* 2 idx$1739))) (&& c$1291 (= 45 (* 2 idx$1739))) (&& c$1293 (= 46 (* 2 idx$1739))) (&& c$1295 (= 47 (* 2 idx$1739))) (&& c$1297 (= 48 (* 2 idx$1739))) (&& c$1299 (= 49 (* 2 idx$1739))) (&& c$1301 (= 50 (* 2 idx$1739))) (&& c$1303 (= 51 (* 2 idx$1739))) (&& c$1305 (= 52 (* 2 idx$1739))) (&& c$1307 (= 53 (* 2 idx$1739))) (&& c$1309 (= 54 (* 2 idx$1739))) (&& c$1311 (= 55 (* 2 idx$1739))) (&& c$1313 (= 56 (* 2 idx$1739))) (&& c$1315 (= 57 (* 2 idx$1739))) (&& c$1317 (= 58 (* 2 idx$1739))) (&& c$1319 (= 59 (* 2 idx$1739))) (&& c$1321 (= 60 (* 2 idx$1739))) (&& c$1323 (= 61 (* 2 idx$1739))) (&& c$1325 (= 62 (* 2 idx$1739))) (&& c$1327 (= 63 (* 2 idx$1739)))) (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (app abstr-vals$2007 (ite* (⊢ (= 2 (* 2 idx$1739)) idx$1204) (⊢ (= 3 (* 2 idx$1739)) idx$1206) (⊢ (= 4 (* 2 idx$1739)) idx$1208) (⊢ (= 5 (* 2 idx$1739)) idx$1210) (⊢ (= 6 (* 2 idx$1739)) idx$1212) (⊢ (= 7 (* 2 idx$1739)) idx$1214) (⊢ (= 8 (* 2 idx$1739)) idx$1216) (⊢ (= 9 (* 2 idx$1739)) idx$1218) (⊢ (= 10 (* 2 idx$1739)) idx$1220) (⊢ (= 11 (* 2 idx$1739)) idx$1222) (⊢ (= 12 (* 2 idx$1739)) idx$1224) (⊢ (= 13 (* 2 idx$1739)) idx$1226) (⊢ (= 14 (* 2 idx$1739)) idx$1228) (⊢ (= 15 (* 2 idx$1739)) idx$1230) (⊢ (= 16 (* 2 idx$1739)) idx$1232) (⊢ (= 17 (* 2 idx$1739)) idx$1234) (⊢ (= 18 (* 2 idx$1739)) idx$1236) (⊢ (= 19 (* 2 idx$1739)) idx$1238) (⊢ (= 20 (* 2 idx$1739)) idx$1240) (⊢ (= 21 (* 2 idx$1739)) idx$1242) (⊢ (= 22 (* 2 idx$1739)) idx$1244) (⊢ (= 23 (* 2 idx$1739)) idx$1246) (⊢ (= 24 (* 2 idx$1739)) idx$1248) (⊢ (= 25 (* 2 idx$1739)) idx$1250) (⊢ (= 26 (* 2 idx$1739)) idx$1252) (⊢ (= 27 (* 2 idx$1739)) idx$1254) (⊢ (= 28 (* 2 idx$1739)) idx$1256) (⊢ (= 29 (* 2 idx$1739)) idx$1258) (⊢ (= 30 (* 2 idx$1739)) idx$1260) (⊢ (= 31 (* 2 idx$1739)) idx$1262) (⊢ (= 32 (* 2 idx$1739)) idx$1264) (⊢ (= 33 (* 2 idx$1739)) idx$1266) (⊢ (= 34 (* 2 idx$1739)) idx$1268) (⊢ (= 35 (* 2 idx$1739)) idx$1270) (⊢ (= 36 (* 2 idx$1739)) idx$1272) (⊢ (= 37 (* 2 idx$1739)) idx$1274) (⊢ (= 38 (* 2 idx$1739)) idx$1276) (⊢ (= 39 (* 2 idx$1739)) idx$1278) (⊢ (= 40 (* 2 idx$1739)) idx$1280) (⊢ (= 41 (* 2 idx$1739)) idx$1282) (⊢ (= 42 (* 2 idx$1739)) idx$1284) (⊢ (= 43 (* 2 idx$1739)) idx$1286) (⊢ (= 44 (* 2 idx$1739)) idx$1288) (⊢ (= 45 (* 2 idx$1739)) idx$1290) (⊢ (= 46 (* 2 idx$1739)) idx$1292) (⊢ (= 47 (* 2 idx$1739)) idx$1294) (⊢ (= 48 (* 2 idx$1739)) idx$1296) (⊢ (= 49 (* 2 idx$1739)) idx$1298) (⊢ (= 50 (* 2 idx$1739)) idx$1300) (⊢ (= 51 (* 2 idx$1739)) idx$1302) (⊢ (= 52 (* 2 idx$1739)) idx$1304) (⊢ (= 53 (* 2 idx$1739)) idx$1306) (⊢ (= 54 (* 2 idx$1739)) idx$1308) (⊢ (= 55 (* 2 idx$1739)) idx$1310) (⊢ (= 56 (* 2 idx$1739)) idx$1312) (⊢ (= 57 (* 2 idx$1739)) idx$1314) (⊢ (= 58 (* 2 idx$1739)) idx$1316) (⊢ (= 59 (* 2 idx$1739)) idx$1318) (⊢ (= 60 (* 2 idx$1739)) idx$1320) (⊢ (= 61 (* 2 idx$1739)) idx$1322) (⊢ (= 62 (* 2 idx$1739)) idx$1324) (⊢ (= 63 (* 2 idx$1739)) idx$1326) (⊢ (|| (= 0 (* 2 idx$1739)) (= 1 (* 2 idx$1739))) 0)))) (ite (|| (= 1 (+ 1 (* 2 idx$1739))) (&& c$1205 (= 2 (+ 1 (* 2 idx$1739)))) (&& c$1207 (= 3 (+ 1 (* 2 idx$1739)))) (&& c$1209 (= 4 (+ 1 (* 2 idx$1739)))) (&& c$1211 (= 5 (+ 1 (* 2 idx$1739)))) (&& c$1213 (= 6 (+ 1 (* 2 idx$1739)))) (&& c$1215 (= 7 (+ 1 (* 2 idx$1739)))) (&& c$1217 (= 8 (+ 1 (* 2 idx$1739)))) (&& c$1219 (= 9 (+ 1 (* 2 idx$1739)))) (&& c$1221 (= 10 (+ 1 (* 2 idx$1739)))) (&& c$1223 (= 11 (+ 1 (* 2 idx$1739)))) (&& c$1225 (= 12 (+ 1 (* 2 idx$1739)))) (&& c$1227 (= 13 (+ 1 (* 2 idx$1739)))) (&& c$1229 (= 14 (+ 1 (* 2 idx$1739)))) (&& c$1231 (= 15 (+ 1 (* 2 idx$1739)))) (&& c$1233 (= 16 (+ 1 (* 2 idx$1739)))) (&& c$1235 (= 17 (+ 1 (* 2 idx$1739)))) (&& c$1237 (= 18 (+ 1 (* 2 idx$1739)))) (&& c$1239 (= 19 (+ 1 (* 2 idx$1739)))) (&& c$1241 (= 20 (+ 1 (* 2 idx$1739)))) (&& c$1243 (= 21 (+ 1 (* 2 idx$1739)))) (&& c$1245 (= 22 (+ 1 (* 2 idx$1739)))) (&& c$1247 (= 23 (+ 1 (* 2 idx$1739)))) (&& c$1249 (= 24 (+ 1 (* 2 idx$1739)))) (&& c$1251 (= 25 (+ 1 (* 2 idx$1739)))) (&& c$1253 (= 26 (+ 1 (* 2 idx$1739)))) (&& c$1255 (= 27 (+ 1 (* 2 idx$1739)))) (&& c$1257 (= 28 (+ 1 (* 2 idx$1739)))) (&& c$1259 (= 29 (+ 1 (* 2 idx$1739)))) (&& c$1261 (= 30 (+ 1 (* 2 idx$1739)))) (&& c$1263 (= 31 (+ 1 (* 2 idx$1739)))) (&& c$1265 (= 32 (+ 1 (* 2 idx$1739)))) (&& c$1267 (= 33 (+ 1 (* 2 idx$1739)))) (&& c$1269 (= 34 (+ 1 (* 2 idx$1739)))) (&& c$1271 (= 35 (+ 1 (* 2 idx$1739)))) (&& c$1273 (= 36 (+ 1 (* 2 idx$1739)))) (&& c$1275 (= 37 (+ 1 (* 2 idx$1739)))) (&& c$1277 (= 38 (+ 1 (* 2 idx$1739)))) (&& c$1279 (= 39 (+ 1 (* 2 idx$1739)))) (&& c$1281 (= 40 (+ 1 (* 2 idx$1739)))) (&& c$1283 (= 41 (+ 1 (* 2 idx$1739)))) (&& c$1285 (= 42 (+ 1 (* 2 idx$1739)))) (&& c$1287 (= 43 (+ 1 (* 2 idx$1739)))) (&& c$1289 (= 44 (+ 1 (* 2 idx$1739)))) (&& c$1291 (= 45 (+ 1 (* 2 idx$1739)))) (&& c$1293 (= 46 (+ 1 (* 2 idx$1739)))) (&& c$1295 (= 47 (+ 1 (* 2 idx$1739)))) (&& c$1297 (= 48 (+ 1 (* 2 idx$1739)))) (&& c$1299 (= 49 (+ 1 (* 2 idx$1739)))) (&& c$1301 (= 50 (+ 1 (* 2 idx$1739)))) (&& c$1303 (= 51 (+ 1 (* 2 idx$1739)))) (&& c$1305 (= 52 (+ 1 (* 2 idx$1739)))) (&& c$1307 (= 53 (+ 1 (* 2 idx$1739)))) (&& c$1309 (= 54 (+ 1 (* 2 idx$1739)))) (&& c$1311 (= 55 (+ 1 (* 2 idx$1739)))) (&& c$1313 (= 56 (+ 1 (* 2 idx$1739)))) (&& c$1315 (= 57 (+ 1 (* 2 idx$1739)))) (&& c$1317 (= 58 (+ 1 (* 2 idx$1739)))) (&& c$1319 (= 59 (+ 1 (* 2 idx$1739)))) (&& c$1321 (= 60 (+ 1 (* 2 idx$1739)))) (&& c$1323 (= 61 (+ 1 (* 2 idx$1739)))) (&& c$1325 (= 62 (+ 1 (* 2 idx$1739)))) (&& c$1327 (= 63 (+ 1 (* 2 idx$1739))))) (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (app abstr-vals$2007 (ite* (⊢ (= 2 (+ 1 (* 2 idx$1739))) idx$1204) (⊢ (= 3 (+ 1 (* 2 idx$1739))) idx$1206) (⊢ (= 4 (+ 1 (* 2 idx$1739))) idx$1208) (⊢ (= 5 (+ 1 (* 2 idx$1739))) idx$1210) (⊢ (= 6 (+ 1 (* 2 idx$1739))) idx$1212) (⊢ (= 7 (+ 1 (* 2 idx$1739))) idx$1214) (⊢ (= 8 (+ 1 (* 2 idx$1739))) idx$1216) (⊢ (= 9 (+ 1 (* 2 idx$1739))) idx$1218) (⊢ (= 10 (+ 1 (* 2 idx$1739))) idx$1220) (⊢ (= 11 (+ 1 (* 2 idx$1739))) idx$1222) (⊢ (= 12 (+ 1 (* 2 idx$1739))) idx$1224) (⊢ (= 13 (+ 1 (* 2 idx$1739))) idx$1226) (⊢ (= 14 (+ 1 (* 2 idx$1739))) idx$1228) (⊢ (= 15 (+ 1 (* 2 idx$1739))) idx$1230) (⊢ (= 16 (+ 1 (* 2 idx$1739))) idx$1232) (⊢ (= 17 (+ 1 (* 2 idx$1739))) idx$1234) (⊢ (= 18 (+ 1 (* 2 idx$1739))) idx$1236) (⊢ (= 19 (+ 1 (* 2 idx$1739))) idx$1238) (⊢ (= 20 (+ 1 (* 2 idx$1739))) idx$1240) (⊢ (= 21 (+ 1 (* 2 idx$1739))) idx$1242) (⊢ (= 22 (+ 1 (* 2 idx$1739))) idx$1244) (⊢ (= 23 (+ 1 (* 2 idx$1739))) idx$1246) (⊢ (= 24 (+ 1 (* 2 idx$1739))) idx$1248) (⊢ (= 25 (+ 1 (* 2 idx$1739))) idx$1250) (⊢ (= 26 (+ 1 (* 2 idx$1739))) idx$1252) (⊢ (= 27 (+ 1 (* 2 idx$1739))) idx$1254) (⊢ (= 28 (+ 1 (* 2 idx$1739))) idx$1256) (⊢ (= 29 (+ 1 (* 2 idx$1739))) idx$1258) (⊢ (= 30 (+ 1 (* 2 idx$1739))) idx$1260) (⊢ (= 31 (+ 1 (* 2 idx$1739))) idx$1262) (⊢ (= 32 (+ 1 (* 2 idx$1739))) idx$1264) (⊢ (= 33 (+ 1 (* 2 idx$1739))) idx$1266) (⊢ (= 34 (+ 1 (* 2 idx$1739))) idx$1268) (⊢ (= 35 (+ 1 (* 2 idx$1739))) idx$1270) (⊢ (= 36 (+ 1 (* 2 idx$1739))) idx$1272) (⊢ (= 37 (+ 1 (* 2 idx$1739))) idx$1274) (⊢ (= 38 (+ 1 (* 2 idx$1739))) idx$1276) (⊢ (= 39 (+ 1 (* 2 idx$1739))) idx$1278) (⊢ (= 40 (+ 1 (* 2 idx$1739))) idx$1280) (⊢ (= 41 (+ 1 (* 2 idx$1739))) idx$1282) (⊢ (= 42 (+ 1 (* 2 idx$1739))) idx$1284) (⊢ (= 43 (+ 1 (* 2 idx$1739))) idx$1286) (⊢ (= 44 (+ 1 (* 2 idx$1739))) idx$1288) (⊢ (= 45 (+ 1 (* 2 idx$1739))) idx$1290) (⊢ (= 46 (+ 1 (* 2 idx$1739))) idx$1292) (⊢ (= 47 (+ 1 (* 2 idx$1739))) idx$1294) (⊢ (= 48 (+ 1 (* 2 idx$1739))) idx$1296) (⊢ (= 49 (+ 1 (* 2 idx$1739))) idx$1298) (⊢ (= 50 (+ 1 (* 2 idx$1739))) idx$1300) (⊢ (= 51 (+ 1 (* 2 idx$1739))) idx$1302) (⊢ (= 52 (+ 1 (* 2 idx$1739))) idx$1304) (⊢ (= 53 (+ 1 (* 2 idx$1739))) idx$1306) (⊢ (= 54 (+ 1 (* 2 idx$1739))) idx$1308) (⊢ (= 55 (+ 1 (* 2 idx$1739))) idx$1310) (⊢ (= 56 (+ 1 (* 2 idx$1739))) idx$1312) (⊢ (= 57 (+ 1 (* 2 idx$1739))) idx$1314) (⊢ (= 58 (+ 1 (* 2 idx$1739))) idx$1316) (⊢ (= 59 (+ 1 (* 2 idx$1739))) idx$1318) (⊢ (= 60 (+ 1 (* 2 idx$1739))) idx$1320) (⊢ (= 61 (+ 1 (* 2 idx$1739))) idx$1322) (⊢ (= 62 (+ 1 (* 2 idx$1739))) idx$1324) (⊢ (= 63 (+ 1 (* 2 idx$1739))) idx$1326) (⊢ (|| (= 0 (+ 1 (* 2 idx$1739))) (= 1 (+ 1 (* 2 idx$1739)))) 0))))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4)))))))) (bvadd (ite c$1736 (app abstr-vals$2007 idx$1735) (ite x?$1734 (bvadd (ite (|| (= 1 (* 2 idx$1735)) (&& c$1205 (= 2 (* 2 idx$1735))) (&& c$1207 (= 3 (* 2 idx$1735))) (&& c$1209 (= 4 (* 2 idx$1735))) (&& c$1211 (= 5 (* 2 idx$1735))) (&& c$1213 (= 6 (* 2 idx$1735))) (&& c$1215 (= 7 (* 2 idx$1735))) (&& c$1217 (= 8 (* 2 idx$1735))) (&& c$1219 (= 9 (* 2 idx$1735))) (&& c$1221 (= 10 (* 2 idx$1735))) (&& c$1223 (= 11 (* 2 idx$1735))) (&& c$1225 (= 12 (* 2 idx$1735))) (&& c$1227 (= 13 (* 2 idx$1735))) (&& c$1229 (= 14 (* 2 idx$1735))) (&& c$1231 (= 15 (* 2 idx$1735))) (&& c$1233 (= 16 (* 2 idx$1735))) (&& c$1235 (= 17 (* 2 idx$1735))) (&& c$1237 (= 18 (* 2 idx$1735))) (&& c$1239 (= 19 (* 2 idx$1735))) (&& c$1241 (= 20 (* 2 idx$1735))) (&& c$1243 (= 21 (* 2 idx$1735))) (&& c$1245 (= 22 (* 2 idx$1735))) (&& c$1247 (= 23 (* 2 idx$1735))) (&& c$1249 (= 24 (* 2 idx$1735))) (&& c$1251 (= 25 (* 2 idx$1735))) (&& c$1253 (= 26 (* 2 idx$1735))) (&& c$1255 (= 27 (* 2 idx$1735))) (&& c$1257 (= 28 (* 2 idx$1735))) (&& c$1259 (= 29 (* 2 idx$1735))) (&& c$1261 (= 30 (* 2 idx$1735))) (&& c$1263 (= 31 (* 2 idx$1735))) (&& c$1265 (= 32 (* 2 idx$1735))) (&& c$1267 (= 33 (* 2 idx$1735))) (&& c$1269 (= 34 (* 2 idx$1735))) (&& c$1271 (= 35 (* 2 idx$1735))) (&& c$1273 (= 36 (* 2 idx$1735))) (&& c$1275 (= 37 (* 2 idx$1735))) (&& c$1277 (= 38 (* 2 idx$1735))) (&& c$1279 (= 39 (* 2 idx$1735))) (&& c$1281 (= 40 (* 2 idx$1735))) (&& c$1283 (= 41 (* 2 idx$1735))) (&& c$1285 (= 42 (* 2 idx$1735))) (&& c$1287 (= 43 (* 2 idx$1735))) (&& c$1289 (= 44 (* 2 idx$1735))) (&& c$1291 (= 45 (* 2 idx$1735))) (&& c$1293 (= 46 (* 2 idx$1735))) (&& c$1295 (= 47 (* 2 idx$1735))) (&& c$1297 (= 48 (* 2 idx$1735))) (&& c$1299 (= 49 (* 2 idx$1735))) (&& c$1301 (= 50 (* 2 idx$1735))) (&& c$1303 (= 51 (* 2 idx$1735))) (&& c$1305 (= 52 (* 2 idx$1735))) (&& c$1307 (= 53 (* 2 idx$1735))) (&& c$1309 (= 54 (* 2 idx$1735))) (&& c$1311 (= 55 (* 2 idx$1735))) (&& c$1313 (= 56 (* 2 idx$1735))) (&& c$1315 (= 57 (* 2 idx$1735))) (&& c$1317 (= 58 (* 2 idx$1735))) (&& c$1319 (= 59 (* 2 idx$1735))) (&& c$1321 (= 60 (* 2 idx$1735))) (&& c$1323 (= 61 (* 2 idx$1735))) (&& c$1325 (= 62 (* 2 idx$1735))) (&& c$1327 (= 63 (* 2 idx$1735)))) (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (app abstr-vals$2007 (ite* (⊢ (= 2 (* 2 idx$1735)) idx$1204) (⊢ (= 3 (* 2 idx$1735)) idx$1206) (⊢ (= 4 (* 2 idx$1735)) idx$1208) (⊢ (= 5 (* 2 idx$1735)) idx$1210) (⊢ (= 6 (* 2 idx$1735)) idx$1212) (⊢ (= 7 (* 2 idx$1735)) idx$1214) (⊢ (= 8 (* 2 idx$1735)) idx$1216) (⊢ (= 9 (* 2 idx$1735)) idx$1218) (⊢ (= 10 (* 2 idx$1735)) idx$1220) (⊢ (= 11 (* 2 idx$1735)) idx$1222) (⊢ (= 12 (* 2 idx$1735)) idx$1224) (⊢ (= 13 (* 2 idx$1735)) idx$1226) (⊢ (= 14 (* 2 idx$1735)) idx$1228) (⊢ (= 15 (* 2 idx$1735)) idx$1230) (⊢ (= 16 (* 2 idx$1735)) idx$1232) (⊢ (= 17 (* 2 idx$1735)) idx$1234) (⊢ (= 18 (* 2 idx$1735)) idx$1236) (⊢ (= 19 (* 2 idx$1735)) idx$1238) (⊢ (= 20 (* 2 idx$1735)) idx$1240) (⊢ (= 21 (* 2 idx$1735)) idx$1242) (⊢ (= 22 (* 2 idx$1735)) idx$1244) (⊢ (= 23 (* 2 idx$1735)) idx$1246) (⊢ (= 24 (* 2 idx$1735)) idx$1248) (⊢ (= 25 (* 2 idx$1735)) idx$1250) (⊢ (= 26 (* 2 idx$1735)) idx$1252) (⊢ (= 27 (* 2 idx$1735)) idx$1254) (⊢ (= 28 (* 2 idx$1735)) idx$1256) (⊢ (= 29 (* 2 idx$1735)) idx$1258) (⊢ (= 30 (* 2 idx$1735)) idx$1260) (⊢ (= 31 (* 2 idx$1735)) idx$1262) (⊢ (= 32 (* 2 idx$1735)) idx$1264) (⊢ (= 33 (* 2 idx$1735)) idx$1266) (⊢ (= 34 (* 2 idx$1735)) idx$1268) (⊢ (= 35 (* 2 idx$1735)) idx$1270) (⊢ (= 36 (* 2 idx$1735)) idx$1272) (⊢ (= 37 (* 2 idx$1735)) idx$1274) (⊢ (= 38 (* 2 idx$1735)) idx$1276) (⊢ (= 39 (* 2 idx$1735)) idx$1278) (⊢ (= 40 (* 2 idx$1735)) idx$1280) (⊢ (= 41 (* 2 idx$1735)) idx$1282) (⊢ (= 42 (* 2 idx$1735)) idx$1284) (⊢ (= 43 (* 2 idx$1735)) idx$1286) (⊢ (= 44 (* 2 idx$1735)) idx$1288) (⊢ (= 45 (* 2 idx$1735)) idx$1290) (⊢ (= 46 (* 2 idx$1735)) idx$1292) (⊢ (= 47 (* 2 idx$1735)) idx$1294) (⊢ (= 48 (* 2 idx$1735)) idx$1296) (⊢ (= 49 (* 2 idx$1735)) idx$1298) (⊢ (= 50 (* 2 idx$1735)) idx$1300) (⊢ (= 51 (* 2 idx$1735)) idx$1302) (⊢ (= 52 (* 2 idx$1735)) idx$1304) (⊢ (= 53 (* 2 idx$1735)) idx$1306) (⊢ (= 54 (* 2 idx$1735)) idx$1308) (⊢ (= 55 (* 2 idx$1735)) idx$1310) (⊢ (= 56 (* 2 idx$1735)) idx$1312) (⊢ (= 57 (* 2 idx$1735)) idx$1314) (⊢ (= 58 (* 2 idx$1735)) idx$1316) (⊢ (= 59 (* 2 idx$1735)) idx$1318) (⊢ (= 60 (* 2 idx$1735)) idx$1320) (⊢ (= 61 (* 2 idx$1735)) idx$1322) (⊢ (= 62 (* 2 idx$1735)) idx$1324) (⊢ (= 63 (* 2 idx$1735)) idx$1326) (⊢ (|| (= 0 (* 2 idx$1735)) (= 1 (* 2 idx$1735))) 0)))) (ite (|| (= 1 (+ 1 (* 2 idx$1735))) (&& c$1205 (= 2 (+ 1 (* 2 idx$1735)))) (&& c$1207 (= 3 (+ 1 (* 2 idx$1735)))) (&& c$1209 (= 4 (+ 1 (* 2 idx$1735)))) (&& c$1211 (= 5 (+ 1 (* 2 idx$1735)))) (&& c$1213 (= 6 (+ 1 (* 2 idx$1735)))) (&& c$1215 (= 7 (+ 1 (* 2 idx$1735)))) (&& c$1217 (= 8 (+ 1 (* 2 idx$1735)))) (&& c$1219 (= 9 (+ 1 (* 2 idx$1735)))) (&& c$1221 (= 10 (+ 1 (* 2 idx$1735)))) (&& c$1223 (= 11 (+ 1 (* 2 idx$1735)))) (&& c$1225 (= 12 (+ 1 (* 2 idx$1735)))) (&& c$1227 (= 13 (+ 1 (* 2 idx$1735)))) (&& c$1229 (= 14 (+ 1 (* 2 idx$1735)))) (&& c$1231 (= 15 (+ 1 (* 2 idx$1735)))) (&& c$1233 (= 16 (+ 1 (* 2 idx$1735)))) (&& c$1235 (= 17 (+ 1 (* 2 idx$1735)))) (&& c$1237 (= 18 (+ 1 (* 2 idx$1735)))) (&& c$1239 (= 19 (+ 1 (* 2 idx$1735)))) (&& c$1241 (= 20 (+ 1 (* 2 idx$1735)))) (&& c$1243 (= 21 (+ 1 (* 2 idx$1735)))) (&& c$1245 (= 22 (+ 1 (* 2 idx$1735)))) (&& c$1247 (= 23 (+ 1 (* 2 idx$1735)))) (&& c$1249 (= 24 (+ 1 (* 2 idx$1735)))) (&& c$1251 (= 25 (+ 1 (* 2 idx$1735)))) (&& c$1253 (= 26 (+ 1 (* 2 idx$1735)))) (&& c$1255 (= 27 (+ 1 (* 2 idx$1735)))) (&& c$1257 (= 28 (+ 1 (* 2 idx$1735)))) (&& c$1259 (= 29 (+ 1 (* 2 idx$1735)))) (&& c$1261 (= 30 (+ 1 (* 2 idx$1735)))) (&& c$1263 (= 31 (+ 1 (* 2 idx$1735)))) (&& c$1265 (= 32 (+ 1 (* 2 idx$1735)))) (&& c$1267 (= 33 (+ 1 (* 2 idx$1735)))) (&& c$1269 (= 34 (+ 1 (* 2 idx$1735)))) (&& c$1271 (= 35 (+ 1 (* 2 idx$1735)))) (&& c$1273 (= 36 (+ 1 (* 2 idx$1735)))) (&& c$1275 (= 37 (+ 1 (* 2 idx$1735)))) (&& c$1277 (= 38 (+ 1 (* 2 idx$1735)))) (&& c$1279 (= 39 (+ 1 (* 2 idx$1735)))) (&& c$1281 (= 40 (+ 1 (* 2 idx$1735)))) (&& c$1283 (= 41 (+ 1 (* 2 idx$1735)))) (&& c$1285 (= 42 (+ 1 (* 2 idx$1735)))) (&& c$1287 (= 43 (+ 1 (* 2 idx$1735)))) (&& c$1289 (= 44 (+ 1 (* 2 idx$1735)))) (&& c$1291 (= 45 (+ 1 (* 2 idx$1735)))) (&& c$1293 (= 46 (+ 1 (* 2 idx$1735)))) (&& c$1295 (= 47 (+ 1 (* 2 idx$1735)))) (&& c$1297 (= 48 (+ 1 (* 2 idx$1735)))) (&& c$1299 (= 49 (+ 1 (* 2 idx$1735)))) (&& c$1301 (= 50 (+ 1 (* 2 idx$1735)))) (&& c$1303 (= 51 (+ 1 (* 2 idx$1735)))) (&& c$1305 (= 52 (+ 1 (* 2 idx$1735)))) (&& c$1307 (= 53 (+ 1 (* 2 idx$1735)))) (&& c$1309 (= 54 (+ 1 (* 2 idx$1735)))) (&& c$1311 (= 55 (+ 1 (* 2 idx$1735)))) (&& c$1313 (= 56 (+ 1 (* 2 idx$1735)))) (&& c$1315 (= 57 (+ 1 (* 2 idx$1735)))) (&& c$1317 (= 58 (+ 1 (* 2 idx$1735)))) (&& c$1319 (= 59 (+ 1 (* 2 idx$1735)))) (&& c$1321 (= 60 (+ 1 (* 2 idx$1735)))) (&& c$1323 (= 61 (+ 1 (* 2 idx$1735)))) (&& c$1325 (= 62 (+ 1 (* 2 idx$1735)))) (&& c$1327 (= 63 (+ 1 (* 2 idx$1735))))) (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (app abstr-vals$2007 (ite* (⊢ (= 2 (+ 1 (* 2 idx$1735))) idx$1204) (⊢ (= 3 (+ 1 (* 2 idx$1735))) idx$1206) (⊢ (= 4 (+ 1 (* 2 idx$1735))) idx$1208) (⊢ (= 5 (+ 1 (* 2 idx$1735))) idx$1210) (⊢ (= 6 (+ 1 (* 2 idx$1735))) idx$1212) (⊢ (= 7 (+ 1 (* 2 idx$1735))) idx$1214) (⊢ (= 8 (+ 1 (* 2 idx$1735))) idx$1216) (⊢ (= 9 (+ 1 (* 2 idx$1735))) idx$1218) (⊢ (= 10 (+ 1 (* 2 idx$1735))) idx$1220) (⊢ (= 11 (+ 1 (* 2 idx$1735))) idx$1222) (⊢ (= 12 (+ 1 (* 2 idx$1735))) idx$1224) (⊢ (= 13 (+ 1 (* 2 idx$1735))) idx$1226) (⊢ (= 14 (+ 1 (* 2 idx$1735))) idx$1228) (⊢ (= 15 (+ 1 (* 2 idx$1735))) idx$1230) (⊢ (= 16 (+ 1 (* 2 idx$1735))) idx$1232) (⊢ (= 17 (+ 1 (* 2 idx$1735))) idx$1234) (⊢ (= 18 (+ 1 (* 2 idx$1735))) idx$1236) (⊢ (= 19 (+ 1 (* 2 idx$1735))) idx$1238) (⊢ (= 20 (+ 1 (* 2 idx$1735))) idx$1240) (⊢ (= 21 (+ 1 (* 2 idx$1735))) idx$1242) (⊢ (= 22 (+ 1 (* 2 idx$1735))) idx$1244) (⊢ (= 23 (+ 1 (* 2 idx$1735))) idx$1246) (⊢ (= 24 (+ 1 (* 2 idx$1735))) idx$1248) (⊢ (= 25 (+ 1 (* 2 idx$1735))) idx$1250) (⊢ (= 26 (+ 1 (* 2 idx$1735))) idx$1252) (⊢ (= 27 (+ 1 (* 2 idx$1735))) idx$1254) (⊢ (= 28 (+ 1 (* 2 idx$1735))) idx$1256) (⊢ (= 29 (+ 1 (* 2 idx$1735))) idx$1258) (⊢ (= 30 (+ 1 (* 2 idx$1735))) idx$1260) (⊢ (= 31 (+ 1 (* 2 idx$1735))) idx$1262) (⊢ (= 32 (+ 1 (* 2 idx$1735))) idx$1264) (⊢ (= 33 (+ 1 (* 2 idx$1735))) idx$1266) (⊢ (= 34 (+ 1 (* 2 idx$1735))) idx$1268) (⊢ (= 35 (+ 1 (* 2 idx$1735))) idx$1270) (⊢ (= 36 (+ 1 (* 2 idx$1735))) idx$1272) (⊢ (= 37 (+ 1 (* 2 idx$1735))) idx$1274) (⊢ (= 38 (+ 1 (* 2 idx$1735))) idx$1276) (⊢ (= 39 (+ 1 (* 2 idx$1735))) idx$1278) (⊢ (= 40 (+ 1 (* 2 idx$1735))) idx$1280) (⊢ (= 41 (+ 1 (* 2 idx$1735))) idx$1282) (⊢ (= 42 (+ 1 (* 2 idx$1735))) idx$1284) (⊢ (= 43 (+ 1 (* 2 idx$1735))) idx$1286) (⊢ (= 44 (+ 1 (* 2 idx$1735))) idx$1288) (⊢ (= 45 (+ 1 (* 2 idx$1735))) idx$1290) (⊢ (= 46 (+ 1 (* 2 idx$1735))) idx$1292) (⊢ (= 47 (+ 1 (* 2 idx$1735))) idx$1294) (⊢ (= 48 (+ 1 (* 2 idx$1735))) idx$1296) (⊢ (= 49 (+ 1 (* 2 idx$1735))) idx$1298) (⊢ (= 50 (+ 1 (* 2 idx$1735))) idx$1300) (⊢ (= 51 (+ 1 (* 2 idx$1735))) idx$1302) (⊢ (= 52 (+ 1 (* 2 idx$1735))) idx$1304) (⊢ (= 53 (+ 1 (* 2 idx$1735))) idx$1306) (⊢ (= 54 (+ 1 (* 2 idx$1735))) idx$1308) (⊢ (= 55 (+ 1 (* 2 idx$1735))) idx$1310) (⊢ (= 56 (+ 1 (* 2 idx$1735))) idx$1312) (⊢ (= 57 (+ 1 (* 2 idx$1735))) idx$1314) (⊢ (= 58 (+ 1 (* 2 idx$1735))) idx$1316) (⊢ (= 59 (+ 1 (* 2 idx$1735))) idx$1318) (⊢ (= 60 (+ 1 (* 2 idx$1735))) idx$1320) (⊢ (= 61 (+ 1 (* 2 idx$1735))) idx$1322) (⊢ (= 62 (+ 1 (* 2 idx$1735))) idx$1324) (⊢ (= 63 (+ 1 (* 2 idx$1735))) idx$1326) (⊢ (|| (= 0 (+ 1 (* 2 idx$1735))) (= 1 (+ 1 (* 2 idx$1735)))) 0))))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4)))))))) (ite c$1738 (app abstr-vals$2007 idx$1737) (ite x?$1734 (bvadd (ite (|| (= 1 (* 2 idx$1737)) (&& c$1205 (= 2 (* 2 idx$1737))) (&& c$1207 (= 3 (* 2 idx$1737))) (&& c$1209 (= 4 (* 2 idx$1737))) (&& c$1211 (= 5 (* 2 idx$1737))) (&& c$1213 (= 6 (* 2 idx$1737))) (&& c$1215 (= 7 (* 2 idx$1737))) (&& c$1217 (= 8 (* 2 idx$1737))) (&& c$1219 (= 9 (* 2 idx$1737))) (&& c$1221 (= 10 (* 2 idx$1737))) (&& c$1223 (= 11 (* 2 idx$1737))) (&& c$1225 (= 12 (* 2 idx$1737))) (&& c$1227 (= 13 (* 2 idx$1737))) (&& c$1229 (= 14 (* 2 idx$1737))) (&& c$1231 (= 15 (* 2 idx$1737))) (&& c$1233 (= 16 (* 2 idx$1737))) (&& c$1235 (= 17 (* 2 idx$1737))) (&& c$1237 (= 18 (* 2 idx$1737))) (&& c$1239 (= 19 (* 2 idx$1737))) (&& c$1241 (= 20 (* 2 idx$1737))) (&& c$1243 (= 21 (* 2 idx$1737))) (&& c$1245 (= 22 (* 2 idx$1737))) (&& c$1247 (= 23 (* 2 idx$1737))) (&& c$1249 (= 24 (* 2 idx$1737))) (&& c$1251 (= 25 (* 2 idx$1737))) (&& c$1253 (= 26 (* 2 idx$1737))) (&& c$1255 (= 27 (* 2 idx$1737))) (&& c$1257 (= 28 (* 2 idx$1737))) (&& c$1259 (= 29 (* 2 idx$1737))) (&& c$1261 (= 30 (* 2 idx$1737))) (&& c$1263 (= 31 (* 2 idx$1737))) (&& c$1265 (= 32 (* 2 idx$1737))) (&& c$1267 (= 33 (* 2 idx$1737))) (&& c$1269 (= 34 (* 2 idx$1737))) (&& c$1271 (= 35 (* 2 idx$1737))) (&& c$1273 (= 36 (* 2 idx$1737))) (&& c$1275 (= 37 (* 2 idx$1737))) (&& c$1277 (= 38 (* 2 idx$1737))) (&& c$1279 (= 39 (* 2 idx$1737))) (&& c$1281 (= 40 (* 2 idx$1737))) (&& c$1283 (= 41 (* 2 idx$1737))) (&& c$1285 (= 42 (* 2 idx$1737))) (&& c$1287 (= 43 (* 2 idx$1737))) (&& c$1289 (= 44 (* 2 idx$1737))) (&& c$1291 (= 45 (* 2 idx$1737))) (&& c$1293 (= 46 (* 2 idx$1737))) (&& c$1295 (= 47 (* 2 idx$1737))) (&& c$1297 (= 48 (* 2 idx$1737))) (&& c$1299 (= 49 (* 2 idx$1737))) (&& c$1301 (= 50 (* 2 idx$1737))) (&& c$1303 (= 51 (* 2 idx$1737))) (&& c$1305 (= 52 (* 2 idx$1737))) (&& c$1307 (= 53 (* 2 idx$1737))) (&& c$1309 (= 54 (* 2 idx$1737))) (&& c$1311 (= 55 (* 2 idx$1737))) (&& c$1313 (= 56 (* 2 idx$1737))) (&& c$1315 (= 57 (* 2 idx$1737))) (&& c$1317 (= 58 (* 2 idx$1737))) (&& c$1319 (= 59 (* 2 idx$1737))) (&& c$1321 (= 60 (* 2 idx$1737))) (&& c$1323 (= 61 (* 2 idx$1737))) (&& c$1325 (= 62 (* 2 idx$1737))) (&& c$1327 (= 63 (* 2 idx$1737)))) (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (app abstr-vals$2007 (ite* (⊢ (= 2 (* 2 idx$1737)) idx$1204) (⊢ (= 3 (* 2 idx$1737)) idx$1206) (⊢ (= 4 (* 2 idx$1737)) idx$1208) (⊢ (= 5 (* 2 idx$1737)) idx$1210) (⊢ (= 6 (* 2 idx$1737)) idx$1212) (⊢ (= 7 (* 2 idx$1737)) idx$1214) (⊢ (= 8 (* 2 idx$1737)) idx$1216) (⊢ (= 9 (* 2 idx$1737)) idx$1218) (⊢ (= 10 (* 2 idx$1737)) idx$1220) (⊢ (= 11 (* 2 idx$1737)) idx$1222) (⊢ (= 12 (* 2 idx$1737)) idx$1224) (⊢ (= 13 (* 2 idx$1737)) idx$1226) (⊢ (= 14 (* 2 idx$1737)) idx$1228) (⊢ (= 15 (* 2 idx$1737)) idx$1230) (⊢ (= 16 (* 2 idx$1737)) idx$1232) (⊢ (= 17 (* 2 idx$1737)) idx$1234) (⊢ (= 18 (* 2 idx$1737)) idx$1236) (⊢ (= 19 (* 2 idx$1737)) idx$1238) (⊢ (= 20 (* 2 idx$1737)) idx$1240) (⊢ (= 21 (* 2 idx$1737)) idx$1242) (⊢ (= 22 (* 2 idx$1737)) idx$1244) (⊢ (= 23 (* 2 idx$1737)) idx$1246) (⊢ (= 24 (* 2 idx$1737)) idx$1248) (⊢ (= 25 (* 2 idx$1737)) idx$1250) (⊢ (= 26 (* 2 idx$1737)) idx$1252) (⊢ (= 27 (* 2 idx$1737)) idx$1254) (⊢ (= 28 (* 2 idx$1737)) idx$1256) (⊢ (= 29 (* 2 idx$1737)) idx$1258) (⊢ (= 30 (* 2 idx$1737)) idx$1260) (⊢ (= 31 (* 2 idx$1737)) idx$1262) (⊢ (= 32 (* 2 idx$1737)) idx$1264) (⊢ (= 33 (* 2 idx$1737)) idx$1266) (⊢ (= 34 (* 2 idx$1737)) idx$1268) (⊢ (= 35 (* 2 idx$1737)) idx$1270) (⊢ (= 36 (* 2 idx$1737)) idx$1272) (⊢ (= 37 (* 2 idx$1737)) idx$1274) (⊢ (= 38 (* 2 idx$1737)) idx$1276) (⊢ (= 39 (* 2 idx$1737)) idx$1278) (⊢ (= 40 (* 2 idx$1737)) idx$1280) (⊢ (= 41 (* 2 idx$1737)) idx$1282) (⊢ (= 42 (* 2 idx$1737)) idx$1284) (⊢ (= 43 (* 2 idx$1737)) idx$1286) (⊢ (= 44 (* 2 idx$1737)) idx$1288) (⊢ (= 45 (* 2 idx$1737)) idx$1290) (⊢ (= 46 (* 2 idx$1737)) idx$1292) (⊢ (= 47 (* 2 idx$1737)) idx$1294) (⊢ (= 48 (* 2 idx$1737)) idx$1296) (⊢ (= 49 (* 2 idx$1737)) idx$1298) (⊢ (= 50 (* 2 idx$1737)) idx$1300) (⊢ (= 51 (* 2 idx$1737)) idx$1302) (⊢ (= 52 (* 2 idx$1737)) idx$1304) (⊢ (= 53 (* 2 idx$1737)) idx$1306) (⊢ (= 54 (* 2 idx$1737)) idx$1308) (⊢ (= 55 (* 2 idx$1737)) idx$1310) (⊢ (= 56 (* 2 idx$1737)) idx$1312) (⊢ (= 57 (* 2 idx$1737)) idx$1314) (⊢ (= 58 (* 2 idx$1737)) idx$1316) (⊢ (= 59 (* 2 idx$1737)) idx$1318) (⊢ (= 60 (* 2 idx$1737)) idx$1320) (⊢ (= 61 (* 2 idx$1737)) idx$1322) (⊢ (= 62 (* 2 idx$1737)) idx$1324) (⊢ (= 63 (* 2 idx$1737)) idx$1326) (⊢ (|| (= 0 (* 2 idx$1737)) (= 1 (* 2 idx$1737))) 0)))) (ite (|| (= 1 (+ 1 (* 2 idx$1737))) (&& c$1205 (= 2 (+ 1 (* 2 idx$1737)))) (&& c$1207 (= 3 (+ 1 (* 2 idx$1737)))) (&& c$1209 (= 4 (+ 1 (* 2 idx$1737)))) (&& c$1211 (= 5 (+ 1 (* 2 idx$1737)))) (&& c$1213 (= 6 (+ 1 (* 2 idx$1737)))) (&& c$1215 (= 7 (+ 1 (* 2 idx$1737)))) (&& c$1217 (= 8 (+ 1 (* 2 idx$1737)))) (&& c$1219 (= 9 (+ 1 (* 2 idx$1737)))) (&& c$1221 (= 10 (+ 1 (* 2 idx$1737)))) (&& c$1223 (= 11 (+ 1 (* 2 idx$1737)))) (&& c$1225 (= 12 (+ 1 (* 2 idx$1737)))) (&& c$1227 (= 13 (+ 1 (* 2 idx$1737)))) (&& c$1229 (= 14 (+ 1 (* 2 idx$1737)))) (&& c$1231 (= 15 (+ 1 (* 2 idx$1737)))) (&& c$1233 (= 16 (+ 1 (* 2 idx$1737)))) (&& c$1235 (= 17 (+ 1 (* 2 idx$1737)))) (&& c$1237 (= 18 (+ 1 (* 2 idx$1737)))) (&& c$1239 (= 19 (+ 1 (* 2 idx$1737)))) (&& c$1241 (= 20 (+ 1 (* 2 idx$1737)))) (&& c$1243 (= 21 (+ 1 (* 2 idx$1737)))) (&& c$1245 (= 22 (+ 1 (* 2 idx$1737)))) (&& c$1247 (= 23 (+ 1 (* 2 idx$1737)))) (&& c$1249 (= 24 (+ 1 (* 2 idx$1737)))) (&& c$1251 (= 25 (+ 1 (* 2 idx$1737)))) (&& c$1253 (= 26 (+ 1 (* 2 idx$1737)))) (&& c$1255 (= 27 (+ 1 (* 2 idx$1737)))) (&& c$1257 (= 28 (+ 1 (* 2 idx$1737)))) (&& c$1259 (= 29 (+ 1 (* 2 idx$1737)))) (&& c$1261 (= 30 (+ 1 (* 2 idx$1737)))) (&& c$1263 (= 31 (+ 1 (* 2 idx$1737)))) (&& c$1265 (= 32 (+ 1 (* 2 idx$1737)))) (&& c$1267 (= 33 (+ 1 (* 2 idx$1737)))) (&& c$1269 (= 34 (+ 1 (* 2 idx$1737)))) (&& c$1271 (= 35 (+ 1 (* 2 idx$1737)))) (&& c$1273 (= 36 (+ 1 (* 2 idx$1737)))) (&& c$1275 (= 37 (+ 1 (* 2 idx$1737)))) (&& c$1277 (= 38 (+ 1 (* 2 idx$1737)))) (&& c$1279 (= 39 (+ 1 (* 2 idx$1737)))) (&& c$1281 (= 40 (+ 1 (* 2 idx$1737)))) (&& c$1283 (= 41 (+ 1 (* 2 idx$1737)))) (&& c$1285 (= 42 (+ 1 (* 2 idx$1737)))) (&& c$1287 (= 43 (+ 1 (* 2 idx$1737)))) (&& c$1289 (= 44 (+ 1 (* 2 idx$1737)))) (&& c$1291 (= 45 (+ 1 (* 2 idx$1737)))) (&& c$1293 (= 46 (+ 1 (* 2 idx$1737)))) (&& c$1295 (= 47 (+ 1 (* 2 idx$1737)))) (&& c$1297 (= 48 (+ 1 (* 2 idx$1737)))) (&& c$1299 (= 49 (+ 1 (* 2 idx$1737)))) (&& c$1301 (= 50 (+ 1 (* 2 idx$1737)))) (&& c$1303 (= 51 (+ 1 (* 2 idx$1737)))) (&& c$1305 (= 52 (+ 1 (* 2 idx$1737)))) (&& c$1307 (= 53 (+ 1 (* 2 idx$1737)))) (&& c$1309 (= 54 (+ 1 (* 2 idx$1737)))) (&& c$1311 (= 55 (+ 1 (* 2 idx$1737)))) (&& c$1313 (= 56 (+ 1 (* 2 idx$1737)))) (&& c$1315 (= 57 (+ 1 (* 2 idx$1737)))) (&& c$1317 (= 58 (+ 1 (* 2 idx$1737)))) (&& c$1319 (= 59 (+ 1 (* 2 idx$1737)))) (&& c$1321 (= 60 (+ 1 (* 2 idx$1737)))) (&& c$1323 (= 61 (+ 1 (* 2 idx$1737)))) (&& c$1325 (= 62 (+ 1 (* 2 idx$1737)))) (&& c$1327 (= 63 (+ 1 (* 2 idx$1737))))) (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (app abstr-vals$2007 (ite* (⊢ (= 2 (+ 1 (* 2 idx$1737))) idx$1204) (⊢ (= 3 (+ 1 (* 2 idx$1737))) idx$1206) (⊢ (= 4 (+ 1 (* 2 idx$1737))) idx$1208) (⊢ (= 5 (+ 1 (* 2 idx$1737))) idx$1210) (⊢ (= 6 (+ 1 (* 2 idx$1737))) idx$1212) (⊢ (= 7 (+ 1 (* 2 idx$1737))) idx$1214) (⊢ (= 8 (+ 1 (* 2 idx$1737))) idx$1216) (⊢ (= 9 (+ 1 (* 2 idx$1737))) idx$1218) (⊢ (= 10 (+ 1 (* 2 idx$1737))) idx$1220) (⊢ (= 11 (+ 1 (* 2 idx$1737))) idx$1222) (⊢ (= 12 (+ 1 (* 2 idx$1737))) idx$1224) (⊢ (= 13 (+ 1 (* 2 idx$1737))) idx$1226) (⊢ (= 14 (+ 1 (* 2 idx$1737))) idx$1228) (⊢ (= 15 (+ 1 (* 2 idx$1737))) idx$1230) (⊢ (= 16 (+ 1 (* 2 idx$1737))) idx$1232) (⊢ (= 17 (+ 1 (* 2 idx$1737))) idx$1234) (⊢ (= 18 (+ 1 (* 2 idx$1737))) idx$1236) (⊢ (= 19 (+ 1 (* 2 idx$1737))) idx$1238) (⊢ (= 20 (+ 1 (* 2 idx$1737))) idx$1240) (⊢ (= 21 (+ 1 (* 2 idx$1737))) idx$1242) (⊢ (= 22 (+ 1 (* 2 idx$1737))) idx$1244) (⊢ (= 23 (+ 1 (* 2 idx$1737))) idx$1246) (⊢ (= 24 (+ 1 (* 2 idx$1737))) idx$1248) (⊢ (= 25 (+ 1 (* 2 idx$1737))) idx$1250) (⊢ (= 26 (+ 1 (* 2 idx$1737))) idx$1252) (⊢ (= 27 (+ 1 (* 2 idx$1737))) idx$1254) (⊢ (= 28 (+ 1 (* 2 idx$1737))) idx$1256) (⊢ (= 29 (+ 1 (* 2 idx$1737))) idx$1258) (⊢ (= 30 (+ 1 (* 2 idx$1737))) idx$1260) (⊢ (= 31 (+ 1 (* 2 idx$1737))) idx$1262) (⊢ (= 32 (+ 1 (* 2 idx$1737))) idx$1264) (⊢ (= 33 (+ 1 (* 2 idx$1737))) idx$1266) (⊢ (= 34 (+ 1 (* 2 idx$1737))) idx$1268) (⊢ (= 35 (+ 1 (* 2 idx$1737))) idx$1270) (⊢ (= 36 (+ 1 (* 2 idx$1737))) idx$1272) (⊢ (= 37 (+ 1 (* 2 idx$1737))) idx$1274) (⊢ (= 38 (+ 1 (* 2 idx$1737))) idx$1276) (⊢ (= 39 (+ 1 (* 2 idx$1737))) idx$1278) (⊢ (= 40 (+ 1 (* 2 idx$1737))) idx$1280) (⊢ (= 41 (+ 1 (* 2 idx$1737))) idx$1282) (⊢ (= 42 (+ 1 (* 2 idx$1737))) idx$1284) (⊢ (= 43 (+ 1 (* 2 idx$1737))) idx$1286) (⊢ (= 44 (+ 1 (* 2 idx$1737))) idx$1288) (⊢ (= 45 (+ 1 (* 2 idx$1737))) idx$1290) (⊢ (= 46 (+ 1 (* 2 idx$1737))) idx$1292) (⊢ (= 47 (+ 1 (* 2 idx$1737))) idx$1294) (⊢ (= 48 (+ 1 (* 2 idx$1737))) idx$1296) (⊢ (= 49 (+ 1 (* 2 idx$1737))) idx$1298) (⊢ (= 50 (+ 1 (* 2 idx$1737))) idx$1300) (⊢ (= 51 (+ 1 (* 2 idx$1737))) idx$1302) (⊢ (= 52 (+ 1 (* 2 idx$1737))) idx$1304) (⊢ (= 53 (+ 1 (* 2 idx$1737))) idx$1306) (⊢ (= 54 (+ 1 (* 2 idx$1737))) idx$1308) (⊢ (= 55 (+ 1 (* 2 idx$1737))) idx$1310) (⊢ (= 56 (+ 1 (* 2 idx$1737))) idx$1312) (⊢ (= 57 (+ 1 (* 2 idx$1737))) idx$1314) (⊢ (= 58 (+ 1 (* 2 idx$1737))) idx$1316) (⊢ (= 59 (+ 1 (* 2 idx$1737))) idx$1318) (⊢ (= 60 (+ 1 (* 2 idx$1737))) idx$1320) (⊢ (= 61 (+ 1 (* 2 idx$1737))) idx$1322) (⊢ (= 62 (+ 1 (* 2 idx$1737))) idx$1324) (⊢ (= 63 (+ 1 (* 2 idx$1737))) idx$1326) (⊢ (|| (= 0 (+ 1 (* 2 idx$1737))) (= 1 (+ 1 (* 2 idx$1737)))) 0))))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4)))))))))))
Ran synthesizer for 1788 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-add
  (vec-mul
   (vec-cast
    (load
     (buffer column_sums_b 'uint32)
     (ramp
      (sca-add (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16) 16)
      1
      16)
     (aligned 16 0))
    'int32
    16)
   (sca-broadcast (int32_t t5829) 16))
  (vec-add
   (load
    (buffer bias 'int32)
    (ramp (sca-mul output.s0.x.x 16) 1 16)
    (aligned 16 0))
   (sca-broadcast
    (sca-add
     (sca-mul
      (sca-mul (int32_t t5829) (int32_t t5830))
      (int32_t mat_a.extent.0))
     (sca-mul (int32_t t5830) (int32_t t6653)))
    16)))
 (vec-cast
  (load
   (buffer multiplied_no_offsets 'uint32)
   (ramp
    (sca-add (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121)) 4)
    1
    16)
   (aligned 4 0))
  'int32
  16))
template:
  (vs-mpy-add
 ...
 (combine
  (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
  (union [x?$1601 #(struct:vs-mpy-add
                    ...
                    #<combine:
                     #(struct:vs-mpy-add
                       ...
                       #<load-data>
                       (#(struct:int32_t t5829))
                       #f
                       #f
                       #f
                       int32)
                     #(struct:vs-mpy-add
                       ...
                       #<combine:
                        #<load-data>
                        #(struct:broadcast
                          ...
                          #(struct:sca-add
                            #(struct:sca-mul
                              #(struct:sca-mul
                                #(struct:int32_t t5829)
                                #(struct:int32_t t5830))
                              #(struct:int32_t mat_a.extent.0))
                            #(struct:sca-mul
                              #(struct:int32_t t5830)
                              #(struct:int32_t t6653))))>
                       (#(struct:int8_t (bv #x01 8))
                        #(struct:int8_t (bv #x01 8)))
                       #f
                       #f
                       #f
                       int32)>
                    (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8)))
                    #f
                    #f
                    #f
                    int32)] [(! x?$1601) #(struct:cast
                                           ...
                                           #<load-data>
                                           int32
                                           #f)]))
 (list (int32_t t5829) (int8_t (bv #x01 8)))
 #f
 #f
 #f
 'int32)
axioms:
  (union [x?$1601 (#t #t)] [(! x?$1601) (#t)])
optimized-halide-expr:
  (vec-add
 (vec-add
  #<abstr-halide-expr>
  (vec-add
   (load
    (buffer bias 'int32)
    (ramp (sca-mul output.s0.x.x 16) 1 16)
    (aligned 16 0))
   (sca-broadcast
    (sca-add
     (sca-mul
      (sca-mul (int32_t t5829) (int32_t t5830))
      (int32_t mat_a.extent.0))
     (sca-mul (int32_t t5830) (int32_t t6653)))
    16)))
 (vec-cast
  (load
   (buffer multiplied_no_offsets 'uint32)
   (ramp
    (sca-add (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121)) 4)
    1
    16)
   (aligned 4 0))
  'int32
  16))
optimized-template:
  (vs-mpy-add
 ...
 (combine
  #<abstr-expr>
  (union [x?$1601 #(struct:vs-mpy-add
                    ...
                    #<combine:
                     #<abstr-expr>
                     #(struct:vs-mpy-add
                       ...
                       #<combine:
                        #<load-data>
                        #(struct:broadcast
                          ...
                          #(struct:sca-add
                            #(struct:sca-mul
                              #(struct:sca-mul
                                #(struct:int32_t t5829)
                                #(struct:int32_t t5830))
                              #(struct:int32_t mat_a.extent.0))
                            #(struct:sca-mul
                              #(struct:int32_t t5830)
                              #(struct:int32_t t6653))))>
                       (#(struct:int8_t (bv #x01 8))
                        #(struct:int8_t (bv #x01 8)))
                       #f
                       #f
                       #f
                       int32)>
                    (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8)))
                    #f
                    #f
                    #f
                    int32)] [(! x?$1601) #(struct:cast
                                           ...
                                           #<load-data>
                                           int32
                                           #f)]))
 (list (int32_t t5829) (int8_t (bv #x01 8)))
 #f
 #f
 #f
 'int32)
optimized Halide 0:
  (int32_t
 (bvadd (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4)))))) (bvadd (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653))) (app abstr-vals$2008 0))))
optimized x86 0:
  (int32_t
 (bvadd (bvmul t5829 (ite c$1603 (app abstr-vals$2008 idx$1602) (ite x?$1601 (bvadd (ite (|| (= 1 (* 2 idx$1602)) (&& c$1205 (= 2 (* 2 idx$1602))) (&& c$1207 (= 3 (* 2 idx$1602))) (&& c$1209 (= 4 (* 2 idx$1602))) (&& c$1211 (= 5 (* 2 idx$1602))) (&& c$1213 (= 6 (* 2 idx$1602))) (&& c$1215 (= 7 (* 2 idx$1602))) (&& c$1217 (= 8 (* 2 idx$1602))) (&& c$1219 (= 9 (* 2 idx$1602))) (&& c$1221 (= 10 (* 2 idx$1602))) (&& c$1223 (= 11 (* 2 idx$1602))) (&& c$1225 (= 12 (* 2 idx$1602))) (&& c$1227 (= 13 (* 2 idx$1602))) (&& c$1229 (= 14 (* 2 idx$1602))) (&& c$1231 (= 15 (* 2 idx$1602))) (&& c$1233 (= 16 (* 2 idx$1602))) (&& c$1235 (= 17 (* 2 idx$1602))) (&& c$1237 (= 18 (* 2 idx$1602))) (&& c$1239 (= 19 (* 2 idx$1602))) (&& c$1241 (= 20 (* 2 idx$1602))) (&& c$1243 (= 21 (* 2 idx$1602))) (&& c$1245 (= 22 (* 2 idx$1602))) (&& c$1247 (= 23 (* 2 idx$1602))) (&& c$1249 (= 24 (* 2 idx$1602))) (&& c$1251 (= 25 (* 2 idx$1602))) (&& c$1253 (= 26 (* 2 idx$1602))) (&& c$1255 (= 27 (* 2 idx$1602))) (&& c$1257 (= 28 (* 2 idx$1602))) (&& c$1259 (= 29 (* 2 idx$1602))) (&& c$1261 (= 30 (* 2 idx$1602))) (&& c$1263 (= 31 (* 2 idx$1602))) (&& c$1265 (= 32 (* 2 idx$1602))) (&& c$1267 (= 33 (* 2 idx$1602))) (&& c$1269 (= 34 (* 2 idx$1602))) (&& c$1271 (= 35 (* 2 idx$1602))) (&& c$1273 (= 36 (* 2 idx$1602))) (&& c$1275 (= 37 (* 2 idx$1602))) (&& c$1277 (= 38 (* 2 idx$1602))) (&& c$1279 (= 39 (* 2 idx$1602))) (&& c$1281 (= 40 (* 2 idx$1602))) (&& c$1283 (= 41 (* 2 idx$1602))) (&& c$1285 (= 42 (* 2 idx$1602))) (&& c$1287 (= 43 (* 2 idx$1602))) (&& c$1289 (= 44 (* 2 idx$1602))) (&& c$1291 (= 45 (* 2 idx$1602))) (&& c$1293 (= 46 (* 2 idx$1602))) (&& c$1295 (= 47 (* 2 idx$1602))) (&& c$1297 (= 48 (* 2 idx$1602))) (&& c$1299 (= 49 (* 2 idx$1602))) (&& c$1301 (= 50 (* 2 idx$1602))) (&& c$1303 (= 51 (* 2 idx$1602))) (&& c$1305 (= 52 (* 2 idx$1602))) (&& c$1307 (= 53 (* 2 idx$1602))) (&& c$1309 (= 54 (* 2 idx$1602))) (&& c$1311 (= 55 (* 2 idx$1602))) (&& c$1313 (= 56 (* 2 idx$1602))) (&& c$1315 (= 57 (* 2 idx$1602))) (&& c$1317 (= 58 (* 2 idx$1602))) (&& c$1319 (= 59 (* 2 idx$1602))) (&& c$1321 (= 60 (* 2 idx$1602))) (&& c$1323 (= 61 (* 2 idx$1602))) (&& c$1325 (= 62 (* 2 idx$1602))) (&& c$1327 (= 63 (* 2 idx$1602)))) (app abstr-vals$2008 (ite* (⊢ (= 2 (* 2 idx$1602)) idx$1204) (⊢ (= 3 (* 2 idx$1602)) idx$1206) (⊢ (= 4 (* 2 idx$1602)) idx$1208) (⊢ (= 5 (* 2 idx$1602)) idx$1210) (⊢ (= 6 (* 2 idx$1602)) idx$1212) (⊢ (= 7 (* 2 idx$1602)) idx$1214) (⊢ (= 8 (* 2 idx$1602)) idx$1216) (⊢ (= 9 (* 2 idx$1602)) idx$1218) (⊢ (= 10 (* 2 idx$1602)) idx$1220) (⊢ (= 11 (* 2 idx$1602)) idx$1222) (⊢ (= 12 (* 2 idx$1602)) idx$1224) (⊢ (= 13 (* 2 idx$1602)) idx$1226) (⊢ (= 14 (* 2 idx$1602)) idx$1228) (⊢ (= 15 (* 2 idx$1602)) idx$1230) (⊢ (= 16 (* 2 idx$1602)) idx$1232) (⊢ (= 17 (* 2 idx$1602)) idx$1234) (⊢ (= 18 (* 2 idx$1602)) idx$1236) (⊢ (= 19 (* 2 idx$1602)) idx$1238) (⊢ (= 20 (* 2 idx$1602)) idx$1240) (⊢ (= 21 (* 2 idx$1602)) idx$1242) (⊢ (= 22 (* 2 idx$1602)) idx$1244) (⊢ (= 23 (* 2 idx$1602)) idx$1246) (⊢ (= 24 (* 2 idx$1602)) idx$1248) (⊢ (= 25 (* 2 idx$1602)) idx$1250) (⊢ (= 26 (* 2 idx$1602)) idx$1252) (⊢ (= 27 (* 2 idx$1602)) idx$1254) (⊢ (= 28 (* 2 idx$1602)) idx$1256) (⊢ (= 29 (* 2 idx$1602)) idx$1258) (⊢ (= 30 (* 2 idx$1602)) idx$1260) (⊢ (= 31 (* 2 idx$1602)) idx$1262) (⊢ (= 32 (* 2 idx$1602)) idx$1264) (⊢ (= 33 (* 2 idx$1602)) idx$1266) (⊢ (= 34 (* 2 idx$1602)) idx$1268) (⊢ (= 35 (* 2 idx$1602)) idx$1270) (⊢ (= 36 (* 2 idx$1602)) idx$1272) (⊢ (= 37 (* 2 idx$1602)) idx$1274) (⊢ (= 38 (* 2 idx$1602)) idx$1276) (⊢ (= 39 (* 2 idx$1602)) idx$1278) (⊢ (= 40 (* 2 idx$1602)) idx$1280) (⊢ (= 41 (* 2 idx$1602)) idx$1282) (⊢ (= 42 (* 2 idx$1602)) idx$1284) (⊢ (= 43 (* 2 idx$1602)) idx$1286) (⊢ (= 44 (* 2 idx$1602)) idx$1288) (⊢ (= 45 (* 2 idx$1602)) idx$1290) (⊢ (= 46 (* 2 idx$1602)) idx$1292) (⊢ (= 47 (* 2 idx$1602)) idx$1294) (⊢ (= 48 (* 2 idx$1602)) idx$1296) (⊢ (= 49 (* 2 idx$1602)) idx$1298) (⊢ (= 50 (* 2 idx$1602)) idx$1300) (⊢ (= 51 (* 2 idx$1602)) idx$1302) (⊢ (= 52 (* 2 idx$1602)) idx$1304) (⊢ (= 53 (* 2 idx$1602)) idx$1306) (⊢ (= 54 (* 2 idx$1602)) idx$1308) (⊢ (= 55 (* 2 idx$1602)) idx$1310) (⊢ (= 56 (* 2 idx$1602)) idx$1312) (⊢ (= 57 (* 2 idx$1602)) idx$1314) (⊢ (= 58 (* 2 idx$1602)) idx$1316) (⊢ (= 59 (* 2 idx$1602)) idx$1318) (⊢ (= 60 (* 2 idx$1602)) idx$1320) (⊢ (= 61 (* 2 idx$1602)) idx$1322) (⊢ (= 62 (* 2 idx$1602)) idx$1324) (⊢ (= 63 (* 2 idx$1602)) idx$1326) (⊢ (|| (= 0 (* 2 idx$1602)) (= 1 (* 2 idx$1602))) 0))) (bvadd (ite (|| (= 1 (* 2 (ite* (⊢ (= 2 (* 2 idx$1602)) idx$1204) (⊢ (= 3 (* 2 idx$1602)) idx$1206) (⊢ (= 4 (* 2 idx$1602)) idx$1208) (⊢ (= 5 (* 2 idx$1602)) idx$1210) (⊢ (= 6 (* 2 idx$1602)) idx$1212) (⊢ (= 7 (* 2 idx$1602)) idx$1214) (⊢ (= 8 (* 2 idx$1602)) idx$1216) (⊢ (= 9 (* 2 idx$1602)) idx$1218) (⊢ (= 10 (* 2 idx$1602)) idx$1220) (⊢ (= 11 (* 2 idx$1602)) idx$1222) (⊢ (= 12 (* 2 idx$1602)) idx$1224) (⊢ (= 13 (* 2 idx$1602)) idx$1226) (⊢ (= 14 (* 2 idx$1602)) idx$1228) (⊢ (= 15 (* 2 idx$1602)) idx$1230) (⊢ (= 16 (* 2 idx$1602)) idx$1232) (⊢ (= 17 (* 2 idx$1602)) idx$1234) (⊢ (= 18 (* 2 idx$1602)) idx$1236) (⊢ (= 19 (* 2 idx$1602)) idx$1238) (⊢ (= 20 (* 2 idx$1602)) idx$1240) (⊢ (= 21 (* 2 idx$1602)) idx$1242) (⊢ (= 22 (* 2 idx$1602)) idx$1244) (⊢ (= 23 (* 2 idx$1602)) idx$1246) (⊢ (= 24 (* 2 idx$1602)) idx$1248) (⊢ (= 25 (* 2 idx$1602)) idx$1250) (⊢ (= 26 (* 2 idx$1602)) idx$1252) (⊢ (= 27 (* 2 idx$1602)) idx$1254) (⊢ (= 28 (* 2 idx$1602)) idx$1256) (⊢ (= 29 (* 2 idx$1602)) idx$1258) (⊢ (= 30 (* 2 idx$1602)) idx$1260) (⊢ (= 31 (* 2 idx$1602)) idx$1262) (⊢ (= 32 (* 2 idx$1602)) idx$1264) (⊢ (= 33 (* 2 idx$1602)) idx$1266) (⊢ (= 34 (* 2 idx$1602)) idx$1268) (⊢ (= 35 (* 2 idx$1602)) idx$1270) (⊢ (= 36 (* 2 idx$1602)) idx$1272) (⊢ (= 37 (* 2 idx$1602)) idx$1274) (⊢ (= 38 (* 2 idx$1602)) idx$1276) (⊢ (= 39 (* 2 idx$1602)) idx$1278) (⊢ (= 40 (* 2 idx$1602)) idx$1280) (⊢ (= 41 (* 2 idx$1602)) idx$1282) (⊢ (= 42 (* 2 idx$1602)) idx$1284) (⊢ (= 43 (* 2 idx$1602)) idx$1286) (⊢ (= 44 (* 2 idx$1602)) idx$1288) (⊢ (= 45 (* 2 idx$1602)) idx$1290) (⊢ (= 46 (* 2 idx$1602)) idx$1292) (⊢ (= 47 (* 2 idx$1602)) idx$1294) (⊢ (= 48 (* 2 idx$1602)) idx$1296) (⊢ (= 49 (* 2 idx$1602)) idx$1298) (⊢ (= 50 (* 2 idx$1602)) idx$1300) (⊢ (= 51 (* 2 idx$1602)) idx$1302) (⊢ (= 52 (* 2 idx$1602)) idx$1304) (⊢ (= 53 (* 2 idx$1602)) idx$1306) (⊢ (= 54 (* 2 idx$1602)) idx$1308) (⊢ (= 55 (* 2 idx$1602)) idx$1310) (⊢ (= 56 (* 2 idx$1602)) idx$1312) (⊢ (= 57 (* 2 idx$1602)) idx$1314) (⊢ (= 58 (* 2 idx$1602)) idx$1316) (⊢ (= 59 (* 2 idx$1602)) idx$1318) (⊢ (= 60 (* 2 idx$1602)) idx$1320) (⊢ (= 61 (* 2 idx$1602)) idx$1322) (⊢ (= 62 (* 2 idx$1602)) idx$1324) (⊢ (= 63 (* 2 idx$1602)) idx$1326) (⊢ (|| (= 0 (* 2 idx$1602)) (= 1 (* 2 idx$1602))) 0)))) (&& c$535 (= 2 (* 2 (ite* (⊢ (= 2 (* 2 idx$1602)) idx$1204) (⊢ (= 3 (* 2 idx$1602)) idx$1206) (⊢ (= 4 (* 2 idx$1602)) idx$1208) (⊢ (= 5 (* 2 idx$1602)) idx$1210) (⊢ (= 6 (* 2 idx$1602)) idx$1212) (⊢ (= 7 (* 2 idx$1602)) idx$1214) (⊢ (= 8 (* 2 idx$1602)) idx$1216) (⊢ (= 9 (* 2 idx$1602)) idx$1218) (⊢ (= 10 (* 2 idx$1602)) idx$1220) (⊢ (= 11 (* 2 idx$1602)) idx$1222) (⊢ (= 12 (* 2 idx$1602)) idx$1224) (⊢ (= 13 (* 2 idx$1602)) idx$1226) (⊢ (= 14 (* 2 idx$1602)) idx$1228) (⊢ (= 15 (* 2 idx$1602)) idx$1230) (⊢ (= 16 (* 2 idx$1602)) idx$1232) (⊢ (= 17 (* 2 idx$1602)) idx$1234) (⊢ (= 18 (* 2 idx$1602)) idx$1236) (⊢ (= 19 (* 2 idx$1602)) idx$1238) (⊢ (= 20 (* 2 idx$1602)) idx$1240) (⊢ (= 21 (* 2 idx$1602)) idx$1242) (⊢ (= 22 (* 2 idx$1602)) idx$1244) (⊢ (= 23 (* 2 idx$1602)) idx$1246) (⊢ (= 24 (* 2 idx$1602)) idx$1248) (⊢ (= 25 (* 2 idx$1602)) idx$1250) (⊢ (= 26 (* 2 idx$1602)) idx$1252) (⊢ (= 27 (* 2 idx$1602)) idx$1254) (⊢ (= 28 (* 2 idx$1602)) idx$1256) (⊢ (= 29 (* 2 idx$1602)) idx$1258) (⊢ (= 30 (* 2 idx$1602)) idx$1260) (⊢ (= 31 (* 2 idx$1602)) idx$1262) (⊢ (= 32 (* 2 idx$1602)) idx$1264) (⊢ (= 33 (* 2 idx$1602)) idx$1266) (⊢ (= 34 (* 2 idx$1602)) idx$1268) (⊢ (= 35 (* 2 idx$1602)) idx$1270) (⊢ (= 36 (* 2 idx$1602)) idx$1272) (⊢ (= 37 (* 2 idx$1602)) idx$1274) (⊢ (= 38 (* 2 idx$1602)) idx$1276) (⊢ (= 39 (* 2 idx$1602)) idx$1278) (⊢ (= 40 (* 2 idx$1602)) idx$1280) (⊢ (= 41 (* 2 idx$1602)) idx$1282) (⊢ (= 42 (* 2 idx$1602)) idx$1284) (⊢ (= 43 (* 2 idx$1602)) idx$1286) (⊢ (= 44 (* 2 idx$1602)) idx$1288) (⊢ (= 45 (* 2 idx$1602)) idx$1290) (⊢ (= 46 (* 2 idx$1602)) idx$1292) (⊢ (= 47 (* 2 idx$1602)) idx$1294) (⊢ (= 48 (* 2 idx$1602)) idx$1296) (⊢ (= 49 (* 2 idx$1602)) idx$1298) (⊢ (= 50 (* 2 idx$1602)) idx$1300) (⊢ (= 51 (* 2 idx$1602)) idx$1302) (⊢ (= 52 (* 2 idx$1602)) idx$1304) (⊢ (= 53 (* 2 idx$1602)) idx$1306) (⊢ (= 54 (* 2 idx$1602)) idx$1308) (⊢ (= 55 (* 2 idx$1602)) idx$1310) (⊢ (= 56 (* 2 idx$1602)) idx$1312) (⊢ (= 57 (* 2 idx$1602)) idx$1314) (⊢ (= 58 (* 2 idx$1602)) idx$1316) (⊢ (= 59 (* 2 idx$1602)) idx$1318) (⊢ (= 60 (* 2 idx$1602)) idx$1320) (⊢ (= 61 (* 2 idx$1602)) idx$1322) (⊢ (= 62 (* 2 idx$1602)) idx$1324) (⊢ (= 63 (* 2 idx$1602)) idx$1326) (⊢ (|| (= 0 (* 2 idx$1602)) (= 1 (* 2 idx$1602))) 0))))) (&& c$537 (= 3 (* 2 (ite* (⊢ (= 2 (* 2 idx$1602)) idx$1204) (⊢ (= 3 (* 2 idx$1602)) idx$1206) (⊢ (= 4 (* 2 idx$1602)) idx$1208) (⊢ (= 5 (* 2 idx$1602)) idx$1210) (⊢ (= 6 (* 2 idx$1602)) idx$1212) (⊢ (= 7 (* 2 idx$1602)) idx$1214) (⊢ (= 8 (* 2 idx$1602)) idx$1216) (⊢ (= 9 (* 2 idx$1602)) idx$1218) (⊢ (= 10 (* 2 idx$1602)) idx$1220) (⊢ (= 11 (* 2 idx$1602)) idx$1222) (⊢ (= 12 (* 2 idx$1602)) idx$1224) (⊢ (= 13 (* 2 idx$1602)) idx$1226) (⊢ (= 14 (* 2 idx$1602)) idx$1228) (⊢ (= 15 (* 2 idx$1602)) idx$1230) (⊢ (= 16 (* 2 idx$1602)) idx$1232) (⊢ (= 17 (* 2 idx$1602)) idx$1234) (⊢ (= 18 (* 2 idx$1602)) idx$1236) (⊢ (= 19 (* 2 idx$1602)) idx$1238) (⊢ (= 20 (* 2 idx$1602)) idx$1240) (⊢ (= 21 (* 2 idx$1602)) idx$1242) (⊢ (= 22 (* 2 idx$1602)) idx$1244) (⊢ (= 23 (* 2 idx$1602)) idx$1246) (⊢ (= 24 (* 2 idx$1602)) idx$1248) (⊢ (= 25 (* 2 idx$1602)) idx$1250) (⊢ (= 26 (* 2 idx$1602)) idx$1252) (⊢ (= 27 (* 2 idx$1602)) idx$1254) (⊢ (= 28 (* 2 idx$1602)) idx$1256) (⊢ (= 29 (* 2 idx$1602)) idx$1258) (⊢ (= 30 (* 2 idx$1602)) idx$1260) (⊢ (= 31 (* 2 idx$1602)) idx$1262) (⊢ (= 32 (* 2 idx$1602)) idx$1264) (⊢ (= 33 (* 2 idx$1602)) idx$1266) (⊢ (= 34 (* 2 idx$1602)) idx$1268) (⊢ (= 35 (* 2 idx$1602)) idx$1270) (⊢ (= 36 (* 2 idx$1602)) idx$1272) (⊢ (= 37 (* 2 idx$1602)) idx$1274) (⊢ (= 38 (* 2 idx$1602)) idx$1276) (⊢ (= 39 (* 2 idx$1602)) idx$1278) (⊢ (= 40 (* 2 idx$1602)) idx$1280) (⊢ (= 41 (* 2 idx$1602)) idx$1282) (⊢ (= 42 (* 2 idx$1602)) idx$1284) (⊢ (= 43 (* 2 idx$1602)) idx$1286) (⊢ (= 44 (* 2 idx$1602)) idx$1288) (⊢ (= 45 (* 2 idx$1602)) idx$1290) (⊢ (= 46 (* 2 idx$1602)) idx$1292) (⊢ (= 47 (* 2 idx$1602)) idx$1294) (⊢ (= 48 (* 2 idx$1602)) idx$1296) (⊢ (= 49 (* 2 idx$1602)) idx$1298) (⊢ (= 50 (* 2 idx$1602)) idx$1300) (⊢ (= 51 (* 2 idx$1602)) idx$1302) (⊢ (= 52 (* 2 idx$1602)) idx$1304) (⊢ (= 53 (* 2 idx$1602)) idx$1306) (⊢ (= 54 (* 2 idx$1602)) idx$1308) (⊢ (= 55 (* 2 idx$1602)) idx$1310) (⊢ (= 56 (* 2 idx$1602)) idx$1312) (⊢ (= 57 (* 2 idx$1602)) idx$1314) (⊢ (= 58 (* 2 idx$1602)) idx$1316) (⊢ (= 59 (* 2 idx$1602)) idx$1318) (⊢ (= 60 (* 2 idx$1602)) idx$1320) (⊢ (= 61 (* 2 idx$1602)) idx$1322) (⊢ (= 62 (* 2 idx$1602)) idx$1324) (⊢ (= 63 (* 2 idx$1602)) idx$1326) (⊢ (|| (= 0 (* 2 idx$1602)) (= 1 (* 2 idx$1602))) 0))))) (&& c$539 (= 4 (* 2 (ite* (⊢ (= 2 (* 2 idx$1602)) idx$1204) (⊢ (= 3 (* 2 idx$1602)) idx$1206) (⊢ (= 4 (* 2 idx$1602)) idx$1208) (⊢ (= 5 (* 2 idx$1602)) idx$1210) (⊢ (= 6 (* 2 idx$1602)) idx$1212) (⊢ (= 7 (* 2 idx$1602)) idx$1214) (⊢ (= 8 (* 2 idx$1602)) idx$1216) (⊢ (= 9 (* 2 idx$1602)) idx$1218) (⊢ (= 10 (* 2 idx$1602)) idx$1220) (⊢ (= 11 (* 2 idx$1602)) idx$1222) (⊢ (= 12 (* 2 idx$1602)) idx$1224) (⊢ (= 13 (* 2 idx$1602)) idx$1226) (⊢ (= 14 (* 2 idx$1602)) idx$1228) (⊢ (= 15 (* 2 idx$1602)) idx$1230) (⊢ (= 16 (* 2 idx$1602)) idx$1232) (⊢ (= 17 (* 2 idx$1602)) idx$1234) (⊢ (= 18 (* 2 idx$1602)) idx$1236) (⊢ (= 19 (* 2 idx$1602)) idx$1238) (⊢ (= 20 (* 2 idx$1602)) idx$1240) (⊢ (= 21 (* 2 idx$1602)) idx$1242) (⊢ (= 22 (* 2 idx$1602)) idx$1244) (⊢ (= 23 (* 2 idx$1602)) idx$1246) (⊢ (= 24 (* 2 idx$1602)) idx$1248) (⊢ (= 25 (* 2 idx$1602)) idx$1250) (⊢ (= 26 (* 2 idx$1602)) idx$1252) (⊢ (= 27 (* 2 idx$1602)) idx$1254) (⊢ (= 28 (* 2 idx$1602)) idx$1256) (⊢ (= 29 (* 2 idx$1602)) idx$1258) (⊢ (= 30 (* 2 idx$1602)) idx$1260) (⊢ (= 31 (* 2 idx$1602)) idx$1262) (⊢ (= 32 (* 2 idx$1602)) idx$1264) (⊢ (= 33 (* 2 idx$1602)) idx$1266) (⊢ (= 34 (* 2 idx$1602)) idx$1268) (⊢ (= 35 (* 2 idx$1602)) idx$1270) (⊢ (= 36 (* 2 idx$1602)) idx$1272) (⊢ (= 37 (* 2 idx$1602)) idx$1274) (⊢ (= 38 (* 2 idx$1602)) idx$1276) (⊢ (= 39 (* 2 idx$1602)) idx$1278) (⊢ (= 40 (* 2 idx$1602)) idx$1280) (⊢ (= 41 (* 2 idx$1602)) idx$1282) (⊢ (= 42 (* 2 idx$1602)) idx$1284) (⊢ (= 43 (* 2 idx$1602)) idx$1286) (⊢ (= 44 (* 2 idx$1602)) idx$1288) (⊢ (= 45 (* 2 idx$1602)) idx$1290) (⊢ (= 46 (* 2 idx$1602)) idx$1292) (⊢ (= 47 (* 2 idx$1602)) idx$1294) (⊢ (= 48 (* 2 idx$1602)) idx$1296) (⊢ (= 49 (* 2 idx$1602)) idx$1298) (⊢ (= 50 (* 2 idx$1602)) idx$1300) (⊢ (= 51 (* 2 idx$1602)) idx$1302) (⊢ (= 52 (* 2 idx$1602)) idx$1304) (⊢ (= 53 (* 2 idx$1602)) idx$1306) (⊢ (= 54 (* 2 idx$1602)) idx$1308) (⊢ (= 55 (* 2 idx$1602)) idx$1310) (⊢ (= 56 (* 2 idx$1602)) idx$1312) (⊢ (= 57 (* 2 idx$1602)) idx$1314) (⊢ (= 58 (* 2 idx$1602)) idx$1316) (⊢ (= 59 (* 2 idx$1602)) idx$1318) (⊢ (= 60 (* 2 idx$1602)) idx$1320) (⊢ (= 61 (* 2 idx$1602)) idx$1322) (⊢ (= 62 (* 2 idx$1602)) idx$1324) (⊢ (= 63 (* 2 idx$1602)) idx$1326) (⊢ (|| (= 0 (* 2 idx$1602)) (= 1 (* 2 idx$1602))) 0))))) (&& c$541 (= 5 (* 2 (ite* (⊢ (= 2 (* 2 idx$1602)) idx$1204) (⊢ (= 3 (* 2 idx$1602)) idx$1206) (⊢ (= 4 (* 2 idx$1602)) idx$1208) (⊢ (= 5 (* 2 idx$1602)) idx$1210) (⊢ (= 6 (* 2 idx$1602)) idx$1212) (⊢ (= 7 (* 2 idx$1602)) idx$1214) (⊢ (= 8 (* 2 idx$1602)) idx$1216) (⊢ (= 9 (* 2 idx$1602)) idx$1218) (⊢ (= 10 (* 2 idx$1602)) idx$1220) (⊢ (= 11 (* 2 idx$1602)) idx$1222) (⊢ (= 12 (* 2 idx$1602)) idx$1224) (⊢ (= 13 (* 2 idx$1602)) idx$1226) (⊢ (= 14 (* 2 idx$1602)) idx$1228) (⊢ (= 15 (* 2 idx$1602)) idx$1230) (⊢ (= 16 (* 2 idx$1602)) idx$1232) (⊢ (= 17 (* 2 idx$1602)) idx$1234) (⊢ (= 18 (* 2 idx$1602)) idx$1236) (⊢ (= 19 (* 2 idx$1602)) idx$1238) (⊢ (= 20 (* 2 idx$1602)) idx$1240) (⊢ (= 21 (* 2 idx$1602)) idx$1242) (⊢ (= 22 (* 2 idx$1602)) idx$1244) (⊢ (= 23 (* 2 idx$1602)) idx$1246) (⊢ (= 24 (* 2 idx$1602)) idx$1248) (⊢ (= 25 (* 2 idx$1602)) idx$1250) (⊢ (= 26 (* 2 idx$1602)) idx$1252) (⊢ (= 27 (* 2 idx$1602)) idx$1254) (⊢ (= 28 (* 2 idx$1602)) idx$1256) (⊢ (= 29 (* 2 idx$1602)) idx$1258) (⊢ (= 30 (* 2 idx$1602)) idx$1260) (⊢ (= 31 (* 2 idx$1602)) idx$1262) (⊢ (= 32 (* 2 idx$1602)) idx$1264) (⊢ (= 33 (* 2 idx$1602)) idx$1266) (⊢ (= 34 (* 2 idx$1602)) idx$1268) (⊢ (= 35 (* 2 idx$1602)) idx$1270) (⊢ (= 36 (* 2 idx$1602)) idx$1272) (⊢ (= 37 (* 2 idx$1602)) idx$1274) (⊢ (= 38 (* 2 idx$1602)) idx$1276) (⊢ (= 39 (* 2 idx$1602)) idx$1278) (⊢ (= 40 (* 2 idx$1602)) idx$1280) (⊢ (= 41 (* 2 idx$1602)) idx$1282) (⊢ (= 42 (* 2 idx$1602)) idx$1284) (⊢ (= 43 (* 2 idx$1602)) idx$1286) (⊢ (= 44 (* 2 idx$1602)) idx$1288) (⊢ (= 45 (* 2 idx$1602)) idx$1290) (⊢ (= 46 (* 2 idx$1602)) idx$1292) (⊢ (= 47 (* 2 idx$1602)) idx$1294) (⊢ (= 48 (* 2 idx$1602)) idx$1296) (⊢ (= 49 (* 2 idx$1602)) idx$1298) (⊢ (= 50 (* 2 idx$1602)) idx$1300) (⊢ (= 51 (* 2 idx$1602)) idx$1302) (⊢ (= 52 (* 2 idx$1602)) idx$1304) (⊢ (= 53 (* 2 idx$1602)) idx$1306) (⊢ (= 54 (* 2 idx$1602)) idx$1308) (⊢ (= 55 (* 2 idx$1602)) idx$1310) (⊢ (= 56 (* 2 idx$1602)) idx$1312) (⊢ (= 57 (* 2 idx$1602)) idx$1314) (⊢ (= 58 (* 2 idx$1602)) idx$1316) (⊢ (= 59 (* 2 idx$1602)) idx$1318) (⊢ (= 60 (* 2 idx$1602)) idx$1320) (⊢ (= 61 (* 2 idx$1602)) idx$1322) (⊢ (= 62 (* 2 idx$1602)) idx$1324) (⊢ (= 63 (* 2 idx$1602)) idx$1326) (⊢ (|| (= 0 (* 2 idx$1602)) (= 1 (* 2 idx$1602))) 0))))) (&& c$543 (= 6 (* 2 (ite* (⊢ (= 2 (* 2 idx$1602)) idx$1204) (⊢ (= 3 (* 2 idx$1602)) idx$1206) (⊢ (= 4 (* 2 idx$1602)) idx$1208) (⊢ (= 5 (* 2 idx$1602)) idx$1210) (⊢ (= 6 (* 2 idx$1602)) idx$1212) (⊢ (= 7 (* 2 idx$1602)) idx$1214) (⊢ (= 8 (* 2 idx$1602)) idx$1216) (⊢ (= 9 (* 2 idx$1602)) idx$1218) (⊢ (= 10 (* 2 idx$1602)) idx$1220) (⊢ (= 11 (* 2 idx$1602)) idx$1222) (⊢ (= 12 (* 2 idx$1602)) idx$1224) (⊢ (= 13 (* 2 idx$1602)) idx$1226) (⊢ (= 14 (* 2 idx$1602)) idx$1228) (⊢ (= 15 (* 2 idx$1602)) idx$1230) (⊢ (= 16 (* 2 idx$1602)) idx$1232) (⊢ (= 17 (* 2 idx$1602)) idx$1234) (⊢ (= 18 (* 2 idx$1602)) idx$1236) (⊢ (= 19 (* 2 idx$1602)) idx$1238) (⊢ (= 20 (* 2 idx$1602)) idx$1240) (⊢ (= 21 (* 2 idx$1602)) idx$1242) (⊢ (= 22 (* 2 idx$1602)) idx$1244) (⊢ (= 23 (* 2 idx$1602)) idx$1246) (⊢ (= 24 (* 2 idx$1602)) idx$1248) (⊢ (= 25 (* 2 idx$1602)) idx$1250) (⊢ (= 26 (* 2 idx$1602)) idx$1252) (⊢ (= 27 (* 2 idx$1602)) idx$1254) (⊢ (= 28 (* 2 idx$1602)) idx$1256) (⊢ (= 29 (* 2 idx$1602)) idx$1258) (⊢ (= 30 (* 2 idx$1602)) idx$1260) (⊢ (= 31 (* 2 idx$1602)) idx$1262) (⊢ (= 32 (* 2 idx$1602)) idx$1264) (⊢ (= 33 (* 2 idx$1602)) idx$1266) (⊢ (= 34 (* 2 idx$1602)) idx$1268) (⊢ (= 35 (* 2 idx$1602)) idx$1270) (⊢ (= 36 (* 2 idx$1602)) idx$1272) (⊢ (= 37 (* 2 idx$1602)) idx$1274) (⊢ (= 38 (* 2 idx$1602)) idx$1276) (⊢ (= 39 (* 2 idx$1602)) idx$1278) (⊢ (= 40 (* 2 idx$1602)) idx$1280) (⊢ (= 41 (* 2 idx$1602)) idx$1282) (⊢ (= 42 (* 2 idx$1602)) idx$1284) (⊢ (= 43 (* 2 idx$1602)) idx$1286) (⊢ (= 44 (* 2 idx$1602)) idx$1288) (⊢ (= 45 (* 2 idx$1602)) idx$1290) (⊢ (= 46 (* 2 idx$1602)) idx$1292) (⊢ (= 47 (* 2 idx$1602)) idx$1294) (⊢ (= 48 (* 2 idx$1602)) idx$1296) (⊢ (= 49 (* 2 idx$1602)) idx$1298) (⊢ (= 50 (* 2 idx$1602)) idx$1300) (⊢ (= 51 (* 2 idx$1602)) idx$1302) (⊢ (= 52 (* 2 idx$1602)) idx$1304) (⊢ (= 53 (* 2 idx$1602)) idx$1306) (⊢ (= 54 (* 2 idx$1602)) idx$1308) (⊢ (= 55 (* 2 idx$1602)) idx$1310) (⊢ (= 56 (* 2 idx$1602)) idx$1312) (⊢ (= 57 (* 2 idx$1602)) idx$1314) (⊢ (= 58 (* 2 idx$1602)) idx$1316) (⊢ (= 59 (* 2 idx$1602)) idx$1318) (⊢ (= 60 (* 2 idx$1602)) idx$1320) (⊢ (= 61 (* 2 idx$1602)) idx$1322) (⊢ (= 62 (* 2 idx$1602)) idx$1324) (⊢ (= 63 (* 2 idx$1602)) idx$1326) (⊢ (|| (= 0 (* 2 idx$1602)) (= 1 (* 2 idx$1602))) 0))))) (&& c$545 (= 7 (* 2 (ite* (⊢ (= 2 (* 2 idx$1602)) idx$1204) (⊢ (= 3 (* 2 idx$1602)) idx$1206) (⊢ (= 4 (* 2 idx$1602)) idx$1208) (⊢ (= 5 (* 2 idx$1602)) idx$1210) (⊢ (= 6 (* 2 idx$1602)) idx$1212) (⊢ (= 7 (* 2 idx$1602)) idx$1214) (⊢ (= 8 (* 2 idx$1602)) idx$1216) (⊢ (= 9 (* 2 idx$1602)) idx$1218) (⊢ (= 10 (* 2 idx$1602)) idx$1220) (⊢ (= 11 (* 2 idx$1602)) idx$1222) (⊢ (= 12 (* 2 idx$1602)) idx$1224) (⊢ (= 13 (* 2 idx$1602)) idx$1226) (⊢ (= 14 (* 2 idx$1602)) idx$1228) (⊢ (= 15 (* 2 idx$1602)) idx$1230) (⊢ (= 16 (* 2 idx$1602)) idx$1232) (⊢ (= 17 (* 2 idx$1602)) idx$1234) (⊢ (= 18 (* 2 idx$1602)) idx$1236) (⊢ (= 19 (* 2 idx$1602)) idx$1238) (⊢ (= 20 (* 2 idx$1602)) idx$1240) (⊢ (= 21 (* 2 idx$1602)) idx$1242) (⊢ (= 22 (* 2 idx$1602)) idx$1244) (⊢ (= 23 (* 2 idx$1602)) idx$1246) (⊢ (= 24 (* 2 idx$1602)) idx$1248) (⊢ (= 25 (* 2 idx$1602)) idx$1250) (⊢ (= 26 (* 2 idx$1602)) idx$1252) (⊢ (= 27 (* 2 idx$1602)) idx$1254) (⊢ (= 28 (* 2 idx$1602)) idx$1256) (⊢ (= 29 (* 2 idx$1602)) idx$1258) (⊢ (= 30 (* 2 idx$1602)) idx$1260) (⊢ (= 31 (* 2 idx$1602)) idx$1262) (⊢ (= 32 (* 2 idx$1602)) idx$1264) (⊢ (= 33 (* 2 idx$1602)) idx$1266) (⊢ (= 34 (* 2 idx$1602)) idx$1268) (⊢ (= 35 (* 2 idx$1602)) idx$1270) (⊢ (= 36 (* 2 idx$1602)) idx$1272) (⊢ (= 37 (* 2 idx$1602)) idx$1274) (⊢ (= 38 (* 2 idx$1602)) idx$1276) (⊢ (= 39 (* 2 idx$1602)) idx$1278) (⊢ (= 40 (* 2 idx$1602)) idx$1280) (⊢ (= 41 (* 2 idx$1602)) idx$1282) (⊢ (= 42 (* 2 idx$1602)) idx$1284) (⊢ (= 43 (* 2 idx$1602)) idx$1286) (⊢ (= 44 (* 2 idx$1602)) idx$1288) (⊢ (= 45 (* 2 idx$1602)) idx$1290) (⊢ (= 46 (* 2 idx$1602)) idx$1292) (⊢ (= 47 (* 2 idx$1602)) idx$1294) (⊢ (= 48 (* 2 idx$1602)) idx$1296) (⊢ (= 49 (* 2 idx$1602)) idx$1298) (⊢ (= 50 (* 2 idx$1602)) idx$1300) (⊢ (= 51 (* 2 idx$1602)) idx$1302) (⊢ (= 52 (* 2 idx$1602)) idx$1304) (⊢ (= 53 (* 2 idx$1602)) idx$1306) (⊢ (= 54 (* 2 idx$1602)) idx$1308) (⊢ (= 55 (* 2 idx$1602)) idx$1310) (⊢ (= 56 (* 2 idx$1602)) idx$1312) (⊢ (= 57 (* 2 idx$1602)) idx$1314) (⊢ (= 58 (* 2 idx$1602)) idx$1316) (⊢ (= 59 (* 2 idx$1602)) idx$1318) (⊢ (= 60 (* 2 idx$1602)) idx$1320) (⊢ (= 61 (* 2 idx$1602)) idx$1322) (⊢ (= 62 (* 2 idx$1602)) idx$1324) (⊢ (= 63 (* 2 idx$1602)) idx$1326) (⊢ (|| (= 0 (* 2 idx$1602)) (= 1 (* 2 idx$1602))) 0))))) (&& c$547 (= 8 (* 2 (ite* (⊢ (= 2 (* 2 idx$1602)) idx$1204) (⊢ (= 3 (* 2 idx$1602)) idx$1206) (⊢ (= 4 (* 2 idx$1602)) idx$1208) (⊢ (= 5 (* 2 idx$1602)) idx$1210) (⊢ (= 6 (* 2 idx$1602)) idx$1212) (⊢ (= 7 (* 2 idx$1602)) idx$1214) (⊢ (= 8 (* 2 idx$1602)) idx$1216) (⊢ (= 9 (* 2 idx$1602)) idx$1218) (⊢ (= 10 (* 2 idx$1602)) idx$1220) (⊢ (= 11 (* 2 idx$1602)) idx$1222) (⊢ (= 12 (* 2 idx$1602)) idx$1224) (⊢ (= 13 (* 2 idx$1602)) idx$1226) (⊢ (= 14 (* 2 idx$1602)) idx$1228) (⊢ (= 15 (* 2 idx$1602)) idx$1230) (⊢ (= 16 (* 2 idx$1602)) idx$1232) (⊢ (= 17 (* 2 idx$1602)) idx$1234) (⊢ (= 18 (* 2 idx$1602)) idx$1236) (⊢ (= 19 (* 2 idx$1602)) idx$1238) (⊢ (= 20 (* 2 idx$1602)) idx$1240) (⊢ (= 21 (* 2 idx$1602)) idx$1242) (⊢ (= 22 (* 2 idx$1602)) idx$1244) (⊢ (= 23 (* 2 idx$1602)) idx$1246) (⊢ (= 24 (* 2 idx$1602)) idx$1248) (⊢ (= 25 (* 2 idx$1602)) idx$1250) (⊢ (= 26 (* 2 idx$1602)) idx$1252) (⊢ (= 27 (* 2 idx$1602)) idx$1254) (⊢ (= 28 (* 2 idx$1602)) idx$1256) (⊢ (= 29 (* 2 idx$1602)) idx$1258) (⊢ (= 30 (* 2 idx$1602)) idx$1260) (⊢ (= 31 (* 2 idx$1602)) idx$1262) (⊢ (= 32 (* 2 idx$1602)) idx$1264) (⊢ (= 33 (* 2 idx$1602)) idx$1266) (⊢ (= 34 (* 2 idx$1602)) idx$1268) (⊢ (= 35 (* 2 idx$1602)) idx$1270) (⊢ (= 36 (* 2 idx$1602)) idx$1272) (⊢ (= 37 (* 2 idx$1602)) idx$1274) (⊢ (= 38 (* 2 idx$1602)) idx$1276) (⊢ (= 39 (* 2 idx$1602)) idx$1278) (⊢ (= 40 (* 2 idx$1602)) idx$1280) (⊢ (= 41 (* 2 idx$1602)) idx$1282) (⊢ (= 42 (* 2 idx$1602)) idx$1284) (⊢ (= 43 (* 2 idx$1602)) idx$1286) (⊢ (= 44 (* 2 idx$1602)) idx$1288) (⊢ (= 45 (* 2 idx$1602)) idx$1290) (⊢ (= 46 (* 2 idx$1602)) idx$1292) (⊢ (= 47 (* 2 idx$1602)) idx$1294) (⊢ (= 48 (* 2 idx$1602)) idx$1296) (⊢ (= 49 (* 2 idx$1602)) idx$1298) (⊢ (= 50 (* 2 idx$1602)) idx$1300) (⊢ (= 51 (* 2 idx$1602)) idx$1302) (⊢ (= 52 (* 2 idx$1602)) idx$1304) (⊢ (= 53 (* 2 idx$1602)) idx$1306) (⊢ (= 54 (* 2 idx$1602)) idx$1308) (⊢ (= 55 (* 2 idx$1602)) idx$1310) (⊢ (= 56 (* 2 idx$1602)) idx$1312) (⊢ (= 57 (* 2 idx$1602)) idx$1314) (⊢ (= 58 (* 2 idx$1602)) idx$1316) (⊢ (= 59 (* 2 idx$1602)) idx$1318) (⊢ (= 60 (* 2 idx$1602)) idx$1320) (⊢ (= 61 (* 2 idx$1602)) idx$1322) (⊢ (= 62 (* 2 idx$1602)) idx$1324) (⊢ (= 63 (* 2 idx$1602)) idx$1326) (⊢ (|| (= 0 (* 2 idx$1602)) (= 1 (* 2 idx$1602))) 0))))) (&& c$549 (= 9 (* 2 (ite* (⊢ (= 2 (* 2 idx$1602)) idx$1204) (⊢ (= 3 (* 2 idx$1602)) idx$1206) (⊢ (= 4 (* 2 idx$1602)) idx$1208) (⊢ (= 5 (* 2 idx$1602)) idx$1210) (⊢ (= 6 (* 2 idx$1602)) idx$1212) (⊢ (= 7 (* 2 idx$1602)) idx$1214) (⊢ (= 8 (* 2 idx$1602)) idx$1216) (⊢ (= 9 (* 2 idx$1602)) idx$1218) (⊢ (= 10 (* 2 idx$1602)) idx$1220) (⊢ (= 11 (* 2 idx$1602)) idx$1222) (⊢ (= 12 (* 2 idx$1602)) idx$1224) (⊢ (= 13 (* 2 idx$1602)) idx$1226) (⊢ (= 14 (* 2 idx$1602)) idx$1228) (⊢ (= 15 (* 2 idx$1602)) idx$1230) (⊢ (= 16 (* 2 idx$1602)) idx$1232) (⊢ (= 17 (* 2 idx$1602)) idx$1234) (⊢ (= 18 (* 2 idx$1602)) idx$1236) (⊢ (= 19 (* 2 idx$1602)) idx$1238) (⊢ (= 20 (* 2 idx$1602)) idx$1240) (⊢ (= 21 (* 2 idx$1602)) idx$1242) (⊢ (= 22 (* 2 idx$1602)) idx$1244) (⊢ (= 23 (* 2 idx$1602)) idx$1246) (⊢ (= 24 (* 2 idx$1602)) idx$1248) (⊢ (= 25 (* 2 idx$1602)) idx$1250) (⊢ (= 26 (* 2 idx$1602)) idx$1252) (⊢ (= 27 (* 2 idx$1602)) idx$1254) (⊢ (= 28 (* 2 idx$1602)) idx$1256) (⊢ (= 29 (* 2 idx$1602)) idx$1258) (⊢ (= 30 (* 2 idx$1602)) idx$1260) (⊢ (= 31 (* 2 idx$1602)) idx$1262) (⊢ (= 32 (* 2 idx$1602)) idx$1264) (⊢ (= 33 (* 2 idx$1602)) idx$1266) (⊢ (= 34 (* 2 idx$1602)) idx$1268) (⊢ (= 35 (* 2 idx$1602)) idx$1270) (⊢ (= 36 (* 2 idx$1602)) idx$1272) (⊢ (= 37 (* 2 idx$1602)) idx$1274) (⊢ (= 38 (* 2 idx$1602)) idx$1276) (⊢ (= 39 (* 2 idx$1602)) idx$1278) (⊢ (= 40 (* 2 idx$1602)) idx$1280) (⊢ (= 41 (* 2 idx$1602)) idx$1282) (⊢ (= 42 (* 2 idx$1602)) idx$1284) (⊢ (= 43 (* 2 idx$1602)) idx$1286) (⊢ (= 44 (* 2 idx$1602)) idx$1288) (⊢ (= 45 (* 2 idx$1602)) idx$1290) (⊢ (= 46 (* 2 idx$1602)) idx$1292) (⊢ (= 47 (* 2 idx$1602)) idx$1294) (⊢ (= 48 (* 2 idx$1602)) idx$1296) (⊢ (= 49 (* 2 idx$1602)) idx$1298) (⊢ (= 50 (* 2 idx$1602)) idx$1300) (⊢ (= 51 (* 2 idx$1602)) idx$1302) (⊢ (= 52 (* 2 idx$1602)) idx$1304) (⊢ (= 53 (* 2 idx$1602)) idx$1306) (⊢ (= 54 (* 2 idx$1602)) idx$1308) (⊢ (= 55 (* 2 idx$1602)) idx$1310) (⊢ (= 56 (* 2 idx$1602)) idx$1312) (⊢ (= 57 (* 2 idx$1602)) idx$1314) (⊢ (= 58 (* 2 idx$1602)) idx$1316) (⊢ (= 59 (* 2 idx$1602)) idx$1318) (⊢ (= 60 (* 2 idx$1602)) idx$1320) (⊢ (= 61 (* 2 idx$1602)) idx$1322) (⊢ (= 62 (* 2 idx$1602)) idx$1324) (⊢ (= 63 (* 2 idx$1602)) idx$1326) (⊢ (|| (= 0 (* 2 idx$1602)) (= 1 (* 2 idx$1602))) 0))))) (&& c$551 (= 10 (* 2 (ite* (⊢ (= 2 (* 2 idx$1602)) idx$1204) (⊢ (= 3 (* 2 idx$1602)) idx$1206) (⊢ (= 4 (* 2 idx$1602)) idx$1208) (⊢ (= 5 (* 2 idx$1602)) idx$1210) (⊢ (= 6 (* 2 idx$1602)) idx$1212) (⊢ (= 7 (* 2 idx$1602)) idx$1214) (⊢ (= 8 (* 2 idx$1602)) idx$1216) (⊢ (= 9 (* 2 idx$1602)) idx$1218) (⊢ (= 10 (* 2 idx$1602)) idx$1220) (⊢ (= 11 (* 2 idx$1602)) idx$1222) (⊢ (= 12 (* 2 idx$1602)) idx$1224) (⊢ (= 13 (* 2 idx$1602)) idx$1226) (⊢ (= 14 (* 2 idx$1602)) idx$1228) (⊢ (= 15 (* 2 idx$1602)) idx$1230) (⊢ (= 16 (* 2 idx$1602)) idx$1232) (⊢ (= 17 (* 2 idx$1602)) idx$1234) (⊢ (= 18 (* 2 idx$1602)) idx$1236) (⊢ (= 19 (* 2 idx$1602)) idx$1238) (⊢ (= 20 (* 2 idx$1602)) idx$1240) (⊢ (= 21 (* 2 idx$1602)) idx$1242) (⊢ (= 22 (* 2 idx$1602)) idx$1244) (⊢ (= 23 (* 2 idx$1602)) idx$1246) (⊢ (= 24 (* 2 idx$1602)) idx$1248) (⊢ (= 25 (* 2 idx$1602)) idx$1250) (⊢ (= 26 (* 2 idx$1602)) idx$1252) (⊢ (= 27 (* 2 idx$1602)) idx$1254) (⊢ (= 28 (* 2 idx$1602)) idx$1256) (⊢ (= 29 (* 2 idx$1602)) idx$1258) (⊢ (= 30 (* 2 idx$1602)) idx$1260) (⊢ (= 31 (* 2 idx$1602)) idx$1262) (⊢ (= 32 (* 2 idx$1602)) idx$1264) (⊢ (= 33 (* 2 idx$1602)) idx$1266) (⊢ (= 34 (* 2 idx$1602)) idx$1268) (⊢ (= 35 (* 2 idx$1602)) idx$1270) (⊢ (= 36 (* 2 idx$1602)) idx$1272) (⊢ (= 37 (* 2 idx$1602)) idx$1274) (⊢ (= 38 (* 2 idx$1602)) idx$1276) (⊢ (= 39 (* 2 idx$1602)) idx$1278) (⊢ (= 40 (* 2 idx$1602)) idx$1280) (⊢ (= 41 (* 2 idx$1602)) idx$1282) (⊢ (= 42 (* 2 idx$1602)) idx$1284) (⊢ (= 43 (* 2 idx$1602)) idx$1286) (⊢ (= 44 (* 2 idx$1602)) idx$1288) (⊢ (= 45 (* 2 idx$1602)) idx$1290) (⊢ (= 46 (* 2 idx$1602)) idx$1292) (⊢ (= 47 (* 2 idx$1602)) idx$1294) (⊢ (= 48 (* 2 idx$1602)) idx$1296) (⊢ (= 49 (* 2 idx$1602)) idx$1298) (⊢ (= 50 (* 2 idx$1602)) idx$1300) (⊢ (= 51 (* 2 idx$1602)) idx$1302) (⊢ (= 52 (* 2 idx$1602)) idx$1304) (⊢ (= 53 (* 2 idx$1602)) idx$1306) (⊢ (= 54 (* 2 idx$1602)) idx$1308) (⊢ (= 55 (* 2 idx$1602)) idx$1310) (⊢ (= 56 (* 2 idx$1602)) idx$1312) (⊢ (= 57 (* 2 idx$1602)) idx$1314) (⊢ (= 58 (* 2 idx$1602)) idx$1316) (⊢ (= 59 (* 2 idx$1602)) idx$1318) (⊢ (= 60 (* 2 idx$1602)) idx$1320) (⊢ (= 61 (* 2 idx$1602)) idx$1322) (⊢ (= 62 (* 2 idx$1602)) idx$1324) (⊢ (= 63 (* 2 idx$1602)) idx$1326) (⊢ (|| (= 0 (* 2 idx$1602)) (= 1 (* 2 idx$1602))) 0))))) (&& c$553 (= 11 (* 2 (ite* (⊢ (= 2 (* 2 idx$1602)) idx$1204) (⊢ (= 3 (* 2 idx$1602)) idx$1206) (⊢ (= 4 (* 2 idx$1602)) idx$1208) (⊢ (= 5 (* 2 idx$1602)) idx$1210) (⊢ (= 6 (* 2 idx$1602)) idx$1212) (⊢ (= 7 (* 2 idx$1602)) idx$1214) (⊢ (= 8 (* 2 idx$1602)) idx$1216) (⊢ (= 9 (* 2 idx$1602)) idx$1218) (⊢ (= 10 (* 2 idx$1602)) idx$1220) (⊢ (= 11 (* 2 idx$1602)) idx$1222) (⊢ (= 12 (* 2 idx$1602)) idx$1224) (⊢ (= 13 (* 2 idx$1602)) idx$1226) (⊢ (= 14 (* 2 idx$1602)) idx$1228) (⊢ (= 15 (* 2 idx$1602)) idx$1230) (⊢ (= 16 (* 2 idx$1602)) idx$1232) (⊢ (= 17 (* 2 idx$1602)) idx$1234) (⊢ (= 18 (* 2 idx$1602)) idx$1236) (⊢ (= 19 (* 2 idx$1602)) idx$1238) (⊢ (= 20 (* 2 idx$1602)) idx$1240) (⊢ (= 21 (* 2 idx$1602)) idx$1242) (⊢ (= 22 (* 2 idx$1602)) idx$1244) (⊢ (= 23 (* 2 idx$1602)) idx$1246) (⊢ (= 24 (* 2 idx$1602)) idx$1248) (⊢ (= 25 (* 2 idx$1602)) idx$1250) (⊢ (= 26 (* 2 idx$1602)) idx$1252) (⊢ (= 27 (* 2 idx$1602)) idx$1254) (⊢ (= 28 (* 2 idx$1602)) idx$1256) (⊢ (= 29 (* 2 idx$1602)) idx$1258) (⊢ (= 30 (* 2 idx$1602)) idx$1260) (⊢ (= 31 (* 2 idx$1602)) idx$1262) (⊢ (= 32 (* 2 idx$1602)) idx$1264) (⊢ (= 33 (* 2 idx$1602)) idx$1266) (⊢ (= 34 (* 2 idx$1602)) idx$1268) (⊢ (= 35 (* 2 idx$1602)) idx$1270) (⊢ (= 36 (* 2 idx$1602)) idx$1272) (⊢ (= 37 (* 2 idx$1602)) idx$1274) (⊢ (= 38 (* 2 idx$1602)) idx$1276) (⊢ (= 39 (* 2 idx$1602)) idx$1278) (⊢ (= 40 (* 2 idx$1602)) idx$1280) (⊢ (= 41 (* 2 idx$1602)) idx$1282) (⊢ (= 42 (* 2 idx$1602)) idx$1284) (⊢ (= 43 (* 2 idx$1602)) idx$1286) (⊢ (= 44 (* 2 idx$1602)) idx$1288) (⊢ (= 45 (* 2 idx$1602)) idx$1290) (⊢ (= 46 (* 2 idx$1602)) idx$1292) (⊢ (= 47 (* 2 idx$1602)) idx$1294) (⊢ (= 48 (* 2 idx$1602)) idx$1296) (⊢ (= 49 (* 2 idx$1602)) idx$1298) (⊢ (= 50 (* 2 idx$1602)) idx$1300) (⊢ (= 51 (* 2 idx$1602)) idx$1302) (⊢ (= 52 (* 2 idx$1602)) idx$1304) (⊢ (= 53 (* 2 idx$1602)) idx$1306) (⊢ (= 54 (* 2 idx$1602)) idx$1308) (⊢ (= 55 (* 2 idx$1602)) idx$1310) (⊢ (= 56 (* 2 idx$1602)) idx$1312) (⊢ (= 57 (* 2 idx$1602)) idx$1314) (⊢ (= 58 (* 2 idx$1602)) idx$1316) (⊢ (= 59 (* 2 idx$1602)) idx$1318) (⊢ (= 60 (* 2 idx$1602)) idx$1320) (⊢ (= 61 (* 2 idx$1602)) idx$1322) (⊢ (= 62 (* 2 idx$1602)) idx$1324) (⊢ (= 63 (* 2 idx$1602)) idx$1326) (⊢ (|| (= 0 (* 2 idx$1602)) (= 1 (* 2 idx$1602))) 0))))) (&& c$555 (= 12 (* 2 (ite* (⊢ (= 2 (* 2 idx$1602)) idx$1204) (⊢ (= 3 (* 2 idx$1602)) idx$1206) (⊢ (= 4 (* 2 idx$1602)) idx$1208) (⊢ (= 5 (* 2 idx$1602)) idx$1210) (⊢ (= 6 (* 2 idx$1602)) idx$1212) (⊢ (= 7 (* 2 idx$1602)) idx$1214) (⊢ (= 8 (* 2 idx$1602)) idx$1216) (⊢ (= 9 (* 2 idx$1602)) idx$1218) (⊢ (= 10 (* 2 idx$1602)) idx$1220) (⊢ (= 11 (* 2 idx$1602)) idx$1222) (⊢ (= 12 (* 2 idx$1602)) idx$1224) (⊢ (= 13 (* 2 idx$1602)) idx$1226) (⊢ (= 14 (* 2 idx$1602)) idx$1228) (⊢ (= 15 (* 2 idx$1602)) idx$1230) (⊢ (= 16 (* 2 idx$1602)) idx$1232) (⊢ (= 17 (* 2 idx$1602)) idx$1234) (⊢ (= 18 (* 2 idx$1602)) idx$1236) (⊢ (= 19 (* 2 idx$1602)) idx$1238) (⊢ (= 20 (* 2 idx$1602)) idx$1240) (⊢ (= 21 (* 2 idx$1602)) idx$1242) (⊢ (= 22 (* 2 idx$1602)) idx$1244) (⊢ (= 23 (* 2 idx$1602)) idx$1246) (⊢ (= 24 (* 2 idx$1602)) idx$1248) (⊢ (= 25 (* 2 idx$1602)) idx$1250) (⊢ (= 26 (* 2 idx$1602)) idx$1252) (⊢ (= 27 (* 2 idx$1602)) idx$1254) (⊢ (= 28 (* 2 idx$1602)) idx$1256) (⊢ (= 29 (* 2 idx$1602)) idx$1258) (⊢ (= 30 (* 2 idx$1602)) idx$1260) (⊢ (= 31 (* 2 idx$1602)) idx$1262) (⊢ (= 32 (* 2 idx$1602)) idx$1264) (⊢ (= 33 (* 2 idx$1602)) idx$1266) (⊢ (= 34 (* 2 idx$1602)) idx$1268) (⊢ (= 35 (* 2 idx$1602)) idx$1270) (⊢ (= 36 (* 2 idx$1602)) idx$1272) (⊢ (= 37 (* 2 idx$1602)) idx$1274) (⊢ (= 38 (* 2 idx$1602)) idx$1276) (⊢ (= 39 (* 2 idx$1602)) idx$1278) (⊢ (= 40 (* 2 idx$1602)) idx$1280) (⊢ (= 41 (* 2 idx$1602)) idx$1282) (⊢ (= 42 (* 2 idx$1602)) idx$1284) (⊢ (= 43 (* 2 idx$1602)) idx$1286) (⊢ (= 44 (* 2 idx$1602)) idx$1288) (⊢ (= 45 (* 2 idx$1602)) idx$1290) (⊢ (= 46 (* 2 idx$1602)) idx$1292) (⊢ (= 47 (* 2 idx$1602)) idx$1294) (⊢ (= 48 (* 2 idx$1602)) idx$1296) (⊢ (= 49 (* 2 idx$1602)) idx$1298) (⊢ (= 50 (* 2 idx$1602)) idx$1300) (⊢ (= 51 (* 2 idx$1602)) idx$1302) (⊢ (= 52 (* 2 idx$1602)) idx$1304) (⊢ (= 53 (* 2 idx$1602)) idx$1306) (⊢ (= 54 (* 2 idx$1602)) idx$1308) (⊢ (= 55 (* 2 idx$1602)) idx$1310) (⊢ (= 56 (* 2 idx$1602)) idx$1312) (⊢ (= 57 (* 2 idx$1602)) idx$1314) (⊢ (= 58 (* 2 idx$1602)) idx$1316) (⊢ (= 59 (* 2 idx$1602)) idx$1318) (⊢ (= 60 (* 2 idx$1602)) idx$1320) (⊢ (= 61 (* 2 idx$1602)) idx$1322) (⊢ (= 62 (* 2 idx$1602)) idx$1324) (⊢ (= 63 (* 2 idx$1602)) idx$1326) (⊢ (|| (= 0 (* 2 idx$1602)) (= 1 (* 2 idx$1602))) 0))))) (&& c$557 (= 13 (* 2 (ite* (⊢ (= 2 (* 2 idx$1602)) idx$1204) (⊢ (= 3 (* 2 idx$1602)) idx$1206) (⊢ (= 4 (* 2 idx$1602)) idx$1208) (⊢ (= 5 (* 2 idx$1602)) idx$1210) (⊢ (= 6 (* 2 idx$1602)) idx$1212) (⊢ (= 7 (* 2 idx$1602)) idx$1214) (⊢ (= 8 (* 2 idx$1602)) idx$1216) (⊢ (= 9 (* 2 idx$1602)) idx$1218) (⊢ (= 10 (* 2 idx$1602)) idx$1220) (⊢ (= 11 (* 2 idx$1602)) idx$1222) (⊢ (= 12 (* 2 idx$1602)) idx$1224) (⊢ (= 13 (* 2 idx$1602)) idx$1226) (⊢ (= 14 (* 2 idx$1602)) idx$1228) (⊢ (= 15 (* 2 idx$1602)) idx$1230) (⊢ (= 16 (* 2 idx$1602)) idx$1232) (⊢ (= 17 (* 2 idx$1602)) idx$1234) (⊢ (= 18 (* 2 idx$1602)) idx$1236) (⊢ (= 19 (* 2 idx$1602)) idx$1238) (⊢ (= 20 (* 2 idx$1602)) idx$1240) (⊢ (= 21 (* 2 idx$1602)) idx$1242) (⊢ (= 22 (* 2 idx$1602)) idx$1244) (⊢ (= 23 (* 2 idx$1602)) idx$1246) (⊢ (= 24 (* 2 idx$1602)) idx$1248) (⊢ (= 25 (* 2 idx$1602)) idx$1250) (⊢ (= 26 (* 2 idx$1602)) idx$1252) (⊢ (= 27 (* 2 idx$1602)) idx$1254) (⊢ (= 28 (* 2 idx$1602)) idx$1256) (⊢ (= 29 (* 2 idx$1602)) idx$1258) (⊢ (= 30 (* 2 idx$1602)) idx$1260) (⊢ (= 31 (* 2 idx$1602)) idx$1262) (⊢ (= 32 (* 2 idx$1602)) idx$1264) (⊢ (= 33 (* 2 idx$1602)) idx$1266) (⊢ (= 34 (* 2 idx$1602)) idx$1268) (⊢ (= 35 (* 2 idx$1602)) idx$1270) (⊢ (= 36 (* 2 idx$1602)) idx$1272) (⊢ (= 37 (* 2 idx$1602)) idx$1274) (⊢ (= 38 (* 2 idx$1602)) idx$1276) (⊢ (= 39 (* 2 idx$1602)) idx$1278) (⊢ (= 40 (* 2 idx$1602)) idx$1280) (⊢ (= 41 (* 2 idx$1602)) idx$1282) (⊢ (= 42 (* 2 idx$1602)) idx$1284) (⊢ (= 43 (* 2 idx$1602)) idx$1286) (⊢ (= 44 (* 2 idx$1602)) idx$1288) (⊢ (= 45 (* 2 idx$1602)) idx$1290) (⊢ (= 46 (* 2 idx$1602)) idx$1292) (⊢ (= 47 (* 2 idx$1602)) idx$1294) (⊢ (= 48 (* 2 idx$1602)) idx$1296) (⊢ (= 49 (* 2 idx$1602)) idx$1298) (⊢ (= 50 (* 2 idx$1602)) idx$1300) (⊢ (= 51 (* 2 idx$1602)) idx$1302) (⊢ (= 52 (* 2 idx$1602)) idx$1304) (⊢ (= 53 (* 2 idx$1602)) idx$1306) (⊢ (= 54 (* 2 idx$1602)) idx$1308) (⊢ (= 55 (* 2 idx$1602)) idx$1310) (⊢ (= 56 (* 2 idx$1602)) idx$1312) (⊢ (= 57 (* 2 idx$1602)) idx$1314) (⊢ (= 58 (* 2 idx$1602)) idx$1316) (⊢ (= 59 (* 2 idx$1602)) idx$1318) (⊢ (= 60 (* 2 idx$1602)) idx$1320) (⊢ (= 61 (* 2 idx$1602)) idx$1322) (⊢ (= 62 (* 2 idx$1602)) idx$1324) (⊢ (= 63 (* 2 idx$1602)) idx$1326) (⊢ (|| (= 0 (* 2 idx$1602)) (= 1 (* 2 idx$1602))) 0))))) (&& c$559 (= 14 (* 2 (ite* (⊢ (= 2 (* 2 idx$1602)) idx$1204) (⊢ (= 3 (* 2 idx$1602)) idx$1206) (⊢ (= 4 (* 2 idx$1602)) idx$1208) (⊢ (= 5 (* 2 idx$1602)) idx$1210) (⊢ (= 6 (* 2 idx$1602)) idx$1212) (⊢ (= 7 (* 2 idx$1602)) idx$1214) (⊢ (= 8 (* 2 idx$1602)) idx$1216) (⊢ (= 9 (* 2 idx$1602)) idx$1218) (⊢ (= 10 (* 2 idx$1602)) idx$1220) (⊢ (= 11 (* 2 idx$1602)) idx$1222) (⊢ (= 12 (* 2 idx$1602)) idx$1224) (⊢ (= 13 (* 2 idx$1602)) idx$1226) (⊢ (= 14 (* 2 idx$1602)) idx$1228) (⊢ (= 15 (* 2 idx$1602)) idx$1230) (⊢ (= 16 (* 2 idx$1602)) idx$1232) (⊢ (= 17 (* 2 idx$1602)) idx$1234) (⊢ (= 18 (* 2 idx$1602)) idx$1236) (⊢ (= 19 (* 2 idx$1602)) idx$1238) (⊢ (= 20 (* 2 idx$1602)) idx$1240) (⊢ (= 21 (* 2 idx$1602)) idx$1242) (⊢ (= 22 (* 2 idx$1602)) idx$1244) (⊢ (= 23 (* 2 idx$1602)) idx$1246) (⊢ (= 24 (* 2 idx$1602)) idx$1248) (⊢ (= 25 (* 2 idx$1602)) idx$1250) (⊢ (= 26 (* 2 idx$1602)) idx$1252) (⊢ (= 27 (* 2 idx$1602)) idx$1254) (⊢ (= 28 (* 2 idx$1602)) idx$1256) (⊢ (= 29 (* 2 idx$1602)) idx$1258) (⊢ (= 30 (* 2 idx$1602)) idx$1260) (⊢ (= 31 (* 2 idx$1602)) idx$1262) (⊢ (= 32 (* 2 idx$1602)) idx$1264) (⊢ (= 33 (* 2 idx$1602)) idx$1266) (⊢ (= 34 (* 2 idx$1602)) idx$1268) (⊢ (= 35 (* 2 idx$1602)) idx$1270) (⊢ (= 36 (* 2 idx$1602)) idx$1272) (⊢ (= 37 (* 2 idx$1602)) idx$1274) (⊢ (= 38 (* 2 idx$1602)) idx$1276) (⊢ (= 39 (* 2 idx$1602)) idx$1278) (⊢ (= 40 (* 2 idx$1602)) idx$1280) (⊢ (= 41 (* 2 idx$1602)) idx$1282) (⊢ (= 42 (* 2 idx$1602)) idx$1284) (⊢ (= 43 (* 2 idx$1602)) idx$1286) (⊢ (= 44 (* 2 idx$1602)) idx$1288) (⊢ (= 45 (* 2 idx$1602)) idx$1290) (⊢ (= 46 (* 2 idx$1602)) idx$1292) (⊢ (= 47 (* 2 idx$1602)) idx$1294) (⊢ (= 48 (* 2 idx$1602)) idx$1296) (⊢ (= 49 (* 2 idx$1602)) idx$1298) (⊢ (= 50 (* 2 idx$1602)) idx$1300) (⊢ (= 51 (* 2 idx$1602)) idx$1302) (⊢ (= 52 (* 2 idx$1602)) idx$1304) (⊢ (= 53 (* 2 idx$1602)) idx$1306) (⊢ (= 54 (* 2 idx$1602)) idx$1308) (⊢ (= 55 (* 2 idx$1602)) idx$1310) (⊢ (= 56 (* 2 idx$1602)) idx$1312) (⊢ (= 57 (* 2 idx$1602)) idx$1314) (⊢ (= 58 (* 2 idx$1602)) idx$1316) (⊢ (= 59 (* 2 idx$1602)) idx$1318) (⊢ (= 60 (* 2 idx$1602)) idx$1320) (⊢ (= 61 (* 2 idx$1602)) idx$1322) (⊢ (= 62 (* 2 idx$1602)) idx$1324) (⊢ (= 63 (* 2 idx$1602)) idx$1326) (⊢ (|| (= 0 (* 2 idx$1602)) (= 1 (* 2 idx$1602))) 0))))) (&& c$561 (= 15 (* 2 (ite* (⊢ (= 2 (* 2 idx$1602)) idx$1204) (⊢ (= 3 (* 2 idx$1602)) idx$1206) (⊢ (= 4 (* 2 idx$1602)) idx$1208) (⊢ (= 5 (* 2 idx$1602)) idx$1210) (⊢ (= 6 (* 2 idx$1602)) idx$1212) (⊢ (= 7 (* 2 idx$1602)) idx$1214) (⊢ (= 8 (* 2 idx$1602)) idx$1216) (⊢ (= 9 (* 2 idx$1602)) idx$1218) (⊢ (= 10 (* 2 idx$1602)) idx$1220) (⊢ (= 11 (* 2 idx$1602)) idx$1222) (⊢ (= 12 (* 2 idx$1602)) idx$1224) (⊢ (= 13 (* 2 idx$1602)) idx$1226) (⊢ (= 14 (* 2 idx$1602)) idx$1228) (⊢ (= 15 (* 2 idx$1602)) idx$1230) (⊢ (= 16 (* 2 idx$1602)) idx$1232) (⊢ (= 17 (* 2 idx$1602)) idx$1234) (⊢ (= 18 (* 2 idx$1602)) idx$1236) (⊢ (= 19 (* 2 idx$1602)) idx$1238) (⊢ (= 20 (* 2 idx$1602)) idx$1240) (⊢ (= 21 (* 2 idx$1602)) idx$1242) (⊢ (= 22 (* 2 idx$1602)) idx$1244) (⊢ (= 23 (* 2 idx$1602)) idx$1246) (⊢ (= 24 (* 2 idx$1602)) idx$1248) (⊢ (= 25 (* 2 idx$1602)) idx$1250) (⊢ (= 26 (* 2 idx$1602)) idx$1252) (⊢ (= 27 (* 2 idx$1602)) idx$1254) (⊢ (= 28 (* 2 idx$1602)) idx$1256) (⊢ (= 29 (* 2 idx$1602)) idx$1258) (⊢ (= 30 (* 2 idx$1602)) idx$1260) (⊢ (= 31 (* 2 idx$1602)) idx$1262) (⊢ (= 32 (* 2 idx$1602)) idx$1264) (⊢ (= 33 (* 2 idx$1602)) idx$1266) (⊢ (= 34 (* 2 idx$1602)) idx$1268) (⊢ (= 35 (* 2 idx$1602)) idx$1270) (⊢ (= 36 (* 2 idx$1602)) idx$1272) (⊢ (= 37 (* 2 idx$1602)) idx$1274) (⊢ (= 38 (* 2 idx$1602)) idx$1276) (⊢ (= 39 (* 2 idx$1602)) idx$1278) (⊢ (= 40 (* 2 idx$1602)) idx$1280) (⊢ (= 41 (* 2 idx$1602)) idx$1282) (⊢ (= 42 (* 2 idx$1602)) idx$1284) (⊢ (= 43 (* 2 idx$1602)) idx$1286) (⊢ (= 44 (* 2 idx$1602)) idx$1288) (⊢ (= 45 (* 2 idx$1602)) idx$1290) (⊢ (= 46 (* 2 idx$1602)) idx$1292) (⊢ (= 47 (* 2 idx$1602)) idx$1294) (⊢ (= 48 (* 2 idx$1602)) idx$1296) (⊢ (= 49 (* 2 idx$1602)) idx$1298) (⊢ (= 50 (* 2 idx$1602)) idx$1300) (⊢ (= 51 (* 2 idx$1602)) idx$1302) (⊢ (= 52 (* 2 idx$1602)) idx$1304) (⊢ (= 53 (* 2 idx$1602)) idx$1306) (⊢ (= 54 (* 2 idx$1602)) idx$1308) (⊢ (= 55 (* 2 idx$1602)) idx$1310) (⊢ (= 56 (* 2 idx$1602)) idx$1312) (⊢ (= 57 (* 2 idx$1602)) idx$1314) (⊢ (= 58 (* 2 idx$1602)) idx$1316) (⊢ (= 59 (* 2 idx$1602)) idx$1318) (⊢ (= 60 (* 2 idx$1602)) idx$1320) (⊢ (= 61 (* 2 idx$1602)) idx$1322) (⊢ (= 62 (* 2 idx$1602)) idx$1324) (⊢ (= 63 (* 2 idx$1602)) idx$1326) (⊢ (|| (= 0 (* 2 idx$1602)) (= 1 (* 2 idx$1602))) 0))))) (&& c$563 (= 16 (* 2 (ite* (⊢ (= 2 (* 2 idx$1602)) idx$1204) (⊢ (= 3 (* 2 idx$1602)) idx$1206) (⊢ (= 4 (* 2 idx$1602)) idx$1208) (⊢ (= 5 (* 2 idx$1602)) idx$1210) (⊢ (= 6 (* 2 idx$1602)) idx$1212) (⊢ (= 7 (* 2 idx$1602)) idx$1214) (⊢ (= 8 (* 2 idx$1602)) idx$1216) (⊢ (= 9 (* 2 idx$1602)) idx$1218) (⊢ (= 10 (* 2 idx$1602)) idx$1220) (⊢ (= 11 (* 2 idx$1602)) idx$1222) (⊢ (= 12 (* 2 idx$1602)) idx$1224) (⊢ (= 13 (* 2 idx$1602)) idx$1226) (⊢ (= 14 (* 2 idx$1602)) idx$1228) (⊢ (= 15 (* 2 idx$1602)) idx$1230) (⊢ (= 16 (* 2 idx$1602)) idx$1232) (⊢ (= 17 (* 2 idx$1602)) idx$1234) (⊢ (= 18 (* 2 idx$1602)) idx$1236) (⊢ (= 19 (* 2 idx$1602)) idx$1238) (⊢ (= 20 (* 2 idx$1602)) idx$1240) (⊢ (= 21 (* 2 idx$1602)) idx$1242) (⊢ (= 22 (* 2 idx$1602)) idx$1244) (⊢ (= 23 (* 2 idx$1602)) idx$1246) (⊢ (= 24 (* 2 idx$1602)) idx$1248) (⊢ (= 25 (* 2 idx$1602)) idx$1250) (⊢ (= 26 (* 2 idx$1602)) idx$1252) (⊢ (= 27 (* 2 idx$1602)) idx$1254) (⊢ (= 28 (* 2 idx$1602)) idx$1256) (⊢ (= 29 (* 2 idx$1602)) idx$1258) (⊢ (= 30 (* 2 idx$1602)) idx$1260) (⊢ (= 31 (* 2 idx$1602)) idx$1262) (⊢ (= 32 (* 2 idx$1602)) idx$1264) (⊢ (= 33 (* 2 idx$1602)) idx$1266) (⊢ (= 34 (* 2 idx$1602)) idx$1268) (⊢ (= 35 (* 2 idx$1602)) idx$1270) (⊢ (= 36 (* 2 idx$1602)) idx$1272) (⊢ (= 37 (* 2 idx$1602)) idx$1274) (⊢ (= 38 (* 2 idx$1602)) idx$1276) (⊢ (= 39 (* 2 idx$1602)) idx$1278) (⊢ (= 40 (* 2 idx$1602)) idx$1280) (⊢ (= 41 (* 2 idx$1602)) idx$1282) (⊢ (= 42 (* 2 idx$1602)) idx$1284) (⊢ (= 43 (* 2 idx$1602)) idx$1286) (⊢ (= 44 (* 2 idx$1602)) idx$1288) (⊢ (= 45 (* 2 idx$1602)) idx$1290) (⊢ (= 46 (* 2 idx$1602)) idx$1292) (⊢ (= 47 (* 2 idx$1602)) idx$1294) (⊢ (= 48 (* 2 idx$1602)) idx$1296) (⊢ (= 49 (* 2 idx$1602)) idx$1298) (⊢ (= 50 (* 2 idx$1602)) idx$1300) (⊢ (= 51 (* 2 idx$1602)) idx$1302) (⊢ (= 52 (* 2 idx$1602)) idx$1304) (⊢ (= 53 (* 2 idx$1602)) idx$1306) (⊢ (= 54 (* 2 idx$1602)) idx$1308) (⊢ (= 55 (* 2 idx$1602)) idx$1310) (⊢ (= 56 (* 2 idx$1602)) idx$1312) (⊢ (= 57 (* 2 idx$1602)) idx$1314) (⊢ (= 58 (* 2 idx$1602)) idx$1316) (⊢ (= 59 (* 2 idx$1602)) idx$1318) (⊢ (= 60 (* 2 idx$1602)) idx$1320) (⊢ (= 61 (* 2 idx$1602)) idx$1322) (⊢ (= 62 (* 2 idx$1602)) idx$1324) (⊢ (= 63 (* 2 idx$1602)) idx$1326) (⊢ (|| (= 0 (* 2 idx$1602)) (= 1 (* 2 idx$1602))) 0))))) (&& c$565 (= 17 (* 2 (ite* (⊢ (= 2 (* 2 idx$1602)) idx$1204) (⊢ (= 3 (* 2 idx$1602)) idx$1206) (⊢ (= 4 (* 2 idx$1602)) idx$1208) (⊢ (= 5 (* 2 idx$1602)) idx$1210) (⊢ (= 6 (* 2 idx$1602)) idx$1212) (⊢ (= 7 (* 2 idx$1602)) idx$1214) (⊢ (= 8 (* 2 idx$1602)) idx$1216) (⊢ (= 9 (* 2 idx$1602)) idx$1218) (⊢ (= 10 (* 2 idx$1602)) idx$1220) (⊢ (= 11 (* 2 idx$1602)) idx$1222) (⊢ (= 12 (* 2 idx$1602)) idx$1224) (⊢ (= 13 (* 2 idx$1602)) idx$1226) (⊢ (= 14 (* 2 idx$1602)) idx$1228) (⊢ (= 15 (* 2 idx$1602)) idx$1230) (⊢ (= 16 (* 2 idx$1602)) idx$1232) (⊢ (= 17 (* 2 idx$1602)) idx$1234) (⊢ (= 18 (* 2 idx$1602)) idx$1236) (⊢ (= 19 (* 2 idx$1602)) idx$1238) (⊢ (= 20 (* 2 idx$1602)) idx$1240) (⊢ (= 21 (* 2 idx$1602)) idx$1242) (⊢ (= 22 (* 2 idx$1602)) idx$1244) (⊢ (= 23 (* 2 idx$1602)) idx$1246) (⊢ (= 24 (* 2 idx$1602)) idx$1248) (⊢ (= 25 (* 2 idx$1602)) idx$1250) (⊢ (= 26 (* 2 idx$1602)) idx$1252) (⊢ (= 27 (* 2 idx$1602)) idx$1254) (⊢ (= 28 (* 2 idx$1602)) idx$1256) (⊢ (= 29 (* 2 idx$1602)) idx$1258) (⊢ (= 30 (* 2 idx$1602)) idx$1260) (⊢ (= 31 (* 2 idx$1602)) idx$1262) (⊢ (= 32 (* 2 idx$1602)) idx$1264) (⊢ (= 33 (* 2 idx$1602)) idx$1266) (⊢ (= 34 (* 2 idx$1602)) idx$1268) (⊢ (= 35 (* 2 idx$1602)) idx$1270) (⊢ (= 36 (* 2 idx$1602)) idx$1272) (⊢ (= 37 (* 2 idx$1602)) idx$1274) (⊢ (= 38 (* 2 idx$1602)) idx$1276) (⊢ (= 39 (* 2 idx$1602)) idx$1278) (⊢ (= 40 (* 2 idx$1602)) idx$1280) (⊢ (= 41 (* 2 idx$1602)) idx$1282) (⊢ (= 42 (* 2 idx$1602)) idx$1284) (⊢ (= 43 (* 2 idx$1602)) idx$1286) (⊢ (= 44 (* 2 idx$1602)) idx$1288) (⊢ (= 45 (* 2 idx$1602)) idx$1290) (⊢ (= 46 (* 2 idx$1602)) idx$1292) (⊢ (= 47 (* 2 idx$1602)) idx$1294) (⊢ (= 48 (* 2 idx$1602)) idx$1296) (⊢ (= 49 (* 2 idx$1602)) idx$1298) (⊢ (= 50 (* 2 idx$1602)) idx$1300) (⊢ (= 51 (* 2 idx$1602)) idx$1302) (⊢ (= 52 (* 2 idx$1602)) idx$1304) (⊢ (= 53 (* 2 idx$1602)) idx$1306) (⊢ (= 54 (* 2 idx$1602)) idx$1308) (⊢ (= 55 (* 2 idx$1602)) idx$1310) (⊢ (= 56 (* 2 idx$1602)) idx$1312) (⊢ (= 57 (* 2 idx$1602)) idx$1314) (⊢ (= 58 (* 2 idx$1602)) idx$1316) (⊢ (= 59 (* 2 idx$1602)) idx$1318) (⊢ (= 60 (* 2 idx$1602)) idx$1320) (⊢ (= 61 (* 2 idx$1602)) idx$1322) (⊢ (= 62 (* 2 idx$1602)) idx$1324) (⊢ (= 63 (* 2 idx$1602)) idx$1326) (⊢ (|| (= 0 (* 2 idx$1602)) (= 1 (* 2 idx$1602))) 0))))) (&& c$567 (= 18 (* 2 (ite* (⊢ (= 2 (* 2 idx$1602)) idx$1204) (⊢ (= 3 (* 2 idx$1602)) idx$1206) (⊢ (= 4 (* 2 idx$1602)) idx$1208) (⊢ (= 5 (* 2 idx$1602)) idx$1210) (⊢ (= 6 (* 2 idx$1602)) idx$1212) (⊢ (= 7 (* 2 idx$1602)) idx$1214) (⊢ (= 8 (* 2 idx$1602)) idx$1216) (⊢ (= 9 (* 2 idx$1602)) idx$1218) (⊢ (= 10 (* 2 idx$1602)) idx$1220) (⊢ (= 11 (* 2 idx$1602)) idx$1222) (⊢ (= 12 (* 2 idx$1602)) idx$1224) (⊢ (= 13 (* 2 idx$1602)) idx$1226) (⊢ (= 14 (* 2 idx$1602)) idx$1228) (⊢ (= 15 (* 2 idx$1602)) idx$1230) (⊢ (= 16 (* 2 idx$1602)) idx$1232) (⊢ (= 17 (* 2 idx$1602)) idx$1234) (⊢ (= 18 (* 2 idx$1602)) idx$1236) (⊢ (= 19 (* 2 idx$1602)) idx$1238) (⊢ (= 20 (* 2 idx$1602)) idx$1240) (⊢ (= 21 (* 2 idx$1602)) idx$1242) (⊢ (= 22 (* 2 idx$1602)) idx$1244) (⊢ (= 23 (* 2 idx$1602)) idx$1246) (⊢ (= 24 (* 2 idx$1602)) idx$1248) (⊢ (= 25 (* 2 idx$1602)) idx$1250) (⊢ (= 26 (* 2 idx$1602)) idx$1252) (⊢ (= 27 (* 2 idx$1602)) idx$1254) (⊢ (= 28 (* 2 idx$1602)) idx$1256) (⊢ (= 29 (* 2 idx$1602)) idx$1258) (⊢ (= 30 (* 2 idx$1602)) idx$1260) (⊢ (= 31 (* 2 idx$1602)) idx$1262) (⊢ (= 32 (* 2 idx$1602)) idx$1264) (⊢ (= 33 (* 2 idx$1602)) idx$1266) (⊢ (= 34 (* 2 idx$1602)) idx$1268) (⊢ (= 35 (* 2 idx$1602)) idx$1270) (⊢ (= 36 (* 2 idx$1602)) idx$1272) (⊢ (= 37 (* 2 idx$1602)) idx$1274) (⊢ (= 38 (* 2 idx$1602)) idx$1276) (⊢ (= 39 (* 2 idx$1602)) idx$1278) (⊢ (= 40 (* 2 idx$1602)) idx$1280) (⊢ (= 41 (* 2 idx$1602)) idx$1282) (⊢ (= 42 (* 2 idx$1602)) idx$1284) (⊢ (= 43 (* 2 idx$1602)) idx$1286) (⊢ (= 44 (* 2 idx$1602)) idx$1288) (⊢ (= 45 (* 2 idx$1602)) idx$1290) (⊢ (= 46 (* 2 idx$1602)) idx$1292) (⊢ (= 47 (* 2 idx$1602)) idx$1294) (⊢ (= 48 (* 2 idx$1602)) idx$1296) (⊢ (= 49 (* 2 idx$1602)) idx$1298) (⊢ (= 50 (* 2 idx$1602)) idx$1300) (⊢ (= 51 (* 2 idx$1602)) idx$1302) (⊢ (= 52 (* 2 idx$1602)) idx$1304) (⊢ (= 53 (* 2 idx$1602)) idx$1306) (⊢ (= 54 (* 2 idx$1602)) idx$1308) (⊢ (= 55 (* 2 idx$1602)) idx$1310) (⊢ (= 56 (* 2 idx$1602)) idx$1312) (⊢ (= 57 (* 2 idx$1602)) idx$1314) (⊢ (= 58 (* 2 idx$1602)) idx$1316) (⊢ (= 59 (* 2 idx$1602)) idx$1318) (⊢ (= 60 (* 2 idx$1602)) idx$1320) (⊢ (= 61 (* 2 idx$1602)) idx$1322) (⊢ (= 62 (* 2 idx$1602)) idx$1324) (⊢ (= 63 (* 2 idx$1602)) idx$1326) (⊢ (|| (= 0 (* 2 idx$1602)) (= 1 (* 2 idx$1602))) 0))))) (&& c$569 (= 19 (* 2 (ite* (⊢ (= 2 (* 2 idx$1602)) idx$1204) (⊢ (= 3 (* 2 idx$1602)) idx$1206) (⊢ (= 4 (* 2 idx$1602)) idx$1208) (⊢ (= 5 (* 2 idx$1602)) idx$1210) (⊢ (= 6 (* 2 idx$1602)) idx$1212) (⊢ (= 7 (* 2 idx$1602)) idx$1214) (⊢ (= 8 (* 2 idx$1602)) idx$1216) (⊢ (= 9 (* 2 idx$1602)) idx$1218) (⊢ (= 10 (* 2 idx$1602)) idx$1220) (⊢ (= 11 (* 2 idx$1602)) idx$1222) (⊢ (= 12 (* 2 idx$1602)) idx$1224) (⊢ (= 13 (* 2 idx$1602)) idx$1226) (⊢ (= 14 (* 2 idx$1602)) idx$1228) (⊢ (= 15 (* 2 idx$1602)) idx$1230) (⊢ (= 16 (* 2 idx$1602)) idx$1232) (⊢ (= 17 (* 2 idx$1602)) idx$1234) (⊢ (= 18 (* 2 idx$1602)) idx$1236) (⊢ (= 19 (* 2 idx$1602)) idx$1238) (⊢ (= 20 (* 2 idx$1602)) idx$1240) (⊢ (= 21 (* 2 idx$1602)) idx$1242) (⊢ (= 22 (* 2 idx$1602)) idx$1244) (⊢ (= 23 (* 2 idx$1602)) idx$1246) (⊢ (= 24 (* 2 idx$1602)) idx$1248) (⊢ (= 25 (* 2 idx$1602)) idx$1250) (⊢ (= 26 (* 2 idx$1602)) idx$1252) (⊢ (= 27 (* 2 idx$1602)) idx$1254) (⊢ (= 28 (* 2 idx$1602)) idx$1256) (⊢ (= 29 (* 2 idx$1602)) idx$1258) (⊢ (= 30 (* 2 idx$1602)) idx$1260) (⊢ (= 31 (* 2 idx$1602)) idx$1262) (⊢ (= 32 (* 2 idx$1602)) idx$1264) (⊢ (= 33 (* 2 idx$1602)) idx$1266) (⊢ (= 34 (* 2 idx$1602)) idx$1268) (⊢ (= 35 (* 2 idx$1602)) idx$1270) (⊢ (= 36 (* 2 idx$1602)) idx$1272) (⊢ (= 37 (* 2 idx$1602)) idx$1274) (⊢ (= 38 (* 2 idx$1602)) idx$1276) (⊢ (= 39 (* 2 idx$1602)) idx$1278) (⊢ (= 40 (* 2 idx$1602)) idx$1280) (⊢ (= 41 (* 2 idx$1602)) idx$1282) (⊢ (= 42 (* 2 idx$1602)) idx$1284) (⊢ (= 43 (* 2 idx$1602)) idx$1286) (⊢ (= 44 (* 2 idx$1602)) idx$1288) (⊢ (= 45 (* 2 idx$1602)) idx$1290) (⊢ (= 46 (* 2 idx$1602)) idx$1292) (⊢ (= 47 (* 2 idx$1602)) idx$1294) (⊢ (= 48 (* 2 idx$1602)) idx$1296) (⊢ (= 49 (* 2 idx$1602)) idx$1298) (⊢ (= 50 (* 2 idx$1602)) idx$1300) (⊢ (= 51 (* 2 idx$1602)) idx$1302) (⊢ (= 52 (* 2 idx$1602)) idx$1304) (⊢ (= 53 (* 2 idx$1602)) idx$1306) (⊢ (= 54 (* 2 idx$1602)) idx$1308) (⊢ (= 55 (* 2 idx$1602)) idx$1310) (⊢ (= 56 (* 2 idx$1602)) idx$1312) (⊢ (= 57 (* 2 idx$1602)) idx$1314) (⊢ (= 58 (* 2 idx$1602)) idx$1316) (⊢ (= 59 (* 2 idx$1602)) idx$1318) (⊢ (= 60 (* 2 idx$1602)) idx$1320) (⊢ (= 61 (* 2 idx$1602)) idx$1322) (⊢ (= 62 (* 2 idx$1602)) idx$1324) (⊢ (= 63 (* 2 idx$1602)) idx$1326) (⊢ (|| (= 0 (* 2 idx$1602)) (= 1 (* 2 idx$1602))) 0))))) (&& c$571 (= 20 (* 2 (ite* (⊢ (= 2 (* 2 idx$1602)) idx$1204) (⊢ (= 3 (* 2 idx$1602)) idx$1206) (⊢ (= 4 (* 2 idx$1602)) idx$1208) (⊢ (= 5 (* 2 idx$1602)) idx$1210) (⊢ (= 6 (* 2 idx$1602)) idx$1212) (⊢ (= 7 (* 2 idx$1602)) idx$1214) (⊢ (= 8 (* 2 idx$1602)) idx$1216) (⊢ (= 9 (* 2 idx$1602)) idx$1218) (⊢ (= 10 (* 2 idx$1602)) idx$1220) (⊢ (= 11 (* 2 idx$1602)) idx$1222) (⊢ (= 12 (* 2 idx$1602)) idx$1224) (⊢ (= 13 (* 2 idx$1602)) idx$1226) (⊢ (= 14 (* 2 idx$1602)) idx$1228) (⊢ (= 15 (* 2 idx$1602)) idx$1230) (⊢ (= 16 (* 2 idx$1602)) idx$1232) (⊢ (= 17 (* 2 idx$1602)) idx$1234) (⊢ (= 18 (* 2 idx$1602)) idx$1236) (⊢ (= 19 (* 2 idx$1602)) idx$1238) (⊢ (= 20 (* 2 idx$1602)) idx$1240) (⊢ (= 21 (* 2 idx$1602)) idx$1242) (⊢ (= 22 (* 2 idx$1602)) idx$1244) (⊢ (= 23 (* 2 idx$1602)) idx$1246) (⊢ (= 24 (* 2 idx$1602)) idx$1248) (⊢ (= 25 (* 2 idx$1602)) idx$1250) (⊢ (= 26 (* 2 idx$1602)) idx$1252) (⊢ (= 27 (* 2 idx$1602)) idx$1254) (⊢ (= 28 (* 2 idx$1602)) idx$1256) (⊢ (= 29 (* 2 idx$1602)) idx$1258) (⊢ (= 30 (* 2 idx$1602)) idx$1260) (⊢ (= 31 (* 2 idx$1602)) idx$1262) (⊢ (= 32 (* 2 idx$1602)) idx$1264) (⊢ (= 33 (* 2 idx$1602)) idx$1266) (⊢ (= 34 (* 2 idx$1602)) idx$1268) (⊢ (= 35 (* 2 idx$1602)) idx$1270) (⊢ (= 36 (* 2 idx$1602)) idx$1272) (⊢ (= 37 (* 2 idx$1602)) idx$1274) (⊢ (= 38 (* 2 idx$1602)) idx$1276) (⊢ (= 39 (* 2 idx$1602)) idx$1278) (⊢ (= 40 (* 2 idx$1602)) idx$1280) (⊢ (= 41 (* 2 idx$1602)) idx$1282) (⊢ (= 42 (* 2 idx$1602)) idx$1284) (⊢ (= 43 (* 2 idx$1602)) idx$1286) (⊢ (= 44 (* 2 idx$1602)) idx$1288) (⊢ (= 45 (* 2 idx$1602)) idx$1290) (⊢ (= 46 (* 2 idx$1602)) idx$1292) (⊢ (= 47 (* 2 idx$1602)) idx$1294) (⊢ (= 48 (* 2 idx$1602)) idx$1296) (⊢ (= 49 (* 2 idx$1602)) idx$1298) (⊢ (= 50 (* 2 idx$1602)) idx$1300) (⊢ (= 51 (* 2 idx$1602)) idx$1302) (⊢ (= 52 (* 2 idx$1602)) idx$1304) (⊢ (= 53 (* 2 idx$1602)) idx$1306) (⊢ (= 54 (* 2 idx$1602)) idx$1308) (⊢ (= 55 (* 2 idx$1602)) idx$1310) (⊢ (= 56 (* 2 idx$1602)) idx$1312) (⊢ (= 57 (* 2 idx$1602)) idx$1314) (⊢ (= 58 (* 2 idx$1602)) idx$1316) (⊢ (= 59 (* 2 idx$1602)) idx$1318) (⊢ (= 60 (* 2 idx$1602)) idx$1320) (⊢ (= 61 (* 2 idx$1602)) idx$1322) (⊢ (= 62 (* 2 idx$1602)) idx$1324) (⊢ (= 63 (* 2 idx$1602)) idx$1326) (⊢ (|| (= 0 (* 2 idx$1602)) (= 1 (* 2 idx$1602))) 0))))) (&& c$573 (= 21 (* 2 (ite* (⊢ (= 2 (* 2 idx$1602)) idx$1204) (⊢ (= 3 (* 2 idx$1602)) idx$1206) (⊢ (= 4 (* 2 idx$1602)) idx$1208) (⊢ (= 5 (* 2 idx$1602)) idx$1210) (⊢ (= 6 (* 2 idx$1602)) idx$1212) (⊢ (= 7 (* 2 idx$1602)) idx$1214) (⊢ (= 8 (* 2 idx$1602)) idx$1216) (⊢ (= 9 (* 2 idx$1602)) idx$1218) (⊢ (= 10 (* 2 idx$1602)) idx$1220) (⊢ (= 11 (* 2 idx$1602)) idx$1222) (⊢ (= 12 (* 2 idx$1602)) idx$1224) (⊢ (= 13 (* 2 idx$1602)) idx$1226) (⊢ (= 14 (* 2 idx$1602)) idx$1228) (⊢ (= 15 (* 2 idx$1602)) idx$1230) (⊢ (= 16 (* 2 idx$1602)) idx$1232) (⊢ (= 17 (* 2 idx$1602)) idx$1234) (⊢ (= 18 (* 2 idx$1602)) idx$1236) (⊢ (= 19 (* 2 idx$1602)) idx$1238) (⊢ (= 20 (* 2 idx$1602)) idx$1240) (⊢ (= 21 (* 2 idx$1602)) idx$1242) (⊢ (= 22 (* 2 idx$1602)) idx$1244) (⊢ (= 23 (* 2 idx$1602)) idx$1246) (⊢ (= 24 (* 2 idx$1602)) idx$1248) (⊢ (= 25 (* 2 idx$1602)) idx$1250) (⊢ (= 26 (* 2 idx$1602)) idx$1252) (⊢ (= 27 (* 2 idx$1602)) idx$1254) (⊢ (= 28 (* 2 idx$1602)) idx$1256) (⊢ (= 29 (* 2 idx$1602)) idx$1258) (⊢ (= 30 (* 2 idx$1602)) idx$1260) (⊢ (= 31 (* 2 idx$1602)) idx$1262) (⊢ (= 32 (* 2 idx$1602)) idx$1264) (⊢ (= 33 (* 2 idx$1602)) idx$1266) (⊢ (= 34 (* 2 idx$1602)) idx$1268) (⊢ (= 35 (* 2 idx$1602)) idx$1270) (⊢ (= 36 (* 2 idx$1602)) idx$1272) (⊢ (= 37 (* 2 idx$1602)) idx$1274) (⊢ (= 38 (* 2 idx$1602)) idx$1276) (⊢ (= 39 (* 2 idx$1602)) idx$1278) (⊢ (= 40 (* 2 idx$1602)) idx$1280) (⊢ (= 41 (* 2 idx$1602)) idx$1282) (⊢ (= 42 (* 2 idx$1602)) idx$1284) (⊢ (= 43 (* 2 idx$1602)) idx$1286) (⊢ (= 44 (* 2 idx$1602)) idx$1288) (⊢ (= 45 (* 2 idx$1602)) idx$1290) (⊢ (= 46 (* 2 idx$1602)) idx$1292) (⊢ (= 47 (* 2 idx$1602)) idx$1294) (⊢ (= 48 (* 2 idx$1602)) idx$1296) (⊢ (= 49 (* 2 idx$1602)) idx$1298) (⊢ (= 50 (* 2 idx$1602)) idx$1300) (⊢ (= 51 (* 2 idx$1602)) idx$1302) (⊢ (= 52 (* 2 idx$1602)) idx$1304) (⊢ (= 53 (* 2 idx$1602)) idx$1306) (⊢ (= 54 (* 2 idx$1602)) idx$1308) (⊢ (= 55 (* 2 idx$1602)) idx$1310) (⊢ (= 56 (* 2 idx$1602)) idx$1312) (⊢ (= 57 (* 2 idx$1602)) idx$1314) (⊢ (= 58 (* 2 idx$1602)) idx$1316) (⊢ (= 59 (* 2 idx$1602)) idx$1318) (⊢ (= 60 (* 2 idx$1602)) idx$1320) (⊢ (= 61 (* 2 idx$1602)) idx$1322) (⊢ (= 62 (* 2 idx$1602)) idx$1324) (⊢ (= 63 (* 2 idx$1602)) idx$1326) (⊢ (|| (= 0 (* 2 idx$1602)) (= 1 (* 2 idx$1602))) 0))))) (&& c$575 (= 22 (* 2 (ite* (⊢ (= 2 (* 2 idx$1602)) idx$1204) (⊢ (= 3 (* 2 idx$1602)) idx$1206) (⊢ (= 4 (* 2 idx$1602)) idx$1208) (⊢ (= 5 (* 2 idx$1602)) idx$1210) (⊢ (= 6 (* 2 idx$1602)) idx$1212) (⊢ (= 7 (* 2 idx$1602)) idx$1214) (⊢ (= 8 (* 2 idx$1602)) idx$1216) (⊢ (= 9 (* 2 idx$1602)) idx$1218) (⊢ (= 10 (* 2 idx$1602)) idx$1220) (⊢ (= 11 (* 2 idx$1602)) idx$1222) (⊢ (= 12 (* 2 idx$1602)) idx$1224) (⊢ (= 13 (* 2 idx$1602)) idx$1226) (⊢ (= 14 (* 2 idx$1602)) idx$1228) (⊢ (= 15 (* 2 idx$1602)) idx$1230) (⊢ (= 16 (* 2 idx$1602)) idx$1232) (⊢ (= 17 (* 2 idx$1602)) idx$1234) (⊢ (= 18 (* 2 idx$1602)) idx$1236) (⊢ (= 19 (* 2 idx$1602)) idx$1238) (⊢ (= 20 (* 2 idx$1602)) idx$1240) (⊢ (= 21 (* 2 idx$1602)) idx$1242) (⊢ (= 22 (* 2 idx$1602)) idx$1244) (⊢ (= 23 (* 2 idx$1602)) idx$1246) (⊢ (= 24 (* 2 idx$1602)) idx$1248) (⊢ (= 25 (* 2 idx$1602)) idx$1250) (⊢ (= 26 (* 2 idx$1602)) idx$1252) (⊢ (= 27 (* 2 idx$1602)) idx$1254) (⊢ (= 28 (* 2 idx$1602)) idx$1256) (⊢ (= 29 (* 2 idx$1602)) idx$1258) (⊢ (= 30 (* 2 idx$1602)) idx$1260) (⊢ (= 31 (* 2 idx$1602)) idx$1262) (⊢ (= 32 (* 2 idx$1602)) idx$1264) (⊢ (= 33 (* 2 idx$1602)) idx$1266) (⊢ (= 34 (* 2 idx$1602)) idx$1268) (⊢ (= 35 (* 2 idx$1602)) idx$1270) (⊢ (= 36 (* 2 idx$1602)) idx$1272) (⊢ (= 37 (* 2 idx$1602)) idx$1274) (⊢ (= 38 (* 2 idx$1602)) idx$1276) (⊢ (= 39 (* 2 idx$1602)) idx$1278) (⊢ (= 40 (* 2 idx$1602)) idx$1280) (⊢ (= 41 (* 2 idx$1602)) idx$1282) (⊢ (= 42 (* 2 idx$1602)) idx$1284) (⊢ (= 43 (* 2 idx$1602)) idx$1286) (⊢ (= 44 (* 2 idx$1602)) idx$1288) (⊢ (= 45 (* 2 idx$1602)) idx$1290) (⊢ (= 46 (* 2 idx$1602)) idx$1292) (⊢ (= 47 (* 2 idx$1602)) idx$1294) (⊢ (= 48 (* 2 idx$1602)) idx$1296) (⊢ (= 49 (* 2 idx$1602)) idx$1298) (⊢ (= 50 (* 2 idx$1602)) idx$1300) (⊢ (= 51 (* 2 idx$1602)) idx$1302) (⊢ (= 52 (* 2 idx$1602)) idx$1304) (⊢ (= 53 (* 2 idx$1602)) idx$1306) (⊢ (= 54 (* 2 idx$1602)) idx$1308) (⊢ (= 55 (* 2 idx$1602)) idx$1310) (⊢ (= 56 (* 2 idx$1602)) idx$1312) (⊢ (= 57 (* 2 idx$1602)) idx$1314) (⊢ (= 58 (* 2 idx$1602)) idx$1316) (⊢ (= 59 (* 2 idx$1602)) idx$1318) (⊢ (= 60 (* 2 idx$1602)) idx$1320) (⊢ (= 61 (* 2 idx$1602)) idx$1322) (⊢ (= 62 (* 2 idx$1602)) idx$1324) (⊢ (= 63 (* 2 idx$1602)) idx$1326) (⊢ (|| (= 0 (* 2 idx$1602)) (= 1 (* 2 idx$1602))) 0))))) (&& c$577 (= 23 (* 2 (ite* (⊢ (= 2 (* 2 idx$1602)) idx$1204) (⊢ (= 3 (* 2 idx$1602)) idx$1206) (⊢ (= 4 (* 2 idx$1602)) idx$1208) (⊢ (= 5 (* 2 idx$1602)) idx$1210) (⊢ (= 6 (* 2 idx$1602)) idx$1212) (⊢ (= 7 (* 2 idx$1602)) idx$1214) (⊢ (= 8 (* 2 idx$1602)) idx$1216) (⊢ (= 9 (* 2 idx$1602)) idx$1218) (⊢ (= 10 (* 2 idx$1602)) idx$1220) (⊢ (= 11 (* 2 idx$1602)) idx$1222) (⊢ (= 12 (* 2 idx$1602)) idx$1224) (⊢ (= 13 (* 2 idx$1602)) idx$1226) (⊢ (= 14 (* 2 idx$1602)) idx$1228) (⊢ (= 15 (* 2 idx$1602)) idx$1230) (⊢ (= 16 (* 2 idx$1602)) idx$1232) (⊢ (= 17 (* 2 idx$1602)) idx$1234) (⊢ (= 18 (* 2 idx$1602)) idx$1236) (⊢ (= 19 (* 2 idx$1602)) idx$1238) (⊢ (= 20 (* 2 idx$1602)) idx$1240) (⊢ (= 21 (* 2 idx$1602)) idx$1242) (⊢ (= 22 (* 2 idx$1602)) idx$1244) (⊢ (= 23 (* 2 idx$1602)) idx$1246) (⊢ (= 24 (* 2 idx$1602)) idx$1248) (⊢ (= 25 (* 2 idx$1602)) idx$1250) (⊢ (= 26 (* 2 idx$1602)) idx$1252) (⊢ (= 27 (* 2 idx$1602)) idx$1254) (⊢ (= 28 (* 2 idx$1602)) idx$1256) (⊢ (= 29 (* 2 idx$1602)) idx$1258) (⊢ (= 30 (* 2 idx$1602)) idx$1260) (⊢ (= 31 (* 2 idx$1602)) idx$1262) (⊢ (= 32 (* 2 idx$1602)) idx$1264) (⊢ (= 33 (* 2 idx$1602)) idx$1266) (⊢ (= 34 (* 2 idx$1602)) idx$1268) (⊢ (= 35 (* 2 idx$1602)) idx$1270) (⊢ (= 36 (* 2 idx$1602)) idx$1272) (⊢ (= 37 (* 2 idx$1602)) idx$1274) (⊢ (= 38 (* 2 idx$1602)) idx$1276) (⊢ (= 39 (* 2 idx$1602)) idx$1278) (⊢ (= 40 (* 2 idx$1602)) idx$1280) (⊢ (= 41 (* 2 idx$1602)) idx$1282) (⊢ (= 42 (* 2 idx$1602)) idx$1284) (⊢ (= 43 (* 2 idx$1602)) idx$1286) (⊢ (= 44 (* 2 idx$1602)) idx$1288) (⊢ (= 45 (* 2 idx$1602)) idx$1290) (⊢ (= 46 (* 2 idx$1602)) idx$1292) (⊢ (= 47 (* 2 idx$1602)) idx$1294) (⊢ (= 48 (* 2 idx$1602)) idx$1296) (⊢ (= 49 (* 2 idx$1602)) idx$1298) (⊢ (= 50 (* 2 idx$1602)) idx$1300) (⊢ (= 51 (* 2 idx$1602)) idx$1302) (⊢ (= 52 (* 2 idx$1602)) idx$1304) (⊢ (= 53 (* 2 idx$1602)) idx$1306) (⊢ (= 54 (* 2 idx$1602)) idx$1308) (⊢ (= 55 (* 2 idx$1602)) idx$1310) (⊢ (= 56 (* 2 idx$1602)) idx$1312) (⊢ (= 57 (* 2 idx$1602)) idx$1314) (⊢ (= 58 (* 2 idx$1602)) idx$1316) (⊢ (= 59 (* 2 idx$1602)) idx$1318) (⊢ (= 60 (* 2 idx$1602)) idx$1320) (⊢ (= 61 (* 2 idx$1602)) idx$1322) (⊢ (= 62 (* 2 idx$1602)) idx$1324) (⊢ (= 63 (* 2 idx$1602)) idx$1326) (⊢ (|| (= 0 (* 2 idx$1602)) (= 1 (* 2 idx$1602))) 0))))) (&& c$579 (= 24 (* 2 (ite* (⊢ (= 2 (* 2 idx$1602)) idx$1204) (⊢ (= 3 (* 2 idx$1602)) idx$1206) (⊢ (= 4 (* 2 idx$1602)) idx$1208) (⊢ (= 5 (* 2 idx$1602)) idx$1210) (⊢ (= 6 (* 2 idx$1602)) idx$1212) (⊢ (= 7 (* 2 idx$1602)) idx$1214) (⊢ (= 8 (* 2 idx$1602)) idx$1216) (⊢ (= 9 (* 2 idx$1602)) idx$1218) (⊢ (= 10 (* 2 idx$1602)) idx$1220) (⊢ (= 11 (* 2 idx$1602)) idx$1222) (⊢ (= 12 (* 2 idx$1602)) idx$1224) (⊢ (= 13 (* 2 idx$1602)) idx$1226) (⊢ (= 14 (* 2 idx$1602)) idx$1228) (⊢ (= 15 (* 2 idx$1602)) idx$1230) (⊢ (= 16 (* 2 idx$1602)) idx$1232) (⊢ (= 17 (* 2 idx$1602)) idx$1234) (⊢ (= 18 (* 2 idx$1602)) idx$1236) (⊢ (= 19 (* 2 idx$1602)) idx$1238) (⊢ (= 20 (* 2 idx$1602)) idx$1240) (⊢ (= 21 (* 2 idx$1602)) idx$1242) (⊢ (= 22 (* 2 idx$1602)) idx$1244) (⊢ (= 23 (* 2 idx$1602)) idx$1246) (⊢ (= 24 (* 2 idx$1602)) idx$1248) (⊢ (= 25 (* 2 idx$1602)) idx$1250) (⊢ (= 26 (* 2 idx$1602)) idx$1252) (⊢ (= 27 (* 2 idx$1602)) idx$1254) (⊢ (= 28 (* 2 idx$1602)) idx$1256) (⊢ (= 29 (* 2 idx$1602)) idx$1258) (⊢ (= 30 (* 2 idx$1602)) idx$1260) (⊢ (= 31 (* 2 idx$1602)) idx$1262) (⊢ (= 32 (* 2 idx$1602)) idx$1264) (⊢ (= 33 (* 2 idx$1602)) idx$1266) (⊢ (= 34 (* 2 idx$1602)) idx$1268) (⊢ (= 35 (* 2 idx$1602)) idx$1270) (⊢ (= 36 (* 2 idx$1602)) idx$1272) (⊢ (= 37 (* 2 idx$1602)) idx$1274) (⊢ (= 38 (* 2 idx$1602)) idx$1276) (⊢ (= 39 (* 2 idx$1602)) idx$1278) (⊢ (= 40 (* 2 idx$1602)) idx$1280) (⊢ (= 41 (* 2 idx$1602)) idx$1282) (⊢ (= 42 (* 2 idx$1602)) idx$1284) (⊢ (= 43 (* 2 idx$1602)) idx$1286) (⊢ (= 44 (* 2 idx$1602)) idx$1288) (⊢ (= 45 (* 2 idx$1602)) idx$1290) (⊢ (= 46 (* 2 idx$1602)) idx$1292) (⊢ (= 47 (* 2 idx$1602)) idx$1294) (⊢ (= 48 (* 2 idx$1602)) idx$1296) (⊢ (= 49 (* 2 idx$1602)) idx$1298) (⊢ (= 50 (* 2 idx$1602)) idx$1300) (⊢ (= 51 (* 2 idx$1602)) idx$1302) (⊢ (= 52 (* 2 idx$1602)) idx$1304) (⊢ (= 53 (* 2 idx$1602)) idx$1306) (⊢ (= 54 (* 2 idx$1602)) idx$1308) (⊢ (= 55 (* 2 idx$1602)) idx$1310) (⊢ (= 56 (* 2 idx$1602)) idx$1312) (⊢ (= 57 (* 2 idx$1602)) idx$1314) (⊢ (= 58 (* 2 idx$1602)) idx$1316) (⊢ (= 59 (* 2 idx$1602)) idx$1318) (⊢ (= 60 (* 2 idx$1602)) idx$1320) (⊢ (= 61 (* 2 idx$1602)) idx$1322) (⊢ (= 62 (* 2 idx$1602)) idx$1324) (⊢ (= 63 (* 2 idx$1602)) idx$1326) (⊢ (|| (= 0 (* 2 idx$1602)) (= 1 (* 2 idx$1602))) 0))))) (&& c$581 (= 25 (* 2 (ite* (⊢ (= 2 (* 2 idx$1602)) idx$1204) (⊢ (= 3 (* 2 idx$1602)) idx$1206) (⊢ (= 4 (* 2 idx$1602)) idx$1208) (⊢ (= 5 (* 2 idx$1602)) idx$1210) (⊢ (= 6 (* 2 idx$1602)) idx$1212) (⊢ (= 7 (* 2 idx$1602)) idx$1214) (⊢ (= 8 (* 2 idx$1602)) idx$1216) (⊢ (= 9 (* 2 idx$1602)) idx$1218) (⊢ (= 10 (* 2 idx$1602)) idx$1220) (⊢ (= 11 (* 2 idx$1602)) idx$1222) (⊢ (= 12 (* 2 idx$1602)) idx$1224) (⊢ (= 13 (* 2 idx$1602)) idx$1226) (⊢ (= 14 (* 2 idx$1602)) idx$1228) (⊢ (= 15 (* 2 idx$1602)) idx$1230) (⊢ (= 16 (* 2 idx$1602)) idx$1232) (⊢ (= 17 (* 2 idx$1602)) idx$1234) (⊢ (= 18 (* 2 idx$1602)) idx$1236) (⊢ (= 19 (* 2 idx$1602)) idx$1238) (⊢ (= 20 (* 2 idx$1602)) idx$1240) (⊢ (= 21 (* 2 idx$1602)) idx$1242) (⊢ (= 22 (* 2 idx$1602)) idx$1244) (⊢ (= 23 (* 2 idx$1602)) idx$1246) (⊢ (= 24 (* 2 idx$1602)) idx$1248) (⊢ (= 25 (* 2 idx$1602)) idx$1250) (⊢ (= 26 (* 2 idx$1602)) idx$1252) (⊢ (= 27 (* 2 idx$1602)) idx$1254) (⊢ (= 28 (* 2 idx$1602)) idx$1256) (⊢ (= 29 (* 2 idx$1602)) idx$1258) (⊢ (= 30 (* 2 idx$1602)) idx$1260) (⊢ (= 31 (* 2 idx$1602)) idx$1262) (⊢ (= 32 (* 2 idx$1602)) idx$1264) (⊢ (= 33 (* 2 idx$1602)) idx$1266) (⊢ (= 34 (* 2 idx$1602)) idx$1268) (⊢ (= 35 (* 2 idx$1602)) idx$1270) (⊢ (= 36 (* 2 idx$1602)) idx$1272) (⊢ (= 37 (* 2 idx$1602)) idx$1274) (⊢ (= 38 (* 2 idx$1602)) idx$1276) (⊢ (= 39 (* 2 idx$1602)) idx$1278) (⊢ (= 40 (* 2 idx$1602)) idx$1280) (⊢ (= 41 (* 2 idx$1602)) idx$1282) (⊢ (= 42 (* 2 idx$1602)) idx$1284) (⊢ (= 43 (* 2 idx$1602)) idx$1286) (⊢ (= 44 (* 2 idx$1602)) idx$1288) (⊢ (= 45 (* 2 idx$1602)) idx$1290) (⊢ (= 46 (* 2 idx$1602)) idx$1292) (⊢ (= 47 (* 2 idx$1602)) idx$1294) (⊢ (= 48 (* 2 idx$1602)) idx$1296) (⊢ (= 49 (* 2 idx$1602)) idx$1298) (⊢ (= 50 (* 2 idx$1602)) idx$1300) (⊢ (= 51 (* 2 idx$1602)) idx$1302) (⊢ (= 52 (* 2 idx$1602)) idx$1304) (⊢ (= 53 (* 2 idx$1602)) idx$1306) (⊢ (= 54 (* 2 idx$1602)) idx$1308) (⊢ (= 55 (* 2 idx$1602)) idx$1310) (⊢ (= 56 (* 2 idx$1602)) idx$1312) (⊢ (= 57 (* 2 idx$1602)) idx$1314) (⊢ (= 58 (* 2 idx$1602)) idx$1316) (⊢ (= 59 (* 2 idx$1602)) idx$1318) (⊢ (= 60 (* 2 idx$1602)) idx$1320) (⊢ (= 61 (* 2 idx$1602)) idx$1322) (⊢ (= 62 (* 2 idx$1602)) idx$1324) (⊢ (= 63 (* 2 idx$1602)) idx$1326) (⊢ (|| (= 0 (* 2 idx$1602)) (= 1 (* 2 idx$1602))) 0))))) (&& c$583 (= 26 (* 2 (ite* (⊢ (= 2 (* 2 idx$1602)) idx$1204) (⊢ (= 3 (* 2 idx$1602)) idx$1206) (⊢ (= 4 (* 2 idx$1602)) idx$1208) (⊢ (= 5 (* 2 idx$1602)) idx$1210) (⊢ (= 6 (* 2 idx$1602)) idx$1212) (⊢ (= 7 (* 2 idx$1602)) idx$1214) (⊢ (= 8 (* 2 idx$1602)) idx$1216) (⊢ (= 9 (* 2 idx$1602)) idx$1218) (⊢ (= 10 (* 2 idx$1602)) idx$1220) (⊢ (= 11 (* 2 idx$1602)) idx$1222) (⊢ (= 12 (* 2 idx$1602)) idx$1224) (⊢ (= 13 (* 2 idx$1602)) idx$1226) (⊢ (= 14 (* 2 idx$1602)) idx$1228) (⊢ (= 15 (* 2 idx$1602)) idx$1230) (⊢ (= 16 (* 2 idx$1602)) idx$1232) (⊢ (= 17 (* 2 idx$1602)) idx$1234) (⊢ (= 18 (* 2 idx$1602)) idx$1236) (⊢ (= 19 (* 2 idx$1602)) idx$1238) (⊢ (= 20 (* 2 idx$1602)) idx$1240) (⊢ (= 21 (* 2 idx$1602)) idx$1242) (⊢ (= 22 (* 2 idx$1602)) idx$1244) (⊢ (= 23 (* 2 idx$1602)) idx$1246) (⊢ (= 24 (* 2 idx$1602)) idx$1248) (⊢ (= 25 (* 2 idx$1602)) idx$1250) (⊢ (= 26 (* 2 idx$1602)) idx$1252) (⊢ (= 27 (* 2 idx$1602)) idx$1254) (⊢ (= 28 (* 2 idx$1602)) idx$1256) (⊢ (= 29 (* 2 idx$1602)) idx$1258) (⊢ (= 30 (* 2 idx$1602)) idx$1260) (⊢ (= 31 (* 2 idx$1602)) idx$1262) (⊢ (= 32 (* 2 idx$1602)) idx$1264) (⊢ (= 33 (* 2 idx$1602)) idx$1266) (⊢ (= 34 (* 2 idx$1602)) idx$1268) (⊢ (= 35 (* 2 idx$1602)) idx$1270) (⊢ (= 36 (* 2 idx$1602)) idx$1272) (⊢ (= 37 (* 2 idx$1602)) idx$1274) (⊢ (= 38 (* 2 idx$1602)) idx$1276) (⊢ (= 39 (* 2 idx$1602)) idx$1278) (⊢ (= 40 (* 2 idx$1602)) idx$1280) (⊢ (= 41 (* 2 idx$1602)) idx$1282) (⊢ (= 42 (* 2 idx$1602)) idx$1284) (⊢ (= 43 (* 2 idx$1602)) idx$1286) (⊢ (= 44 (* 2 idx$1602)) idx$1288) (⊢ (= 45 (* 2 idx$1602)) idx$1290) (⊢ (= 46 (* 2 idx$1602)) idx$1292) (⊢ (= 47 (* 2 idx$1602)) idx$1294) (⊢ (= 48 (* 2 idx$1602)) idx$1296) (⊢ (= 49 (* 2 idx$1602)) idx$1298) (⊢ (= 50 (* 2 idx$1602)) idx$1300) (⊢ (= 51 (* 2 idx$1602)) idx$1302) (⊢ (= 52 (* 2 idx$1602)) idx$1304) (⊢ (= 53 (* 2 idx$1602)) idx$1306) (⊢ (= 54 (* 2 idx$1602)) idx$1308) (⊢ (= 55 (* 2 idx$1602)) idx$1310) (⊢ (= 56 (* 2 idx$1602)) idx$1312) (⊢ (= 57 (* 2 idx$1602)) idx$1314) (⊢ (= 58 (* 2 idx$1602)) idx$1316) (⊢ (= 59 (* 2 idx$1602)) idx$1318) (⊢ (= 60 (* 2 idx$1602)) idx$1320) (⊢ (= 61 (* 2 idx$1602)) idx$1322) (⊢ (= 62 (* 2 idx$1602)) idx$1324) (⊢ (= 63 (* 2 idx$1602)) idx$1326) (⊢ (|| (= 0 (* 2 idx$1602)) (= 1 (* 2 idx$1602))) 0))))) (&& c$585 (= 27 (* 2 (ite* (⊢ (= 2 (* 2 idx$1602)) idx$1204) (⊢ (= 3 (* 2 idx$1602)) idx$1206) (⊢ (= 4 (* 2 idx$1602)) idx$1208) (⊢ (= 5 (* 2 idx$1602)) idx$1210) (⊢ (= 6 (* 2 idx$1602)) idx$1212) (⊢ (= 7 (* 2 idx$1602)) idx$1214) (⊢ (= 8 (* 2 idx$1602)) idx$1216) (⊢ (= 9 (* 2 idx$1602)) idx$1218) (⊢ (= 10 (* 2 idx$1602)) idx$1220) (⊢ (= 11 (* 2 idx$1602)) idx$1222) (⊢ (= 12 (* 2 idx$1602)) idx$1224) (⊢ (= 13 (* 2 idx$1602)) idx$1226) (⊢ (= 14 (* 2 idx$1602)) idx$1228) (⊢ (= 15 (* 2 idx$1602)) idx$1230) (⊢ (= 16 (* 2 idx$1602)) idx$1232) (⊢ (= 17 (* 2 idx$1602)) idx$1234) (⊢ (= 18 (* 2 idx$1602)) idx$1236) (⊢ (= 19 (* 2 idx$1602)) idx$1238) (⊢ (= 20 (* 2 idx$1602)) idx$1240) (⊢ (= 21 (* 2 idx$1602)) idx$1242) (⊢ (= 22 (* 2 idx$1602)) idx$1244) (⊢ (= 23 (* 2 idx$1602)) idx$1246) (⊢ (= 24 (* 2 idx$1602)) idx$1248) (⊢ (= 25 (* 2 idx$1602)) idx$1250) (⊢ (= 26 (* 2 idx$1602)) idx$1252) (⊢ (= 27 (* 2 idx$1602)) idx$1254) (⊢ (= 28 (* 2 idx$1602)) idx$1256) (⊢ (= 29 (* 2 idx$1602)) idx$1258) (⊢ (= 30 (* 2 idx$1602)) idx$1260) (⊢ (= 31 (* 2 idx$1602)) idx$1262) (⊢ (= 32 (* 2 idx$1602)) idx$1264) (⊢ (= 33 (* 2 idx$1602)) idx$1266) (⊢ (= 34 (* 2 idx$1602)) idx$1268) (⊢ (= 35 (* 2 idx$1602)) idx$1270) (⊢ (= 36 (* 2 idx$1602)) idx$1272) (⊢ (= 37 (* 2 idx$1602)) idx$1274) (⊢ (= 38 (* 2 idx$1602)) idx$1276) (⊢ (= 39 (* 2 idx$1602)) idx$1278) (⊢ (= 40 (* 2 idx$1602)) idx$1280) (⊢ (= 41 (* 2 idx$1602)) idx$1282) (⊢ (= 42 (* 2 idx$1602)) idx$1284) (⊢ (= 43 (* 2 idx$1602)) idx$1286) (⊢ (= 44 (* 2 idx$1602)) idx$1288) (⊢ (= 45 (* 2 idx$1602)) idx$1290) (⊢ (= 46 (* 2 idx$1602)) idx$1292) (⊢ (= 47 (* 2 idx$1602)) idx$1294) (⊢ (= 48 (* 2 idx$1602)) idx$1296) (⊢ (= 49 (* 2 idx$1602)) idx$1298) (⊢ (= 50 (* 2 idx$1602)) idx$1300) (⊢ (= 51 (* 2 idx$1602)) idx$1302) (⊢ (= 52 (* 2 idx$1602)) idx$1304) (⊢ (= 53 (* 2 idx$1602)) idx$1306) (⊢ (= 54 (* 2 idx$1602)) idx$1308) (⊢ (= 55 (* 2 idx$1602)) idx$1310) (⊢ (= 56 (* 2 idx$1602)) idx$1312) (⊢ (= 57 (* 2 idx$1602)) idx$1314) (⊢ (= 58 (* 2 idx$1602)) idx$1316) (⊢ (= 59 (* 2 idx$1602)) idx$1318) (⊢ (= 60 (* 2 idx$1602)) idx$1320) (⊢ (= 61 (* 2 idx$1602)) idx$1322) (⊢ (= 62 (* 2 idx$1602)) idx$1324) (⊢ (= 63 (* 2 idx$1602)) idx$1326) (⊢ (|| (= 0 (* 2 idx$1602)) (= 1 (* 2 idx$1602))) 0))))) (&& c$587 (= 28 (* 2 (ite* (⊢ (= 2 (* 2 idx$1602)) idx$1204) (⊢ (= 3 (* 2 idx$1602)) idx$1206) (⊢ (= 4 (* 2 idx$1602)) idx$1208) (⊢ (= 5 (* 2 idx$1602)) idx$1210) (⊢ (= 6 (* 2 idx$1602)) idx$1212) (⊢ (= 7 (* 2 idx$1602)) idx$1214) (⊢ (= 8 (* 2 idx$1602)) idx$1216) (⊢ (= 9 (* 2 idx$1602)) idx$1218) (⊢ (= 10 (* 2 idx$1602)) idx$1220) (⊢ (= 11 (* 2 idx$1602)) idx$1222) (⊢ (= 12 (* 2 idx$1602)) idx$1224) (⊢ (= 13 (* 2 idx$1602)) idx$1226) (⊢ (= 14 (* 2 idx$1602)) idx$1228) (⊢ (= 15 (* 2 idx$1602)) idx$1230) (⊢ (= 16 (* 2 idx$1602)) idx$1232) (⊢ (= 17 (* 2 idx$1602)) idx$1234) (⊢ (= 18 (* 2 idx$1602)) idx$1236) (⊢ (= 19 (* 2 idx$1602)) idx$1238) (⊢ (= 20 (* 2 idx$1602)) idx$1240) (⊢ (= 21 (* 2 idx$1602)) idx$1242) (⊢ (= 22 (* 2 idx$1602)) idx$1244) (⊢ (= 23 (* 2 idx$1602)) idx$1246) (⊢ (= 24 (* 2 idx$1602)) idx$1248) (⊢ (= 25 (* 2 idx$1602)) idx$1250) (⊢ (= 26 (* 2 idx$1602)) idx$1252) (⊢ (= 27 (* 2 idx$1602)) idx$1254) (⊢ (= 28 (* 2 idx$1602)) idx$1256) (⊢ (= 29 (* 2 idx$1602)) idx$1258) (⊢ (= 30 (* 2 idx$1602)) idx$1260) (⊢ (= 31 (* 2 idx$1602)) idx$1262) (⊢ (= 32 (* 2 idx$1602)) idx$1264) (⊢ (= 33 (* 2 idx$1602)) idx$1266) (⊢ (= 34 (* 2 idx$1602)) idx$1268) (⊢ (= 35 (* 2 idx$1602)) idx$1270) (⊢ (= 36 (* 2 idx$1602)) idx$1272) (⊢ (= 37 (* 2 idx$1602)) idx$1274) (⊢ (= 38 (* 2 idx$1602)) idx$1276) (⊢ (= 39 (* 2 idx$1602)) idx$1278) (⊢ (= 40 (* 2 idx$1602)) idx$1280) (⊢ (= 41 (* 2 idx$1602)) idx$1282) (⊢ (= 42 (* 2 idx$1602)) idx$1284) (⊢ (= 43 (* 2 idx$1602)) idx$1286) (⊢ (= 44 (* 2 idx$1602)) idx$1288) (⊢ (= 45 (* 2 idx$1602)) idx$1290) (⊢ (= 46 (* 2 idx$1602)) idx$1292) (⊢ (= 47 (* 2 idx$1602)) idx$1294) (⊢ (= 48 (* 2 idx$1602)) idx$1296) (⊢ (= 49 (* 2 idx$1602)) idx$1298) (⊢ (= 50 (* 2 idx$1602)) idx$1300) (⊢ (= 51 (* 2 idx$1602)) idx$1302) (⊢ (= 52 (* 2 idx$1602)) idx$1304) (⊢ (= 53 (* 2 idx$1602)) idx$1306) (⊢ (= 54 (* 2 idx$1602)) idx$1308) (⊢ (= 55 (* 2 idx$1602)) idx$1310) (⊢ (= 56 (* 2 idx$1602)) idx$1312) (⊢ (= 57 (* 2 idx$1602)) idx$1314) (⊢ (= 58 (* 2 idx$1602)) idx$1316) (⊢ (= 59 (* 2 idx$1602)) idx$1318) (⊢ (= 60 (* 2 idx$1602)) idx$1320) (⊢ (= 61 (* 2 idx$1602)) idx$1322) (⊢ (= 62 (* 2 idx$1602)) idx$1324) (⊢ (= 63 (* 2 idx$1602)) idx$1326) (⊢ (|| (= 0 (* 2 idx$1602)) (= 1 (* 2 idx$1602))) 0))))) (&& c$589 (= 29 (* 2 (ite* (⊢ (= 2 (* 2 idx$1602)) idx$1204) (⊢ (= 3 (* 2 idx$1602)) idx$1206) (⊢ (= 4 (* 2 idx$1602)) idx$1208) (⊢ (= 5 (* 2 idx$1602)) idx$1210) (⊢ (= 6 (* 2 idx$1602)) idx$1212) (⊢ (= 7 (* 2 idx$1602)) idx$1214) (⊢ (= 8 (* 2 idx$1602)) idx$1216) (⊢ (= 9 (* 2 idx$1602)) idx$1218) (⊢ (= 10 (* 2 idx$1602)) idx$1220) (⊢ (= 11 (* 2 idx$1602)) idx$1222) (⊢ (= 12 (* 2 idx$1602)) idx$1224) (⊢ (= 13 (* 2 idx$1602)) idx$1226) (⊢ (= 14 (* 2 idx$1602)) idx$1228) (⊢ (= 15 (* 2 idx$1602)) idx$1230) (⊢ (= 16 (* 2 idx$1602)) idx$1232) (⊢ (= 17 (* 2 idx$1602)) idx$1234) (⊢ (= 18 (* 2 idx$1602)) idx$1236) (⊢ (= 19 (* 2 idx$1602)) idx$1238) (⊢ (= 20 (* 2 idx$1602)) idx$1240) (⊢ (= 21 (* 2 idx$1602)) idx$1242) (⊢ (= 22 (* 2 idx$1602)) idx$1244) (⊢ (= 23 (* 2 idx$1602)) idx$1246) (⊢ (= 24 (* 2 idx$1602)) idx$1248) (⊢ (= 25 (* 2 idx$1602)) idx$1250) (⊢ (= 26 (* 2 idx$1602)) idx$1252) (⊢ (= 27 (* 2 idx$1602)) idx$1254) (⊢ (= 28 (* 2 idx$1602)) idx$1256) (⊢ (= 29 (* 2 idx$1602)) idx$1258) (⊢ (= 30 (* 2 idx$1602)) idx$1260) (⊢ (= 31 (* 2 idx$1602)) idx$1262) (⊢ (= 32 (* 2 idx$1602)) idx$1264) (⊢ (= 33 (* 2 idx$1602)) idx$1266) (⊢ (= 34 (* 2 idx$1602)) idx$1268) (⊢ (= 35 (* 2 idx$1602)) idx$1270) (⊢ (= 36 (* 2 idx$1602)) idx$1272) (⊢ (= 37 (* 2 idx$1602)) idx$1274) (⊢ (= 38 (* 2 idx$1602)) idx$1276) (⊢ (= 39 (* 2 idx$1602)) idx$1278) (⊢ (= 40 (* 2 idx$1602)) idx$1280) (⊢ (= 41 (* 2 idx$1602)) idx$1282) (⊢ (= 42 (* 2 idx$1602)) idx$1284) (⊢ (= 43 (* 2 idx$1602)) idx$1286) (⊢ (= 44 (* 2 idx$1602)) idx$1288) (⊢ (= 45 (* 2 idx$1602)) idx$1290) (⊢ (= 46 (* 2 idx$1602)) idx$1292) (⊢ (= 47 (* 2 idx$1602)) idx$1294) (⊢ (= 48 (* 2 idx$1602)) idx$1296) (⊢ (= 49 (* 2 idx$1602)) idx$1298) (⊢ (= 50 (* 2 idx$1602)) idx$1300) (⊢ (= 51 (* 2 idx$1602)) idx$1302) (⊢ (= 52 (* 2 idx$1602)) idx$1304) (⊢ (= 53 (* 2 idx$1602)) idx$1306) (⊢ (= 54 (* 2 idx$1602)) idx$1308) (⊢ (= 55 (* 2 idx$1602)) idx$1310) (⊢ (= 56 (* 2 idx$1602)) idx$1312) (⊢ (= 57 (* 2 idx$1602)) idx$1314) (⊢ (= 58 (* 2 idx$1602)) idx$1316) (⊢ (= 59 (* 2 idx$1602)) idx$1318) (⊢ (= 60 (* 2 idx$1602)) idx$1320) (⊢ (= 61 (* 2 idx$1602)) idx$1322) (⊢ (= 62 (* 2 idx$1602)) idx$1324) (⊢ (= 63 (* 2 idx$1602)) idx$1326) (⊢ (|| (= 0 (* 2 idx$1602)) (= 1 (* 2 idx$1602))) 0))))) (&& c$591 (= 30 (* 2 (ite* (⊢ (= 2 (* 2 idx$1602)) idx$1204) (⊢ (= 3 (* 2 idx$1602)) idx$1206) (⊢ (= 4 (* 2 idx$1602)) idx$1208) (⊢ (= 5 (* 2 idx$1602)) idx$1210) (⊢ (= 6 (* 2 idx$1602)) idx$1212) (⊢ (= 7 (* 2 idx$1602)) idx$1214) (⊢ (= 8 (* 2 idx$1602)) idx$1216) (⊢ (= 9 (* 2 idx$1602)) idx$1218) (⊢ (= 10 (* 2 idx$1602)) idx$1220) (⊢ (= 11 (* 2 idx$1602)) idx$1222) (⊢ (= 12 (* 2 idx$1602)) idx$1224) (⊢ (= 13 (* 2 idx$1602)) idx$1226) (⊢ (= 14 (* 2 idx$1602)) idx$1228) (⊢ (= 15 (* 2 idx$1602)) idx$1230) (⊢ (= 16 (* 2 idx$1602)) idx$1232) (⊢ (= 17 (* 2 idx$1602)) idx$1234) (⊢ (= 18 (* 2 idx$1602)) idx$1236) (⊢ (= 19 (* 2 idx$1602)) idx$1238) (⊢ (= 20 (* 2 idx$1602)) idx$1240) (⊢ (= 21 (* 2 idx$1602)) idx$1242) (⊢ (= 22 (* 2 idx$1602)) idx$1244) (⊢ (= 23 (* 2 idx$1602)) idx$1246) (⊢ (= 24 (* 2 idx$1602)) idx$1248) (⊢ (= 25 (* 2 idx$1602)) idx$1250) (⊢ (= 26 (* 2 idx$1602)) idx$1252) (⊢ (= 27 (* 2 idx$1602)) idx$1254) (⊢ (= 28 (* 2 idx$1602)) idx$1256) (⊢ (= 29 (* 2 idx$1602)) idx$1258) (⊢ (= 30 (* 2 idx$1602)) idx$1260) (⊢ (= 31 (* 2 idx$1602)) idx$1262) (⊢ (= 32 (* 2 idx$1602)) idx$1264) (⊢ (= 33 (* 2 idx$1602)) idx$1266) (⊢ (= 34 (* 2 idx$1602)) idx$1268) (⊢ (= 35 (* 2 idx$1602)) idx$1270) (⊢ (= 36 (* 2 idx$1602)) idx$1272) (⊢ (= 37 (* 2 idx$1602)) idx$1274) (⊢ (= 38 (* 2 idx$1602)) idx$1276) (⊢ (= 39 (* 2 idx$1602)) idx$1278) (⊢ (= 40 (* 2 idx$1602)) idx$1280) (⊢ (= 41 (* 2 idx$1602)) idx$1282) (⊢ (= 42 (* 2 idx$1602)) idx$1284) (⊢ (= 43 (* 2 idx$1602)) idx$1286) (⊢ (= 44 (* 2 idx$1602)) idx$1288) (⊢ (= 45 (* 2 idx$1602)) idx$1290) (⊢ (= 46 (* 2 idx$1602)) idx$1292) (⊢ (= 47 (* 2 idx$1602)) idx$1294) (⊢ (= 48 (* 2 idx$1602)) idx$1296) (⊢ (= 49 (* 2 idx$1602)) idx$1298) (⊢ (= 50 (* 2 idx$1602)) idx$1300) (⊢ (= 51 (* 2 idx$1602)) idx$1302) (⊢ (= 52 (* 2 idx$1602)) idx$1304) (⊢ (= 53 (* 2 idx$1602)) idx$1306) (⊢ (= 54 (* 2 idx$1602)) idx$1308) (⊢ (= 55 (* 2 idx$1602)) idx$1310) (⊢ (= 56 (* 2 idx$1602)) idx$1312) (⊢ (= 57 (* 2 idx$1602)) idx$1314) (⊢ (= 58 (* 2 idx$1602)) idx$1316) (⊢ (= 59 (* 2 idx$1602)) idx$1318) (⊢ (= 60 (* 2 idx$1602)) idx$1320) (⊢ (= 61 (* 2 idx$1602)) idx$1322) (⊢ (= 62 (* 2 idx$1602)) idx$1324) (⊢ (= 63 (* 2 idx$1602)) idx$1326) (⊢ (|| (= 0 (* 2 idx$1602)) (= 1 (* 2 idx$1602))) 0))))) (&& c$593 (= 31 (* 2 (ite* (⊢ (= 2 (* 2 idx$1602)) idx$1204) (⊢ (= 3 (* 2 idx$1602)) idx$1206) (⊢ (= 4 (* 2 idx$1602)) idx$1208) (⊢ (= 5 (* 2 idx$1602)) idx$1210) (⊢ (= 6 (* 2 idx$1602)) idx$1212) (⊢ (= 7 (* 2 idx$1602)) idx$1214) (⊢ (= 8 (* 2 idx$1602)) idx$1216) (⊢ (= 9 (* 2 idx$1602)) idx$1218) (⊢ (= 10 (* 2 idx$1602)) idx$1220) (⊢ (= 11 (* 2 idx$1602)) idx$1222) (⊢ (= 12 (* 2 idx$1602)) idx$1224) (⊢ (= 13 (* 2 idx$1602)) idx$1226) (⊢ (= 14 (* 2 idx$1602)) idx$1228) (⊢ (= 15 (* 2 idx$1602)) idx$1230) (⊢ (= 16 (* 2 idx$1602)) idx$1232) (⊢ (= 17 (* 2 idx$1602)) idx$1234) (⊢ (= 18 (* 2 idx$1602)) idx$1236) (⊢ (= 19 (* 2 idx$1602)) idx$1238) (⊢ (= 20 (* 2 idx$1602)) idx$1240) (⊢ (= 21 (* 2 idx$1602)) idx$1242) (⊢ (= 22 (* 2 idx$1602)) idx$1244) (⊢ (= 23 (* 2 idx$1602)) idx$1246) (⊢ (= 24 (* 2 idx$1602)) idx$1248) (⊢ (= 25 (* 2 idx$1602)) idx$1250) (⊢ (= 26 (* 2 idx$1602)) idx$1252) (⊢ (= 27 (* 2 idx$1602)) idx$1254) (⊢ (= 28 (* 2 idx$1602)) idx$1256) (⊢ (= 29 (* 2 idx$1602)) idx$1258) (⊢ (= 30 (* 2 idx$1602)) idx$1260) (⊢ (= 31 (* 2 idx$1602)) idx$1262) (⊢ (= 32 (* 2 idx$1602)) idx$1264) (⊢ (= 33 (* 2 idx$1602)) idx$1266) (⊢ (= 34 (* 2 idx$1602)) idx$1268) (⊢ (= 35 (* 2 idx$1602)) idx$1270) (⊢ (= 36 (* 2 idx$1602)) idx$1272) (⊢ (= 37 (* 2 idx$1602)) idx$1274) (⊢ (= 38 (* 2 idx$1602)) idx$1276) (⊢ (= 39 (* 2 idx$1602)) idx$1278) (⊢ (= 40 (* 2 idx$1602)) idx$1280) (⊢ (= 41 (* 2 idx$1602)) idx$1282) (⊢ (= 42 (* 2 idx$1602)) idx$1284) (⊢ (= 43 (* 2 idx$1602)) idx$1286) (⊢ (= 44 (* 2 idx$1602)) idx$1288) (⊢ (= 45 (* 2 idx$1602)) idx$1290) (⊢ (= 46 (* 2 idx$1602)) idx$1292) (⊢ (= 47 (* 2 idx$1602)) idx$1294) (⊢ (= 48 (* 2 idx$1602)) idx$1296) (⊢ (= 49 (* 2 idx$1602)) idx$1298) (⊢ (= 50 (* 2 idx$1602)) idx$1300) (⊢ (= 51 (* 2 idx$1602)) idx$1302) (⊢ (= 52 (* 2 idx$1602)) idx$1304) (⊢ (= 53 (* 2 idx$1602)) idx$1306) (⊢ (= 54 (* 2 idx$1602)) idx$1308) (⊢ (= 55 (* 2 idx$1602)) idx$1310) (⊢ (= 56 (* 2 idx$1602)) idx$1312) (⊢ (= 57 (* 2 idx$1602)) idx$1314) (⊢ (= 58 (* 2 idx$1602)) idx$1316) (⊢ (= 59 (* 2 idx$1602)) idx$1318) (⊢ (= 60 (* 2 idx$1602)) idx$1320) (⊢ (= 61 (* 2 idx$1602)) idx$1322) (⊢ (= 62 (* 2 idx$1602)) idx$1324) (⊢ (= 63 (* 2 idx$1602)) idx$1326) (⊢ (|| (= 0 (* 2 idx$1602)) (= 1 (* 2 idx$1602))) 0))))) (&& c$595 (= 32 (* 2 (ite* (⊢ (= 2 (* 2 idx$1602)) idx$1204) (⊢ (= 3 (* 2 idx$1602)) idx$1206) (⊢ (= 4 (* 2 idx$1602)) idx$1208) (⊢ (= 5 (* 2 idx$1602)) idx$1210) (⊢ (= 6 (* 2 idx$1602)) idx$1212) (⊢ (= 7 (* 2 idx$1602)) idx$1214) (⊢ (= 8 (* 2 idx$1602)) idx$1216) (⊢ (= 9 (* 2 idx$1602)) idx$1218) (⊢ (= 10 (* 2 idx$1602)) idx$1220) (⊢ (= 11 (* 2 idx$1602)) idx$1222) (⊢ (= 12 (* 2 idx$1602)) idx$1224) (⊢ (= 13 (* 2 idx$1602)) idx$1226) (⊢ (= 14 (* 2 idx$1602)) idx$1228) (⊢ (= 15 (* 2 idx$1602)) idx$1230) (⊢ (= 16 (* 2 idx$1602)) idx$1232) (⊢ (= 17 (* 2 idx$1602)) idx$1234) (⊢ (= 18 (* 2 idx$1602)) idx$1236) (⊢ (= 19 (* 2 idx$1602)) idx$1238) (⊢ (= 20 (* 2 idx$1602)) idx$1240) (⊢ (= 21 (* 2 idx$1602)) idx$1242) (⊢ (= 22 (* 2 idx$1602)) idx$1244) (⊢ (= 23 (* 2 idx$1602)) idx$1246) (⊢ (= 24 (* 2 idx$1602)) idx$1248) (⊢ (= 25 (* 2 idx$1602)) idx$1250) (⊢ (= 26 (* 2 idx$1602)) idx$1252) (⊢ (= 27 (* 2 idx$1602)) idx$1254) (⊢ (= 28 (* 2 idx$1602)) idx$1256) (⊢ (= 29 (* 2 idx$1602)) idx$1258) (⊢ (= 30 (* 2 idx$1602)) idx$1260) (⊢ (= 31 (* 2 idx$1602)) idx$1262) (⊢ (= 32 (* 2 idx$1602)) idx$1264) (⊢ (= 33 (* 2 idx$1602)) idx$1266) (⊢ (= 34 (* 2 idx$1602)) idx$1268) (⊢ (= 35 (* 2 idx$1602)) idx$1270) (⊢ (= 36 (* 2 idx$1602)) idx$1272) (⊢ (= 37 (* 2 idx$1602)) idx$1274) (⊢ (= 38 (* 2 idx$1602)) idx$1276) (⊢ (= 39 (* 2 idx$1602)) idx$1278) (⊢ (= 40 (* 2 idx$1602)) idx$1280) (⊢ (= 41 (* 2 idx$1602)) idx$1282) (⊢ (= 42 (* 2 idx$1602)) idx$1284) (⊢ (= 43 (* 2 idx$1602)) idx$1286) (⊢ (= 44 (* 2 idx$1602)) idx$1288) (⊢ (= 45 (* 2 idx$1602)) idx$1290) (⊢ (= 46 (* 2 idx$1602)) idx$1292) (⊢ (= 47 (* 2 idx$1602)) idx$1294) (⊢ (= 48 (* 2 idx$1602)) idx$1296) (⊢ (= 49 (* 2 idx$1602)) idx$1298) (⊢ (= 50 (* 2 idx$1602)) idx$1300) (⊢ (= 51 (* 2 idx$1602)) idx$1302) (⊢ (= 52 (* 2 idx$1602)) idx$1304) (⊢ (= 53 (* 2 idx$1602)) idx$1306) (⊢ (= 54 (* 2 idx$1602)) idx$1308) (⊢ (= 55 (* 2 idx$1602)) idx$1310) (⊢ (= 56 (* 2 idx$1602)) idx$1312) (⊢ (= 57 (* 2 idx$1602)) idx$1314) (⊢ (= 58 (* 2 idx$1602)) idx$1316) (⊢ (= 59 (* 2 idx$1602)) idx$1318) (⊢ (= 60 (* 2 idx$1602)) idx$1320) (⊢ (= 61 (* 2 idx$1602)) idx$1322) (⊢ (= 62 (* 2 idx$1602)) idx$1324) (⊢ (= 63 (* 2 idx$1602)) idx$1326) (⊢ (|| (= 0 (* 2 idx$1602)) (= 1 (* 2 idx$1602))) 0))))) (&& c$597 (= 33 (* 2 (ite* (⊢ (= 2 (* 2 idx$1602)) idx$1204) (⊢ (= 3 (* 2 idx$1602)) idx$1206) (⊢ (= 4 (* 2 idx$1602)) idx$1208) (⊢ (= 5 (* 2 idx$1602)) idx$1210) (⊢ (= 6 (* 2 idx$1602)) idx$1212) (⊢ (= 7 (* 2 idx$1602)) idx$1214) (⊢ (= 8 (* 2 idx$1602)) idx$1216) (⊢ (= 9 (* 2 idx$1602)) idx$1218) (⊢ (= 10 (* 2 idx$1602)) idx$1220) (⊢ (= 11 (* 2 idx$1602)) idx$1222) (⊢ (= 12 (* 2 idx$1602)) idx$1224) (⊢ (= 13 (* 2 idx$1602)) idx$1226) (⊢ (= 14 (* 2 idx$1602)) idx$1228) (⊢ (= 15 (* 2 idx$1602)) idx$1230) (⊢ (= 16 (* 2 idx$1602)) idx$1232) (⊢ (= 17 (* 2 idx$1602)) idx$1234) (⊢ (= 18 (* 2 idx$1602)) idx$1236) (⊢ (= 19 (* 2 idx$1602)) idx$1238) (⊢ (= 20 (* 2 idx$1602)) idx$1240) (⊢ (= 21 (* 2 idx$1602)) idx$1242) (⊢ (= 22 (* 2 idx$1602)) idx$1244) (⊢ (= 23 (* 2 idx$1602)) idx$1246) (⊢ (= 24 (* 2 idx$1602)) idx$1248) (⊢ (= 25 (* 2 idx$1602)) idx$1250) (⊢ (= 26 (* 2 idx$1602)) idx$1252) (⊢ (= 27 (* 2 idx$1602)) idx$1254) (⊢ (= 28 (* 2 idx$1602)) idx$1256) (⊢ (= 29 (* 2 idx$1602)) idx$1258) (⊢ (= 30 (* 2 idx$1602)) idx$1260) (⊢ (= 31 (* 2 idx$1602)) idx$1262) (⊢ (= 32 (* 2 idx$1602)) idx$1264) (⊢ (= 33 (* 2 idx$1602)) idx$1266) (⊢ (= 34 (* 2 idx$1602)) idx$1268) (⊢ (= 35 (* 2 idx$1602)) idx$1270) (⊢ (= 36 (* 2 idx$1602)) idx$1272) (⊢ (= 37 (* 2 idx$1602)) idx$1274) (⊢ (= 38 (* 2 idx$1602)) idx$1276) (⊢ (= 39 (* 2 idx$1602)) idx$1278) (⊢ (= 40 (* 2 idx$1602)) idx$1280) (⊢ (= 41 (* 2 idx$1602)) idx$1282) (⊢ (= 42 (* 2 idx$1602)) idx$1284) (⊢ (= 43 (* 2 idx$1602)) idx$1286) (⊢ (= 44 (* 2 idx$1602)) idx$1288) (⊢ (= 45 (* 2 idx$1602)) idx$1290) (⊢ (= 46 (* 2 idx$1602)) idx$1292) (⊢ (= 47 (* 2 idx$1602)) idx$1294) (⊢ (= 48 (* 2 idx$1602)) idx$1296) (⊢ (= 49 (* 2 idx$1602)) idx$1298) (⊢ (= 50 (* 2 idx$1602)) idx$1300) (⊢ (= 51 (* 2 idx$1602)) idx$1302) (⊢ (= 52 (* 2 idx$1602)) idx$1304) (⊢ (= 53 (* 2 idx$1602)) idx$1306) (⊢ (= 54 (* 2 idx$1602)) idx$1308) (⊢ (= 55 (* 2 idx$1602)) idx$1310) (⊢ (= 56 (* 2 idx$1602)) idx$1312) (⊢ (= 57 (* 2 idx$1602)) idx$1314) (⊢ (= 58 (* 2 idx$1602)) idx$1316) (⊢ (= 59 (* 2 idx$1602)) idx$1318) (⊢ (= 60 (* 2 idx$1602)) idx$1320) (⊢ (= 61 (* 2 idx$1602)) idx$1322) (⊢ (= 62 (* 2 idx$1602)) idx$1324) (⊢ (= 63 (* 2 idx$1602)) idx$1326) (⊢ (|| (= 0 (* 2 idx$1602)) (= 1 (* 2 idx$1602))) 0))))) (&& c$599 (= 34 (* 2 (ite* (⊢ (= 2 (* 2 idx$1602)) idx$1204) (⊢ (= 3 (* 2 idx$1602)) idx$1206) (⊢ (= 4 (* 2 idx$1602)) idx$1208) (⊢ (= 5 (* 2 idx$1602)) idx$1210) (⊢ (= 6 (* 2 idx$1602)) idx$1212) (⊢ (= 7 (* 2 idx$1602)) idx$1214) (⊢ (= 8 (* 2 idx$1602)) idx$1216) (⊢ (= 9 (* 2 idx$1602)) idx$1218) (⊢ (= 10 (* 2 idx$1602)) idx$1220) (⊢ (= 11 (* 2 idx$1602)) idx$1222) (⊢ (= 12 (* 2 idx$1602)) idx$1224) (⊢ (= 13 (* 2 idx$1602)) idx$1226) (⊢ (= 14 (* 2 idx$1602)) idx$1228) (⊢ (= 15 (* 2 idx$1602)) idx$1230) (⊢ (= 16 (* 2 idx$1602)) idx$1232) (⊢ (= 17 (* 2 idx$1602)) idx$1234) (⊢ (= 18 (* 2 idx$1602)) idx$1236) (⊢ (= 19 (* 2 idx$1602)) idx$1238) (⊢ (= 20 (* 2 idx$1602)) idx$1240) (⊢ (= 21 (* 2 idx$1602)) idx$1242) (⊢ (= 22 (* 2 idx$1602)) idx$1244) (⊢ (= 23 (* 2 idx$1602)) idx$1246) (⊢ (= 24 (* 2 idx$1602)) idx$1248) (⊢ (= 25 (* 2 idx$1602)) idx$1250) (⊢ (= 26 (* 2 idx$1602)) idx$1252) (⊢ (= 27 (* 2 idx$1602)) idx$1254) (⊢ (= 28 (* 2 idx$1602)) idx$1256) (⊢ (= 29 (* 2 idx$1602)) idx$1258) (⊢ (= 30 (* 2 idx$1602)) idx$1260) (⊢ (= 31 (* 2 idx$1602)) idx$1262) (⊢ (= 32 (* 2 idx$1602)) idx$1264) (⊢ (= 33 (* 2 idx$1602)) idx$1266) (⊢ (= 34 (* 2 idx$1602)) idx$1268) (⊢ (= 35 (* 2 idx$1602)) idx$1270) (⊢ (= 36 (* 2 idx$1602)) idx$1272) (⊢ (= 37 (* 2 idx$1602)) idx$1274) (⊢ (= 38 (* 2 idx$1602)) idx$1276) (⊢ (= 39 (* 2 idx$1602)) idx$1278) (⊢ (= 40 (* 2 idx$1602)) idx$1280) (⊢ (= 41 (* 2 idx$1602)) idx$1282) (⊢ (= 42 (* 2 idx$1602)) idx$1284) (⊢ (= 43 (* 2 idx$1602)) idx$1286) (⊢ (= 44 (* 2 idx$1602)) idx$1288) (⊢ (= 45 (* 2 idx$1602)) idx$1290) (⊢ (= 46 (* 2 idx$1602)) idx$1292) (⊢ (= 47 (* 2 idx$1602)) idx$1294) (⊢ (= 48 (* 2 idx$1602)) idx$1296) (⊢ (= 49 (* 2 idx$1602)) idx$1298) (⊢ (= 50 (* 2 idx$1602)) idx$1300) (⊢ (= 51 (* 2 idx$1602)) idx$1302) (⊢ (= 52 (* 2 idx$1602)) idx$1304) (⊢ (= 53 (* 2 idx$1602)) idx$1306) (⊢ (= 54 (* 2 idx$1602)) idx$1308) (⊢ (= 55 (* 2 idx$1602)) idx$1310) (⊢ (= 56 (* 2 idx$1602)) idx$1312) (⊢ (= 57 (* 2 idx$1602)) idx$1314) (⊢ (= 58 (* 2 idx$1602)) idx$1316) (⊢ (= 59 (* 2 idx$1602)) idx$1318) (⊢ (= 60 (* 2 idx$1602)) idx$1320) (⊢ (= 61 (* 2 idx$1602)) idx$1322) (⊢ (= 62 (* 2 idx$1602)) idx$1324) (⊢ (= 63 (* 2 idx$1602)) idx$1326) (⊢ (|| (= 0 (* 2 idx$1602)) (= 1 (* 2 idx$1602))) 0))))) (&& c$601 (= 35 (* 2 (ite* (⊢ (= 2 (* 2 idx$1602)) idx$1204) (⊢ (= 3 (* 2 idx$1602)) idx$1206) (⊢ (= 4 (* 2 idx$1602)) idx$1208) (⊢ (= 5 (* 2 idx$1602)) idx$1210) (⊢ (= 6 (* 2 idx$1602)) idx$1212) (⊢ (= 7 (* 2 idx$1602)) idx$1214) (⊢ (= 8 (* 2 idx$1602)) idx$1216) (⊢ (= 9 (* 2 idx$1602)) idx$1218) (⊢ (= 10 (* 2 idx$1602)) idx$1220) (⊢ (= 11 (* 2 idx$1602)) idx$1222) (⊢ (= 12 (* 2 idx$1602)) idx$1224) (⊢ (= 13 (* 2 idx$1602)) idx$1226) (⊢ (= 14 (* 2 idx$1602)) idx$1228) (⊢ (= 15 (* 2 idx$1602)) idx$1230) (⊢ (= 16 (* 2 idx$1602)) idx$1232) (⊢ (= 17 (* 2 idx$1602)) idx$1234) (⊢ (= 18 (* 2 idx$1602)) idx$1236) (⊢ (= 19 (* 2 idx$1602)) idx$1238) (⊢ (= 20 (* 2 idx$1602)) idx$1240) (⊢ (= 21 (* 2 idx$1602)) idx$1242) (⊢ (= 22 (* 2 idx$1602)) idx$1244) (⊢ (= 23 (* 2 idx$1602)) idx$1246) (⊢ (= 24 (* 2 idx$1602)) idx$1248) (⊢ (= 25 (* 2 idx$1602)) idx$1250) (⊢ (= 26 (* 2 idx$1602)) idx$1252) (⊢ (= 27 (* 2 idx$1602)) idx$1254) (⊢ (= 28 (* 2 idx$1602)) idx$1256) (⊢ (= 29 (* 2 idx$1602)) idx$1258) (⊢ (= 30 (* 2 idx$1602)) idx$1260) (⊢ (= 31 (* 2 idx$1602)) idx$1262) (⊢ (= 32 (* 2 idx$1602)) idx$1264) (⊢ (= 33 (* 2 idx$1602)) idx$1266) (⊢ (= 34 (* 2 idx$1602)) idx$1268) (⊢ (= 35 (* 2 idx$1602)) idx$1270) (⊢ (= 36 (* 2 idx$1602)) idx$1272) (⊢ (= 37 (* 2 idx$1602)) idx$1274) (⊢ (= 38 (* 2 idx$1602)) idx$1276) (⊢ (= 39 (* 2 idx$1602)) idx$1278) (⊢ (= 40 (* 2 idx$1602)) idx$1280) (⊢ (= 41 (* 2 idx$1602)) idx$1282) (⊢ (= 42 (* 2 idx$1602)) idx$1284) (⊢ (= 43 (* 2 idx$1602)) idx$1286) (⊢ (= 44 (* 2 idx$1602)) idx$1288) (⊢ (= 45 (* 2 idx$1602)) idx$1290) (⊢ (= 46 (* 2 idx$1602)) idx$1292) (⊢ (= 47 (* 2 idx$1602)) idx$1294) (⊢ (= 48 (* 2 idx$1602)) idx$1296) (⊢ (= 49 (* 2 idx$1602)) idx$1298) (⊢ (= 50 (* 2 idx$1602)) idx$1300) (⊢ (= 51 (* 2 idx$1602)) idx$1302) (⊢ (= 52 (* 2 idx$1602)) idx$1304) (⊢ (= 53 (* 2 idx$1602)) idx$1306) (⊢ (= 54 (* 2 idx$1602)) idx$1308) (⊢ (= 55 (* 2 idx$1602)) idx$1310) (⊢ (= 56 (* 2 idx$1602)) idx$1312) (⊢ (= 57 (* 2 idx$1602)) idx$1314) (⊢ (= 58 (* 2 idx$1602)) idx$1316) (⊢ (= 59 (* 2 idx$1602)) idx$1318) (⊢ (= 60 (* 2 idx$1602)) idx$1320) (⊢ (= 61 (* 2 idx$1602)) idx$1322) (⊢ (= 62 (* 2 idx$1602)) idx$1324) (⊢ (= 63 (* 2 idx$1602)) idx$1326) (⊢ (|| (= 0 (* 2 idx$1602)) (= 1 (* 2 idx$1602))) 0))))) (&& c$603 (= 36 (* 2 (ite* (⊢ (= 2 (* 2 idx$1602)) idx$1204) (⊢ (= 3 (* 2 idx$1602)) idx$1206) (⊢ (= 4 (* 2 idx$1602)) idx$1208) (⊢ (= 5 (* 2 idx$1602)) idx$1210) (⊢ (= 6 (* 2 idx$1602)) idx$1212) (⊢ (= 7 (* 2 idx$1602)) idx$1214) (⊢ (= 8 (* 2 idx$1602)) idx$1216) (⊢ (= 9 (* 2 idx$1602)) idx$1218) (⊢ (= 10 (* 2 idx$1602)) idx$1220) (⊢ (= 11 (* 2 idx$1602)) idx$1222) (⊢ (= 12 (* 2 idx$1602)) idx$1224) (⊢ (= 13 (* 2 idx$1602)) idx$1226) (⊢ (= 14 (* 2 idx$1602)) idx$1228) (⊢ (= 15 (* 2 idx$1602)) idx$1230) (⊢ (= 16 (* 2 idx$1602)) idx$1232) (⊢ (= 17 (* 2 idx$1602)) idx$1234) (⊢ (= 18 (* 2 idx$1602)) idx$1236) (⊢ (= 19 (* 2 idx$1602)) idx$1238) (⊢ (= 20 (* 2 idx$1602)) idx$1240) (⊢ (= 21 (* 2 idx$1602)) idx$1242) (⊢ (= 22 (* 2 idx$1602)) idx$1244) (⊢ (= 23 (* 2 idx$1602)) idx$1246) (⊢ (= 24 (* 2 idx$1602)) idx$1248) (⊢ (= 25 (* 2 idx$1602)) idx$1250) (⊢ (= 26 (* 2 idx$1602)) idx$1252) (⊢ (= 27 (* 2 idx$1602)) idx$1254) (⊢ (= 28 (* 2 idx$1602)) idx$1256) (⊢ (= 29 (* 2 idx$1602)) idx$1258) (⊢ (= 30 (* 2 idx$1602)) idx$1260) (⊢ (= 31 (* 2 idx$1602)) idx$1262) (⊢ (= 32 (* 2 idx$1602)) idx$1264) (⊢ (= 33 (* 2 idx$1602)) idx$1266) (⊢ (= 34 (* 2 idx$1602)) idx$1268) (⊢ (= 35 (* 2 idx$1602)) idx$1270) (⊢ (= 36 (* 2 idx$1602)) idx$1272) (⊢ (= 37 (* 2 idx$1602)) idx$1274) (⊢ (= 38 (* 2 idx$1602)) idx$1276) (⊢ (= 39 (* 2 idx$1602)) idx$1278) (⊢ (= 40 (* 2 idx$1602)) idx$1280) (⊢ (= 41 (* 2 idx$1602)) idx$1282) (⊢ (= 42 (* 2 idx$1602)) idx$1284) (⊢ (= 43 (* 2 idx$1602)) idx$1286) (⊢ (= 44 (* 2 idx$1602)) idx$1288) (⊢ (= 45 (* 2 idx$1602)) idx$1290) (⊢ (= 46 (* 2 idx$1602)) idx$1292) (⊢ (= 47 (* 2 idx$1602)) idx$1294) (⊢ (= 48 (* 2 idx$1602)) idx$1296) (⊢ (= 49 (* 2 idx$1602)) idx$1298) (⊢ (= 50 (* 2 idx$1602)) idx$1300) (⊢ (= 51 (* 2 idx$1602)) idx$1302) (⊢ (= 52 (* 2 idx$1602)) idx$1304) (⊢ (= 53 (* 2 idx$1602)) idx$1306) (⊢ (= 54 (* 2 idx$1602)) idx$1308) (⊢ (= 55 (* 2 idx$1602)) idx$1310) (⊢ (= 56 (* 2 idx$1602)) idx$1312) (⊢ (= 57 (* 2 idx$1602)) idx$1314) (⊢ (= 58 (* 2 idx$1602)) idx$1316) (⊢ (= 59 (* 2 idx$1602)) idx$1318) (⊢ (= 60 (* 2 idx$1602)) idx$1320) (⊢ (= 61 (* 2 idx$1602)) idx$1322) (⊢ (= 62 (* 2 idx$1602)) idx$1324) (⊢ (= 63 (* 2 idx$1602)) idx$1326) (⊢ (|| (= 0 (* 2 idx$1602)) (= 1 (* 2 idx$1602))) 0))))) (&& c$605 (= 37 (* 2 (ite* (⊢ (= 2 (* 2 idx$1602)) idx$1204) (⊢ (= 3 (* 2 idx$1602)) idx$1206) (⊢ (= 4 (* 2 idx$1602)) idx$1208) (⊢ (= 5 (* 2 idx$1602)) idx$1210) (⊢ (= 6 (* 2 idx$1602)) idx$1212) (⊢ (= 7 (* 2 idx$1602)) idx$1214) (⊢ (= 8 (* 2 idx$1602)) idx$1216) (⊢ (= 9 (* 2 idx$1602)) idx$1218) (⊢ (= 10 (* 2 idx$1602)) idx$1220) (⊢ (= 11 (* 2 idx$1602)) idx$1222) (⊢ (= 12 (* 2 idx$1602)) idx$1224) (⊢ (= 13 (* 2 idx$1602)) idx$1226) (⊢ (= 14 (* 2 idx$1602)) idx$1228) (⊢ (= 15 (* 2 idx$1602)) idx$1230) (⊢ (= 16 (* 2 idx$1602)) idx$1232) (⊢ (= 17 (* 2 idx$1602)) idx$1234) (⊢ (= 18 (* 2 idx$1602)) idx$1236) (⊢ (= 19 (* 2 idx$1602)) idx$1238) (⊢ (= 20 (* 2 idx$1602)) idx$1240) (⊢ (= 21 (* 2 idx$1602)) idx$1242) (⊢ (= 22 (* 2 idx$1602)) idx$1244) (⊢ (= 23 (* 2 idx$1602)) idx$1246) (⊢ (= 24 (* 2 idx$1602)) idx$1248) (⊢ (= 25 (* 2 idx$1602)) idx$1250) (⊢ (= 26 (* 2 idx$1602)) idx$1252) (⊢ (= 27 (* 2 idx$1602)) idx$1254) (⊢ (= 28 (* 2 idx$1602)) idx$1256) (⊢ (= 29 (* 2 idx$1602)) idx$1258) (⊢ (= 30 (* 2 idx$1602)) idx$1260) (⊢ (= 31 (* 2 idx$1602)) idx$1262) (⊢ (= 32 (* 2 idx$1602)) idx$1264) (⊢ (= 33 (* 2 idx$1602)) idx$1266) (⊢ (= 34 (* 2 idx$1602)) idx$1268) (⊢ (= 35 (* 2 idx$1602)) idx$1270) (⊢ (= 36 (* 2 idx$1602)) idx$1272) (⊢ (= 37 (* 2 idx$1602)) idx$1274) (⊢ (= 38 (* 2 idx$1602)) idx$1276) (⊢ (= 39 (* 2 idx$1602)) idx$1278) (⊢ (= 40 (* 2 idx$1602)) idx$1280) (⊢ (= 41 (* 2 idx$1602)) idx$1282) (⊢ (= 42 (* 2 idx$1602)) idx$1284) (⊢ (= 43 (* 2 idx$1602)) idx$1286) (⊢ (= 44 (* 2 idx$1602)) idx$1288) (⊢ (= 45 (* 2 idx$1602)) idx$1290) (⊢ (= 46 (* 2 idx$1602)) idx$1292) (⊢ (= 47 (* 2 idx$1602)) idx$1294) (⊢ (= 48 (* 2 idx$1602)) idx$1296) (⊢ (= 49 (* 2 idx$1602)) idx$1298) (⊢ (= 50 (* 2 idx$1602)) idx$1300) (⊢ (= 51 (* 2 idx$1602)) idx$1302) (⊢ (= 52 (* 2 idx$1602)) idx$1304) (⊢ (= 53 (* 2 idx$1602)) idx$1306) (⊢ (= 54 (* 2 idx$1602)) idx$1308) (⊢ (= 55 (* 2 idx$1602)) idx$1310) (⊢ (= 56 (* 2 idx$1602)) idx$1312) (⊢ (= 57 (* 2 idx$1602)) idx$1314) (⊢ (= 58 (* 2 idx$1602)) idx$1316) (⊢ (= 59 (* 2 idx$1602)) idx$1318) (⊢ (= 60 (* 2 idx$1602)) idx$1320) (⊢ (= 61 (* 2 idx$1602)) idx$1322) (⊢ (= 62 (* 2 idx$1602)) idx$1324) (⊢ (= 63 (* 2 idx$1602)) idx$1326) (⊢ (|| (= 0 (* 2 idx$1602)) (= 1 (* 2 idx$1602))) 0))))) (&& c$607 (= 38 (* 2 (ite* (⊢ (= 2 (* 2 idx$1602)) idx$1204) (⊢ (= 3 (* 2 idx$1602)) idx$1206) (⊢ (= 4 (* 2 idx$1602)) idx$1208) (⊢ (= 5 (* 2 idx$1602)) idx$1210) (⊢ (= 6 (* 2 idx$1602)) idx$1212) (⊢ (= 7 (* 2 idx$1602)) idx$1214) (⊢ (= 8 (* 2 idx$1602)) idx$1216) (⊢ (= 9 (* 2 idx$1602)) idx$1218) (⊢ (= 10 (* 2 idx$1602)) idx$1220) (⊢ (= 11 (* 2 idx$1602)) idx$1222) (⊢ (= 12 (* 2 idx$1602)) idx$1224) (⊢ (= 13 (* 2 idx$1602)) idx$1226) (⊢ (= 14 (* 2 idx$1602)) idx$1228) (⊢ (= 15 (* 2 idx$1602)) idx$1230) (⊢ (= 16 (* 2 idx$1602)) idx$1232) (⊢ (= 17 (* 2 idx$1602)) idx$1234) (⊢ (= 18 (* 2 idx$1602)) idx$1236) (⊢ (= 19 (* 2 idx$1602)) idx$1238) (⊢ (= 20 (* 2 idx$1602)) idx$1240) (⊢ (= 21 (* 2 idx$1602)) idx$1242) (⊢ (= 22 (* 2 idx$1602)) idx$1244) (⊢ (= 23 (* 2 idx$1602)) idx$1246) (⊢ (= 24 (* 2 idx$1602)) idx$1248) (⊢ (= 25 (* 2 idx$1602)) idx$1250) (⊢ (= 26 (* 2 idx$1602)) idx$1252) (⊢ (= 27 (* 2 idx$1602)) idx$1254) (⊢ (= 28 (* 2 idx$1602)) idx$1256) (⊢ (= 29 (* 2 idx$1602)) idx$1258) (⊢ (= 30 (* 2 idx$1602)) idx$1260) (⊢ (= 31 (* 2 idx$1602)) idx$1262) (⊢ (= 32 (* 2 idx$1602)) idx$1264) (⊢ (= 33 (* 2 idx$1602)) idx$1266) (⊢ (= 34 (* 2 idx$1602)) idx$1268) (⊢ (= 35 (* 2 idx$1602)) idx$1270) (⊢ (= 36 (* 2 idx$1602)) idx$1272) (⊢ (= 37 (* 2 idx$1602)) idx$1274) (⊢ (= 38 (* 2 idx$1602)) idx$1276) (⊢ (= 39 (* 2 idx$1602)) idx$1278) (⊢ (= 40 (* 2 idx$1602)) idx$1280) (⊢ (= 41 (* 2 idx$1602)) idx$1282) (⊢ (= 42 (* 2 idx$1602)) idx$1284) (⊢ (= 43 (* 2 idx$1602)) idx$1286) (⊢ (= 44 (* 2 idx$1602)) idx$1288) (⊢ (= 45 (* 2 idx$1602)) idx$1290) (⊢ (= 46 (* 2 idx$1602)) idx$1292) (⊢ (= 47 (* 2 idx$1602)) idx$1294) (⊢ (= 48 (* 2 idx$1602)) idx$1296) (⊢ (= 49 (* 2 idx$1602)) idx$1298) (⊢ (= 50 (* 2 idx$1602)) idx$1300) (⊢ (= 51 (* 2 idx$1602)) idx$1302) (⊢ (= 52 (* 2 idx$1602)) idx$1304) (⊢ (= 53 (* 2 idx$1602)) idx$1306) (⊢ (= 54 (* 2 idx$1602)) idx$1308) (⊢ (= 55 (* 2 idx$1602)) idx$1310) (⊢ (= 56 (* 2 idx$1602)) idx$1312) (⊢ (= 57 (* 2 idx$1602)) idx$1314) (⊢ (= 58 (* 2 idx$1602)) idx$1316) (⊢ (= 59 (* 2 idx$1602)) idx$1318) (⊢ (= 60 (* 2 idx$1602)) idx$1320) (⊢ (= 61 (* 2 idx$1602)) idx$1322) (⊢ (= 62 (* 2 idx$1602)) idx$1324) (⊢ (= 63 (* 2 idx$1602)) idx$1326) (⊢ (|| (= 0 (* 2 idx$1602)) (= 1 (* 2 idx$1602))) 0))))) (&& c$609 (= 39 (* 2 (ite* (⊢ (= 2 (* 2 idx$1602)) idx$1204) (⊢ (= 3 (* 2 idx$1602)) idx$1206) (⊢ (= 4 (* 2 idx$1602)) idx$1208) (⊢ (= 5 (* 2 idx$1602)) idx$1210) (⊢ (= 6 (* 2 idx$1602)) idx$1212) (⊢ (= 7 (* 2 idx$1602)) idx$1214) (⊢ (= 8 (* 2 idx$1602)) idx$1216) (⊢ (= 9 (* 2 idx$1602)) idx$1218) (⊢ (= 10 (* 2 idx$1602)) idx$1220) (⊢ (= 11 (* 2 idx$1602)) idx$1222) (⊢ (= 12 (* 2 idx$1602)) idx$1224) (⊢ (= 13 (* 2 idx$1602)) idx$1226) (⊢ (= 14 (* 2 idx$1602)) idx$1228) (⊢ (= 15 (* 2 idx$1602)) idx$1230) (⊢ (= 16 (* 2 idx$1602)) idx$1232) (⊢ (= 17 (* 2 idx$1602)) idx$1234) (⊢ (= 18 (* 2 idx$1602)) idx$1236) (⊢ (= 19 (* 2 idx$1602)) idx$1238) (⊢ (= 20 (* 2 idx$1602)) idx$1240) (⊢ (= 21 (* 2 idx$1602)) idx$1242) (⊢ (= 22 (* 2 idx$1602)) idx$1244) (⊢ (= 23 (* 2 idx$1602)) idx$1246) (⊢ (= 24 (* 2 idx$1602)) idx$1248) (⊢ (= 25 (* 2 idx$1602)) idx$1250) (⊢ (= 26 (* 2 idx$1602)) idx$1252) (⊢ (= 27 (* 2 idx$1602)) idx$1254) (⊢ (= 28 (* 2 idx$1602)) idx$1256) (⊢ (= 29 (* 2 idx$1602)) idx$1258) (⊢ (= 30 (* 2 idx$1602)) idx$1260) (⊢ (= 31 (* 2 idx$1602)) idx$1262) (⊢ (= 32 (* 2 idx$1602)) idx$1264) (⊢ (= 33 (* 2 idx$1602)) idx$1266) (⊢ (= 34 (* 2 idx$1602)) idx$1268) (⊢ (= 35 (* 2 idx$1602)) idx$1270) (⊢ (= 36 (* 2 idx$1602)) idx$1272) (⊢ (= 37 (* 2 idx$1602)) idx$1274) (⊢ (= 38 (* 2 idx$1602)) idx$1276) (⊢ (= 39 (* 2 idx$1602)) idx$1278) (⊢ (= 40 (* 2 idx$1602)) idx$1280) (⊢ (= 41 (* 2 idx$1602)) idx$1282) (⊢ (= 42 (* 2 idx$1602)) idx$1284) (⊢ (= 43 (* 2 idx$1602)) idx$1286) (⊢ (= 44 (* 2 idx$1602)) idx$1288) (⊢ (= 45 (* 2 idx$1602)) idx$1290) (⊢ (= 46 (* 2 idx$1602)) idx$1292) (⊢ (= 47 (* 2 idx$1602)) idx$1294) (⊢ (= 48 (* 2 idx$1602)) idx$1296) (⊢ (= 49 (* 2 idx$1602)) idx$1298) (⊢ (= 50 (* 2 idx$1602)) idx$1300) (⊢ (= 51 (* 2 idx$1602)) idx$1302) (⊢ (= 52 (* 2 idx$1602)) idx$1304) (⊢ (= 53 (* 2 idx$1602)) idx$1306) (⊢ (= 54 (* 2 idx$1602)) idx$1308) (⊢ (= 55 (* 2 idx$1602)) idx$1310) (⊢ (= 56 (* 2 idx$1602)) idx$1312) (⊢ (= 57 (* 2 idx$1602)) idx$1314) (⊢ (= 58 (* 2 idx$1602)) idx$1316) (⊢ (= 59 (* 2 idx$1602)) idx$1318) (⊢ (= 60 (* 2 idx$1602)) idx$1320) (⊢ (= 61 (* 2 idx$1602)) idx$1322) (⊢ (= 62 (* 2 idx$1602)) idx$1324) (⊢ (= 63 (* 2 idx$1602)) idx$1326) (⊢ (|| (= 0 (* 2 idx$1602)) (= 1 (* 2 idx$1602))) 0))))) (&& c$611 (= 40 (* 2 (ite* (⊢ (= 2 (* 2 idx$1602)) idx$1204) (⊢ (= 3 (* 2 idx$1602)) idx$1206) (⊢ (= 4 (* 2 idx$1602)) idx$1208) (⊢ (= 5 (* 2 idx$1602)) idx$1210) (⊢ (= 6 (* 2 idx$1602)) idx$1212) (⊢ (= 7 (* 2 idx$1602)) idx$1214) (⊢ (= 8 (* 2 idx$1602)) idx$1216) (⊢ (= 9 (* 2 idx$1602)) idx$1218) (⊢ (= 10 (* 2 idx$1602)) idx$1220) (⊢ (= 11 (* 2 idx$1602)) idx$1222) (⊢ (= 12 (* 2 idx$1602)) idx$1224) (⊢ (= 13 (* 2 idx$1602)) idx$1226) (⊢ (= 14 (* 2 idx$1602)) idx$1228) (⊢ (= 15 (* 2 idx$1602)) idx$1230) (⊢ (= 16 (* 2 idx$1602)) idx$1232) (⊢ (= 17 (* 2 idx$1602)) idx$1234) (⊢ (= 18 (* 2 idx$1602)) idx$1236) (⊢ (= 19 (* 2 idx$1602)) idx$1238) (⊢ (= 20 (* 2 idx$1602)) idx$1240) (⊢ (= 21 (* 2 idx$1602)) idx$1242) (⊢ (= 22 (* 2 idx$1602)) idx$1244) (⊢ (= 23 (* 2 idx$1602)) idx$1246) (⊢ (= 24 (* 2 idx$1602)) idx$1248) (⊢ (= 25 (* 2 idx$1602)) idx$1250) (⊢ (= 26 (* 2 idx$1602)) idx$1252) (⊢ (= 27 (* 2 idx$1602)) idx$1254) (⊢ (= 28 (* 2 idx$1602)) idx$1256) (⊢ (= 29 (* 2 idx$1602)) idx$1258) (⊢ (= 30 (* 2 idx$1602)) idx$1260) (⊢ (= 31 (* 2 idx$1602)) idx$1262) (⊢ (= 32 (* 2 idx$1602)) idx$1264) (⊢ (= 33 (* 2 idx$1602)) idx$1266) (⊢ (= 34 (* 2 idx$1602)) idx$1268) (⊢ (= 35 (* 2 idx$1602)) idx$1270) (⊢ (= 36 (* 2 idx$1602)) idx$1272) (⊢ (= 37 (* 2 idx$1602)) idx$1274) (⊢ (= 38 (* 2 idx$1602)) idx$1276) (⊢ (= 39 (* 2 idx$1602)) idx$1278) (⊢ (= 40 (* 2 idx$1602)) idx$1280) (⊢ (= 41 (* 2 idx$1602)) idx$1282) (⊢ (= 42 (* 2 idx$1602)) idx$1284) (⊢ (= 43 (* 2 idx$1602)) idx$1286) (⊢ (= 44 (* 2 idx$1602)) idx$1288) (⊢ (= 45 (* 2 idx$1602)) idx$1290) (⊢ (= 46 (* 2 idx$1602)) idx$1292) (⊢ (= 47 (* 2 idx$1602)) idx$1294) (⊢ (= 48 (* 2 idx$1602)) idx$1296) (⊢ (= 49 (* 2 idx$1602)) idx$1298) (⊢ (= 50 (* 2 idx$1602)) idx$1300) (⊢ (= 51 (* 2 idx$1602)) idx$1302) (⊢ (= 52 (* 2 idx$1602)) idx$1304) (⊢ (= 53 (* 2 idx$1602)) idx$1306) (⊢ (= 54 (* 2 idx$1602)) idx$1308) (⊢ (= 55 (* 2 idx$1602)) idx$1310) (⊢ (= 56 (* 2 idx$1602)) idx$1312) (⊢ (= 57 (* 2 idx$1602)) idx$1314) (⊢ (= 58 (* 2 idx$1602)) idx$1316) (⊢ (= 59 (* 2 idx$1602)) idx$1318) (⊢ (= 60 (* 2 idx$1602)) idx$1320) (⊢ (= 61 (* 2 idx$1602)) idx$1322) (⊢ (= 62 (* 2 idx$1602)) idx$1324) (⊢ (= 63 (* 2 idx$1602)) idx$1326) (⊢ (|| (= 0 (* 2 idx$1602)) (= 1 (* 2 idx$1602))) 0))))) (&& c$613 (= 41 (* 2 (ite* (⊢ (= 2 (* 2 idx$1602)) idx$1204) (⊢ (= 3 (* 2 idx$1602)) idx$1206) (⊢ (= 4 (* 2 idx$1602)) idx$1208) (⊢ (= 5 (* 2 idx$1602)) idx$1210) (⊢ (= 6 (* 2 idx$1602)) idx$1212) (⊢ (= 7 (* 2 idx$1602)) idx$1214) (⊢ (= 8 (* 2 idx$1602)) idx$1216) (⊢ (= 9 (* 2 idx$1602)) idx$1218) (⊢ (= 10 (* 2 idx$1602)) idx$1220) (⊢ (= 11 (* 2 idx$1602)) idx$1222) (⊢ (= 12 (* 2 idx$1602)) idx$1224) (⊢ (= 13 (* 2 idx$1602)) idx$1226) (⊢ (= 14 (* 2 idx$1602)) idx$1228) (⊢ (= 15 (* 2 idx$1602)) idx$1230) (⊢ (= 16 (* 2 idx$1602)) idx$1232) (⊢ (= 17 (* 2 idx$1602)) idx$1234) (⊢ (= 18 (* 2 idx$1602)) idx$1236) (⊢ (= 19 (* 2 idx$1602)) idx$1238) (⊢ (= 20 (* 2 idx$1602)) idx$1240) (⊢ (= 21 (* 2 idx$1602)) idx$1242) (⊢ (= 22 (* 2 idx$1602)) idx$1244) (⊢ (= 23 (* 2 idx$1602)) idx$1246) (⊢ (= 24 (* 2 idx$1602)) idx$1248) (⊢ (= 25 (* 2 idx$1602)) idx$1250) (⊢ (= 26 (* 2 idx$1602)) idx$1252) (⊢ (= 27 (* 2 idx$1602)) idx$1254) (⊢ (= 28 (* 2 idx$1602)) idx$1256) (⊢ (= 29 (* 2 idx$1602)) idx$1258) (⊢ (= 30 (* 2 idx$1602)) idx$1260) (⊢ (= 31 (* 2 idx$1602)) idx$1262) (⊢ (= 32 (* 2 idx$1602)) idx$1264) (⊢ (= 33 (* 2 idx$1602)) idx$1266) (⊢ (= 34 (* 2 idx$1602)) idx$1268) (⊢ (= 35 (* 2 idx$1602)) idx$1270) (⊢ (= 36 (* 2 idx$1602)) idx$1272) (⊢ (= 37 (* 2 idx$1602)) idx$1274) (⊢ (= 38 (* 2 idx$1602)) idx$1276) (⊢ (= 39 (* 2 idx$1602)) idx$1278) (⊢ (= 40 (* 2 idx$1602)) idx$1280) (⊢ (= 41 (* 2 idx$1602)) idx$1282) (⊢ (= 42 (* 2 idx$1602)) idx$1284) (⊢ (= 43 (* 2 idx$1602)) idx$1286) (⊢ (= 44 (* 2 idx$1602)) idx$1288) (⊢ (= 45 (* 2 idx$1602)) idx$1290) (⊢ (= 46 (* 2 idx$1602)) idx$1292) (⊢ (= 47 (* 2 idx$1602)) idx$1294) (⊢ (= 48 (* 2 idx$1602)) idx$1296) (⊢ (= 49 (* 2 idx$1602)) idx$1298) (⊢ (= 50 (* 2 idx$1602)) idx$1300) (⊢ (= 51 (* 2 idx$1602)) idx$1302) (⊢ (= 52 (* 2 idx$1602)) idx$1304) (⊢ (= 53 (* 2 idx$1602)) idx$1306) (⊢ (= 54 (* 2 idx$1602)) idx$1308) (⊢ (= 55 (* 2 idx$1602)) idx$1310) (⊢ (= 56 (* 2 idx$1602)) idx$1312) (⊢ (= 57 (* 2 idx$1602)) idx$1314) (⊢ (= 58 (* 2 idx$1602)) idx$1316) (⊢ (= 59 (* 2 idx$1602)) idx$1318) (⊢ (= 60 (* 2 idx$1602)) idx$1320) (⊢ (= 61 (* 2 idx$1602)) idx$1322) (⊢ (= 62 (* 2 idx$1602)) idx$1324) (⊢ (= 63 (* 2 idx$1602)) idx$1326) (⊢ (|| (= 0 (* 2 idx$1602)) (= 1 (* 2 idx$1602))) 0))))) ...) ...) ...)) ...) ...))) ...))
Ran synthesizer for 3826 ms
(unsat)
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-add
  (vec-mul
   (vec-cast
    (load
     (buffer column_sums_b 'uint32)
     (ramp
      (sca-add (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16) 16)
      1
      16)
     (aligned 16 0))
    'int32
    16)
   (sca-broadcast (int32_t t5829) 16))
  (vec-add
   (load
    (buffer bias 'int32)
    (ramp (sca-mul output.s0.x.x 16) 1 16)
    (aligned 16 0))
   (sca-broadcast
    (sca-add
     (sca-mul
      (sca-mul (int32_t t5829) (int32_t t5830))
      (int32_t mat_a.extent.0))
     (sca-mul (int32_t t5830) (int32_t t6653)))
    16)))
 (vec-cast
  (load
   (buffer multiplied_no_offsets 'uint32)
   (ramp
    (sca-add (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121)) 4)
    1
    16)
   (aligned 4 0))
  'int32
  16))
template:
  (vs-mpy-add
 ...
 (union [x?$2010 #(struct:vs-mpy-add
                   ...
                   #<combine:
                    #(struct:vs-mpy-add
                      ...
                      #<load-data>
                      (#(struct:int32_t t5829))
                      #f
                      #f
                      #f
                      int32)
                    #(struct:vs-mpy-add
                      ...
                      #<combine:
                       #<load-data>
                       #(struct:broadcast
                         ...
                         #(struct:sca-add
                           #(struct:sca-mul
                             #(struct:sca-mul
                               #(struct:int32_t t5829)
                               #(struct:int32_t t5830))
                             #(struct:int32_t mat_a.extent.0))
                           #(struct:sca-mul
                             #(struct:int32_t t5830)
                             #(struct:int32_t t6653))))>
                      (#(struct:int8_t (bv #x01 8))
                       #(struct:int8_t (bv #x01 8)))
                      #f
                      #f
                      #f
                      int32)>
                   (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8)))
                   #f
                   #f
                   #f
                   int32)] [(! x?$2010) #(struct:cast
                                          ...
                                          #<load-data>
                                          int32
                                          #f)])
 (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
 (! x?$2011)
 (! x?$2012)
 (! x?$2013)
 'int32)
axioms:
  '()
optimized-halide-expr:
  (vec-add
 (vec-add
  (vec-mul
   (vec-cast
    (load
     (buffer column_sums_b 'uint32)
     (ramp
      (sca-add (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16) 16)
      1
      16)
     (aligned 16 0))
    'int32
    16)
   (sca-broadcast (int32_t t5829) 16))
  (vec-add
   (load
    (buffer bias 'int32)
    (ramp (sca-mul output.s0.x.x 16) 1 16)
    (aligned 16 0))
   (sca-broadcast
    (sca-add
     (sca-mul
      (sca-mul (int32_t t5829) (int32_t t5830))
      (int32_t mat_a.extent.0))
     (sca-mul (int32_t t5830) (int32_t t6653)))
    16)))
 (vec-cast
  (load
   (buffer multiplied_no_offsets 'uint32)
   (ramp
    (sca-add (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121)) 4)
    1
    16)
   (aligned 4 0))
  'int32
  16))
optimized-template:
  (vs-mpy-add
 ...
 (union [x?$2010 #(struct:vs-mpy-add
                   ...
                   #<combine:
                    #(struct:vs-mpy-add
                      ...
                      #<load-data>
                      (#(struct:int32_t t5829))
                      #f
                      #f
                      #f
                      int32)
                    #(struct:vs-mpy-add
                      ...
                      #<combine:
                       #<load-data>
                       #(struct:broadcast
                         ...
                         #(struct:sca-add
                           #(struct:sca-mul
                             #(struct:sca-mul
                               #(struct:int32_t t5829)
                               #(struct:int32_t t5830))
                             #(struct:int32_t mat_a.extent.0))
                           #(struct:sca-mul
                             #(struct:int32_t t5830)
                             #(struct:int32_t t6653))))>
                      (#(struct:int8_t (bv #x01 8))
                       #(struct:int8_t (bv #x01 8)))
                      #f
                      #f
                      #f
                      int32)>
                   (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8)))
                   #f
                   #f
                   #f
                   int32)] [(! x?$2010) #(struct:cast
                                          ...
                                          #<load-data>
                                          int32
                                          #f)])
 (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
 (! x?$2011)
 (! x?$2012)
 (! x?$2013)
 'int32)
optimized Halide 0:
  (int32_t
 (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))))
optimized x86 0:
  (int32_t
 (ite* (⊢ (&& x?$2013 (! (&& (! x?$2011) (! x?$2013)))) (ite x?$2011 (bvadd (ite x?$2010 (bvadd (ite c$1205 (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (ite (|| (= 1 (* 2 idx$1204)) (&& c$535 (= 2 (* 2 idx$1204))) (&& c$537 (= 3 (* 2 idx$1204))) (&& c$539 (= 4 (* 2 idx$1204))) (&& c$541 (= 5 (* 2 idx$1204))) (&& c$543 (= 6 (* 2 idx$1204))) (&& c$545 (= 7 (* 2 idx$1204))) (&& c$547 (= 8 (* 2 idx$1204))) (&& c$549 (= 9 (* 2 idx$1204))) (&& c$551 (= 10 (* 2 idx$1204))) (&& c$553 (= 11 (* 2 idx$1204))) (&& c$555 (= 12 (* 2 idx$1204))) (&& c$557 (= 13 (* 2 idx$1204))) (&& c$559 (= 14 (* 2 idx$1204))) (&& c$561 (= 15 (* 2 idx$1204))) (&& c$563 (= 16 (* 2 idx$1204))) (&& c$565 (= 17 (* 2 idx$1204))) (&& c$567 (= 18 (* 2 idx$1204))) (&& c$569 (= 19 (* 2 idx$1204))) (&& c$571 (= 20 (* 2 idx$1204))) (&& c$573 (= 21 (* 2 idx$1204))) (&& c$575 (= 22 (* 2 idx$1204))) (&& c$577 (= 23 (* 2 idx$1204))) (&& c$579 (= 24 (* 2 idx$1204))) (&& c$581 (= 25 (* 2 idx$1204))) (&& c$583 (= 26 (* 2 idx$1204))) (&& c$585 (= 27 (* 2 idx$1204))) (&& c$587 (= 28 (* 2 idx$1204))) (&& c$589 (= 29 (* 2 idx$1204))) (&& c$591 (= 30 (* 2 idx$1204))) (&& c$593 (= 31 (* 2 idx$1204))) (&& c$595 (= 32 (* 2 idx$1204))) (&& c$597 (= 33 (* 2 idx$1204))) (&& c$599 (= 34 (* 2 idx$1204))) (&& c$601 (= 35 (* 2 idx$1204))) (&& c$603 (= 36 (* 2 idx$1204))) (&& c$605 (= 37 (* 2 idx$1204))) (&& c$607 (= 38 (* 2 idx$1204))) (&& c$609 (= 39 (* 2 idx$1204))) (&& c$611 (= 40 (* 2 idx$1204))) (&& c$613 (= 41 (* 2 idx$1204))) (&& c$615 (= 42 (* 2 idx$1204))) (&& c$617 (= 43 (* 2 idx$1204))) (&& c$619 (= 44 (* 2 idx$1204))) (&& c$621 (= 45 (* 2 idx$1204))) (&& c$623 (= 46 (* 2 idx$1204))) (&& c$625 (= 47 (* 2 idx$1204))) (&& c$627 (= 48 (* 2 idx$1204))) (&& c$629 (= 49 (* 2 idx$1204))) (&& c$631 (= 50 (* 2 idx$1204))) (&& c$633 (= 51 (* 2 idx$1204))) (&& c$635 (= 52 (* 2 idx$1204))) (&& c$637 (= 53 (* 2 idx$1204))) (&& c$639 (= 54 (* 2 idx$1204))) (&& c$641 (= 55 (* 2 idx$1204))) (&& c$643 (= 56 (* 2 idx$1204))) (&& c$645 (= 57 (* 2 idx$1204))) (&& c$647 (= 58 (* 2 idx$1204))) (&& c$649 (= 59 (* 2 idx$1204))) (&& c$651 (= 60 (* 2 idx$1204))) (&& c$653 (= 61 (* 2 idx$1204))) (&& c$655 (= 62 (* 2 idx$1204))) (&& c$657 (= 63 (* 2 idx$1204)))) (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653))) (ite (|| (= 1 (+ 1 (* 2 idx$1204))) (&& c$535 (= 2 (+ 1 (* 2 idx$1204)))) (&& c$537 (= 3 (+ 1 (* 2 idx$1204)))) (&& c$539 (= 4 (+ 1 (* 2 idx$1204)))) (&& c$541 (= 5 (+ 1 (* 2 idx$1204)))) (&& c$543 (= 6 (+ 1 (* 2 idx$1204)))) (&& c$545 (= 7 (+ 1 (* 2 idx$1204)))) (&& c$547 (= 8 (+ 1 (* 2 idx$1204)))) (&& c$549 (= 9 (+ 1 (* 2 idx$1204)))) (&& c$551 (= 10 (+ 1 (* 2 idx$1204)))) (&& c$553 (= 11 (+ 1 (* 2 idx$1204)))) (&& c$555 (= 12 (+ 1 (* 2 idx$1204)))) (&& c$557 (= 13 (+ 1 (* 2 idx$1204)))) (&& c$559 (= 14 (+ 1 (* 2 idx$1204)))) (&& c$561 (= 15 (+ 1 (* 2 idx$1204)))) (&& c$563 (= 16 (+ 1 (* 2 idx$1204)))) (&& c$565 (= 17 (+ 1 (* 2 idx$1204)))) (&& c$567 (= 18 (+ 1 (* 2 idx$1204)))) (&& c$569 (= 19 (+ 1 (* 2 idx$1204)))) (&& c$571 (= 20 (+ 1 (* 2 idx$1204)))) (&& c$573 (= 21 (+ 1 (* 2 idx$1204)))) (&& c$575 (= 22 (+ 1 (* 2 idx$1204)))) (&& c$577 (= 23 (+ 1 (* 2 idx$1204)))) (&& c$579 (= 24 (+ 1 (* 2 idx$1204)))) (&& c$581 (= 25 (+ 1 (* 2 idx$1204)))) (&& c$583 (= 26 (+ 1 (* 2 idx$1204)))) (&& c$585 (= 27 (+ 1 (* 2 idx$1204)))) (&& c$587 (= 28 (+ 1 (* 2 idx$1204)))) (&& c$589 (= 29 (+ 1 (* 2 idx$1204)))) (&& c$591 (= 30 (+ 1 (* 2 idx$1204)))) (&& c$593 (= 31 (+ 1 (* 2 idx$1204)))) (&& c$595 (= 32 (+ 1 (* 2 idx$1204)))) (&& c$597 (= 33 (+ 1 (* 2 idx$1204)))) (&& c$599 (= 34 (+ 1 (* 2 idx$1204)))) (&& c$601 (= 35 (+ 1 (* 2 idx$1204)))) (&& c$603 (= 36 (+ 1 (* 2 idx$1204)))) (&& c$605 (= 37 (+ 1 (* 2 idx$1204)))) (&& c$607 (= 38 (+ 1 (* 2 idx$1204)))) (&& c$609 (= 39 (+ 1 (* 2 idx$1204)))) (&& c$611 (= 40 (+ 1 (* 2 idx$1204)))) (&& c$613 (= 41 (+ 1 (* 2 idx$1204)))) (&& c$615 (= 42 (+ 1 (* 2 idx$1204)))) (&& c$617 (= 43 (+ 1 (* 2 idx$1204)))) (&& c$619 (= 44 (+ 1 (* 2 idx$1204)))) (&& c$621 (= 45 (+ 1 (* 2 idx$1204)))) (&& c$623 (= 46 (+ 1 (* 2 idx$1204)))) (&& c$625 (= 47 (+ 1 (* 2 idx$1204)))) (&& c$627 (= 48 (+ 1 (* 2 idx$1204)))) (&& c$629 (= 49 (+ 1 (* 2 idx$1204)))) (&& c$631 (= 50 (+ 1 (* 2 idx$1204)))) (&& c$633 (= 51 (+ 1 (* 2 idx$1204)))) (&& c$635 (= 52 (+ 1 (* 2 idx$1204)))) (&& c$637 (= 53 (+ 1 (* 2 idx$1204)))) (&& c$639 (= 54 (+ 1 (* 2 idx$1204)))) (&& c$641 (= 55 (+ 1 (* 2 idx$1204)))) (&& c$643 (= 56 (+ 1 (* 2 idx$1204)))) (&& c$645 (= 57 (+ 1 (* 2 idx$1204)))) (&& c$647 (= 58 (+ 1 (* 2 idx$1204)))) (&& c$649 (= 59 (+ 1 (* 2 idx$1204)))) (&& c$651 (= 60 (+ 1 (* 2 idx$1204)))) (&& c$653 (= 61 (+ 1 (* 2 idx$1204)))) (&& c$655 (= 62 (+ 1 (* 2 idx$1204)))) (&& c$657 (= 63 (+ 1 (* 2 idx$1204))))) (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653))))) (ite c$1207 (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (ite (|| (= 1 (* 2 idx$1206)) (&& c$535 (= 2 (* 2 idx$1206))) (&& c$537 (= 3 (* 2 idx$1206))) (&& c$539 (= 4 (* 2 idx$1206))) (&& c$541 (= 5 (* 2 idx$1206))) (&& c$543 (= 6 (* 2 idx$1206))) (&& c$545 (= 7 (* 2 idx$1206))) (&& c$547 (= 8 (* 2 idx$1206))) (&& c$549 (= 9 (* 2 idx$1206))) (&& c$551 (= 10 (* 2 idx$1206))) (&& c$553 (= 11 (* 2 idx$1206))) (&& c$555 (= 12 (* 2 idx$1206))) (&& c$557 (= 13 (* 2 idx$1206))) (&& c$559 (= 14 (* 2 idx$1206))) (&& c$561 (= 15 (* 2 idx$1206))) (&& c$563 (= 16 (* 2 idx$1206))) (&& c$565 (= 17 (* 2 idx$1206))) (&& c$567 (= 18 (* 2 idx$1206))) (&& c$569 (= 19 (* 2 idx$1206))) (&& c$571 (= 20 (* 2 idx$1206))) (&& c$573 (= 21 (* 2 idx$1206))) (&& c$575 (= 22 (* 2 idx$1206))) (&& c$577 (= 23 (* 2 idx$1206))) (&& c$579 (= 24 (* 2 idx$1206))) (&& c$581 (= 25 (* 2 idx$1206))) (&& c$583 (= 26 (* 2 idx$1206))) (&& c$585 (= 27 (* 2 idx$1206))) (&& c$587 (= 28 (* 2 idx$1206))) (&& c$589 (= 29 (* 2 idx$1206))) (&& c$591 (= 30 (* 2 idx$1206))) (&& c$593 (= 31 (* 2 idx$1206))) (&& c$595 (= 32 (* 2 idx$1206))) (&& c$597 (= 33 (* 2 idx$1206))) (&& c$599 (= 34 (* 2 idx$1206))) (&& c$601 (= 35 (* 2 idx$1206))) (&& c$603 (= 36 (* 2 idx$1206))) (&& c$605 (= 37 (* 2 idx$1206))) (&& c$607 (= 38 (* 2 idx$1206))) (&& c$609 (= 39 (* 2 idx$1206))) (&& c$611 (= 40 (* 2 idx$1206))) (&& c$613 (= 41 (* 2 idx$1206))) (&& c$615 (= 42 (* 2 idx$1206))) (&& c$617 (= 43 (* 2 idx$1206))) (&& c$619 (= 44 (* 2 idx$1206))) (&& c$621 (= 45 (* 2 idx$1206))) (&& c$623 (= 46 (* 2 idx$1206))) (&& c$625 (= 47 (* 2 idx$1206))) (&& c$627 (= 48 (* 2 idx$1206))) (&& c$629 (= 49 (* 2 idx$1206))) (&& c$631 (= 50 (* 2 idx$1206))) (&& c$633 (= 51 (* 2 idx$1206))) (&& c$635 (= 52 (* 2 idx$1206))) (&& c$637 (= 53 (* 2 idx$1206))) (&& c$639 (= 54 (* 2 idx$1206))) (&& c$641 (= 55 (* 2 idx$1206))) (&& c$643 (= 56 (* 2 idx$1206))) (&& c$645 (= 57 (* 2 idx$1206))) (&& c$647 (= 58 (* 2 idx$1206))) (&& c$649 (= 59 (* 2 idx$1206))) (&& c$651 (= 60 (* 2 idx$1206))) (&& c$653 (= 61 (* 2 idx$1206))) (&& c$655 (= 62 (* 2 idx$1206))) (&& c$657 (= 63 (* 2 idx$1206)))) (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653))) (ite (|| (= 1 (+ 1 (* 2 idx$1206))) (&& c$535 (= 2 (+ 1 (* 2 idx$1206)))) (&& c$537 (= 3 (+ 1 (* 2 idx$1206)))) (&& c$539 (= 4 (+ 1 (* 2 idx$1206)))) (&& c$541 (= 5 (+ 1 (* 2 idx$1206)))) (&& c$543 (= 6 (+ 1 (* 2 idx$1206)))) (&& c$545 (= 7 (+ 1 (* 2 idx$1206)))) (&& c$547 (= 8 (+ 1 (* 2 idx$1206)))) (&& c$549 (= 9 (+ 1 (* 2 idx$1206)))) (&& c$551 (= 10 (+ 1 (* 2 idx$1206)))) (&& c$553 (= 11 (+ 1 (* 2 idx$1206)))) (&& c$555 (= 12 (+ 1 (* 2 idx$1206)))) (&& c$557 (= 13 (+ 1 (* 2 idx$1206)))) (&& c$559 (= 14 (+ 1 (* 2 idx$1206)))) (&& c$561 (= 15 (+ 1 (* 2 idx$1206)))) (&& c$563 (= 16 (+ 1 (* 2 idx$1206)))) (&& c$565 (= 17 (+ 1 (* 2 idx$1206)))) (&& c$567 (= 18 (+ 1 (* 2 idx$1206)))) (&& c$569 (= 19 (+ 1 (* 2 idx$1206)))) (&& c$571 (= 20 (+ 1 (* 2 idx$1206)))) (&& c$573 (= 21 (+ 1 (* 2 idx$1206)))) (&& c$575 (= 22 (+ 1 (* 2 idx$1206)))) (&& c$577 (= 23 (+ 1 (* 2 idx$1206)))) (&& c$579 (= 24 (+ 1 (* 2 idx$1206)))) (&& c$581 (= 25 (+ 1 (* 2 idx$1206)))) (&& c$583 (= 26 (+ 1 (* 2 idx$1206)))) (&& c$585 (= 27 (+ 1 (* 2 idx$1206)))) (&& c$587 (= 28 (+ 1 (* 2 idx$1206)))) (&& c$589 (= 29 (+ 1 (* 2 idx$1206)))) (&& c$591 (= 30 (+ 1 (* 2 idx$1206)))) (&& c$593 (= 31 (+ 1 (* 2 idx$1206)))) (&& c$595 (= 32 (+ 1 (* 2 idx$1206)))) (&& c$597 (= 33 (+ 1 (* 2 idx$1206)))) (&& c$599 (= 34 (+ 1 (* 2 idx$1206)))) (&& c$601 (= 35 (+ 1 (* 2 idx$1206)))) (&& c$603 (= 36 (+ 1 (* 2 idx$1206)))) (&& c$605 (= 37 (+ 1 (* 2 idx$1206)))) (&& c$607 (= 38 (+ 1 (* 2 idx$1206)))) (&& c$609 (= 39 (+ 1 (* 2 idx$1206)))) (&& c$611 (= 40 (+ 1 (* 2 idx$1206)))) (&& c$613 (= 41 (+ 1 (* 2 idx$1206)))) (&& c$615 (= 42 (+ 1 (* 2 idx$1206)))) (&& c$617 (= 43 (+ 1 (* 2 idx$1206)))) (&& c$619 (= 44 (+ 1 (* 2 idx$1206)))) (&& c$621 (= 45 (+ 1 (* 2 idx$1206)))) (&& c$623 (= 46 (+ 1 (* 2 idx$1206)))) (&& c$625 (= 47 (+ 1 (* 2 idx$1206)))) (&& c$627 (= 48 (+ 1 (* 2 idx$1206)))) (&& c$629 (= 49 (+ 1 (* 2 idx$1206)))) (&& c$631 (= 50 (+ 1 (* 2 idx$1206)))) (&& c$633 (= 51 (+ 1 (* 2 idx$1206)))) (&& c$635 (= 52 (+ 1 (* 2 idx$1206)))) (&& c$637 (= 53 (+ 1 (* 2 idx$1206)))) (&& c$639 (= 54 (+ 1 (* 2 idx$1206)))) (&& c$641 (= 55 (+ 1 (* 2 idx$1206)))) (&& c$643 (= 56 (+ 1 (* 2 idx$1206)))) (&& c$645 (= 57 (+ 1 (* 2 idx$1206)))) (&& c$647 (= 58 (+ 1 (* 2 idx$1206)))) (&& c$649 (= 59 (+ 1 (* 2 idx$1206)))) (&& c$651 (= 60 (+ 1 (* 2 idx$1206)))) (&& c$653 (= 61 (+ 1 (* 2 idx$1206)))) (&& c$655 (= 62 (+ 1 (* 2 idx$1206)))) (&& c$657 (= 63 (+ 1 (* 2 idx$1206))))) (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (ite x?$2011 (bvadd (ite x?$2010 (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (ite x?$2012 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2012 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite x?$2010 (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2012 (bv #x00000000 32) (bv #x00000001 32))))) (ite x?$2010 (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2012 (bv #x00000000 32) (bv #x00000001 32)))))))) (bvadd (ite x?$2011 (bvadd (ite x?$2010 (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (ite x?$2012 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2012 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite x?$2010 (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2012 (bv #x00000000 32) (bv #x00000001 32))))) (ite x?$2010 (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2012 (bv #x00000000 32) (bv #x00000001 32))))))) (ite (bvsle (bvadd (bv #x80000000 32) (bvneg (ite (bvsle (ite x?$2011 (bvadd (ite x?$2010 (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (ite x?$2012 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2012 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite x?$2010 (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2012 (bv #x00000000 32) (bv #x00000001 32))))) (ite x?$2010 (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2012 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)) (ite x?$2011 (bvadd (ite x?$2010 (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (ite x?$2012 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2012 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite x?$2010 (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2012 (bv #x00000000 32) (bv #x00000001 32))))) (ite x?$2010 (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2012 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)))) (ite (bvsle (ite x?$2010 (bvadd (ite c$1205 (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (ite (|| (= 1 (* 2 idx$1204)) (&& c$535 (= 2 (* 2 idx$1204))) (&& c$537 (= 3 (* 2 idx$1204))) (&& c$539 (= 4 (* 2 idx$1204))) (&& c$541 (= 5 (* 2 idx$1204))) (&& c$543 (= 6 (* 2 idx$1204))) (&& c$545 (= 7 (* 2 idx$1204))) (&& c$547 (= 8 (* 2 idx$1204))) (&& c$549 (= 9 (* 2 idx$1204))) (&& c$551 (= 10 (* 2 idx$1204))) (&& c$553 (= 11 (* 2 idx$1204))) (&& c$555 (= 12 (* 2 idx$1204))) (&& c$557 (= 13 (* 2 idx$1204))) (&& c$559 (= 14 (* 2 idx$1204))) (&& c$561 (= 15 (* 2 idx$1204))) (&& c$563 (= 16 (* 2 idx$1204))) (&& c$565 (= 17 (* 2 idx$1204))) (&& c$567 (= 18 (* 2 idx$1204))) (&& c$569 (= 19 (* 2 idx$1204))) (&& c$571 (= 20 (* 2 idx$1204))) (&& c$573 (= 21 (* 2 idx$1204))) (&& c$575 (= 22 (* 2 idx$1204))) (&& c$577 (= 23 (* 2 idx$1204))) (&& c$579 (= 24 (* 2 idx$1204))) (&& c$581 (= 25 (* 2 idx$1204))) (&& c$583 (= 26 (* 2 idx$1204))) (&& c$585 (= 27 (* 2 idx$1204))) (&& c$587 (= 28 (* 2 idx$1204))) (&& c$589 (= 29 (* 2 idx$1204))) (&& c$591 (= 30 (* 2 idx$1204))) (&& c$593 (= 31 (* 2 idx$1204))) (&& c$595 (= 32 (* 2 idx$1204))) (&& c$597 (= 33 (* 2 idx$1204))) (&& c$599 (= 34 (* 2 idx$1204))) (&& c$601 (= 35 (* 2 idx$1204))) (&& c$603 (= 36 (* 2 idx$1204))) (&& c$605 (= 37 (* 2 idx$1204))) (&& c$607 (= 38 (* 2 idx$1204))) (&& c$609 (= 39 (* 2 idx$1204))) (&& c$611 (= 40 (* 2 idx$1204))) (&& c$613 (= 41 (* 2 idx$1204))) (&& c$615 (= 42 (* 2 idx$1204))) (&& c$617 (= 43 (* 2 idx$1204))) (&& c$619 (= 44 (* 2 idx$1204))) (&& c$621 (= 45 (* 2 idx$1204))) (&& c$623 (= 46 (* 2 idx$1204))) (&& c$625 (= 47 (* 2 idx$1204))) (&& c$627 (= 48 (* 2 idx$1204))) (&& c$629 (= 49 (* 2 idx$1204))) (&& c$631 (= 50 (* 2 idx$1204))) (&& c$633 (= 51 (* 2 idx$1204))) (&& c$635 (= 52 (* 2 idx$1204))) (&& c$637 (= 53 (* 2 idx$1204))) (&& c$639 (= 54 (* 2 idx$1204))) (&& c$641 (= 55 (* 2 idx$1204))) (&& c$643 (= 56 (* 2 idx$1204))) (&& c$645 (= 57 (* 2 idx$1204))) (&& c$647 (= 58 (* 2 idx$1204))) (&& c$649 (= 59 (* 2 idx$1204))) (&& c$651 (= 60 (* 2 idx$1204))) (&& c$653 (= 61 (* 2 idx$1204))) (&& c$655 (= 62 (* 2 idx$1204))) (&& c$657 (= 63 (* 2 idx$1204)))) (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653))) (ite (|| (= 1 (+ 1 (* 2 idx$1204))) (&& c$535 (= 2 (+ 1 (* 2 idx$1204)))) (&& c$537 (= 3 (+ 1 (* 2 idx$1204)))) (&& c$539 (= 4 (+ 1 (* 2 idx$1204)))) (&& c$541 (= 5 (+ 1 (* 2 idx$1204)))) (&& c$543 (= 6 (+ 1 (* 2 idx$1204)))) (&& c$545 (= 7 (+ 1 (* 2 idx$1204)))) (&& c$547 (= 8 (+ 1 (* 2 idx$1204)))) (&& c$549 (= 9 (+ 1 (* 2 idx$1204)))) (&& c$551 (= 10 (+ 1 (* 2 idx$1204)))) (&& c$553 (= 11 (+ 1 (* 2 idx$1204)))) (&& c$555 (= 12 (+ 1 (* 2 idx$1204)))) (&& c$557 (= 13 (+ 1 (* 2 idx$1204)))) (&& c$559 (= 14 (+ 1 (* 2 idx$1204)))) (&& c$561 (= 15 (+ 1 (* 2 idx$1204)))) (&& c$563 (= 16 (+ 1 (* 2 idx$1204)))) (&& c$565 (= 17 (+ 1 (* 2 idx$1204)))) (&& c$567 (= 18 (+ 1 (* 2 idx$1204)))) (&& c$569 (= 19 (+ 1 (* 2 idx$1204)))) (&& c$571 (= 20 (+ 1 (* 2 idx$1204)))) (&& c$573 (= 21 (+ 1 (* 2 idx$1204)))) (&& c$575 (= 22 (+ 1 (* 2 idx$1204)))) (&& c$577 (= 23 (+ 1 (* 2 idx$1204)))) (&& c$579 (= 24 (+ 1 (* 2 idx$1204)))) (&& c$581 (= 25 (+ 1 (* 2 idx$1204)))) (&& c$583 (= 26 (+ 1 (* 2 idx$1204)))) (&& c$585 (= 27 (+ 1 (* 2 idx$1204)))) (&& c$587 (= 28 (+ 1 (* 2 idx$1204)))) (&& c$589 (= 29 (+ 1 (* 2 idx$1204)))) (&& c$591 (= 30 (+ 1 (* 2 idx$1204)))) (&& c$593 (= 31 (+ 1 (* 2 idx$1204)))) (&& c$595 (= 32 (+ 1 (* 2 idx$1204)))) (&& c$597 (= 33 (+ 1 (* 2 idx$1204)))) (&& c$599 (= 34 (+ 1 (* 2 idx$1204)))) (&& c$601 (= 35 (+ 1 (* 2 idx$1204)))) (&& c$603 (= 36 (+ 1 (* 2 idx$1204)))) (&& c$605 (= 37 (+ 1 (* 2 idx$1204)))) (&& c$607 (= 38 (+ 1 (* 2 idx$1204)))) (&& c$609 (= 39 (+ 1 (* 2 idx$1204)))) (&& c$611 (= 40 (+ 1 (* 2 idx$1204)))) (&& c$613 (= 41 (+ 1 (* 2 idx$1204)))) (&& c$615 (= 42 (+ 1 (* 2 idx$1204)))) (&& c$617 (= 43 (+ 1 (* 2 idx$1204)))) (&& c$619 (= 44 (+ 1 (* 2 idx$1204)))) (&& c$621 (= 45 (+ 1 (* 2 idx$1204)))) (&& c$623 (= 46 (+ 1 (* 2 idx$1204)))) (&& c$625 (= 47 (+ 1 (* 2 idx$1204)))) (&& c$627 (= 48 (+ 1 (* 2 idx$1204)))) (&& c$629 (= 49 (+ 1 (* 2 idx$1204)))) (&& c$631 (= 50 (+ 1 (* 2 idx$1204)))) (&& c$633 (= 51 (+ 1 (* 2 idx$1204)))) (&& c$635 (= 52 (+ 1 (* 2 idx$1204)))) (&& c$637 (= 53 (+ 1 (* 2 idx$1204)))) (&& c$639 (= 54 (+ 1 (* 2 idx$1204)))) (&& c$641 (= 55 (+ 1 (* 2 idx$1204)))) (&& c$643 (= 56 (+ 1 (* 2 idx$1204)))) (&& c$645 (= 57 (+ 1 (* 2 idx$1204)))) (&& c$647 (= 58 (+ 1 (* 2 idx$1204)))) (&& c$649 (= 59 (+ 1 (* 2 idx$1204)))) (&& c$651 (= 60 (+ 1 (* 2 idx$1204)))) (&& c$653 (= 61 (+ 1 (* 2 idx$1204)))) (&& c$655 (= 62 (+ 1 (* 2 idx$1204)))) (&& c$657 (= 63 (+ 1 (* 2 idx$1204))))) (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653))))) (ite c$1207 (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (ite (|| (= 1 (* 2 idx$1206)) (&& c$535 (= 2 (* 2 idx$1206))) (&& c$537 (= 3 (* 2 idx$1206))) (&& c$539 (= 4 (* 2 idx$1206))) (&& c$541 (= 5 (* 2 idx$1206))) (&& c$543 (= 6 (* 2 idx$1206))) (&& c$545 (= 7 (* 2 idx$1206))) (&& c$547 (= 8 (* 2 idx$1206))) (&& c$549 (= 9 (* 2 idx$1206))) (&& c$551 (= 10 (* 2 idx$1206))) (&& c$553 (= 11 (* 2 idx$1206))) (&& c$555 (= 12 (* 2 idx$1206))) (&& c$557 (= 13 (* 2 idx$1206))) (&& c$559 (= 14 (* 2 idx$1206))) (&& c$561 (= 15 (* 2 idx$1206))) (&& c$563 (= 16 (* 2 idx$1206))) (&& c$565 (= 17 (* 2 idx$1206))) (&& c$567 (= 18 (* 2 idx$1206))) (&& c$569 (= 19 (* 2 idx$1206))) (&& c$571 (= 20 (* 2 idx$1206))) (&& c$573 (= 21 (* 2 idx$1206))) (&& c$575 (= 22 (* 2 idx$1206))) (&& c$577 (= 23 (* 2 idx$1206))) (&& c$579 (= 24 (* 2 idx$1206))) (&& c$581 (= 25 (* 2 idx$1206))) (&& c$583 (= 26 (* 2 idx$1206))) (&& c$585 (= 27 (* 2 idx$1206))) (&& c$587 (= 28 (* 2 idx$1206))) (&& c$589 (= 29 (* 2 idx$1206))) (&& c$591 (= 30 (* 2 idx$1206))) (&& c$593 (= 31 (* 2 idx$1206))) (&& c$595 (= 32 (* 2 idx$1206))) (&& c$597 (= 33 (* 2 idx$1206))) (&& c$599 (= 34 (* 2 idx$1206))) (&& c$601 (= 35 (* 2 idx$1206))) (&& c$603 (= 36 (* 2 idx$1206))) (&& c$605 (= 37 (* 2 idx$1206))) (&& c$607 (= 38 (* 2 idx$1206))) (&& c$609 (= 39 (* 2 idx$1206))) (&& c$611 (= 40 (* 2 idx$1206))) (&& c$613 (= 41 (* 2 idx$1206))) (&& c$615 (= 42 (* 2 idx$1206))) (&& c$617 (= 43 (* 2 idx$1206))) (&& c$619 (= 44 (* 2 idx$1206))) (&& c$621 (= 45 (* 2 idx$1206))) (&& c$623 (= 46 (* 2 idx$1206))) (&& c$625 (= 47 (* 2 idx$1206))) (&& c$627 (= 48 (* 2 idx$1206))) (&& c$629 (= 49 (* 2 idx$1206))) (&& c$631 (= 50 (* 2 idx$1206))) (&& c$633 (= 51 (* 2 idx$1206))) (&& c$635 (= 52 (* 2 idx$1206))) (&& c$637 (= 53 (* 2 idx$1206))) (&& c$639 (= 54 (* 2 idx$1206))) (&& c$641 (= 55 (* 2 idx$1206))) (&& c$643 (= 56 (* 2 idx$1206))) (&& c$645 (= 57 (* 2 idx$1206))) (&& c$647 (= 58 (* 2 idx$1206))) (&& c$649 (= 59 (* 2 idx$1206))) (&& c$651 (= 60 (* 2 idx$1206))) (&& c$653 (= 61 (* 2 idx$1206))) (&& c$655 (= 62 (* 2 idx$1206))) (&& c$657 (= 63 (* 2 idx$1206)))) (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653))) (ite (|| (= 1 (+ 1 (* 2 idx$1206))) (&& c$535 (= 2 (+ 1 (* 2 idx$1206)))) (&& c$537 (= 3 (+ 1 (* 2 idx$1206)))) (&& c$539 (= 4 (+ 1 (* 2 idx$1206)))) (&& c$541 (= 5 (+ 1 (* 2 idx$1206)))) (&& c$543 (= 6 (+ 1 (* 2 idx$1206)))) (&& c$545 (= 7 (+ 1 (* 2 idx$1206)))) (&& c$547 (= 8 (+ 1 (* 2 idx$1206)))) (&& c$549 (= 9 (+ 1 (* 2 idx$1206)))) (&& c$551 (= 10 (+ 1 (* 2 idx$1206)))) (&& c$553 (= 11 (+ 1 (* 2 idx$1206)))) (&& c$555 (= 12 (+ 1 (* 2 idx$1206)))) (&& c$557 (= 13 (+ 1 (* 2 idx$1206)))) (&& c$559 (= 14 (+ 1 (* 2 idx$1206)))) (&& c$561 (= 15 (+ 1 (* 2 idx$1206)))) (&& c$563 (= 16 (+ 1 (* 2 idx$1206)))) (&& c$565 (= 17 (+ 1 (* 2 idx$1206)))) (&& c$567 (= 18 (+ 1 (* 2 idx$1206)))) (&& c$569 (= 19 (+ 1 (* 2 idx$1206)))) (&& c$571 (= 20 (+ 1 (* 2 idx$1206)))) (&& c$573 (= 21 (+ 1 (* 2 idx$1206)))) (&& c$575 (= 22 (+ 1 (* 2 idx$1206)))) (&& c$577 (= 23 (+ 1 (* 2 idx$1206)))) (&& c$579 (= 24 (+ 1 (* 2 idx$1206)))) (&& c$581 (= 25 (+ 1 (* 2 idx$1206)))) (&& c$583 (= 26 (+ 1 (* 2 idx$1206)))) (&& c$585 (= 27 (+ 1 (* 2 idx$1206)))) (&& c$587 (= 28 (+ 1 (* 2 idx$1206)))) (&& c$589 (= 29 (+ 1 (* 2 idx$1206)))) (&& c$591 (= 30 (+ 1 (* 2 idx$1206)))) (&& c$593 (= 31 (+ 1 (* 2 idx$1206)))) (&& c$595 (= 32 (+ 1 (* 2 idx$1206)))) (&& c$597 (= 33 (+ 1 (* 2 idx$1206)))) (&& c$599 (= 34 (+ 1 (* 2 idx$1206)))) (&& c$601 (= 35 (+ 1 (* 2 idx$1206)))) (&& c$603 (= 36 (+ 1 (* 2 idx$1206)))) (&& c$605 (= 37 (+ 1 (* 2 idx$1206)))) (&& c$607 (= 38 (+ 1 (* 2 idx$1206)))) (&& c$609 (= 39 (+ 1 (* 2 idx$1206)))) (&& c$611 (= 40 (+ 1 (* 2 idx$1206)))) (&& c$613 (= 41 (+ 1 (* 2 idx$1206)))) (&& c$615 (= 42 (+ 1 (* 2 idx$1206)))) (&& c$617 (= 43 (+ 1 (* 2 idx$1206)))) (&& c$619 (= 44 (+ 1 (* 2 idx$1206)))) (&& c$621 (= 45 (+ 1 (* 2 idx$1206)))) (&& c$623 (= 46 (+ 1 (* 2 idx$1206)))) (&& c$625 (= 47 (+ 1 (* 2 idx$1206)))) (&& c$627 (= 48 (+ 1 (* 2 idx$1206)))) (&& c$629 (= 49 (+ 1 (* 2 idx$1206)))) (&& c$631 (= 50 (+ 1 (* 2 idx$1206)))) (&& c$633 (= 51 (+ 1 (* 2 idx$1206)))) (&& c$635 (= 52 (+ 1 (* 2 idx$1206)))) (&& c$637 (= 53 (+ 1 (* 2 idx$1206)))) (&& c$639 (= 54 (+ 1 (* 2 idx$1206)))) (&& c$641 (= 55 (+ 1 (* 2 idx$1206)))) (&& c$643 (= 56 (+ 1 (* 2 idx$1206)))) (&& c$645 (= 57 (+ 1 (* 2 idx$1206)))) (&& c$647 (= 58 (+ 1 (* 2 idx$1206)))) (&& c$649 (= 59 (+ 1 (* 2 idx$1206)))) (&& c$651 (= 60 (+ 1 (* 2 idx$1206)))) (&& c$653 (= 61 (+ 1 (* 2 idx$1206)))) (&& c$655 (= 62 (+ 1 (* 2 idx$1206)))) (&& c$657 (= 63 (+ 1 (* 2 idx$1206))))) (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$2011 (bvadd (ite x?$2010 (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (ite x?$2012 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2012 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite x?$2010 (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2012 (bv #x00000000 32) (bv #x00000001 32))))) (ite x?$2010 (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2012 (bv #x00000000 32) (bv #x00000001 32)))))))) (ite x?$2011 (bvadd (ite x?$2010 (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (ite x?$2012 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2012 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite x?$2010 (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2012 (bv #x00000000 32) (bv #x00000001 32))))) (ite x?$2010 (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2012 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32))))) (ite x?$2010 (bvadd (ite c$1205 (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (ite (|| (= 1 (* 2 idx$1204)) (&& c$535 (= 2 (* 2 idx$1204))) (&& c$537 (= 3 (* 2 idx$1204))) (&& c$539 (= 4 (* 2 idx$1204))) (&& c$541 (= 5 (* 2 idx$1204))) (&& c$543 (= 6 (* 2 idx$1204))) (&& c$545 (= 7 (* 2 idx$1204))) (&& c$547 (= 8 (* 2 idx$1204))) (&& c$549 (= 9 (* 2 idx$1204))) (&& c$551 (= 10 (* 2 idx$1204))) (&& c$553 (= 11 (* 2 idx$1204))) (&& c$555 (= 12 (* 2 idx$1204))) (&& c$557 (= 13 (* 2 idx$1204))) (&& c$559 (= 14 (* 2 idx$1204))) (&& c$561 (= 15 (* 2 idx$1204))) (&& c$563 (= 16 (* 2 idx$1204))) (&& c$565 (= 17 (* 2 idx$1204))) (&& c$567 (= 18 (* 2 idx$1204))) (&& c$569 (= 19 (* 2 idx$1204))) (&& c$571 (= 20 (* 2 idx$1204))) (&& c$573 (= 21 (* 2 idx$1204))) (&& c$575 (= 22 (* 2 idx$1204))) (&& c$577 (= 23 (* 2 idx$1204))) (&& c$579 (= 24 (* 2 idx$1204))) (&& c$581 (= 25 (* 2 idx$1204))) (&& c$583 (= 26 (* 2 idx$1204))) (&& c$585 (= 27 (* 2 idx$1204))) (&& c$587 (= 28 (* 2 idx$1204))) (&& c$589 (= 29 (* 2 idx$1204))) (&& c$591 (= 30 (* 2 idx$1204))) (&& c$593 (= 31 (* 2 idx$1204))) (&& c$595 (= 32 (* 2 idx$1204))) (&& c$597 (= 33 (* 2 idx$1204))) (&& c$599 (= 34 (* 2 idx$1204))) (&& c$601 (= 35 (* 2 idx$1204))) (&& c$603 (= 36 (* 2 idx$1204))) (&& c$605 (= 37 (* 2 idx$1204))) (&& c$607 (= 38 (* 2 idx$1204))) (&& c$609 (= 39 (* 2 idx$1204))) (&& c$611 (= 40 (* 2 idx$1204))) (&& c$613 (= 41 (* 2 idx$1204))) (&& c$615 (= 42 (* 2 idx$1204))) (&& c$617 (= 43 (* 2 idx$1204))) (&& c$619 (= 44 (* 2 idx$1204))) (&& c$621 (= 45 (* 2 idx$1204))) (&& c$623 (= 46 (* 2 idx$1204))) (&& c$625 (= 47 (* 2 idx$1204))) (&& c$627 (= 48 (* 2 idx$1204))) (&& c$629 (= 49 (* 2 idx$1204))) (&& c$631 (= 50 (* 2 idx$1204))) (&& c$633 (= 51 (* 2 idx$1204))) (&& c$635 (= 52 (* 2 idx$1204))) (&& c$637 (= 53 (* 2 idx$1204))) (&& c$639 (= 54 (* 2 idx$1204))) (&& c$641 (= 55 (* 2 idx$1204))) (&& c$643 (= 56 (* 2 idx$1204))) (&& c$645 (= 57 (* 2 idx$1204))) (&& c$647 (= 58 (* 2 idx$1204))) (&& c$649 (= 59 (* 2 idx$1204))) (&& c$651 (= 60 (* 2 idx$1204))) (&& c$653 (= 61 (* 2 idx$1204))) (&& c$655 (= 62 (* 2 idx$1204))) (&& c$657 (= 63 (* 2 idx$1204)))) (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653))) (ite (|| (= 1 (+ 1 (* 2 idx$1204))) (&& c$535 (= 2 (+ 1 (* 2 idx$1204)))) (&& c$537 (= 3 (+ 1 (* 2 idx$1204)))) (&& c$539 (= 4 (+ 1 (* 2 idx$1204)))) (&& c$541 (= 5 (+ 1 (* 2 idx$1204)))) (&& c$543 (= 6 (+ 1 (* 2 idx$1204)))) (&& c$545 (= 7 (+ 1 (* 2 idx$1204)))) (&& c$547 (= 8 (+ 1 (* 2 idx$1204)))) (&& c$549 (= 9 (+ 1 (* 2 idx$1204)))) (&& c$551 (= 10 (+ 1 (* 2 idx$1204)))) (&& c$553 (= 11 (+ 1 (* 2 idx$1204)))) (&& c$555 (= 12 (+ 1 (* 2 idx$1204)))) (&& c$557 (= 13 (+ 1 (* 2 idx$1204)))) (&& c$559 (= 14 (+ 1 (* 2 idx$1204)))) (&& c$561 (= 15 (+ 1 (* 2 idx$1204)))) (&& c$563 (= 16 (+ 1 (* 2 idx$1204)))) (&& c$565 (= 17 (+ 1 (* 2 idx$1204)))) (&& c$567 (= 18 (+ 1 (* 2 idx$1204)))) (&& c$569 (= 19 (+ 1 (* 2 idx$1204)))) (&& c$571 (= 20 (+ 1 (* 2 idx$1204)))) (&& c$573 (= 21 (+ 1 (* 2 idx$1204)))) (&& c$575 (= 22 (+ 1 (* 2 idx$1204)))) (&& c$577 (= 23 (+ 1 (* 2 idx$1204)))) (&& c$579 (= 24 (+ 1 (* 2 idx$1204)))) (&& c$581 (= 25 (+ 1 (* 2 idx$1204)))) (&& c$583 (= 26 (+ 1 (* 2 idx$1204)))) (&& c$585 (= 27 (+ 1 (* 2 idx$1204)))) (&& c$587 (= 28 (+ 1 (* 2 idx$1204)))) (&& c$589 (= 29 (+ 1 (* 2 idx$1204)))) (&& c$591 (= 30 (+ 1 (* 2 idx$1204)))) (&& c$593 (= 31 (+ 1 (* 2 idx$1204)))) (&& c$595 (= 32 (+ 1 (* 2 idx$1204)))) (&& c$597 (= 33 (+ 1 (* 2 idx$1204)))) (&& c$599 (= 34 (+ 1 (* 2 idx$1204)))) (&& c$601 (= 35 (+ 1 (* 2 idx$1204)))) (&& c$603 (= 36 (+ 1 (* 2 idx$1204)))) (&& c$605 (= 37 (+ 1 (* 2 idx$1204)))) (&& c$607 (= 38 (+ 1 (* 2 idx$1204)))) (&& c$609 (= 39 (+ 1 (* 2 idx$1204)))) (&& c$611 (= 40 (+ 1 (* 2 idx$1204)))) (&& c$613 (= 41 (+ 1 (* 2 idx$1204)))) (&& c$615 (= 42 (+ 1 (* 2 idx$1204)))) (&& c$617 (= 43 (+ 1 (* 2 idx$1204)))) (&& c$619 (= 44 (+ 1 (* 2 idx$1204)))) (&& c$621 (= 45 (+ 1 (* 2 idx$1204)))) (&& c$623 (= 46 (+ 1 (* 2 idx$1204)))) (&& c$625 (= 47 (+ 1 (* 2 idx$1204)))) (&& c$627 (= 48 (+ 1 (* 2 idx$1204)))) (&& c$629 (= 49 (+ 1 (* 2 idx$1204)))) (&& c$631 (= 50 (+ 1 (* 2 idx$1204)))) (&& c$633 (= 51 (+ 1 (* 2 idx$1204)))) (&& c$635 (= 52 (+ 1 (* 2 idx$1204)))) (&& c$637 (= 53 (+ 1 (* 2 idx$1204)))) (&& c$639 (= 54 (+ 1 (* 2 idx$1204)))) (&& c$641 (= 55 (+ 1 (* 2 idx$1204)))) (&& c$643 (= 56 (+ 1 (* 2 idx$1204)))) (&& c$645 (= 57 (+ 1 (* 2 idx$1204)))) (&& c$647 (= 58 (+ 1 (* 2 idx$1204)))) (&& c$649 (= 59 (+ 1 (* 2 idx$1204)))) (&& c$651 (= 60 (+ 1 (* 2 idx$1204)))) (&& c$653 (= 61 (+ 1 (* 2 idx$1204)))) (&& c$655 (= 62 (+ 1 (* 2 idx$1204)))) (&& c$657 (= 63 (+ 1 (* 2 idx$1204))))) (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653))))) (ite c$1207 (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (ite (|| (= 1 (* 2 idx$1206)) (&& c$535 (= 2 (* 2 idx$1206))) (&& c$537 (= 3 (* 2 idx$1206))) (&& c$539 (= 4 (* 2 idx$1206))) (&& c$541 (= 5 (* 2 idx$1206))) (&& c$543 (= 6 (* 2 idx$1206))) (&& c$545 (= 7 (* 2 idx$1206))) (&& c$547 (= 8 (* 2 idx$1206))) (&& c$549 (= 9 (* 2 idx$1206))) (&& c$551 (= 10 (* 2 idx$1206))) (&& c$553 (= 11 (* 2 idx$1206))) (&& c$555 (= 12 (* 2 idx$1206))) (&& c$557 (= 13 (* 2 idx$1206))) (&& c$559 (= 14 (* 2 idx$1206))) (&& c$561 (= 15 (* 2 idx$1206))) (&& c$563 (= 16 (* 2 idx$1206))) (&& c$565 (= 17 (* 2 idx$1206))) (&& c$567 (= 18 (* 2 idx$1206))) (&& c$569 (= 19 (* 2 idx$1206))) (&& c$571 (= 20 (* 2 idx$1206))) (&& c$573 (= 21 (* 2 idx$1206))) (&& c$575 (= 22 (* 2 idx$1206))) (&& c$577 (= 23 (* 2 idx$1206))) (&& c$579 (= 24 (* 2 idx$1206))) (&& c$581 (= 25 (* 2 idx$1206))) (&& c$583 (= 26 (* 2 idx$1206))) (&& c$585 (= 27 (* 2 idx$1206))) (&& c$587 (= 28 (* 2 idx$1206))) (&& c$589 (= 29 (* 2 idx$1206))) (&& c$591 (= 30 (* 2 idx$1206))) (&& c$593 (= 31 (* 2 idx$1206))) (&& c$595 (= 32 (* 2 idx$1206))) (&& c$597 (= 33 (* 2 idx$1206))) (&& c$599 (= 34 (* 2 idx$1206))) (&& c$601 (= 35 (* 2 idx$1206))) (&& c$603 (= 36 (* 2 idx$1206))) (&& c$605 (= 37 (* 2 idx$1206))) (&& c$607 (= 38 (* 2 idx$1206))) (&& c$609 (= 39 (* 2 idx$1206))) (&& c$611 (= 40 (* 2 idx$1206))) (&& c$613 (= 41 (* 2 idx$1206))) (&& c$615 (= 42 (* 2 idx$1206))) (&& c$617 (= 43 (* 2 idx$1206))) (&& c$619 (= 44 (* 2 idx$1206))) (&& c$621 (= 45 (* 2 idx$1206))) (&& c$623 (= 46 (* 2 idx$1206))) (&& c$625 (= 47 (* 2 idx$1206))) (&& c$627 (= 48 (* 2 idx$1206))) (&& c$629 (= 49 (* 2 idx$1206))) (&& c$631 (= 50 (* 2 idx$1206))) (&& c$633 (= 51 (* 2 idx$1206))) (&& c$635 (= 52 (* 2 idx$1206))) (&& c$637 (= 53 (* 2 idx$1206))) (&& c$639 (= 54 (* 2 idx$1206))) (&& c$641 (= 55 (* 2 idx$1206))) (&& c$643 (= 56 (* 2 idx$1206))) (&& c$645 (= 57 (* 2 idx$1206))) (&& c$647 (= 58 (* 2 idx$1206))) (&& c$649 (= 59 (* 2 idx$1206))) (&& c$651 (= 60 (* 2 idx$1206))) (&& c$653 (= 61 (* 2 idx$1206))) (&& c$655 (= 62 (* 2 idx$1206))) (&& c$657 (= 63 (* 2 idx$1206)))) (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653))) (ite (|| (= 1 (+ 1 (* 2 idx$1206))) (&& c$535 (= 2 (+ 1 (* 2 idx$1206)))) (&& c$537 (= 3 (+ 1 (* 2 idx$1206)))) (&& c$539 (= 4 (+ 1 (* 2 idx$1206)))) (&& c$541 (= 5 (+ 1 (* 2 idx$1206)))) (&& c$543 (= 6 (+ 1 (* 2 idx$1206)))) (&& c$545 (= 7 (+ 1 (* 2 idx$1206)))) (&& c$547 (= 8 (+ 1 (* 2 idx$1206)))) (&& c$549 (= 9 (+ 1 (* 2 idx$1206)))) (&& c$551 (= 10 (+ 1 (* 2 idx$1206)))) (&& c$553 (= 11 (+ 1 (* 2 idx$1206)))) (&& c$555 (= 12 (+ 1 (* 2 idx$1206)))) (&& c$557 (= 13 (+ 1 (* 2 idx$1206)))) (&& c$559 (= 14 (+ 1 (* 2 idx$1206)))) (&& c$561 (= 15 (+ 1 (* 2 idx$1206)))) (&& c$563 (= 16 (+ 1 (* 2 idx$1206)))) (&& c$565 (= 17 (+ 1 (* 2 idx$1206)))) (&& c$567 (= 18 (+ 1 (* 2 idx$1206)))) (&& c$569 (= 19 (+ 1 (* 2 idx$1206)))) (&& c$571 (= 20 (+ 1 (* 2 idx$1206)))) (&& c$573 (= 21 (+ 1 (* 2 idx$1206)))) (&& c$575 (= 22 (+ 1 (* 2 idx$1206)))) (&& c$577 (= 23 (+ 1 (* 2 idx$1206)))) (&& c$579 (= 24 (+ 1 (* 2 idx$1206)))) (&& c$581 (= 25 (+ 1 (* 2 idx$1206)))) (&& c$583 (= 26 (+ 1 (* 2 idx$1206)))) (&& c$585 (= 27 (+ 1 (* 2 idx$1206)))) (&& c$587 (= 28 (+ 1 (* 2 idx$1206)))) (&& c$589 (= 29 (+ 1 (* 2 idx$1206)))) (&& c$591 (= 30 (+ 1 (* 2 idx$1206)))) (&& c$593 (= 31 (+ 1 (* 2 idx$1206)))) (&& c$595 (= 32 (+ 1 (* 2 idx$1206)))) (&& c$597 (= 33 (+ 1 (* 2 idx$1206)))) (&& c$599 (= 34 (+ 1 (* 2 idx$1206)))) (&& c$601 (= 35 (+ 1 (* 2 idx$1206)))) (&& c$603 (= 36 (+ 1 (* 2 idx$1206)))) (&& c$605 (= 37 (+ 1 (* 2 idx$1206)))) (&& c$607 (= 38 (+ 1 (* 2 idx$1206)))) (&& c$609 (= 39 (+ 1 (* 2 idx$1206)))) (&& c$611 (= 40 (+ 1 (* 2 idx$1206)))) (&& c$613 (= 41 (+ 1 (* 2 idx$1206)))) (&& c$615 (= 42 (+ 1 (* 2 idx$1206)))) (&& c$617 (= 43 (+ 1 (* 2 idx$1206)))) (&& c$619 (= 44 (+ 1 (* 2 idx$1206)))) (&& c$621 (= 45 (+ 1 (* 2 idx$1206)))) (&& c$623 (= 46 (+ 1 (* 2 idx$1206)))) (&& c$625 (= 47 (+ 1 (* 2 idx$1206)))) (&& c$627 (= 48 (+ 1 (* 2 idx$1206)))) (&& c$629 (= 49 (+ 1 (* 2 idx$1206)))) (&& c$631 (= 50 (+ 1 (* 2 idx$1206)))) (&& c$633 (= 51 (+ 1 (* 2 idx$1206)))) (&& c$635 (= 52 (+ 1 (* 2 idx$1206)))) (&& c$637 (= 53 (+ 1 (* 2 idx$1206)))) (&& c$639 (= 54 (+ 1 (* 2 idx$1206)))) (&& c$641 (= 55 (+ 1 (* 2 idx$1206)))) (&& c$643 (= 56 (+ 1 (* 2 idx$1206)))) (&& c$645 (= 57 (+ 1 (* 2 idx$1206)))) (&& c$647 (= 58 (+ 1 (* 2 idx$1206)))) (&& c$649 (= 59 (+ 1 (* 2 idx$1206)))) (&& c$651 (= 60 (+ 1 (* 2 idx$1206)))) (&& c$653 (= 61 (+ 1 (* 2 idx$1206)))) (&& c$655 (= 62 (+ 1 (* 2 idx$1206)))) (&& c$657 (= 63 (+ 1 (* 2 idx$1206))))) (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$2011 (bvadd (ite x?$2010 (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (ite x?$2012 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2012 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite x?$2010 (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2012 (bv #x00000000 32) (bv #x00000001 32))))) (ite x?$2010 (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2012 (bv #x00000000 32) (bv #x00000001 32)))))))) (ite x?$2011 (bvadd (ite x?$2010 (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (ite x?$2012 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2012 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite x?$2010 (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2012 (bv #x00000000 32) (bv #x00000001 32))))) (ite x?$2010 (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2012 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)))))) (ite (bvsle (ite x?$2010 (bvadd (ite c$1205 (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (ite (|| (= 1 (* 2 idx$1204)) (&& c$535 (= 2 (* 2 idx$1204))) (&& c$537 (= 3 (* 2 idx$1204))) (&& c$539 (= 4 (* 2 idx$1204))) (&& c$541 (= 5 (* 2 idx$1204))) (&& c$543 (= 6 (* 2 idx$1204))) (&& c$545 (= 7 (* 2 idx$1204))) (&& c$547 (= 8 (* 2 idx$1204))) (&& c$549 (= 9 (* 2 idx$1204))) (&& c$551 (= 10 (* 2 idx$1204))) (&& c$553 (= 11 (* 2 idx$1204))) (&& c$555 (= 12 (* 2 idx$1204))) (&& c$557 (= 13 (* 2 idx$1204))) (&& c$559 (= 14 (* 2 idx$1204))) (&& c$561 (= 15 (* 2 idx$1204))) (&& c$563 (= 16 (* 2 idx$1204))) (&& c$565 (= 17 (* 2 idx$1204))) (&& c$567 (= 18 (* 2 idx$1204))) (&& c$569 (= 19 (* 2 idx$1204))) (&& c$571 (= 20 (* 2 idx$1204))) (&& c$573 (= 21 (* 2 idx$1204))) (&& c$575 (= 22 (* 2 idx$1204))) (&& c$577 (= 23 (* 2 idx$1204))) (&& c$579 (= 24 (* 2 idx$1204))) (&& c$581 (= 25 (* 2 idx$1204))) (&& c$583 (= 26 (* 2 idx$1204))) (&& c$585 (= 27 (* 2 idx$1204))) (&& c$587 (= 28 (* 2 idx$1204))) (&& c$589 (= 29 (* 2 idx$1204))) (&& c$591 (= 30 (* 2 idx$1204))) (&& c$593 (= 31 (* 2 idx$1204))) (&& c$595 (= 32 (* 2 idx$1204))) (&& c$597 (= 33 (* 2 idx$1204))) (&& c$599 (= 34 (* 2 idx$1204))) (&& c$601 (= 35 (* 2 idx$1204))) (&& c$603 (= 36 (* 2 idx$1204))) (&& c$605 (= 37 (* 2 idx$1204))) (&& c$607 (= 38 (* 2 idx$1204))) (&& c$609 (= 39 (* 2 idx$1204))) (&& c$611 (= 40 (* 2 idx$1204))) (&& c$613 (= 41 (* 2 idx$1204))) (&& c$615 (= 42 (* 2 idx$1204))) (&& c$617 (= 43 (* 2 idx$1204))) (&& c$619 (= 44 (* 2 idx$1204))) (&& c$621 (= 45 (* 2 idx$1204))) (&& c$623 (= 46 (* 2 idx$1204))) (&& c$625 (= 47 (* 2 idx$1204))) (&& c$627 (= 48 (* 2 idx$1204))) (&& c$629 (= 49 (* 2 idx$1204))) (&& c$631 (= 50 (* 2 idx$1204))) (&& c$633 (= 51 (* 2 idx$1204))) (&& c$635 (= 52 (* 2 idx$1204))) (&& c$637 (= 53 (* 2 idx$1204))) (&& c$639 (= 54 (* 2 idx$1204))) (&& c$641 (= 55 (* 2 idx$1204))) (&& c$643 (= 56 (* 2 idx$1204))) (&& c$645 (= 57 (* 2 idx$1204))) (&& c$647 (= 58 (* 2 idx$1204))) (&& c$649 (= 59 (* 2 idx$1204))) (&& c$651 (= 60 (* 2 idx$1204))) (&& c$653 (= 61 (* 2 idx$1204))) (&& c$655 (= 62 (* 2 idx$1204))) (&& c$657 (= 63 (* 2 idx$1204)))) (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653))) (ite (|| (= 1 (+ 1 (* 2 idx$1204))) (&& c$535 (= 2 (+ 1 (* 2 idx$1204)))) (&& c$537 (= 3 (+ 1 (* 2 idx$1204)))) (&& c$539 (= 4 (+ 1 (* 2 idx$1204)))) (&& c$541 (= 5 (+ 1 (* 2 idx$1204)))) (&& c$543 (= 6 (+ 1 (* 2 idx$1204)))) (&& c$545 (= 7 (+ 1 (* 2 idx$1204)))) (&& c$547 (= 8 (+ 1 (* 2 idx$1204)))) (&& c$549 (= 9 (+ 1 (* 2 idx$1204)))) (&& c$551 (= 10 (+ 1 (* 2 idx$1204)))) (&& c$553 (= 11 (+ 1 (* 2 idx$1204)))) (&& c$555 (= 12 (+ 1 (* 2 idx$1204)))) (&& c$557 (= 13 (+ 1 (* 2 idx$1204)))) (&& c$559 (= 14 (+ 1 (* 2 idx$1204)))) (&& c$561 (= 15 (+ 1 (* 2 idx$1204)))) (&& c$563 (= 16 (+ 1 (* 2 idx$1204)))) (&& c$565 (= 17 (+ 1 (* 2 idx$1204)))) (&& c$567 (= 18 (+ 1 (* 2 idx$1204)))) (&& c$569 (= 19 (+ 1 (* 2 idx$1204)))) (&& c$571 (= 20 (+ 1 (* 2 idx$1204)))) (&& c$573 (= 21 (+ 1 (* 2 idx$1204)))) (&& c$575 (= 22 (+ 1 (* 2 idx$1204)))) (&& c$577 (= 23 (+ 1 (* 2 idx$1204)))) (&& c$579 (= 24 (+ 1 (* 2 idx$1204)))) (&& c$581 (= 25 (+ 1 (* 2 idx$1204)))) (&& c$583 (= 26 (+ 1 (* 2 idx$1204)))) (&& c$585 (= 27 (+ 1 (* 2 idx$1204)))) (&& c$587 (= 28 (+ 1 (* 2 idx$1204)))) (&& c$589 (= 29 (+ 1 (* 2 idx$1204)))) (&& c$591 (= 30 (+ 1 (* 2 idx$1204)))) (&& c$593 (= 31 (+ 1 (* 2 idx$1204)))) (&& c$595 (= 32 (+ 1 (* 2 idx$1204)))) (&& c$597 (= 33 (+ 1 (* 2 idx$1204)))) (&& c$599 (= 34 (+ 1 (* 2 idx$1204)))) (&& c$601 (= 35 (+ 1 (* 2 idx$1204)))) (&& c$603 (= 36 (+ 1 (* 2 idx$1204)))) (&& c$605 (= 37 (+ 1 (* 2 idx$1204)))) (&& c$607 (= 38 (+ 1 (* 2 idx$1204)))) (&& c$609 (= 39 (+ 1 (* 2 idx$1204)))) (&& c$611 (= 40 (+ 1 (* 2 idx$1204)))) (&& c$613 (= 41 (+ 1 (* 2 idx$1204)))) (&& c$615 (= 42 (+ 1 (* 2 idx$1204)))) (&& c$617 (= 43 (+ 1 (* 2 idx$1204)))) (&& c$619 (= 44 (+ 1 (* 2 idx$1204)))) (&& c$621 (= 45 (+ 1 (* 2 idx$1204)))) (&& c$623 (= 46 (+ 1 (* 2 idx$1204)))) (&& c$625 (= 47 (+ 1 (* 2 idx$1204)))) (&& c$627 (= 48 (+ 1 (* 2 idx$1204)))) (&& c$629 (= 49 (+ 1 (* 2 idx$1204)))) (&& c$631 (= 50 (+ 1 (* 2 idx$1204)))) (&& c$633 (= 51 (+ 1 (* 2 idx$1204)))) (&& c$635 (= 52 (+ 1 (* 2 idx$1204)))) (&& c$637 (= 53 (+ 1 (* 2 idx$1204)))) (&& c$639 (= 54 (+ 1 (* 2 idx$1204)))) (&& c$641 (= 55 (+ 1 (* 2 idx$1204)))) (&& c$643 (= 56 (+ 1 (* 2 idx$1204)))) (&& c$645 (= 57 (+ 1 (* 2 idx$1204)))) (&& c$647 (= 58 (+ 1 (* 2 idx$1204)))) (&& c$649 (= 59 (+ 1 (* 2 idx$1204)))) (&& c$651 (= 60 (+ 1 (* 2 idx$1204)))) (&& c$653 (= 61 (+ 1 (* 2 idx$1204)))) (&& c$655 (= 62 (+ 1 (* 2 idx$1204)))) (&& c$657 (= 63 (+ 1 (* 2 idx$1204))))) (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653))))) (ite c$1207 (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (ite (|| (= 1 (* 2 idx$1206)) (&& c$535 (= 2 (* 2 idx$1206))) (&& c$537 (= 3 (* 2 idx$1206))) (&& c$539 (= 4 (* 2 idx$1206))) (&& c$541 (= 5 (* 2 idx$1206))) (&& c$543 (= 6 (* 2 idx$1206))) (&& c$545 (= 7 (* 2 idx$1206))) (&& c$547 (= 8 (* 2 idx$1206))) (&& c$549 (= 9 (* 2 idx$1206))) (&& c$551 (= 10 (* 2 idx$1206))) (&& c$553 (= 11 (* 2 idx$1206))) (&& c$555 (= 12 (* 2 idx$1206))) (&& c$557 (= 13 (* 2 idx$1206))) (&& c$559 (= 14 (* 2 idx$1206))) (&& c$561 (= 15 (* 2 idx$1206))) (&& c$563 (= 16 (* 2 idx$1206))) (&& c$565 (= 17 (* 2 idx$1206))) (&& c$567 (= 18 (* 2 idx$1206))) (&& c$569 (= 19 (* 2 idx$1206))) (&& c$571 (= 20 (* 2 idx$1206))) (&& c$573 (= 21 (* 2 idx$1206))) (&& c$575 (= 22 (* 2 idx$1206))) (&& c$577 (= 23 (* 2 idx$1206))) (&& c$579 (= 24 (* 2 idx$1206))) (&& c$581 (= 25 (* 2 idx$1206))) (&& c$583 (= 26 (* 2 idx$1206))) (&& c$585 (= 27 (* 2 idx$1206))) (&& c$587 (= 28 (* 2 idx$1206))) (&& c$589 (= 29 (* 2 idx$1206))) (&& c$591 (= 30 (* 2 idx$1206))) (&& c$593 (= 31 (* 2 idx$1206))) (&& c$595 (= 32 (* 2 idx$1206))) (&& c$597 (= 33 (* 2 idx$1206))) (&& c$599 (= 34 (* 2 idx$1206))) (&& c$601 (= 35 (* 2 idx$1206))) (&& c$603 (= 36 (* 2 idx$1206))) (&& c$605 (= 37 (* 2 idx$1206))) (&& c$607 (= 38 (* 2 idx$1206))) (&& c$609 (= 39 (* 2 idx$1206))) (&& c$611 (= 40 (* 2 idx$1206))) (&& c$613 (= 41 (* 2 idx$1206))) (&& c$615 (= 42 (* 2 idx$1206))) (&& c$617 (= 43 (* 2 idx$1206))) (&& c$619 (= 44 (* 2 idx$1206))) (&& c$621 (= 45 (* 2 idx$1206))) (&& c$623 (= 46 (* 2 idx$1206))) (&& c$625 (= 47 (* 2 idx$1206))) (&& c$627 (= 48 (* 2 idx$1206))) (&& c$629 (= 49 (* 2 idx$1206))) (&& c$631 (= 50 (* 2 idx$1206))) (&& c$633 (= 51 (* 2 idx$1206))) (&& c$635 (= 52 (* 2 idx$1206))) (&& c$637 (= 53 (* 2 idx$1206))) (&& c$639 (= 54 (* 2 idx$1206))) (&& c$641 (= 55 (* 2 idx$1206))) (&& c$643 (= 56 (* 2 idx$1206))) (&& c$645 (= 57 (* 2 idx$1206))) (&& c$647 (= 58 (* 2 idx$1206))) (&& c$649 (= 59 (* 2 idx$1206))) (&& c$651 (= 60 (* 2 idx$1206))) (&& c$653 (= 61 (* 2 idx$1206))) (&& c$655 (= 62 (* 2 idx$1206))) (&& c$657 (= 63 (* 2 idx$1206)))) (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653))) (ite (|| (= 1 (+ 1 (* 2 idx$1206))) (&& c$535 (= 2 (+ 1 (* 2 idx$1206)))) (&& c$537 (= 3 (+ 1 (* 2 idx$1206)))) (&& c$539 (= 4 (+ 1 (* 2 idx$1206)))) (&& c$541 (= 5 (+ 1 (* 2 idx$1206)))) (&& c$543 (= 6 (+ 1 (* 2 idx$1206)))) (&& c$545 (= 7 (+ 1 (* 2 idx$1206)))) (&& c$547 (= 8 (+ 1 (* 2 idx$1206)))) (&& c$549 (= 9 (+ 1 (* 2 idx$1206)))) (&& c$551 (= 10 (+ 1 (* 2 idx$1206)))) (&& c$553 (= 11 (+ 1 (* 2 idx$1206)))) (&& c$555 (= 12 (+ 1 (* 2 idx$1206)))) (&& c$557 (= 13 (+ 1 (* 2 idx$1206)))) (&& c$559 (= 14 (+ 1 (* 2 idx$1206)))) (&& c$561 (= 15 (+ 1 (* 2 idx$1206)))) (&& c$563 (= 16 (+ 1 (* 2 idx$1206)))) (&& c$565 (= 17 (+ 1 (* 2 idx$1206)))) (&& c$567 (= 18 (+ 1 (* 2 idx$1206)))) (&& c$569 (= 19 (+ 1 (* 2 idx$1206)))) (&& c$571 (= 20 (+ 1 (* 2 idx$1206)))) (&& c$573 (= 21 (+ 1 (* 2 idx$1206)))) (&& c$575 (= 22 (+ 1 (* 2 idx$1206)))) (&& c$577 (= 23 (+ 1 (* 2 idx$1206)))) (&& c$579 (= 24 (+ 1 (* 2 idx$1206)))) (&& c$581 (= 25 (+ 1 (* 2 idx$1206)))) (&& c$583 (= 26 (+ 1 (* 2 idx$1206)))) (&& c$585 (= 27 (+ 1 (* 2 idx$1206)))) (&& c$587 (= 28 (+ 1 (* 2 idx$1206)))) (&& c$589 (= 29 (+ 1 (* 2 idx$1206)))) (&& c$591 (= 30 (+ 1 (* 2 idx$1206)))) (&& c$593 (= 31 (+ 1 (* 2 idx$1206)))) (&& c$595 (= 32 (+ 1 (* 2 idx$1206)))) (&& c$597 (= 33 (+ 1 (* 2 idx$1206)))) (&& c$599 (= 34 (+ 1 (* 2 idx$1206)))) (&& c$601 (= 35 (+ 1 (* 2 idx$1206)))) (&& c$603 (= 36 (+ 1 (* 2 idx$1206)))) (&& c$605 (= 37 (+ 1 (* 2 idx$1206)))) (&& c$607 (= 38 (+ 1 (* 2 idx$1206)))) (&& c$609 (= 39 (+ 1 (* 2 idx$1206)))) (&& c$611 (= 40 (+ 1 (* 2 idx$1206)))) (&& c$613 (= 41 (+ 1 (* 2 idx$1206)))) (&& c$615 (= 42 (+ 1 (* 2 idx$1206)))) (&& c$617 (= 43 (+ 1 (* 2 idx$1206)))) (&& c$619 (= 44 (+ 1 (* 2 idx$1206)))) (&& c$621 (= 45 (+ 1 (* 2 idx$1206)))) (&& c$623 (= 46 (+ 1 (* 2 idx$1206)))) (&& c$625 (= 47 (+ 1 (* 2 idx$1206)))) (&& c$627 (= 48 (+ 1 (* 2 idx$1206)))) (&& c$629 (= 49 (+ 1 (* 2 idx$1206)))) (&& c$631 (= 50 (+ 1 (* 2 idx$1206)))) (&& c$633 (= 51 (+ 1 (* 2 idx$1206)))) (&& c$635 (= 52 (+ 1 (* 2 idx$1206)))) (&& c$637 (= 53 (+ 1 (* 2 idx$1206)))) (&& c$639 (= 54 (+ 1 (* 2 idx$1206)))) (&& c$641 (= 55 (+ 1 (* 2 idx$1206)))) (&& c$643 (= 56 (+ 1 (* 2 idx$1206)))) (&& c$645 (= 57 (+ 1 (* 2 idx$1206)))) (&& c$647 (= 58 (+ 1 (* 2 idx$1206)))) (&& c$649 (= 59 (+ 1 (* 2 idx$1206)))) (&& c$651 (= 60 (+ 1 (* 2 idx$1206)))) (&& c$653 (= 61 (+ 1 (* 2 idx$1206)))) (&& c$655 (= 62 (+ 1 (* 2 idx$1206)))) (&& c$657 (= 63 (+ 1 (* 2 idx$1206))))) (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$2011 (bvadd (ite x?$2010 (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (ite x?$2012 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2012 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite x?$2010 (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2012 (bv #x00000000 32) (bv #x00000001 32))))) (ite x?$2010 (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2012 (bv #x00000000 32) (bv #x00000001 32)))))))) (ite x?$2011 (bvadd (ite x?$2010 (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (ite x?$2012 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2012 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite x?$2010 (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2012 (bv #x00000000 32) (bv #x00000001 32))))) (ite x?$2010 (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2012 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32))))) (ite x?$2010 (bvadd (ite c$1205 (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (ite (|| (= 1 (* 2 idx$1204)) (&& c$535 (= 2 (* 2 idx$1204))) (&& c$537 (= 3 (* 2 idx$1204))) (&& c$539 (= 4 (* 2 idx$1204))) (&& c$541 (= 5 (* 2 idx$1204))) (&& c$543 (= 6 (* 2 idx$1204))) (&& c$545 (= 7 (* 2 idx$1204))) (&& c$547 (= 8 (* 2 idx$1204))) (&& c$549 (= 9 (* 2 idx$1204))) (&& c$551 (= 10 (* 2 idx$1204))) (&& c$553 (= 11 (* 2 idx$1204))) (&& c$555 (= 12 (* 2 idx$1204))) (&& c$557 (= 13 (* 2 idx$1204))) (&& c$559 (= 14 (* 2 idx$1204))) (&& c$561 (= 15 (* 2 idx$1204))) (&& c$563 (= 16 (* 2 idx$1204))) (&& c$565 (= 17 (* 2 idx$1204))) (&& c$567 (= 18 (* 2 idx$1204))) (&& c$569 (= 19 (* 2 idx$1204))) (&& c$571 (= 20 (* 2 idx$1204))) (&& c$573 (= 21 (* 2 idx$1204))) (&& c$575 (= 22 (* 2 idx$1204))) (&& c$577 (= 23 (* 2 idx$1204))) (&& c$579 (= 24 (* 2 idx$1204))) (&& c$581 (= 25 (* 2 idx$1204))) (&& c$583 (= 26 (* 2 idx$1204))) (&& c$585 (= 27 (* 2 idx$1204))) (&& c$587 (= 28 (* 2 idx$1204))) (&& c$589 (= 29 (* 2 idx$1204))) (&& c$591 (= 30 (* 2 idx$1204))) (&& c$593 (= 31 (* 2 idx$1204))) (&& c$595 (= 32 (* 2 idx$1204))) (&& c$597 (= 33 (* 2 idx$1204))) (&& c$599 (= 34 (* 2 idx$1204))) (&& c$601 (= 35 (* 2 idx$1204))) (&& c$603 (= 36 (* 2 idx$1204))) (&& c$605 (= 37 (* 2 idx$1204))) (&& c$607 (= 38 (* 2 idx$1204))) (&& c$609 (= 39 (* 2 idx$1204))) (&& c$611 (= 40 (* 2 idx$1204))) (&& c$613 (= 41 (* 2 idx$1204))) (&& c$615 (= 42 (* 2 idx$1204))) (&& c$617 (= 43 (* 2 idx$1204))) (&& c$619 (= 44 (* 2 idx$1204))) (&& c$621 (= 45 (* 2 idx$1204))) (&& c$623 (= 46 (* 2 idx$1204))) (&& c$625 (= 47 (* 2 idx$1204))) (&& c$627 (= 48 (* 2 idx$1204))) (&& c$629 (= 49 (* 2 idx$1204))) (&& c$631 (= 50 (* 2 idx$1204))) (&& c$633 (= 51 (* 2 idx$1204))) (&& c$635 (= 52 (* 2 idx$1204))) (&& c$637 (= 53 (* 2 idx$1204))) (&& c$639 (= 54 (* 2 idx$1204))) (&& c$641 (= 55 (* 2 idx$1204))) (&& c$643 (= 56 (* 2 idx$1204))) (&& c$645 (= 57 (* 2 idx$1204))) (&& c$647 (= 58 (* 2 idx$1204))) (&& c$649 (= 59 (* 2 idx$1204))) (&& c$651 (= 60 (* 2 idx$1204))) (&& c$653 (= 61 (* 2 idx$1204))) (&& c$655 (= 62 (* 2 idx$1204))) (&& c$657 (= 63 (* 2 idx$1204)))) (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653))) (ite (|| (= 1 (+ 1 (* 2 idx$1204))) (&& c$535 (= 2 (+ 1 (* 2 idx$1204)))) (&& c$537 (= 3 (+ 1 (* 2 idx$1204)))) (&& c$539 (= 4 (+ 1 (* 2 idx$1204)))) (&& c$541 (= 5 (+ 1 (* 2 idx$1204)))) (&& c$543 (= 6 (+ 1 (* 2 idx$1204)))) (&& c$545 (= 7 (+ 1 (* 2 idx$1204)))) (&& c$547 (= 8 (+ 1 (* 2 idx$1204)))) (&& c$549 (= 9 (+ 1 (* 2 idx$1204)))) (&& c$551 (= 10 (+ 1 (* 2 idx$1204)))) (&& c$553 (= 11 (+ 1 (* 2 idx$1204)))) (&& c$555 (= 12 (+ 1 (* 2 idx$1204)))) (&& c$557 (= 13 (+ 1 (* 2 idx$1204)))) (&& c$559 (= 14 (+ 1 (* 2 idx$1204)))) (&& c$561 (= 15 (+ 1 (* 2 idx$1204)))) (&& c$563 (= 16 (+ 1 (* 2 idx$1204)))) (&& c$565 (= 17 (+ 1 (* 2 idx$1204)))) (&& c$567 (= 18 (+ 1 (* 2 idx$1204)))) (&& c$569 (= 19 (+ 1 (* 2 idx$1204)))) (&& c$571 (= 20 (+ 1 (* 2 idx$1204)))) (&& c$573 (= 21 (+ 1 (* 2 idx$1204)))) (&& c$575 (= 22 (+ 1 (* 2 idx$1204)))) (&& c$577 (= 23 (+ 1 (* 2 idx$1204)))) (&& c$579 (= 24 (+ 1 (* 2 idx$1204)))) (&& c$581 (= 25 (+ 1 (* 2 idx$1204)))) (&& c$583 (= 26 (+ 1 (* 2 idx$1204)))) (&& c$585 (= 27 (+ 1 (* 2 idx$1204)))) (&& c$587 (= 28 (+ 1 (* 2 idx$1204)))) (&& c$589 (= 29 (+ 1 (* 2 idx$1204)))) (&& c$591 (= 30 (+ 1 (* 2 idx$1204)))) (&& c$593 (= 31 (+ 1 (* 2 idx$1204)))) (&& c$595 (= 32 (+ 1 (* 2 idx$1204)))) (&& c$597 (= 33 (+ 1 (* 2 idx$1204)))) (&& c$599 (= 34 (+ 1 (* 2 idx$1204)))) (&& c$601 (= 35 (+ 1 (* 2 idx$1204)))) (&& c$603 (= 36 (+ 1 (* 2 idx$1204)))) (&& c$605 (= 37 (+ 1 (* 2 idx$1204)))) (&& c$607 (= 38 (+ 1 (* 2 idx$1204)))) (&& c$609 (= 39 (+ 1 (* 2 idx$1204)))) (&& c$611 (= 40 (+ 1 (* 2 idx$1204)))) (&& c$613 (= 41 (+ 1 (* 2 idx$1204)))) (&& c$615 (= 42 (+ 1 (* 2 idx$1204)))) (&& c$617 (= 43 (+ 1 (* 2 idx$1204)))) (&& c$619 (= 44 (+ 1 (* 2 idx$1204)))) (&& c$621 (= 45 (+ 1 (* 2 idx$1204)))) (&& c$623 (= 46 (+ 1 (* 2 idx$1204)))) (&& c$625 (= 47 (+ 1 (* 2 idx$1204)))) (&& c$627 (= 48 (+ 1 (* 2 idx$1204)))) (&& c$629 (= 49 (+ 1 (* 2 idx$1204)))) (&& c$631 (= 50 (+ 1 (* 2 idx$1204)))) (&& c$633 (= 51 (+ 1 (* 2 idx$1204)))) (&& c$635 (= 52 (+ 1 (* 2 idx$1204)))) (&& c$637 (= 53 (+ 1 (* 2 idx$1204)))) (&& c$639 (= 54 (+ 1 (* 2 idx$1204)))) (&& c$641 (= 55 (+ 1 (* 2 idx$1204)))) (&& c$643 (= 56 (+ 1 (* 2 idx$1204)))) (&& c$645 (= 57 (+ 1 (* 2 idx$1204)))) (&& c$647 (= 58 (+ 1 (* 2 idx$1204)))) (&& c$649 (= 59 (+ 1 (* 2 idx$1204)))) (&& c$651 (= 60 (+ 1 (* 2 idx$1204)))) (&& c$653 (= 61 (+ 1 (* 2 idx$1204)))) (&& c$655 (= 62 (+ 1 (* 2 idx$1204)))) (&& c$657 (= 63 (+ 1 (* 2 idx$1204))))) (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653))))) (ite c$1207 (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (ite (|| (= 1 (* 2 idx$1206)) (&& c$535 (= 2 (* 2 idx$1206))) (&& c$537 (= 3 (* 2 idx$1206))) (&& c$539 (= 4 (* 2 idx$1206))) (&& c$541 (= 5 (* 2 idx$1206))) (&& c$543 (= 6 (* 2 idx$1206))) (&& c$545 (= 7 (* 2 idx$1206))) (&& c$547 (= 8 (* 2 idx$1206))) (&& c$549 (= 9 (* 2 idx$1206))) (&& c$551 (= 10 (* 2 idx$1206))) (&& c$553 (= 11 (* 2 idx$1206))) (&& c$555 (= 12 (* 2 idx$1206))) (&& c$557 (= 13 (* 2 idx$1206))) (&& c$559 (= 14 (* 2 idx$1206))) (&& c$561 (= 15 (* 2 idx$1206))) (&& c$563 (= 16 (* 2 idx$1206))) (&& c$565 (= 17 (* 2 idx$1206))) (&& c$567 (= 18 (* 2 idx$1206))) (&& c$569 (= 19 (* 2 idx$1206))) (&& c$571 (= 20 (* 2 idx$1206))) (&& c$573 (= 21 (* 2 idx$1206))) (&& c$575 (= 22 (* 2 idx$1206))) (&& c$577 (= 23 (* 2 idx$1206))) (&& c$579 (= 24 (* 2 idx$1206))) (&& c$581 (= 25 (* 2 idx$1206))) (&& c$583 (= 26 (* 2 idx$1206))) (&& c$585 (= 27 (* 2 idx$1206))) (&& c$587 (= 28 (* 2 idx$1206))) (&& c$589 (= 29 (* 2 idx$1206))) (&& c$591 (= 30 (* 2 idx$1206))) (&& c$593 (= 31 (* 2 idx$1206))) (&& c$595 (= 32 (* 2 idx$1206))) (&& c$597 (= 33 (* 2 idx$1206))) (&& c$599 (= 34 (* 2 idx$1206))) (&& c$601 (= 35 (* 2 idx$1206))) (&& c$603 (= 36 (* 2 idx$1206))) (&& c$605 (= 37 (* 2 idx$1206))) (&& c$607 (= 38 (* 2 idx$1206))) (&& c$609 (= 39 (* 2 idx$1206))) (&& c$611 (= 40 (* 2 idx$1206))) (&& c$613 (= 41 (* 2 idx$1206))) (&& c$615 (= 42 (* 2 idx$1206))) (&& c$617 (= 43 (* 2 idx$1206))) (&& c$619 (= 44 (* 2 idx$1206))) (&& c$621 (= 45 (* 2 idx$1206))) (&& c$623 (= 46 (* 2 idx$1206))) (&& c$625 (= 47 (* 2 idx$1206))) (&& c$627 (= 48 (* 2 idx$1206))) (&& c$629 (= 49 (* 2 idx$1206))) (&& c$631 (= 50 (* 2 idx$1206))) (&& c$633 (= 51 (* 2 idx$1206))) (&& c$635 (= 52 (* 2 idx$1206))) (&& c$637 (= 53 (* 2 idx$1206))) (&& c$639 (= 54 (* 2 idx$1206))) (&& c$641 (= 55 (* 2 idx$1206))) (&& c$643 (= 56 (* 2 idx$1206))) (&& c$645 (= 57 (* 2 idx$1206))) (&& c$647 (= 58 (* 2 idx$1206))) (&& c$649 (= 59 (* 2 idx$1206))) (&& c$651 (= 60 (* 2 idx$1206))) (&& c$653 (= 61 (* 2 idx$1206))) (&& c$655 (= 62 (* 2 idx$1206))) (&& c$657 (= 63 (* 2 idx$1206)))) (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653))) (ite (|| (= 1 (+ 1 (* 2 idx$1206))) (&& c$535 (= 2 (+ 1 (* 2 idx$1206)))) (&& c$537 (= 3 (+ 1 (* 2 idx$1206)))) (&& c$539 (= 4 (+ 1 (* 2 idx$1206)))) (&& c$541 (= 5 (+ 1 (* 2 idx$1206)))) (&& c$543 (= 6 (+ 1 (* 2 idx$1206)))) (&& c$545 (= 7 (+ 1 (* 2 idx$1206)))) (&& c$547 (= 8 (+ 1 (* 2 idx$1206)))) (&& c$549 (= 9 (+ 1 (* 2 idx$1206)))) (&& c$551 (= 10 (+ 1 (* 2 idx$1206)))) (&& c$553 (= 11 (+ 1 (* 2 idx$1206)))) (&& c$555 (= 12 (+ 1 (* 2 idx$1206)))) (&& c$557 (= 13 (+ 1 (* 2 idx$1206)))) (&& c$559 (= 14 (+ 1 (* 2 idx$1206)))) (&& c$561 (= 15 (+ 1 (* 2 idx$1206)))) (&& c$563 (= 16 (+ 1 (* 2 idx$1206)))) (&& c$565 (= 17 (+ 1 (* 2 idx$1206)))) (&& c$567 (= 18 (+ 1 (* 2 idx$1206)))) (&& c$569 (= 19 (+ 1 (* 2 idx$1206)))) (&& c$571 (= 20 (+ 1 (* 2 idx$1206)))) (&& c$573 (= 21 (+ 1 (* 2 idx$1206)))) (&& c$575 (= 22 (+ 1 (* 2 idx$1206)))) (&& c$577 (= 23 (+ 1 (* 2 idx$1206)))) (&& c$579 (= 24 (+ 1 (* 2 idx$1206)))) (&& c$581 (= 25 (+ 1 (* 2 idx$1206)))) (&& c$583 (= 26 (+ 1 (* 2 idx$1206)))) (&& c$585 (= 27 (+ 1 (* 2 idx$1206)))) (&& c$587 (= 28 (+ 1 (* 2 idx$1206)))) (&& c$589 (= 29 (+ 1 (* 2 idx$1206)))) (&& c$591 (= 30 (+ 1 (* 2 idx$1206)))) (&& c$593 (= 31 (+ 1 (* 2 idx$1206)))) (&& c$595 (= 32 (+ 1 (* 2 idx$1206)))) (&& c$597 (= 33 (+ 1 (* 2 idx$1206)))) (&& c$599 (= 34 (+ 1 (* 2 idx$1206)))) (&& c$601 (= 35 (+ 1 (* 2 idx$1206)))) (&& c$603 (= 36 (+ 1 (* 2 idx$1206)))) (&& c$605 (= 37 (+ 1 (* 2 idx$1206)))) (&& c$607 (= 38 (+ 1 (* 2 idx$1206)))) (&& c$609 (= 39 (+ 1 (* 2 idx$1206)))) (&& c$611 (= 40 (+ 1 (* 2 idx$1206)))) (&& c$613 (= 41 (+ 1 (* 2 idx$1206)))) (&& c$615 (= 42 (+ 1 (* 2 idx$1206)))) (&& c$617 (= 43 (+ 1 (* 2 idx$1206)))) (&& c$619 (= 44 (+ 1 (* 2 idx$1206)))) (&& c$621 (= 45 (+ 1 (* 2 idx$1206)))) (&& c$623 (= 46 (+ 1 (* 2 idx$1206)))) (&& c$625 (= 47 (+ 1 (* 2 idx$1206)))) (&& c$627 (= 48 (+ 1 (* 2 idx$1206)))) (&& c$629 (= 49 (+ 1 (* 2 idx$1206)))) (&& c$631 (= 50 (+ 1 (* 2 idx$1206)))) (&& c$633 (= 51 (+ 1 (* 2 idx$1206)))) (&& c$635 (= 52 (+ 1 (* 2 idx$1206)))) (&& c$637 (= 53 (+ 1 (* 2 idx$1206)))) (&& c$639 (= 54 (+ 1 (* 2 idx$1206)))) (&& c$641 (= 55 (+ 1 (* 2 idx$1206)))) (&& c$643 (= 56 (+ 1 (* 2 idx$1206)))) (&& c$645 (= 57 (+ 1 (* 2 idx$1206)))) (&& c$647 (= 58 (+ 1 (* 2 idx$1206)))) (&& c$649 (= 59 (+ 1 (* 2 idx$1206)))) (&& c$651 (= 60 (+ 1 (* 2 idx$1206)))) (&& c$653 (= 61 (+ 1 (* 2 idx$1206)))) (&& c$655 (= 62 (+ 1 (* 2 idx$1206)))) (&& c$657 (= 63 (+ 1 (* 2 idx$1206))))) (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$2011 (bvadd (ite x?$2010 (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (ite x?$2012 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2012 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite x?$2010 (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2012 (bv #x00000000 32) (bv #x00000001 32))))) (ite x?$2010 (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2012 (bv #x00000000 32) (bv #x00000001 32)))))))) (ite x?$2011 (bvadd (ite x?$2010 (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (ite x?$2012 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2012 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite x?$2010 (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2012 (bv #x00000000 32) (bv #x00000001 32))))) (ite x?$2010 (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2012 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32))))) (bvadd (bv #x80000000 32) (bvneg (ite (bvsle (ite x?$2011 (bvadd (ite x?$2010 (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (ite x?$2012 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2012 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite x?$2010 (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2012 (bv #x00000000 32) (bv #x00000001 32))))) (ite x?$2010 (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2012 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)) (ite x?$2011 (bvadd (ite x?$2010 (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (ite x?$2012 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2012 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite x?$2010 (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2012 (bv #x00000000 32) (bv #x00000001 32))))) (ite x?$2010 (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2012 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)))))))) (⊢ (|| (&& (! x?$2011) (! x?$2013)) (&& (! x?$2013) (! (&& (! x?$2011) (! x?$2013))))) (bvashr (ite x?$2011 (bvadd (ite x?$2010 (bvadd (ite c$1205 (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (ite (|| (= 1 (* 2 idx$1204)) (&& c$535 (= 2 (* 2 idx$1204))) (&& c$537 (= 3 (* 2 idx$1204))) (&& c$539 (= 4 (* 2 idx$1204))) (&& c$541 (= 5 (* 2 idx$1204))) (&& c$543 (= 6 (* 2 idx$1204))) (&& c$545 (= 7 (* 2 idx$1204))) (&& c$547 (= 8 (* 2 idx$1204))) (&& c$549 (= 9 (* 2 idx$1204))) (&& c$551 (= 10 (* 2 idx$1204))) (&& c$553 (= 11 (* 2 idx$1204))) (&& c$555 (= 12 (* 2 idx$1204))) (&& c$557 (= 13 (* 2 idx$1204))) (&& c$559 (= 14 (* 2 idx$1204))) (&& c$561 (= 15 (* 2 idx$1204))) (&& c$563 (= 16 (* 2 idx$1204))) (&& c$565 (= 17 (* 2 idx$1204))) (&& c$567 (= 18 (* 2 idx$1204))) (&& c$569 (= 19 (* 2 idx$1204))) (&& c$571 (= 20 (* 2 idx$1204))) (&& c$573 (= 21 (* 2 idx$1204))) (&& c$575 (= 22 (* 2 idx$1204))) (&& c$577 (= 23 (* 2 idx$1204))) (&& c$579 (= 24 (* 2 idx$1204))) (&& c$581 (= 25 (* 2 idx$1204))) (&& c$583 (= 26 (* 2 idx$1204))) (&& c$585 (= 27 (* 2 idx$1204))) (&& c$587 (= 28 (* 2 idx$1204))) (&& c$589 (= 29 (* 2 idx$1204))) (&& c$591 (= 30 (* 2 idx$1204))) (&& c$593 (= 31 (* 2 idx$1204))) (&& c$595 (= 32 (* 2 idx$1204))) (&& c$597 (= 33 (* 2 idx$1204))) (&& c$599 (= 34 (* 2 idx$1204))) (&& c$601 (= 35 (* 2 idx$1204))) (&& c$603 (= 36 (* 2 idx$1204))) (&& c$605 (= 37 (* 2 idx$1204))) (&& c$607 (= 38 (* 2 idx$1204))) (&& c$609 (= 39 (* 2 idx$1204))) (&& c$611 (= 40 (* 2 idx$1204))) (&& c$613 (= 41 (* 2 idx$1204))) (&& c$615 (= 42 (* 2 idx$1204))) (&& c$617 (= 43 (* 2 idx$1204))) (&& c$619 (= 44 (* 2 idx$1204))) (&& c$621 (= 45 (* 2 idx$1204))) (&& c$623 (= 46 (* 2 idx$1204))) (&& c$625 (= 47 (* 2 idx$1204))) (&& c$627 (= 48 (* 2 idx$1204))) (&& c$629 (= 49 (* 2 idx$1204))) (&& c$631 (= 50 (* 2 idx$1204))) (&& c$633 (= 51 (* 2 idx$1204))) (&& c$635 (= 52 (* 2 idx$1204))) (&& c$637 (= 53 (* 2 idx$1204))) (&& c$639 (= 54 (* 2 idx$1204))) (&& c$641 (= 55 (* 2 idx$1204))) (&& c$643 (= 56 (* 2 idx$1204))) (&& c$645 (= 57 (* 2 idx$1204))) (&& c$647 (= 58 (* 2 idx$1204))) (&& c$649 (= 59 (* 2 idx$1204))) (&& c$651 (= 60 (* 2 idx$1204))) (&& c$653 (= 61 (* 2 idx$1204))) (&& c$655 (= 62 (* 2 idx$1204))) (&& c$657 (= 63 (* 2 idx$1204)))) (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653))) (ite (|| (= 1 (+ 1 (* 2 idx$1204))) (&& c$535 (= 2 (+ 1 (* 2 idx$1204)))) (&& c$537 (= 3 (+ 1 (* 2 idx$1204)))) (&& c$539 (= 4 (+ 1 (* 2 idx$1204)))) (&& c$541 (= 5 (+ 1 (* 2 idx$1204)))) (&& c$543 (= 6 (+ 1 (* 2 idx$1204)))) (&& c$545 (= 7 (+ 1 (* 2 idx$1204)))) (&& c$547 (= 8 (+ 1 (* 2 idx$1204)))) (&& c$549 (= 9 (+ 1 (* 2 idx$1204)))) (&& c$551 (= 10 (+ 1 (* 2 idx$1204)))) (&& c$553 (= 11 (+ 1 (* 2 idx$1204)))) (&& c$555 (= 12 (+ 1 (* 2 idx$1204)))) (&& c$557 (= 13 (+ 1 (* 2 idx$1204)))) (&& c$559 (= 14 (+ 1 (* 2 idx$1204)))) (&& c$561 (= 15 (+ 1 (* 2 idx$1204)))) (&& c$563 (= 16 (+ 1 (* 2 idx$1204)))) (&& c$565 (= 17 (+ 1 (* 2 idx$1204)))) (&& c$567 (= 18 (+ 1 (* 2 idx$1204)))) (&& c$569 (= 19 (+ 1 (* 2 idx$1204)))) (&& c$571 (= 20 (+ 1 (* 2 idx$1204)))) (&& c$573 (= 21 (+ 1 (* 2 idx$1204)))) (&& c$575 (= 22 (+ 1 (* 2 idx$1204)))) (&& c$577 (= 23 (+ 1 (* 2 idx$1204)))) (&& c$579 (= 24 (+ 1 (* 2 idx$1204)))) (&& c$581 (= 25 (+ 1 (* 2 idx$1204)))) (&& c$583 (= 26 (+ 1 (* 2 idx$1204)))) (&& c$585 (= 27 (+ 1 (* 2 idx$1204)))) (&& c$587 (= 28 (+ 1 (* 2 idx$1204)))) (&& c$589 (= 29 (+ 1 (* 2 idx$1204)))) (&& c$591 (= 30 (+ 1 (* 2 idx$1204)))) (&& c$593 (= 31 (+ 1 (* 2 idx$1204)))) (&& c$595 (= 32 (+ 1 (* 2 idx$1204)))) (&& c$597 (= 33 (+ 1 (* 2 idx$1204)))) (&& c$599 (= 34 (+ 1 (* 2 idx$1204)))) (&& c$601 (= 35 (+ 1 (* 2 idx$1204)))) (&& c$603 (= 36 (+ 1 (* 2 idx$1204)))) (&& c$605 (= 37 (+ 1 (* 2 idx$1204)))) (&& c$607 (= 38 (+ 1 (* 2 idx$1204)))) (&& c$609 (= 39 (+ 1 (* 2 idx$1204)))) (&& c$611 (= 40 (+ 1 (* 2 idx$1204)))) (&& c$613 (= 41 (+ 1 (* 2 idx$1204)))) (&& c$615 (= 42 (+ 1 (* 2 idx$1204)))) (&& c$617 (= 43 (+ 1 (* 2 idx$1204)))) (&& c$619 (= 44 (+ 1 (* 2 idx$1204)))) (&& c$621 (= 45 (+ 1 (* 2 idx$1204)))) (&& c$623 (= 46 (+ 1 (* 2 idx$1204)))) (&& c$625 (= 47 (+ 1 (* 2 idx$1204)))) (&& c$627 (= 48 (+ 1 (* 2 idx$1204)))) (&& c$629 (= 49 (+ 1 (* 2 idx$1204)))) (&& c$631 (= 50 (+ 1 (* 2 idx$1204)))) (&& c$633 (= 51 (+ 1 (* 2 idx$1204)))) (&& c$635 (= 52 (+ 1 (* 2 idx$1204)))) (&& c$637 (= 53 (+ 1 (* 2 idx$1204)))) (&& c$639 (= 54 (+ 1 (* 2 idx$1204)))) (&& c$641 (= 55 (+ 1 (* 2 idx$1204)))) (&& c$643 (= 56 (+ 1 (* 2 idx$1204)))) (&& c$645 (= 57 (+ 1 (* 2 idx$1204)))) (&& c$647 (= 58 (+ 1 (* 2 idx$1204)))) (&& c$649 (= 59 (+ 1 (* 2 idx$1204)))) (&& c$651 (= 60 (+ 1 (* 2 idx$1204)))) (&& c$653 (= 61 (+ 1 (* 2 idx$1204)))) (&& c$655 (= 62 (+ 1 (* 2 idx$1204)))) (&& c$657 (= 63 (+ 1 (* 2 idx$1204))))) (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653))))) (ite c$1207 (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (ite (|| (= 1 (* 2 idx$1206)) (&& c$535 (= 2 (* 2 idx$1206))) (&& c$537 (= 3 (* 2 idx$1206))) (&& c$539 (= 4 (* 2 idx$1206))) (&& c$541 (= 5 (* 2 idx$1206))) (&& c$543 (= 6 (* 2 idx$1206))) (&& c$545 (= 7 (* 2 idx$1206))) (&& c$547 (= 8 (* 2 idx$1206))) (&& c$549 (= 9 (* 2 idx$1206))) (&& c$551 (= 10 (* 2 idx$1206))) (&& c$553 (= 11 (* 2 idx$1206))) (&& c$555 (= 12 (* 2 idx$1206))) (&& c$557 (= 13 (* 2 idx$1206))) (&& c$559 (= 14 (* 2 idx$1206))) (&& c$561 (= 15 (* 2 idx$1206))) (&& c$563 (= 16 (* 2 idx$1206))) (&& c$565 (= 17 (* 2 idx$1206))) (&& c$567 (= 18 (* 2 idx$1206))) (&& c$569 (= 19 (* 2 idx$1206))) (&& c$571 (= 20 (* 2 idx$1206))) (&& c$573 (= 21 (* 2 idx$1206))) (&& c$575 (= 22 (* 2 idx$1206))) (&& c$577 (= 23 (* 2 idx$1206))) (&& c$579 (= 24 (* 2 idx$1206))) (&& c$581 (= 25 (* 2 idx$1206))) (&& c$583 (= 26 (* 2 idx$1206))) (&& c$585 (= 27 (* 2 idx$1206))) (&& c$587 (= 28 (* 2 idx$1206))) (&& c$589 (= 29 (* 2 idx$1206))) (&& c$591 (= 30 (* 2 idx$1206))) (&& c$593 (= 31 (* 2 idx$1206))) (&& c$595 (= 32 (* 2 idx$1206))) (&& c$597 (= 33 (* 2 idx$1206))) (&& c$599 (= 34 (* 2 idx$1206))) (&& c$601 (= 35 (* 2 idx$1206))) (&& c$603 (= 36 (* 2 idx$1206))) (&& c$605 (= 37 (* 2 idx$1206))) (&& c$607 (= 38 (* 2 idx$1206))) (&& c$609 (= 39 (* 2 idx$1206))) (&& c$611 (= 40 (* 2 idx$1206))) (&& c$613 (= 41 (* 2 idx$1206))) (&& c$615 (= 42 (* 2 idx$1206))) (&& c$617 (= 43 (* 2 idx$1206))) (&& c$619 (= 44 (* 2 idx$1206))) (&& c$621 (= 45 (* 2 idx$1206))) (&& c$623 (= 46 (* 2 idx$1206))) (&& c$625 (= 47 (* 2 idx$1206))) (&& c$627 (= 48 (* 2 idx$1206))) (&& c$629 (= 49 (* 2 idx$1206))) (&& c$631 (= 50 (* 2 idx$1206))) (&& c$633 (= 51 (* 2 idx$1206))) (&& c$635 (= 52 (* 2 idx$1206))) (&& c$637 (= 53 (* 2 idx$1206))) (&& c$639 (= 54 (* 2 idx$1206))) (&& c$641 (= 55 (* 2 idx$1206))) (&& c$643 (= 56 (* 2 idx$1206))) (&& c$645 (= 57 (* 2 idx$1206))) (&& c$647 (= 58 (* 2 idx$1206))) (&& c$649 (= 59 (* 2 idx$1206))) (&& c$651 (= 60 (* 2 idx$1206))) (&& c$653 (= 61 (* 2 idx$1206))) (&& c$655 (= 62 (* 2 idx$1206))) (&& c$657 (= 63 (* 2 idx$1206)))) (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653))) (ite (|| (= 1 (+ 1 (* 2 idx$1206))) (&& c$535 (= 2 (+ 1 (* 2 idx$1206)))) (&& c$537 (= 3 (+ 1 (* 2 idx$1206)))) (&& c$539 (= 4 (+ 1 (* 2 idx$1206)))) (&& c$541 (= 5 (+ 1 (* 2 idx$1206)))) (&& c$543 (= 6 (+ 1 (* 2 idx$1206)))) (&& c$545 (= 7 (+ 1 (* 2 idx$1206)))) (&& c$547 (= 8 (+ 1 (* 2 idx$1206)))) (&& c$549 (= 9 (+ 1 (* 2 idx$1206)))) (&& c$551 (= 10 (+ 1 (* 2 idx$1206)))) (&& c$553 (= 11 (+ 1 (* 2 idx$1206)))) (&& c$555 (= 12 (+ 1 (* 2 idx$1206)))) (&& c$557 (= 13 (+ 1 (* 2 idx$1206)))) (&& c$559 (= 14 (+ 1 (* 2 idx$1206)))) (&& c$561 (= 15 (+ 1 (* 2 idx$1206)))) (&& c$563 (= 16 (+ 1 (* 2 idx$1206)))) (&& c$565 (= 17 (+ 1 (* 2 idx$1206)))) (&& c$567 (= 18 (+ 1 (* 2 idx$1206)))) (&& c$569 (= 19 (+ 1 (* 2 idx$1206)))) (&& c$571 (= 20 (+ 1 (* 2 idx$1206)))) (&& c$573 (= 21 (+ 1 (* 2 idx$1206)))) (&& c$575 (= 22 (+ 1 (* 2 idx$1206)))) (&& c$577 (= 23 (+ 1 (* 2 idx$1206)))) (&& c$579 (= 24 (+ 1 (* 2 idx$1206)))) (&& c$581 (= 25 (+ 1 (* 2 idx$1206)))) (&& c$583 (= 26 (+ 1 (* 2 idx$1206)))) (&& c$585 (= 27 (+ 1 (* 2 idx$1206)))) (&& c$587 (= 28 (+ 1 (* 2 idx$1206)))) (&& c$589 (= 29 (+ 1 (* 2 idx$1206)))) (&& c$591 (= 30 (+ 1 (* 2 idx$1206)))) (&& c$593 (= 31 (+ 1 (* 2 idx$1206)))) (&& c$595 (= 32 (+ 1 (* 2 idx$1206)))) (&& c$597 (= 33 (+ 1 (* 2 idx$1206)))) (&& c$599 (= 34 (+ 1 (* 2 idx$1206)))) (&& c$601 (= 35 (+ 1 (* 2 idx$1206)))) (&& c$603 (= 36 (+ 1 (* 2 idx$1206)))) (&& c$605 (= 37 (+ 1 (* 2 idx$1206)))) (&& c$607 (= 38 (+ 1 (* 2 idx$1206)))) (&& c$609 (= 39 (+ 1 (* 2 idx$1206)))) (&& c$611 (= 40 (+ 1 (* 2 idx$1206)))) (&& c$613 (= 41 (+ 1 (* 2 idx$1206)))) (&& c$615 (= 42 (+ 1 (* 2 idx$1206)))) (&& c$617 (= 43 (+ 1 (* 2 idx$1206)))) (&& c$619 (= 44 (+ 1 (* 2 idx$1206)))) (&& c$621 (= 45 (+ 1 (* 2 idx$1206)))) (&& c$623 (= 46 (+ 1 (* 2 idx$1206)))) (&& c$625 (= 47 (+ 1 (* 2 idx$1206)))) (&& c$627 (= 48 (+ 1 (* 2 idx$1206)))) (&& c$629 (= 49 (+ 1 (* 2 idx$1206)))) (&& c$631 (= 50 (+ 1 (* 2 idx$1206)))) (&& c$633 (= 51 (+ 1 (* 2 idx$1206)))) (&& c$635 (= 52 (+ 1 (* 2 idx$1206)))) (&& c$637 (= 53 (+ 1 (* 2 idx$1206)))) (&& c$639 (= 54 (+ 1 (* 2 idx$1206)))) (&& c$641 (= 55 (+ 1 (* 2 idx$1206)))) (&& c$643 (= 56 (+ 1 (* 2 idx$1206)))) (&& c$645 (= 57 (+ 1 (* 2 idx$1206)))) (&& c$647 (= 58 (+ 1 (* 2 idx$1206)))) (&& c$649 (= 59 (+ 1 (* 2 idx$1206)))) (&& c$651 (= 60 (+ 1 (* 2 idx$1206)))) (&& c$653 (= 61 (+ 1 (* 2 idx$1206)))) (&& c$655 (= 62 (+ 1 (* 2 idx$1206)))) (&& c$657 (= 63 (+ 1 (* 2 idx$1206))))) (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (ite x?$2011 (bvadd (ite x?$2010 (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (ite x?$2012 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2012 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite x?$2010 (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2012 (bv #x00000000 32) (bv #x00000001 32))))) (ite x?$2010 (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2012 (bv #x00000000 32) (bv #x00000001 32)))))))) (bvadd (ite x?$2011 (bvadd (ite x?$2010 (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (ite x?$2012 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2012 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite x?$2010 (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2012 (bv #x00000000 32) (bv #x00000001 32))))) (ite x?$2010 (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2012 (bv #x00000000 32) (bv #x00000001 32))))))) (ite (bvsle (bvadd (bv #x80000000 32) (bvneg (ite (bvsle (ite x?$2011 (bvadd (ite x?$2010 (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (ite x?$2012 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2012 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite x?$2010 (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2012 (bv #x00000000 32) (bv #x00000001 32))))) (ite x?$2010 (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2012 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)) (ite x?$2011 (bvadd (ite x?$2010 (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (ite x?$2012 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2012 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite x?$2010 (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2012 (bv #x00000000 32) (bv #x00000001 32))))) (ite x?$2010 (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2012 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)))) (ite (bvsle (ite x?$2010 (bvadd (ite c$1205 (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (ite (|| (= 1 (* 2 idx$1204)) (&& c$535 (= 2 (* 2 idx$1204))) (&& c$537 (= 3 (* 2 idx$1204))) (&& c$539 (= 4 (* 2 idx$1204))) (&& c$541 (= 5 (* 2 idx$1204))) (&& c$543 (= 6 (* 2 idx$1204))) (&& c$545 (= 7 (* 2 idx$1204))) (&& c$547 (= 8 (* 2 idx$1204))) (&& c$549 (= 9 (* 2 idx$1204))) (&& c$551 (= 10 (* 2 idx$1204))) (&& c$553 (= 11 (* 2 idx$1204))) (&& c$555 (= 12 (* 2 idx$1204))) (&& c$557 (= 13 (* 2 idx$1204))) (&& c$559 (= 14 (* 2 idx$1204))) (&& c$561 (= 15 (* 2 idx$1204))) (&& c$563 (= 16 (* 2 idx$1204))) (&& c$565 (= 17 (* 2 idx$1204))) (&& c$567 (= 18 (* 2 idx$1204))) (&& c$569 (= 19 (* 2 idx$1204))) (&& c$571 (= 20 (* 2 idx$1204))) (&& c$573 (= 21 (* 2 idx$1204))) (&& c$575 (= 22 (* 2 idx$1204))) (&& c$577 (= 23 (* 2 idx$1204))) (&& c$579 (= 24 (* 2 idx$1204))) (&& c$581 (= 25 (* 2 idx$1204))) (&& c$583 (= 26 (* 2 idx$1204))) (&& c$585 (= 27 (* 2 idx$1204))) (&& c$587 (= 28 (* 2 idx$1204))) (&& c$589 (= 29 (* 2 idx$1204))) (&& c$591 (= 30 (* 2 idx$1204))) (&& c$593 (= 31 (* 2 idx$1204))) (&& c$595 (= 32 (* 2 idx$1204))) (&& c$597 (= 33 (* 2 idx$1204))) (&& c$599 (= 34 (* 2 idx$1204))) (&& c$601 (= 35 (* 2 idx$1204))) (&& c$603 (= 36 (* 2 idx$1204))) (&& c$605 (= 37 (* 2 idx$1204))) (&& c$607 (= 38 (* 2 idx$1204))) (&& c$609 (= 39 (* 2 idx$1204))) (&& c$611 (= 40 (* 2 idx$1204))) (&& c$613 (= 41 (* 2 idx$1204))) (&& c$615 (= 42 (* 2 idx$1204))) (&& c$617 (= 43 (* 2 idx$1204))) (&& c$619 (= 44 (* 2 idx$1204))) (&& c$621 (= 45 (* 2 idx$1204))) (&& c$623 (= 46 (* 2 idx$1204))) (&& c$625 (= 47 (* 2 idx$1204))) (&& c$627 (= 48 (* 2 idx$1204))) (&& c$629 (= 49 (* 2 idx$1204))) (&& c$631 (= 50 (* 2 idx$1204))) (&& c$633 (= 51 (* 2 idx$1204))) (&& c$635 (= 52 (* 2 idx$1204))) (&& c$637 (= 53 (* 2 idx$1204))) (&& c$639 (= 54 (* 2 idx$1204))) (&& c$641 (= 55 (* 2 idx$1204))) (&& c$643 (= 56 (* 2 idx$1204))) (&& c$645 (= 57 (* 2 idx$1204))) (&& c$647 (= 58 (* 2 idx$1204))) (&& c$649 (= 59 (* 2 idx$1204))) (&& c$651 (= 60 (* 2 idx$1204))) (&& c$653 (= 61 (* 2 idx$1204))) (&& c$655 (= 62 (* 2 idx$1204))) (&& c$657 (= 63 (* 2 idx$1204)))) (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653))) (ite (|| (= 1 (+ 1 (* 2 idx$1204))) (&& c$535 (= 2 (+ 1 (* 2 idx$1204)))) (&& c$537 (= 3 (+ 1 (* 2 idx$1204)))) (&& c$539 (= 4 (+ 1 (* 2 idx$1204)))) (&& c$541 (= 5 (+ 1 (* 2 idx$1204)))) (&& c$543 (= 6 (+ 1 (* 2 idx$1204)))) (&& c$545 (= 7 (+ 1 (* 2 idx$1204)))) (&& c$547 (= 8 (+ 1 (* 2 idx$1204)))) (&& c$549 (= 9 (+ 1 (* 2 idx$1204)))) (&& c$551 (= 10 (+ 1 (* 2 idx$1204)))) (&& c$553 (= 11 (+ 1 (* 2 idx$1204)))) (&& c$555 (= 12 (+ 1 (* 2 idx$1204)))) (&& c$557 (= 13 (+ 1 (* 2 idx$1204)))) (&& c$559 (= 14 (+ 1 (* 2 idx$1204)))) (&& c$561 (= 15 (+ 1 (* 2 idx$1204)))) (&& c$563 (= 16 (+ 1 (* 2 idx$1204)))) (&& c$565 (= 17 (+ 1 (* 2 idx$1204)))) (&& c$567 (= 18 (+ 1 (* 2 idx$1204)))) (&& c$569 (= 19 (+ 1 (* 2 idx$1204)))) (&& c$571 (= 20 (+ 1 (* 2 idx$1204)))) (&& c$573 (= 21 (+ 1 (* 2 idx$1204)))) (&& c$575 (= 22 (+ 1 (* 2 idx$1204)))) (&& c$577 (= 23 (+ 1 (* 2 idx$1204)))) (&& c$579 (= 24 (+ 1 (* 2 idx$1204)))) (&& c$581 (= 25 (+ 1 (* 2 idx$1204)))) (&& c$583 (= 26 (+ 1 (* 2 idx$1204)))) (&& c$585 (= 27 (+ 1 (* 2 idx$1204)))) (&& c$587 (= 28 (+ 1 (* 2 idx$1204)))) (&& c$589 (= 29 (+ 1 (* 2 idx$1204)))) (&& c$591 (= 30 (+ 1 (* 2 idx$1204)))) (&& c$593 (= 31 (+ 1 (* 2 idx$1204)))) (&& c$595 (= 32 (+ 1 (* 2 idx$1204)))) (&& c$597 (= 33 (+ 1 (* 2 idx$1204)))) (&& c$599 (= 34 (+ 1 (* 2 idx$1204)))) (&& c$601 (= 35 (+ 1 (* 2 idx$1204)))) (&& c$603 (= 36 (+ 1 (* 2 idx$1204)))) (&& c$605 (= 37 (+ 1 (* 2 idx$1204)))) (&& c$607 (= 38 (+ 1 (* 2 idx$1204)))) (&& c$609 (= 39 (+ 1 (* 2 idx$1204)))) (&& c$611 (= 40 (+ 1 (* 2 idx$1204)))) (&& c$613 (= 41 (+ 1 (* 2 idx$1204)))) (&& c$615 (= 42 (+ 1 (* 2 idx$1204)))) (&& c$617 (= 43 (+ 1 (* 2 idx$1204)))) (&& c$619 (= 44 (+ 1 (* 2 idx$1204)))) (&& c$621 (= 45 (+ 1 (* 2 idx$1204)))) (&& c$623 (= 46 (+ 1 (* 2 idx$1204)))) (&& c$625 (= 47 (+ 1 (* 2 idx$1204)))) (&& c$627 (= 48 (+ 1 (* 2 idx$1204)))) (&& c$629 (= 49 (+ 1 (* 2 idx$1204)))) (&& c$631 (= 50 (+ 1 (* 2 idx$1204)))) (&& c$633 (= 51 (+ 1 (* 2 idx$1204)))) (&& c$635 (= 52 (+ 1 (* 2 idx$1204)))) (&& c$637 (= 53 (+ 1 (* 2 idx$1204)))) (&& c$639 (= 54 (+ 1 (* 2 idx$1204)))) (&& c$641 (= 55 (+ 1 (* 2 idx$1204)))) (&& c$643 (= 56 (+ 1 (* 2 idx$1204)))) (&& c$645 (= 57 (+ 1 (* 2 idx$1204)))) (&& c$647 (= 58 (+ 1 (* 2 idx$1204)))) (&& c$649 (= 59 (+ 1 (* 2 idx$1204)))) (&& c$651 (= 60 (+ 1 (* 2 idx$1204)))) (&& c$653 (= 61 (+ 1 (* 2 idx$1204)))) (&& c$655 (= 62 (+ 1 (* 2 idx$1204)))) (&& c$657 (= 63 (+ 1 (* 2 idx$1204))))) (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653))))) (ite c$1207 (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (ite (|| (= 1 (* 2 idx$1206)) (&& c$535 (= 2 (* 2 idx$1206))) (&& c$537 (= 3 (* 2 idx$1206))) (&& c$539 (= 4 (* 2 idx$1206))) (&& c$541 (= 5 (* 2 idx$1206))) (&& c$543 (= 6 (* 2 idx$1206))) (&& c$545 (= 7 (* 2 idx$1206))) (&& c$547 (= 8 (* 2 idx$1206))) (&& c$549 (= 9 (* 2 idx$1206))) (&& c$551 (= 10 (* 2 idx$1206))) (&& c$553 (= 11 (* 2 idx$1206))) (&& c$555 (= 12 (* 2 idx$1206))) (&& c$557 (= 13 (* 2 idx$1206))) (&& c$559 (= 14 (* 2 idx$1206))) (&& c$561 (= 15 (* 2 idx$1206))) (&& c$563 (= 16 (* 2 idx$1206))) (&& c$565 (= 17 (* 2 idx$1206))) (&& c$567 (= 18 (* 2 idx$1206))) (&& c$569 (= 19 (* 2 idx$1206))) (&& c$571 (= 20 (* 2 idx$1206))) (&& c$573 (= 21 (* 2 idx$1206))) (&& c$575 (= 22 (* 2 idx$1206))) (&& c$577 (= 23 (* 2 idx$1206))) (&& c$579 (= 24 (* 2 idx$1206))) (&& c$581 (= 25 (* 2 idx$1206))) (&& c$583 (= 26 (* 2 idx$1206))) (&& c$585 (= 27 (* 2 idx$1206))) (&& c$587 (= 28 (* 2 idx$1206))) (&& c$589 (= 29 (* 2 idx$1206))) (&& c$591 (= 30 (* 2 idx$1206))) (&& c$593 (= 31 (* 2 idx$1206))) (&& c$595 (= 32 (* 2 idx$1206))) (&& c$597 (= 33 (* 2 idx$1206))) (&& c$599 (= 34 (* 2 idx$1206))) (&& c$601 (= 35 (* 2 idx$1206))) (&& c$603 (= 36 (* 2 idx$1206))) (&& c$605 (= 37 (* 2 idx$1206))) (&& c$607 (= 38 (* 2 idx$1206))) (&& c$609 (= 39 (* 2 idx$1206))) (&& c$611 (= 40 (* 2 idx$1206))) (&& c$613 (= 41 (* 2 idx$1206))) (&& c$615 (= 42 (* 2 idx$1206))) (&& c$617 (= 43 (* 2 idx$1206))) (&& c$619 (= 44 (* 2 idx$1206))) (&& c$621 (= 45 (* 2 idx$1206))) (&& c$623 (= 46 (* 2 idx$1206))) (&& c$625 (= 47 (* 2 idx$1206))) (&& c$627 (= 48 (* 2 idx$1206))) (&& c$629 (= 49 (* 2 idx$1206))) (&& c$631 (= 50 (* 2 idx$1206))) (&& c$633 (= 51 (* 2 idx$1206))) (&& c$635 (= 52 (* 2 idx$1206))) (&& c$637 (= 53 (* 2 idx$1206))) (&& c$639 (= 54 (* 2 idx$1206))) (&& c$641 (= 55 (* 2 idx$1206))) (&& c$643 (= 56 (* 2 idx$1206))) (&& c$645 (= 57 (* 2 idx$1206))) (&& c$647 (= 58 (* 2 idx$1206))) (&& c$649 (= 59 (* 2 idx$1206))) (&& c$651 (= 60 (* 2 idx$1206))) (&& c$653 (= 61 (* 2 idx$1206))) (&& c$655 (= 62 (* 2 idx$1206))) (&& c$657 (= 63 (* 2 idx$1206)))) (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653))) (ite (|| (= 1 (+ 1 (* 2 idx$1206))) (&& c$535 (= 2 (+ 1 (* 2 idx$1206)))) (&& c$537 (= 3 (+ 1 (* 2 idx$1206)))) (&& c$539 (= 4 (+ 1 (* 2 idx$1206)))) (&& c$541 (= 5 (+ 1 (* 2 idx$1206)))) (&& c$543 (= 6 (+ 1 (* 2 idx$1206)))) (&& c$545 (= 7 (+ 1 (* 2 idx$1206)))) (&& c$547 (= 8 (+ 1 (* 2 idx$1206)))) (&& c$549 (= 9 (+ 1 (* 2 idx$1206)))) (&& c$551 (= 10 (+ 1 (* 2 idx$1206)))) (&& c$553 (= 11 (+ 1 (* 2 idx$1206)))) (&& c$555 (= 12 (+ 1 (* 2 idx$1206)))) (&& c$557 (= 13 (+ 1 (* 2 idx$1206)))) (&& c$559 (= 14 (+ 1 (* 2 idx$1206)))) (&& c$561 (= 15 (+ 1 (* 2 idx$1206)))) (&& c$563 (= 16 (+ 1 (* 2 idx$1206)))) (&& c$565 (= 17 (+ 1 (* 2 idx$1206)))) (&& c$567 (= 18 (+ 1 (* 2 idx$1206)))) (&& c$569 (= 19 (+ 1 (* 2 idx$1206)))) (&& c$571 (= 20 (+ 1 (* 2 idx$1206)))) (&& c$573 (= 21 (+ 1 (* 2 idx$1206)))) (&& c$575 (= 22 (+ 1 (* 2 idx$1206)))) (&& c$577 (= 23 (+ 1 (* 2 idx$1206)))) (&& c$579 (= 24 (+ 1 (* 2 idx$1206)))) (&& c$581 (= 25 (+ 1 (* 2 idx$1206)))) (&& c$583 (= 26 (+ 1 (* 2 idx$1206)))) (&& c$585 (= 27 (+ 1 (* 2 idx$1206)))) (&& c$587 (= 28 (+ 1 (* 2 idx$1206)))) (&& c$589 (= 29 (+ 1 (* 2 idx$1206)))) (&& c$591 (= 30 (+ 1 (* 2 idx$1206)))) (&& c$593 (= 31 (+ 1 (* 2 idx$1206)))) (&& c$595 (= 32 (+ 1 (* 2 idx$1206)))) (&& c$597 (= 33 (+ 1 (* 2 idx$1206)))) (&& c$599 (= 34 (+ 1 (* 2 idx$1206)))) (&& c$601 (= 35 (+ 1 (* 2 idx$1206)))) (&& c$603 (= 36 (+ 1 (* 2 idx$1206)))) (&& c$605 (= 37 (+ 1 (* 2 idx$1206)))) (&& c$607 (= 38 (+ 1 (* 2 idx$1206)))) (&& c$609 (= 39 (+ 1 (* 2 idx$1206)))) (&& c$611 (= 40 (+ 1 (* 2 idx$1206)))) (&& c$613 (= 41 (+ 1 (* 2 idx$1206)))) (&& c$615 (= 42 (+ 1 (* 2 idx$1206)))) (&& c$617 (= 43 (+ 1 (* 2 idx$1206)))) (&& c$619 (= 44 (+ 1 (* 2 idx$1206)))) (&& c$621 (= 45 (+ 1 (* 2 idx$1206)))) (&& c$623 (= 46 (+ 1 (* 2 idx$1206)))) (&& c$625 (= 47 (+ 1 (* 2 idx$1206)))) (&& c$627 (= 48 (+ 1 (* 2 idx$1206)))) (&& c$629 (= 49 (+ 1 (* 2 idx$1206)))) (&& c$631 (= 50 (+ 1 (* 2 idx$1206)))) (&& c$633 (= 51 (+ 1 (* 2 idx$1206)))) (&& c$635 (= 52 (+ 1 (* 2 idx$1206)))) (&& c$637 (= 53 (+ 1 (* 2 idx$1206)))) (&& c$639 (= 54 (+ 1 (* 2 idx$1206)))) (&& c$641 (= 55 (+ 1 (* 2 idx$1206)))) (&& c$643 (= 56 (+ 1 (* 2 idx$1206)))) (&& c$645 (= 57 (+ 1 (* 2 idx$1206)))) (&& c$647 (= 58 (+ 1 (* 2 idx$1206)))) (&& c$649 (= 59 (+ 1 (* 2 idx$1206)))) (&& c$651 (= 60 (+ 1 (* 2 idx$1206)))) (&& c$653 (= 61 (+ 1 (* 2 idx$1206)))) (&& c$655 (= 62 (+ 1 (* 2 idx$1206)))) (&& c$657 (= 63 (+ 1 (* 2 idx$1206))))) (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$2011 (bvadd (ite x?$2010 (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (ite x?$2012 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2012 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite x?$2010 (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2012 (bv #x00000000 32) (bv #x00000001 32))))) (ite x?$2010 (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2012 (bv #x00000000 32) (bv #x00000001 32)))))))) (ite x?$2011 (bvadd (ite x?$2010 (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (ite x?$2012 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2012 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite x?$2010 (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2012 (bv #x00000000 32) (bv #x00000001 32))))) (ite x?$2010 (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2012 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32))))) (ite x?$2010 (bvadd (ite c$1205 (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (ite (|| (= 1 (* 2 idx$1204)) (&& c$535 (= 2 (* 2 idx$1204))) (&& c$537 (= 3 (* 2 idx$1204))) (&& c$539 (= 4 (* 2 idx$1204))) (&& c$541 (= 5 (* 2 idx$1204))) (&& c$543 (= 6 (* 2 idx$1204))) (&& c$545 (= 7 (* 2 idx$1204))) (&& c$547 (= 8 (* 2 idx$1204))) (&& c$549 (= 9 (* 2 idx$1204))) (&& c$551 (= 10 (* 2 idx$1204))) (&& c$553 (= 11 (* 2 idx$1204))) (&& c$555 (= 12 (* 2 idx$1204))) (&& c$557 (= 13 (* 2 idx$1204))) (&& c$559 (= 14 (* 2 idx$1204))) (&& c$561 (= 15 (* 2 idx$1204))) (&& c$563 (= 16 (* 2 idx$1204))) (&& c$565 (= 17 (* 2 idx$1204))) (&& c$567 (= 18 (* 2 idx$1204))) (&& c$569 (= 19 (* 2 idx$1204))) (&& c$571 (= 20 (* 2 idx$1204))) (&& c$573 (= 21 (* 2 idx$1204))) (&& c$575 (= 22 (* 2 idx$1204))) (&& c$577 (= 23 (* 2 idx$1204))) (&& c$579 (= 24 (* 2 idx$1204))) (&& c$581 (= 25 (* 2 idx$1204))) (&& c$583 (= 26 (* 2 idx$1204))) (&& c$585 (= 27 (* 2 idx$1204))) (&& c$587 (= 28 (* 2 idx$1204))) (&& c$589 (= 29 (* 2 idx$1204))) (&& c$591 (= 30 (* 2 idx$1204))) (&& c$593 (= 31 (* 2 idx$1204))) (&& c$595 (= 32 (* 2 idx$1204))) (&& c$597 (= 33 (* 2 idx$1204))) (&& c$599 (= 34 (* 2 idx$1204))) (&& c$601 (= 35 (* 2 idx$1204))) (&& c$603 (= 36 (* 2 idx$1204))) (&& c$605 (= 37 (* 2 idx$1204))) (&& c$607 (= 38 (* 2 idx$1204))) (&& c$609 (= 39 (* 2 idx$1204))) (&& c$611 (= 40 (* 2 idx$1204))) (&& c$613 (= 41 (* 2 idx$1204))) (&& c$615 (= 42 (* 2 idx$1204))) (&& c$617 (= 43 (* 2 idx$1204))) (&& c$619 (= 44 (* 2 idx$1204))) (&& c$621 (= 45 (* 2 idx$1204))) (&& c$623 (= 46 (* 2 idx$1204))) (&& c$625 (= 47 (* 2 idx$1204))) (&& c$627 (= 48 (* 2 idx$1204))) (&& c$629 (= 49 (* 2 idx$1204))) (&& c$631 (= 50 (* 2 idx$1204))) (&& c$633 (= 51 (* 2 idx$1204))) (&& c$635 (= 52 (* 2 idx$1204))) (&& c$637 (= 53 (* 2 idx$1204))) (&& c$639 (= 54 (* 2 idx$1204))) (&& c$641 (= 55 (* 2 idx$1204))) (&& c$643 (= 56 (* 2 idx$1204))) (&& c$645 (= 57 (* 2 idx$1204))) (&& c$647 (= 58 (* 2 idx$1204))) (&& c$649 (= 59 (* 2 idx$1204))) (&& c$651 (= 60 (* 2 idx$1204))) (&& c$653 (= 61 (* 2 idx$1204))) (&& c$655 (= 62 (* 2 idx$1204))) (&& c$657 (= 63 (* 2 idx$1204)))) (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653))) (ite (|| (= 1 (+ 1 (* 2 idx$1204))) (&& c$535 (= 2 (+ 1 (* 2 idx$1204)))) (&& c$537 (= 3 (+ 1 (* 2 idx$1204)))) (&& c$539 (= 4 (+ 1 (* 2 idx$1204)))) (&& c$541 (= 5 (+ 1 (* 2 idx$1204)))) (&& c$543 (= 6 (+ 1 (* 2 idx$1204)))) (&& c$545 (= 7 (+ 1 (* 2 idx$1204)))) (&& c$547 (= 8 (+ 1 (* 2 idx$1204)))) (&& c$549 (= 9 (+ 1 (* 2 idx$1204)))) (&& c$551 (= 10 (+ 1 (* 2 idx$1204)))) (&& c$553 (= 11 (+ 1 (* 2 idx$1204)))) (&& c$555 (= 12 (+ 1 (* 2 idx$1204)))) (&& c$557 (= 13 (+ 1 (* 2 idx$1204)))) (&& c$559 (= 14 (+ 1 (* 2 idx$1204)))) (&& c$561 (= 15 (+ 1 (* 2 idx$1204)))) (&& c$563 (= 16 (+ 1 (* 2 idx$1204)))) (&& c$565 (= 17 (+ 1 (* 2 idx$1204)))) (&& c$567 (= 18 (+ 1 (* 2 idx$1204)))) (&& c$569 (= 19 (+ 1 (* 2 idx$1204)))) (&& c$571 (= 20 (+ 1 (* 2 idx$1204)))) (&& c$573 (= 21 (+ 1 (* 2 idx$1204)))) (&& c$575 (= 22 (+ 1 (* 2 idx$1204)))) (&& c$577 (= 23 (+ 1 (* 2 idx$1204)))) (&& c$579 (= 24 (+ 1 (* 2 idx$1204)))) (&& c$581 (= 25 (+ 1 (* 2 idx$1204)))) (&& c$583 (= 26 (+ 1 (* 2 idx$1204)))) (&& c$585 (= 27 (+ 1 (* 2 idx$1204)))) (&& c$587 (= 28 (+ 1 (* 2 idx$1204)))) (&& c$589 (= 29 (+ 1 (* 2 idx$1204)))) (&& c$591 (= 30 (+ 1 (* 2 idx$1204)))) (&& c$593 (= 31 (+ 1 (* 2 idx$1204)))) (&& c$595 (= 32 (+ 1 (* 2 idx$1204)))) (&& c$597 (= 33 (+ 1 (* 2 idx$1204)))) (&& c$599 (= 34 (+ 1 (* 2 idx$1204)))) (&& c$601 (= 35 (+ 1 (* 2 idx$1204)))) (&& c$603 (= 36 (+ 1 (* 2 idx$1204)))) (&& c$605 (= 37 (+ 1 (* 2 idx$1204)))) (&& c$607 (= 38 (+ 1 (* 2 idx$1204)))) (&& c$609 (= 39 (+ 1 (* 2 idx$1204)))) (&& c$611 (= 40 (+ 1 (* 2 idx$1204)))) (&& c$613 (= 41 (+ 1 (* 2 idx$1204)))) (&& c$615 (= 42 (+ 1 (* 2 idx$1204)))) (&& c$617 (= 43 (+ 1 (* 2 idx$1204)))) (&& c$619 (= 44 (+ 1 (* 2 idx$1204)))) (&& c$621 (= 45 (+ 1 (* 2 idx$1204)))) (&& c$623 (= 46 (+ 1 (* 2 idx$1204)))) (&& c$625 (= 47 (+ 1 (* 2 idx$1204)))) (&& c$627 (= 48 (+ 1 (* 2 idx$1204)))) (&& c$629 (= 49 (+ 1 (* 2 idx$1204)))) (&& c$631 (= 50 (+ 1 (* 2 idx$1204)))) (&& c$633 (= 51 (+ 1 (* 2 idx$1204)))) (&& c$635 (= 52 (+ 1 (* 2 idx$1204)))) (&& c$637 (= 53 (+ 1 (* 2 idx$1204)))) (&& c$639 (= 54 (+ 1 (* 2 idx$1204)))) (&& c$641 (= 55 (+ 1 (* 2 idx$1204)))) (&& c$643 (= 56 (+ 1 (* 2 idx$1204)))) (&& c$645 (= 57 (+ 1 (* 2 idx$1204)))) (&& c$647 (= 58 (+ 1 (* 2 idx$1204)))) (&& c$649 (= 59 (+ 1 (* 2 idx$1204)))) (&& c$651 (= 60 (+ 1 (* 2 idx$1204)))) (&& c$653 (= 61 (+ 1 (* 2 idx$1204)))) (&& c$655 (= 62 (+ 1 (* 2 idx$1204)))) (&& c$657 (= 63 (+ 1 (* 2 idx$1204))))) (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653))))) (ite c$1207 (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (ite (|| (= 1 (* 2 idx$1206)) (&& c$535 (= 2 (* 2 idx$1206))) (&& c$537 (= 3 (* 2 idx$1206))) (&& c$539 (= 4 (* 2 idx$1206))) (&& c$541 (= 5 (* 2 idx$1206))) (&& c$543 (= 6 (* 2 idx$1206))) (&& c$545 (= 7 (* 2 idx$1206))) (&& c$547 (= 8 (* 2 idx$1206))) (&& c$549 (= 9 (* 2 idx$1206))) (&& c$551 (= 10 (* 2 idx$1206))) (&& c$553 (= 11 (* 2 idx$1206))) (&& c$555 (= 12 (* 2 idx$1206))) (&& c$557 (= 13 (* 2 idx$1206))) (&& c$559 (= 14 (* 2 idx$1206))) (&& c$561 (= 15 (* 2 idx$1206))) (&& c$563 (= 16 (* 2 idx$1206))) (&& c$565 (= 17 (* 2 idx$1206))) (&& c$567 (= 18 (* 2 idx$1206))) (&& c$569 (= 19 (* 2 idx$1206))) (&& c$571 (= 20 (* 2 idx$1206))) (&& c$573 (= 21 (* 2 idx$1206))) (&& c$575 (= 22 (* 2 idx$1206))) (&& c$577 (= 23 (* 2 idx$1206))) (&& c$579 (= 24 (* 2 idx$1206))) (&& c$581 (= 25 (* 2 idx$1206))) (&& c$583 (= 26 (* 2 idx$1206))) (&& c$585 (= 27 (* 2 idx$1206))) (&& c$587 (= 28 (* 2 idx$1206))) (&& c$589 (= 29 (* 2 idx$1206))) (&& c$591 (= 30 (* 2 idx$1206))) (&& c$593 (= 31 (* 2 idx$1206))) (&& c$595 (= 32 (* 2 idx$1206))) (&& c$597 (= 33 (* 2 idx$1206))) (&& c$599 (= 34 (* 2 idx$1206))) (&& c$601 (= 35 (* 2 idx$1206))) (&& c$603 (= 36 (* 2 idx$1206))) (&& c$605 (= 37 (* 2 idx$1206))) (&& c$607 (= 38 (* 2 idx$1206))) (&& c$609 (= 39 (* 2 idx$1206))) (&& c$611 (= 40 (* 2 idx$1206))) (&& c$613 (= 41 (* 2 idx$1206))) (&& c$615 (= 42 (* 2 idx$1206))) (&& c$617 (= 43 (* 2 idx$1206))) (&& c$619 (= 44 (* 2 idx$1206))) (&& c$621 (= 45 (* 2 idx$1206))) (&& c$623 (= 46 (* 2 idx$1206))) (&& c$625 (= 47 (* 2 idx$1206))) (&& c$627 (= 48 (* 2 idx$1206))) (&& c$629 (= 49 (* 2 idx$1206))) (&& c$631 (= 50 (* 2 idx$1206))) (&& c$633 (= 51 (* 2 idx$1206))) (&& c$635 (= 52 (* 2 idx$1206))) (&& c$637 (= 53 (* 2 idx$1206))) (&& c$639 (= 54 (* 2 idx$1206))) (&& c$641 (= 55 (* 2 idx$1206))) (&& c$643 (= 56 (* 2 idx$1206))) (&& c$645 (= 57 (* 2 idx$1206))) (&& c$647 (= 58 (* 2 idx$1206))) (&& c$649 (= 59 (* 2 idx$1206))) (&& c$651 (= 60 (* 2 idx$1206))) (&& c$653 (= 61 (* 2 idx$1206))) (&& c$655 (= 62 (* 2 idx$1206))) (&& c$657 (= 63 (* 2 idx$1206)))) (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653))) (ite (|| (= 1 (+ 1 (* 2 idx$1206))) (&& c$535 (= 2 (+ 1 (* 2 idx$1206)))) (&& c$537 (= 3 (+ 1 (* 2 idx$1206)))) (&& c$539 (= 4 (+ 1 (* 2 idx$1206)))) (&& c$541 (= 5 (+ 1 (* 2 idx$1206)))) (&& c$543 (= 6 (+ 1 (* 2 idx$1206)))) (&& c$545 (= 7 (+ 1 (* 2 idx$1206)))) (&& c$547 (= 8 (+ 1 (* 2 idx$1206)))) (&& c$549 (= 9 (+ 1 (* 2 idx$1206)))) (&& c$551 (= 10 (+ 1 (* 2 idx$1206)))) (&& c$553 (= 11 (+ 1 (* 2 idx$1206)))) (&& c$555 (= 12 (+ 1 (* 2 idx$1206)))) (&& c$557 (= 13 (+ 1 (* 2 idx$1206)))) (&& c$559 (= 14 (+ 1 (* 2 idx$1206)))) (&& c$561 (= 15 (+ 1 (* 2 idx$1206)))) (&& c$563 (= 16 (+ 1 (* 2 idx$1206)))) (&& c$565 (= 17 (+ 1 (* 2 idx$1206)))) (&& c$567 (= 18 (+ 1 (* 2 idx$1206)))) (&& c$569 (= 19 (+ 1 (* 2 idx$1206)))) (&& c$571 (= 20 (+ 1 (* 2 idx$1206)))) (&& c$573 (= 21 (+ 1 (* 2 idx$1206)))) (&& c$575 (= 22 (+ 1 (* 2 idx$1206)))) (&& c$577 (= 23 (+ 1 (* 2 idx$1206)))) (&& c$579 (= 24 (+ 1 (* 2 idx$1206)))) (&& c$581 (= 25 (+ 1 (* 2 idx$1206)))) (&& c$583 (= 26 (+ 1 (* 2 idx$1206)))) (&& c$585 (= 27 (+ 1 (* 2 idx$1206)))) (&& c$587 (= 28 (+ 1 (* 2 idx$1206)))) (&& c$589 (= 29 (+ 1 (* 2 idx$1206)))) (&& c$591 (= 30 (+ 1 (* 2 idx$1206)))) (&& c$593 (= 31 (+ 1 (* 2 idx$1206)))) (&& c$595 (= 32 (+ 1 (* 2 idx$1206)))) (&& c$597 (= 33 (+ 1 (* 2 idx$1206)))) (&& c$599 (= 34 (+ 1 (* 2 idx$1206)))) (&& c$601 (= 35 (+ 1 (* 2 idx$1206)))) (&& c$603 (= 36 (+ 1 (* 2 idx$1206)))) (&& c$605 (= 37 (+ 1 (* 2 idx$1206)))) (&& c$607 (= 38 (+ 1 (* 2 idx$1206)))) (&& c$609 (= 39 (+ 1 (* 2 idx$1206)))) (&& c$611 (= 40 (+ 1 (* 2 idx$1206)))) (&& c$613 (= 41 (+ 1 (* 2 idx$1206)))) (&& c$615 (= 42 (+ 1 (* 2 idx$1206)))) (&& c$617 (= 43 (+ 1 (* 2 idx$1206)))) (&& c$619 (= 44 (+ 1 (* 2 idx$1206)))) (&& c$621 (= 45 (+ 1 (* 2 idx$1206)))) (&& c$623 (= 46 (+ 1 (* 2 idx$1206)))) (&& c$625 (= 47 (+ 1 (* 2 idx$1206)))) (&& c$627 (= 48 (+ 1 (* 2 idx$1206)))) (&& c$629 (= 49 (+ 1 (* 2 idx$1206)))) (&& c$631 (= 50 (+ 1 (* 2 idx$1206)))) (&& c$633 (= 51 (+ 1 (* 2 idx$1206)))) (&& c$635 (= 52 (+ 1 (* 2 idx$1206)))) (&& c$637 (= 53 (+ 1 (* 2 idx$1206)))) (&& c$639 (= 54 (+ 1 (* 2 idx$1206)))) (&& c$641 (= 55 (+ 1 (* 2 idx$1206)))) (&& c$643 (= 56 (+ 1 (* 2 idx$1206)))) (&& c$645 (= 57 (+ 1 (* 2 idx$1206)))) (&& c$647 (= 58 (+ 1 (* 2 idx$1206)))) (&& c$649 (= 59 (+ 1 (* 2 idx$1206)))) (&& c$651 (= 60 (+ 1 (* 2 idx$1206)))) (&& c$653 (= 61 (+ 1 (* 2 idx$1206)))) (&& c$655 (= 62 (+ 1 (* 2 idx$1206)))) (&& c$657 (= 63 (+ 1 (* 2 idx$1206))))) (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$2011 (bvadd (ite x?$2010 (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (ite x?$2012 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2012 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite x?$2010 (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2012 (bv #x00000000 32) (bv #x00000001 32))))) (ite x?$2010 (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2012 (bv #x00000000 32) (bv #x00000001 32)))))))) (ite x?$2011 (bvadd (ite x?$2010 (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (ite x?$2012 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2012 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite x?$2010 (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2012 (bv #x00000000 32) (bv #x00000001 32))))) (ite x?$2010 (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2012 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)))))) (ite (bvsle (ite x?$2010 (bvadd (ite c$1205 (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (ite (|| (= 1 (* 2 idx$1204)) (&& c$535 (= 2 (* 2 idx$1204))) (&& c$537 (= 3 (* 2 idx$1204))) (&& c$539 (= 4 (* 2 idx$1204))) (&& c$541 (= 5 (* 2 idx$1204))) (&& c$543 (= 6 (* 2 idx$1204))) (&& c$545 (= 7 (* 2 idx$1204))) (&& c$547 (= 8 (* 2 idx$1204))) (&& c$549 (= 9 (* 2 idx$1204))) (&& c$551 (= 10 (* 2 idx$1204))) (&& c$553 (= 11 (* 2 idx$1204))) (&& c$555 (= 12 (* 2 idx$1204))) (&& c$557 (= 13 (* 2 idx$1204))) (&& c$559 (= 14 (* 2 idx$1204))) (&& c$561 (= 15 (* 2 idx$1204))) (&& c$563 (= 16 (* 2 idx$1204))) (&& c$565 (= 17 (* 2 idx$1204))) (&& c$567 (= 18 (* 2 idx$1204))) (&& c$569 (= 19 (* 2 idx$1204))) (&& c$571 (= 20 (* 2 idx$1204))) (&& c$573 (= 21 (* 2 idx$1204))) (&& c$575 (= 22 (* 2 idx$1204))) (&& c$577 (= 23 (* 2 idx$1204))) (&& c$579 (= 24 (* 2 idx$1204))) (&& c$581 (= 25 (* 2 idx$1204))) (&& c$583 (= 26 (* 2 idx$1204))) (&& c$585 (= 27 (* 2 idx$1204))) (&& c$587 (= 28 (* 2 idx$1204))) (&& c$589 (= 29 (* 2 idx$1204))) (&& c$591 (= 30 (* 2 idx$1204))) (&& c$593 (= 31 (* 2 idx$1204))) (&& c$595 (= 32 (* 2 idx$1204))) (&& c$597 (= 33 (* 2 idx$1204))) (&& c$599 (= 34 (* 2 idx$1204))) (&& c$601 (= 35 (* 2 idx$1204))) (&& c$603 (= 36 (* 2 idx$1204))) (&& c$605 (= 37 (* 2 idx$1204))) (&& c$607 (= 38 (* 2 idx$1204))) (&& c$609 (= 39 (* 2 idx$1204))) (&& c$611 (= 40 (* 2 idx$1204))) (&& c$613 (= 41 (* 2 idx$1204))) (&& c$615 (= 42 (* 2 idx$1204))) (&& c$617 (= 43 (* 2 idx$1204))) (&& c$619 (= 44 (* 2 idx$1204))) (&& c$621 (= 45 (* 2 idx$1204))) (&& c$623 (= 46 (* 2 idx$1204))) (&& c$625 (= 47 (* 2 idx$1204))) (&& c$627 (= 48 (* 2 idx$1204))) (&& c$629 (= 49 (* 2 idx$1204))) (&& c$631 (= 50 (* 2 idx$1204))) (&& c$633 (= 51 (* 2 idx$1204))) (&& c$635 (= 52 (* 2 idx$1204))) (&& c$637 (= 53 (* 2 idx$1204))) (&& c$639 (= 54 (* 2 idx$1204))) (&& c$641 (= 55 (* 2 idx$1204))) (&& c$643 (= 56 (* 2 idx$1204))) (&& c$645 (= 57 (* 2 idx$1204))) (&& c$647 (= 58 (* 2 idx$1204))) (&& c$649 (= 59 (* 2 idx$1204))) (&& c$651 (= 60 (* 2 idx$1204))) (&& c$653 (= 61 (* 2 idx$1204))) (&& c$655 (= 62 (* 2 idx$1204))) (&& c$657 (= 63 (* 2 idx$1204)))) (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653))) (ite (|| (= 1 (+ 1 (* 2 idx$1204))) (&& c$535 (= 2 (+ 1 (* 2 idx$1204)))) (&& c$537 (= 3 (+ 1 (* 2 idx$1204)))) (&& c$539 (= 4 (+ 1 (* 2 idx$1204)))) (&& c$541 (= 5 (+ 1 (* 2 idx$1204)))) (&& c$543 (= 6 (+ 1 (* 2 idx$1204)))) (&& c$545 (= 7 (+ 1 (* 2 idx$1204)))) (&& c$547 (= 8 (+ 1 (* 2 idx$1204)))) (&& c$549 (= 9 (+ 1 (* 2 idx$1204)))) (&& c$551 (= 10 (+ 1 (* 2 idx$1204)))) (&& c$553 (= 11 (+ 1 (* 2 idx$1204)))) (&& c$555 (= 12 (+ 1 (* 2 idx$1204)))) (&& c$557 (= 13 (+ 1 (* 2 idx$1204)))) (&& c$559 (= 14 (+ 1 (* 2 idx$1204)))) (&& c$561 (= 15 (+ 1 (* 2 idx$1204)))) (&& c$563 (= 16 (+ 1 (* 2 idx$1204)))) (&& c$565 (= 17 (+ 1 (* 2 idx$1204)))) (&& c$567 (= 18 (+ 1 (* 2 idx$1204)))) (&& c$569 (= 19 (+ 1 (* 2 idx$1204)))) (&& c$571 (= 20 (+ 1 (* 2 idx$1204)))) (&& c$573 (= 21 (+ 1 (* 2 idx$1204)))) (&& c$575 (= 22 (+ 1 (* 2 idx$1204)))) (&& c$577 (= 23 (+ 1 (* 2 idx$1204)))) (&& c$579 (= 24 (+ 1 (* 2 idx$1204)))) (&& c$581 (= 25 (+ 1 (* 2 idx$1204)))) (&& c$583 (= 26 (+ 1 (* 2 idx$1204)))) (&& c$585 (= 27 (+ 1 (* 2 idx$1204)))) (&& c$587 (= 28 (+ 1 (* 2 idx$1204)))) (&& c$589 (= 29 (+ 1 (* 2 idx$1204)))) (&& c$591 (= 30 (+ 1 (* 2 idx$1204)))) (&& c$593 (= 31 (+ 1 (* 2 idx$1204)))) (&& c$595 (= 32 (+ 1 (* 2 idx$1204)))) (&& c$597 (= 33 (+ 1 (* 2 idx$1204)))) (&& c$599 (= 34 (+ 1 (* 2 idx$1204)))) (&& c$601 (= 35 (+ 1 (* 2 idx$1204)))) (&& c$603 (= 36 (+ 1 (* 2 idx$1204)))) (&& c$605 (= 37 (+ 1 (* 2 idx$1204)))) (&& c$607 (= 38 (+ 1 (* 2 idx$1204)))) (&& c$609 (= 39 (+ 1 (* 2 idx$1204)))) (&& c$611 (= 40 (+ 1 (* 2 idx$1204)))) (&& c$613 (= 41 (+ 1 (* 2 idx$1204)))) (&& c$615 (= 42 (+ 1 (* 2 idx$1204)))) (&& c$617 (= 43 (+ 1 (* 2 idx$1204)))) (&& c$619 (= 44 (+ 1 (* 2 idx$1204)))) (&& c$621 (= 45 (+ 1 (* 2 idx$1204)))) (&& c$623 (= 46 (+ 1 (* 2 idx$1204)))) (&& c$625 (= 47 (+ 1 (* 2 idx$1204)))) (&& c$627 (= 48 (+ 1 (* 2 idx$1204)))) (&& c$629 (= 49 (+ 1 (* 2 idx$1204)))) (&& c$631 (= 50 (+ 1 (* 2 idx$1204)))) (&& c$633 (= 51 (+ 1 (* 2 idx$1204)))) (&& c$635 (= 52 (+ 1 (* 2 idx$1204)))) (&& c$637 (= 53 (+ 1 (* 2 idx$1204)))) (&& c$639 (= 54 (+ 1 (* 2 idx$1204)))) (&& c$641 (= 55 (+ 1 (* 2 idx$1204)))) (&& c$643 (= 56 (+ 1 (* 2 idx$1204)))) (&& c$645 (= 57 (+ 1 (* 2 idx$1204)))) (&& c$647 (= 58 (+ 1 (* 2 idx$1204)))) (&& c$649 (= 59 (+ 1 (* 2 idx$1204)))) (&& c$651 (= 60 (+ 1 (* 2 idx$1204)))) (&& c$653 (= 61 (+ 1 (* 2 idx$1204)))) (&& c$655 (= 62 (+ 1 (* 2 idx$1204)))) (&& c$657 (= 63 (+ 1 (* 2 idx$1204))))) (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653))))) (ite c$1207 (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (ite (|| (= 1 (* 2 idx$1206)) (&& c$535 (= 2 (* 2 idx$1206))) (&& c$537 (= 3 (* 2 idx$1206))) (&& c$539 (= 4 (* 2 idx$1206))) (&& c$541 (= 5 (* 2 idx$1206))) (&& c$543 (= 6 (* 2 idx$1206))) (&& c$545 (= 7 (* 2 idx$1206))) (&& c$547 (= 8 (* 2 idx$1206))) (&& c$549 (= 9 (* 2 idx$1206))) (&& c$551 (= 10 (* 2 idx$1206))) (&& c$553 (= 11 (* 2 idx$1206))) (&& c$555 (= 12 (* 2 idx$1206))) (&& c$557 (= 13 (* 2 idx$1206))) (&& c$559 (= 14 (* 2 idx$1206))) (&& c$561 (= 15 (* 2 idx$1206))) (&& c$563 (= 16 (* 2 idx$1206))) (&& c$565 (= 17 (* 2 idx$1206))) (&& c$567 (= 18 (* 2 idx$1206))) (&& c$569 (= 19 (* 2 idx$1206))) (&& c$571 (= 20 (* 2 idx$1206))) (&& c$573 (= 21 (* 2 idx$1206))) (&& c$575 (= 22 (* 2 idx$1206))) (&& c$577 (= 23 (* 2 idx$1206))) (&& c$579 (= 24 (* 2 idx$1206))) (&& c$581 (= 25 (* 2 idx$1206))) (&& c$583 (= 26 (* 2 idx$1206))) (&& c$585 (= 27 (* 2 idx$1206))) (&& c$587 (= 28 (* 2 idx$1206))) (&& c$589 (= 29 (* 2 idx$1206))) (&& c$591 (= 30 (* 2 idx$1206))) (&& c$593 (= 31 (* 2 idx$1206))) (&& c$595 (= 32 (* 2 idx$1206))) (&& c$597 (= 33 (* 2 idx$1206))) (&& c$599 (= 34 (* 2 idx$1206))) (&& c$601 (= 35 (* 2 idx$1206))) (&& c$603 (= 36 (* 2 idx$1206))) (&& c$605 (= 37 (* 2 idx$1206))) (&& c$607 (= 38 (* 2 idx$1206))) (&& c$609 (= 39 (* 2 idx$1206))) (&& c$611 (= 40 (* 2 idx$1206))) (&& c$613 (= 41 (* 2 idx$1206))) (&& c$615 (= 42 (* 2 idx$1206))) (&& c$617 (= 43 (* 2 idx$1206))) (&& c$619 (= 44 (* 2 idx$1206))) (&& c$621 (= 45 (* 2 idx$1206))) (&& c$623 (= 46 (* 2 idx$1206))) (&& c$625 (= 47 (* 2 idx$1206))) (&& c$627 (= 48 (* 2 idx$1206))) (&& c$629 (= 49 (* 2 idx$1206))) (&& c$631 (= 50 (* 2 idx$1206))) (&& c$633 (= 51 (* 2 idx$1206))) (&& c$635 (= 52 (* 2 idx$1206))) (&& c$637 (= 53 (* 2 idx$1206))) (&& c$639 (= 54 (* 2 idx$1206))) (&& c$641 (= 55 (* 2 idx$1206))) (&& c$643 (= 56 (* 2 idx$1206))) (&& c$645 (= 57 (* 2 idx$1206))) (&& c$647 (= 58 (* 2 idx$1206))) (&& c$649 (= 59 (* 2 idx$1206))) (&& c$651 (= 60 (* 2 idx$1206))) (&& c$653 (= 61 (* 2 idx$1206))) (&& c$655 (= 62 (* 2 idx$1206))) (&& c$657 (= 63 (* 2 idx$1206)))) (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653))) (ite (|| (= 1 (+ 1 (* 2 idx$1206))) (&& c$535 (= 2 (+ 1 (* 2 idx$1206)))) (&& c$537 (= 3 (+ 1 (* 2 idx$1206)))) (&& c$539 (= 4 (+ 1 (* 2 idx$1206)))) (&& c$541 (= 5 (+ 1 (* 2 idx$1206)))) (&& c$543 (= 6 (+ 1 (* 2 idx$1206)))) (&& c$545 (= 7 (+ 1 (* 2 idx$1206)))) (&& c$547 (= 8 (+ 1 (* 2 idx$1206)))) (&& c$549 (= 9 (+ 1 (* 2 idx$1206)))) (&& c$551 (= 10 (+ 1 (* 2 idx$1206)))) (&& c$553 (= 11 (+ 1 (* 2 idx$1206)))) (&& c$555 (= 12 (+ 1 (* 2 idx$1206)))) (&& c$557 (= 13 (+ 1 (* 2 idx$1206)))) (&& c$559 (= 14 (+ 1 (* 2 idx$1206)))) (&& c$561 (= 15 (+ 1 (* 2 idx$1206)))) (&& c$563 (= 16 (+ 1 (* 2 idx$1206)))) (&& c$565 (= 17 (+ 1 (* 2 idx$1206)))) (&& c$567 (= 18 (+ 1 (* 2 idx$1206)))) (&& c$569 (= 19 (+ 1 (* 2 idx$1206)))) (&& c$571 (= 20 (+ 1 (* 2 idx$1206)))) (&& c$573 (= 21 (+ 1 (* 2 idx$1206)))) (&& c$575 (= 22 (+ 1 (* 2 idx$1206)))) (&& c$577 (= 23 (+ 1 (* 2 idx$1206)))) (&& c$579 (= 24 (+ 1 (* 2 idx$1206)))) (&& c$581 (= 25 (+ 1 (* 2 idx$1206)))) (&& c$583 (= 26 (+ 1 (* 2 idx$1206)))) (&& c$585 (= 27 (+ 1 (* 2 idx$1206)))) (&& c$587 (= 28 (+ 1 (* 2 idx$1206)))) (&& c$589 (= 29 (+ 1 (* 2 idx$1206)))) (&& c$591 (= 30 (+ 1 (* 2 idx$1206)))) (&& c$593 (= 31 (+ 1 (* 2 idx$1206)))) (&& c$595 (= 32 (+ 1 (* 2 idx$1206)))) (&& c$597 (= 33 (+ 1 (* 2 idx$1206)))) (&& c$599 (= 34 (+ 1 (* 2 idx$1206)))) (&& c$601 (= 35 (+ 1 (* 2 idx$1206)))) (&& c$603 (= 36 (+ 1 (* 2 idx$1206)))) (&& c$605 (= 37 (+ 1 (* 2 idx$1206)))) (&& c$607 (= 38 (+ 1 (* 2 idx$1206)))) (&& c$609 (= 39 (+ 1 (* 2 idx$1206)))) (&& c$611 (= 40 (+ 1 (* 2 idx$1206)))) (&& c$613 (= 41 (+ 1 (* 2 idx$1206)))) (&& c$615 (= 42 (+ 1 (* 2 idx$1206)))) (&& c$617 (= 43 (+ 1 (* 2 idx$1206)))) (&& c$619 (= 44 (+ 1 (* 2 idx$1206)))) (&& c$621 (= 45 (+ 1 (* 2 idx$1206)))) (&& c$623 (= 46 (+ 1 (* 2 idx$1206)))) (&& c$625 (= 47 (+ 1 (* 2 idx$1206)))) (&& c$627 (= 48 (+ 1 (* 2 idx$1206)))) (&& c$629 (= 49 (+ 1 (* 2 idx$1206)))) (&& c$631 (= 50 (+ 1 (* 2 idx$1206)))) (&& c$633 (= 51 (+ 1 (* 2 idx$1206)))) (&& c$635 (= 52 (+ 1 (* 2 idx$1206)))) (&& c$637 (= 53 (+ 1 (* 2 idx$1206)))) (&& c$639 (= 54 (+ 1 (* 2 idx$1206)))) (&& c$641 (= 55 (+ 1 (* 2 idx$1206)))) (&& c$643 (= 56 (+ 1 (* 2 idx$1206)))) (&& c$645 (= 57 (+ 1 (* 2 idx$1206)))) (&& c$647 (= 58 (+ 1 (* 2 idx$1206)))) (&& c$649 (= 59 (+ 1 (* 2 idx$1206)))) (&& c$651 (= 60 (+ 1 (* 2 idx$1206)))) (&& c$653 (= 61 (+ 1 (* 2 idx$1206)))) (&& c$655 (= 62 (+ 1 (* 2 idx$1206)))) (&& c$657 (= 63 (+ 1 (* 2 idx$1206))))) (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$2011 (bvadd (ite x?$2010 (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (ite x?$2012 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2012 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite x?$2010 (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2012 (bv #x00000000 32) (bv #x00000001 32))))) (ite x?$2010 (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2012 (bv #x00000000 32) (bv #x00000001 32)))))))) (ite x?$2011 (bvadd (ite x?$2010 (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (ite x?$2012 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2012 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite x?$2010 (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2012 (bv #x00000000 32) (bv #x00000001 32))))) (ite x?$2010 (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2012 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32))))) (ite x?$2010 (bvadd (ite c$1205 (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (ite (|| (= 1 (* 2 idx$1204)) (&& c$535 (= 2 (* 2 idx$1204))) (&& c$537 (= 3 (* 2 idx$1204))) (&& c$539 (= 4 (* 2 idx$1204))) (&& c$541 (= 5 (* 2 idx$1204))) (&& c$543 (= 6 (* 2 idx$1204))) (&& c$545 (= 7 (* 2 idx$1204))) (&& c$547 (= 8 (* 2 idx$1204))) (&& c$549 (= 9 (* 2 idx$1204))) (&& c$551 (= 10 (* 2 idx$1204))) (&& c$553 (= 11 (* 2 idx$1204))) (&& c$555 (= 12 (* 2 idx$1204))) (&& c$557 (= 13 (* 2 idx$1204))) (&& c$559 (= 14 (* 2 idx$1204))) (&& c$561 (= 15 (* 2 idx$1204))) (&& c$563 (= 16 (* 2 idx$1204))) (&& c$565 (= 17 (* 2 idx$1204))) (&& c$567 (= 18 (* 2 idx$1204))) (&& c$569 (= 19 (* 2 idx$1204))) (&& c$571 (= 20 (* 2 idx$1204))) (&& c$573 (= 21 (* 2 idx$1204))) (&& c$575 (= 22 (* 2 idx$1204))) (&& c$577 (= 23 (* 2 idx$1204))) (&& c$579 (= 24 (* 2 idx$1204))) (&& c$581 (= 25 (* 2 idx$1204))) (&& c$583 (= 26 (* 2 idx$1204))) (&& c$585 (= 27 (* 2 idx$1204))) (&& c$587 (= 28 (* 2 idx$1204))) (&& c$589 (= 29 (* 2 idx$1204))) (&& c$591 (= 30 (* 2 idx$1204))) (&& c$593 (= 31 (* 2 idx$1204))) (&& c$595 (= 32 (* 2 idx$1204))) (&& c$597 (= 33 (* 2 idx$1204))) (&& c$599 (= 34 (* 2 idx$1204))) (&& c$601 (= 35 (* 2 idx$1204))) (&& c$603 (= 36 (* 2 idx$1204))) (&& c$605 (= 37 (* 2 idx$1204))) (&& c$607 (= 38 (* 2 idx$1204))) (&& c$609 (= 39 (* 2 idx$1204))) (&& c$611 (= 40 (* 2 idx$1204))) (&& c$613 (= 41 (* 2 idx$1204))) (&& c$615 (= 42 (* 2 idx$1204))) (&& c$617 (= 43 (* 2 idx$1204))) (&& c$619 (= 44 (* 2 idx$1204))) (&& c$621 (= 45 (* 2 idx$1204))) (&& c$623 (= 46 (* 2 idx$1204))) (&& c$625 (= 47 (* 2 idx$1204))) (&& c$627 (= 48 (* 2 idx$1204))) (&& c$629 (= 49 (* 2 idx$1204))) (&& c$631 (= 50 (* 2 idx$1204))) (&& c$633 (= 51 (* 2 idx$1204))) (&& c$635 (= 52 (* 2 idx$1204))) (&& c$637 (= 53 (* 2 idx$1204))) (&& c$639 (= 54 (* 2 idx$1204))) (&& c$641 (= 55 (* 2 idx$1204))) (&& c$643 (= 56 (* 2 idx$1204))) (&& c$645 (= 57 (* 2 idx$1204))) (&& c$647 (= 58 (* 2 idx$1204))) (&& c$649 (= 59 (* 2 idx$1204))) (&& c$651 (= 60 (* 2 idx$1204))) (&& c$653 (= 61 (* 2 idx$1204))) (&& c$655 (= 62 (* 2 idx$1204))) (&& c$657 (= 63 (* 2 idx$1204)))) (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653))) (ite (|| (= 1 (+ 1 (* 2 idx$1204))) (&& c$535 (= 2 (+ 1 (* 2 idx$1204)))) (&& c$537 (= 3 (+ 1 (* 2 idx$1204)))) (&& c$539 (= 4 (+ 1 (* 2 idx$1204)))) (&& c$541 (= 5 (+ 1 (* 2 idx$1204)))) (&& c$543 (= 6 (+ 1 (* 2 idx$1204)))) (&& c$545 (= 7 (+ 1 (* 2 idx$1204)))) (&& c$547 (= 8 (+ 1 (* 2 idx$1204)))) (&& c$549 (= 9 (+ 1 (* 2 idx$1204)))) (&& c$551 (= 10 (+ 1 (* 2 idx$1204)))) (&& c$553 (= 11 (+ 1 (* 2 idx$1204)))) (&& c$555 (= 12 (+ 1 (* 2 idx$1204)))) (&& c$557 (= 13 (+ 1 (* 2 idx$1204)))) (&& c$559 (= 14 (+ 1 (* 2 idx$1204)))) (&& c$561 (= 15 (+ 1 (* 2 idx$1204)))) (&& c$563 (= 16 (+ 1 (* 2 idx$1204)))) (&& c$565 (= 17 (+ 1 (* 2 idx$1204)))) (&& c$567 (= 18 (+ 1 (* 2 idx$1204)))) (&& c$569 (= 19 (+ 1 (* 2 idx$1204)))) (&& c$571 (= 20 (+ 1 (* 2 idx$1204)))) (&& c$573 (= 21 (+ 1 (* 2 idx$1204)))) (&& c$575 (= 22 (+ 1 (* 2 idx$1204)))) (&& c$577 (= 23 (+ 1 (* 2 idx$1204)))) (&& c$579 (= 24 (+ 1 (* 2 idx$1204)))) (&& c$581 (= 25 (+ 1 (* 2 idx$1204)))) (&& c$583 (= 26 (+ 1 (* 2 idx$1204)))) (&& c$585 (= 27 (+ 1 (* 2 idx$1204)))) (&& c$587 (= 28 (+ 1 (* 2 idx$1204)))) (&& c$589 (= 29 (+ 1 (* 2 idx$1204)))) (&& c$591 (= 30 (+ 1 (* 2 idx$1204)))) (&& c$593 (= 31 (+ 1 (* 2 idx$1204)))) (&& c$595 (= 32 (+ 1 (* 2 idx$1204)))) (&& c$597 (= 33 (+ 1 (* 2 idx$1204)))) (&& c$599 (= 34 (+ 1 (* 2 idx$1204)))) (&& c$601 (= 35 (+ 1 (* 2 idx$1204)))) (&& c$603 (= 36 (+ 1 (* 2 idx$1204)))) (&& c$605 (= 37 (+ 1 (* 2 idx$1204)))) (&& c$607 (= 38 (+ 1 (* 2 idx$1204)))) (&& c$609 (= 39 (+ 1 (* 2 idx$1204)))) (&& c$611 (= 40 (+ 1 (* 2 idx$1204)))) (&& c$613 (= 41 (+ 1 (* 2 idx$1204)))) (&& c$615 (= 42 (+ 1 (* 2 idx$1204)))) (&& c$617 (= 43 (+ 1 (* 2 idx$1204)))) (&& c$619 (= 44 (+ 1 (* 2 idx$1204)))) (&& c$621 (= 45 (+ 1 (* 2 idx$1204)))) (&& c$623 (= 46 (+ 1 (* 2 idx$1204)))) (&& c$625 (= 47 (+ 1 (* 2 idx$1204)))) (&& c$627 (= 48 (+ 1 (* 2 idx$1204)))) (&& c$629 (= 49 (+ 1 (* 2 idx$1204)))) (&& c$631 (= 50 (+ 1 (* 2 idx$1204)))) (&& c$633 (= 51 (+ 1 (* 2 idx$1204)))) (&& c$635 (= 52 (+ 1 (* 2 idx$1204)))) (&& c$637 (= 53 (+ 1 (* 2 idx$1204)))) (&& c$639 (= 54 (+ 1 (* 2 idx$1204)))) (&& c$641 (= 55 (+ 1 (* 2 idx$1204)))) (&& c$643 (= 56 (+ 1 (* 2 idx$1204)))) (&& c$645 (= 57 (+ 1 (* 2 idx$1204)))) (&& c$647 (= 58 (+ 1 (* 2 idx$1204)))) (&& c$649 (= 59 (+ 1 (* 2 idx$1204)))) (&& c$651 (= 60 (+ 1 (* 2 idx$1204)))) (&& c$653 (= 61 (+ 1 (* 2 idx$1204)))) (&& c$655 (= 62 (+ 1 (* 2 idx$1204)))) (&& c$657 (= 63 (+ 1 (* 2 idx$1204))))) (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653))))) (ite c$1207 (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (ite (|| (= 1 (* 2 idx$1206)) (&& c$535 (= 2 (* 2 idx$1206))) (&& c$537 (= 3 (* 2 idx$1206))) (&& c$539 (= 4 (* 2 idx$1206))) (&& c$541 (= 5 (* 2 idx$1206))) (&& c$543 (= 6 (* 2 idx$1206))) (&& c$545 (= 7 (* 2 idx$1206))) (&& c$547 (= 8 (* 2 idx$1206))) (&& c$549 (= 9 (* 2 idx$1206))) (&& c$551 (= 10 (* 2 idx$1206))) (&& c$553 (= 11 (* 2 idx$1206))) (&& c$555 (= 12 (* 2 idx$1206))) (&& c$557 (= 13 (* 2 idx$1206))) (&& c$559 (= 14 (* 2 idx$1206))) (&& c$561 (= 15 (* 2 idx$1206))) (&& c$563 (= 16 (* 2 idx$1206))) (&& c$565 (= 17 (* 2 idx$1206))) (&& c$567 (= 18 (* 2 idx$1206))) (&& c$569 (= 19 (* 2 idx$1206))) (&& c$571 (= 20 (* 2 idx$1206))) (&& c$573 (= 21 (* 2 idx$1206))) (&& c$575 (= 22 (* 2 idx$1206))) (&& c$577 (= 23 (* 2 idx$1206))) (&& c$579 (= 24 (* 2 idx$1206))) (&& c$581 (= 25 (* 2 idx$1206))) (&& c$583 (= 26 (* 2 idx$1206))) (&& c$585 (= 27 (* 2 idx$1206))) (&& c$587 (= 28 (* 2 idx$1206))) (&& c$589 (= 29 (* 2 idx$1206))) (&& c$591 (= 30 (* 2 idx$1206))) (&& c$593 (= 31 (* 2 idx$1206))) (&& c$595 (= 32 (* 2 idx$1206))) (&& c$597 (= 33 (* 2 idx$1206))) (&& c$599 (= 34 (* 2 idx$1206))) (&& c$601 (= 35 (* 2 idx$1206))) (&& c$603 (= 36 (* 2 idx$1206))) (&& c$605 (= 37 (* 2 idx$1206))) (&& c$607 (= 38 (* 2 idx$1206))) (&& c$609 (= 39 (* 2 idx$1206))) (&& c$611 (= 40 (* 2 idx$1206))) (&& c$613 (= 41 (* 2 idx$1206))) (&& c$615 (= 42 (* 2 idx$1206))) (&& c$617 (= 43 (* 2 idx$1206))) (&& c$619 (= 44 (* 2 idx$1206))) (&& c$621 (= 45 (* 2 idx$1206))) (&& c$623 (= 46 (* 2 idx$1206))) (&& c$625 (= 47 (* 2 idx$1206))) (&& c$627 (= 48 (* 2 idx$1206))) (&& c$629 (= 49 (* 2 idx$1206))) (&& c$631 (= 50 (* 2 idx$1206))) (&& c$633 (= 51 (* 2 idx$1206))) (&& c$635 (= 52 (* 2 idx$1206))) (&& c$637 (= 53 (* 2 idx$1206))) (&& c$639 (= 54 (* 2 idx$1206))) (&& c$641 (= 55 (* 2 idx$1206))) (&& c$643 (= 56 (* 2 idx$1206))) (&& c$645 (= 57 (* 2 idx$1206))) (&& c$647 (= 58 (* 2 idx$1206))) (&& c$649 (= 59 (* 2 idx$1206))) (&& c$651 (= 60 (* 2 idx$1206))) (&& c$653 (= 61 (* 2 idx$1206))) (&& c$655 (= 62 (* 2 idx$1206))) (&& c$657 (= 63 (* 2 idx$1206)))) (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653))) (ite (|| (= 1 (+ 1 (* 2 idx$1206))) (&& c$535 (= 2 (+ 1 (* 2 idx$1206)))) (&& c$537 (= 3 (+ 1 (* 2 idx$1206)))) (&& c$539 (= 4 (+ 1 (* 2 idx$1206)))) (&& c$541 (= 5 (+ 1 (* 2 idx$1206)))) (&& c$543 (= 6 (+ 1 (* 2 idx$1206)))) (&& c$545 (= 7 (+ 1 (* 2 idx$1206)))) (&& c$547 (= 8 (+ 1 (* 2 idx$1206)))) (&& c$549 (= 9 (+ 1 (* 2 idx$1206)))) (&& c$551 (= 10 (+ 1 (* 2 idx$1206)))) (&& c$553 (= 11 (+ 1 (* 2 idx$1206)))) (&& c$555 (= 12 (+ 1 (* 2 idx$1206)))) (&& c$557 (= 13 (+ 1 (* 2 idx$1206)))) (&& c$559 (= 14 (+ 1 (* 2 idx$1206)))) (&& c$561 (= 15 (+ 1 (* 2 idx$1206)))) (&& c$563 (= 16 (+ 1 (* 2 idx$1206)))) (&& c$565 (= 17 (+ 1 (* 2 idx$1206)))) (&& c$567 (= 18 (+ 1 (* 2 idx$1206)))) (&& c$569 (= 19 (+ 1 (* 2 idx$1206)))) (&& c$571 (= 20 (+ 1 (* 2 idx$1206)))) (&& c$573 (= 21 (+ 1 (* 2 idx$1206)))) (&& c$575 (= 22 (+ 1 (* 2 idx$1206)))) (&& c$577 (= 23 (+ 1 (* 2 idx$1206)))) (&& c$579 (= 24 (+ 1 (* 2 idx$1206)))) (&& c$581 (= 25 (+ 1 (* 2 idx$1206)))) (&& c$583 (= 26 (+ 1 (* 2 idx$1206)))) (&& c$585 (= 27 (+ 1 (* 2 idx$1206)))) (&& c$587 (= 28 (+ 1 (* 2 idx$1206)))) (&& c$589 (= 29 (+ 1 (* 2 idx$1206)))) (&& c$591 (= 30 (+ 1 (* 2 idx$1206)))) (&& c$593 (= 31 (+ 1 (* 2 idx$1206)))) (&& c$595 (= 32 (+ 1 (* 2 idx$1206)))) (&& c$597 (= 33 (+ 1 (* 2 idx$1206)))) (&& c$599 (= 34 (+ 1 (* 2 idx$1206)))) (&& c$601 (= 35 (+ 1 (* 2 idx$1206)))) (&& c$603 (= 36 (+ 1 (* 2 idx$1206)))) (&& c$605 (= 37 (+ 1 (* 2 idx$1206)))) (&& c$607 (= 38 (+ 1 (* 2 idx$1206)))) (&& c$609 (= 39 (+ 1 (* 2 idx$1206)))) (&& c$611 (= 40 (+ 1 (* 2 idx$1206)))) (&& c$613 (= 41 (+ 1 (* 2 idx$1206)))) (&& c$615 (= 42 (+ 1 (* 2 idx$1206)))) (&& c$617 (= 43 (+ 1 (* 2 idx$1206)))) (&& c$619 (= 44 (+ 1 (* 2 idx$1206)))) (&& c$621 (= 45 (+ 1 (* 2 idx$1206)))) (&& c$623 (= 46 (+ 1 (* 2 idx$1206)))) (&& c$625 (= 47 (+ 1 (* 2 idx$1206)))) (&& c$627 (= 48 (+ 1 (* 2 idx$1206)))) (&& c$629 (= 49 (+ 1 (* 2 idx$1206)))) (&& c$631 (= 50 (+ 1 (* 2 idx$1206)))) (&& c$633 (= 51 (+ 1 (* 2 idx$1206)))) (&& c$635 (= 52 (+ 1 (* 2 idx$1206)))) (&& c$637 (= 53 (+ 1 (* 2 idx$1206)))) (&& c$639 (= 54 (+ 1 (* 2 idx$1206)))) (&& c$641 (= 55 (+ 1 (* 2 idx$1206)))) (&& c$643 (= 56 (+ 1 (* 2 idx$1206)))) (&& c$645 (= 57 (+ 1 (* 2 idx$1206)))) (&& c$647 (= 58 (+ 1 (* 2 idx$1206)))) (&& c$649 (= 59 (+ 1 (* 2 idx$1206)))) (&& c$651 (= 60 (+ 1 (* 2 idx$1206)))) (&& c$653 (= 61 (+ 1 (* 2 idx$1206)))) (&& c$655 (= 62 (+ 1 (* 2 idx$1206)))) (&& c$657 (= 63 (+ 1 (* 2 idx$1206))))) (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$2011 (bvadd (ite x?$2010 (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (ite x?$2012 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2012 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite x?$2010 (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2012 (bv #x00000000 32) (bv #x00000001 32))))) (ite x?$2010 (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2012 (bv #x00000000 32) (bv #x00000001 32)))))))) (ite x?$2011 (bvadd (ite x?$2010 (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (ite x?$2012 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2012 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite x?$2010 (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2012 (bv #x00000000 32) (bv #x00000001 32))))) (ite x?$2010 (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2012 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32))))) (bvadd (bv #x80000000 32) (bvneg (ite (bvsle (ite x?$2011 (bvadd (ite x?$2010 (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (ite x?$2012 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2012 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite x?$2010 (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2012 (bv #x00000000 32) (bv #x00000001 32))))) (ite x?$2010 (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2012 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)) (ite x?$2011 (bvadd (ite x?$2010 (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (ite x?$2012 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$2012 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (ite x?$2010 (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2012 (bv #x00000000 32) (bv #x00000001 32))))) (ite x?$2010 (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2012 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32))))))) ...))))
Ran synthesizer for 3082 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-add
  (vec-mul
   (vec-cast
    (load
     (buffer column_sums_b 'uint32)
     (ramp
      (sca-add (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16) 16)
      1
      16)
     (aligned 16 0))
    'int32
    16)
   (sca-broadcast (int32_t t5829) 16))
  (vec-add
   (load
    (buffer bias 'int32)
    (ramp (sca-mul output.s0.x.x 16) 1 16)
    (aligned 16 0))
   (sca-broadcast
    (sca-add
     (sca-mul
      (sca-mul (int32_t t5829) (int32_t t5830))
      (int32_t mat_a.extent.0))
     (sca-mul (int32_t t5830) (int32_t t6653)))
    16)))
 (vec-cast
  (load
   (buffer multiplied_no_offsets 'uint32)
   (ramp
    (sca-add (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121)) 4)
    1
    16)
   (aligned 4 0))
  'int32
  16))
template:
  (vs-mpy-add
 ...
 (combine
  (vs-mpy-add
   ...
   (combine
    (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
    (vs-mpy-add
     ...
     (combine
      #<load-data>
      (broadcast
       ...
       (sca-add
        (sca-mul
         (sca-mul (int32_t t5829) (int32_t t5830))
         (int32_t mat_a.extent.0))
        (sca-mul (int32_t t5830) (int32_t t6653)))))
     (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
     #f
     #f
     #f
     'int32))
   (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
   #f
   #f
   #f
   'int32)
  (cast ... #<load-data> 'int32 #f))
 (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
 #f
 #f
 #f
 'int32)
axioms:
  '(#t #t)
optimized-halide-expr:
  (vec-add #<abstr-halide-expr> #<abstr-halide-expr>)
optimized-template:
  (vs-mpy-add
 ...
 (combine #<abstr-expr> #<abstr-expr>)
 (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
 #f
 #f
 #f
 'int32)
optimized Halide 0:
  (int32_t (bvadd (app abstr-vals$2142 0) (app abstr-vals$2143 0)))
optimized x86 0:
  (int32_t
 (bvadd (ite c$2015 (app abstr-vals$2142 idx$2014) (app abstr-vals$2143 idx$2014)) (ite c$2017 (app abstr-vals$2142 idx$2016) (app abstr-vals$2143 idx$2016))))
Ran synthesizer for 105 ms
(model
 [idx$2014 0]
 [c$2015 #f]
 [idx$2016 0]
 [c$2017 #t])
(vec-add #<abstr-halide-expr> #<abstr-halide-expr>)
(vs-mpy-add
 ...
 (combine
  (vs-mpy-add
   ...
   (combine
    (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
    (vs-mpy-add
     ...
     (combine
      #<load-data>
      (broadcast
       ...
       (sca-add
        (sca-mul
         (sca-mul (int32_t t5829) (int32_t t5830))
         (int32_t mat_a.extent.0))
        (sca-mul (int32_t t5830) (int32_t t6653)))))
     (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
     #f
     #f
     #f
     'int32))
   (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
   #f
   #f
   #f
   'int32)
  (cast ... #<load-data> 'int32 #f))
 (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
 #f
 #f
 #f
 'int32)
Ran bounds analysis for 50 ms
Ran bounds analysis for 41 ms
"Extended success?"
#t
(vs-mpy-add
 ...
 (combine
  (vs-mpy-add
   ...
   (combine
    (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
    (vs-mpy-add
     ...
     (combine
      #<load-data>
      (broadcast
       ...
       (sca-add
        (sca-mul
         (sca-mul (int32_t t5829) (int32_t t5830))
         (int32_t mat_a.extent.0))
        (sca-mul (int32_t t5830) (int32_t t6653)))))
     (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
     #f
     #f
     #f
     'int32))
   (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
   #f
   #f
   #f
   'int32)
  (cast ... #<load-data> 'int32 #f))
 (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
 #f
 #f
 #f
 'int32)
"Building Expr:"
(vec-cast
 (vec-add
  (vec-add
   (vec-mul
    (vec-cast
     (load
      (buffer column_sums_b 'uint32)
      (ramp
       (sca-add (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16) 16)
       1
       16)
      (aligned 16 0))
     'int32
     16)
    (sca-broadcast (int32_t t5829) 16))
   (vec-add
    (load
     (buffer bias 'int32)
     (ramp (sca-mul output.s0.x.x 16) 1 16)
     (aligned 16 0))
    (sca-broadcast
     (sca-add
      (sca-mul
       (sca-mul (int32_t t5829) (int32_t t5830))
       (int32_t mat_a.extent.0))
      (sca-mul (int32_t t5830) (int32_t t6653)))
     16)))
  (vec-cast
   (load
    (buffer multiplied_no_offsets 'uint32)
    (ramp
     (sca-add (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121)) 4)
     1
     16)
    (aligned 4 0))
   'int32
   16))
 'int64
 16)
"Fold templates"
(list
 (vs-mpy-add
  ...
  (combine
   (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
   (vs-mpy-add
    ...
    (combine
     #<load-data>
     (broadcast
      ...
      (sca-add
       (sca-mul
        (sca-mul (int32_t t5829) (int32_t t5830))
        (int32_t mat_a.extent.0))
       (sca-mul (int32_t t5830) (int32_t t6653)))))
    (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
    #f
    #f
    #f
    'int32))
  (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
  x?$2150
  x?$2151
  x?$2152
  'int32)
 (cast ... #<load-data> 'int64 x?$2154)
 (vs-mpy-add
  ...
  (combine
   (vs-mpy-add
    ...
    (combine
     (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
     (vs-mpy-add
      ...
      (combine
       #<load-data>
       (broadcast
        ...
        (sca-add
         (sca-mul
          (sca-mul (int32_t t5829) (int32_t t5830))
          (int32_t mat_a.extent.0))
         (sca-mul (int32_t t5830) (int32_t t6653)))))
      (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
      #f
      #f
      #f
      'int32))
    (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
    #f
    #f
    #f
    'int32)
   (cast ... #<load-data> 'int32 #f))
  (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
  x?$2146
  x?$2147
  x?$2148
  'int32))
here(#(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<load-data> (#(struct:int32_t t5829)) #f #f #f int32) #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-add #(struct:sca-mul #(struct:sca-mul #(struct:int32_t t5829) #(struct:int32_t t5830)) #(struct:int32_t mat_a.extent.0)) #(struct:sca-mul #(struct:int32_t t5830) #(struct:int32_t t6653))))> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32)> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) x?$2150 x?$2151 x?$2152 int32) #(struct:cast ... #<load-data> int64 x?$2154) #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<load-data> (#(struct:int32_t t5829)) #f #f #f int32) #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-add #(struct:sca-mul #(struct:sca-mul #(struct:int32_t t5829) #(struct:int32_t t5830)) #(struct:int32_t mat_a.extent.0)) #(struct:sca-mul #(struct:int32_t t5830) #(struct:int32_t t6653))))> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32)> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32) #(struct:cast ... #<load-data> int32 #f)> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) x?$2146 x?$2147 x?$2148 int32))

"Replace templates"
(list (cast ... #<load-data> 'int64 #f))
run-x86-synthesizer
halide-expr:
  (vec-cast
 (vec-add
  (vec-add
   (vec-mul
    (vec-cast
     (load
      (buffer column_sums_b 'uint32)
      (ramp
       (sca-add (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16) 16)
       1
       16)
      (aligned 16 0))
     'int32
     16)
    (sca-broadcast (int32_t t5829) 16))
   (vec-add
    (load
     (buffer bias 'int32)
     (ramp (sca-mul output.s0.x.x 16) 1 16)
     (aligned 16 0))
    (sca-broadcast
     (sca-add
      (sca-mul
       (sca-mul (int32_t t5829) (int32_t t5830))
       (int32_t mat_a.extent.0))
      (sca-mul (int32_t t5830) (int32_t t6653)))
     16)))
  (vec-cast
   (load
    (buffer multiplied_no_offsets 'uint32)
    (ramp
     (sca-add (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121)) 4)
     1
     16)
    (aligned 4 0))
   'int32
   16))
 'int64
 16)
template:
  (cast ... #<load-data> 'int64 x?$2154)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-cast
 (vec-add
  (vec-add
   (vec-mul
    (vec-cast
     (load
      (buffer column_sums_b 'uint32)
      (ramp
       (sca-add (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16) 16)
       1
       16)
      (aligned 16 0))
     'int32
     16)
    (sca-broadcast (int32_t t5829) 16))
   (vec-add
    (load
     (buffer bias 'int32)
     (ramp (sca-mul output.s0.x.x 16) 1 16)
     (aligned 16 0))
    (sca-broadcast
     (sca-add
      (sca-mul
       (sca-mul (int32_t t5829) (int32_t t5830))
       (int32_t mat_a.extent.0))
      (sca-mul (int32_t t5830) (int32_t t6653)))
     16)))
  (vec-cast #<abstr-halide-expr> 'int32 16))
 'int64
 16)
optimized-template:
  (cast ... #<abstr-expr> 'int64 x?$2154)
optimized Halide 0:
  (int64_t
 (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app abstr-vals$2155 0)) (bitvector 64)))
optimized x86 0:
  (int64_t (zero-extend (app abstr-vals$2155 0) (bitvector 64)))
run-x86-synthesizer
halide-expr:
  (vec-cast
 (vec-add
  (vec-add
   (vec-mul
    (vec-cast
     (load
      (buffer column_sums_b 'uint32)
      (ramp
       (sca-add (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16) 16)
       1
       16)
      (aligned 16 0))
     'int32
     16)
    (sca-broadcast (int32_t t5829) 16))
   (vec-add
    (load
     (buffer bias 'int32)
     (ramp (sca-mul output.s0.x.x 16) 1 16)
     (aligned 16 0))
    (sca-broadcast
     (sca-add
      (sca-mul
       (sca-mul (int32_t t5829) (int32_t t5830))
       (int32_t mat_a.extent.0))
      (sca-mul (int32_t t5830) (int32_t t6653)))
     16)))
  (vec-cast
   (load
    (buffer multiplied_no_offsets 'uint32)
    (ramp
     (sca-add (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121)) 4)
     1
     16)
    (aligned 4 0))
   'int32
   16))
 'int64
 16)
template:
  (cast ... #<load-data> 'int64 #f)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-cast
 (vec-add
  (vec-add
   (vec-mul
    (vec-cast
     (load
      (buffer column_sums_b 'uint32)
      (ramp
       (sca-add (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16) 16)
       1
       16)
      (aligned 16 0))
     'int32
     16)
    (sca-broadcast (int32_t t5829) 16))
   (vec-add
    (load
     (buffer bias 'int32)
     (ramp (sca-mul output.s0.x.x 16) 1 16)
     (aligned 16 0))
    (sca-broadcast
     (sca-add
      (sca-mul
       (sca-mul (int32_t t5829) (int32_t t5830))
       (int32_t mat_a.extent.0))
      (sca-mul (int32_t t5830) (int32_t t6653)))
     16)))
  (vec-cast #<abstr-halide-expr> 'int32 16))
 'int64
 16)
optimized-template:
  (cast ... #<abstr-expr> 'int64 #f)
optimized Halide 0:
  (int64_t
 (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app abstr-vals$2156 0)) (bitvector 64)))
optimized x86 0:
  (int64_t (zero-extend (app abstr-vals$2156 0) (bitvector 64)))
run-x86-synthesizer
halide-expr:
  (vec-cast
 (vec-add
  (vec-add
   (vec-mul
    (vec-cast
     (load
      (buffer column_sums_b 'uint32)
      (ramp
       (sca-add (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16) 16)
       1
       16)
      (aligned 16 0))
     'int32
     16)
    (sca-broadcast (int32_t t5829) 16))
   (vec-add
    (load
     (buffer bias 'int32)
     (ramp (sca-mul output.s0.x.x 16) 1 16)
     (aligned 16 0))
    (sca-broadcast
     (sca-add
      (sca-mul
       (sca-mul (int32_t t5829) (int32_t t5830))
       (int32_t mat_a.extent.0))
      (sca-mul (int32_t t5830) (int32_t t6653)))
     16)))
  (vec-cast
   (load
    (buffer multiplied_no_offsets 'uint32)
    (ramp
     (sca-add (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121)) 4)
     1
     16)
    (aligned 4 0))
   'int32
   16))
 'int64
 16)
template:
  (vs-mpy-add
 ...
 (combine
  (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
  (vs-mpy-add
   ...
   (combine
    #<load-data>
    (broadcast
     ...
     (sca-add
      (sca-mul
       (sca-mul (int32_t t5829) (int32_t t5830))
       (int32_t mat_a.extent.0))
      (sca-mul (int32_t t5830) (int32_t t6653)))))
   (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
   #f
   #f
   #f
   'int32))
 (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
 x?$2150
 x?$2151
 x?$2152
 'int32)
axioms:
  '(#t #t)
optimized-halide-expr:
  (vec-cast
 (vec-add
  (vec-add #<abstr-halide-expr> #<abstr-halide-expr>)
  (vec-cast
   (load
    (buffer multiplied_no_offsets 'uint32)
    (ramp
     (sca-add (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121)) 4)
     1
     16)
    (aligned 4 0))
   'int32
   16))
 'int64
 16)
optimized-template:
  (vs-mpy-add
 ...
 (combine #<abstr-expr> #<abstr-expr>)
 (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
 x?$2150
 x?$2151
 x?$2152
 'int32)
optimized Halide 0:
  (int64_t
 (sign-extend (bvadd (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4)))))) (bvadd (app abstr-vals$2157 0) (app abstr-vals$2158 0))) (bitvector 64)))
optimized x86 0:
  (int32_t
 (ite* (⊢ (&& (! x?$2152) (! (&& x?$2150 x?$2152))) (ite x?$2150 (bvadd (ite x?$2150 (bvadd (ite x?$2151 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (app abstr-vals$2158 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2151 (bv #x00000001 32) (bv #x00000000 32))))) (app abstr-vals$2158 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2151 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (app abstr-vals$2158 0) (ite x?$2151 (bv #x00000001 32) (bv #x00000000 32)))) (ite (bvsle (bvadd (bv #x80000000 32) (bvneg (ite (bvsle (ite x?$2150 (bvadd (ite x?$2151 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (app abstr-vals$2158 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2151 (bv #x00000001 32) (bv #x00000000 32))))) (app abstr-vals$2158 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2151 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (app abstr-vals$2158 0) (ite x?$2151 (bv #x00000001 32) (bv #x00000000 32)))) (bv #x00000000 32)) (ite x?$2150 (bvadd (ite x?$2151 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (app abstr-vals$2158 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2151 (bv #x00000001 32) (bv #x00000000 32))))) (app abstr-vals$2158 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2151 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (app abstr-vals$2158 0) (ite x?$2151 (bv #x00000001 32) (bv #x00000000 32)))) (bv #x00000000 32)))) (ite (bvsle (app abstr-vals$2157 0) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$2150 (bvadd (ite x?$2151 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (app abstr-vals$2158 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2151 (bv #x00000001 32) (bv #x00000000 32))))) (app abstr-vals$2158 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2151 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (app abstr-vals$2158 0) (ite x?$2151 (bv #x00000001 32) (bv #x00000000 32))))) (ite x?$2150 (bvadd (ite x?$2151 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (app abstr-vals$2158 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2151 (bv #x00000001 32) (bv #x00000000 32))))) (app abstr-vals$2158 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2151 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (app abstr-vals$2158 0) (ite x?$2151 (bv #x00000001 32) (bv #x00000000 32)))) (bv #x00000000 32))))) (app abstr-vals$2157 0) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$2150 (bvadd (ite x?$2151 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (app abstr-vals$2158 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2151 (bv #x00000001 32) (bv #x00000000 32))))) (app abstr-vals$2158 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2151 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (app abstr-vals$2158 0) (ite x?$2151 (bv #x00000001 32) (bv #x00000000 32))))) (ite x?$2150 (bvadd (ite x?$2151 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (app abstr-vals$2158 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2151 (bv #x00000001 32) (bv #x00000000 32))))) (app abstr-vals$2158 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2151 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (app abstr-vals$2158 0) (ite x?$2151 (bv #x00000001 32) (bv #x00000000 32)))) (bv #x00000000 32)))))) (ite (bvsle (app abstr-vals$2157 0) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$2150 (bvadd (ite x?$2151 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (app abstr-vals$2158 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2151 (bv #x00000001 32) (bv #x00000000 32))))) (app abstr-vals$2158 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2151 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (app abstr-vals$2158 0) (ite x?$2151 (bv #x00000001 32) (bv #x00000000 32))))) (ite x?$2150 (bvadd (ite x?$2151 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (app abstr-vals$2158 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2151 (bv #x00000001 32) (bv #x00000000 32))))) (app abstr-vals$2158 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2151 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (app abstr-vals$2158 0) (ite x?$2151 (bv #x00000001 32) (bv #x00000000 32)))) (bv #x00000000 32))))) (app abstr-vals$2157 0) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$2150 (bvadd (ite x?$2151 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (app abstr-vals$2158 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2151 (bv #x00000001 32) (bv #x00000000 32))))) (app abstr-vals$2158 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2151 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (app abstr-vals$2158 0) (ite x?$2151 (bv #x00000001 32) (bv #x00000000 32))))) (ite x?$2150 (bvadd (ite x?$2151 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (app abstr-vals$2158 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2151 (bv #x00000001 32) (bv #x00000000 32))))) (app abstr-vals$2158 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2151 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (app abstr-vals$2158 0) (ite x?$2151 (bv #x00000001 32) (bv #x00000000 32)))) (bv #x00000000 32))))) (bvadd (bv #x80000000 32) (bvneg (ite (bvsle (ite x?$2150 (bvadd (ite x?$2151 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (app abstr-vals$2158 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2151 (bv #x00000001 32) (bv #x00000000 32))))) (app abstr-vals$2158 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2151 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (app abstr-vals$2158 0) (ite x?$2151 (bv #x00000001 32) (bv #x00000000 32)))) (bv #x00000000 32)) (ite x?$2150 (bvadd (ite x?$2151 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (app abstr-vals$2158 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2151 (bv #x00000001 32) (bv #x00000000 32))))) (app abstr-vals$2158 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2151 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (app abstr-vals$2158 0) (ite x?$2151 (bv #x00000001 32) (bv #x00000000 32)))) (bv #x00000000 32)))))) (bvadd (app abstr-vals$2157 0) (ite x?$2150 (bvadd (ite x?$2151 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (app abstr-vals$2158 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2151 (bv #x00000001 32) (bv #x00000000 32))))) (app abstr-vals$2158 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2151 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (app abstr-vals$2158 0) (ite x?$2151 (bv #x00000001 32) (bv #x00000000 32))))))) (⊢ (|| (&& x?$2150 x?$2152) (&& x?$2152 (! (&& x?$2150 x?$2152)))) (bvashr (ite x?$2150 (bvadd (ite x?$2150 (bvadd (ite x?$2151 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (app abstr-vals$2158 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2151 (bv #x00000001 32) (bv #x00000000 32))))) (app abstr-vals$2158 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2151 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (app abstr-vals$2158 0) (ite x?$2151 (bv #x00000001 32) (bv #x00000000 32)))) (ite (bvsle (bvadd (bv #x80000000 32) (bvneg (ite (bvsle (ite x?$2150 (bvadd (ite x?$2151 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (app abstr-vals$2158 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2151 (bv #x00000001 32) (bv #x00000000 32))))) (app abstr-vals$2158 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2151 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (app abstr-vals$2158 0) (ite x?$2151 (bv #x00000001 32) (bv #x00000000 32)))) (bv #x00000000 32)) (ite x?$2150 (bvadd (ite x?$2151 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (app abstr-vals$2158 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2151 (bv #x00000001 32) (bv #x00000000 32))))) (app abstr-vals$2158 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2151 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (app abstr-vals$2158 0) (ite x?$2151 (bv #x00000001 32) (bv #x00000000 32)))) (bv #x00000000 32)))) (ite (bvsle (app abstr-vals$2157 0) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$2150 (bvadd (ite x?$2151 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (app abstr-vals$2158 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2151 (bv #x00000001 32) (bv #x00000000 32))))) (app abstr-vals$2158 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2151 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (app abstr-vals$2158 0) (ite x?$2151 (bv #x00000001 32) (bv #x00000000 32))))) (ite x?$2150 (bvadd (ite x?$2151 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (app abstr-vals$2158 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2151 (bv #x00000001 32) (bv #x00000000 32))))) (app abstr-vals$2158 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2151 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (app abstr-vals$2158 0) (ite x?$2151 (bv #x00000001 32) (bv #x00000000 32)))) (bv #x00000000 32))))) (app abstr-vals$2157 0) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$2150 (bvadd (ite x?$2151 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (app abstr-vals$2158 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2151 (bv #x00000001 32) (bv #x00000000 32))))) (app abstr-vals$2158 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2151 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (app abstr-vals$2158 0) (ite x?$2151 (bv #x00000001 32) (bv #x00000000 32))))) (ite x?$2150 (bvadd (ite x?$2151 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (app abstr-vals$2158 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2151 (bv #x00000001 32) (bv #x00000000 32))))) (app abstr-vals$2158 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2151 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (app abstr-vals$2158 0) (ite x?$2151 (bv #x00000001 32) (bv #x00000000 32)))) (bv #x00000000 32)))))) (ite (bvsle (app abstr-vals$2157 0) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$2150 (bvadd (ite x?$2151 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (app abstr-vals$2158 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2151 (bv #x00000001 32) (bv #x00000000 32))))) (app abstr-vals$2158 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2151 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (app abstr-vals$2158 0) (ite x?$2151 (bv #x00000001 32) (bv #x00000000 32))))) (ite x?$2150 (bvadd (ite x?$2151 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (app abstr-vals$2158 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2151 (bv #x00000001 32) (bv #x00000000 32))))) (app abstr-vals$2158 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2151 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (app abstr-vals$2158 0) (ite x?$2151 (bv #x00000001 32) (bv #x00000000 32)))) (bv #x00000000 32))))) (app abstr-vals$2157 0) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$2150 (bvadd (ite x?$2151 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (app abstr-vals$2158 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2151 (bv #x00000001 32) (bv #x00000000 32))))) (app abstr-vals$2158 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2151 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (app abstr-vals$2158 0) (ite x?$2151 (bv #x00000001 32) (bv #x00000000 32))))) (ite x?$2150 (bvadd (ite x?$2151 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (app abstr-vals$2158 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2151 (bv #x00000001 32) (bv #x00000000 32))))) (app abstr-vals$2158 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2151 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (app abstr-vals$2158 0) (ite x?$2151 (bv #x00000001 32) (bv #x00000000 32)))) (bv #x00000000 32))))) (bvadd (bv #x80000000 32) (bvneg (ite (bvsle (ite x?$2150 (bvadd (ite x?$2151 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (app abstr-vals$2158 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2151 (bv #x00000001 32) (bv #x00000000 32))))) (app abstr-vals$2158 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2151 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (app abstr-vals$2158 0) (ite x?$2151 (bv #x00000001 32) (bv #x00000000 32)))) (bv #x00000000 32)) (ite x?$2150 (bvadd (ite x?$2151 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (app abstr-vals$2158 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2151 (bv #x00000001 32) (bv #x00000000 32))))) (app abstr-vals$2158 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2151 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (app abstr-vals$2158 0) (ite x?$2151 (bv #x00000001 32) (bv #x00000000 32)))) (bv #x00000000 32)))))) (bvadd (app abstr-vals$2157 0) (ite x?$2150 (bvadd (ite x?$2151 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (app abstr-vals$2158 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2151 (bv #x00000001 32) (bv #x00000000 32))))) (app abstr-vals$2158 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2151 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (app abstr-vals$2158 0) (ite x?$2151 (bv #x00000001 32) (bv #x00000000 32)))))) (bv #x00000001 32)))))
run-x86-synthesizer
halide-expr:
  (vec-cast
 (vec-add
  (vec-add
   (vec-mul
    (vec-cast
     (load
      (buffer column_sums_b 'uint32)
      (ramp
       (sca-add (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16) 16)
       1
       16)
      (aligned 16 0))
     'int32
     16)
    (sca-broadcast (int32_t t5829) 16))
   (vec-add
    (load
     (buffer bias 'int32)
     (ramp (sca-mul output.s0.x.x 16) 1 16)
     (aligned 16 0))
    (sca-broadcast
     (sca-add
      (sca-mul
       (sca-mul (int32_t t5829) (int32_t t5830))
       (int32_t mat_a.extent.0))
      (sca-mul (int32_t t5830) (int32_t t6653)))
     16)))
  (vec-cast
   (load
    (buffer multiplied_no_offsets 'uint32)
    (ramp
     (sca-add (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121)) 4)
     1
     16)
    (aligned 4 0))
   'int32
   16))
 'int64
 16)
template:
  (vs-mpy-add
 ...
 (combine
  (vs-mpy-add
   ...
   (combine
    (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
    (vs-mpy-add
     ...
     (combine
      #<load-data>
      (broadcast
       ...
       (sca-add
        (sca-mul
         (sca-mul (int32_t t5829) (int32_t t5830))
         (int32_t mat_a.extent.0))
        (sca-mul (int32_t t5830) (int32_t t6653)))))
     (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
     #f
     #f
     #f
     'int32))
   (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
   #f
   #f
   #f
   'int32)
  (cast ... #<load-data> 'int32 #f))
 (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
 x?$2146
 x?$2147
 x?$2148
 'int32)
axioms:
  '(#t #t)
optimized-halide-expr:
  (vec-cast (vec-add #<abstr-halide-expr> #<abstr-halide-expr>) 'int64 16)
optimized-template:
  (vs-mpy-add
 ...
 (combine #<abstr-expr> #<abstr-expr>)
 (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
 x?$2146
 x?$2147
 x?$2148
 'int32)
optimized Halide 0:
  (int64_t
 (sign-extend (bvadd (app abstr-vals$2159 0) (app abstr-vals$2160 0)) (bitvector 64)))
optimized x86 0:
  (int32_t
 (ite* (⊢ (&& (! x?$2148) (! (&& x?$2146 x?$2148))) (ite x?$2146 (bvadd (ite x?$2146 (bvadd (ite x?$2147 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (app abstr-vals$2160 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2147 (bv #x00000001 32) (bv #x00000000 32))))) (app abstr-vals$2160 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2147 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (app abstr-vals$2160 0) (ite x?$2147 (bv #x00000001 32) (bv #x00000000 32)))) (ite (bvsle (bvadd (bv #x80000000 32) (bvneg (ite (bvsle (ite x?$2146 (bvadd (ite x?$2147 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (app abstr-vals$2160 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2147 (bv #x00000001 32) (bv #x00000000 32))))) (app abstr-vals$2160 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2147 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (app abstr-vals$2160 0) (ite x?$2147 (bv #x00000001 32) (bv #x00000000 32)))) (bv #x00000000 32)) (ite x?$2146 (bvadd (ite x?$2147 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (app abstr-vals$2160 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2147 (bv #x00000001 32) (bv #x00000000 32))))) (app abstr-vals$2160 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2147 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (app abstr-vals$2160 0) (ite x?$2147 (bv #x00000001 32) (bv #x00000000 32)))) (bv #x00000000 32)))) (ite (bvsle (app abstr-vals$2159 0) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$2146 (bvadd (ite x?$2147 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (app abstr-vals$2160 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2147 (bv #x00000001 32) (bv #x00000000 32))))) (app abstr-vals$2160 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2147 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (app abstr-vals$2160 0) (ite x?$2147 (bv #x00000001 32) (bv #x00000000 32))))) (ite x?$2146 (bvadd (ite x?$2147 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (app abstr-vals$2160 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2147 (bv #x00000001 32) (bv #x00000000 32))))) (app abstr-vals$2160 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2147 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (app abstr-vals$2160 0) (ite x?$2147 (bv #x00000001 32) (bv #x00000000 32)))) (bv #x00000000 32))))) (app abstr-vals$2159 0) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$2146 (bvadd (ite x?$2147 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (app abstr-vals$2160 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2147 (bv #x00000001 32) (bv #x00000000 32))))) (app abstr-vals$2160 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2147 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (app abstr-vals$2160 0) (ite x?$2147 (bv #x00000001 32) (bv #x00000000 32))))) (ite x?$2146 (bvadd (ite x?$2147 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (app abstr-vals$2160 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2147 (bv #x00000001 32) (bv #x00000000 32))))) (app abstr-vals$2160 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2147 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (app abstr-vals$2160 0) (ite x?$2147 (bv #x00000001 32) (bv #x00000000 32)))) (bv #x00000000 32)))))) (ite (bvsle (app abstr-vals$2159 0) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$2146 (bvadd (ite x?$2147 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (app abstr-vals$2160 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2147 (bv #x00000001 32) (bv #x00000000 32))))) (app abstr-vals$2160 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2147 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (app abstr-vals$2160 0) (ite x?$2147 (bv #x00000001 32) (bv #x00000000 32))))) (ite x?$2146 (bvadd (ite x?$2147 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (app abstr-vals$2160 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2147 (bv #x00000001 32) (bv #x00000000 32))))) (app abstr-vals$2160 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2147 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (app abstr-vals$2160 0) (ite x?$2147 (bv #x00000001 32) (bv #x00000000 32)))) (bv #x00000000 32))))) (app abstr-vals$2159 0) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$2146 (bvadd (ite x?$2147 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (app abstr-vals$2160 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2147 (bv #x00000001 32) (bv #x00000000 32))))) (app abstr-vals$2160 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2147 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (app abstr-vals$2160 0) (ite x?$2147 (bv #x00000001 32) (bv #x00000000 32))))) (ite x?$2146 (bvadd (ite x?$2147 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (app abstr-vals$2160 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2147 (bv #x00000001 32) (bv #x00000000 32))))) (app abstr-vals$2160 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2147 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (app abstr-vals$2160 0) (ite x?$2147 (bv #x00000001 32) (bv #x00000000 32)))) (bv #x00000000 32))))) (bvadd (bv #x80000000 32) (bvneg (ite (bvsle (ite x?$2146 (bvadd (ite x?$2147 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (app abstr-vals$2160 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2147 (bv #x00000001 32) (bv #x00000000 32))))) (app abstr-vals$2160 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2147 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (app abstr-vals$2160 0) (ite x?$2147 (bv #x00000001 32) (bv #x00000000 32)))) (bv #x00000000 32)) (ite x?$2146 (bvadd (ite x?$2147 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (app abstr-vals$2160 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2147 (bv #x00000001 32) (bv #x00000000 32))))) (app abstr-vals$2160 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2147 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (app abstr-vals$2160 0) (ite x?$2147 (bv #x00000001 32) (bv #x00000000 32)))) (bv #x00000000 32)))))) (bvadd (app abstr-vals$2159 0) (ite x?$2146 (bvadd (ite x?$2147 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (app abstr-vals$2160 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2147 (bv #x00000001 32) (bv #x00000000 32))))) (app abstr-vals$2160 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2147 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (app abstr-vals$2160 0) (ite x?$2147 (bv #x00000001 32) (bv #x00000000 32))))))) (⊢ (|| (&& x?$2146 x?$2148) (&& x?$2148 (! (&& x?$2146 x?$2148)))) (bvashr (ite x?$2146 (bvadd (ite x?$2146 (bvadd (ite x?$2147 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (app abstr-vals$2160 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2147 (bv #x00000001 32) (bv #x00000000 32))))) (app abstr-vals$2160 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2147 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (app abstr-vals$2160 0) (ite x?$2147 (bv #x00000001 32) (bv #x00000000 32)))) (ite (bvsle (bvadd (bv #x80000000 32) (bvneg (ite (bvsle (ite x?$2146 (bvadd (ite x?$2147 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (app abstr-vals$2160 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2147 (bv #x00000001 32) (bv #x00000000 32))))) (app abstr-vals$2160 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2147 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (app abstr-vals$2160 0) (ite x?$2147 (bv #x00000001 32) (bv #x00000000 32)))) (bv #x00000000 32)) (ite x?$2146 (bvadd (ite x?$2147 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (app abstr-vals$2160 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2147 (bv #x00000001 32) (bv #x00000000 32))))) (app abstr-vals$2160 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2147 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (app abstr-vals$2160 0) (ite x?$2147 (bv #x00000001 32) (bv #x00000000 32)))) (bv #x00000000 32)))) (ite (bvsle (app abstr-vals$2159 0) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$2146 (bvadd (ite x?$2147 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (app abstr-vals$2160 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2147 (bv #x00000001 32) (bv #x00000000 32))))) (app abstr-vals$2160 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2147 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (app abstr-vals$2160 0) (ite x?$2147 (bv #x00000001 32) (bv #x00000000 32))))) (ite x?$2146 (bvadd (ite x?$2147 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (app abstr-vals$2160 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2147 (bv #x00000001 32) (bv #x00000000 32))))) (app abstr-vals$2160 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2147 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (app abstr-vals$2160 0) (ite x?$2147 (bv #x00000001 32) (bv #x00000000 32)))) (bv #x00000000 32))))) (app abstr-vals$2159 0) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$2146 (bvadd (ite x?$2147 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (app abstr-vals$2160 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2147 (bv #x00000001 32) (bv #x00000000 32))))) (app abstr-vals$2160 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2147 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (app abstr-vals$2160 0) (ite x?$2147 (bv #x00000001 32) (bv #x00000000 32))))) (ite x?$2146 (bvadd (ite x?$2147 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (app abstr-vals$2160 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2147 (bv #x00000001 32) (bv #x00000000 32))))) (app abstr-vals$2160 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2147 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (app abstr-vals$2160 0) (ite x?$2147 (bv #x00000001 32) (bv #x00000000 32)))) (bv #x00000000 32)))))) (ite (bvsle (app abstr-vals$2159 0) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$2146 (bvadd (ite x?$2147 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (app abstr-vals$2160 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2147 (bv #x00000001 32) (bv #x00000000 32))))) (app abstr-vals$2160 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2147 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (app abstr-vals$2160 0) (ite x?$2147 (bv #x00000001 32) (bv #x00000000 32))))) (ite x?$2146 (bvadd (ite x?$2147 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (app abstr-vals$2160 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2147 (bv #x00000001 32) (bv #x00000000 32))))) (app abstr-vals$2160 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2147 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (app abstr-vals$2160 0) (ite x?$2147 (bv #x00000001 32) (bv #x00000000 32)))) (bv #x00000000 32))))) (app abstr-vals$2159 0) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$2146 (bvadd (ite x?$2147 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (app abstr-vals$2160 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2147 (bv #x00000001 32) (bv #x00000000 32))))) (app abstr-vals$2160 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2147 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (app abstr-vals$2160 0) (ite x?$2147 (bv #x00000001 32) (bv #x00000000 32))))) (ite x?$2146 (bvadd (ite x?$2147 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (app abstr-vals$2160 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2147 (bv #x00000001 32) (bv #x00000000 32))))) (app abstr-vals$2160 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2147 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (app abstr-vals$2160 0) (ite x?$2147 (bv #x00000001 32) (bv #x00000000 32)))) (bv #x00000000 32))))) (bvadd (bv #x80000000 32) (bvneg (ite (bvsle (ite x?$2146 (bvadd (ite x?$2147 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (app abstr-vals$2160 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2147 (bv #x00000001 32) (bv #x00000000 32))))) (app abstr-vals$2160 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2147 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (app abstr-vals$2160 0) (ite x?$2147 (bv #x00000001 32) (bv #x00000000 32)))) (bv #x00000000 32)) (ite x?$2146 (bvadd (ite x?$2147 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (app abstr-vals$2160 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2147 (bv #x00000001 32) (bv #x00000000 32))))) (app abstr-vals$2160 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2147 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (app abstr-vals$2160 0) (ite x?$2147 (bv #x00000001 32) (bv #x00000000 32)))) (bv #x00000000 32)))))) (bvadd (app abstr-vals$2159 0) (ite x?$2146 (bvadd (ite x?$2147 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (app abstr-vals$2160 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2147 (bv #x00000001 32) (bv #x00000000 32))))) (app abstr-vals$2160 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$2147 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (app abstr-vals$2160 0) (ite x?$2147 (bv #x00000001 32) (bv #x00000000 32)))))) (bv #x00000001 32)))))
Ran synthesizer for 3 ms
(unsat)
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (vec-cast
 (vec-add
  (vec-add
   (vec-mul
    (vec-cast
     (load
      (buffer column_sums_b 'uint32)
      (ramp
       (sca-add (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16) 16)
       1
       16)
      (aligned 16 0))
     'int32
     16)
    (sca-broadcast (int32_t t5829) 16))
   (vec-add
    (load
     (buffer bias 'int32)
     (ramp (sca-mul output.s0.x.x 16) 1 16)
     (aligned 16 0))
    (sca-broadcast
     (sca-add
      (sca-mul
       (sca-mul (int32_t t5829) (int32_t t5830))
       (int32_t mat_a.extent.0))
      (sca-mul (int32_t t5830) (int32_t t6653)))
     16)))
  (vec-cast
   (load
    (buffer multiplied_no_offsets 'uint32)
    (ramp
     (sca-add (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121)) 4)
     1
     16)
    (aligned 4 0))
   'int32
   16))
 'int64
 16)
template:
  (cast
 ...
 (vs-mpy-add
  ...
  (combine
   (vs-mpy-add
    ...
    (combine
     (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
     (vs-mpy-add
      ...
      (combine
       #<load-data>
       (broadcast
        ...
        (sca-add
         (sca-mul
          (sca-mul (int32_t t5829) (int32_t t5830))
          (int32_t mat_a.extent.0))
         (sca-mul (int32_t t5830) (int32_t t6653)))))
      (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
      #f
      #f
      #f
      'int32))
    (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
    #f
    #f
    #f
    'int32)
   (cast ... #<load-data> 'int32 #f))
  (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
  #f
  #f
  #f
  'int32)
 'int64
 #f)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-cast #<abstr-halide-expr> 'int64 16)
optimized-template:
  (cast ... #<abstr-expr> 'int64 #f)
optimized Halide 0:
  (int64_t (sign-extend (app abstr-vals$2161 0) (bitvector 64)))
optimized x86 0:
  (int64_t (sign-extend (app abstr-vals$2161 0) (bitvector 64)))
Ran synthesizer for 25 ms
(model)
(vec-cast #<abstr-halide-expr> 'int64 16)
(cast
 ...
 (vs-mpy-add
  ...
  (combine
   (vs-mpy-add
    ...
    (combine
     (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
     (vs-mpy-add
      ...
      (combine
       #<load-data>
       (broadcast
        ...
        (sca-add
         (sca-mul
          (sca-mul (int32_t t5829) (int32_t t5830))
          (int32_t mat_a.extent.0))
         (sca-mul (int32_t t5830) (int32_t t6653)))))
      (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
      #f
      #f
      #f
      'int32))
    (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
    #f
    #f
    #f
    'int32)
   (cast ... #<load-data> 'int32 #f))
  (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
  #f
  #f
  #f
  'int32)
 'int64
 #f)
Ran bounds analysis for 76 ms
Ran bounds analysis for 67 ms
"Extended success?"
#t
(cast
 ...
 (vs-mpy-add
  ...
  (combine
   (vs-mpy-add
    ...
    (combine
     (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
     (vs-mpy-add
      ...
      (combine
       #<load-data>
       (broadcast
        ...
        (sca-add
         (sca-mul
          (sca-mul (int32_t t5829) (int32_t t5830))
          (int32_t mat_a.extent.0))
         (sca-mul (int32_t t5830) (int32_t t6653)))))
      (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
      #f
      #f
      #f
      'int32))
    (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
    #f
    #f
    #f
    'int32)
   (cast ... #<load-data> 'int32 #f))
  (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
  #f
  #f
  #f
  'int32)
 'int64
 #f)
"Building Expr:"
(sca-broadcast (int32_t output_multiplier) 16)
"Fold templates"
'()
here()

"Replace templates"
'()
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (sca-broadcast (int32_t output_multiplier) 16)
template:
  (broadcast ... (int32_t output_multiplier))
axioms:
  '()
optimized-halide-expr:
  (sca-broadcast (int32_t output_multiplier) 16)
optimized-template:
  (broadcast ... (int32_t output_multiplier))
optimized Halide 0:
  (int32_t output_multiplier)
optimized x86 0:
  (int32_t output_multiplier)
Ran synthesizer for 23 ms
(model)
(sca-broadcast (int32_t output_multiplier) 16)
(broadcast ... (int32_t output_multiplier))
Ran bounds analysis for 46 ms
Ran bounds analysis for 36 ms
"Extended success?"
#t
(broadcast ... (int32_t output_multiplier))
"Building Expr:"
(vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16)
"Fold templates"
'()
here()

"Replace templates"
'()
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16)
template:
  (cast ... (broadcast ... (int32_t output_multiplier)) 'int64 #f)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-cast #<abstr-halide-expr> 'int64 16)
optimized-template:
  (cast ... #<abstr-expr> 'int64 #f)
optimized Halide 0:
  (int64_t (sign-extend (app abstr-vals$2163 0) (bitvector 64)))
optimized x86 0:
  (int64_t (sign-extend (app abstr-vals$2163 0) (bitvector 64)))
Ran synthesizer for 24 ms
(model)
(vec-cast #<abstr-halide-expr> 'int64 16)
(cast ... (broadcast ... (int32_t output_multiplier)) 'int64 #f)
Ran bounds analysis for 76 ms
Ran bounds analysis for 67 ms
"Extended success?"
#t
(cast ... (broadcast ... (int32_t output_multiplier)) 'int64 #f)
"Building Expr:"
(vec-mul
 (vec-cast
  (vec-add
   (vec-add
    (vec-mul
     (vec-cast
      (load
       (buffer column_sums_b 'uint32)
       (ramp
        (sca-add (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16) 16)
        1
        16)
       (aligned 16 0))
      'int32
      16)
     (sca-broadcast (int32_t t5829) 16))
    (vec-add
     (load
      (buffer bias 'int32)
      (ramp (sca-mul output.s0.x.x 16) 1 16)
      (aligned 16 0))
     (sca-broadcast
      (sca-add
       (sca-mul
        (sca-mul (int32_t t5829) (int32_t t5830))
        (int32_t mat_a.extent.0))
       (sca-mul (int32_t t5830) (int32_t t6653)))
      16)))
   (vec-cast
    (load
     (buffer multiplied_no_offsets 'uint32)
     (ramp
      (sca-add (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121)) 4)
      1
      16)
     (aligned 4 0))
    'int32
    16))
  'int64
  16)
 (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
"Fold templates"
(list
 (vs-mpy-add
  ...
  (combine
   (vs-mpy-add
    ...
    (combine
     (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
     (vs-mpy-add
      ...
      (combine
       #<load-data>
       (broadcast
        ...
        (sca-add
         (sca-mul
          (sca-mul (int32_t t5829) (int32_t t5830))
          (int32_t mat_a.extent.0))
         (sca-mul (int32_t t5830) (int32_t t6653)))))
      (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
      #f
      #f
      #f
      'int32))
    (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
    #f
    #f
    #f
    'int32)
   (cast ... #<load-data> 'int32 #f))
  (list
   (sca-mul
    (sca-cast (int8_t (bv #x01 8)) 'int32)
    (sca-cast
     (union [(&& (! xi?$2169) (! xi?$2170)) #(struct:int8_t (bv #x01 8))] [(|| xi?$2169 (&& xi?$2170 (! xi?$2169))) #(struct:int32_t
                                                                                                                      (ite* (⊢ xi?$2169 t5829) (⊢ (&& xi?$2170 (! xi?$2169)) output_multiplier)))])
     'int32))
   (sca-mul
    (sca-cast (int8_t (bv #x01 8)) 'int32)
    (sca-cast
     (union [(&& (! xi?$2169) (! xi?$2170)) #(struct:int8_t (bv #x01 8))] [(|| xi?$2169 (&& xi?$2170 (! xi?$2169))) #(struct:int32_t
                                                                                                                      (ite* (⊢ xi?$2169 t5829) (⊢ (&& xi?$2170 (! xi?$2169)) output_multiplier)))])
     'int32)))
  #f
  #f
  #f
  'int32)
 (vs-mpy-add
  ...
  (combine
   (vs-mpy-add
    ...
    (combine
     (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
     (vs-mpy-add
      ...
      (combine
       #<load-data>
       (broadcast
        ...
        (sca-add
         (sca-mul
          (sca-mul (int32_t t5829) (int32_t t5830))
          (int32_t mat_a.extent.0))
         (sca-mul (int32_t t5830) (int32_t t6653)))))
      (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
      #f
      #f
      #f
      'int32))
    (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
    #f
    #f
    #f
    'int32)
   (cast ... #<load-data> 'int32 #f))
  (list
   (sca-mul
    (sca-cast (int8_t (bv #x01 8)) 'int32)
    (sca-cast
     (union [(&& (! xi?$2169) (! xi?$2170)) #(struct:int8_t (bv #x01 8))] [(|| xi?$2169 (&& xi?$2170 (! xi?$2169))) #(struct:int32_t
                                                                                                                      (ite* (⊢ xi?$2169 t5829) (⊢ (&& xi?$2170 (! xi?$2169)) output_multiplier)))])
     'int32))
   (sca-mul
    (sca-cast (int8_t (bv #x01 8)) 'int32)
    (sca-cast
     (union [(&& (! xi?$2169) (! xi?$2170)) #(struct:int8_t (bv #x01 8))] [(|| xi?$2169 (&& xi?$2170 (! xi?$2169))) #(struct:int32_t
                                                                                                                      (ite* (⊢ xi?$2169 t5829) (⊢ (&& xi?$2170 (! xi?$2169)) output_multiplier)))])
     'int32)))
  #f
  #f
  #f
  'int64)
 (cast
  ...
  (vs-mpy-add
   ...
   (combine
    (vs-mpy-add
     ...
     (combine
      (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
      (vs-mpy-add
       ...
       (combine
        #<load-data>
        (broadcast
         ...
         (sca-add
          (sca-mul
           (sca-mul (int32_t t5829) (int32_t t5830))
           (int32_t mat_a.extent.0))
          (sca-mul (int32_t t5830) (int32_t t6653)))))
       (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
       #f
       #f
       #f
       'int32))
     (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
     #f
     #f
     #f
     'int32)
    (cast ... #<load-data> 'int32 #f))
   (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
   #f
   #f
   #f
   'int32)
  'int64
  x?$2165)
 (cast ... (broadcast ... (int32_t output_multiplier)) 'int64 x?$2171))
here(#(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<load-data> (#(struct:int32_t t5829)) #f #f #f int32) #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-add #(struct:sca-mul #(struct:sca-mul #(struct:int32_t t5829) #(struct:int32_t t5830)) #(struct:int32_t mat_a.extent.0)) #(struct:sca-mul #(struct:int32_t t5830) #(struct:int32_t t6653))))> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32)> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32) #(struct:cast ... #<load-data> int32 #f)> (#(struct:sca-mul #(struct:sca-cast #(struct:int8_t (bv #x01 8)) int32) #(struct:sca-cast (union #:size 2 #:hash 1413899288100) int32)) #(struct:sca-mul #(struct:sca-cast #(struct:int8_t (bv #x01 8)) int32) #(struct:sca-cast (union #:size 2 #:hash 1413899288100) int32))) #f #f #f int32) #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<load-data> (#(struct:int32_t t5829)) #f #f #f int32) #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-add #(struct:sca-mul #(struct:sca-mul #(struct:int32_t t5829) #(struct:int32_t t5830)) #(struct:int32_t mat_a.extent.0)) #(struct:sca-mul #(struct:int32_t t5830) #(struct:int32_t t6653))))> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32)> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32) #(struct:cast ... #<load-data> int32 #f)> (#(struct:sca-mul #(struct:sca-cast #(struct:int8_t (bv #x01 8)) int32) #(struct:sca-cast (union #:size 2 #:hash 1413899288100) int32)) #(struct:sca-mul #(struct:sca-cast #(struct:int8_t (bv #x01 8)) int32) #(struct:sca-cast (union #:size 2 #:hash 1413899288100) int32))) #f #f #f int64) #(struct:cast ... #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<load-data> (#(struct:int32_t t5829)) #f #f #f int32) #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-add #(struct:sca-mul #(struct:sca-mul #(struct:int32_t t5829) #(struct:int32_t t5830)) #(struct:int32_t mat_a.extent.0)) #(struct:sca-mul #(struct:int32_t t5830) #(struct:int32_t t6653))))> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32)> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32) #(struct:cast ... #<load-data> int32 #f)> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32) int64 x?$2165) #(struct:cast ... #(struct:broadcast ... #(struct:int32_t output_multiplier)) int64 x?$2171))

(list (vs-mpy-add ... (vs-mpy-add ... (combine (vs-mpy-add ... (combine (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32) (vs-mpy-add ... (combine #<load-data> (broadcast ... (sca-add (sca-mul (sca-mul (int32_t t5829) (int32_t t5830)) (int32_t mat_a.extent.0)) (sca-mul (int32_t t5830) (int32_t t6653))))) (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8))) #f #f #f 'int32)) (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8))) #f #f #f 'int32) (cast ... #<load-data> 'int32 #f)) (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8))) #f #f #f 'int32) (list (int32_t (ite x?$2364 t5829 output_multiplier))) #f #f #f 'int64) (vs-mpy-add ... #<load-data> (list (int32_t (ite x?$2365 t5829 output_multiplier))) #f #f #f 'int64) (vv-mpy-add ... (vs-mpy-add ... (combine (vs-mpy-add ... (combine (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32) (vs-mpy-add ... (combine #<load-data> (broadcast ... (sca-add (sca-mul (sca-mul (int32_t t5829) (int32_t t5830)) (int32_t mat_a.extent.0)) (sca-mul (int32_t t5830) (int32_t t6653))))) (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8))) #f #f #f 'int32)) (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8))) #f #f #f 'int32) (cast ... #<load-data> 'int32 #f)) (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8))) #f #f #f 'int32) '(1) (! x?$2366) (! x?$2367) (! x?$2368) 'int64) (vv-mpy-add ... #<load-data> '(1) (! x?$2369) (! x?$2370) (! x?$2371) 'int64))
(list (vs-mpy-add ... #<load-data> (list (int32_t (ite x?$2564 t5829 output_multiplier))) #f #f #f 'int64) (vs-mpy-add ... #<load-data> (list (int32_t (ite x?$2565 t5829 output_multiplier))) #f #f #f 'int64) (vv-mpy-add ... #<load-data> '(1) (! x?$2566) (! x?$2567) (! x?$2568) 'int64) (vv-mpy-add ... #<load-data> '(1) (! x?$2569) (! x?$2570) (! x?$2571) 'int64))
(list (vs-mpy-add ... (broadcast ... (int32_t output_multiplier)) (list (int32_t (ite x?$2764 t5829 output_multiplier))) #f #f #f 'int64) (vs-mpy-add ... #<load-data> (list (int32_t (ite x?$2765 t5829 output_multiplier))) #f #f #f 'int64) (vv-mpy-add ... (broadcast ... (int32_t output_multiplier)) '(1) (! x?$2766) (! x?$2767) (! x?$2768) 'int64) (vv-mpy-add ... #<load-data> '(1) (! x?$2769) (! x?$2770) (! x?$2771) 'int64))
"Replace templates"
(list
 (vs-mpy-add
  ...
  #<load-data>
  (list (int32_t (ite x?$2564 t5829 output_multiplier)))
  #f
  #f
  #f
  'int64)
 (vs-mpy-add
  ...
  #<load-data>
  (list (int32_t (ite x?$2565 t5829 output_multiplier)))
  #f
  #f
  #f
  'int64)
 (vv-mpy-add ... #<load-data> '(1) (! x?$2566) (! x?$2567) (! x?$2568) 'int64)
 (vv-mpy-add ... #<load-data> '(1) (! x?$2569) (! x?$2570) (! x?$2571) 'int64)
 (vs-mpy-add
  ...
  (vs-mpy-add
   ...
   (combine
    (vs-mpy-add
     ...
     (combine
      (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
      (vs-mpy-add
       ...
       (combine
        #<load-data>
        (broadcast
         ...
         (sca-add
          (sca-mul
           (sca-mul (int32_t t5829) (int32_t t5830))
           (int32_t mat_a.extent.0))
          (sca-mul (int32_t t5830) (int32_t t6653)))))
       (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
       #f
       #f
       #f
       'int32))
     (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
     #f
     #f
     #f
     'int32)
    (cast ... #<load-data> 'int32 #f))
   (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
   #f
   #f
   #f
   'int32)
  (list (int32_t (ite x?$2364 t5829 output_multiplier)))
  #f
  #f
  #f
  'int64)
 (vs-mpy-add
  ...
  #<load-data>
  (list (int32_t (ite x?$2365 t5829 output_multiplier)))
  #f
  #f
  #f
  'int64)
 (vv-mpy-add
  ...
  (vs-mpy-add
   ...
   (combine
    (vs-mpy-add
     ...
     (combine
      (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
      (vs-mpy-add
       ...
       (combine
        #<load-data>
        (broadcast
         ...
         (sca-add
          (sca-mul
           (sca-mul (int32_t t5829) (int32_t t5830))
           (int32_t mat_a.extent.0))
          (sca-mul (int32_t t5830) (int32_t t6653)))))
       (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
       #f
       #f
       #f
       'int32))
     (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
     #f
     #f
     #f
     'int32)
    (cast ... #<load-data> 'int32 #f))
   (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
   #f
   #f
   #f
   'int32)
  '(1)
  (! x?$2366)
  (! x?$2367)
  (! x?$2368)
  'int64)
 (vv-mpy-add ... #<load-data> '(1) (! x?$2369) (! x?$2370) (! x?$2371) 'int64)
 (vs-mpy-add
  ...
  (broadcast ... (int32_t output_multiplier))
  (list (int32_t (ite x?$2764 t5829 output_multiplier)))
  #f
  #f
  #f
  'int64)
 (vs-mpy-add
  ...
  #<load-data>
  (list (int32_t (ite x?$2765 t5829 output_multiplier)))
  #f
  #f
  #f
  'int64)
 (vv-mpy-add
  ...
  (broadcast ... (int32_t output_multiplier))
  '(1)
  (! x?$2766)
  (! x?$2767)
  (! x?$2768)
  'int64)
 (vv-mpy-add ... #<load-data> '(1) (! x?$2769) (! x?$2770) (! x?$2771) 'int64))
run-x86-synthesizer
halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-add
    (vec-mul
     (vec-cast
      (load
       (buffer column_sums_b 'uint32)
       (ramp
        (sca-add (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16) 16)
        1
        16)
       (aligned 16 0))
      'int32
      16)
     (sca-broadcast (int32_t t5829) 16))
    (vec-add
     (load
      (buffer bias 'int32)
      (ramp (sca-mul output.s0.x.x 16) 1 16)
      (aligned 16 0))
     (sca-broadcast
      (sca-add
       (sca-mul
        (sca-mul (int32_t t5829) (int32_t t5830))
        (int32_t mat_a.extent.0))
       (sca-mul (int32_t t5830) (int32_t t6653)))
      16)))
   (vec-cast
    (load
     (buffer multiplied_no_offsets 'uint32)
     (ramp
      (sca-add (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121)) 4)
      1
      16)
     (aligned 4 0))
    'int32
    16))
  'int64
  16)
 (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
template:
  (vs-mpy-add
 ...
 #<load-data>
 (list (int32_t (ite x?$2564 t5829 output_multiplier)))
 #f
 #f
 #f
 'int64)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-add
    (vec-mul
     (vec-cast
      (load
       (buffer column_sums_b 'uint32)
       (ramp
        (sca-add (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16) 16)
        1
        16)
       (aligned 16 0))
      'int32
      16)
     (sca-broadcast (int32_t t5829) 16))
    (vec-add
     (load
      (buffer bias 'int32)
      (ramp (sca-mul output.s0.x.x 16) 1 16)
      (aligned 16 0))
     (sca-broadcast
      (sca-add
       (sca-mul
        (sca-mul (int32_t t5829) (int32_t t5830))
        (int32_t mat_a.extent.0))
       (sca-mul (int32_t t5830) (int32_t t6653)))
      16)))
   (vec-cast #<abstr-halide-expr> 'int32 16))
  'int64
  16)
 (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
optimized-template:
  (vs-mpy-add
 ...
 #<abstr-expr>
 (list (int32_t (ite x?$2564 t5829 output_multiplier)))
 #f
 #f
 #f
 'int64)
optimized Halide 0:
  (int64_t
 (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app abstr-vals$2772 0)) (bitvector 64))))
optimized x86 0:
  (int64_t
 (bvmul (zero-extend (app abstr-vals$2772 0) (bitvector 64)) (sign-extend (ite x?$2564 t5829 output_multiplier) (bitvector 64))))
run-x86-synthesizer
halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-add
    (vec-mul
     (vec-cast
      (load
       (buffer column_sums_b 'uint32)
       (ramp
        (sca-add (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16) 16)
        1
        16)
       (aligned 16 0))
      'int32
      16)
     (sca-broadcast (int32_t t5829) 16))
    (vec-add
     (load
      (buffer bias 'int32)
      (ramp (sca-mul output.s0.x.x 16) 1 16)
      (aligned 16 0))
     (sca-broadcast
      (sca-add
       (sca-mul
        (sca-mul (int32_t t5829) (int32_t t5830))
        (int32_t mat_a.extent.0))
       (sca-mul (int32_t t5830) (int32_t t6653)))
      16)))
   (vec-cast
    (load
     (buffer multiplied_no_offsets 'uint32)
     (ramp
      (sca-add (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121)) 4)
      1
      16)
     (aligned 4 0))
    'int32
    16))
  'int64
  16)
 (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
template:
  (vs-mpy-add
 ...
 #<load-data>
 (list (int32_t (ite x?$2565 t5829 output_multiplier)))
 #f
 #f
 #f
 'int64)
axioms:
  '()
optimized-halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-add
    (vec-mul
     (vec-cast
      (load
       (buffer column_sums_b 'uint32)
       (ramp
        (sca-add (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16) 16)
        1
        16)
       (aligned 16 0))
      'int32
      16)
     (sca-broadcast (int32_t t5829) 16))
    (vec-add
     (load
      (buffer bias 'int32)
      (ramp (sca-mul output.s0.x.x 16) 1 16)
      (aligned 16 0))
     (sca-broadcast
      (sca-add
       (sca-mul
        (sca-mul (int32_t t5829) (int32_t t5830))
        (int32_t mat_a.extent.0))
       (sca-mul (int32_t t5830) (int32_t t6653)))
      16)))
   (vec-cast
    (load
     (buffer multiplied_no_offsets 'uint32)
     (ramp
      (sca-add (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121)) 4)
      1
      16)
     (aligned 4 0))
    'int32
    16))
  'int64
  16)
 (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
optimized-template:
  (vs-mpy-add
 ...
 #<load-data>
 (list (int32_t (ite x?$2565 t5829 output_multiplier)))
 #f
 #f
 #f
 'int64)
optimized Halide 0:
  (int64_t
 (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))))
optimized x86 0:
  (int64_t
 (bvmul (ite* (⊢ (= 1 idx$2372) (sign-extend (app bias (+ -16 output.s0.x.x)) (bitvector 64))) (⊢ (|| (= 0 idx$2372) (= 2 idx$2372)) (zero-extend (ite* (⊢ (= 0 idx$2372) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$2372) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1)))))) (bitvector 64)))) (sign-extend (ite x?$2565 t5829 output_multiplier) (bitvector 64))))
run-x86-synthesizer
halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-add
    (vec-mul
     (vec-cast
      (load
       (buffer column_sums_b 'uint32)
       (ramp
        (sca-add (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16) 16)
        1
        16)
       (aligned 16 0))
      'int32
      16)
     (sca-broadcast (int32_t t5829) 16))
    (vec-add
     (load
      (buffer bias 'int32)
      (ramp (sca-mul output.s0.x.x 16) 1 16)
      (aligned 16 0))
     (sca-broadcast
      (sca-add
       (sca-mul
        (sca-mul (int32_t t5829) (int32_t t5830))
        (int32_t mat_a.extent.0))
       (sca-mul (int32_t t5830) (int32_t t6653)))
      16)))
   (vec-cast
    (load
     (buffer multiplied_no_offsets 'uint32)
     (ramp
      (sca-add (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121)) 4)
      1
      16)
     (aligned 4 0))
    'int32
    16))
  'int64
  16)
 (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
template:
  (vv-mpy-add ... #<load-data> '(1) (! x?$2566) (! x?$2567) (! x?$2568) 'int64)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-add
    (vec-mul
     (vec-cast
      (load
       (buffer column_sums_b 'uint32)
       (ramp
        (sca-add (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16) 16)
        1
        16)
       (aligned 16 0))
      'int32
      16)
     (sca-broadcast (int32_t t5829) 16))
    (vec-add
     (load
      (buffer bias 'int32)
      (ramp (sca-mul output.s0.x.x 16) 1 16)
      (aligned 16 0))
     (sca-broadcast
      (sca-add
       (sca-mul
        (sca-mul (int32_t t5829) (int32_t t5830))
        (int32_t mat_a.extent.0))
       (sca-mul (int32_t t5830) (int32_t t6653)))
      16)))
   (vec-cast #<abstr-halide-expr> 'int32 16))
  'int64
  16)
 (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
optimized-template:
  (vv-mpy-add ... #<abstr-expr> '(1) (! x?$2566) (! x?$2567) (! x?$2568) 'int64)
optimized Halide 0:
  (int64_t
 (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app abstr-vals$2773 0)) (bitvector 64))))
optimized x86 0:
  (int64_t
 (ite* (⊢ (&& x?$2568 (! (&& (! x?$2566) (! x?$2568)))) (ite x?$2566 (bvadd (bvmul (zero-extend (app abstr-vals$2773 0) (bitvector 64)) (zero-extend (app abstr-vals$2773 1) (bitvector 64))) (ite x?$2567 (bv #x0000000000000000 64) (bv #x0000000000000001 64))) (bvadd (ite x?$2567 (bv #x0000000000000000 64) (bv #x0000000000000001 64)) (ite (bvsle (bvmul (zero-extend (app abstr-vals$2773 0) (bitvector 64)) (zero-extend (app abstr-vals$2773 1) (bitvector 64))) (bvadd (bv #x7fffffffffffffff 64) (bvneg (ite x?$2567 (bv #x0000000000000000 64) (bv #x0000000000000001 64))))) (bvmul (zero-extend (app abstr-vals$2773 0) (bitvector 64)) (zero-extend (app abstr-vals$2773 1) (bitvector 64))) (bvadd (bv #x7fffffffffffffff 64) (bvneg (ite x?$2567 (bv #x0000000000000000 64) (bv #x0000000000000001 64)))))))) (⊢ (|| (&& (! x?$2566) (! x?$2568)) (&& (! x?$2568) (! (&& (! x?$2566) (! x?$2568))))) (bvashr (ite x?$2566 (bvadd (bvmul (zero-extend (app abstr-vals$2773 0) (bitvector 64)) (zero-extend (app abstr-vals$2773 1) (bitvector 64))) (ite x?$2567 (bv #x0000000000000000 64) (bv #x0000000000000001 64))) (bvadd (ite x?$2567 (bv #x0000000000000000 64) (bv #x0000000000000001 64)) (ite (bvsle (bvmul (zero-extend (app abstr-vals$2773 0) (bitvector 64)) (zero-extend (app abstr-vals$2773 1) (bitvector 64))) (bvadd (bv #x7fffffffffffffff 64) (bvneg (ite x?$2567 (bv #x0000000000000000 64) (bv #x0000000000000001 64))))) (bvmul (zero-extend (app abstr-vals$2773 0) (bitvector 64)) (zero-extend (app abstr-vals$2773 1) (bitvector 64))) (bvadd (bv #x7fffffffffffffff 64) (bvneg (ite x?$2567 (bv #x0000000000000000 64) (bv #x0000000000000001 64))))))) (bv #x0000000000000001 64)))))
run-x86-synthesizer
halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-add
    (vec-mul
     (vec-cast
      (load
       (buffer column_sums_b 'uint32)
       (ramp
        (sca-add (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16) 16)
        1
        16)
       (aligned 16 0))
      'int32
      16)
     (sca-broadcast (int32_t t5829) 16))
    (vec-add
     (load
      (buffer bias 'int32)
      (ramp (sca-mul output.s0.x.x 16) 1 16)
      (aligned 16 0))
     (sca-broadcast
      (sca-add
       (sca-mul
        (sca-mul (int32_t t5829) (int32_t t5830))
        (int32_t mat_a.extent.0))
       (sca-mul (int32_t t5830) (int32_t t6653)))
      16)))
   (vec-cast
    (load
     (buffer multiplied_no_offsets 'uint32)
     (ramp
      (sca-add (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121)) 4)
      1
      16)
     (aligned 4 0))
    'int32
    16))
  'int64
  16)
 (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
template:
  (vv-mpy-add ... #<load-data> '(1) (! x?$2569) (! x?$2570) (! x?$2571) 'int64)
axioms:
  '()
optimized-halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-add
    (vec-mul
     (vec-cast
      (load
       (buffer column_sums_b 'uint32)
       (ramp
        (sca-add (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16) 16)
        1
        16)
       (aligned 16 0))
      'int32
      16)
     (sca-broadcast (int32_t t5829) 16))
    (vec-add
     (load
      (buffer bias 'int32)
      (ramp (sca-mul output.s0.x.x 16) 1 16)
      (aligned 16 0))
     (sca-broadcast
      (sca-add
       (sca-mul
        (sca-mul (int32_t t5829) (int32_t t5830))
        (int32_t mat_a.extent.0))
       (sca-mul (int32_t t5830) (int32_t t6653)))
      16)))
   (vec-cast
    (load
     (buffer multiplied_no_offsets 'uint32)
     (ramp
      (sca-add (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121)) 4)
      1
      16)
     (aligned 4 0))
    'int32
    16))
  'int64
  16)
 (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
optimized-template:
  (vv-mpy-add ... #<load-data> '(1) (! x?$2569) (! x?$2570) (! x?$2571) 'int64)
optimized Halide 0:
  (int64_t
 (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))))
optimized x86 0:
  (int64_t
 (ite* (⊢ (&& x?$2571 (! (&& (! x?$2569) (! x?$2571)))) (ite x?$2569 (bvadd (bvmul (ite* (⊢ (= 1 idx$2372) (sign-extend (app bias (+ -16 output.s0.x.x)) (bitvector 64))) (⊢ (|| (= 0 idx$2372) (= 2 idx$2372)) (zero-extend (ite* (⊢ (= 0 idx$2372) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$2372) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1)))))) (bitvector 64)))) (ite* (⊢ (= 1 idx$2373) (sign-extend (app bias (+ -16 output.s0.x.x)) (bitvector 64))) (⊢ (|| (= 0 idx$2373) (= 2 idx$2373)) (zero-extend (ite* (⊢ (= 0 idx$2373) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$2373) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1)))))) (bitvector 64))))) (ite x?$2570 (bv #x0000000000000000 64) (bv #x0000000000000001 64))) (bvadd (ite x?$2570 (bv #x0000000000000000 64) (bv #x0000000000000001 64)) (ite (bvsle (bvmul (ite* (⊢ (= 1 idx$2372) (sign-extend (app bias (+ -16 output.s0.x.x)) (bitvector 64))) (⊢ (|| (= 0 idx$2372) (= 2 idx$2372)) (zero-extend (ite* (⊢ (= 0 idx$2372) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$2372) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1)))))) (bitvector 64)))) (ite* (⊢ (= 1 idx$2373) (sign-extend (app bias (+ -16 output.s0.x.x)) (bitvector 64))) (⊢ (|| (= 0 idx$2373) (= 2 idx$2373)) (zero-extend (ite* (⊢ (= 0 idx$2373) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$2373) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1)))))) (bitvector 64))))) (bvadd (bv #x7fffffffffffffff 64) (bvneg (ite x?$2570 (bv #x0000000000000000 64) (bv #x0000000000000001 64))))) (bvmul (ite* (⊢ (= 1 idx$2372) (sign-extend (app bias (+ -16 output.s0.x.x)) (bitvector 64))) (⊢ (|| (= 0 idx$2372) (= 2 idx$2372)) (zero-extend (ite* (⊢ (= 0 idx$2372) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$2372) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1)))))) (bitvector 64)))) (ite* (⊢ (= 1 idx$2373) (sign-extend (app bias (+ -16 output.s0.x.x)) (bitvector 64))) (⊢ (|| (= 0 idx$2373) (= 2 idx$2373)) (zero-extend (ite* (⊢ (= 0 idx$2373) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$2373) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1)))))) (bitvector 64))))) (bvadd (bv #x7fffffffffffffff 64) (bvneg (ite x?$2570 (bv #x0000000000000000 64) (bv #x0000000000000001 64)))))))) (⊢ (|| (&& (! x?$2569) (! x?$2571)) (&& (! x?$2571) (! (&& (! x?$2569) (! x?$2571))))) (bvashr (ite x?$2569 (bvadd (bvmul (ite* (⊢ (= 1 idx$2372) (sign-extend (app bias (+ -16 output.s0.x.x)) (bitvector 64))) (⊢ (|| (= 0 idx$2372) (= 2 idx$2372)) (zero-extend (ite* (⊢ (= 0 idx$2372) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$2372) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1)))))) (bitvector 64)))) (ite* (⊢ (= 1 idx$2373) (sign-extend (app bias (+ -16 output.s0.x.x)) (bitvector 64))) (⊢ (|| (= 0 idx$2373) (= 2 idx$2373)) (zero-extend (ite* (⊢ (= 0 idx$2373) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$2373) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1)))))) (bitvector 64))))) (ite x?$2570 (bv #x0000000000000000 64) (bv #x0000000000000001 64))) (bvadd (ite x?$2570 (bv #x0000000000000000 64) (bv #x0000000000000001 64)) (ite (bvsle (bvmul (ite* (⊢ (= 1 idx$2372) (sign-extend (app bias (+ -16 output.s0.x.x)) (bitvector 64))) (⊢ (|| (= 0 idx$2372) (= 2 idx$2372)) (zero-extend (ite* (⊢ (= 0 idx$2372) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$2372) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1)))))) (bitvector 64)))) (ite* (⊢ (= 1 idx$2373) (sign-extend (app bias (+ -16 output.s0.x.x)) (bitvector 64))) (⊢ (|| (= 0 idx$2373) (= 2 idx$2373)) (zero-extend (ite* (⊢ (= 0 idx$2373) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$2373) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1)))))) (bitvector 64))))) (bvadd (bv #x7fffffffffffffff 64) (bvneg (ite x?$2570 (bv #x0000000000000000 64) (bv #x0000000000000001 64))))) (bvmul (ite* (⊢ (= 1 idx$2372) (sign-extend (app bias (+ -16 output.s0.x.x)) (bitvector 64))) (⊢ (|| (= 0 idx$2372) (= 2 idx$2372)) (zero-extend (ite* (⊢ (= 0 idx$2372) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$2372) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1)))))) (bitvector 64)))) (ite* (⊢ (= 1 idx$2373) (sign-extend (app bias (+ -16 output.s0.x.x)) (bitvector 64))) (⊢ (|| (= 0 idx$2373) (= 2 idx$2373)) (zero-extend (ite* (⊢ (= 0 idx$2373) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$2373) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1)))))) (bitvector 64))))) (bvadd (bv #x7fffffffffffffff 64) (bvneg (ite x?$2570 (bv #x0000000000000000 64) (bv #x0000000000000001 64))))))) (bv #x0000000000000001 64)))))
run-x86-synthesizer
halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-add
    (vec-mul
     (vec-cast
      (load
       (buffer column_sums_b 'uint32)
       (ramp
        (sca-add (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16) 16)
        1
        16)
       (aligned 16 0))
      'int32
      16)
     (sca-broadcast (int32_t t5829) 16))
    (vec-add
     (load
      (buffer bias 'int32)
      (ramp (sca-mul output.s0.x.x 16) 1 16)
      (aligned 16 0))
     (sca-broadcast
      (sca-add
       (sca-mul
        (sca-mul (int32_t t5829) (int32_t t5830))
        (int32_t mat_a.extent.0))
       (sca-mul (int32_t t5830) (int32_t t6653)))
      16)))
   (vec-cast
    (load
     (buffer multiplied_no_offsets 'uint32)
     (ramp
      (sca-add (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121)) 4)
      1
      16)
     (aligned 4 0))
    'int32
    16))
  'int64
  16)
 (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
template:
  (vs-mpy-add
 ...
 #<load-data>
 (list (int32_t (ite x?$2365 t5829 output_multiplier)))
 #f
 #f
 #f
 'int64)
axioms:
  '()
optimized-halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-add
    (vec-mul
     (vec-cast
      (load
       (buffer column_sums_b 'uint32)
       (ramp
        (sca-add (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16) 16)
        1
        16)
       (aligned 16 0))
      'int32
      16)
     (sca-broadcast (int32_t t5829) 16))
    (vec-add
     (load
      (buffer bias 'int32)
      (ramp (sca-mul output.s0.x.x 16) 1 16)
      (aligned 16 0))
     (sca-broadcast
      (sca-add
       (sca-mul
        (sca-mul (int32_t t5829) (int32_t t5830))
        (int32_t mat_a.extent.0))
       (sca-mul (int32_t t5830) (int32_t t6653)))
      16)))
   (vec-cast
    (load
     (buffer multiplied_no_offsets 'uint32)
     (ramp
      (sca-add (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121)) 4)
      1
      16)
     (aligned 4 0))
    'int32
    16))
  'int64
  16)
 (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
optimized-template:
  (vs-mpy-add
 ...
 #<load-data>
 (list (int32_t (ite x?$2365 t5829 output_multiplier)))
 #f
 #f
 #f
 'int64)
optimized Halide 0:
  (int64_t
 (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))))
optimized x86 0:
  (int64_t
 (bvmul (ite* (⊢ (= 1 idx$2172) (sign-extend (app bias (+ -16 output.s0.x.x)) (bitvector 64))) (⊢ (|| (= 0 idx$2172) (= 2 idx$2172)) (zero-extend (ite* (⊢ (= 0 idx$2172) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$2172) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1)))))) (bitvector 64)))) (sign-extend (ite x?$2365 t5829 output_multiplier) (bitvector 64))))
run-x86-synthesizer
halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-add
    (vec-mul
     (vec-cast
      (load
       (buffer column_sums_b 'uint32)
       (ramp
        (sca-add (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16) 16)
        1
        16)
       (aligned 16 0))
      'int32
      16)
     (sca-broadcast (int32_t t5829) 16))
    (vec-add
     (load
      (buffer bias 'int32)
      (ramp (sca-mul output.s0.x.x 16) 1 16)
      (aligned 16 0))
     (sca-broadcast
      (sca-add
       (sca-mul
        (sca-mul (int32_t t5829) (int32_t t5830))
        (int32_t mat_a.extent.0))
       (sca-mul (int32_t t5830) (int32_t t6653)))
      16)))
   (vec-cast
    (load
     (buffer multiplied_no_offsets 'uint32)
     (ramp
      (sca-add (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121)) 4)
      1
      16)
     (aligned 4 0))
    'int32
    16))
  'int64
  16)
 (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
template:
  (vv-mpy-add ... #<load-data> '(1) (! x?$2369) (! x?$2370) (! x?$2371) 'int64)
axioms:
  '()
optimized-halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-add
    (vec-mul
     (vec-cast
      (load
       (buffer column_sums_b 'uint32)
       (ramp
        (sca-add (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16) 16)
        1
        16)
       (aligned 16 0))
      'int32
      16)
     (sca-broadcast (int32_t t5829) 16))
    (vec-add
     (load
      (buffer bias 'int32)
      (ramp (sca-mul output.s0.x.x 16) 1 16)
      (aligned 16 0))
     (sca-broadcast
      (sca-add
       (sca-mul
        (sca-mul (int32_t t5829) (int32_t t5830))
        (int32_t mat_a.extent.0))
       (sca-mul (int32_t t5830) (int32_t t6653)))
      16)))
   (vec-cast
    (load
     (buffer multiplied_no_offsets 'uint32)
     (ramp
      (sca-add (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121)) 4)
      1
      16)
     (aligned 4 0))
    'int32
    16))
  'int64
  16)
 (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
optimized-template:
  (vv-mpy-add ... #<load-data> '(1) (! x?$2369) (! x?$2370) (! x?$2371) 'int64)
optimized Halide 0:
  (int64_t
 (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))))
optimized x86 0:
  (int64_t
 (ite* (⊢ (&& x?$2371 (! (&& (! x?$2369) (! x?$2371)))) (ite x?$2369 (bvadd (bvmul (ite* (⊢ (= 1 idx$2172) (sign-extend (app bias (+ -16 output.s0.x.x)) (bitvector 64))) (⊢ (|| (= 0 idx$2172) (= 2 idx$2172)) (zero-extend (ite* (⊢ (= 0 idx$2172) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$2172) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1)))))) (bitvector 64)))) (ite* (⊢ (= 1 idx$2173) (sign-extend (app bias (+ -16 output.s0.x.x)) (bitvector 64))) (⊢ (|| (= 0 idx$2173) (= 2 idx$2173)) (zero-extend (ite* (⊢ (= 0 idx$2173) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$2173) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1)))))) (bitvector 64))))) (ite x?$2370 (bv #x0000000000000000 64) (bv #x0000000000000001 64))) (bvadd (ite x?$2370 (bv #x0000000000000000 64) (bv #x0000000000000001 64)) (ite (bvsle (bvmul (ite* (⊢ (= 1 idx$2172) (sign-extend (app bias (+ -16 output.s0.x.x)) (bitvector 64))) (⊢ (|| (= 0 idx$2172) (= 2 idx$2172)) (zero-extend (ite* (⊢ (= 0 idx$2172) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$2172) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1)))))) (bitvector 64)))) (ite* (⊢ (= 1 idx$2173) (sign-extend (app bias (+ -16 output.s0.x.x)) (bitvector 64))) (⊢ (|| (= 0 idx$2173) (= 2 idx$2173)) (zero-extend (ite* (⊢ (= 0 idx$2173) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$2173) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1)))))) (bitvector 64))))) (bvadd (bv #x7fffffffffffffff 64) (bvneg (ite x?$2370 (bv #x0000000000000000 64) (bv #x0000000000000001 64))))) (bvmul (ite* (⊢ (= 1 idx$2172) (sign-extend (app bias (+ -16 output.s0.x.x)) (bitvector 64))) (⊢ (|| (= 0 idx$2172) (= 2 idx$2172)) (zero-extend (ite* (⊢ (= 0 idx$2172) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$2172) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1)))))) (bitvector 64)))) (ite* (⊢ (= 1 idx$2173) (sign-extend (app bias (+ -16 output.s0.x.x)) (bitvector 64))) (⊢ (|| (= 0 idx$2173) (= 2 idx$2173)) (zero-extend (ite* (⊢ (= 0 idx$2173) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$2173) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1)))))) (bitvector 64))))) (bvadd (bv #x7fffffffffffffff 64) (bvneg (ite x?$2370 (bv #x0000000000000000 64) (bv #x0000000000000001 64)))))))) (⊢ (|| (&& (! x?$2369) (! x?$2371)) (&& (! x?$2371) (! (&& (! x?$2369) (! x?$2371))))) (bvashr (ite x?$2369 (bvadd (bvmul (ite* (⊢ (= 1 idx$2172) (sign-extend (app bias (+ -16 output.s0.x.x)) (bitvector 64))) (⊢ (|| (= 0 idx$2172) (= 2 idx$2172)) (zero-extend (ite* (⊢ (= 0 idx$2172) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$2172) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1)))))) (bitvector 64)))) (ite* (⊢ (= 1 idx$2173) (sign-extend (app bias (+ -16 output.s0.x.x)) (bitvector 64))) (⊢ (|| (= 0 idx$2173) (= 2 idx$2173)) (zero-extend (ite* (⊢ (= 0 idx$2173) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$2173) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1)))))) (bitvector 64))))) (ite x?$2370 (bv #x0000000000000000 64) (bv #x0000000000000001 64))) (bvadd (ite x?$2370 (bv #x0000000000000000 64) (bv #x0000000000000001 64)) (ite (bvsle (bvmul (ite* (⊢ (= 1 idx$2172) (sign-extend (app bias (+ -16 output.s0.x.x)) (bitvector 64))) (⊢ (|| (= 0 idx$2172) (= 2 idx$2172)) (zero-extend (ite* (⊢ (= 0 idx$2172) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$2172) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1)))))) (bitvector 64)))) (ite* (⊢ (= 1 idx$2173) (sign-extend (app bias (+ -16 output.s0.x.x)) (bitvector 64))) (⊢ (|| (= 0 idx$2173) (= 2 idx$2173)) (zero-extend (ite* (⊢ (= 0 idx$2173) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$2173) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1)))))) (bitvector 64))))) (bvadd (bv #x7fffffffffffffff 64) (bvneg (ite x?$2370 (bv #x0000000000000000 64) (bv #x0000000000000001 64))))) (bvmul (ite* (⊢ (= 1 idx$2172) (sign-extend (app bias (+ -16 output.s0.x.x)) (bitvector 64))) (⊢ (|| (= 0 idx$2172) (= 2 idx$2172)) (zero-extend (ite* (⊢ (= 0 idx$2172) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$2172) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1)))))) (bitvector 64)))) (ite* (⊢ (= 1 idx$2173) (sign-extend (app bias (+ -16 output.s0.x.x)) (bitvector 64))) (⊢ (|| (= 0 idx$2173) (= 2 idx$2173)) (zero-extend (ite* (⊢ (= 0 idx$2173) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$2173) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1)))))) (bitvector 64))))) (bvadd (bv #x7fffffffffffffff 64) (bvneg (ite x?$2370 (bv #x0000000000000000 64) (bv #x0000000000000001 64))))))) (bv #x0000000000000001 64)))))
run-x86-synthesizer
halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-add
    (vec-mul
     (vec-cast
      (load
       (buffer column_sums_b 'uint32)
       (ramp
        (sca-add (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16) 16)
        1
        16)
       (aligned 16 0))
      'int32
      16)
     (sca-broadcast (int32_t t5829) 16))
    (vec-add
     (load
      (buffer bias 'int32)
      (ramp (sca-mul output.s0.x.x 16) 1 16)
      (aligned 16 0))
     (sca-broadcast
      (sca-add
       (sca-mul
        (sca-mul (int32_t t5829) (int32_t t5830))
        (int32_t mat_a.extent.0))
       (sca-mul (int32_t t5830) (int32_t t6653)))
      16)))
   (vec-cast
    (load
     (buffer multiplied_no_offsets 'uint32)
     (ramp
      (sca-add (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121)) 4)
      1
      16)
     (aligned 4 0))
    'int32
    16))
  'int64
  16)
 (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
template:
  (vs-mpy-add
 ...
 #<load-data>
 (list (int32_t (ite x?$2765 t5829 output_multiplier)))
 #f
 #f
 #f
 'int64)
axioms:
  '()
optimized-halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-add
    (vec-mul
     (vec-cast
      (load
       (buffer column_sums_b 'uint32)
       (ramp
        (sca-add (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16) 16)
        1
        16)
       (aligned 16 0))
      'int32
      16)
     (sca-broadcast (int32_t t5829) 16))
    (vec-add
     (load
      (buffer bias 'int32)
      (ramp (sca-mul output.s0.x.x 16) 1 16)
      (aligned 16 0))
     (sca-broadcast
      (sca-add
       (sca-mul
        (sca-mul (int32_t t5829) (int32_t t5830))
        (int32_t mat_a.extent.0))
       (sca-mul (int32_t t5830) (int32_t t6653)))
      16)))
   (vec-cast
    (load
     (buffer multiplied_no_offsets 'uint32)
     (ramp
      (sca-add (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121)) 4)
      1
      16)
     (aligned 4 0))
    'int32
    16))
  'int64
  16)
 (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
optimized-template:
  (vs-mpy-add
 ...
 #<load-data>
 (list (int32_t (ite x?$2765 t5829 output_multiplier)))
 #f
 #f
 #f
 'int64)
optimized Halide 0:
  (int64_t
 (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))))
optimized x86 0:
  (int64_t
 (bvmul (ite* (⊢ (= 1 idx$2572) (sign-extend (app bias (+ -16 output.s0.x.x)) (bitvector 64))) (⊢ (|| (= 0 idx$2572) (= 2 idx$2572)) (zero-extend (ite* (⊢ (= 0 idx$2572) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$2572) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1)))))) (bitvector 64)))) (sign-extend (ite x?$2765 t5829 output_multiplier) (bitvector 64))))
run-x86-synthesizer
halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-add
    (vec-mul
     (vec-cast
      (load
       (buffer column_sums_b 'uint32)
       (ramp
        (sca-add (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16) 16)
        1
        16)
       (aligned 16 0))
      'int32
      16)
     (sca-broadcast (int32_t t5829) 16))
    (vec-add
     (load
      (buffer bias 'int32)
      (ramp (sca-mul output.s0.x.x 16) 1 16)
      (aligned 16 0))
     (sca-broadcast
      (sca-add
       (sca-mul
        (sca-mul (int32_t t5829) (int32_t t5830))
        (int32_t mat_a.extent.0))
       (sca-mul (int32_t t5830) (int32_t t6653)))
      16)))
   (vec-cast
    (load
     (buffer multiplied_no_offsets 'uint32)
     (ramp
      (sca-add (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121)) 4)
      1
      16)
     (aligned 4 0))
    'int32
    16))
  'int64
  16)
 (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
template:
  (vv-mpy-add ... #<load-data> '(1) (! x?$2769) (! x?$2770) (! x?$2771) 'int64)
axioms:
  '()
optimized-halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-add
    (vec-mul
     (vec-cast
      (load
       (buffer column_sums_b 'uint32)
       (ramp
        (sca-add (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16) 16)
        1
        16)
       (aligned 16 0))
      'int32
      16)
     (sca-broadcast (int32_t t5829) 16))
    (vec-add
     (load
      (buffer bias 'int32)
      (ramp (sca-mul output.s0.x.x 16) 1 16)
      (aligned 16 0))
     (sca-broadcast
      (sca-add
       (sca-mul
        (sca-mul (int32_t t5829) (int32_t t5830))
        (int32_t mat_a.extent.0))
       (sca-mul (int32_t t5830) (int32_t t6653)))
      16)))
   (vec-cast
    (load
     (buffer multiplied_no_offsets 'uint32)
     (ramp
      (sca-add (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121)) 4)
      1
      16)
     (aligned 4 0))
    'int32
    16))
  'int64
  16)
 (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
optimized-template:
  (vv-mpy-add ... #<load-data> '(1) (! x?$2769) (! x?$2770) (! x?$2771) 'int64)
optimized Halide 0:
  (int64_t
 (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))))
optimized x86 0:
  (int64_t
 (ite* (⊢ (&& x?$2771 (! (&& (! x?$2769) (! x?$2771)))) (ite x?$2769 (bvadd (bvmul (ite* (⊢ (= 1 idx$2572) (sign-extend (app bias (+ -16 output.s0.x.x)) (bitvector 64))) (⊢ (|| (= 0 idx$2572) (= 2 idx$2572)) (zero-extend (ite* (⊢ (= 0 idx$2572) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$2572) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1)))))) (bitvector 64)))) (ite* (⊢ (= 1 idx$2573) (sign-extend (app bias (+ -16 output.s0.x.x)) (bitvector 64))) (⊢ (|| (= 0 idx$2573) (= 2 idx$2573)) (zero-extend (ite* (⊢ (= 0 idx$2573) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$2573) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1)))))) (bitvector 64))))) (ite x?$2770 (bv #x0000000000000000 64) (bv #x0000000000000001 64))) (bvadd (ite x?$2770 (bv #x0000000000000000 64) (bv #x0000000000000001 64)) (ite (bvsle (bvmul (ite* (⊢ (= 1 idx$2572) (sign-extend (app bias (+ -16 output.s0.x.x)) (bitvector 64))) (⊢ (|| (= 0 idx$2572) (= 2 idx$2572)) (zero-extend (ite* (⊢ (= 0 idx$2572) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$2572) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1)))))) (bitvector 64)))) (ite* (⊢ (= 1 idx$2573) (sign-extend (app bias (+ -16 output.s0.x.x)) (bitvector 64))) (⊢ (|| (= 0 idx$2573) (= 2 idx$2573)) (zero-extend (ite* (⊢ (= 0 idx$2573) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$2573) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1)))))) (bitvector 64))))) (bvadd (bv #x7fffffffffffffff 64) (bvneg (ite x?$2770 (bv #x0000000000000000 64) (bv #x0000000000000001 64))))) (bvmul (ite* (⊢ (= 1 idx$2572) (sign-extend (app bias (+ -16 output.s0.x.x)) (bitvector 64))) (⊢ (|| (= 0 idx$2572) (= 2 idx$2572)) (zero-extend (ite* (⊢ (= 0 idx$2572) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$2572) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1)))))) (bitvector 64)))) (ite* (⊢ (= 1 idx$2573) (sign-extend (app bias (+ -16 output.s0.x.x)) (bitvector 64))) (⊢ (|| (= 0 idx$2573) (= 2 idx$2573)) (zero-extend (ite* (⊢ (= 0 idx$2573) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$2573) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1)))))) (bitvector 64))))) (bvadd (bv #x7fffffffffffffff 64) (bvneg (ite x?$2770 (bv #x0000000000000000 64) (bv #x0000000000000001 64)))))))) (⊢ (|| (&& (! x?$2769) (! x?$2771)) (&& (! x?$2771) (! (&& (! x?$2769) (! x?$2771))))) (bvashr (ite x?$2769 (bvadd (bvmul (ite* (⊢ (= 1 idx$2572) (sign-extend (app bias (+ -16 output.s0.x.x)) (bitvector 64))) (⊢ (|| (= 0 idx$2572) (= 2 idx$2572)) (zero-extend (ite* (⊢ (= 0 idx$2572) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$2572) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1)))))) (bitvector 64)))) (ite* (⊢ (= 1 idx$2573) (sign-extend (app bias (+ -16 output.s0.x.x)) (bitvector 64))) (⊢ (|| (= 0 idx$2573) (= 2 idx$2573)) (zero-extend (ite* (⊢ (= 0 idx$2573) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$2573) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1)))))) (bitvector 64))))) (ite x?$2770 (bv #x0000000000000000 64) (bv #x0000000000000001 64))) (bvadd (ite x?$2770 (bv #x0000000000000000 64) (bv #x0000000000000001 64)) (ite (bvsle (bvmul (ite* (⊢ (= 1 idx$2572) (sign-extend (app bias (+ -16 output.s0.x.x)) (bitvector 64))) (⊢ (|| (= 0 idx$2572) (= 2 idx$2572)) (zero-extend (ite* (⊢ (= 0 idx$2572) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$2572) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1)))))) (bitvector 64)))) (ite* (⊢ (= 1 idx$2573) (sign-extend (app bias (+ -16 output.s0.x.x)) (bitvector 64))) (⊢ (|| (= 0 idx$2573) (= 2 idx$2573)) (zero-extend (ite* (⊢ (= 0 idx$2573) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$2573) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1)))))) (bitvector 64))))) (bvadd (bv #x7fffffffffffffff 64) (bvneg (ite x?$2770 (bv #x0000000000000000 64) (bv #x0000000000000001 64))))) (bvmul (ite* (⊢ (= 1 idx$2572) (sign-extend (app bias (+ -16 output.s0.x.x)) (bitvector 64))) (⊢ (|| (= 0 idx$2572) (= 2 idx$2572)) (zero-extend (ite* (⊢ (= 0 idx$2572) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$2572) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1)))))) (bitvector 64)))) (ite* (⊢ (= 1 idx$2573) (sign-extend (app bias (+ -16 output.s0.x.x)) (bitvector 64))) (⊢ (|| (= 0 idx$2573) (= 2 idx$2573)) (zero-extend (ite* (⊢ (= 0 idx$2573) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (⊢ (= 2 idx$2573) (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1)))))) (bitvector 64))))) (bvadd (bv #x7fffffffffffffff 64) (bvneg (ite x?$2770 (bv #x0000000000000000 64) (bv #x0000000000000001 64))))))) (bv #x0000000000000001 64)))))
run-x86-synthesizer
halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-add
    (vec-mul
     (vec-cast
      (load
       (buffer column_sums_b 'uint32)
       (ramp
        (sca-add (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16) 16)
        1
        16)
       (aligned 16 0))
      'int32
      16)
     (sca-broadcast (int32_t t5829) 16))
    (vec-add
     (load
      (buffer bias 'int32)
      (ramp (sca-mul output.s0.x.x 16) 1 16)
      (aligned 16 0))
     (sca-broadcast
      (sca-add
       (sca-mul
        (sca-mul (int32_t t5829) (int32_t t5830))
        (int32_t mat_a.extent.0))
       (sca-mul (int32_t t5830) (int32_t t6653)))
      16)))
   (vec-cast
    (load
     (buffer multiplied_no_offsets 'uint32)
     (ramp
      (sca-add (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121)) 4)
      1
      16)
     (aligned 4 0))
    'int32
    16))
  'int64
  16)
 (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
template:
  (cast ... (broadcast ... (int32_t output_multiplier)) 'int64 x?$2171)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-add
    (vec-mul
     (vec-cast
      (load
       (buffer column_sums_b 'uint32)
       (ramp
        (sca-add (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16) 16)
        1
        16)
       (aligned 16 0))
      'int32
      16)
     (sca-broadcast (int32_t t5829) 16))
    (vec-add
     (load
      (buffer bias 'int32)
      (ramp (sca-mul output.s0.x.x 16) 1 16)
      (aligned 16 0))
     (sca-broadcast
      (sca-add
       (sca-mul
        (sca-mul (int32_t t5829) (int32_t t5830))
        (int32_t mat_a.extent.0))
       (sca-mul (int32_t t5830) (int32_t t6653)))
      16)))
   (vec-cast
    (load
     (buffer multiplied_no_offsets 'uint32)
     (ramp
      (sca-add (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121)) 4)
      1
      16)
     (aligned 4 0))
    'int32
    16))
  'int64
  16)
 (vec-cast #<abstr-halide-expr> 'int64 16))
optimized-template:
  (cast ... #<abstr-expr> 'int64 x?$2171)
optimized Halide 0:
  (int64_t
 (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend (app abstr-vals$2774 0) (bitvector 64))))
optimized x86 0:
  (int64_t (sign-extend (app abstr-vals$2774 0) (bitvector 64)))
run-x86-synthesizer
halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-add
    (vec-mul
     (vec-cast
      (load
       (buffer column_sums_b 'uint32)
       (ramp
        (sca-add (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16) 16)
        1
        16)
       (aligned 16 0))
      'int32
      16)
     (sca-broadcast (int32_t t5829) 16))
    (vec-add
     (load
      (buffer bias 'int32)
      (ramp (sca-mul output.s0.x.x 16) 1 16)
      (aligned 16 0))
     (sca-broadcast
      (sca-add
       (sca-mul
        (sca-mul (int32_t t5829) (int32_t t5830))
        (int32_t mat_a.extent.0))
       (sca-mul (int32_t t5830) (int32_t t6653)))
      16)))
   (vec-cast
    (load
     (buffer multiplied_no_offsets 'uint32)
     (ramp
      (sca-add (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121)) 4)
      1
      16)
     (aligned 4 0))
    'int32
    16))
  'int64
  16)
 (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
template:
  (vs-mpy-add
 ...
 (broadcast ... (int32_t output_multiplier))
 (list (int32_t (ite x?$2764 t5829 output_multiplier)))
 #f
 #f
 #f
 'int64)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-add
    (vec-mul
     (vec-cast
      (load
       (buffer column_sums_b 'uint32)
       (ramp
        (sca-add (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16) 16)
        1
        16)
       (aligned 16 0))
      'int32
      16)
     (sca-broadcast (int32_t t5829) 16))
    (vec-add
     (load
      (buffer bias 'int32)
      (ramp (sca-mul output.s0.x.x 16) 1 16)
      (aligned 16 0))
     (sca-broadcast
      (sca-add
       (sca-mul
        (sca-mul (int32_t t5829) (int32_t t5830))
        (int32_t mat_a.extent.0))
       (sca-mul (int32_t t5830) (int32_t t6653)))
      16)))
   (vec-cast
    (load
     (buffer multiplied_no_offsets 'uint32)
     (ramp
      (sca-add (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121)) 4)
      1
      16)
     (aligned 4 0))
    'int32
    16))
  'int64
  16)
 (vec-cast #<abstr-halide-expr> 'int64 16))
optimized-template:
  (vs-mpy-add
 ...
 #<abstr-expr>
 (list (int32_t (ite x?$2764 t5829 output_multiplier)))
 #f
 #f
 #f
 'int64)
optimized Halide 0:
  (int64_t
 (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend (app abstr-vals$2775 0) (bitvector 64))))
optimized x86 0:
  (int64_t
 (bvmul (sign-extend (app abstr-vals$2775 0) (bitvector 64)) (sign-extend (ite x?$2764 t5829 output_multiplier) (bitvector 64))))
run-x86-synthesizer
halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-add
    (vec-mul
     (vec-cast
      (load
       (buffer column_sums_b 'uint32)
       (ramp
        (sca-add (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16) 16)
        1
        16)
       (aligned 16 0))
      'int32
      16)
     (sca-broadcast (int32_t t5829) 16))
    (vec-add
     (load
      (buffer bias 'int32)
      (ramp (sca-mul output.s0.x.x 16) 1 16)
      (aligned 16 0))
     (sca-broadcast
      (sca-add
       (sca-mul
        (sca-mul (int32_t t5829) (int32_t t5830))
        (int32_t mat_a.extent.0))
       (sca-mul (int32_t t5830) (int32_t t6653)))
      16)))
   (vec-cast
    (load
     (buffer multiplied_no_offsets 'uint32)
     (ramp
      (sca-add (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121)) 4)
      1
      16)
     (aligned 4 0))
    'int32
    16))
  'int64
  16)
 (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
template:
  (vv-mpy-add
 ...
 (broadcast ... (int32_t output_multiplier))
 '(1)
 (! x?$2766)
 (! x?$2767)
 (! x?$2768)
 'int64)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-add
    (vec-mul
     (vec-cast
      (load
       (buffer column_sums_b 'uint32)
       (ramp
        (sca-add (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16) 16)
        1
        16)
       (aligned 16 0))
      'int32
      16)
     (sca-broadcast (int32_t t5829) 16))
    (vec-add
     (load
      (buffer bias 'int32)
      (ramp (sca-mul output.s0.x.x 16) 1 16)
      (aligned 16 0))
     (sca-broadcast
      (sca-add
       (sca-mul
        (sca-mul (int32_t t5829) (int32_t t5830))
        (int32_t mat_a.extent.0))
       (sca-mul (int32_t t5830) (int32_t t6653)))
      16)))
   (vec-cast
    (load
     (buffer multiplied_no_offsets 'uint32)
     (ramp
      (sca-add (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121)) 4)
      1
      16)
     (aligned 4 0))
    'int32
    16))
  'int64
  16)
 (vec-cast #<abstr-halide-expr> 'int64 16))
optimized-template:
  (vv-mpy-add ... #<abstr-expr> '(1) (! x?$2766) (! x?$2767) (! x?$2768) 'int64)
optimized Halide 0:
  (int64_t
 (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend (app abstr-vals$2776 0) (bitvector 64))))
optimized x86 0:
  (int64_t
 (ite* (⊢ (&& x?$2768 (! (&& (! x?$2766) (! x?$2768)))) (ite x?$2766 (bvadd (bvmul (sign-extend (app abstr-vals$2776 0) (bitvector 64)) (sign-extend (app abstr-vals$2776 1) (bitvector 64))) (ite x?$2767 (bv #x0000000000000000 64) (bv #x0000000000000001 64))) (bvadd (ite x?$2767 (bv #x0000000000000000 64) (bv #x0000000000000001 64)) (ite (bvsle (bvmul (sign-extend (app abstr-vals$2776 0) (bitvector 64)) (sign-extend (app abstr-vals$2776 1) (bitvector 64))) (bvadd (bv #x7fffffffffffffff 64) (bvneg (ite x?$2767 (bv #x0000000000000000 64) (bv #x0000000000000001 64))))) (bvmul (sign-extend (app abstr-vals$2776 0) (bitvector 64)) (sign-extend (app abstr-vals$2776 1) (bitvector 64))) (bvadd (bv #x7fffffffffffffff 64) (bvneg (ite x?$2767 (bv #x0000000000000000 64) (bv #x0000000000000001 64)))))))) (⊢ (|| (&& (! x?$2766) (! x?$2768)) (&& (! x?$2768) (! (&& (! x?$2766) (! x?$2768))))) (bvashr (ite x?$2766 (bvadd (bvmul (sign-extend (app abstr-vals$2776 0) (bitvector 64)) (sign-extend (app abstr-vals$2776 1) (bitvector 64))) (ite x?$2767 (bv #x0000000000000000 64) (bv #x0000000000000001 64))) (bvadd (ite x?$2767 (bv #x0000000000000000 64) (bv #x0000000000000001 64)) (ite (bvsle (bvmul (sign-extend (app abstr-vals$2776 0) (bitvector 64)) (sign-extend (app abstr-vals$2776 1) (bitvector 64))) (bvadd (bv #x7fffffffffffffff 64) (bvneg (ite x?$2767 (bv #x0000000000000000 64) (bv #x0000000000000001 64))))) (bvmul (sign-extend (app abstr-vals$2776 0) (bitvector 64)) (sign-extend (app abstr-vals$2776 1) (bitvector 64))) (bvadd (bv #x7fffffffffffffff 64) (bvneg (ite x?$2767 (bv #x0000000000000000 64) (bv #x0000000000000001 64))))))) (bv #x0000000000000001 64)))))
run-x86-synthesizer
halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-add
    (vec-mul
     (vec-cast
      (load
       (buffer column_sums_b 'uint32)
       (ramp
        (sca-add (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16) 16)
        1
        16)
       (aligned 16 0))
      'int32
      16)
     (sca-broadcast (int32_t t5829) 16))
    (vec-add
     (load
      (buffer bias 'int32)
      (ramp (sca-mul output.s0.x.x 16) 1 16)
      (aligned 16 0))
     (sca-broadcast
      (sca-add
       (sca-mul
        (sca-mul (int32_t t5829) (int32_t t5830))
        (int32_t mat_a.extent.0))
       (sca-mul (int32_t t5830) (int32_t t6653)))
      16)))
   (vec-cast
    (load
     (buffer multiplied_no_offsets 'uint32)
     (ramp
      (sca-add (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121)) 4)
      1
      16)
     (aligned 4 0))
    'int32
    16))
  'int64
  16)
 (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
template:
  (vs-mpy-add
 ...
 (combine
  (vs-mpy-add
   ...
   (combine
    (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
    (vs-mpy-add
     ...
     (combine
      #<load-data>
      (broadcast
       ...
       (sca-add
        (sca-mul
         (sca-mul (int32_t t5829) (int32_t t5830))
         (int32_t mat_a.extent.0))
        (sca-mul (int32_t t5830) (int32_t t6653)))))
     (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
     #f
     #f
     #f
     'int32))
   (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
   #f
   #f
   #f
   'int32)
  (cast ... #<load-data> 'int32 #f))
 (list
  (sca-mul
   (sca-cast (int8_t (bv #x01 8)) 'int32)
   (sca-cast
    (union [(&& (! xi?$2169) (! xi?$2170)) #(struct:int8_t (bv #x01 8))] [(|| xi?$2169 (&& xi?$2170 (! xi?$2169))) #(struct:int32_t
                                                                                                                     (ite* (⊢ xi?$2169 t5829) (⊢ (&& xi?$2170 (! xi?$2169)) output_multiplier)))])
    'int32))
  (sca-mul
   (sca-cast (int8_t (bv #x01 8)) 'int32)
   (sca-cast
    (union [(&& (! xi?$2169) (! xi?$2170)) #(struct:int8_t (bv #x01 8))] [(|| xi?$2169 (&& xi?$2170 (! xi?$2169))) #(struct:int32_t
                                                                                                                     (ite* (⊢ xi?$2169 t5829) (⊢ (&& xi?$2170 (! xi?$2169)) output_multiplier)))])
    'int32)))
 #f
 #f
 #f
 'int32)
axioms:
  '(#t #t)
optimized-halide-expr:
  (vec-mul
 (vec-cast (vec-add #<abstr-halide-expr> #<abstr-halide-expr>) 'int64 16)
 (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
optimized-template:
  (vs-mpy-add
 ...
 (combine #<abstr-expr> #<abstr-expr>)
 (list
  (sca-mul
   (sca-cast (int8_t (bv #x01 8)) 'int32)
   (sca-cast
    (union [(&& (! xi?$2169) (! xi?$2170)) #(struct:int8_t (bv #x01 8))] [(|| xi?$2169 (&& xi?$2170 (! xi?$2169))) #(struct:int32_t
                                                                                                                     (ite* (⊢ xi?$2169 t5829) (⊢ (&& xi?$2170 (! xi?$2169)) output_multiplier)))])
    'int32))
  (sca-mul
   (sca-cast (int8_t (bv #x01 8)) 'int32)
   (sca-cast
    (union [(&& (! xi?$2169) (! xi?$2170)) #(struct:int8_t (bv #x01 8))] [(|| xi?$2169 (&& xi?$2170 (! xi?$2169))) #(struct:int32_t
                                                                                                                     (ite* (⊢ xi?$2169 t5829) (⊢ (&& xi?$2170 (! xi?$2169)) output_multiplier)))])
    'int32)))
 #f
 #f
 #f
 'int32)
optimized Halide 0:
  (int64_t
 (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (bvadd (app abstr-vals$2777 0) (app abstr-vals$2778 0)) (bitvector 64))))
optimized x86 0:
  (int32_t
 (bvadd (bvmul (app abstr-vals$2778 0) (ite* (⊢ (&& (! xi?$2169) (! xi?$2170)) (bv #x00000001 32)) (⊢ (|| xi?$2169 (&& xi?$2170 (! xi?$2169))) (ite* (⊢ xi?$2169 t5829) (⊢ (&& xi?$2170 (! xi?$2169)) output_multiplier))))) (bvmul (app abstr-vals$2777 0) (ite* (⊢ (&& (! xi?$2169) (! xi?$2170)) (bv #x00000001 32)) (⊢ (|| xi?$2169 (&& xi?$2170 (! xi?$2169))) (ite* (⊢ xi?$2169 t5829) (⊢ (&& xi?$2170 (! xi?$2169)) output_multiplier)))))))
Ran synthesizer for 26 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-add
    (vec-mul
     (vec-cast
      (load
       (buffer column_sums_b 'uint32)
       (ramp
        (sca-add (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16) 16)
        1
        16)
       (aligned 16 0))
      'int32
      16)
     (sca-broadcast (int32_t t5829) 16))
    (vec-add
     (load
      (buffer bias 'int32)
      (ramp (sca-mul output.s0.x.x 16) 1 16)
      (aligned 16 0))
     (sca-broadcast
      (sca-add
       (sca-mul
        (sca-mul (int32_t t5829) (int32_t t5830))
        (int32_t mat_a.extent.0))
       (sca-mul (int32_t t5830) (int32_t t6653)))
      16)))
   (vec-cast
    (load
     (buffer multiplied_no_offsets 'uint32)
     (ramp
      (sca-add (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121)) 4)
      1
      16)
     (aligned 4 0))
    'int32
    16))
  'int64
  16)
 (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
template:
  (vs-mpy-add
 ...
 (combine
  (vs-mpy-add
   ...
   (combine
    (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
    (vs-mpy-add
     ...
     (combine
      #<load-data>
      (broadcast
       ...
       (sca-add
        (sca-mul
         (sca-mul (int32_t t5829) (int32_t t5830))
         (int32_t mat_a.extent.0))
        (sca-mul (int32_t t5830) (int32_t t6653)))))
     (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
     #f
     #f
     #f
     'int32))
   (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
   #f
   #f
   #f
   'int32)
  (cast ... #<load-data> 'int32 #f))
 (list
  (sca-mul
   (sca-cast (int8_t (bv #x01 8)) 'int32)
   (sca-cast
    (union [(&& (! xi?$2169) (! xi?$2170)) #(struct:int8_t (bv #x01 8))] [(|| xi?$2169 (&& xi?$2170 (! xi?$2169))) #(struct:int32_t
                                                                                                                     (ite* (⊢ xi?$2169 t5829) (⊢ (&& xi?$2170 (! xi?$2169)) output_multiplier)))])
    'int32))
  (sca-mul
   (sca-cast (int8_t (bv #x01 8)) 'int32)
   (sca-cast
    (union [(&& (! xi?$2169) (! xi?$2170)) #(struct:int8_t (bv #x01 8))] [(|| xi?$2169 (&& xi?$2170 (! xi?$2169))) #(struct:int32_t
                                                                                                                     (ite* (⊢ xi?$2169 t5829) (⊢ (&& xi?$2170 (! xi?$2169)) output_multiplier)))])
    'int32)))
 #f
 #f
 #f
 'int64)
axioms:
  '(#t #t)
optimized-halide-expr:
  (vec-mul
 (vec-cast (vec-add #<abstr-halide-expr> #<abstr-halide-expr>) 'int64 16)
 (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
optimized-template:
  (vs-mpy-add
 ...
 (combine #<abstr-expr> #<abstr-expr>)
 (list
  (sca-mul
   (sca-cast (int8_t (bv #x01 8)) 'int32)
   (sca-cast
    (union [(&& (! xi?$2169) (! xi?$2170)) #(struct:int8_t (bv #x01 8))] [(|| xi?$2169 (&& xi?$2170 (! xi?$2169))) #(struct:int32_t
                                                                                                                     (ite* (⊢ xi?$2169 t5829) (⊢ (&& xi?$2170 (! xi?$2169)) output_multiplier)))])
    'int32))
  (sca-mul
   (sca-cast (int8_t (bv #x01 8)) 'int32)
   (sca-cast
    (union [(&& (! xi?$2169) (! xi?$2170)) #(struct:int8_t (bv #x01 8))] [(|| xi?$2169 (&& xi?$2170 (! xi?$2169))) #(struct:int32_t
                                                                                                                     (ite* (⊢ xi?$2169 t5829) (⊢ (&& xi?$2170 (! xi?$2169)) output_multiplier)))])
    'int32)))
 #f
 #f
 #f
 'int64)
optimized Halide 0:
  (int64_t
 (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (bvadd (app abstr-vals$2779 0) (app abstr-vals$2780 0)) (bitvector 64))))
optimized x86 0:
  (int64_t
 (bvadd (bvmul (sign-extend (app abstr-vals$2780 0) (bitvector 64)) (sign-extend (ite* (⊢ (&& (! xi?$2169) (! xi?$2170)) (bv #x00000001 32)) (⊢ (|| xi?$2169 (&& xi?$2170 (! xi?$2169))) (ite* (⊢ xi?$2169 t5829) (⊢ (&& xi?$2170 (! xi?$2169)) output_multiplier)))) (bitvector 64))) (bvmul (sign-extend (ite* (⊢ (&& (! xi?$2169) (! xi?$2170)) (bv #x00000001 32)) (⊢ (|| xi?$2169 (&& xi?$2170 (! xi?$2169))) (ite* (⊢ xi?$2169 t5829) (⊢ (&& xi?$2170 (! xi?$2169)) output_multiplier)))) (bitvector 64)) (sign-extend (app abstr-vals$2779 0) (bitvector 64)))))
Ran synthesizer for 1414 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-add
    (vec-mul
     (vec-cast
      (load
       (buffer column_sums_b 'uint32)
       (ramp
        (sca-add (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16) 16)
        1
        16)
       (aligned 16 0))
      'int32
      16)
     (sca-broadcast (int32_t t5829) 16))
    (vec-add
     (load
      (buffer bias 'int32)
      (ramp (sca-mul output.s0.x.x 16) 1 16)
      (aligned 16 0))
     (sca-broadcast
      (sca-add
       (sca-mul
        (sca-mul (int32_t t5829) (int32_t t5830))
        (int32_t mat_a.extent.0))
       (sca-mul (int32_t t5830) (int32_t t6653)))
      16)))
   (vec-cast
    (load
     (buffer multiplied_no_offsets 'uint32)
     (ramp
      (sca-add (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121)) 4)
      1
      16)
     (aligned 4 0))
    'int32
    16))
  'int64
  16)
 (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
template:
  (cast
 ...
 (vs-mpy-add
  ...
  (combine
   (vs-mpy-add
    ...
    (combine
     (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
     (vs-mpy-add
      ...
      (combine
       #<load-data>
       (broadcast
        ...
        (sca-add
         (sca-mul
          (sca-mul (int32_t t5829) (int32_t t5830))
          (int32_t mat_a.extent.0))
         (sca-mul (int32_t t5830) (int32_t t6653)))))
      (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
      #f
      #f
      #f
      'int32))
    (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
    #f
    #f
    #f
    'int32)
   (cast ... #<load-data> 'int32 #f))
  (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
  #f
  #f
  #f
  'int32)
 'int64
 x?$2165)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-mul
 (vec-cast #<abstr-halide-expr> 'int64 16)
 (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
optimized-template:
  (cast ... #<abstr-expr> 'int64 x?$2165)
optimized Halide 0:
  (int64_t
 (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (app abstr-vals$2781 0) (bitvector 64))))
optimized x86 0:
  (int64_t (sign-extend (app abstr-vals$2781 0) (bitvector 64)))
run-x86-synthesizer
halide-expr:
  (vec-mul
 (vec-cast
  (vec-add
   (vec-add
    (vec-mul
     (vec-cast
      (load
       (buffer column_sums_b 'uint32)
       (ramp
        (sca-add (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16) 16)
        1
        16)
       (aligned 16 0))
      'int32
      16)
     (sca-broadcast (int32_t t5829) 16))
    (vec-add
     (load
      (buffer bias 'int32)
      (ramp (sca-mul output.s0.x.x 16) 1 16)
      (aligned 16 0))
     (sca-broadcast
      (sca-add
       (sca-mul
        (sca-mul (int32_t t5829) (int32_t t5830))
        (int32_t mat_a.extent.0))
       (sca-mul (int32_t t5830) (int32_t t6653)))
      16)))
   (vec-cast
    (load
     (buffer multiplied_no_offsets 'uint32)
     (ramp
      (sca-add (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121)) 4)
      1
      16)
     (aligned 4 0))
    'int32
    16))
  'int64
  16)
 (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
template:
  (vs-mpy-add
 ...
 (vs-mpy-add
  ...
  (combine
   (vs-mpy-add
    ...
    (combine
     (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
     (vs-mpy-add
      ...
      (combine
       #<load-data>
       (broadcast
        ...
        (sca-add
         (sca-mul
          (sca-mul (int32_t t5829) (int32_t t5830))
          (int32_t mat_a.extent.0))
         (sca-mul (int32_t t5830) (int32_t t6653)))))
      (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
      #f
      #f
      #f
      'int32))
    (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
    #f
    #f
    #f
    'int32)
   (cast ... #<load-data> 'int32 #f))
  (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
  #f
  #f
  #f
  'int32)
 (list (int32_t (ite x?$2364 t5829 output_multiplier)))
 #f
 #f
 #f
 'int64)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-mul
 (vec-cast #<abstr-halide-expr> 'int64 16)
 (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
optimized-template:
  (vs-mpy-add
 ...
 #<abstr-expr>
 (list (int32_t (ite x?$2364 t5829 output_multiplier)))
 #f
 #f
 #f
 'int64)
optimized Halide 0:
  (int64_t
 (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (app abstr-vals$2782 0) (bitvector 64))))
optimized x86 0:
  (int64_t
 (bvmul (sign-extend (app abstr-vals$2782 0) (bitvector 64)) (sign-extend (ite x?$2364 t5829 output_multiplier) (bitvector 64))))
Ran synthesizer for 486 ms
(model
 [x?$2364 #f])
(vec-mul
 (vec-cast #<abstr-halide-expr> 'int64 16)
 (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
(vs-mpy-add
 ...
 (vs-mpy-add
  ...
  (combine
   (vs-mpy-add
    ...
    (combine
     (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
     (vs-mpy-add
      ...
      (combine
       #<load-data>
       (broadcast
        ...
        (sca-add
         (sca-mul
          (sca-mul (int32_t t5829) (int32_t t5830))
          (int32_t mat_a.extent.0))
         (sca-mul (int32_t t5830) (int32_t t6653)))))
      (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
      #f
      #f
      #f
      'int32))
    (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
    #f
    #f
    #f
    'int32)
   (cast ... #<load-data> 'int32 #f))
  (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
  #f
  #f
  #f
  'int32)
 (list (int32_t output_multiplier))
 #f
 #f
 #f
 'int64)
Ran bounds analysis for 15345 ms
Ran bounds analysis for 4502 ms
"Success?"
#t
(vs-mpy-add ... (vs-mpy-add ... (combine (vs-mpy-add ... (combine (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32) (vs-mpy-add ... (combine #<load-data> (broadcast ... (sca-add (sca-mul (sca-mul (int32_t t5829) (int32_t t5830)) (int32_t mat_a.extent.0)) (sca-mul (int32_t t5830) (int32_t t6653))))) (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8))) #f #f #f 'int32)) (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8))) #f #f #f 'int32) (cast ... #<load-data> 'int32 #f)) (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8))) #f #f #f 'int32) (list (int32_t output_multiplier)) #f #f #f 'int64)
"Building Expr:"
(sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)
"Fold templates"
'()
here()

"Replace templates"
'()
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)
template:
  (broadcast ... (int64_t (bv #x0000000040000000 64)))
axioms:
  '()
optimized-halide-expr:
  (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)
optimized-template:
  (broadcast ... (int64_t (bv #x0000000040000000 64)))
optimized Halide 0:
  (int64_t (bv #x0000000040000000 64))
optimized x86 0:
  (int64_t (bv #x0000000040000000 64))
Ran synthesizer for 18 ms
(model)
(sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)
(broadcast ... (int64_t (bv #x0000000040000000 64)))
Ran bounds analysis for 22 ms
Ran bounds analysis for 13 ms
"Extended success?"
#t
(broadcast ... (int64_t (bv #x0000000040000000 64)))
"Building Expr:"
(vec-div
 (vec-mul
  (vec-cast
   (vec-add
    (vec-add
     (vec-mul
      (vec-cast
       (load
        (buffer column_sums_b 'uint32)
        (ramp
         (sca-add (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16) 16)
         1
         16)
        (aligned 16 0))
       'int32
       16)
      (sca-broadcast (int32_t t5829) 16))
     (vec-add
      (load
       (buffer bias 'int32)
       (ramp (sca-mul output.s0.x.x 16) 1 16)
       (aligned 16 0))
      (sca-broadcast
       (sca-add
        (sca-mul
         (sca-mul (int32_t t5829) (int32_t t5830))
         (int32_t mat_a.extent.0))
        (sca-mul (int32_t t5830) (int32_t t6653)))
       16)))
    (vec-cast
     (load
      (buffer multiplied_no_offsets 'uint32)
      (ramp
       (sca-add (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121)) 4)
       1
       16)
      (aligned 4 0))
     'int32
     16))
   'int64
   16)
  (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
 (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16))
"Fold templates"
'()
here()

"Replace templates"
(list
 (vs-shift-right
  ...
  #<load-data>
  (int64_t (bv #x000000000000001e 64))
  #f
  #f
  #t)
 (vs-divide ... #<load-data> (int64_t (bv #x0000000040000000 64))))
run-x86-synthesizer
halide-expr:
  (vec-div
 (vec-mul
  (vec-cast
   (vec-add
    (vec-add
     (vec-mul
      (vec-cast
       (load
        (buffer column_sums_b 'uint32)
        (ramp
         (sca-add (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16) 16)
         1
         16)
        (aligned 16 0))
       'int32
       16)
      (sca-broadcast (int32_t t5829) 16))
     (vec-add
      (load
       (buffer bias 'int32)
       (ramp (sca-mul output.s0.x.x 16) 1 16)
       (aligned 16 0))
      (sca-broadcast
       (sca-add
        (sca-mul
         (sca-mul (int32_t t5829) (int32_t t5830))
         (int32_t mat_a.extent.0))
        (sca-mul (int32_t t5830) (int32_t t6653)))
       16)))
    (vec-cast
     (load
      (buffer multiplied_no_offsets 'uint32)
      (ramp
       (sca-add (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121)) 4)
       1
       16)
      (aligned 4 0))
     'int32
     16))
   'int64
   16)
  (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
 (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16))
template:
  (vs-shift-right ... #<load-data> (int64_t (bv #x000000000000001e 64)) #f #f #t)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-div
 (vec-mul
  (vec-cast
   (vec-add
    (vec-add
     (vec-mul
      (vec-cast
       (load
        (buffer column_sums_b 'uint32)
        (ramp
         (sca-add (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16) 16)
         1
         16)
        (aligned 16 0))
       'int32
       16)
      (sca-broadcast (int32_t t5829) 16))
     (vec-add
      (load
       (buffer bias 'int32)
       (ramp (sca-mul output.s0.x.x 16) 1 16)
       (aligned 16 0))
      (sca-broadcast
       (sca-add
        (sca-mul
         (sca-mul (int32_t t5829) (int32_t t5830))
         (int32_t mat_a.extent.0))
        (sca-mul (int32_t t5830) (int32_t t6653)))
       16)))
    (vec-cast #<abstr-halide-expr> 'int32 16))
   'int64
   16)
  (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
 (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16))
optimized-template:
  (vs-shift-right
 ...
 #<abstr-expr>
 (int64_t (bv #x000000000000001e 64))
 #f
 #f
 #t)
optimized Halide 0:
  (int64_t
 (bvadd (bvashr (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app abstr-vals$2794 0)) (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app abstr-vals$2794 0)) (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app abstr-vals$2794 0)) (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64))))
optimized x86 0:
  (uint32_t (bvashr (app abstr-vals$2794 0) (bv #x0000001e 32)))
run-x86-synthesizer
halide-expr:
  (vec-div
 (vec-mul
  (vec-cast
   (vec-add
    (vec-add
     (vec-mul
      (vec-cast
       (load
        (buffer column_sums_b 'uint32)
        (ramp
         (sca-add (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16) 16)
         1
         16)
        (aligned 16 0))
       'int32
       16)
      (sca-broadcast (int32_t t5829) 16))
     (vec-add
      (load
       (buffer bias 'int32)
       (ramp (sca-mul output.s0.x.x 16) 1 16)
       (aligned 16 0))
      (sca-broadcast
       (sca-add
        (sca-mul
         (sca-mul (int32_t t5829) (int32_t t5830))
         (int32_t mat_a.extent.0))
        (sca-mul (int32_t t5830) (int32_t t6653)))
       16)))
    (vec-cast
     (load
      (buffer multiplied_no_offsets 'uint32)
      (ramp
       (sca-add (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121)) 4)
       1
       16)
      (aligned 4 0))
     'int32
     16))
   'int64
   16)
  (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
 (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16))
template:
  (vs-divide ... #<load-data> (int64_t (bv #x0000000040000000 64)))
axioms:
  '(#t)
optimized-halide-expr:
  (vec-div
 (vec-mul
  (vec-cast
   (vec-add
    (vec-add
     (vec-mul
      (vec-cast
       (load
        (buffer column_sums_b 'uint32)
        (ramp
         (sca-add (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16) 16)
         1
         16)
        (aligned 16 0))
       'int32
       16)
      (sca-broadcast (int32_t t5829) 16))
     (vec-add
      (load
       (buffer bias 'int32)
       (ramp (sca-mul output.s0.x.x 16) 1 16)
       (aligned 16 0))
      (sca-broadcast
       (sca-add
        (sca-mul
         (sca-mul (int32_t t5829) (int32_t t5830))
         (int32_t mat_a.extent.0))
        (sca-mul (int32_t t5830) (int32_t t6653)))
       16)))
    (vec-cast #<abstr-halide-expr> 'int32 16))
   'int64
   16)
  (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
 (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16))
optimized-template:
  (vs-divide ... #<abstr-expr> (int64_t (bv #x0000000040000000 64)))
optimized Halide 0:
  (int64_t
 (bvadd (bvashr (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app abstr-vals$2795 0)) (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app abstr-vals$2795 0)) (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app abstr-vals$2795 0)) (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64))))
optimized x86 0:
  (uint32_t
 (extract 31 0 (bvadd (bvashr (zero-extend (app abstr-vals$2795 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (zero-extend (app abstr-vals$2795 0) (bitvector 64)) (bvneg (bvashr (zero-extend (app abstr-vals$2795 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))))
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (vec-div
 (vec-mul
  (vec-cast
   (vec-add
    (vec-add
     (vec-mul
      (vec-cast
       (load
        (buffer column_sums_b 'uint32)
        (ramp
         (sca-add (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16) 16)
         1
         16)
        (aligned 16 0))
       'int32
       16)
      (sca-broadcast (int32_t t5829) 16))
     (vec-add
      (load
       (buffer bias 'int32)
       (ramp (sca-mul output.s0.x.x 16) 1 16)
       (aligned 16 0))
      (sca-broadcast
       (sca-add
        (sca-mul
         (sca-mul (int32_t t5829) (int32_t t5830))
         (int32_t mat_a.extent.0))
        (sca-mul (int32_t t5830) (int32_t t6653)))
       16)))
    (vec-cast
     (load
      (buffer multiplied_no_offsets 'uint32)
      (ramp
       (sca-add (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121)) 4)
       1
       16)
      (aligned 4 0))
     'int32
     16))
   'int64
   16)
  (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
 (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16))
template:
  (vs-shift-right
 ...
 (vs-mpy-add
  ...
  (vs-mpy-add
   ...
   (combine
    (vs-mpy-add
     ...
     (combine
      (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
      (vs-mpy-add
       ...
       (combine
        #<load-data>
        (broadcast
         ...
         (sca-add
          (sca-mul
           (sca-mul (int32_t t5829) (int32_t t5830))
           (int32_t mat_a.extent.0))
          (sca-mul (int32_t t5830) (int32_t t6653)))))
       (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
       #f
       #f
       #f
       'int32))
     (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
     #f
     #f
     #f
     'int32)
    (cast ... #<load-data> 'int32 #f))
   (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
   #f
   #f
   #f
   'int32)
  (list (int32_t output_multiplier))
  #f
  #f
  #f
  'int64)
 (int64_t (bv #x000000000000001e 64))
 #f
 #f
 #t)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$2796 idx) (bv #x4000000000000000 64)) (bvsle (bv #xc000000080000000 64) (app abstr-vals$2796 idx)))))
optimized-halide-expr:
  (vec-div
 #<abstr-halide-expr>
 (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16))
optimized-template:
  (vs-shift-right
 ...
 #<abstr-expr>
 (int64_t (bv #x000000000000001e 64))
 #f
 #f
 #t)
optimized Halide 0:
  (int64_t
 (bvadd (bvashr (app abstr-vals$2796 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$2796 0) (bvneg (bvashr (app abstr-vals$2796 0) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64))))
optimized x86 0:
  (int64_t (bvashr (app abstr-vals$2796 0) (bv #x000000000000001e 64)))
Ran synthesizer for 268 ms
(model)
(vec-div
 #<abstr-halide-expr>
 (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16))
(vs-shift-right
 ...
 (vs-mpy-add
  ...
  (vs-mpy-add
   ...
   (combine
    (vs-mpy-add
     ...
     (combine
      (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
      (vs-mpy-add
       ...
       (combine
        #<load-data>
        (broadcast
         ...
         (sca-add
          (sca-mul
           (sca-mul (int32_t t5829) (int32_t t5830))
           (int32_t mat_a.extent.0))
          (sca-mul (int32_t t5830) (int32_t t6653)))))
       (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
       #f
       #f
       #f
       'int32))
     (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
     #f
     #f
     #f
     'int32)
    (cast ... #<load-data> 'int32 #f))
   (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
   #f
   #f
   #f
   'int32)
  (list (int32_t output_multiplier))
  #f
  #f
  #f
  'int64)
 (int64_t (bv #x000000000000001e 64))
 #f
 #f
 #t)
Ran bounds analysis for 53 ms
Ran bounds analysis for 46 ms
"Extended success?"
#t
(vs-shift-right
 ...
 (vs-mpy-add
  ...
  (vs-mpy-add
   ...
   (combine
    (vs-mpy-add
     ...
     (combine
      (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
      (vs-mpy-add
       ...
       (combine
        #<load-data>
        (broadcast
         ...
         (sca-add
          (sca-mul
           (sca-mul (int32_t t5829) (int32_t t5830))
           (int32_t mat_a.extent.0))
          (sca-mul (int32_t t5830) (int32_t t6653)))))
       (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
       #f
       #f
       #f
       'int32))
     (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
     #f
     #f
     #f
     'int32)
    (cast ... #<load-data> 'int32 #f))
   (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
   #f
   #f
   #f
   'int32)
  (list (int32_t output_multiplier))
  #f
  #f
  #f
  'int64)
 (int64_t (bv #x000000000000001e 64))
 #f
 #f
 #t)
"Building Expr:"
(vec-bwand
 (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
 (vec-div
  (vec-mul
   (vec-cast
    (vec-add
     (vec-add
      (vec-mul
       (vec-cast
        (load
         (buffer column_sums_b 'uint32)
         (ramp
          (sca-add (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16) 16)
          1
          16)
         (aligned 16 0))
        'int32
        16)
       (sca-broadcast (int32_t t5829) 16))
      (vec-add
       (load
        (buffer bias 'int32)
        (ramp (sca-mul output.s0.x.x 16) 1 16)
        (aligned 16 0))
       (sca-broadcast
        (sca-add
         (sca-mul
          (sca-mul (int32_t t5829) (int32_t t5830))
          (int32_t mat_a.extent.0))
         (sca-mul (int32_t t5830) (int32_t t6653)))
        16)))
     (vec-cast
      (load
       (buffer multiplied_no_offsets 'uint32)
       (ramp
        (sca-add (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121)) 4)
        1
        16)
       (aligned 4 0))
      'int32
      16))
    'int64
    16)
   (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
  (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
"Fold templates"
(list
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (vs-mpy-add
    ...
    (combine
     (vs-mpy-add
      ...
      (combine
       (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
       (vs-mpy-add
        ...
        (combine
         #<load-data>
         (broadcast
          ...
          (sca-add
           (sca-mul
            (sca-mul (int32_t t5829) (int32_t t5830))
            (int32_t mat_a.extent.0))
           (sca-mul (int32_t t5830) (int32_t t6653)))))
        (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
        #f
        #f
        #f
        'int32))
      (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
      #f
      #f
      #f
      'int32)
     (cast ... #<load-data> 'int32 #f))
    (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
    #f
    #f
    #f
    'int32)
   (list (int32_t output_multiplier))
   #f
   #f
   #f
   'int64)
  (int64_t (bv #x000000000000001e 64))
  #f
  #f
  #t)
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (vs-mpy-add
    ...
    (combine
     (vs-mpy-add
      ...
      (combine
       (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
       (vs-mpy-add
        ...
        (combine
         #<load-data>
         (broadcast
          ...
          (sca-add
           (sca-mul
            (sca-mul (int32_t t5829) (int32_t t5830))
            (int32_t mat_a.extent.0))
           (sca-mul (int32_t t5830) (int32_t t6653)))))
        (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
        #f
        #f
        #f
        'int32))
      (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
      #f
      #f
      #f
      'int32)
     (cast ... #<load-data> 'int32 #f))
    (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
    #f
    #f
    #f
    'int32)
   (list (int32_t output_multiplier))
   #f
   #f
   #f
   'int64)
  (int64_t (bv #x000000000000001e 64))
  x?$2798
  x?$2799
  x?$2800))
here(#(struct:vs-shift-right ... #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<load-data> (#(struct:int32_t t5829)) #f #f #f int32) #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-add #(struct:sca-mul #(struct:sca-mul #(struct:int32_t t5829) #(struct:int32_t t5830)) #(struct:int32_t mat_a.extent.0)) #(struct:sca-mul #(struct:int32_t t5830) #(struct:int32_t t6653))))> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32)> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32) #(struct:cast ... #<load-data> int32 #f)> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32) (#(struct:int32_t output_multiplier)) #f #f #f int64) #(struct:int64_t (bv #x000000000000001e 64)) #f #f #t) #(struct:vs-shift-right ... #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<load-data> (#(struct:int32_t t5829)) #f #f #f int32) #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-add #(struct:sca-mul #(struct:sca-mul #(struct:int32_t t5829) #(struct:int32_t t5830)) #(struct:int32_t mat_a.extent.0)) #(struct:sca-mul #(struct:int32_t t5830) #(struct:int32_t t6653))))> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32)> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32) #(struct:cast ... #<load-data> int32 #f)> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32) (#(struct:int32_t output_multiplier)) #f #f #f int64) #(struct:int64_t (bv #x000000000000001e 64)) x?$2798 x?$2799 x?$2800))

"Replace templates"
'()
run-x86-synthesizer
halide-expr:
  (vec-bwand
 (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
 (vec-div
  (vec-mul
   (vec-cast
    (vec-add
     (vec-add
      (vec-mul
       (vec-cast
        (load
         (buffer column_sums_b 'uint32)
         (ramp
          (sca-add (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16) 16)
          1
          16)
         (aligned 16 0))
        'int32
        16)
       (sca-broadcast (int32_t t5829) 16))
      (vec-add
       (load
        (buffer bias 'int32)
        (ramp (sca-mul output.s0.x.x 16) 1 16)
        (aligned 16 0))
       (sca-broadcast
        (sca-add
         (sca-mul
          (sca-mul (int32_t t5829) (int32_t t5830))
          (int32_t mat_a.extent.0))
         (sca-mul (int32_t t5830) (int32_t t6653)))
        16)))
     (vec-cast
      (load
       (buffer multiplied_no_offsets 'uint32)
       (ramp
        (sca-add (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121)) 4)
        1
        16)
       (aligned 4 0))
      'int32
      16))
    'int64
    16)
   (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
  (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
template:
  (vs-shift-right
 ...
 (vs-mpy-add
  ...
  (vs-mpy-add
   ...
   (combine
    (vs-mpy-add
     ...
     (combine
      (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
      (vs-mpy-add
       ...
       (combine
        #<load-data>
        (broadcast
         ...
         (sca-add
          (sca-mul
           (sca-mul (int32_t t5829) (int32_t t5830))
           (int32_t mat_a.extent.0))
          (sca-mul (int32_t t5830) (int32_t t6653)))))
       (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
       #f
       #f
       #f
       'int32))
     (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
     #f
     #f
     #f
     'int32)
    (cast ... #<load-data> 'int32 #f))
   (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
   #f
   #f
   #f
   'int32)
  (list (int32_t output_multiplier))
  #f
  #f
  #f
  'int64)
 (int64_t (bv #x000000000000001e 64))
 #f
 #f
 #t)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$2811 idx) (bv #x4000000000000000 64)) (bvsle (bv #xc000000080000000 64) (app abstr-vals$2811 idx)))))
optimized-halide-expr:
  (vec-bwand
 (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
 (vec-div
  #<abstr-halide-expr>
  (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
optimized-template:
  (vs-shift-right
 ...
 #<abstr-expr>
 (int64_t (bv #x000000000000001e 64))
 #f
 #f
 #t)
optimized Halide 0:
  (int64_t
 (bvand (bv #x0000000000000001 64) (bvadd (bvashr (app abstr-vals$2811 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$2811 0) (bvneg (bvashr (app abstr-vals$2811 0) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))))
optimized x86 0:
  (int64_t (bvashr (app abstr-vals$2811 0) (bv #x000000000000001e 64)))
Ran synthesizer for 221 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-bwand
 (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
 (vec-div
  (vec-mul
   (vec-cast
    (vec-add
     (vec-add
      (vec-mul
       (vec-cast
        (load
         (buffer column_sums_b 'uint32)
         (ramp
          (sca-add (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16) 16)
          1
          16)
         (aligned 16 0))
        'int32
        16)
       (sca-broadcast (int32_t t5829) 16))
      (vec-add
       (load
        (buffer bias 'int32)
        (ramp (sca-mul output.s0.x.x 16) 1 16)
        (aligned 16 0))
       (sca-broadcast
        (sca-add
         (sca-mul
          (sca-mul (int32_t t5829) (int32_t t5830))
          (int32_t mat_a.extent.0))
         (sca-mul (int32_t t5830) (int32_t t6653)))
        16)))
     (vec-cast
      (load
       (buffer multiplied_no_offsets 'uint32)
       (ramp
        (sca-add (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121)) 4)
        1
        16)
       (aligned 4 0))
      'int32
      16))
    'int64
    16)
   (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
  (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
template:
  (vs-shift-right
 ...
 (vs-mpy-add
  ...
  (vs-mpy-add
   ...
   (combine
    (vs-mpy-add
     ...
     (combine
      (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
      (vs-mpy-add
       ...
       (combine
        #<load-data>
        (broadcast
         ...
         (sca-add
          (sca-mul
           (sca-mul (int32_t t5829) (int32_t t5830))
           (int32_t mat_a.extent.0))
          (sca-mul (int32_t t5830) (int32_t t6653)))))
       (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
       #f
       #f
       #f
       'int32))
     (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
     #f
     #f
     #f
     'int32)
    (cast ... #<load-data> 'int32 #f))
   (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
   #f
   #f
   #f
   'int32)
  (list (int32_t output_multiplier))
  #f
  #f
  #f
  'int64)
 (int64_t (bv #x000000000000001e 64))
 x?$2798
 x?$2799
 x?$2800)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$2812 idx) (bv #x4000000000000000 64)) (bvsle (bv #xc000000080000000 64) (app abstr-vals$2812 idx)))))
optimized-halide-expr:
  (vec-bwand
 (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
 (vec-div
  #<abstr-halide-expr>
  (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
optimized-template:
  (vs-shift-right
 ...
 #<abstr-expr>
 (int64_t (bv #x000000000000001e 64))
 x?$2798
 x?$2799
 x?$2800)
optimized Halide 0:
  (int64_t
 (bvand (bv #x0000000000000001 64) (bvadd (bvashr (app abstr-vals$2812 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$2812 0) (bvneg (bvashr (app abstr-vals$2812 0) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))))
optimized x86 0:
  (int64_t
 (ite x?$2798 (bvadd (ite x?$2800 (bvashr (app abstr-vals$2812 0) (bv #x000000000000001e 64)) (bvlshr (app abstr-vals$2812 0) (bv #x000000000000001e 64))) (bvand (bv #x0000000000000001 64) (ite x?$2800 (bvashr (app abstr-vals$2812 0) (bv #x000000000000001d 64)) (bvlshr (app abstr-vals$2812 0) (bv #x000000000000001d 64))))) (ite x?$2800 (bvashr (app abstr-vals$2812 0) (bv #x000000000000001e 64)) (bvlshr (app abstr-vals$2812 0) (bv #x000000000000001e 64)))))
Ran synthesizer for 249 ms
(unsat)
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (vec-bwand
 (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
 (vec-div
  (vec-mul
   (vec-cast
    (vec-add
     (vec-add
      (vec-mul
       (vec-cast
        (load
         (buffer column_sums_b 'uint32)
         (ramp
          (sca-add (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16) 16)
          1
          16)
         (aligned 16 0))
        'int32
        16)
       (sca-broadcast (int32_t t5829) 16))
      (vec-add
       (load
        (buffer bias 'int32)
        (ramp (sca-mul output.s0.x.x 16) 1 16)
        (aligned 16 0))
       (sca-broadcast
        (sca-add
         (sca-mul
          (sca-mul (int32_t t5829) (int32_t t5830))
          (int32_t mat_a.extent.0))
         (sca-mul (int32_t t5830) (int32_t t6653)))
        16)))
     (vec-cast
      (load
       (buffer multiplied_no_offsets 'uint32)
       (ramp
        (sca-add (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121)) 4)
        1
        16)
       (aligned 4 0))
      'int32
      16))
    'int64
    16)
   (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
  (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
template:
  (bitwise-op
 ...
 'and
 (broadcast ... (int64_t (bv #x0000000000000001 64)))
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (vs-mpy-add
    ...
    (combine
     (vs-mpy-add
      ...
      (combine
       (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
       (vs-mpy-add
        ...
        (combine
         #<load-data>
         (broadcast
          ...
          (sca-add
           (sca-mul
            (sca-mul (int32_t t5829) (int32_t t5830))
            (int32_t mat_a.extent.0))
           (sca-mul (int32_t t5830) (int32_t t6653)))))
        (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
        #f
        #f
        #f
        'int32))
      (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
      #f
      #f
      #f
      'int32)
     (cast ... #<load-data> 'int32 #f))
    (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
    #f
    #f
    #f
    'int32)
   (list (int32_t output_multiplier))
   #f
   #f
   #f
   'int64)
  (int64_t (bv #x000000000000001e 64))
  #f
  #f
  #t))
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$2813 idx) (bv #x0000000000000001 64)) (bvsle (bv #x0000000000000001 64) (app abstr-vals$2813 idx))))
 (forall (idx) (&& (bvsle (app abstr-vals$2814 idx) (bv #x0000000100000000 64)) (bvsle (bv #xffffffff00000002 64) (app abstr-vals$2814 idx)))))
optimized-halide-expr:
  (vec-bwand #<abstr-halide-expr> #<abstr-halide-expr>)
optimized-template:
  (bitwise-op ... 'and #<abstr-expr> #<abstr-expr>)
optimized Halide 0:
  (int64_t (bvand (app abstr-vals$2813 0) (app abstr-vals$2814 0)))
optimized x86 0:
  (int64_t (bvand (app abstr-vals$2813 0) (app abstr-vals$2814 0)))
Ran synthesizer for 36 ms
(model)
(vec-bwand #<abstr-halide-expr> #<abstr-halide-expr>)
(bitwise-op
 ...
 'and
 (broadcast ... (int64_t (bv #x0000000000000001 64)))
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (vs-mpy-add
    ...
    (combine
     (vs-mpy-add
      ...
      (combine
       (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
       (vs-mpy-add
        ...
        (combine
         #<load-data>
         (broadcast
          ...
          (sca-add
           (sca-mul
            (sca-mul (int32_t t5829) (int32_t t5830))
            (int32_t mat_a.extent.0))
           (sca-mul (int32_t t5830) (int32_t t6653)))))
        (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
        #f
        #f
        #f
        'int32))
      (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
      #f
      #f
      #f
      'int32)
     (cast ... #<load-data> 'int32 #f))
    (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
    #f
    #f
    #f
    'int32)
   (list (int32_t output_multiplier))
   #f
   #f
   #f
   'int64)
  (int64_t (bv #x000000000000001e 64))
  #f
  #f
  #t))
Ran bounds analysis for 33 ms
Ran bounds analysis for 52 ms
"Extended success?"
#t
(bitwise-op
 ...
 'and
 (broadcast ... (int64_t (bv #x0000000000000001 64)))
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (vs-mpy-add
    ...
    (combine
     (vs-mpy-add
      ...
      (combine
       (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
       (vs-mpy-add
        ...
        (combine
         #<load-data>
         (broadcast
          ...
          (sca-add
           (sca-mul
            (sca-mul (int32_t t5829) (int32_t t5830))
            (int32_t mat_a.extent.0))
           (sca-mul (int32_t t5830) (int32_t t6653)))))
        (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
        #f
        #f
        #f
        'int32))
      (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
      #f
      #f
      #f
      'int32)
     (cast ... #<load-data> 'int32 #f))
    (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
    #f
    #f
    #f
    'int32)
   (list (int32_t output_multiplier))
   #f
   #f
   #f
   'int64)
  (int64_t (bv #x000000000000001e 64))
  #f
  #f
  #t))
"Building Expr:"
(sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)
"Fold templates"
'()
here()

"Replace templates"
'()
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)
template:
  (broadcast ... (int64_t (bv #x0000000080000000 64)))
axioms:
  '()
optimized-halide-expr:
  (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)
optimized-template:
  (broadcast ... (int64_t (bv #x0000000080000000 64)))
optimized Halide 0:
  (int64_t (bv #x0000000080000000 64))
optimized x86 0:
  (int64_t (bv #x0000000080000000 64))
Ran synthesizer for 18 ms
(model)
(sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)
(broadcast ... (int64_t (bv #x0000000080000000 64)))
Ran bounds analysis for 22 ms
Ran bounds analysis for 13 ms
"Extended success?"
#t
(broadcast ... (int64_t (bv #x0000000080000000 64)))
"Building Expr:"
(vec-div
 (vec-mul
  (vec-cast
   (vec-add
    (vec-add
     (vec-mul
      (vec-cast
       (load
        (buffer column_sums_b 'uint32)
        (ramp
         (sca-add (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16) 16)
         1
         16)
        (aligned 16 0))
       'int32
       16)
      (sca-broadcast (int32_t t5829) 16))
     (vec-add
      (load
       (buffer bias 'int32)
       (ramp (sca-mul output.s0.x.x 16) 1 16)
       (aligned 16 0))
      (sca-broadcast
       (sca-add
        (sca-mul
         (sca-mul (int32_t t5829) (int32_t t5830))
         (int32_t mat_a.extent.0))
        (sca-mul (int32_t t5830) (int32_t t6653)))
       16)))
    (vec-cast
     (load
      (buffer multiplied_no_offsets 'uint32)
      (ramp
       (sca-add (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121)) 4)
       1
       16)
      (aligned 4 0))
     'int32
     16))
   'int64
   16)
  (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
 (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16))
"Fold templates"
'()
here()

"Replace templates"
(list
 (vs-shift-right
  ...
  #<load-data>
  (int64_t (bv #x000000000000001f 64))
  #f
  #f
  #t)
 (vs-divide ... #<load-data> (int64_t (bv #x0000000080000000 64))))
run-x86-synthesizer
halide-expr:
  (vec-div
 (vec-mul
  (vec-cast
   (vec-add
    (vec-add
     (vec-mul
      (vec-cast
       (load
        (buffer column_sums_b 'uint32)
        (ramp
         (sca-add (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16) 16)
         1
         16)
        (aligned 16 0))
       'int32
       16)
      (sca-broadcast (int32_t t5829) 16))
     (vec-add
      (load
       (buffer bias 'int32)
       (ramp (sca-mul output.s0.x.x 16) 1 16)
       (aligned 16 0))
      (sca-broadcast
       (sca-add
        (sca-mul
         (sca-mul (int32_t t5829) (int32_t t5830))
         (int32_t mat_a.extent.0))
        (sca-mul (int32_t t5830) (int32_t t6653)))
       16)))
    (vec-cast
     (load
      (buffer multiplied_no_offsets 'uint32)
      (ramp
       (sca-add (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121)) 4)
       1
       16)
      (aligned 4 0))
     'int32
     16))
   'int64
   16)
  (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
 (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16))
template:
  (vs-shift-right ... #<load-data> (int64_t (bv #x000000000000001f 64)) #f #f #t)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-div
 (vec-mul
  (vec-cast
   (vec-add
    (vec-add
     (vec-mul
      (vec-cast
       (load
        (buffer column_sums_b 'uint32)
        (ramp
         (sca-add (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16) 16)
         1
         16)
        (aligned 16 0))
       'int32
       16)
      (sca-broadcast (int32_t t5829) 16))
     (vec-add
      (load
       (buffer bias 'int32)
       (ramp (sca-mul output.s0.x.x 16) 1 16)
       (aligned 16 0))
      (sca-broadcast
       (sca-add
        (sca-mul
         (sca-mul (int32_t t5829) (int32_t t5830))
         (int32_t mat_a.extent.0))
        (sca-mul (int32_t t5830) (int32_t t6653)))
       16)))
    (vec-cast #<abstr-halide-expr> 'int32 16))
   'int64
   16)
  (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
 (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16))
optimized-template:
  (vs-shift-right
 ...
 #<abstr-expr>
 (int64_t (bv #x000000000000001f 64))
 #f
 #f
 #t)
optimized Halide 0:
  (int64_t
 (bvadd (bvashr (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app abstr-vals$2827 0)) (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app abstr-vals$2827 0)) (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app abstr-vals$2827 0)) (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64))))
optimized x86 0:
  (uint32_t (bvashr (app abstr-vals$2827 0) (bv #x0000001f 32)))
run-x86-synthesizer
halide-expr:
  (vec-div
 (vec-mul
  (vec-cast
   (vec-add
    (vec-add
     (vec-mul
      (vec-cast
       (load
        (buffer column_sums_b 'uint32)
        (ramp
         (sca-add (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16) 16)
         1
         16)
        (aligned 16 0))
       'int32
       16)
      (sca-broadcast (int32_t t5829) 16))
     (vec-add
      (load
       (buffer bias 'int32)
       (ramp (sca-mul output.s0.x.x 16) 1 16)
       (aligned 16 0))
      (sca-broadcast
       (sca-add
        (sca-mul
         (sca-mul (int32_t t5829) (int32_t t5830))
         (int32_t mat_a.extent.0))
        (sca-mul (int32_t t5830) (int32_t t6653)))
       16)))
    (vec-cast
     (load
      (buffer multiplied_no_offsets 'uint32)
      (ramp
       (sca-add (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121)) 4)
       1
       16)
      (aligned 4 0))
     'int32
     16))
   'int64
   16)
  (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
 (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16))
template:
  (vs-divide ... #<load-data> (int64_t (bv #x0000000080000000 64)))
axioms:
  '(#t)
optimized-halide-expr:
  (vec-div
 (vec-mul
  (vec-cast
   (vec-add
    (vec-add
     (vec-mul
      (vec-cast
       (load
        (buffer column_sums_b 'uint32)
        (ramp
         (sca-add (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16) 16)
         1
         16)
        (aligned 16 0))
       'int32
       16)
      (sca-broadcast (int32_t t5829) 16))
     (vec-add
      (load
       (buffer bias 'int32)
       (ramp (sca-mul output.s0.x.x 16) 1 16)
       (aligned 16 0))
      (sca-broadcast
       (sca-add
        (sca-mul
         (sca-mul (int32_t t5829) (int32_t t5830))
         (int32_t mat_a.extent.0))
        (sca-mul (int32_t t5830) (int32_t t6653)))
       16)))
    (vec-cast #<abstr-halide-expr> 'int32 16))
   'int64
   16)
  (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
 (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16))
optimized-template:
  (vs-divide ... #<abstr-expr> (int64_t (bv #x0000000080000000 64)))
optimized Halide 0:
  (int64_t
 (bvadd (bvashr (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app abstr-vals$2828 0)) (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app abstr-vals$2828 0)) (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app abstr-vals$2828 0)) (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64))))
optimized x86 0:
  (uint32_t
 (extract 31 0 (bvadd (bvashr (zero-extend (app abstr-vals$2828 0) (bitvector 64)) (bv #x000000000000003f 64)) (bvsdiv (bvadd (zero-extend (app abstr-vals$2828 0) (bitvector 64)) (bvneg (bvashr (zero-extend (app abstr-vals$2828 0) (bitvector 64)) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))))
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (vec-div
 (vec-mul
  (vec-cast
   (vec-add
    (vec-add
     (vec-mul
      (vec-cast
       (load
        (buffer column_sums_b 'uint32)
        (ramp
         (sca-add (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16) 16)
         1
         16)
        (aligned 16 0))
       'int32
       16)
      (sca-broadcast (int32_t t5829) 16))
     (vec-add
      (load
       (buffer bias 'int32)
       (ramp (sca-mul output.s0.x.x 16) 1 16)
       (aligned 16 0))
      (sca-broadcast
       (sca-add
        (sca-mul
         (sca-mul (int32_t t5829) (int32_t t5830))
         (int32_t mat_a.extent.0))
        (sca-mul (int32_t t5830) (int32_t t6653)))
       16)))
    (vec-cast
     (load
      (buffer multiplied_no_offsets 'uint32)
      (ramp
       (sca-add (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121)) 4)
       1
       16)
      (aligned 4 0))
     'int32
     16))
   'int64
   16)
  (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
 (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16))
template:
  (vs-shift-right
 ...
 (vs-mpy-add
  ...
  (vs-mpy-add
   ...
   (combine
    (vs-mpy-add
     ...
     (combine
      (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
      (vs-mpy-add
       ...
       (combine
        #<load-data>
        (broadcast
         ...
         (sca-add
          (sca-mul
           (sca-mul (int32_t t5829) (int32_t t5830))
           (int32_t mat_a.extent.0))
          (sca-mul (int32_t t5830) (int32_t t6653)))))
       (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
       #f
       #f
       #f
       'int32))
     (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
     #f
     #f
     #f
     'int32)
    (cast ... #<load-data> 'int32 #f))
   (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
   #f
   #f
   #f
   'int32)
  (list (int32_t output_multiplier))
  #f
  #f
  #f
  'int64)
 (int64_t (bv #x000000000000001f 64))
 #f
 #f
 #t)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$2829 idx) (bv #x4000000000000000 64)) (bvsle (bv #xc000000080000000 64) (app abstr-vals$2829 idx)))))
optimized-halide-expr:
  (vec-div
 #<abstr-halide-expr>
 (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16))
optimized-template:
  (vs-shift-right
 ...
 #<abstr-expr>
 (int64_t (bv #x000000000000001f 64))
 #f
 #f
 #t)
optimized Halide 0:
  (int64_t
 (bvadd (bvashr (app abstr-vals$2829 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$2829 0) (bvneg (bvashr (app abstr-vals$2829 0) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64))))
optimized x86 0:
  (int64_t (bvashr (app abstr-vals$2829 0) (bv #x000000000000001f 64)))
Ran synthesizer for 264 ms
(model)
(vec-div
 #<abstr-halide-expr>
 (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16))
(vs-shift-right
 ...
 (vs-mpy-add
  ...
  (vs-mpy-add
   ...
   (combine
    (vs-mpy-add
     ...
     (combine
      (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
      (vs-mpy-add
       ...
       (combine
        #<load-data>
        (broadcast
         ...
         (sca-add
          (sca-mul
           (sca-mul (int32_t t5829) (int32_t t5830))
           (int32_t mat_a.extent.0))
          (sca-mul (int32_t t5830) (int32_t t6653)))))
       (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
       #f
       #f
       #f
       'int32))
     (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
     #f
     #f
     #f
     'int32)
    (cast ... #<load-data> 'int32 #f))
   (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
   #f
   #f
   #f
   'int32)
  (list (int32_t output_multiplier))
  #f
  #f
  #f
  'int64)
 (int64_t (bv #x000000000000001f 64))
 #f
 #f
 #t)
Ran bounds analysis for 58 ms
Ran bounds analysis for 47 ms
"Extended success?"
#t
(vs-shift-right
 ...
 (vs-mpy-add
  ...
  (vs-mpy-add
   ...
   (combine
    (vs-mpy-add
     ...
     (combine
      (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
      (vs-mpy-add
       ...
       (combine
        #<load-data>
        (broadcast
         ...
         (sca-add
          (sca-mul
           (sca-mul (int32_t t5829) (int32_t t5830))
           (int32_t mat_a.extent.0))
          (sca-mul (int32_t t5830) (int32_t t6653)))))
       (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
       #f
       #f
       #f
       'int32))
     (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
     #f
     #f
     #f
     'int32)
    (cast ... #<load-data> 'int32 #f))
   (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
   #f
   #f
   #f
   'int32)
  (list (int32_t output_multiplier))
  #f
  #f
  #f
  'int64)
 (int64_t (bv #x000000000000001f 64))
 #f
 #f
 #t)
"Building Expr:"
(vec-add
 (vec-bwand
  (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
  (vec-div
   (vec-mul
    (vec-cast
     (vec-add
      (vec-add
       (vec-mul
        (vec-cast
         (load
          (buffer column_sums_b 'uint32)
          (ramp
           (sca-add
            (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
            16)
           1
           16)
          (aligned 16 0))
         'int32
         16)
        (sca-broadcast (int32_t t5829) 16))
       (vec-add
        (load
         (buffer bias 'int32)
         (ramp (sca-mul output.s0.x.x 16) 1 16)
         (aligned 16 0))
        (sca-broadcast
         (sca-add
          (sca-mul
           (sca-mul (int32_t t5829) (int32_t t5830))
           (int32_t mat_a.extent.0))
          (sca-mul (int32_t t5830) (int32_t t6653)))
         16)))
      (vec-cast
       (load
        (buffer multiplied_no_offsets 'uint32)
        (ramp
         (sca-add (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121)) 4)
         1
         16)
        (aligned 4 0))
       'int32
       16))
     'int64
     16)
    (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
   (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
 (vec-div
  (vec-mul
   (vec-cast
    (vec-add
     (vec-add
      (vec-mul
       (vec-cast
        (load
         (buffer column_sums_b 'uint32)
         (ramp
          (sca-add (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16) 16)
          1
          16)
         (aligned 16 0))
        'int32
        16)
       (sca-broadcast (int32_t t5829) 16))
      (vec-add
       (load
        (buffer bias 'int32)
        (ramp (sca-mul output.s0.x.x 16) 1 16)
        (aligned 16 0))
       (sca-broadcast
        (sca-add
         (sca-mul
          (sca-mul (int32_t t5829) (int32_t t5830))
          (int32_t mat_a.extent.0))
         (sca-mul (int32_t t5830) (int32_t t6653)))
        16)))
     (vec-cast
      (load
       (buffer multiplied_no_offsets 'uint32)
       (ramp
        (sca-add (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121)) 4)
        1
        16)
       (aligned 4 0))
      'int32
      16))
    'int64
    16)
   (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
  (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
"Fold templates"
(list
 (vs-mpy-add
  ...
  (vs-mpy-add
   ...
   (combine
    (vs-mpy-add
     ...
     (combine
      (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
      (vs-mpy-add
       ...
       (combine
        #<load-data>
        (broadcast
         ...
         (sca-add
          (sca-mul
           (sca-mul (int32_t t5829) (int32_t t5830))
           (int32_t mat_a.extent.0))
          (sca-mul (int32_t t5830) (int32_t t6653)))))
       (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
       #f
       #f
       #f
       'int32))
     (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
     #f
     #f
     #f
     'int32)
    (cast ... #<load-data> 'int32 #f))
   (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
   #f
   #f
   #f
   'int32)
  (list
   (int32_t output_multiplier)
   (union [(&& (! xi?$2838) (! xi?$2839)) #(struct:int8_t (bv #x01 8))] [(|| xi?$2838 (&& xi?$2839 (! xi?$2838))) #(struct:int32_t
                                                                                                                    (ite* (⊢ xi?$2838 t5829) (⊢ (&& xi?$2839 (! xi?$2838)) output_multiplier)))]))
  #f
  #f
  #f
  'int64)
 (vs-mpy-add
  ...
  (vs-mpy-add
   ...
   (combine
    (vs-mpy-add
     ...
     (combine
      (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
      (vs-mpy-add
       ...
       (combine
        #<load-data>
        (broadcast
         ...
         (sca-add
          (sca-mul
           (sca-mul (int32_t t5829) (int32_t t5830))
           (int32_t mat_a.extent.0))
          (sca-mul (int32_t t5830) (int32_t t6653)))))
       (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
       #f
       #f
       #f
       'int32))
     (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
     #f
     #f
     #f
     'int32)
    (cast ... #<load-data> 'int32 #f))
   (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
   #f
   #f
   #f
   'int32)
  (list (int32_t output_multiplier))
  #f
  x?$2836
  #f
  'int64)
 (vs-mpy-add
  ...
  (combine
   (vs-mpy-add
    ...
    (vs-mpy-add
     ...
     (combine
      (vs-mpy-add
       ...
       (combine
        (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
        (vs-mpy-add
         ...
         (combine
          #<load-data>
          (broadcast
           ...
           (sca-add
            (sca-mul
             (sca-mul (int32_t t5829) (int32_t t5830))
             (int32_t mat_a.extent.0))
            (sca-mul (int32_t t5830) (int32_t t6653)))))
         (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
         #f
         #f
         #f
         'int32))
       (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
       #f
       #f
       #f
       'int32)
      (cast ... #<load-data> 'int32 #f))
     (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
     #f
     #f
     #f
     'int32)
    (list (int32_t output_multiplier))
    #f
    #f
    #f
    'int64)
   (union [x?$2840 #(struct:bitwise-op
                     ...
                     and
                     #(struct:broadcast
                       ...
                       #(struct:int64_t (bv #x0000000000000001 64)))
                     #(struct:vs-shift-right
                       ...
                       #(struct:vs-mpy-add
                         ...
                         #(struct:vs-mpy-add
                           ...
                           #<combine:
                            #(struct:vs-mpy-add
                              ...
                              #<combine:
                               #(struct:vs-mpy-add
                                 ...
                                 #<load-data>
                                 (#(struct:int32_t t5829))
                                 #f
                                 #f
                                 #f
                                 int32)
                               #(struct:vs-mpy-add
                                 ...
                                 #<combine:
                                  #<load-data>
                                  #(struct:broadcast
                                    ...
                                    #(struct:sca-add
                                      #(struct:sca-mul
                                        #(struct:sca-mul
                                          #(struct:int32_t t5829)
                                          #(struct:int32_t t5830))
                                        #(struct:int32_t mat_a.extent.0))
                                      #(struct:sca-mul
                                        #(struct:int32_t t5830)
                                        #(struct:int32_t t6653))))>
                                 (#(struct:int8_t (bv #x01 8))
                                  #(struct:int8_t (bv #x01 8)))
                                 #f
                                 #f
                                 #f
                                 int32)>
                              (#(struct:int8_t (bv #x01 8))
                               #(struct:int8_t (bv #x01 8)))
                              #f
                              #f
                              #f
                              int32)
                            #(struct:cast ... #<load-data> int32 #f)>
                           (#(struct:int8_t (bv #x01 8))
                            #(struct:int8_t (bv #x01 8)))
                           #f
                           #f
                           #f
                           int32)
                         (#(struct:int32_t output_multiplier))
                         #f
                         #f
                         #f
                         int64)
                       #(struct:int64_t (bv #x000000000000001e 64))
                       #f
                       #f
                       #t))] [(! x?$2840) #(struct:vs-shift-right
                                            ...
                                            #(struct:vs-mpy-add
                                              ...
                                              #(struct:vs-mpy-add
                                                ...
                                                #<combine:
                                                 #(struct:vs-mpy-add
                                                   ...
                                                   #<combine:
                                                    #(struct:vs-mpy-add
                                                      ...
                                                      #<load-data>
                                                      (#(struct:int32_t t5829))
                                                      #f
                                                      #f
                                                      #f
                                                      int32)
                                                    #(struct:vs-mpy-add
                                                      ...
                                                      #<combine:
                                                       #<load-data>
                                                       #(struct:broadcast
                                                         ...
                                                         #(struct:sca-add
                                                           #(struct:sca-mul
                                                             #(struct:sca-mul
                                                               #(struct:int32_t
                                                                 t5829)
                                                               #(struct:int32_t
                                                                 t5830))
                                                             #(struct:int32_t
                                                               mat_a.extent.0))
                                                           #(struct:sca-mul
                                                             #(struct:int32_t
                                                               t5830)
                                                             #(struct:int32_t
                                                               t6653))))>
                                                      (#(struct:int8_t
                                                         (bv #x01 8))
                                                       #(struct:int8_t
                                                         (bv #x01 8)))
                                                      #f
                                                      #f
                                                      #f
                                                      int32)>
                                                   (#(struct:int8_t
                                                      (bv #x01 8))
                                                    #(struct:int8_t
                                                      (bv #x01 8)))
                                                   #f
                                                   #f
                                                   #f
                                                   int32)
                                                 #(struct:cast
                                                   ...
                                                   #<load-data>
                                                   int32
                                                   #f)>
                                                (#(struct:int8_t (bv #x01 8))
                                                 #(struct:int8_t (bv #x01 8)))
                                                #f
                                                #f
                                                #f
                                                int32)
                                              (#(struct:int32_t
                                                 output_multiplier))
                                              #f
                                              #f
                                              #f
                                              int64)
                                            #(struct:int64_t
                                              (bv #x000000000000001f 64))
                                            #f
                                            #f
                                            #t)]))
  (list (int32_t output_multiplier) (int8_t (bv #x01 8)))
  #f
  #f
  #f
  'int64)
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (vs-mpy-add
    ...
    (combine
     (vs-mpy-add
      ...
      (combine
       (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
       (vs-mpy-add
        ...
        (combine
         #<load-data>
         (broadcast
          ...
          (sca-add
           (sca-mul
            (sca-mul (int32_t t5829) (int32_t t5830))
            (int32_t mat_a.extent.0))
           (sca-mul (int32_t t5830) (int32_t t6653)))))
        (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
        #f
        #f
        #f
        'int32))
      (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
      #f
      #f
      #f
      'int32)
     (cast ... #<load-data> 'int32 #f))
    (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
    #f
    #f
    #f
    'int32)
   (list (int32_t output_multiplier))
   #f
   #f
   #f
   'int64)
  (int64_t (ite x?$2831 (bv #x000000000000001e 64) (bv #x000000000000001f 64)))
  #f
  #f
  #t)
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (vs-mpy-add
    ...
    (combine
     (vs-mpy-add
      ...
      (combine
       (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
       (vs-mpy-add
        ...
        (combine
         #<load-data>
         (broadcast
          ...
          (sca-add
           (sca-mul
            (sca-mul (int32_t t5829) (int32_t t5830))
            (int32_t mat_a.extent.0))
           (sca-mul (int32_t t5830) (int32_t t6653)))))
        (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
        #f
        #f
        #f
        'int32))
      (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
      #f
      #f
      #f
      'int32)
     (cast ... #<load-data> 'int32 #f))
    (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
    #f
    #f
    #f
    'int32)
   (list (int32_t output_multiplier))
   #f
   #f
   #f
   'int64)
  (int64_t (bv #x000000000000001e 64))
  x?$2832
  x?$2833
  x?$2834)
 (vs-mpy-add
  ...
  (combine
   (vs-mpy-add
    ...
    (combine
     (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
     (vs-mpy-add
      ...
      (combine
       #<load-data>
       (broadcast
        ...
        (sca-add
         (sca-mul
          (sca-mul (int32_t t5829) (int32_t t5830))
          (int32_t mat_a.extent.0))
         (sca-mul (int32_t t5830) (int32_t t6653)))))
      (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
      #f
      #f
      #f
      'int32))
    (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
    #f
    #f
    #f
    'int32)
   (cast ... #<load-data> 'int32 #f))
  (list
   (int8_t (bv #x01 8))
   (int8_t (bv #x01 8))
   (union [(&& (! xi?$3110) (! xi?$3111)) #(struct:int8_t (bv #x01 8))] [(|| xi?$3110 (&& xi?$3111 (! xi?$3110))) #(struct:int32_t
                                                                                                                    (ite* (⊢ xi?$3110 t5829) (⊢ (&& xi?$3111 (! xi?$3110)) output_multiplier)))]))
  #f
  #f
  #f
  'int64)
 (vs-mpy-add
  ...
  (combine
   (vs-mpy-add
    ...
    (combine
     (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
     (vs-mpy-add
      ...
      (combine
       #<load-data>
       (broadcast
        ...
        (sca-add
         (sca-mul
          (sca-mul (int32_t t5829) (int32_t t5830))
          (int32_t mat_a.extent.0))
         (sca-mul (int32_t t5830) (int32_t t6653)))))
      (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
      #f
      #f
      #f
      'int32))
    (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
    #f
    #f
    #f
    'int32)
   (cast ... #<load-data> 'int32 #f))
  (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
  #f
  x?$3108
  #f
  'int64)
 (vs-mpy-add
  ...
  (combine
   (vs-mpy-add
    ...
    (combine
     (vs-mpy-add
      ...
      (combine
       (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
       (vs-mpy-add
        ...
        (combine
         #<load-data>
         (broadcast
          ...
          (sca-add
           (sca-mul
            (sca-mul (int32_t t5829) (int32_t t5830))
            (int32_t mat_a.extent.0))
           (sca-mul (int32_t t5830) (int32_t t6653)))))
        (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
        #f
        #f
        #f
        'int32))
      (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
      #f
      #f
      #f
      'int32)
     (cast ... #<load-data> 'int32 #f))
    (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
    #f
    #f
    #f
    'int32)
   (union [x?$3112 #(struct:bitwise-op
                     ...
                     and
                     #(struct:broadcast
                       ...
                       #(struct:int64_t (bv #x0000000000000001 64)))
                     #(struct:vs-shift-right
                       ...
                       #(struct:vs-mpy-add
                         ...
                         #(struct:vs-mpy-add
                           ...
                           #<combine:
                            #(struct:vs-mpy-add
                              ...
                              #<combine:
                               #(struct:vs-mpy-add
                                 ...
                                 #<load-data>
                                 (#(struct:int32_t t5829))
                                 #f
                                 #f
                                 #f
                                 int32)
                               #(struct:vs-mpy-add
                                 ...
                                 #<combine:
                                  #<load-data>
                                  #(struct:broadcast
                                    ...
                                    #(struct:sca-add
                                      #(struct:sca-mul
                                        #(struct:sca-mul
                                          #(struct:int32_t t5829)
                                          #(struct:int32_t t5830))
                                        #(struct:int32_t mat_a.extent.0))
                                      #(struct:sca-mul
                                        #(struct:int32_t t5830)
                                        #(struct:int32_t t6653))))>
                                 (#(struct:int8_t (bv #x01 8))
                                  #(struct:int8_t (bv #x01 8)))
                                 #f
                                 #f
                                 #f
                                 int32)>
                              (#(struct:int8_t (bv #x01 8))
                               #(struct:int8_t (bv #x01 8)))
                              #f
                              #f
                              #f
                              int32)
                            #(struct:cast ... #<load-data> int32 #f)>
                           (#(struct:int8_t (bv #x01 8))
                            #(struct:int8_t (bv #x01 8)))
                           #f
                           #f
                           #f
                           int32)
                         (#(struct:int32_t output_multiplier))
                         #f
                         #f
                         #f
                         int64)
                       #(struct:int64_t (bv #x000000000000001e 64))
                       #f
                       #f
                       #t))] [(! x?$3112) #(struct:vs-shift-right
                                            ...
                                            #(struct:vs-mpy-add
                                              ...
                                              #(struct:vs-mpy-add
                                                ...
                                                #<combine:
                                                 #(struct:vs-mpy-add
                                                   ...
                                                   #<combine:
                                                    #(struct:vs-mpy-add
                                                      ...
                                                      #<load-data>
                                                      (#(struct:int32_t t5829))
                                                      #f
                                                      #f
                                                      #f
                                                      int32)
                                                    #(struct:vs-mpy-add
                                                      ...
                                                      #<combine:
                                                       #<load-data>
                                                       #(struct:broadcast
                                                         ...
                                                         #(struct:sca-add
                                                           #(struct:sca-mul
                                                             #(struct:sca-mul
                                                               #(struct:int32_t
                                                                 t5829)
                                                               #(struct:int32_t
                                                                 t5830))
                                                             #(struct:int32_t
                                                               mat_a.extent.0))
                                                           #(struct:sca-mul
                                                             #(struct:int32_t
                                                               t5830)
                                                             #(struct:int32_t
                                                               t6653))))>
                                                      (#(struct:int8_t
                                                         (bv #x01 8))
                                                       #(struct:int8_t
                                                         (bv #x01 8)))
                                                      #f
                                                      #f
                                                      #f
                                                      int32)>
                                                   (#(struct:int8_t
                                                      (bv #x01 8))
                                                    #(struct:int8_t
                                                      (bv #x01 8)))
                                                   #f
                                                   #f
                                                   #f
                                                   int32)
                                                 #(struct:cast
                                                   ...
                                                   #<load-data>
                                                   int32
                                                   #f)>
                                                (#(struct:int8_t (bv #x01 8))
                                                 #(struct:int8_t (bv #x01 8)))
                                                #f
                                                #f
                                                #f
                                                int32)
                                              (#(struct:int32_t
                                                 output_multiplier))
                                              #f
                                              #f
                                              #f
                                              int64)
                                            #(struct:int64_t
                                              (bv #x000000000000001f 64))
                                            #f
                                            #f
                                            #t)]))
  (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
  #f
  #f
  #f
  'int64)
 (vs-mpy-add
  ...
  (vs-mpy-add
   ...
   (combine
    (vs-mpy-add
     ...
     (combine
      (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
      (vs-mpy-add
       ...
       (combine
        #<load-data>
        (broadcast
         ...
         (sca-add
          (sca-mul
           (sca-mul (int32_t t5829) (int32_t t5830))
           (int32_t mat_a.extent.0))
          (sca-mul (int32_t t5830) (int32_t t6653)))))
       (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
       #f
       #f
       #f
       'int32))
     (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
     #f
     #f
     #f
     'int32)
    (cast ... #<load-data> 'int32 #f))
   (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
   #f
   #f
   #f
   'int32)
  (list
   (int32_t output_multiplier)
   (union [(&& (! xi?$2976) (! xi?$2977)) #(struct:int8_t (bv #x01 8))] [(|| xi?$2976 (&& xi?$2977 (! xi?$2976))) #(struct:int32_t
                                                                                                                    (ite* (⊢ xi?$2976 t5829) (⊢ (&& xi?$2977 (! xi?$2976)) output_multiplier)))]))
  #f
  #f
  #f
  'int64)
 (vs-mpy-add
  ...
  (vs-mpy-add
   ...
   (combine
    (vs-mpy-add
     ...
     (combine
      (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
      (vs-mpy-add
       ...
       (combine
        #<load-data>
        (broadcast
         ...
         (sca-add
          (sca-mul
           (sca-mul (int32_t t5829) (int32_t t5830))
           (int32_t mat_a.extent.0))
          (sca-mul (int32_t t5830) (int32_t t6653)))))
       (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
       #f
       #f
       #f
       'int32))
     (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
     #f
     #f
     #f
     'int32)
    (cast ... #<load-data> 'int32 #f))
   (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
   #f
   #f
   #f
   'int32)
  (list (int32_t output_multiplier))
  #f
  x?$2974
  #f
  'int64)
 (vs-mpy-add
  ...
  (combine
   (vs-mpy-add
    ...
    (vs-mpy-add
     ...
     (combine
      (vs-mpy-add
       ...
       (combine
        (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
        (vs-mpy-add
         ...
         (combine
          #<load-data>
          (broadcast
           ...
           (sca-add
            (sca-mul
             (sca-mul (int32_t t5829) (int32_t t5830))
             (int32_t mat_a.extent.0))
            (sca-mul (int32_t t5830) (int32_t t6653)))))
         (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
         #f
         #f
         #f
         'int32))
       (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
       #f
       #f
       #f
       'int32)
      (cast ... #<load-data> 'int32 #f))
     (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
     #f
     #f
     #f
     'int32)
    (list (int32_t output_multiplier))
    #f
    #f
    #f
    'int64)
   (union [x?$2978 #(struct:bitwise-op
                     ...
                     and
                     #(struct:broadcast
                       ...
                       #(struct:int64_t (bv #x0000000000000001 64)))
                     #(struct:vs-shift-right
                       ...
                       #(struct:vs-mpy-add
                         ...
                         #(struct:vs-mpy-add
                           ...
                           #<combine:
                            #(struct:vs-mpy-add
                              ...
                              #<combine:
                               #(struct:vs-mpy-add
                                 ...
                                 #<load-data>
                                 (#(struct:int32_t t5829))
                                 #f
                                 #f
                                 #f
                                 int32)
                               #(struct:vs-mpy-add
                                 ...
                                 #<combine:
                                  #<load-data>
                                  #(struct:broadcast
                                    ...
                                    #(struct:sca-add
                                      #(struct:sca-mul
                                        #(struct:sca-mul
                                          #(struct:int32_t t5829)
                                          #(struct:int32_t t5830))
                                        #(struct:int32_t mat_a.extent.0))
                                      #(struct:sca-mul
                                        #(struct:int32_t t5830)
                                        #(struct:int32_t t6653))))>
                                 (#(struct:int8_t (bv #x01 8))
                                  #(struct:int8_t (bv #x01 8)))
                                 #f
                                 #f
                                 #f
                                 int32)>
                              (#(struct:int8_t (bv #x01 8))
                               #(struct:int8_t (bv #x01 8)))
                              #f
                              #f
                              #f
                              int32)
                            #(struct:cast ... #<load-data> int32 #f)>
                           (#(struct:int8_t (bv #x01 8))
                            #(struct:int8_t (bv #x01 8)))
                           #f
                           #f
                           #f
                           int32)
                         (#(struct:int32_t output_multiplier))
                         #f
                         #f
                         #f
                         int64)
                       #(struct:int64_t (bv #x000000000000001e 64))
                       #f
                       #f
                       #t))] [(! x?$2978) #(struct:vs-shift-right
                                            ...
                                            #(struct:vs-mpy-add
                                              ...
                                              #(struct:vs-mpy-add
                                                ...
                                                #<combine:
                                                 #(struct:vs-mpy-add
                                                   ...
                                                   #<combine:
                                                    #(struct:vs-mpy-add
                                                      ...
                                                      #<load-data>
                                                      (#(struct:int32_t t5829))
                                                      #f
                                                      #f
                                                      #f
                                                      int32)
                                                    #(struct:vs-mpy-add
                                                      ...
                                                      #<combine:
                                                       #<load-data>
                                                       #(struct:broadcast
                                                         ...
                                                         #(struct:sca-add
                                                           #(struct:sca-mul
                                                             #(struct:sca-mul
                                                               #(struct:int32_t
                                                                 t5829)
                                                               #(struct:int32_t
                                                                 t5830))
                                                             #(struct:int32_t
                                                               mat_a.extent.0))
                                                           #(struct:sca-mul
                                                             #(struct:int32_t
                                                               t5830)
                                                             #(struct:int32_t
                                                               t6653))))>
                                                      (#(struct:int8_t
                                                         (bv #x01 8))
                                                       #(struct:int8_t
                                                         (bv #x01 8)))
                                                      #f
                                                      #f
                                                      #f
                                                      int32)>
                                                   (#(struct:int8_t
                                                      (bv #x01 8))
                                                    #(struct:int8_t
                                                      (bv #x01 8)))
                                                   #f
                                                   #f
                                                   #f
                                                   int32)
                                                 #(struct:cast
                                                   ...
                                                   #<load-data>
                                                   int32
                                                   #f)>
                                                (#(struct:int8_t (bv #x01 8))
                                                 #(struct:int8_t (bv #x01 8)))
                                                #f
                                                #f
                                                #f
                                                int32)
                                              (#(struct:int32_t
                                                 output_multiplier))
                                              #f
                                              #f
                                              #f
                                              int64)
                                            #(struct:int64_t
                                              (bv #x000000000000001f 64))
                                            #f
                                            #f
                                            #t)]))
  (list (int32_t output_multiplier) (int8_t (bv #x01 8)))
  #f
  #f
  #f
  'int64)
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (vs-mpy-add
    ...
    (combine
     (vs-mpy-add
      ...
      (combine
       (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
       (vs-mpy-add
        ...
        (combine
         #<load-data>
         (broadcast
          ...
          (sca-add
           (sca-mul
            (sca-mul (int32_t t5829) (int32_t t5830))
            (int32_t mat_a.extent.0))
           (sca-mul (int32_t t5830) (int32_t t6653)))))
        (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
        #f
        #f
        #f
        'int32))
      (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
      #f
      #f
      #f
      'int32)
     (cast ... #<load-data> 'int32 #f))
    (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
    #f
    #f
    #f
    'int32)
   (list (int32_t output_multiplier))
   #f
   #f
   #f
   'int64)
  (int64_t (ite x?$2969 (bv #x000000000000001e 64) (bv #x000000000000001f 64)))
  #f
  #f
  #t)
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (vs-mpy-add
    ...
    (combine
     (vs-mpy-add
      ...
      (combine
       (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
       (vs-mpy-add
        ...
        (combine
         #<load-data>
         (broadcast
          ...
          (sca-add
           (sca-mul
            (sca-mul (int32_t t5829) (int32_t t5830))
            (int32_t mat_a.extent.0))
           (sca-mul (int32_t t5830) (int32_t t6653)))))
        (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
        #f
        #f
        #f
        'int32))
      (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
      #f
      #f
      #f
      'int32)
     (cast ... #<load-data> 'int32 #f))
    (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
    #f
    #f
    #f
    'int32)
   (list (int32_t output_multiplier))
   #f
   #f
   #f
   'int64)
  (int64_t (bv #x000000000000001f 64))
  x?$2970
  x?$2971
  x?$2972))
here(#(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<load-data> (#(struct:int32_t t5829)) #f #f #f int32) #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-add #(struct:sca-mul #(struct:sca-mul #(struct:int32_t t5829) #(struct:int32_t t5830)) #(struct:int32_t mat_a.extent.0)) #(struct:sca-mul #(struct:int32_t t5830) #(struct:int32_t t6653))))> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32)> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32) #(struct:cast ... #<load-data> int32 #f)> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32) (#(struct:int32_t output_multiplier) (union #:size 2 #:hash 1436937773488)) #f #f #f int64) #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<load-data> (#(struct:int32_t t5829)) #f #f #f int32) #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-add #(struct:sca-mul #(struct:sca-mul #(struct:int32_t t5829) #(struct:int32_t t5830)) #(struct:int32_t mat_a.extent.0)) #(struct:sca-mul #(struct:int32_t t5830) #(struct:int32_t t6653))))> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32)> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32) #(struct:cast ... #<load-data> int32 #f)> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32) (#(struct:int32_t output_multiplier)) #f x?$2836 #f int64) #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<load-data> (#(struct:int32_t t5829)) #f #f #f int32) #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-add #(struct:sca-mul #(struct:sca-mul #(struct:int32_t t5829) #(struct:int32_t t5830)) #(struct:int32_t mat_a.extent.0)) #(struct:sca-mul #(struct:int32_t t5830) #(struct:int32_t t6653))))> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32)> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32) #(struct:cast ... #<load-data> int32 #f)> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32) (#(struct:int32_t output_multiplier)) #f #f #f int64) (union #:size 2 #:hash 446942747576)> (#(struct:int32_t output_multiplier) #(struct:int8_t (bv #x01 8))) #f #f #f int64) #(struct:vs-shift-right ... #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<load-data> (#(struct:int32_t t5829)) #f #f #f int32) #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-add #(struct:sca-mul #(struct:sca-mul #(struct:int32_t t5829) #(struct:int32_t t5830)) #(struct:int32_t mat_a.extent.0)) #(struct:sca-mul #(struct:int32_t t5830) #(struct:int32_t t6653))))> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32)> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32) #(struct:cast ... #<load-data> int32 #f)> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32) (#(struct:int32_t output_multiplier)) #f #f #f int64) #(struct:int64_t (ite x?$2831 (bv #x000000000000001e 64) (bv #x000000000000001f 64))) #f #f #t) #(struct:vs-shift-right ... #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<load-data> (#(struct:int32_t t5829)) #f #f #f int32) #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-add #(struct:sca-mul #(struct:sca-mul #(struct:int32_t t5829) #(struct:int32_t t5830)) #(struct:int32_t mat_a.extent.0)) #(struct:sca-mul #(struct:int32_t t5830) #(struct:int32_t t6653))))> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32)> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32) #(struct:cast ... #<load-data> int32 #f)> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32) (#(struct:int32_t output_multiplier)) #f #f #f int64) #(struct:int64_t (bv #x000000000000001e 64)) x?$2832 x?$2833 x?$2834) #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<load-data> (#(struct:int32_t t5829)) #f #f #f int32) #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-add #(struct:sca-mul #(struct:sca-mul #(struct:int32_t t5829) #(struct:int32_t t5830)) #(struct:int32_t mat_a.extent.0)) #(struct:sca-mul #(struct:int32_t t5830) #(struct:int32_t t6653))))> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32)> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32) #(struct:cast ... #<load-data> int32 #f)> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8)) (union #:size 2 #:hash 1436958723587)) #f #f #f int64) #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<load-data> (#(struct:int32_t t5829)) #f #f #f int32) #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-add #(struct:sca-mul #(struct:sca-mul #(struct:int32_t t5829) #(struct:int32_t t5830)) #(struct:int32_t mat_a.extent.0)) #(struct:sca-mul #(struct:int32_t t5830) #(struct:int32_t t6653))))> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32)> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32) #(struct:cast ... #<load-data> int32 #f)> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f x?$3108 #f int64) #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<load-data> (#(struct:int32_t t5829)) #f #f #f int32) #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-add #(struct:sca-mul #(struct:sca-mul #(struct:int32_t t5829) #(struct:int32_t t5830)) #(struct:int32_t mat_a.extent.0)) #(struct:sca-mul #(struct:int32_t t5830) #(struct:int32_t t6653))))> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32)> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32) #(struct:cast ... #<load-data> int32 #f)> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32) (union #:size 2 #:hash 446853169067)> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int64) #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<load-data> (#(struct:int32_t t5829)) #f #f #f int32) #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-add #(struct:sca-mul #(struct:sca-mul #(struct:int32_t t5829) #(struct:int32_t t5830)) #(struct:int32_t mat_a.extent.0)) #(struct:sca-mul #(struct:int32_t t5830) #(struct:int32_t t6653))))> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32)> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32) #(struct:cast ... #<load-data> int32 #f)> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32) (#(struct:int32_t output_multiplier) (union #:size 2 #:hash 1436962087012)) #f #f #f int64) #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<load-data> (#(struct:int32_t t5829)) #f #f #f int32) #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-add #(struct:sca-mul #(struct:sca-mul #(struct:int32_t t5829) #(struct:int32_t t5830)) #(struct:int32_t mat_a.extent.0)) #(struct:sca-mul #(struct:int32_t t5830) #(struct:int32_t t6653))))> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32)> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32) #(struct:cast ... #<load-data> int32 #f)> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32) (#(struct:int32_t output_multiplier)) #f x?$2974 #f int64) #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<load-data> (#(struct:int32_t t5829)) #f #f #f int32) #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-add #(struct:sca-mul #(struct:sca-mul #(struct:int32_t t5829) #(struct:int32_t t5830)) #(struct:int32_t mat_a.extent.0)) #(struct:sca-mul #(struct:int32_t t5830) #(struct:int32_t t6653))))> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32)> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32) #(struct:cast ... #<load-data> int32 #f)> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32) (#(struct:int32_t output_multiplier)) #f #f #f int64) (union #:size 2 #:hash 446910863350)> (#(struct:int32_t output_multiplier) #(struct:int8_t (bv #x01 8))) #f #f #f int64) #(struct:vs-shift-right ... #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<load-data> (#(struct:int32_t t5829)) #f #f #f int32) #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-add #(struct:sca-mul #(struct:sca-mul #(struct:int32_t t5829) #(struct:int32_t t5830)) #(struct:int32_t mat_a.extent.0)) #(struct:sca-mul #(struct:int32_t t5830) #(struct:int32_t t6653))))> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32)> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32) #(struct:cast ... #<load-data> int32 #f)> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32) (#(struct:int32_t output_multiplier)) #f #f #f int64) #(struct:int64_t (ite x?$2969 (bv #x000000000000001e 64) (bv #x000000000000001f 64))) #f #f #t) #(struct:vs-shift-right ... #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<load-data> (#(struct:int32_t t5829)) #f #f #f int32) #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-add #(struct:sca-mul #(struct:sca-mul #(struct:int32_t t5829) #(struct:int32_t t5830)) #(struct:int32_t mat_a.extent.0)) #(struct:sca-mul #(struct:int32_t t5830) #(struct:int32_t t6653))))> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32)> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32) #(struct:cast ... #<load-data> int32 #f)> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32) (#(struct:int32_t output_multiplier)) #f #f #f int64) #(struct:int64_t (bv #x000000000000001f 64)) x?$2970 x?$2971 x?$2972))

"Replace templates"
'()
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-bwand
  (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
  (vec-div
   (vec-mul
    (vec-cast
     (vec-add
      (vec-add
       (vec-mul
        (vec-cast
         (load
          (buffer column_sums_b 'uint32)
          (ramp
           (sca-add
            (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
            16)
           1
           16)
          (aligned 16 0))
         'int32
         16)
        (sca-broadcast (int32_t t5829) 16))
       (vec-add
        (load
         (buffer bias 'int32)
         (ramp (sca-mul output.s0.x.x 16) 1 16)
         (aligned 16 0))
        (sca-broadcast
         (sca-add
          (sca-mul
           (sca-mul (int32_t t5829) (int32_t t5830))
           (int32_t mat_a.extent.0))
          (sca-mul (int32_t t5830) (int32_t t6653)))
         16)))
      (vec-cast
       (load
        (buffer multiplied_no_offsets 'uint32)
        (ramp
         (sca-add (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121)) 4)
         1
         16)
        (aligned 4 0))
       'int32
       16))
     'int64
     16)
    (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
   (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
 (vec-div
  (vec-mul
   (vec-cast
    (vec-add
     (vec-add
      (vec-mul
       (vec-cast
        (load
         (buffer column_sums_b 'uint32)
         (ramp
          (sca-add (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16) 16)
          1
          16)
         (aligned 16 0))
        'int32
        16)
       (sca-broadcast (int32_t t5829) 16))
      (vec-add
       (load
        (buffer bias 'int32)
        (ramp (sca-mul output.s0.x.x 16) 1 16)
        (aligned 16 0))
       (sca-broadcast
        (sca-add
         (sca-mul
          (sca-mul (int32_t t5829) (int32_t t5830))
          (int32_t mat_a.extent.0))
         (sca-mul (int32_t t5830) (int32_t t6653)))
        16)))
     (vec-cast
      (load
       (buffer multiplied_no_offsets 'uint32)
       (ramp
        (sca-add (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121)) 4)
        1
        16)
       (aligned 4 0))
      'int32
      16))
    'int64
    16)
   (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
  (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
template:
  (vs-mpy-add
 ...
 (combine
  (vs-mpy-add
   ...
   (combine
    (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
    (vs-mpy-add
     ...
     (combine
      #<load-data>
      (broadcast
       ...
       (sca-add
        (sca-mul
         (sca-mul (int32_t t5829) (int32_t t5830))
         (int32_t mat_a.extent.0))
        (sca-mul (int32_t t5830) (int32_t t6653)))))
     (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
     #f
     #f
     #f
     'int32))
   (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
   #f
   #f
   #f
   'int32)
  (cast ... #<load-data> 'int32 #f))
 (list
  (int8_t (bv #x01 8))
  (int8_t (bv #x01 8))
  (union [(&& (! xi?$3110) (! xi?$3111)) #(struct:int8_t (bv #x01 8))] [(|| xi?$3110 (&& xi?$3111 (! xi?$3110))) #(struct:int32_t
                                                                                                                   (ite* (⊢ xi?$3110 t5829) (⊢ (&& xi?$3111 (! xi?$3110)) output_multiplier)))]))
 #f
 #f
 #f
 'int64)
axioms:
  '(#t #t)
optimized-halide-expr:
  (vec-add
 (vec-bwand
  (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
  (vec-div
   (vec-mul
    (vec-cast (vec-add #<abstr-halide-expr> #<abstr-halide-expr>) 'int64 16)
    (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
   (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
 (vec-div
  (vec-mul
   (vec-cast (vec-add #<abstr-halide-expr> #<abstr-halide-expr>) 'int64 16)
   (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
  (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
optimized-template:
  (vs-mpy-add
 ...
 (combine #<abstr-expr> #<abstr-expr>)
 (list
  (int8_t (bv #x01 8))
  (int8_t (bv #x01 8))
  (union [(&& (! xi?$3110) (! xi?$3111)) #(struct:int8_t (bv #x01 8))] [(|| xi?$3110 (&& xi?$3111 (! xi?$3110))) #(struct:int32_t
                                                                                                                   (ite* (⊢ xi?$3110 t5829) (⊢ (&& xi?$3111 (! xi?$3110)) output_multiplier)))]))
 #f
 #f
 #f
 'int64)
optimized Halide 0:
  (int64_t
 (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (bvadd (app abstr-vals$3241 0) (app abstr-vals$3242 0)) (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (bvadd (app abstr-vals$3241 0) (app abstr-vals$3242 0)) (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (bvadd (app abstr-vals$3241 0) (app abstr-vals$3242 0)) (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (bvadd (app abstr-vals$3241 0) (app abstr-vals$3242 0)) (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (bvadd (app abstr-vals$3241 0) (app abstr-vals$3242 0)) (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (bvadd (app abstr-vals$3241 0) (app abstr-vals$3242 0)) (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))))
optimized x86 0:
  (int64_t
 (bvadd (bvmul (sign-extend (ite c$2019 (app abstr-vals$3241 idx$2018) (app abstr-vals$3242 idx$2018)) (bitvector 64)) (ite* (⊢ (&& (! xi?$3110) (! xi?$3111)) (bv #x0000000000000001 64)) (⊢ (|| xi?$3110 (&& xi?$3111 (! xi?$3110))) (sign-extend (ite* (⊢ xi?$3110 t5829) (⊢ (&& xi?$3111 (! xi?$3110)) output_multiplier)) (bitvector 64))))) (bvadd (sign-extend (app abstr-vals$3242 0) (bitvector 64)) (sign-extend (app abstr-vals$3241 0) (bitvector 64)))))
Ran synthesizer for 2551 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-bwand
  (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
  (vec-div
   (vec-mul
    (vec-cast
     (vec-add
      (vec-add
       (vec-mul
        (vec-cast
         (load
          (buffer column_sums_b 'uint32)
          (ramp
           (sca-add
            (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
            16)
           1
           16)
          (aligned 16 0))
         'int32
         16)
        (sca-broadcast (int32_t t5829) 16))
       (vec-add
        (load
         (buffer bias 'int32)
         (ramp (sca-mul output.s0.x.x 16) 1 16)
         (aligned 16 0))
        (sca-broadcast
         (sca-add
          (sca-mul
           (sca-mul (int32_t t5829) (int32_t t5830))
           (int32_t mat_a.extent.0))
          (sca-mul (int32_t t5830) (int32_t t6653)))
         16)))
      (vec-cast
       (load
        (buffer multiplied_no_offsets 'uint32)
        (ramp
         (sca-add (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121)) 4)
         1
         16)
        (aligned 4 0))
       'int32
       16))
     'int64
     16)
    (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
   (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
 (vec-div
  (vec-mul
   (vec-cast
    (vec-add
     (vec-add
      (vec-mul
       (vec-cast
        (load
         (buffer column_sums_b 'uint32)
         (ramp
          (sca-add (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16) 16)
          1
          16)
         (aligned 16 0))
        'int32
        16)
       (sca-broadcast (int32_t t5829) 16))
      (vec-add
       (load
        (buffer bias 'int32)
        (ramp (sca-mul output.s0.x.x 16) 1 16)
        (aligned 16 0))
       (sca-broadcast
        (sca-add
         (sca-mul
          (sca-mul (int32_t t5829) (int32_t t5830))
          (int32_t mat_a.extent.0))
         (sca-mul (int32_t t5830) (int32_t t6653)))
        16)))
     (vec-cast
      (load
       (buffer multiplied_no_offsets 'uint32)
       (ramp
        (sca-add (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121)) 4)
        1
        16)
       (aligned 4 0))
      'int32
      16))
    'int64
    16)
   (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
  (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
template:
  (vs-mpy-add
 ...
 (combine
  (vs-mpy-add
   ...
   (combine
    (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
    (vs-mpy-add
     ...
     (combine
      #<load-data>
      (broadcast
       ...
       (sca-add
        (sca-mul
         (sca-mul (int32_t t5829) (int32_t t5830))
         (int32_t mat_a.extent.0))
        (sca-mul (int32_t t5830) (int32_t t6653)))))
     (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
     #f
     #f
     #f
     'int32))
   (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
   #f
   #f
   #f
   'int32)
  (cast ... #<load-data> 'int32 #f))
 (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
 #f
 x?$3108
 #f
 'int64)
axioms:
  '(#t #t)
optimized-halide-expr:
  (vec-add
 (vec-bwand
  (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
  (vec-div
   (vec-mul
    (vec-cast (vec-add #<abstr-halide-expr> #<abstr-halide-expr>) 'int64 16)
    (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
   (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
 (vec-div
  (vec-mul
   (vec-cast (vec-add #<abstr-halide-expr> #<abstr-halide-expr>) 'int64 16)
   (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
  (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
optimized-template:
  (vs-mpy-add
 ...
 (combine #<abstr-expr> #<abstr-expr>)
 (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
 #f
 x?$3108
 #f
 'int64)
optimized Halide 0:
  (int64_t
 (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (bvadd (app abstr-vals$3243 0) (app abstr-vals$3244 0)) (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (bvadd (app abstr-vals$3243 0) (app abstr-vals$3244 0)) (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (bvadd (app abstr-vals$3243 0) (app abstr-vals$3244 0)) (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (bvadd (app abstr-vals$3243 0) (app abstr-vals$3244 0)) (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (bvadd (app abstr-vals$3243 0) (app abstr-vals$3244 0)) (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (bvadd (app abstr-vals$3243 0) (app abstr-vals$3244 0)) (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))))
optimized x86 0:
  (int64_t
 (bvadd (sign-extend (app abstr-vals$3243 0) (bitvector 64)) (bvadd (sign-extend (app abstr-vals$3244 0) (bitvector 64)) (ite x?$3108 (bv #x0000000000000001 64) (bv #x0000000000000000 64)))))
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-bwand
  (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
  (vec-div
   (vec-mul
    (vec-cast
     (vec-add
      (vec-add
       (vec-mul
        (vec-cast
         (load
          (buffer column_sums_b 'uint32)
          (ramp
           (sca-add
            (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
            16)
           1
           16)
          (aligned 16 0))
         'int32
         16)
        (sca-broadcast (int32_t t5829) 16))
       (vec-add
        (load
         (buffer bias 'int32)
         (ramp (sca-mul output.s0.x.x 16) 1 16)
         (aligned 16 0))
        (sca-broadcast
         (sca-add
          (sca-mul
           (sca-mul (int32_t t5829) (int32_t t5830))
           (int32_t mat_a.extent.0))
          (sca-mul (int32_t t5830) (int32_t t6653)))
         16)))
      (vec-cast
       (load
        (buffer multiplied_no_offsets 'uint32)
        (ramp
         (sca-add (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121)) 4)
         1
         16)
        (aligned 4 0))
       'int32
       16))
     'int64
     16)
    (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
   (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
 (vec-div
  (vec-mul
   (vec-cast
    (vec-add
     (vec-add
      (vec-mul
       (vec-cast
        (load
         (buffer column_sums_b 'uint32)
         (ramp
          (sca-add (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16) 16)
          1
          16)
         (aligned 16 0))
        'int32
        16)
       (sca-broadcast (int32_t t5829) 16))
      (vec-add
       (load
        (buffer bias 'int32)
        (ramp (sca-mul output.s0.x.x 16) 1 16)
        (aligned 16 0))
       (sca-broadcast
        (sca-add
         (sca-mul
          (sca-mul (int32_t t5829) (int32_t t5830))
          (int32_t mat_a.extent.0))
         (sca-mul (int32_t t5830) (int32_t t6653)))
        16)))
     (vec-cast
      (load
       (buffer multiplied_no_offsets 'uint32)
       (ramp
        (sca-add (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121)) 4)
        1
        16)
       (aligned 4 0))
      'int32
      16))
    'int64
    16)
   (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
  (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
template:
  (vs-mpy-add
 ...
 (vs-mpy-add
  ...
  (combine
   (vs-mpy-add
    ...
    (combine
     (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
     (vs-mpy-add
      ...
      (combine
       #<load-data>
       (broadcast
        ...
        (sca-add
         (sca-mul
          (sca-mul (int32_t t5829) (int32_t t5830))
          (int32_t mat_a.extent.0))
         (sca-mul (int32_t t5830) (int32_t t6653)))))
      (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
      #f
      #f
      #f
      'int32))
    (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
    #f
    #f
    #f
    'int32)
   (cast ... #<load-data> 'int32 #f))
  (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
  #f
  #f
  #f
  'int32)
 (list
  (int32_t output_multiplier)
  (union [(&& (! xi?$2838) (! xi?$2839)) #(struct:int8_t (bv #x01 8))] [(|| xi?$2838 (&& xi?$2839 (! xi?$2838))) #(struct:int32_t
                                                                                                                   (ite* (⊢ xi?$2838 t5829) (⊢ (&& xi?$2839 (! xi?$2838)) output_multiplier)))]))
 #f
 #f
 #f
 'int64)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-add
 (vec-bwand
  (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
  (vec-div
   (vec-mul
    (vec-cast #<abstr-halide-expr> 'int64 16)
    (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
   (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
 (vec-div
  (vec-mul
   (vec-cast #<abstr-halide-expr> 'int64 16)
   (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
  (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
optimized-template:
  (vs-mpy-add
 ...
 #<abstr-expr>
 (list
  (int32_t output_multiplier)
  (union [(&& (! xi?$2838) (! xi?$2839)) #(struct:int8_t (bv #x01 8))] [(|| xi?$2838 (&& xi?$2839 (! xi?$2838))) #(struct:int32_t
                                                                                                                   (ite* (⊢ xi?$2838 t5829) (⊢ (&& xi?$2839 (! xi?$2838)) output_multiplier)))]))
 #f
 #f
 #f
 'int64)
optimized Halide 0:
  (int64_t
 (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (app abstr-vals$3245 0) (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (app abstr-vals$3245 0) (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (app abstr-vals$3245 0) (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (app abstr-vals$3245 0) (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (app abstr-vals$3245 0) (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (app abstr-vals$3245 0) (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))))
optimized x86 0:
  (int64_t
 (bvadd (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (app abstr-vals$3245 0) (bitvector 64))) (bvmul (sign-extend (app abstr-vals$3245 1) (bitvector 64)) (ite* (⊢ (&& (! xi?$2838) (! xi?$2839)) (bv #x0000000000000001 64)) (⊢ (|| xi?$2838 (&& xi?$2839 (! xi?$2838))) (sign-extend (ite* (⊢ xi?$2838 t5829) (⊢ (&& xi?$2839 (! xi?$2838)) output_multiplier)) (bitvector 64)))))))
Ran synthesizer for 2095 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-bwand
  (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
  (vec-div
   (vec-mul
    (vec-cast
     (vec-add
      (vec-add
       (vec-mul
        (vec-cast
         (load
          (buffer column_sums_b 'uint32)
          (ramp
           (sca-add
            (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
            16)
           1
           16)
          (aligned 16 0))
         'int32
         16)
        (sca-broadcast (int32_t t5829) 16))
       (vec-add
        (load
         (buffer bias 'int32)
         (ramp (sca-mul output.s0.x.x 16) 1 16)
         (aligned 16 0))
        (sca-broadcast
         (sca-add
          (sca-mul
           (sca-mul (int32_t t5829) (int32_t t5830))
           (int32_t mat_a.extent.0))
          (sca-mul (int32_t t5830) (int32_t t6653)))
         16)))
      (vec-cast
       (load
        (buffer multiplied_no_offsets 'uint32)
        (ramp
         (sca-add (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121)) 4)
         1
         16)
        (aligned 4 0))
       'int32
       16))
     'int64
     16)
    (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
   (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
 (vec-div
  (vec-mul
   (vec-cast
    (vec-add
     (vec-add
      (vec-mul
       (vec-cast
        (load
         (buffer column_sums_b 'uint32)
         (ramp
          (sca-add (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16) 16)
          1
          16)
         (aligned 16 0))
        'int32
        16)
       (sca-broadcast (int32_t t5829) 16))
      (vec-add
       (load
        (buffer bias 'int32)
        (ramp (sca-mul output.s0.x.x 16) 1 16)
        (aligned 16 0))
       (sca-broadcast
        (sca-add
         (sca-mul
          (sca-mul (int32_t t5829) (int32_t t5830))
          (int32_t mat_a.extent.0))
         (sca-mul (int32_t t5830) (int32_t t6653)))
        16)))
     (vec-cast
      (load
       (buffer multiplied_no_offsets 'uint32)
       (ramp
        (sca-add (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121)) 4)
        1
        16)
       (aligned 4 0))
      'int32
      16))
    'int64
    16)
   (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
  (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
template:
  (vs-mpy-add
 ...
 (vs-mpy-add
  ...
  (combine
   (vs-mpy-add
    ...
    (combine
     (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
     (vs-mpy-add
      ...
      (combine
       #<load-data>
       (broadcast
        ...
        (sca-add
         (sca-mul
          (sca-mul (int32_t t5829) (int32_t t5830))
          (int32_t mat_a.extent.0))
         (sca-mul (int32_t t5830) (int32_t t6653)))))
      (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
      #f
      #f
      #f
      'int32))
    (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
    #f
    #f
    #f
    'int32)
   (cast ... #<load-data> 'int32 #f))
  (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
  #f
  #f
  #f
  'int32)
 (list (int32_t output_multiplier))
 #f
 x?$2836
 #f
 'int64)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-add
 (vec-bwand
  (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
  (vec-div
   (vec-mul
    (vec-cast #<abstr-halide-expr> 'int64 16)
    (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
   (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
 (vec-div
  (vec-mul
   (vec-cast #<abstr-halide-expr> 'int64 16)
   (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
  (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
optimized-template:
  (vs-mpy-add
 ...
 #<abstr-expr>
 (list (int32_t output_multiplier))
 #f
 x?$2836
 #f
 'int64)
optimized Halide 0:
  (int64_t
 (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (app abstr-vals$3246 0) (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (app abstr-vals$3246 0) (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (app abstr-vals$3246 0) (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (app abstr-vals$3246 0) (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (app abstr-vals$3246 0) (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (app abstr-vals$3246 0) (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))))
optimized x86 0:
  (int64_t
 (bvadd (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (app abstr-vals$3246 0) (bitvector 64))) (ite x?$2836 (bv #x0000000000000001 64) (bv #x0000000000000000 64))))
Ran synthesizer for 1014 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-bwand
  (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
  (vec-div
   (vec-mul
    (vec-cast
     (vec-add
      (vec-add
       (vec-mul
        (vec-cast
         (load
          (buffer column_sums_b 'uint32)
          (ramp
           (sca-add
            (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
            16)
           1
           16)
          (aligned 16 0))
         'int32
         16)
        (sca-broadcast (int32_t t5829) 16))
       (vec-add
        (load
         (buffer bias 'int32)
         (ramp (sca-mul output.s0.x.x 16) 1 16)
         (aligned 16 0))
        (sca-broadcast
         (sca-add
          (sca-mul
           (sca-mul (int32_t t5829) (int32_t t5830))
           (int32_t mat_a.extent.0))
          (sca-mul (int32_t t5830) (int32_t t6653)))
         16)))
      (vec-cast
       (load
        (buffer multiplied_no_offsets 'uint32)
        (ramp
         (sca-add (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121)) 4)
         1
         16)
        (aligned 4 0))
       'int32
       16))
     'int64
     16)
    (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
   (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
 (vec-div
  (vec-mul
   (vec-cast
    (vec-add
     (vec-add
      (vec-mul
       (vec-cast
        (load
         (buffer column_sums_b 'uint32)
         (ramp
          (sca-add (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16) 16)
          1
          16)
         (aligned 16 0))
        'int32
        16)
       (sca-broadcast (int32_t t5829) 16))
      (vec-add
       (load
        (buffer bias 'int32)
        (ramp (sca-mul output.s0.x.x 16) 1 16)
        (aligned 16 0))
       (sca-broadcast
        (sca-add
         (sca-mul
          (sca-mul (int32_t t5829) (int32_t t5830))
          (int32_t mat_a.extent.0))
         (sca-mul (int32_t t5830) (int32_t t6653)))
        16)))
     (vec-cast
      (load
       (buffer multiplied_no_offsets 'uint32)
       (ramp
        (sca-add (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121)) 4)
        1
        16)
       (aligned 4 0))
      'int32
      16))
    'int64
    16)
   (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
  (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
template:
  (vs-mpy-add
 ...
 (vs-mpy-add
  ...
  (combine
   (vs-mpy-add
    ...
    (combine
     (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
     (vs-mpy-add
      ...
      (combine
       #<load-data>
       (broadcast
        ...
        (sca-add
         (sca-mul
          (sca-mul (int32_t t5829) (int32_t t5830))
          (int32_t mat_a.extent.0))
         (sca-mul (int32_t t5830) (int32_t t6653)))))
      (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
      #f
      #f
      #f
      'int32))
    (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
    #f
    #f
    #f
    'int32)
   (cast ... #<load-data> 'int32 #f))
  (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
  #f
  #f
  #f
  'int32)
 (list
  (int32_t output_multiplier)
  (union [(&& (! xi?$2976) (! xi?$2977)) #(struct:int8_t (bv #x01 8))] [(|| xi?$2976 (&& xi?$2977 (! xi?$2976))) #(struct:int32_t
                                                                                                                   (ite* (⊢ xi?$2976 t5829) (⊢ (&& xi?$2977 (! xi?$2976)) output_multiplier)))]))
 #f
 #f
 #f
 'int64)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-add
 (vec-bwand
  (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
  (vec-div
   (vec-mul
    (vec-cast #<abstr-halide-expr> 'int64 16)
    (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
   (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
 (vec-div
  (vec-mul
   (vec-cast #<abstr-halide-expr> 'int64 16)
   (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
  (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
optimized-template:
  (vs-mpy-add
 ...
 #<abstr-expr>
 (list
  (int32_t output_multiplier)
  (union [(&& (! xi?$2976) (! xi?$2977)) #(struct:int8_t (bv #x01 8))] [(|| xi?$2976 (&& xi?$2977 (! xi?$2976))) #(struct:int32_t
                                                                                                                   (ite* (⊢ xi?$2976 t5829) (⊢ (&& xi?$2977 (! xi?$2976)) output_multiplier)))]))
 #f
 #f
 #f
 'int64)
optimized Halide 0:
  (int64_t
 (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (app abstr-vals$3247 0) (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (app abstr-vals$3247 0) (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (app abstr-vals$3247 0) (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (app abstr-vals$3247 0) (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (app abstr-vals$3247 0) (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (app abstr-vals$3247 0) (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))))
optimized x86 0:
  (int64_t
 (bvadd (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (app abstr-vals$3247 0) (bitvector 64))) (bvmul (sign-extend (app abstr-vals$3247 1) (bitvector 64)) (ite* (⊢ (&& (! xi?$2976) (! xi?$2977)) (bv #x0000000000000001 64)) (⊢ (|| xi?$2976 (&& xi?$2977 (! xi?$2976))) (sign-extend (ite* (⊢ xi?$2976 t5829) (⊢ (&& xi?$2977 (! xi?$2976)) output_multiplier)) (bitvector 64)))))))
Ran synthesizer for 2206 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-bwand
  (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
  (vec-div
   (vec-mul
    (vec-cast
     (vec-add
      (vec-add
       (vec-mul
        (vec-cast
         (load
          (buffer column_sums_b 'uint32)
          (ramp
           (sca-add
            (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
            16)
           1
           16)
          (aligned 16 0))
         'int32
         16)
        (sca-broadcast (int32_t t5829) 16))
       (vec-add
        (load
         (buffer bias 'int32)
         (ramp (sca-mul output.s0.x.x 16) 1 16)
         (aligned 16 0))
        (sca-broadcast
         (sca-add
          (sca-mul
           (sca-mul (int32_t t5829) (int32_t t5830))
           (int32_t mat_a.extent.0))
          (sca-mul (int32_t t5830) (int32_t t6653)))
         16)))
      (vec-cast
       (load
        (buffer multiplied_no_offsets 'uint32)
        (ramp
         (sca-add (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121)) 4)
         1
         16)
        (aligned 4 0))
       'int32
       16))
     'int64
     16)
    (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
   (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
 (vec-div
  (vec-mul
   (vec-cast
    (vec-add
     (vec-add
      (vec-mul
       (vec-cast
        (load
         (buffer column_sums_b 'uint32)
         (ramp
          (sca-add (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16) 16)
          1
          16)
         (aligned 16 0))
        'int32
        16)
       (sca-broadcast (int32_t t5829) 16))
      (vec-add
       (load
        (buffer bias 'int32)
        (ramp (sca-mul output.s0.x.x 16) 1 16)
        (aligned 16 0))
       (sca-broadcast
        (sca-add
         (sca-mul
          (sca-mul (int32_t t5829) (int32_t t5830))
          (int32_t mat_a.extent.0))
         (sca-mul (int32_t t5830) (int32_t t6653)))
        16)))
     (vec-cast
      (load
       (buffer multiplied_no_offsets 'uint32)
       (ramp
        (sca-add (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121)) 4)
        1
        16)
       (aligned 4 0))
      'int32
      16))
    'int64
    16)
   (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
  (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
template:
  (vs-mpy-add
 ...
 (vs-mpy-add
  ...
  (combine
   (vs-mpy-add
    ...
    (combine
     (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
     (vs-mpy-add
      ...
      (combine
       #<load-data>
       (broadcast
        ...
        (sca-add
         (sca-mul
          (sca-mul (int32_t t5829) (int32_t t5830))
          (int32_t mat_a.extent.0))
         (sca-mul (int32_t t5830) (int32_t t6653)))))
      (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
      #f
      #f
      #f
      'int32))
    (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
    #f
    #f
    #f
    'int32)
   (cast ... #<load-data> 'int32 #f))
  (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
  #f
  #f
  #f
  'int32)
 (list (int32_t output_multiplier))
 #f
 x?$2974
 #f
 'int64)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-add
 (vec-bwand
  (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
  (vec-div
   (vec-mul
    (vec-cast #<abstr-halide-expr> 'int64 16)
    (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
   (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
 (vec-div
  (vec-mul
   (vec-cast #<abstr-halide-expr> 'int64 16)
   (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
  (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
optimized-template:
  (vs-mpy-add
 ...
 #<abstr-expr>
 (list (int32_t output_multiplier))
 #f
 x?$2974
 #f
 'int64)
optimized Halide 0:
  (int64_t
 (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (app abstr-vals$3248 0) (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (app abstr-vals$3248 0) (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (app abstr-vals$3248 0) (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (app abstr-vals$3248 0) (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (app abstr-vals$3248 0) (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (app abstr-vals$3248 0) (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))))
optimized x86 0:
  (int64_t
 (bvadd (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (app abstr-vals$3248 0) (bitvector 64))) (ite x?$2974 (bv #x0000000000000001 64) (bv #x0000000000000000 64))))
Ran synthesizer for 993 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-bwand
  (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
  (vec-div
   (vec-mul
    (vec-cast
     (vec-add
      (vec-add
       (vec-mul
        (vec-cast
         (load
          (buffer column_sums_b 'uint32)
          (ramp
           (sca-add
            (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
            16)
           1
           16)
          (aligned 16 0))
         'int32
         16)
        (sca-broadcast (int32_t t5829) 16))
       (vec-add
        (load
         (buffer bias 'int32)
         (ramp (sca-mul output.s0.x.x 16) 1 16)
         (aligned 16 0))
        (sca-broadcast
         (sca-add
          (sca-mul
           (sca-mul (int32_t t5829) (int32_t t5830))
           (int32_t mat_a.extent.0))
          (sca-mul (int32_t t5830) (int32_t t6653)))
         16)))
      (vec-cast
       (load
        (buffer multiplied_no_offsets 'uint32)
        (ramp
         (sca-add (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121)) 4)
         1
         16)
        (aligned 4 0))
       'int32
       16))
     'int64
     16)
    (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
   (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
 (vec-div
  (vec-mul
   (vec-cast
    (vec-add
     (vec-add
      (vec-mul
       (vec-cast
        (load
         (buffer column_sums_b 'uint32)
         (ramp
          (sca-add (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16) 16)
          1
          16)
         (aligned 16 0))
        'int32
        16)
       (sca-broadcast (int32_t t5829) 16))
      (vec-add
       (load
        (buffer bias 'int32)
        (ramp (sca-mul output.s0.x.x 16) 1 16)
        (aligned 16 0))
       (sca-broadcast
        (sca-add
         (sca-mul
          (sca-mul (int32_t t5829) (int32_t t5830))
          (int32_t mat_a.extent.0))
         (sca-mul (int32_t t5830) (int32_t t6653)))
        16)))
     (vec-cast
      (load
       (buffer multiplied_no_offsets 'uint32)
       (ramp
        (sca-add (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121)) 4)
        1
        16)
       (aligned 4 0))
      'int32
      16))
    'int64
    16)
   (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
  (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
template:
  (vs-shift-right
 ...
 (vs-mpy-add
  ...
  (vs-mpy-add
   ...
   (combine
    (vs-mpy-add
     ...
     (combine
      (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
      (vs-mpy-add
       ...
       (combine
        #<load-data>
        (broadcast
         ...
         (sca-add
          (sca-mul
           (sca-mul (int32_t t5829) (int32_t t5830))
           (int32_t mat_a.extent.0))
          (sca-mul (int32_t t5830) (int32_t t6653)))))
       (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
       #f
       #f
       #f
       'int32))
     (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
     #f
     #f
     #f
     'int32)
    (cast ... #<load-data> 'int32 #f))
   (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
   #f
   #f
   #f
   'int32)
  (list (int32_t output_multiplier))
  #f
  #f
  #f
  'int64)
 (int64_t (ite x?$2831 (bv #x000000000000001e 64) (bv #x000000000000001f 64)))
 #f
 #f
 #t)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$3249 idx) (bv #x4000000000000000 64)) (bvsle (bv #xc000000080000000 64) (app abstr-vals$3249 idx)))))
optimized-halide-expr:
  (vec-add
 (vec-bwand
  (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
  (vec-div
   #<abstr-halide-expr>
   (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
 (vec-div
  #<abstr-halide-expr>
  (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
optimized-template:
  (vs-shift-right
 ...
 #<abstr-expr>
 (int64_t (ite x?$2831 (bv #x000000000000001e 64) (bv #x000000000000001f 64)))
 #f
 #f
 #t)
optimized Halide 0:
  (int64_t
 (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (app abstr-vals$3249 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$3249 0) (bvneg (bvashr (app abstr-vals$3249 0) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (app abstr-vals$3249 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$3249 0) (bvneg (bvashr (app abstr-vals$3249 0) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))))
optimized x86 0:
  (int64_t
 (bvashr (app abstr-vals$3249 0) (ite x?$2831 (bv #x000000000000001e 64) (bv #x000000000000001f 64))))
Ran synthesizer for 474 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-bwand
  (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
  (vec-div
   (vec-mul
    (vec-cast
     (vec-add
      (vec-add
       (vec-mul
        (vec-cast
         (load
          (buffer column_sums_b 'uint32)
          (ramp
           (sca-add
            (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
            16)
           1
           16)
          (aligned 16 0))
         'int32
         16)
        (sca-broadcast (int32_t t5829) 16))
       (vec-add
        (load
         (buffer bias 'int32)
         (ramp (sca-mul output.s0.x.x 16) 1 16)
         (aligned 16 0))
        (sca-broadcast
         (sca-add
          (sca-mul
           (sca-mul (int32_t t5829) (int32_t t5830))
           (int32_t mat_a.extent.0))
          (sca-mul (int32_t t5830) (int32_t t6653)))
         16)))
      (vec-cast
       (load
        (buffer multiplied_no_offsets 'uint32)
        (ramp
         (sca-add (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121)) 4)
         1
         16)
        (aligned 4 0))
       'int32
       16))
     'int64
     16)
    (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
   (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
 (vec-div
  (vec-mul
   (vec-cast
    (vec-add
     (vec-add
      (vec-mul
       (vec-cast
        (load
         (buffer column_sums_b 'uint32)
         (ramp
          (sca-add (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16) 16)
          1
          16)
         (aligned 16 0))
        'int32
        16)
       (sca-broadcast (int32_t t5829) 16))
      (vec-add
       (load
        (buffer bias 'int32)
        (ramp (sca-mul output.s0.x.x 16) 1 16)
        (aligned 16 0))
       (sca-broadcast
        (sca-add
         (sca-mul
          (sca-mul (int32_t t5829) (int32_t t5830))
          (int32_t mat_a.extent.0))
         (sca-mul (int32_t t5830) (int32_t t6653)))
        16)))
     (vec-cast
      (load
       (buffer multiplied_no_offsets 'uint32)
       (ramp
        (sca-add (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121)) 4)
        1
        16)
       (aligned 4 0))
      'int32
      16))
    'int64
    16)
   (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
  (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
template:
  (vs-shift-right
 ...
 (vs-mpy-add
  ...
  (vs-mpy-add
   ...
   (combine
    (vs-mpy-add
     ...
     (combine
      (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
      (vs-mpy-add
       ...
       (combine
        #<load-data>
        (broadcast
         ...
         (sca-add
          (sca-mul
           (sca-mul (int32_t t5829) (int32_t t5830))
           (int32_t mat_a.extent.0))
          (sca-mul (int32_t t5830) (int32_t t6653)))))
       (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
       #f
       #f
       #f
       'int32))
     (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
     #f
     #f
     #f
     'int32)
    (cast ... #<load-data> 'int32 #f))
   (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
   #f
   #f
   #f
   'int32)
  (list (int32_t output_multiplier))
  #f
  #f
  #f
  'int64)
 (int64_t (bv #x000000000000001e 64))
 x?$2832
 x?$2833
 x?$2834)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$3250 idx) (bv #x4000000000000000 64)) (bvsle (bv #xc000000080000000 64) (app abstr-vals$3250 idx)))))
optimized-halide-expr:
  (vec-add
 (vec-bwand
  (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
  (vec-div
   #<abstr-halide-expr>
   (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
 (vec-div
  #<abstr-halide-expr>
  (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
optimized-template:
  (vs-shift-right
 ...
 #<abstr-expr>
 (int64_t (bv #x000000000000001e 64))
 x?$2832
 x?$2833
 x?$2834)
optimized Halide 0:
  (int64_t
 (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (app abstr-vals$3250 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$3250 0) (bvneg (bvashr (app abstr-vals$3250 0) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (app abstr-vals$3250 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$3250 0) (bvneg (bvashr (app abstr-vals$3250 0) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))))
optimized x86 0:
  (int64_t
 (ite x?$2832 (bvadd (ite x?$2834 (bvashr (app abstr-vals$3250 0) (bv #x000000000000001e 64)) (bvlshr (app abstr-vals$3250 0) (bv #x000000000000001e 64))) (bvand (bv #x0000000000000001 64) (ite x?$2834 (bvashr (app abstr-vals$3250 0) (bv #x000000000000001d 64)) (bvlshr (app abstr-vals$3250 0) (bv #x000000000000001d 64))))) (ite x?$2834 (bvashr (app abstr-vals$3250 0) (bv #x000000000000001e 64)) (bvlshr (app abstr-vals$3250 0) (bv #x000000000000001e 64)))))
Ran synthesizer for 501 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-bwand
  (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
  (vec-div
   (vec-mul
    (vec-cast
     (vec-add
      (vec-add
       (vec-mul
        (vec-cast
         (load
          (buffer column_sums_b 'uint32)
          (ramp
           (sca-add
            (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
            16)
           1
           16)
          (aligned 16 0))
         'int32
         16)
        (sca-broadcast (int32_t t5829) 16))
       (vec-add
        (load
         (buffer bias 'int32)
         (ramp (sca-mul output.s0.x.x 16) 1 16)
         (aligned 16 0))
        (sca-broadcast
         (sca-add
          (sca-mul
           (sca-mul (int32_t t5829) (int32_t t5830))
           (int32_t mat_a.extent.0))
          (sca-mul (int32_t t5830) (int32_t t6653)))
         16)))
      (vec-cast
       (load
        (buffer multiplied_no_offsets 'uint32)
        (ramp
         (sca-add (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121)) 4)
         1
         16)
        (aligned 4 0))
       'int32
       16))
     'int64
     16)
    (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
   (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
 (vec-div
  (vec-mul
   (vec-cast
    (vec-add
     (vec-add
      (vec-mul
       (vec-cast
        (load
         (buffer column_sums_b 'uint32)
         (ramp
          (sca-add (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16) 16)
          1
          16)
         (aligned 16 0))
        'int32
        16)
       (sca-broadcast (int32_t t5829) 16))
      (vec-add
       (load
        (buffer bias 'int32)
        (ramp (sca-mul output.s0.x.x 16) 1 16)
        (aligned 16 0))
       (sca-broadcast
        (sca-add
         (sca-mul
          (sca-mul (int32_t t5829) (int32_t t5830))
          (int32_t mat_a.extent.0))
         (sca-mul (int32_t t5830) (int32_t t6653)))
        16)))
     (vec-cast
      (load
       (buffer multiplied_no_offsets 'uint32)
       (ramp
        (sca-add (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121)) 4)
        1
        16)
       (aligned 4 0))
      'int32
      16))
    'int64
    16)
   (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
  (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
template:
  (vs-shift-right
 ...
 (vs-mpy-add
  ...
  (vs-mpy-add
   ...
   (combine
    (vs-mpy-add
     ...
     (combine
      (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
      (vs-mpy-add
       ...
       (combine
        #<load-data>
        (broadcast
         ...
         (sca-add
          (sca-mul
           (sca-mul (int32_t t5829) (int32_t t5830))
           (int32_t mat_a.extent.0))
          (sca-mul (int32_t t5830) (int32_t t6653)))))
       (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
       #f
       #f
       #f
       'int32))
     (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
     #f
     #f
     #f
     'int32)
    (cast ... #<load-data> 'int32 #f))
   (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
   #f
   #f
   #f
   'int32)
  (list (int32_t output_multiplier))
  #f
  #f
  #f
  'int64)
 (int64_t (ite x?$2969 (bv #x000000000000001e 64) (bv #x000000000000001f 64)))
 #f
 #f
 #t)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$3251 idx) (bv #x4000000000000000 64)) (bvsle (bv #xc000000080000000 64) (app abstr-vals$3251 idx)))))
optimized-halide-expr:
  (vec-add
 (vec-bwand
  (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
  (vec-div
   #<abstr-halide-expr>
   (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
 (vec-div
  #<abstr-halide-expr>
  (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
optimized-template:
  (vs-shift-right
 ...
 #<abstr-expr>
 (int64_t (ite x?$2969 (bv #x000000000000001e 64) (bv #x000000000000001f 64)))
 #f
 #f
 #t)
optimized Halide 0:
  (int64_t
 (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (app abstr-vals$3251 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$3251 0) (bvneg (bvashr (app abstr-vals$3251 0) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (app abstr-vals$3251 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$3251 0) (bvneg (bvashr (app abstr-vals$3251 0) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))))
optimized x86 0:
  (int64_t
 (bvashr (app abstr-vals$3251 0) (ite x?$2969 (bv #x000000000000001e 64) (bv #x000000000000001f 64))))
Ran synthesizer for 485 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-bwand
  (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
  (vec-div
   (vec-mul
    (vec-cast
     (vec-add
      (vec-add
       (vec-mul
        (vec-cast
         (load
          (buffer column_sums_b 'uint32)
          (ramp
           (sca-add
            (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
            16)
           1
           16)
          (aligned 16 0))
         'int32
         16)
        (sca-broadcast (int32_t t5829) 16))
       (vec-add
        (load
         (buffer bias 'int32)
         (ramp (sca-mul output.s0.x.x 16) 1 16)
         (aligned 16 0))
        (sca-broadcast
         (sca-add
          (sca-mul
           (sca-mul (int32_t t5829) (int32_t t5830))
           (int32_t mat_a.extent.0))
          (sca-mul (int32_t t5830) (int32_t t6653)))
         16)))
      (vec-cast
       (load
        (buffer multiplied_no_offsets 'uint32)
        (ramp
         (sca-add (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121)) 4)
         1
         16)
        (aligned 4 0))
       'int32
       16))
     'int64
     16)
    (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
   (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
 (vec-div
  (vec-mul
   (vec-cast
    (vec-add
     (vec-add
      (vec-mul
       (vec-cast
        (load
         (buffer column_sums_b 'uint32)
         (ramp
          (sca-add (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16) 16)
          1
          16)
         (aligned 16 0))
        'int32
        16)
       (sca-broadcast (int32_t t5829) 16))
      (vec-add
       (load
        (buffer bias 'int32)
        (ramp (sca-mul output.s0.x.x 16) 1 16)
        (aligned 16 0))
       (sca-broadcast
        (sca-add
         (sca-mul
          (sca-mul (int32_t t5829) (int32_t t5830))
          (int32_t mat_a.extent.0))
         (sca-mul (int32_t t5830) (int32_t t6653)))
        16)))
     (vec-cast
      (load
       (buffer multiplied_no_offsets 'uint32)
       (ramp
        (sca-add (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121)) 4)
        1
        16)
       (aligned 4 0))
      'int32
      16))
    'int64
    16)
   (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
  (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
template:
  (vs-shift-right
 ...
 (vs-mpy-add
  ...
  (vs-mpy-add
   ...
   (combine
    (vs-mpy-add
     ...
     (combine
      (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
      (vs-mpy-add
       ...
       (combine
        #<load-data>
        (broadcast
         ...
         (sca-add
          (sca-mul
           (sca-mul (int32_t t5829) (int32_t t5830))
           (int32_t mat_a.extent.0))
          (sca-mul (int32_t t5830) (int32_t t6653)))))
       (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
       #f
       #f
       #f
       'int32))
     (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
     #f
     #f
     #f
     'int32)
    (cast ... #<load-data> 'int32 #f))
   (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
   #f
   #f
   #f
   'int32)
  (list (int32_t output_multiplier))
  #f
  #f
  #f
  'int64)
 (int64_t (bv #x000000000000001f 64))
 x?$2970
 x?$2971
 x?$2972)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$3252 idx) (bv #x4000000000000000 64)) (bvsle (bv #xc000000080000000 64) (app abstr-vals$3252 idx)))))
optimized-halide-expr:
  (vec-add
 (vec-bwand
  (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
  (vec-div
   #<abstr-halide-expr>
   (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
 (vec-div
  #<abstr-halide-expr>
  (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
optimized-template:
  (vs-shift-right
 ...
 #<abstr-expr>
 (int64_t (bv #x000000000000001f 64))
 x?$2970
 x?$2971
 x?$2972)
optimized Halide 0:
  (int64_t
 (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (app abstr-vals$3252 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$3252 0) (bvneg (bvashr (app abstr-vals$3252 0) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (app abstr-vals$3252 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$3252 0) (bvneg (bvashr (app abstr-vals$3252 0) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))))
optimized x86 0:
  (int64_t
 (ite x?$2970 (bvadd (ite x?$2972 (bvashr (app abstr-vals$3252 0) (bv #x000000000000001f 64)) (bvlshr (app abstr-vals$3252 0) (bv #x000000000000001f 64))) (bvand (bv #x0000000000000001 64) (ite x?$2972 (bvashr (app abstr-vals$3252 0) (bv #x000000000000001e 64)) (bvlshr (app abstr-vals$3252 0) (bv #x000000000000001e 64))))) (ite x?$2972 (bvashr (app abstr-vals$3252 0) (bv #x000000000000001f 64)) (bvlshr (app abstr-vals$3252 0) (bv #x000000000000001f 64)))))
Ran synthesizer for 495 ms
(model
 [x?$2970 #t]
 [x?$2972 #t])
(vec-add
 (vec-bwand
  (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
  (vec-div
   #<abstr-halide-expr>
   (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
 (vec-div
  #<abstr-halide-expr>
  (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
(vs-shift-right
 ...
 (vs-mpy-add
  ...
  (vs-mpy-add
   ...
   (combine
    (vs-mpy-add
     ...
     (combine
      (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
      (vs-mpy-add
       ...
       (combine
        #<load-data>
        (broadcast
         ...
         (sca-add
          (sca-mul
           (sca-mul (int32_t t5829) (int32_t t5830))
           (int32_t mat_a.extent.0))
          (sca-mul (int32_t t5830) (int32_t t6653)))))
       (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
       #f
       #f
       #f
       'int32))
     (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
     #f
     #f
     #f
     'int32)
    (cast ... #<load-data> 'int32 #f))
   (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
   #f
   #f
   #f
   'int32)
  (list (int32_t output_multiplier))
  #f
  #f
  #f
  'int64)
 (int64_t (bv #x000000000000001f 64))
 #t
 x?$2971
 #t)
Ran bounds analysis for 67 ms
Ran bounds analysis for 65 ms
"Success?"
#t
(vs-shift-right ... (vs-mpy-add ... (vs-mpy-add ... (combine (vs-mpy-add ... (combine (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32) (vs-mpy-add ... (combine #<load-data> (broadcast ... (sca-add (sca-mul (sca-mul (int32_t t5829) (int32_t t5830)) (int32_t mat_a.extent.0)) (sca-mul (int32_t t5830) (int32_t t6653))))) (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8))) #f #f #f 'int32)) (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8))) #f #f #f 'int32) (cast ... #<load-data> 'int32 #f)) (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8))) #f #f #f 'int32) (list (int32_t output_multiplier)) #f #f #f 'int64) (int64_t (bv #x000000000000001f 64)) #t x?$2971 #t)
"Building Expr:"
(sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16)
"Fold templates"
'()
here()

"Replace templates"
'()
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16)
template:
  (broadcast ... (int64_t (bv #x000000007fffffff 64)))
axioms:
  '()
optimized-halide-expr:
  (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16)
optimized-template:
  (broadcast ... (int64_t (bv #x000000007fffffff 64)))
optimized Halide 0:
  (int64_t (bv #x000000007fffffff 64))
optimized x86 0:
  (int64_t (bv #x000000007fffffff 64))
Ran synthesizer for 20 ms
(model)
(sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16)
(broadcast ... (int64_t (bv #x000000007fffffff 64)))
Ran bounds analysis for 24 ms
Ran bounds analysis for 15 ms
"Extended success?"
#t
(broadcast ... (int64_t (bv #x000000007fffffff 64)))
"Building Expr:"
(vec-min
 (vec-add
  (vec-bwand
   (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
   (vec-div
    (vec-mul
     (vec-cast
      (vec-add
       (vec-add
        (vec-mul
         (vec-cast
          (load
           (buffer column_sums_b 'uint32)
           (ramp
            (sca-add
             (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
             16)
            1
            16)
           (aligned 16 0))
          'int32
          16)
         (sca-broadcast (int32_t t5829) 16))
        (vec-add
         (load
          (buffer bias 'int32)
          (ramp (sca-mul output.s0.x.x 16) 1 16)
          (aligned 16 0))
         (sca-broadcast
          (sca-add
           (sca-mul
            (sca-mul (int32_t t5829) (int32_t t5830))
            (int32_t mat_a.extent.0))
           (sca-mul (int32_t t5830) (int32_t t6653)))
          16)))
       (vec-cast
        (load
         (buffer multiplied_no_offsets 'uint32)
         (ramp
          (sca-add (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121)) 4)
          1
          16)
         (aligned 4 0))
        'int32
        16))
      'int64
      16)
     (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
    (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
  (vec-div
   (vec-mul
    (vec-cast
     (vec-add
      (vec-add
       (vec-mul
        (vec-cast
         (load
          (buffer column_sums_b 'uint32)
          (ramp
           (sca-add
            (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
            16)
           1
           16)
          (aligned 16 0))
         'int32
         16)
        (sca-broadcast (int32_t t5829) 16))
       (vec-add
        (load
         (buffer bias 'int32)
         (ramp (sca-mul output.s0.x.x 16) 1 16)
         (aligned 16 0))
        (sca-broadcast
         (sca-add
          (sca-mul
           (sca-mul (int32_t t5829) (int32_t t5830))
           (int32_t mat_a.extent.0))
          (sca-mul (int32_t t5830) (int32_t t6653)))
         16)))
      (vec-cast
       (load
        (buffer multiplied_no_offsets 'uint32)
        (ramp
         (sca-add (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121)) 4)
         1
         16)
        (aligned 4 0))
       'int32
       16))
     'int64
     16)
    (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
   (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
 (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
"Fold templates"
(list
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (vs-mpy-add
    ...
    (combine
     (vs-mpy-add
      ...
      (combine
       (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
       (vs-mpy-add
        ...
        (combine
         #<load-data>
         (broadcast
          ...
          (sca-add
           (sca-mul
            (sca-mul (int32_t t5829) (int32_t t5830))
            (int32_t mat_a.extent.0))
           (sca-mul (int32_t t5830) (int32_t t6653)))))
        (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
        #f
        #f
        #f
        'int32))
      (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
      #f
      #f
      #f
      'int32)
     (cast ... #<load-data> 'int32 #f))
    (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
    #f
    #f
    #f
    'int32)
   (list (int32_t output_multiplier))
   #f
   #f
   #f
   'int64)
  (int64_t (ite x?$3254 (bv #x000000000000001e 64) (bv #x000000000000001f 64)))
  #t
  x?$2971
  #t)
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (vs-mpy-add
    ...
    (combine
     (vs-mpy-add
      ...
      (combine
       (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
       (vs-mpy-add
        ...
        (combine
         #<load-data>
         (broadcast
          ...
          (sca-add
           (sca-mul
            (sca-mul (int32_t t5829) (int32_t t5830))
            (int32_t mat_a.extent.0))
           (sca-mul (int32_t t5830) (int32_t t6653)))))
        (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
        #f
        #f
        #f
        'int32))
      (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
      #f
      #f
      #f
      'int32)
     (cast ... #<load-data> 'int32 #f))
    (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
    #f
    #f
    #f
    'int32)
   (list (int32_t output_multiplier))
   #f
   #f
   #f
   'int64)
  (int64_t (bv #x000000000000001f 64))
  x?$3255
  x?$3256
  x?$3257))
here(#(struct:vs-shift-right ... #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<load-data> (#(struct:int32_t t5829)) #f #f #f int32) #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-add #(struct:sca-mul #(struct:sca-mul #(struct:int32_t t5829) #(struct:int32_t t5830)) #(struct:int32_t mat_a.extent.0)) #(struct:sca-mul #(struct:int32_t t5830) #(struct:int32_t t6653))))> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32)> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32) #(struct:cast ... #<load-data> int32 #f)> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32) (#(struct:int32_t output_multiplier)) #f #f #f int64) #(struct:int64_t (ite x?$3254 (bv #x000000000000001e 64) (bv #x000000000000001f 64))) #t x?$2971 #t) #(struct:vs-shift-right ... #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<load-data> (#(struct:int32_t t5829)) #f #f #f int32) #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-add #(struct:sca-mul #(struct:sca-mul #(struct:int32_t t5829) #(struct:int32_t t5830)) #(struct:int32_t mat_a.extent.0)) #(struct:sca-mul #(struct:int32_t t5830) #(struct:int32_t t6653))))> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32)> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32) #(struct:cast ... #<load-data> int32 #f)> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32) (#(struct:int32_t output_multiplier)) #f #f #f int64) #(struct:int64_t (bv #x000000000000001f 64)) x?$3255 x?$3256 x?$3257))

"Replace templates"
'()
run-x86-synthesizer
halide-expr:
  (vec-min
 (vec-add
  (vec-bwand
   (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
   (vec-div
    (vec-mul
     (vec-cast
      (vec-add
       (vec-add
        (vec-mul
         (vec-cast
          (load
           (buffer column_sums_b 'uint32)
           (ramp
            (sca-add
             (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
             16)
            1
            16)
           (aligned 16 0))
          'int32
          16)
         (sca-broadcast (int32_t t5829) 16))
        (vec-add
         (load
          (buffer bias 'int32)
          (ramp (sca-mul output.s0.x.x 16) 1 16)
          (aligned 16 0))
         (sca-broadcast
          (sca-add
           (sca-mul
            (sca-mul (int32_t t5829) (int32_t t5830))
            (int32_t mat_a.extent.0))
           (sca-mul (int32_t t5830) (int32_t t6653)))
          16)))
       (vec-cast
        (load
         (buffer multiplied_no_offsets 'uint32)
         (ramp
          (sca-add (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121)) 4)
          1
          16)
         (aligned 4 0))
        'int32
        16))
      'int64
      16)
     (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
    (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
  (vec-div
   (vec-mul
    (vec-cast
     (vec-add
      (vec-add
       (vec-mul
        (vec-cast
         (load
          (buffer column_sums_b 'uint32)
          (ramp
           (sca-add
            (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
            16)
           1
           16)
          (aligned 16 0))
         'int32
         16)
        (sca-broadcast (int32_t t5829) 16))
       (vec-add
        (load
         (buffer bias 'int32)
         (ramp (sca-mul output.s0.x.x 16) 1 16)
         (aligned 16 0))
        (sca-broadcast
         (sca-add
          (sca-mul
           (sca-mul (int32_t t5829) (int32_t t5830))
           (int32_t mat_a.extent.0))
          (sca-mul (int32_t t5830) (int32_t t6653)))
         16)))
      (vec-cast
       (load
        (buffer multiplied_no_offsets 'uint32)
        (ramp
         (sca-add (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121)) 4)
         1
         16)
        (aligned 4 0))
       'int32
       16))
     'int64
     16)
    (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
   (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
 (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
template:
  (vs-shift-right
 ...
 (vs-mpy-add
  ...
  (vs-mpy-add
   ...
   (combine
    (vs-mpy-add
     ...
     (combine
      (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
      (vs-mpy-add
       ...
       (combine
        #<load-data>
        (broadcast
         ...
         (sca-add
          (sca-mul
           (sca-mul (int32_t t5829) (int32_t t5830))
           (int32_t mat_a.extent.0))
          (sca-mul (int32_t t5830) (int32_t t6653)))))
       (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
       #f
       #f
       #f
       'int32))
     (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
     #f
     #f
     #f
     'int32)
    (cast ... #<load-data> 'int32 #f))
   (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
   #f
   #f
   #f
   'int32)
  (list (int32_t output_multiplier))
  #f
  #f
  #f
  'int64)
 (int64_t (ite x?$3254 (bv #x000000000000001e 64) (bv #x000000000000001f 64)))
 #t
 x?$2971
 #t)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$3268 idx) (bv #x4000000000000000 64)) (bvsle (bv #xc000000080000000 64) (app abstr-vals$3268 idx)))))
optimized-halide-expr:
  (vec-min
 (vec-add
  (vec-bwand
   (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
   (vec-div
    #<abstr-halide-expr>
    (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
  (vec-div
   #<abstr-halide-expr>
   (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
 (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
optimized-template:
  (vs-shift-right
 ...
 #<abstr-expr>
 (int64_t (ite x?$3254 (bv #x000000000000001e 64) (bv #x000000000000001f 64)))
 #t
 x?$2971
 #t)
optimized Halide 0:
  (int64_t
 (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (app abstr-vals$3268 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$3268 0) (bvneg (bvashr (app abstr-vals$3268 0) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (app abstr-vals$3268 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$3268 0) (bvneg (bvashr (app abstr-vals$3268 0) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (app abstr-vals$3268 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$3268 0) (bvneg (bvashr (app abstr-vals$3268 0) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (app abstr-vals$3268 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$3268 0) (bvneg (bvashr (app abstr-vals$3268 0) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)))
optimized x86 0:
  (int64_t
 (bvadd (bvashr (app abstr-vals$3268 0) (ite x?$3254 (bv #x000000000000001e 64) (bv #x000000000000001f 64))) (bvand (bv #x0000000000000001 64) (bvashr (app abstr-vals$3268 0) (ite x?$3254 (bv #x000000000000001d 64) (bv #x000000000000001e 64))))))
Ran synthesizer for 514 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-min
 (vec-add
  (vec-bwand
   (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
   (vec-div
    (vec-mul
     (vec-cast
      (vec-add
       (vec-add
        (vec-mul
         (vec-cast
          (load
           (buffer column_sums_b 'uint32)
           (ramp
            (sca-add
             (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
             16)
            1
            16)
           (aligned 16 0))
          'int32
          16)
         (sca-broadcast (int32_t t5829) 16))
        (vec-add
         (load
          (buffer bias 'int32)
          (ramp (sca-mul output.s0.x.x 16) 1 16)
          (aligned 16 0))
         (sca-broadcast
          (sca-add
           (sca-mul
            (sca-mul (int32_t t5829) (int32_t t5830))
            (int32_t mat_a.extent.0))
           (sca-mul (int32_t t5830) (int32_t t6653)))
          16)))
       (vec-cast
        (load
         (buffer multiplied_no_offsets 'uint32)
         (ramp
          (sca-add (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121)) 4)
          1
          16)
         (aligned 4 0))
        'int32
        16))
      'int64
      16)
     (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
    (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
  (vec-div
   (vec-mul
    (vec-cast
     (vec-add
      (vec-add
       (vec-mul
        (vec-cast
         (load
          (buffer column_sums_b 'uint32)
          (ramp
           (sca-add
            (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
            16)
           1
           16)
          (aligned 16 0))
         'int32
         16)
        (sca-broadcast (int32_t t5829) 16))
       (vec-add
        (load
         (buffer bias 'int32)
         (ramp (sca-mul output.s0.x.x 16) 1 16)
         (aligned 16 0))
        (sca-broadcast
         (sca-add
          (sca-mul
           (sca-mul (int32_t t5829) (int32_t t5830))
           (int32_t mat_a.extent.0))
          (sca-mul (int32_t t5830) (int32_t t6653)))
         16)))
      (vec-cast
       (load
        (buffer multiplied_no_offsets 'uint32)
        (ramp
         (sca-add (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121)) 4)
         1
         16)
        (aligned 4 0))
       'int32
       16))
     'int64
     16)
    (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
   (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
 (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
template:
  (vs-shift-right
 ...
 (vs-mpy-add
  ...
  (vs-mpy-add
   ...
   (combine
    (vs-mpy-add
     ...
     (combine
      (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
      (vs-mpy-add
       ...
       (combine
        #<load-data>
        (broadcast
         ...
         (sca-add
          (sca-mul
           (sca-mul (int32_t t5829) (int32_t t5830))
           (int32_t mat_a.extent.0))
          (sca-mul (int32_t t5830) (int32_t t6653)))))
       (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
       #f
       #f
       #f
       'int32))
     (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
     #f
     #f
     #f
     'int32)
    (cast ... #<load-data> 'int32 #f))
   (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
   #f
   #f
   #f
   'int32)
  (list (int32_t output_multiplier))
  #f
  #f
  #f
  'int64)
 (int64_t (bv #x000000000000001f 64))
 x?$3255
 x?$3256
 x?$3257)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$3269 idx) (bv #x4000000000000000 64)) (bvsle (bv #xc000000080000000 64) (app abstr-vals$3269 idx)))))
optimized-halide-expr:
  (vec-min
 (vec-add
  (vec-bwand
   (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
   (vec-div
    #<abstr-halide-expr>
    (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
  (vec-div
   #<abstr-halide-expr>
   (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
 (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
optimized-template:
  (vs-shift-right
 ...
 #<abstr-expr>
 (int64_t (bv #x000000000000001f 64))
 x?$3255
 x?$3256
 x?$3257)
optimized Halide 0:
  (int64_t
 (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (app abstr-vals$3269 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$3269 0) (bvneg (bvashr (app abstr-vals$3269 0) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (app abstr-vals$3269 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$3269 0) (bvneg (bvashr (app abstr-vals$3269 0) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (app abstr-vals$3269 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$3269 0) (bvneg (bvashr (app abstr-vals$3269 0) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (app abstr-vals$3269 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$3269 0) (bvneg (bvashr (app abstr-vals$3269 0) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)))
optimized x86 0:
  (int64_t
 (ite x?$3255 (bvadd (ite x?$3257 (bvashr (app abstr-vals$3269 0) (bv #x000000000000001f 64)) (bvlshr (app abstr-vals$3269 0) (bv #x000000000000001f 64))) (bvand (bv #x0000000000000001 64) (ite x?$3257 (bvashr (app abstr-vals$3269 0) (bv #x000000000000001e 64)) (bvlshr (app abstr-vals$3269 0) (bv #x000000000000001e 64))))) (ite x?$3257 (bvashr (app abstr-vals$3269 0) (bv #x000000000000001f 64)) (bvlshr (app abstr-vals$3269 0) (bv #x000000000000001f 64)))))
Ran synthesizer for 477 ms
(unsat)
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (vec-min
 (vec-add
  (vec-bwand
   (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
   (vec-div
    (vec-mul
     (vec-cast
      (vec-add
       (vec-add
        (vec-mul
         (vec-cast
          (load
           (buffer column_sums_b 'uint32)
           (ramp
            (sca-add
             (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
             16)
            1
            16)
           (aligned 16 0))
          'int32
          16)
         (sca-broadcast (int32_t t5829) 16))
        (vec-add
         (load
          (buffer bias 'int32)
          (ramp (sca-mul output.s0.x.x 16) 1 16)
          (aligned 16 0))
         (sca-broadcast
          (sca-add
           (sca-mul
            (sca-mul (int32_t t5829) (int32_t t5830))
            (int32_t mat_a.extent.0))
           (sca-mul (int32_t t5830) (int32_t t6653)))
          16)))
       (vec-cast
        (load
         (buffer multiplied_no_offsets 'uint32)
         (ramp
          (sca-add (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121)) 4)
          1
          16)
         (aligned 4 0))
        'int32
        16))
      'int64
      16)
     (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
    (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
  (vec-div
   (vec-mul
    (vec-cast
     (vec-add
      (vec-add
       (vec-mul
        (vec-cast
         (load
          (buffer column_sums_b 'uint32)
          (ramp
           (sca-add
            (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
            16)
           1
           16)
          (aligned 16 0))
         'int32
         16)
        (sca-broadcast (int32_t t5829) 16))
       (vec-add
        (load
         (buffer bias 'int32)
         (ramp (sca-mul output.s0.x.x 16) 1 16)
         (aligned 16 0))
        (sca-broadcast
         (sca-add
          (sca-mul
           (sca-mul (int32_t t5829) (int32_t t5830))
           (int32_t mat_a.extent.0))
          (sca-mul (int32_t t5830) (int32_t t6653)))
         16)))
      (vec-cast
       (load
        (buffer multiplied_no_offsets 'uint32)
        (ramp
         (sca-add (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121)) 4)
         1
         16)
        (aligned 4 0))
       'int32
       16))
     'int64
     16)
    (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
   (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
 (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
template:
  (minimum
 ...
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (vs-mpy-add
    ...
    (combine
     (vs-mpy-add
      ...
      (combine
       (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
       (vs-mpy-add
        ...
        (combine
         #<load-data>
         (broadcast
          ...
          (sca-add
           (sca-mul
            (sca-mul (int32_t t5829) (int32_t t5830))
            (int32_t mat_a.extent.0))
           (sca-mul (int32_t t5830) (int32_t t6653)))))
        (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
        #f
        #f
        #f
        'int32))
      (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
      #f
      #f
      #f
      'int32)
     (cast ... #<load-data> 'int32 #f))
    (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
    #f
    #f
    #f
    'int32)
   (list (int32_t output_multiplier))
   #f
   #f
   #f
   'int64)
  (int64_t (bv #x000000000000001f 64))
  #t
  x?$2971
  #t)
 (broadcast ... (int64_t (bv #x000000007fffffff 64))))
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$3270 idx) (bv #x0000000080000000 64)) (bvsle (bv #xffffffff80000001 64) (app abstr-vals$3270 idx))))
 (forall (idx) (&& (bvsle (app abstr-vals$3271 idx) (bv #x000000007fffffff 64)) (bvsle (bv #x000000007fffffff 64) (app abstr-vals$3271 idx)))))
optimized-halide-expr:
  (vec-min #<abstr-halide-expr> #<abstr-halide-expr>)
optimized-template:
  (minimum ... #<abstr-expr> #<abstr-expr>)
optimized Halide 0:
  (int64_t
 (ite (bvsle (app abstr-vals$3270 0) (app abstr-vals$3271 0)) (app abstr-vals$3270 0) (app abstr-vals$3271 0)))
optimized x86 0:
  (int64_t
 (ite (bvsle (app abstr-vals$3270 0) (app abstr-vals$3271 0)) (app abstr-vals$3270 0) (app abstr-vals$3271 0)))
Ran synthesizer for 50 ms
(model)
(vec-min #<abstr-halide-expr> #<abstr-halide-expr>)
(minimum
 ...
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (vs-mpy-add
    ...
    (combine
     (vs-mpy-add
      ...
      (combine
       (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
       (vs-mpy-add
        ...
        (combine
         #<load-data>
         (broadcast
          ...
          (sca-add
           (sca-mul
            (sca-mul (int32_t t5829) (int32_t t5830))
            (int32_t mat_a.extent.0))
           (sca-mul (int32_t t5830) (int32_t t6653)))))
        (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
        #f
        #f
        #f
        'int32))
      (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
      #f
      #f
      #f
      'int32)
     (cast ... #<load-data> 'int32 #f))
    (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
    #f
    #f
    #f
    'int32)
   (list (int32_t output_multiplier))
   #f
   #f
   #f
   'int64)
  (int64_t (bv #x000000000000001f 64))
  #t
  x?$2971
  #t)
 (broadcast ... (int64_t (bv #x000000007fffffff 64))))
Ran bounds analysis for 58 ms
Ran bounds analysis for 61 ms
"Extended success?"
#t
(minimum
 ...
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (vs-mpy-add
    ...
    (combine
     (vs-mpy-add
      ...
      (combine
       (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
       (vs-mpy-add
        ...
        (combine
         #<load-data>
         (broadcast
          ...
          (sca-add
           (sca-mul
            (sca-mul (int32_t t5829) (int32_t t5830))
            (int32_t mat_a.extent.0))
           (sca-mul (int32_t t5830) (int32_t t6653)))))
        (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
        #f
        #f
        #f
        'int32))
      (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
      #f
      #f
      #f
      'int32)
     (cast ... #<load-data> 'int32 #f))
    (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
    #f
    #f
    #f
    'int32)
   (list (int32_t output_multiplier))
   #f
   #f
   #f
   'int64)
  (int64_t (bv #x000000000000001f 64))
  #t
  x?$2971
  #t)
 (broadcast ... (int64_t (bv #x000000007fffffff 64))))
"Building Expr:"
(sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16)
"Fold templates"
'()
here()

"Replace templates"
'()
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16)
template:
  (broadcast ... (int64_t (bv #xffffffff80000000 64)))
axioms:
  '()
optimized-halide-expr:
  (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16)
optimized-template:
  (broadcast ... (int64_t (bv #xffffffff80000000 64)))
optimized Halide 0:
  (int64_t (bv #xffffffff80000000 64))
optimized x86 0:
  (int64_t (bv #xffffffff80000000 64))
Ran synthesizer for 20 ms
(model)
(sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16)
(broadcast ... (int64_t (bv #xffffffff80000000 64)))
Ran bounds analysis for 24 ms
Ran bounds analysis for 17 ms
"Extended success?"
#t
(broadcast ... (int64_t (bv #xffffffff80000000 64)))
"Building Expr:"
(vec-max
 (vec-min
  (vec-add
   (vec-bwand
    (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
    (vec-div
     (vec-mul
      (vec-cast
       (vec-add
        (vec-add
         (vec-mul
          (vec-cast
           (load
            (buffer column_sums_b 'uint32)
            (ramp
             (sca-add
              (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
              16)
             1
             16)
            (aligned 16 0))
           'int32
           16)
          (sca-broadcast (int32_t t5829) 16))
         (vec-add
          (load
           (buffer bias 'int32)
           (ramp (sca-mul output.s0.x.x 16) 1 16)
           (aligned 16 0))
          (sca-broadcast
           (sca-add
            (sca-mul
             (sca-mul (int32_t t5829) (int32_t t5830))
             (int32_t mat_a.extent.0))
            (sca-mul (int32_t t5830) (int32_t t6653)))
           16)))
        (vec-cast
         (load
          (buffer multiplied_no_offsets 'uint32)
          (ramp
           (sca-add (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121)) 4)
           1
           16)
          (aligned 4 0))
         'int32
         16))
       'int64
       16)
      (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
     (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
   (vec-div
    (vec-mul
     (vec-cast
      (vec-add
       (vec-add
        (vec-mul
         (vec-cast
          (load
           (buffer column_sums_b 'uint32)
           (ramp
            (sca-add
             (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
             16)
            1
            16)
           (aligned 16 0))
          'int32
          16)
         (sca-broadcast (int32_t t5829) 16))
        (vec-add
         (load
          (buffer bias 'int32)
          (ramp (sca-mul output.s0.x.x 16) 1 16)
          (aligned 16 0))
         (sca-broadcast
          (sca-add
           (sca-mul
            (sca-mul (int32_t t5829) (int32_t t5830))
            (int32_t mat_a.extent.0))
           (sca-mul (int32_t t5830) (int32_t t6653)))
          16)))
       (vec-cast
        (load
         (buffer multiplied_no_offsets 'uint32)
         (ramp
          (sca-add (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121)) 4)
          1
          16)
         (aligned 4 0))
        'int32
        16))
      'int64
      16)
     (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
    (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
  (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
 (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
"Fold templates"
(list
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (vs-mpy-add
    ...
    (combine
     (vs-mpy-add
      ...
      (combine
       (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
       (vs-mpy-add
        ...
        (combine
         #<load-data>
         (broadcast
          ...
          (sca-add
           (sca-mul
            (sca-mul (int32_t t5829) (int32_t t5830))
            (int32_t mat_a.extent.0))
           (sca-mul (int32_t t5830) (int32_t t6653)))))
        (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
        #f
        #f
        #f
        'int32))
      (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
      #f
      #f
      #f
      'int32)
     (cast ... #<load-data> 'int32 #f))
    (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
    #f
    #f
    #f
    'int32)
   (list (int32_t output_multiplier))
   #f
   #f
   #f
   'int64)
  (int64_t (ite x?$3274 (bv #x000000000000001e 64) (bv #x000000000000001f 64)))
  #t
  x?$2971
  #t)
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (vs-mpy-add
    ...
    (combine
     (vs-mpy-add
      ...
      (combine
       (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
       (vs-mpy-add
        ...
        (combine
         #<load-data>
         (broadcast
          ...
          (sca-add
           (sca-mul
            (sca-mul (int32_t t5829) (int32_t t5830))
            (int32_t mat_a.extent.0))
           (sca-mul (int32_t t5830) (int32_t t6653)))))
        (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
        #f
        #f
        #f
        'int32))
      (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
      #f
      #f
      #f
      'int32)
     (cast ... #<load-data> 'int32 #f))
    (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
    #f
    #f
    #f
    'int32)
   (list (int32_t output_multiplier))
   #f
   #f
   #f
   'int64)
  (int64_t (bv #x000000000000001f 64))
  x?$3275
  x?$3276
  x?$3277))
here(#(struct:vs-shift-right ... #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<load-data> (#(struct:int32_t t5829)) #f #f #f int32) #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-add #(struct:sca-mul #(struct:sca-mul #(struct:int32_t t5829) #(struct:int32_t t5830)) #(struct:int32_t mat_a.extent.0)) #(struct:sca-mul #(struct:int32_t t5830) #(struct:int32_t t6653))))> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32)> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32) #(struct:cast ... #<load-data> int32 #f)> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32) (#(struct:int32_t output_multiplier)) #f #f #f int64) #(struct:int64_t (ite x?$3274 (bv #x000000000000001e 64) (bv #x000000000000001f 64))) #t x?$2971 #t) #(struct:vs-shift-right ... #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<load-data> (#(struct:int32_t t5829)) #f #f #f int32) #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-add #(struct:sca-mul #(struct:sca-mul #(struct:int32_t t5829) #(struct:int32_t t5830)) #(struct:int32_t mat_a.extent.0)) #(struct:sca-mul #(struct:int32_t t5830) #(struct:int32_t t6653))))> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32)> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32) #(struct:cast ... #<load-data> int32 #f)> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32) (#(struct:int32_t output_multiplier)) #f #f #f int64) #(struct:int64_t (bv #x000000000000001f 64)) x?$3275 x?$3276 x?$3277))

"Replace templates"
(list
 (cast
  ...
  (vs-shift-right
   ...
   (vs-mpy-add
    ...
    (vs-mpy-add
     ...
     (combine
      (vs-mpy-add
       ...
       (combine
        (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
        (vs-mpy-add
         ...
         (combine
          #<load-data>
          (broadcast
           ...
           (sca-add
            (sca-mul
             (sca-mul (int32_t t5829) (int32_t t5830))
             (int32_t mat_a.extent.0))
            (sca-mul (int32_t t5830) (int32_t t6653)))))
         (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
         #f
         #f
         #f
         'int32))
       (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
       #f
       #f
       #f
       'int32)
      (cast ... #<load-data> 'int32 #f))
     (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
     #f
     #f
     #f
     'int32)
    (list (int32_t output_multiplier))
    #f
    #f
    #f
    'int64)
   (int64_t (bv #x000000000000001f 64))
   #t
   x?$2971
   #t)
  'int64
  #t)
 (cast ... (broadcast ... (int64_t (bv #x000000007fffffff 64))) 'int64 #t))
run-x86-synthesizer
halide-expr:
  (vec-max
 (vec-min
  (vec-add
   (vec-bwand
    (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
    (vec-div
     (vec-mul
      (vec-cast
       (vec-add
        (vec-add
         (vec-mul
          (vec-cast
           (load
            (buffer column_sums_b 'uint32)
            (ramp
             (sca-add
              (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
              16)
             1
             16)
            (aligned 16 0))
           'int32
           16)
          (sca-broadcast (int32_t t5829) 16))
         (vec-add
          (load
           (buffer bias 'int32)
           (ramp (sca-mul output.s0.x.x 16) 1 16)
           (aligned 16 0))
          (sca-broadcast
           (sca-add
            (sca-mul
             (sca-mul (int32_t t5829) (int32_t t5830))
             (int32_t mat_a.extent.0))
            (sca-mul (int32_t t5830) (int32_t t6653)))
           16)))
        (vec-cast
         (load
          (buffer multiplied_no_offsets 'uint32)
          (ramp
           (sca-add (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121)) 4)
           1
           16)
          (aligned 4 0))
         'int32
         16))
       'int64
       16)
      (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
     (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
   (vec-div
    (vec-mul
     (vec-cast
      (vec-add
       (vec-add
        (vec-mul
         (vec-cast
          (load
           (buffer column_sums_b 'uint32)
           (ramp
            (sca-add
             (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
             16)
            1
            16)
           (aligned 16 0))
          'int32
          16)
         (sca-broadcast (int32_t t5829) 16))
        (vec-add
         (load
          (buffer bias 'int32)
          (ramp (sca-mul output.s0.x.x 16) 1 16)
          (aligned 16 0))
         (sca-broadcast
          (sca-add
           (sca-mul
            (sca-mul (int32_t t5829) (int32_t t5830))
            (int32_t mat_a.extent.0))
           (sca-mul (int32_t t5830) (int32_t t6653)))
          16)))
       (vec-cast
        (load
         (buffer multiplied_no_offsets 'uint32)
         (ramp
          (sca-add (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121)) 4)
          1
          16)
         (aligned 4 0))
        'int32
        16))
      'int64
      16)
     (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
    (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
  (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
 (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
template:
  (cast ... (broadcast ... (int64_t (bv #x000000007fffffff 64))) 'int64 #t)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$3283 idx) (bv #x000000007fffffff 64)) (bvsle (bv #x000000007fffffff 64) (app abstr-vals$3283 idx)))))
optimized-halide-expr:
  (vec-max
 (vec-min
  (vec-add
   (vec-bwand
    (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
    (vec-div
     (vec-mul
      (vec-cast
       (vec-add
        (vec-add
         (vec-mul
          (vec-cast
           (load
            (buffer column_sums_b 'uint32)
            (ramp
             (sca-add
              (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
              16)
             1
             16)
            (aligned 16 0))
           'int32
           16)
          (sca-broadcast (int32_t t5829) 16))
         (vec-add
          (load
           (buffer bias 'int32)
           (ramp (sca-mul output.s0.x.x 16) 1 16)
           (aligned 16 0))
          (sca-broadcast
           (sca-add
            (sca-mul
             (sca-mul (int32_t t5829) (int32_t t5830))
             (int32_t mat_a.extent.0))
            (sca-mul (int32_t t5830) (int32_t t6653)))
           16)))
        (vec-cast
         (load
          (buffer multiplied_no_offsets 'uint32)
          (ramp
           (sca-add (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121)) 4)
           1
           16)
          (aligned 4 0))
         'int32
         16))
       'int64
       16)
      (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
     (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
   (vec-div
    (vec-mul
     (vec-cast
      (vec-add
       (vec-add
        (vec-mul
         (vec-cast
          (load
           (buffer column_sums_b 'uint32)
           (ramp
            (sca-add
             (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
             16)
            1
            16)
           (aligned 16 0))
          'int32
          16)
         (sca-broadcast (int32_t t5829) 16))
        (vec-add
         (load
          (buffer bias 'int32)
          (ramp (sca-mul output.s0.x.x 16) 1 16)
          (aligned 16 0))
         (sca-broadcast
          (sca-add
           (sca-mul
            (sca-mul (int32_t t5829) (int32_t t5830))
            (int32_t mat_a.extent.0))
           (sca-mul (int32_t t5830) (int32_t t6653)))
          16)))
       (vec-cast
        (load
         (buffer multiplied_no_offsets 'uint32)
         (ramp
          (sca-add (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121)) 4)
          1
          16)
         (aligned 4 0))
        'int32
        16))
      'int64
      16)
     (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
    (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
  #<abstr-halide-expr>)
 (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
optimized-template:
  (cast ... #<abstr-expr> 'int64 #t)
optimized Halide 0:
  (int64_t
 (ite (bvsle (bv #xffffffff80000000 64) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (app abstr-vals$3283 0)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (app abstr-vals$3283 0))) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (app abstr-vals$3283 0)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (app abstr-vals$3283 0)) (bv #xffffffff80000000 64)))
optimized x86 0:
  (int64_t (app abstr-vals$3283 0))
run-x86-synthesizer
halide-expr:
  (vec-max
 (vec-min
  (vec-add
   (vec-bwand
    (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
    (vec-div
     (vec-mul
      (vec-cast
       (vec-add
        (vec-add
         (vec-mul
          (vec-cast
           (load
            (buffer column_sums_b 'uint32)
            (ramp
             (sca-add
              (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
              16)
             1
             16)
            (aligned 16 0))
           'int32
           16)
          (sca-broadcast (int32_t t5829) 16))
         (vec-add
          (load
           (buffer bias 'int32)
           (ramp (sca-mul output.s0.x.x 16) 1 16)
           (aligned 16 0))
          (sca-broadcast
           (sca-add
            (sca-mul
             (sca-mul (int32_t t5829) (int32_t t5830))
             (int32_t mat_a.extent.0))
            (sca-mul (int32_t t5830) (int32_t t6653)))
           16)))
        (vec-cast
         (load
          (buffer multiplied_no_offsets 'uint32)
          (ramp
           (sca-add (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121)) 4)
           1
           16)
          (aligned 4 0))
         'int32
         16))
       'int64
       16)
      (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
     (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
   (vec-div
    (vec-mul
     (vec-cast
      (vec-add
       (vec-add
        (vec-mul
         (vec-cast
          (load
           (buffer column_sums_b 'uint32)
           (ramp
            (sca-add
             (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
             16)
            1
            16)
           (aligned 16 0))
          'int32
          16)
         (sca-broadcast (int32_t t5829) 16))
        (vec-add
         (load
          (buffer bias 'int32)
          (ramp (sca-mul output.s0.x.x 16) 1 16)
          (aligned 16 0))
         (sca-broadcast
          (sca-add
           (sca-mul
            (sca-mul (int32_t t5829) (int32_t t5830))
            (int32_t mat_a.extent.0))
           (sca-mul (int32_t t5830) (int32_t t6653)))
          16)))
       (vec-cast
        (load
         (buffer multiplied_no_offsets 'uint32)
         (ramp
          (sca-add (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121)) 4)
          1
          16)
         (aligned 4 0))
        'int32
        16))
      'int64
      16)
     (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
    (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
  (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
 (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
template:
  (vs-shift-right
 ...
 (vs-mpy-add
  ...
  (vs-mpy-add
   ...
   (combine
    (vs-mpy-add
     ...
     (combine
      (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
      (vs-mpy-add
       ...
       (combine
        #<load-data>
        (broadcast
         ...
         (sca-add
          (sca-mul
           (sca-mul (int32_t t5829) (int32_t t5830))
           (int32_t mat_a.extent.0))
          (sca-mul (int32_t t5830) (int32_t t6653)))))
       (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
       #f
       #f
       #f
       'int32))
     (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
     #f
     #f
     #f
     'int32)
    (cast ... #<load-data> 'int32 #f))
   (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
   #f
   #f
   #f
   'int32)
  (list (int32_t output_multiplier))
  #f
  #f
  #f
  'int64)
 (int64_t (ite x?$3274 (bv #x000000000000001e 64) (bv #x000000000000001f 64)))
 #t
 x?$2971
 #t)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$3284 idx) (bv #x4000000000000000 64)) (bvsle (bv #xc000000080000000 64) (app abstr-vals$3284 idx)))))
optimized-halide-expr:
  (vec-max
 (vec-min
  (vec-add
   (vec-bwand
    (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
    (vec-div
     #<abstr-halide-expr>
     (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
   (vec-div
    #<abstr-halide-expr>
    (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
  (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
 (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
optimized-template:
  (vs-shift-right
 ...
 #<abstr-expr>
 (int64_t (ite x?$3274 (bv #x000000000000001e 64) (bv #x000000000000001f 64)))
 #t
 x?$2971
 #t)
optimized Halide 0:
  (int64_t
 (ite (bvsle (bv #xffffffff80000000 64) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (app abstr-vals$3284 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$3284 0) (bvneg (bvashr (app abstr-vals$3284 0) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (app abstr-vals$3284 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$3284 0) (bvneg (bvashr (app abstr-vals$3284 0) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (app abstr-vals$3284 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$3284 0) (bvneg (bvashr (app abstr-vals$3284 0) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (app abstr-vals$3284 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$3284 0) (bvneg (bvashr (app abstr-vals$3284 0) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64))) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (app abstr-vals$3284 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$3284 0) (bvneg (bvashr (app abstr-vals$3284 0) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (app abstr-vals$3284 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$3284 0) (bvneg (bvashr (app abstr-vals$3284 0) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (app abstr-vals$3284 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$3284 0) (bvneg (bvashr (app abstr-vals$3284 0) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (app abstr-vals$3284 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$3284 0) (bvneg (bvashr (app abstr-vals$3284 0) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bv #xffffffff80000000 64)))
optimized x86 0:
  (int64_t
 (bvadd (bvashr (app abstr-vals$3284 0) (ite x?$3274 (bv #x000000000000001e 64) (bv #x000000000000001f 64))) (bvand (bv #x0000000000000001 64) (bvashr (app abstr-vals$3284 0) (ite x?$3274 (bv #x000000000000001d 64) (bv #x000000000000001e 64))))))
Ran synthesizer for 512 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-max
 (vec-min
  (vec-add
   (vec-bwand
    (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
    (vec-div
     (vec-mul
      (vec-cast
       (vec-add
        (vec-add
         (vec-mul
          (vec-cast
           (load
            (buffer column_sums_b 'uint32)
            (ramp
             (sca-add
              (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
              16)
             1
             16)
            (aligned 16 0))
           'int32
           16)
          (sca-broadcast (int32_t t5829) 16))
         (vec-add
          (load
           (buffer bias 'int32)
           (ramp (sca-mul output.s0.x.x 16) 1 16)
           (aligned 16 0))
          (sca-broadcast
           (sca-add
            (sca-mul
             (sca-mul (int32_t t5829) (int32_t t5830))
             (int32_t mat_a.extent.0))
            (sca-mul (int32_t t5830) (int32_t t6653)))
           16)))
        (vec-cast
         (load
          (buffer multiplied_no_offsets 'uint32)
          (ramp
           (sca-add (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121)) 4)
           1
           16)
          (aligned 4 0))
         'int32
         16))
       'int64
       16)
      (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
     (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
   (vec-div
    (vec-mul
     (vec-cast
      (vec-add
       (vec-add
        (vec-mul
         (vec-cast
          (load
           (buffer column_sums_b 'uint32)
           (ramp
            (sca-add
             (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
             16)
            1
            16)
           (aligned 16 0))
          'int32
          16)
         (sca-broadcast (int32_t t5829) 16))
        (vec-add
         (load
          (buffer bias 'int32)
          (ramp (sca-mul output.s0.x.x 16) 1 16)
          (aligned 16 0))
         (sca-broadcast
          (sca-add
           (sca-mul
            (sca-mul (int32_t t5829) (int32_t t5830))
            (int32_t mat_a.extent.0))
           (sca-mul (int32_t t5830) (int32_t t6653)))
          16)))
       (vec-cast
        (load
         (buffer multiplied_no_offsets 'uint32)
         (ramp
          (sca-add (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121)) 4)
          1
          16)
         (aligned 4 0))
        'int32
        16))
      'int64
      16)
     (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
    (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
  (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
 (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
template:
  (vs-shift-right
 ...
 (vs-mpy-add
  ...
  (vs-mpy-add
   ...
   (combine
    (vs-mpy-add
     ...
     (combine
      (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
      (vs-mpy-add
       ...
       (combine
        #<load-data>
        (broadcast
         ...
         (sca-add
          (sca-mul
           (sca-mul (int32_t t5829) (int32_t t5830))
           (int32_t mat_a.extent.0))
          (sca-mul (int32_t t5830) (int32_t t6653)))))
       (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
       #f
       #f
       #f
       'int32))
     (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
     #f
     #f
     #f
     'int32)
    (cast ... #<load-data> 'int32 #f))
   (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
   #f
   #f
   #f
   'int32)
  (list (int32_t output_multiplier))
  #f
  #f
  #f
  'int64)
 (int64_t (bv #x000000000000001f 64))
 x?$3275
 x?$3276
 x?$3277)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$3285 idx) (bv #x4000000000000000 64)) (bvsle (bv #xc000000080000000 64) (app abstr-vals$3285 idx)))))
optimized-halide-expr:
  (vec-max
 (vec-min
  (vec-add
   (vec-bwand
    (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
    (vec-div
     #<abstr-halide-expr>
     (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
   (vec-div
    #<abstr-halide-expr>
    (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
  (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
 (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
optimized-template:
  (vs-shift-right
 ...
 #<abstr-expr>
 (int64_t (bv #x000000000000001f 64))
 x?$3275
 x?$3276
 x?$3277)
optimized Halide 0:
  (int64_t
 (ite (bvsle (bv #xffffffff80000000 64) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (app abstr-vals$3285 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$3285 0) (bvneg (bvashr (app abstr-vals$3285 0) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (app abstr-vals$3285 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$3285 0) (bvneg (bvashr (app abstr-vals$3285 0) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (app abstr-vals$3285 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$3285 0) (bvneg (bvashr (app abstr-vals$3285 0) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (app abstr-vals$3285 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$3285 0) (bvneg (bvashr (app abstr-vals$3285 0) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64))) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (app abstr-vals$3285 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$3285 0) (bvneg (bvashr (app abstr-vals$3285 0) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (app abstr-vals$3285 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$3285 0) (bvneg (bvashr (app abstr-vals$3285 0) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (app abstr-vals$3285 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$3285 0) (bvneg (bvashr (app abstr-vals$3285 0) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (app abstr-vals$3285 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$3285 0) (bvneg (bvashr (app abstr-vals$3285 0) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bv #xffffffff80000000 64)))
optimized x86 0:
  (int64_t
 (ite x?$3275 (bvadd (ite x?$3277 (bvashr (app abstr-vals$3285 0) (bv #x000000000000001f 64)) (bvlshr (app abstr-vals$3285 0) (bv #x000000000000001f 64))) (bvand (bv #x0000000000000001 64) (ite x?$3277 (bvashr (app abstr-vals$3285 0) (bv #x000000000000001e 64)) (bvlshr (app abstr-vals$3285 0) (bv #x000000000000001e 64))))) (ite x?$3277 (bvashr (app abstr-vals$3285 0) (bv #x000000000000001f 64)) (bvlshr (app abstr-vals$3285 0) (bv #x000000000000001f 64)))))
Ran synthesizer for 735 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-max
 (vec-min
  (vec-add
   (vec-bwand
    (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
    (vec-div
     (vec-mul
      (vec-cast
       (vec-add
        (vec-add
         (vec-mul
          (vec-cast
           (load
            (buffer column_sums_b 'uint32)
            (ramp
             (sca-add
              (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
              16)
             1
             16)
            (aligned 16 0))
           'int32
           16)
          (sca-broadcast (int32_t t5829) 16))
         (vec-add
          (load
           (buffer bias 'int32)
           (ramp (sca-mul output.s0.x.x 16) 1 16)
           (aligned 16 0))
          (sca-broadcast
           (sca-add
            (sca-mul
             (sca-mul (int32_t t5829) (int32_t t5830))
             (int32_t mat_a.extent.0))
            (sca-mul (int32_t t5830) (int32_t t6653)))
           16)))
        (vec-cast
         (load
          (buffer multiplied_no_offsets 'uint32)
          (ramp
           (sca-add (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121)) 4)
           1
           16)
          (aligned 4 0))
         'int32
         16))
       'int64
       16)
      (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
     (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
   (vec-div
    (vec-mul
     (vec-cast
      (vec-add
       (vec-add
        (vec-mul
         (vec-cast
          (load
           (buffer column_sums_b 'uint32)
           (ramp
            (sca-add
             (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
             16)
            1
            16)
           (aligned 16 0))
          'int32
          16)
         (sca-broadcast (int32_t t5829) 16))
        (vec-add
         (load
          (buffer bias 'int32)
          (ramp (sca-mul output.s0.x.x 16) 1 16)
          (aligned 16 0))
         (sca-broadcast
          (sca-add
           (sca-mul
            (sca-mul (int32_t t5829) (int32_t t5830))
            (int32_t mat_a.extent.0))
           (sca-mul (int32_t t5830) (int32_t t6653)))
          16)))
       (vec-cast
        (load
         (buffer multiplied_no_offsets 'uint32)
         (ramp
          (sca-add (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121)) 4)
          1
          16)
         (aligned 4 0))
        'int32
        16))
      'int64
      16)
     (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
    (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
  (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
 (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
template:
  (cast
 ...
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (vs-mpy-add
    ...
    (combine
     (vs-mpy-add
      ...
      (combine
       (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
       (vs-mpy-add
        ...
        (combine
         #<load-data>
         (broadcast
          ...
          (sca-add
           (sca-mul
            (sca-mul (int32_t t5829) (int32_t t5830))
            (int32_t mat_a.extent.0))
           (sca-mul (int32_t t5830) (int32_t t6653)))))
        (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
        #f
        #f
        #f
        'int32))
      (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
      #f
      #f
      #f
      'int32)
     (cast ... #<load-data> 'int32 #f))
    (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
    #f
    #f
    #f
    'int32)
   (list (int32_t output_multiplier))
   #f
   #f
   #f
   'int64)
  (int64_t (bv #x000000000000001f 64))
  #t
  x?$2971
  #t)
 'int64
 #t)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$3286 idx) (bv #x0000000080000000 64)) (bvsle (bv #xffffffff80000001 64) (app abstr-vals$3286 idx)))))
optimized-halide-expr:
  (vec-max
 (vec-min
  #<abstr-halide-expr>
  (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
 (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
optimized-template:
  (cast ... #<abstr-expr> 'int64 #t)
optimized Halide 0:
  (int64_t
 (ite (bvsle (bv #xffffffff80000000 64) (ite (bvsle (app abstr-vals$3286 0) (bv #x000000007fffffff 64)) (app abstr-vals$3286 0) (bv #x000000007fffffff 64))) (ite (bvsle (app abstr-vals$3286 0) (bv #x000000007fffffff 64)) (app abstr-vals$3286 0) (bv #x000000007fffffff 64)) (bv #xffffffff80000000 64)))
optimized x86 0:
  (int64_t (app abstr-vals$3286 0))
Ran synthesizer for 109 ms
(unsat)
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (vec-max
 (vec-min
  (vec-add
   (vec-bwand
    (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
    (vec-div
     (vec-mul
      (vec-cast
       (vec-add
        (vec-add
         (vec-mul
          (vec-cast
           (load
            (buffer column_sums_b 'uint32)
            (ramp
             (sca-add
              (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
              16)
             1
             16)
            (aligned 16 0))
           'int32
           16)
          (sca-broadcast (int32_t t5829) 16))
         (vec-add
          (load
           (buffer bias 'int32)
           (ramp (sca-mul output.s0.x.x 16) 1 16)
           (aligned 16 0))
          (sca-broadcast
           (sca-add
            (sca-mul
             (sca-mul (int32_t t5829) (int32_t t5830))
             (int32_t mat_a.extent.0))
            (sca-mul (int32_t t5830) (int32_t t6653)))
           16)))
        (vec-cast
         (load
          (buffer multiplied_no_offsets 'uint32)
          (ramp
           (sca-add (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121)) 4)
           1
           16)
          (aligned 4 0))
         'int32
         16))
       'int64
       16)
      (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
     (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
   (vec-div
    (vec-mul
     (vec-cast
      (vec-add
       (vec-add
        (vec-mul
         (vec-cast
          (load
           (buffer column_sums_b 'uint32)
           (ramp
            (sca-add
             (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
             16)
            1
            16)
           (aligned 16 0))
          'int32
          16)
         (sca-broadcast (int32_t t5829) 16))
        (vec-add
         (load
          (buffer bias 'int32)
          (ramp (sca-mul output.s0.x.x 16) 1 16)
          (aligned 16 0))
         (sca-broadcast
          (sca-add
           (sca-mul
            (sca-mul (int32_t t5829) (int32_t t5830))
            (int32_t mat_a.extent.0))
           (sca-mul (int32_t t5830) (int32_t t6653)))
          16)))
       (vec-cast
        (load
         (buffer multiplied_no_offsets 'uint32)
         (ramp
          (sca-add (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121)) 4)
          1
          16)
         (aligned 4 0))
        'int32
        16))
      'int64
      16)
     (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
    (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
  (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
 (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
template:
  (maximum
 ...
 (minimum
  ...
  (vs-shift-right
   ...
   (vs-mpy-add
    ...
    (vs-mpy-add
     ...
     (combine
      (vs-mpy-add
       ...
       (combine
        (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
        (vs-mpy-add
         ...
         (combine
          #<load-data>
          (broadcast
           ...
           (sca-add
            (sca-mul
             (sca-mul (int32_t t5829) (int32_t t5830))
             (int32_t mat_a.extent.0))
            (sca-mul (int32_t t5830) (int32_t t6653)))))
         (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
         #f
         #f
         #f
         'int32))
       (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
       #f
       #f
       #f
       'int32)
      (cast ... #<load-data> 'int32 #f))
     (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
     #f
     #f
     #f
     'int32)
    (list (int32_t output_multiplier))
    #f
    #f
    #f
    'int64)
   (int64_t (bv #x000000000000001f 64))
   #t
   x?$2971
   #t)
  (broadcast ... (int64_t (bv #x000000007fffffff 64))))
 (broadcast ... (int64_t (bv #xffffffff80000000 64))))
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$3287 idx) (bv #x000000007fffffff 64)) (bvsle (bv #xffffffff80000001 64) (app abstr-vals$3287 idx))))
 (forall (idx) (&& (bvsle (app abstr-vals$3288 idx) (bv #xffffffff80000000 64)) (bvsle (bv #xffffffff80000000 64) (app abstr-vals$3288 idx)))))
optimized-halide-expr:
  (vec-max #<abstr-halide-expr> #<abstr-halide-expr>)
optimized-template:
  (maximum ... #<abstr-expr> #<abstr-expr>)
optimized Halide 0:
  (int64_t
 (ite (bvsle (app abstr-vals$3288 0) (app abstr-vals$3287 0)) (app abstr-vals$3287 0) (app abstr-vals$3288 0)))
optimized x86 0:
  (int64_t
 (ite (bvsle (app abstr-vals$3288 0) (app abstr-vals$3287 0)) (app abstr-vals$3287 0) (app abstr-vals$3288 0)))
Ran synthesizer for 54 ms
(model)
(vec-max #<abstr-halide-expr> #<abstr-halide-expr>)
(maximum
 ...
 (minimum
  ...
  (vs-shift-right
   ...
   (vs-mpy-add
    ...
    (vs-mpy-add
     ...
     (combine
      (vs-mpy-add
       ...
       (combine
        (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
        (vs-mpy-add
         ...
         (combine
          #<load-data>
          (broadcast
           ...
           (sca-add
            (sca-mul
             (sca-mul (int32_t t5829) (int32_t t5830))
             (int32_t mat_a.extent.0))
            (sca-mul (int32_t t5830) (int32_t t6653)))))
         (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
         #f
         #f
         #f
         'int32))
       (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
       #f
       #f
       #f
       'int32)
      (cast ... #<load-data> 'int32 #f))
     (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
     #f
     #f
     #f
     'int32)
    (list (int32_t output_multiplier))
    #f
    #f
    #f
    'int64)
   (int64_t (bv #x000000000000001f 64))
   #t
   x?$2971
   #t)
  (broadcast ... (int64_t (bv #x000000007fffffff 64))))
 (broadcast ... (int64_t (bv #xffffffff80000000 64))))
Ran bounds analysis for 70 ms
Ran bounds analysis for 49 ms
"Extended success?"
#t
(maximum
 ...
 (minimum
  ...
  (vs-shift-right
   ...
   (vs-mpy-add
    ...
    (vs-mpy-add
     ...
     (combine
      (vs-mpy-add
       ...
       (combine
        (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
        (vs-mpy-add
         ...
         (combine
          #<load-data>
          (broadcast
           ...
           (sca-add
            (sca-mul
             (sca-mul (int32_t t5829) (int32_t t5830))
             (int32_t mat_a.extent.0))
            (sca-mul (int32_t t5830) (int32_t t6653)))))
         (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
         #f
         #f
         #f
         'int32))
       (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
       #f
       #f
       #f
       'int32)
      (cast ... #<load-data> 'int32 #f))
     (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
     #f
     #f
     #f
     'int32)
    (list (int32_t output_multiplier))
    #f
    #f
    #f
    'int64)
   (int64_t (bv #x000000000000001f 64))
   #t
   x?$2971
   #t)
  (broadcast ... (int64_t (bv #x000000007fffffff 64))))
 (broadcast ... (int64_t (bv #xffffffff80000000 64))))
"Building Expr:"
(vec-cast
 (vec-max
  (vec-min
   (vec-add
    (vec-bwand
     (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
     (vec-div
      (vec-mul
       (vec-cast
        (vec-add
         (vec-add
          (vec-mul
           (vec-cast
            (load
             (buffer column_sums_b 'uint32)
             (ramp
              (sca-add
               (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
               16)
              1
              16)
             (aligned 16 0))
            'int32
            16)
           (sca-broadcast (int32_t t5829) 16))
          (vec-add
           (load
            (buffer bias 'int32)
            (ramp (sca-mul output.s0.x.x 16) 1 16)
            (aligned 16 0))
           (sca-broadcast
            (sca-add
             (sca-mul
              (sca-mul (int32_t t5829) (int32_t t5830))
              (int32_t mat_a.extent.0))
             (sca-mul (int32_t t5830) (int32_t t6653)))
            16)))
         (vec-cast
          (load
           (buffer multiplied_no_offsets 'uint32)
           (ramp
            (sca-add
             (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
             4)
            1
            16)
           (aligned 4 0))
          'int32
          16))
        'int64
        16)
       (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
      (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
    (vec-div
     (vec-mul
      (vec-cast
       (vec-add
        (vec-add
         (vec-mul
          (vec-cast
           (load
            (buffer column_sums_b 'uint32)
            (ramp
             (sca-add
              (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
              16)
             1
             16)
            (aligned 16 0))
           'int32
           16)
          (sca-broadcast (int32_t t5829) 16))
         (vec-add
          (load
           (buffer bias 'int32)
           (ramp (sca-mul output.s0.x.x 16) 1 16)
           (aligned 16 0))
          (sca-broadcast
           (sca-add
            (sca-mul
             (sca-mul (int32_t t5829) (int32_t t5830))
             (int32_t mat_a.extent.0))
            (sca-mul (int32_t t5830) (int32_t t6653)))
           16)))
        (vec-cast
         (load
          (buffer multiplied_no_offsets 'uint32)
          (ramp
           (sca-add (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121)) 4)
           1
           16)
          (aligned 4 0))
         'int32
         16))
       'int64
       16)
      (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
     (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
   (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
  (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
 'int32
 16)
"Fold templates"
(list
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (vs-mpy-add
    ...
    (combine
     (vs-mpy-add
      ...
      (combine
       (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
       (vs-mpy-add
        ...
        (combine
         #<load-data>
         (broadcast
          ...
          (sca-add
           (sca-mul
            (sca-mul (int32_t t5829) (int32_t t5830))
            (int32_t mat_a.extent.0))
           (sca-mul (int32_t t5830) (int32_t t6653)))))
        (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
        #f
        #f
        #f
        'int32))
      (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
      #f
      #f
      #f
      'int32)
     (cast ... #<load-data> 'int32 #f))
    (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
    #f
    #f
    #f
    'int32)
   (list (int32_t output_multiplier))
   #f
   #f
   #f
   'int64)
  (int64_t (ite x?$3291 (bv #x000000000000001e 64) (bv #x000000000000001f 64)))
  #t
  x?$2971
  #t)
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (vs-mpy-add
    ...
    (combine
     (vs-mpy-add
      ...
      (combine
       (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
       (vs-mpy-add
        ...
        (combine
         #<load-data>
         (broadcast
          ...
          (sca-add
           (sca-mul
            (sca-mul (int32_t t5829) (int32_t t5830))
            (int32_t mat_a.extent.0))
           (sca-mul (int32_t t5830) (int32_t t6653)))))
        (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
        #f
        #f
        #f
        'int32))
      (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
      #f
      #f
      #f
      'int32)
     (cast ... #<load-data> 'int32 #f))
    (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
    #f
    #f
    #f
    'int32)
   (list (int32_t output_multiplier))
   #f
   #f
   #f
   'int64)
  (int64_t (bv #x000000000000001f 64))
  x?$3292
  x?$3293
  x?$3294))
here(#(struct:vs-shift-right ... #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<load-data> (#(struct:int32_t t5829)) #f #f #f int32) #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-add #(struct:sca-mul #(struct:sca-mul #(struct:int32_t t5829) #(struct:int32_t t5830)) #(struct:int32_t mat_a.extent.0)) #(struct:sca-mul #(struct:int32_t t5830) #(struct:int32_t t6653))))> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32)> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32) #(struct:cast ... #<load-data> int32 #f)> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32) (#(struct:int32_t output_multiplier)) #f #f #f int64) #(struct:int64_t (ite x?$3291 (bv #x000000000000001e 64) (bv #x000000000000001f 64))) #t x?$2971 #t) #(struct:vs-shift-right ... #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<load-data> (#(struct:int32_t t5829)) #f #f #f int32) #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-add #(struct:sca-mul #(struct:sca-mul #(struct:int32_t t5829) #(struct:int32_t t5830)) #(struct:int32_t mat_a.extent.0)) #(struct:sca-mul #(struct:int32_t t5830) #(struct:int32_t t6653))))> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32)> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32) #(struct:cast ... #<load-data> int32 #f)> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32) (#(struct:int32_t output_multiplier)) #f #f #f int64) #(struct:int64_t (bv #x000000000000001f 64)) x?$3292 x?$3293 x?$3294))

"Replace templates"
(list
 (cast
  ...
  (vs-shift-right
   ...
   (vs-mpy-add
    ...
    (vs-mpy-add
     ...
     (combine
      (vs-mpy-add
       ...
       (combine
        (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
        (vs-mpy-add
         ...
         (combine
          #<load-data>
          (broadcast
           ...
           (sca-add
            (sca-mul
             (sca-mul (int32_t t5829) (int32_t t5830))
             (int32_t mat_a.extent.0))
            (sca-mul (int32_t t5830) (int32_t t6653)))))
         (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
         #f
         #f
         #f
         'int32))
       (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
       #f
       #f
       #f
       'int32)
      (cast ... #<load-data> 'int32 #f))
     (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
     #f
     #f
     #f
     'int32)
    (list (int32_t output_multiplier))
    #f
    #f
    #f
    'int64)
   (int64_t (bv #x000000000000001f 64))
   #t
   x?$2971
   #t)
  'int32
  #t)
 (cast ... (broadcast ... (int64_t (bv #x000000007fffffff 64))) 'int32 #t)
 (cast
  ...
  (minimum
   ...
   (vs-shift-right
    ...
    (vs-mpy-add
     ...
     (vs-mpy-add
      ...
      (combine
       (vs-mpy-add
        ...
        (combine
         (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
         (vs-mpy-add
          ...
          (combine
           #<load-data>
           (broadcast
            ...
            (sca-add
             (sca-mul
              (sca-mul (int32_t t5829) (int32_t t5830))
              (int32_t mat_a.extent.0))
             (sca-mul (int32_t t5830) (int32_t t6653)))))
          (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
          #f
          #f
          #f
          'int32))
        (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
        #f
        #f
        #f
        'int32)
       (cast ... #<load-data> 'int32 #f))
      (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
      #f
      #f
      #f
      'int32)
     (list (int32_t output_multiplier))
     #f
     #f
     #f
     'int64)
    (int64_t (bv #x000000000000001f 64))
    #t
    x?$2971
    #t)
   (broadcast ... (int64_t (bv #x000000007fffffff 64))))
  'int32
  #t)
 (cast ... (broadcast ... (int64_t (bv #xffffffff80000000 64))) 'int32 #t))
run-x86-synthesizer
halide-expr:
  (vec-cast
 (vec-max
  (vec-min
   (vec-add
    (vec-bwand
     (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
     (vec-div
      (vec-mul
       (vec-cast
        (vec-add
         (vec-add
          (vec-mul
           (vec-cast
            (load
             (buffer column_sums_b 'uint32)
             (ramp
              (sca-add
               (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
               16)
              1
              16)
             (aligned 16 0))
            'int32
            16)
           (sca-broadcast (int32_t t5829) 16))
          (vec-add
           (load
            (buffer bias 'int32)
            (ramp (sca-mul output.s0.x.x 16) 1 16)
            (aligned 16 0))
           (sca-broadcast
            (sca-add
             (sca-mul
              (sca-mul (int32_t t5829) (int32_t t5830))
              (int32_t mat_a.extent.0))
             (sca-mul (int32_t t5830) (int32_t t6653)))
            16)))
         (vec-cast
          (load
           (buffer multiplied_no_offsets 'uint32)
           (ramp
            (sca-add
             (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
             4)
            1
            16)
           (aligned 4 0))
          'int32
          16))
        'int64
        16)
       (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
      (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
    (vec-div
     (vec-mul
      (vec-cast
       (vec-add
        (vec-add
         (vec-mul
          (vec-cast
           (load
            (buffer column_sums_b 'uint32)
            (ramp
             (sca-add
              (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
              16)
             1
             16)
            (aligned 16 0))
           'int32
           16)
          (sca-broadcast (int32_t t5829) 16))
         (vec-add
          (load
           (buffer bias 'int32)
           (ramp (sca-mul output.s0.x.x 16) 1 16)
           (aligned 16 0))
          (sca-broadcast
           (sca-add
            (sca-mul
             (sca-mul (int32_t t5829) (int32_t t5830))
             (int32_t mat_a.extent.0))
            (sca-mul (int32_t t5830) (int32_t t6653)))
           16)))
        (vec-cast
         (load
          (buffer multiplied_no_offsets 'uint32)
          (ramp
           (sca-add (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121)) 4)
           1
           16)
          (aligned 4 0))
         'int32
         16))
       'int64
       16)
      (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
     (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
   (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
  (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
 'int32
 16)
template:
  (cast ... (broadcast ... (int64_t (bv #x000000007fffffff 64))) 'int32 #t)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$3295 idx) (bv #x000000007fffffff 64)) (bvsle (bv #x000000007fffffff 64) (app abstr-vals$3295 idx)))))
optimized-halide-expr:
  (vec-cast
 (vec-max
  (vec-min
   (vec-add
    (vec-bwand
     (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
     (vec-div
      (vec-mul
       (vec-cast
        (vec-add
         (vec-add
          (vec-mul
           (vec-cast
            (load
             (buffer column_sums_b 'uint32)
             (ramp
              (sca-add
               (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
               16)
              1
              16)
             (aligned 16 0))
            'int32
            16)
           (sca-broadcast (int32_t t5829) 16))
          (vec-add
           (load
            (buffer bias 'int32)
            (ramp (sca-mul output.s0.x.x 16) 1 16)
            (aligned 16 0))
           (sca-broadcast
            (sca-add
             (sca-mul
              (sca-mul (int32_t t5829) (int32_t t5830))
              (int32_t mat_a.extent.0))
             (sca-mul (int32_t t5830) (int32_t t6653)))
            16)))
         (vec-cast
          (load
           (buffer multiplied_no_offsets 'uint32)
           (ramp
            (sca-add
             (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
             4)
            1
            16)
           (aligned 4 0))
          'int32
          16))
        'int64
        16)
       (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
      (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
    (vec-div
     (vec-mul
      (vec-cast
       (vec-add
        (vec-add
         (vec-mul
          (vec-cast
           (load
            (buffer column_sums_b 'uint32)
            (ramp
             (sca-add
              (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
              16)
             1
             16)
            (aligned 16 0))
           'int32
           16)
          (sca-broadcast (int32_t t5829) 16))
         (vec-add
          (load
           (buffer bias 'int32)
           (ramp (sca-mul output.s0.x.x 16) 1 16)
           (aligned 16 0))
          (sca-broadcast
           (sca-add
            (sca-mul
             (sca-mul (int32_t t5829) (int32_t t5830))
             (int32_t mat_a.extent.0))
            (sca-mul (int32_t t5830) (int32_t t6653)))
           16)))
        (vec-cast
         (load
          (buffer multiplied_no_offsets 'uint32)
          (ramp
           (sca-add (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121)) 4)
           1
           16)
          (aligned 4 0))
         'int32
         16))
       'int64
       16)
      (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
     (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
   #<abstr-halide-expr>)
  (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
 'int32
 16)
optimized-template:
  (cast ... #<abstr-expr> 'int32 #t)
optimized Halide 0:
  (int32_t
 (extract 31 0 (ite (bvsle (bv #xffffffff80000000 64) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (app abstr-vals$3295 0)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (app abstr-vals$3295 0))) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (app abstr-vals$3295 0)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (app abstr-vals$3295 0)) (bv #xffffffff80000000 64))))
optimized x86 0:
  (int32_t
 (ite (bvslt (app abstr-vals$3295 0) (bv #xffffffff80000000 64)) (bv #x80000000 32) (ite (bvslt (bv #x000000007fffffff 64) (app abstr-vals$3295 0)) (bv #x7fffffff 32) (extract 31 0 (app abstr-vals$3295 0)))))
run-x86-synthesizer
halide-expr:
  (vec-cast
 (vec-max
  (vec-min
   (vec-add
    (vec-bwand
     (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
     (vec-div
      (vec-mul
       (vec-cast
        (vec-add
         (vec-add
          (vec-mul
           (vec-cast
            (load
             (buffer column_sums_b 'uint32)
             (ramp
              (sca-add
               (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
               16)
              1
              16)
             (aligned 16 0))
            'int32
            16)
           (sca-broadcast (int32_t t5829) 16))
          (vec-add
           (load
            (buffer bias 'int32)
            (ramp (sca-mul output.s0.x.x 16) 1 16)
            (aligned 16 0))
           (sca-broadcast
            (sca-add
             (sca-mul
              (sca-mul (int32_t t5829) (int32_t t5830))
              (int32_t mat_a.extent.0))
             (sca-mul (int32_t t5830) (int32_t t6653)))
            16)))
         (vec-cast
          (load
           (buffer multiplied_no_offsets 'uint32)
           (ramp
            (sca-add
             (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
             4)
            1
            16)
           (aligned 4 0))
          'int32
          16))
        'int64
        16)
       (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
      (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
    (vec-div
     (vec-mul
      (vec-cast
       (vec-add
        (vec-add
         (vec-mul
          (vec-cast
           (load
            (buffer column_sums_b 'uint32)
            (ramp
             (sca-add
              (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
              16)
             1
             16)
            (aligned 16 0))
           'int32
           16)
          (sca-broadcast (int32_t t5829) 16))
         (vec-add
          (load
           (buffer bias 'int32)
           (ramp (sca-mul output.s0.x.x 16) 1 16)
           (aligned 16 0))
          (sca-broadcast
           (sca-add
            (sca-mul
             (sca-mul (int32_t t5829) (int32_t t5830))
             (int32_t mat_a.extent.0))
            (sca-mul (int32_t t5830) (int32_t t6653)))
           16)))
        (vec-cast
         (load
          (buffer multiplied_no_offsets 'uint32)
          (ramp
           (sca-add (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121)) 4)
           1
           16)
          (aligned 4 0))
         'int32
         16))
       'int64
       16)
      (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
     (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
   (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
  (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
 'int32
 16)
template:
  (cast ... (broadcast ... (int64_t (bv #xffffffff80000000 64))) 'int32 #t)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$3296 idx) (bv #xffffffff80000000 64)) (bvsle (bv #xffffffff80000000 64) (app abstr-vals$3296 idx)))))
optimized-halide-expr:
  (vec-cast
 (vec-max
  (vec-min
   (vec-add
    (vec-bwand
     (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
     (vec-div
      (vec-mul
       (vec-cast
        (vec-add
         (vec-add
          (vec-mul
           (vec-cast
            (load
             (buffer column_sums_b 'uint32)
             (ramp
              (sca-add
               (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
               16)
              1
              16)
             (aligned 16 0))
            'int32
            16)
           (sca-broadcast (int32_t t5829) 16))
          (vec-add
           (load
            (buffer bias 'int32)
            (ramp (sca-mul output.s0.x.x 16) 1 16)
            (aligned 16 0))
           (sca-broadcast
            (sca-add
             (sca-mul
              (sca-mul (int32_t t5829) (int32_t t5830))
              (int32_t mat_a.extent.0))
             (sca-mul (int32_t t5830) (int32_t t6653)))
            16)))
         (vec-cast
          (load
           (buffer multiplied_no_offsets 'uint32)
           (ramp
            (sca-add
             (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
             4)
            1
            16)
           (aligned 4 0))
          'int32
          16))
        'int64
        16)
       (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
      (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
    (vec-div
     (vec-mul
      (vec-cast
       (vec-add
        (vec-add
         (vec-mul
          (vec-cast
           (load
            (buffer column_sums_b 'uint32)
            (ramp
             (sca-add
              (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
              16)
             1
             16)
            (aligned 16 0))
           'int32
           16)
          (sca-broadcast (int32_t t5829) 16))
         (vec-add
          (load
           (buffer bias 'int32)
           (ramp (sca-mul output.s0.x.x 16) 1 16)
           (aligned 16 0))
          (sca-broadcast
           (sca-add
            (sca-mul
             (sca-mul (int32_t t5829) (int32_t t5830))
             (int32_t mat_a.extent.0))
            (sca-mul (int32_t t5830) (int32_t t6653)))
           16)))
        (vec-cast
         (load
          (buffer multiplied_no_offsets 'uint32)
          (ramp
           (sca-add (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121)) 4)
           1
           16)
          (aligned 4 0))
         'int32
         16))
       'int64
       16)
      (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
     (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
   (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
  #<abstr-halide-expr>)
 'int32
 16)
optimized-template:
  (cast ... #<abstr-expr> 'int32 #t)
optimized Halide 0:
  (int32_t
 (extract 31 0 (ite (bvsle (app abstr-vals$3296 0) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64))) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (app abstr-vals$3296 0))))
optimized x86 0:
  (int32_t
 (ite (bvslt (app abstr-vals$3296 0) (bv #xffffffff80000000 64)) (bv #x80000000 32) (ite (bvslt (bv #x000000007fffffff 64) (app abstr-vals$3296 0)) (bv #x7fffffff 32) (extract 31 0 (app abstr-vals$3296 0)))))
run-x86-synthesizer
halide-expr:
  (vec-cast
 (vec-max
  (vec-min
   (vec-add
    (vec-bwand
     (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
     (vec-div
      (vec-mul
       (vec-cast
        (vec-add
         (vec-add
          (vec-mul
           (vec-cast
            (load
             (buffer column_sums_b 'uint32)
             (ramp
              (sca-add
               (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
               16)
              1
              16)
             (aligned 16 0))
            'int32
            16)
           (sca-broadcast (int32_t t5829) 16))
          (vec-add
           (load
            (buffer bias 'int32)
            (ramp (sca-mul output.s0.x.x 16) 1 16)
            (aligned 16 0))
           (sca-broadcast
            (sca-add
             (sca-mul
              (sca-mul (int32_t t5829) (int32_t t5830))
              (int32_t mat_a.extent.0))
             (sca-mul (int32_t t5830) (int32_t t6653)))
            16)))
         (vec-cast
          (load
           (buffer multiplied_no_offsets 'uint32)
           (ramp
            (sca-add
             (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
             4)
            1
            16)
           (aligned 4 0))
          'int32
          16))
        'int64
        16)
       (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
      (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
    (vec-div
     (vec-mul
      (vec-cast
       (vec-add
        (vec-add
         (vec-mul
          (vec-cast
           (load
            (buffer column_sums_b 'uint32)
            (ramp
             (sca-add
              (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
              16)
             1
             16)
            (aligned 16 0))
           'int32
           16)
          (sca-broadcast (int32_t t5829) 16))
         (vec-add
          (load
           (buffer bias 'int32)
           (ramp (sca-mul output.s0.x.x 16) 1 16)
           (aligned 16 0))
          (sca-broadcast
           (sca-add
            (sca-mul
             (sca-mul (int32_t t5829) (int32_t t5830))
             (int32_t mat_a.extent.0))
            (sca-mul (int32_t t5830) (int32_t t6653)))
           16)))
        (vec-cast
         (load
          (buffer multiplied_no_offsets 'uint32)
          (ramp
           (sca-add (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121)) 4)
           1
           16)
          (aligned 4 0))
         'int32
         16))
       'int64
       16)
      (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
     (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
   (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
  (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
 'int32
 16)
template:
  (vs-shift-right
 ...
 (vs-mpy-add
  ...
  (vs-mpy-add
   ...
   (combine
    (vs-mpy-add
     ...
     (combine
      (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
      (vs-mpy-add
       ...
       (combine
        #<load-data>
        (broadcast
         ...
         (sca-add
          (sca-mul
           (sca-mul (int32_t t5829) (int32_t t5830))
           (int32_t mat_a.extent.0))
          (sca-mul (int32_t t5830) (int32_t t6653)))))
       (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
       #f
       #f
       #f
       'int32))
     (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
     #f
     #f
     #f
     'int32)
    (cast ... #<load-data> 'int32 #f))
   (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
   #f
   #f
   #f
   'int32)
  (list (int32_t output_multiplier))
  #f
  #f
  #f
  'int64)
 (int64_t (ite x?$3291 (bv #x000000000000001e 64) (bv #x000000000000001f 64)))
 #t
 x?$2971
 #t)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$3297 idx) (bv #x4000000000000000 64)) (bvsle (bv #xc000000080000000 64) (app abstr-vals$3297 idx)))))
optimized-halide-expr:
  (vec-cast
 (vec-max
  (vec-min
   (vec-add
    (vec-bwand
     (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
     (vec-div
      #<abstr-halide-expr>
      (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
    (vec-div
     #<abstr-halide-expr>
     (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
   (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
  (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
 'int32
 16)
optimized-template:
  (vs-shift-right
 ...
 #<abstr-expr>
 (int64_t (ite x?$3291 (bv #x000000000000001e 64) (bv #x000000000000001f 64)))
 #t
 x?$2971
 #t)
optimized Halide 0:
  (int32_t
 (extract 31 0 (ite (bvsle (bv #xffffffff80000000 64) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (app abstr-vals$3297 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$3297 0) (bvneg (bvashr (app abstr-vals$3297 0) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (app abstr-vals$3297 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$3297 0) (bvneg (bvashr (app abstr-vals$3297 0) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (app abstr-vals$3297 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$3297 0) (bvneg (bvashr (app abstr-vals$3297 0) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (app abstr-vals$3297 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$3297 0) (bvneg (bvashr (app abstr-vals$3297 0) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64))) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (app abstr-vals$3297 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$3297 0) (bvneg (bvashr (app abstr-vals$3297 0) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (app abstr-vals$3297 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$3297 0) (bvneg (bvashr (app abstr-vals$3297 0) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (app abstr-vals$3297 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$3297 0) (bvneg (bvashr (app abstr-vals$3297 0) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (app abstr-vals$3297 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$3297 0) (bvneg (bvashr (app abstr-vals$3297 0) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bv #xffffffff80000000 64))))
optimized x86 0:
  (int64_t
 (bvadd (bvashr (app abstr-vals$3297 0) (ite x?$3291 (bv #x000000000000001e 64) (bv #x000000000000001f 64))) (bvand (bv #x0000000000000001 64) (bvashr (app abstr-vals$3297 0) (ite x?$3291 (bv #x000000000000001d 64) (bv #x000000000000001e 64))))))
Ran synthesizer for 21 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-cast
 (vec-max
  (vec-min
   (vec-add
    (vec-bwand
     (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
     (vec-div
      (vec-mul
       (vec-cast
        (vec-add
         (vec-add
          (vec-mul
           (vec-cast
            (load
             (buffer column_sums_b 'uint32)
             (ramp
              (sca-add
               (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
               16)
              1
              16)
             (aligned 16 0))
            'int32
            16)
           (sca-broadcast (int32_t t5829) 16))
          (vec-add
           (load
            (buffer bias 'int32)
            (ramp (sca-mul output.s0.x.x 16) 1 16)
            (aligned 16 0))
           (sca-broadcast
            (sca-add
             (sca-mul
              (sca-mul (int32_t t5829) (int32_t t5830))
              (int32_t mat_a.extent.0))
             (sca-mul (int32_t t5830) (int32_t t6653)))
            16)))
         (vec-cast
          (load
           (buffer multiplied_no_offsets 'uint32)
           (ramp
            (sca-add
             (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
             4)
            1
            16)
           (aligned 4 0))
          'int32
          16))
        'int64
        16)
       (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
      (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
    (vec-div
     (vec-mul
      (vec-cast
       (vec-add
        (vec-add
         (vec-mul
          (vec-cast
           (load
            (buffer column_sums_b 'uint32)
            (ramp
             (sca-add
              (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
              16)
             1
             16)
            (aligned 16 0))
           'int32
           16)
          (sca-broadcast (int32_t t5829) 16))
         (vec-add
          (load
           (buffer bias 'int32)
           (ramp (sca-mul output.s0.x.x 16) 1 16)
           (aligned 16 0))
          (sca-broadcast
           (sca-add
            (sca-mul
             (sca-mul (int32_t t5829) (int32_t t5830))
             (int32_t mat_a.extent.0))
            (sca-mul (int32_t t5830) (int32_t t6653)))
           16)))
        (vec-cast
         (load
          (buffer multiplied_no_offsets 'uint32)
          (ramp
           (sca-add (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121)) 4)
           1
           16)
          (aligned 4 0))
         'int32
         16))
       'int64
       16)
      (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
     (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
   (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
  (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
 'int32
 16)
template:
  (vs-shift-right
 ...
 (vs-mpy-add
  ...
  (vs-mpy-add
   ...
   (combine
    (vs-mpy-add
     ...
     (combine
      (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
      (vs-mpy-add
       ...
       (combine
        #<load-data>
        (broadcast
         ...
         (sca-add
          (sca-mul
           (sca-mul (int32_t t5829) (int32_t t5830))
           (int32_t mat_a.extent.0))
          (sca-mul (int32_t t5830) (int32_t t6653)))))
       (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
       #f
       #f
       #f
       'int32))
     (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
     #f
     #f
     #f
     'int32)
    (cast ... #<load-data> 'int32 #f))
   (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
   #f
   #f
   #f
   'int32)
  (list (int32_t output_multiplier))
  #f
  #f
  #f
  'int64)
 (int64_t (bv #x000000000000001f 64))
 x?$3292
 x?$3293
 x?$3294)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$3298 idx) (bv #x4000000000000000 64)) (bvsle (bv #xc000000080000000 64) (app abstr-vals$3298 idx)))))
optimized-halide-expr:
  (vec-cast
 (vec-max
  (vec-min
   (vec-add
    (vec-bwand
     (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
     (vec-div
      #<abstr-halide-expr>
      (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
    (vec-div
     #<abstr-halide-expr>
     (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
   (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
  (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
 'int32
 16)
optimized-template:
  (vs-shift-right
 ...
 #<abstr-expr>
 (int64_t (bv #x000000000000001f 64))
 x?$3292
 x?$3293
 x?$3294)
optimized Halide 0:
  (int32_t
 (extract 31 0 (ite (bvsle (bv #xffffffff80000000 64) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (app abstr-vals$3298 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$3298 0) (bvneg (bvashr (app abstr-vals$3298 0) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (app abstr-vals$3298 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$3298 0) (bvneg (bvashr (app abstr-vals$3298 0) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (app abstr-vals$3298 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$3298 0) (bvneg (bvashr (app abstr-vals$3298 0) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (app abstr-vals$3298 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$3298 0) (bvneg (bvashr (app abstr-vals$3298 0) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64))) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (app abstr-vals$3298 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$3298 0) (bvneg (bvashr (app abstr-vals$3298 0) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (app abstr-vals$3298 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$3298 0) (bvneg (bvashr (app abstr-vals$3298 0) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (app abstr-vals$3298 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$3298 0) (bvneg (bvashr (app abstr-vals$3298 0) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (app abstr-vals$3298 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$3298 0) (bvneg (bvashr (app abstr-vals$3298 0) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bv #xffffffff80000000 64))))
optimized x86 0:
  (int64_t
 (ite x?$3292 (bvadd (ite x?$3294 (bvashr (app abstr-vals$3298 0) (bv #x000000000000001f 64)) (bvlshr (app abstr-vals$3298 0) (bv #x000000000000001f 64))) (bvand (bv #x0000000000000001 64) (ite x?$3294 (bvashr (app abstr-vals$3298 0) (bv #x000000000000001e 64)) (bvlshr (app abstr-vals$3298 0) (bv #x000000000000001e 64))))) (ite x?$3294 (bvashr (app abstr-vals$3298 0) (bv #x000000000000001f 64)) (bvlshr (app abstr-vals$3298 0) (bv #x000000000000001f 64)))))
Ran synthesizer for 21 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-cast
 (vec-max
  (vec-min
   (vec-add
    (vec-bwand
     (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
     (vec-div
      (vec-mul
       (vec-cast
        (vec-add
         (vec-add
          (vec-mul
           (vec-cast
            (load
             (buffer column_sums_b 'uint32)
             (ramp
              (sca-add
               (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
               16)
              1
              16)
             (aligned 16 0))
            'int32
            16)
           (sca-broadcast (int32_t t5829) 16))
          (vec-add
           (load
            (buffer bias 'int32)
            (ramp (sca-mul output.s0.x.x 16) 1 16)
            (aligned 16 0))
           (sca-broadcast
            (sca-add
             (sca-mul
              (sca-mul (int32_t t5829) (int32_t t5830))
              (int32_t mat_a.extent.0))
             (sca-mul (int32_t t5830) (int32_t t6653)))
            16)))
         (vec-cast
          (load
           (buffer multiplied_no_offsets 'uint32)
           (ramp
            (sca-add
             (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
             4)
            1
            16)
           (aligned 4 0))
          'int32
          16))
        'int64
        16)
       (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
      (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
    (vec-div
     (vec-mul
      (vec-cast
       (vec-add
        (vec-add
         (vec-mul
          (vec-cast
           (load
            (buffer column_sums_b 'uint32)
            (ramp
             (sca-add
              (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
              16)
             1
             16)
            (aligned 16 0))
           'int32
           16)
          (sca-broadcast (int32_t t5829) 16))
         (vec-add
          (load
           (buffer bias 'int32)
           (ramp (sca-mul output.s0.x.x 16) 1 16)
           (aligned 16 0))
          (sca-broadcast
           (sca-add
            (sca-mul
             (sca-mul (int32_t t5829) (int32_t t5830))
             (int32_t mat_a.extent.0))
            (sca-mul (int32_t t5830) (int32_t t6653)))
           16)))
        (vec-cast
         (load
          (buffer multiplied_no_offsets 'uint32)
          (ramp
           (sca-add (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121)) 4)
           1
           16)
          (aligned 4 0))
         'int32
         16))
       'int64
       16)
      (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
     (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
   (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
  (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
 'int32
 16)
template:
  (cast
 ...
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (vs-mpy-add
    ...
    (combine
     (vs-mpy-add
      ...
      (combine
       (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
       (vs-mpy-add
        ...
        (combine
         #<load-data>
         (broadcast
          ...
          (sca-add
           (sca-mul
            (sca-mul (int32_t t5829) (int32_t t5830))
            (int32_t mat_a.extent.0))
           (sca-mul (int32_t t5830) (int32_t t6653)))))
        (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
        #f
        #f
        #f
        'int32))
      (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
      #f
      #f
      #f
      'int32)
     (cast ... #<load-data> 'int32 #f))
    (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
    #f
    #f
    #f
    'int32)
   (list (int32_t output_multiplier))
   #f
   #f
   #f
   'int64)
  (int64_t (bv #x000000000000001f 64))
  #t
  x?$2971
  #t)
 'int32
 #t)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$3299 idx) (bv #x0000000080000000 64)) (bvsle (bv #xffffffff80000001 64) (app abstr-vals$3299 idx)))))
optimized-halide-expr:
  (vec-cast
 (vec-max
  (vec-min
   #<abstr-halide-expr>
   (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
  (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
 'int32
 16)
optimized-template:
  (cast ... #<abstr-expr> 'int32 #t)
optimized Halide 0:
  (int32_t
 (extract 31 0 (ite (bvsle (bv #xffffffff80000000 64) (ite (bvsle (app abstr-vals$3299 0) (bv #x000000007fffffff 64)) (app abstr-vals$3299 0) (bv #x000000007fffffff 64))) (ite (bvsle (app abstr-vals$3299 0) (bv #x000000007fffffff 64)) (app abstr-vals$3299 0) (bv #x000000007fffffff 64)) (bv #xffffffff80000000 64))))
optimized x86 0:
  (int32_t
 (ite (bvslt (app abstr-vals$3299 0) (bv #xffffffff80000000 64)) (bv #x80000000 32) (ite (bvslt (bv #x000000007fffffff 64) (app abstr-vals$3299 0)) (bv #x7fffffff 32) (extract 31 0 (app abstr-vals$3299 0)))))
Ran synthesizer for 100 ms
(model)
(vec-cast
 (vec-max
  (vec-min
   #<abstr-halide-expr>
   (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
  (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
 'int32
 16)
(cast
 ...
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (vs-mpy-add
    ...
    (combine
     (vs-mpy-add
      ...
      (combine
       (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
       (vs-mpy-add
        ...
        (combine
         #<load-data>
         (broadcast
          ...
          (sca-add
           (sca-mul
            (sca-mul (int32_t t5829) (int32_t t5830))
            (int32_t mat_a.extent.0))
           (sca-mul (int32_t t5830) (int32_t t6653)))))
        (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
        #f
        #f
        #f
        'int32))
      (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
      #f
      #f
      #f
      'int32)
     (cast ... #<load-data> 'int32 #f))
    (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
    #f
    #f
    #f
    'int32)
   (list (int32_t output_multiplier))
   #f
   #f
   #f
   'int64)
  (int64_t (bv #x000000000000001f 64))
  #t
  x?$2971
  #t)
 'int32
 #t)
Ran bounds analysis for 43 ms
Ran bounds analysis for 23 ms
"Success?"
#t
(cast ... (vs-shift-right ... (vs-mpy-add ... (vs-mpy-add ... (combine (vs-mpy-add ... (combine (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32) (vs-mpy-add ... (combine #<load-data> (broadcast ... (sca-add (sca-mul (sca-mul (int32_t t5829) (int32_t t5830)) (int32_t mat_a.extent.0)) (sca-mul (int32_t t5830) (int32_t t6653))))) (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8))) #f #f #f 'int32)) (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8))) #f #f #f 'int32) (cast ... #<load-data> 'int32 #f)) (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8))) #f #f #f 'int32) (list (int32_t output_multiplier)) #f #f #f 'int64) (int64_t (bv #x000000000000001f 64)) #t x?$2971 #t) 'int32 #t)
"Building Expr:"
(sca-broadcast (int32_t output_shift) 16)
"Fold templates"
'()
here()

"Replace templates"
'()
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (sca-broadcast (int32_t output_shift) 16)
template:
  (broadcast ... (int32_t output_shift))
axioms:
  '()
optimized-halide-expr:
  (sca-broadcast (int32_t output_shift) 16)
optimized-template:
  (broadcast ... (int32_t output_shift))
optimized Halide 0:
  (int32_t output_shift)
optimized x86 0:
  (int32_t output_shift)
Ran synthesizer for 20 ms
(model)
(sca-broadcast (int32_t output_shift) 16)
(broadcast ... (int32_t output_shift))
Ran bounds analysis for 38 ms
Ran bounds analysis for 29 ms
"Extended success?"
#t
(broadcast ... (int32_t output_shift))
"Building Expr:"
(vec-shr
 (vec-cast
  (vec-max
   (vec-min
    (vec-add
     (vec-bwand
      (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
      (vec-div
       (vec-mul
        (vec-cast
         (vec-add
          (vec-add
           (vec-mul
            (vec-cast
             (load
              (buffer column_sums_b 'uint32)
              (ramp
               (sca-add
                (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                16)
               1
               16)
              (aligned 16 0))
             'int32
             16)
            (sca-broadcast (int32_t t5829) 16))
           (vec-add
            (load
             (buffer bias 'int32)
             (ramp (sca-mul output.s0.x.x 16) 1 16)
             (aligned 16 0))
            (sca-broadcast
             (sca-add
              (sca-mul
               (sca-mul (int32_t t5829) (int32_t t5830))
               (int32_t mat_a.extent.0))
              (sca-mul (int32_t t5830) (int32_t t6653)))
             16)))
          (vec-cast
           (load
            (buffer multiplied_no_offsets 'uint32)
            (ramp
             (sca-add
              (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
              4)
             1
             16)
            (aligned 4 0))
           'int32
           16))
         'int64
         16)
        (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
       (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
     (vec-div
      (vec-mul
       (vec-cast
        (vec-add
         (vec-add
          (vec-mul
           (vec-cast
            (load
             (buffer column_sums_b 'uint32)
             (ramp
              (sca-add
               (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
               16)
              1
              16)
             (aligned 16 0))
            'int32
            16)
           (sca-broadcast (int32_t t5829) 16))
          (vec-add
           (load
            (buffer bias 'int32)
            (ramp (sca-mul output.s0.x.x 16) 1 16)
            (aligned 16 0))
           (sca-broadcast
            (sca-add
             (sca-mul
              (sca-mul (int32_t t5829) (int32_t t5830))
              (int32_t mat_a.extent.0))
             (sca-mul (int32_t t5830) (int32_t t6653)))
            16)))
         (vec-cast
          (load
           (buffer multiplied_no_offsets 'uint32)
           (ramp
            (sca-add
             (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
             4)
            1
            16)
           (aligned 4 0))
          'int32
          16))
        'int64
        16)
       (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
      (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
    (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
   (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
  'int32
  16)
 (sca-broadcast (int32_t output_shift) 16))
"Fold templates"
(list
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (vs-mpy-add
    ...
    (combine
     (vs-mpy-add
      ...
      (combine
       (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
       (vs-mpy-add
        ...
        (combine
         #<load-data>
         (broadcast
          ...
          (sca-add
           (sca-mul
            (sca-mul (int32_t t5829) (int32_t t5830))
            (int32_t mat_a.extent.0))
           (sca-mul (int32_t t5830) (int32_t t6653)))))
        (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
        #f
        #f
        #f
        'int32))
      (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
      #f
      #f
      #f
      'int32)
     (cast ... #<load-data> 'int32 #f))
    (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
    #f
    #f
    #f
    'int32)
   (list (int32_t output_multiplier))
   #f
   #f
   #f
   'int64)
  (union [xi?$3302 #(struct:int32_t output_shift)] [(! xi?$3302) #(struct:int64_t
                                                                   (ite xi?$3303 (bv #x000000000000001e 64) (bv #x000000000000001f 64)))])
  #t
  x?$2971
  #t)
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (vs-mpy-add
    ...
    (combine
     (vs-mpy-add
      ...
      (combine
       (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
       (vs-mpy-add
        ...
        (combine
         #<load-data>
         (broadcast
          ...
          (sca-add
           (sca-mul
            (sca-mul (int32_t t5829) (int32_t t5830))
            (int32_t mat_a.extent.0))
           (sca-mul (int32_t t5830) (int32_t t6653)))))
        (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
        #f
        #f
        #f
        'int32))
      (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
      #f
      #f
      #f
      'int32)
     (cast ... #<load-data> 'int32 #f))
    (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
    #f
    #f
    #f
    'int32)
   (list (int32_t output_multiplier))
   #f
   #f
   #f
   'int64)
  (int64_t (bv #x000000000000001f 64))
  x?$3304
  x?$3305
  x?$3306)
 (cast
  ...
  (vs-shift-right
   ...
   (vs-mpy-add
    ...
    (vs-mpy-add
     ...
     (combine
      (vs-mpy-add
       ...
       (combine
        (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
        (vs-mpy-add
         ...
         (combine
          #<load-data>
          (broadcast
           ...
           (sca-add
            (sca-mul
             (sca-mul (int32_t t5829) (int32_t t5830))
             (int32_t mat_a.extent.0))
            (sca-mul (int32_t t5830) (int32_t t6653)))))
         (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
         #f
         #f
         #f
         'int32))
       (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
       #f
       #f
       #f
       'int32)
      (cast ... #<load-data> 'int32 #f))
     (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
     #f
     #f
     #f
     'int32)
    (list (int32_t output_multiplier))
    #f
    #f
    #f
    'int64)
   (int64_t (bv #x000000000000001f 64))
   #t
   x?$2971
   #t)
  'int32
  x?$3301))
here(#(struct:vs-shift-right ... #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<load-data> (#(struct:int32_t t5829)) #f #f #f int32) #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-add #(struct:sca-mul #(struct:sca-mul #(struct:int32_t t5829) #(struct:int32_t t5830)) #(struct:int32_t mat_a.extent.0)) #(struct:sca-mul #(struct:int32_t t5830) #(struct:int32_t t6653))))> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32)> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32) #(struct:cast ... #<load-data> int32 #f)> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32) (#(struct:int32_t output_multiplier)) #f #f #f int64) (union #:size 2 #:hash 433742995405) #t x?$2971 #t) #(struct:vs-shift-right ... #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<load-data> (#(struct:int32_t t5829)) #f #f #f int32) #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-add #(struct:sca-mul #(struct:sca-mul #(struct:int32_t t5829) #(struct:int32_t t5830)) #(struct:int32_t mat_a.extent.0)) #(struct:sca-mul #(struct:int32_t t5830) #(struct:int32_t t6653))))> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32)> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32) #(struct:cast ... #<load-data> int32 #f)> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32) (#(struct:int32_t output_multiplier)) #f #f #f int64) #(struct:int64_t (bv #x000000000000001f 64)) x?$3304 x?$3305 x?$3306) #(struct:cast ... #(struct:vs-shift-right ... #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<load-data> (#(struct:int32_t t5829)) #f #f #f int32) #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-add #(struct:sca-mul #(struct:sca-mul #(struct:int32_t t5829) #(struct:int32_t t5830)) #(struct:int32_t mat_a.extent.0)) #(struct:sca-mul #(struct:int32_t t5830) #(struct:int32_t t6653))))> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32)> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32) #(struct:cast ... #<load-data> int32 #f)> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32) (#(struct:int32_t output_multiplier)) #f #f #f int64) #(struct:int64_t (bv #x000000000000001f 64)) #t x?$2971 #t) int32 x?$3301))

"Replace templates"
(list
 (vs-shift-right
  ...
  (vs-shift-right
   ...
   (vs-mpy-add
    ...
    (vs-mpy-add
     ...
     (combine
      (vs-mpy-add
       ...
       (combine
        (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
        (vs-mpy-add
         ...
         (combine
          #<load-data>
          (broadcast
           ...
           (sca-add
            (sca-mul
             (sca-mul (int32_t t5829) (int32_t t5830))
             (int32_t mat_a.extent.0))
            (sca-mul (int32_t t5830) (int32_t t6653)))))
         (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
         #f
         #f
         #f
         'int32))
       (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
       #f
       #f
       #f
       'int32)
      (cast ... #<load-data> 'int32 #f))
     (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
     #f
     #f
     #f
     'int32)
    (list (int32_t output_multiplier))
    #f
    #f
    #f
    'int64)
   (int64_t (bv #x000000000000001f 64))
   #t
   x?$2971
   #t)
  (union [xi?$3312 #(struct:int32_t output_shift)] [(! xi?$3312) #(struct:int64_t
                                                                   (ite xi?$3313 (bv #x000000000000001e 64) (bv #x000000000000001f 64)))])
  #f
  #f
  #t))
run-x86-synthesizer
halide-expr:
  (vec-shr
 (vec-cast
  (vec-max
   (vec-min
    (vec-add
     (vec-bwand
      (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
      (vec-div
       (vec-mul
        (vec-cast
         (vec-add
          (vec-add
           (vec-mul
            (vec-cast
             (load
              (buffer column_sums_b 'uint32)
              (ramp
               (sca-add
                (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                16)
               1
               16)
              (aligned 16 0))
             'int32
             16)
            (sca-broadcast (int32_t t5829) 16))
           (vec-add
            (load
             (buffer bias 'int32)
             (ramp (sca-mul output.s0.x.x 16) 1 16)
             (aligned 16 0))
            (sca-broadcast
             (sca-add
              (sca-mul
               (sca-mul (int32_t t5829) (int32_t t5830))
               (int32_t mat_a.extent.0))
              (sca-mul (int32_t t5830) (int32_t t6653)))
             16)))
          (vec-cast
           (load
            (buffer multiplied_no_offsets 'uint32)
            (ramp
             (sca-add
              (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
              4)
             1
             16)
            (aligned 4 0))
           'int32
           16))
         'int64
         16)
        (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
       (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
     (vec-div
      (vec-mul
       (vec-cast
        (vec-add
         (vec-add
          (vec-mul
           (vec-cast
            (load
             (buffer column_sums_b 'uint32)
             (ramp
              (sca-add
               (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
               16)
              1
              16)
             (aligned 16 0))
            'int32
            16)
           (sca-broadcast (int32_t t5829) 16))
          (vec-add
           (load
            (buffer bias 'int32)
            (ramp (sca-mul output.s0.x.x 16) 1 16)
            (aligned 16 0))
           (sca-broadcast
            (sca-add
             (sca-mul
              (sca-mul (int32_t t5829) (int32_t t5830))
              (int32_t mat_a.extent.0))
             (sca-mul (int32_t t5830) (int32_t t6653)))
            16)))
         (vec-cast
          (load
           (buffer multiplied_no_offsets 'uint32)
           (ramp
            (sca-add
             (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
             4)
            1
            16)
           (aligned 4 0))
          'int32
          16))
        'int64
        16)
       (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
      (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
    (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
   (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
  'int32
  16)
 (sca-broadcast (int32_t output_shift) 16))
template:
  (vs-shift-right
 ...
 (vs-mpy-add
  ...
  (vs-mpy-add
   ...
   (combine
    (vs-mpy-add
     ...
     (combine
      (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
      (vs-mpy-add
       ...
       (combine
        #<load-data>
        (broadcast
         ...
         (sca-add
          (sca-mul
           (sca-mul (int32_t t5829) (int32_t t5830))
           (int32_t mat_a.extent.0))
          (sca-mul (int32_t t5830) (int32_t t6653)))))
       (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
       #f
       #f
       #f
       'int32))
     (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
     #f
     #f
     #f
     'int32)
    (cast ... #<load-data> 'int32 #f))
   (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
   #f
   #f
   #f
   'int32)
  (list (int32_t output_multiplier))
  #f
  #f
  #f
  'int64)
 (union [xi?$3302 #(struct:int32_t output_shift)] [(! xi?$3302) #(struct:int64_t
                                                                  (ite xi?$3303 (bv #x000000000000001e 64) (bv #x000000000000001f 64)))])
 #t
 x?$2971
 #t)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$3314 idx) (bv #x4000000000000000 64)) (bvsle (bv #xc000000080000000 64) (app abstr-vals$3314 idx)))))
optimized-halide-expr:
  (vec-shr
 (vec-cast
  (vec-max
   (vec-min
    (vec-add
     (vec-bwand
      (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
      (vec-div
       #<abstr-halide-expr>
       (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
     (vec-div
      #<abstr-halide-expr>
      (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
    (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
   (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
  'int32
  16)
 (sca-broadcast (int32_t output_shift) 16))
optimized-template:
  (vs-shift-right
 ...
 #<abstr-expr>
 (union [xi?$3302 #(struct:int32_t output_shift)] [(! xi?$3302) #(struct:int64_t
                                                                  (ite xi?$3303 (bv #x000000000000001e 64) (bv #x000000000000001f 64)))])
 #t
 x?$2971
 #t)
optimized Halide 0:
  (int32_t
 (bvashr (extract 31 0 (ite (bvsle (bv #xffffffff80000000 64) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (app abstr-vals$3314 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$3314 0) (bvneg (bvashr (app abstr-vals$3314 0) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (app abstr-vals$3314 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$3314 0) (bvneg (bvashr (app abstr-vals$3314 0) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (app abstr-vals$3314 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$3314 0) (bvneg (bvashr (app abstr-vals$3314 0) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (app abstr-vals$3314 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$3314 0) (bvneg (bvashr (app abstr-vals$3314 0) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64))) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (app abstr-vals$3314 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$3314 0) (bvneg (bvashr (app abstr-vals$3314 0) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (app abstr-vals$3314 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$3314 0) (bvneg (bvashr (app abstr-vals$3314 0) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (app abstr-vals$3314 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$3314 0) (bvneg (bvashr (app abstr-vals$3314 0) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (app abstr-vals$3314 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$3314 0) (bvneg (bvashr (app abstr-vals$3314 0) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bv #xffffffff80000000 64))) output_shift))
optimized x86 0:
  (int64_t
 (bvadd (bvashr (app abstr-vals$3314 0) (ite xi?$3302 (sign-extend output_shift (bitvector 64)) (ite xi?$3303 (bv #x000000000000001e 64) (bv #x000000000000001f 64)))) (bvand (ite (bvslt (bv #x0000000000000000 64) (ite xi?$3302 (sign-extend output_shift (bitvector 64)) (ite xi?$3303 (bv #x000000000000001e 64) (bv #x000000000000001f 64)))) (bv #x0000000000000001 64) (bv #x0000000000000000 64)) (bvashr (app abstr-vals$3314 0) (bvadd (bv #xffffffffffffffff 64) (ite xi?$3302 (sign-extend output_shift (bitvector 64)) (ite xi?$3303 (bv #x000000000000001e 64) (bv #x000000000000001f 64))))))))
Ran synthesizer for 21 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-shr
 (vec-cast
  (vec-max
   (vec-min
    (vec-add
     (vec-bwand
      (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
      (vec-div
       (vec-mul
        (vec-cast
         (vec-add
          (vec-add
           (vec-mul
            (vec-cast
             (load
              (buffer column_sums_b 'uint32)
              (ramp
               (sca-add
                (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                16)
               1
               16)
              (aligned 16 0))
             'int32
             16)
            (sca-broadcast (int32_t t5829) 16))
           (vec-add
            (load
             (buffer bias 'int32)
             (ramp (sca-mul output.s0.x.x 16) 1 16)
             (aligned 16 0))
            (sca-broadcast
             (sca-add
              (sca-mul
               (sca-mul (int32_t t5829) (int32_t t5830))
               (int32_t mat_a.extent.0))
              (sca-mul (int32_t t5830) (int32_t t6653)))
             16)))
          (vec-cast
           (load
            (buffer multiplied_no_offsets 'uint32)
            (ramp
             (sca-add
              (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
              4)
             1
             16)
            (aligned 4 0))
           'int32
           16))
         'int64
         16)
        (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
       (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
     (vec-div
      (vec-mul
       (vec-cast
        (vec-add
         (vec-add
          (vec-mul
           (vec-cast
            (load
             (buffer column_sums_b 'uint32)
             (ramp
              (sca-add
               (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
               16)
              1
              16)
             (aligned 16 0))
            'int32
            16)
           (sca-broadcast (int32_t t5829) 16))
          (vec-add
           (load
            (buffer bias 'int32)
            (ramp (sca-mul output.s0.x.x 16) 1 16)
            (aligned 16 0))
           (sca-broadcast
            (sca-add
             (sca-mul
              (sca-mul (int32_t t5829) (int32_t t5830))
              (int32_t mat_a.extent.0))
             (sca-mul (int32_t t5830) (int32_t t6653)))
            16)))
         (vec-cast
          (load
           (buffer multiplied_no_offsets 'uint32)
           (ramp
            (sca-add
             (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
             4)
            1
            16)
           (aligned 4 0))
          'int32
          16))
        'int64
        16)
       (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
      (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
    (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
   (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
  'int32
  16)
 (sca-broadcast (int32_t output_shift) 16))
template:
  (vs-shift-right
 ...
 (vs-mpy-add
  ...
  (vs-mpy-add
   ...
   (combine
    (vs-mpy-add
     ...
     (combine
      (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
      (vs-mpy-add
       ...
       (combine
        #<load-data>
        (broadcast
         ...
         (sca-add
          (sca-mul
           (sca-mul (int32_t t5829) (int32_t t5830))
           (int32_t mat_a.extent.0))
          (sca-mul (int32_t t5830) (int32_t t6653)))))
       (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
       #f
       #f
       #f
       'int32))
     (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
     #f
     #f
     #f
     'int32)
    (cast ... #<load-data> 'int32 #f))
   (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
   #f
   #f
   #f
   'int32)
  (list (int32_t output_multiplier))
  #f
  #f
  #f
  'int64)
 (int64_t (bv #x000000000000001f 64))
 x?$3304
 x?$3305
 x?$3306)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$3315 idx) (bv #x4000000000000000 64)) (bvsle (bv #xc000000080000000 64) (app abstr-vals$3315 idx)))))
optimized-halide-expr:
  (vec-shr
 (vec-cast
  (vec-max
   (vec-min
    (vec-add
     (vec-bwand
      (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
      (vec-div
       #<abstr-halide-expr>
       (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
     (vec-div
      #<abstr-halide-expr>
      (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
    (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
   (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
  'int32
  16)
 (sca-broadcast (int32_t output_shift) 16))
optimized-template:
  (vs-shift-right
 ...
 #<abstr-expr>
 (int64_t (bv #x000000000000001f 64))
 x?$3304
 x?$3305
 x?$3306)
optimized Halide 0:
  (int32_t
 (bvashr (extract 31 0 (ite (bvsle (bv #xffffffff80000000 64) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (app abstr-vals$3315 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$3315 0) (bvneg (bvashr (app abstr-vals$3315 0) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (app abstr-vals$3315 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$3315 0) (bvneg (bvashr (app abstr-vals$3315 0) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (app abstr-vals$3315 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$3315 0) (bvneg (bvashr (app abstr-vals$3315 0) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (app abstr-vals$3315 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$3315 0) (bvneg (bvashr (app abstr-vals$3315 0) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64))) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (app abstr-vals$3315 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$3315 0) (bvneg (bvashr (app abstr-vals$3315 0) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (app abstr-vals$3315 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$3315 0) (bvneg (bvashr (app abstr-vals$3315 0) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (app abstr-vals$3315 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$3315 0) (bvneg (bvashr (app abstr-vals$3315 0) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (app abstr-vals$3315 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$3315 0) (bvneg (bvashr (app abstr-vals$3315 0) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bv #xffffffff80000000 64))) output_shift))
optimized x86 0:
  (int64_t
 (ite x?$3304 (bvadd (ite x?$3306 (bvashr (app abstr-vals$3315 0) (bv #x000000000000001f 64)) (bvlshr (app abstr-vals$3315 0) (bv #x000000000000001f 64))) (bvand (bv #x0000000000000001 64) (ite x?$3306 (bvashr (app abstr-vals$3315 0) (bv #x000000000000001e 64)) (bvlshr (app abstr-vals$3315 0) (bv #x000000000000001e 64))))) (ite x?$3306 (bvashr (app abstr-vals$3315 0) (bv #x000000000000001f 64)) (bvlshr (app abstr-vals$3315 0) (bv #x000000000000001f 64)))))
run-x86-synthesizer
halide-expr:
  (vec-shr
 (vec-cast
  (vec-max
   (vec-min
    (vec-add
     (vec-bwand
      (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
      (vec-div
       (vec-mul
        (vec-cast
         (vec-add
          (vec-add
           (vec-mul
            (vec-cast
             (load
              (buffer column_sums_b 'uint32)
              (ramp
               (sca-add
                (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                16)
               1
               16)
              (aligned 16 0))
             'int32
             16)
            (sca-broadcast (int32_t t5829) 16))
           (vec-add
            (load
             (buffer bias 'int32)
             (ramp (sca-mul output.s0.x.x 16) 1 16)
             (aligned 16 0))
            (sca-broadcast
             (sca-add
              (sca-mul
               (sca-mul (int32_t t5829) (int32_t t5830))
               (int32_t mat_a.extent.0))
              (sca-mul (int32_t t5830) (int32_t t6653)))
             16)))
          (vec-cast
           (load
            (buffer multiplied_no_offsets 'uint32)
            (ramp
             (sca-add
              (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
              4)
             1
             16)
            (aligned 4 0))
           'int32
           16))
         'int64
         16)
        (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
       (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
     (vec-div
      (vec-mul
       (vec-cast
        (vec-add
         (vec-add
          (vec-mul
           (vec-cast
            (load
             (buffer column_sums_b 'uint32)
             (ramp
              (sca-add
               (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
               16)
              1
              16)
             (aligned 16 0))
            'int32
            16)
           (sca-broadcast (int32_t t5829) 16))
          (vec-add
           (load
            (buffer bias 'int32)
            (ramp (sca-mul output.s0.x.x 16) 1 16)
            (aligned 16 0))
           (sca-broadcast
            (sca-add
             (sca-mul
              (sca-mul (int32_t t5829) (int32_t t5830))
              (int32_t mat_a.extent.0))
             (sca-mul (int32_t t5830) (int32_t t6653)))
            16)))
         (vec-cast
          (load
           (buffer multiplied_no_offsets 'uint32)
           (ramp
            (sca-add
             (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
             4)
            1
            16)
           (aligned 4 0))
          'int32
          16))
        'int64
        16)
       (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
      (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
    (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
   (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
  'int32
  16)
 (sca-broadcast (int32_t output_shift) 16))
template:
  (cast
 ...
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (vs-mpy-add
    ...
    (combine
     (vs-mpy-add
      ...
      (combine
       (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
       (vs-mpy-add
        ...
        (combine
         #<load-data>
         (broadcast
          ...
          (sca-add
           (sca-mul
            (sca-mul (int32_t t5829) (int32_t t5830))
            (int32_t mat_a.extent.0))
           (sca-mul (int32_t t5830) (int32_t t6653)))))
        (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
        #f
        #f
        #f
        'int32))
      (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
      #f
      #f
      #f
      'int32)
     (cast ... #<load-data> 'int32 #f))
    (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
    #f
    #f
    #f
    'int32)
   (list (int32_t output_multiplier))
   #f
   #f
   #f
   'int64)
  (int64_t (bv #x000000000000001f 64))
  #t
  x?$2971
  #t)
 'int32
 x?$3301)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$3316 idx) (bv #x0000000080000000 64)) (bvsle (bv #xffffffff80000001 64) (app abstr-vals$3316 idx)))))
optimized-halide-expr:
  (vec-shr
 (vec-cast
  (vec-max
   (vec-min
    #<abstr-halide-expr>
    (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
   (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
  'int32
  16)
 (sca-broadcast (int32_t output_shift) 16))
optimized-template:
  (cast ... #<abstr-expr> 'int32 x?$3301)
optimized Halide 0:
  (int32_t
 (bvashr (extract 31 0 (ite (bvsle (bv #xffffffff80000000 64) (ite (bvsle (app abstr-vals$3316 0) (bv #x000000007fffffff 64)) (app abstr-vals$3316 0) (bv #x000000007fffffff 64))) (ite (bvsle (app abstr-vals$3316 0) (bv #x000000007fffffff 64)) (app abstr-vals$3316 0) (bv #x000000007fffffff 64)) (bv #xffffffff80000000 64))) output_shift))
optimized x86 0:
  (int32_t
 (ite x?$3301 (ite (bvslt (app abstr-vals$3316 0) (bv #xffffffff80000000 64)) (bv #x80000000 32) (ite (bvslt (bv #x000000007fffffff 64) (app abstr-vals$3316 0)) (bv #x7fffffff 32) (extract 31 0 (app abstr-vals$3316 0)))) (extract 31 0 (app abstr-vals$3316 0))))
run-x86-synthesizer
halide-expr:
  (vec-shr
 (vec-cast
  (vec-max
   (vec-min
    (vec-add
     (vec-bwand
      (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
      (vec-div
       (vec-mul
        (vec-cast
         (vec-add
          (vec-add
           (vec-mul
            (vec-cast
             (load
              (buffer column_sums_b 'uint32)
              (ramp
               (sca-add
                (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                16)
               1
               16)
              (aligned 16 0))
             'int32
             16)
            (sca-broadcast (int32_t t5829) 16))
           (vec-add
            (load
             (buffer bias 'int32)
             (ramp (sca-mul output.s0.x.x 16) 1 16)
             (aligned 16 0))
            (sca-broadcast
             (sca-add
              (sca-mul
               (sca-mul (int32_t t5829) (int32_t t5830))
               (int32_t mat_a.extent.0))
              (sca-mul (int32_t t5830) (int32_t t6653)))
             16)))
          (vec-cast
           (load
            (buffer multiplied_no_offsets 'uint32)
            (ramp
             (sca-add
              (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
              4)
             1
             16)
            (aligned 4 0))
           'int32
           16))
         'int64
         16)
        (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
       (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
     (vec-div
      (vec-mul
       (vec-cast
        (vec-add
         (vec-add
          (vec-mul
           (vec-cast
            (load
             (buffer column_sums_b 'uint32)
             (ramp
              (sca-add
               (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
               16)
              1
              16)
             (aligned 16 0))
            'int32
            16)
           (sca-broadcast (int32_t t5829) 16))
          (vec-add
           (load
            (buffer bias 'int32)
            (ramp (sca-mul output.s0.x.x 16) 1 16)
            (aligned 16 0))
           (sca-broadcast
            (sca-add
             (sca-mul
              (sca-mul (int32_t t5829) (int32_t t5830))
              (int32_t mat_a.extent.0))
             (sca-mul (int32_t t5830) (int32_t t6653)))
            16)))
         (vec-cast
          (load
           (buffer multiplied_no_offsets 'uint32)
           (ramp
            (sca-add
             (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
             4)
            1
            16)
           (aligned 4 0))
          'int32
          16))
        'int64
        16)
       (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
      (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
    (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
   (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
  'int32
  16)
 (sca-broadcast (int32_t output_shift) 16))
template:
  (vs-shift-right
 ...
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (vs-mpy-add
    ...
    (combine
     (vs-mpy-add
      ...
      (combine
       (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
       (vs-mpy-add
        ...
        (combine
         #<load-data>
         (broadcast
          ...
          (sca-add
           (sca-mul
            (sca-mul (int32_t t5829) (int32_t t5830))
            (int32_t mat_a.extent.0))
           (sca-mul (int32_t t5830) (int32_t t6653)))))
        (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
        #f
        #f
        #f
        'int32))
      (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
      #f
      #f
      #f
      'int32)
     (cast ... #<load-data> 'int32 #f))
    (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
    #f
    #f
    #f
    'int32)
   (list (int32_t output_multiplier))
   #f
   #f
   #f
   'int64)
  (int64_t (bv #x000000000000001f 64))
  #t
  x?$2971
  #t)
 (union [xi?$3312 #(struct:int32_t output_shift)] [(! xi?$3312) #(struct:int64_t
                                                                  (ite xi?$3313 (bv #x000000000000001e 64) (bv #x000000000000001f 64)))])
 #f
 #f
 #t)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$3317 idx) (bv #x0000000080000000 64)) (bvsle (bv #xffffffff80000001 64) (app abstr-vals$3317 idx)))))
optimized-halide-expr:
  (vec-shr
 (vec-cast
  (vec-max
   (vec-min
    #<abstr-halide-expr>
    (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
   (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
  'int32
  16)
 (sca-broadcast (int32_t output_shift) 16))
optimized-template:
  (vs-shift-right
 ...
 #<abstr-expr>
 (union [xi?$3312 #(struct:int32_t output_shift)] [(! xi?$3312) #(struct:int64_t
                                                                  (ite xi?$3313 (bv #x000000000000001e 64) (bv #x000000000000001f 64)))])
 #f
 #f
 #t)
optimized Halide 0:
  (int32_t
 (bvashr (extract 31 0 (ite (bvsle (bv #xffffffff80000000 64) (ite (bvsle (app abstr-vals$3317 0) (bv #x000000007fffffff 64)) (app abstr-vals$3317 0) (bv #x000000007fffffff 64))) (ite (bvsle (app abstr-vals$3317 0) (bv #x000000007fffffff 64)) (app abstr-vals$3317 0) (bv #x000000007fffffff 64)) (bv #xffffffff80000000 64))) output_shift))
optimized x86 0:
  (int64_t
 (bvashr (app abstr-vals$3317 0) (ite xi?$3312 (sign-extend output_shift (bitvector 64)) (ite xi?$3313 (bv #x000000000000001e 64) (bv #x000000000000001f 64)))))
Ran synthesizer for 21 ms
(unsat)
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (vec-shr
 (vec-cast
  (vec-max
   (vec-min
    (vec-add
     (vec-bwand
      (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
      (vec-div
       (vec-mul
        (vec-cast
         (vec-add
          (vec-add
           (vec-mul
            (vec-cast
             (load
              (buffer column_sums_b 'uint32)
              (ramp
               (sca-add
                (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                16)
               1
               16)
              (aligned 16 0))
             'int32
             16)
            (sca-broadcast (int32_t t5829) 16))
           (vec-add
            (load
             (buffer bias 'int32)
             (ramp (sca-mul output.s0.x.x 16) 1 16)
             (aligned 16 0))
            (sca-broadcast
             (sca-add
              (sca-mul
               (sca-mul (int32_t t5829) (int32_t t5830))
               (int32_t mat_a.extent.0))
              (sca-mul (int32_t t5830) (int32_t t6653)))
             16)))
          (vec-cast
           (load
            (buffer multiplied_no_offsets 'uint32)
            (ramp
             (sca-add
              (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
              4)
             1
             16)
            (aligned 4 0))
           'int32
           16))
         'int64
         16)
        (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
       (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
     (vec-div
      (vec-mul
       (vec-cast
        (vec-add
         (vec-add
          (vec-mul
           (vec-cast
            (load
             (buffer column_sums_b 'uint32)
             (ramp
              (sca-add
               (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
               16)
              1
              16)
             (aligned 16 0))
            'int32
            16)
           (sca-broadcast (int32_t t5829) 16))
          (vec-add
           (load
            (buffer bias 'int32)
            (ramp (sca-mul output.s0.x.x 16) 1 16)
            (aligned 16 0))
           (sca-broadcast
            (sca-add
             (sca-mul
              (sca-mul (int32_t t5829) (int32_t t5830))
              (int32_t mat_a.extent.0))
             (sca-mul (int32_t t5830) (int32_t t6653)))
            16)))
         (vec-cast
          (load
           (buffer multiplied_no_offsets 'uint32)
           (ramp
            (sca-add
             (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
             4)
            1
            16)
           (aligned 4 0))
          'int32
          16))
        'int64
        16)
       (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
      (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
    (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
   (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
  'int32
  16)
 (sca-broadcast (int32_t output_shift) 16))
template:
  (vs-shift-right
 ...
 (union [x?$3318 #(struct:cast
                   ...
                   #(struct:vs-shift-right
                     ...
                     #(struct:vs-mpy-add
                       ...
                       #(struct:vs-mpy-add
                         ...
                         #<combine:
                          #(struct:vs-mpy-add
                            ...
                            #<combine:
                             #(struct:vs-mpy-add
                               ...
                               #<load-data>
                               (#(struct:int32_t t5829))
                               #f
                               #f
                               #f
                               int32)
                             #(struct:vs-mpy-add
                               ...
                               #<combine:
                                #<load-data>
                                #(struct:broadcast
                                  ...
                                  #(struct:sca-add
                                    #(struct:sca-mul
                                      #(struct:sca-mul
                                        #(struct:int32_t t5829)
                                        #(struct:int32_t t5830))
                                      #(struct:int32_t mat_a.extent.0))
                                    #(struct:sca-mul
                                      #(struct:int32_t t5830)
                                      #(struct:int32_t t6653))))>
                               (#(struct:int8_t (bv #x01 8))
                                #(struct:int8_t (bv #x01 8)))
                               #f
                               #f
                               #f
                               int32)>
                            (#(struct:int8_t (bv #x01 8))
                             #(struct:int8_t (bv #x01 8)))
                            #f
                            #f
                            #f
                            int32)
                          #(struct:cast ... #<load-data> int32 #f)>
                         (#(struct:int8_t (bv #x01 8))
                          #(struct:int8_t (bv #x01 8)))
                         #f
                         #f
                         #f
                         int32)
                       (#(struct:int32_t output_multiplier))
                       #f
                       #f
                       #f
                       int64)
                     #(struct:int64_t (bv #x000000000000001f 64))
                     #t
                     x?$2971
                     #t)
                   int32
                   #t)] [(! x?$3318) #(struct:broadcast
                                       ...
                                       #(struct:int32_t output_shift))])
 (union [xi?$3319 #(struct:int32_t output_shift)] [(! xi?$3319) #(struct:int64_t
                                                                  (ite xi?$3320 (bv #x000000000000001e 64) (bv #x000000000000001f 64)))])
 #f
 #f
 #t)
axioms:
  '()
optimized-halide-expr:
  (vec-shr
 (vec-cast
  (vec-max
   (vec-min
    (vec-add
     (vec-bwand
      (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
      (vec-div
       (vec-mul
        (vec-cast
         (vec-add
          (vec-add
           (vec-mul
            (vec-cast
             (load
              (buffer column_sums_b 'uint32)
              (ramp
               (sca-add
                (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                16)
               1
               16)
              (aligned 16 0))
             'int32
             16)
            (sca-broadcast (int32_t t5829) 16))
           (vec-add
            (load
             (buffer bias 'int32)
             (ramp (sca-mul output.s0.x.x 16) 1 16)
             (aligned 16 0))
            (sca-broadcast
             (sca-add
              (sca-mul
               (sca-mul (int32_t t5829) (int32_t t5830))
               (int32_t mat_a.extent.0))
              (sca-mul (int32_t t5830) (int32_t t6653)))
             16)))
          (vec-cast
           (load
            (buffer multiplied_no_offsets 'uint32)
            (ramp
             (sca-add
              (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
              4)
             1
             16)
            (aligned 4 0))
           'int32
           16))
         'int64
         16)
        (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
       (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
     (vec-div
      (vec-mul
       (vec-cast
        (vec-add
         (vec-add
          (vec-mul
           (vec-cast
            (load
             (buffer column_sums_b 'uint32)
             (ramp
              (sca-add
               (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
               16)
              1
              16)
             (aligned 16 0))
            'int32
            16)
           (sca-broadcast (int32_t t5829) 16))
          (vec-add
           (load
            (buffer bias 'int32)
            (ramp (sca-mul output.s0.x.x 16) 1 16)
            (aligned 16 0))
           (sca-broadcast
            (sca-add
             (sca-mul
              (sca-mul (int32_t t5829) (int32_t t5830))
              (int32_t mat_a.extent.0))
             (sca-mul (int32_t t5830) (int32_t t6653)))
            16)))
         (vec-cast
          (load
           (buffer multiplied_no_offsets 'uint32)
           (ramp
            (sca-add
             (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
             4)
            1
            16)
           (aligned 4 0))
          'int32
          16))
        'int64
        16)
       (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
      (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
    (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
   (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
  'int32
  16)
 (sca-broadcast (int32_t output_shift) 16))
optimized-template:
  (vs-shift-right
 ...
 (union [x?$3318 #(struct:cast
                   ...
                   #(struct:vs-shift-right
                     ...
                     #(struct:vs-mpy-add
                       ...
                       #(struct:vs-mpy-add
                         ...
                         #<combine:
                          #(struct:vs-mpy-add
                            ...
                            #<combine:
                             #(struct:vs-mpy-add
                               ...
                               #<load-data>
                               (#(struct:int32_t t5829))
                               #f
                               #f
                               #f
                               int32)
                             #(struct:vs-mpy-add
                               ...
                               #<combine:
                                #<load-data>
                                #(struct:broadcast
                                  ...
                                  #(struct:sca-add
                                    #(struct:sca-mul
                                      #(struct:sca-mul
                                        #(struct:int32_t t5829)
                                        #(struct:int32_t t5830))
                                      #(struct:int32_t mat_a.extent.0))
                                    #(struct:sca-mul
                                      #(struct:int32_t t5830)
                                      #(struct:int32_t t6653))))>
                               (#(struct:int8_t (bv #x01 8))
                                #(struct:int8_t (bv #x01 8)))
                               #f
                               #f
                               #f
                               int32)>
                            (#(struct:int8_t (bv #x01 8))
                             #(struct:int8_t (bv #x01 8)))
                            #f
                            #f
                            #f
                            int32)
                          #(struct:cast ... #<load-data> int32 #f)>
                         (#(struct:int8_t (bv #x01 8))
                          #(struct:int8_t (bv #x01 8)))
                         #f
                         #f
                         #f
                         int32)
                       (#(struct:int32_t output_multiplier))
                       #f
                       #f
                       #f
                       int64)
                     #(struct:int64_t (bv #x000000000000001f 64))
                     #t
                     x?$2971
                     #t)
                   int32
                   #t)] [(! x?$3318) #(struct:broadcast
                                       ...
                                       #(struct:int32_t output_shift))])
 (union [xi?$3319 #(struct:int32_t output_shift)] [(! xi?$3319) #(struct:int64_t
                                                                  (ite xi?$3320 (bv #x000000000000001e 64) (bv #x000000000000001f 64)))])
 #f
 #f
 #t)
optimized Halide 0:
  (int32_t
 (bvashr (extract 31 0 (ite (bvsle (bv #xffffffff80000000 64) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64))) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bv #xffffffff80000000 64))) output_shift))
optimized x86 0:
  (int32_t
 (bvashr (ite x?$3318 (ite (bvslt (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001f 64)) (bvand (bv #x0000000000000001 64) (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001e 64)))) (bv #xffffffff80000000 64)) (bv #x80000000 32) (ite (bvslt (bv #x000000007fffffff 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001f 64)) (bvand (bv #x0000000000000001 64) (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001e 64))))) (bv #x7fffffff 32) (extract 31 0 (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001f 64)) (bvand (bv #x0000000000000001 64) (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001e 64))))))) output_shift) (ite xi?$3319 output_shift (extract 31 0 (ite xi?$3320 (bv #x000000000000001e 64) (bv #x000000000000001f 64))))))
Ran synthesizer for 4691 ms
(model
 [x?$3318 #t]
 [xi?$3319 #t]
 [xi?$3320 #f])
(vec-shr
 (vec-cast
  (vec-max
   (vec-min
    (vec-add
     (vec-bwand
      (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
      (vec-div
       (vec-mul
        (vec-cast
         (vec-add
          (vec-add
           (vec-mul
            (vec-cast
             (load
              (buffer column_sums_b 'uint32)
              (ramp
               (sca-add
                (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                16)
               1
               16)
              (aligned 16 0))
             'int32
             16)
            (sca-broadcast (int32_t t5829) 16))
           (vec-add
            (load
             (buffer bias 'int32)
             (ramp (sca-mul output.s0.x.x 16) 1 16)
             (aligned 16 0))
            (sca-broadcast
             (sca-add
              (sca-mul
               (sca-mul (int32_t t5829) (int32_t t5830))
               (int32_t mat_a.extent.0))
              (sca-mul (int32_t t5830) (int32_t t6653)))
             16)))
          (vec-cast
           (load
            (buffer multiplied_no_offsets 'uint32)
            (ramp
             (sca-add
              (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
              4)
             1
             16)
            (aligned 4 0))
           'int32
           16))
         'int64
         16)
        (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
       (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
     (vec-div
      (vec-mul
       (vec-cast
        (vec-add
         (vec-add
          (vec-mul
           (vec-cast
            (load
             (buffer column_sums_b 'uint32)
             (ramp
              (sca-add
               (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
               16)
              1
              16)
             (aligned 16 0))
            'int32
            16)
           (sca-broadcast (int32_t t5829) 16))
          (vec-add
           (load
            (buffer bias 'int32)
            (ramp (sca-mul output.s0.x.x 16) 1 16)
            (aligned 16 0))
           (sca-broadcast
            (sca-add
             (sca-mul
              (sca-mul (int32_t t5829) (int32_t t5830))
              (int32_t mat_a.extent.0))
             (sca-mul (int32_t t5830) (int32_t t6653)))
            16)))
         (vec-cast
          (load
           (buffer multiplied_no_offsets 'uint32)
           (ramp
            (sca-add
             (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
             4)
            1
            16)
           (aligned 4 0))
          'int32
          16))
        'int64
        16)
       (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
      (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
    (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
   (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
  'int32
  16)
 (sca-broadcast (int32_t output_shift) 16))
(vs-shift-right
 ...
 (cast
  ...
  (vs-shift-right
   ...
   (vs-mpy-add
    ...
    (vs-mpy-add
     ...
     (combine
      (vs-mpy-add
       ...
       (combine
        (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
        (vs-mpy-add
         ...
         (combine
          #<load-data>
          (broadcast
           ...
           (sca-add
            (sca-mul
             (sca-mul (int32_t t5829) (int32_t t5830))
             (int32_t mat_a.extent.0))
            (sca-mul (int32_t t5830) (int32_t t6653)))))
         (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
         #f
         #f
         #f
         'int32))
       (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
       #f
       #f
       #f
       'int32)
      (cast ... #<load-data> 'int32 #f))
     (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
     #f
     #f
     #f
     'int32)
    (list (int32_t output_multiplier))
    #f
    #f
    #f
    'int64)
   (int64_t (bv #x000000000000001f 64))
   #t
   x?$2971
   #t)
  'int32
  #t)
 (int32_t output_shift)
 #f
 #f
 #t)
Ran bounds analysis for 12438 ms
Ran bounds analysis for 4867 ms
"Extended success?"
#t
(vs-shift-right
 ...
 (cast
  ...
  (vs-shift-right
   ...
   (vs-mpy-add
    ...
    (vs-mpy-add
     ...
     (combine
      (vs-mpy-add
       ...
       (combine
        (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
        (vs-mpy-add
         ...
         (combine
          #<load-data>
          (broadcast
           ...
           (sca-add
            (sca-mul
             (sca-mul (int32_t t5829) (int32_t t5830))
             (int32_t mat_a.extent.0))
            (sca-mul (int32_t t5830) (int32_t t6653)))))
         (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
         #f
         #f
         #f
         'int32))
       (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
       #f
       #f
       #f
       'int32)
      (cast ... #<load-data> 'int32 #f))
     (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
     #f
     #f
     #f
     'int32)
    (list (int32_t output_multiplier))
    #f
    #f
    #f
    'int64)
   (int64_t (bv #x000000000000001f 64))
   #t
   x?$2971
   #t)
  'int32
  #t)
 (int32_t output_shift)
 #f
 #f
 #t)
"Building Expr:"
(sca-broadcast (sca-lt (int32_t (bv #x00000000 32)) (int32_t output_shift)) 16)
"Fold templates"
'()
here()

"Replace templates"
'()
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (sca-broadcast (sca-lt (int32_t (bv #x00000000 32)) (int32_t output_shift)) 16)
template:
  (broadcast ... (sca-lt (int32_t (bv #x00000000 32)) (int32_t output_shift)))
axioms:
  '()
optimized-halide-expr:
  (sca-broadcast (sca-lt (int32_t (bv #x00000000 32)) (int32_t output_shift)) 16)
optimized-template:
  (broadcast ... (sca-lt (int32_t (bv #x00000000 32)) (int32_t output_shift)))
optimized Halide 0:
  (uint1_t (bvslt (bv #x00000000 32) output_shift))
optimized x86 0:
  (uint1_t (bvslt (bv #x00000000 32) output_shift))
Ran synthesizer for 19 ms
(model)
(sca-broadcast (sca-lt (int32_t (bv #x00000000 32)) (int32_t output_shift)) 16)
(broadcast ... (sca-lt (int32_t (bv #x00000000 32)) (int32_t output_shift)))
"Extended success?"
#t
(broadcast ... (sca-lt (int32_t (bv #x00000000 32)) (int32_t output_shift)))
"Building Expr:"
(sca-broadcast (int32_t (bv #x00000001 32)) 16)
"Fold templates"
'()
here()

"Replace templates"
'()
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (sca-broadcast (int32_t (bv #x00000001 32)) 16)
template:
  (broadcast ... (int32_t (bv #x00000001 32)))
axioms:
  '()
optimized-halide-expr:
  (sca-broadcast (int32_t (bv #x00000001 32)) 16)
optimized-template:
  (broadcast ... (int32_t (bv #x00000001 32)))
optimized Halide 0:
  (int32_t (bv #x00000001 32))
optimized x86 0:
  (int32_t (bv #x00000001 32))
Ran synthesizer for 18 ms
(model)
(sca-broadcast (int32_t (bv #x00000001 32)) 16)
(broadcast ... (int32_t (bv #x00000001 32)))
Ran bounds analysis for 26 ms
Ran bounds analysis for 15 ms
"Extended success?"
#t
(broadcast ... (int32_t (bv #x00000001 32)))
"Building Expr:"
(sca-broadcast (int32_t (bv #x00000000 32)) 16)
"Fold templates"
'()
here()

"Replace templates"
'()
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (sca-broadcast (int32_t (bv #x00000000 32)) 16)
template:
  (broadcast ... (int32_t (bv #x00000000 32)))
axioms:
  '()
optimized-halide-expr:
  (sca-broadcast (int32_t (bv #x00000000 32)) 16)
optimized-template:
  (broadcast ... (int32_t (bv #x00000000 32)))
optimized Halide 0:
  (int32_t (bv #x00000000 32))
optimized x86 0:
  (int32_t (bv #x00000000 32))
Ran synthesizer for 19 ms
(model)
(sca-broadcast (int32_t (bv #x00000000 32)) 16)
(broadcast ... (int32_t (bv #x00000000 32)))
Ran bounds analysis for 23 ms
Ran bounds analysis for 15 ms
"Extended success?"
#t
(broadcast ... (int32_t (bv #x00000000 32)))
"Building Expr:"
(vec-if
 (sca-broadcast
  (sca-lt (int32_t (bv #x00000000 32)) (int32_t output_shift))
  16)
 (sca-broadcast (int32_t (bv #x00000001 32)) 16)
 (sca-broadcast (int32_t (bv #x00000000 32)) 16))
"Fold templates"
'()
here()

"Replace templates"
'()
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (vec-if
 (sca-broadcast
  (sca-lt (int32_t (bv #x00000000 32)) (int32_t output_shift))
  16)
 (sca-broadcast (int32_t (bv #x00000001 32)) 16)
 (sca-broadcast (int32_t (bv #x00000000 32)) 16))
template:
  (select
 ...
 (broadcast ... (sca-lt (int32_t (bv #x00000000 32)) (int32_t output_shift)))
 (broadcast ... (int32_t (bv #x00000001 32)))
 (broadcast ... (int32_t (bv #x00000000 32))))
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$3322 idx) (bv #x00000001 32)) (bvsle (bv #x00000001 32) (app abstr-vals$3322 idx))))
 (forall (idx) (&& (bvsle (app abstr-vals$3323 idx) (bv #x00000000 32)) (bvsle (bv #x00000000 32) (app abstr-vals$3323 idx)))))
optimized-halide-expr:
  (vec-if #<abstr-halide-expr> #<abstr-halide-expr> #<abstr-halide-expr>)
optimized-template:
  (select ... #<abstr-expr> #<abstr-expr> #<abstr-expr>)
optimized Halide 0:
  (int32_t
 (ite (app abstr-vals$3321 0) (app abstr-vals$3322 0) (app abstr-vals$3323 0)))
optimized x86 0:
  (int32_t
 (ite (app abstr-vals$3321 0) (app abstr-vals$3322 0) (app abstr-vals$3323 0)))
Ran synthesizer for 40 ms
(model)
(vec-if #<abstr-halide-expr> #<abstr-halide-expr> #<abstr-halide-expr>)
(select
 ...
 (broadcast ... (sca-lt (int32_t (bv #x00000000 32)) (int32_t output_shift)))
 (broadcast ... (int32_t (bv #x00000001 32)))
 (broadcast ... (int32_t (bv #x00000000 32))))
Ran bounds analysis for 29 ms
Ran bounds analysis for 33 ms
"Extended success?"
#t
(select
 ...
 (broadcast ... (sca-lt (int32_t (bv #x00000000 32)) (int32_t output_shift)))
 (broadcast ... (int32_t (bv #x00000001 32)))
 (broadcast ... (int32_t (bv #x00000000 32))))
"Building Expr:"
(sca-broadcast
 (sca-add (int32_t output_shift) (int32_t (bv #xffffffff 32)))
 16)
"Fold templates"
'()
here()

"Replace templates"
'()
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (sca-broadcast
 (sca-add (int32_t output_shift) (int32_t (bv #xffffffff 32)))
 16)
template:
  (broadcast ... (sca-add (int32_t output_shift) (int32_t (bv #xffffffff 32))))
axioms:
  '()
optimized-halide-expr:
  (sca-broadcast
 (sca-add (int32_t output_shift) (int32_t (bv #xffffffff 32)))
 16)
optimized-template:
  (broadcast ... (sca-add (int32_t output_shift) (int32_t (bv #xffffffff 32))))
optimized Halide 0:
  (int32_t (bvadd (bv #xffffffff 32) output_shift))
optimized x86 0:
  (int32_t (bvadd (bv #xffffffff 32) output_shift))
Ran synthesizer for 19 ms
(model)
(sca-broadcast
 (sca-add (int32_t output_shift) (int32_t (bv #xffffffff 32)))
 16)
(broadcast ... (sca-add (int32_t output_shift) (int32_t (bv #xffffffff 32))))
Ran bounds analysis for 36 ms
Ran bounds analysis for 23 ms
"Extended success?"
#t
(broadcast ... (sca-add (int32_t output_shift) (int32_t (bv #xffffffff 32))))
"Building Expr:"
(vec-shr
 (vec-cast
  (vec-max
   (vec-min
    (vec-add
     (vec-bwand
      (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
      (vec-div
       (vec-mul
        (vec-cast
         (vec-add
          (vec-add
           (vec-mul
            (vec-cast
             (load
              (buffer column_sums_b 'uint32)
              (ramp
               (sca-add
                (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                16)
               1
               16)
              (aligned 16 0))
             'int32
             16)
            (sca-broadcast (int32_t t5829) 16))
           (vec-add
            (load
             (buffer bias 'int32)
             (ramp (sca-mul output.s0.x.x 16) 1 16)
             (aligned 16 0))
            (sca-broadcast
             (sca-add
              (sca-mul
               (sca-mul (int32_t t5829) (int32_t t5830))
               (int32_t mat_a.extent.0))
              (sca-mul (int32_t t5830) (int32_t t6653)))
             16)))
          (vec-cast
           (load
            (buffer multiplied_no_offsets 'uint32)
            (ramp
             (sca-add
              (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
              4)
             1
             16)
            (aligned 4 0))
           'int32
           16))
         'int64
         16)
        (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
       (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
     (vec-div
      (vec-mul
       (vec-cast
        (vec-add
         (vec-add
          (vec-mul
           (vec-cast
            (load
             (buffer column_sums_b 'uint32)
             (ramp
              (sca-add
               (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
               16)
              1
              16)
             (aligned 16 0))
            'int32
            16)
           (sca-broadcast (int32_t t5829) 16))
          (vec-add
           (load
            (buffer bias 'int32)
            (ramp (sca-mul output.s0.x.x 16) 1 16)
            (aligned 16 0))
           (sca-broadcast
            (sca-add
             (sca-mul
              (sca-mul (int32_t t5829) (int32_t t5830))
              (int32_t mat_a.extent.0))
             (sca-mul (int32_t t5830) (int32_t t6653)))
            16)))
         (vec-cast
          (load
           (buffer multiplied_no_offsets 'uint32)
           (ramp
            (sca-add
             (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
             4)
            1
            16)
           (aligned 4 0))
          'int32
          16))
        'int64
        16)
       (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
      (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
    (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
   (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
  'int32
  16)
 (sca-broadcast
  (sca-add (int32_t output_shift) (int32_t (bv #xffffffff 32)))
  16))
"Fold templates"
(list
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (vs-mpy-add
    ...
    (combine
     (vs-mpy-add
      ...
      (combine
       (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
       (vs-mpy-add
        ...
        (combine
         #<load-data>
         (broadcast
          ...
          (sca-add
           (sca-mul
            (sca-mul (int32_t t5829) (int32_t t5830))
            (int32_t mat_a.extent.0))
           (sca-mul (int32_t t5830) (int32_t t6653)))))
        (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
        #f
        #f
        #f
        'int32))
      (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
      #f
      #f
      #f
      'int32)
     (cast ... #<load-data> 'int32 #f))
    (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
    #f
    #f
    #f
    'int32)
   (list (int32_t output_multiplier))
   #f
   #f
   #f
   'int64)
  (union [(&& (! xi?$3328) (! xi?$3329)) #(struct:sca-add
                                           #(struct:int32_t output_shift)
                                           #(struct:int32_t
                                             (bv #xffffffff 32)))] [(|| xi?$3328 (&& xi?$3329 (! xi?$3328))) #(struct:int64_t
                                                                                                               (ite* (⊢ xi?$3328 (bv #x000000000000001e 64)) (⊢ (&& xi?$3329 (! xi?$3328)) (bv #x000000000000001f 64))))])
  #t
  x?$2971
  #t)
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (vs-mpy-add
    ...
    (combine
     (vs-mpy-add
      ...
      (combine
       (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
       (vs-mpy-add
        ...
        (combine
         #<load-data>
         (broadcast
          ...
          (sca-add
           (sca-mul
            (sca-mul (int32_t t5829) (int32_t t5830))
            (int32_t mat_a.extent.0))
           (sca-mul (int32_t t5830) (int32_t t6653)))))
        (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
        #f
        #f
        #f
        'int32))
      (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
      #f
      #f
      #f
      'int32)
     (cast ... #<load-data> 'int32 #f))
    (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
    #f
    #f
    #f
    'int32)
   (list (int32_t output_multiplier))
   #f
   #f
   #f
   'int64)
  (int64_t (bv #x000000000000001f 64))
  x?$3330
  x?$3331
  x?$3332)
 (cast
  ...
  (vs-shift-right
   ...
   (vs-mpy-add
    ...
    (vs-mpy-add
     ...
     (combine
      (vs-mpy-add
       ...
       (combine
        (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
        (vs-mpy-add
         ...
         (combine
          #<load-data>
          (broadcast
           ...
           (sca-add
            (sca-mul
             (sca-mul (int32_t t5829) (int32_t t5830))
             (int32_t mat_a.extent.0))
            (sca-mul (int32_t t5830) (int32_t t6653)))))
         (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
         #f
         #f
         #f
         'int32))
       (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
       #f
       #f
       #f
       'int32)
      (cast ... #<load-data> 'int32 #f))
     (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
     #f
     #f
     #f
     'int32)
    (list (int32_t output_multiplier))
    #f
    #f
    #f
    'int64)
   (int64_t (bv #x000000000000001f 64))
   #t
   x?$2971
   #t)
  'int32
  x?$3327))
here(#(struct:vs-shift-right ... #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<load-data> (#(struct:int32_t t5829)) #f #f #f int32) #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-add #(struct:sca-mul #(struct:sca-mul #(struct:int32_t t5829) #(struct:int32_t t5830)) #(struct:int32_t mat_a.extent.0)) #(struct:sca-mul #(struct:int32_t t5830) #(struct:int32_t t6653))))> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32)> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32) #(struct:cast ... #<load-data> int32 #f)> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32) (#(struct:int32_t output_multiplier)) #f #f #f int64) (union #:size 2 #:hash -841792697716675375) #t x?$2971 #t) #(struct:vs-shift-right ... #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<load-data> (#(struct:int32_t t5829)) #f #f #f int32) #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-add #(struct:sca-mul #(struct:sca-mul #(struct:int32_t t5829) #(struct:int32_t t5830)) #(struct:int32_t mat_a.extent.0)) #(struct:sca-mul #(struct:int32_t t5830) #(struct:int32_t t6653))))> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32)> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32) #(struct:cast ... #<load-data> int32 #f)> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32) (#(struct:int32_t output_multiplier)) #f #f #f int64) #(struct:int64_t (bv #x000000000000001f 64)) x?$3330 x?$3331 x?$3332) #(struct:cast ... #(struct:vs-shift-right ... #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<load-data> (#(struct:int32_t t5829)) #f #f #f int32) #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-add #(struct:sca-mul #(struct:sca-mul #(struct:int32_t t5829) #(struct:int32_t t5830)) #(struct:int32_t mat_a.extent.0)) #(struct:sca-mul #(struct:int32_t t5830) #(struct:int32_t t6653))))> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32)> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32) #(struct:cast ... #<load-data> int32 #f)> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32) (#(struct:int32_t output_multiplier)) #f #f #f int64) #(struct:int64_t (bv #x000000000000001f 64)) #t x?$2971 #t) int32 x?$3327))

"Replace templates"
(list
 (vs-shift-right
  ...
  (vs-shift-right
   ...
   (vs-mpy-add
    ...
    (vs-mpy-add
     ...
     (combine
      (vs-mpy-add
       ...
       (combine
        (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
        (vs-mpy-add
         ...
         (combine
          #<load-data>
          (broadcast
           ...
           (sca-add
            (sca-mul
             (sca-mul (int32_t t5829) (int32_t t5830))
             (int32_t mat_a.extent.0))
            (sca-mul (int32_t t5830) (int32_t t6653)))))
         (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
         #f
         #f
         #f
         'int32))
       (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
       #f
       #f
       #f
       'int32)
      (cast ... #<load-data> 'int32 #f))
     (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
     #f
     #f
     #f
     'int32)
    (list (int32_t output_multiplier))
    #f
    #f
    #f
    'int64)
   (int64_t (bv #x000000000000001f 64))
   #t
   x?$2971
   #t)
  (union [(&& (! xi?$3338) (! xi?$3339)) #(struct:sca-add
                                           #(struct:int32_t output_shift)
                                           #(struct:int32_t
                                             (bv #xffffffff 32)))] [(|| xi?$3338 (&& xi?$3339 (! xi?$3338))) #(struct:int64_t
                                                                                                               (ite* (⊢ xi?$3338 (bv #x000000000000001e 64)) (⊢ (&& xi?$3339 (! xi?$3338)) (bv #x000000000000001f 64))))])
  #f
  #f
  #t))
run-x86-synthesizer
halide-expr:
  (vec-shr
 (vec-cast
  (vec-max
   (vec-min
    (vec-add
     (vec-bwand
      (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
      (vec-div
       (vec-mul
        (vec-cast
         (vec-add
          (vec-add
           (vec-mul
            (vec-cast
             (load
              (buffer column_sums_b 'uint32)
              (ramp
               (sca-add
                (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                16)
               1
               16)
              (aligned 16 0))
             'int32
             16)
            (sca-broadcast (int32_t t5829) 16))
           (vec-add
            (load
             (buffer bias 'int32)
             (ramp (sca-mul output.s0.x.x 16) 1 16)
             (aligned 16 0))
            (sca-broadcast
             (sca-add
              (sca-mul
               (sca-mul (int32_t t5829) (int32_t t5830))
               (int32_t mat_a.extent.0))
              (sca-mul (int32_t t5830) (int32_t t6653)))
             16)))
          (vec-cast
           (load
            (buffer multiplied_no_offsets 'uint32)
            (ramp
             (sca-add
              (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
              4)
             1
             16)
            (aligned 4 0))
           'int32
           16))
         'int64
         16)
        (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
       (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
     (vec-div
      (vec-mul
       (vec-cast
        (vec-add
         (vec-add
          (vec-mul
           (vec-cast
            (load
             (buffer column_sums_b 'uint32)
             (ramp
              (sca-add
               (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
               16)
              1
              16)
             (aligned 16 0))
            'int32
            16)
           (sca-broadcast (int32_t t5829) 16))
          (vec-add
           (load
            (buffer bias 'int32)
            (ramp (sca-mul output.s0.x.x 16) 1 16)
            (aligned 16 0))
           (sca-broadcast
            (sca-add
             (sca-mul
              (sca-mul (int32_t t5829) (int32_t t5830))
              (int32_t mat_a.extent.0))
             (sca-mul (int32_t t5830) (int32_t t6653)))
            16)))
         (vec-cast
          (load
           (buffer multiplied_no_offsets 'uint32)
           (ramp
            (sca-add
             (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
             4)
            1
            16)
           (aligned 4 0))
          'int32
          16))
        'int64
        16)
       (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
      (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
    (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
   (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
  'int32
  16)
 (sca-broadcast
  (sca-add (int32_t output_shift) (int32_t (bv #xffffffff 32)))
  16))
template:
  (vs-shift-right
 ...
 (vs-mpy-add
  ...
  (vs-mpy-add
   ...
   (combine
    (vs-mpy-add
     ...
     (combine
      (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
      (vs-mpy-add
       ...
       (combine
        #<load-data>
        (broadcast
         ...
         (sca-add
          (sca-mul
           (sca-mul (int32_t t5829) (int32_t t5830))
           (int32_t mat_a.extent.0))
          (sca-mul (int32_t t5830) (int32_t t6653)))))
       (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
       #f
       #f
       #f
       'int32))
     (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
     #f
     #f
     #f
     'int32)
    (cast ... #<load-data> 'int32 #f))
   (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
   #f
   #f
   #f
   'int32)
  (list (int32_t output_multiplier))
  #f
  #f
  #f
  'int64)
 (union [(&& (! xi?$3328) (! xi?$3329)) #(struct:sca-add
                                          #(struct:int32_t output_shift)
                                          #(struct:int32_t (bv #xffffffff 32)))] [(|| xi?$3328 (&& xi?$3329 (! xi?$3328))) #(struct:int64_t
                                                                                                                             (ite* (⊢ xi?$3328 (bv #x000000000000001e 64)) (⊢ (&& xi?$3329 (! xi?$3328)) (bv #x000000000000001f 64))))])
 #t
 x?$2971
 #t)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$3340 idx) (bv #x4000000000000000 64)) (bvsle (bv #xc000000080000000 64) (app abstr-vals$3340 idx)))))
optimized-halide-expr:
  (vec-shr
 (vec-cast
  (vec-max
   (vec-min
    (vec-add
     (vec-bwand
      (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
      (vec-div
       #<abstr-halide-expr>
       (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
     (vec-div
      #<abstr-halide-expr>
      (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
    (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
   (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
  'int32
  16)
 (sca-broadcast
  (sca-add (int32_t output_shift) (int32_t (bv #xffffffff 32)))
  16))
optimized-template:
  (vs-shift-right
 ...
 #<abstr-expr>
 (union [(&& (! xi?$3328) (! xi?$3329)) #(struct:sca-add
                                          #(struct:int32_t output_shift)
                                          #(struct:int32_t (bv #xffffffff 32)))] [(|| xi?$3328 (&& xi?$3329 (! xi?$3328))) #(struct:int64_t
                                                                                                                             (ite* (⊢ xi?$3328 (bv #x000000000000001e 64)) (⊢ (&& xi?$3329 (! xi?$3328)) (bv #x000000000000001f 64))))])
 #t
 x?$2971
 #t)
optimized Halide 0:
  (int32_t
 (bvashr (extract 31 0 (ite (bvsle (bv #xffffffff80000000 64) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (app abstr-vals$3340 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$3340 0) (bvneg (bvashr (app abstr-vals$3340 0) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (app abstr-vals$3340 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$3340 0) (bvneg (bvashr (app abstr-vals$3340 0) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (app abstr-vals$3340 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$3340 0) (bvneg (bvashr (app abstr-vals$3340 0) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (app abstr-vals$3340 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$3340 0) (bvneg (bvashr (app abstr-vals$3340 0) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64))) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (app abstr-vals$3340 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$3340 0) (bvneg (bvashr (app abstr-vals$3340 0) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (app abstr-vals$3340 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$3340 0) (bvneg (bvashr (app abstr-vals$3340 0) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (app abstr-vals$3340 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$3340 0) (bvneg (bvashr (app abstr-vals$3340 0) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (app abstr-vals$3340 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$3340 0) (bvneg (bvashr (app abstr-vals$3340 0) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bv #xffffffff80000000 64))) (bvadd (bv #xffffffff 32) output_shift)))
optimized x86 0:
  (int64_t
 (bvadd (bvashr (app abstr-vals$3340 0) (ite* (⊢ (&& (! xi?$3328) (! xi?$3329)) (sign-extend (bvadd (bv #xffffffff 32) output_shift) (bitvector 64))) (⊢ (|| xi?$3328 (&& xi?$3329 (! xi?$3328))) (ite* (⊢ xi?$3328 (bv #x000000000000001e 64)) (⊢ (&& xi?$3329 (! xi?$3328)) (bv #x000000000000001f 64)))))) (bvand (ite (bvslt (bv #x0000000000000000 64) (ite* (⊢ (&& (! xi?$3328) (! xi?$3329)) (sign-extend (bvadd (bv #xffffffff 32) output_shift) (bitvector 64))) (⊢ (|| xi?$3328 (&& xi?$3329 (! xi?$3328))) (ite* (⊢ xi?$3328 (bv #x000000000000001e 64)) (⊢ (&& xi?$3329 (! xi?$3328)) (bv #x000000000000001f 64)))))) (bv #x0000000000000001 64) (bv #x0000000000000000 64)) (bvashr (app abstr-vals$3340 0) (bvadd (bv #xffffffffffffffff 64) (ite* (⊢ (&& (! xi?$3328) (! xi?$3329)) (sign-extend (bvadd (bv #xffffffff 32) output_shift) (bitvector 64))) (⊢ (|| xi?$3328 (&& xi?$3329 (! xi?$3328))) (ite* (⊢ xi?$3328 (bv #x000000000000001e 64)) (⊢ (&& xi?$3329 (! xi?$3328)) (bv #x000000000000001f 64))))))))))
Ran synthesizer for 21 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-shr
 (vec-cast
  (vec-max
   (vec-min
    (vec-add
     (vec-bwand
      (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
      (vec-div
       (vec-mul
        (vec-cast
         (vec-add
          (vec-add
           (vec-mul
            (vec-cast
             (load
              (buffer column_sums_b 'uint32)
              (ramp
               (sca-add
                (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                16)
               1
               16)
              (aligned 16 0))
             'int32
             16)
            (sca-broadcast (int32_t t5829) 16))
           (vec-add
            (load
             (buffer bias 'int32)
             (ramp (sca-mul output.s0.x.x 16) 1 16)
             (aligned 16 0))
            (sca-broadcast
             (sca-add
              (sca-mul
               (sca-mul (int32_t t5829) (int32_t t5830))
               (int32_t mat_a.extent.0))
              (sca-mul (int32_t t5830) (int32_t t6653)))
             16)))
          (vec-cast
           (load
            (buffer multiplied_no_offsets 'uint32)
            (ramp
             (sca-add
              (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
              4)
             1
             16)
            (aligned 4 0))
           'int32
           16))
         'int64
         16)
        (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
       (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
     (vec-div
      (vec-mul
       (vec-cast
        (vec-add
         (vec-add
          (vec-mul
           (vec-cast
            (load
             (buffer column_sums_b 'uint32)
             (ramp
              (sca-add
               (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
               16)
              1
              16)
             (aligned 16 0))
            'int32
            16)
           (sca-broadcast (int32_t t5829) 16))
          (vec-add
           (load
            (buffer bias 'int32)
            (ramp (sca-mul output.s0.x.x 16) 1 16)
            (aligned 16 0))
           (sca-broadcast
            (sca-add
             (sca-mul
              (sca-mul (int32_t t5829) (int32_t t5830))
              (int32_t mat_a.extent.0))
             (sca-mul (int32_t t5830) (int32_t t6653)))
            16)))
         (vec-cast
          (load
           (buffer multiplied_no_offsets 'uint32)
           (ramp
            (sca-add
             (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
             4)
            1
            16)
           (aligned 4 0))
          'int32
          16))
        'int64
        16)
       (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
      (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
    (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
   (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
  'int32
  16)
 (sca-broadcast
  (sca-add (int32_t output_shift) (int32_t (bv #xffffffff 32)))
  16))
template:
  (vs-shift-right
 ...
 (vs-mpy-add
  ...
  (vs-mpy-add
   ...
   (combine
    (vs-mpy-add
     ...
     (combine
      (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
      (vs-mpy-add
       ...
       (combine
        #<load-data>
        (broadcast
         ...
         (sca-add
          (sca-mul
           (sca-mul (int32_t t5829) (int32_t t5830))
           (int32_t mat_a.extent.0))
          (sca-mul (int32_t t5830) (int32_t t6653)))))
       (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
       #f
       #f
       #f
       'int32))
     (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
     #f
     #f
     #f
     'int32)
    (cast ... #<load-data> 'int32 #f))
   (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
   #f
   #f
   #f
   'int32)
  (list (int32_t output_multiplier))
  #f
  #f
  #f
  'int64)
 (int64_t (bv #x000000000000001f 64))
 x?$3330
 x?$3331
 x?$3332)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$3341 idx) (bv #x4000000000000000 64)) (bvsle (bv #xc000000080000000 64) (app abstr-vals$3341 idx)))))
optimized-halide-expr:
  (vec-shr
 (vec-cast
  (vec-max
   (vec-min
    (vec-add
     (vec-bwand
      (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
      (vec-div
       #<abstr-halide-expr>
       (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
     (vec-div
      #<abstr-halide-expr>
      (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
    (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
   (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
  'int32
  16)
 (sca-broadcast
  (sca-add (int32_t output_shift) (int32_t (bv #xffffffff 32)))
  16))
optimized-template:
  (vs-shift-right
 ...
 #<abstr-expr>
 (int64_t (bv #x000000000000001f 64))
 x?$3330
 x?$3331
 x?$3332)
optimized Halide 0:
  (int32_t
 (bvashr (extract 31 0 (ite (bvsle (bv #xffffffff80000000 64) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (app abstr-vals$3341 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$3341 0) (bvneg (bvashr (app abstr-vals$3341 0) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (app abstr-vals$3341 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$3341 0) (bvneg (bvashr (app abstr-vals$3341 0) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (app abstr-vals$3341 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$3341 0) (bvneg (bvashr (app abstr-vals$3341 0) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (app abstr-vals$3341 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$3341 0) (bvneg (bvashr (app abstr-vals$3341 0) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64))) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (app abstr-vals$3341 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$3341 0) (bvneg (bvashr (app abstr-vals$3341 0) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (app abstr-vals$3341 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$3341 0) (bvneg (bvashr (app abstr-vals$3341 0) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (app abstr-vals$3341 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$3341 0) (bvneg (bvashr (app abstr-vals$3341 0) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (app abstr-vals$3341 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$3341 0) (bvneg (bvashr (app abstr-vals$3341 0) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bv #xffffffff80000000 64))) (bvadd (bv #xffffffff 32) output_shift)))
optimized x86 0:
  (int64_t
 (ite x?$3330 (bvadd (ite x?$3332 (bvashr (app abstr-vals$3341 0) (bv #x000000000000001f 64)) (bvlshr (app abstr-vals$3341 0) (bv #x000000000000001f 64))) (bvand (bv #x0000000000000001 64) (ite x?$3332 (bvashr (app abstr-vals$3341 0) (bv #x000000000000001e 64)) (bvlshr (app abstr-vals$3341 0) (bv #x000000000000001e 64))))) (ite x?$3332 (bvashr (app abstr-vals$3341 0) (bv #x000000000000001f 64)) (bvlshr (app abstr-vals$3341 0) (bv #x000000000000001f 64)))))
run-x86-synthesizer
halide-expr:
  (vec-shr
 (vec-cast
  (vec-max
   (vec-min
    (vec-add
     (vec-bwand
      (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
      (vec-div
       (vec-mul
        (vec-cast
         (vec-add
          (vec-add
           (vec-mul
            (vec-cast
             (load
              (buffer column_sums_b 'uint32)
              (ramp
               (sca-add
                (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                16)
               1
               16)
              (aligned 16 0))
             'int32
             16)
            (sca-broadcast (int32_t t5829) 16))
           (vec-add
            (load
             (buffer bias 'int32)
             (ramp (sca-mul output.s0.x.x 16) 1 16)
             (aligned 16 0))
            (sca-broadcast
             (sca-add
              (sca-mul
               (sca-mul (int32_t t5829) (int32_t t5830))
               (int32_t mat_a.extent.0))
              (sca-mul (int32_t t5830) (int32_t t6653)))
             16)))
          (vec-cast
           (load
            (buffer multiplied_no_offsets 'uint32)
            (ramp
             (sca-add
              (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
              4)
             1
             16)
            (aligned 4 0))
           'int32
           16))
         'int64
         16)
        (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
       (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
     (vec-div
      (vec-mul
       (vec-cast
        (vec-add
         (vec-add
          (vec-mul
           (vec-cast
            (load
             (buffer column_sums_b 'uint32)
             (ramp
              (sca-add
               (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
               16)
              1
              16)
             (aligned 16 0))
            'int32
            16)
           (sca-broadcast (int32_t t5829) 16))
          (vec-add
           (load
            (buffer bias 'int32)
            (ramp (sca-mul output.s0.x.x 16) 1 16)
            (aligned 16 0))
           (sca-broadcast
            (sca-add
             (sca-mul
              (sca-mul (int32_t t5829) (int32_t t5830))
              (int32_t mat_a.extent.0))
             (sca-mul (int32_t t5830) (int32_t t6653)))
            16)))
         (vec-cast
          (load
           (buffer multiplied_no_offsets 'uint32)
           (ramp
            (sca-add
             (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
             4)
            1
            16)
           (aligned 4 0))
          'int32
          16))
        'int64
        16)
       (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
      (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
    (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
   (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
  'int32
  16)
 (sca-broadcast
  (sca-add (int32_t output_shift) (int32_t (bv #xffffffff 32)))
  16))
template:
  (cast
 ...
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (vs-mpy-add
    ...
    (combine
     (vs-mpy-add
      ...
      (combine
       (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
       (vs-mpy-add
        ...
        (combine
         #<load-data>
         (broadcast
          ...
          (sca-add
           (sca-mul
            (sca-mul (int32_t t5829) (int32_t t5830))
            (int32_t mat_a.extent.0))
           (sca-mul (int32_t t5830) (int32_t t6653)))))
        (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
        #f
        #f
        #f
        'int32))
      (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
      #f
      #f
      #f
      'int32)
     (cast ... #<load-data> 'int32 #f))
    (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
    #f
    #f
    #f
    'int32)
   (list (int32_t output_multiplier))
   #f
   #f
   #f
   'int64)
  (int64_t (bv #x000000000000001f 64))
  #t
  x?$2971
  #t)
 'int32
 x?$3327)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$3342 idx) (bv #x0000000080000000 64)) (bvsle (bv #xffffffff80000001 64) (app abstr-vals$3342 idx)))))
optimized-halide-expr:
  (vec-shr
 (vec-cast
  (vec-max
   (vec-min
    #<abstr-halide-expr>
    (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
   (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
  'int32
  16)
 (sca-broadcast
  (sca-add (int32_t output_shift) (int32_t (bv #xffffffff 32)))
  16))
optimized-template:
  (cast ... #<abstr-expr> 'int32 x?$3327)
optimized Halide 0:
  (int32_t
 (bvashr (extract 31 0 (ite (bvsle (bv #xffffffff80000000 64) (ite (bvsle (app abstr-vals$3342 0) (bv #x000000007fffffff 64)) (app abstr-vals$3342 0) (bv #x000000007fffffff 64))) (ite (bvsle (app abstr-vals$3342 0) (bv #x000000007fffffff 64)) (app abstr-vals$3342 0) (bv #x000000007fffffff 64)) (bv #xffffffff80000000 64))) (bvadd (bv #xffffffff 32) output_shift)))
optimized x86 0:
  (int32_t
 (ite x?$3327 (ite (bvslt (app abstr-vals$3342 0) (bv #xffffffff80000000 64)) (bv #x80000000 32) (ite (bvslt (bv #x000000007fffffff 64) (app abstr-vals$3342 0)) (bv #x7fffffff 32) (extract 31 0 (app abstr-vals$3342 0)))) (extract 31 0 (app abstr-vals$3342 0))))
run-x86-synthesizer
halide-expr:
  (vec-shr
 (vec-cast
  (vec-max
   (vec-min
    (vec-add
     (vec-bwand
      (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
      (vec-div
       (vec-mul
        (vec-cast
         (vec-add
          (vec-add
           (vec-mul
            (vec-cast
             (load
              (buffer column_sums_b 'uint32)
              (ramp
               (sca-add
                (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                16)
               1
               16)
              (aligned 16 0))
             'int32
             16)
            (sca-broadcast (int32_t t5829) 16))
           (vec-add
            (load
             (buffer bias 'int32)
             (ramp (sca-mul output.s0.x.x 16) 1 16)
             (aligned 16 0))
            (sca-broadcast
             (sca-add
              (sca-mul
               (sca-mul (int32_t t5829) (int32_t t5830))
               (int32_t mat_a.extent.0))
              (sca-mul (int32_t t5830) (int32_t t6653)))
             16)))
          (vec-cast
           (load
            (buffer multiplied_no_offsets 'uint32)
            (ramp
             (sca-add
              (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
              4)
             1
             16)
            (aligned 4 0))
           'int32
           16))
         'int64
         16)
        (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
       (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
     (vec-div
      (vec-mul
       (vec-cast
        (vec-add
         (vec-add
          (vec-mul
           (vec-cast
            (load
             (buffer column_sums_b 'uint32)
             (ramp
              (sca-add
               (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
               16)
              1
              16)
             (aligned 16 0))
            'int32
            16)
           (sca-broadcast (int32_t t5829) 16))
          (vec-add
           (load
            (buffer bias 'int32)
            (ramp (sca-mul output.s0.x.x 16) 1 16)
            (aligned 16 0))
           (sca-broadcast
            (sca-add
             (sca-mul
              (sca-mul (int32_t t5829) (int32_t t5830))
              (int32_t mat_a.extent.0))
             (sca-mul (int32_t t5830) (int32_t t6653)))
            16)))
         (vec-cast
          (load
           (buffer multiplied_no_offsets 'uint32)
           (ramp
            (sca-add
             (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
             4)
            1
            16)
           (aligned 4 0))
          'int32
          16))
        'int64
        16)
       (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
      (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
    (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
   (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
  'int32
  16)
 (sca-broadcast
  (sca-add (int32_t output_shift) (int32_t (bv #xffffffff 32)))
  16))
template:
  (vs-shift-right
 ...
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (vs-mpy-add
    ...
    (combine
     (vs-mpy-add
      ...
      (combine
       (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
       (vs-mpy-add
        ...
        (combine
         #<load-data>
         (broadcast
          ...
          (sca-add
           (sca-mul
            (sca-mul (int32_t t5829) (int32_t t5830))
            (int32_t mat_a.extent.0))
           (sca-mul (int32_t t5830) (int32_t t6653)))))
        (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
        #f
        #f
        #f
        'int32))
      (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
      #f
      #f
      #f
      'int32)
     (cast ... #<load-data> 'int32 #f))
    (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
    #f
    #f
    #f
    'int32)
   (list (int32_t output_multiplier))
   #f
   #f
   #f
   'int64)
  (int64_t (bv #x000000000000001f 64))
  #t
  x?$2971
  #t)
 (union [(&& (! xi?$3338) (! xi?$3339)) #(struct:sca-add
                                          #(struct:int32_t output_shift)
                                          #(struct:int32_t (bv #xffffffff 32)))] [(|| xi?$3338 (&& xi?$3339 (! xi?$3338))) #(struct:int64_t
                                                                                                                             (ite* (⊢ xi?$3338 (bv #x000000000000001e 64)) (⊢ (&& xi?$3339 (! xi?$3338)) (bv #x000000000000001f 64))))])
 #f
 #f
 #t)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$3343 idx) (bv #x0000000080000000 64)) (bvsle (bv #xffffffff80000001 64) (app abstr-vals$3343 idx)))))
optimized-halide-expr:
  (vec-shr
 (vec-cast
  (vec-max
   (vec-min
    #<abstr-halide-expr>
    (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
   (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
  'int32
  16)
 (sca-broadcast
  (sca-add (int32_t output_shift) (int32_t (bv #xffffffff 32)))
  16))
optimized-template:
  (vs-shift-right
 ...
 #<abstr-expr>
 (union [(&& (! xi?$3338) (! xi?$3339)) #(struct:sca-add
                                          #(struct:int32_t output_shift)
                                          #(struct:int32_t (bv #xffffffff 32)))] [(|| xi?$3338 (&& xi?$3339 (! xi?$3338))) #(struct:int64_t
                                                                                                                             (ite* (⊢ xi?$3338 (bv #x000000000000001e 64)) (⊢ (&& xi?$3339 (! xi?$3338)) (bv #x000000000000001f 64))))])
 #f
 #f
 #t)
optimized Halide 0:
  (int32_t
 (bvashr (extract 31 0 (ite (bvsle (bv #xffffffff80000000 64) (ite (bvsle (app abstr-vals$3343 0) (bv #x000000007fffffff 64)) (app abstr-vals$3343 0) (bv #x000000007fffffff 64))) (ite (bvsle (app abstr-vals$3343 0) (bv #x000000007fffffff 64)) (app abstr-vals$3343 0) (bv #x000000007fffffff 64)) (bv #xffffffff80000000 64))) (bvadd (bv #xffffffff 32) output_shift)))
optimized x86 0:
  (int64_t
 (bvashr (app abstr-vals$3343 0) (ite* (⊢ (&& (! xi?$3338) (! xi?$3339)) (sign-extend (bvadd (bv #xffffffff 32) output_shift) (bitvector 64))) (⊢ (|| xi?$3338 (&& xi?$3339 (! xi?$3338))) (ite* (⊢ xi?$3338 (bv #x000000000000001e 64)) (⊢ (&& xi?$3339 (! xi?$3338)) (bv #x000000000000001f 64)))))))
Ran synthesizer for 25 ms
(unsat)
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (vec-shr
 (vec-cast
  (vec-max
   (vec-min
    (vec-add
     (vec-bwand
      (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
      (vec-div
       (vec-mul
        (vec-cast
         (vec-add
          (vec-add
           (vec-mul
            (vec-cast
             (load
              (buffer column_sums_b 'uint32)
              (ramp
               (sca-add
                (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                16)
               1
               16)
              (aligned 16 0))
             'int32
             16)
            (sca-broadcast (int32_t t5829) 16))
           (vec-add
            (load
             (buffer bias 'int32)
             (ramp (sca-mul output.s0.x.x 16) 1 16)
             (aligned 16 0))
            (sca-broadcast
             (sca-add
              (sca-mul
               (sca-mul (int32_t t5829) (int32_t t5830))
               (int32_t mat_a.extent.0))
              (sca-mul (int32_t t5830) (int32_t t6653)))
             16)))
          (vec-cast
           (load
            (buffer multiplied_no_offsets 'uint32)
            (ramp
             (sca-add
              (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
              4)
             1
             16)
            (aligned 4 0))
           'int32
           16))
         'int64
         16)
        (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
       (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
     (vec-div
      (vec-mul
       (vec-cast
        (vec-add
         (vec-add
          (vec-mul
           (vec-cast
            (load
             (buffer column_sums_b 'uint32)
             (ramp
              (sca-add
               (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
               16)
              1
              16)
             (aligned 16 0))
            'int32
            16)
           (sca-broadcast (int32_t t5829) 16))
          (vec-add
           (load
            (buffer bias 'int32)
            (ramp (sca-mul output.s0.x.x 16) 1 16)
            (aligned 16 0))
           (sca-broadcast
            (sca-add
             (sca-mul
              (sca-mul (int32_t t5829) (int32_t t5830))
              (int32_t mat_a.extent.0))
             (sca-mul (int32_t t5830) (int32_t t6653)))
            16)))
         (vec-cast
          (load
           (buffer multiplied_no_offsets 'uint32)
           (ramp
            (sca-add
             (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
             4)
            1
            16)
           (aligned 4 0))
          'int32
          16))
        'int64
        16)
       (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
      (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
    (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
   (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
  'int32
  16)
 (sca-broadcast
  (sca-add (int32_t output_shift) (int32_t (bv #xffffffff 32)))
  16))
template:
  (vs-shift-right
 ...
 (union [x?$3344 #(struct:cast
                   ...
                   #(struct:vs-shift-right
                     ...
                     #(struct:vs-mpy-add
                       ...
                       #(struct:vs-mpy-add
                         ...
                         #<combine:
                          #(struct:vs-mpy-add
                            ...
                            #<combine:
                             #(struct:vs-mpy-add
                               ...
                               #<load-data>
                               (#(struct:int32_t t5829))
                               #f
                               #f
                               #f
                               int32)
                             #(struct:vs-mpy-add
                               ...
                               #<combine:
                                #<load-data>
                                #(struct:broadcast
                                  ...
                                  #(struct:sca-add
                                    #(struct:sca-mul
                                      #(struct:sca-mul
                                        #(struct:int32_t t5829)
                                        #(struct:int32_t t5830))
                                      #(struct:int32_t mat_a.extent.0))
                                    #(struct:sca-mul
                                      #(struct:int32_t t5830)
                                      #(struct:int32_t t6653))))>
                               (#(struct:int8_t (bv #x01 8))
                                #(struct:int8_t (bv #x01 8)))
                               #f
                               #f
                               #f
                               int32)>
                            (#(struct:int8_t (bv #x01 8))
                             #(struct:int8_t (bv #x01 8)))
                            #f
                            #f
                            #f
                            int32)
                          #(struct:cast ... #<load-data> int32 #f)>
                         (#(struct:int8_t (bv #x01 8))
                          #(struct:int8_t (bv #x01 8)))
                         #f
                         #f
                         #f
                         int32)
                       (#(struct:int32_t output_multiplier))
                       #f
                       #f
                       #f
                       int64)
                     #(struct:int64_t (bv #x000000000000001f 64))
                     #t
                     x?$2971
                     #t)
                   int32
                   #t)] [(! x?$3344) #(struct:broadcast
                                       ...
                                       #(struct:sca-add
                                         #(struct:int32_t output_shift)
                                         #(struct:int32_t (bv #xffffffff 32))))])
 (union [(&& (! xi?$3345) (! xi?$3346)) #(struct:sca-add
                                          #(struct:int32_t output_shift)
                                          #(struct:int32_t (bv #xffffffff 32)))] [(|| xi?$3345 (&& xi?$3346 (! xi?$3345))) #(struct:int64_t
                                                                                                                             (ite* (⊢ xi?$3345 (bv #x000000000000001e 64)) (⊢ (&& xi?$3346 (! xi?$3345)) (bv #x000000000000001f 64))))])
 #f
 #f
 #t)
axioms:
  '()
optimized-halide-expr:
  (vec-shr
 (vec-cast
  (vec-max
   (vec-min
    (vec-add
     (vec-bwand
      (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
      (vec-div
       (vec-mul
        (vec-cast
         (vec-add
          (vec-add
           (vec-mul
            (vec-cast
             (load
              (buffer column_sums_b 'uint32)
              (ramp
               (sca-add
                (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                16)
               1
               16)
              (aligned 16 0))
             'int32
             16)
            (sca-broadcast (int32_t t5829) 16))
           (vec-add
            (load
             (buffer bias 'int32)
             (ramp (sca-mul output.s0.x.x 16) 1 16)
             (aligned 16 0))
            (sca-broadcast
             (sca-add
              (sca-mul
               (sca-mul (int32_t t5829) (int32_t t5830))
               (int32_t mat_a.extent.0))
              (sca-mul (int32_t t5830) (int32_t t6653)))
             16)))
          (vec-cast
           (load
            (buffer multiplied_no_offsets 'uint32)
            (ramp
             (sca-add
              (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
              4)
             1
             16)
            (aligned 4 0))
           'int32
           16))
         'int64
         16)
        (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
       (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
     (vec-div
      (vec-mul
       (vec-cast
        (vec-add
         (vec-add
          (vec-mul
           (vec-cast
            (load
             (buffer column_sums_b 'uint32)
             (ramp
              (sca-add
               (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
               16)
              1
              16)
             (aligned 16 0))
            'int32
            16)
           (sca-broadcast (int32_t t5829) 16))
          (vec-add
           (load
            (buffer bias 'int32)
            (ramp (sca-mul output.s0.x.x 16) 1 16)
            (aligned 16 0))
           (sca-broadcast
            (sca-add
             (sca-mul
              (sca-mul (int32_t t5829) (int32_t t5830))
              (int32_t mat_a.extent.0))
             (sca-mul (int32_t t5830) (int32_t t6653)))
            16)))
         (vec-cast
          (load
           (buffer multiplied_no_offsets 'uint32)
           (ramp
            (sca-add
             (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
             4)
            1
            16)
           (aligned 4 0))
          'int32
          16))
        'int64
        16)
       (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
      (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
    (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
   (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
  'int32
  16)
 (sca-broadcast
  (sca-add (int32_t output_shift) (int32_t (bv #xffffffff 32)))
  16))
optimized-template:
  (vs-shift-right
 ...
 (union [x?$3344 #(struct:cast
                   ...
                   #(struct:vs-shift-right
                     ...
                     #(struct:vs-mpy-add
                       ...
                       #(struct:vs-mpy-add
                         ...
                         #<combine:
                          #(struct:vs-mpy-add
                            ...
                            #<combine:
                             #(struct:vs-mpy-add
                               ...
                               #<load-data>
                               (#(struct:int32_t t5829))
                               #f
                               #f
                               #f
                               int32)
                             #(struct:vs-mpy-add
                               ...
                               #<combine:
                                #<load-data>
                                #(struct:broadcast
                                  ...
                                  #(struct:sca-add
                                    #(struct:sca-mul
                                      #(struct:sca-mul
                                        #(struct:int32_t t5829)
                                        #(struct:int32_t t5830))
                                      #(struct:int32_t mat_a.extent.0))
                                    #(struct:sca-mul
                                      #(struct:int32_t t5830)
                                      #(struct:int32_t t6653))))>
                               (#(struct:int8_t (bv #x01 8))
                                #(struct:int8_t (bv #x01 8)))
                               #f
                               #f
                               #f
                               int32)>
                            (#(struct:int8_t (bv #x01 8))
                             #(struct:int8_t (bv #x01 8)))
                            #f
                            #f
                            #f
                            int32)
                          #(struct:cast ... #<load-data> int32 #f)>
                         (#(struct:int8_t (bv #x01 8))
                          #(struct:int8_t (bv #x01 8)))
                         #f
                         #f
                         #f
                         int32)
                       (#(struct:int32_t output_multiplier))
                       #f
                       #f
                       #f
                       int64)
                     #(struct:int64_t (bv #x000000000000001f 64))
                     #t
                     x?$2971
                     #t)
                   int32
                   #t)] [(! x?$3344) #(struct:broadcast
                                       ...
                                       #(struct:sca-add
                                         #(struct:int32_t output_shift)
                                         #(struct:int32_t (bv #xffffffff 32))))])
 (union [(&& (! xi?$3345) (! xi?$3346)) #(struct:sca-add
                                          #(struct:int32_t output_shift)
                                          #(struct:int32_t (bv #xffffffff 32)))] [(|| xi?$3345 (&& xi?$3346 (! xi?$3345))) #(struct:int64_t
                                                                                                                             (ite* (⊢ xi?$3345 (bv #x000000000000001e 64)) (⊢ (&& xi?$3346 (! xi?$3345)) (bv #x000000000000001f 64))))])
 #f
 #f
 #t)
optimized Halide 0:
  (int32_t
 (bvashr (extract 31 0 (ite (bvsle (bv #xffffffff80000000 64) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64))) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bv #xffffffff80000000 64))) (bvadd (bv #xffffffff 32) output_shift)))
optimized x86 0:
  (int32_t
 (bvashr (ite x?$3344 (ite (bvslt (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001f 64)) (bvand (bv #x0000000000000001 64) (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001e 64)))) (bv #xffffffff80000000 64)) (bv #x80000000 32) (ite (bvslt (bv #x000000007fffffff 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001f 64)) (bvand (bv #x0000000000000001 64) (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001e 64))))) (bv #x7fffffff 32) (extract 31 0 (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001f 64)) (bvand (bv #x0000000000000001 64) (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000001e 64))))))) (bvadd (bv #xffffffff 32) output_shift)) (ite* (⊢ (&& (! xi?$3345) (! xi?$3346)) (bvadd (bv #xffffffff 32) output_shift)) (⊢ (|| xi?$3345 (&& xi?$3346 (! xi?$3345))) (extract 31 0 (ite* (⊢ xi?$3345 (bv #x000000000000001e 64)) (⊢ (&& xi?$3346 (! xi?$3345)) (bv #x000000000000001f 64))))))))
Ran synthesizer for 4491 ms
(model
 [x?$3344 #t]
 [xi?$3345 #f]
 [xi?$3346 #f])
(vec-shr
 (vec-cast
  (vec-max
   (vec-min
    (vec-add
     (vec-bwand
      (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
      (vec-div
       (vec-mul
        (vec-cast
         (vec-add
          (vec-add
           (vec-mul
            (vec-cast
             (load
              (buffer column_sums_b 'uint32)
              (ramp
               (sca-add
                (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                16)
               1
               16)
              (aligned 16 0))
             'int32
             16)
            (sca-broadcast (int32_t t5829) 16))
           (vec-add
            (load
             (buffer bias 'int32)
             (ramp (sca-mul output.s0.x.x 16) 1 16)
             (aligned 16 0))
            (sca-broadcast
             (sca-add
              (sca-mul
               (sca-mul (int32_t t5829) (int32_t t5830))
               (int32_t mat_a.extent.0))
              (sca-mul (int32_t t5830) (int32_t t6653)))
             16)))
          (vec-cast
           (load
            (buffer multiplied_no_offsets 'uint32)
            (ramp
             (sca-add
              (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
              4)
             1
             16)
            (aligned 4 0))
           'int32
           16))
         'int64
         16)
        (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
       (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
     (vec-div
      (vec-mul
       (vec-cast
        (vec-add
         (vec-add
          (vec-mul
           (vec-cast
            (load
             (buffer column_sums_b 'uint32)
             (ramp
              (sca-add
               (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
               16)
              1
              16)
             (aligned 16 0))
            'int32
            16)
           (sca-broadcast (int32_t t5829) 16))
          (vec-add
           (load
            (buffer bias 'int32)
            (ramp (sca-mul output.s0.x.x 16) 1 16)
            (aligned 16 0))
           (sca-broadcast
            (sca-add
             (sca-mul
              (sca-mul (int32_t t5829) (int32_t t5830))
              (int32_t mat_a.extent.0))
             (sca-mul (int32_t t5830) (int32_t t6653)))
            16)))
         (vec-cast
          (load
           (buffer multiplied_no_offsets 'uint32)
           (ramp
            (sca-add
             (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
             4)
            1
            16)
           (aligned 4 0))
          'int32
          16))
        'int64
        16)
       (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
      (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
    (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
   (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
  'int32
  16)
 (sca-broadcast
  (sca-add (int32_t output_shift) (int32_t (bv #xffffffff 32)))
  16))
(vs-shift-right
 ...
 (cast
  ...
  (vs-shift-right
   ...
   (vs-mpy-add
    ...
    (vs-mpy-add
     ...
     (combine
      (vs-mpy-add
       ...
       (combine
        (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
        (vs-mpy-add
         ...
         (combine
          #<load-data>
          (broadcast
           ...
           (sca-add
            (sca-mul
             (sca-mul (int32_t t5829) (int32_t t5830))
             (int32_t mat_a.extent.0))
            (sca-mul (int32_t t5830) (int32_t t6653)))))
         (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
         #f
         #f
         #f
         'int32))
       (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
       #f
       #f
       #f
       'int32)
      (cast ... #<load-data> 'int32 #f))
     (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
     #f
     #f
     #f
     'int32)
    (list (int32_t output_multiplier))
    #f
    #f
    #f
    'int64)
   (int64_t (bv #x000000000000001f 64))
   #t
   x?$2971
   #t)
  'int32
  #t)
 (sca-add (int32_t output_shift) (int32_t (bv #xffffffff 32)))
 #f
 #f
 #t)
Ran bounds analysis for 7417 ms
Ran bounds analysis for 10364 ms
"Extended success?"
#t
(vs-shift-right
 ...
 (cast
  ...
  (vs-shift-right
   ...
   (vs-mpy-add
    ...
    (vs-mpy-add
     ...
     (combine
      (vs-mpy-add
       ...
       (combine
        (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
        (vs-mpy-add
         ...
         (combine
          #<load-data>
          (broadcast
           ...
           (sca-add
            (sca-mul
             (sca-mul (int32_t t5829) (int32_t t5830))
             (int32_t mat_a.extent.0))
            (sca-mul (int32_t t5830) (int32_t t6653)))))
         (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
         #f
         #f
         #f
         'int32))
       (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
       #f
       #f
       #f
       'int32)
      (cast ... #<load-data> 'int32 #f))
     (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
     #f
     #f
     #f
     'int32)
    (list (int32_t output_multiplier))
    #f
    #f
    #f
    'int64)
   (int64_t (bv #x000000000000001f 64))
   #t
   x?$2971
   #t)
  'int32
  #t)
 (sca-add (int32_t output_shift) (int32_t (bv #xffffffff 32)))
 #f
 #f
 #t)
"Building Expr:"
(vec-bwand
 (vec-if
  (sca-broadcast
   (sca-lt (int32_t (bv #x00000000 32)) (int32_t output_shift))
   16)
  (sca-broadcast (int32_t (bv #x00000001 32)) 16)
  (sca-broadcast (int32_t (bv #x00000000 32)) 16))
 (vec-shr
  (vec-cast
   (vec-max
    (vec-min
     (vec-add
      (vec-bwand
       (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
       (vec-div
        (vec-mul
         (vec-cast
          (vec-add
           (vec-add
            (vec-mul
             (vec-cast
              (load
               (buffer column_sums_b 'uint32)
               (ramp
                (sca-add
                 (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                 16)
                1
                16)
               (aligned 16 0))
              'int32
              16)
             (sca-broadcast (int32_t t5829) 16))
            (vec-add
             (load
              (buffer bias 'int32)
              (ramp (sca-mul output.s0.x.x 16) 1 16)
              (aligned 16 0))
             (sca-broadcast
              (sca-add
               (sca-mul
                (sca-mul (int32_t t5829) (int32_t t5830))
                (int32_t mat_a.extent.0))
               (sca-mul (int32_t t5830) (int32_t t6653)))
              16)))
           (vec-cast
            (load
             (buffer multiplied_no_offsets 'uint32)
             (ramp
              (sca-add
               (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
               4)
              1
              16)
             (aligned 4 0))
            'int32
            16))
          'int64
          16)
         (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
        (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
      (vec-div
       (vec-mul
        (vec-cast
         (vec-add
          (vec-add
           (vec-mul
            (vec-cast
             (load
              (buffer column_sums_b 'uint32)
              (ramp
               (sca-add
                (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                16)
               1
               16)
              (aligned 16 0))
             'int32
             16)
            (sca-broadcast (int32_t t5829) 16))
           (vec-add
            (load
             (buffer bias 'int32)
             (ramp (sca-mul output.s0.x.x 16) 1 16)
             (aligned 16 0))
            (sca-broadcast
             (sca-add
              (sca-mul
               (sca-mul (int32_t t5829) (int32_t t5830))
               (int32_t mat_a.extent.0))
              (sca-mul (int32_t t5830) (int32_t t6653)))
             16)))
          (vec-cast
           (load
            (buffer multiplied_no_offsets 'uint32)
            (ramp
             (sca-add
              (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
              4)
             1
             16)
            (aligned 4 0))
           'int32
           16))
         'int64
         16)
        (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
       (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
     (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
    (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
   'int32
   16)
  (sca-broadcast
   (sca-add (int32_t output_shift) (int32_t (bv #xffffffff 32)))
   16)))
"Fold templates"
(list
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (vs-mpy-add
    ...
    (combine
     (vs-mpy-add
      ...
      (combine
       (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
       (vs-mpy-add
        ...
        (combine
         #<load-data>
         (broadcast
          ...
          (sca-add
           (sca-mul
            (sca-mul (int32_t t5829) (int32_t t5830))
            (int32_t mat_a.extent.0))
           (sca-mul (int32_t t5830) (int32_t t6653)))))
        (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
        #f
        #f
        #f
        'int32))
      (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
      #f
      #f
      #f
      'int32)
     (cast ... #<load-data> 'int32 #f))
    (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
    #f
    #f
    #f
    'int32)
   (list (int32_t output_multiplier))
   #f
   #f
   #f
   'int64)
  (union [(&& (! xi?$3353) (! xi?$3354)) #(struct:sca-add
                                           #(struct:int32_t output_shift)
                                           #(struct:int32_t
                                             (bv #xffffffff 32)))] [(|| xi?$3353 (&& xi?$3354 (! xi?$3353))) #(struct:int64_t
                                                                                                               (ite* (⊢ xi?$3353 (bv #x000000000000001e 64)) (⊢ (&& xi?$3354 (! xi?$3353)) (bv #x000000000000001f 64))))])
  #t
  x?$2971
  #t)
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (vs-mpy-add
    ...
    (combine
     (vs-mpy-add
      ...
      (combine
       (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
       (vs-mpy-add
        ...
        (combine
         #<load-data>
         (broadcast
          ...
          (sca-add
           (sca-mul
            (sca-mul (int32_t t5829) (int32_t t5830))
            (int32_t mat_a.extent.0))
           (sca-mul (int32_t t5830) (int32_t t6653)))))
        (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
        #f
        #f
        #f
        'int32))
      (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
      #f
      #f
      #f
      'int32)
     (cast ... #<load-data> 'int32 #f))
    (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
    #f
    #f
    #f
    'int32)
   (list (int32_t output_multiplier))
   #f
   #f
   #f
   'int64)
  (int64_t (bv #x000000000000001f 64))
  x?$3355
  x?$3356
  x?$3357)
 (cast
  ...
  (vs-shift-right
   ...
   (vs-mpy-add
    ...
    (vs-mpy-add
     ...
     (combine
      (vs-mpy-add
       ...
       (combine
        (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
        (vs-mpy-add
         ...
         (combine
          #<load-data>
          (broadcast
           ...
           (sca-add
            (sca-mul
             (sca-mul (int32_t t5829) (int32_t t5830))
             (int32_t mat_a.extent.0))
            (sca-mul (int32_t t5830) (int32_t t6653)))))
         (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
         #f
         #f
         #f
         'int32))
       (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
       #f
       #f
       #f
       'int32)
      (cast ... #<load-data> 'int32 #f))
     (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
     #f
     #f
     #f
     'int32)
    (list (int32_t output_multiplier))
    #f
    #f
    #f
    'int64)
   (int64_t (bv #x000000000000001f 64))
   #t
   x?$2971
   #t)
  'int32
  x?$3352)
 (vs-shift-right
  ...
  (cast
   ...
   (vs-shift-right
    ...
    (vs-mpy-add
     ...
     (vs-mpy-add
      ...
      (combine
       (vs-mpy-add
        ...
        (combine
         (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
         (vs-mpy-add
          ...
          (combine
           #<load-data>
           (broadcast
            ...
            (sca-add
             (sca-mul
              (sca-mul (int32_t t5829) (int32_t t5830))
              (int32_t mat_a.extent.0))
             (sca-mul (int32_t t5830) (int32_t t6653)))))
          (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
          #f
          #f
          #f
          'int32))
        (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
        #f
        #f
        #f
        'int32)
       (cast ... #<load-data> 'int32 #f))
      (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
      #f
      #f
      #f
      'int32)
     (list (int32_t output_multiplier))
     #f
     #f
     #f
     'int64)
    (int64_t (bv #x000000000000001f 64))
    #t
    x?$2971
    #t)
   'int32
   #t)
  (union [(&& (! xi?$3347) (! xi?$3348)) #(struct:sca-add
                                           #(struct:int32_t output_shift)
                                           #(struct:int32_t
                                             (bv #xffffffff 32)))] [(|| xi?$3347 (&& xi?$3348 (! xi?$3347))) #(struct:int64_t
                                                                                                               (ite* (⊢ xi?$3347 (bv #x000000000000001e 64)) (⊢ (&& xi?$3348 (! xi?$3347)) (bv #x000000000000001f 64))))])
  #f
  #f
  #t)
 (vs-shift-right
  ...
  (cast
   ...
   (vs-shift-right
    ...
    (vs-mpy-add
     ...
     (vs-mpy-add
      ...
      (combine
       (vs-mpy-add
        ...
        (combine
         (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
         (vs-mpy-add
          ...
          (combine
           #<load-data>
           (broadcast
            ...
            (sca-add
             (sca-mul
              (sca-mul (int32_t t5829) (int32_t t5830))
              (int32_t mat_a.extent.0))
             (sca-mul (int32_t t5830) (int32_t t6653)))))
          (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
          #f
          #f
          #f
          'int32))
        (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
        #f
        #f
        #f
        'int32)
       (cast ... #<load-data> 'int32 #f))
      (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
      #f
      #f
      #f
      'int32)
     (list (int32_t output_multiplier))
     #f
     #f
     #f
     'int64)
    (int64_t (bv #x000000000000001f 64))
    #t
    x?$2971
    #t)
   'int32
   #t)
  (sca-add (int32_t output_shift) (int32_t (bv #xffffffff 32)))
  x?$3349
  x?$3350
  x?$3351))
here(#(struct:vs-shift-right ... #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<load-data> (#(struct:int32_t t5829)) #f #f #f int32) #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-add #(struct:sca-mul #(struct:sca-mul #(struct:int32_t t5829) #(struct:int32_t t5830)) #(struct:int32_t mat_a.extent.0)) #(struct:sca-mul #(struct:int32_t t5830) #(struct:int32_t t6653))))> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32)> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32) #(struct:cast ... #<load-data> int32 #f)> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32) (#(struct:int32_t output_multiplier)) #f #f #f int64) (union #:size 2 #:hash -841792699282403328) #t x?$2971 #t) #(struct:vs-shift-right ... #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<load-data> (#(struct:int32_t t5829)) #f #f #f int32) #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-add #(struct:sca-mul #(struct:sca-mul #(struct:int32_t t5829) #(struct:int32_t t5830)) #(struct:int32_t mat_a.extent.0)) #(struct:sca-mul #(struct:int32_t t5830) #(struct:int32_t t6653))))> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32)> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32) #(struct:cast ... #<load-data> int32 #f)> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32) (#(struct:int32_t output_multiplier)) #f #f #f int64) #(struct:int64_t (bv #x000000000000001f 64)) x?$3355 x?$3356 x?$3357) #(struct:cast ... #(struct:vs-shift-right ... #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<load-data> (#(struct:int32_t t5829)) #f #f #f int32) #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-add #(struct:sca-mul #(struct:sca-mul #(struct:int32_t t5829) #(struct:int32_t t5830)) #(struct:int32_t mat_a.extent.0)) #(struct:sca-mul #(struct:int32_t t5830) #(struct:int32_t t6653))))> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32)> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32) #(struct:cast ... #<load-data> int32 #f)> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32) (#(struct:int32_t output_multiplier)) #f #f #f int64) #(struct:int64_t (bv #x000000000000001f 64)) #t x?$2971 #t) int32 x?$3352) #(struct:vs-shift-right ... #(struct:cast ... #(struct:vs-shift-right ... #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<load-data> (#(struct:int32_t t5829)) #f #f #f int32) #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-add #(struct:sca-mul #(struct:sca-mul #(struct:int32_t t5829) #(struct:int32_t t5830)) #(struct:int32_t mat_a.extent.0)) #(struct:sca-mul #(struct:int32_t t5830) #(struct:int32_t t6653))))> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32)> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32) #(struct:cast ... #<load-data> int32 #f)> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32) (#(struct:int32_t output_multiplier)) #f #f #f int64) #(struct:int64_t (bv #x000000000000001f 64)) #t x?$2971 #t) int32 #t) (union #:size 2 #:hash -841792699052492689) #f #f #t) #(struct:vs-shift-right ... #(struct:cast ... #(struct:vs-shift-right ... #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<load-data> (#(struct:int32_t t5829)) #f #f #f int32) #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-add #(struct:sca-mul #(struct:sca-mul #(struct:int32_t t5829) #(struct:int32_t t5830)) #(struct:int32_t mat_a.extent.0)) #(struct:sca-mul #(struct:int32_t t5830) #(struct:int32_t t6653))))> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32)> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32) #(struct:cast ... #<load-data> int32 #f)> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32) (#(struct:int32_t output_multiplier)) #f #f #f int64) #(struct:int64_t (bv #x000000000000001f 64)) #t x?$2971 #t) int32 #t) #(struct:sca-add #(struct:int32_t output_shift) #(struct:int32_t (bv #xffffffff 32))) x?$3349 x?$3350 x?$3351))

"Replace templates"
'()
run-x86-synthesizer
halide-expr:
  (vec-bwand
 (vec-if
  (sca-broadcast
   (sca-lt (int32_t (bv #x00000000 32)) (int32_t output_shift))
   16)
  (sca-broadcast (int32_t (bv #x00000001 32)) 16)
  (sca-broadcast (int32_t (bv #x00000000 32)) 16))
 (vec-shr
  (vec-cast
   (vec-max
    (vec-min
     (vec-add
      (vec-bwand
       (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
       (vec-div
        (vec-mul
         (vec-cast
          (vec-add
           (vec-add
            (vec-mul
             (vec-cast
              (load
               (buffer column_sums_b 'uint32)
               (ramp
                (sca-add
                 (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                 16)
                1
                16)
               (aligned 16 0))
              'int32
              16)
             (sca-broadcast (int32_t t5829) 16))
            (vec-add
             (load
              (buffer bias 'int32)
              (ramp (sca-mul output.s0.x.x 16) 1 16)
              (aligned 16 0))
             (sca-broadcast
              (sca-add
               (sca-mul
                (sca-mul (int32_t t5829) (int32_t t5830))
                (int32_t mat_a.extent.0))
               (sca-mul (int32_t t5830) (int32_t t6653)))
              16)))
           (vec-cast
            (load
             (buffer multiplied_no_offsets 'uint32)
             (ramp
              (sca-add
               (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
               4)
              1
              16)
             (aligned 4 0))
            'int32
            16))
          'int64
          16)
         (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
        (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
      (vec-div
       (vec-mul
        (vec-cast
         (vec-add
          (vec-add
           (vec-mul
            (vec-cast
             (load
              (buffer column_sums_b 'uint32)
              (ramp
               (sca-add
                (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                16)
               1
               16)
              (aligned 16 0))
             'int32
             16)
            (sca-broadcast (int32_t t5829) 16))
           (vec-add
            (load
             (buffer bias 'int32)
             (ramp (sca-mul output.s0.x.x 16) 1 16)
             (aligned 16 0))
            (sca-broadcast
             (sca-add
              (sca-mul
               (sca-mul (int32_t t5829) (int32_t t5830))
               (int32_t mat_a.extent.0))
              (sca-mul (int32_t t5830) (int32_t t6653)))
             16)))
          (vec-cast
           (load
            (buffer multiplied_no_offsets 'uint32)
            (ramp
             (sca-add
              (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
              4)
             1
             16)
            (aligned 4 0))
           'int32
           16))
         'int64
         16)
        (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
       (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
     (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
    (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
   'int32
   16)
  (sca-broadcast
   (sca-add (int32_t output_shift) (int32_t (bv #xffffffff 32)))
   16)))
template:
  (vs-shift-right
 ...
 (vs-mpy-add
  ...
  (vs-mpy-add
   ...
   (combine
    (vs-mpy-add
     ...
     (combine
      (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
      (vs-mpy-add
       ...
       (combine
        #<load-data>
        (broadcast
         ...
         (sca-add
          (sca-mul
           (sca-mul (int32_t t5829) (int32_t t5830))
           (int32_t mat_a.extent.0))
          (sca-mul (int32_t t5830) (int32_t t6653)))))
       (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
       #f
       #f
       #f
       'int32))
     (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
     #f
     #f
     #f
     'int32)
    (cast ... #<load-data> 'int32 #f))
   (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
   #f
   #f
   #f
   'int32)
  (list (int32_t output_multiplier))
  #f
  #f
  #f
  'int64)
 (union [(&& (! xi?$3353) (! xi?$3354)) #(struct:sca-add
                                          #(struct:int32_t output_shift)
                                          #(struct:int32_t (bv #xffffffff 32)))] [(|| xi?$3353 (&& xi?$3354 (! xi?$3353))) #(struct:int64_t
                                                                                                                             (ite* (⊢ xi?$3353 (bv #x000000000000001e 64)) (⊢ (&& xi?$3354 (! xi?$3353)) (bv #x000000000000001f 64))))])
 #t
 x?$2971
 #t)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$3358 idx) (bv #x4000000000000000 64)) (bvsle (bv #xc000000080000000 64) (app abstr-vals$3358 idx)))))
optimized-halide-expr:
  (vec-bwand
 (vec-if
  (sca-broadcast
   (sca-lt (int32_t (bv #x00000000 32)) (int32_t output_shift))
   16)
  (sca-broadcast (int32_t (bv #x00000001 32)) 16)
  (sca-broadcast (int32_t (bv #x00000000 32)) 16))
 (vec-shr
  (vec-cast
   (vec-max
    (vec-min
     (vec-add
      (vec-bwand
       (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
       (vec-div
        #<abstr-halide-expr>
        (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
      (vec-div
       #<abstr-halide-expr>
       (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
     (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
    (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
   'int32
   16)
  (sca-broadcast
   (sca-add (int32_t output_shift) (int32_t (bv #xffffffff 32)))
   16)))
optimized-template:
  (vs-shift-right
 ...
 #<abstr-expr>
 (union [(&& (! xi?$3353) (! xi?$3354)) #(struct:sca-add
                                          #(struct:int32_t output_shift)
                                          #(struct:int32_t (bv #xffffffff 32)))] [(|| xi?$3353 (&& xi?$3354 (! xi?$3353))) #(struct:int64_t
                                                                                                                             (ite* (⊢ xi?$3353 (bv #x000000000000001e 64)) (⊢ (&& xi?$3354 (! xi?$3353)) (bv #x000000000000001f 64))))])
 #t
 x?$2971
 #t)
optimized Halide 0:
  (int32_t
 (bvand (ite (bvslt (bv #x00000000 32) output_shift) (bv #x00000001 32) (bv #x00000000 32)) (bvashr (extract 31 0 (ite (bvsle (bv #xffffffff80000000 64) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (app abstr-vals$3358 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$3358 0) (bvneg (bvashr (app abstr-vals$3358 0) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (app abstr-vals$3358 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$3358 0) (bvneg (bvashr (app abstr-vals$3358 0) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (app abstr-vals$3358 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$3358 0) (bvneg (bvashr (app abstr-vals$3358 0) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (app abstr-vals$3358 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$3358 0) (bvneg (bvashr (app abstr-vals$3358 0) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64))) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (app abstr-vals$3358 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$3358 0) (bvneg (bvashr (app abstr-vals$3358 0) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (app abstr-vals$3358 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$3358 0) (bvneg (bvashr (app abstr-vals$3358 0) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (app abstr-vals$3358 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$3358 0) (bvneg (bvashr (app abstr-vals$3358 0) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (app abstr-vals$3358 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$3358 0) (bvneg (bvashr (app abstr-vals$3358 0) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bv #xffffffff80000000 64))) (bvadd (bv #xffffffff 32) output_shift))))
optimized x86 0:
  (int64_t
 (bvadd (bvashr (app abstr-vals$3358 0) (ite* (⊢ (&& (! xi?$3353) (! xi?$3354)) (sign-extend (bvadd (bv #xffffffff 32) output_shift) (bitvector 64))) (⊢ (|| xi?$3353 (&& xi?$3354 (! xi?$3353))) (ite* (⊢ xi?$3353 (bv #x000000000000001e 64)) (⊢ (&& xi?$3354 (! xi?$3353)) (bv #x000000000000001f 64)))))) (bvand (ite (bvslt (bv #x0000000000000000 64) (ite* (⊢ (&& (! xi?$3353) (! xi?$3354)) (sign-extend (bvadd (bv #xffffffff 32) output_shift) (bitvector 64))) (⊢ (|| xi?$3353 (&& xi?$3354 (! xi?$3353))) (ite* (⊢ xi?$3353 (bv #x000000000000001e 64)) (⊢ (&& xi?$3354 (! xi?$3353)) (bv #x000000000000001f 64)))))) (bv #x0000000000000001 64) (bv #x0000000000000000 64)) (bvashr (app abstr-vals$3358 0) (bvadd (bv #xffffffffffffffff 64) (ite* (⊢ (&& (! xi?$3353) (! xi?$3354)) (sign-extend (bvadd (bv #xffffffff 32) output_shift) (bitvector 64))) (⊢ (|| xi?$3353 (&& xi?$3354 (! xi?$3353))) (ite* (⊢ xi?$3353 (bv #x000000000000001e 64)) (⊢ (&& xi?$3354 (! xi?$3353)) (bv #x000000000000001f 64))))))))))
Ran synthesizer for 21 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-bwand
 (vec-if
  (sca-broadcast
   (sca-lt (int32_t (bv #x00000000 32)) (int32_t output_shift))
   16)
  (sca-broadcast (int32_t (bv #x00000001 32)) 16)
  (sca-broadcast (int32_t (bv #x00000000 32)) 16))
 (vec-shr
  (vec-cast
   (vec-max
    (vec-min
     (vec-add
      (vec-bwand
       (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
       (vec-div
        (vec-mul
         (vec-cast
          (vec-add
           (vec-add
            (vec-mul
             (vec-cast
              (load
               (buffer column_sums_b 'uint32)
               (ramp
                (sca-add
                 (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                 16)
                1
                16)
               (aligned 16 0))
              'int32
              16)
             (sca-broadcast (int32_t t5829) 16))
            (vec-add
             (load
              (buffer bias 'int32)
              (ramp (sca-mul output.s0.x.x 16) 1 16)
              (aligned 16 0))
             (sca-broadcast
              (sca-add
               (sca-mul
                (sca-mul (int32_t t5829) (int32_t t5830))
                (int32_t mat_a.extent.0))
               (sca-mul (int32_t t5830) (int32_t t6653)))
              16)))
           (vec-cast
            (load
             (buffer multiplied_no_offsets 'uint32)
             (ramp
              (sca-add
               (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
               4)
              1
              16)
             (aligned 4 0))
            'int32
            16))
          'int64
          16)
         (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
        (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
      (vec-div
       (vec-mul
        (vec-cast
         (vec-add
          (vec-add
           (vec-mul
            (vec-cast
             (load
              (buffer column_sums_b 'uint32)
              (ramp
               (sca-add
                (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                16)
               1
               16)
              (aligned 16 0))
             'int32
             16)
            (sca-broadcast (int32_t t5829) 16))
           (vec-add
            (load
             (buffer bias 'int32)
             (ramp (sca-mul output.s0.x.x 16) 1 16)
             (aligned 16 0))
            (sca-broadcast
             (sca-add
              (sca-mul
               (sca-mul (int32_t t5829) (int32_t t5830))
               (int32_t mat_a.extent.0))
              (sca-mul (int32_t t5830) (int32_t t6653)))
             16)))
          (vec-cast
           (load
            (buffer multiplied_no_offsets 'uint32)
            (ramp
             (sca-add
              (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
              4)
             1
             16)
            (aligned 4 0))
           'int32
           16))
         'int64
         16)
        (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
       (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
     (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
    (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
   'int32
   16)
  (sca-broadcast
   (sca-add (int32_t output_shift) (int32_t (bv #xffffffff 32)))
   16)))
template:
  (vs-shift-right
 ...
 (vs-mpy-add
  ...
  (vs-mpy-add
   ...
   (combine
    (vs-mpy-add
     ...
     (combine
      (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
      (vs-mpy-add
       ...
       (combine
        #<load-data>
        (broadcast
         ...
         (sca-add
          (sca-mul
           (sca-mul (int32_t t5829) (int32_t t5830))
           (int32_t mat_a.extent.0))
          (sca-mul (int32_t t5830) (int32_t t6653)))))
       (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
       #f
       #f
       #f
       'int32))
     (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
     #f
     #f
     #f
     'int32)
    (cast ... #<load-data> 'int32 #f))
   (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
   #f
   #f
   #f
   'int32)
  (list (int32_t output_multiplier))
  #f
  #f
  #f
  'int64)
 (int64_t (bv #x000000000000001f 64))
 x?$3355
 x?$3356
 x?$3357)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$3359 idx) (bv #x4000000000000000 64)) (bvsle (bv #xc000000080000000 64) (app abstr-vals$3359 idx)))))
optimized-halide-expr:
  (vec-bwand
 (vec-if
  (sca-broadcast
   (sca-lt (int32_t (bv #x00000000 32)) (int32_t output_shift))
   16)
  (sca-broadcast (int32_t (bv #x00000001 32)) 16)
  (sca-broadcast (int32_t (bv #x00000000 32)) 16))
 (vec-shr
  (vec-cast
   (vec-max
    (vec-min
     (vec-add
      (vec-bwand
       (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
       (vec-div
        #<abstr-halide-expr>
        (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
      (vec-div
       #<abstr-halide-expr>
       (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
     (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
    (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
   'int32
   16)
  (sca-broadcast
   (sca-add (int32_t output_shift) (int32_t (bv #xffffffff 32)))
   16)))
optimized-template:
  (vs-shift-right
 ...
 #<abstr-expr>
 (int64_t (bv #x000000000000001f 64))
 x?$3355
 x?$3356
 x?$3357)
optimized Halide 0:
  (int32_t
 (bvand (ite (bvslt (bv #x00000000 32) output_shift) (bv #x00000001 32) (bv #x00000000 32)) (bvashr (extract 31 0 (ite (bvsle (bv #xffffffff80000000 64) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (app abstr-vals$3359 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$3359 0) (bvneg (bvashr (app abstr-vals$3359 0) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (app abstr-vals$3359 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$3359 0) (bvneg (bvashr (app abstr-vals$3359 0) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (app abstr-vals$3359 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$3359 0) (bvneg (bvashr (app abstr-vals$3359 0) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (app abstr-vals$3359 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$3359 0) (bvneg (bvashr (app abstr-vals$3359 0) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64))) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (app abstr-vals$3359 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$3359 0) (bvneg (bvashr (app abstr-vals$3359 0) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (app abstr-vals$3359 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$3359 0) (bvneg (bvashr (app abstr-vals$3359 0) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (app abstr-vals$3359 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$3359 0) (bvneg (bvashr (app abstr-vals$3359 0) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (app abstr-vals$3359 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$3359 0) (bvneg (bvashr (app abstr-vals$3359 0) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bv #xffffffff80000000 64))) (bvadd (bv #xffffffff 32) output_shift))))
optimized x86 0:
  (int64_t
 (ite x?$3355 (bvadd (ite x?$3357 (bvashr (app abstr-vals$3359 0) (bv #x000000000000001f 64)) (bvlshr (app abstr-vals$3359 0) (bv #x000000000000001f 64))) (bvand (bv #x0000000000000001 64) (ite x?$3357 (bvashr (app abstr-vals$3359 0) (bv #x000000000000001e 64)) (bvlshr (app abstr-vals$3359 0) (bv #x000000000000001e 64))))) (ite x?$3357 (bvashr (app abstr-vals$3359 0) (bv #x000000000000001f 64)) (bvlshr (app abstr-vals$3359 0) (bv #x000000000000001f 64)))))
run-x86-synthesizer
halide-expr:
  (vec-bwand
 (vec-if
  (sca-broadcast
   (sca-lt (int32_t (bv #x00000000 32)) (int32_t output_shift))
   16)
  (sca-broadcast (int32_t (bv #x00000001 32)) 16)
  (sca-broadcast (int32_t (bv #x00000000 32)) 16))
 (vec-shr
  (vec-cast
   (vec-max
    (vec-min
     (vec-add
      (vec-bwand
       (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
       (vec-div
        (vec-mul
         (vec-cast
          (vec-add
           (vec-add
            (vec-mul
             (vec-cast
              (load
               (buffer column_sums_b 'uint32)
               (ramp
                (sca-add
                 (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                 16)
                1
                16)
               (aligned 16 0))
              'int32
              16)
             (sca-broadcast (int32_t t5829) 16))
            (vec-add
             (load
              (buffer bias 'int32)
              (ramp (sca-mul output.s0.x.x 16) 1 16)
              (aligned 16 0))
             (sca-broadcast
              (sca-add
               (sca-mul
                (sca-mul (int32_t t5829) (int32_t t5830))
                (int32_t mat_a.extent.0))
               (sca-mul (int32_t t5830) (int32_t t6653)))
              16)))
           (vec-cast
            (load
             (buffer multiplied_no_offsets 'uint32)
             (ramp
              (sca-add
               (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
               4)
              1
              16)
             (aligned 4 0))
            'int32
            16))
          'int64
          16)
         (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
        (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
      (vec-div
       (vec-mul
        (vec-cast
         (vec-add
          (vec-add
           (vec-mul
            (vec-cast
             (load
              (buffer column_sums_b 'uint32)
              (ramp
               (sca-add
                (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                16)
               1
               16)
              (aligned 16 0))
             'int32
             16)
            (sca-broadcast (int32_t t5829) 16))
           (vec-add
            (load
             (buffer bias 'int32)
             (ramp (sca-mul output.s0.x.x 16) 1 16)
             (aligned 16 0))
            (sca-broadcast
             (sca-add
              (sca-mul
               (sca-mul (int32_t t5829) (int32_t t5830))
               (int32_t mat_a.extent.0))
              (sca-mul (int32_t t5830) (int32_t t6653)))
             16)))
          (vec-cast
           (load
            (buffer multiplied_no_offsets 'uint32)
            (ramp
             (sca-add
              (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
              4)
             1
             16)
            (aligned 4 0))
           'int32
           16))
         'int64
         16)
        (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
       (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
     (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
    (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
   'int32
   16)
  (sca-broadcast
   (sca-add (int32_t output_shift) (int32_t (bv #xffffffff 32)))
   16)))
template:
  (cast
 ...
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (vs-mpy-add
    ...
    (combine
     (vs-mpy-add
      ...
      (combine
       (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
       (vs-mpy-add
        ...
        (combine
         #<load-data>
         (broadcast
          ...
          (sca-add
           (sca-mul
            (sca-mul (int32_t t5829) (int32_t t5830))
            (int32_t mat_a.extent.0))
           (sca-mul (int32_t t5830) (int32_t t6653)))))
        (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
        #f
        #f
        #f
        'int32))
      (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
      #f
      #f
      #f
      'int32)
     (cast ... #<load-data> 'int32 #f))
    (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
    #f
    #f
    #f
    'int32)
   (list (int32_t output_multiplier))
   #f
   #f
   #f
   'int64)
  (int64_t (bv #x000000000000001f 64))
  #t
  x?$2971
  #t)
 'int32
 x?$3352)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$3360 idx) (bv #x0000000080000000 64)) (bvsle (bv #xffffffff80000001 64) (app abstr-vals$3360 idx)))))
optimized-halide-expr:
  (vec-bwand
 (vec-if
  (sca-broadcast
   (sca-lt (int32_t (bv #x00000000 32)) (int32_t output_shift))
   16)
  (sca-broadcast (int32_t (bv #x00000001 32)) 16)
  (sca-broadcast (int32_t (bv #x00000000 32)) 16))
 (vec-shr
  (vec-cast
   (vec-max
    (vec-min
     #<abstr-halide-expr>
     (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
    (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
   'int32
   16)
  (sca-broadcast
   (sca-add (int32_t output_shift) (int32_t (bv #xffffffff 32)))
   16)))
optimized-template:
  (cast ... #<abstr-expr> 'int32 x?$3352)
optimized Halide 0:
  (int32_t
 (bvand (ite (bvslt (bv #x00000000 32) output_shift) (bv #x00000001 32) (bv #x00000000 32)) (bvashr (extract 31 0 (ite (bvsle (bv #xffffffff80000000 64) (ite (bvsle (app abstr-vals$3360 0) (bv #x000000007fffffff 64)) (app abstr-vals$3360 0) (bv #x000000007fffffff 64))) (ite (bvsle (app abstr-vals$3360 0) (bv #x000000007fffffff 64)) (app abstr-vals$3360 0) (bv #x000000007fffffff 64)) (bv #xffffffff80000000 64))) (bvadd (bv #xffffffff 32) output_shift))))
optimized x86 0:
  (int32_t
 (ite x?$3352 (ite (bvslt (app abstr-vals$3360 0) (bv #xffffffff80000000 64)) (bv #x80000000 32) (ite (bvslt (bv #x000000007fffffff 64) (app abstr-vals$3360 0)) (bv #x7fffffff 32) (extract 31 0 (app abstr-vals$3360 0)))) (extract 31 0 (app abstr-vals$3360 0))))
run-x86-synthesizer
halide-expr:
  (vec-bwand
 (vec-if
  (sca-broadcast
   (sca-lt (int32_t (bv #x00000000 32)) (int32_t output_shift))
   16)
  (sca-broadcast (int32_t (bv #x00000001 32)) 16)
  (sca-broadcast (int32_t (bv #x00000000 32)) 16))
 (vec-shr
  (vec-cast
   (vec-max
    (vec-min
     (vec-add
      (vec-bwand
       (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
       (vec-div
        (vec-mul
         (vec-cast
          (vec-add
           (vec-add
            (vec-mul
             (vec-cast
              (load
               (buffer column_sums_b 'uint32)
               (ramp
                (sca-add
                 (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                 16)
                1
                16)
               (aligned 16 0))
              'int32
              16)
             (sca-broadcast (int32_t t5829) 16))
            (vec-add
             (load
              (buffer bias 'int32)
              (ramp (sca-mul output.s0.x.x 16) 1 16)
              (aligned 16 0))
             (sca-broadcast
              (sca-add
               (sca-mul
                (sca-mul (int32_t t5829) (int32_t t5830))
                (int32_t mat_a.extent.0))
               (sca-mul (int32_t t5830) (int32_t t6653)))
              16)))
           (vec-cast
            (load
             (buffer multiplied_no_offsets 'uint32)
             (ramp
              (sca-add
               (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
               4)
              1
              16)
             (aligned 4 0))
            'int32
            16))
          'int64
          16)
         (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
        (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
      (vec-div
       (vec-mul
        (vec-cast
         (vec-add
          (vec-add
           (vec-mul
            (vec-cast
             (load
              (buffer column_sums_b 'uint32)
              (ramp
               (sca-add
                (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                16)
               1
               16)
              (aligned 16 0))
             'int32
             16)
            (sca-broadcast (int32_t t5829) 16))
           (vec-add
            (load
             (buffer bias 'int32)
             (ramp (sca-mul output.s0.x.x 16) 1 16)
             (aligned 16 0))
            (sca-broadcast
             (sca-add
              (sca-mul
               (sca-mul (int32_t t5829) (int32_t t5830))
               (int32_t mat_a.extent.0))
              (sca-mul (int32_t t5830) (int32_t t6653)))
             16)))
          (vec-cast
           (load
            (buffer multiplied_no_offsets 'uint32)
            (ramp
             (sca-add
              (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
              4)
             1
             16)
            (aligned 4 0))
           'int32
           16))
         'int64
         16)
        (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
       (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
     (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
    (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
   'int32
   16)
  (sca-broadcast
   (sca-add (int32_t output_shift) (int32_t (bv #xffffffff 32)))
   16)))
template:
  (vs-shift-right
 ...
 (cast
  ...
  (vs-shift-right
   ...
   (vs-mpy-add
    ...
    (vs-mpy-add
     ...
     (combine
      (vs-mpy-add
       ...
       (combine
        (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
        (vs-mpy-add
         ...
         (combine
          #<load-data>
          (broadcast
           ...
           (sca-add
            (sca-mul
             (sca-mul (int32_t t5829) (int32_t t5830))
             (int32_t mat_a.extent.0))
            (sca-mul (int32_t t5830) (int32_t t6653)))))
         (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
         #f
         #f
         #f
         'int32))
       (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
       #f
       #f
       #f
       'int32)
      (cast ... #<load-data> 'int32 #f))
     (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
     #f
     #f
     #f
     'int32)
    (list (int32_t output_multiplier))
    #f
    #f
    #f
    'int64)
   (int64_t (bv #x000000000000001f 64))
   #t
   x?$2971
   #t)
  'int32
  #t)
 (union [(&& (! xi?$3347) (! xi?$3348)) #(struct:sca-add
                                          #(struct:int32_t output_shift)
                                          #(struct:int32_t (bv #xffffffff 32)))] [(|| xi?$3347 (&& xi?$3348 (! xi?$3347))) #(struct:int64_t
                                                                                                                             (ite* (⊢ xi?$3347 (bv #x000000000000001e 64)) (⊢ (&& xi?$3348 (! xi?$3347)) (bv #x000000000000001f 64))))])
 #f
 #f
 #t)
axioms:
  (list (forall (idx) (bvsle (bv #x80000001 32) (app abstr-vals$3361 idx))))
optimized-halide-expr:
  (vec-bwand
 (vec-if
  (sca-broadcast
   (sca-lt (int32_t (bv #x00000000 32)) (int32_t output_shift))
   16)
  (sca-broadcast (int32_t (bv #x00000001 32)) 16)
  (sca-broadcast (int32_t (bv #x00000000 32)) 16))
 (vec-shr
  #<abstr-halide-expr>
  (sca-broadcast
   (sca-add (int32_t output_shift) (int32_t (bv #xffffffff 32)))
   16)))
optimized-template:
  (vs-shift-right
 ...
 #<abstr-expr>
 (union [(&& (! xi?$3347) (! xi?$3348)) #(struct:sca-add
                                          #(struct:int32_t output_shift)
                                          #(struct:int32_t (bv #xffffffff 32)))] [(|| xi?$3347 (&& xi?$3348 (! xi?$3347))) #(struct:int64_t
                                                                                                                             (ite* (⊢ xi?$3347 (bv #x000000000000001e 64)) (⊢ (&& xi?$3348 (! xi?$3347)) (bv #x000000000000001f 64))))])
 #f
 #f
 #t)
optimized Halide 0:
  (int32_t
 (bvand (ite (bvslt (bv #x00000000 32) output_shift) (bv #x00000001 32) (bv #x00000000 32)) (bvashr (app abstr-vals$3361 0) (bvadd (bv #xffffffff 32) output_shift))))
optimized x86 0:
  (int32_t
 (bvashr (app abstr-vals$3361 0) (ite* (⊢ (&& (! xi?$3347) (! xi?$3348)) (bvadd (bv #xffffffff 32) output_shift)) (⊢ (|| xi?$3347 (&& xi?$3348 (! xi?$3347))) (extract 31 0 (ite* (⊢ xi?$3347 (bv #x000000000000001e 64)) (⊢ (&& xi?$3348 (! xi?$3347)) (bv #x000000000000001f 64))))))))
Ran synthesizer for 126 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-bwand
 (vec-if
  (sca-broadcast
   (sca-lt (int32_t (bv #x00000000 32)) (int32_t output_shift))
   16)
  (sca-broadcast (int32_t (bv #x00000001 32)) 16)
  (sca-broadcast (int32_t (bv #x00000000 32)) 16))
 (vec-shr
  (vec-cast
   (vec-max
    (vec-min
     (vec-add
      (vec-bwand
       (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
       (vec-div
        (vec-mul
         (vec-cast
          (vec-add
           (vec-add
            (vec-mul
             (vec-cast
              (load
               (buffer column_sums_b 'uint32)
               (ramp
                (sca-add
                 (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                 16)
                1
                16)
               (aligned 16 0))
              'int32
              16)
             (sca-broadcast (int32_t t5829) 16))
            (vec-add
             (load
              (buffer bias 'int32)
              (ramp (sca-mul output.s0.x.x 16) 1 16)
              (aligned 16 0))
             (sca-broadcast
              (sca-add
               (sca-mul
                (sca-mul (int32_t t5829) (int32_t t5830))
                (int32_t mat_a.extent.0))
               (sca-mul (int32_t t5830) (int32_t t6653)))
              16)))
           (vec-cast
            (load
             (buffer multiplied_no_offsets 'uint32)
             (ramp
              (sca-add
               (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
               4)
              1
              16)
             (aligned 4 0))
            'int32
            16))
          'int64
          16)
         (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
        (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
      (vec-div
       (vec-mul
        (vec-cast
         (vec-add
          (vec-add
           (vec-mul
            (vec-cast
             (load
              (buffer column_sums_b 'uint32)
              (ramp
               (sca-add
                (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                16)
               1
               16)
              (aligned 16 0))
             'int32
             16)
            (sca-broadcast (int32_t t5829) 16))
           (vec-add
            (load
             (buffer bias 'int32)
             (ramp (sca-mul output.s0.x.x 16) 1 16)
             (aligned 16 0))
            (sca-broadcast
             (sca-add
              (sca-mul
               (sca-mul (int32_t t5829) (int32_t t5830))
               (int32_t mat_a.extent.0))
              (sca-mul (int32_t t5830) (int32_t t6653)))
             16)))
          (vec-cast
           (load
            (buffer multiplied_no_offsets 'uint32)
            (ramp
             (sca-add
              (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
              4)
             1
             16)
            (aligned 4 0))
           'int32
           16))
         'int64
         16)
        (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
       (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
     (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
    (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
   'int32
   16)
  (sca-broadcast
   (sca-add (int32_t output_shift) (int32_t (bv #xffffffff 32)))
   16)))
template:
  (vs-shift-right
 ...
 (cast
  ...
  (vs-shift-right
   ...
   (vs-mpy-add
    ...
    (vs-mpy-add
     ...
     (combine
      (vs-mpy-add
       ...
       (combine
        (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
        (vs-mpy-add
         ...
         (combine
          #<load-data>
          (broadcast
           ...
           (sca-add
            (sca-mul
             (sca-mul (int32_t t5829) (int32_t t5830))
             (int32_t mat_a.extent.0))
            (sca-mul (int32_t t5830) (int32_t t6653)))))
         (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
         #f
         #f
         #f
         'int32))
       (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
       #f
       #f
       #f
       'int32)
      (cast ... #<load-data> 'int32 #f))
     (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
     #f
     #f
     #f
     'int32)
    (list (int32_t output_multiplier))
    #f
    #f
    #f
    'int64)
   (int64_t (bv #x000000000000001f 64))
   #t
   x?$2971
   #t)
  'int32
  #t)
 (sca-add (int32_t output_shift) (int32_t (bv #xffffffff 32)))
 x?$3349
 x?$3350
 x?$3351)
axioms:
  (list (forall (idx) (bvsle (bv #x80000001 32) (app abstr-vals$3362 idx))))
optimized-halide-expr:
  (vec-bwand
 (vec-if
  (sca-broadcast
   (sca-lt (int32_t (bv #x00000000 32)) (int32_t output_shift))
   16)
  (sca-broadcast (int32_t (bv #x00000001 32)) 16)
  (sca-broadcast (int32_t (bv #x00000000 32)) 16))
 (vec-shr
  #<abstr-halide-expr>
  (sca-broadcast
   (sca-add (int32_t output_shift) (int32_t (bv #xffffffff 32)))
   16)))
optimized-template:
  (vs-shift-right
 ...
 #<abstr-expr>
 (sca-add (int32_t output_shift) (int32_t (bv #xffffffff 32)))
 x?$3349
 x?$3350
 x?$3351)
optimized Halide 0:
  (int32_t
 (bvand (ite (bvslt (bv #x00000000 32) output_shift) (bv #x00000001 32) (bv #x00000000 32)) (bvashr (app abstr-vals$3362 0) (bvadd (bv #xffffffff 32) output_shift))))
optimized x86 0:
  (int32_t
 (ite x?$3349 (bvadd (ite x?$3351 (bvashr (app abstr-vals$3362 0) (bvadd (bv #xffffffff 32) output_shift)) (bvlshr (app abstr-vals$3362 0) (bvadd (bv #xffffffff 32) output_shift))) (bvand (ite (bvslt (bv #x00000000 32) (bvadd (bv #xffffffff 32) output_shift)) (bv #x00000001 32) (bv #x00000000 32)) (ite x?$3351 (bvashr (app abstr-vals$3362 0) (bvadd (bv #xfffffffe 32) output_shift)) (bvlshr (app abstr-vals$3362 0) (bvadd (bv #xfffffffe 32) output_shift))))) (ite x?$3351 (bvashr (app abstr-vals$3362 0) (bvadd (bv #xffffffff 32) output_shift)) (bvlshr (app abstr-vals$3362 0) (bvadd (bv #xffffffff 32) output_shift)))))
Ran synthesizer for 142 ms
(unsat)
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (vec-bwand
 (vec-if
  (sca-broadcast
   (sca-lt (int32_t (bv #x00000000 32)) (int32_t output_shift))
   16)
  (sca-broadcast (int32_t (bv #x00000001 32)) 16)
  (sca-broadcast (int32_t (bv #x00000000 32)) 16))
 (vec-shr
  (vec-cast
   (vec-max
    (vec-min
     (vec-add
      (vec-bwand
       (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
       (vec-div
        (vec-mul
         (vec-cast
          (vec-add
           (vec-add
            (vec-mul
             (vec-cast
              (load
               (buffer column_sums_b 'uint32)
               (ramp
                (sca-add
                 (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                 16)
                1
                16)
               (aligned 16 0))
              'int32
              16)
             (sca-broadcast (int32_t t5829) 16))
            (vec-add
             (load
              (buffer bias 'int32)
              (ramp (sca-mul output.s0.x.x 16) 1 16)
              (aligned 16 0))
             (sca-broadcast
              (sca-add
               (sca-mul
                (sca-mul (int32_t t5829) (int32_t t5830))
                (int32_t mat_a.extent.0))
               (sca-mul (int32_t t5830) (int32_t t6653)))
              16)))
           (vec-cast
            (load
             (buffer multiplied_no_offsets 'uint32)
             (ramp
              (sca-add
               (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
               4)
              1
              16)
             (aligned 4 0))
            'int32
            16))
          'int64
          16)
         (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
        (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
      (vec-div
       (vec-mul
        (vec-cast
         (vec-add
          (vec-add
           (vec-mul
            (vec-cast
             (load
              (buffer column_sums_b 'uint32)
              (ramp
               (sca-add
                (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                16)
               1
               16)
              (aligned 16 0))
             'int32
             16)
            (sca-broadcast (int32_t t5829) 16))
           (vec-add
            (load
             (buffer bias 'int32)
             (ramp (sca-mul output.s0.x.x 16) 1 16)
             (aligned 16 0))
            (sca-broadcast
             (sca-add
              (sca-mul
               (sca-mul (int32_t t5829) (int32_t t5830))
               (int32_t mat_a.extent.0))
              (sca-mul (int32_t t5830) (int32_t t6653)))
             16)))
          (vec-cast
           (load
            (buffer multiplied_no_offsets 'uint32)
            (ramp
             (sca-add
              (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
              4)
             1
             16)
            (aligned 4 0))
           'int32
           16))
         'int64
         16)
        (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
       (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
     (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
    (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
   'int32
   16)
  (sca-broadcast
   (sca-add (int32_t output_shift) (int32_t (bv #xffffffff 32)))
   16)))
template:
  (bitwise-op
 ...
 'and
 (select
  ...
  (broadcast ... (sca-lt (int32_t (bv #x00000000 32)) (int32_t output_shift)))
  (broadcast ... (int32_t (bv #x00000001 32)))
  (broadcast ... (int32_t (bv #x00000000 32))))
 (vs-shift-right
  ...
  (cast
   ...
   (vs-shift-right
    ...
    (vs-mpy-add
     ...
     (vs-mpy-add
      ...
      (combine
       (vs-mpy-add
        ...
        (combine
         (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
         (vs-mpy-add
          ...
          (combine
           #<load-data>
           (broadcast
            ...
            (sca-add
             (sca-mul
              (sca-mul (int32_t t5829) (int32_t t5830))
              (int32_t mat_a.extent.0))
             (sca-mul (int32_t t5830) (int32_t t6653)))))
          (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
          #f
          #f
          #f
          'int32))
        (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
        #f
        #f
        #f
        'int32)
       (cast ... #<load-data> 'int32 #f))
      (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
      #f
      #f
      #f
      'int32)
     (list (int32_t output_multiplier))
     #f
     #f
     #f
     'int64)
    (int64_t (bv #x000000000000001f 64))
    #t
    x?$2971
    #t)
   'int32
   #t)
  (sca-add (int32_t output_shift) (int32_t (bv #xffffffff 32)))
  #f
  #f
  #t))
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$3363 idx) (bv #x00000001 32)) (bvsle (bv #x00000000 32) (app abstr-vals$3363 idx))))
 (forall (idx) (bvsle (bv #x80000001 32) (app abstr-vals$3364 idx))))
optimized-halide-expr:
  (vec-bwand #<abstr-halide-expr> #<abstr-halide-expr>)
optimized-template:
  (bitwise-op ... 'and #<abstr-expr> #<abstr-expr>)
optimized Halide 0:
  (int32_t (bvand (app abstr-vals$3363 0) (app abstr-vals$3364 0)))
optimized x86 0:
  (int32_t (bvand (app abstr-vals$3363 0) (app abstr-vals$3364 0)))
Ran synthesizer for 38 ms
(model)
(vec-bwand #<abstr-halide-expr> #<abstr-halide-expr>)
(bitwise-op
 ...
 'and
 (select
  ...
  (broadcast ... (sca-lt (int32_t (bv #x00000000 32)) (int32_t output_shift)))
  (broadcast ... (int32_t (bv #x00000001 32)))
  (broadcast ... (int32_t (bv #x00000000 32))))
 (vs-shift-right
  ...
  (cast
   ...
   (vs-shift-right
    ...
    (vs-mpy-add
     ...
     (vs-mpy-add
      ...
      (combine
       (vs-mpy-add
        ...
        (combine
         (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
         (vs-mpy-add
          ...
          (combine
           #<load-data>
           (broadcast
            ...
            (sca-add
             (sca-mul
              (sca-mul (int32_t t5829) (int32_t t5830))
              (int32_t mat_a.extent.0))
             (sca-mul (int32_t t5830) (int32_t t6653)))))
          (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
          #f
          #f
          #f
          'int32))
        (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
        #f
        #f
        #f
        'int32)
       (cast ... #<load-data> 'int32 #f))
      (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
      #f
      #f
      #f
      'int32)
     (list (int32_t output_multiplier))
     #f
     #f
     #f
     'int64)
    (int64_t (bv #x000000000000001f 64))
    #t
    x?$2971
    #t)
   'int32
   #t)
  (sca-add (int32_t output_shift) (int32_t (bv #xffffffff 32)))
  #f
  #f
  #t))
Ran bounds analysis for 25 ms
Ran bounds analysis for 29 ms
"Extended success?"
#t
(bitwise-op
 ...
 'and
 (select
  ...
  (broadcast ... (sca-lt (int32_t (bv #x00000000 32)) (int32_t output_shift)))
  (broadcast ... (int32_t (bv #x00000001 32)))
  (broadcast ... (int32_t (bv #x00000000 32))))
 (vs-shift-right
  ...
  (cast
   ...
   (vs-shift-right
    ...
    (vs-mpy-add
     ...
     (vs-mpy-add
      ...
      (combine
       (vs-mpy-add
        ...
        (combine
         (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
         (vs-mpy-add
          ...
          (combine
           #<load-data>
           (broadcast
            ...
            (sca-add
             (sca-mul
              (sca-mul (int32_t t5829) (int32_t t5830))
              (int32_t mat_a.extent.0))
             (sca-mul (int32_t t5830) (int32_t t6653)))))
          (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
          #f
          #f
          #f
          'int32))
        (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
        #f
        #f
        #f
        'int32)
       (cast ... #<load-data> 'int32 #f))
      (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
      #f
      #f
      #f
      'int32)
     (list (int32_t output_multiplier))
     #f
     #f
     #f
     'int64)
    (int64_t (bv #x000000000000001f 64))
    #t
    x?$2971
    #t)
   'int32
   #t)
  (sca-add (int32_t output_shift) (int32_t (bv #xffffffff 32)))
  #f
  #f
  #t))
"Building Expr:"
(vec-add
 (vec-shr
  (vec-cast
   (vec-max
    (vec-min
     (vec-add
      (vec-bwand
       (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
       (vec-div
        (vec-mul
         (vec-cast
          (vec-add
           (vec-add
            (vec-mul
             (vec-cast
              (load
               (buffer column_sums_b 'uint32)
               (ramp
                (sca-add
                 (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                 16)
                1
                16)
               (aligned 16 0))
              'int32
              16)
             (sca-broadcast (int32_t t5829) 16))
            (vec-add
             (load
              (buffer bias 'int32)
              (ramp (sca-mul output.s0.x.x 16) 1 16)
              (aligned 16 0))
             (sca-broadcast
              (sca-add
               (sca-mul
                (sca-mul (int32_t t5829) (int32_t t5830))
                (int32_t mat_a.extent.0))
               (sca-mul (int32_t t5830) (int32_t t6653)))
              16)))
           (vec-cast
            (load
             (buffer multiplied_no_offsets 'uint32)
             (ramp
              (sca-add
               (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
               4)
              1
              16)
             (aligned 4 0))
            'int32
            16))
          'int64
          16)
         (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
        (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
      (vec-div
       (vec-mul
        (vec-cast
         (vec-add
          (vec-add
           (vec-mul
            (vec-cast
             (load
              (buffer column_sums_b 'uint32)
              (ramp
               (sca-add
                (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                16)
               1
               16)
              (aligned 16 0))
             'int32
             16)
            (sca-broadcast (int32_t t5829) 16))
           (vec-add
            (load
             (buffer bias 'int32)
             (ramp (sca-mul output.s0.x.x 16) 1 16)
             (aligned 16 0))
            (sca-broadcast
             (sca-add
              (sca-mul
               (sca-mul (int32_t t5829) (int32_t t5830))
               (int32_t mat_a.extent.0))
              (sca-mul (int32_t t5830) (int32_t t6653)))
             16)))
          (vec-cast
           (load
            (buffer multiplied_no_offsets 'uint32)
            (ramp
             (sca-add
              (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
              4)
             1
             16)
            (aligned 4 0))
           'int32
           16))
         'int64
         16)
        (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
       (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
     (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
    (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
   'int32
   16)
  (sca-broadcast (int32_t output_shift) 16))
 (vec-bwand
  (vec-if
   (sca-broadcast
    (sca-lt (int32_t (bv #x00000000 32)) (int32_t output_shift))
    16)
   (sca-broadcast (int32_t (bv #x00000001 32)) 16)
   (sca-broadcast (int32_t (bv #x00000000 32)) 16))
  (vec-shr
   (vec-cast
    (vec-max
     (vec-min
      (vec-add
       (vec-bwand
        (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
        (vec-div
         (vec-mul
          (vec-cast
           (vec-add
            (vec-add
             (vec-mul
              (vec-cast
               (load
                (buffer column_sums_b 'uint32)
                (ramp
                 (sca-add
                  (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                  16)
                 1
                 16)
                (aligned 16 0))
               'int32
               16)
              (sca-broadcast (int32_t t5829) 16))
             (vec-add
              (load
               (buffer bias 'int32)
               (ramp (sca-mul output.s0.x.x 16) 1 16)
               (aligned 16 0))
              (sca-broadcast
               (sca-add
                (sca-mul
                 (sca-mul (int32_t t5829) (int32_t t5830))
                 (int32_t mat_a.extent.0))
                (sca-mul (int32_t t5830) (int32_t t6653)))
               16)))
            (vec-cast
             (load
              (buffer multiplied_no_offsets 'uint32)
              (ramp
               (sca-add
                (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
                4)
               1
               16)
              (aligned 4 0))
             'int32
             16))
           'int64
           16)
          (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
         (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
       (vec-div
        (vec-mul
         (vec-cast
          (vec-add
           (vec-add
            (vec-mul
             (vec-cast
              (load
               (buffer column_sums_b 'uint32)
               (ramp
                (sca-add
                 (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                 16)
                1
                16)
               (aligned 16 0))
              'int32
              16)
             (sca-broadcast (int32_t t5829) 16))
            (vec-add
             (load
              (buffer bias 'int32)
              (ramp (sca-mul output.s0.x.x 16) 1 16)
              (aligned 16 0))
             (sca-broadcast
              (sca-add
               (sca-mul
                (sca-mul (int32_t t5829) (int32_t t5830))
                (int32_t mat_a.extent.0))
               (sca-mul (int32_t t5830) (int32_t t6653)))
              16)))
           (vec-cast
            (load
             (buffer multiplied_no_offsets 'uint32)
             (ramp
              (sca-add
               (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
               4)
              1
              16)
             (aligned 4 0))
            'int32
            16))
          'int64
          16)
         (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
        (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
      (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
     (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
    'int32
    16)
   (sca-broadcast
    (sca-add (int32_t output_shift) (int32_t (bv #xffffffff 32)))
    16))))
"Fold templates"
(list
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (vs-mpy-add
    ...
    (combine
     (vs-mpy-add
      ...
      (combine
       (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
       (vs-mpy-add
        ...
        (combine
         #<load-data>
         (broadcast
          ...
          (sca-add
           (sca-mul
            (sca-mul (int32_t t5829) (int32_t t5830))
            (int32_t mat_a.extent.0))
           (sca-mul (int32_t t5830) (int32_t t6653)))))
        (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
        #f
        #f
        #f
        'int32))
      (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
      #f
      #f
      #f
      'int32)
     (cast ... #<load-data> 'int32 #f))
    (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
    #f
    #f
    #f
    'int32)
   (list (int32_t output_multiplier))
   #f
   #f
   #f
   'int64)
  (union [xi?$3374 #(struct:int32_t output_shift)] [(&& (! xi?$3374) (&& (! xi?$3375) (! xi?$3376))) #(struct:sca-add
                                                                                                       #(struct:int32_t
                                                                                                         output_shift)
                                                                                                       #(struct:int32_t
                                                                                                         (bv #xffffffff 32)))] [(&& (! xi?$3374) (|| xi?$3375 (&& xi?$3376 (! xi?$3375)))) #(struct:int64_t
                                                                                                                                                                                             (ite* (⊢ xi?$3375 (bv #x000000000000001e 64)) (⊢ (&& xi?$3376 (! xi?$3375)) (bv #x000000000000001f 64))))])
  #t
  x?$2971
  #t)
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (vs-mpy-add
    ...
    (combine
     (vs-mpy-add
      ...
      (combine
       (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
       (vs-mpy-add
        ...
        (combine
         #<load-data>
         (broadcast
          ...
          (sca-add
           (sca-mul
            (sca-mul (int32_t t5829) (int32_t t5830))
            (int32_t mat_a.extent.0))
           (sca-mul (int32_t t5830) (int32_t t6653)))))
        (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
        #f
        #f
        #f
        'int32))
      (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
      #f
      #f
      #f
      'int32)
     (cast ... #<load-data> 'int32 #f))
    (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
    #f
    #f
    #f
    'int32)
   (list (int32_t output_multiplier))
   #f
   #f
   #f
   'int64)
  (int64_t (bv #x000000000000001f 64))
  x?$3377
  x?$3378
  x?$3379)
 (cast
  ...
  (vs-shift-right
   ...
   (vs-mpy-add
    ...
    (vs-mpy-add
     ...
     (combine
      (vs-mpy-add
       ...
       (combine
        (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
        (vs-mpy-add
         ...
         (combine
          #<load-data>
          (broadcast
           ...
           (sca-add
            (sca-mul
             (sca-mul (int32_t t5829) (int32_t t5830))
             (int32_t mat_a.extent.0))
            (sca-mul (int32_t t5830) (int32_t t6653)))))
         (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
         #f
         #f
         #f
         'int32))
       (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
       #f
       #f
       #f
       'int32)
      (cast ... #<load-data> 'int32 #f))
     (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
     #f
     #f
     #f
     'int32)
    (list (int32_t output_multiplier))
    #f
    #f
    #f
    'int64)
   (int64_t (bv #x000000000000001f 64))
   #t
   x?$2971
   #t)
  'int32
  x?$3373)
 (vs-shift-right
  ...
  (cast
   ...
   (vs-shift-right
    ...
    (vs-mpy-add
     ...
     (vs-mpy-add
      ...
      (combine
       (vs-mpy-add
        ...
        (combine
         (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
         (vs-mpy-add
          ...
          (combine
           #<load-data>
           (broadcast
            ...
            (sca-add
             (sca-mul
              (sca-mul (int32_t t5829) (int32_t t5830))
              (int32_t mat_a.extent.0))
             (sca-mul (int32_t t5830) (int32_t t6653)))))
          (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
          #f
          #f
          #f
          'int32))
        (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
        #f
        #f
        #f
        'int32)
       (cast ... #<load-data> 'int32 #f))
      (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
      #f
      #f
      #f
      'int32)
     (list (int32_t output_multiplier))
     #f
     #f
     #f
     'int64)
    (int64_t (bv #x000000000000001f 64))
    #t
    x?$2971
    #t)
   'int32
   #t)
  (union [xi?$3367 #(struct:int32_t output_shift)] [(&& (! xi?$3367) (&& (! xi?$3368) (! xi?$3369))) #(struct:sca-add
                                                                                                       #(struct:int32_t
                                                                                                         output_shift)
                                                                                                       #(struct:int32_t
                                                                                                         (bv #xffffffff 32)))] [(&& (! xi?$3367) (|| xi?$3368 (&& xi?$3369 (! xi?$3368)))) #(struct:int64_t
                                                                                                                                                                                             (ite* (⊢ xi?$3368 (bv #x000000000000001e 64)) (⊢ (&& xi?$3369 (! xi?$3368)) (bv #x000000000000001f 64))))])
  #f
  #f
  #t)
 (vs-shift-right
  ...
  (cast
   ...
   (vs-shift-right
    ...
    (vs-mpy-add
     ...
     (vs-mpy-add
      ...
      (combine
       (vs-mpy-add
        ...
        (combine
         (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
         (vs-mpy-add
          ...
          (combine
           #<load-data>
           (broadcast
            ...
            (sca-add
             (sca-mul
              (sca-mul (int32_t t5829) (int32_t t5830))
              (int32_t mat_a.extent.0))
             (sca-mul (int32_t t5830) (int32_t t6653)))))
          (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
          #f
          #f
          #f
          'int32))
        (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
        #f
        #f
        #f
        'int32)
       (cast ... #<load-data> 'int32 #f))
      (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
      #f
      #f
      #f
      'int32)
     (list (int32_t output_multiplier))
     #f
     #f
     #f
     'int64)
    (int64_t (bv #x000000000000001f 64))
    #t
    x?$2971
    #t)
   'int32
   #t)
  (int32_t output_shift)
  x?$3370
  x?$3371
  x?$3372)
 (cast
  ...
  (vs-shift-right
   ...
   (vs-mpy-add
    ...
    (vs-mpy-add
     ...
     (combine
      (vs-mpy-add
       ...
       (combine
        (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
        (vs-mpy-add
         ...
         (combine
          #<load-data>
          (broadcast
           ...
           (sca-add
            (sca-mul
             (sca-mul (int32_t t5829) (int32_t t5830))
             (int32_t mat_a.extent.0))
            (sca-mul (int32_t t5830) (int32_t t6653)))))
         (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
         #f
         #f
         #f
         'int32))
       (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
       #f
       #f
       #f
       'int32)
      (cast ... #<load-data> 'int32 #f))
     (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
     #f
     #f
     #f
     'int32)
    (list (int32_t output_multiplier))
    #f
    #f
    #f
    'int64)
   (int64_t (bv #x000000000000001f 64))
   #t
   x?$2971
   #t)
  'int32
  x?$3386)
 (vs-shift-right
  ...
  (cast
   ...
   (vs-shift-right
    ...
    (vs-mpy-add
     ...
     (vs-mpy-add
      ...
      (combine
       (vs-mpy-add
        ...
        (combine
         (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
         (vs-mpy-add
          ...
          (combine
           #<load-data>
           (broadcast
            ...
            (sca-add
             (sca-mul
              (sca-mul (int32_t t5829) (int32_t t5830))
              (int32_t mat_a.extent.0))
             (sca-mul (int32_t t5830) (int32_t t6653)))))
          (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
          #f
          #f
          #f
          'int32))
        (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
        #f
        #f
        #f
        'int32)
       (cast ... #<load-data> 'int32 #f))
      (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
      #f
      #f
      #f
      'int32)
     (list (int32_t output_multiplier))
     #f
     #f
     #f
     'int64)
    (int64_t (bv #x000000000000001f 64))
    #t
    x?$2971
    #t)
   'int32
   #t)
  (union [xi?$3380 #(struct:int32_t output_shift)] [(&& (! xi?$3380) (&& (! xi?$3381) (! xi?$3382))) #(struct:sca-add
                                                                                                       #(struct:int32_t
                                                                                                         output_shift)
                                                                                                       #(struct:int32_t
                                                                                                         (bv #xffffffff 32)))] [(&& (! xi?$3380) (|| xi?$3381 (&& xi?$3382 (! xi?$3381)))) #(struct:int64_t
                                                                                                                                                                                             (ite* (⊢ xi?$3381 (bv #x000000000000001e 64)) (⊢ (&& xi?$3382 (! xi?$3381)) (bv #x000000000000001f 64))))])
  #f
  #f
  #t)
 (vs-shift-right
  ...
  (cast
   ...
   (vs-shift-right
    ...
    (vs-mpy-add
     ...
     (vs-mpy-add
      ...
      (combine
       (vs-mpy-add
        ...
        (combine
         (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
         (vs-mpy-add
          ...
          (combine
           #<load-data>
           (broadcast
            ...
            (sca-add
             (sca-mul
              (sca-mul (int32_t t5829) (int32_t t5830))
              (int32_t mat_a.extent.0))
             (sca-mul (int32_t t5830) (int32_t t6653)))))
          (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
          #f
          #f
          #f
          'int32))
        (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
        #f
        #f
        #f
        'int32)
       (cast ... #<load-data> 'int32 #f))
      (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
      #f
      #f
      #f
      'int32)
     (list (int32_t output_multiplier))
     #f
     #f
     #f
     'int64)
    (int64_t (bv #x000000000000001f 64))
    #t
    x?$2971
    #t)
   'int32
   #t)
  (sca-add (int32_t output_shift) (int32_t (bv #xffffffff 32)))
  x?$3383
  x?$3384
  x?$3385))
here(#(struct:vs-shift-right ... #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<load-data> (#(struct:int32_t t5829)) #f #f #f int32) #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-add #(struct:sca-mul #(struct:sca-mul #(struct:int32_t t5829) #(struct:int32_t t5830)) #(struct:int32_t mat_a.extent.0)) #(struct:sca-mul #(struct:int32_t t5830) #(struct:int32_t t6653))))> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32)> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32) #(struct:cast ... #<load-data> int32 #f)> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32) (#(struct:int32_t output_multiplier)) #f #f #f int64) (union #:size 3 #:hash -841562876392507780) #t x?$2971 #t) #(struct:vs-shift-right ... #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<load-data> (#(struct:int32_t t5829)) #f #f #f int32) #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-add #(struct:sca-mul #(struct:sca-mul #(struct:int32_t t5829) #(struct:int32_t t5830)) #(struct:int32_t mat_a.extent.0)) #(struct:sca-mul #(struct:int32_t t5830) #(struct:int32_t t6653))))> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32)> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32) #(struct:cast ... #<load-data> int32 #f)> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32) (#(struct:int32_t output_multiplier)) #f #f #f int64) #(struct:int64_t (bv #x000000000000001f 64)) x?$3377 x?$3378 x?$3379) #(struct:cast ... #(struct:vs-shift-right ... #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<load-data> (#(struct:int32_t t5829)) #f #f #f int32) #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-add #(struct:sca-mul #(struct:sca-mul #(struct:int32_t t5829) #(struct:int32_t t5830)) #(struct:int32_t mat_a.extent.0)) #(struct:sca-mul #(struct:int32_t t5830) #(struct:int32_t t6653))))> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32)> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32) #(struct:cast ... #<load-data> int32 #f)> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32) (#(struct:int32_t output_multiplier)) #f #f #f int64) #(struct:int64_t (bv #x000000000000001f 64)) #t x?$2971 #t) int32 x?$3373) #(struct:vs-shift-right ... #(struct:cast ... #(struct:vs-shift-right ... #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<load-data> (#(struct:int32_t t5829)) #f #f #f int32) #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-add #(struct:sca-mul #(struct:sca-mul #(struct:int32_t t5829) #(struct:int32_t t5830)) #(struct:int32_t mat_a.extent.0)) #(struct:sca-mul #(struct:int32_t t5830) #(struct:int32_t t6653))))> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32)> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32) #(struct:cast ... #<load-data> int32 #f)> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32) (#(struct:int32_t output_multiplier)) #f #f #f int64) #(struct:int64_t (bv #x000000000000001f 64)) #t x?$2971 #t) int32 #t) (union #:size 3 #:hash -841562842386011122) #f #f #t) #(struct:vs-shift-right ... #(struct:cast ... #(struct:vs-shift-right ... #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<load-data> (#(struct:int32_t t5829)) #f #f #f int32) #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-add #(struct:sca-mul #(struct:sca-mul #(struct:int32_t t5829) #(struct:int32_t t5830)) #(struct:int32_t mat_a.extent.0)) #(struct:sca-mul #(struct:int32_t t5830) #(struct:int32_t t6653))))> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32)> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32) #(struct:cast ... #<load-data> int32 #f)> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32) (#(struct:int32_t output_multiplier)) #f #f #f int64) #(struct:int64_t (bv #x000000000000001f 64)) #t x?$2971 #t) int32 #t) #(struct:int32_t output_shift) x?$3370 x?$3371 x?$3372) #(struct:cast ... #(struct:vs-shift-right ... #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<load-data> (#(struct:int32_t t5829)) #f #f #f int32) #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-add #(struct:sca-mul #(struct:sca-mul #(struct:int32_t t5829) #(struct:int32_t t5830)) #(struct:int32_t mat_a.extent.0)) #(struct:sca-mul #(struct:int32_t t5830) #(struct:int32_t t6653))))> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32)> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32) #(struct:cast ... #<load-data> int32 #f)> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32) (#(struct:int32_t output_multiplier)) #f #f #f int64) #(struct:int64_t (bv #x000000000000001f 64)) #t x?$2971 #t) int32 x?$3386) #(struct:vs-shift-right ... #(struct:cast ... #(struct:vs-shift-right ... #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<load-data> (#(struct:int32_t t5829)) #f #f #f int32) #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-add #(struct:sca-mul #(struct:sca-mul #(struct:int32_t t5829) #(struct:int32_t t5830)) #(struct:int32_t mat_a.extent.0)) #(struct:sca-mul #(struct:int32_t t5830) #(struct:int32_t t6653))))> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32)> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32) #(struct:cast ... #<load-data> int32 #f)> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32) (#(struct:int32_t output_multiplier)) #f #f #f int64) #(struct:int64_t (bv #x000000000000001f 64)) #t x?$2971 #t) int32 #t) (union #:size 3 #:hash -841562874462598678) #f #f #t) #(struct:vs-shift-right ... #(struct:cast ... #(struct:vs-shift-right ... #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<load-data> (#(struct:int32_t t5829)) #f #f #f int32) #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-add #(struct:sca-mul #(struct:sca-mul #(struct:int32_t t5829) #(struct:int32_t t5830)) #(struct:int32_t mat_a.extent.0)) #(struct:sca-mul #(struct:int32_t t5830) #(struct:int32_t t6653))))> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32)> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32) #(struct:cast ... #<load-data> int32 #f)> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32) (#(struct:int32_t output_multiplier)) #f #f #f int64) #(struct:int64_t (bv #x000000000000001f 64)) #t x?$2971 #t) int32 #t) #(struct:sca-add #(struct:int32_t output_shift) #(struct:int32_t (bv #xffffffff 32))) x?$3383 x?$3384 x?$3385))

"Replace templates"
(list
 (vs-mpy-add
  ...
  (vs-shift-right
   ...
   (vs-mpy-add
    ...
    (vs-mpy-add
     ...
     (combine
      (vs-mpy-add
       ...
       (combine
        (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
        (vs-mpy-add
         ...
         (combine
          #<load-data>
          (broadcast
           ...
           (sca-add
            (sca-mul
             (sca-mul (int32_t t5829) (int32_t t5830))
             (int32_t mat_a.extent.0))
            (sca-mul (int32_t t5830) (int32_t t6653)))))
         (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
         #f
         #f
         #f
         'int32))
       (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
       #f
       #f
       #f
       'int32)
      (cast ... #<load-data> 'int32 #f))
     (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
     #f
     #f
     #f
     'int32)
    (list (int32_t output_multiplier))
    #f
    #f
    #f
    'int64)
   (int64_t (bv #x000000000000001f 64))
   #t
   x?$2971
   #t)
  (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
  (! x?$3389)
  (! x?$3390)
  (! x?$3391)
  'int32)
 (vs-mpy-add
  ...
  (vs-shift-right
   ...
   (vs-mpy-add
    ...
    (vs-mpy-add
     ...
     (combine
      (vs-mpy-add
       ...
       (combine
        (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
        (vs-mpy-add
         ...
         (combine
          #<load-data>
          (broadcast
           ...
           (sca-add
            (sca-mul
             (sca-mul (int32_t t5829) (int32_t t5830))
             (int32_t mat_a.extent.0))
            (sca-mul (int32_t t5830) (int32_t t6653)))))
         (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
         #f
         #f
         #f
         'int32))
       (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
       #f
       #f
       #f
       'int32)
      (cast ... #<load-data> 'int32 #f))
     (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
     #f
     #f
     #f
     'int32)
    (list (int32_t output_multiplier))
    #f
    #f
    #f
    'int64)
   (int64_t (bv #x000000000000001f 64))
   #t
   x?$2971
   #t)
  (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
  (! x?$3394)
  (! x?$3395)
  (! x?$3396)
  'int32))
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-shr
  (vec-cast
   (vec-max
    (vec-min
     (vec-add
      (vec-bwand
       (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
       (vec-div
        (vec-mul
         (vec-cast
          (vec-add
           (vec-add
            (vec-mul
             (vec-cast
              (load
               (buffer column_sums_b 'uint32)
               (ramp
                (sca-add
                 (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                 16)
                1
                16)
               (aligned 16 0))
              'int32
              16)
             (sca-broadcast (int32_t t5829) 16))
            (vec-add
             (load
              (buffer bias 'int32)
              (ramp (sca-mul output.s0.x.x 16) 1 16)
              (aligned 16 0))
             (sca-broadcast
              (sca-add
               (sca-mul
                (sca-mul (int32_t t5829) (int32_t t5830))
                (int32_t mat_a.extent.0))
               (sca-mul (int32_t t5830) (int32_t t6653)))
              16)))
           (vec-cast
            (load
             (buffer multiplied_no_offsets 'uint32)
             (ramp
              (sca-add
               (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
               4)
              1
              16)
             (aligned 4 0))
            'int32
            16))
          'int64
          16)
         (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
        (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
      (vec-div
       (vec-mul
        (vec-cast
         (vec-add
          (vec-add
           (vec-mul
            (vec-cast
             (load
              (buffer column_sums_b 'uint32)
              (ramp
               (sca-add
                (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                16)
               1
               16)
              (aligned 16 0))
             'int32
             16)
            (sca-broadcast (int32_t t5829) 16))
           (vec-add
            (load
             (buffer bias 'int32)
             (ramp (sca-mul output.s0.x.x 16) 1 16)
             (aligned 16 0))
            (sca-broadcast
             (sca-add
              (sca-mul
               (sca-mul (int32_t t5829) (int32_t t5830))
               (int32_t mat_a.extent.0))
              (sca-mul (int32_t t5830) (int32_t t6653)))
             16)))
          (vec-cast
           (load
            (buffer multiplied_no_offsets 'uint32)
            (ramp
             (sca-add
              (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
              4)
             1
             16)
            (aligned 4 0))
           'int32
           16))
         'int64
         16)
        (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
       (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
     (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
    (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
   'int32
   16)
  (sca-broadcast (int32_t output_shift) 16))
 (vec-bwand
  (vec-if
   (sca-broadcast
    (sca-lt (int32_t (bv #x00000000 32)) (int32_t output_shift))
    16)
   (sca-broadcast (int32_t (bv #x00000001 32)) 16)
   (sca-broadcast (int32_t (bv #x00000000 32)) 16))
  (vec-shr
   (vec-cast
    (vec-max
     (vec-min
      (vec-add
       (vec-bwand
        (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
        (vec-div
         (vec-mul
          (vec-cast
           (vec-add
            (vec-add
             (vec-mul
              (vec-cast
               (load
                (buffer column_sums_b 'uint32)
                (ramp
                 (sca-add
                  (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                  16)
                 1
                 16)
                (aligned 16 0))
               'int32
               16)
              (sca-broadcast (int32_t t5829) 16))
             (vec-add
              (load
               (buffer bias 'int32)
               (ramp (sca-mul output.s0.x.x 16) 1 16)
               (aligned 16 0))
              (sca-broadcast
               (sca-add
                (sca-mul
                 (sca-mul (int32_t t5829) (int32_t t5830))
                 (int32_t mat_a.extent.0))
                (sca-mul (int32_t t5830) (int32_t t6653)))
               16)))
            (vec-cast
             (load
              (buffer multiplied_no_offsets 'uint32)
              (ramp
               (sca-add
                (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
                4)
               1
               16)
              (aligned 4 0))
             'int32
             16))
           'int64
           16)
          (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
         (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
       (vec-div
        (vec-mul
         (vec-cast
          (vec-add
           (vec-add
            (vec-mul
             (vec-cast
              (load
               (buffer column_sums_b 'uint32)
               (ramp
                (sca-add
                 (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                 16)
                1
                16)
               (aligned 16 0))
              'int32
              16)
             (sca-broadcast (int32_t t5829) 16))
            (vec-add
             (load
              (buffer bias 'int32)
              (ramp (sca-mul output.s0.x.x 16) 1 16)
              (aligned 16 0))
             (sca-broadcast
              (sca-add
               (sca-mul
                (sca-mul (int32_t t5829) (int32_t t5830))
                (int32_t mat_a.extent.0))
               (sca-mul (int32_t t5830) (int32_t t6653)))
              16)))
           (vec-cast
            (load
             (buffer multiplied_no_offsets 'uint32)
             (ramp
              (sca-add
               (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
               4)
              1
              16)
             (aligned 4 0))
            'int32
            16))
          'int64
          16)
         (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
        (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
      (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
     (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
    'int32
    16)
   (sca-broadcast
    (sca-add (int32_t output_shift) (int32_t (bv #xffffffff 32)))
    16))))
template:
  (vs-shift-right
 ...
 (vs-mpy-add
  ...
  (vs-mpy-add
   ...
   (combine
    (vs-mpy-add
     ...
     (combine
      (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
      (vs-mpy-add
       ...
       (combine
        #<load-data>
        (broadcast
         ...
         (sca-add
          (sca-mul
           (sca-mul (int32_t t5829) (int32_t t5830))
           (int32_t mat_a.extent.0))
          (sca-mul (int32_t t5830) (int32_t t6653)))))
       (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
       #f
       #f
       #f
       'int32))
     (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
     #f
     #f
     #f
     'int32)
    (cast ... #<load-data> 'int32 #f))
   (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
   #f
   #f
   #f
   'int32)
  (list (int32_t output_multiplier))
  #f
  #f
  #f
  'int64)
 (union [xi?$3374 #(struct:int32_t output_shift)] [(&& (! xi?$3374) (&& (! xi?$3375) (! xi?$3376))) #(struct:sca-add
                                                                                                      #(struct:int32_t
                                                                                                        output_shift)
                                                                                                      #(struct:int32_t
                                                                                                        (bv #xffffffff 32)))] [(&& (! xi?$3374) (|| xi?$3375 (&& xi?$3376 (! xi?$3375)))) #(struct:int64_t
                                                                                                                                                                                            (ite* (⊢ xi?$3375 (bv #x000000000000001e 64)) (⊢ (&& xi?$3376 (! xi?$3375)) (bv #x000000000000001f 64))))])
 #t
 x?$2971
 #t)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$3397 idx) (bv #x4000000000000000 64)) (bvsle (bv #xc000000080000000 64) (app abstr-vals$3397 idx)))))
optimized-halide-expr:
  (vec-add
 (vec-shr
  (vec-cast
   (vec-max
    (vec-min
     (vec-add
      (vec-bwand
       (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
       (vec-div
        #<abstr-halide-expr>
        (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
      (vec-div
       #<abstr-halide-expr>
       (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
     (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
    (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
   'int32
   16)
  (sca-broadcast (int32_t output_shift) 16))
 (vec-bwand
  (vec-if
   (sca-broadcast
    (sca-lt (int32_t (bv #x00000000 32)) (int32_t output_shift))
    16)
   (sca-broadcast (int32_t (bv #x00000001 32)) 16)
   (sca-broadcast (int32_t (bv #x00000000 32)) 16))
  (vec-shr
   (vec-cast
    (vec-max
     (vec-min
      (vec-add
       (vec-bwand
        (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
        (vec-div
         #<abstr-halide-expr>
         (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
       (vec-div
        #<abstr-halide-expr>
        (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
      (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
     (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
    'int32
    16)
   (sca-broadcast
    (sca-add (int32_t output_shift) (int32_t (bv #xffffffff 32)))
    16))))
optimized-template:
  (vs-shift-right
 ...
 #<abstr-expr>
 (union [xi?$3374 #(struct:int32_t output_shift)] [(&& (! xi?$3374) (&& (! xi?$3375) (! xi?$3376))) #(struct:sca-add
                                                                                                      #(struct:int32_t
                                                                                                        output_shift)
                                                                                                      #(struct:int32_t
                                                                                                        (bv #xffffffff 32)))] [(&& (! xi?$3374) (|| xi?$3375 (&& xi?$3376 (! xi?$3375)))) #(struct:int64_t
                                                                                                                                                                                            (ite* (⊢ xi?$3375 (bv #x000000000000001e 64)) (⊢ (&& xi?$3376 (! xi?$3375)) (bv #x000000000000001f 64))))])
 #t
 x?$2971
 #t)
optimized Halide 0:
  (int32_t
 (bvadd (bvashr (extract 31 0 (ite (bvsle (bv #xffffffff80000000 64) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (app abstr-vals$3397 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$3397 0) (bvneg (bvashr (app abstr-vals$3397 0) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (app abstr-vals$3397 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$3397 0) (bvneg (bvashr (app abstr-vals$3397 0) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (app abstr-vals$3397 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$3397 0) (bvneg (bvashr (app abstr-vals$3397 0) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (app abstr-vals$3397 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$3397 0) (bvneg (bvashr (app abstr-vals$3397 0) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64))) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (app abstr-vals$3397 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$3397 0) (bvneg (bvashr (app abstr-vals$3397 0) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (app abstr-vals$3397 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$3397 0) (bvneg (bvashr (app abstr-vals$3397 0) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (app abstr-vals$3397 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$3397 0) (bvneg (bvashr (app abstr-vals$3397 0) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (app abstr-vals$3397 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$3397 0) (bvneg (bvashr (app abstr-vals$3397 0) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bv #xffffffff80000000 64))) output_shift) (bvand (ite (bvslt (bv #x00000000 32) output_shift) (bv #x00000001 32) (bv #x00000000 32)) (bvashr (extract 31 0 (ite (bvsle (bv #xffffffff80000000 64) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (app abstr-vals$3397 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$3397 0) (bvneg (bvashr (app abstr-vals$3397 0) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (app abstr-vals$3397 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$3397 0) (bvneg (bvashr (app abstr-vals$3397 0) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (app abstr-vals$3397 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$3397 0) (bvneg (bvashr (app abstr-vals$3397 0) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (app abstr-vals$3397 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$3397 0) (bvneg (bvashr (app abstr-vals$3397 0) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64))) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (app abstr-vals$3397 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$3397 0) (bvneg (bvashr (app abstr-vals$3397 0) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (app abstr-vals$3397 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$3397 0) (bvneg (bvashr (app abstr-vals$3397 0) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (app abstr-vals$3397 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$3397 0) (bvneg (bvashr (app abstr-vals$3397 0) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (app abstr-vals$3397 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$3397 0) (bvneg (bvashr (app abstr-vals$3397 0) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bv #xffffffff80000000 64))) (bvadd (bv #xffffffff 32) output_shift)))))
optimized x86 0:
  (int64_t
 (bvadd (bvashr (app abstr-vals$3397 0) (ite* (⊢ (&& (! xi?$3374) (|| xi?$3375 (&& xi?$3376 (! xi?$3375)))) (ite* (⊢ xi?$3375 (bv #x000000000000001e 64)) (⊢ (&& xi?$3376 (! xi?$3375)) (bv #x000000000000001f 64)))) (⊢ (|| xi?$3374 (&& (! xi?$3374) (&& (! xi?$3375) (! xi?$3376)))) (sign-extend (ite* (⊢ xi?$3374 output_shift) (⊢ (&& (! xi?$3374) (&& (! xi?$3375) (! xi?$3376))) (bvadd (bv #xffffffff 32) output_shift))) (bitvector 64))))) (bvand (ite (bvslt (bv #x0000000000000000 64) (ite* (⊢ (&& (! xi?$3374) (|| xi?$3375 (&& xi?$3376 (! xi?$3375)))) (ite* (⊢ xi?$3375 (bv #x000000000000001e 64)) (⊢ (&& xi?$3376 (! xi?$3375)) (bv #x000000000000001f 64)))) (⊢ (|| xi?$3374 (&& (! xi?$3374) (&& (! xi?$3375) (! xi?$3376)))) (sign-extend (ite* (⊢ xi?$3374 output_shift) (⊢ (&& (! xi?$3374) (&& (! xi?$3375) (! xi?$3376))) (bvadd (bv #xffffffff 32) output_shift))) (bitvector 64))))) (bv #x0000000000000001 64) (bv #x0000000000000000 64)) (bvashr (app abstr-vals$3397 0) (bvadd (bv #xffffffffffffffff 64) (ite* (⊢ (&& (! xi?$3374) (|| xi?$3375 (&& xi?$3376 (! xi?$3375)))) (ite* (⊢ xi?$3375 (bv #x000000000000001e 64)) (⊢ (&& xi?$3376 (! xi?$3375)) (bv #x000000000000001f 64)))) (⊢ (|| xi?$3374 (&& (! xi?$3374) (&& (! xi?$3375) (! xi?$3376)))) (sign-extend (ite* (⊢ xi?$3374 output_shift) (⊢ (&& (! xi?$3374) (&& (! xi?$3375) (! xi?$3376))) (bvadd (bv #xffffffff 32) output_shift))) (bitvector 64)))))))))
Ran synthesizer for 23 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-shr
  (vec-cast
   (vec-max
    (vec-min
     (vec-add
      (vec-bwand
       (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
       (vec-div
        (vec-mul
         (vec-cast
          (vec-add
           (vec-add
            (vec-mul
             (vec-cast
              (load
               (buffer column_sums_b 'uint32)
               (ramp
                (sca-add
                 (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                 16)
                1
                16)
               (aligned 16 0))
              'int32
              16)
             (sca-broadcast (int32_t t5829) 16))
            (vec-add
             (load
              (buffer bias 'int32)
              (ramp (sca-mul output.s0.x.x 16) 1 16)
              (aligned 16 0))
             (sca-broadcast
              (sca-add
               (sca-mul
                (sca-mul (int32_t t5829) (int32_t t5830))
                (int32_t mat_a.extent.0))
               (sca-mul (int32_t t5830) (int32_t t6653)))
              16)))
           (vec-cast
            (load
             (buffer multiplied_no_offsets 'uint32)
             (ramp
              (sca-add
               (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
               4)
              1
              16)
             (aligned 4 0))
            'int32
            16))
          'int64
          16)
         (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
        (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
      (vec-div
       (vec-mul
        (vec-cast
         (vec-add
          (vec-add
           (vec-mul
            (vec-cast
             (load
              (buffer column_sums_b 'uint32)
              (ramp
               (sca-add
                (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                16)
               1
               16)
              (aligned 16 0))
             'int32
             16)
            (sca-broadcast (int32_t t5829) 16))
           (vec-add
            (load
             (buffer bias 'int32)
             (ramp (sca-mul output.s0.x.x 16) 1 16)
             (aligned 16 0))
            (sca-broadcast
             (sca-add
              (sca-mul
               (sca-mul (int32_t t5829) (int32_t t5830))
               (int32_t mat_a.extent.0))
              (sca-mul (int32_t t5830) (int32_t t6653)))
             16)))
          (vec-cast
           (load
            (buffer multiplied_no_offsets 'uint32)
            (ramp
             (sca-add
              (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
              4)
             1
             16)
            (aligned 4 0))
           'int32
           16))
         'int64
         16)
        (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
       (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
     (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
    (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
   'int32
   16)
  (sca-broadcast (int32_t output_shift) 16))
 (vec-bwand
  (vec-if
   (sca-broadcast
    (sca-lt (int32_t (bv #x00000000 32)) (int32_t output_shift))
    16)
   (sca-broadcast (int32_t (bv #x00000001 32)) 16)
   (sca-broadcast (int32_t (bv #x00000000 32)) 16))
  (vec-shr
   (vec-cast
    (vec-max
     (vec-min
      (vec-add
       (vec-bwand
        (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
        (vec-div
         (vec-mul
          (vec-cast
           (vec-add
            (vec-add
             (vec-mul
              (vec-cast
               (load
                (buffer column_sums_b 'uint32)
                (ramp
                 (sca-add
                  (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                  16)
                 1
                 16)
                (aligned 16 0))
               'int32
               16)
              (sca-broadcast (int32_t t5829) 16))
             (vec-add
              (load
               (buffer bias 'int32)
               (ramp (sca-mul output.s0.x.x 16) 1 16)
               (aligned 16 0))
              (sca-broadcast
               (sca-add
                (sca-mul
                 (sca-mul (int32_t t5829) (int32_t t5830))
                 (int32_t mat_a.extent.0))
                (sca-mul (int32_t t5830) (int32_t t6653)))
               16)))
            (vec-cast
             (load
              (buffer multiplied_no_offsets 'uint32)
              (ramp
               (sca-add
                (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
                4)
               1
               16)
              (aligned 4 0))
             'int32
             16))
           'int64
           16)
          (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
         (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
       (vec-div
        (vec-mul
         (vec-cast
          (vec-add
           (vec-add
            (vec-mul
             (vec-cast
              (load
               (buffer column_sums_b 'uint32)
               (ramp
                (sca-add
                 (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                 16)
                1
                16)
               (aligned 16 0))
              'int32
              16)
             (sca-broadcast (int32_t t5829) 16))
            (vec-add
             (load
              (buffer bias 'int32)
              (ramp (sca-mul output.s0.x.x 16) 1 16)
              (aligned 16 0))
             (sca-broadcast
              (sca-add
               (sca-mul
                (sca-mul (int32_t t5829) (int32_t t5830))
                (int32_t mat_a.extent.0))
               (sca-mul (int32_t t5830) (int32_t t6653)))
              16)))
           (vec-cast
            (load
             (buffer multiplied_no_offsets 'uint32)
             (ramp
              (sca-add
               (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
               4)
              1
              16)
             (aligned 4 0))
            'int32
            16))
          'int64
          16)
         (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
        (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
      (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
     (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
    'int32
    16)
   (sca-broadcast
    (sca-add (int32_t output_shift) (int32_t (bv #xffffffff 32)))
    16))))
template:
  (vs-shift-right
 ...
 (vs-mpy-add
  ...
  (vs-mpy-add
   ...
   (combine
    (vs-mpy-add
     ...
     (combine
      (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
      (vs-mpy-add
       ...
       (combine
        #<load-data>
        (broadcast
         ...
         (sca-add
          (sca-mul
           (sca-mul (int32_t t5829) (int32_t t5830))
           (int32_t mat_a.extent.0))
          (sca-mul (int32_t t5830) (int32_t t6653)))))
       (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
       #f
       #f
       #f
       'int32))
     (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
     #f
     #f
     #f
     'int32)
    (cast ... #<load-data> 'int32 #f))
   (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
   #f
   #f
   #f
   'int32)
  (list (int32_t output_multiplier))
  #f
  #f
  #f
  'int64)
 (int64_t (bv #x000000000000001f 64))
 x?$3377
 x?$3378
 x?$3379)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$3398 idx) (bv #x4000000000000000 64)) (bvsle (bv #xc000000080000000 64) (app abstr-vals$3398 idx)))))
optimized-halide-expr:
  (vec-add
 (vec-shr
  (vec-cast
   (vec-max
    (vec-min
     (vec-add
      (vec-bwand
       (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
       (vec-div
        #<abstr-halide-expr>
        (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
      (vec-div
       #<abstr-halide-expr>
       (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
     (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
    (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
   'int32
   16)
  (sca-broadcast (int32_t output_shift) 16))
 (vec-bwand
  (vec-if
   (sca-broadcast
    (sca-lt (int32_t (bv #x00000000 32)) (int32_t output_shift))
    16)
   (sca-broadcast (int32_t (bv #x00000001 32)) 16)
   (sca-broadcast (int32_t (bv #x00000000 32)) 16))
  (vec-shr
   (vec-cast
    (vec-max
     (vec-min
      (vec-add
       (vec-bwand
        (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
        (vec-div
         #<abstr-halide-expr>
         (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
       (vec-div
        #<abstr-halide-expr>
        (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
      (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
     (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
    'int32
    16)
   (sca-broadcast
    (sca-add (int32_t output_shift) (int32_t (bv #xffffffff 32)))
    16))))
optimized-template:
  (vs-shift-right
 ...
 #<abstr-expr>
 (int64_t (bv #x000000000000001f 64))
 x?$3377
 x?$3378
 x?$3379)
optimized Halide 0:
  (int32_t
 (bvadd (bvashr (extract 31 0 (ite (bvsle (bv #xffffffff80000000 64) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (app abstr-vals$3398 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$3398 0) (bvneg (bvashr (app abstr-vals$3398 0) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (app abstr-vals$3398 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$3398 0) (bvneg (bvashr (app abstr-vals$3398 0) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (app abstr-vals$3398 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$3398 0) (bvneg (bvashr (app abstr-vals$3398 0) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (app abstr-vals$3398 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$3398 0) (bvneg (bvashr (app abstr-vals$3398 0) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64))) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (app abstr-vals$3398 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$3398 0) (bvneg (bvashr (app abstr-vals$3398 0) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (app abstr-vals$3398 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$3398 0) (bvneg (bvashr (app abstr-vals$3398 0) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (app abstr-vals$3398 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$3398 0) (bvneg (bvashr (app abstr-vals$3398 0) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (app abstr-vals$3398 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$3398 0) (bvneg (bvashr (app abstr-vals$3398 0) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bv #xffffffff80000000 64))) output_shift) (bvand (ite (bvslt (bv #x00000000 32) output_shift) (bv #x00000001 32) (bv #x00000000 32)) (bvashr (extract 31 0 (ite (bvsle (bv #xffffffff80000000 64) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (app abstr-vals$3398 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$3398 0) (bvneg (bvashr (app abstr-vals$3398 0) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (app abstr-vals$3398 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$3398 0) (bvneg (bvashr (app abstr-vals$3398 0) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (app abstr-vals$3398 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$3398 0) (bvneg (bvashr (app abstr-vals$3398 0) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (app abstr-vals$3398 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$3398 0) (bvneg (bvashr (app abstr-vals$3398 0) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64))) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (app abstr-vals$3398 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$3398 0) (bvneg (bvashr (app abstr-vals$3398 0) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (app abstr-vals$3398 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$3398 0) (bvneg (bvashr (app abstr-vals$3398 0) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (app abstr-vals$3398 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$3398 0) (bvneg (bvashr (app abstr-vals$3398 0) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (app abstr-vals$3398 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$3398 0) (bvneg (bvashr (app abstr-vals$3398 0) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bv #xffffffff80000000 64))) (bvadd (bv #xffffffff 32) output_shift)))))
optimized x86 0:
  (int64_t
 (ite x?$3377 (bvadd (ite x?$3379 (bvashr (app abstr-vals$3398 0) (bv #x000000000000001f 64)) (bvlshr (app abstr-vals$3398 0) (bv #x000000000000001f 64))) (bvand (bv #x0000000000000001 64) (ite x?$3379 (bvashr (app abstr-vals$3398 0) (bv #x000000000000001e 64)) (bvlshr (app abstr-vals$3398 0) (bv #x000000000000001e 64))))) (ite x?$3379 (bvashr (app abstr-vals$3398 0) (bv #x000000000000001f 64)) (bvlshr (app abstr-vals$3398 0) (bv #x000000000000001f 64)))))
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-shr
  (vec-cast
   (vec-max
    (vec-min
     (vec-add
      (vec-bwand
       (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
       (vec-div
        (vec-mul
         (vec-cast
          (vec-add
           (vec-add
            (vec-mul
             (vec-cast
              (load
               (buffer column_sums_b 'uint32)
               (ramp
                (sca-add
                 (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                 16)
                1
                16)
               (aligned 16 0))
              'int32
              16)
             (sca-broadcast (int32_t t5829) 16))
            (vec-add
             (load
              (buffer bias 'int32)
              (ramp (sca-mul output.s0.x.x 16) 1 16)
              (aligned 16 0))
             (sca-broadcast
              (sca-add
               (sca-mul
                (sca-mul (int32_t t5829) (int32_t t5830))
                (int32_t mat_a.extent.0))
               (sca-mul (int32_t t5830) (int32_t t6653)))
              16)))
           (vec-cast
            (load
             (buffer multiplied_no_offsets 'uint32)
             (ramp
              (sca-add
               (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
               4)
              1
              16)
             (aligned 4 0))
            'int32
            16))
          'int64
          16)
         (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
        (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
      (vec-div
       (vec-mul
        (vec-cast
         (vec-add
          (vec-add
           (vec-mul
            (vec-cast
             (load
              (buffer column_sums_b 'uint32)
              (ramp
               (sca-add
                (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                16)
               1
               16)
              (aligned 16 0))
             'int32
             16)
            (sca-broadcast (int32_t t5829) 16))
           (vec-add
            (load
             (buffer bias 'int32)
             (ramp (sca-mul output.s0.x.x 16) 1 16)
             (aligned 16 0))
            (sca-broadcast
             (sca-add
              (sca-mul
               (sca-mul (int32_t t5829) (int32_t t5830))
               (int32_t mat_a.extent.0))
              (sca-mul (int32_t t5830) (int32_t t6653)))
             16)))
          (vec-cast
           (load
            (buffer multiplied_no_offsets 'uint32)
            (ramp
             (sca-add
              (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
              4)
             1
             16)
            (aligned 4 0))
           'int32
           16))
         'int64
         16)
        (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
       (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
     (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
    (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
   'int32
   16)
  (sca-broadcast (int32_t output_shift) 16))
 (vec-bwand
  (vec-if
   (sca-broadcast
    (sca-lt (int32_t (bv #x00000000 32)) (int32_t output_shift))
    16)
   (sca-broadcast (int32_t (bv #x00000001 32)) 16)
   (sca-broadcast (int32_t (bv #x00000000 32)) 16))
  (vec-shr
   (vec-cast
    (vec-max
     (vec-min
      (vec-add
       (vec-bwand
        (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
        (vec-div
         (vec-mul
          (vec-cast
           (vec-add
            (vec-add
             (vec-mul
              (vec-cast
               (load
                (buffer column_sums_b 'uint32)
                (ramp
                 (sca-add
                  (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                  16)
                 1
                 16)
                (aligned 16 0))
               'int32
               16)
              (sca-broadcast (int32_t t5829) 16))
             (vec-add
              (load
               (buffer bias 'int32)
               (ramp (sca-mul output.s0.x.x 16) 1 16)
               (aligned 16 0))
              (sca-broadcast
               (sca-add
                (sca-mul
                 (sca-mul (int32_t t5829) (int32_t t5830))
                 (int32_t mat_a.extent.0))
                (sca-mul (int32_t t5830) (int32_t t6653)))
               16)))
            (vec-cast
             (load
              (buffer multiplied_no_offsets 'uint32)
              (ramp
               (sca-add
                (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
                4)
               1
               16)
              (aligned 4 0))
             'int32
             16))
           'int64
           16)
          (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
         (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
       (vec-div
        (vec-mul
         (vec-cast
          (vec-add
           (vec-add
            (vec-mul
             (vec-cast
              (load
               (buffer column_sums_b 'uint32)
               (ramp
                (sca-add
                 (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                 16)
                1
                16)
               (aligned 16 0))
              'int32
              16)
             (sca-broadcast (int32_t t5829) 16))
            (vec-add
             (load
              (buffer bias 'int32)
              (ramp (sca-mul output.s0.x.x 16) 1 16)
              (aligned 16 0))
             (sca-broadcast
              (sca-add
               (sca-mul
                (sca-mul (int32_t t5829) (int32_t t5830))
                (int32_t mat_a.extent.0))
               (sca-mul (int32_t t5830) (int32_t t6653)))
              16)))
           (vec-cast
            (load
             (buffer multiplied_no_offsets 'uint32)
             (ramp
              (sca-add
               (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
               4)
              1
              16)
             (aligned 4 0))
            'int32
            16))
          'int64
          16)
         (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
        (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
      (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
     (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
    'int32
    16)
   (sca-broadcast
    (sca-add (int32_t output_shift) (int32_t (bv #xffffffff 32)))
    16))))
template:
  (cast
 ...
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (vs-mpy-add
    ...
    (combine
     (vs-mpy-add
      ...
      (combine
       (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
       (vs-mpy-add
        ...
        (combine
         #<load-data>
         (broadcast
          ...
          (sca-add
           (sca-mul
            (sca-mul (int32_t t5829) (int32_t t5830))
            (int32_t mat_a.extent.0))
           (sca-mul (int32_t t5830) (int32_t t6653)))))
        (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
        #f
        #f
        #f
        'int32))
      (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
      #f
      #f
      #f
      'int32)
     (cast ... #<load-data> 'int32 #f))
    (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
    #f
    #f
    #f
    'int32)
   (list (int32_t output_multiplier))
   #f
   #f
   #f
   'int64)
  (int64_t (bv #x000000000000001f 64))
  #t
  x?$2971
  #t)
 'int32
 x?$3373)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$3399 idx) (bv #x0000000080000000 64)) (bvsle (bv #xffffffff80000001 64) (app abstr-vals$3399 idx)))))
optimized-halide-expr:
  (vec-add
 (vec-shr
  (vec-cast
   (vec-max
    (vec-min
     #<abstr-halide-expr>
     (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
    (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
   'int32
   16)
  (sca-broadcast (int32_t output_shift) 16))
 (vec-bwand
  (vec-if
   (sca-broadcast
    (sca-lt (int32_t (bv #x00000000 32)) (int32_t output_shift))
    16)
   (sca-broadcast (int32_t (bv #x00000001 32)) 16)
   (sca-broadcast (int32_t (bv #x00000000 32)) 16))
  (vec-shr
   (vec-cast
    (vec-max
     (vec-min
      #<abstr-halide-expr>
      (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
     (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
    'int32
    16)
   (sca-broadcast
    (sca-add (int32_t output_shift) (int32_t (bv #xffffffff 32)))
    16))))
optimized-template:
  (cast ... #<abstr-expr> 'int32 x?$3373)
optimized Halide 0:
  (int32_t
 (bvadd (bvashr (extract 31 0 (ite (bvsle (bv #xffffffff80000000 64) (ite (bvsle (app abstr-vals$3399 0) (bv #x000000007fffffff 64)) (app abstr-vals$3399 0) (bv #x000000007fffffff 64))) (ite (bvsle (app abstr-vals$3399 0) (bv #x000000007fffffff 64)) (app abstr-vals$3399 0) (bv #x000000007fffffff 64)) (bv #xffffffff80000000 64))) output_shift) (bvand (ite (bvslt (bv #x00000000 32) output_shift) (bv #x00000001 32) (bv #x00000000 32)) (bvashr (extract 31 0 (ite (bvsle (bv #xffffffff80000000 64) (ite (bvsle (app abstr-vals$3399 0) (bv #x000000007fffffff 64)) (app abstr-vals$3399 0) (bv #x000000007fffffff 64))) (ite (bvsle (app abstr-vals$3399 0) (bv #x000000007fffffff 64)) (app abstr-vals$3399 0) (bv #x000000007fffffff 64)) (bv #xffffffff80000000 64))) (bvadd (bv #xffffffff 32) output_shift)))))
optimized x86 0:
  (int32_t
 (ite x?$3373 (ite (bvslt (app abstr-vals$3399 0) (bv #xffffffff80000000 64)) (bv #x80000000 32) (ite (bvslt (bv #x000000007fffffff 64) (app abstr-vals$3399 0)) (bv #x7fffffff 32) (extract 31 0 (app abstr-vals$3399 0)))) (extract 31 0 (app abstr-vals$3399 0))))
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-shr
  (vec-cast
   (vec-max
    (vec-min
     (vec-add
      (vec-bwand
       (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
       (vec-div
        (vec-mul
         (vec-cast
          (vec-add
           (vec-add
            (vec-mul
             (vec-cast
              (load
               (buffer column_sums_b 'uint32)
               (ramp
                (sca-add
                 (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                 16)
                1
                16)
               (aligned 16 0))
              'int32
              16)
             (sca-broadcast (int32_t t5829) 16))
            (vec-add
             (load
              (buffer bias 'int32)
              (ramp (sca-mul output.s0.x.x 16) 1 16)
              (aligned 16 0))
             (sca-broadcast
              (sca-add
               (sca-mul
                (sca-mul (int32_t t5829) (int32_t t5830))
                (int32_t mat_a.extent.0))
               (sca-mul (int32_t t5830) (int32_t t6653)))
              16)))
           (vec-cast
            (load
             (buffer multiplied_no_offsets 'uint32)
             (ramp
              (sca-add
               (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
               4)
              1
              16)
             (aligned 4 0))
            'int32
            16))
          'int64
          16)
         (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
        (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
      (vec-div
       (vec-mul
        (vec-cast
         (vec-add
          (vec-add
           (vec-mul
            (vec-cast
             (load
              (buffer column_sums_b 'uint32)
              (ramp
               (sca-add
                (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                16)
               1
               16)
              (aligned 16 0))
             'int32
             16)
            (sca-broadcast (int32_t t5829) 16))
           (vec-add
            (load
             (buffer bias 'int32)
             (ramp (sca-mul output.s0.x.x 16) 1 16)
             (aligned 16 0))
            (sca-broadcast
             (sca-add
              (sca-mul
               (sca-mul (int32_t t5829) (int32_t t5830))
               (int32_t mat_a.extent.0))
              (sca-mul (int32_t t5830) (int32_t t6653)))
             16)))
          (vec-cast
           (load
            (buffer multiplied_no_offsets 'uint32)
            (ramp
             (sca-add
              (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
              4)
             1
             16)
            (aligned 4 0))
           'int32
           16))
         'int64
         16)
        (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
       (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
     (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
    (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
   'int32
   16)
  (sca-broadcast (int32_t output_shift) 16))
 (vec-bwand
  (vec-if
   (sca-broadcast
    (sca-lt (int32_t (bv #x00000000 32)) (int32_t output_shift))
    16)
   (sca-broadcast (int32_t (bv #x00000001 32)) 16)
   (sca-broadcast (int32_t (bv #x00000000 32)) 16))
  (vec-shr
   (vec-cast
    (vec-max
     (vec-min
      (vec-add
       (vec-bwand
        (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
        (vec-div
         (vec-mul
          (vec-cast
           (vec-add
            (vec-add
             (vec-mul
              (vec-cast
               (load
                (buffer column_sums_b 'uint32)
                (ramp
                 (sca-add
                  (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                  16)
                 1
                 16)
                (aligned 16 0))
               'int32
               16)
              (sca-broadcast (int32_t t5829) 16))
             (vec-add
              (load
               (buffer bias 'int32)
               (ramp (sca-mul output.s0.x.x 16) 1 16)
               (aligned 16 0))
              (sca-broadcast
               (sca-add
                (sca-mul
                 (sca-mul (int32_t t5829) (int32_t t5830))
                 (int32_t mat_a.extent.0))
                (sca-mul (int32_t t5830) (int32_t t6653)))
               16)))
            (vec-cast
             (load
              (buffer multiplied_no_offsets 'uint32)
              (ramp
               (sca-add
                (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
                4)
               1
               16)
              (aligned 4 0))
             'int32
             16))
           'int64
           16)
          (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
         (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
       (vec-div
        (vec-mul
         (vec-cast
          (vec-add
           (vec-add
            (vec-mul
             (vec-cast
              (load
               (buffer column_sums_b 'uint32)
               (ramp
                (sca-add
                 (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                 16)
                1
                16)
               (aligned 16 0))
              'int32
              16)
             (sca-broadcast (int32_t t5829) 16))
            (vec-add
             (load
              (buffer bias 'int32)
              (ramp (sca-mul output.s0.x.x 16) 1 16)
              (aligned 16 0))
             (sca-broadcast
              (sca-add
               (sca-mul
                (sca-mul (int32_t t5829) (int32_t t5830))
                (int32_t mat_a.extent.0))
               (sca-mul (int32_t t5830) (int32_t t6653)))
              16)))
           (vec-cast
            (load
             (buffer multiplied_no_offsets 'uint32)
             (ramp
              (sca-add
               (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
               4)
              1
              16)
             (aligned 4 0))
            'int32
            16))
          'int64
          16)
         (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
        (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
      (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
     (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
    'int32
    16)
   (sca-broadcast
    (sca-add (int32_t output_shift) (int32_t (bv #xffffffff 32)))
    16))))
template:
  (cast
 ...
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (vs-mpy-add
    ...
    (combine
     (vs-mpy-add
      ...
      (combine
       (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
       (vs-mpy-add
        ...
        (combine
         #<load-data>
         (broadcast
          ...
          (sca-add
           (sca-mul
            (sca-mul (int32_t t5829) (int32_t t5830))
            (int32_t mat_a.extent.0))
           (sca-mul (int32_t t5830) (int32_t t6653)))))
        (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
        #f
        #f
        #f
        'int32))
      (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
      #f
      #f
      #f
      'int32)
     (cast ... #<load-data> 'int32 #f))
    (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
    #f
    #f
    #f
    'int32)
   (list (int32_t output_multiplier))
   #f
   #f
   #f
   'int64)
  (int64_t (bv #x000000000000001f 64))
  #t
  x?$2971
  #t)
 'int32
 x?$3386)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$3400 idx) (bv #x0000000080000000 64)) (bvsle (bv #xffffffff80000001 64) (app abstr-vals$3400 idx)))))
optimized-halide-expr:
  (vec-add
 (vec-shr
  (vec-cast
   (vec-max
    (vec-min
     #<abstr-halide-expr>
     (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
    (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
   'int32
   16)
  (sca-broadcast (int32_t output_shift) 16))
 (vec-bwand
  (vec-if
   (sca-broadcast
    (sca-lt (int32_t (bv #x00000000 32)) (int32_t output_shift))
    16)
   (sca-broadcast (int32_t (bv #x00000001 32)) 16)
   (sca-broadcast (int32_t (bv #x00000000 32)) 16))
  (vec-shr
   (vec-cast
    (vec-max
     (vec-min
      #<abstr-halide-expr>
      (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
     (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
    'int32
    16)
   (sca-broadcast
    (sca-add (int32_t output_shift) (int32_t (bv #xffffffff 32)))
    16))))
optimized-template:
  (cast ... #<abstr-expr> 'int32 x?$3386)
optimized Halide 0:
  (int32_t
 (bvadd (bvashr (extract 31 0 (ite (bvsle (bv #xffffffff80000000 64) (ite (bvsle (app abstr-vals$3400 0) (bv #x000000007fffffff 64)) (app abstr-vals$3400 0) (bv #x000000007fffffff 64))) (ite (bvsle (app abstr-vals$3400 0) (bv #x000000007fffffff 64)) (app abstr-vals$3400 0) (bv #x000000007fffffff 64)) (bv #xffffffff80000000 64))) output_shift) (bvand (ite (bvslt (bv #x00000000 32) output_shift) (bv #x00000001 32) (bv #x00000000 32)) (bvashr (extract 31 0 (ite (bvsle (bv #xffffffff80000000 64) (ite (bvsle (app abstr-vals$3400 0) (bv #x000000007fffffff 64)) (app abstr-vals$3400 0) (bv #x000000007fffffff 64))) (ite (bvsle (app abstr-vals$3400 0) (bv #x000000007fffffff 64)) (app abstr-vals$3400 0) (bv #x000000007fffffff 64)) (bv #xffffffff80000000 64))) (bvadd (bv #xffffffff 32) output_shift)))))
optimized x86 0:
  (int32_t
 (ite x?$3386 (ite (bvslt (app abstr-vals$3400 0) (bv #xffffffff80000000 64)) (bv #x80000000 32) (ite (bvslt (bv #x000000007fffffff 64) (app abstr-vals$3400 0)) (bv #x7fffffff 32) (extract 31 0 (app abstr-vals$3400 0)))) (extract 31 0 (app abstr-vals$3400 0))))
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-shr
  (vec-cast
   (vec-max
    (vec-min
     (vec-add
      (vec-bwand
       (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
       (vec-div
        (vec-mul
         (vec-cast
          (vec-add
           (vec-add
            (vec-mul
             (vec-cast
              (load
               (buffer column_sums_b 'uint32)
               (ramp
                (sca-add
                 (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                 16)
                1
                16)
               (aligned 16 0))
              'int32
              16)
             (sca-broadcast (int32_t t5829) 16))
            (vec-add
             (load
              (buffer bias 'int32)
              (ramp (sca-mul output.s0.x.x 16) 1 16)
              (aligned 16 0))
             (sca-broadcast
              (sca-add
               (sca-mul
                (sca-mul (int32_t t5829) (int32_t t5830))
                (int32_t mat_a.extent.0))
               (sca-mul (int32_t t5830) (int32_t t6653)))
              16)))
           (vec-cast
            (load
             (buffer multiplied_no_offsets 'uint32)
             (ramp
              (sca-add
               (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
               4)
              1
              16)
             (aligned 4 0))
            'int32
            16))
          'int64
          16)
         (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
        (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
      (vec-div
       (vec-mul
        (vec-cast
         (vec-add
          (vec-add
           (vec-mul
            (vec-cast
             (load
              (buffer column_sums_b 'uint32)
              (ramp
               (sca-add
                (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                16)
               1
               16)
              (aligned 16 0))
             'int32
             16)
            (sca-broadcast (int32_t t5829) 16))
           (vec-add
            (load
             (buffer bias 'int32)
             (ramp (sca-mul output.s0.x.x 16) 1 16)
             (aligned 16 0))
            (sca-broadcast
             (sca-add
              (sca-mul
               (sca-mul (int32_t t5829) (int32_t t5830))
               (int32_t mat_a.extent.0))
              (sca-mul (int32_t t5830) (int32_t t6653)))
             16)))
          (vec-cast
           (load
            (buffer multiplied_no_offsets 'uint32)
            (ramp
             (sca-add
              (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
              4)
             1
             16)
            (aligned 4 0))
           'int32
           16))
         'int64
         16)
        (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
       (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
     (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
    (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
   'int32
   16)
  (sca-broadcast (int32_t output_shift) 16))
 (vec-bwand
  (vec-if
   (sca-broadcast
    (sca-lt (int32_t (bv #x00000000 32)) (int32_t output_shift))
    16)
   (sca-broadcast (int32_t (bv #x00000001 32)) 16)
   (sca-broadcast (int32_t (bv #x00000000 32)) 16))
  (vec-shr
   (vec-cast
    (vec-max
     (vec-min
      (vec-add
       (vec-bwand
        (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
        (vec-div
         (vec-mul
          (vec-cast
           (vec-add
            (vec-add
             (vec-mul
              (vec-cast
               (load
                (buffer column_sums_b 'uint32)
                (ramp
                 (sca-add
                  (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                  16)
                 1
                 16)
                (aligned 16 0))
               'int32
               16)
              (sca-broadcast (int32_t t5829) 16))
             (vec-add
              (load
               (buffer bias 'int32)
               (ramp (sca-mul output.s0.x.x 16) 1 16)
               (aligned 16 0))
              (sca-broadcast
               (sca-add
                (sca-mul
                 (sca-mul (int32_t t5829) (int32_t t5830))
                 (int32_t mat_a.extent.0))
                (sca-mul (int32_t t5830) (int32_t t6653)))
               16)))
            (vec-cast
             (load
              (buffer multiplied_no_offsets 'uint32)
              (ramp
               (sca-add
                (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
                4)
               1
               16)
              (aligned 4 0))
             'int32
             16))
           'int64
           16)
          (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
         (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
       (vec-div
        (vec-mul
         (vec-cast
          (vec-add
           (vec-add
            (vec-mul
             (vec-cast
              (load
               (buffer column_sums_b 'uint32)
               (ramp
                (sca-add
                 (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                 16)
                1
                16)
               (aligned 16 0))
              'int32
              16)
             (sca-broadcast (int32_t t5829) 16))
            (vec-add
             (load
              (buffer bias 'int32)
              (ramp (sca-mul output.s0.x.x 16) 1 16)
              (aligned 16 0))
             (sca-broadcast
              (sca-add
               (sca-mul
                (sca-mul (int32_t t5829) (int32_t t5830))
                (int32_t mat_a.extent.0))
               (sca-mul (int32_t t5830) (int32_t t6653)))
              16)))
           (vec-cast
            (load
             (buffer multiplied_no_offsets 'uint32)
             (ramp
              (sca-add
               (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
               4)
              1
              16)
             (aligned 4 0))
            'int32
            16))
          'int64
          16)
         (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
        (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
      (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
     (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
    'int32
    16)
   (sca-broadcast
    (sca-add (int32_t output_shift) (int32_t (bv #xffffffff 32)))
    16))))
template:
  (vs-mpy-add
 ...
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (vs-mpy-add
    ...
    (combine
     (vs-mpy-add
      ...
      (combine
       (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
       (vs-mpy-add
        ...
        (combine
         #<load-data>
         (broadcast
          ...
          (sca-add
           (sca-mul
            (sca-mul (int32_t t5829) (int32_t t5830))
            (int32_t mat_a.extent.0))
           (sca-mul (int32_t t5830) (int32_t t6653)))))
        (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
        #f
        #f
        #f
        'int32))
      (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
      #f
      #f
      #f
      'int32)
     (cast ... #<load-data> 'int32 #f))
    (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
    #f
    #f
    #f
    'int32)
   (list (int32_t output_multiplier))
   #f
   #f
   #f
   'int64)
  (int64_t (bv #x000000000000001f 64))
  #t
  x?$2971
  #t)
 (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
 (! x?$3389)
 (! x?$3390)
 (! x?$3391)
 'int32)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$3401 idx) (bv #x0000000080000000 64)) (bvsle (bv #xffffffff80000001 64) (app abstr-vals$3401 idx)))))
optimized-halide-expr:
  (vec-add
 (vec-shr
  (vec-cast
   (vec-max
    (vec-min
     #<abstr-halide-expr>
     (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
    (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
   'int32
   16)
  (sca-broadcast (int32_t output_shift) 16))
 (vec-bwand
  (vec-if
   (sca-broadcast
    (sca-lt (int32_t (bv #x00000000 32)) (int32_t output_shift))
    16)
   (sca-broadcast (int32_t (bv #x00000001 32)) 16)
   (sca-broadcast (int32_t (bv #x00000000 32)) 16))
  (vec-shr
   (vec-cast
    (vec-max
     (vec-min
      #<abstr-halide-expr>
      (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
     (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
    'int32
    16)
   (sca-broadcast
    (sca-add (int32_t output_shift) (int32_t (bv #xffffffff 32)))
    16))))
optimized-template:
  (vs-mpy-add
 ...
 #<abstr-expr>
 (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
 (! x?$3389)
 (! x?$3390)
 (! x?$3391)
 'int32)
optimized Halide 0:
  (int32_t
 (bvadd (bvashr (extract 31 0 (ite (bvsle (bv #xffffffff80000000 64) (ite (bvsle (app abstr-vals$3401 0) (bv #x000000007fffffff 64)) (app abstr-vals$3401 0) (bv #x000000007fffffff 64))) (ite (bvsle (app abstr-vals$3401 0) (bv #x000000007fffffff 64)) (app abstr-vals$3401 0) (bv #x000000007fffffff 64)) (bv #xffffffff80000000 64))) output_shift) (bvand (ite (bvslt (bv #x00000000 32) output_shift) (bv #x00000001 32) (bv #x00000000 32)) (bvashr (extract 31 0 (ite (bvsle (bv #xffffffff80000000 64) (ite (bvsle (app abstr-vals$3401 0) (bv #x000000007fffffff 64)) (app abstr-vals$3401 0) (bv #x000000007fffffff 64))) (ite (bvsle (app abstr-vals$3401 0) (bv #x000000007fffffff 64)) (app abstr-vals$3401 0) (bv #x000000007fffffff 64)) (bv #xffffffff80000000 64))) (bvadd (bv #xffffffff 32) output_shift)))))
optimized x86 0:
  (int32_t
 (ite* (⊢ (&& x?$3391 (! (&& (! x?$3389) (! x?$3391)))) (ite x?$3389 (bvadd (extract 31 0 (app abstr-vals$3401 1)) (ite x?$3389 (bvadd (extract 31 0 (app abstr-vals$3401 0)) (ite x?$3390 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3390 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (extract 31 0 (app abstr-vals$3401 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3390 (bv #x00000000 32) (bv #x00000001 32))))) (extract 31 0 (app abstr-vals$3401 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3390 (bv #x00000000 32) (bv #x00000001 32)))))))) (bvadd (ite x?$3389 (bvadd (extract 31 0 (app abstr-vals$3401 0)) (ite x?$3390 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3390 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (extract 31 0 (app abstr-vals$3401 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3390 (bv #x00000000 32) (bv #x00000001 32))))) (extract 31 0 (app abstr-vals$3401 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3390 (bv #x00000000 32) (bv #x00000001 32))))))) (ite (bvsle (bvadd (bv #x80000000 32) (bvneg (ite (bvsle (ite x?$3389 (bvadd (extract 31 0 (app abstr-vals$3401 0)) (ite x?$3390 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3390 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (extract 31 0 (app abstr-vals$3401 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3390 (bv #x00000000 32) (bv #x00000001 32))))) (extract 31 0 (app abstr-vals$3401 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3390 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)) (ite x?$3389 (bvadd (extract 31 0 (app abstr-vals$3401 0)) (ite x?$3390 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3390 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (extract 31 0 (app abstr-vals$3401 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3390 (bv #x00000000 32) (bv #x00000001 32))))) (extract 31 0 (app abstr-vals$3401 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3390 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)))) (ite (bvsle (extract 31 0 (app abstr-vals$3401 1)) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$3389 (bvadd (extract 31 0 (app abstr-vals$3401 0)) (ite x?$3390 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3390 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (extract 31 0 (app abstr-vals$3401 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3390 (bv #x00000000 32) (bv #x00000001 32))))) (extract 31 0 (app abstr-vals$3401 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3390 (bv #x00000000 32) (bv #x00000001 32)))))))) (ite x?$3389 (bvadd (extract 31 0 (app abstr-vals$3401 0)) (ite x?$3390 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3390 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (extract 31 0 (app abstr-vals$3401 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3390 (bv #x00000000 32) (bv #x00000001 32))))) (extract 31 0 (app abstr-vals$3401 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3390 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32))))) (extract 31 0 (app abstr-vals$3401 1)) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$3389 (bvadd (extract 31 0 (app abstr-vals$3401 0)) (ite x?$3390 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3390 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (extract 31 0 (app abstr-vals$3401 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3390 (bv #x00000000 32) (bv #x00000001 32))))) (extract 31 0 (app abstr-vals$3401 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3390 (bv #x00000000 32) (bv #x00000001 32)))))))) (ite x?$3389 (bvadd (extract 31 0 (app abstr-vals$3401 0)) (ite x?$3390 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3390 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (extract 31 0 (app abstr-vals$3401 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3390 (bv #x00000000 32) (bv #x00000001 32))))) (extract 31 0 (app abstr-vals$3401 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3390 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)))))) (ite (bvsle (extract 31 0 (app abstr-vals$3401 1)) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$3389 (bvadd (extract 31 0 (app abstr-vals$3401 0)) (ite x?$3390 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3390 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (extract 31 0 (app abstr-vals$3401 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3390 (bv #x00000000 32) (bv #x00000001 32))))) (extract 31 0 (app abstr-vals$3401 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3390 (bv #x00000000 32) (bv #x00000001 32)))))))) (ite x?$3389 (bvadd (extract 31 0 (app abstr-vals$3401 0)) (ite x?$3390 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3390 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (extract 31 0 (app abstr-vals$3401 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3390 (bv #x00000000 32) (bv #x00000001 32))))) (extract 31 0 (app abstr-vals$3401 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3390 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32))))) (extract 31 0 (app abstr-vals$3401 1)) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$3389 (bvadd (extract 31 0 (app abstr-vals$3401 0)) (ite x?$3390 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3390 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (extract 31 0 (app abstr-vals$3401 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3390 (bv #x00000000 32) (bv #x00000001 32))))) (extract 31 0 (app abstr-vals$3401 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3390 (bv #x00000000 32) (bv #x00000001 32)))))))) (ite x?$3389 (bvadd (extract 31 0 (app abstr-vals$3401 0)) (ite x?$3390 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3390 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (extract 31 0 (app abstr-vals$3401 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3390 (bv #x00000000 32) (bv #x00000001 32))))) (extract 31 0 (app abstr-vals$3401 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3390 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32))))) (bvadd (bv #x80000000 32) (bvneg (ite (bvsle (ite x?$3389 (bvadd (extract 31 0 (app abstr-vals$3401 0)) (ite x?$3390 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3390 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (extract 31 0 (app abstr-vals$3401 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3390 (bv #x00000000 32) (bv #x00000001 32))))) (extract 31 0 (app abstr-vals$3401 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3390 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)) (ite x?$3389 (bvadd (extract 31 0 (app abstr-vals$3401 0)) (ite x?$3390 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3390 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (extract 31 0 (app abstr-vals$3401 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3390 (bv #x00000000 32) (bv #x00000001 32))))) (extract 31 0 (app abstr-vals$3401 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3390 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)))))))) (⊢ (|| (&& (! x?$3389) (! x?$3391)) (&& (! x?$3391) (! (&& (! x?$3389) (! x?$3391))))) (bvashr (ite x?$3389 (bvadd (extract 31 0 (app abstr-vals$3401 1)) (ite x?$3389 (bvadd (extract 31 0 (app abstr-vals$3401 0)) (ite x?$3390 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3390 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (extract 31 0 (app abstr-vals$3401 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3390 (bv #x00000000 32) (bv #x00000001 32))))) (extract 31 0 (app abstr-vals$3401 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3390 (bv #x00000000 32) (bv #x00000001 32)))))))) (bvadd (ite x?$3389 (bvadd (extract 31 0 (app abstr-vals$3401 0)) (ite x?$3390 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3390 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (extract 31 0 (app abstr-vals$3401 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3390 (bv #x00000000 32) (bv #x00000001 32))))) (extract 31 0 (app abstr-vals$3401 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3390 (bv #x00000000 32) (bv #x00000001 32))))))) (ite (bvsle (bvadd (bv #x80000000 32) (bvneg (ite (bvsle (ite x?$3389 (bvadd (extract 31 0 (app abstr-vals$3401 0)) (ite x?$3390 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3390 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (extract 31 0 (app abstr-vals$3401 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3390 (bv #x00000000 32) (bv #x00000001 32))))) (extract 31 0 (app abstr-vals$3401 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3390 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)) (ite x?$3389 (bvadd (extract 31 0 (app abstr-vals$3401 0)) (ite x?$3390 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3390 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (extract 31 0 (app abstr-vals$3401 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3390 (bv #x00000000 32) (bv #x00000001 32))))) (extract 31 0 (app abstr-vals$3401 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3390 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)))) (ite (bvsle (extract 31 0 (app abstr-vals$3401 1)) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$3389 (bvadd (extract 31 0 (app abstr-vals$3401 0)) (ite x?$3390 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3390 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (extract 31 0 (app abstr-vals$3401 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3390 (bv #x00000000 32) (bv #x00000001 32))))) (extract 31 0 (app abstr-vals$3401 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3390 (bv #x00000000 32) (bv #x00000001 32)))))))) (ite x?$3389 (bvadd (extract 31 0 (app abstr-vals$3401 0)) (ite x?$3390 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3390 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (extract 31 0 (app abstr-vals$3401 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3390 (bv #x00000000 32) (bv #x00000001 32))))) (extract 31 0 (app abstr-vals$3401 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3390 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32))))) (extract 31 0 (app abstr-vals$3401 1)) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$3389 (bvadd (extract 31 0 (app abstr-vals$3401 0)) (ite x?$3390 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3390 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (extract 31 0 (app abstr-vals$3401 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3390 (bv #x00000000 32) (bv #x00000001 32))))) (extract 31 0 (app abstr-vals$3401 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3390 (bv #x00000000 32) (bv #x00000001 32)))))))) (ite x?$3389 (bvadd (extract 31 0 (app abstr-vals$3401 0)) (ite x?$3390 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3390 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (extract 31 0 (app abstr-vals$3401 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3390 (bv #x00000000 32) (bv #x00000001 32))))) (extract 31 0 (app abstr-vals$3401 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3390 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)))))) (ite (bvsle (extract 31 0 (app abstr-vals$3401 1)) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$3389 (bvadd (extract 31 0 (app abstr-vals$3401 0)) (ite x?$3390 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3390 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (extract 31 0 (app abstr-vals$3401 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3390 (bv #x00000000 32) (bv #x00000001 32))))) (extract 31 0 (app abstr-vals$3401 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3390 (bv #x00000000 32) (bv #x00000001 32)))))))) (ite x?$3389 (bvadd (extract 31 0 (app abstr-vals$3401 0)) (ite x?$3390 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3390 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (extract 31 0 (app abstr-vals$3401 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3390 (bv #x00000000 32) (bv #x00000001 32))))) (extract 31 0 (app abstr-vals$3401 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3390 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32))))) (extract 31 0 (app abstr-vals$3401 1)) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$3389 (bvadd (extract 31 0 (app abstr-vals$3401 0)) (ite x?$3390 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3390 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (extract 31 0 (app abstr-vals$3401 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3390 (bv #x00000000 32) (bv #x00000001 32))))) (extract 31 0 (app abstr-vals$3401 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3390 (bv #x00000000 32) (bv #x00000001 32)))))))) (ite x?$3389 (bvadd (extract 31 0 (app abstr-vals$3401 0)) (ite x?$3390 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3390 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (extract 31 0 (app abstr-vals$3401 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3390 (bv #x00000000 32) (bv #x00000001 32))))) (extract 31 0 (app abstr-vals$3401 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3390 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32))))) (bvadd (bv #x80000000 32) (bvneg (ite (bvsle (ite x?$3389 (bvadd (extract 31 0 (app abstr-vals$3401 0)) (ite x?$3390 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3390 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (extract 31 0 (app abstr-vals$3401 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3390 (bv #x00000000 32) (bv #x00000001 32))))) (extract 31 0 (app abstr-vals$3401 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3390 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)) (ite x?$3389 (bvadd (extract 31 0 (app abstr-vals$3401 0)) (ite x?$3390 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3390 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (extract 31 0 (app abstr-vals$3401 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3390 (bv #x00000000 32) (bv #x00000001 32))))) (extract 31 0 (app abstr-vals$3401 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3390 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32))))))) (bv #x00000001 32)))))
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-shr
  (vec-cast
   (vec-max
    (vec-min
     (vec-add
      (vec-bwand
       (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
       (vec-div
        (vec-mul
         (vec-cast
          (vec-add
           (vec-add
            (vec-mul
             (vec-cast
              (load
               (buffer column_sums_b 'uint32)
               (ramp
                (sca-add
                 (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                 16)
                1
                16)
               (aligned 16 0))
              'int32
              16)
             (sca-broadcast (int32_t t5829) 16))
            (vec-add
             (load
              (buffer bias 'int32)
              (ramp (sca-mul output.s0.x.x 16) 1 16)
              (aligned 16 0))
             (sca-broadcast
              (sca-add
               (sca-mul
                (sca-mul (int32_t t5829) (int32_t t5830))
                (int32_t mat_a.extent.0))
               (sca-mul (int32_t t5830) (int32_t t6653)))
              16)))
           (vec-cast
            (load
             (buffer multiplied_no_offsets 'uint32)
             (ramp
              (sca-add
               (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
               4)
              1
              16)
             (aligned 4 0))
            'int32
            16))
          'int64
          16)
         (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
        (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
      (vec-div
       (vec-mul
        (vec-cast
         (vec-add
          (vec-add
           (vec-mul
            (vec-cast
             (load
              (buffer column_sums_b 'uint32)
              (ramp
               (sca-add
                (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                16)
               1
               16)
              (aligned 16 0))
             'int32
             16)
            (sca-broadcast (int32_t t5829) 16))
           (vec-add
            (load
             (buffer bias 'int32)
             (ramp (sca-mul output.s0.x.x 16) 1 16)
             (aligned 16 0))
            (sca-broadcast
             (sca-add
              (sca-mul
               (sca-mul (int32_t t5829) (int32_t t5830))
               (int32_t mat_a.extent.0))
              (sca-mul (int32_t t5830) (int32_t t6653)))
             16)))
          (vec-cast
           (load
            (buffer multiplied_no_offsets 'uint32)
            (ramp
             (sca-add
              (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
              4)
             1
             16)
            (aligned 4 0))
           'int32
           16))
         'int64
         16)
        (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
       (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
     (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
    (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
   'int32
   16)
  (sca-broadcast (int32_t output_shift) 16))
 (vec-bwand
  (vec-if
   (sca-broadcast
    (sca-lt (int32_t (bv #x00000000 32)) (int32_t output_shift))
    16)
   (sca-broadcast (int32_t (bv #x00000001 32)) 16)
   (sca-broadcast (int32_t (bv #x00000000 32)) 16))
  (vec-shr
   (vec-cast
    (vec-max
     (vec-min
      (vec-add
       (vec-bwand
        (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
        (vec-div
         (vec-mul
          (vec-cast
           (vec-add
            (vec-add
             (vec-mul
              (vec-cast
               (load
                (buffer column_sums_b 'uint32)
                (ramp
                 (sca-add
                  (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                  16)
                 1
                 16)
                (aligned 16 0))
               'int32
               16)
              (sca-broadcast (int32_t t5829) 16))
             (vec-add
              (load
               (buffer bias 'int32)
               (ramp (sca-mul output.s0.x.x 16) 1 16)
               (aligned 16 0))
              (sca-broadcast
               (sca-add
                (sca-mul
                 (sca-mul (int32_t t5829) (int32_t t5830))
                 (int32_t mat_a.extent.0))
                (sca-mul (int32_t t5830) (int32_t t6653)))
               16)))
            (vec-cast
             (load
              (buffer multiplied_no_offsets 'uint32)
              (ramp
               (sca-add
                (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
                4)
               1
               16)
              (aligned 4 0))
             'int32
             16))
           'int64
           16)
          (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
         (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
       (vec-div
        (vec-mul
         (vec-cast
          (vec-add
           (vec-add
            (vec-mul
             (vec-cast
              (load
               (buffer column_sums_b 'uint32)
               (ramp
                (sca-add
                 (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                 16)
                1
                16)
               (aligned 16 0))
              'int32
              16)
             (sca-broadcast (int32_t t5829) 16))
            (vec-add
             (load
              (buffer bias 'int32)
              (ramp (sca-mul output.s0.x.x 16) 1 16)
              (aligned 16 0))
             (sca-broadcast
              (sca-add
               (sca-mul
                (sca-mul (int32_t t5829) (int32_t t5830))
                (int32_t mat_a.extent.0))
               (sca-mul (int32_t t5830) (int32_t t6653)))
              16)))
           (vec-cast
            (load
             (buffer multiplied_no_offsets 'uint32)
             (ramp
              (sca-add
               (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
               4)
              1
              16)
             (aligned 4 0))
            'int32
            16))
          'int64
          16)
         (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
        (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
      (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
     (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
    'int32
    16)
   (sca-broadcast
    (sca-add (int32_t output_shift) (int32_t (bv #xffffffff 32)))
    16))))
template:
  (vs-mpy-add
 ...
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (vs-mpy-add
    ...
    (combine
     (vs-mpy-add
      ...
      (combine
       (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
       (vs-mpy-add
        ...
        (combine
         #<load-data>
         (broadcast
          ...
          (sca-add
           (sca-mul
            (sca-mul (int32_t t5829) (int32_t t5830))
            (int32_t mat_a.extent.0))
           (sca-mul (int32_t t5830) (int32_t t6653)))))
        (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
        #f
        #f
        #f
        'int32))
      (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
      #f
      #f
      #f
      'int32)
     (cast ... #<load-data> 'int32 #f))
    (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
    #f
    #f
    #f
    'int32)
   (list (int32_t output_multiplier))
   #f
   #f
   #f
   'int64)
  (int64_t (bv #x000000000000001f 64))
  #t
  x?$2971
  #t)
 (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
 (! x?$3394)
 (! x?$3395)
 (! x?$3396)
 'int32)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$3402 idx) (bv #x0000000080000000 64)) (bvsle (bv #xffffffff80000001 64) (app abstr-vals$3402 idx)))))
optimized-halide-expr:
  (vec-add
 (vec-shr
  (vec-cast
   (vec-max
    (vec-min
     #<abstr-halide-expr>
     (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
    (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
   'int32
   16)
  (sca-broadcast (int32_t output_shift) 16))
 (vec-bwand
  (vec-if
   (sca-broadcast
    (sca-lt (int32_t (bv #x00000000 32)) (int32_t output_shift))
    16)
   (sca-broadcast (int32_t (bv #x00000001 32)) 16)
   (sca-broadcast (int32_t (bv #x00000000 32)) 16))
  (vec-shr
   (vec-cast
    (vec-max
     (vec-min
      #<abstr-halide-expr>
      (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
     (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
    'int32
    16)
   (sca-broadcast
    (sca-add (int32_t output_shift) (int32_t (bv #xffffffff 32)))
    16))))
optimized-template:
  (vs-mpy-add
 ...
 #<abstr-expr>
 (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
 (! x?$3394)
 (! x?$3395)
 (! x?$3396)
 'int32)
optimized Halide 0:
  (int32_t
 (bvadd (bvashr (extract 31 0 (ite (bvsle (bv #xffffffff80000000 64) (ite (bvsle (app abstr-vals$3402 0) (bv #x000000007fffffff 64)) (app abstr-vals$3402 0) (bv #x000000007fffffff 64))) (ite (bvsle (app abstr-vals$3402 0) (bv #x000000007fffffff 64)) (app abstr-vals$3402 0) (bv #x000000007fffffff 64)) (bv #xffffffff80000000 64))) output_shift) (bvand (ite (bvslt (bv #x00000000 32) output_shift) (bv #x00000001 32) (bv #x00000000 32)) (bvashr (extract 31 0 (ite (bvsle (bv #xffffffff80000000 64) (ite (bvsle (app abstr-vals$3402 0) (bv #x000000007fffffff 64)) (app abstr-vals$3402 0) (bv #x000000007fffffff 64))) (ite (bvsle (app abstr-vals$3402 0) (bv #x000000007fffffff 64)) (app abstr-vals$3402 0) (bv #x000000007fffffff 64)) (bv #xffffffff80000000 64))) (bvadd (bv #xffffffff 32) output_shift)))))
optimized x86 0:
  (int32_t
 (ite* (⊢ (&& x?$3396 (! (&& (! x?$3394) (! x?$3396)))) (ite x?$3394 (bvadd (extract 31 0 (app abstr-vals$3402 1)) (ite x?$3394 (bvadd (extract 31 0 (app abstr-vals$3402 0)) (ite x?$3395 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3395 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (extract 31 0 (app abstr-vals$3402 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3395 (bv #x00000000 32) (bv #x00000001 32))))) (extract 31 0 (app abstr-vals$3402 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3395 (bv #x00000000 32) (bv #x00000001 32)))))))) (bvadd (ite x?$3394 (bvadd (extract 31 0 (app abstr-vals$3402 0)) (ite x?$3395 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3395 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (extract 31 0 (app abstr-vals$3402 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3395 (bv #x00000000 32) (bv #x00000001 32))))) (extract 31 0 (app abstr-vals$3402 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3395 (bv #x00000000 32) (bv #x00000001 32))))))) (ite (bvsle (bvadd (bv #x80000000 32) (bvneg (ite (bvsle (ite x?$3394 (bvadd (extract 31 0 (app abstr-vals$3402 0)) (ite x?$3395 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3395 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (extract 31 0 (app abstr-vals$3402 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3395 (bv #x00000000 32) (bv #x00000001 32))))) (extract 31 0 (app abstr-vals$3402 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3395 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)) (ite x?$3394 (bvadd (extract 31 0 (app abstr-vals$3402 0)) (ite x?$3395 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3395 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (extract 31 0 (app abstr-vals$3402 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3395 (bv #x00000000 32) (bv #x00000001 32))))) (extract 31 0 (app abstr-vals$3402 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3395 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)))) (ite (bvsle (extract 31 0 (app abstr-vals$3402 1)) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$3394 (bvadd (extract 31 0 (app abstr-vals$3402 0)) (ite x?$3395 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3395 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (extract 31 0 (app abstr-vals$3402 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3395 (bv #x00000000 32) (bv #x00000001 32))))) (extract 31 0 (app abstr-vals$3402 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3395 (bv #x00000000 32) (bv #x00000001 32)))))))) (ite x?$3394 (bvadd (extract 31 0 (app abstr-vals$3402 0)) (ite x?$3395 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3395 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (extract 31 0 (app abstr-vals$3402 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3395 (bv #x00000000 32) (bv #x00000001 32))))) (extract 31 0 (app abstr-vals$3402 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3395 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32))))) (extract 31 0 (app abstr-vals$3402 1)) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$3394 (bvadd (extract 31 0 (app abstr-vals$3402 0)) (ite x?$3395 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3395 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (extract 31 0 (app abstr-vals$3402 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3395 (bv #x00000000 32) (bv #x00000001 32))))) (extract 31 0 (app abstr-vals$3402 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3395 (bv #x00000000 32) (bv #x00000001 32)))))))) (ite x?$3394 (bvadd (extract 31 0 (app abstr-vals$3402 0)) (ite x?$3395 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3395 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (extract 31 0 (app abstr-vals$3402 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3395 (bv #x00000000 32) (bv #x00000001 32))))) (extract 31 0 (app abstr-vals$3402 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3395 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)))))) (ite (bvsle (extract 31 0 (app abstr-vals$3402 1)) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$3394 (bvadd (extract 31 0 (app abstr-vals$3402 0)) (ite x?$3395 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3395 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (extract 31 0 (app abstr-vals$3402 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3395 (bv #x00000000 32) (bv #x00000001 32))))) (extract 31 0 (app abstr-vals$3402 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3395 (bv #x00000000 32) (bv #x00000001 32)))))))) (ite x?$3394 (bvadd (extract 31 0 (app abstr-vals$3402 0)) (ite x?$3395 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3395 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (extract 31 0 (app abstr-vals$3402 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3395 (bv #x00000000 32) (bv #x00000001 32))))) (extract 31 0 (app abstr-vals$3402 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3395 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32))))) (extract 31 0 (app abstr-vals$3402 1)) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$3394 (bvadd (extract 31 0 (app abstr-vals$3402 0)) (ite x?$3395 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3395 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (extract 31 0 (app abstr-vals$3402 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3395 (bv #x00000000 32) (bv #x00000001 32))))) (extract 31 0 (app abstr-vals$3402 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3395 (bv #x00000000 32) (bv #x00000001 32)))))))) (ite x?$3394 (bvadd (extract 31 0 (app abstr-vals$3402 0)) (ite x?$3395 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3395 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (extract 31 0 (app abstr-vals$3402 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3395 (bv #x00000000 32) (bv #x00000001 32))))) (extract 31 0 (app abstr-vals$3402 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3395 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32))))) (bvadd (bv #x80000000 32) (bvneg (ite (bvsle (ite x?$3394 (bvadd (extract 31 0 (app abstr-vals$3402 0)) (ite x?$3395 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3395 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (extract 31 0 (app abstr-vals$3402 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3395 (bv #x00000000 32) (bv #x00000001 32))))) (extract 31 0 (app abstr-vals$3402 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3395 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)) (ite x?$3394 (bvadd (extract 31 0 (app abstr-vals$3402 0)) (ite x?$3395 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3395 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (extract 31 0 (app abstr-vals$3402 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3395 (bv #x00000000 32) (bv #x00000001 32))))) (extract 31 0 (app abstr-vals$3402 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3395 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)))))))) (⊢ (|| (&& (! x?$3394) (! x?$3396)) (&& (! x?$3396) (! (&& (! x?$3394) (! x?$3396))))) (bvashr (ite x?$3394 (bvadd (extract 31 0 (app abstr-vals$3402 1)) (ite x?$3394 (bvadd (extract 31 0 (app abstr-vals$3402 0)) (ite x?$3395 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3395 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (extract 31 0 (app abstr-vals$3402 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3395 (bv #x00000000 32) (bv #x00000001 32))))) (extract 31 0 (app abstr-vals$3402 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3395 (bv #x00000000 32) (bv #x00000001 32)))))))) (bvadd (ite x?$3394 (bvadd (extract 31 0 (app abstr-vals$3402 0)) (ite x?$3395 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3395 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (extract 31 0 (app abstr-vals$3402 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3395 (bv #x00000000 32) (bv #x00000001 32))))) (extract 31 0 (app abstr-vals$3402 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3395 (bv #x00000000 32) (bv #x00000001 32))))))) (ite (bvsle (bvadd (bv #x80000000 32) (bvneg (ite (bvsle (ite x?$3394 (bvadd (extract 31 0 (app abstr-vals$3402 0)) (ite x?$3395 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3395 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (extract 31 0 (app abstr-vals$3402 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3395 (bv #x00000000 32) (bv #x00000001 32))))) (extract 31 0 (app abstr-vals$3402 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3395 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)) (ite x?$3394 (bvadd (extract 31 0 (app abstr-vals$3402 0)) (ite x?$3395 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3395 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (extract 31 0 (app abstr-vals$3402 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3395 (bv #x00000000 32) (bv #x00000001 32))))) (extract 31 0 (app abstr-vals$3402 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3395 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)))) (ite (bvsle (extract 31 0 (app abstr-vals$3402 1)) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$3394 (bvadd (extract 31 0 (app abstr-vals$3402 0)) (ite x?$3395 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3395 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (extract 31 0 (app abstr-vals$3402 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3395 (bv #x00000000 32) (bv #x00000001 32))))) (extract 31 0 (app abstr-vals$3402 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3395 (bv #x00000000 32) (bv #x00000001 32)))))))) (ite x?$3394 (bvadd (extract 31 0 (app abstr-vals$3402 0)) (ite x?$3395 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3395 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (extract 31 0 (app abstr-vals$3402 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3395 (bv #x00000000 32) (bv #x00000001 32))))) (extract 31 0 (app abstr-vals$3402 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3395 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32))))) (extract 31 0 (app abstr-vals$3402 1)) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$3394 (bvadd (extract 31 0 (app abstr-vals$3402 0)) (ite x?$3395 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3395 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (extract 31 0 (app abstr-vals$3402 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3395 (bv #x00000000 32) (bv #x00000001 32))))) (extract 31 0 (app abstr-vals$3402 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3395 (bv #x00000000 32) (bv #x00000001 32)))))))) (ite x?$3394 (bvadd (extract 31 0 (app abstr-vals$3402 0)) (ite x?$3395 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3395 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (extract 31 0 (app abstr-vals$3402 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3395 (bv #x00000000 32) (bv #x00000001 32))))) (extract 31 0 (app abstr-vals$3402 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3395 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)))))) (ite (bvsle (extract 31 0 (app abstr-vals$3402 1)) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$3394 (bvadd (extract 31 0 (app abstr-vals$3402 0)) (ite x?$3395 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3395 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (extract 31 0 (app abstr-vals$3402 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3395 (bv #x00000000 32) (bv #x00000001 32))))) (extract 31 0 (app abstr-vals$3402 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3395 (bv #x00000000 32) (bv #x00000001 32)))))))) (ite x?$3394 (bvadd (extract 31 0 (app abstr-vals$3402 0)) (ite x?$3395 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3395 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (extract 31 0 (app abstr-vals$3402 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3395 (bv #x00000000 32) (bv #x00000001 32))))) (extract 31 0 (app abstr-vals$3402 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3395 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32))))) (extract 31 0 (app abstr-vals$3402 1)) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$3394 (bvadd (extract 31 0 (app abstr-vals$3402 0)) (ite x?$3395 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3395 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (extract 31 0 (app abstr-vals$3402 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3395 (bv #x00000000 32) (bv #x00000001 32))))) (extract 31 0 (app abstr-vals$3402 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3395 (bv #x00000000 32) (bv #x00000001 32)))))))) (ite x?$3394 (bvadd (extract 31 0 (app abstr-vals$3402 0)) (ite x?$3395 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3395 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (extract 31 0 (app abstr-vals$3402 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3395 (bv #x00000000 32) (bv #x00000001 32))))) (extract 31 0 (app abstr-vals$3402 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3395 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32))))) (bvadd (bv #x80000000 32) (bvneg (ite (bvsle (ite x?$3394 (bvadd (extract 31 0 (app abstr-vals$3402 0)) (ite x?$3395 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3395 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (extract 31 0 (app abstr-vals$3402 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3395 (bv #x00000000 32) (bv #x00000001 32))))) (extract 31 0 (app abstr-vals$3402 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3395 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)) (ite x?$3394 (bvadd (extract 31 0 (app abstr-vals$3402 0)) (ite x?$3395 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3395 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (extract 31 0 (app abstr-vals$3402 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3395 (bv #x00000000 32) (bv #x00000001 32))))) (extract 31 0 (app abstr-vals$3402 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3395 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32))))))) (bv #x00000001 32)))))
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-shr
  (vec-cast
   (vec-max
    (vec-min
     (vec-add
      (vec-bwand
       (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
       (vec-div
        (vec-mul
         (vec-cast
          (vec-add
           (vec-add
            (vec-mul
             (vec-cast
              (load
               (buffer column_sums_b 'uint32)
               (ramp
                (sca-add
                 (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                 16)
                1
                16)
               (aligned 16 0))
              'int32
              16)
             (sca-broadcast (int32_t t5829) 16))
            (vec-add
             (load
              (buffer bias 'int32)
              (ramp (sca-mul output.s0.x.x 16) 1 16)
              (aligned 16 0))
             (sca-broadcast
              (sca-add
               (sca-mul
                (sca-mul (int32_t t5829) (int32_t t5830))
                (int32_t mat_a.extent.0))
               (sca-mul (int32_t t5830) (int32_t t6653)))
              16)))
           (vec-cast
            (load
             (buffer multiplied_no_offsets 'uint32)
             (ramp
              (sca-add
               (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
               4)
              1
              16)
             (aligned 4 0))
            'int32
            16))
          'int64
          16)
         (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
        (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
      (vec-div
       (vec-mul
        (vec-cast
         (vec-add
          (vec-add
           (vec-mul
            (vec-cast
             (load
              (buffer column_sums_b 'uint32)
              (ramp
               (sca-add
                (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                16)
               1
               16)
              (aligned 16 0))
             'int32
             16)
            (sca-broadcast (int32_t t5829) 16))
           (vec-add
            (load
             (buffer bias 'int32)
             (ramp (sca-mul output.s0.x.x 16) 1 16)
             (aligned 16 0))
            (sca-broadcast
             (sca-add
              (sca-mul
               (sca-mul (int32_t t5829) (int32_t t5830))
               (int32_t mat_a.extent.0))
              (sca-mul (int32_t t5830) (int32_t t6653)))
             16)))
          (vec-cast
           (load
            (buffer multiplied_no_offsets 'uint32)
            (ramp
             (sca-add
              (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
              4)
             1
             16)
            (aligned 4 0))
           'int32
           16))
         'int64
         16)
        (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
       (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
     (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
    (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
   'int32
   16)
  (sca-broadcast (int32_t output_shift) 16))
 (vec-bwand
  (vec-if
   (sca-broadcast
    (sca-lt (int32_t (bv #x00000000 32)) (int32_t output_shift))
    16)
   (sca-broadcast (int32_t (bv #x00000001 32)) 16)
   (sca-broadcast (int32_t (bv #x00000000 32)) 16))
  (vec-shr
   (vec-cast
    (vec-max
     (vec-min
      (vec-add
       (vec-bwand
        (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
        (vec-div
         (vec-mul
          (vec-cast
           (vec-add
            (vec-add
             (vec-mul
              (vec-cast
               (load
                (buffer column_sums_b 'uint32)
                (ramp
                 (sca-add
                  (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                  16)
                 1
                 16)
                (aligned 16 0))
               'int32
               16)
              (sca-broadcast (int32_t t5829) 16))
             (vec-add
              (load
               (buffer bias 'int32)
               (ramp (sca-mul output.s0.x.x 16) 1 16)
               (aligned 16 0))
              (sca-broadcast
               (sca-add
                (sca-mul
                 (sca-mul (int32_t t5829) (int32_t t5830))
                 (int32_t mat_a.extent.0))
                (sca-mul (int32_t t5830) (int32_t t6653)))
               16)))
            (vec-cast
             (load
              (buffer multiplied_no_offsets 'uint32)
              (ramp
               (sca-add
                (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
                4)
               1
               16)
              (aligned 4 0))
             'int32
             16))
           'int64
           16)
          (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
         (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
       (vec-div
        (vec-mul
         (vec-cast
          (vec-add
           (vec-add
            (vec-mul
             (vec-cast
              (load
               (buffer column_sums_b 'uint32)
               (ramp
                (sca-add
                 (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                 16)
                1
                16)
               (aligned 16 0))
              'int32
              16)
             (sca-broadcast (int32_t t5829) 16))
            (vec-add
             (load
              (buffer bias 'int32)
              (ramp (sca-mul output.s0.x.x 16) 1 16)
              (aligned 16 0))
             (sca-broadcast
              (sca-add
               (sca-mul
                (sca-mul (int32_t t5829) (int32_t t5830))
                (int32_t mat_a.extent.0))
               (sca-mul (int32_t t5830) (int32_t t6653)))
              16)))
           (vec-cast
            (load
             (buffer multiplied_no_offsets 'uint32)
             (ramp
              (sca-add
               (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
               4)
              1
              16)
             (aligned 4 0))
            'int32
            16))
          'int64
          16)
         (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
        (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
      (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
     (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
    'int32
    16)
   (sca-broadcast
    (sca-add (int32_t output_shift) (int32_t (bv #xffffffff 32)))
    16))))
template:
  (vs-shift-right
 ...
 (cast
  ...
  (vs-shift-right
   ...
   (vs-mpy-add
    ...
    (vs-mpy-add
     ...
     (combine
      (vs-mpy-add
       ...
       (combine
        (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
        (vs-mpy-add
         ...
         (combine
          #<load-data>
          (broadcast
           ...
           (sca-add
            (sca-mul
             (sca-mul (int32_t t5829) (int32_t t5830))
             (int32_t mat_a.extent.0))
            (sca-mul (int32_t t5830) (int32_t t6653)))))
         (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
         #f
         #f
         #f
         'int32))
       (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
       #f
       #f
       #f
       'int32)
      (cast ... #<load-data> 'int32 #f))
     (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
     #f
     #f
     #f
     'int32)
    (list (int32_t output_multiplier))
    #f
    #f
    #f
    'int64)
   (int64_t (bv #x000000000000001f 64))
   #t
   x?$2971
   #t)
  'int32
  #t)
 (union [xi?$3367 #(struct:int32_t output_shift)] [(&& (! xi?$3367) (&& (! xi?$3368) (! xi?$3369))) #(struct:sca-add
                                                                                                      #(struct:int32_t
                                                                                                        output_shift)
                                                                                                      #(struct:int32_t
                                                                                                        (bv #xffffffff 32)))] [(&& (! xi?$3367) (|| xi?$3368 (&& xi?$3369 (! xi?$3368)))) #(struct:int64_t
                                                                                                                                                                                            (ite* (⊢ xi?$3368 (bv #x000000000000001e 64)) (⊢ (&& xi?$3369 (! xi?$3368)) (bv #x000000000000001f 64))))])
 #f
 #f
 #t)
axioms:
  (list (forall (idx) (bvsle (bv #x80000001 32) (app abstr-vals$3403 idx))))
optimized-halide-expr:
  (vec-add
 (vec-shr #<abstr-halide-expr> (sca-broadcast (int32_t output_shift) 16))
 (vec-bwand
  (vec-if
   (sca-broadcast
    (sca-lt (int32_t (bv #x00000000 32)) (int32_t output_shift))
    16)
   (sca-broadcast (int32_t (bv #x00000001 32)) 16)
   (sca-broadcast (int32_t (bv #x00000000 32)) 16))
  (vec-shr
   #<abstr-halide-expr>
   (sca-broadcast
    (sca-add (int32_t output_shift) (int32_t (bv #xffffffff 32)))
    16))))
optimized-template:
  (vs-shift-right
 ...
 #<abstr-expr>
 (union [xi?$3367 #(struct:int32_t output_shift)] [(&& (! xi?$3367) (&& (! xi?$3368) (! xi?$3369))) #(struct:sca-add
                                                                                                      #(struct:int32_t
                                                                                                        output_shift)
                                                                                                      #(struct:int32_t
                                                                                                        (bv #xffffffff 32)))] [(&& (! xi?$3367) (|| xi?$3368 (&& xi?$3369 (! xi?$3368)))) #(struct:int64_t
                                                                                                                                                                                            (ite* (⊢ xi?$3368 (bv #x000000000000001e 64)) (⊢ (&& xi?$3369 (! xi?$3368)) (bv #x000000000000001f 64))))])
 #f
 #f
 #t)
optimized Halide 0:
  (int32_t
 (bvadd (bvashr (app abstr-vals$3403 0) output_shift) (bvand (ite (bvslt (bv #x00000000 32) output_shift) (bv #x00000001 32) (bv #x00000000 32)) (bvashr (app abstr-vals$3403 0) (bvadd (bv #xffffffff 32) output_shift)))))
optimized x86 0:
  (int32_t
 (bvashr (app abstr-vals$3403 0) (ite* (⊢ (&& (! xi?$3367) (|| xi?$3368 (&& xi?$3369 (! xi?$3368)))) (extract 31 0 (ite* (⊢ xi?$3368 (bv #x000000000000001e 64)) (⊢ (&& xi?$3369 (! xi?$3368)) (bv #x000000000000001f 64))))) (⊢ (|| xi?$3367 (&& (! xi?$3367) (&& (! xi?$3368) (! xi?$3369)))) (ite* (⊢ xi?$3367 output_shift) (⊢ (&& (! xi?$3367) (&& (! xi?$3368) (! xi?$3369))) (bvadd (bv #xffffffff 32) output_shift)))))))
Ran synthesizer for 217 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-shr
  (vec-cast
   (vec-max
    (vec-min
     (vec-add
      (vec-bwand
       (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
       (vec-div
        (vec-mul
         (vec-cast
          (vec-add
           (vec-add
            (vec-mul
             (vec-cast
              (load
               (buffer column_sums_b 'uint32)
               (ramp
                (sca-add
                 (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                 16)
                1
                16)
               (aligned 16 0))
              'int32
              16)
             (sca-broadcast (int32_t t5829) 16))
            (vec-add
             (load
              (buffer bias 'int32)
              (ramp (sca-mul output.s0.x.x 16) 1 16)
              (aligned 16 0))
             (sca-broadcast
              (sca-add
               (sca-mul
                (sca-mul (int32_t t5829) (int32_t t5830))
                (int32_t mat_a.extent.0))
               (sca-mul (int32_t t5830) (int32_t t6653)))
              16)))
           (vec-cast
            (load
             (buffer multiplied_no_offsets 'uint32)
             (ramp
              (sca-add
               (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
               4)
              1
              16)
             (aligned 4 0))
            'int32
            16))
          'int64
          16)
         (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
        (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
      (vec-div
       (vec-mul
        (vec-cast
         (vec-add
          (vec-add
           (vec-mul
            (vec-cast
             (load
              (buffer column_sums_b 'uint32)
              (ramp
               (sca-add
                (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                16)
               1
               16)
              (aligned 16 0))
             'int32
             16)
            (sca-broadcast (int32_t t5829) 16))
           (vec-add
            (load
             (buffer bias 'int32)
             (ramp (sca-mul output.s0.x.x 16) 1 16)
             (aligned 16 0))
            (sca-broadcast
             (sca-add
              (sca-mul
               (sca-mul (int32_t t5829) (int32_t t5830))
               (int32_t mat_a.extent.0))
              (sca-mul (int32_t t5830) (int32_t t6653)))
             16)))
          (vec-cast
           (load
            (buffer multiplied_no_offsets 'uint32)
            (ramp
             (sca-add
              (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
              4)
             1
             16)
            (aligned 4 0))
           'int32
           16))
         'int64
         16)
        (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
       (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
     (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
    (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
   'int32
   16)
  (sca-broadcast (int32_t output_shift) 16))
 (vec-bwand
  (vec-if
   (sca-broadcast
    (sca-lt (int32_t (bv #x00000000 32)) (int32_t output_shift))
    16)
   (sca-broadcast (int32_t (bv #x00000001 32)) 16)
   (sca-broadcast (int32_t (bv #x00000000 32)) 16))
  (vec-shr
   (vec-cast
    (vec-max
     (vec-min
      (vec-add
       (vec-bwand
        (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
        (vec-div
         (vec-mul
          (vec-cast
           (vec-add
            (vec-add
             (vec-mul
              (vec-cast
               (load
                (buffer column_sums_b 'uint32)
                (ramp
                 (sca-add
                  (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                  16)
                 1
                 16)
                (aligned 16 0))
               'int32
               16)
              (sca-broadcast (int32_t t5829) 16))
             (vec-add
              (load
               (buffer bias 'int32)
               (ramp (sca-mul output.s0.x.x 16) 1 16)
               (aligned 16 0))
              (sca-broadcast
               (sca-add
                (sca-mul
                 (sca-mul (int32_t t5829) (int32_t t5830))
                 (int32_t mat_a.extent.0))
                (sca-mul (int32_t t5830) (int32_t t6653)))
               16)))
            (vec-cast
             (load
              (buffer multiplied_no_offsets 'uint32)
              (ramp
               (sca-add
                (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
                4)
               1
               16)
              (aligned 4 0))
             'int32
             16))
           'int64
           16)
          (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
         (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
       (vec-div
        (vec-mul
         (vec-cast
          (vec-add
           (vec-add
            (vec-mul
             (vec-cast
              (load
               (buffer column_sums_b 'uint32)
               (ramp
                (sca-add
                 (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                 16)
                1
                16)
               (aligned 16 0))
              'int32
              16)
             (sca-broadcast (int32_t t5829) 16))
            (vec-add
             (load
              (buffer bias 'int32)
              (ramp (sca-mul output.s0.x.x 16) 1 16)
              (aligned 16 0))
             (sca-broadcast
              (sca-add
               (sca-mul
                (sca-mul (int32_t t5829) (int32_t t5830))
                (int32_t mat_a.extent.0))
               (sca-mul (int32_t t5830) (int32_t t6653)))
              16)))
           (vec-cast
            (load
             (buffer multiplied_no_offsets 'uint32)
             (ramp
              (sca-add
               (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
               4)
              1
              16)
             (aligned 4 0))
            'int32
            16))
          'int64
          16)
         (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
        (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
      (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
     (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
    'int32
    16)
   (sca-broadcast
    (sca-add (int32_t output_shift) (int32_t (bv #xffffffff 32)))
    16))))
template:
  (vs-shift-right
 ...
 (cast
  ...
  (vs-shift-right
   ...
   (vs-mpy-add
    ...
    (vs-mpy-add
     ...
     (combine
      (vs-mpy-add
       ...
       (combine
        (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
        (vs-mpy-add
         ...
         (combine
          #<load-data>
          (broadcast
           ...
           (sca-add
            (sca-mul
             (sca-mul (int32_t t5829) (int32_t t5830))
             (int32_t mat_a.extent.0))
            (sca-mul (int32_t t5830) (int32_t t6653)))))
         (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
         #f
         #f
         #f
         'int32))
       (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
       #f
       #f
       #f
       'int32)
      (cast ... #<load-data> 'int32 #f))
     (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
     #f
     #f
     #f
     'int32)
    (list (int32_t output_multiplier))
    #f
    #f
    #f
    'int64)
   (int64_t (bv #x000000000000001f 64))
   #t
   x?$2971
   #t)
  'int32
  #t)
 (int32_t output_shift)
 x?$3370
 x?$3371
 x?$3372)
axioms:
  (list (forall (idx) (bvsle (bv #x80000001 32) (app abstr-vals$3404 idx))))
optimized-halide-expr:
  (vec-add
 (vec-shr #<abstr-halide-expr> (sca-broadcast (int32_t output_shift) 16))
 (vec-bwand
  (vec-if
   (sca-broadcast
    (sca-lt (int32_t (bv #x00000000 32)) (int32_t output_shift))
    16)
   (sca-broadcast (int32_t (bv #x00000001 32)) 16)
   (sca-broadcast (int32_t (bv #x00000000 32)) 16))
  (vec-shr
   #<abstr-halide-expr>
   (sca-broadcast
    (sca-add (int32_t output_shift) (int32_t (bv #xffffffff 32)))
    16))))
optimized-template:
  (vs-shift-right
 ...
 #<abstr-expr>
 (int32_t output_shift)
 x?$3370
 x?$3371
 x?$3372)
optimized Halide 0:
  (int32_t
 (bvadd (bvashr (app abstr-vals$3404 0) output_shift) (bvand (ite (bvslt (bv #x00000000 32) output_shift) (bv #x00000001 32) (bv #x00000000 32)) (bvashr (app abstr-vals$3404 0) (bvadd (bv #xffffffff 32) output_shift)))))
optimized x86 0:
  (int32_t
 (ite x?$3370 (bvadd (ite x?$3372 (bvashr (app abstr-vals$3404 0) output_shift) (bvlshr (app abstr-vals$3404 0) output_shift)) (bvand (ite (bvslt (bv #x00000000 32) output_shift) (bv #x00000001 32) (bv #x00000000 32)) (ite x?$3372 (bvashr (app abstr-vals$3404 0) (bvadd (bv #xffffffff 32) output_shift)) (bvlshr (app abstr-vals$3404 0) (bvadd (bv #xffffffff 32) output_shift))))) (ite x?$3372 (bvashr (app abstr-vals$3404 0) output_shift) (bvlshr (app abstr-vals$3404 0) output_shift))))
Ran synthesizer for 283 ms
(model
 [x?$3370 #t]
 [x?$3372 #t])
(vec-add
 (vec-shr #<abstr-halide-expr> (sca-broadcast (int32_t output_shift) 16))
 (vec-bwand
  (vec-if
   (sca-broadcast
    (sca-lt (int32_t (bv #x00000000 32)) (int32_t output_shift))
    16)
   (sca-broadcast (int32_t (bv #x00000001 32)) 16)
   (sca-broadcast (int32_t (bv #x00000000 32)) 16))
  (vec-shr
   #<abstr-halide-expr>
   (sca-broadcast
    (sca-add (int32_t output_shift) (int32_t (bv #xffffffff 32)))
    16))))
(vs-shift-right
 ...
 (cast
  ...
  (vs-shift-right
   ...
   (vs-mpy-add
    ...
    (vs-mpy-add
     ...
     (combine
      (vs-mpy-add
       ...
       (combine
        (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
        (vs-mpy-add
         ...
         (combine
          #<load-data>
          (broadcast
           ...
           (sca-add
            (sca-mul
             (sca-mul (int32_t t5829) (int32_t t5830))
             (int32_t mat_a.extent.0))
            (sca-mul (int32_t t5830) (int32_t t6653)))))
         (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
         #f
         #f
         #f
         'int32))
       (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
       #f
       #f
       #f
       'int32)
      (cast ... #<load-data> 'int32 #f))
     (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
     #f
     #f
     #f
     'int32)
    (list (int32_t output_multiplier))
    #f
    #f
    #f
    'int64)
   (int64_t (bv #x000000000000001f 64))
   #t
   x?$2971
   #t)
  'int32
  #t)
 (int32_t output_shift)
 #t
 x?$3371
 #t)
Ran bounds analysis for 40 ms
Ran bounds analysis for 37 ms
"Success?"
#t
(vs-shift-right ... (cast ... (vs-shift-right ... (vs-mpy-add ... (vs-mpy-add ... (combine (vs-mpy-add ... (combine (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32) (vs-mpy-add ... (combine #<load-data> (broadcast ... (sca-add (sca-mul (sca-mul (int32_t t5829) (int32_t t5830)) (int32_t mat_a.extent.0)) (sca-mul (int32_t t5830) (int32_t t6653))))) (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8))) #f #f #f 'int32)) (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8))) #f #f #f 'int32) (cast ... #<load-data> 'int32 #f)) (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8))) #f #f #f 'int32) (list (int32_t output_multiplier)) #f #f #f 'int64) (int64_t (bv #x000000000000001f 64)) #t x?$2971 #t) 'int32 #t) (int32_t output_shift) #t x?$3371 #t)
"Building Expr:"
(sca-broadcast (int32_t output_offset) 16)
"Fold templates"
'()
here()

"Replace templates"
'()
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (sca-broadcast (int32_t output_offset) 16)
template:
  (broadcast ... (int32_t output_offset))
axioms:
  '()
optimized-halide-expr:
  (sca-broadcast (int32_t output_offset) 16)
optimized-template:
  (broadcast ... (int32_t output_offset))
optimized Halide 0:
  (int32_t output_offset)
optimized x86 0:
  (int32_t output_offset)
Ran synthesizer for 18 ms
(model)
(sca-broadcast (int32_t output_offset) 16)
(broadcast ... (int32_t output_offset))
Ran bounds analysis for 35 ms
Ran bounds analysis for 27 ms
"Extended success?"
#t
(broadcast ... (int32_t output_offset))
"Building Expr:"
(vec-add
 (vec-add
  (vec-shr
   (vec-cast
    (vec-max
     (vec-min
      (vec-add
       (vec-bwand
        (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
        (vec-div
         (vec-mul
          (vec-cast
           (vec-add
            (vec-add
             (vec-mul
              (vec-cast
               (load
                (buffer column_sums_b 'uint32)
                (ramp
                 (sca-add
                  (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                  16)
                 1
                 16)
                (aligned 16 0))
               'int32
               16)
              (sca-broadcast (int32_t t5829) 16))
             (vec-add
              (load
               (buffer bias 'int32)
               (ramp (sca-mul output.s0.x.x 16) 1 16)
               (aligned 16 0))
              (sca-broadcast
               (sca-add
                (sca-mul
                 (sca-mul (int32_t t5829) (int32_t t5830))
                 (int32_t mat_a.extent.0))
                (sca-mul (int32_t t5830) (int32_t t6653)))
               16)))
            (vec-cast
             (load
              (buffer multiplied_no_offsets 'uint32)
              (ramp
               (sca-add
                (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
                4)
               1
               16)
              (aligned 4 0))
             'int32
             16))
           'int64
           16)
          (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
         (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
       (vec-div
        (vec-mul
         (vec-cast
          (vec-add
           (vec-add
            (vec-mul
             (vec-cast
              (load
               (buffer column_sums_b 'uint32)
               (ramp
                (sca-add
                 (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                 16)
                1
                16)
               (aligned 16 0))
              'int32
              16)
             (sca-broadcast (int32_t t5829) 16))
            (vec-add
             (load
              (buffer bias 'int32)
              (ramp (sca-mul output.s0.x.x 16) 1 16)
              (aligned 16 0))
             (sca-broadcast
              (sca-add
               (sca-mul
                (sca-mul (int32_t t5829) (int32_t t5830))
                (int32_t mat_a.extent.0))
               (sca-mul (int32_t t5830) (int32_t t6653)))
              16)))
           (vec-cast
            (load
             (buffer multiplied_no_offsets 'uint32)
             (ramp
              (sca-add
               (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
               4)
              1
              16)
             (aligned 4 0))
            'int32
            16))
          'int64
          16)
         (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
        (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
      (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
     (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
    'int32
    16)
   (sca-broadcast (int32_t output_shift) 16))
  (vec-bwand
   (vec-if
    (sca-broadcast
     (sca-lt (int32_t (bv #x00000000 32)) (int32_t output_shift))
     16)
    (sca-broadcast (int32_t (bv #x00000001 32)) 16)
    (sca-broadcast (int32_t (bv #x00000000 32)) 16))
   (vec-shr
    (vec-cast
     (vec-max
      (vec-min
       (vec-add
        (vec-bwand
         (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
         (vec-div
          (vec-mul
           (vec-cast
            (vec-add
             (vec-add
              (vec-mul
               (vec-cast
                (load
                 (buffer column_sums_b 'uint32)
                 (ramp
                  (sca-add
                   (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                   16)
                  1
                  16)
                 (aligned 16 0))
                'int32
                16)
               (sca-broadcast (int32_t t5829) 16))
              (vec-add
               (load
                (buffer bias 'int32)
                (ramp (sca-mul output.s0.x.x 16) 1 16)
                (aligned 16 0))
               (sca-broadcast
                (sca-add
                 (sca-mul
                  (sca-mul (int32_t t5829) (int32_t t5830))
                  (int32_t mat_a.extent.0))
                 (sca-mul (int32_t t5830) (int32_t t6653)))
                16)))
             (vec-cast
              (load
               (buffer multiplied_no_offsets 'uint32)
               (ramp
                (sca-add
                 (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
                 4)
                1
                16)
               (aligned 4 0))
              'int32
              16))
            'int64
            16)
           (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
          (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
        (vec-div
         (vec-mul
          (vec-cast
           (vec-add
            (vec-add
             (vec-mul
              (vec-cast
               (load
                (buffer column_sums_b 'uint32)
                (ramp
                 (sca-add
                  (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                  16)
                 1
                 16)
                (aligned 16 0))
               'int32
               16)
              (sca-broadcast (int32_t t5829) 16))
             (vec-add
              (load
               (buffer bias 'int32)
               (ramp (sca-mul output.s0.x.x 16) 1 16)
               (aligned 16 0))
              (sca-broadcast
               (sca-add
                (sca-mul
                 (sca-mul (int32_t t5829) (int32_t t5830))
                 (int32_t mat_a.extent.0))
                (sca-mul (int32_t t5830) (int32_t t6653)))
               16)))
            (vec-cast
             (load
              (buffer multiplied_no_offsets 'uint32)
              (ramp
               (sca-add
                (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
                4)
               1
               16)
              (aligned 4 0))
             'int32
             16))
           'int64
           16)
          (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
         (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
       (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
      (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
     'int32
     16)
    (sca-broadcast
     (sca-add (int32_t output_shift) (int32_t (bv #xffffffff 32)))
     16))))
 (sca-broadcast (int32_t output_offset) 16))
"Fold templates"
(list
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (vs-mpy-add
    ...
    (combine
     (vs-mpy-add
      ...
      (combine
       (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
       (vs-mpy-add
        ...
        (combine
         #<load-data>
         (broadcast
          ...
          (sca-add
           (sca-mul
            (sca-mul (int32_t t5829) (int32_t t5830))
            (int32_t mat_a.extent.0))
           (sca-mul (int32_t t5830) (int32_t t6653)))))
        (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
        #f
        #f
        #f
        'int32))
      (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
      #f
      #f
      #f
      'int32)
     (cast ... #<load-data> 'int32 #f))
    (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
    #f
    #f
    #f
    'int32)
   (list (int32_t output_multiplier))
   #f
   #f
   #f
   'int64)
  (union [xi?$3413 #(struct:int32_t output_shift)] [(&& (! xi?$3413) (&& (! xi?$3414) (! xi?$3415))) #(struct:sca-add
                                                                                                       #(struct:int32_t
                                                                                                         output_shift)
                                                                                                       #(struct:int32_t
                                                                                                         (bv #xffffffff 32)))] [(&& (! xi?$3413) (|| xi?$3414 (&& xi?$3415 (! xi?$3414)))) #(struct:int64_t
                                                                                                                                                                                             (ite* (⊢ xi?$3414 (bv #x000000000000001e 64)) (⊢ (&& xi?$3415 (! xi?$3414)) (bv #x000000000000001f 64))))])
  #t
  x?$2971
  #t)
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (vs-mpy-add
    ...
    (combine
     (vs-mpy-add
      ...
      (combine
       (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
       (vs-mpy-add
        ...
        (combine
         #<load-data>
         (broadcast
          ...
          (sca-add
           (sca-mul
            (sca-mul (int32_t t5829) (int32_t t5830))
            (int32_t mat_a.extent.0))
           (sca-mul (int32_t t5830) (int32_t t6653)))))
        (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
        #f
        #f
        #f
        'int32))
      (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
      #f
      #f
      #f
      'int32)
     (cast ... #<load-data> 'int32 #f))
    (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
    #f
    #f
    #f
    'int32)
   (list (int32_t output_multiplier))
   #f
   #f
   #f
   'int64)
  (int64_t (bv #x000000000000001f 64))
  x?$3416
  x?$3417
  x?$3418)
 (cast
  ...
  (vs-shift-right
   ...
   (vs-mpy-add
    ...
    (vs-mpy-add
     ...
     (combine
      (vs-mpy-add
       ...
       (combine
        (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
        (vs-mpy-add
         ...
         (combine
          #<load-data>
          (broadcast
           ...
           (sca-add
            (sca-mul
             (sca-mul (int32_t t5829) (int32_t t5830))
             (int32_t mat_a.extent.0))
            (sca-mul (int32_t t5830) (int32_t t6653)))))
         (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
         #f
         #f
         #f
         'int32))
       (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
       #f
       #f
       #f
       'int32)
      (cast ... #<load-data> 'int32 #f))
     (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
     #f
     #f
     #f
     'int32)
    (list (int32_t output_multiplier))
    #f
    #f
    #f
    'int64)
   (int64_t (bv #x000000000000001f 64))
   #t
   x?$2971
   #t)
  'int32
  x?$3412)
 (vs-shift-right
  ...
  (cast
   ...
   (vs-shift-right
    ...
    (vs-mpy-add
     ...
     (vs-mpy-add
      ...
      (combine
       (vs-mpy-add
        ...
        (combine
         (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
         (vs-mpy-add
          ...
          (combine
           #<load-data>
           (broadcast
            ...
            (sca-add
             (sca-mul
              (sca-mul (int32_t t5829) (int32_t t5830))
              (int32_t mat_a.extent.0))
             (sca-mul (int32_t t5830) (int32_t t6653)))))
          (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
          #f
          #f
          #f
          'int32))
        (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
        #f
        #f
        #f
        'int32)
       (cast ... #<load-data> 'int32 #f))
      (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
      #f
      #f
      #f
      'int32)
     (list (int32_t output_multiplier))
     #f
     #f
     #f
     'int64)
    (int64_t (bv #x000000000000001f 64))
    #t
    x?$2971
    #t)
   'int32
   #t)
  (union [xi?$3406 #(struct:int32_t output_shift)] [(&& (! xi?$3406) (&& (! xi?$3407) (! xi?$3408))) #(struct:sca-add
                                                                                                       #(struct:int32_t
                                                                                                         output_shift)
                                                                                                       #(struct:int32_t
                                                                                                         (bv #xffffffff 32)))] [(&& (! xi?$3406) (|| xi?$3407 (&& xi?$3408 (! xi?$3407)))) #(struct:int64_t
                                                                                                                                                                                             (ite* (⊢ xi?$3407 (bv #x000000000000001e 64)) (⊢ (&& xi?$3408 (! xi?$3407)) (bv #x000000000000001f 64))))])
  #t
  x?$3371
  #t)
 (vs-shift-right
  ...
  (cast
   ...
   (vs-shift-right
    ...
    (vs-mpy-add
     ...
     (vs-mpy-add
      ...
      (combine
       (vs-mpy-add
        ...
        (combine
         (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
         (vs-mpy-add
          ...
          (combine
           #<load-data>
           (broadcast
            ...
            (sca-add
             (sca-mul
              (sca-mul (int32_t t5829) (int32_t t5830))
              (int32_t mat_a.extent.0))
             (sca-mul (int32_t t5830) (int32_t t6653)))))
          (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
          #f
          #f
          #f
          'int32))
        (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
        #f
        #f
        #f
        'int32)
       (cast ... #<load-data> 'int32 #f))
      (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
      #f
      #f
      #f
      'int32)
     (list (int32_t output_multiplier))
     #f
     #f
     #f
     'int64)
    (int64_t (bv #x000000000000001f 64))
    #t
    x?$2971
    #t)
   'int32
   #t)
  (int32_t output_shift)
  x?$3409
  x?$3410
  x?$3411))
here(#(struct:vs-shift-right ... #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<load-data> (#(struct:int32_t t5829)) #f #f #f int32) #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-add #(struct:sca-mul #(struct:sca-mul #(struct:int32_t t5829) #(struct:int32_t t5830)) #(struct:int32_t mat_a.extent.0)) #(struct:sca-mul #(struct:int32_t t5830) #(struct:int32_t t6653))))> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32)> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32) #(struct:cast ... #<load-data> int32 #f)> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32) (#(struct:int32_t output_multiplier)) #f #f #f int64) (union #:size 3 #:hash -841568637387482576) #t x?$2971 #t) #(struct:vs-shift-right ... #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<load-data> (#(struct:int32_t t5829)) #f #f #f int32) #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-add #(struct:sca-mul #(struct:sca-mul #(struct:int32_t t5829) #(struct:int32_t t5830)) #(struct:int32_t mat_a.extent.0)) #(struct:sca-mul #(struct:int32_t t5830) #(struct:int32_t t6653))))> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32)> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32) #(struct:cast ... #<load-data> int32 #f)> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32) (#(struct:int32_t output_multiplier)) #f #f #f int64) #(struct:int64_t (bv #x000000000000001f 64)) x?$3416 x?$3417 x?$3418) #(struct:cast ... #(struct:vs-shift-right ... #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<load-data> (#(struct:int32_t t5829)) #f #f #f int32) #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-add #(struct:sca-mul #(struct:sca-mul #(struct:int32_t t5829) #(struct:int32_t t5830)) #(struct:int32_t mat_a.extent.0)) #(struct:sca-mul #(struct:int32_t t5830) #(struct:int32_t t6653))))> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32)> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32) #(struct:cast ... #<load-data> int32 #f)> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32) (#(struct:int32_t output_multiplier)) #f #f #f int64) #(struct:int64_t (bv #x000000000000001f 64)) #t x?$2971 #t) int32 x?$3412) #(struct:vs-shift-right ... #(struct:cast ... #(struct:vs-shift-right ... #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<load-data> (#(struct:int32_t t5829)) #f #f #f int32) #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-add #(struct:sca-mul #(struct:sca-mul #(struct:int32_t t5829) #(struct:int32_t t5830)) #(struct:int32_t mat_a.extent.0)) #(struct:sca-mul #(struct:int32_t t5830) #(struct:int32_t t6653))))> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32)> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32) #(struct:cast ... #<load-data> int32 #f)> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32) (#(struct:int32_t output_multiplier)) #f #f #f int64) #(struct:int64_t (bv #x000000000000001f 64)) #t x?$2971 #t) int32 #t) (union #:size 3 #:hash -841568410258308888) #t x?$3371 #t) #(struct:vs-shift-right ... #(struct:cast ... #(struct:vs-shift-right ... #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<load-data> (#(struct:int32_t t5829)) #f #f #f int32) #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-add #(struct:sca-mul #(struct:sca-mul #(struct:int32_t t5829) #(struct:int32_t t5830)) #(struct:int32_t mat_a.extent.0)) #(struct:sca-mul #(struct:int32_t t5830) #(struct:int32_t t6653))))> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32)> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32) #(struct:cast ... #<load-data> int32 #f)> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32) (#(struct:int32_t output_multiplier)) #f #f #f int64) #(struct:int64_t (bv #x000000000000001f 64)) #t x?$2971 #t) int32 #t) #(struct:int32_t output_shift) x?$3409 x?$3410 x?$3411))

"Replace templates"
(list
 (vs-mpy-add
  ...
  (vs-shift-right
   ...
   (vs-mpy-add
    ...
    (vs-mpy-add
     ...
     (combine
      (vs-mpy-add
       ...
       (combine
        (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
        (vs-mpy-add
         ...
         (combine
          #<load-data>
          (broadcast
           ...
           (sca-add
            (sca-mul
             (sca-mul (int32_t t5829) (int32_t t5830))
             (int32_t mat_a.extent.0))
            (sca-mul (int32_t t5830) (int32_t t6653)))))
         (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
         #f
         #f
         #f
         'int32))
       (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
       #f
       #f
       #f
       'int32)
      (cast ... #<load-data> 'int32 #f))
     (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
     #f
     #f
     #f
     'int32)
    (list (int32_t output_multiplier))
    #f
    #f
    #f
    'int64)
   (int64_t (bv #x000000000000001f 64))
   #t
   x?$2971
   #t)
  (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
  (! x?$3421)
  (! x?$3422)
  (! x?$3423)
  'int32))
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-add
  (vec-shr
   (vec-cast
    (vec-max
     (vec-min
      (vec-add
       (vec-bwand
        (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
        (vec-div
         (vec-mul
          (vec-cast
           (vec-add
            (vec-add
             (vec-mul
              (vec-cast
               (load
                (buffer column_sums_b 'uint32)
                (ramp
                 (sca-add
                  (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                  16)
                 1
                 16)
                (aligned 16 0))
               'int32
               16)
              (sca-broadcast (int32_t t5829) 16))
             (vec-add
              (load
               (buffer bias 'int32)
               (ramp (sca-mul output.s0.x.x 16) 1 16)
               (aligned 16 0))
              (sca-broadcast
               (sca-add
                (sca-mul
                 (sca-mul (int32_t t5829) (int32_t t5830))
                 (int32_t mat_a.extent.0))
                (sca-mul (int32_t t5830) (int32_t t6653)))
               16)))
            (vec-cast
             (load
              (buffer multiplied_no_offsets 'uint32)
              (ramp
               (sca-add
                (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
                4)
               1
               16)
              (aligned 4 0))
             'int32
             16))
           'int64
           16)
          (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
         (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
       (vec-div
        (vec-mul
         (vec-cast
          (vec-add
           (vec-add
            (vec-mul
             (vec-cast
              (load
               (buffer column_sums_b 'uint32)
               (ramp
                (sca-add
                 (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                 16)
                1
                16)
               (aligned 16 0))
              'int32
              16)
             (sca-broadcast (int32_t t5829) 16))
            (vec-add
             (load
              (buffer bias 'int32)
              (ramp (sca-mul output.s0.x.x 16) 1 16)
              (aligned 16 0))
             (sca-broadcast
              (sca-add
               (sca-mul
                (sca-mul (int32_t t5829) (int32_t t5830))
                (int32_t mat_a.extent.0))
               (sca-mul (int32_t t5830) (int32_t t6653)))
              16)))
           (vec-cast
            (load
             (buffer multiplied_no_offsets 'uint32)
             (ramp
              (sca-add
               (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
               4)
              1
              16)
             (aligned 4 0))
            'int32
            16))
          'int64
          16)
         (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
        (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
      (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
     (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
    'int32
    16)
   (sca-broadcast (int32_t output_shift) 16))
  (vec-bwand
   (vec-if
    (sca-broadcast
     (sca-lt (int32_t (bv #x00000000 32)) (int32_t output_shift))
     16)
    (sca-broadcast (int32_t (bv #x00000001 32)) 16)
    (sca-broadcast (int32_t (bv #x00000000 32)) 16))
   (vec-shr
    (vec-cast
     (vec-max
      (vec-min
       (vec-add
        (vec-bwand
         (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
         (vec-div
          (vec-mul
           (vec-cast
            (vec-add
             (vec-add
              (vec-mul
               (vec-cast
                (load
                 (buffer column_sums_b 'uint32)
                 (ramp
                  (sca-add
                   (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                   16)
                  1
                  16)
                 (aligned 16 0))
                'int32
                16)
               (sca-broadcast (int32_t t5829) 16))
              (vec-add
               (load
                (buffer bias 'int32)
                (ramp (sca-mul output.s0.x.x 16) 1 16)
                (aligned 16 0))
               (sca-broadcast
                (sca-add
                 (sca-mul
                  (sca-mul (int32_t t5829) (int32_t t5830))
                  (int32_t mat_a.extent.0))
                 (sca-mul (int32_t t5830) (int32_t t6653)))
                16)))
             (vec-cast
              (load
               (buffer multiplied_no_offsets 'uint32)
               (ramp
                (sca-add
                 (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
                 4)
                1
                16)
               (aligned 4 0))
              'int32
              16))
            'int64
            16)
           (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
          (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
        (vec-div
         (vec-mul
          (vec-cast
           (vec-add
            (vec-add
             (vec-mul
              (vec-cast
               (load
                (buffer column_sums_b 'uint32)
                (ramp
                 (sca-add
                  (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                  16)
                 1
                 16)
                (aligned 16 0))
               'int32
               16)
              (sca-broadcast (int32_t t5829) 16))
             (vec-add
              (load
               (buffer bias 'int32)
               (ramp (sca-mul output.s0.x.x 16) 1 16)
               (aligned 16 0))
              (sca-broadcast
               (sca-add
                (sca-mul
                 (sca-mul (int32_t t5829) (int32_t t5830))
                 (int32_t mat_a.extent.0))
                (sca-mul (int32_t t5830) (int32_t t6653)))
               16)))
            (vec-cast
             (load
              (buffer multiplied_no_offsets 'uint32)
              (ramp
               (sca-add
                (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
                4)
               1
               16)
              (aligned 4 0))
             'int32
             16))
           'int64
           16)
          (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
         (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
       (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
      (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
     'int32
     16)
    (sca-broadcast
     (sca-add (int32_t output_shift) (int32_t (bv #xffffffff 32)))
     16))))
 (sca-broadcast (int32_t output_offset) 16))
template:
  (vs-shift-right
 ...
 (vs-mpy-add
  ...
  (vs-mpy-add
   ...
   (combine
    (vs-mpy-add
     ...
     (combine
      (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
      (vs-mpy-add
       ...
       (combine
        #<load-data>
        (broadcast
         ...
         (sca-add
          (sca-mul
           (sca-mul (int32_t t5829) (int32_t t5830))
           (int32_t mat_a.extent.0))
          (sca-mul (int32_t t5830) (int32_t t6653)))))
       (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
       #f
       #f
       #f
       'int32))
     (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
     #f
     #f
     #f
     'int32)
    (cast ... #<load-data> 'int32 #f))
   (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
   #f
   #f
   #f
   'int32)
  (list (int32_t output_multiplier))
  #f
  #f
  #f
  'int64)
 (union [xi?$3413 #(struct:int32_t output_shift)] [(&& (! xi?$3413) (&& (! xi?$3414) (! xi?$3415))) #(struct:sca-add
                                                                                                      #(struct:int32_t
                                                                                                        output_shift)
                                                                                                      #(struct:int32_t
                                                                                                        (bv #xffffffff 32)))] [(&& (! xi?$3413) (|| xi?$3414 (&& xi?$3415 (! xi?$3414)))) #(struct:int64_t
                                                                                                                                                                                            (ite* (⊢ xi?$3414 (bv #x000000000000001e 64)) (⊢ (&& xi?$3415 (! xi?$3414)) (bv #x000000000000001f 64))))])
 #t
 x?$2971
 #t)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$3424 idx) (bv #x4000000000000000 64)) (bvsle (bv #xc000000080000000 64) (app abstr-vals$3424 idx)))))
optimized-halide-expr:
  (vec-add
 (vec-add
  (vec-shr
   (vec-cast
    (vec-max
     (vec-min
      (vec-add
       (vec-bwand
        (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
        (vec-div
         #<abstr-halide-expr>
         (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
       (vec-div
        #<abstr-halide-expr>
        (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
      (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
     (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
    'int32
    16)
   (sca-broadcast (int32_t output_shift) 16))
  (vec-bwand
   (vec-if
    (sca-broadcast
     (sca-lt (int32_t (bv #x00000000 32)) (int32_t output_shift))
     16)
    (sca-broadcast (int32_t (bv #x00000001 32)) 16)
    (sca-broadcast (int32_t (bv #x00000000 32)) 16))
   (vec-shr
    (vec-cast
     (vec-max
      (vec-min
       (vec-add
        (vec-bwand
         (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
         (vec-div
          #<abstr-halide-expr>
          (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
        (vec-div
         #<abstr-halide-expr>
         (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
       (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
      (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
     'int32
     16)
    (sca-broadcast
     (sca-add (int32_t output_shift) (int32_t (bv #xffffffff 32)))
     16))))
 (sca-broadcast (int32_t output_offset) 16))
optimized-template:
  (vs-shift-right
 ...
 #<abstr-expr>
 (union [xi?$3413 #(struct:int32_t output_shift)] [(&& (! xi?$3413) (&& (! xi?$3414) (! xi?$3415))) #(struct:sca-add
                                                                                                      #(struct:int32_t
                                                                                                        output_shift)
                                                                                                      #(struct:int32_t
                                                                                                        (bv #xffffffff 32)))] [(&& (! xi?$3413) (|| xi?$3414 (&& xi?$3415 (! xi?$3414)))) #(struct:int64_t
                                                                                                                                                                                            (ite* (⊢ xi?$3414 (bv #x000000000000001e 64)) (⊢ (&& xi?$3415 (! xi?$3414)) (bv #x000000000000001f 64))))])
 #t
 x?$2971
 #t)
optimized Halide 0:
  (int32_t
 (bvadd output_offset (bvadd (bvashr (extract 31 0 (ite (bvsle (bv #xffffffff80000000 64) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (app abstr-vals$3424 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$3424 0) (bvneg (bvashr (app abstr-vals$3424 0) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (app abstr-vals$3424 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$3424 0) (bvneg (bvashr (app abstr-vals$3424 0) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (app abstr-vals$3424 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$3424 0) (bvneg (bvashr (app abstr-vals$3424 0) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (app abstr-vals$3424 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$3424 0) (bvneg (bvashr (app abstr-vals$3424 0) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64))) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (app abstr-vals$3424 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$3424 0) (bvneg (bvashr (app abstr-vals$3424 0) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (app abstr-vals$3424 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$3424 0) (bvneg (bvashr (app abstr-vals$3424 0) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (app abstr-vals$3424 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$3424 0) (bvneg (bvashr (app abstr-vals$3424 0) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (app abstr-vals$3424 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$3424 0) (bvneg (bvashr (app abstr-vals$3424 0) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bv #xffffffff80000000 64))) output_shift) (bvand (ite (bvslt (bv #x00000000 32) output_shift) (bv #x00000001 32) (bv #x00000000 32)) (bvashr (extract 31 0 (ite (bvsle (bv #xffffffff80000000 64) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (app abstr-vals$3424 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$3424 0) (bvneg (bvashr (app abstr-vals$3424 0) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (app abstr-vals$3424 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$3424 0) (bvneg (bvashr (app abstr-vals$3424 0) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (app abstr-vals$3424 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$3424 0) (bvneg (bvashr (app abstr-vals$3424 0) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (app abstr-vals$3424 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$3424 0) (bvneg (bvashr (app abstr-vals$3424 0) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64))) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (app abstr-vals$3424 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$3424 0) (bvneg (bvashr (app abstr-vals$3424 0) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (app abstr-vals$3424 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$3424 0) (bvneg (bvashr (app abstr-vals$3424 0) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (app abstr-vals$3424 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$3424 0) (bvneg (bvashr (app abstr-vals$3424 0) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (app abstr-vals$3424 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$3424 0) (bvneg (bvashr (app abstr-vals$3424 0) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bv #xffffffff80000000 64))) (bvadd (bv #xffffffff 32) output_shift))))))
optimized x86 0:
  (int64_t
 (bvadd (bvashr (app abstr-vals$3424 0) (ite* (⊢ (&& (! xi?$3413) (|| xi?$3414 (&& xi?$3415 (! xi?$3414)))) (ite* (⊢ xi?$3414 (bv #x000000000000001e 64)) (⊢ (&& xi?$3415 (! xi?$3414)) (bv #x000000000000001f 64)))) (⊢ (|| xi?$3413 (&& (! xi?$3413) (&& (! xi?$3414) (! xi?$3415)))) (sign-extend (ite* (⊢ xi?$3413 output_shift) (⊢ (&& (! xi?$3413) (&& (! xi?$3414) (! xi?$3415))) (bvadd (bv #xffffffff 32) output_shift))) (bitvector 64))))) (bvand (ite (bvslt (bv #x0000000000000000 64) (ite* (⊢ (&& (! xi?$3413) (|| xi?$3414 (&& xi?$3415 (! xi?$3414)))) (ite* (⊢ xi?$3414 (bv #x000000000000001e 64)) (⊢ (&& xi?$3415 (! xi?$3414)) (bv #x000000000000001f 64)))) (⊢ (|| xi?$3413 (&& (! xi?$3413) (&& (! xi?$3414) (! xi?$3415)))) (sign-extend (ite* (⊢ xi?$3413 output_shift) (⊢ (&& (! xi?$3413) (&& (! xi?$3414) (! xi?$3415))) (bvadd (bv #xffffffff 32) output_shift))) (bitvector 64))))) (bv #x0000000000000001 64) (bv #x0000000000000000 64)) (bvashr (app abstr-vals$3424 0) (bvadd (bv #xffffffffffffffff 64) (ite* (⊢ (&& (! xi?$3413) (|| xi?$3414 (&& xi?$3415 (! xi?$3414)))) (ite* (⊢ xi?$3414 (bv #x000000000000001e 64)) (⊢ (&& xi?$3415 (! xi?$3414)) (bv #x000000000000001f 64)))) (⊢ (|| xi?$3413 (&& (! xi?$3413) (&& (! xi?$3414) (! xi?$3415)))) (sign-extend (ite* (⊢ xi?$3413 output_shift) (⊢ (&& (! xi?$3413) (&& (! xi?$3414) (! xi?$3415))) (bvadd (bv #xffffffff 32) output_shift))) (bitvector 64)))))))))
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-add
  (vec-shr
   (vec-cast
    (vec-max
     (vec-min
      (vec-add
       (vec-bwand
        (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
        (vec-div
         (vec-mul
          (vec-cast
           (vec-add
            (vec-add
             (vec-mul
              (vec-cast
               (load
                (buffer column_sums_b 'uint32)
                (ramp
                 (sca-add
                  (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                  16)
                 1
                 16)
                (aligned 16 0))
               'int32
               16)
              (sca-broadcast (int32_t t5829) 16))
             (vec-add
              (load
               (buffer bias 'int32)
               (ramp (sca-mul output.s0.x.x 16) 1 16)
               (aligned 16 0))
              (sca-broadcast
               (sca-add
                (sca-mul
                 (sca-mul (int32_t t5829) (int32_t t5830))
                 (int32_t mat_a.extent.0))
                (sca-mul (int32_t t5830) (int32_t t6653)))
               16)))
            (vec-cast
             (load
              (buffer multiplied_no_offsets 'uint32)
              (ramp
               (sca-add
                (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
                4)
               1
               16)
              (aligned 4 0))
             'int32
             16))
           'int64
           16)
          (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
         (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
       (vec-div
        (vec-mul
         (vec-cast
          (vec-add
           (vec-add
            (vec-mul
             (vec-cast
              (load
               (buffer column_sums_b 'uint32)
               (ramp
                (sca-add
                 (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                 16)
                1
                16)
               (aligned 16 0))
              'int32
              16)
             (sca-broadcast (int32_t t5829) 16))
            (vec-add
             (load
              (buffer bias 'int32)
              (ramp (sca-mul output.s0.x.x 16) 1 16)
              (aligned 16 0))
             (sca-broadcast
              (sca-add
               (sca-mul
                (sca-mul (int32_t t5829) (int32_t t5830))
                (int32_t mat_a.extent.0))
               (sca-mul (int32_t t5830) (int32_t t6653)))
              16)))
           (vec-cast
            (load
             (buffer multiplied_no_offsets 'uint32)
             (ramp
              (sca-add
               (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
               4)
              1
              16)
             (aligned 4 0))
            'int32
            16))
          'int64
          16)
         (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
        (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
      (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
     (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
    'int32
    16)
   (sca-broadcast (int32_t output_shift) 16))
  (vec-bwand
   (vec-if
    (sca-broadcast
     (sca-lt (int32_t (bv #x00000000 32)) (int32_t output_shift))
     16)
    (sca-broadcast (int32_t (bv #x00000001 32)) 16)
    (sca-broadcast (int32_t (bv #x00000000 32)) 16))
   (vec-shr
    (vec-cast
     (vec-max
      (vec-min
       (vec-add
        (vec-bwand
         (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
         (vec-div
          (vec-mul
           (vec-cast
            (vec-add
             (vec-add
              (vec-mul
               (vec-cast
                (load
                 (buffer column_sums_b 'uint32)
                 (ramp
                  (sca-add
                   (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                   16)
                  1
                  16)
                 (aligned 16 0))
                'int32
                16)
               (sca-broadcast (int32_t t5829) 16))
              (vec-add
               (load
                (buffer bias 'int32)
                (ramp (sca-mul output.s0.x.x 16) 1 16)
                (aligned 16 0))
               (sca-broadcast
                (sca-add
                 (sca-mul
                  (sca-mul (int32_t t5829) (int32_t t5830))
                  (int32_t mat_a.extent.0))
                 (sca-mul (int32_t t5830) (int32_t t6653)))
                16)))
             (vec-cast
              (load
               (buffer multiplied_no_offsets 'uint32)
               (ramp
                (sca-add
                 (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
                 4)
                1
                16)
               (aligned 4 0))
              'int32
              16))
            'int64
            16)
           (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
          (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
        (vec-div
         (vec-mul
          (vec-cast
           (vec-add
            (vec-add
             (vec-mul
              (vec-cast
               (load
                (buffer column_sums_b 'uint32)
                (ramp
                 (sca-add
                  (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                  16)
                 1
                 16)
                (aligned 16 0))
               'int32
               16)
              (sca-broadcast (int32_t t5829) 16))
             (vec-add
              (load
               (buffer bias 'int32)
               (ramp (sca-mul output.s0.x.x 16) 1 16)
               (aligned 16 0))
              (sca-broadcast
               (sca-add
                (sca-mul
                 (sca-mul (int32_t t5829) (int32_t t5830))
                 (int32_t mat_a.extent.0))
                (sca-mul (int32_t t5830) (int32_t t6653)))
               16)))
            (vec-cast
             (load
              (buffer multiplied_no_offsets 'uint32)
              (ramp
               (sca-add
                (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
                4)
               1
               16)
              (aligned 4 0))
             'int32
             16))
           'int64
           16)
          (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
         (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
       (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
      (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
     'int32
     16)
    (sca-broadcast
     (sca-add (int32_t output_shift) (int32_t (bv #xffffffff 32)))
     16))))
 (sca-broadcast (int32_t output_offset) 16))
template:
  (vs-shift-right
 ...
 (vs-mpy-add
  ...
  (vs-mpy-add
   ...
   (combine
    (vs-mpy-add
     ...
     (combine
      (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
      (vs-mpy-add
       ...
       (combine
        #<load-data>
        (broadcast
         ...
         (sca-add
          (sca-mul
           (sca-mul (int32_t t5829) (int32_t t5830))
           (int32_t mat_a.extent.0))
          (sca-mul (int32_t t5830) (int32_t t6653)))))
       (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
       #f
       #f
       #f
       'int32))
     (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
     #f
     #f
     #f
     'int32)
    (cast ... #<load-data> 'int32 #f))
   (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
   #f
   #f
   #f
   'int32)
  (list (int32_t output_multiplier))
  #f
  #f
  #f
  'int64)
 (int64_t (bv #x000000000000001f 64))
 x?$3416
 x?$3417
 x?$3418)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$3425 idx) (bv #x4000000000000000 64)) (bvsle (bv #xc000000080000000 64) (app abstr-vals$3425 idx)))))
optimized-halide-expr:
  (vec-add
 (vec-add
  (vec-shr
   (vec-cast
    (vec-max
     (vec-min
      (vec-add
       (vec-bwand
        (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
        (vec-div
         #<abstr-halide-expr>
         (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
       (vec-div
        #<abstr-halide-expr>
        (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
      (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
     (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
    'int32
    16)
   (sca-broadcast (int32_t output_shift) 16))
  (vec-bwand
   (vec-if
    (sca-broadcast
     (sca-lt (int32_t (bv #x00000000 32)) (int32_t output_shift))
     16)
    (sca-broadcast (int32_t (bv #x00000001 32)) 16)
    (sca-broadcast (int32_t (bv #x00000000 32)) 16))
   (vec-shr
    (vec-cast
     (vec-max
      (vec-min
       (vec-add
        (vec-bwand
         (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
         (vec-div
          #<abstr-halide-expr>
          (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
        (vec-div
         #<abstr-halide-expr>
         (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
       (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
      (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
     'int32
     16)
    (sca-broadcast
     (sca-add (int32_t output_shift) (int32_t (bv #xffffffff 32)))
     16))))
 (sca-broadcast (int32_t output_offset) 16))
optimized-template:
  (vs-shift-right
 ...
 #<abstr-expr>
 (int64_t (bv #x000000000000001f 64))
 x?$3416
 x?$3417
 x?$3418)
optimized Halide 0:
  (int32_t
 (bvadd output_offset (bvadd (bvashr (extract 31 0 (ite (bvsle (bv #xffffffff80000000 64) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (app abstr-vals$3425 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$3425 0) (bvneg (bvashr (app abstr-vals$3425 0) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (app abstr-vals$3425 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$3425 0) (bvneg (bvashr (app abstr-vals$3425 0) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (app abstr-vals$3425 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$3425 0) (bvneg (bvashr (app abstr-vals$3425 0) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (app abstr-vals$3425 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$3425 0) (bvneg (bvashr (app abstr-vals$3425 0) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64))) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (app abstr-vals$3425 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$3425 0) (bvneg (bvashr (app abstr-vals$3425 0) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (app abstr-vals$3425 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$3425 0) (bvneg (bvashr (app abstr-vals$3425 0) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (app abstr-vals$3425 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$3425 0) (bvneg (bvashr (app abstr-vals$3425 0) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (app abstr-vals$3425 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$3425 0) (bvneg (bvashr (app abstr-vals$3425 0) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bv #xffffffff80000000 64))) output_shift) (bvand (ite (bvslt (bv #x00000000 32) output_shift) (bv #x00000001 32) (bv #x00000000 32)) (bvashr (extract 31 0 (ite (bvsle (bv #xffffffff80000000 64) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (app abstr-vals$3425 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$3425 0) (bvneg (bvashr (app abstr-vals$3425 0) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (app abstr-vals$3425 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$3425 0) (bvneg (bvashr (app abstr-vals$3425 0) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (app abstr-vals$3425 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$3425 0) (bvneg (bvashr (app abstr-vals$3425 0) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (app abstr-vals$3425 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$3425 0) (bvneg (bvashr (app abstr-vals$3425 0) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64))) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (app abstr-vals$3425 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$3425 0) (bvneg (bvashr (app abstr-vals$3425 0) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (app abstr-vals$3425 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$3425 0) (bvneg (bvashr (app abstr-vals$3425 0) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (app abstr-vals$3425 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$3425 0) (bvneg (bvashr (app abstr-vals$3425 0) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (app abstr-vals$3425 0) (bv #x000000000000003f 64)) (bvsdiv (bvadd (app abstr-vals$3425 0) (bvneg (bvashr (app abstr-vals$3425 0) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bv #xffffffff80000000 64))) (bvadd (bv #xffffffff 32) output_shift))))))
optimized x86 0:
  (int64_t
 (ite x?$3416 (bvadd (ite x?$3418 (bvashr (app abstr-vals$3425 0) (bv #x000000000000001f 64)) (bvlshr (app abstr-vals$3425 0) (bv #x000000000000001f 64))) (bvand (bv #x0000000000000001 64) (ite x?$3418 (bvashr (app abstr-vals$3425 0) (bv #x000000000000001e 64)) (bvlshr (app abstr-vals$3425 0) (bv #x000000000000001e 64))))) (ite x?$3418 (bvashr (app abstr-vals$3425 0) (bv #x000000000000001f 64)) (bvlshr (app abstr-vals$3425 0) (bv #x000000000000001f 64)))))
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-add
  (vec-shr
   (vec-cast
    (vec-max
     (vec-min
      (vec-add
       (vec-bwand
        (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
        (vec-div
         (vec-mul
          (vec-cast
           (vec-add
            (vec-add
             (vec-mul
              (vec-cast
               (load
                (buffer column_sums_b 'uint32)
                (ramp
                 (sca-add
                  (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                  16)
                 1
                 16)
                (aligned 16 0))
               'int32
               16)
              (sca-broadcast (int32_t t5829) 16))
             (vec-add
              (load
               (buffer bias 'int32)
               (ramp (sca-mul output.s0.x.x 16) 1 16)
               (aligned 16 0))
              (sca-broadcast
               (sca-add
                (sca-mul
                 (sca-mul (int32_t t5829) (int32_t t5830))
                 (int32_t mat_a.extent.0))
                (sca-mul (int32_t t5830) (int32_t t6653)))
               16)))
            (vec-cast
             (load
              (buffer multiplied_no_offsets 'uint32)
              (ramp
               (sca-add
                (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
                4)
               1
               16)
              (aligned 4 0))
             'int32
             16))
           'int64
           16)
          (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
         (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
       (vec-div
        (vec-mul
         (vec-cast
          (vec-add
           (vec-add
            (vec-mul
             (vec-cast
              (load
               (buffer column_sums_b 'uint32)
               (ramp
                (sca-add
                 (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                 16)
                1
                16)
               (aligned 16 0))
              'int32
              16)
             (sca-broadcast (int32_t t5829) 16))
            (vec-add
             (load
              (buffer bias 'int32)
              (ramp (sca-mul output.s0.x.x 16) 1 16)
              (aligned 16 0))
             (sca-broadcast
              (sca-add
               (sca-mul
                (sca-mul (int32_t t5829) (int32_t t5830))
                (int32_t mat_a.extent.0))
               (sca-mul (int32_t t5830) (int32_t t6653)))
              16)))
           (vec-cast
            (load
             (buffer multiplied_no_offsets 'uint32)
             (ramp
              (sca-add
               (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
               4)
              1
              16)
             (aligned 4 0))
            'int32
            16))
          'int64
          16)
         (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
        (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
      (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
     (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
    'int32
    16)
   (sca-broadcast (int32_t output_shift) 16))
  (vec-bwand
   (vec-if
    (sca-broadcast
     (sca-lt (int32_t (bv #x00000000 32)) (int32_t output_shift))
     16)
    (sca-broadcast (int32_t (bv #x00000001 32)) 16)
    (sca-broadcast (int32_t (bv #x00000000 32)) 16))
   (vec-shr
    (vec-cast
     (vec-max
      (vec-min
       (vec-add
        (vec-bwand
         (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
         (vec-div
          (vec-mul
           (vec-cast
            (vec-add
             (vec-add
              (vec-mul
               (vec-cast
                (load
                 (buffer column_sums_b 'uint32)
                 (ramp
                  (sca-add
                   (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                   16)
                  1
                  16)
                 (aligned 16 0))
                'int32
                16)
               (sca-broadcast (int32_t t5829) 16))
              (vec-add
               (load
                (buffer bias 'int32)
                (ramp (sca-mul output.s0.x.x 16) 1 16)
                (aligned 16 0))
               (sca-broadcast
                (sca-add
                 (sca-mul
                  (sca-mul (int32_t t5829) (int32_t t5830))
                  (int32_t mat_a.extent.0))
                 (sca-mul (int32_t t5830) (int32_t t6653)))
                16)))
             (vec-cast
              (load
               (buffer multiplied_no_offsets 'uint32)
               (ramp
                (sca-add
                 (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
                 4)
                1
                16)
               (aligned 4 0))
              'int32
              16))
            'int64
            16)
           (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
          (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
        (vec-div
         (vec-mul
          (vec-cast
           (vec-add
            (vec-add
             (vec-mul
              (vec-cast
               (load
                (buffer column_sums_b 'uint32)
                (ramp
                 (sca-add
                  (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                  16)
                 1
                 16)
                (aligned 16 0))
               'int32
               16)
              (sca-broadcast (int32_t t5829) 16))
             (vec-add
              (load
               (buffer bias 'int32)
               (ramp (sca-mul output.s0.x.x 16) 1 16)
               (aligned 16 0))
              (sca-broadcast
               (sca-add
                (sca-mul
                 (sca-mul (int32_t t5829) (int32_t t5830))
                 (int32_t mat_a.extent.0))
                (sca-mul (int32_t t5830) (int32_t t6653)))
               16)))
            (vec-cast
             (load
              (buffer multiplied_no_offsets 'uint32)
              (ramp
               (sca-add
                (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
                4)
               1
               16)
              (aligned 4 0))
             'int32
             16))
           'int64
           16)
          (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
         (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
       (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
      (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
     'int32
     16)
    (sca-broadcast
     (sca-add (int32_t output_shift) (int32_t (bv #xffffffff 32)))
     16))))
 (sca-broadcast (int32_t output_offset) 16))
template:
  (cast
 ...
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (vs-mpy-add
    ...
    (combine
     (vs-mpy-add
      ...
      (combine
       (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
       (vs-mpy-add
        ...
        (combine
         #<load-data>
         (broadcast
          ...
          (sca-add
           (sca-mul
            (sca-mul (int32_t t5829) (int32_t t5830))
            (int32_t mat_a.extent.0))
           (sca-mul (int32_t t5830) (int32_t t6653)))))
        (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
        #f
        #f
        #f
        'int32))
      (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
      #f
      #f
      #f
      'int32)
     (cast ... #<load-data> 'int32 #f))
    (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
    #f
    #f
    #f
    'int32)
   (list (int32_t output_multiplier))
   #f
   #f
   #f
   'int64)
  (int64_t (bv #x000000000000001f 64))
  #t
  x?$2971
  #t)
 'int32
 x?$3412)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$3426 idx) (bv #x0000000080000000 64)) (bvsle (bv #xffffffff80000001 64) (app abstr-vals$3426 idx)))))
optimized-halide-expr:
  (vec-add
 (vec-add
  (vec-shr
   (vec-cast
    (vec-max
     (vec-min
      #<abstr-halide-expr>
      (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
     (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
    'int32
    16)
   (sca-broadcast (int32_t output_shift) 16))
  (vec-bwand
   (vec-if
    (sca-broadcast
     (sca-lt (int32_t (bv #x00000000 32)) (int32_t output_shift))
     16)
    (sca-broadcast (int32_t (bv #x00000001 32)) 16)
    (sca-broadcast (int32_t (bv #x00000000 32)) 16))
   (vec-shr
    (vec-cast
     (vec-max
      (vec-min
       #<abstr-halide-expr>
       (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
      (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
     'int32
     16)
    (sca-broadcast
     (sca-add (int32_t output_shift) (int32_t (bv #xffffffff 32)))
     16))))
 (sca-broadcast (int32_t output_offset) 16))
optimized-template:
  (cast ... #<abstr-expr> 'int32 x?$3412)
optimized Halide 0:
  (int32_t
 (bvadd output_offset (bvadd (bvashr (extract 31 0 (ite (bvsle (bv #xffffffff80000000 64) (ite (bvsle (app abstr-vals$3426 0) (bv #x000000007fffffff 64)) (app abstr-vals$3426 0) (bv #x000000007fffffff 64))) (ite (bvsle (app abstr-vals$3426 0) (bv #x000000007fffffff 64)) (app abstr-vals$3426 0) (bv #x000000007fffffff 64)) (bv #xffffffff80000000 64))) output_shift) (bvand (ite (bvslt (bv #x00000000 32) output_shift) (bv #x00000001 32) (bv #x00000000 32)) (bvashr (extract 31 0 (ite (bvsle (bv #xffffffff80000000 64) (ite (bvsle (app abstr-vals$3426 0) (bv #x000000007fffffff 64)) (app abstr-vals$3426 0) (bv #x000000007fffffff 64))) (ite (bvsle (app abstr-vals$3426 0) (bv #x000000007fffffff 64)) (app abstr-vals$3426 0) (bv #x000000007fffffff 64)) (bv #xffffffff80000000 64))) (bvadd (bv #xffffffff 32) output_shift))))))
optimized x86 0:
  (int32_t
 (ite x?$3412 (ite (bvslt (app abstr-vals$3426 0) (bv #xffffffff80000000 64)) (bv #x80000000 32) (ite (bvslt (bv #x000000007fffffff 64) (app abstr-vals$3426 0)) (bv #x7fffffff 32) (extract 31 0 (app abstr-vals$3426 0)))) (extract 31 0 (app abstr-vals$3426 0))))
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-add
  (vec-shr
   (vec-cast
    (vec-max
     (vec-min
      (vec-add
       (vec-bwand
        (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
        (vec-div
         (vec-mul
          (vec-cast
           (vec-add
            (vec-add
             (vec-mul
              (vec-cast
               (load
                (buffer column_sums_b 'uint32)
                (ramp
                 (sca-add
                  (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                  16)
                 1
                 16)
                (aligned 16 0))
               'int32
               16)
              (sca-broadcast (int32_t t5829) 16))
             (vec-add
              (load
               (buffer bias 'int32)
               (ramp (sca-mul output.s0.x.x 16) 1 16)
               (aligned 16 0))
              (sca-broadcast
               (sca-add
                (sca-mul
                 (sca-mul (int32_t t5829) (int32_t t5830))
                 (int32_t mat_a.extent.0))
                (sca-mul (int32_t t5830) (int32_t t6653)))
               16)))
            (vec-cast
             (load
              (buffer multiplied_no_offsets 'uint32)
              (ramp
               (sca-add
                (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
                4)
               1
               16)
              (aligned 4 0))
             'int32
             16))
           'int64
           16)
          (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
         (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
       (vec-div
        (vec-mul
         (vec-cast
          (vec-add
           (vec-add
            (vec-mul
             (vec-cast
              (load
               (buffer column_sums_b 'uint32)
               (ramp
                (sca-add
                 (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                 16)
                1
                16)
               (aligned 16 0))
              'int32
              16)
             (sca-broadcast (int32_t t5829) 16))
            (vec-add
             (load
              (buffer bias 'int32)
              (ramp (sca-mul output.s0.x.x 16) 1 16)
              (aligned 16 0))
             (sca-broadcast
              (sca-add
               (sca-mul
                (sca-mul (int32_t t5829) (int32_t t5830))
                (int32_t mat_a.extent.0))
               (sca-mul (int32_t t5830) (int32_t t6653)))
              16)))
           (vec-cast
            (load
             (buffer multiplied_no_offsets 'uint32)
             (ramp
              (sca-add
               (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
               4)
              1
              16)
             (aligned 4 0))
            'int32
            16))
          'int64
          16)
         (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
        (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
      (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
     (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
    'int32
    16)
   (sca-broadcast (int32_t output_shift) 16))
  (vec-bwand
   (vec-if
    (sca-broadcast
     (sca-lt (int32_t (bv #x00000000 32)) (int32_t output_shift))
     16)
    (sca-broadcast (int32_t (bv #x00000001 32)) 16)
    (sca-broadcast (int32_t (bv #x00000000 32)) 16))
   (vec-shr
    (vec-cast
     (vec-max
      (vec-min
       (vec-add
        (vec-bwand
         (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
         (vec-div
          (vec-mul
           (vec-cast
            (vec-add
             (vec-add
              (vec-mul
               (vec-cast
                (load
                 (buffer column_sums_b 'uint32)
                 (ramp
                  (sca-add
                   (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                   16)
                  1
                  16)
                 (aligned 16 0))
                'int32
                16)
               (sca-broadcast (int32_t t5829) 16))
              (vec-add
               (load
                (buffer bias 'int32)
                (ramp (sca-mul output.s0.x.x 16) 1 16)
                (aligned 16 0))
               (sca-broadcast
                (sca-add
                 (sca-mul
                  (sca-mul (int32_t t5829) (int32_t t5830))
                  (int32_t mat_a.extent.0))
                 (sca-mul (int32_t t5830) (int32_t t6653)))
                16)))
             (vec-cast
              (load
               (buffer multiplied_no_offsets 'uint32)
               (ramp
                (sca-add
                 (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
                 4)
                1
                16)
               (aligned 4 0))
              'int32
              16))
            'int64
            16)
           (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
          (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
        (vec-div
         (vec-mul
          (vec-cast
           (vec-add
            (vec-add
             (vec-mul
              (vec-cast
               (load
                (buffer column_sums_b 'uint32)
                (ramp
                 (sca-add
                  (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                  16)
                 1
                 16)
                (aligned 16 0))
               'int32
               16)
              (sca-broadcast (int32_t t5829) 16))
             (vec-add
              (load
               (buffer bias 'int32)
               (ramp (sca-mul output.s0.x.x 16) 1 16)
               (aligned 16 0))
              (sca-broadcast
               (sca-add
                (sca-mul
                 (sca-mul (int32_t t5829) (int32_t t5830))
                 (int32_t mat_a.extent.0))
                (sca-mul (int32_t t5830) (int32_t t6653)))
               16)))
            (vec-cast
             (load
              (buffer multiplied_no_offsets 'uint32)
              (ramp
               (sca-add
                (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
                4)
               1
               16)
              (aligned 4 0))
             'int32
             16))
           'int64
           16)
          (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
         (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
       (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
      (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
     'int32
     16)
    (sca-broadcast
     (sca-add (int32_t output_shift) (int32_t (bv #xffffffff 32)))
     16))))
 (sca-broadcast (int32_t output_offset) 16))
template:
  (vs-mpy-add
 ...
 (vs-shift-right
  ...
  (vs-mpy-add
   ...
   (vs-mpy-add
    ...
    (combine
     (vs-mpy-add
      ...
      (combine
       (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
       (vs-mpy-add
        ...
        (combine
         #<load-data>
         (broadcast
          ...
          (sca-add
           (sca-mul
            (sca-mul (int32_t t5829) (int32_t t5830))
            (int32_t mat_a.extent.0))
           (sca-mul (int32_t t5830) (int32_t t6653)))))
        (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
        #f
        #f
        #f
        'int32))
      (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
      #f
      #f
      #f
      'int32)
     (cast ... #<load-data> 'int32 #f))
    (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
    #f
    #f
    #f
    'int32)
   (list (int32_t output_multiplier))
   #f
   #f
   #f
   'int64)
  (int64_t (bv #x000000000000001f 64))
  #t
  x?$2971
  #t)
 (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
 (! x?$3421)
 (! x?$3422)
 (! x?$3423)
 'int32)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$3427 idx) (bv #x0000000080000000 64)) (bvsle (bv #xffffffff80000001 64) (app abstr-vals$3427 idx)))))
optimized-halide-expr:
  (vec-add
 (vec-add
  (vec-shr
   (vec-cast
    (vec-max
     (vec-min
      #<abstr-halide-expr>
      (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
     (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
    'int32
    16)
   (sca-broadcast (int32_t output_shift) 16))
  (vec-bwand
   (vec-if
    (sca-broadcast
     (sca-lt (int32_t (bv #x00000000 32)) (int32_t output_shift))
     16)
    (sca-broadcast (int32_t (bv #x00000001 32)) 16)
    (sca-broadcast (int32_t (bv #x00000000 32)) 16))
   (vec-shr
    (vec-cast
     (vec-max
      (vec-min
       #<abstr-halide-expr>
       (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
      (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
     'int32
     16)
    (sca-broadcast
     (sca-add (int32_t output_shift) (int32_t (bv #xffffffff 32)))
     16))))
 (sca-broadcast (int32_t output_offset) 16))
optimized-template:
  (vs-mpy-add
 ...
 #<abstr-expr>
 (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
 (! x?$3421)
 (! x?$3422)
 (! x?$3423)
 'int32)
optimized Halide 0:
  (int32_t
 (bvadd output_offset (bvadd (bvashr (extract 31 0 (ite (bvsle (bv #xffffffff80000000 64) (ite (bvsle (app abstr-vals$3427 0) (bv #x000000007fffffff 64)) (app abstr-vals$3427 0) (bv #x000000007fffffff 64))) (ite (bvsle (app abstr-vals$3427 0) (bv #x000000007fffffff 64)) (app abstr-vals$3427 0) (bv #x000000007fffffff 64)) (bv #xffffffff80000000 64))) output_shift) (bvand (ite (bvslt (bv #x00000000 32) output_shift) (bv #x00000001 32) (bv #x00000000 32)) (bvashr (extract 31 0 (ite (bvsle (bv #xffffffff80000000 64) (ite (bvsle (app abstr-vals$3427 0) (bv #x000000007fffffff 64)) (app abstr-vals$3427 0) (bv #x000000007fffffff 64))) (ite (bvsle (app abstr-vals$3427 0) (bv #x000000007fffffff 64)) (app abstr-vals$3427 0) (bv #x000000007fffffff 64)) (bv #xffffffff80000000 64))) (bvadd (bv #xffffffff 32) output_shift))))))
optimized x86 0:
  (int32_t
 (ite* (⊢ (&& x?$3423 (! (&& (! x?$3421) (! x?$3423)))) (ite x?$3421 (bvadd (extract 31 0 (app abstr-vals$3427 1)) (ite x?$3421 (bvadd (extract 31 0 (app abstr-vals$3427 0)) (ite x?$3422 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3422 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (extract 31 0 (app abstr-vals$3427 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3422 (bv #x00000000 32) (bv #x00000001 32))))) (extract 31 0 (app abstr-vals$3427 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3422 (bv #x00000000 32) (bv #x00000001 32)))))))) (bvadd (ite x?$3421 (bvadd (extract 31 0 (app abstr-vals$3427 0)) (ite x?$3422 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3422 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (extract 31 0 (app abstr-vals$3427 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3422 (bv #x00000000 32) (bv #x00000001 32))))) (extract 31 0 (app abstr-vals$3427 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3422 (bv #x00000000 32) (bv #x00000001 32))))))) (ite (bvsle (bvadd (bv #x80000000 32) (bvneg (ite (bvsle (ite x?$3421 (bvadd (extract 31 0 (app abstr-vals$3427 0)) (ite x?$3422 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3422 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (extract 31 0 (app abstr-vals$3427 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3422 (bv #x00000000 32) (bv #x00000001 32))))) (extract 31 0 (app abstr-vals$3427 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3422 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)) (ite x?$3421 (bvadd (extract 31 0 (app abstr-vals$3427 0)) (ite x?$3422 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3422 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (extract 31 0 (app abstr-vals$3427 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3422 (bv #x00000000 32) (bv #x00000001 32))))) (extract 31 0 (app abstr-vals$3427 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3422 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)))) (ite (bvsle (extract 31 0 (app abstr-vals$3427 1)) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$3421 (bvadd (extract 31 0 (app abstr-vals$3427 0)) (ite x?$3422 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3422 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (extract 31 0 (app abstr-vals$3427 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3422 (bv #x00000000 32) (bv #x00000001 32))))) (extract 31 0 (app abstr-vals$3427 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3422 (bv #x00000000 32) (bv #x00000001 32)))))))) (ite x?$3421 (bvadd (extract 31 0 (app abstr-vals$3427 0)) (ite x?$3422 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3422 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (extract 31 0 (app abstr-vals$3427 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3422 (bv #x00000000 32) (bv #x00000001 32))))) (extract 31 0 (app abstr-vals$3427 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3422 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32))))) (extract 31 0 (app abstr-vals$3427 1)) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$3421 (bvadd (extract 31 0 (app abstr-vals$3427 0)) (ite x?$3422 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3422 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (extract 31 0 (app abstr-vals$3427 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3422 (bv #x00000000 32) (bv #x00000001 32))))) (extract 31 0 (app abstr-vals$3427 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3422 (bv #x00000000 32) (bv #x00000001 32)))))))) (ite x?$3421 (bvadd (extract 31 0 (app abstr-vals$3427 0)) (ite x?$3422 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3422 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (extract 31 0 (app abstr-vals$3427 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3422 (bv #x00000000 32) (bv #x00000001 32))))) (extract 31 0 (app abstr-vals$3427 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3422 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)))))) (ite (bvsle (extract 31 0 (app abstr-vals$3427 1)) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$3421 (bvadd (extract 31 0 (app abstr-vals$3427 0)) (ite x?$3422 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3422 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (extract 31 0 (app abstr-vals$3427 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3422 (bv #x00000000 32) (bv #x00000001 32))))) (extract 31 0 (app abstr-vals$3427 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3422 (bv #x00000000 32) (bv #x00000001 32)))))))) (ite x?$3421 (bvadd (extract 31 0 (app abstr-vals$3427 0)) (ite x?$3422 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3422 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (extract 31 0 (app abstr-vals$3427 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3422 (bv #x00000000 32) (bv #x00000001 32))))) (extract 31 0 (app abstr-vals$3427 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3422 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32))))) (extract 31 0 (app abstr-vals$3427 1)) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$3421 (bvadd (extract 31 0 (app abstr-vals$3427 0)) (ite x?$3422 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3422 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (extract 31 0 (app abstr-vals$3427 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3422 (bv #x00000000 32) (bv #x00000001 32))))) (extract 31 0 (app abstr-vals$3427 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3422 (bv #x00000000 32) (bv #x00000001 32)))))))) (ite x?$3421 (bvadd (extract 31 0 (app abstr-vals$3427 0)) (ite x?$3422 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3422 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (extract 31 0 (app abstr-vals$3427 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3422 (bv #x00000000 32) (bv #x00000001 32))))) (extract 31 0 (app abstr-vals$3427 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3422 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32))))) (bvadd (bv #x80000000 32) (bvneg (ite (bvsle (ite x?$3421 (bvadd (extract 31 0 (app abstr-vals$3427 0)) (ite x?$3422 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3422 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (extract 31 0 (app abstr-vals$3427 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3422 (bv #x00000000 32) (bv #x00000001 32))))) (extract 31 0 (app abstr-vals$3427 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3422 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)) (ite x?$3421 (bvadd (extract 31 0 (app abstr-vals$3427 0)) (ite x?$3422 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3422 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (extract 31 0 (app abstr-vals$3427 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3422 (bv #x00000000 32) (bv #x00000001 32))))) (extract 31 0 (app abstr-vals$3427 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3422 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)))))))) (⊢ (|| (&& (! x?$3421) (! x?$3423)) (&& (! x?$3423) (! (&& (! x?$3421) (! x?$3423))))) (bvashr (ite x?$3421 (bvadd (extract 31 0 (app abstr-vals$3427 1)) (ite x?$3421 (bvadd (extract 31 0 (app abstr-vals$3427 0)) (ite x?$3422 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3422 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (extract 31 0 (app abstr-vals$3427 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3422 (bv #x00000000 32) (bv #x00000001 32))))) (extract 31 0 (app abstr-vals$3427 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3422 (bv #x00000000 32) (bv #x00000001 32)))))))) (bvadd (ite x?$3421 (bvadd (extract 31 0 (app abstr-vals$3427 0)) (ite x?$3422 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3422 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (extract 31 0 (app abstr-vals$3427 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3422 (bv #x00000000 32) (bv #x00000001 32))))) (extract 31 0 (app abstr-vals$3427 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3422 (bv #x00000000 32) (bv #x00000001 32))))))) (ite (bvsle (bvadd (bv #x80000000 32) (bvneg (ite (bvsle (ite x?$3421 (bvadd (extract 31 0 (app abstr-vals$3427 0)) (ite x?$3422 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3422 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (extract 31 0 (app abstr-vals$3427 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3422 (bv #x00000000 32) (bv #x00000001 32))))) (extract 31 0 (app abstr-vals$3427 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3422 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)) (ite x?$3421 (bvadd (extract 31 0 (app abstr-vals$3427 0)) (ite x?$3422 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3422 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (extract 31 0 (app abstr-vals$3427 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3422 (bv #x00000000 32) (bv #x00000001 32))))) (extract 31 0 (app abstr-vals$3427 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3422 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)))) (ite (bvsle (extract 31 0 (app abstr-vals$3427 1)) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$3421 (bvadd (extract 31 0 (app abstr-vals$3427 0)) (ite x?$3422 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3422 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (extract 31 0 (app abstr-vals$3427 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3422 (bv #x00000000 32) (bv #x00000001 32))))) (extract 31 0 (app abstr-vals$3427 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3422 (bv #x00000000 32) (bv #x00000001 32)))))))) (ite x?$3421 (bvadd (extract 31 0 (app abstr-vals$3427 0)) (ite x?$3422 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3422 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (extract 31 0 (app abstr-vals$3427 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3422 (bv #x00000000 32) (bv #x00000001 32))))) (extract 31 0 (app abstr-vals$3427 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3422 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32))))) (extract 31 0 (app abstr-vals$3427 1)) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$3421 (bvadd (extract 31 0 (app abstr-vals$3427 0)) (ite x?$3422 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3422 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (extract 31 0 (app abstr-vals$3427 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3422 (bv #x00000000 32) (bv #x00000001 32))))) (extract 31 0 (app abstr-vals$3427 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3422 (bv #x00000000 32) (bv #x00000001 32)))))))) (ite x?$3421 (bvadd (extract 31 0 (app abstr-vals$3427 0)) (ite x?$3422 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3422 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (extract 31 0 (app abstr-vals$3427 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3422 (bv #x00000000 32) (bv #x00000001 32))))) (extract 31 0 (app abstr-vals$3427 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3422 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)))))) (ite (bvsle (extract 31 0 (app abstr-vals$3427 1)) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$3421 (bvadd (extract 31 0 (app abstr-vals$3427 0)) (ite x?$3422 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3422 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (extract 31 0 (app abstr-vals$3427 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3422 (bv #x00000000 32) (bv #x00000001 32))))) (extract 31 0 (app abstr-vals$3427 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3422 (bv #x00000000 32) (bv #x00000001 32)))))))) (ite x?$3421 (bvadd (extract 31 0 (app abstr-vals$3427 0)) (ite x?$3422 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3422 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (extract 31 0 (app abstr-vals$3427 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3422 (bv #x00000000 32) (bv #x00000001 32))))) (extract 31 0 (app abstr-vals$3427 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3422 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32))))) (extract 31 0 (app abstr-vals$3427 1)) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$3421 (bvadd (extract 31 0 (app abstr-vals$3427 0)) (ite x?$3422 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3422 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (extract 31 0 (app abstr-vals$3427 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3422 (bv #x00000000 32) (bv #x00000001 32))))) (extract 31 0 (app abstr-vals$3427 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3422 (bv #x00000000 32) (bv #x00000001 32)))))))) (ite x?$3421 (bvadd (extract 31 0 (app abstr-vals$3427 0)) (ite x?$3422 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3422 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (extract 31 0 (app abstr-vals$3427 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3422 (bv #x00000000 32) (bv #x00000001 32))))) (extract 31 0 (app abstr-vals$3427 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3422 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32))))) (bvadd (bv #x80000000 32) (bvneg (ite (bvsle (ite x?$3421 (bvadd (extract 31 0 (app abstr-vals$3427 0)) (ite x?$3422 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3422 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (extract 31 0 (app abstr-vals$3427 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3422 (bv #x00000000 32) (bv #x00000001 32))))) (extract 31 0 (app abstr-vals$3427 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3422 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32)) (ite x?$3421 (bvadd (extract 31 0 (app abstr-vals$3427 0)) (ite x?$3422 (bv #x00000000 32) (bv #x00000001 32))) (bvadd (ite x?$3422 (bv #x00000000 32) (bv #x00000001 32)) (ite (bvsle (extract 31 0 (app abstr-vals$3427 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3422 (bv #x00000000 32) (bv #x00000001 32))))) (extract 31 0 (app abstr-vals$3427 0)) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3422 (bv #x00000000 32) (bv #x00000001 32))))))) (bv #x00000000 32))))))) (bv #x00000001 32)))))
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-add
  (vec-shr
   (vec-cast
    (vec-max
     (vec-min
      (vec-add
       (vec-bwand
        (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
        (vec-div
         (vec-mul
          (vec-cast
           (vec-add
            (vec-add
             (vec-mul
              (vec-cast
               (load
                (buffer column_sums_b 'uint32)
                (ramp
                 (sca-add
                  (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                  16)
                 1
                 16)
                (aligned 16 0))
               'int32
               16)
              (sca-broadcast (int32_t t5829) 16))
             (vec-add
              (load
               (buffer bias 'int32)
               (ramp (sca-mul output.s0.x.x 16) 1 16)
               (aligned 16 0))
              (sca-broadcast
               (sca-add
                (sca-mul
                 (sca-mul (int32_t t5829) (int32_t t5830))
                 (int32_t mat_a.extent.0))
                (sca-mul (int32_t t5830) (int32_t t6653)))
               16)))
            (vec-cast
             (load
              (buffer multiplied_no_offsets 'uint32)
              (ramp
               (sca-add
                (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
                4)
               1
               16)
              (aligned 4 0))
             'int32
             16))
           'int64
           16)
          (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
         (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
       (vec-div
        (vec-mul
         (vec-cast
          (vec-add
           (vec-add
            (vec-mul
             (vec-cast
              (load
               (buffer column_sums_b 'uint32)
               (ramp
                (sca-add
                 (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                 16)
                1
                16)
               (aligned 16 0))
              'int32
              16)
             (sca-broadcast (int32_t t5829) 16))
            (vec-add
             (load
              (buffer bias 'int32)
              (ramp (sca-mul output.s0.x.x 16) 1 16)
              (aligned 16 0))
             (sca-broadcast
              (sca-add
               (sca-mul
                (sca-mul (int32_t t5829) (int32_t t5830))
                (int32_t mat_a.extent.0))
               (sca-mul (int32_t t5830) (int32_t t6653)))
              16)))
           (vec-cast
            (load
             (buffer multiplied_no_offsets 'uint32)
             (ramp
              (sca-add
               (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
               4)
              1
              16)
             (aligned 4 0))
            'int32
            16))
          'int64
          16)
         (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
        (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
      (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
     (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
    'int32
    16)
   (sca-broadcast (int32_t output_shift) 16))
  (vec-bwand
   (vec-if
    (sca-broadcast
     (sca-lt (int32_t (bv #x00000000 32)) (int32_t output_shift))
     16)
    (sca-broadcast (int32_t (bv #x00000001 32)) 16)
    (sca-broadcast (int32_t (bv #x00000000 32)) 16))
   (vec-shr
    (vec-cast
     (vec-max
      (vec-min
       (vec-add
        (vec-bwand
         (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
         (vec-div
          (vec-mul
           (vec-cast
            (vec-add
             (vec-add
              (vec-mul
               (vec-cast
                (load
                 (buffer column_sums_b 'uint32)
                 (ramp
                  (sca-add
                   (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                   16)
                  1
                  16)
                 (aligned 16 0))
                'int32
                16)
               (sca-broadcast (int32_t t5829) 16))
              (vec-add
               (load
                (buffer bias 'int32)
                (ramp (sca-mul output.s0.x.x 16) 1 16)
                (aligned 16 0))
               (sca-broadcast
                (sca-add
                 (sca-mul
                  (sca-mul (int32_t t5829) (int32_t t5830))
                  (int32_t mat_a.extent.0))
                 (sca-mul (int32_t t5830) (int32_t t6653)))
                16)))
             (vec-cast
              (load
               (buffer multiplied_no_offsets 'uint32)
               (ramp
                (sca-add
                 (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
                 4)
                1
                16)
               (aligned 4 0))
              'int32
              16))
            'int64
            16)
           (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
          (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
        (vec-div
         (vec-mul
          (vec-cast
           (vec-add
            (vec-add
             (vec-mul
              (vec-cast
               (load
                (buffer column_sums_b 'uint32)
                (ramp
                 (sca-add
                  (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                  16)
                 1
                 16)
                (aligned 16 0))
               'int32
               16)
              (sca-broadcast (int32_t t5829) 16))
             (vec-add
              (load
               (buffer bias 'int32)
               (ramp (sca-mul output.s0.x.x 16) 1 16)
               (aligned 16 0))
              (sca-broadcast
               (sca-add
                (sca-mul
                 (sca-mul (int32_t t5829) (int32_t t5830))
                 (int32_t mat_a.extent.0))
                (sca-mul (int32_t t5830) (int32_t t6653)))
               16)))
            (vec-cast
             (load
              (buffer multiplied_no_offsets 'uint32)
              (ramp
               (sca-add
                (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
                4)
               1
               16)
              (aligned 4 0))
             'int32
             16))
           'int64
           16)
          (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
         (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
       (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
      (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
     'int32
     16)
    (sca-broadcast
     (sca-add (int32_t output_shift) (int32_t (bv #xffffffff 32)))
     16))))
 (sca-broadcast (int32_t output_offset) 16))
template:
  (vs-shift-right
 ...
 (cast
  ...
  (vs-shift-right
   ...
   (vs-mpy-add
    ...
    (vs-mpy-add
     ...
     (combine
      (vs-mpy-add
       ...
       (combine
        (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
        (vs-mpy-add
         ...
         (combine
          #<load-data>
          (broadcast
           ...
           (sca-add
            (sca-mul
             (sca-mul (int32_t t5829) (int32_t t5830))
             (int32_t mat_a.extent.0))
            (sca-mul (int32_t t5830) (int32_t t6653)))))
         (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
         #f
         #f
         #f
         'int32))
       (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
       #f
       #f
       #f
       'int32)
      (cast ... #<load-data> 'int32 #f))
     (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
     #f
     #f
     #f
     'int32)
    (list (int32_t output_multiplier))
    #f
    #f
    #f
    'int64)
   (int64_t (bv #x000000000000001f 64))
   #t
   x?$2971
   #t)
  'int32
  #t)
 (union [xi?$3406 #(struct:int32_t output_shift)] [(&& (! xi?$3406) (&& (! xi?$3407) (! xi?$3408))) #(struct:sca-add
                                                                                                      #(struct:int32_t
                                                                                                        output_shift)
                                                                                                      #(struct:int32_t
                                                                                                        (bv #xffffffff 32)))] [(&& (! xi?$3406) (|| xi?$3407 (&& xi?$3408 (! xi?$3407)))) #(struct:int64_t
                                                                                                                                                                                            (ite* (⊢ xi?$3407 (bv #x000000000000001e 64)) (⊢ (&& xi?$3408 (! xi?$3407)) (bv #x000000000000001f 64))))])
 #t
 x?$3371
 #t)
axioms:
  (list (forall (idx) (bvsle (bv #x80000001 32) (app abstr-vals$3428 idx))))
optimized-halide-expr:
  (vec-add
 (vec-add
  (vec-shr #<abstr-halide-expr> (sca-broadcast (int32_t output_shift) 16))
  (vec-bwand
   (vec-if
    (sca-broadcast
     (sca-lt (int32_t (bv #x00000000 32)) (int32_t output_shift))
     16)
    (sca-broadcast (int32_t (bv #x00000001 32)) 16)
    (sca-broadcast (int32_t (bv #x00000000 32)) 16))
   (vec-shr
    #<abstr-halide-expr>
    (sca-broadcast
     (sca-add (int32_t output_shift) (int32_t (bv #xffffffff 32)))
     16))))
 (sca-broadcast (int32_t output_offset) 16))
optimized-template:
  (vs-shift-right
 ...
 #<abstr-expr>
 (union [xi?$3406 #(struct:int32_t output_shift)] [(&& (! xi?$3406) (&& (! xi?$3407) (! xi?$3408))) #(struct:sca-add
                                                                                                      #(struct:int32_t
                                                                                                        output_shift)
                                                                                                      #(struct:int32_t
                                                                                                        (bv #xffffffff 32)))] [(&& (! xi?$3406) (|| xi?$3407 (&& xi?$3408 (! xi?$3407)))) #(struct:int64_t
                                                                                                                                                                                            (ite* (⊢ xi?$3407 (bv #x000000000000001e 64)) (⊢ (&& xi?$3408 (! xi?$3407)) (bv #x000000000000001f 64))))])
 #t
 x?$3371
 #t)
optimized Halide 0:
  (int32_t
 (bvadd output_offset (bvadd (bvashr (app abstr-vals$3428 0) output_shift) (bvand (ite (bvslt (bv #x00000000 32) output_shift) (bv #x00000001 32) (bv #x00000000 32)) (bvashr (app abstr-vals$3428 0) (bvadd (bv #xffffffff 32) output_shift))))))
optimized x86 0:
  (int32_t
 (bvadd (bvashr (app abstr-vals$3428 0) (ite* (⊢ (&& (! xi?$3406) (|| xi?$3407 (&& xi?$3408 (! xi?$3407)))) (extract 31 0 (ite* (⊢ xi?$3407 (bv #x000000000000001e 64)) (⊢ (&& xi?$3408 (! xi?$3407)) (bv #x000000000000001f 64))))) (⊢ (|| xi?$3406 (&& (! xi?$3406) (&& (! xi?$3407) (! xi?$3408)))) (ite* (⊢ xi?$3406 output_shift) (⊢ (&& (! xi?$3406) (&& (! xi?$3407) (! xi?$3408))) (bvadd (bv #xffffffff 32) output_shift)))))) (bvand (ite (bvslt (bv #x00000000 32) (ite* (⊢ (&& (! xi?$3406) (|| xi?$3407 (&& xi?$3408 (! xi?$3407)))) (extract 31 0 (ite* (⊢ xi?$3407 (bv #x000000000000001e 64)) (⊢ (&& xi?$3408 (! xi?$3407)) (bv #x000000000000001f 64))))) (⊢ (|| xi?$3406 (&& (! xi?$3406) (&& (! xi?$3407) (! xi?$3408)))) (ite* (⊢ xi?$3406 output_shift) (⊢ (&& (! xi?$3406) (&& (! xi?$3407) (! xi?$3408))) (bvadd (bv #xffffffff 32) output_shift)))))) (bv #x00000001 32) (bv #x00000000 32)) (bvashr (app abstr-vals$3428 0) (bvadd (bv #xffffffff 32) (ite* (⊢ (&& (! xi?$3406) (|| xi?$3407 (&& xi?$3408 (! xi?$3407)))) (extract 31 0 (ite* (⊢ xi?$3407 (bv #x000000000000001e 64)) (⊢ (&& xi?$3408 (! xi?$3407)) (bv #x000000000000001f 64))))) (⊢ (|| xi?$3406 (&& (! xi?$3406) (&& (! xi?$3407) (! xi?$3408)))) (ite* (⊢ xi?$3406 output_shift) (⊢ (&& (! xi?$3406) (&& (! xi?$3407) (! xi?$3408))) (bvadd (bv #xffffffff 32) output_shift))))))))))
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-add
  (vec-shr
   (vec-cast
    (vec-max
     (vec-min
      (vec-add
       (vec-bwand
        (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
        (vec-div
         (vec-mul
          (vec-cast
           (vec-add
            (vec-add
             (vec-mul
              (vec-cast
               (load
                (buffer column_sums_b 'uint32)
                (ramp
                 (sca-add
                  (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                  16)
                 1
                 16)
                (aligned 16 0))
               'int32
               16)
              (sca-broadcast (int32_t t5829) 16))
             (vec-add
              (load
               (buffer bias 'int32)
               (ramp (sca-mul output.s0.x.x 16) 1 16)
               (aligned 16 0))
              (sca-broadcast
               (sca-add
                (sca-mul
                 (sca-mul (int32_t t5829) (int32_t t5830))
                 (int32_t mat_a.extent.0))
                (sca-mul (int32_t t5830) (int32_t t6653)))
               16)))
            (vec-cast
             (load
              (buffer multiplied_no_offsets 'uint32)
              (ramp
               (sca-add
                (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
                4)
               1
               16)
              (aligned 4 0))
             'int32
             16))
           'int64
           16)
          (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
         (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
       (vec-div
        (vec-mul
         (vec-cast
          (vec-add
           (vec-add
            (vec-mul
             (vec-cast
              (load
               (buffer column_sums_b 'uint32)
               (ramp
                (sca-add
                 (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                 16)
                1
                16)
               (aligned 16 0))
              'int32
              16)
             (sca-broadcast (int32_t t5829) 16))
            (vec-add
             (load
              (buffer bias 'int32)
              (ramp (sca-mul output.s0.x.x 16) 1 16)
              (aligned 16 0))
             (sca-broadcast
              (sca-add
               (sca-mul
                (sca-mul (int32_t t5829) (int32_t t5830))
                (int32_t mat_a.extent.0))
               (sca-mul (int32_t t5830) (int32_t t6653)))
              16)))
           (vec-cast
            (load
             (buffer multiplied_no_offsets 'uint32)
             (ramp
              (sca-add
               (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
               4)
              1
              16)
             (aligned 4 0))
            'int32
            16))
          'int64
          16)
         (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
        (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
      (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
     (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
    'int32
    16)
   (sca-broadcast (int32_t output_shift) 16))
  (vec-bwand
   (vec-if
    (sca-broadcast
     (sca-lt (int32_t (bv #x00000000 32)) (int32_t output_shift))
     16)
    (sca-broadcast (int32_t (bv #x00000001 32)) 16)
    (sca-broadcast (int32_t (bv #x00000000 32)) 16))
   (vec-shr
    (vec-cast
     (vec-max
      (vec-min
       (vec-add
        (vec-bwand
         (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
         (vec-div
          (vec-mul
           (vec-cast
            (vec-add
             (vec-add
              (vec-mul
               (vec-cast
                (load
                 (buffer column_sums_b 'uint32)
                 (ramp
                  (sca-add
                   (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                   16)
                  1
                  16)
                 (aligned 16 0))
                'int32
                16)
               (sca-broadcast (int32_t t5829) 16))
              (vec-add
               (load
                (buffer bias 'int32)
                (ramp (sca-mul output.s0.x.x 16) 1 16)
                (aligned 16 0))
               (sca-broadcast
                (sca-add
                 (sca-mul
                  (sca-mul (int32_t t5829) (int32_t t5830))
                  (int32_t mat_a.extent.0))
                 (sca-mul (int32_t t5830) (int32_t t6653)))
                16)))
             (vec-cast
              (load
               (buffer multiplied_no_offsets 'uint32)
               (ramp
                (sca-add
                 (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
                 4)
                1
                16)
               (aligned 4 0))
              'int32
              16))
            'int64
            16)
           (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
          (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
        (vec-div
         (vec-mul
          (vec-cast
           (vec-add
            (vec-add
             (vec-mul
              (vec-cast
               (load
                (buffer column_sums_b 'uint32)
                (ramp
                 (sca-add
                  (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                  16)
                 1
                 16)
                (aligned 16 0))
               'int32
               16)
              (sca-broadcast (int32_t t5829) 16))
             (vec-add
              (load
               (buffer bias 'int32)
               (ramp (sca-mul output.s0.x.x 16) 1 16)
               (aligned 16 0))
              (sca-broadcast
               (sca-add
                (sca-mul
                 (sca-mul (int32_t t5829) (int32_t t5830))
                 (int32_t mat_a.extent.0))
                (sca-mul (int32_t t5830) (int32_t t6653)))
               16)))
            (vec-cast
             (load
              (buffer multiplied_no_offsets 'uint32)
              (ramp
               (sca-add
                (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
                4)
               1
               16)
              (aligned 4 0))
             'int32
             16))
           'int64
           16)
          (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
         (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
       (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
      (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
     'int32
     16)
    (sca-broadcast
     (sca-add (int32_t output_shift) (int32_t (bv #xffffffff 32)))
     16))))
 (sca-broadcast (int32_t output_offset) 16))
template:
  (vs-shift-right
 ...
 (cast
  ...
  (vs-shift-right
   ...
   (vs-mpy-add
    ...
    (vs-mpy-add
     ...
     (combine
      (vs-mpy-add
       ...
       (combine
        (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
        (vs-mpy-add
         ...
         (combine
          #<load-data>
          (broadcast
           ...
           (sca-add
            (sca-mul
             (sca-mul (int32_t t5829) (int32_t t5830))
             (int32_t mat_a.extent.0))
            (sca-mul (int32_t t5830) (int32_t t6653)))))
         (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
         #f
         #f
         #f
         'int32))
       (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
       #f
       #f
       #f
       'int32)
      (cast ... #<load-data> 'int32 #f))
     (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
     #f
     #f
     #f
     'int32)
    (list (int32_t output_multiplier))
    #f
    #f
    #f
    'int64)
   (int64_t (bv #x000000000000001f 64))
   #t
   x?$2971
   #t)
  'int32
  #t)
 (int32_t output_shift)
 x?$3409
 x?$3410
 x?$3411)
axioms:
  (list (forall (idx) (bvsle (bv #x80000001 32) (app abstr-vals$3429 idx))))
optimized-halide-expr:
  (vec-add
 (vec-add
  (vec-shr #<abstr-halide-expr> (sca-broadcast (int32_t output_shift) 16))
  (vec-bwand
   (vec-if
    (sca-broadcast
     (sca-lt (int32_t (bv #x00000000 32)) (int32_t output_shift))
     16)
    (sca-broadcast (int32_t (bv #x00000001 32)) 16)
    (sca-broadcast (int32_t (bv #x00000000 32)) 16))
   (vec-shr
    #<abstr-halide-expr>
    (sca-broadcast
     (sca-add (int32_t output_shift) (int32_t (bv #xffffffff 32)))
     16))))
 (sca-broadcast (int32_t output_offset) 16))
optimized-template:
  (vs-shift-right
 ...
 #<abstr-expr>
 (int32_t output_shift)
 x?$3409
 x?$3410
 x?$3411)
optimized Halide 0:
  (int32_t
 (bvadd output_offset (bvadd (bvashr (app abstr-vals$3429 0) output_shift) (bvand (ite (bvslt (bv #x00000000 32) output_shift) (bv #x00000001 32) (bv #x00000000 32)) (bvashr (app abstr-vals$3429 0) (bvadd (bv #xffffffff 32) output_shift))))))
optimized x86 0:
  (int32_t
 (ite x?$3409 (bvadd (ite x?$3411 (bvashr (app abstr-vals$3429 0) output_shift) (bvlshr (app abstr-vals$3429 0) output_shift)) (bvand (ite (bvslt (bv #x00000000 32) output_shift) (bv #x00000001 32) (bv #x00000000 32)) (ite x?$3411 (bvashr (app abstr-vals$3429 0) (bvadd (bv #xffffffff 32) output_shift)) (bvlshr (app abstr-vals$3429 0) (bvadd (bv #xffffffff 32) output_shift))))) (ite x?$3411 (bvashr (app abstr-vals$3429 0) output_shift) (bvlshr (app abstr-vals$3429 0) output_shift))))
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-add
  (vec-shr
   (vec-cast
    (vec-max
     (vec-min
      (vec-add
       (vec-bwand
        (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
        (vec-div
         (vec-mul
          (vec-cast
           (vec-add
            (vec-add
             (vec-mul
              (vec-cast
               (load
                (buffer column_sums_b 'uint32)
                (ramp
                 (sca-add
                  (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                  16)
                 1
                 16)
                (aligned 16 0))
               'int32
               16)
              (sca-broadcast (int32_t t5829) 16))
             (vec-add
              (load
               (buffer bias 'int32)
               (ramp (sca-mul output.s0.x.x 16) 1 16)
               (aligned 16 0))
              (sca-broadcast
               (sca-add
                (sca-mul
                 (sca-mul (int32_t t5829) (int32_t t5830))
                 (int32_t mat_a.extent.0))
                (sca-mul (int32_t t5830) (int32_t t6653)))
               16)))
            (vec-cast
             (load
              (buffer multiplied_no_offsets 'uint32)
              (ramp
               (sca-add
                (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
                4)
               1
               16)
              (aligned 4 0))
             'int32
             16))
           'int64
           16)
          (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
         (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
       (vec-div
        (vec-mul
         (vec-cast
          (vec-add
           (vec-add
            (vec-mul
             (vec-cast
              (load
               (buffer column_sums_b 'uint32)
               (ramp
                (sca-add
                 (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                 16)
                1
                16)
               (aligned 16 0))
              'int32
              16)
             (sca-broadcast (int32_t t5829) 16))
            (vec-add
             (load
              (buffer bias 'int32)
              (ramp (sca-mul output.s0.x.x 16) 1 16)
              (aligned 16 0))
             (sca-broadcast
              (sca-add
               (sca-mul
                (sca-mul (int32_t t5829) (int32_t t5830))
                (int32_t mat_a.extent.0))
               (sca-mul (int32_t t5830) (int32_t t6653)))
              16)))
           (vec-cast
            (load
             (buffer multiplied_no_offsets 'uint32)
             (ramp
              (sca-add
               (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
               4)
              1
              16)
             (aligned 4 0))
            'int32
            16))
          'int64
          16)
         (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
        (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
      (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
     (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
    'int32
    16)
   (sca-broadcast (int32_t output_shift) 16))
  (vec-bwand
   (vec-if
    (sca-broadcast
     (sca-lt (int32_t (bv #x00000000 32)) (int32_t output_shift))
     16)
    (sca-broadcast (int32_t (bv #x00000001 32)) 16)
    (sca-broadcast (int32_t (bv #x00000000 32)) 16))
   (vec-shr
    (vec-cast
     (vec-max
      (vec-min
       (vec-add
        (vec-bwand
         (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
         (vec-div
          (vec-mul
           (vec-cast
            (vec-add
             (vec-add
              (vec-mul
               (vec-cast
                (load
                 (buffer column_sums_b 'uint32)
                 (ramp
                  (sca-add
                   (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                   16)
                  1
                  16)
                 (aligned 16 0))
                'int32
                16)
               (sca-broadcast (int32_t t5829) 16))
              (vec-add
               (load
                (buffer bias 'int32)
                (ramp (sca-mul output.s0.x.x 16) 1 16)
                (aligned 16 0))
               (sca-broadcast
                (sca-add
                 (sca-mul
                  (sca-mul (int32_t t5829) (int32_t t5830))
                  (int32_t mat_a.extent.0))
                 (sca-mul (int32_t t5830) (int32_t t6653)))
                16)))
             (vec-cast
              (load
               (buffer multiplied_no_offsets 'uint32)
               (ramp
                (sca-add
                 (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
                 4)
                1
                16)
               (aligned 4 0))
              'int32
              16))
            'int64
            16)
           (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
          (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
        (vec-div
         (vec-mul
          (vec-cast
           (vec-add
            (vec-add
             (vec-mul
              (vec-cast
               (load
                (buffer column_sums_b 'uint32)
                (ramp
                 (sca-add
                  (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                  16)
                 1
                 16)
                (aligned 16 0))
               'int32
               16)
              (sca-broadcast (int32_t t5829) 16))
             (vec-add
              (load
               (buffer bias 'int32)
               (ramp (sca-mul output.s0.x.x 16) 1 16)
               (aligned 16 0))
              (sca-broadcast
               (sca-add
                (sca-mul
                 (sca-mul (int32_t t5829) (int32_t t5830))
                 (int32_t mat_a.extent.0))
                (sca-mul (int32_t t5830) (int32_t t6653)))
               16)))
            (vec-cast
             (load
              (buffer multiplied_no_offsets 'uint32)
              (ramp
               (sca-add
                (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
                4)
               1
               16)
              (aligned 4 0))
             'int32
             16))
           'int64
           16)
          (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
         (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
       (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
      (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
     'int32
     16)
    (sca-broadcast
     (sca-add (int32_t output_shift) (int32_t (bv #xffffffff 32)))
     16))))
 (sca-broadcast (int32_t output_offset) 16))
template:
  (vs-mpy-add
 ...
 (union [x?$3432 #(struct:vs-shift-right
                   ...
                   #(struct:cast
                     ...
                     #(struct:vs-shift-right
                       ...
                       #(struct:vs-mpy-add
                         ...
                         #(struct:vs-mpy-add
                           ...
                           #<combine:
                            #(struct:vs-mpy-add
                              ...
                              #<combine:
                               #(struct:vs-mpy-add
                                 ...
                                 #<load-data>
                                 (#(struct:int32_t t5829))
                                 #f
                                 #f
                                 #f
                                 int32)
                               #(struct:vs-mpy-add
                                 ...
                                 #<combine:
                                  #<load-data>
                                  #(struct:broadcast
                                    ...
                                    #(struct:sca-add
                                      #(struct:sca-mul
                                        #(struct:sca-mul
                                          #(struct:int32_t t5829)
                                          #(struct:int32_t t5830))
                                        #(struct:int32_t mat_a.extent.0))
                                      #(struct:sca-mul
                                        #(struct:int32_t t5830)
                                        #(struct:int32_t t6653))))>
                                 (#(struct:int8_t (bv #x01 8))
                                  #(struct:int8_t (bv #x01 8)))
                                 #f
                                 #f
                                 #f
                                 int32)>
                              (#(struct:int8_t (bv #x01 8))
                               #(struct:int8_t (bv #x01 8)))
                              #f
                              #f
                              #f
                              int32)
                            #(struct:cast ... #<load-data> int32 #f)>
                           (#(struct:int8_t (bv #x01 8))
                            #(struct:int8_t (bv #x01 8)))
                           #f
                           #f
                           #f
                           int32)
                         (#(struct:int32_t output_multiplier))
                         #f
                         #f
                         #f
                         int64)
                       #(struct:int64_t (bv #x000000000000001f 64))
                       #t
                       x?$2971
                       #t)
                     int32
                     #t)
                   #(struct:int32_t output_shift)
                   #t
                   x?$3371
                   #t)] [(! x?$3432) #(struct:broadcast
                                       ...
                                       #(struct:int32_t output_offset))])
 (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
 (! x?$3433)
 (! x?$3434)
 (! x?$3435)
 'int32)
axioms:
  '()
optimized-halide-expr:
  (vec-add
 (vec-add
  (vec-shr
   (vec-cast
    (vec-max
     (vec-min
      (vec-add
       (vec-bwand
        (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
        (vec-div
         (vec-mul
          (vec-cast
           (vec-add
            (vec-add
             (vec-mul
              (vec-cast
               (load
                (buffer column_sums_b 'uint32)
                (ramp
                 (sca-add
                  (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                  16)
                 1
                 16)
                (aligned 16 0))
               'int32
               16)
              (sca-broadcast (int32_t t5829) 16))
             (vec-add
              (load
               (buffer bias 'int32)
               (ramp (sca-mul output.s0.x.x 16) 1 16)
               (aligned 16 0))
              (sca-broadcast
               (sca-add
                (sca-mul
                 (sca-mul (int32_t t5829) (int32_t t5830))
                 (int32_t mat_a.extent.0))
                (sca-mul (int32_t t5830) (int32_t t6653)))
               16)))
            (vec-cast
             (load
              (buffer multiplied_no_offsets 'uint32)
              (ramp
               (sca-add
                (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
                4)
               1
               16)
              (aligned 4 0))
             'int32
             16))
           'int64
           16)
          (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
         (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
       (vec-div
        (vec-mul
         (vec-cast
          (vec-add
           (vec-add
            (vec-mul
             (vec-cast
              (load
               (buffer column_sums_b 'uint32)
               (ramp
                (sca-add
                 (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                 16)
                1
                16)
               (aligned 16 0))
              'int32
              16)
             (sca-broadcast (int32_t t5829) 16))
            (vec-add
             (load
              (buffer bias 'int32)
              (ramp (sca-mul output.s0.x.x 16) 1 16)
              (aligned 16 0))
             (sca-broadcast
              (sca-add
               (sca-mul
                (sca-mul (int32_t t5829) (int32_t t5830))
                (int32_t mat_a.extent.0))
               (sca-mul (int32_t t5830) (int32_t t6653)))
              16)))
           (vec-cast
            (load
             (buffer multiplied_no_offsets 'uint32)
             (ramp
              (sca-add
               (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
               4)
              1
              16)
             (aligned 4 0))
            'int32
            16))
          'int64
          16)
         (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
        (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
      (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
     (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
    'int32
    16)
   (sca-broadcast (int32_t output_shift) 16))
  (vec-bwand
   (vec-if
    (sca-broadcast
     (sca-lt (int32_t (bv #x00000000 32)) (int32_t output_shift))
     16)
    (sca-broadcast (int32_t (bv #x00000001 32)) 16)
    (sca-broadcast (int32_t (bv #x00000000 32)) 16))
   (vec-shr
    (vec-cast
     (vec-max
      (vec-min
       (vec-add
        (vec-bwand
         (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
         (vec-div
          (vec-mul
           (vec-cast
            (vec-add
             (vec-add
              (vec-mul
               (vec-cast
                (load
                 (buffer column_sums_b 'uint32)
                 (ramp
                  (sca-add
                   (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                   16)
                  1
                  16)
                 (aligned 16 0))
                'int32
                16)
               (sca-broadcast (int32_t t5829) 16))
              (vec-add
               (load
                (buffer bias 'int32)
                (ramp (sca-mul output.s0.x.x 16) 1 16)
                (aligned 16 0))
               (sca-broadcast
                (sca-add
                 (sca-mul
                  (sca-mul (int32_t t5829) (int32_t t5830))
                  (int32_t mat_a.extent.0))
                 (sca-mul (int32_t t5830) (int32_t t6653)))
                16)))
             (vec-cast
              (load
               (buffer multiplied_no_offsets 'uint32)
               (ramp
                (sca-add
                 (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
                 4)
                1
                16)
               (aligned 4 0))
              'int32
              16))
            'int64
            16)
           (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
          (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
        (vec-div
         (vec-mul
          (vec-cast
           (vec-add
            (vec-add
             (vec-mul
              (vec-cast
               (load
                (buffer column_sums_b 'uint32)
                (ramp
                 (sca-add
                  (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                  16)
                 1
                 16)
                (aligned 16 0))
               'int32
               16)
              (sca-broadcast (int32_t t5829) 16))
             (vec-add
              (load
               (buffer bias 'int32)
               (ramp (sca-mul output.s0.x.x 16) 1 16)
               (aligned 16 0))
              (sca-broadcast
               (sca-add
                (sca-mul
                 (sca-mul (int32_t t5829) (int32_t t5830))
                 (int32_t mat_a.extent.0))
                (sca-mul (int32_t t5830) (int32_t t6653)))
               16)))
            (vec-cast
             (load
              (buffer multiplied_no_offsets 'uint32)
              (ramp
               (sca-add
                (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
                4)
               1
               16)
              (aligned 4 0))
             'int32
             16))
           'int64
           16)
          (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
         (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
       (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
      (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
     'int32
     16)
    (sca-broadcast
     (sca-add (int32_t output_shift) (int32_t (bv #xffffffff 32)))
     16))))
 (sca-broadcast (int32_t output_offset) 16))
optimized-template:
  (vs-mpy-add
 ...
 (union [x?$3432 #(struct:vs-shift-right
                   ...
                   #(struct:cast
                     ...
                     #(struct:vs-shift-right
                       ...
                       #(struct:vs-mpy-add
                         ...
                         #(struct:vs-mpy-add
                           ...
                           #<combine:
                            #(struct:vs-mpy-add
                              ...
                              #<combine:
                               #(struct:vs-mpy-add
                                 ...
                                 #<load-data>
                                 (#(struct:int32_t t5829))
                                 #f
                                 #f
                                 #f
                                 int32)
                               #(struct:vs-mpy-add
                                 ...
                                 #<combine:
                                  #<load-data>
                                  #(struct:broadcast
                                    ...
                                    #(struct:sca-add
                                      #(struct:sca-mul
                                        #(struct:sca-mul
                                          #(struct:int32_t t5829)
                                          #(struct:int32_t t5830))
                                        #(struct:int32_t mat_a.extent.0))
                                      #(struct:sca-mul
                                        #(struct:int32_t t5830)
                                        #(struct:int32_t t6653))))>
                                 (#(struct:int8_t (bv #x01 8))
                                  #(struct:int8_t (bv #x01 8)))
                                 #f
                                 #f
                                 #f
                                 int32)>
                              (#(struct:int8_t (bv #x01 8))
                               #(struct:int8_t (bv #x01 8)))
                              #f
                              #f
                              #f
                              int32)
                            #(struct:cast ... #<load-data> int32 #f)>
                           (#(struct:int8_t (bv #x01 8))
                            #(struct:int8_t (bv #x01 8)))
                           #f
                           #f
                           #f
                           int32)
                         (#(struct:int32_t output_multiplier))
                         #f
                         #f
                         #f
                         int64)
                       #(struct:int64_t (bv #x000000000000001f 64))
                       #t
                       x?$2971
                       #t)
                     int32
                     #t)
                   #(struct:int32_t output_shift)
                   #t
                   x?$3371
                   #t)] [(! x?$3432) #(struct:broadcast
                                       ...
                                       #(struct:int32_t output_offset))])
 (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
 (! x?$3433)
 (! x?$3434)
 (! x?$3435)
 'int32)
optimized Halide 0:
  (int32_t
 (bvadd output_offset (bvadd (bvashr (extract 31 0 (ite (bvsle (bv #xffffffff80000000 64) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64))) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bv #xffffffff80000000 64))) output_shift) (bvand (bvashr (extract 31 0 (ite (bvsle (bv #xffffffff80000000 64) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64))) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bv #xffffffff80000000 64))) (bvadd (bv #xffffffff 32) output_shift)) (ite (bvslt (bv #x00000000 32) output_shift) (bv #x00000001 32) (bv #x00000000 32))))))
optimized x86 0:
  (int32_t
 (ite* (⊢ (&& x?$3435 (! (&& (! x?$3433) (! x?$3435)))) (ite x?$3433 (bvadd (ite x?$3432 (bvadd (bvashr (ite (bvslt (bvadd (bvashr (bvmul (sign-extend output_multiplier (bitvector 64)) (sign-extend (bvadd (ite c$2019 (bvadd (ite (|| (= 1 (* 2 idx$2018)) (&& c$1205 (= 2 (* 2 idx$2018))) (&& c$1207 (= 3 (* 2 idx$2018))) (&& c$1209 (= 4 (* 2 idx$2018))) (&& c$1211 (= 5 (* 2 idx$2018))) (&& c$1213 (= 6 (* 2 idx$2018))) (&& c$1215 (= 7 (* 2 idx$2018))) (&& c$1217 (= 8 (* 2 idx$2018))) (&& c$1219 (= 9 (* 2 idx$2018))) (&& c$1221 (= 10 (* 2 idx$2018))) (&& c$1223 (= 11 (* 2 idx$2018))) (&& c$1225 (= 12 (* 2 idx$2018))) (&& c$1227 (= 13 (* 2 idx$2018))) (&& c$1229 (= 14 (* 2 idx$2018))) (&& c$1231 (= 15 (* 2 idx$2018))) (&& c$1233 (= 16 (* 2 idx$2018))) (&& c$1235 (= 17 (* 2 idx$2018))) (&& c$1237 (= 18 (* 2 idx$2018))) (&& c$1239 (= 19 (* 2 idx$2018))) (&& c$1241 (= 20 (* 2 idx$2018))) (&& c$1243 (= 21 (* 2 idx$2018))) (&& c$1245 (= 22 (* 2 idx$2018))) (&& c$1247 (= 23 (* 2 idx$2018))) (&& c$1249 (= 24 (* 2 idx$2018))) (&& c$1251 (= 25 (* 2 idx$2018))) (&& c$1253 (= 26 (* 2 idx$2018))) (&& c$1255 (= 27 (* 2 idx$2018))) (&& c$1257 (= 28 (* 2 idx$2018))) (&& c$1259 (= 29 (* 2 idx$2018))) (&& c$1261 (= 30 (* 2 idx$2018))) (&& c$1263 (= 31 (* 2 idx$2018))) (&& c$1265 (= 32 (* 2 idx$2018))) (&& c$1267 (= 33 (* 2 idx$2018))) (&& c$1269 (= 34 (* 2 idx$2018))) (&& c$1271 (= 35 (* 2 idx$2018))) (&& c$1273 (= 36 (* 2 idx$2018))) (&& c$1275 (= 37 (* 2 idx$2018))) (&& c$1277 (= 38 (* 2 idx$2018))) (&& c$1279 (= 39 (* 2 idx$2018))) (&& c$1281 (= 40 (* 2 idx$2018))) (&& c$1283 (= 41 (* 2 idx$2018))) (&& c$1285 (= 42 (* 2 idx$2018))) (&& c$1287 (= 43 (* 2 idx$2018))) (&& c$1289 (= 44 (* 2 idx$2018))) (&& c$1291 (= 45 (* 2 idx$2018))) (&& c$1293 (= 46 (* 2 idx$2018))) (&& c$1295 (= 47 (* 2 idx$2018))) (&& c$1297 (= 48 (* 2 idx$2018))) (&& c$1299 (= 49 (* 2 idx$2018))) (&& c$1301 (= 50 (* 2 idx$2018))) (&& c$1303 (= 51 (* 2 idx$2018))) (&& c$1305 (= 52 (* 2 idx$2018))) (&& c$1307 (= 53 (* 2 idx$2018))) (&& c$1309 (= 54 (* 2 idx$2018))) (&& c$1311 (= 55 (* 2 idx$2018))) (&& c$1313 (= 56 (* 2 idx$2018))) (&& c$1315 (= 57 (* 2 idx$2018))) (&& c$1317 (= 58 (* 2 idx$2018))) (&& c$1319 (= 59 (* 2 idx$2018))) (&& c$1321 (= 60 (* 2 idx$2018))) (&& c$1323 (= 61 (* 2 idx$2018))) (&& c$1325 (= 62 (* 2 idx$2018))) (&& c$1327 (= 63 (* 2 idx$2018)))) (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (ite (|| (= 1 (* 2 (ite* (⊢ (= 2 (* 2 idx$2018)) idx$1204) (⊢ (= 3 (* 2 idx$2018)) idx$1206) (⊢ (= 4 (* 2 idx$2018)) idx$1208) (⊢ (= 5 (* 2 idx$2018)) idx$1210) (⊢ (= 6 (* 2 idx$2018)) idx$1212) (⊢ (= 7 (* 2 idx$2018)) idx$1214) (⊢ (= 8 (* 2 idx$2018)) idx$1216) (⊢ (= 9 (* 2 idx$2018)) idx$1218) (⊢ (= 10 (* 2 idx$2018)) idx$1220) (⊢ (= 11 (* 2 idx$2018)) idx$1222) (⊢ (= 12 (* 2 idx$2018)) idx$1224) (⊢ (= 13 (* 2 idx$2018)) idx$1226) (⊢ (= 14 (* 2 idx$2018)) idx$1228) (⊢ (= 15 (* 2 idx$2018)) idx$1230) (⊢ (= 16 (* 2 idx$2018)) idx$1232) (⊢ (= 17 (* 2 idx$2018)) idx$1234) (⊢ (= 18 (* 2 idx$2018)) idx$1236) (⊢ (= 19 (* 2 idx$2018)) idx$1238) (⊢ (= 20 (* 2 idx$2018)) idx$1240) (⊢ (= 21 (* 2 idx$2018)) idx$1242) (⊢ (= 22 (* 2 idx$2018)) idx$1244) (⊢ (= 23 (* 2 idx$2018)) idx$1246) (⊢ (= 24 (* 2 idx$2018)) idx$1248) (⊢ (= 25 (* 2 idx$2018)) idx$1250) (⊢ (= 26 (* 2 idx$2018)) idx$1252) (⊢ (= 27 (* 2 idx$2018)) idx$1254) (⊢ (= 28 (* 2 idx$2018)) idx$1256) (⊢ (= 29 (* 2 idx$2018)) idx$1258) (⊢ (= 30 (* 2 idx$2018)) idx$1260) (⊢ (= 31 (* 2 idx$2018)) idx$1262) (⊢ (= 32 (* 2 idx$2018)) idx$1264) (⊢ (= 33 (* 2 idx$2018)) idx$1266) (⊢ (= 34 (* 2 idx$2018)) idx$1268) (⊢ (= 35 (* 2 idx$2018)) idx$1270) (⊢ (= 36 (* 2 idx$2018)) idx$1272) (⊢ (= 37 (* 2 idx$2018)) idx$1274) (⊢ (= 38 (* 2 idx$2018)) idx$1276) (⊢ (= 39 (* 2 idx$2018)) idx$1278) (⊢ (= 40 (* 2 idx$2018)) idx$1280) (⊢ (= 41 (* 2 idx$2018)) idx$1282) (⊢ (= 42 (* 2 idx$2018)) idx$1284) (⊢ (= 43 (* 2 idx$2018)) idx$1286) (⊢ (= 44 (* 2 idx$2018)) idx$1288) (⊢ (= 45 (* 2 idx$2018)) idx$1290) (⊢ (= 46 (* 2 idx$2018)) idx$1292) (⊢ (= 47 (* 2 idx$2018)) idx$1294) (⊢ (= 48 (* 2 idx$2018)) idx$1296) (⊢ (= 49 (* 2 idx$2018)) idx$1298) (⊢ (= 50 (* 2 idx$2018)) idx$1300) (⊢ (= 51 (* 2 idx$2018)) idx$1302) (⊢ (= 52 (* 2 idx$2018)) idx$1304) (⊢ (= 53 (* 2 idx$2018)) idx$1306) (⊢ (= 54 (* 2 idx$2018)) idx$1308) (⊢ (= 55 (* 2 idx$2018)) idx$1310) (⊢ (= 56 (* 2 idx$2018)) idx$1312) (⊢ (= 57 (* 2 idx$2018)) idx$1314) (⊢ (= 58 (* 2 idx$2018)) idx$1316) (⊢ (= 59 (* 2 idx$2018)) idx$1318) (⊢ (= 60 (* 2 idx$2018)) idx$1320) (⊢ (= 61 (* 2 idx$2018)) idx$1322) (⊢ (= 62 (* 2 idx$2018)) idx$1324) (⊢ (= 63 (* 2 idx$2018)) idx$1326) (⊢ (|| (= 0 (* 2 idx$2018)) (= 1 (* 2 idx$2018))) 0)))) (&& c$535 (= 2 (* 2 (ite* (⊢ (= 2 (* 2 idx$2018)) idx$1204) (⊢ (= 3 (* 2 idx$2018)) idx$1206) (⊢ (= 4 (* 2 idx$2018)) idx$1208) (⊢ (= 5 (* 2 idx$2018)) idx$1210) (⊢ (= 6 (* 2 idx$2018)) idx$1212) (⊢ (= 7 (* 2 idx$2018)) idx$1214) (⊢ (= 8 (* 2 idx$2018)) idx$1216) (⊢ (= 9 (* 2 idx$2018)) idx$1218) (⊢ (= 10 (* 2 idx$2018)) idx$1220) (⊢ (= 11 (* 2 idx$2018)) idx$1222) (⊢ (= 12 (* 2 idx$2018)) idx$1224) (⊢ (= 13 (* 2 idx$2018)) idx$1226) (⊢ (= 14 (* 2 idx$2018)) idx$1228) (⊢ (= 15 (* 2 idx$2018)) idx$1230) (⊢ (= 16 (* 2 idx$2018)) idx$1232) (⊢ (= 17 (* 2 idx$2018)) idx$1234) (⊢ (= 18 (* 2 idx$2018)) idx$1236) (⊢ (= 19 (* 2 idx$2018)) idx$1238) (⊢ (= 20 (* 2 idx$2018)) idx$1240) (⊢ (= 21 (* 2 idx$2018)) idx$1242) (⊢ (= 22 (* 2 idx$2018)) idx$1244) (⊢ (= 23 (* 2 idx$2018)) idx$1246) (⊢ (= 24 (* 2 idx$2018)) idx$1248) (⊢ (= 25 (* 2 idx$2018)) idx$1250) (⊢ (= 26 (* 2 idx$2018)) idx$1252) (⊢ (= 27 (* 2 idx$2018)) idx$1254) (⊢ (= 28 (* 2 idx$2018)) idx$1256) (⊢ (= 29 (* 2 idx$2018)) idx$1258) (⊢ (= 30 (* 2 idx$2018)) idx$1260) (⊢ (= 31 (* 2 idx$2018)) idx$1262) (⊢ (= 32 (* 2 idx$2018)) idx$1264) (⊢ (= 33 (* 2 idx$2018)) idx$1266) (⊢ (= 34 (* 2 idx$2018)) idx$1268) (⊢ (= 35 (* 2 idx$2018)) idx$1270) (⊢ (= 36 (* 2 idx$2018)) idx$1272) (⊢ (= 37 (* 2 idx$2018)) idx$1274) (⊢ (= 38 (* 2 idx$2018)) idx$1276) (⊢ (= 39 (* 2 idx$2018)) idx$1278) (⊢ (= 40 (* 2 idx$2018)) idx$1280) (⊢ (= 41 (* 2 idx$2018)) idx$1282) (⊢ (= 42 (* 2 idx$2018)) idx$1284) (⊢ (= 43 (* 2 idx$2018)) idx$1286) (⊢ (= 44 (* 2 idx$2018)) idx$1288) (⊢ (= 45 (* 2 idx$2018)) idx$1290) (⊢ (= 46 (* 2 idx$2018)) idx$1292) (⊢ (= 47 (* 2 idx$2018)) idx$1294) (⊢ (= 48 (* 2 idx$2018)) idx$1296) (⊢ (= 49 (* 2 idx$2018)) idx$1298) (⊢ (= 50 (* 2 idx$2018)) idx$1300) (⊢ (= 51 (* 2 idx$2018)) idx$1302) (⊢ (= 52 (* 2 idx$2018)) idx$1304) (⊢ (= 53 (* 2 idx$2018)) idx$1306) (⊢ (= 54 (* 2 idx$2018)) idx$1308) (⊢ (= 55 (* 2 idx$2018)) idx$1310) (⊢ (= 56 (* 2 idx$2018)) idx$1312) (⊢ (= 57 (* 2 idx$2018)) idx$1314) (⊢ (= 58 (* 2 idx$2018)) idx$1316) (⊢ (= 59 (* 2 idx$2018)) idx$1318) (⊢ (= 60 (* 2 idx$2018)) idx$1320) (⊢ (= 61 (* 2 idx$2018)) idx$1322) (⊢ (= 62 (* 2 idx$2018)) idx$1324) (⊢ (= 63 (* 2 idx$2018)) idx$1326) (⊢ (|| (= 0 (* 2 idx$2018)) (= 1 (* 2 idx$2018))) 0))))) (&& c$537 (= 3 (* 2 (ite* (⊢ (= 2 (* 2 idx$2018)) idx$1204) (⊢ (= 3 (* 2 idx$2018)) idx$1206) (⊢ (= 4 (* 2 idx$2018)) idx$1208) (⊢ (= 5 (* 2 idx$2018)) idx$1210) (⊢ (= 6 (* 2 idx$2018)) idx$1212) (⊢ (= 7 (* 2 idx$2018)) idx$1214) (⊢ (= 8 (* 2 idx$2018)) idx$1216) (⊢ (= 9 (* 2 idx$2018)) idx$1218) (⊢ (= 10 (* 2 idx$2018)) idx$1220) (⊢ (= 11 (* 2 idx$2018)) idx$1222) (⊢ (= 12 (* 2 idx$2018)) idx$1224) (⊢ (= 13 (* 2 idx$2018)) idx$1226) (⊢ (= 14 (* 2 idx$2018)) idx$1228) (⊢ (= 15 (* 2 idx$2018)) idx$1230) (⊢ (= 16 (* 2 idx$2018)) idx$1232) (⊢ (= 17 (* 2 idx$2018)) idx$1234) (⊢ (= 18 (* 2 idx$2018)) idx$1236) (⊢ (= 19 (* 2 idx$2018)) idx$1238) (⊢ (= 20 (* 2 idx$2018)) idx$1240) (⊢ (= 21 (* 2 idx$2018)) idx$1242) (⊢ (= 22 (* 2 idx$2018)) idx$1244) (⊢ (= 23 (* 2 idx$2018)) idx$1246) (⊢ (= 24 (* 2 idx$2018)) idx$1248) (⊢ (= 25 (* 2 idx$2018)) idx$1250) (⊢ (= 26 (* 2 idx$2018)) idx$1252) (⊢ (= 27 (* 2 idx$2018)) idx$1254) (⊢ (= 28 (* 2 idx$2018)) idx$1256) (⊢ (= 29 (* 2 idx$2018)) idx$1258) (⊢ (= 30 (* 2 idx$2018)) idx$1260) (⊢ (= 31 (* 2 idx$2018)) idx$1262) (⊢ (= 32 (* 2 idx$2018)) idx$1264) (⊢ (= 33 (* 2 idx$2018)) idx$1266) (⊢ (= 34 (* 2 idx$2018)) idx$1268) (⊢ (= 35 (* 2 idx$2018)) idx$1270) (⊢ (= 36 (* 2 idx$2018)) idx$1272) (⊢ (= 37 (* 2 idx$2018)) idx$1274) (⊢ (= 38 (* 2 idx$2018)) idx$1276) (⊢ (= 39 (* 2 idx$2018)) idx$1278) (⊢ (= 40 (* 2 idx$2018)) idx$1280) (⊢ (= 41 (* 2 idx$2018)) idx$1282) (⊢ (= 42 (* 2 idx$2018)) idx$1284) (⊢ (= 43 (* 2 idx$2018)) idx$1286) (⊢ (= 44 (* 2 idx$2018)) idx$1288) (⊢ (= 45 (* 2 idx$2018)) idx$1290) (⊢ (= 46 (* 2 idx$2018)) idx$1292) (⊢ (= 47 (* 2 idx$2018)) idx$1294) (⊢ (= 48 (* 2 idx$2018)) idx$1296) (⊢ (= 49 (* 2 idx$2018)) idx$1298) (⊢ (= 50 (* 2 idx$2018)) idx$1300) (⊢ (= 51 (* 2 idx$2018)) idx$1302) (⊢ (= 52 (* 2 idx$2018)) idx$1304) (⊢ (= 53 (* 2 idx$2018)) idx$1306) (⊢ (= 54 (* 2 idx$2018)) idx$1308) (⊢ (= 55 (* 2 idx$2018)) idx$1310) (⊢ (= 56 (* 2 idx$2018)) idx$1312) (⊢ (= 57 (* 2 idx$2018)) idx$1314) (⊢ (= 58 (* 2 idx$2018)) idx$1316) (⊢ (= 59 (* 2 idx$2018)) idx$1318) (⊢ (= 60 (* 2 idx$2018)) idx$1320) (⊢ (= 61 (* 2 idx$2018)) idx$1322) (⊢ (= 62 (* 2 idx$2018)) idx$1324) (⊢ (= 63 (* 2 idx$2018)) idx$1326) (⊢ (|| (= 0 (* 2 idx$2018)) (= 1 (* 2 idx$2018))) 0))))) (&& c$539 (= 4 (* 2 (ite* (⊢ (= 2 (* 2 idx$2018)) idx$1204) (⊢ (= 3 (* 2 idx$2018)) idx$1206) (⊢ (= 4 (* 2 idx$2018)) idx$1208) (⊢ (= 5 (* 2 idx$2018)) idx$1210) (⊢ (= 6 (* 2 idx$2018)) idx$1212) (⊢ (= 7 (* 2 idx$2018)) idx$1214) (⊢ (= 8 (* 2 idx$2018)) idx$1216) (⊢ (= 9 (* 2 idx$2018)) idx$1218) (⊢ (= 10 (* 2 idx$2018)) idx$1220) (⊢ (= 11 (* 2 idx$2018)) idx$1222) (⊢ (= 12 (* 2 idx$2018)) idx$1224) (⊢ (= 13 (* 2 idx$2018)) idx$1226) (⊢ (= 14 (* 2 idx$2018)) idx$1228) (⊢ (= 15 (* 2 idx$2018)) idx$1230) (⊢ (= 16 (* 2 idx$2018)) idx$1232) (⊢ (= 17 (* 2 idx$2018)) idx$1234) (⊢ (= 18 (* 2 idx$2018)) idx$1236) (⊢ (= 19 (* 2 idx$2018)) idx$1238) (⊢ (= 20 (* 2 idx$2018)) idx$1240) (⊢ (= 21 (* 2 idx$2018)) idx$1242) (⊢ (= 22 (* 2 idx$2018)) idx$1244) (⊢ (= 23 (* 2 idx$2018)) idx$1246) (⊢ (= 24 (* 2 idx$2018)) idx$1248) (⊢ (= 25 (* 2 idx$2018)) idx$1250) (⊢ (= 26 (* 2 idx$2018)) idx$1252) (⊢ (= 27 (* 2 idx$2018)) idx$1254) (⊢ (= 28 (* 2 idx$2018)) idx$1256) (⊢ (= 29 (* 2 idx$2018)) idx$1258) (⊢ (= 30 (* 2 idx$2018)) idx$1260) (⊢ (= 31 (* 2 idx$2018)) idx$1262) (⊢ (= 32 (* 2 idx$2018)) idx$1264) (⊢ (= 33 (* 2 idx$2018)) idx$1266) (⊢ (= 34 (* 2 idx$2018)) idx$1268) (⊢ (= 35 (* 2 idx$2018)) idx$1270) (⊢ (= 36 (* 2 idx$2018)) idx$1272) (⊢ (= 37 (* 2 idx$2018)) idx$1274) (⊢ (= 38 (* 2 idx$2018)) idx$1276) (⊢ (= 39 (* 2 idx$2018)) idx$1278) (⊢ (= 40 (* 2 idx$2018)) idx$1280) (⊢ (= 41 (* 2 idx$2018)) idx$1282) (⊢ (= 42 (* 2 idx$2018)) idx$1284) (⊢ (= 43 (* 2 idx$2018)) idx$1286) (⊢ (= 44 (* 2 idx$2018)) idx$1288) (⊢ (= 45 (* 2 idx$2018)) idx$1290) (⊢ (= 46 (* 2 idx$2018)) idx$1292) (⊢ (= 47 (* 2 idx$2018)) idx$1294) (⊢ (= 48 (* 2 idx$2018)) idx$1296) (⊢ (= 49 (* 2 idx$2018)) idx$1298) (⊢ (= 50 (* 2 idx$2018)) idx$1300) (⊢ (= 51 (* 2 idx$2018)) idx$1302) (⊢ (= 52 (* 2 idx$2018)) idx$1304) (⊢ (= 53 (* 2 idx$2018)) idx$1306) (⊢ (= 54 (* 2 idx$2018)) idx$1308) (⊢ (= 55 (* 2 idx$2018)) idx$1310) (⊢ (= 56 (* 2 idx$2018)) idx$1312) (⊢ (= 57 (* 2 idx$2018)) idx$1314) (⊢ (= 58 (* 2 idx$2018)) idx$1316) (⊢ (= 59 (* 2 idx$2018)) idx$1318) (⊢ (= 60 (* 2 idx$2018)) idx$1320) (⊢ (= 61 (* 2 idx$2018)) idx$1322) (⊢ (= 62 (* 2 idx$2018)) idx$1324) (⊢ (= 63 (* 2 idx$2018)) idx$1326) (⊢ (|| (= 0 (* 2 idx$2018)) (= 1 (* 2 idx$2018))) 0))))) (&& c$541 (= 5 (* 2 (ite* (⊢ (= 2 (* 2 idx$2018)) idx$1204) (⊢ (= 3 (* 2 idx$2018)) idx$1206) (⊢ (= 4 (* 2 idx$2018)) idx$1208) (⊢ (= 5 (* 2 idx$2018)) idx$1210) (⊢ (= 6 (* 2 idx$2018)) idx$1212) (⊢ (= 7 (* 2 idx$2018)) idx$1214) (⊢ (= 8 (* 2 idx$2018)) idx$1216) (⊢ (= 9 (* 2 idx$2018)) idx$1218) (⊢ (= 10 (* 2 idx$2018)) idx$1220) (⊢ (= 11 (* 2 idx$2018)) idx$1222) (⊢ (= 12 (* 2 idx$2018)) idx$1224) (⊢ (= 13 (* 2 idx$2018)) idx$1226) (⊢ (= 14 (* 2 idx$2018)) idx$1228) (⊢ (= 15 (* 2 idx$2018)) idx$1230) (⊢ (= 16 (* 2 idx$2018)) idx$1232) (⊢ (= 17 (* 2 idx$2018)) idx$1234) (⊢ (= 18 (* 2 idx$2018)) idx$1236) (⊢ (= 19 (* 2 idx$2018)) idx$1238) (⊢ (= 20 (* 2 idx$2018)) idx$1240) (⊢ (= 21 (* 2 idx$2018)) idx$1242) (⊢ (= 22 (* 2 idx$2018)) idx$1244) (⊢ (= 23 (* 2 idx$2018)) idx$1246) (⊢ (= 24 (* 2 idx$2018)) idx$1248) (⊢ (= 25 (* 2 idx$2018)) idx$1250) (⊢ (= 26 (* 2 idx$2018)) idx$1252) (⊢ (= 27 (* 2 idx$2018)) idx$1254) (⊢ (= 28 (* 2 idx$2018)) idx$1256) (⊢ (= 29 (* 2 idx$2018)) idx$1258) (⊢ (= 30 (* 2 idx$2018)) idx$1260) (⊢ (= 31 (* 2 idx$2018)) idx$1262) (⊢ (= 32 (* 2 idx$2018)) idx$1264) (⊢ (= 33 (* 2 idx$2018)) idx$1266) (⊢ (= 34 (* 2 idx$2018)) idx$1268) (⊢ (= 35 (* 2 idx$2018)) idx$1270) (⊢ (= 36 (* 2 idx$2018)) idx$1272) (⊢ (= 37 (* 2 idx$2018)) idx$1274) (⊢ (= 38 (* 2 idx$2018)) idx$1276) (⊢ (= 39 (* 2 idx$2018)) idx$1278) (⊢ (= 40 (* 2 idx$2018)) idx$1280) (⊢ (= 41 (* 2 idx$2018)) idx$1282) (⊢ (= 42 (* 2 idx$2018)) idx$1284) (⊢ (= 43 (* 2 idx$2018)) idx$1286) (⊢ (= 44 (* 2 idx$2018)) idx$1288) (⊢ (= 45 (* 2 idx$2018)) idx$1290) (⊢ (= 46 (* 2 idx$2018)) idx$1292) (⊢ (= 47 (* 2 idx$2018)) idx$1294) (⊢ (= 48 (* 2 idx$2018)) idx$1296) (⊢ (= 49 (* 2 idx$2018)) idx$1298) (⊢ (= 50 (* 2 idx$2018)) idx$1300) (⊢ (= 51 (* 2 idx$2018)) idx$1302) (⊢ (= 52 (* 2 idx$2018)) idx$1304) (⊢ (= 53 (* 2 idx$2018)) idx$1306) (⊢ (= 54 (* 2 idx$2018)) idx$1308) (⊢ (= 55 (* 2 idx$2018)) idx$1310) (⊢ (= 56 (* 2 idx$2018)) idx$1312) (⊢ (= 57 (* 2 idx$2018)) idx$1314) (⊢ (= 58 (* 2 idx$2018)) idx$1316) (⊢ (= 59 (* 2 idx$2018)) idx$1318) (⊢ (= 60 (* 2 idx$2018)) idx$1320) (⊢ (= 61 (* 2 idx$2018)) idx$1322) (⊢ (= 62 (* 2 idx$2018)) idx$1324) (⊢ (= 63 (* 2 idx$2018)) idx$1326) (⊢ (|| (= 0 (* 2 idx$2018)) (= 1 (* 2 idx$2018))) 0))))) (&& c$543 (= 6 (* 2 (ite* (⊢ (= 2 (* 2 idx$2018)) idx$1204) (⊢ (= 3 (* 2 idx$2018)) idx$1206) (⊢ (= 4 (* 2 idx$2018)) idx$1208) (⊢ (= 5 (* 2 idx$2018)) idx$1210) (⊢ (= 6 (* 2 idx$2018)) idx$1212) (⊢ (= 7 (* 2 idx$2018)) idx$1214) (⊢ (= 8 (* 2 idx$2018)) idx$1216) (⊢ (= 9 (* 2 idx$2018)) idx$1218) (⊢ (= 10 (* 2 idx$2018)) idx$1220) (⊢ (= 11 (* 2 idx$2018)) idx$1222) (⊢ (= 12 (* 2 idx$2018)) idx$1224) (⊢ (= 13 (* 2 idx$2018)) idx$1226) (⊢ (= 14 (* 2 idx$2018)) idx$1228) (⊢ (= 15 (* 2 idx$2018)) idx$1230) (⊢ (= 16 (* 2 idx$2018)) idx$1232) (⊢ (= 17 (* 2 idx$2018)) idx$1234) (⊢ (= 18 (* 2 idx$2018)) idx$1236) (⊢ (= 19 (* 2 idx$2018)) idx$1238) (⊢ (= 20 (* 2 idx$2018)) idx$1240) (⊢ (= 21 (* 2 idx$2018)) idx$1242) (⊢ (= 22 (* 2 idx$2018)) idx$1244) (⊢ (= 23 (* 2 idx$2018)) idx$1246) (⊢ (= 24 (* 2 idx$2018)) idx$1248) (⊢ (= 25 (* 2 idx$2018)) idx$1250) (⊢ (= 26 (* 2 idx$2018)) idx$1252) (⊢ (= 27 (* 2 idx$2018)) idx$1254) (⊢ (= 28 (* 2 idx$2018)) idx$1256) (⊢ (= 29 (* 2 idx$2018)) idx$1258) (⊢ (= 30 (* 2 idx$2018)) idx$1260) (⊢ (= 31 (* 2 idx$2018)) idx$1262) (⊢ (= 32 (* 2 idx$2018)) idx$1264) (⊢ (= 33 (* 2 idx$2018)) idx$1266) (⊢ (= 34 (* 2 idx$2018)) idx$1268) (⊢ (= 35 (* 2 idx$2018)) idx$1270) (⊢ (= 36 (* 2 idx$2018)) idx$1272) (⊢ (= 37 (* 2 idx$2018)) idx$1274) (⊢ (= 38 (* 2 idx$2018)) idx$1276) (⊢ (= 39 (* 2 idx$2018)) idx$1278) (⊢ (= 40 (* 2 idx$2018)) idx$1280) (⊢ (= 41 (* 2 idx$2018)) idx$1282) (⊢ (= 42 (* 2 idx$2018)) idx$1284) (⊢ (= 43 (* 2 idx$2018)) idx$1286) (⊢ (= 44 (* 2 idx$2018)) idx$1288) (⊢ (= 45 (* 2 idx$2018)) idx$1290) (⊢ (= 46 (* 2 idx$2018)) idx$1292) (⊢ (= 47 (* 2 idx$2018)) idx$1294) (⊢ (= 48 (* 2 idx$2018)) idx$1296) (⊢ (= 49 (* 2 idx$2018)) idx$1298) (⊢ (= 50 (* 2 idx$2018)) idx$1300) (⊢ (= 51 (* 2 idx$2018)) idx$1302) (⊢ (= 52 (* 2 idx$2018)) idx$1304) (⊢ (= 53 (* 2 idx$2018)) idx$1306) (⊢ (= 54 (* 2 idx$2018)) idx$1308) (⊢ (= 55 (* 2 idx$2018)) idx$1310) (⊢ (= 56 (* 2 idx$2018)) idx$1312) (⊢ (= 57 (* 2 idx$2018)) idx$1314) (⊢ (= 58 (* 2 idx$2018)) idx$1316) (⊢ (= 59 (* 2 idx$2018)) idx$1318) (⊢ (= 60 (* 2 idx$2018)) idx$1320) (⊢ (= 61 (* 2 idx$2018)) idx$1322) (⊢ (= 62 (* 2 idx$2018)) idx$1324) (⊢ (= 63 (* 2 idx$2018)) idx$1326) (⊢ (|| (= 0 (* 2 idx$2018)) (= 1 (* 2 idx$2018))) 0))))) (&& c$545 (= 7 (* 2 (ite* (⊢ (= 2 (* 2 idx$2018)) idx$1204) (⊢ (= 3 (* 2 idx$2018)) idx$1206) (⊢ (= 4 (* 2 idx$2018)) idx$1208) (⊢ (= 5 (* 2 idx$2018)) idx$1210) (⊢ (= 6 (* 2 idx$2018)) idx$1212) (⊢ (= 7 (* 2 idx$2018)) idx$1214) (⊢ (= 8 (* 2 idx$2018)) idx$1216) (⊢ (= 9 (* 2 idx$2018)) idx$1218) (⊢ (= 10 (* 2 idx$2018)) idx$1220) (⊢ (= 11 (* 2 idx$2018)) idx$1222) (⊢ (= 12 (* 2 idx$2018)) idx$1224) (⊢ (= 13 (* 2 idx$2018)) idx$1226) (⊢ (= 14 (* 2 idx$2018)) idx$1228) (⊢ (= 15 (* 2 idx$2018)) idx$1230) (⊢ (= 16 (* 2 idx$2018)) idx$1232) (⊢ (= 17 (* 2 idx$2018)) idx$1234) (⊢ (= 18 (* 2 idx$2018)) idx$1236) (⊢ (= 19 (* 2 idx$2018)) idx$1238) (⊢ (= 20 (* 2 idx$2018)) idx$1240) (⊢ (= 21 (* 2 idx$2018)) idx$1242) (⊢ (= 22 (* 2 idx$2018)) idx$1244) (⊢ (= 23 (* 2 idx$2018)) idx$1246) (⊢ (= 24 (* 2 idx$2018)) idx$1248) (⊢ (= 25 (* 2 idx$2018)) idx$1250) (⊢ (= 26 (* 2 idx$2018)) idx$1252) (⊢ (= 27 (* 2 idx$2018)) idx$1254) (⊢ (= 28 (* 2 idx$2018)) idx$1256) (⊢ (= 29 (* 2 idx$2018)) idx$1258) (⊢ (= 30 (* 2 idx$2018)) idx$1260) (⊢ (= 31 (* 2 idx$2018)) idx$1262) (⊢ (= 32 (* 2 idx$2018)) idx$1264) (⊢ (= 33 (* 2 idx$2018)) idx$1266) (⊢ (= 34 (* 2 idx$2018)) idx$1268) (⊢ (= 35 (* 2 idx$2018)) idx$1270) (⊢ (= 36 (* 2 idx$2018)) idx$1272) (⊢ (= 37 (* 2 idx$2018)) idx$1274) (⊢ (= 38 (* 2 idx$2018)) idx$1276) (⊢ (= 39 (* 2 idx$2018)) idx$1278) (⊢ (= 40 (* 2 idx$2018)) idx$1280) (⊢ (= 41 (* 2 idx$2018)) idx$1282) (⊢ (= 42 (* 2 idx$2018)) idx$1284) (⊢ (= 43 (* 2 idx$2018)) idx$1286) (⊢ (= 44 (* 2 idx$2018)) idx$1288) (⊢ (= 45 (* 2 idx$2018)) idx$1290) (⊢ (= 46 (* 2 idx$2018)) idx$1292) (⊢ (= 47 (* 2 idx$2018)) idx$1294) (⊢ (= 48 (* 2 idx$2018)) idx$1296) (⊢ (= 49 (* 2 idx$2018)) idx$1298) (⊢ (= 50 (* 2 idx$2018)) idx$1300) (⊢ (= 51 (* 2 idx$2018)) idx$1302) (⊢ (= 52 (* 2 idx$2018)) idx$1304) (⊢ (= 53 (* 2 idx$2018)) idx$1306) (⊢ (= 54 (* 2 idx$2018)) idx$1308) (⊢ (= 55 (* 2 idx$2018)) idx$1310) (⊢ (= 56 (* 2 idx$2018)) idx$1312) (⊢ (= 57 (* 2 idx$2018)) idx$1314) (⊢ (= 58 (* 2 idx$2018)) idx$1316) (⊢ (= 59 (* 2 idx$2018)) idx$1318) (⊢ (= 60 (* 2 idx$2018)) idx$1320) (⊢ (= 61 (* 2 idx$2018)) idx$1322) (⊢ (= 62 (* 2 idx$2018)) idx$1324) (⊢ (= 63 (* 2 idx$2018)) idx$1326) (⊢ (|| (= 0 (* 2 idx$2018)) (= 1 (* 2 idx$2018))) 0))))) (&& c$547 (= 8 (* 2 (ite* (⊢ (= 2 (* 2 idx$2018)) idx$1204) (⊢ (= 3 (* 2 idx$2018)) idx$1206) (⊢ (= 4 (* 2 idx$2018)) idx$1208) (⊢ (= 5 (* 2 idx$2018)) idx$1210) (⊢ (= 6 (* 2 idx$2018)) idx$1212) (⊢ (= 7 (* 2 idx$2018)) idx$1214) (⊢ (= 8 (* 2 idx$2018)) idx$1216) (⊢ (= 9 (* 2 idx$2018)) idx$1218) (⊢ (= 10 (* 2 idx$2018)) idx$1220) (⊢ (= 11 (* 2 idx$2018)) idx$1222) (⊢ (= 12 (* 2 idx$2018)) idx$1224) (⊢ (= 13 (* 2 idx$2018)) idx$1226) (⊢ (= 14 (* 2 idx$2018)) idx$1228) (⊢ (= 15 (* 2 idx$2018)) idx$1230) (⊢ (= 16 (* 2 idx$2018)) idx$1232) (⊢ (= 17 (* 2 idx$2018)) idx$1234) (⊢ (= 18 (* 2 idx$2018)) idx$1236) (⊢ (= 19 (* 2 idx$2018)) idx$1238) (⊢ (= 20 (* 2 idx$2018)) idx$1240) (⊢ (= 21 (* 2 idx$2018)) idx$1242) (⊢ (= 22 (* 2 idx$2018)) idx$1244) (⊢ (= 23 (* 2 idx$2018)) idx$1246) (⊢ (= 24 (* 2 idx$2018)) idx$1248) (⊢ (= 25 (* 2 idx$2018)) idx$1250) (⊢ (= 26 (* 2 idx$2018)) idx$1252) (⊢ (= 27 (* 2 idx$2018)) idx$1254) (⊢ (= 28 (* 2 idx$2018)) idx$1256) (⊢ (= 29 (* 2 idx$2018)) idx$1258) (⊢ (= 30 (* 2 idx$2018)) idx$1260) (⊢ (= 31 (* 2 idx$2018)) idx$1262) (⊢ (= 32 (* 2 idx$2018)) idx$1264) (⊢ (= 33 (* 2 idx$2018)) idx$1266) (⊢ (= 34 (* 2 idx$2018)) idx$1268) (⊢ (= 35 (* 2 idx$2018)) idx$1270) (⊢ (= 36 (* 2 idx$2018)) idx$1272) (⊢ (= 37 (* 2 idx$2018)) idx$1274) (⊢ (= 38 (* 2 idx$2018)) idx$1276) (⊢ (= 39 (* 2 idx$2018)) idx$1278) (⊢ (= 40 (* 2 idx$2018)) idx$1280) (⊢ (= 41 (* 2 idx$2018)) idx$1282) (⊢ (= 42 (* 2 idx$2018)) idx$1284) (⊢ (= 43 (* 2 idx$2018)) idx$1286) (⊢ (= 44 (* 2 idx$2018)) idx$1288) (⊢ (= 45 (* 2 idx$2018)) idx$1290) (⊢ (= 46 (* 2 idx$2018)) idx$1292) (⊢ (= 47 (* 2 idx$2018)) idx$1294) (⊢ (= 48 (* 2 idx$2018)) idx$1296) (⊢ (= 49 (* 2 idx$2018)) idx$1298) (⊢ (= 50 (* 2 idx$2018)) idx$1300) (⊢ (= 51 (* 2 idx$2018)) idx$1302) (⊢ (= 52 (* 2 idx$2018)) idx$1304) (⊢ (= 53 (* 2 idx$2018)) idx$1306) (⊢ (= 54 (* 2 idx$2018)) idx$1308) (⊢ (= 55 (* 2 idx$2018)) idx$1310) (⊢ (= 56 (* 2 idx$2018)) idx$1312) (⊢ (= 57 (* 2 idx$2018)) idx$1314) (⊢ (= 58 (* 2 idx$2018)) idx$1316) (⊢ (= 59 (* 2 idx$2018)) idx$1318) (⊢ (= 60 (* 2 idx$2018)) idx$1320) (⊢ (= 61 (* 2 idx$2018)) idx$1322) (⊢ (= 62 (* 2 idx$2018)) idx$1324) (⊢ (= 63 (* 2 idx$2018)) idx$1326) (⊢ (|| (= 0 (* 2 idx$2018)) (= 1 (* 2 idx$2018))) 0))))) (&& c$549 (= 9 (* 2 (ite* (⊢ (= 2 (* 2 idx$2018)) idx$1204) (⊢ (= 3 (* 2 idx$2018)) idx$1206) (⊢ (= 4 (* 2 idx$2018)) idx$1208) (⊢ (= 5 (* 2 idx$2018)) idx$1210) (⊢ (= 6 (* 2 idx$2018)) idx$1212) (⊢ (= 7 (* 2 idx$2018)) idx$1214) (⊢ (= 8 (* 2 idx$2018)) idx$1216) (⊢ (= 9 (* 2 idx$2018)) idx$1218) (⊢ (= 10 (* 2 idx$2018)) idx$1220) (⊢ (= 11 (* 2 idx$2018)) idx$1222) (⊢ (= 12 (* 2 idx$2018)) idx$1224) (⊢ (= 13 (* 2 idx$2018)) idx$1226) (⊢ (= 14 (* 2 idx$2018)) idx$1228) (⊢ (= 15 (* 2 idx$2018)) idx$1230) (⊢ (= 16 (* 2 idx$2018)) idx$1232) (⊢ (= 17 (* 2 idx$2018)) idx$1234) (⊢ (= 18 (* 2 idx$2018)) idx$1236) (⊢ (= 19 (* 2 idx$2018)) idx$1238) (⊢ (= 20 (* 2 idx$2018)) idx$1240) (⊢ (= 21 (* 2 idx$2018)) idx$1242) (⊢ (= 22 (* 2 idx$2018)) idx$1244) (⊢ (= 23 (* 2 idx$2018)) idx$1246) (⊢ (= 24 (* 2 idx$2018)) idx$1248) (⊢ (= 25 (* 2 idx$2018)) idx$1250) (⊢ (= 26 (* 2 idx$2018)) idx$1252) (⊢ (= 27 (* 2 idx$2018)) idx$1254) (⊢ (= 28 (* 2 idx$2018)) idx$1256) (⊢ (= 29 (* 2 idx$2018)) idx$1258) (⊢ (= 30 (* 2 idx$2018)) idx$1260) (⊢ (= 31 (* 2 idx$2018)) idx$1262) (⊢ (= 32 (* 2 idx$2018)) idx$1264) (⊢ (= 33 (* 2 idx$2018)) idx$1266) (⊢ (= 34 (* 2 idx$2018)) idx$1268) (⊢ (= 35 (* 2 idx$2018)) idx$1270) (⊢ (= 36 (* 2 idx$2018)) idx$1272) (⊢ (= 37 (* 2 idx$2018)) idx$1274) (⊢ (= 38 (* 2 idx$2018)) idx$1276) (⊢ (= 39 (* 2 idx$2018)) idx$1278) (⊢ (= 40 (* 2 idx$2018)) idx$1280) (⊢ (= 41 (* 2 idx$2018)) idx$1282) (⊢ (= 42 (* 2 idx$2018)) idx$1284) (⊢ (= 43 (* 2 idx$2018)) idx$1286) (⊢ (= 44 (* 2 idx$2018)) idx$1288) (⊢ (= 45 (* 2 idx$2018)) idx$1290) (⊢ (= 46 (* 2 idx$2018)) idx$1292) (⊢ (= 47 (* 2 idx$2018)) idx$1294) (⊢ (= 48 (* 2 idx$2018)) idx$1296) (⊢ (= 49 (* 2 idx$2018)) idx$1298) (⊢ (= 50 (* 2 idx$2018)) idx$1300) (⊢ (= 51 (* 2 idx$2018)) idx$1302) (⊢ (= 52 (* 2 idx$2018)) idx$1304) (⊢ (= 53 (* 2 idx$2018)) idx$1306) (⊢ (= 54 (* 2 idx$2018)) idx$1308) (⊢ (= 55 (* 2 idx$2018)) idx$1310) (⊢ (= 56 (* 2 idx$2018)) idx$1312) (⊢ (= 57 (* 2 idx$2018)) idx$1314) (⊢ (= 58 (* 2 idx$2018)) idx$1316) (⊢ (= 59 (* 2 idx$2018)) idx$1318) (⊢ (= 60 (* 2 idx$2018)) idx$1320) (⊢ (= 61 (* 2 idx$2018)) idx$1322) (⊢ (= 62 (* 2 idx$2018)) idx$1324) (⊢ (= 63 (* 2 idx$2018)) idx$1326) (⊢ (|| (= 0 (* 2 idx$2018)) (= 1 (* 2 idx$2018))) 0))))) (&& c$551 (= 10 (* 2 (ite* (⊢ (= 2 (* 2 idx$2018)) idx$1204) (⊢ (= 3 (* 2 idx$2018)) idx$1206) (⊢ (= 4 (* 2 idx$2018)) idx$1208) (⊢ (= 5 (* 2 idx$2018)) idx$1210) (⊢ (= 6 (* 2 idx$2018)) idx$1212) (⊢ (= 7 (* 2 idx$2018)) idx$1214) (⊢ (= 8 (* 2 idx$2018)) idx$1216) (⊢ (= 9 (* 2 idx$2018)) idx$1218) (⊢ (= 10 (* 2 idx$2018)) idx$1220) (⊢ (= 11 (* 2 idx$2018)) idx$1222) (⊢ (= 12 (* 2 idx$2018)) idx$1224) (⊢ (= 13 (* 2 idx$2018)) idx$1226) (⊢ (= 14 (* 2 idx$2018)) idx$1228) (⊢ (= 15 (* 2 idx$2018)) idx$1230) (⊢ (= 16 (* 2 idx$2018)) idx$1232) (⊢ (= 17 (* 2 idx$2018)) idx$1234) (⊢ (= 18 (* 2 idx$2018)) idx$1236) (⊢ (= 19 (* 2 idx$2018)) idx$1238) (⊢ (= 20 (* 2 idx$2018)) idx$1240) (⊢ (= 21 (* 2 idx$2018)) idx$1242) (⊢ (= 22 (* 2 idx$2018)) idx$1244) (⊢ (= 23 (* 2 idx$2018)) idx$1246) (⊢ (= 24 (* 2 idx$2018)) idx$1248) (⊢ (= 25 (* 2 idx$2018)) idx$1250) (⊢ (= 26 (* 2 idx$2018)) idx$1252) (⊢ (= 27 (* 2 idx$2018)) idx$1254) (⊢ (= 28 (* 2 idx$2018)) idx$1256) (⊢ (= 29 (* 2 idx$2018)) idx$1258) (⊢ (= 30 (* 2 idx$2018)) idx$1260) (⊢ (= 31 (* 2 idx$2018)) idx$1262) (⊢ (= 32 (* 2 idx$2018)) idx$1264) (⊢ (= 33 (* 2 idx$2018)) idx$1266) (⊢ (= 34 (* 2 idx$2018)) idx$1268) (⊢ (= 35 (* 2 idx$2018)) idx$1270) (⊢ (= 36 (* 2 idx$2018)) idx$1272) (⊢ (= 37 (* 2 idx$2018)) idx$1274) (⊢ (= 38 (* 2 idx$2018)) idx$1276) (⊢ (= 39 (* 2 idx$2018)) idx$1278) (⊢ (= 40 (* 2 idx$2018)) idx$1280) (⊢ (= 41 (* 2 idx$2018)) idx$1282) (⊢ (= 42 (* 2 idx$2018)) idx$1284) (⊢ (= 43 (* 2 idx$2018)) idx$1286) (⊢ (= 44 (* 2 idx$2018)) idx$1288) (⊢ (= 45 (* 2 idx$2018)) idx$1290) (⊢ (= 46 (* 2 idx$2018)) idx$1292) (⊢ (= 47 (* 2 idx$2018)) idx$1294) (⊢ (= 48 (* 2 idx$2018)) idx$1296) (⊢ (= 49 (* 2 idx$2018)) idx$1298) (⊢ (= 50 (* 2 idx$2018)) idx$1300) (⊢ (= 51 (* 2 idx$2018)) idx$1302) (⊢ (= 52 (* 2 idx$2018)) idx$1304) (⊢ (= 53 (* 2 idx$2018)) idx$1306) (⊢ (= 54 (* 2 idx$2018)) idx$1308) (⊢ (= 55 (* 2 idx$2018)) idx$1310) (⊢ (= 56 (* 2 idx$2018)) idx$1312) (⊢ (= 57 (* 2 idx$2018)) idx$1314) (⊢ (= 58 (* 2 idx$2018)) idx$1316) (⊢ (= 59 (* 2 idx$2018)) idx$1318) (⊢ (= 60 (* 2 idx$2018)) idx$1320) (⊢ (= 61 (* 2 idx$2018)) idx$1322) (⊢ (= 62 (* 2 idx$2018)) idx$1324) (⊢ (= 63 (* 2 idx$2018)) idx$1326) (⊢ (|| (= 0 (* 2 idx$2018)) (= 1 (* 2 idx$2018))) 0))))) (&& c$553 (= 11 (* 2 (ite* (⊢ (= 2 (* 2 idx$2018)) idx$1204) (⊢ (= 3 (* 2 idx$2018)) idx$1206) (⊢ (= 4 (* 2 idx$2018)) idx$1208) (⊢ (= 5 (* 2 idx$2018)) idx$1210) (⊢ (= 6 (* 2 idx$2018)) idx$1212) (⊢ (= 7 (* 2 idx$2018)) idx$1214) (⊢ (= 8 (* 2 idx$2018)) idx$1216) (⊢ (= 9 (* 2 idx$2018)) idx$1218) (⊢ (= 10 (* 2 idx$2018)) idx$1220) (⊢ (= 11 (* 2 idx$2018)) idx$1222) (⊢ (= 12 (* 2 idx$2018)) idx$1224) (⊢ (= 13 (* 2 idx$2018)) idx$1226) (⊢ (= 14 (* 2 idx$2018)) idx$1228) (⊢ (= 15 (* 2 idx$2018)) idx$1230) (⊢ (= 16 (* 2 idx$2018)) idx$1232) (⊢ (= 17 (* 2 idx$2018)) idx$1234) (⊢ (= 18 (* 2 idx$2018)) idx$1236) (⊢ (= 19 (* 2 idx$2018)) idx$1238) (⊢ (= 20 (* 2 idx$2018)) idx$1240) (⊢ (= 21 (* 2 idx$2018)) idx$1242) (⊢ (= 22 (* 2 idx$2018)) idx$1244) (⊢ (= 23 (* 2 idx$2018)) idx$1246) (⊢ (= 24 (* 2 idx$2018)) idx$1248) (⊢ (= 25 (* 2 idx$2018)) idx$1250) (⊢ (= 26 (* 2 idx$2018)) idx$1252) (⊢ (= 27 (* 2 idx$2018)) idx$1254) (⊢ (= 28 (* 2 idx$2018)) idx$1256) (⊢ (= 29 (* 2 idx$2018)) idx$1258) (⊢ (= 30 (* 2 idx$2018)) idx$1260) (⊢ (= 31 (* 2 idx$2018)) idx$1262) (⊢ (= 32 (* 2 idx$2018)) idx$1264) (⊢ (= 33 (* 2 idx$2018)) idx$1266) (⊢ (= 34 (* 2 idx$2018)) idx$1268) (⊢ (= 35 (* 2 idx$2018)) idx$1270) (⊢ (= 36 (* 2 idx$2018)) idx$1272) (⊢ (= 37 (* 2 idx$2018)) idx$1274) (⊢ (= 38 (* 2 idx$2018)) idx$1276) (⊢ (= 39 (* 2 idx$2018)) idx$1278) (⊢ (= 40 (* 2 idx$2018)) idx$1280) (⊢ (= 41 (* 2 idx$2018)) idx$1282) (⊢ (= 42 (* 2 idx$2018)) idx$1284) (⊢ (= 43 (* 2 idx$2018)) idx$1286) (⊢ (= 44 (* 2 idx$2018)) idx$1288) (⊢ (= 45 (* 2 idx$2018)) idx$1290) (⊢ (= 46 (* 2 idx$2018)) idx$1292) (⊢ (= 47 (* 2 idx$2018)) idx$1294) (⊢ (= 48 (* 2 idx$2018)) idx$1296) (⊢ (= 49 (* 2 idx$2018)) idx$1298) (⊢ (= 50 (* 2 idx$2018)) idx$1300) (⊢ (= 51 (* 2 idx$2018)) idx$1302) (⊢ (= 52 (* 2 idx$2018)) idx$1304) (⊢ (= 53 (* 2 idx$2018)) idx$1306) (⊢ (= 54 (* 2 idx$2018)) idx$1308) (⊢ (= 55 (* 2 idx$2018)) idx$1310) (⊢ (= 56 (* 2 idx$2018)) idx$1312) (⊢ (= 57 (* 2 idx$2018)) idx$1314) (⊢ (= 58 (* 2 idx$2018)) idx$1316) (⊢ (= 59 (* 2 idx$2018)) idx$1318) (⊢ (= 60 (* 2 idx$2018)) idx$1320) (⊢ (= 61 (* 2 idx$2018)) idx$1322) (⊢ (= 62 (* 2 idx$2018)) idx$1324) (⊢ (= 63 (* 2 idx$2018)) idx$1326) (⊢ (|| (= 0 (* 2 idx$2018)) (= 1 (* 2 idx$2018))) 0))))) (&& c$555 (= 12 (* 2 (ite* (⊢ (= 2 (* 2 idx$2018)) idx$1204) (⊢ (= 3 (* 2 idx$2018)) idx$1206) (⊢ (= 4 (* 2 idx$2018)) idx$1208) (⊢ (= 5 (* 2 idx$2018)) idx$1210) (⊢ (= 6 (* 2 idx$2018)) idx$1212) (⊢ (= 7 (* 2 idx$2018)) idx$1214) (⊢ (= 8 (* 2 idx$2018)) idx$1216) (⊢ (= 9 (* 2 idx$2018)) idx$1218) (⊢ (= 10 (* 2 idx$2018)) idx$1220) (⊢ (= 11 (* 2 idx$2018)) idx$1222) (⊢ (= 12 (* 2 idx$2018)) idx$1224) (⊢ (= 13 (* 2 idx$2018)) idx$1226) (⊢ (= 14 (* 2 idx$2018)) idx$1228) (⊢ (= 15 (* 2 idx$2018)) idx$1230) (⊢ (= 16 (* 2 idx$2018)) idx$1232) (⊢ (= 17 (* 2 idx$2018)) idx$1234) (⊢ (= 18 (* 2 idx$2018)) idx$1236) (⊢ (= 19 (* 2 idx$2018)) idx$1238) (⊢ (= 20 (* 2 idx$2018)) idx$1240) (⊢ (= 21 (* 2 idx$2018)) idx$1242) (⊢ (= 22 (* 2 idx$2018)) idx$1244) (⊢ (= 23 (* 2 idx$2018)) idx$1246) (⊢ (= 24 (* 2 idx$2018)) idx$1248) (⊢ (= 25 (* 2 idx$2018)) idx$1250) (⊢ (= 26 (* 2 idx$2018)) idx$1252) (⊢ (= 27 (* 2 idx$2018)) idx$1254) (⊢ (= 28 (* 2 idx$2018)) idx$1256) (⊢ (= 29 (* 2 idx$2018)) idx$1258) (⊢ (= 30 (* 2 idx$2018)) idx$1260) (⊢ (= 31 (* 2 idx$2018)) idx$1262) (⊢ (= 32 (* 2 idx$2018)) idx$1264) (⊢ (= 33 (* 2 idx$2018)) idx$1266) (⊢ (= 34 (* 2 idx$2018)) idx$1268) (⊢ (= 35 (* 2 idx$2018)) idx$1270) (⊢ (= 36 (* 2 idx$2018)) idx$1272) (⊢ (= 37 (* 2 idx$2018)) idx$1274) (⊢ (= 38 (* 2 idx$2018)) idx$1276) (⊢ (= 39 (* 2 idx$2018)) idx$1278) (⊢ (= 40 (* 2 idx$2018)) idx$1280) (⊢ (= 41 (* 2 idx$2018)) idx$1282) (⊢ (= 42 (* 2 idx$2018)) idx$1284) (⊢ (= 43 (* 2 idx$2018)) idx$1286) (⊢ (= 44 (* 2 idx$2018)) idx$1288) (⊢ (= 45 (* 2 idx$2018)) idx$1290) (⊢ (= 46 (* 2 idx$2018)) idx$1292) (⊢ (= 47 (* 2 idx$2018)) idx$1294) (⊢ (= 48 (* 2 idx$2018)) idx$1296) (⊢ (= 49 (* 2 idx$2018)) idx$1298) (⊢ (= 50 (* 2 idx$2018)) idx$1300) (⊢ (= 51 (* 2 idx$2018)) idx$1302) (⊢ (= 52 (* 2 idx$2018)) idx$1304) (⊢ (= 53 (* 2 idx$2018)) idx$1306) (⊢ (= 54 (* 2 idx$2018)) idx$1308) (⊢ (= 55 (* 2 idx$2018)) idx$1310) (⊢ (= 56 (* 2 idx$2018)) idx$1312) (⊢ (= 57 (* 2 idx$2018)) idx$1314) (⊢ (= 58 (* 2 idx$2018)) idx$1316) (⊢ (= 59 (* 2 idx$2018)) idx$1318) (⊢ (= 60 (* 2 idx$2018)) idx$1320) (⊢ (= 61 (* 2 idx$2018)) idx$1322) (⊢ (= 62 (* 2 idx$2018)) idx$1324) (⊢ (= 63 (* 2 idx$2018)) idx$1326) (⊢ (|| (= 0 (* 2 idx$2018)) (= 1 (* 2 idx$2018))) 0))))) (&& c$557 (= 13 (* 2 (ite* (⊢ (= 2 (* 2 idx$2018)) idx$1204) (⊢ (= 3 (* 2 idx$2018)) idx$1206) (⊢ (= 4 (* 2 idx$2018)) idx$1208) (⊢ (= 5 (* 2 idx$2018)) idx$1210) (⊢ (= 6 (* 2 idx$2018)) idx$1212) (⊢ (= 7 (* 2 idx$2018)) idx$1214) (⊢ (= 8 (* 2 idx$2018)) idx$1216) (⊢ (= 9 (* 2 idx$2018)) idx$1218) (⊢ (= 10 (* 2 idx$2018)) idx$1220) (⊢ (= 11 (* 2 idx$2018)) idx$1222) (⊢ (= 12 (* 2 idx$2018)) idx$1224) (⊢ (= 13 (* 2 idx$2018)) idx$1226) (⊢ (= 14 (* 2 idx$2018)) idx$1228) (⊢ (= 15 (* 2 idx$2018)) idx$1230) (⊢ (= 16 (* 2 idx$2018)) idx$1232) (⊢ (= 17 (* 2 idx$2018)) idx$1234) (⊢ (= 18 (* 2 idx$2018)) idx$1236) (⊢ (= 19 (* 2 idx$2018)) idx$1238) (⊢ (= 20 (* 2 idx$2018)) idx$1240) (⊢ (= 21 (* 2 idx$2018)) idx$1242) (⊢ (= 22 (* 2 idx$2018)) idx$1244) (⊢ (= 23 (* 2 idx$2018)) idx$1246) (⊢ (= 24 (* 2 idx$2018)) idx$1248) (⊢ (= 25 (* 2 idx$2018)) idx$1250) (⊢ (= 26 (* 2 idx$2018)) idx$1252) (⊢ (= 27 (* 2 idx$2018)) idx$1254) (⊢ (= 28 (* 2 idx$2018)) idx$1256) (⊢ (= 29 (* 2 idx$2018)) idx$1258) (⊢ (= 30 (* 2 idx$2018)) idx$1260) (⊢ (= 31 (* 2 idx$2018)) idx$1262) (⊢ (= 32 (* 2 idx$2018)) idx$1264) (⊢ (= 33 (* 2 idx$2018)) idx$1266) (⊢ (= 34 (* 2 idx$2018)) idx$1268) (⊢ (= 35 (* 2 idx$2018)) idx$1270) (⊢ (= 36 (* 2 idx$2018)) idx$1272) (⊢ (= 37 (* 2 idx$2018)) idx$1274) (⊢ (= 38 (* 2 idx$2018)) idx$1276) (⊢ (= 39 (* 2 idx$2018)) idx$1278) (⊢ (= 40 (* 2 idx$2018)) idx$1280) (⊢ (= 41 (* 2 idx$2018)) idx$1282) (⊢ (= 42 (* 2 idx$2018)) idx$1284) (⊢ (= 43 (* 2 idx$2018)) idx$1286) (⊢ (= 44 (* 2 idx$2018)) idx$1288) (⊢ (= 45 (* 2 idx$2018)) idx$1290) (⊢ (= 46 (* 2 idx$2018)) idx$1292) (⊢ (= 47 (* 2 idx$2018)) idx$1294) (⊢ (= 48 (* 2 idx$2018)) idx$1296) (⊢ (= 49 (* 2 idx$2018)) idx$1298) (⊢ (= 50 (* 2 idx$2018)) idx$1300) (⊢ (= 51 (* 2 idx$2018)) idx$1302) (⊢ (= 52 (* 2 idx$2018)) idx$1304) (⊢ (= 53 (* 2 idx$2018)) idx$1306) (⊢ (= 54 (* 2 idx$2018)) idx$1308) (⊢ (= 55 (* 2 idx$2018)) idx$1310) (⊢ (= 56 (* 2 idx$2018)) idx$1312) (⊢ (= 57 (* 2 idx$2018)) idx$1314) (⊢ (= 58 (* 2 idx$2018)) idx$1316) (⊢ (= 59 (* 2 idx$2018)) idx$1318) (⊢ (= 60 (* 2 idx$2018)) idx$1320) (⊢ (= 61 (* 2 idx$2018)) idx$1322) (⊢ (= 62 (* 2 idx$2018)) idx$1324) (⊢ (= 63 (* 2 idx$2018)) idx$1326) (⊢ (|| (= 0 (* 2 idx$2018)) (= 1 (* 2 idx$2018))) 0))))) (&& c$559 (= 14 (* 2 (ite* (⊢ (= 2 (* 2 idx$2018)) idx$1204) (⊢ (= 3 (* 2 idx$2018)) idx$1206) (⊢ (= 4 (* 2 idx$2018)) idx$1208) (⊢ (= 5 (* 2 idx$2018)) idx$1210) (⊢ (= 6 (* 2 idx$2018)) idx$1212) (⊢ (= 7 (* 2 idx$2018)) idx$1214) (⊢ (= 8 (* 2 idx$2018)) idx$1216) (⊢ (= 9 (* 2 idx$2018)) idx$1218) (⊢ (= 10 (* 2 idx$2018)) idx$1220) (⊢ (= 11 (* 2 idx$2018)) idx$1222) (⊢ (= 12 (* 2 idx$2018)) idx$1224) (⊢ (= 13 (* 2 idx$2018)) idx$1226) (⊢ (= 14 (* 2 idx$2018)) idx$1228) (⊢ (= 15 (* 2 idx$2018)) idx$1230) (⊢ (= 16 (* 2 idx$2018)) idx$1232) (⊢ (= 17 (* 2 idx$2018)) idx$1234) (⊢ (= 18 (* 2 idx$2018)) idx$1236) (⊢ (= 19 (* 2 idx$2018)) idx$1238) (⊢ (= 20 (* 2 idx$2018)) idx$1240) (⊢ (= 21 (* 2 idx$2018)) idx$1242) (⊢ (= 22 (* 2 idx$2018)) idx$1244) (⊢ (= 23 (* 2 idx$2018)) idx$1246) (⊢ (= 24 (* 2 idx$2018)) idx$1248) (⊢ (= 25 (* 2 idx$2018)) idx$1250) (⊢ (= 26 (* 2 idx$2018)) idx$1252) (⊢ (= 27 (* 2 idx$2018)) idx$1254) (⊢ (= 28 (* 2 idx$2018)) idx$1256) (⊢ (= 29 (* 2 idx$2018)) idx$1258) (⊢ (= 30 (* 2 idx$2018)) idx$1260) (⊢ (= 31 (* 2 idx$2018)) idx$1262) (⊢ (= 32 (* 2 idx$2018)) idx$1264) (⊢ (= 33 (* 2 idx$2018)) idx$1266) (⊢ (= 34 (* 2 idx$2018)) idx$1268) (⊢ (= 35 (* 2 idx$2018)) idx$1270) (⊢ (= 36 (* 2 idx$2018)) idx$1272) (⊢ (= 37 (* 2 idx$2018)) idx$1274) (⊢ (= 38 (* 2 idx$2018)) idx$1276) (⊢ (= 39 (* 2 idx$2018)) idx$1278) (⊢ (= 40 (* 2 idx$2018)) idx$1280) (⊢ (= 41 (* 2 idx$2018)) idx$1282) (⊢ (= 42 (* 2 idx$2018)) idx$1284) (⊢ (= 43 (* 2 idx$2018)) idx$1286) (⊢ (= 44 (* 2 idx$2018)) idx$1288) (⊢ (= 45 (* 2 idx$2018)) idx$1290) (⊢ (= 46 (* 2 idx$2018)) idx$1292) (⊢ (= 47 (* 2 idx$2018)) idx$1294) (⊢ (= 48 (* 2 idx$2018)) idx$1296) (⊢ (= 49 (* 2 idx$2018)) idx$1298) (⊢ (= 50 (* 2 idx$2018)) idx$1300) (⊢ (= 51 (* 2 idx$2018)) idx$1302) (⊢ (= 52 (* 2 idx$2018)) idx$1304) (⊢ (= 53 (* 2 idx$2018)) idx$1306) (⊢ (= 54 (* 2 idx$2018)) idx$1308) (⊢ (= 55 (* 2 idx$2018)) idx$1310) (⊢ (= 56 (* 2 idx$2018)) idx$1312) (⊢ (= 57 (* 2 idx$2018)) idx$1314) (⊢ (= 58 (* 2 idx$2018)) idx$1316) (⊢ (= 59 (* 2 idx$2018)) idx$1318) (⊢ (= 60 (* 2 idx$2018)) idx$1320) (⊢ (= 61 (* 2 idx$2018)) idx$1322) (⊢ (= 62 (* 2 idx$2018)) idx$1324) (⊢ (= 63 (* 2 idx$2018)) idx$1326) (⊢ (|| (= 0 (* 2 idx$2018)) (= 1 (* 2 idx$2018))) 0))))) (&& c$561 (= 15 (* 2 (ite* (⊢ (= 2 (* 2 idx$2018)) idx$1204) (⊢ (= 3 (* 2 idx$2018)) idx$1206) (⊢ (= 4 (* 2 idx$2018)) idx$1208) (⊢ (= 5 (* 2 idx$2018)) idx$1210) (⊢ (= 6 (* 2 idx$2018)) idx$1212) (⊢ (= 7 (* 2 idx$2018)) idx$1214) (⊢ (= 8 (* 2 idx$2018)) idx$1216) (⊢ (= 9 (* 2 idx$2018)) idx$1218) (⊢ (= 10 (* 2 idx$2018)) idx$1220) (⊢ (= 11 (* 2 idx$2018)) idx$1222) (⊢ (= 12 (* 2 idx$2018)) idx$1224) (⊢ (= 13 (* 2 idx$2018)) idx$1226) (⊢ (= 14 (* 2 idx$2018)) idx$1228) (⊢ (= 15 (* 2 idx$2018)) idx$1230) (⊢ (= 16 (* 2 idx$2018)) idx$1232) (⊢ (= 17 (* 2 idx$2018)) idx$1234) (⊢ (= 18 (* 2 idx$2018)) idx$1236) (⊢ (= 19 (* 2 idx$2018)) idx$1238) (⊢ (= 20 (* 2 idx$2018)) idx$1240) (⊢ (= 21 (* 2 idx$2018)) idx$1242) (⊢ (= 22 (* 2 idx$2018)) idx$1244) (⊢ (= 23 (* 2 idx$2018)) idx$1246) (⊢ (= 24 (* 2 idx$2018)) idx$1248) (⊢ (= 25 (* 2 idx$2018)) idx$1250) (⊢ (= 26 (* 2 idx$2018)) idx$1252) (⊢ (= 27 (* 2 idx$2018)) idx$1254) (⊢ (= 28 (* 2 idx$2018)) idx$1256) (⊢ (= 29 (* 2 idx$2018)) idx$1258) (⊢ (= 30 (* 2 idx$2018)) idx$1260) (⊢ (= 31 (* 2 idx$2018)) idx$1262) (⊢ (= 32 (* 2 idx$2018)) idx$1264) (⊢ (= 33 (* 2 idx$2018)) idx$1266) (⊢ (= 34 (* 2 idx$2018)) idx$1268) (⊢ (= 35 (* 2 idx$2018)) idx$1270) (⊢ (= 36 (* 2 idx$2018)) idx$1272) (⊢ (= 37 (* 2 idx$2018)) idx$1274) (⊢ (= 38 (* 2 idx$2018)) idx$1276) (⊢ (= 39 (* 2 idx$2018)) idx$1278) (⊢ (= 40 (* 2 idx$2018)) idx$1280) (⊢ (= 41 (* 2 idx$2018)) idx$1282) (⊢ (= 42 (* 2 idx$2018)) idx$1284) (⊢ (= 43 (* 2 idx$2018)) idx$1286) (⊢ (= 44 (* 2 idx$2018)) idx$1288) (⊢ (= 45 (* 2 idx$2018)) idx$1290) (⊢ (= 46 (* 2 idx$2018)) idx$1292) (⊢ (= 47 (* 2 idx$2018)) idx$1294) (⊢ (= 48 (* 2 idx$2018)) idx$1296) (⊢ (= 49 (* 2 idx$2018)) idx$1298) (⊢ (= 50 (* 2 idx$2018)) idx$1300) (⊢ (= 51 (* 2 idx$2018)) idx$1302) (⊢ (= 52 (* 2 idx$2018)) idx$1304) (⊢ (= 53 (* 2 idx$2018)) idx$1306) (⊢ (= 54 (* 2 idx$2018)) idx$1308) (⊢ (= 55 (* 2 idx$2018)) idx$1310) (⊢ (= 56 (* 2 idx$2018)) idx$1312) (⊢ (= 57 (* 2 idx$2018)) idx$1314) (⊢ (= 58 (* 2 idx$2018)) idx$1316) (⊢ (= 59 (* 2 idx$2018)) idx$1318) (⊢ (= 60 (* 2 idx$2018)) idx$1320) (⊢ (= 61 (* 2 idx$2018)) idx$1322) (⊢ (= 62 (* 2 idx$2018)) idx$1324) (⊢ (= 63 (* 2 idx$2018)) idx$1326) (⊢ (|| (= 0 (* 2 idx$2018)) (= 1 (* 2 idx$2018))) 0))))) (&& c$563 (= 16 (* 2 (ite* (⊢ (= 2 (* 2 idx$2018)) idx$1204) (⊢ (= 3 (* 2 idx$2018)) idx$1206) (⊢ (= 4 (* 2 idx$2018)) idx$1208) (⊢ (= 5 (* 2 idx$2018)) idx$1210) (⊢ (= 6 (* 2 idx$2018)) idx$1212) (⊢ (= 7 (* 2 idx$2018)) idx$1214) (⊢ (= 8 (* 2 idx$2018)) idx$1216) (⊢ (= 9 (* 2 idx$2018)) idx$1218) (⊢ (= 10 (* 2 idx$2018)) idx$1220) (⊢ (= 11 (* 2 idx$2018)) idx$1222) (⊢ (= 12 (* 2 idx$2018)) idx$1224) (⊢ (= 13 (* 2 idx$2018)) idx$1226) (⊢ (= 14 (* 2 idx$2018)) idx$1228) (⊢ (= 15 (* 2 idx$2018)) idx$1230) (⊢ (= 16 (* 2 idx$2018)) idx$1232) (⊢ (= 17 (* 2 idx$2018)) idx$1234) (⊢ (= 18 (* 2 idx$2018)) idx$1236) (⊢ (= 19 (* 2 idx$2018)) idx$1238) (⊢ (= 20 (* 2 idx$2018)) idx$1240) (⊢ (= 21 (* 2 idx$2018)) idx$1242) (⊢ (= 22 (* 2 idx$2018)) idx$1244) (⊢ (= 23 (* 2 idx$2018)) idx$1246) (⊢ (= 24 (* 2 idx$2018)) idx$1248) (⊢ (= 25 (* 2 idx$2018)) idx$1250) (⊢ (= 26 (* 2 idx$2018)) idx$1252) (⊢ (= 27 (* 2 idx$2018)) idx$1254) (⊢ (= 28 (* 2 idx$2018)) idx$1256) (⊢ (= 29 (* 2 idx$2018)) idx$1258) (⊢ (= 30 (* 2 idx$2018)) idx$1260) (⊢ (= 31 (* 2 idx$2018)) idx$1262) (⊢ (= 32 (* 2 idx$2018)) idx$1264) (⊢ (= 33 (* 2 idx$2018)) idx$1266) (⊢ (= 34 (* 2 idx$2018)) idx$1268) (⊢ (= 35 (* 2 idx$2018)) idx$1270) (⊢ (= 36 (* 2 idx$2018)) idx$1272) (⊢ (= 37 (* 2 idx$2018)) idx$1274) (⊢ (= 38 (* 2 idx$2018)) idx$1276) (⊢ (= 39 (* 2 idx$2018)) idx$1278) (⊢ (= 40 (* 2 idx$2018)) idx$1280) (⊢ (= 41 (* 2 idx$2018)) idx$1282) (⊢ (= 42 (* 2 idx$2018)) idx$1284) (⊢ (= 43 (* 2 idx$2018)) idx$1286) (⊢ (= 44 (* 2 idx$2018)) idx$1288) (⊢ (= 45 (* 2 idx$2018)) idx$1290) (⊢ (= 46 (* 2 idx$2018)) idx$1292) (⊢ (= 47 (* 2 idx$2018)) idx$1294) (⊢ (= 48 (* 2 idx$2018)) idx$1296) (⊢ (= 49 (* 2 idx$2018)) idx$1298) (⊢ (= 50 (* 2 idx$2018)) idx$1300) (⊢ (= 51 (* 2 idx$2018)) idx$1302) (⊢ (= 52 (* 2 idx$2018)) idx$1304) (⊢ (= 53 (* 2 idx$2018)) idx$1306) (⊢ (= 54 (* 2 idx$2018)) idx$1308) (⊢ (= 55 (* 2 idx$2018)) idx$1310) (⊢ (= 56 (* 2 idx$2018)) idx$1312) (⊢ (= 57 (* 2 idx$2018)) idx$1314) (⊢ (= 58 (* 2 idx$2018)) idx$1316) (⊢ (= 59 (* 2 idx$2018)) idx$1318) (⊢ (= 60 (* 2 idx$2018)) idx$1320) (⊢ (= 61 (* 2 idx$2018)) idx$1322) (⊢ (= 62 (* 2 idx$2018)) idx$1324) (⊢ (= 63 (* 2 idx$2018)) idx$1326) (⊢ (|| (= 0 (* 2 idx$2018)) (= 1 (* 2 idx$2018))) 0))))) (&& c$565 (= 17 (* 2 (ite* (⊢ (= 2 (* 2 idx$2018)) idx$1204) (⊢ (= 3 (* 2 idx$2018)) idx$1206) (⊢ (= 4 (* 2 idx$2018)) idx$1208) (⊢ (= 5 (* 2 idx$2018)) idx$1210) (⊢ (= 6 (* 2 idx$2018)) idx$1212) (⊢ (= 7 (* 2 idx$2018)) idx$1214) (⊢ (= 8 (* 2 idx$2018)) idx$1216) (⊢ (= 9 (* 2 idx$2018)) idx$1218) (⊢ (= 10 (* 2 idx$2018)) idx$1220) (⊢ (= 11 (* 2 idx$2018)) idx$1222) (⊢ (= 12 (* 2 idx$2018)) idx$1224) (⊢ (= 13 (* 2 idx$2018)) idx$1226) (⊢ (= 14 (* 2 idx$2018)) idx$1228) (⊢ (= 15 (* 2 idx$2018)) idx$1230) (⊢ (= 16 (* 2 idx$2018)) idx$1232) (⊢ (= 17 (* 2 idx$2018)) idx$1234) (⊢ (= 18 (* 2 idx$2018)) idx$1236) (⊢ (= 19 (* 2 idx$2018)) idx$1238) (⊢ (= 20 (* 2 idx$2018)) idx$1240) (⊢ (= 21 (* 2 idx$2018)) idx$1242) (⊢ (= 22 (* 2 idx$2018)) idx$1244) (⊢ (= 23 (* 2 idx$2018)) idx$1246) (⊢ (= 24 (* 2 idx$2018)) idx$1248) (⊢ (= 25 (* 2 idx$2018)) idx$1250) (⊢ (= 26 (* 2 idx$2018)) idx$1252) (⊢ (= 27 (* 2 idx$2018)) idx$1254) (⊢ (= 28 (* 2 idx$2018)) idx$1256) (⊢ (= 29 (* 2 idx$2018)) idx$1258) (⊢ (= 30 (* 2 idx$2018)) idx$1260) (⊢ (= 31 (* 2 idx$2018)) idx$1262) (⊢ (= 32 (* 2 idx$2018)) idx$1264) (⊢ (= 33 (* 2 idx$2018)) idx$1266) (⊢ (= 34 (* 2 idx$2018)) idx$1268) (⊢ (= 35 (* 2 idx$2018)) idx$1270) (⊢ (= 36 (* 2 idx$2018)) idx$1272) (⊢ (= 37 (* 2 idx$2018)) idx$1274) (⊢ (= 38 (* 2 idx$2018)) idx$1276) (⊢ (= 39 (* 2 idx$2018)) idx$1278) (⊢ (= 40 (* 2 idx$2018)) idx$1280) (⊢ (= 41 (* 2 idx$2018)) idx$1282) (⊢ (= 42 (* 2 idx$2018)) idx$1284) (⊢ (= 43 (* 2 idx$2018)) idx$1286) (⊢ (= 44 (* 2 idx$2018)) idx$1288) (⊢ (= 45 (* 2 idx$2018)) idx$1290) (⊢ (= 46 (* 2 idx$2018)) idx$1292) (⊢ (= 47 (* 2 idx$2018)) idx$1294) (⊢ (= 48 (* 2 idx$2018)) idx$1296) (⊢ (= 49 (* 2 idx$2018)) idx$1298) (⊢ (= 50 (* 2 idx$2018)) idx$1300) (⊢ (= 51 (* 2 idx$2018)) idx$1302) (⊢ (= 52 (* 2 idx$2018)) idx$1304) (⊢ (= 53 (* 2 idx$2018)) idx$1306) (⊢ (= 54 (* 2 idx$2018)) idx$1308) (⊢ (= 55 (* 2 idx$2018)) idx$1310) (⊢ (= 56 (* 2 idx$2018)) idx$1312) (⊢ (= 57 (* 2 idx$2018)) idx$1314) (⊢ (= 58 (* 2 idx$2018)) idx$1316) (⊢ (= 59 (* 2 idx$2018)) idx$1318) (⊢ (= 60 (* 2 idx$2018)) idx$1320) (⊢ (= 61 (* 2 idx$2018)) idx$1322) (⊢ (= 62 (* 2 idx$2018)) idx$1324) (⊢ (= 63 (* 2 idx$2018)) idx$1326) (⊢ (|| (= 0 (* 2 idx$2018)) (= 1 (* 2 idx$2018))) 0))))) (&& c$567 (= 18 (* 2 (ite* (⊢ (= 2 (* 2 idx$2018)) idx$1204) (⊢ (= 3 (* 2 idx$2018)) idx$1206) (⊢ (= 4 (* 2 idx$2018)) idx$1208) (⊢ (= 5 (* 2 idx$2018)) idx$1210) (⊢ (= 6 (* 2 idx$2018)) idx$1212) (⊢ (= 7 (* 2 idx$2018)) idx$1214) (⊢ (= 8 (* 2 idx$2018)) idx$1216) (⊢ (= 9 (* 2 idx$2018)) idx$1218) (⊢ (= 10 (* 2 idx$2018)) idx$1220) (⊢ (= 11 (* 2 idx$2018)) idx$1222) (⊢ (= 12 (* 2 idx$2018)) idx$1224) (⊢ (= 13 (* 2 idx$2018)) idx$1226) (⊢ (= 14 (* 2 idx$2018)) idx$1228) (⊢ (= 15 (* 2 idx$2018)) idx$1230) (⊢ (= 16 (* 2 idx$2018)) idx$1232) (⊢ (= 17 (* 2 idx$2018)) idx$1234) (⊢ (= 18 (* 2 idx$2018)) idx$1236) (⊢ (= 19 (* 2 idx$2018)) idx$1238) (⊢ (= 20 (* 2 idx$2018)) idx$1240) (⊢ (= 21 (* 2 idx$2018)) idx$1242) (⊢ (= 22 (* 2 idx$2018)) idx$1244) (⊢ (= 23 (* 2 idx$2018)) idx$1246) (⊢ (= 24 (* 2 idx$2018)) idx$1248) (⊢ (= 25 (* 2 idx$2018)) idx$1250) (⊢ (= 26 (* 2 idx$2018)) idx$1252) (⊢ (= 27 (* 2 idx$2018)) idx$1254) (⊢ (= 28 (* 2 idx$2018)) idx$1256) (⊢ (= 29 (* 2 idx$2018)) idx$1258) (⊢ (= 30 (* 2 idx$2018)) idx$1260) (⊢ (= 31 (* 2 idx$2018)) idx$1262) (⊢ (= 32 (* 2 idx$2018)) idx$1264) (⊢ (= 33 (* 2 idx$2018)) idx$1266) (⊢ (= 34 (* 2 idx$2018)) idx$1268) (⊢ (= 35 (* 2 idx$2018)) idx$1270) (⊢ (= 36 (* 2 idx$2018)) idx$1272) (⊢ (= 37 (* 2 idx$2018)) idx$1274) (⊢ (= 38 (* 2 idx$2018)) idx$1276) (⊢ (= 39 (* 2 idx$2018)) idx$1278) (⊢ (= 40 (* 2 idx$2018)) idx$1280) (⊢ (= 41 (* 2 idx$2018)) idx$1282) (⊢ (= 42 (* 2 idx$2018)) idx$1284) (⊢ (= 43 (* 2 idx$2018)) idx$1286) (⊢ (= 44 (* 2 idx$2018)) idx$1288) (⊢ (= 45 (* 2 idx$2018)) idx$1290) (⊢ (= 46 (* 2 idx$2018)) idx$1292) (⊢ (= 47 (* 2 idx$2018)) idx$1294) (⊢ (= 48 (* 2 idx$2018)) idx$1296) (⊢ (= 49 (* 2 idx$2018)) idx$1298) (⊢ (= 50 (* 2 idx$2018)) idx$1300) (⊢ (= 51 (* 2 idx$2018)) idx$1302) (⊢ (= 52 (* 2 idx$2018)) idx$1304) (⊢ (= 53 (* 2 idx$2018)) idx$1306) (⊢ (= 54 (* 2 idx$2018)) idx$1308) (⊢ (= 55 (* 2 idx$2018)) idx$1310) (⊢ (= 56 (* 2 idx$2018)) idx$1312) (⊢ (= 57 (* 2 idx$2018)) idx$1314) (⊢ (= 58 (* 2 idx$2018)) idx$1316) (⊢ (= 59 (* 2 idx$2018)) idx$1318) (⊢ (= 60 (* 2 idx$2018)) idx$1320) (⊢ (= 61 (* 2 idx$2018)) idx$1322) (⊢ (= 62 (* 2 idx$2018)) idx$1324) (⊢ (= 63 (* 2 idx$2018)) idx$1326) (⊢ (|| (= 0 (* 2 idx$2018)) (= 1 (* 2 idx$2018))) 0))))) (&& c$569 (= 19 (* 2 (ite* (⊢ (= 2 (* 2 idx$2018)) idx$1204) (⊢ (= 3 (* 2 idx$2018)) idx$1206) (⊢ (= 4 (* 2 idx$2018)) idx$1208) (⊢ (= 5 (* 2 idx$2018)) idx$1210) (⊢ (= 6 (* 2 idx$2018)) idx$1212) (⊢ (= 7 (* 2 idx$2018)) idx$1214) (⊢ (= 8 (* 2 idx$2018)) idx$1216) (⊢ (= 9 (* 2 idx$2018)) idx$1218) (⊢ (= 10 (* 2 idx$2018)) idx$1220) (⊢ (= 11 (* 2 idx$2018)) idx$1222) (⊢ (= 12 (* 2 idx$2018)) idx$1224) (⊢ (= 13 (* 2 idx$2018)) idx$1226) (⊢ (= 14 (* 2 idx$2018)) idx$1228) (⊢ (= 15 (* 2 idx$2018)) idx$1230) (⊢ (= 16 (* 2 idx$2018)) idx$1232) (⊢ (= 17 (* 2 idx$2018)) idx$1234) (⊢ (= 18 (* 2 idx$2018)) idx$1236) (⊢ (= 19 (* 2 idx$2018)) idx$1238) (⊢ (= 20 (* 2 idx$2018)) idx$1240) (⊢ (= 21 (* 2 idx$2018)) idx$1242) (⊢ (= 22 (* 2 idx$2018)) idx$1244) (⊢ (= 23 (* 2 idx$2018)) idx$1246) (⊢ (= 24 (* 2 idx$2018)) idx$1248) (⊢ (= 25 (* 2 idx$2018)) idx$1250) (⊢ (= 26 (* 2 idx$2018)) idx$1252) (⊢ (= 27 (* 2 idx$2018)) idx$1254) (⊢ (= 28 (* 2 idx$2018)) idx$1256) (⊢ (= 29 (* 2 idx$2018)) idx$1258) (⊢ (= 30 (* 2 idx$2018)) idx$1260) (⊢ (= 31 (* 2 idx$2018)) idx$1262) (⊢ (= 32 (* 2 idx$2018)) idx$1264) (⊢ (= 33 (* 2 idx$2018)) idx$1266) (⊢ (= 34 (* 2 idx$2018)) idx$1268) (⊢ (= 35 (* 2 idx$2018)) idx$1270) (⊢ (= 36 (* 2 idx$2018)) idx$1272) (⊢ (= 37 (* 2 idx$2018)) idx$1274) (⊢ (= 38 (* 2 idx$2018)) idx$1276) (⊢ (= 39 (* 2 idx$2018)) idx$1278) (⊢ (= 40 (* 2 idx$2018)) idx$1280) (⊢ (= 41 (* 2 idx$2018)) idx$1282) (⊢ (= 42 (* 2 idx$2018)) idx$1284) (⊢ (= 43 (* 2 idx$2018)) idx$1286) (⊢ (= 44 (* 2 idx$2018)) idx$1288) (⊢ (= 45 (* 2 idx$2018)) idx$1290) (⊢ (= 46 (* 2 idx$2018)) idx$1292) (⊢ (= 47 (* 2 idx$2018)) idx$1294) (⊢ (= 48 (* 2 idx$2018)) idx$1296) (⊢ (= 49 (* 2 idx$2018)) idx$1298) (⊢ (= 50 (* 2 idx$2018)) idx$1300) (⊢ (= 51 (* 2 idx$2018)) idx$1302) (⊢ (= 52 (* 2 idx$2018)) idx$1304) (⊢ (= 53 (* 2 idx$2018)) idx$1306) (⊢ (= 54 (* 2 idx$2018)) idx$1308) (⊢ (= 55 (* 2 idx$2018)) idx$1310) (⊢ (= 56 (* 2 idx$2018)) idx$1312) (⊢ (= 57 (* 2 idx$2018)) idx$1314) (⊢ (= 58 (* 2 idx$2018)) idx$1316) (⊢ (= 59 (* 2 idx$2018)) idx$1318) (⊢ (= 60 (* 2 idx$2018)) idx$1320) (⊢ (= 61 (* 2 idx$2018)) idx$1322) (⊢ (= 62 (* 2 idx$2018)) idx$1324) (⊢ (= 63 (* 2 idx$2018)) idx$1326) (⊢ (|| (= 0 (* 2 idx$2018)) (= 1 (* 2 idx$2018))) 0))))) (&& c$571 (= 20 (* 2 (ite* (⊢ (= 2 (* 2 idx$2018)) idx$1204) (⊢ (= 3 (* 2 idx$2018)) idx$1206) (⊢ (= 4 (* 2 idx$2018)) idx$1208) (⊢ (= 5 (* 2 idx$2018)) idx$1210) (⊢ (= 6 (* 2 idx$2018)) idx$1212) (⊢ (= 7 (* 2 idx$2018)) idx$1214) (⊢ (= 8 (* 2 idx$2018)) idx$1216) (⊢ (= 9 (* 2 idx$2018)) idx$1218) (⊢ (= 10 (* 2 idx$2018)) idx$1220) (⊢ (= 11 (* 2 idx$2018)) idx$1222) (⊢ (= 12 (* 2 idx$2018)) idx$1224) (⊢ (= 13 (* 2 idx$2018)) idx$1226) (⊢ (= 14 (* 2 idx$2018)) idx$1228) (⊢ (= 15 (* 2 idx$2018)) idx$1230) (⊢ (= 16 (* 2 idx$2018)) idx$1232) (⊢ (= 17 (* 2 idx$2018)) idx$1234) (⊢ (= 18 (* 2 idx$2018)) idx$1236) (⊢ (= 19 (* 2 idx$2018)) idx$1238) (⊢ (= 20 (* 2 idx$2018)) idx$1240) (⊢ (= 21 (* 2 idx$2018)) idx$1242) (⊢ (= 22 (* 2 idx$2018)) idx$1244) (⊢ (= 23 (* 2 idx$2018)) idx$1246) (⊢ (= 24 (* 2 idx$2018)) idx$1248) (⊢ (= 25 (* 2 idx$2018)) idx$1250) (⊢ (= 26 (* 2 idx$2018)) idx$1252) (⊢ (= 27 (* 2 idx$2018)) idx$1254) (⊢ (= 28 (* 2 idx$2018)) idx$1256) (⊢ (= 29 (* 2 idx$2018)) idx$1258) (⊢ (= 30 (* 2 idx$2018)) idx$1260) (⊢ (= 31 (* 2 idx$2018)) idx$1262) (⊢ (= 32 (* 2 idx$2018)) idx$1264) (⊢ (= 33 (* 2 idx$2018)) idx$1266) (⊢ (= 34 (* 2 idx$2018)) idx$1268) (⊢ (= 35 (* 2 idx$2018)) idx$1270) (⊢ (= 36 (* 2 idx$2018)) idx$1272) (⊢ (= 37 (* 2 idx$2018)) idx$1274) (⊢ (= 38 (* 2 idx$2018)) idx$1276) (⊢ (= 39 (* 2 idx$2018)) idx$1278) (⊢ (= 40 (* 2 idx$2018)) idx$1280) (⊢ (= 41 (* 2 idx$2018)) idx$1282) (⊢ (= 42 (* 2 idx$2018)) idx$1284) (⊢ (= 43 (* 2 idx$2018)) idx$1286) (⊢ (= 44 (* 2 idx$2018)) idx$1288) (⊢ (= 45 (* 2 idx$2018)) idx$1290) (⊢ (= 46 (* 2 idx$2018)) idx$1292) (⊢ (= 47 (* 2 idx$2018)) idx$1294) (⊢ (= 48 (* 2 idx$2018)) idx$1296) (⊢ (= 49 (* 2 idx$2018)) idx$1298) (⊢ (= 50 (* 2 idx$2018)) idx$1300) (⊢ (= 51 (* 2 idx$2018)) idx$1302) (⊢ (= 52 (* 2 idx$2018)) idx$1304) (⊢ (= 53 (* 2 idx$2018)) idx$1306) (⊢ (= 54 (* 2 idx$2018)) idx$1308) (⊢ (= 55 (* 2 idx$2018)) idx$1310) (⊢ (= 56 (* 2 idx$2018)) idx$1312) (⊢ (= 57 (* 2 idx$2018)) idx$1314) (⊢ (= 58 (* 2 idx$2018)) idx$1316) (⊢ (= 59 (* 2 idx$2018)) idx$1318) (⊢ (= 60 (* 2 idx$2018)) idx$1320) (⊢ (= 61 (* 2 idx$2018)) idx$1322) (⊢ (= 62 (* 2 idx$2018)) idx$1324) (⊢ (= 63 (* 2 idx$2018)) idx$1326) (⊢ (|| (= 0 (* 2 idx$2018)) (= 1 (* 2 idx$2018))) 0))))) (&& c$573 (= 21 (* 2 (ite* (⊢ (= 2 (* 2 idx$2018)) idx$1204) (⊢ (= 3 (* 2 idx$2018)) idx$1206) (⊢ (= 4 (* 2 idx$2018)) idx$1208) (⊢ (= 5 (* 2 idx$2018)) idx$1210) (⊢ (= 6 (* 2 idx$2018)) idx$1212) (⊢ (= 7 (* 2 idx$2018)) idx$1214) (⊢ (= 8 (* 2 idx$2018)) idx$1216) (⊢ (= 9 (* 2 idx$2018)) idx$1218) (⊢ (= 10 (* 2 idx$2018)) idx$1220) (⊢ (= 11 (* 2 idx$2018)) idx$1222) (⊢ (= 12 (* 2 idx$2018)) idx$1224) (⊢ (= 13 (* 2 idx$2018)) idx$1226) (⊢ (= 14 (* 2 idx$2018)) idx$1228) (⊢ (= 15 (* 2 idx$2018)) idx$1230) (⊢ (= 16 (* 2 idx$2018)) idx$1232) (⊢ (= 17 (* 2 idx$2018)) idx$1234) (⊢ (= 18 (* 2 idx$2018)) idx$1236) (⊢ (= 19 (* 2 idx$2018)) idx$1238) (⊢ (= 20 (* 2 idx$2018)) idx$1240) (⊢ (= 21 (* 2 idx$2018)) idx$1242) (⊢ (= 22 (* 2 idx$2018)) idx$1244) (⊢ (= 23 (* 2 idx$2018)) idx$1246) (⊢ (= 24 (* 2 idx$2018)) idx$1248) (⊢ (= 25 (* 2 idx$2018)) idx$1250) (⊢ (= 26 (* 2 idx$2018)) idx$1252) (⊢ (= 27 (* 2 idx$2018)) idx$1254) (⊢ (= 28 (* 2 idx$2018)) idx$1256) (⊢ (= 29 (* 2 idx$2018)) idx$1258) (⊢ (= 30 (* 2 idx$2018)) idx$1260) (⊢ (= 31 (* 2 idx$2018)) idx$1262) (⊢ (= 32 (* 2 idx$2018)) idx$1264) (⊢ (= 33 (* 2 idx$2018)) idx$1266) (⊢ (= 34 (* 2 idx$2018)) idx$1268) (⊢ (= 35 (* 2 idx$2018)) idx$1270) (⊢ (= 36 (* 2 idx$2018)) idx$1272) (⊢ (= 37 (* 2 idx$2018)) idx$1274) (⊢ (= 38 (* 2 idx$2018)) idx$1276) (⊢ (= 39 (* 2 idx$2018)) idx$1278) (⊢ (= 40 (* 2 idx$2018)) idx$1280) (⊢ (= 41 (* 2 idx$2018)) idx$1282) (⊢ (= 42 (* 2 idx$2018)) idx$1284) (⊢ (= 43 (* 2 idx$2018)) idx$1286) (⊢ (= 44 (* 2 idx$2018)) idx$1288) (⊢ (= 45 (* 2 idx$2018)) idx$1290) (⊢ (= 46 (* 2 idx$2018)) idx$1292) (⊢ (= 47 (* 2 idx$2018)) idx$1294) (⊢ (= 48 (* 2 idx$2018)) idx$1296) (⊢ (= 49 (* 2 idx$2018)) idx$1298) (⊢ (= 50 (* 2 idx$2018)) idx$1300) (⊢ (= 51 (* 2 idx$2018)) idx$1302) (⊢ (= 52 (* 2 idx$2018)) idx$1304) (⊢ (= 53 (* 2 idx$2018)) idx$1306) (⊢ (= 54 (* 2 idx$2018)) idx$1308) (⊢ (= 55 (* 2 idx$2018)) idx$1310) (⊢ (= 56 (* 2 idx$2018)) idx$1312) (⊢ (= 57 (* 2 idx$2018)) idx$1314) (⊢ (= 58 (* 2 idx$2018)) idx$1316) (⊢ (= 59 (* 2 idx$2018)) idx$1318) (⊢ (= 60 (* 2 idx$2018)) idx$1320) (⊢ (= 61 (* 2 idx$2018)) idx$1322) (⊢ (= 62 (* 2 idx$2018)) idx$1324) (⊢ (= 63 (* 2 idx$2018)) idx$1326) (⊢ (|| (= 0 (* 2 idx$2018)) (= 1 (* 2 idx$2018))) 0))))) (&& c$575 (= 22 (* 2 (ite* (⊢ (= 2 (* 2 idx$2018)) idx$1204) (⊢ (= 3 (* 2 idx$2018)) idx$1206) (⊢ (= 4 (* 2 idx$2018)) idx$1208) (⊢ (= 5 (* 2 idx$2018)) idx$1210) (⊢ (= 6 (* 2 idx$2018)) idx$1212) (⊢ (= 7 (* 2 idx$2018)) idx$1214) (⊢ (= 8 (* 2 idx$2018)) idx$1216) (⊢ (= 9 (* 2 idx$2018)) idx$1218) (⊢ (= 10 (* 2 idx$2018)) idx$1220) (⊢ (= 11 (* 2 idx$2018)) idx$1222) (⊢ (= 12 (* 2 idx$2018)) idx$1224) (⊢ (= 13 (* 2 idx$2018)) idx$1226) (⊢ (= 14 (* 2 idx$2018)) idx$1228) (⊢ (= 15 (* 2 idx$2018)) idx$1230) (⊢ (= 16 (* 2 idx$2018)) idx$1232) (⊢ (= 17 (* 2 idx$2018)) idx$1234) (⊢ (= 18 (* 2 idx$2018)) idx$1236) (⊢ (= 19 (* 2 idx$2018)) idx$1238) (⊢ (= 20 (* 2 idx$2018)) idx$1240) (⊢ (= 21 (* 2 idx$2018)) idx$1242) (⊢ (= 22 (* 2 idx$2018)) idx$1244) (⊢ (= 23 (* 2 idx$2018)) idx$1246) (⊢ (= 24 (* 2 idx$2018)) idx$1248) (⊢ (= 25 (* 2 idx$2018)) idx$1250) (⊢ (= 26 (* 2 idx$2018)) idx$1252) (⊢ (= 27 (* 2 idx$2018)) idx$1254) (⊢ (= 28 (* 2 idx$2018)) idx$1256) (⊢ (= 29 (* 2 idx$2018)) idx$1258) (⊢ (= 30 (* 2 idx$2018)) idx$1260) (⊢ (= 31 (* 2 idx$2018)) idx$1262) (⊢ (= 32 (* 2 idx$2018)) idx$1264) (⊢ (= 33 (* 2 idx$2018)) idx$1266) (⊢ (= 34 (* 2 idx$2018)) idx$1268) (⊢ (= 35 (* 2 idx$2018)) idx$1270) (⊢ (= 36 (* 2 idx$2018)) idx$1272) (⊢ (= 37 (* 2 idx$2018)) idx$1274) (⊢ (= 38 (* 2 idx$2018)) idx$1276) (⊢ (= 39 (* 2 idx$2018)) idx$1278) (⊢ (= 40 (* 2 idx$2018)) idx$1280) (⊢ (= 41 (* 2 idx$2018)) idx$1282) (⊢ (= 42 (* 2 idx$2018)) idx$1284) (⊢ (= 43 (* 2 idx$2018)) idx$1286) (⊢ (= 44 (* 2 idx$2018)) idx$1288) (⊢ (= 45 (* 2 idx$2018)) idx$1290) (⊢ (= 46 (* 2 idx$2018)) idx$1292) (⊢ (= 47 (* 2 idx$2018)) idx$1294) (⊢ (= 48 (* 2 idx$2018)) idx$1296) (⊢ (= 49 (* 2 idx$2018)) idx$1298) (⊢ (= 50 (* 2 idx$2018)) idx$1300) (⊢ (= 51 (* 2 idx$2018)) idx$1302) (⊢ (= 52 (* 2 idx$2018)) idx$1304) (⊢ (= 53 (* 2 idx$2018)) idx$1306) (⊢ (= 54 (* 2 idx$2018)) idx$1308) (⊢ (= 55 (* 2 idx$2018)) idx$1310) (⊢ (= 56 (* 2 idx$2018)) idx$1312) (⊢ (= 57 (* 2 idx$2018)) idx$1314) (⊢ (= 58 (* 2 idx$2018)) idx$1316) (⊢ (= 59 (* 2 idx$2018)) idx$1318) (⊢ (= 60 (* 2 idx$2018)) idx$1320) (⊢ (= 61 (* 2 idx$2018)) idx$1322) (⊢ (= 62 (* 2 idx$2018)) idx$1324) (⊢ (= 63 (* 2 idx$2018)) idx$1326) (⊢ (|| (= 0 (* 2 idx$2018)) (= 1 (* 2 idx$2018))) 0))))) (&& c$577 (= 23 (* 2 (ite* (⊢ (= 2 (* 2 idx$2018)) idx$1204) (⊢ (= 3 (* 2 idx$2018)) idx$1206) (⊢ (= 4 (* 2 idx$2018)) idx$1208) (⊢ (= 5 (* 2 idx$2018)) idx$1210) (⊢ (= 6 (* 2 idx$2018)) idx$1212) (⊢ (= 7 (* 2 idx$2018)) idx$1214) (⊢ (= 8 (* 2 idx$2018)) idx$1216) (⊢ (= 9 (* 2 idx$2018)) idx$1218) (⊢ (= 10 (* 2 idx$2018)) idx$1220) (⊢ (= 11 (* 2 idx$2018)) idx$1222) (⊢ (= 12 (* 2 idx$2018)) idx$1224) (⊢ (= 13 (* 2 idx$2018)) idx$1226) (⊢ (= 14 (* 2 idx$2018)) idx$1228) (⊢ (= 15 (* 2 idx$2018)) idx$1230) (⊢ (= 16 (* 2 idx$2018)) idx$1232) (⊢ (= 17 (* 2 idx$2018)) idx$1234) (⊢ (= 18 (* 2 idx$2018)) idx$1236) (⊢ (= 19 (* 2 idx$2018)) idx$1238) (⊢ (= 20 (* 2 idx$2018)) idx$1240) (⊢ (= 21 (* 2 idx$2018)) idx$1242) (⊢ (= 22 (* 2 idx$2018)) idx$1244) (⊢ (= 23 (* 2 idx$2018)) idx$1246) (⊢ (= 24 (* 2 idx$2018)) idx$1248) (⊢ (= 25 (* 2 idx$2018)) idx$1250) (⊢ (= 26 (* 2 idx$2018)) idx$1252) (⊢ (= 27 (* 2 idx$2018)) idx$1254) (⊢ (= 28 (* 2 idx$2018)) idx$1256) (⊢ (= 29 (* 2 idx$2018)) idx$1258) (⊢ (= 30 (* 2 idx$2018)) idx$1260) (⊢ (= 31 (* 2 idx$2018)) idx$1262) (⊢ (= 32 (* 2 idx$2018)) idx$1264) (⊢ (= 33 (* 2 idx$2018)) idx$1266) (⊢ (= 34 (* 2 idx$2018)) idx$1268) (⊢ (= 35 (* 2 idx$2018)) idx$1270) (⊢ (= 36 (* 2 idx$2018)) idx$1272) (⊢ (= 37 (* 2 idx$2018)) idx$1274) (⊢ (= 38 (* 2 idx$2018)) idx$1276) (⊢ (= 39 (* 2 idx$2018)) idx$1278) (⊢ (= 40 (* 2 idx$2018)) idx$1280) (⊢ (= 41 (* 2 idx$2018)) idx$1282) (⊢ (= 42 (* 2 idx$2018)) idx$1284) (⊢ (= 43 (* 2 idx$2018)) idx$1286) (⊢ (= 44 (* 2 idx$2018)) idx$1288) (⊢ (= 45 (* 2 idx$2018)) idx$1290) (⊢ (= 46 (* 2 idx$2018)) idx$1292) (⊢ (= 47 (* 2 idx$2018)) idx$1294) (⊢ (= 48 (* 2 idx$2018)) idx$1296) (⊢ (= 49 (* 2 idx$2018)) idx$1298) (⊢ (= 50 (* 2 idx$2018)) idx$1300) (⊢ (= 51 (* 2 idx$2018)) idx$1302) (⊢ (= 52 (* 2 idx$2018)) idx$1304) (⊢ (= 53 (* 2 idx$2018)) idx$1306) (⊢ (= 54 (* 2 idx$2018)) idx$1308) (⊢ (= 55 (* 2 idx$2018)) idx$1310) (⊢ (= 56 (* 2 idx$2018)) idx$1312) (⊢ (= 57 (* 2 idx$2018)) idx$1314) (⊢ (= 58 (* 2 idx$2018)) idx$1316) (⊢ (= 59 (* 2 idx$2018)) idx$1318) (⊢ (= 60 (* 2 idx$2018)) idx$1320) (⊢ (= 61 (* 2 idx$2018)) idx$1322) (⊢ (= 62 (* 2 idx$2018)) idx$1324) (⊢ (= 63 (* 2 idx$2018)) idx$1326) (⊢ (|| (= 0 (* 2 idx$2018)) (= 1 (* 2 idx$2018))) 0))))) (&& c$579 (= 24 (* 2 (ite* (⊢ (= 2 (* 2 idx$2018)) idx$1204) (⊢ (= 3 (* 2 idx$2018)) idx$1206) (⊢ (= 4 (* 2 idx$2018)) idx$1208) (⊢ (= 5 (* 2 idx$2018)) idx$1210) (⊢ (= 6 (* 2 idx$2018)) idx$1212) (⊢ (= 7 (* 2 idx$2018)) idx$1214) (⊢ (= 8 (* 2 idx$2018)) idx$1216) (⊢ (= 9 (* 2 idx$2018)) idx$1218) (⊢ (= 10 (* 2 idx$2018)) idx$1220) (⊢ (= 11 (* 2 idx$2018)) idx$1222) (⊢ (= 12 (* 2 idx$2018)) idx$1224) (⊢ (= 13 (* 2 idx$2018)) idx$1226) (⊢ (= 14 (* 2 idx$2018)) idx$1228) (⊢ (= 15 (* 2 idx$2018)) idx$1230) (⊢ (= 16 (* 2 idx$2018)) idx$1232) (⊢ (= 17 (* 2 idx$2018)) idx$1234) (⊢ (= 18 (* 2 idx$2018)) idx$1236) (⊢ (= 19 (* 2 idx$2018)) idx$1238) (⊢ (= 20 (* 2 idx$2018)) idx$1240) (⊢ (= 21 (* 2 idx$2018)) idx$1242) (⊢ (= 22 (* 2 idx$2018)) idx$1244) (⊢ (= 23 (* 2 idx$2018)) idx$1246) (⊢ (= 24 (* 2 idx$2018)) idx$1248) (⊢ (= 25 (* 2 idx$2018)) idx$1250) (⊢ (= 26 (* 2 idx$2018)) idx$1252) (⊢ (= 27 (* 2 idx$2018)) idx$1254) (⊢ (= 28 (* 2 idx$2018)) idx$1256) (⊢ (= 29 (* 2 idx$2018)) idx$1258) (⊢ (= 30 (* 2 idx$2018)) idx$1260) (⊢ (= 31 (* 2 idx$2018)) idx$1262) (⊢ (= 32 (* 2 idx$2018)) idx$1264) (⊢ (= 33 (* 2 idx$2018)) idx$1266) (⊢ (= 34 (* 2 idx$2018)) idx$1268) (⊢ (= 35 (* 2 idx$2018)) idx$1270) (⊢ (= 36 (* 2 idx$2018)) idx$1272) (⊢ (= 37 (* 2 idx$2018)) idx$1274) (⊢ (= 38 (* 2 idx$2018)) idx$1276) (⊢ (= 39 (* 2 idx$2018)) idx$1278) (⊢ (= 40 (* 2 idx$2018)) idx$1280) (⊢ (= 41 (* 2 idx$2018)) idx$1282) (⊢ (= 42 (* 2 idx$2018)) idx$1284) (⊢ (= 43 (* 2 idx$2018)) idx$1286) (⊢ (= 44 (* 2 idx$2018)) idx$1288) (⊢ (= 45 (* 2 idx$2018)) idx$1290) (⊢ (= 46 (* 2 idx$2018)) idx$1292) (⊢ (= 47 (* 2 idx$2018)) idx$1294) (⊢ (= 48 (* 2 idx$2018)) idx$1296) (⊢ (= 49 (* 2 idx$2018)) idx$1298) (⊢ (= 50 (* 2 idx$2018)) idx$1300) (⊢ (= 51 (* 2 idx$2018)) idx$1302) (⊢ (= 52 (* 2 idx$2018)) idx$1304) (⊢ (= 53 (* 2 idx$2018)) idx$1306) (⊢ (= 54 (* 2 idx$2018)) idx$1308) (⊢ (= 55 (* 2 idx$2018)) idx$1310) (⊢ (= 56 (* 2 idx$2018)) idx$1312) (⊢ (= 57 (* 2 idx$2018)) idx$1314) (⊢ (= 58 (* 2 idx$2018)) idx$1316) (⊢ (= 59 (* 2 idx$2018)) idx$1318) (⊢ (= 60 (* 2 idx$2018)) idx$1320) (⊢ (= 61 (* 2 idx$2018)) idx$1322) (⊢ (= 62 (* 2 idx$2018)) idx$1324) (⊢ (= 63 (* 2 idx$2018)) idx$1326) (⊢ (|| (= 0 (* 2 idx$2018)) (= 1 (* 2 idx$2018))) 0))))) (&& c$581 (= 25 (* 2 (ite* (⊢ (= 2 (* 2 idx$2018)) idx$1204) (⊢ (= 3 (* 2 idx$2018)) idx$1206) (⊢ (= 4 (* 2 idx$2018)) idx$1208) (⊢ (= 5 (* 2 idx$2018)) idx$1210) (⊢ (= 6 (* 2 idx$2018)) idx$1212) (⊢ (= 7 (* 2 idx$2018)) idx$1214) (⊢ (= 8 (* 2 idx$2018)) idx$1216) (⊢ (= 9 (* 2 idx$2018)) idx$1218) (⊢ (= 10 (* 2 idx$2018)) idx$1220) (⊢ (= 11 (* 2 idx$2018)) idx$1222) (⊢ (= 12 (* 2 idx$2018)) idx$1224) (⊢ (= 13 (* 2 idx$2018)) idx$1226) (⊢ (= 14 (* 2 idx$2018)) idx$1228) (⊢ (= 15 (* 2 idx$2018)) idx$1230) (⊢ (= 16 (* 2 idx$2018)) idx$1232) (⊢ (= 17 (* 2 idx$2018)) idx$1234) (⊢ (= 18 (* 2 idx$2018)) idx$1236) (⊢ (= 19 (* 2 idx$2018)) idx$1238) (⊢ (= 20 (* 2 idx$2018)) idx$1240) (⊢ (= 21 (* 2 idx$2018)) idx$1242) (⊢ (= 22 (* 2 idx$2018)) idx$1244) (⊢ (= 23 (* 2 idx$2018)) idx$1246) (⊢ (= 24 (* 2 idx$2018)) idx$1248) (⊢ (= 25 (* 2 idx$2018)) idx$1250) (⊢ (= 26 (* 2 idx$2018)) idx$1252) (⊢ (= 27 (* 2 idx$2018)) idx$1254) (⊢ (= 28 (* 2 idx$2018)) idx$1256) (⊢ (= 29 (* 2 idx$2018)) idx$1258) (⊢ (= 30 (* 2 idx$2018)) idx$1260) (⊢ (= 31 (* 2 idx$2018)) idx$1262) (⊢ (= 32 (* 2 idx$2018)) idx$1264) (⊢ (= 33 (* 2 idx$2018)) idx$1266) (⊢ (= 34 (* 2 idx$2018)) idx$1268) (⊢ (= 35 (* 2 idx$2018)) idx$1270) (⊢ (= 36 (* 2 idx$2018)) idx$1272) (⊢ (= 37 (* 2 idx$2018)) idx$1274) (⊢ (= 38 (* 2 idx$2018)) idx$1276) (⊢ (= 39 (* 2 idx$2018)) idx$1278) (⊢ (= 40 (* 2 idx$2018)) idx$1280) (⊢ (= 41 (* 2 idx$2018)) idx$1282) (⊢ (= 42 (* 2 idx$2018)) idx$1284) (⊢ (= 43 (* 2 idx$2018)) idx$1286) (⊢ (= 44 (* 2 idx$2018)) idx$1288) (⊢ (= 45 (* 2 idx$2018)) idx$1290) (⊢ (= 46 (* 2 idx$2018)) idx$1292) (⊢ (= 47 (* 2 idx$2018)) idx$1294) (⊢ (= 48 (* 2 idx$2018)) idx$1296) (⊢ (= 49 (* 2 idx$2018)) idx$1298) (⊢ (= 50 (* 2 idx$2018)) idx$1300) (⊢ (= 51 (* 2 idx$2018)) idx$1302) (⊢ (= 52 (* 2 idx$2018)) idx$1304) (⊢ (= 53 (* 2 idx$2018)) idx$1306) (⊢ (= 54 (* 2 idx$2018)) idx$1308) (⊢ (= 55 (* 2 idx$2018)) idx$1310) (⊢ (= 56 (* 2 idx$2018)) idx$1312) (⊢ (= 57 (* 2 idx$2018)) idx$1314) (⊢ (= 58 (* 2 idx$2018)) idx$1316) (⊢ (= 59 (* 2 idx$2018)) idx$1318) (⊢ (= 60 (* 2 idx$2018)) idx$1320) (⊢ (= 61 (* 2 idx$2018)) idx$1322) (⊢ (= 62 (* 2 idx$2018)) idx$1324) (⊢ (= 63 (* 2 idx$2018)) idx$1326) (⊢ (|| (= 0 (* 2 idx$2018)) (= 1 (* 2 idx$2018))) 0))))) (&& c$583 (= 26 (* 2 (ite* (⊢ (= 2 (* 2 idx$2018)) idx$1204) (⊢ (= 3 (* 2 idx$2018)) idx$1206) (⊢ (= 4 (* 2 idx$2018)) idx$1208) (⊢ (= 5 (* 2 idx$2018)) idx$1210) (⊢ (= 6 (* 2 idx$2018)) idx$1212) (⊢ (= 7 (* 2 idx$2018)) idx$1214) (⊢ (= 8 (* 2 idx$2018)) idx$1216) (⊢ (= 9 (* 2 idx$2018)) idx$1218) (⊢ (= 10 (* 2 idx$2018)) idx$1220) (⊢ (= 11 (* 2 idx$2018)) idx$1222) (⊢ (= 12 (* 2 idx$2018)) idx$1224) (⊢ (= 13 (* 2 idx$2018)) idx$1226) (⊢ (= 14 (* 2 idx$2018)) idx$1228) (⊢ (= 15 (* 2 idx$2018)) idx$1230) (⊢ (= 16 (* 2 idx$2018)) idx$1232) (⊢ (= 17 (* 2 idx$2018)) idx$1234) (⊢ (= 18 (* 2 idx$2018)) idx$1236) (⊢ (= 19 (* 2 idx$2018)) idx$1238) (⊢ (= 20 (* 2 idx$2018)) idx$1240) (⊢ (= 21 (* 2 idx$2018)) idx$1242) (⊢ (= 22 (* 2 idx$2018)) idx$1244) (⊢ (= 23 (* 2 idx$2018)) idx$1246) (⊢ (= 24 (* 2 idx$2018)) idx$1248) (⊢ (= 25 (* 2 idx$2018)) idx$1250) (⊢ (= 26 (* 2 idx$2018)) idx$1252) (⊢ (= 27 (* 2 idx$2018)) idx$1254) (⊢ (= 28 (* 2 idx$2018)) idx$1256) (⊢ (= 29 (* 2 idx$2018)) idx$1258) (⊢ (= 30 (* 2 idx$2018)) idx$1260) (⊢ (= 31 (* 2 idx$2018)) idx$1262) (⊢ (= 32 (* 2 idx$2018)) idx$1264) (⊢ (= 33 (* 2 idx$2018)) idx$1266) (⊢ (= 34 (* 2 idx$2018)) idx$1268) (⊢ (= 35 (* 2 idx$2018)) idx$1270) (⊢ (= 36 (* 2 idx$2018)) idx$1272) (⊢ (= 37 (* 2 idx$2018)) idx$1274) (⊢ (= 38 (* 2 idx$2018)) idx$1276) (⊢ (= 39 (* 2 idx$2018)) idx$1278) (⊢ (= 40 (* 2 idx$2018)) idx$1280) (⊢ (= 41 (* 2 idx$2018)) idx$1282) (⊢ (= 42 (* 2 idx$2018)) idx$1284) (⊢ (= 43 (* 2 idx$2018)) idx$1286) (⊢ (= 44 (* 2 idx$2018)) idx$1288) (⊢ (= 45 (* 2 idx$2018)) idx$1290) (⊢ (= 46 (* 2 idx$2018)) idx$1292) (⊢ (= 47 (* 2 idx$2018)) idx$1294) (⊢ (= 48 (* 2 idx$2018)) idx$1296) (⊢ (= 49 (* 2 idx$2018)) idx$1298) (⊢ (= 50 (* 2 idx$2018)) idx$1300) (⊢ (= 51 (* 2 idx$2018)) idx$1302) (⊢ (= 52 (* 2 idx$2018)) idx$1304) (⊢ (= 53 (* 2 idx$2018)) idx$1306) (⊢ (= 54 (* 2 idx$2018)) idx$1308) (⊢ (= 55 (* 2 idx$2018)) idx$1310) (⊢ (= 56 (* 2 idx$2018)) idx$1312) (⊢ (= 57 (* 2 idx$2018)) idx$1314) (⊢ (= 58 (* 2 idx$2018)) idx$1316) (⊢ (= 59 (* 2 idx$2018)) idx$1318) (⊢ (= 60 (* 2 idx$2018)) idx$1320) (⊢ (= 61 (* 2 idx$2018)) idx$1322) (⊢ (= 62 (* 2 idx$2018)) idx$1324) (⊢ (= 63 (* 2 idx$2018)) idx$1326) (⊢ (|| (= 0 (* 2 idx$2018)) (= 1 (* 2 idx$2018))) 0))))) (&& c$585 (= 27 (* 2 (ite* (⊢ (= 2 (* 2 idx$2018)) idx$1204) (⊢ (= 3 (* 2 idx$2018)) idx$1206) (⊢ (= 4 (* 2 idx$2018)) idx$1208) (⊢ (= 5 (* 2 idx$2018)) idx$1210) (⊢ (= 6 (* 2 idx$2018)) idx$1212) (⊢ (= 7 (* 2 idx$2018)) idx$1214) (⊢ (= 8 (* 2 idx$2018)) idx$1216) (⊢ (= 9 (* 2 idx$2018)) idx$1218) (⊢ (= 10 (* 2 idx$2018)) idx$1220) (⊢ (= 11 (* 2 idx$2018)) idx$1222) (⊢ (= 12 (* 2 idx$2018)) idx$1224) (⊢ (= 13 (* 2 idx$2018)) idx$1226) (⊢ (= 14 (* 2 idx$2018)) idx$1228) (⊢ (= 15 (* 2 idx$2018)) idx$1230) (⊢ (= 16 (* 2 idx$2018)) idx$1232) (⊢ (= 17 (* 2 idx$2018)) idx$1234) (⊢ (= 18 (* 2 idx$2018)) idx$1236) (⊢ (= 19 (* 2 idx$2018)) idx$1238) (⊢ (= 20 (* 2 idx$2018)) idx$1240) (⊢ (= 21 (* 2 idx$2018)) idx$1242) (⊢ (= 22 (* 2 idx$2018)) idx$1244) (⊢ (= 23 (* 2 idx$2018)) idx$1246) (⊢ (= 24 (* 2 idx$2018)) idx$1248) (⊢ (= 25 (* 2 idx$2018)) idx$1250) (⊢ (= 26 (* 2 idx$2018)) idx$1252) (⊢ (= 27 (* 2 idx$2018)) idx$1254) (⊢ (= 28 (* 2 idx$2018)) idx$1256) (⊢ (= 29 (* 2 idx$2018)) idx$1258) (⊢ (= 30 (* 2 idx$2018)) idx$1260) (⊢ (= 31 (* 2 idx$2018)) idx$1262) (⊢ (= 32 (* 2 idx$2018)) idx$1264) (⊢ (= 33 (* 2 idx$2018)) idx$1266) (⊢ (= 34 (* 2 idx$2018)) idx$1268) (⊢ (= 35 (* 2 idx$2018)) idx$1270) (⊢ (= 36 (* 2 idx$2018)) idx$1272) (⊢ (= 37 (* 2 idx$2018)) idx$1274) (⊢ (= 38 (* 2 idx$2018)) idx$1276) (⊢ (= 39 (* 2 idx$2018)) idx$1278) (⊢ (= 40 (* 2 idx$2018)) idx$1280) (⊢ (= 41 (* 2 idx$2018)) idx$1282) (⊢ (= 42 (* 2 idx$2018)) idx$1284) (⊢ (= 43 (* 2 idx$2018)) idx$1286) (⊢ (= 44 (* 2 idx$2018)) idx$1288) (⊢ (= 45 (* 2 idx$2018)) idx$1290) (⊢ (= 46 (* 2 idx$2018)) idx$1292) (⊢ (= 47 (* 2 idx$2018)) idx$1294) (⊢ (= 48 (* 2 idx$2018)) idx$1296) (⊢ (= 49 (* 2 idx$2018)) idx$1298) (⊢ (= 50 (* 2 idx$2018)) idx$1300) (⊢ (= 51 (* 2 idx$2018)) idx$1302) (⊢ (= 52 (* 2 idx$2018)) idx$1304) (⊢ (= 53 (* 2 idx$2018)) idx$1306) (⊢ (= 54 (* 2 idx$2018)) idx$1308) (⊢ (= 55 (* 2 idx$2018)) idx$1310) (⊢ (= 56 (* 2 idx$2018)) idx$1312) (⊢ (= 57 (* 2 idx$2018)) idx$1314) (⊢ (= 58 (* 2 idx$2018)) idx$1316) (⊢ (= 59 (* 2 idx$2018)) idx$1318) (⊢ (= 60 (* 2 idx$2018)) idx$1320) (⊢ (= 61 (* 2 idx$2018)) idx$1322) (⊢ (= 62 (* 2 idx$2018)) idx$1324) (⊢ (= 63 (* 2 idx$2018)) idx$1326) (⊢ (|| (= 0 (* 2 idx$2018)) (= 1 (* 2 idx$2018))) 0))))) (&& c$587 (= 28 (* 2 (ite* (⊢ (= 2 (* 2 idx$2018)) idx$1204) (⊢ (= 3 (* 2 idx$2018)) idx$1206) (⊢ (= 4 (* 2 idx$2018)) idx$1208) (⊢ (= 5 (* 2 idx$2018)) idx$1210) (⊢ (= 6 (* 2 idx$2018)) idx$1212) (⊢ (= 7 (* 2 idx$2018)) idx$1214) (⊢ (= 8 (* 2 idx$2018)) idx$1216) (⊢ (= 9 (* 2 idx$2018)) idx$1218) (⊢ (= 10 (* 2 idx$2018)) idx$1220) (⊢ (= 11 (* 2 idx$2018)) idx$1222) (⊢ (= 12 (* 2 idx$2018)) idx$1224) (⊢ (= 13 (* 2 idx$2018)) idx$1226) (⊢ (= 14 (* 2 idx$2018)) idx$1228) (⊢ (= 15 (* 2 idx$2018)) idx$1230) (⊢ (= 16 (* 2 idx$2018)) idx$1232) (⊢ (= 17 (* 2 idx$2018)) idx$1234) (⊢ (= 18 (* 2 idx$2018)) idx$1236) (⊢ (= 19 (* 2 idx$2018)) idx$1238) (⊢ (= 20 (* 2 idx$2018)) idx$1240) (⊢ (= 21 (* 2 idx$2018)) idx$1242) (⊢ (= 22 (* 2 idx$2018)) idx$1244) (⊢ (= 23 (* 2 idx$2018)) idx$1246) (⊢ (= 24 (* 2 idx$2018)) idx$1248) (⊢ (= 25 (* 2 idx$2018)) idx$1250) (⊢ (= 26 (* 2 idx$2018)) idx$1252) (⊢ (= 27 (* 2 idx$2018)) idx$1254) (⊢ (= 28 (* 2 idx$2018)) idx$1256) (⊢ (= 29 (* 2 idx$2018)) idx$1258) (⊢ (= 30 (* 2 idx$2018)) idx$1260) (⊢ (= 31 (* 2 idx$2018)) idx$1262) (⊢ (= 32 (* 2 idx$2018)) idx$1264) (⊢ (= 33 (* 2 idx$2018)) idx$1266) (⊢ (= 34 (* 2 idx$2018)) idx$1268) (⊢ (= 35 (* 2 idx$2018)) idx$1270) (⊢ (= 36 (* 2 idx$2018)) idx$1272) (⊢ (= 37 (* 2 idx$2018)) idx$1274) (⊢ (= 38 (* 2 idx$2018)) idx$1276) (⊢ (= 39 (* 2 idx$2018)) idx$1278) (⊢ (= 40 (* 2 idx$2018)) idx$1280) (⊢ (= 41 (* 2 idx$2018)) idx$1282) (⊢ (= 42 (* 2 idx$2018)) idx$1284) (⊢ (= 43 (* 2 idx$2018)) idx$1286) (⊢ (= 44 (* 2 idx$2018)) idx$1288) (⊢ (= 45 (* 2 idx$2018)) idx$1290) (⊢ (= 46 (* 2 idx$2018)) idx$1292) (⊢ (= 47 (* 2 idx$2018)) idx$1294) (⊢ (= 48 (* 2 idx$2018)) idx$1296) (⊢ (= 49 (* 2 idx$2018)) idx$1298) (⊢ (= 50 (* 2 idx$2018)) idx$1300) (⊢ (= 51 (* 2 idx$2018)) idx$1302) (⊢ (= 52 (* 2 idx$2018)) idx$1304) (⊢ (= 53 (* 2 idx$2018)) idx$1306) (⊢ (= 54 (* 2 idx$2018)) idx$1308) (⊢ (= 55 (* 2 idx$2018)) idx$1310) (⊢ (= 56 (* 2 idx$2018)) idx$1312) (⊢ (= 57 (* 2 idx$2018)) idx$1314) (⊢ (= 58 (* 2 idx$2018)) idx$1316) (⊢ (= 59 (* 2 idx$2018)) idx$1318) (⊢ (= 60 (* 2 idx$2018)) idx$1320) (⊢ (= 61 (* 2 idx$2018)) idx$1322) (⊢ (= 62 (* 2 idx$2018)) idx$1324) (⊢ (= 63 (* 2 idx$2018)) idx$1326) (⊢ (|| (= 0 (* 2 idx$2018)) (= 1 (* 2 idx$2018))) 0))))) (&& c$589 (= 29 (* 2 (ite* (⊢ (= 2 (* 2 idx$2018)) idx$1204) (⊢ (= 3 (* 2 idx$2018)) idx$1206) (⊢ (= 4 (* 2 idx$2018)) idx$1208) (⊢ (= 5 (* 2 idx$2018)) idx$1210) (⊢ (= 6 (* 2 idx$2018)) idx$1212) (⊢ (= 7 (* 2 idx$2018)) idx$1214) (⊢ (= 8 (* 2 idx$2018)) idx$1216) (⊢ (= 9 (* 2 idx$2018)) idx$1218) (⊢ (= 10 (* 2 idx$2018)) idx$1220) (⊢ (= 11 (* 2 idx$2018)) idx$1222) (⊢ (= 12 (* 2 idx$2018)) idx$1224) (⊢ (= 13 (* 2 idx$2018)) idx$1226) (⊢ (= 14 (* 2 idx$2018)) idx$1228) (⊢ (= 15 (* 2 idx$2018)) idx$1230) (⊢ (= 16 (* 2 idx$2018)) idx$1232) (⊢ (= 17 (* 2 idx$2018)) idx$1234) (⊢ (= 18 (* 2 idx$2018)) idx$1236) (⊢ (= 19 (* 2 idx$2018)) idx$1238) (⊢ (= 20 (* 2 idx$2018)) idx$1240) (⊢ (= 21 (* 2 idx$2018)) idx$1242) (⊢ (= 22 (* 2 idx$2018)) idx$1244) (⊢ (= 23 (* 2 idx$2018)) idx$1246) (⊢ (= 24 (* 2 idx$2018)) idx$1248) (⊢ (= 25 (* 2 idx$2018)) idx$1250) (⊢ (= 26 (* 2 idx$2018)) idx$1252) (⊢ (= 27 (* 2 idx$2018)) idx$1254) (⊢ (= 28 (* 2 idx$2018)) idx$1256) (⊢ (= 29 (* 2 idx$2018)) idx$1258) (⊢ (= 30 (* 2 idx$2018)) idx$1260) (⊢ (= 31 (* 2 idx$2018)) idx$1262) (⊢ (= 32 (* 2 idx$2018)) idx$1264) (⊢ (= 33 (* 2 idx$2018)) idx$1266) (⊢ (= 34 (* 2 idx$2018)) idx$1268) (⊢ (= 35 (* 2 idx$2018)) idx$1270) (⊢ (= 36 (* 2 idx$2018)) idx$1272) (⊢ (= 37 (* 2 idx$2018)) idx$1274) (⊢ (= 38 (* 2 idx$2018)) idx$1276) (⊢ (= 39 (* 2 idx$2018)) idx$1278) (⊢ (= 40 (* 2 idx$2018)) idx$1280) (⊢ (= 41 (* 2 idx$2018)) idx$1282) (⊢ (= 42 (* 2 idx$2018)) idx$1284) (⊢ (= 43 (* 2 idx$2018)) idx$1286) (⊢ (= 44 (* 2 idx$2018)) idx$1288) (⊢ (= 45 (* 2 idx$2018)) idx$1290) (⊢ (= 46 (* 2 idx$2018)) idx$1292) (⊢ (= 47 (* 2 idx$2018)) idx$1294) (⊢ (= 48 (* 2 idx$2018)) idx$1296) (⊢ (= 49 (* 2 idx$2018)) idx$1298) (⊢ (= 50 (* 2 idx$2018)) idx$1300) (⊢ (= 51 (* 2 idx$2018)) idx$1302) (⊢ (= 52 (* 2 idx$2018)) idx$1304) (⊢ (= 53 (* 2 idx$2018)) idx$1306) (⊢ (= 54 (* 2 idx$2018)) idx$1308) (⊢ (= 55 (* 2 idx$2018)) idx$1310) (⊢ (= 56 (* 2 idx$2018)) idx$1312) (⊢ (= 57 (* 2 idx$2018)) idx$1314) (⊢ (= 58 (* 2 idx$2018)) idx$1316) (⊢ (= 59 (* 2 idx$2018)) idx$1318) (⊢ (= 60 (* 2 idx$2018)) idx$1320) (⊢ (= 61 (* 2 idx$2018)) idx$1322) (⊢ (= 62 (* 2 idx$2018)) idx$1324) (⊢ (= 63 (* 2 idx$2018)) idx$1326) (⊢ (|| (= 0 (* 2 idx$2018)) (= 1 (* 2 idx$2018))) 0))))) (&& c$591 (= 30 (* 2 (ite* (⊢ (= 2 (* 2 idx$2018)) idx$1204) (⊢ (= 3 (* 2 idx$2018)) idx$1206) (⊢ (= 4 (* 2 idx$2018)) idx$1208) (⊢ (= 5 (* 2 idx$2018)) idx$1210) (⊢ (= 6 (* 2 idx$2018)) idx$1212) (⊢ (= 7 (* 2 idx$2018)) idx$1214) (⊢ (= 8 (* 2 idx$2018)) idx$1216) (⊢ (= 9 (* 2 idx$2018)) idx$1218) (⊢ (= 10 (* 2 idx$2018)) idx$1220) (⊢ (= 11 (* 2 idx$2018)) idx$1222) (⊢ (= 12 (* 2 idx$2018)) idx$1224) (⊢ (= 13 (* 2 idx$2018)) idx$1226) (⊢ (= 14 (* 2 idx$2018)) idx$1228) (⊢ (= 15 (* 2 idx$2018)) idx$1230) (⊢ (= 16 (* 2 idx$2018)) idx$1232) (⊢ (= 17 (* 2 idx$2018)) idx$1234) (⊢ (= 18 (* 2 idx$2018)) idx$1236) (⊢ (= 19 (* 2 idx$2018)) idx$1238) (⊢ (= 20 (* 2 idx$2018)) idx$1240) (⊢ (= 21 (* 2 idx$2018)) idx$1242) (⊢ (= 22 (* 2 idx$2018)) idx$1244) (⊢ (= 23 (* 2 idx$2018)) idx$1246) (⊢ (= 24 (* 2 idx$2018)) idx$1248) (⊢ (= 25 (* 2 idx$2018)) idx$1250) (⊢ (= 26 (* 2 idx$2018)) idx$1252) (⊢ (= 27 (* 2 idx$2018)) idx$1254) (⊢ (= 28 (* 2 idx$2018)) idx$1256) (⊢ (= 29 (* 2 idx$2018)) idx$1258) (⊢ (= 30 (* 2 idx$2018)) idx$1260) (⊢ (= 31 (* 2 idx$2018)) idx$1262) (⊢ (= 32 (* 2 idx$2018)) idx$1264) (⊢ (= 33 (* 2 idx$2018)) idx$1266) (⊢ (= 34 (* 2 idx$2018)) idx$1268) (⊢ (= 35 (* 2 idx$2018)) idx$1270) (⊢ (= 36 (* 2 idx$2018)) idx$1272) (⊢ (= 37 (* 2 idx$2018)) idx$1274) (⊢ (= 38 (* 2 idx$2018)) idx$1276) (⊢ (= 39 (* 2 idx$2018)) idx$1278) (⊢ (= 40 (* 2 idx$2018)) idx$1280) (⊢ (= 41 (* 2 idx$2018)) idx$1282) (⊢ (= 42 (* 2 idx$2018)) idx$1284) (⊢ (= 43 (* 2 idx$2018)) idx$1286) (⊢ (= 44 (* 2 idx$2018)) idx$1288) (⊢ (= 45 (* 2 idx$2018)) idx$1290) (⊢ (= 46 (* 2 idx$2018)) idx$1292) (⊢ (= 47 (* 2 idx$2018)) idx$1294) (⊢ (= 48 (* 2 idx$2018)) idx$1296) (⊢ (= 49 (* 2 idx$2018)) idx$1298) (⊢ (= 50 (* 2 idx$2018)) idx$1300) (⊢ (= 51 (* 2 idx$2018)) idx$1302) (⊢ (= 52 (* 2 idx$2018)) idx$1304) (⊢ (= 53 (* 2 idx$2018)) idx$1306) (⊢ (= 54 (* 2 idx$2018)) idx$1308) (⊢ (= 55 (* 2 idx$2018)) idx$1310) (⊢ (= 56 (* 2 idx$2018)) idx$1312) (⊢ (= 57 (* 2 idx$2018)) idx$1314) (⊢ (= 58 (* 2 idx$2018)) idx$1316) (⊢ (= 59 (* 2 idx$2018)) idx$1318) (⊢ (= 60 (* 2 idx$2018)) idx$1320) (⊢ (= 61 (* 2 idx$2018)) idx$1322) (⊢ (= 62 (* 2 idx$2018)) idx$1324) (⊢ (= 63 (* 2 idx$2018)) idx$1326) (⊢ (|| (= 0 (* 2 idx$2018)) (= 1 (* 2 idx$2018))) 0))))) (&& c$593 (= 31 (* 2 (ite* (⊢ (= 2 (* 2 idx$2018)) idx$1204) (⊢ (= 3 (* 2 idx$2018)) idx$1206) (⊢ (= 4 (* 2 idx$2018)) idx$1208) (⊢ (= 5 (* 2 idx$2018)) idx$1210) (⊢ (= 6 (* 2 idx$2018)) idx$1212) (⊢ (= 7 (* 2 idx$2018)) idx$1214) (⊢ (= 8 (* 2 idx$2018)) idx$1216) (⊢ (= 9 (* 2 idx$2018)) idx$1218) (⊢ (= 10 (* 2 idx$2018)) idx$1220) (⊢ (= 11 (* 2 idx$2018)) idx$1222) (⊢ (= 12 (* 2 idx$2018)) idx$1224) (⊢ (= 13 (* 2 idx$2018)) idx$1226) (⊢ (= 14 (* 2 idx$2018)) idx$1228) (⊢ (= 15 (* 2 idx$2018)) idx$1230) (⊢ (= 16 (* 2 idx$2018)) idx$1232) (⊢ (= 17 (* 2 idx$2018)) idx$1234) (⊢ (= 18 (* 2 idx$2018)) idx$1236) (⊢ (= 19 (* 2 idx$2018)) idx$1238) (⊢ (= 20 (* 2 idx$2018)) idx$1240) (⊢ (= 21 (* 2 idx$2018)) idx$1242) (⊢ (= 22 (* 2 idx$2018)) idx$1244) (⊢ (= 23 (* 2 idx$2018)) idx$1246) (⊢ (= 24 (* 2 idx$2018)) idx$1248) (⊢ (= 25 (* 2 idx$2018)) idx$1250) (⊢ (= 26 (* 2 idx$2018)) idx$1252) (⊢ (= 27 (* 2 idx$2018)) idx$1254) (⊢ (= 28 (* 2 idx$2018)) idx$1256) (⊢ (= 29 (* 2 idx$2018)) idx$1258) (⊢ (= 30 (* 2 idx$2018)) idx$1260) (⊢ (= 31 (* 2 idx$2018)) idx$1262) (⊢ (= 32 (* 2 idx$2018)) idx$1264) (⊢ (= 33 (* 2 idx$2018)) idx$1266) (⊢ (= 34 (* 2 idx$2018)) idx$1268) (⊢ (= 35 (* 2 idx$2018)) idx$1270) (⊢ (= 36 (* 2 idx$2018)) idx$1272) (⊢ (= 37 (* 2 idx$2018)) idx$1274) (⊢ (= 38 (* 2 idx$2018)) idx$1276) (⊢ (= 39 (* 2 idx$2018)) idx$1278) (⊢ (= 40 (* 2 idx$2018)) idx$1280) (⊢ (= 41 (* 2 idx$2018)) idx$1282) (⊢ (= 42 (* 2 idx$2018)) idx$1284) (⊢ (= 43 (* 2 idx$2018)) idx$1286) (⊢ (= 44 (* 2 idx$2018)) idx$1288) (⊢ (= 45 (* 2 idx$2018)) idx$1290) (⊢ (= 46 (* 2 idx$2018)) idx$1292) (⊢ (= 47 (* 2 idx$2018)) idx$1294) (⊢ (= 48 (* 2 idx$2018)) idx$1296) (⊢ (= 49 (* 2 idx$2018)) idx$1298) (⊢ (= 50 (* 2 idx$2018)) idx$1300) (⊢ (= 51 (* 2 idx$2018)) idx$1302) (⊢ (= 52 (* 2 idx$2018)) idx$1304) (⊢ (= 53 (* 2 idx$2018)) idx$1306) (⊢ (= 54 (* 2 idx$2018)) idx$1308) (⊢ (= 55 (* 2 idx$2018)) idx$1310) (⊢ (= 56 (* 2 idx$2018)) idx$1312) (⊢ (= 57 (* 2 idx$2018)) idx$1314) (⊢ (= 58 (* 2 idx$2018)) idx$1316) (⊢ (= 59 (* 2 idx$2018)) idx$1318) (⊢ (= 60 (* 2 idx$2018)) idx$1320) (⊢ (= 61 (* 2 idx$2018)) idx$1322) (⊢ (= 62 (* 2 idx$2018)) idx$1324) (⊢ (= 63 (* 2 idx$2018)) idx$1326) (⊢ (|| (= 0 (* 2 idx$2018)) (= 1 (* 2 idx$2018))) 0))))) (&& c$595 (= 32 (* 2 (ite* (⊢ (= 2 (* 2 idx$2018)) idx$1204) (⊢ (= 3 (* 2 idx$2018)) idx$1206) (⊢ (= 4 (* 2 idx$2018)) idx$1208) (⊢ (= 5 (* 2 idx$2018)) idx$1210) (⊢ (= 6 (* 2 idx$2018)) idx$1212) (⊢ (= 7 (* 2 idx$2018)) idx$1214) (⊢ (= 8 (* 2 idx$2018)) idx$1216) (⊢ (= 9 (* 2 idx$2018)) idx$1218) (⊢ (= 10 (* 2 idx$2018)) idx$1220) (⊢ (= 11 (* 2 idx$2018)) idx$1222) (⊢ (= 12 (* 2 idx$2018)) idx$1224) (⊢ (= 13 (* 2 idx$2018)) idx$1226) (⊢ (= 14 (* 2 idx$2018)) idx$1228) (⊢ (= 15 (* 2 idx$2018)) idx$1230) (⊢ (= 16 (* 2 idx$2018)) idx$1232) (⊢ (= 17 (* 2 idx$2018)) idx$1234) (⊢ (= 18 (* 2 idx$2018)) idx$1236) (⊢ (= 19 (* 2 idx$2018)) idx$1238) (⊢ (= 20 (* 2 idx$2018)) idx$1240) (⊢ (= 21 (* 2 idx$2018)) idx$1242) (⊢ (= 22 (* 2 idx$2018)) idx$1244) (⊢ (= 23 (* 2 idx$2018)) idx$1246) (⊢ (= 24 (* 2 idx$2018)) idx$1248) (⊢ (= 25 (* 2 idx$2018)) idx$1250) (⊢ (= 26 (* 2 idx$2018)) idx$1252) (⊢ (= 27 (* 2 idx$2018)) idx$1254) (⊢ (= 28 (* 2 idx$2018)) idx$1256) (⊢ (= 29 (* 2 idx$2018)) idx$1258) (⊢ (= 30 (* 2 idx$2018)) idx$1260) (⊢ (= 31 (* 2 idx$2018)) idx$1262) (⊢ (= 32 (* 2 idx$2018)) idx$1264) (⊢ (= 33 (* 2 idx$2018)) idx$1266) (⊢ (= 34 (* 2 idx$2018)) idx$1268) (⊢ (= 35 (* 2 idx$2018)) idx$1270) (⊢ (= 36 (* 2 idx$2018)) idx$1272) (⊢ (= 37 (* 2 idx$2018)) idx$1274) (⊢ (= 38 (* 2 idx$2018)) idx$1276) (⊢ (= 39 (* 2 idx$2018)) idx$1278) (⊢ (= 40 (* 2 idx$2018)) idx$1280) (⊢ (= 41 (* 2 idx$2018)) idx$1282) (⊢ (= 42 (* 2 idx$2018)) idx$1284) (⊢ (= 43 (* 2 idx$2018)) idx$1286) (⊢ (= 44 (* 2 idx$2018)) idx$1288) (⊢ (= 45 (* 2 idx$2018)) idx$1290) (⊢ (= 46 (* 2 idx$2018)) idx$1292) (⊢ (= 47 (* 2 idx$2018)) idx$1294) (⊢ (= 48 (* 2 idx$2018)) idx$1296) (⊢ (= 49 (* 2 idx$2018)) idx$1298) (⊢ (= 50 (* 2 idx$2018)) idx$1300) (⊢ (= 51 (* 2 idx$2018)) idx$1302) (⊢ (= 52 (* 2 idx$2018)) idx$1304) (⊢ (= 53 (* 2 idx$2018)) idx$1306) (⊢ (= 54 (* 2 idx$2018)) idx$1308) (⊢ (= 55 (* 2 idx$2018)) idx$1310) (⊢ (= 56 (* 2 idx$2018)) idx$1312) (⊢ (= 57 (* 2 idx$2018)) idx$1314) (⊢ (= 58 (* 2 idx$2018)) idx$1316) (⊢ (= 59 (* 2 idx$2018)) idx$1318) (⊢ (= 60 (* 2 idx$2018)) idx$1320) (⊢ (= 61 (* 2 idx$2018)) idx$1322) (⊢ (= 62 (* 2 idx$2018)) idx$1324) (⊢ (= 63 (* 2 idx$2018)) idx$1326) (⊢ (|| (= 0 (* 2 idx$2018)) (= 1 (* 2 idx$2018))) 0))))) (&& c$597 (= 33 (* 2 (ite* (⊢ (= 2 (* 2 idx$2018)) idx$1204) (⊢ (= 3 (* 2 idx$2018)) idx$1206) (⊢ (= 4 (* 2 idx$2018)) idx$1208) (⊢ (= 5 (* 2 idx$2018)) idx$1210) (⊢ (= 6 (* 2 idx$2018)) idx$1212) (⊢ (= 7 (* 2 idx$2018)) idx$1214) (⊢ (= 8 (* 2 idx$2018)) idx$1216) (⊢ (= 9 (* 2 idx$2018)) idx$1218) (⊢ (= 10 (* 2 idx$2018)) idx$1220) (⊢ (= 11 (* 2 idx$2018)) idx$1222) (⊢ (= 12 (* 2 idx$2018)) idx$1224) (⊢ (= 13 (* 2 idx$2018)) idx$1226) (⊢ (= 14 (* 2 idx$2018)) idx$1228) (⊢ (= 15 (* 2 idx$2018)) idx$1230) (⊢ (= 16 (* 2 idx$2018)) idx$1232) (⊢ (= 17 (* 2 idx$2018)) idx$1234) (⊢ (= 18 (* 2 idx$2018)) idx$1236) (⊢ (= 19 (* 2 idx$2018)) idx$1238) (⊢ (= 20 (* 2 idx$2018)) idx$1240) (⊢ (= 21 (* 2 idx$2018)) idx$1242) (⊢ (= 22 (* 2 idx$2018)) idx$1244) (⊢ (= 23 (* 2 idx$2018)) idx$1246) (⊢ (= 24 (* 2 idx$2018)) idx$1248) (⊢ (= 25 (* 2 idx$2018)) idx$1250) (⊢ (= 26 (* 2 idx$2018)) idx$1252) (⊢ (= 27 (* 2 idx$2018)) idx$1254) (⊢ (= 28 (* 2 idx$2018)) idx$1256) (⊢ (= 29 (* 2 idx$2018)) idx$1258) (⊢ (= 30 (* 2 idx$2018)) idx$1260) (⊢ (= 31 (* 2 idx$2018)) idx$1262) (⊢ (= 32 (* 2 idx$2018)) idx$1264) (⊢ (= 33 (* 2 idx$2018)) idx$1266) (⊢ (= 34 (* 2 idx$2018)) idx$1268) (⊢ (= 35 (* 2 idx$2018)) idx$1270) (⊢ (= 36 (* 2 idx$2018)) idx$1272) (⊢ (= 37 (* 2 idx$2018)) idx$1274) (⊢ (= 38 (* 2 idx$2018)) idx$1276) (⊢ (= 39 (* 2 idx$2018)) idx$1278) (⊢ (= 40 (* 2 idx$2018)) idx$1280) (⊢ (= 41 (* 2 idx$2018)) idx$1282) (⊢ (= 42 (* 2 idx$2018)) idx$1284) (⊢ (= 43 (* 2 idx$2018)) idx$1286) (⊢ (= 44 (* 2 idx$2018)) idx$1288) (⊢ (= 45 (* 2 idx$2018)) idx$1290) (⊢ (= 46 (* 2 idx$2018)) idx$1292) (⊢ (= 47 (* 2 idx$2018)) idx$1294) (⊢ (= 48 (* 2 idx$2018)) idx$1296) (⊢ (= 49 (* 2 idx$2018)) idx$1298) (⊢ (= 50 (* 2 idx$2018)) idx$1300) (⊢ (= 51 (* 2 idx$2018)) idx$1302) (⊢ (= 52 (* 2 idx$2018)) idx$1304) (⊢ (= 53 (* 2 idx$2018)) idx$1306) (⊢ (= 54 (* 2 idx$2018)) idx$1308) (⊢ (= 55 (* 2 idx$2018)) idx$1310) (⊢ (= 56 (* 2 idx$2018)) idx$1312) (⊢ (= 57 (* 2 idx$2018)) idx$1314) (⊢ (= 58 (* 2 idx$2018)) idx$1316) (⊢ (= 59 (* 2 idx$2018)) idx$1318) (⊢ (= 60 (* 2 idx$2018)) idx$1320) (⊢ (= 61 (* 2 idx$2018)) idx$1322) (⊢ (= 62 (* 2 idx$2018)) idx$1324) (⊢ (= 63 (* 2 idx$2018)) idx$1326) (⊢ (|| (= 0 (* 2 idx$2018)) (= 1 (* 2 idx$2018))) 0))))) (&& c$599 (= 34 (* 2 (ite* (⊢ (= 2 (* 2 idx$2018)) idx$1204) (⊢ (= 3 (* 2 idx$2018)) idx$1206) (⊢ (= 4 (* 2 idx$2018)) idx$1208) (⊢ (= 5 (* 2 idx$2018)) idx$1210) (⊢ (= 6 (* 2 idx$2018)) idx$1212) (⊢ (= 7 (* 2 idx$2018)) idx$1214) (⊢ (= 8 (* 2 idx$2018)) idx$1216) (⊢ (= 9 (* 2 idx$2018)) idx$1218) (⊢ (= 10 (* 2 idx$2018)) idx$1220) (⊢ (= 11 (* 2 idx$2018)) idx$1222) (⊢ (= 12 (* 2 idx$2018)) idx$1224) (⊢ (= 13 (* 2 idx$2018)) idx$1226) (⊢ (= 14 (* 2 idx$2018)) idx$1228) (⊢ (= 15 (* 2 idx$2018)) idx$1230) (⊢ (= 16 (* 2 idx$2018)) idx$1232) (⊢ (= 17 (* 2 idx$2018)) idx$1234) (⊢ (= 18 (* 2 idx$2018)) idx$1236) (⊢ (= 19 (* 2 idx$2018)) idx$1238) (⊢ (= 20 (* 2 idx$2018)) idx$1240) (⊢ (= 21 (* 2 idx$2018)) idx$1242) (⊢ (= 22 (* 2 idx$2018)) idx$1244) (⊢ (= 23 (* 2 idx$2018)) idx$1246) (⊢ (= 24 (* 2 idx$2018)) idx$1248) (⊢ (= 25 (* 2 idx$2018)) idx$1250) (⊢ (= 26 (* 2 idx$2018)) idx$1252) (⊢ (= 27 (* 2 idx$2018)) idx$1254) (⊢ (= 28 (* 2 idx$2018)) idx$1256) (⊢ (= 29 (* 2 idx$2018)) idx$1258) (⊢ (= 30 (* 2 idx$2018)) idx$1260) (⊢ (= 31 (* 2 idx$2018)) idx$1262) (⊢ (= 32 (* 2 idx$2018)) idx$1264) (⊢ (= 33 (* 2 idx$2018)) idx$1266) (⊢ (= 34 (* 2 idx$2018)) idx$1268) (⊢ (= 35 (* 2 idx$2018)) idx$1270) (⊢ (= 36 (* 2 idx$2018)) idx$1272) (⊢ (= 37 (* 2 idx$2018)) idx$1274) (⊢ (= 38 (* 2 idx$2018)) idx$1276) (⊢ (= 39 (* 2 idx$2018)) idx$1278) (⊢ (= 40 (* 2 idx$2018)) idx$1280) (⊢ (= 41 (* 2 idx$2018)) idx$1282) (⊢ (= 42 (* 2 idx$2018)) idx$1284) (⊢ (= 43 (* 2 idx$2018)) idx$1286) (⊢ (= 44 (* 2 idx$2018)) idx$1288) (⊢ (= 45 (* 2 idx$2018)) idx$1290) (⊢ (= 46 (* 2 idx$2018)) idx$1292) (⊢ (= 47 (* 2 idx$2018)) idx$1294) (⊢ (= 48 (* 2 idx$2018)) idx$1296) (⊢ (= 49 (* 2 idx$2018)) idx$1298) (⊢ (= 50 (* 2 idx$2018)) idx$1300) (⊢ (= 51 (* 2 idx$2018)) idx$1302) (⊢ (= 52 (* 2 idx$2018)) idx$1304) (⊢ (= 53 (* 2 idx$2018)) idx$1306) (⊢ (= 54 (* 2 idx$2018)) idx$1308) (⊢ (= 55 (* 2 idx$2018)) idx$1310) (⊢ (= 56 (* 2 idx$2018)) idx$1312) (⊢ (= 57 (* 2 idx$2018)) idx$1314) (⊢ (= 58 (* 2 idx$2018)) idx$1316) (⊢ (= 59 (* 2 idx$2018)) idx$1318) (⊢ (= 60 (* 2 idx$2018)) idx$1320) (⊢ (= 61 (* 2 idx$2018)) idx$1322) (⊢ (= 62 (* 2 idx$2018)) idx$1324) (⊢ (= 63 (* 2 idx$2018)) idx$1326) (⊢ (|| (= 0 (* 2 idx$2018)) (= 1 (* 2 idx$2018))) 0))))) (&& c$601 (= 35 (* 2 (ite* (⊢ (= 2 (* 2 idx$2018)) idx$1204) (⊢ (= 3 (* 2 idx$2018)) idx$1206) (⊢ (= 4 (* 2 idx$2018)) idx$1208) (⊢ (= 5 (* 2 idx$2018)) idx$1210) (⊢ (= 6 (* 2 idx$2018)) idx$1212) (⊢ (= 7 (* 2 idx$2018)) idx$1214) (⊢ (= 8 (* 2 idx$2018)) idx$1216) (⊢ (= 9 (* 2 idx$2018)) idx$1218) (⊢ (= 10 (* 2 idx$2018)) idx$1220) (⊢ (= 11 (* 2 idx$2018)) idx$1222) (⊢ (= 12 (* 2 idx$2018)) idx$1224) (⊢ (= 13 (* 2 idx$2018)) idx$1226) (⊢ (= 14 (* 2 idx$2018)) idx$1228) (⊢ (= 15 (* 2 idx$2018)) idx$1230) (⊢ (= 16 (* 2 idx$2018)) idx$1232) (⊢ (= 17 (* 2 idx$2018)) idx$1234) (⊢ (= 18 (* 2 idx$2018)) idx$1236) (⊢ (= 19 (* 2 idx$2018)) idx$1238) (⊢ (= 20 (* 2 idx$2018)) idx$1240) (⊢ (= 21 (* 2 idx$2018)) idx$1242) (⊢ (= 22 (* 2 idx$2018)) idx$1244) (⊢ (= 23 (* 2 idx$2018)) idx$1246) (⊢ (= 24 (* 2 idx$2018)) idx$1248) (⊢ (= 25 (* 2 idx$2018)) idx$1250) (⊢ (= 26 (* 2 idx$2018)) idx$1252) (⊢ (= 27 (* 2 idx$2018)) idx$1254) (⊢ (= 28 (* 2 idx$2018)) idx$1256) (⊢ (= 29 (* 2 idx$2018)) idx$1258) (⊢ (= 30 (* 2 idx$2018)) idx$1260) (⊢ (= 31 (* 2 idx$2018)) idx$1262) (⊢ (= 32 (* 2 idx$2018)) idx$1264) (⊢ (= 33 (* 2 idx$2018)) idx$1266) (⊢ (= 34 (* 2 idx$2018)) idx$1268) (⊢ (= 35 (* 2 idx$2018)) idx$1270) (⊢ (= 36 (* 2 idx$2018)) idx$1272) (⊢ (= 37 (* 2 idx$2018)) idx$1274) (⊢ (= 38 (* 2 idx$2018)) idx$1276) (⊢ (= 39 (* 2 idx$2018)) idx$1278) (⊢ (= 40 (* 2 idx$2018)) idx$1280) (⊢ (= 41 (* 2 idx$2018)) idx$1282) (⊢ (= 42 (* 2 idx$2018)) idx$1284) (⊢ (= 43 (* 2 idx$2018)) idx$1286) (⊢ (= 44 (* 2 idx$2018)) idx$1288) (⊢ (= 45 (* 2 idx$2018)) idx$1290) (⊢ (= 46 (* 2 idx$2018)) idx$1292) (⊢ (= 47 (* 2 idx$2018)) idx$1294) (⊢ (= 48 (* 2 idx$2018)) idx$1296) (⊢ (= 49 (* 2 idx$2018)) idx$1298) (⊢ (= 50 (* 2 idx$2018)) idx$1300) (⊢ (= 51 (* 2 idx$2018)) idx$1302) (⊢ (= 52 (* 2 idx$2018)) idx$1304) (⊢ (= 53 (* 2 idx$2018)) idx$1306) (⊢ (= 54 (* 2 idx$2018)) idx$1308) (⊢ (= 55 (* 2 idx$2018)) idx$1310) (⊢ (= 56 (* 2 idx$2018)) idx$1312) (⊢ (= 57 (* 2 idx$2018)) idx$1314) (⊢ (= 58 (* 2 idx$2018)) idx$1316) (⊢ (= 59 (* 2 idx$2018)) idx$1318) (⊢ (= 60 (* 2 idx$2018)) idx$1320) (⊢ (= 61 (* 2 idx$2018)) idx$1322) (⊢ (= 62 (* 2 idx$2018)) idx$1324) (⊢ (= 63 (* 2 idx$2018)) idx$1326) (⊢ (|| (= 0 (* 2 idx$2018)) (= 1 (* 2 idx$2018))) 0))))) (&& c$603 (= 36 (* 2 (ite* (⊢ (= 2 (* 2 idx$2018)) idx$1204) (⊢ (= 3 (* 2 idx$2018)) idx$1206) (⊢ (= 4 (* 2 idx$2018)) idx$1208) (⊢ (= 5 (* 2 idx$2018)) idx$1210) (⊢ (= 6 (* 2 idx$2018)) idx$1212) (⊢ (= 7 (* 2 idx$2018)) idx$1214) (⊢ (= 8 (* 2 idx$2018)) idx$1216) (⊢ (= 9 (* 2 idx$2018)) idx$1218) (⊢ (= 10 (* 2 idx$2018)) idx$1220) (⊢ (= 11 (* 2 idx$2018)) idx$1222) (⊢ (= 12 (* 2 idx$2018)) idx$1224) (⊢ (= 13 (* 2 idx$2018)) idx$1226) (⊢ (= 14 (* 2 idx$2018)) idx$1228) (⊢ (= 15 (* 2 idx$2018)) idx$1230) (⊢ (= 16 (* 2 idx$2018)) idx$1232) (⊢ (= 17 (* 2 idx$2018)) idx$1234) (⊢ (= 18 (* 2 idx$2018)) idx$1236) (⊢ (= 19 (* 2 idx$2018)) idx$1238) (⊢ (= 20 (* 2 idx$2018)) idx$1240) (⊢ (= 21 (* 2 idx$2018)) idx$1242) (⊢ (= 22 (* 2 idx$2018)) idx$1244) (⊢ (= 23 (* 2 idx$2018)) idx$1246) (⊢ (= 24 (* 2 idx$2018)) idx$1248) (⊢ (= 25 (* 2 idx$2018)) idx$1250) (⊢ (= 26 (* 2 idx$2018)) idx$1252) (⊢ (= 27 (* 2 idx$2018)) idx$1254) (⊢ (= 28 (* 2 idx$2018)) idx$1256) (⊢ (= 29 (* 2 idx$2018)) idx$1258) (⊢ (= 30 (* 2 idx$2018)) idx$1260) (⊢ (= 31 (* 2 idx$2018)) idx$1262) (⊢ (= 32 (* 2 idx$2018)) idx$1264) (⊢ (= 33 (* 2 idx$2018)) idx$1266) (⊢ (= 34 (* 2 idx$2018)) idx$1268) (⊢ (= 35 (* 2 idx$2018)) idx$1270) (⊢ (= 36 (* 2 idx$2018)) idx$1272) (⊢ (= 37 (* 2 idx$2018)) idx$1274) (⊢ (= 38 (* 2 idx$2018)) idx$1276) (⊢ (= 39 (* 2 idx$2018)) idx$1278) (⊢ (= 40 (* 2 idx$2018)) idx$1280) (⊢ (= 41 (* 2 idx$2018)) idx$1282) (⊢ (= 42 (* 2 idx$2018)) idx$1284) (⊢ (= 43 (* 2 idx$2018)) idx$1286) (⊢ (= 44 (* 2 idx$2018)) idx$1288) (⊢ (= 45 (* 2 idx$2018)) idx$1290) (⊢ (= 46 (* 2 idx$2018)) idx$1292) (⊢ (= 47 (* 2 idx$2018)) idx$1294) (⊢ (= 48 (* 2 idx$2018)) idx$1296) (⊢ (= 49 (* 2 idx$2018)) idx$1298) (⊢ (= 50 (* 2 idx$2018)) idx$1300) (⊢ (= 51 (* 2 idx$2018)) idx$1302) (⊢ (= 52 (* 2 idx$2018)) idx$1304) (⊢ (= 53 (* 2 idx$2018)) idx$1306) (⊢ (= 54 (* 2 idx$2018)) idx$1308) (⊢ (= 55 (* 2 idx$2018)) idx$1310) (⊢ (= 56 (* 2 idx$2018)) idx$1312) (⊢ (= 57 (* 2 idx$2018)) idx$1314) (⊢ (= 58 (* 2 idx$2018)) idx$1316) (⊢ (= 59 (* 2 idx$2018)) idx$1318) (⊢ (= 60 (* 2 idx$2018)) idx$1320) (⊢ (= 61 (* 2 idx$2018)) idx$1322) (⊢ (= 62 (* 2 idx$2018)) idx$1324) (⊢ (= 63 (* 2 idx$2018)) idx$1326) (⊢ (|| (= 0 (* 2 idx$2018)) (= 1 (* 2 idx$2018))) 0))))) (&& c$605 (= 37 (* 2 (ite* (⊢ (= 2 (* 2 idx$2018)) idx$1204) (⊢ (= 3 (* 2 idx$2018)) idx$1206) (⊢ (= 4 (* 2 idx$2018)) idx$1208) (⊢ (= 5 (* 2 idx$2018)) idx$1210) (⊢ (= 6 (* 2 idx$2018)) idx$1212) (⊢ (= 7 (* 2 idx$2018)) idx$1214) (⊢ (= 8 (* 2 idx$2018)) idx$1216) (⊢ (= 9 (* 2 idx$2018)) idx$1218) (⊢ (= 10 (* 2 idx$2018)) idx$1220) (⊢ (= 11 (* 2 idx$2018)) idx$1222) (⊢ (= 12 (* 2 idx$2018)) idx$1224) (⊢ (= 13 (* 2 idx$2018)) idx$1226) (⊢ (= 14 (* 2 idx$2018)) idx$1228) (⊢ (= 15 (* 2 idx$2018)) idx$1230) (⊢ (= 16 (* 2 idx$2018)) idx$1232) (⊢ (= 17 (* 2 idx$2018)) idx$1234) (⊢ (= 18 (* 2 idx$2018)) idx$1236) (⊢ (= 19 (* 2 idx$2018)) idx$1238) (⊢ (= 20 (* 2 idx$2018)) idx$1240) (⊢ (= 21 (* 2 idx$2018)) idx$1242) (⊢ (= 22 (* 2 idx$2018)) idx$1244) (⊢ (= 23 (* 2 idx$2018)) idx$1246) (⊢ (= 24 (* 2 idx$2018)) idx$1248) (⊢ (= 25 (* 2 idx$2018)) idx$1250) (⊢ (= 26 (* 2 idx$2018)) idx$1252) (⊢ (= 27 (* 2 idx$2018)) idx$1254) (⊢ (= 28 (* 2 idx$2018)) idx$1256) (⊢ (= 29 (* 2 idx$2018)) idx$1258) (⊢ (= 30 (* 2 idx$2018)) idx$1260) (⊢ (= 31 (* 2 idx$2018)) idx$1262) (⊢ (= 32 (* 2 idx$2018)) idx$1264) (⊢ (= 33 (* 2 idx$2018)) idx$1266) (⊢ (= 34 (* 2 idx$2018)) idx$1268) (⊢ (= 35 (* 2 idx$2018)) idx$1270) (⊢ (= 36 (* 2 idx$2018)) idx$1272) (⊢ (= 37 (* 2 idx$2018)) idx$1274) (⊢ (= 38 (* 2 idx$2018)) idx$1276) (⊢ (= 39 (* 2 idx$2018)) idx$1278) (⊢ (= 40 (* 2 idx$2018)) idx$1280) (⊢ (= 41 (* 2 idx$2018)) idx$1282) (⊢ (= 42 (* 2 idx$2018)) idx$1284) (⊢ (= 43 (* 2 idx$2018)) idx$1286) (⊢ (= 44 (* 2 idx$2018)) idx$1288) (⊢ (= 45 (* 2 idx$2018)) idx$1290) (⊢ (= 46 (* 2 idx$2018)) idx$1292) (⊢ (= 47 (* 2 idx$2018)) idx$1294) (⊢ (= 48 (* 2 idx$2018)) idx$1296) (⊢ (= 49 (* 2 idx$2018)) idx$1298) (⊢ (= 50 (* 2 idx$2018)) idx$1300) (⊢ (= 51 (* 2 idx$2018)) idx$1302) (⊢ (= 52 (* 2 idx$2018)) idx$1304) (⊢ (= 53 (* 2 idx$2018)) idx$1306) (⊢ (= 54 (* 2 idx$2018)) idx$1308) (⊢ (= 55 (* 2 idx$2018)) idx$1310) (⊢ (= 56 (* 2 idx$2018)) idx$1312) (⊢ (= 57 (* 2 idx$2018)) idx$1314) (⊢ (= 58 (* 2 idx$2018)) idx$1316) (⊢ (= 59 (* 2 idx$2018)) idx$1318) (⊢ (= 60 (* 2 idx$2018)) idx$1320) (⊢ (= 61 (* 2 idx$2018)) idx$1322) (⊢ (= 62 (* 2 idx$2018)) idx$1324) (⊢ (= 63 (* 2 idx$2018)) idx$1326) (⊢ (|| (= 0 (* 2 idx$2018)) (= 1 (* 2 idx$2018))) 0))))) (&& c$607 (= 38 (* 2 (ite* (⊢ (= 2 (* 2 idx$2018)) idx$1204) (⊢ (= 3 (* 2 idx$2018)) idx$1206) (⊢ (= 4 (* 2 idx$2018)) idx$1208) (⊢ (= 5 (* 2 idx$2018)) idx$1210) (⊢ (= 6 (* 2 idx$2018)) idx$1212) (⊢ (= 7 (* 2 idx$2018)) idx$1214) (⊢ (= 8 (* 2 idx$2018)) idx$1216) (⊢ (= 9 (* 2 idx$2018)) idx$1218) (⊢ (= 10 (* 2 idx$2018)) idx$1220) (⊢ (= 11 (* 2 idx$2018)) idx$1222) (⊢ (= 12 (* 2 idx$2018)) idx$1224) (⊢ (= 13 (* 2 idx$2018)) idx$1226) (⊢ (= 14 (* 2 idx$2018)) idx$1228) (⊢ (= 15 (* 2 idx$2018)) idx$1230) (⊢ (= 16 (* 2 idx$2018)) idx$1232) (⊢ (= 17 (* 2 idx$2018)) idx$1234) (⊢ (= 18 (* 2 idx$2018)) idx$1236) (⊢ (= 19 (* 2 idx$2018)) idx$1238) (⊢ (= 20 (* 2 idx$2018)) idx$1240) (⊢ (= 21 (* 2 idx$2018)) idx$1242) (⊢ (= 22 (* 2 idx$2018)) idx$1244) (⊢ (= 23 (* 2 idx$2018)) idx$1246) (⊢ (= 24 (* 2 idx$2018)) idx$1248) (⊢ (= 25 (* 2 idx$2018)) idx$1250) (⊢ (= 26 (* 2 idx$2018)) idx$1252) (⊢ (= 27 (* 2 idx$2018)) idx$1254) (⊢ (= 28 (* 2 idx$2018)) idx$1256) (⊢ (= 29 (* 2 idx$2018)) idx$1258) (⊢ (= 30 (* 2 idx$2018)) idx$1260) (⊢ (= 31 (* 2 idx$2018)) idx$1262) (⊢ (= 32 (* 2 idx$2018)) idx$1264) (⊢ (= 33 (* 2 idx$2018)) idx$1266) (⊢ (= 34 (* 2 idx$2018)) idx$1268) (⊢ (= 35 (* 2 idx$2018)) idx$1270) (⊢ (= 36 (* 2 idx$2018)) idx$1272) (⊢ (= 37 (* 2 idx$2018)) idx$1274) (⊢ (= 38 (* 2 idx$2018)) idx$1276) (⊢ (= 39 (* 2 idx$2018)) idx$1278) (⊢ (= 40 (* 2 idx$2018)) idx$1280) (⊢ (= 41 (* 2 idx$2018)) idx$1282) (⊢ (= 42 (* 2 idx$2018)) idx$1284) (⊢ (= 43 (* 2 idx$2018)) idx$1286) (⊢ (= 44 (* 2 idx$2018)) idx$1288) (⊢ (= 45 (* 2 idx$2018)) idx$1290) (⊢ (= 46 (* 2 idx$2018)) idx$1292) (⊢ (= 47 (* 2 idx$2018)) idx$1294) (⊢ (= 48 (* 2 idx$2018)) idx$1296) (⊢ (= 49 (* 2 idx$2018)) idx$1298) (⊢ (= 50 (* 2 idx$2018)) idx$1300) (⊢ (= 51 (* 2 idx$2018)) idx$1302) (⊢ (= 52 (* 2 idx$2018)) idx$1304) (⊢ (= 53 (* 2 idx$2018)) idx$1306) (⊢ (= 54 (* 2 idx$2018)) idx$1308) (⊢ (= 55 (* 2 idx$2018)) idx$1310) (⊢ (= 56 (* 2 idx$2018)) idx$1312) (⊢ (= 57 (* 2 idx$2018)) idx$1314) (⊢ (= 58 (* 2 idx$2018)) idx$1316) (⊢ (= 59 (* 2 idx$2018)) idx$1318) (⊢ (= 60 (* 2 idx$2018)) idx$1320) (⊢ (= 61 (* 2 idx$2018)) idx$1322) (⊢ (= 62 (* 2 idx$2018)) idx$1324) (⊢ (= 63 (* 2 idx$2018)) idx$1326) (⊢ (|| (= 0 (* 2 idx$2018)) (= 1 (* 2 idx$2018))) 0))))) (&& c$609 (= 39 (* 2 (ite* (⊢ (= 2 (* 2 idx$2018)) idx$1204) (⊢ (= 3 (* 2 idx$2018)) idx$1206) (⊢ (= 4 (* 2 idx$2018)) idx$1208) (⊢ (= 5 (* 2 idx$2018)) idx$1210) (⊢ (= 6 (* 2 idx$2018)) idx$1212) (⊢ (= 7 (* 2 idx$2018)) idx$1214) (⊢ (= 8 (* 2 idx$2018)) idx$1216) (⊢ (= 9 (* 2 idx$2018)) idx$1218) (⊢ (= 10 (* 2 idx$2018)) idx$1220) (⊢ (= 11 (* 2 idx$2018)) idx$1222) (⊢ (= 12 (* 2 idx$2018)) idx$1224) (⊢ (= 13 (* 2 idx$2018)) idx$1226) (⊢ (= 14 (* 2 idx$2018)) idx$1228) (⊢ (= 15 (* 2 idx$2018)) idx$1230) (⊢ (= 16 (* 2 idx$2018)) idx$1232) (⊢ (= 17 (* 2 idx$2018)) idx$1234) (⊢ (= 18 (* 2 idx$2018)) idx$1236) (⊢ (= 19 (* 2 idx$2018)) idx$1238) (⊢ (= 20 (* 2 idx$2018)) idx$1240) (⊢ (= 21 (* 2 idx$2018)) idx$1242) (⊢ (= 22 (* 2 idx$2018)) idx$1244) (⊢ (= 23 (* 2 idx$2018)) idx$1246) (⊢ (= 24 (* 2 idx$2018)) idx$1248) (⊢ (= 25 (* 2 idx$2018)) idx$1250) (⊢ (= 26 (* 2 idx$2018)) idx$1252) (⊢ (= 27 (* 2 idx$2018)) idx$1254) (⊢ (= 28 (* 2 idx$2018)) idx$1256) (⊢ (= 29 (* 2 idx$2018)) idx$1258) (⊢ (= 30 (* 2 idx$2018)) idx$1260) (⊢ (= 31 (* 2 idx$2018)) idx$1262) (⊢ (= 32 (* 2 idx$2018)) idx$1264) (⊢ (= 33 (* 2 idx$2018)) idx$1266) (⊢ (= 34 (* 2 idx$2018)) idx$1268) (⊢ (= 35 (* 2 idx$2018)) idx$1270) (⊢ (= 36 (* 2 idx$2018)) idx$1272) (⊢ (= 37 (* 2 idx$2018)) idx$1274) (⊢ (= 38 (* 2 idx$2018)) idx$1276) (⊢ (= 39 (* 2 idx$2018)) idx$1278) (⊢ (= 40 (* 2 idx$2018)) idx$1280) (⊢ (= 41 (* 2 idx$2018)) idx$1282) (⊢ (= 42 (* 2 idx$2018)) idx$1284) (⊢ (= 43 (* 2 idx$2018)) idx$1286) (⊢ (= 44 (* 2 idx$2018)) idx$1288) (⊢ (= 45 (* 2 idx$2018)) idx$1290) (⊢ (= 46 (* 2 idx$2018)) idx$1292) (⊢ (= 47 (* 2 idx$2018)) idx$1294) (⊢ (= 48 (* 2 idx$2018)) idx$1296) (⊢ (= 49 (* 2 idx$2018)) idx$1298) (⊢ (= 50 (* 2 idx$2018)) idx$1300) (⊢ (= 51 (* 2 idx$2018)) idx$1302) (⊢ (= 52 (* 2 idx$2018)) idx$1304) (⊢ (= 53 (* 2 idx$2018)) idx$1306) (⊢ (= 54 (* 2 idx$2018)) idx$1308) (⊢ (= 55 (* 2 idx$2018)) idx$1310) (⊢ (= 56 (* 2 idx$2018)) idx$1312) (⊢ (= 57 (* 2 idx$2018)) idx$1314) (⊢ (= 58 (* 2 idx$2018)) idx$1316) (⊢ (= 59 (* 2 idx$2018)) idx$1318) (⊢ (= 60 (* 2 idx$2018)) idx$1320) (⊢ (= 61 (* 2 idx$2018)) idx$1322) (⊢ (= 62 (* 2 idx$2018)) idx$1324) (⊢ (= 63 (* 2 idx$2018)) idx$1326) (⊢ (|| (= 0 (* 2 idx$2018)) (= 1 (* 2 idx$2018))) 0))))) (&& c$611 (= 40 (* 2 (ite* (⊢ (= 2 (* 2 idx$2018)) idx$1204) (⊢ (= 3 (* 2 idx$2018)) idx$1206) (⊢ (= 4 (* 2 idx$2018)) idx$1208) (⊢ (= 5 (* 2 idx$2018)) idx$1210) (⊢ (= 6 (* 2 idx$2018)) idx$1212) (⊢ (= 7 (* 2 idx$2018)) idx$1214) (⊢ (= 8 (* 2 idx$2018)) idx$1216) (⊢ (= 9 (* 2 idx$2018)) idx$1218) (⊢ (= 10 (* 2 idx$2018)) idx$1220) (⊢ (= 11 (* 2 idx$2018)) idx$1222) (⊢ (= 12 (* 2 idx$2018)) idx$1224) (⊢ (= 13 (* 2 idx$2018)) idx$1226) (⊢ (= 14 (* 2 idx$2018)) idx$1228) (⊢ (= 15 (* 2 idx$2018)) idx$1230) (⊢ (= 16 (* 2 idx$2018)) idx$1232) (⊢ (= 17 (* 2 idx$2018)) idx$1234) (⊢ (= 18 (* 2 idx$2018)) idx$1236) (⊢ (= 19 (* 2 idx$2018)) idx$1238) (⊢ (= 20 (* 2 idx$2018)) idx$1240) (⊢ (= 21 (* 2 idx$2018)) idx$1242) (⊢ (= 22 (* 2 idx$2018)) idx$1244) (⊢ (= 23 (* 2 idx$2018)) idx$1246) (⊢ (= 24 (* 2 idx$2018)) idx$1248) (⊢ (= 25 (* 2 idx$2018)) idx$1250) (⊢ (= 26 (* 2 idx$2018)) idx$1252) (⊢ (= 27 (* 2 idx$2018)) idx$1254) (⊢ (= 28 (* 2 idx$2018)) idx$1256) (⊢ (= 29 (* 2 idx$2018)) idx$1258) (⊢ (= 30 (* 2 idx$2018)) idx$1260) (⊢ (= 31 (* 2 idx$2018)) idx$1262) (⊢ (= 32 (* 2 idx$2018)) idx$1264) (⊢ (= 33 (* 2 idx$2018)) idx$1266) (⊢ (= 34 (* 2 idx$2018)) idx$1268) (⊢ (= 35 (* 2 idx$2018)) idx$1270) (⊢ (= 36 (* 2 idx$2018)) idx$1272) (⊢ (= 37 (* 2 idx$2018)) idx$1274) (⊢ (= 38 (* 2 idx$2018)) idx$1276) (⊢ (= 39 (* 2 idx$2018)) idx$1278) (⊢ (= 40 (* 2 idx$2018)) idx$1280) (⊢ (= 41 (* 2 idx$2018)) idx$1282) (⊢ (= 42 (* 2 idx$2018)) idx$1284) (⊢ (= 43 (* 2 idx$2018)) idx$1286) (⊢ (= 44 (* 2 idx$2018)) idx$1288) (⊢ (= 45 (* 2 idx$2018)) idx$1290) (⊢ (= 46 (* 2 idx$2018)) idx$1292) (⊢ (= 47 (* 2 idx$2018)) idx$1294) (⊢ (= 48 (* 2 idx$2018)) idx$1296) (⊢ (= 49 (* 2 idx$2018)) idx$1298) (⊢ (= 50 (* 2 idx$2018)) idx$1300) (⊢ (= 51 (* 2 idx$2018)) idx$1302) (⊢ (= 52 (* 2 idx$2018)) idx$1304) (⊢ (= 53 (* 2 idx$2018)) idx$1306) (⊢ (= 54 (* 2 idx$2018)) idx$1308) (⊢ (= 55 (* 2 idx$2018)) idx$1310) (⊢ (= 56 (* 2 idx$2018)) idx$1312) (⊢ (= 57 (* 2 idx$2018)) idx$1314) (⊢ (= 58 (* 2 idx$2018)) idx$1316) (⊢ (= 59 (* 2 idx$2018)) idx$1318) (⊢ (= 60 (* 2 idx$2018)) idx$1320) (⊢ (= 61 (* 2 idx$2018)) idx$1322) (⊢ (= 62 (* 2 idx$2018)) idx$1324) (⊢ (= 63 (* 2 idx$2018)) idx$1326) (⊢ (|| (= 0 (* 2 idx$2018)) (= 1 (* 2 idx$2018))) 0))))) (&& c$613 (= 41 (* 2 (ite* (⊢ (= 2 (* 2 idx$2018)) idx$1204) (⊢ (= 3 (* 2 idx$2018)) idx$1206) (⊢ (= 4 (* 2 idx$2018)) idx$1208) (⊢ (= 5 (* 2 idx$2018)) idx$1210) (⊢ (= 6 (* 2 idx$2018)) idx$1212) (⊢ (= 7 (* 2 idx$2018)) idx$1214) (⊢ (= 8 (* 2 idx$2018)) idx$1216) (⊢ (= 9 (* 2 idx$2018)) idx$1218) (⊢ (= 10 (* 2 idx$2018)) idx$1220) (⊢ (= 11 (* 2 idx$2018)) idx$1222) (⊢ (= 12 (* 2 idx$2018)) idx$1224) (⊢ (= 13 (* 2 idx$2018)) idx$1226) (⊢ (= 14 (* 2 idx$2018)) idx$1228) (⊢ (= 15 (* 2 idx$2018)) idx$1230) (⊢ (= 16 (* 2 idx$2018)) idx$1232) (⊢ (= 17 (* 2 idx$2018)) idx$1234) (⊢ (= 18 (* 2 idx$2018)) idx$1236) (⊢ (= 19 (* 2 idx$2018)) idx$1238) (⊢ (= 20 (* 2 idx$2018)) idx$1240) (⊢ (= 21 (* 2 idx$2018)) idx$1242) (⊢ (= 22 (* 2 idx$2018)) idx$1244) (⊢ (= 23 (* 2 idx$2018)) idx$1246) (⊢ (= 24 (* 2 idx$2018)) idx$1248) (⊢ (= 25 (* 2 idx$2018)) idx$1250) (⊢ (= 26 (* 2 idx$2018)) idx$1252) (⊢ (= 27 (* 2 idx$2018)) idx$1254) (⊢ (= 28 (* 2 idx$2018)) idx$1256) (⊢ (= 29 (* 2 idx$2018)) idx$1258) (⊢ (= 30 (* 2 idx$2018)) idx$1260) (⊢ (= 31 (* 2 idx$2018)) idx$1262) (⊢ (= 32 (* 2 idx$2018)) idx$1264) (⊢ (= 33 (* 2 idx$2018)) idx$1266) (⊢ (= 34 (* 2 idx$2018)) idx$1268) (⊢ (= 35 (* 2 idx$2018)) idx$1270) (⊢ (= 36 (* 2 idx$2018)) idx$1272) (⊢ (= 37 (* 2 idx$2018)) idx$1274) (⊢ (= 38 (* 2 idx$2018)) idx$1276) (⊢ (= 39 (* 2 idx$2018)) idx$1278) (⊢ (= 40 (* 2 idx$2018)) idx$1280) (⊢ (= 41 (* 2 idx$2018)) idx$1282) (⊢ (= 42 (* 2 idx$2018)) idx$1284) (⊢ (= 43 (* 2 idx$2018)) idx$1286) (⊢ (= 44 (* 2 idx$2018)) idx$1288) (⊢ (= 45 (* 2 idx$2018)) idx$1290) (⊢ (= 46 (* 2 idx$2018)) idx$1292) (⊢ (= 47 (* 2 idx$2018)) idx$1294) (⊢ (= 48 (* 2 idx$2018)) idx$1296) (⊢ (= 49 (* 2 idx$2018)) idx$1298) (⊢ (= 50 (* 2 idx$2018)) idx$1300) (⊢ (= 51 (* 2 idx$2018)) idx$1302) (⊢ (= 52 (* 2 idx$2018)) idx$1304) (⊢ (= 53 (* 2 idx$2018)) idx$1306) (⊢ (= 54 (* 2 idx$2018)) idx$1308) (⊢ (= 55 (* 2 idx$2018)) idx$1310) (⊢ (= 56 (* 2 idx$2018)) idx$1312) (⊢ (= 57 (* 2 idx$2018)) idx$1314) (⊢ (= 58 (* 2 idx$2018)) idx$1316) (⊢ (= 59 (* 2 idx$2018)) idx$1318) (⊢ (= 60 (* 2 idx$2018)) idx$1320) (⊢ (= 61 (* 2 idx$2018)) idx$1322) (⊢ (= 62 (* 2 idx$2018)) idx$1324) (⊢ (= 63 (* 2 idx$2018)) idx$1326) (⊢ (|| (= 0 (* 2 idx$2018)) (= 1 (* 2 idx$2018))) 0))))) (&& c$615 (= 42 (* 2 (ite* (⊢ (= 2 (* 2 idx$2018)) idx$1204) (⊢ (= 3 (* 2 idx$2018)) idx$1206) (⊢ (= 4 (* 2 idx$2018)) idx$1208) (⊢ (= 5 (* 2 idx$2018)) idx$1210) (⊢ (= 6 (* 2 idx$2018)) idx$1212) (⊢ (= 7 (* 2 idx$2018)) idx$1214) (⊢ (= 8 (* 2 idx$2018)) idx$1216) (⊢ (= 9 (* 2 idx$2018)) idx$1218) (⊢ (= 10 (* 2 idx$2018)) idx$1220) (⊢ (= 11 (* 2 idx$2018)) idx$1222) (⊢ (= 12 (* 2 idx$2018)) idx$1224) (⊢ (= 13 (* 2 idx$2018)) idx$1226) (⊢ (= 14 (* 2 idx$2018)) idx$1228) (⊢ (= 15 (* 2 idx$2018)) idx$1230) (⊢ (= 16 (* 2 idx$2018)) idx$1232) (⊢ (= 17 (* 2 idx$2018)) idx$1234) (⊢ (= 18 (* 2 idx$2018)) idx$1236) (⊢ (= 19 (* 2 idx$2018)) idx$1238) (⊢ (= 20 (* 2 idx$2018)) idx$1240) (⊢ (= 21 (* 2 idx$2018)) idx$1242) (⊢ (= 22 (* 2 idx$2018)) idx$1244) (⊢ (= 23 (* 2 idx$2018)) idx$1246) (⊢ (= 24 (* 2 idx$2018)) idx$1248) (⊢ (= 25 (* 2 idx$2018)) idx$1250) (⊢ (= 26 (* 2 idx$2018)) idx$1252) (⊢ (= 27 (* 2 idx$2018)) idx$1254) (⊢ (= 28 (* 2 idx$2018)) idx$1256) (⊢ (= 29 (* 2 idx$2018)) idx$1258) (⊢ (= 30 (* 2 idx$2018)) idx$1260) (⊢ (= 31 (* 2 idx$2018)) idx$1262) (⊢ (= 32 (* 2 idx$2018)) idx$1264) (⊢ (= 33 (* 2 idx$2018)) idx$1266) (⊢ (= 34 (* 2 idx$2018)) idx$1268) (⊢ (= 35 (* 2 idx$2018)) idx$1270) (⊢ (= 36 (* 2 idx$2018)) idx$1272) (⊢ (= 37 (* 2 idx$2018)) idx$1274) (⊢ (= 38 (* 2 idx$2018)) idx$1276) (⊢ (= 39 (* 2 idx$2018)) idx$1278) (⊢ (= 40 (* 2 idx$2018)) idx$1280) (⊢ (= 41 (* 2 idx$2018)) idx$1282) (⊢ (= 42 (* 2 idx$2018)) idx$1284) (⊢ (= 43 (* 2 idx$2018)) idx$1286) (⊢ (= 44 (* 2 idx$2018)) idx$1288) (⊢ (= 45 (* 2 idx$2018)) idx$1290) (⊢ (= 46 (* 2 idx$2018)) idx$1292) (⊢ (= 47 (* 2 idx$2018)) idx$1294) (⊢ (= 48 (* 2 idx$2018)) idx$1296) (⊢ (= 49 (* 2 idx$2018)) idx$1298) (⊢ (= 50 (* 2 idx$2018)) idx$1300) (⊢ (= 51 (* 2 idx$2018)) idx$1302) (⊢ (= 52 (* 2 idx$2018)) idx$1304) (⊢ (= 53 (* 2 idx$2018)) idx$1306) (⊢ (= 54 (* 2 idx$2018)) idx$1308) (⊢ (= 55 (* 2 idx$2018)) idx$1310) (⊢ (= 56 (* 2 idx$2018)) idx$1312) (⊢ (= 57 (* 2 idx$2018)) idx$1314) (⊢ (= 58 (* 2 idx$2018)) idx$1316) (⊢ (= 59 (* 2 idx$2018)) idx$1318) (⊢ (= 60 (* 2 idx$2018)) idx$1320) (⊢ (= 61 (* 2 idx$2018)) idx$1322) (⊢ (= 62 (* 2 idx$2018)) idx$1324) (⊢ (= 63 (* 2 idx$2018)) idx$1326) (⊢ (|| (= 0 (* 2 idx$2018)) (= 1 (* 2 idx$2018))) 0))))) ...) ...) ...)) ...) ...) ...) ...)) ...) ...) ...) ...) ...) ...) ...) ...) ...)) ...))
Ran synthesizer for 5944 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-add
 (vec-add
  (vec-shr
   (vec-cast
    (vec-max
     (vec-min
      (vec-add
       (vec-bwand
        (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
        (vec-div
         (vec-mul
          (vec-cast
           (vec-add
            (vec-add
             (vec-mul
              (vec-cast
               (load
                (buffer column_sums_b 'uint32)
                (ramp
                 (sca-add
                  (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                  16)
                 1
                 16)
                (aligned 16 0))
               'int32
               16)
              (sca-broadcast (int32_t t5829) 16))
             (vec-add
              (load
               (buffer bias 'int32)
               (ramp (sca-mul output.s0.x.x 16) 1 16)
               (aligned 16 0))
              (sca-broadcast
               (sca-add
                (sca-mul
                 (sca-mul (int32_t t5829) (int32_t t5830))
                 (int32_t mat_a.extent.0))
                (sca-mul (int32_t t5830) (int32_t t6653)))
               16)))
            (vec-cast
             (load
              (buffer multiplied_no_offsets 'uint32)
              (ramp
               (sca-add
                (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
                4)
               1
               16)
              (aligned 4 0))
             'int32
             16))
           'int64
           16)
          (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
         (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
       (vec-div
        (vec-mul
         (vec-cast
          (vec-add
           (vec-add
            (vec-mul
             (vec-cast
              (load
               (buffer column_sums_b 'uint32)
               (ramp
                (sca-add
                 (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                 16)
                1
                16)
               (aligned 16 0))
              'int32
              16)
             (sca-broadcast (int32_t t5829) 16))
            (vec-add
             (load
              (buffer bias 'int32)
              (ramp (sca-mul output.s0.x.x 16) 1 16)
              (aligned 16 0))
             (sca-broadcast
              (sca-add
               (sca-mul
                (sca-mul (int32_t t5829) (int32_t t5830))
                (int32_t mat_a.extent.0))
               (sca-mul (int32_t t5830) (int32_t t6653)))
              16)))
           (vec-cast
            (load
             (buffer multiplied_no_offsets 'uint32)
             (ramp
              (sca-add
               (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
               4)
              1
              16)
             (aligned 4 0))
            'int32
            16))
          'int64
          16)
         (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
        (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
      (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
     (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
    'int32
    16)
   (sca-broadcast (int32_t output_shift) 16))
  (vec-bwand
   (vec-if
    (sca-broadcast
     (sca-lt (int32_t (bv #x00000000 32)) (int32_t output_shift))
     16)
    (sca-broadcast (int32_t (bv #x00000001 32)) 16)
    (sca-broadcast (int32_t (bv #x00000000 32)) 16))
   (vec-shr
    (vec-cast
     (vec-max
      (vec-min
       (vec-add
        (vec-bwand
         (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
         (vec-div
          (vec-mul
           (vec-cast
            (vec-add
             (vec-add
              (vec-mul
               (vec-cast
                (load
                 (buffer column_sums_b 'uint32)
                 (ramp
                  (sca-add
                   (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                   16)
                  1
                  16)
                 (aligned 16 0))
                'int32
                16)
               (sca-broadcast (int32_t t5829) 16))
              (vec-add
               (load
                (buffer bias 'int32)
                (ramp (sca-mul output.s0.x.x 16) 1 16)
                (aligned 16 0))
               (sca-broadcast
                (sca-add
                 (sca-mul
                  (sca-mul (int32_t t5829) (int32_t t5830))
                  (int32_t mat_a.extent.0))
                 (sca-mul (int32_t t5830) (int32_t t6653)))
                16)))
             (vec-cast
              (load
               (buffer multiplied_no_offsets 'uint32)
               (ramp
                (sca-add
                 (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
                 4)
                1
                16)
               (aligned 4 0))
              'int32
              16))
            'int64
            16)
           (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
          (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
        (vec-div
         (vec-mul
          (vec-cast
           (vec-add
            (vec-add
             (vec-mul
              (vec-cast
               (load
                (buffer column_sums_b 'uint32)
                (ramp
                 (sca-add
                  (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                  16)
                 1
                 16)
                (aligned 16 0))
               'int32
               16)
              (sca-broadcast (int32_t t5829) 16))
             (vec-add
              (load
               (buffer bias 'int32)
               (ramp (sca-mul output.s0.x.x 16) 1 16)
               (aligned 16 0))
              (sca-broadcast
               (sca-add
                (sca-mul
                 (sca-mul (int32_t t5829) (int32_t t5830))
                 (int32_t mat_a.extent.0))
                (sca-mul (int32_t t5830) (int32_t t6653)))
               16)))
            (vec-cast
             (load
              (buffer multiplied_no_offsets 'uint32)
              (ramp
               (sca-add
                (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
                4)
               1
               16)
              (aligned 4 0))
             'int32
             16))
           'int64
           16)
          (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
         (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
       (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
      (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
     'int32
     16)
    (sca-broadcast
     (sca-add (int32_t output_shift) (int32_t (bv #xffffffff 32)))
     16))))
 (sca-broadcast (int32_t output_offset) 16))
template:
  (vs-mpy-add
 ...
 (combine
  (vs-shift-right
   ...
   (cast
    ...
    (vs-shift-right
     ...
     (vs-mpy-add
      ...
      (vs-mpy-add
       ...
       (combine
        (vs-mpy-add
         ...
         (combine
          (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
          (vs-mpy-add
           ...
           (combine
            #<load-data>
            (broadcast
             ...
             (sca-add
              (sca-mul
               (sca-mul (int32_t t5829) (int32_t t5830))
               (int32_t mat_a.extent.0))
              (sca-mul (int32_t t5830) (int32_t t6653)))))
           (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
           #f
           #f
           #f
           'int32))
         (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
         #f
         #f
         #f
         'int32)
        (cast ... #<load-data> 'int32 #f))
       (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
       #f
       #f
       #f
       'int32)
      (list (int32_t output_multiplier))
      #f
      #f
      #f
      'int64)
     (int64_t (bv #x000000000000001f 64))
     #t
     x?$2971
     #t)
    'int32
    #t)
   (int32_t output_shift)
   #t
   x?$3371
   #t)
  (broadcast ... (int32_t output_offset)))
 (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
 #f
 #f
 #f
 'int32)
axioms:
  (list (forall (idx) (bvsle (bv #x80000001 32) (app abstr-vals$3564 idx))) #t)
optimized-halide-expr:
  (vec-add #<abstr-halide-expr> #<abstr-halide-expr>)
optimized-template:
  (vs-mpy-add
 ...
 (combine #<abstr-expr> #<abstr-expr>)
 (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
 #f
 #f
 #f
 'int32)
optimized Halide 0:
  (int32_t (bvadd (app abstr-vals$3564 0) (app abstr-vals$3565 0)))
optimized x86 0:
  (int32_t
 (bvadd (ite c$3437 (app abstr-vals$3564 idx$3436) (app abstr-vals$3565 idx$3436)) (ite c$3439 (app abstr-vals$3564 idx$3438) (app abstr-vals$3565 idx$3438))))
Ran synthesizer for 137 ms
(model
 [idx$3436 0]
 [c$3437 #t]
 [idx$3438 0]
 [c$3439 #f])
(vec-add #<abstr-halide-expr> #<abstr-halide-expr>)
(vs-mpy-add
 ...
 (combine
  (vs-shift-right
   ...
   (cast
    ...
    (vs-shift-right
     ...
     (vs-mpy-add
      ...
      (vs-mpy-add
       ...
       (combine
        (vs-mpy-add
         ...
         (combine
          (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
          (vs-mpy-add
           ...
           (combine
            #<load-data>
            (broadcast
             ...
             (sca-add
              (sca-mul
               (sca-mul (int32_t t5829) (int32_t t5830))
               (int32_t mat_a.extent.0))
              (sca-mul (int32_t t5830) (int32_t t6653)))))
           (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
           #f
           #f
           #f
           'int32))
         (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
         #f
         #f
         #f
         'int32)
        (cast ... #<load-data> 'int32 #f))
       (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
       #f
       #f
       #f
       'int32)
      (list (int32_t output_multiplier))
      #f
      #f
      #f
      'int64)
     (int64_t (bv #x000000000000001f 64))
     #t
     x?$2971
     #t)
    'int32
    #t)
   (int32_t output_shift)
   #t
   x?$3371
   #t)
  (broadcast ... (int32_t output_offset)))
 (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
 #f
 #f
 #f
 'int32)
Ran bounds analysis for 43 ms
Ran bounds analysis for 36 ms
"Extended success?"
#t
(vs-mpy-add
 ...
 (combine
  (vs-shift-right
   ...
   (cast
    ...
    (vs-shift-right
     ...
     (vs-mpy-add
      ...
      (vs-mpy-add
       ...
       (combine
        (vs-mpy-add
         ...
         (combine
          (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
          (vs-mpy-add
           ...
           (combine
            #<load-data>
            (broadcast
             ...
             (sca-add
              (sca-mul
               (sca-mul (int32_t t5829) (int32_t t5830))
               (int32_t mat_a.extent.0))
              (sca-mul (int32_t t5830) (int32_t t6653)))))
           (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
           #f
           #f
           #f
           'int32))
         (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
         #f
         #f
         #f
         'int32)
        (cast ... #<load-data> 'int32 #f))
       (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
       #f
       #f
       #f
       'int32)
      (list (int32_t output_multiplier))
      #f
      #f
      #f
      'int64)
     (int64_t (bv #x000000000000001f 64))
     #t
     x?$2971
     #t)
    'int32
    #t)
   (int32_t output_shift)
   #t
   x?$3371
   #t)
  (broadcast ... (int32_t output_offset)))
 (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
 #f
 #f
 #f
 'int32)
"Building Expr:"
(sca-broadcast (int32_t (bv #x000000ff 32)) 16)
"Fold templates"
'()
here()

"Replace templates"
'()
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (sca-broadcast (int32_t (bv #x000000ff 32)) 16)
template:
  (broadcast ... (int32_t (bv #x000000ff 32)))
axioms:
  '()
optimized-halide-expr:
  (sca-broadcast (int32_t (bv #x000000ff 32)) 16)
optimized-template:
  (broadcast ... (int32_t (bv #x000000ff 32)))
optimized Halide 0:
  (int32_t (bv #x000000ff 32))
optimized x86 0:
  (int32_t (bv #x000000ff 32))
Ran synthesizer for 20 ms
(model)
(sca-broadcast (int32_t (bv #x000000ff 32)) 16)
(broadcast ... (int32_t (bv #x000000ff 32)))
Ran bounds analysis for 27 ms
Ran bounds analysis for 17 ms
"Extended success?"
#t
(broadcast ... (int32_t (bv #x000000ff 32)))
"Building Expr:"
(vec-min
 (vec-add
  (vec-add
   (vec-shr
    (vec-cast
     (vec-max
      (vec-min
       (vec-add
        (vec-bwand
         (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
         (vec-div
          (vec-mul
           (vec-cast
            (vec-add
             (vec-add
              (vec-mul
               (vec-cast
                (load
                 (buffer column_sums_b 'uint32)
                 (ramp
                  (sca-add
                   (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                   16)
                  1
                  16)
                 (aligned 16 0))
                'int32
                16)
               (sca-broadcast (int32_t t5829) 16))
              (vec-add
               (load
                (buffer bias 'int32)
                (ramp (sca-mul output.s0.x.x 16) 1 16)
                (aligned 16 0))
               (sca-broadcast
                (sca-add
                 (sca-mul
                  (sca-mul (int32_t t5829) (int32_t t5830))
                  (int32_t mat_a.extent.0))
                 (sca-mul (int32_t t5830) (int32_t t6653)))
                16)))
             (vec-cast
              (load
               (buffer multiplied_no_offsets 'uint32)
               (ramp
                (sca-add
                 (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
                 4)
                1
                16)
               (aligned 4 0))
              'int32
              16))
            'int64
            16)
           (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
          (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
        (vec-div
         (vec-mul
          (vec-cast
           (vec-add
            (vec-add
             (vec-mul
              (vec-cast
               (load
                (buffer column_sums_b 'uint32)
                (ramp
                 (sca-add
                  (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                  16)
                 1
                 16)
                (aligned 16 0))
               'int32
               16)
              (sca-broadcast (int32_t t5829) 16))
             (vec-add
              (load
               (buffer bias 'int32)
               (ramp (sca-mul output.s0.x.x 16) 1 16)
               (aligned 16 0))
              (sca-broadcast
               (sca-add
                (sca-mul
                 (sca-mul (int32_t t5829) (int32_t t5830))
                 (int32_t mat_a.extent.0))
                (sca-mul (int32_t t5830) (int32_t t6653)))
               16)))
            (vec-cast
             (load
              (buffer multiplied_no_offsets 'uint32)
              (ramp
               (sca-add
                (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
                4)
               1
               16)
              (aligned 4 0))
             'int32
             16))
           'int64
           16)
          (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
         (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
       (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
      (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
     'int32
     16)
    (sca-broadcast (int32_t output_shift) 16))
   (vec-bwand
    (vec-if
     (sca-broadcast
      (sca-lt (int32_t (bv #x00000000 32)) (int32_t output_shift))
      16)
     (sca-broadcast (int32_t (bv #x00000001 32)) 16)
     (sca-broadcast (int32_t (bv #x00000000 32)) 16))
    (vec-shr
     (vec-cast
      (vec-max
       (vec-min
        (vec-add
         (vec-bwand
          (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
          (vec-div
           (vec-mul
            (vec-cast
             (vec-add
              (vec-add
               (vec-mul
                (vec-cast
                 (load
                  (buffer column_sums_b 'uint32)
                  (ramp
                   (sca-add
                    (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                    16)
                   1
                   16)
                  (aligned 16 0))
                 'int32
                 16)
                (sca-broadcast (int32_t t5829) 16))
               (vec-add
                (load
                 (buffer bias 'int32)
                 (ramp (sca-mul output.s0.x.x 16) 1 16)
                 (aligned 16 0))
                (sca-broadcast
                 (sca-add
                  (sca-mul
                   (sca-mul (int32_t t5829) (int32_t t5830))
                   (int32_t mat_a.extent.0))
                  (sca-mul (int32_t t5830) (int32_t t6653)))
                 16)))
              (vec-cast
               (load
                (buffer multiplied_no_offsets 'uint32)
                (ramp
                 (sca-add
                  (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
                  4)
                 1
                 16)
                (aligned 4 0))
               'int32
               16))
             'int64
             16)
            (vec-cast
             (sca-broadcast (int32_t output_multiplier) 16)
             'int64
             16))
           (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
         (vec-div
          (vec-mul
           (vec-cast
            (vec-add
             (vec-add
              (vec-mul
               (vec-cast
                (load
                 (buffer column_sums_b 'uint32)
                 (ramp
                  (sca-add
                   (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                   16)
                  1
                  16)
                 (aligned 16 0))
                'int32
                16)
               (sca-broadcast (int32_t t5829) 16))
              (vec-add
               (load
                (buffer bias 'int32)
                (ramp (sca-mul output.s0.x.x 16) 1 16)
                (aligned 16 0))
               (sca-broadcast
                (sca-add
                 (sca-mul
                  (sca-mul (int32_t t5829) (int32_t t5830))
                  (int32_t mat_a.extent.0))
                 (sca-mul (int32_t t5830) (int32_t t6653)))
                16)))
             (vec-cast
              (load
               (buffer multiplied_no_offsets 'uint32)
               (ramp
                (sca-add
                 (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
                 4)
                1
                16)
               (aligned 4 0))
              'int32
              16))
            'int64
            16)
           (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
          (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
        (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
       (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
      'int32
      16)
     (sca-broadcast
      (sca-add (int32_t output_shift) (int32_t (bv #xffffffff 32)))
      16))))
  (sca-broadcast (int32_t output_offset) 16))
 (sca-broadcast (int32_t (bv #x000000ff 32)) 16))
"Fold templates"
(list
 (vs-shift-right
  ...
  (cast
   ...
   (vs-shift-right
    ...
    (vs-mpy-add
     ...
     (vs-mpy-add
      ...
      (combine
       (vs-mpy-add
        ...
        (combine
         (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
         (vs-mpy-add
          ...
          (combine
           #<load-data>
           (broadcast
            ...
            (sca-add
             (sca-mul
              (sca-mul (int32_t t5829) (int32_t t5830))
              (int32_t mat_a.extent.0))
             (sca-mul (int32_t t5830) (int32_t t6653)))))
          (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
          #f
          #f
          #f
          'int32))
        (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
        #f
        #f
        #f
        'int32)
       (cast ... #<load-data> 'int32 #f))
      (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
      #f
      #f
      #f
      'int32)
     (list (int32_t output_multiplier))
     #f
     #f
     #f
     'int64)
    (int64_t (bv #x000000000000001f 64))
    #t
    x?$2971
    #t)
   'int32
   #t)
  (union [xi?$3573 #(struct:int32_t output_shift)] [(&& (! xi?$3573) (&& (! xi?$3574) (! xi?$3575))) #(struct:sca-add
                                                                                                       #(struct:int32_t
                                                                                                         output_shift)
                                                                                                       #(struct:int32_t
                                                                                                         (bv #xffffffff 32)))] [(&& (! xi?$3573) (|| xi?$3574 (&& xi?$3575 (! xi?$3574)))) #(struct:int64_t
                                                                                                                                                                                             (ite* (⊢ xi?$3574 (bv #x000000000000001e 64)) (⊢ (&& xi?$3575 (! xi?$3574)) (bv #x000000000000001f 64))))])
  #t
  x?$3371
  #t)
 (vs-shift-right
  ...
  (cast
   ...
   (vs-shift-right
    ...
    (vs-mpy-add
     ...
     (vs-mpy-add
      ...
      (combine
       (vs-mpy-add
        ...
        (combine
         (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
         (vs-mpy-add
          ...
          (combine
           #<load-data>
           (broadcast
            ...
            (sca-add
             (sca-mul
              (sca-mul (int32_t t5829) (int32_t t5830))
              (int32_t mat_a.extent.0))
             (sca-mul (int32_t t5830) (int32_t t6653)))))
          (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
          #f
          #f
          #f
          'int32))
        (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
        #f
        #f
        #f
        'int32)
       (cast ... #<load-data> 'int32 #f))
      (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
      #f
      #f
      #f
      'int32)
     (list (int32_t output_multiplier))
     #f
     #f
     #f
     'int64)
    (int64_t (bv #x000000000000001f 64))
    #t
    x?$2971
    #t)
   'int32
   #t)
  (int32_t output_shift)
  x?$3576
  x?$3577
  x?$3578))
here(#(struct:vs-shift-right ... #(struct:cast ... #(struct:vs-shift-right ... #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<load-data> (#(struct:int32_t t5829)) #f #f #f int32) #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-add #(struct:sca-mul #(struct:sca-mul #(struct:int32_t t5829) #(struct:int32_t t5830)) #(struct:int32_t mat_a.extent.0)) #(struct:sca-mul #(struct:int32_t t5830) #(struct:int32_t t6653))))> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32)> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32) #(struct:cast ... #<load-data> int32 #f)> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32) (#(struct:int32_t output_multiplier)) #f #f #f int64) #(struct:int64_t (bv #x000000000000001f 64)) #t x?$2971 #t) int32 #t) (union #:size 3 #:hash -841543104781529615) #t x?$3371 #t) #(struct:vs-shift-right ... #(struct:cast ... #(struct:vs-shift-right ... #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<load-data> (#(struct:int32_t t5829)) #f #f #f int32) #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-add #(struct:sca-mul #(struct:sca-mul #(struct:int32_t t5829) #(struct:int32_t t5830)) #(struct:int32_t mat_a.extent.0)) #(struct:sca-mul #(struct:int32_t t5830) #(struct:int32_t t6653))))> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32)> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32) #(struct:cast ... #<load-data> int32 #f)> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32) (#(struct:int32_t output_multiplier)) #f #f #f int64) #(struct:int64_t (bv #x000000000000001f 64)) #t x?$2971 #t) int32 #t) #(struct:int32_t output_shift) x?$3576 x?$3577 x?$3578))

"Replace templates"
'()
run-x86-synthesizer
halide-expr:
  (vec-min
 (vec-add
  (vec-add
   (vec-shr
    (vec-cast
     (vec-max
      (vec-min
       (vec-add
        (vec-bwand
         (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
         (vec-div
          (vec-mul
           (vec-cast
            (vec-add
             (vec-add
              (vec-mul
               (vec-cast
                (load
                 (buffer column_sums_b 'uint32)
                 (ramp
                  (sca-add
                   (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                   16)
                  1
                  16)
                 (aligned 16 0))
                'int32
                16)
               (sca-broadcast (int32_t t5829) 16))
              (vec-add
               (load
                (buffer bias 'int32)
                (ramp (sca-mul output.s0.x.x 16) 1 16)
                (aligned 16 0))
               (sca-broadcast
                (sca-add
                 (sca-mul
                  (sca-mul (int32_t t5829) (int32_t t5830))
                  (int32_t mat_a.extent.0))
                 (sca-mul (int32_t t5830) (int32_t t6653)))
                16)))
             (vec-cast
              (load
               (buffer multiplied_no_offsets 'uint32)
               (ramp
                (sca-add
                 (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
                 4)
                1
                16)
               (aligned 4 0))
              'int32
              16))
            'int64
            16)
           (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
          (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
        (vec-div
         (vec-mul
          (vec-cast
           (vec-add
            (vec-add
             (vec-mul
              (vec-cast
               (load
                (buffer column_sums_b 'uint32)
                (ramp
                 (sca-add
                  (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                  16)
                 1
                 16)
                (aligned 16 0))
               'int32
               16)
              (sca-broadcast (int32_t t5829) 16))
             (vec-add
              (load
               (buffer bias 'int32)
               (ramp (sca-mul output.s0.x.x 16) 1 16)
               (aligned 16 0))
              (sca-broadcast
               (sca-add
                (sca-mul
                 (sca-mul (int32_t t5829) (int32_t t5830))
                 (int32_t mat_a.extent.0))
                (sca-mul (int32_t t5830) (int32_t t6653)))
               16)))
            (vec-cast
             (load
              (buffer multiplied_no_offsets 'uint32)
              (ramp
               (sca-add
                (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
                4)
               1
               16)
              (aligned 4 0))
             'int32
             16))
           'int64
           16)
          (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
         (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
       (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
      (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
     'int32
     16)
    (sca-broadcast (int32_t output_shift) 16))
   (vec-bwand
    (vec-if
     (sca-broadcast
      (sca-lt (int32_t (bv #x00000000 32)) (int32_t output_shift))
      16)
     (sca-broadcast (int32_t (bv #x00000001 32)) 16)
     (sca-broadcast (int32_t (bv #x00000000 32)) 16))
    (vec-shr
     (vec-cast
      (vec-max
       (vec-min
        (vec-add
         (vec-bwand
          (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
          (vec-div
           (vec-mul
            (vec-cast
             (vec-add
              (vec-add
               (vec-mul
                (vec-cast
                 (load
                  (buffer column_sums_b 'uint32)
                  (ramp
                   (sca-add
                    (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                    16)
                   1
                   16)
                  (aligned 16 0))
                 'int32
                 16)
                (sca-broadcast (int32_t t5829) 16))
               (vec-add
                (load
                 (buffer bias 'int32)
                 (ramp (sca-mul output.s0.x.x 16) 1 16)
                 (aligned 16 0))
                (sca-broadcast
                 (sca-add
                  (sca-mul
                   (sca-mul (int32_t t5829) (int32_t t5830))
                   (int32_t mat_a.extent.0))
                  (sca-mul (int32_t t5830) (int32_t t6653)))
                 16)))
              (vec-cast
               (load
                (buffer multiplied_no_offsets 'uint32)
                (ramp
                 (sca-add
                  (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
                  4)
                 1
                 16)
                (aligned 4 0))
               'int32
               16))
             'int64
             16)
            (vec-cast
             (sca-broadcast (int32_t output_multiplier) 16)
             'int64
             16))
           (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
         (vec-div
          (vec-mul
           (vec-cast
            (vec-add
             (vec-add
              (vec-mul
               (vec-cast
                (load
                 (buffer column_sums_b 'uint32)
                 (ramp
                  (sca-add
                   (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                   16)
                  1
                  16)
                 (aligned 16 0))
                'int32
                16)
               (sca-broadcast (int32_t t5829) 16))
              (vec-add
               (load
                (buffer bias 'int32)
                (ramp (sca-mul output.s0.x.x 16) 1 16)
                (aligned 16 0))
               (sca-broadcast
                (sca-add
                 (sca-mul
                  (sca-mul (int32_t t5829) (int32_t t5830))
                  (int32_t mat_a.extent.0))
                 (sca-mul (int32_t t5830) (int32_t t6653)))
                16)))
             (vec-cast
              (load
               (buffer multiplied_no_offsets 'uint32)
               (ramp
                (sca-add
                 (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
                 4)
                1
                16)
               (aligned 4 0))
              'int32
              16))
            'int64
            16)
           (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
          (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
        (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
       (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
      'int32
      16)
     (sca-broadcast
      (sca-add (int32_t output_shift) (int32_t (bv #xffffffff 32)))
      16))))
  (sca-broadcast (int32_t output_offset) 16))
 (sca-broadcast (int32_t (bv #x000000ff 32)) 16))
template:
  (vs-shift-right
 ...
 (cast
  ...
  (vs-shift-right
   ...
   (vs-mpy-add
    ...
    (vs-mpy-add
     ...
     (combine
      (vs-mpy-add
       ...
       (combine
        (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
        (vs-mpy-add
         ...
         (combine
          #<load-data>
          (broadcast
           ...
           (sca-add
            (sca-mul
             (sca-mul (int32_t t5829) (int32_t t5830))
             (int32_t mat_a.extent.0))
            (sca-mul (int32_t t5830) (int32_t t6653)))))
         (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
         #f
         #f
         #f
         'int32))
       (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
       #f
       #f
       #f
       'int32)
      (cast ... #<load-data> 'int32 #f))
     (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
     #f
     #f
     #f
     'int32)
    (list (int32_t output_multiplier))
    #f
    #f
    #f
    'int64)
   (int64_t (bv #x000000000000001f 64))
   #t
   x?$2971
   #t)
  'int32
  #t)
 (union [xi?$3573 #(struct:int32_t output_shift)] [(&& (! xi?$3573) (&& (! xi?$3574) (! xi?$3575))) #(struct:sca-add
                                                                                                      #(struct:int32_t
                                                                                                        output_shift)
                                                                                                      #(struct:int32_t
                                                                                                        (bv #xffffffff 32)))] [(&& (! xi?$3573) (|| xi?$3574 (&& xi?$3575 (! xi?$3574)))) #(struct:int64_t
                                                                                                                                                                                            (ite* (⊢ xi?$3574 (bv #x000000000000001e 64)) (⊢ (&& xi?$3575 (! xi?$3574)) (bv #x000000000000001f 64))))])
 #t
 x?$3371
 #t)
axioms:
  (list (forall (idx) (bvsle (bv #x80000001 32) (app abstr-vals$3579 idx))))
optimized-halide-expr:
  (vec-min
 (vec-add
  (vec-add
   (vec-shr #<abstr-halide-expr> (sca-broadcast (int32_t output_shift) 16))
   (vec-bwand
    (vec-if
     (sca-broadcast
      (sca-lt (int32_t (bv #x00000000 32)) (int32_t output_shift))
      16)
     (sca-broadcast (int32_t (bv #x00000001 32)) 16)
     (sca-broadcast (int32_t (bv #x00000000 32)) 16))
    (vec-shr
     #<abstr-halide-expr>
     (sca-broadcast
      (sca-add (int32_t output_shift) (int32_t (bv #xffffffff 32)))
      16))))
  (sca-broadcast (int32_t output_offset) 16))
 (sca-broadcast (int32_t (bv #x000000ff 32)) 16))
optimized-template:
  (vs-shift-right
 ...
 #<abstr-expr>
 (union [xi?$3573 #(struct:int32_t output_shift)] [(&& (! xi?$3573) (&& (! xi?$3574) (! xi?$3575))) #(struct:sca-add
                                                                                                      #(struct:int32_t
                                                                                                        output_shift)
                                                                                                      #(struct:int32_t
                                                                                                        (bv #xffffffff 32)))] [(&& (! xi?$3573) (|| xi?$3574 (&& xi?$3575 (! xi?$3574)))) #(struct:int64_t
                                                                                                                                                                                            (ite* (⊢ xi?$3574 (bv #x000000000000001e 64)) (⊢ (&& xi?$3575 (! xi?$3574)) (bv #x000000000000001f 64))))])
 #t
 x?$3371
 #t)
optimized Halide 0:
  (int32_t
 (ite (bvsle (bvadd output_offset (bvadd (bvashr (app abstr-vals$3579 0) output_shift) (bvand (ite (bvslt (bv #x00000000 32) output_shift) (bv #x00000001 32) (bv #x00000000 32)) (bvashr (app abstr-vals$3579 0) (bvadd (bv #xffffffff 32) output_shift))))) (bv #x000000ff 32)) (bvadd output_offset (bvadd (bvashr (app abstr-vals$3579 0) output_shift) (bvand (ite (bvslt (bv #x00000000 32) output_shift) (bv #x00000001 32) (bv #x00000000 32)) (bvashr (app abstr-vals$3579 0) (bvadd (bv #xffffffff 32) output_shift))))) (bv #x000000ff 32)))
optimized x86 0:
  (int32_t
 (bvadd (bvashr (app abstr-vals$3579 0) (ite* (⊢ (&& (! xi?$3573) (|| xi?$3574 (&& xi?$3575 (! xi?$3574)))) (extract 31 0 (ite* (⊢ xi?$3574 (bv #x000000000000001e 64)) (⊢ (&& xi?$3575 (! xi?$3574)) (bv #x000000000000001f 64))))) (⊢ (|| xi?$3573 (&& (! xi?$3573) (&& (! xi?$3574) (! xi?$3575)))) (ite* (⊢ xi?$3573 output_shift) (⊢ (&& (! xi?$3573) (&& (! xi?$3574) (! xi?$3575))) (bvadd (bv #xffffffff 32) output_shift)))))) (bvand (ite (bvslt (bv #x00000000 32) (ite* (⊢ (&& (! xi?$3573) (|| xi?$3574 (&& xi?$3575 (! xi?$3574)))) (extract 31 0 (ite* (⊢ xi?$3574 (bv #x000000000000001e 64)) (⊢ (&& xi?$3575 (! xi?$3574)) (bv #x000000000000001f 64))))) (⊢ (|| xi?$3573 (&& (! xi?$3573) (&& (! xi?$3574) (! xi?$3575)))) (ite* (⊢ xi?$3573 output_shift) (⊢ (&& (! xi?$3573) (&& (! xi?$3574) (! xi?$3575))) (bvadd (bv #xffffffff 32) output_shift)))))) (bv #x00000001 32) (bv #x00000000 32)) (bvashr (app abstr-vals$3579 0) (bvadd (bv #xffffffff 32) (ite* (⊢ (&& (! xi?$3573) (|| xi?$3574 (&& xi?$3575 (! xi?$3574)))) (extract 31 0 (ite* (⊢ xi?$3574 (bv #x000000000000001e 64)) (⊢ (&& xi?$3575 (! xi?$3574)) (bv #x000000000000001f 64))))) (⊢ (|| xi?$3573 (&& (! xi?$3573) (&& (! xi?$3574) (! xi?$3575)))) (ite* (⊢ xi?$3573 output_shift) (⊢ (&& (! xi?$3573) (&& (! xi?$3574) (! xi?$3575))) (bvadd (bv #xffffffff 32) output_shift))))))))))
run-x86-synthesizer
halide-expr:
  (vec-min
 (vec-add
  (vec-add
   (vec-shr
    (vec-cast
     (vec-max
      (vec-min
       (vec-add
        (vec-bwand
         (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
         (vec-div
          (vec-mul
           (vec-cast
            (vec-add
             (vec-add
              (vec-mul
               (vec-cast
                (load
                 (buffer column_sums_b 'uint32)
                 (ramp
                  (sca-add
                   (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                   16)
                  1
                  16)
                 (aligned 16 0))
                'int32
                16)
               (sca-broadcast (int32_t t5829) 16))
              (vec-add
               (load
                (buffer bias 'int32)
                (ramp (sca-mul output.s0.x.x 16) 1 16)
                (aligned 16 0))
               (sca-broadcast
                (sca-add
                 (sca-mul
                  (sca-mul (int32_t t5829) (int32_t t5830))
                  (int32_t mat_a.extent.0))
                 (sca-mul (int32_t t5830) (int32_t t6653)))
                16)))
             (vec-cast
              (load
               (buffer multiplied_no_offsets 'uint32)
               (ramp
                (sca-add
                 (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
                 4)
                1
                16)
               (aligned 4 0))
              'int32
              16))
            'int64
            16)
           (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
          (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
        (vec-div
         (vec-mul
          (vec-cast
           (vec-add
            (vec-add
             (vec-mul
              (vec-cast
               (load
                (buffer column_sums_b 'uint32)
                (ramp
                 (sca-add
                  (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                  16)
                 1
                 16)
                (aligned 16 0))
               'int32
               16)
              (sca-broadcast (int32_t t5829) 16))
             (vec-add
              (load
               (buffer bias 'int32)
               (ramp (sca-mul output.s0.x.x 16) 1 16)
               (aligned 16 0))
              (sca-broadcast
               (sca-add
                (sca-mul
                 (sca-mul (int32_t t5829) (int32_t t5830))
                 (int32_t mat_a.extent.0))
                (sca-mul (int32_t t5830) (int32_t t6653)))
               16)))
            (vec-cast
             (load
              (buffer multiplied_no_offsets 'uint32)
              (ramp
               (sca-add
                (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
                4)
               1
               16)
              (aligned 4 0))
             'int32
             16))
           'int64
           16)
          (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
         (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
       (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
      (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
     'int32
     16)
    (sca-broadcast (int32_t output_shift) 16))
   (vec-bwand
    (vec-if
     (sca-broadcast
      (sca-lt (int32_t (bv #x00000000 32)) (int32_t output_shift))
      16)
     (sca-broadcast (int32_t (bv #x00000001 32)) 16)
     (sca-broadcast (int32_t (bv #x00000000 32)) 16))
    (vec-shr
     (vec-cast
      (vec-max
       (vec-min
        (vec-add
         (vec-bwand
          (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
          (vec-div
           (vec-mul
            (vec-cast
             (vec-add
              (vec-add
               (vec-mul
                (vec-cast
                 (load
                  (buffer column_sums_b 'uint32)
                  (ramp
                   (sca-add
                    (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                    16)
                   1
                   16)
                  (aligned 16 0))
                 'int32
                 16)
                (sca-broadcast (int32_t t5829) 16))
               (vec-add
                (load
                 (buffer bias 'int32)
                 (ramp (sca-mul output.s0.x.x 16) 1 16)
                 (aligned 16 0))
                (sca-broadcast
                 (sca-add
                  (sca-mul
                   (sca-mul (int32_t t5829) (int32_t t5830))
                   (int32_t mat_a.extent.0))
                  (sca-mul (int32_t t5830) (int32_t t6653)))
                 16)))
              (vec-cast
               (load
                (buffer multiplied_no_offsets 'uint32)
                (ramp
                 (sca-add
                  (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
                  4)
                 1
                 16)
                (aligned 4 0))
               'int32
               16))
             'int64
             16)
            (vec-cast
             (sca-broadcast (int32_t output_multiplier) 16)
             'int64
             16))
           (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
         (vec-div
          (vec-mul
           (vec-cast
            (vec-add
             (vec-add
              (vec-mul
               (vec-cast
                (load
                 (buffer column_sums_b 'uint32)
                 (ramp
                  (sca-add
                   (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                   16)
                  1
                  16)
                 (aligned 16 0))
                'int32
                16)
               (sca-broadcast (int32_t t5829) 16))
              (vec-add
               (load
                (buffer bias 'int32)
                (ramp (sca-mul output.s0.x.x 16) 1 16)
                (aligned 16 0))
               (sca-broadcast
                (sca-add
                 (sca-mul
                  (sca-mul (int32_t t5829) (int32_t t5830))
                  (int32_t mat_a.extent.0))
                 (sca-mul (int32_t t5830) (int32_t t6653)))
                16)))
             (vec-cast
              (load
               (buffer multiplied_no_offsets 'uint32)
               (ramp
                (sca-add
                 (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
                 4)
                1
                16)
               (aligned 4 0))
              'int32
              16))
            'int64
            16)
           (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
          (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
        (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
       (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
      'int32
      16)
     (sca-broadcast
      (sca-add (int32_t output_shift) (int32_t (bv #xffffffff 32)))
      16))))
  (sca-broadcast (int32_t output_offset) 16))
 (sca-broadcast (int32_t (bv #x000000ff 32)) 16))
template:
  (vs-shift-right
 ...
 (cast
  ...
  (vs-shift-right
   ...
   (vs-mpy-add
    ...
    (vs-mpy-add
     ...
     (combine
      (vs-mpy-add
       ...
       (combine
        (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
        (vs-mpy-add
         ...
         (combine
          #<load-data>
          (broadcast
           ...
           (sca-add
            (sca-mul
             (sca-mul (int32_t t5829) (int32_t t5830))
             (int32_t mat_a.extent.0))
            (sca-mul (int32_t t5830) (int32_t t6653)))))
         (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
         #f
         #f
         #f
         'int32))
       (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
       #f
       #f
       #f
       'int32)
      (cast ... #<load-data> 'int32 #f))
     (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
     #f
     #f
     #f
     'int32)
    (list (int32_t output_multiplier))
    #f
    #f
    #f
    'int64)
   (int64_t (bv #x000000000000001f 64))
   #t
   x?$2971
   #t)
  'int32
  #t)
 (int32_t output_shift)
 x?$3576
 x?$3577
 x?$3578)
axioms:
  (list (forall (idx) (bvsle (bv #x80000001 32) (app abstr-vals$3580 idx))))
optimized-halide-expr:
  (vec-min
 (vec-add
  (vec-add
   (vec-shr #<abstr-halide-expr> (sca-broadcast (int32_t output_shift) 16))
   (vec-bwand
    (vec-if
     (sca-broadcast
      (sca-lt (int32_t (bv #x00000000 32)) (int32_t output_shift))
      16)
     (sca-broadcast (int32_t (bv #x00000001 32)) 16)
     (sca-broadcast (int32_t (bv #x00000000 32)) 16))
    (vec-shr
     #<abstr-halide-expr>
     (sca-broadcast
      (sca-add (int32_t output_shift) (int32_t (bv #xffffffff 32)))
      16))))
  (sca-broadcast (int32_t output_offset) 16))
 (sca-broadcast (int32_t (bv #x000000ff 32)) 16))
optimized-template:
  (vs-shift-right
 ...
 #<abstr-expr>
 (int32_t output_shift)
 x?$3576
 x?$3577
 x?$3578)
optimized Halide 0:
  (int32_t
 (ite (bvsle (bvadd output_offset (bvadd (bvashr (app abstr-vals$3580 0) output_shift) (bvand (ite (bvslt (bv #x00000000 32) output_shift) (bv #x00000001 32) (bv #x00000000 32)) (bvashr (app abstr-vals$3580 0) (bvadd (bv #xffffffff 32) output_shift))))) (bv #x000000ff 32)) (bvadd output_offset (bvadd (bvashr (app abstr-vals$3580 0) output_shift) (bvand (ite (bvslt (bv #x00000000 32) output_shift) (bv #x00000001 32) (bv #x00000000 32)) (bvashr (app abstr-vals$3580 0) (bvadd (bv #xffffffff 32) output_shift))))) (bv #x000000ff 32)))
optimized x86 0:
  (int32_t
 (ite x?$3576 (bvadd (ite x?$3578 (bvashr (app abstr-vals$3580 0) output_shift) (bvlshr (app abstr-vals$3580 0) output_shift)) (bvand (ite (bvslt (bv #x00000000 32) output_shift) (bv #x00000001 32) (bv #x00000000 32)) (ite x?$3578 (bvashr (app abstr-vals$3580 0) (bvadd (bv #xffffffff 32) output_shift)) (bvlshr (app abstr-vals$3580 0) (bvadd (bv #xffffffff 32) output_shift))))) (ite x?$3578 (bvashr (app abstr-vals$3580 0) output_shift) (bvlshr (app abstr-vals$3580 0) output_shift))))
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (vec-min
 (vec-add
  (vec-add
   (vec-shr
    (vec-cast
     (vec-max
      (vec-min
       (vec-add
        (vec-bwand
         (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
         (vec-div
          (vec-mul
           (vec-cast
            (vec-add
             (vec-add
              (vec-mul
               (vec-cast
                (load
                 (buffer column_sums_b 'uint32)
                 (ramp
                  (sca-add
                   (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                   16)
                  1
                  16)
                 (aligned 16 0))
                'int32
                16)
               (sca-broadcast (int32_t t5829) 16))
              (vec-add
               (load
                (buffer bias 'int32)
                (ramp (sca-mul output.s0.x.x 16) 1 16)
                (aligned 16 0))
               (sca-broadcast
                (sca-add
                 (sca-mul
                  (sca-mul (int32_t t5829) (int32_t t5830))
                  (int32_t mat_a.extent.0))
                 (sca-mul (int32_t t5830) (int32_t t6653)))
                16)))
             (vec-cast
              (load
               (buffer multiplied_no_offsets 'uint32)
               (ramp
                (sca-add
                 (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
                 4)
                1
                16)
               (aligned 4 0))
              'int32
              16))
            'int64
            16)
           (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
          (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
        (vec-div
         (vec-mul
          (vec-cast
           (vec-add
            (vec-add
             (vec-mul
              (vec-cast
               (load
                (buffer column_sums_b 'uint32)
                (ramp
                 (sca-add
                  (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                  16)
                 1
                 16)
                (aligned 16 0))
               'int32
               16)
              (sca-broadcast (int32_t t5829) 16))
             (vec-add
              (load
               (buffer bias 'int32)
               (ramp (sca-mul output.s0.x.x 16) 1 16)
               (aligned 16 0))
              (sca-broadcast
               (sca-add
                (sca-mul
                 (sca-mul (int32_t t5829) (int32_t t5830))
                 (int32_t mat_a.extent.0))
                (sca-mul (int32_t t5830) (int32_t t6653)))
               16)))
            (vec-cast
             (load
              (buffer multiplied_no_offsets 'uint32)
              (ramp
               (sca-add
                (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
                4)
               1
               16)
              (aligned 4 0))
             'int32
             16))
           'int64
           16)
          (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
         (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
       (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
      (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
     'int32
     16)
    (sca-broadcast (int32_t output_shift) 16))
   (vec-bwand
    (vec-if
     (sca-broadcast
      (sca-lt (int32_t (bv #x00000000 32)) (int32_t output_shift))
      16)
     (sca-broadcast (int32_t (bv #x00000001 32)) 16)
     (sca-broadcast (int32_t (bv #x00000000 32)) 16))
    (vec-shr
     (vec-cast
      (vec-max
       (vec-min
        (vec-add
         (vec-bwand
          (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
          (vec-div
           (vec-mul
            (vec-cast
             (vec-add
              (vec-add
               (vec-mul
                (vec-cast
                 (load
                  (buffer column_sums_b 'uint32)
                  (ramp
                   (sca-add
                    (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                    16)
                   1
                   16)
                  (aligned 16 0))
                 'int32
                 16)
                (sca-broadcast (int32_t t5829) 16))
               (vec-add
                (load
                 (buffer bias 'int32)
                 (ramp (sca-mul output.s0.x.x 16) 1 16)
                 (aligned 16 0))
                (sca-broadcast
                 (sca-add
                  (sca-mul
                   (sca-mul (int32_t t5829) (int32_t t5830))
                   (int32_t mat_a.extent.0))
                  (sca-mul (int32_t t5830) (int32_t t6653)))
                 16)))
              (vec-cast
               (load
                (buffer multiplied_no_offsets 'uint32)
                (ramp
                 (sca-add
                  (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
                  4)
                 1
                 16)
                (aligned 4 0))
               'int32
               16))
             'int64
             16)
            (vec-cast
             (sca-broadcast (int32_t output_multiplier) 16)
             'int64
             16))
           (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
         (vec-div
          (vec-mul
           (vec-cast
            (vec-add
             (vec-add
              (vec-mul
               (vec-cast
                (load
                 (buffer column_sums_b 'uint32)
                 (ramp
                  (sca-add
                   (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                   16)
                  1
                  16)
                 (aligned 16 0))
                'int32
                16)
               (sca-broadcast (int32_t t5829) 16))
              (vec-add
               (load
                (buffer bias 'int32)
                (ramp (sca-mul output.s0.x.x 16) 1 16)
                (aligned 16 0))
               (sca-broadcast
                (sca-add
                 (sca-mul
                  (sca-mul (int32_t t5829) (int32_t t5830))
                  (int32_t mat_a.extent.0))
                 (sca-mul (int32_t t5830) (int32_t t6653)))
                16)))
             (vec-cast
              (load
               (buffer multiplied_no_offsets 'uint32)
               (ramp
                (sca-add
                 (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
                 4)
                1
                16)
               (aligned 4 0))
              'int32
              16))
            'int64
            16)
           (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
          (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
        (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
       (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
      'int32
      16)
     (sca-broadcast
      (sca-add (int32_t output_shift) (int32_t (bv #xffffffff 32)))
      16))))
  (sca-broadcast (int32_t output_offset) 16))
 (sca-broadcast (int32_t (bv #x000000ff 32)) 16))
template:
  (minimum
 ...
 (vs-mpy-add
  ...
  (combine
   (vs-shift-right
    ...
    (cast
     ...
     (vs-shift-right
      ...
      (vs-mpy-add
       ...
       (vs-mpy-add
        ...
        (combine
         (vs-mpy-add
          ...
          (combine
           (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
           (vs-mpy-add
            ...
            (combine
             #<load-data>
             (broadcast
              ...
              (sca-add
               (sca-mul
                (sca-mul (int32_t t5829) (int32_t t5830))
                (int32_t mat_a.extent.0))
               (sca-mul (int32_t t5830) (int32_t t6653)))))
            (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
            #f
            #f
            #f
            'int32))
          (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
          #f
          #f
          #f
          'int32)
         (cast ... #<load-data> 'int32 #f))
        (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
        #f
        #f
        #f
        'int32)
       (list (int32_t output_multiplier))
       #f
       #f
       #f
       'int64)
      (int64_t (bv #x000000000000001f 64))
      #t
      x?$2971
      #t)
     'int32
     #t)
    (int32_t output_shift)
    #t
    x?$3371
    #t)
   (broadcast ... (int32_t output_offset)))
  (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
  #f
  #f
  #f
  'int32)
 (broadcast ... (int32_t (bv #x000000ff 32))))
axioms:
  (list
 #t
 (forall (idx) (&& (bvsle (app abstr-vals$3582 idx) (bv #x000000ff 32)) (bvsle (bv #x000000ff 32) (app abstr-vals$3582 idx)))))
optimized-halide-expr:
  (vec-min #<abstr-halide-expr> #<abstr-halide-expr>)
optimized-template:
  (minimum ... #<abstr-expr> #<abstr-expr>)
optimized Halide 0:
  (int32_t
 (ite (bvsle (app abstr-vals$3581 0) (app abstr-vals$3582 0)) (app abstr-vals$3581 0) (app abstr-vals$3582 0)))
optimized x86 0:
  (int32_t
 (ite (bvsle (app abstr-vals$3581 0) (app abstr-vals$3582 0)) (app abstr-vals$3581 0) (app abstr-vals$3582 0)))
Ran synthesizer for 49 ms
(model)
(vec-min #<abstr-halide-expr> #<abstr-halide-expr>)
(minimum
 ...
 (vs-mpy-add
  ...
  (combine
   (vs-shift-right
    ...
    (cast
     ...
     (vs-shift-right
      ...
      (vs-mpy-add
       ...
       (vs-mpy-add
        ...
        (combine
         (vs-mpy-add
          ...
          (combine
           (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
           (vs-mpy-add
            ...
            (combine
             #<load-data>
             (broadcast
              ...
              (sca-add
               (sca-mul
                (sca-mul (int32_t t5829) (int32_t t5830))
                (int32_t mat_a.extent.0))
               (sca-mul (int32_t t5830) (int32_t t6653)))))
            (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
            #f
            #f
            #f
            'int32))
          (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
          #f
          #f
          #f
          'int32)
         (cast ... #<load-data> 'int32 #f))
        (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
        #f
        #f
        #f
        'int32)
       (list (int32_t output_multiplier))
       #f
       #f
       #f
       'int64)
      (int64_t (bv #x000000000000001f 64))
      #t
      x?$2971
      #t)
     'int32
     #t)
    (int32_t output_shift)
    #t
    x?$3371
    #t)
   (broadcast ... (int32_t output_offset)))
  (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
  #f
  #f
  #f
  'int32)
 (broadcast ... (int32_t (bv #x000000ff 32))))
Ran bounds analysis for 45 ms
Ran bounds analysis for 34 ms
"Extended success?"
#t
(minimum
 ...
 (vs-mpy-add
  ...
  (combine
   (vs-shift-right
    ...
    (cast
     ...
     (vs-shift-right
      ...
      (vs-mpy-add
       ...
       (vs-mpy-add
        ...
        (combine
         (vs-mpy-add
          ...
          (combine
           (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
           (vs-mpy-add
            ...
            (combine
             #<load-data>
             (broadcast
              ...
              (sca-add
               (sca-mul
                (sca-mul (int32_t t5829) (int32_t t5830))
                (int32_t mat_a.extent.0))
               (sca-mul (int32_t t5830) (int32_t t6653)))))
            (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
            #f
            #f
            #f
            'int32))
          (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
          #f
          #f
          #f
          'int32)
         (cast ... #<load-data> 'int32 #f))
        (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
        #f
        #f
        #f
        'int32)
       (list (int32_t output_multiplier))
       #f
       #f
       #f
       'int64)
      (int64_t (bv #x000000000000001f 64))
      #t
      x?$2971
      #t)
     'int32
     #t)
    (int32_t output_shift)
    #t
    x?$3371
    #t)
   (broadcast ... (int32_t output_offset)))
  (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
  #f
  #f
  #f
  'int32)
 (broadcast ... (int32_t (bv #x000000ff 32))))
"Building Expr:"
(vec-max
 (vec-min
  (vec-add
   (vec-add
    (vec-shr
     (vec-cast
      (vec-max
       (vec-min
        (vec-add
         (vec-bwand
          (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
          (vec-div
           (vec-mul
            (vec-cast
             (vec-add
              (vec-add
               (vec-mul
                (vec-cast
                 (load
                  (buffer column_sums_b 'uint32)
                  (ramp
                   (sca-add
                    (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                    16)
                   1
                   16)
                  (aligned 16 0))
                 'int32
                 16)
                (sca-broadcast (int32_t t5829) 16))
               (vec-add
                (load
                 (buffer bias 'int32)
                 (ramp (sca-mul output.s0.x.x 16) 1 16)
                 (aligned 16 0))
                (sca-broadcast
                 (sca-add
                  (sca-mul
                   (sca-mul (int32_t t5829) (int32_t t5830))
                   (int32_t mat_a.extent.0))
                  (sca-mul (int32_t t5830) (int32_t t6653)))
                 16)))
              (vec-cast
               (load
                (buffer multiplied_no_offsets 'uint32)
                (ramp
                 (sca-add
                  (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
                  4)
                 1
                 16)
                (aligned 4 0))
               'int32
               16))
             'int64
             16)
            (vec-cast
             (sca-broadcast (int32_t output_multiplier) 16)
             'int64
             16))
           (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
         (vec-div
          (vec-mul
           (vec-cast
            (vec-add
             (vec-add
              (vec-mul
               (vec-cast
                (load
                 (buffer column_sums_b 'uint32)
                 (ramp
                  (sca-add
                   (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                   16)
                  1
                  16)
                 (aligned 16 0))
                'int32
                16)
               (sca-broadcast (int32_t t5829) 16))
              (vec-add
               (load
                (buffer bias 'int32)
                (ramp (sca-mul output.s0.x.x 16) 1 16)
                (aligned 16 0))
               (sca-broadcast
                (sca-add
                 (sca-mul
                  (sca-mul (int32_t t5829) (int32_t t5830))
                  (int32_t mat_a.extent.0))
                 (sca-mul (int32_t t5830) (int32_t t6653)))
                16)))
             (vec-cast
              (load
               (buffer multiplied_no_offsets 'uint32)
               (ramp
                (sca-add
                 (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
                 4)
                1
                16)
               (aligned 4 0))
              'int32
              16))
            'int64
            16)
           (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
          (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
        (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
       (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
      'int32
      16)
     (sca-broadcast (int32_t output_shift) 16))
    (vec-bwand
     (vec-if
      (sca-broadcast
       (sca-lt (int32_t (bv #x00000000 32)) (int32_t output_shift))
       16)
      (sca-broadcast (int32_t (bv #x00000001 32)) 16)
      (sca-broadcast (int32_t (bv #x00000000 32)) 16))
     (vec-shr
      (vec-cast
       (vec-max
        (vec-min
         (vec-add
          (vec-bwand
           (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
           (vec-div
            (vec-mul
             (vec-cast
              (vec-add
               (vec-add
                (vec-mul
                 (vec-cast
                  (load
                   (buffer column_sums_b 'uint32)
                   (ramp
                    (sca-add
                     (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                     16)
                    1
                    16)
                   (aligned 16 0))
                  'int32
                  16)
                 (sca-broadcast (int32_t t5829) 16))
                (vec-add
                 (load
                  (buffer bias 'int32)
                  (ramp (sca-mul output.s0.x.x 16) 1 16)
                  (aligned 16 0))
                 (sca-broadcast
                  (sca-add
                   (sca-mul
                    (sca-mul (int32_t t5829) (int32_t t5830))
                    (int32_t mat_a.extent.0))
                   (sca-mul (int32_t t5830) (int32_t t6653)))
                  16)))
               (vec-cast
                (load
                 (buffer multiplied_no_offsets 'uint32)
                 (ramp
                  (sca-add
                   (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
                   4)
                  1
                  16)
                 (aligned 4 0))
                'int32
                16))
              'int64
              16)
             (vec-cast
              (sca-broadcast (int32_t output_multiplier) 16)
              'int64
              16))
            (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
          (vec-div
           (vec-mul
            (vec-cast
             (vec-add
              (vec-add
               (vec-mul
                (vec-cast
                 (load
                  (buffer column_sums_b 'uint32)
                  (ramp
                   (sca-add
                    (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                    16)
                   1
                   16)
                  (aligned 16 0))
                 'int32
                 16)
                (sca-broadcast (int32_t t5829) 16))
               (vec-add
                (load
                 (buffer bias 'int32)
                 (ramp (sca-mul output.s0.x.x 16) 1 16)
                 (aligned 16 0))
                (sca-broadcast
                 (sca-add
                  (sca-mul
                   (sca-mul (int32_t t5829) (int32_t t5830))
                   (int32_t mat_a.extent.0))
                  (sca-mul (int32_t t5830) (int32_t t6653)))
                 16)))
              (vec-cast
               (load
                (buffer multiplied_no_offsets 'uint32)
                (ramp
                 (sca-add
                  (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
                  4)
                 1
                 16)
                (aligned 4 0))
               'int32
               16))
             'int64
             16)
            (vec-cast
             (sca-broadcast (int32_t output_multiplier) 16)
             'int64
             16))
           (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
         (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
        (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
       'int32
       16)
      (sca-broadcast
       (sca-add (int32_t output_shift) (int32_t (bv #xffffffff 32)))
       16))))
   (sca-broadcast (int32_t output_offset) 16))
  (sca-broadcast (int32_t (bv #x000000ff 32)) 16))
 (sca-broadcast (int32_t (bv #x00000000 32)) 16))
"Fold templates"
'()
here()

"Replace templates"
(list
 (cast
  ...
  (vs-mpy-add
   ...
   (combine
    (vs-shift-right
     ...
     (cast
      ...
      (vs-shift-right
       ...
       (vs-mpy-add
        ...
        (vs-mpy-add
         ...
         (combine
          (vs-mpy-add
           ...
           (combine
            (vs-mpy-add
             ...
             #<load-data>
             (list (int32_t t5829))
             #f
             #f
             #f
             'int32)
            (vs-mpy-add
             ...
             (combine
              #<load-data>
              (broadcast
               ...
               (sca-add
                (sca-mul
                 (sca-mul (int32_t t5829) (int32_t t5830))
                 (int32_t mat_a.extent.0))
                (sca-mul (int32_t t5830) (int32_t t6653)))))
             (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
             #f
             #f
             #f
             'int32))
           (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
           #f
           #f
           #f
           'int32)
          (cast ... #<load-data> 'int32 #f))
         (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
         #f
         #f
         #f
         'int32)
        (list (int32_t output_multiplier))
        #f
        #f
        #f
        'int64)
       (int64_t (bv #x000000000000001f 64))
       #t
       x?$2971
       #t)
      'int32
      #t)
     (int32_t output_shift)
     #t
     x?$3371
     #t)
    (broadcast ... (int32_t output_offset)))
   (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
   #f
   #f
   #f
   'int32)
  'int32
  #t)
 (cast ... (broadcast ... (int32_t (bv #x000000ff 32))) 'int32 #t))
run-x86-synthesizer
halide-expr:
  (vec-max
 (vec-min
  (vec-add
   (vec-add
    (vec-shr
     (vec-cast
      (vec-max
       (vec-min
        (vec-add
         (vec-bwand
          (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
          (vec-div
           (vec-mul
            (vec-cast
             (vec-add
              (vec-add
               (vec-mul
                (vec-cast
                 (load
                  (buffer column_sums_b 'uint32)
                  (ramp
                   (sca-add
                    (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                    16)
                   1
                   16)
                  (aligned 16 0))
                 'int32
                 16)
                (sca-broadcast (int32_t t5829) 16))
               (vec-add
                (load
                 (buffer bias 'int32)
                 (ramp (sca-mul output.s0.x.x 16) 1 16)
                 (aligned 16 0))
                (sca-broadcast
                 (sca-add
                  (sca-mul
                   (sca-mul (int32_t t5829) (int32_t t5830))
                   (int32_t mat_a.extent.0))
                  (sca-mul (int32_t t5830) (int32_t t6653)))
                 16)))
              (vec-cast
               (load
                (buffer multiplied_no_offsets 'uint32)
                (ramp
                 (sca-add
                  (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
                  4)
                 1
                 16)
                (aligned 4 0))
               'int32
               16))
             'int64
             16)
            (vec-cast
             (sca-broadcast (int32_t output_multiplier) 16)
             'int64
             16))
           (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
         (vec-div
          (vec-mul
           (vec-cast
            (vec-add
             (vec-add
              (vec-mul
               (vec-cast
                (load
                 (buffer column_sums_b 'uint32)
                 (ramp
                  (sca-add
                   (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                   16)
                  1
                  16)
                 (aligned 16 0))
                'int32
                16)
               (sca-broadcast (int32_t t5829) 16))
              (vec-add
               (load
                (buffer bias 'int32)
                (ramp (sca-mul output.s0.x.x 16) 1 16)
                (aligned 16 0))
               (sca-broadcast
                (sca-add
                 (sca-mul
                  (sca-mul (int32_t t5829) (int32_t t5830))
                  (int32_t mat_a.extent.0))
                 (sca-mul (int32_t t5830) (int32_t t6653)))
                16)))
             (vec-cast
              (load
               (buffer multiplied_no_offsets 'uint32)
               (ramp
                (sca-add
                 (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
                 4)
                1
                16)
               (aligned 4 0))
              'int32
              16))
            'int64
            16)
           (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
          (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
        (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
       (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
      'int32
      16)
     (sca-broadcast (int32_t output_shift) 16))
    (vec-bwand
     (vec-if
      (sca-broadcast
       (sca-lt (int32_t (bv #x00000000 32)) (int32_t output_shift))
       16)
      (sca-broadcast (int32_t (bv #x00000001 32)) 16)
      (sca-broadcast (int32_t (bv #x00000000 32)) 16))
     (vec-shr
      (vec-cast
       (vec-max
        (vec-min
         (vec-add
          (vec-bwand
           (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
           (vec-div
            (vec-mul
             (vec-cast
              (vec-add
               (vec-add
                (vec-mul
                 (vec-cast
                  (load
                   (buffer column_sums_b 'uint32)
                   (ramp
                    (sca-add
                     (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                     16)
                    1
                    16)
                   (aligned 16 0))
                  'int32
                  16)
                 (sca-broadcast (int32_t t5829) 16))
                (vec-add
                 (load
                  (buffer bias 'int32)
                  (ramp (sca-mul output.s0.x.x 16) 1 16)
                  (aligned 16 0))
                 (sca-broadcast
                  (sca-add
                   (sca-mul
                    (sca-mul (int32_t t5829) (int32_t t5830))
                    (int32_t mat_a.extent.0))
                   (sca-mul (int32_t t5830) (int32_t t6653)))
                  16)))
               (vec-cast
                (load
                 (buffer multiplied_no_offsets 'uint32)
                 (ramp
                  (sca-add
                   (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
                   4)
                  1
                  16)
                 (aligned 4 0))
                'int32
                16))
              'int64
              16)
             (vec-cast
              (sca-broadcast (int32_t output_multiplier) 16)
              'int64
              16))
            (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
          (vec-div
           (vec-mul
            (vec-cast
             (vec-add
              (vec-add
               (vec-mul
                (vec-cast
                 (load
                  (buffer column_sums_b 'uint32)
                  (ramp
                   (sca-add
                    (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                    16)
                   1
                   16)
                  (aligned 16 0))
                 'int32
                 16)
                (sca-broadcast (int32_t t5829) 16))
               (vec-add
                (load
                 (buffer bias 'int32)
                 (ramp (sca-mul output.s0.x.x 16) 1 16)
                 (aligned 16 0))
                (sca-broadcast
                 (sca-add
                  (sca-mul
                   (sca-mul (int32_t t5829) (int32_t t5830))
                   (int32_t mat_a.extent.0))
                  (sca-mul (int32_t t5830) (int32_t t6653)))
                 16)))
              (vec-cast
               (load
                (buffer multiplied_no_offsets 'uint32)
                (ramp
                 (sca-add
                  (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
                  4)
                 1
                 16)
                (aligned 4 0))
               'int32
               16))
             'int64
             16)
            (vec-cast
             (sca-broadcast (int32_t output_multiplier) 16)
             'int64
             16))
           (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
         (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
        (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
       'int32
       16)
      (sca-broadcast
       (sca-add (int32_t output_shift) (int32_t (bv #xffffffff 32)))
       16))))
   (sca-broadcast (int32_t output_offset) 16))
  (sca-broadcast (int32_t (bv #x000000ff 32)) 16))
 (sca-broadcast (int32_t (bv #x00000000 32)) 16))
template:
  (cast ... (broadcast ... (int32_t (bv #x000000ff 32))) 'int32 #t)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$3590 idx) (bv #x000000ff 32)) (bvsle (bv #x000000ff 32) (app abstr-vals$3590 idx)))))
optimized-halide-expr:
  (vec-max
 (vec-min
  (vec-add
   (vec-add
    (vec-shr
     (vec-cast
      (vec-max
       (vec-min
        (vec-add
         (vec-bwand
          (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
          (vec-div
           (vec-mul
            (vec-cast
             (vec-add
              (vec-add
               (vec-mul
                (vec-cast
                 (load
                  (buffer column_sums_b 'uint32)
                  (ramp
                   (sca-add
                    (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                    16)
                   1
                   16)
                  (aligned 16 0))
                 'int32
                 16)
                (sca-broadcast (int32_t t5829) 16))
               (vec-add
                (load
                 (buffer bias 'int32)
                 (ramp (sca-mul output.s0.x.x 16) 1 16)
                 (aligned 16 0))
                (sca-broadcast
                 (sca-add
                  (sca-mul
                   (sca-mul (int32_t t5829) (int32_t t5830))
                   (int32_t mat_a.extent.0))
                  (sca-mul (int32_t t5830) (int32_t t6653)))
                 16)))
              (vec-cast
               (load
                (buffer multiplied_no_offsets 'uint32)
                (ramp
                 (sca-add
                  (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
                  4)
                 1
                 16)
                (aligned 4 0))
               'int32
               16))
             'int64
             16)
            (vec-cast
             (sca-broadcast (int32_t output_multiplier) 16)
             'int64
             16))
           (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
         (vec-div
          (vec-mul
           (vec-cast
            (vec-add
             (vec-add
              (vec-mul
               (vec-cast
                (load
                 (buffer column_sums_b 'uint32)
                 (ramp
                  (sca-add
                   (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                   16)
                  1
                  16)
                 (aligned 16 0))
                'int32
                16)
               (sca-broadcast (int32_t t5829) 16))
              (vec-add
               (load
                (buffer bias 'int32)
                (ramp (sca-mul output.s0.x.x 16) 1 16)
                (aligned 16 0))
               (sca-broadcast
                (sca-add
                 (sca-mul
                  (sca-mul (int32_t t5829) (int32_t t5830))
                  (int32_t mat_a.extent.0))
                 (sca-mul (int32_t t5830) (int32_t t6653)))
                16)))
             (vec-cast
              (load
               (buffer multiplied_no_offsets 'uint32)
               (ramp
                (sca-add
                 (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
                 4)
                1
                16)
               (aligned 4 0))
              'int32
              16))
            'int64
            16)
           (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
          (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
        (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
       (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
      'int32
      16)
     (sca-broadcast (int32_t output_shift) 16))
    (vec-bwand
     (vec-if
      (sca-broadcast
       (sca-lt (int32_t (bv #x00000000 32)) (int32_t output_shift))
       16)
      (sca-broadcast (int32_t (bv #x00000001 32)) 16)
      (sca-broadcast (int32_t (bv #x00000000 32)) 16))
     (vec-shr
      (vec-cast
       (vec-max
        (vec-min
         (vec-add
          (vec-bwand
           (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
           (vec-div
            (vec-mul
             (vec-cast
              (vec-add
               (vec-add
                (vec-mul
                 (vec-cast
                  (load
                   (buffer column_sums_b 'uint32)
                   (ramp
                    (sca-add
                     (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                     16)
                    1
                    16)
                   (aligned 16 0))
                  'int32
                  16)
                 (sca-broadcast (int32_t t5829) 16))
                (vec-add
                 (load
                  (buffer bias 'int32)
                  (ramp (sca-mul output.s0.x.x 16) 1 16)
                  (aligned 16 0))
                 (sca-broadcast
                  (sca-add
                   (sca-mul
                    (sca-mul (int32_t t5829) (int32_t t5830))
                    (int32_t mat_a.extent.0))
                   (sca-mul (int32_t t5830) (int32_t t6653)))
                  16)))
               (vec-cast
                (load
                 (buffer multiplied_no_offsets 'uint32)
                 (ramp
                  (sca-add
                   (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
                   4)
                  1
                  16)
                 (aligned 4 0))
                'int32
                16))
              'int64
              16)
             (vec-cast
              (sca-broadcast (int32_t output_multiplier) 16)
              'int64
              16))
            (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
          (vec-div
           (vec-mul
            (vec-cast
             (vec-add
              (vec-add
               (vec-mul
                (vec-cast
                 (load
                  (buffer column_sums_b 'uint32)
                  (ramp
                   (sca-add
                    (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                    16)
                   1
                   16)
                  (aligned 16 0))
                 'int32
                 16)
                (sca-broadcast (int32_t t5829) 16))
               (vec-add
                (load
                 (buffer bias 'int32)
                 (ramp (sca-mul output.s0.x.x 16) 1 16)
                 (aligned 16 0))
                (sca-broadcast
                 (sca-add
                  (sca-mul
                   (sca-mul (int32_t t5829) (int32_t t5830))
                   (int32_t mat_a.extent.0))
                  (sca-mul (int32_t t5830) (int32_t t6653)))
                 16)))
              (vec-cast
               (load
                (buffer multiplied_no_offsets 'uint32)
                (ramp
                 (sca-add
                  (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
                  4)
                 1
                 16)
                (aligned 4 0))
               'int32
               16))
             'int64
             16)
            (vec-cast
             (sca-broadcast (int32_t output_multiplier) 16)
             'int64
             16))
           (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
         (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
        (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
       'int32
       16)
      (sca-broadcast
       (sca-add (int32_t output_shift) (int32_t (bv #xffffffff 32)))
       16))))
   (sca-broadcast (int32_t output_offset) 16))
  #<abstr-halide-expr>)
 (sca-broadcast (int32_t (bv #x00000000 32)) 16))
optimized-template:
  (cast ... #<abstr-expr> 'int32 #t)
optimized Halide 0:
  (int32_t
 (ite (bvsle (bv #x00000000 32) (ite (bvsle (bvadd output_offset (bvadd (bvashr (extract 31 0 (ite (bvsle (bv #xffffffff80000000 64) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64))) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bv #xffffffff80000000 64))) output_shift) (bvand (bvashr (extract 31 0 (ite (bvsle (bv #xffffffff80000000 64) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64))) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bv #xffffffff80000000 64))) (bvadd (bv #xffffffff 32) output_shift)) (ite (bvslt (bv #x00000000 32) output_shift) (bv #x00000001 32) (bv #x00000000 32))))) (app abstr-vals$3590 0)) (bvadd output_offset (bvadd (bvashr (extract 31 0 (ite (bvsle (bv #xffffffff80000000 64) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64))) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bv #xffffffff80000000 64))) output_shift) (bvand (bvashr (extract 31 0 (ite (bvsle (bv #xffffffff80000000 64) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64))) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bv #xffffffff80000000 64))) (bvadd (bv #xffffffff 32) output_shift)) (ite (bvslt (bv #x00000000 32) output_shift) (bv #x00000001 32) (bv #x00000000 32))))) (app abstr-vals$3590 0))) (ite (bvsle (bvadd output_offset (bvadd (bvashr (extract 31 0 (ite (bvsle (bv #xffffffff80000000 64) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64))) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bv #xffffffff80000000 64))) output_shift) (bvand (bvashr (extract 31 0 (ite (bvsle (bv #xffffffff80000000 64) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64))) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bv #xffffffff80000000 64))) (bvadd (bv #xffffffff 32) output_shift)) (ite (bvslt (bv #x00000000 32) output_shift) (bv #x00000001 32) (bv #x00000000 32))))) (app abstr-vals$3590 0)) (bvadd output_offset (bvadd (bvashr (extract 31 0 (ite (bvsle (bv #xffffffff80000000 64) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64))) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bv #xffffffff80000000 64))) output_shift) (bvand (bvashr (extract 31 0 (ite (bvsle (bv #xffffffff80000000 64) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64))) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bv #xffffffff80000000 64))) (bvadd (bv #xffffffff 32) output_shift)) (ite (bvslt (bv #x00000000 32) output_shift) (bv #x00000001 32) (bv #x00000000 32))))) (app abstr-vals$3590 0)) (bv #x00000000 32)))
optimized x86 0:
  (int32_t (app abstr-vals$3590 0))
run-x86-synthesizer
halide-expr:
  (vec-max
 (vec-min
  (vec-add
   (vec-add
    (vec-shr
     (vec-cast
      (vec-max
       (vec-min
        (vec-add
         (vec-bwand
          (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
          (vec-div
           (vec-mul
            (vec-cast
             (vec-add
              (vec-add
               (vec-mul
                (vec-cast
                 (load
                  (buffer column_sums_b 'uint32)
                  (ramp
                   (sca-add
                    (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                    16)
                   1
                   16)
                  (aligned 16 0))
                 'int32
                 16)
                (sca-broadcast (int32_t t5829) 16))
               (vec-add
                (load
                 (buffer bias 'int32)
                 (ramp (sca-mul output.s0.x.x 16) 1 16)
                 (aligned 16 0))
                (sca-broadcast
                 (sca-add
                  (sca-mul
                   (sca-mul (int32_t t5829) (int32_t t5830))
                   (int32_t mat_a.extent.0))
                  (sca-mul (int32_t t5830) (int32_t t6653)))
                 16)))
              (vec-cast
               (load
                (buffer multiplied_no_offsets 'uint32)
                (ramp
                 (sca-add
                  (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
                  4)
                 1
                 16)
                (aligned 4 0))
               'int32
               16))
             'int64
             16)
            (vec-cast
             (sca-broadcast (int32_t output_multiplier) 16)
             'int64
             16))
           (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
         (vec-div
          (vec-mul
           (vec-cast
            (vec-add
             (vec-add
              (vec-mul
               (vec-cast
                (load
                 (buffer column_sums_b 'uint32)
                 (ramp
                  (sca-add
                   (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                   16)
                  1
                  16)
                 (aligned 16 0))
                'int32
                16)
               (sca-broadcast (int32_t t5829) 16))
              (vec-add
               (load
                (buffer bias 'int32)
                (ramp (sca-mul output.s0.x.x 16) 1 16)
                (aligned 16 0))
               (sca-broadcast
                (sca-add
                 (sca-mul
                  (sca-mul (int32_t t5829) (int32_t t5830))
                  (int32_t mat_a.extent.0))
                 (sca-mul (int32_t t5830) (int32_t t6653)))
                16)))
             (vec-cast
              (load
               (buffer multiplied_no_offsets 'uint32)
               (ramp
                (sca-add
                 (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
                 4)
                1
                16)
               (aligned 4 0))
              'int32
              16))
            'int64
            16)
           (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
          (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
        (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
       (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
      'int32
      16)
     (sca-broadcast (int32_t output_shift) 16))
    (vec-bwand
     (vec-if
      (sca-broadcast
       (sca-lt (int32_t (bv #x00000000 32)) (int32_t output_shift))
       16)
      (sca-broadcast (int32_t (bv #x00000001 32)) 16)
      (sca-broadcast (int32_t (bv #x00000000 32)) 16))
     (vec-shr
      (vec-cast
       (vec-max
        (vec-min
         (vec-add
          (vec-bwand
           (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
           (vec-div
            (vec-mul
             (vec-cast
              (vec-add
               (vec-add
                (vec-mul
                 (vec-cast
                  (load
                   (buffer column_sums_b 'uint32)
                   (ramp
                    (sca-add
                     (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                     16)
                    1
                    16)
                   (aligned 16 0))
                  'int32
                  16)
                 (sca-broadcast (int32_t t5829) 16))
                (vec-add
                 (load
                  (buffer bias 'int32)
                  (ramp (sca-mul output.s0.x.x 16) 1 16)
                  (aligned 16 0))
                 (sca-broadcast
                  (sca-add
                   (sca-mul
                    (sca-mul (int32_t t5829) (int32_t t5830))
                    (int32_t mat_a.extent.0))
                   (sca-mul (int32_t t5830) (int32_t t6653)))
                  16)))
               (vec-cast
                (load
                 (buffer multiplied_no_offsets 'uint32)
                 (ramp
                  (sca-add
                   (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
                   4)
                  1
                  16)
                 (aligned 4 0))
                'int32
                16))
              'int64
              16)
             (vec-cast
              (sca-broadcast (int32_t output_multiplier) 16)
              'int64
              16))
            (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
          (vec-div
           (vec-mul
            (vec-cast
             (vec-add
              (vec-add
               (vec-mul
                (vec-cast
                 (load
                  (buffer column_sums_b 'uint32)
                  (ramp
                   (sca-add
                    (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                    16)
                   1
                   16)
                  (aligned 16 0))
                 'int32
                 16)
                (sca-broadcast (int32_t t5829) 16))
               (vec-add
                (load
                 (buffer bias 'int32)
                 (ramp (sca-mul output.s0.x.x 16) 1 16)
                 (aligned 16 0))
                (sca-broadcast
                 (sca-add
                  (sca-mul
                   (sca-mul (int32_t t5829) (int32_t t5830))
                   (int32_t mat_a.extent.0))
                  (sca-mul (int32_t t5830) (int32_t t6653)))
                 16)))
              (vec-cast
               (load
                (buffer multiplied_no_offsets 'uint32)
                (ramp
                 (sca-add
                  (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
                  4)
                 1
                 16)
                (aligned 4 0))
               'int32
               16))
             'int64
             16)
            (vec-cast
             (sca-broadcast (int32_t output_multiplier) 16)
             'int64
             16))
           (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
         (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
        (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
       'int32
       16)
      (sca-broadcast
       (sca-add (int32_t output_shift) (int32_t (bv #xffffffff 32)))
       16))))
   (sca-broadcast (int32_t output_offset) 16))
  (sca-broadcast (int32_t (bv #x000000ff 32)) 16))
 (sca-broadcast (int32_t (bv #x00000000 32)) 16))
template:
  (cast
 ...
 (vs-mpy-add
  ...
  (combine
   (vs-shift-right
    ...
    (cast
     ...
     (vs-shift-right
      ...
      (vs-mpy-add
       ...
       (vs-mpy-add
        ...
        (combine
         (vs-mpy-add
          ...
          (combine
           (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
           (vs-mpy-add
            ...
            (combine
             #<load-data>
             (broadcast
              ...
              (sca-add
               (sca-mul
                (sca-mul (int32_t t5829) (int32_t t5830))
                (int32_t mat_a.extent.0))
               (sca-mul (int32_t t5830) (int32_t t6653)))))
            (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
            #f
            #f
            #f
            'int32))
          (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
          #f
          #f
          #f
          'int32)
         (cast ... #<load-data> 'int32 #f))
        (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
        #f
        #f
        #f
        'int32)
       (list (int32_t output_multiplier))
       #f
       #f
       #f
       'int64)
      (int64_t (bv #x000000000000001f 64))
      #t
      x?$2971
      #t)
     'int32
     #t)
    (int32_t output_shift)
    #t
    x?$3371
    #t)
   (broadcast ... (int32_t output_offset)))
  (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
  #f
  #f
  #f
  'int32)
 'int32
 #t)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-max
 (vec-min #<abstr-halide-expr> (sca-broadcast (int32_t (bv #x000000ff 32)) 16))
 (sca-broadcast (int32_t (bv #x00000000 32)) 16))
optimized-template:
  (cast ... #<abstr-expr> 'int32 #t)
optimized Halide 0:
  (int32_t
 (ite (bvsle (bv #x00000000 32) (ite (bvsle (app abstr-vals$3591 0) (bv #x000000ff 32)) (app abstr-vals$3591 0) (bv #x000000ff 32))) (ite (bvsle (app abstr-vals$3591 0) (bv #x000000ff 32)) (app abstr-vals$3591 0) (bv #x000000ff 32)) (bv #x00000000 32)))
optimized x86 0:
  (int32_t (app abstr-vals$3591 0))
Ran synthesizer for 60 ms
(unsat)
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (vec-max
 (vec-min
  (vec-add
   (vec-add
    (vec-shr
     (vec-cast
      (vec-max
       (vec-min
        (vec-add
         (vec-bwand
          (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
          (vec-div
           (vec-mul
            (vec-cast
             (vec-add
              (vec-add
               (vec-mul
                (vec-cast
                 (load
                  (buffer column_sums_b 'uint32)
                  (ramp
                   (sca-add
                    (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                    16)
                   1
                   16)
                  (aligned 16 0))
                 'int32
                 16)
                (sca-broadcast (int32_t t5829) 16))
               (vec-add
                (load
                 (buffer bias 'int32)
                 (ramp (sca-mul output.s0.x.x 16) 1 16)
                 (aligned 16 0))
                (sca-broadcast
                 (sca-add
                  (sca-mul
                   (sca-mul (int32_t t5829) (int32_t t5830))
                   (int32_t mat_a.extent.0))
                  (sca-mul (int32_t t5830) (int32_t t6653)))
                 16)))
              (vec-cast
               (load
                (buffer multiplied_no_offsets 'uint32)
                (ramp
                 (sca-add
                  (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
                  4)
                 1
                 16)
                (aligned 4 0))
               'int32
               16))
             'int64
             16)
            (vec-cast
             (sca-broadcast (int32_t output_multiplier) 16)
             'int64
             16))
           (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
         (vec-div
          (vec-mul
           (vec-cast
            (vec-add
             (vec-add
              (vec-mul
               (vec-cast
                (load
                 (buffer column_sums_b 'uint32)
                 (ramp
                  (sca-add
                   (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                   16)
                  1
                  16)
                 (aligned 16 0))
                'int32
                16)
               (sca-broadcast (int32_t t5829) 16))
              (vec-add
               (load
                (buffer bias 'int32)
                (ramp (sca-mul output.s0.x.x 16) 1 16)
                (aligned 16 0))
               (sca-broadcast
                (sca-add
                 (sca-mul
                  (sca-mul (int32_t t5829) (int32_t t5830))
                  (int32_t mat_a.extent.0))
                 (sca-mul (int32_t t5830) (int32_t t6653)))
                16)))
             (vec-cast
              (load
               (buffer multiplied_no_offsets 'uint32)
               (ramp
                (sca-add
                 (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
                 4)
                1
                16)
               (aligned 4 0))
              'int32
              16))
            'int64
            16)
           (vec-cast (sca-broadcast (int32_t output_multiplier) 16) 'int64 16))
          (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
        (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
       (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
      'int32
      16)
     (sca-broadcast (int32_t output_shift) 16))
    (vec-bwand
     (vec-if
      (sca-broadcast
       (sca-lt (int32_t (bv #x00000000 32)) (int32_t output_shift))
       16)
      (sca-broadcast (int32_t (bv #x00000001 32)) 16)
      (sca-broadcast (int32_t (bv #x00000000 32)) 16))
     (vec-shr
      (vec-cast
       (vec-max
        (vec-min
         (vec-add
          (vec-bwand
           (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
           (vec-div
            (vec-mul
             (vec-cast
              (vec-add
               (vec-add
                (vec-mul
                 (vec-cast
                  (load
                   (buffer column_sums_b 'uint32)
                   (ramp
                    (sca-add
                     (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                     16)
                    1
                    16)
                   (aligned 16 0))
                  'int32
                  16)
                 (sca-broadcast (int32_t t5829) 16))
                (vec-add
                 (load
                  (buffer bias 'int32)
                  (ramp (sca-mul output.s0.x.x 16) 1 16)
                  (aligned 16 0))
                 (sca-broadcast
                  (sca-add
                   (sca-mul
                    (sca-mul (int32_t t5829) (int32_t t5830))
                    (int32_t mat_a.extent.0))
                   (sca-mul (int32_t t5830) (int32_t t6653)))
                  16)))
               (vec-cast
                (load
                 (buffer multiplied_no_offsets 'uint32)
                 (ramp
                  (sca-add
                   (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
                   4)
                  1
                  16)
                 (aligned 4 0))
                'int32
                16))
              'int64
              16)
             (vec-cast
              (sca-broadcast (int32_t output_multiplier) 16)
              'int64
              16))
            (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
          (vec-div
           (vec-mul
            (vec-cast
             (vec-add
              (vec-add
               (vec-mul
                (vec-cast
                 (load
                  (buffer column_sums_b 'uint32)
                  (ramp
                   (sca-add
                    (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                    16)
                   1
                   16)
                  (aligned 16 0))
                 'int32
                 16)
                (sca-broadcast (int32_t t5829) 16))
               (vec-add
                (load
                 (buffer bias 'int32)
                 (ramp (sca-mul output.s0.x.x 16) 1 16)
                 (aligned 16 0))
                (sca-broadcast
                 (sca-add
                  (sca-mul
                   (sca-mul (int32_t t5829) (int32_t t5830))
                   (int32_t mat_a.extent.0))
                  (sca-mul (int32_t t5830) (int32_t t6653)))
                 16)))
              (vec-cast
               (load
                (buffer multiplied_no_offsets 'uint32)
                (ramp
                 (sca-add
                  (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
                  4)
                 1
                 16)
                (aligned 4 0))
               'int32
               16))
             'int64
             16)
            (vec-cast
             (sca-broadcast (int32_t output_multiplier) 16)
             'int64
             16))
           (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
         (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
        (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
       'int32
       16)
      (sca-broadcast
       (sca-add (int32_t output_shift) (int32_t (bv #xffffffff 32)))
       16))))
   (sca-broadcast (int32_t output_offset) 16))
  (sca-broadcast (int32_t (bv #x000000ff 32)) 16))
 (sca-broadcast (int32_t (bv #x00000000 32)) 16))
template:
  (maximum
 ...
 (minimum
  ...
  (vs-mpy-add
   ...
   (combine
    (vs-shift-right
     ...
     (cast
      ...
      (vs-shift-right
       ...
       (vs-mpy-add
        ...
        (vs-mpy-add
         ...
         (combine
          (vs-mpy-add
           ...
           (combine
            (vs-mpy-add
             ...
             #<load-data>
             (list (int32_t t5829))
             #f
             #f
             #f
             'int32)
            (vs-mpy-add
             ...
             (combine
              #<load-data>
              (broadcast
               ...
               (sca-add
                (sca-mul
                 (sca-mul (int32_t t5829) (int32_t t5830))
                 (int32_t mat_a.extent.0))
                (sca-mul (int32_t t5830) (int32_t t6653)))))
             (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
             #f
             #f
             #f
             'int32))
           (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
           #f
           #f
           #f
           'int32)
          (cast ... #<load-data> 'int32 #f))
         (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
         #f
         #f
         #f
         'int32)
        (list (int32_t output_multiplier))
        #f
        #f
        #f
        'int64)
       (int64_t (bv #x000000000000001f 64))
       #t
       x?$2971
       #t)
      'int32
      #t)
     (int32_t output_shift)
     #t
     x?$3371
     #t)
    (broadcast ... (int32_t output_offset)))
   (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
   #f
   #f
   #f
   'int32)
  (broadcast ... (int32_t (bv #x000000ff 32))))
 (broadcast ... (int32_t (bv #x00000000 32))))
axioms:
  (list
 (forall (idx) (bvsle (app abstr-vals$3592 idx) (bv #x000000ff 32)))
 (forall (idx) (&& (bvsle (app abstr-vals$3593 idx) (bv #x00000000 32)) (bvsle (bv #x00000000 32) (app abstr-vals$3593 idx)))))
optimized-halide-expr:
  (vec-max #<abstr-halide-expr> #<abstr-halide-expr>)
optimized-template:
  (maximum ... #<abstr-expr> #<abstr-expr>)
optimized Halide 0:
  (int32_t
 (ite (bvsle (app abstr-vals$3593 0) (app abstr-vals$3592 0)) (app abstr-vals$3592 0) (app abstr-vals$3593 0)))
optimized x86 0:
  (int32_t
 (ite (bvsle (app abstr-vals$3593 0) (app abstr-vals$3592 0)) (app abstr-vals$3592 0) (app abstr-vals$3593 0)))
Ran synthesizer for 44 ms
(model)
(vec-max #<abstr-halide-expr> #<abstr-halide-expr>)
(maximum
 ...
 (minimum
  ...
  (vs-mpy-add
   ...
   (combine
    (vs-shift-right
     ...
     (cast
      ...
      (vs-shift-right
       ...
       (vs-mpy-add
        ...
        (vs-mpy-add
         ...
         (combine
          (vs-mpy-add
           ...
           (combine
            (vs-mpy-add
             ...
             #<load-data>
             (list (int32_t t5829))
             #f
             #f
             #f
             'int32)
            (vs-mpy-add
             ...
             (combine
              #<load-data>
              (broadcast
               ...
               (sca-add
                (sca-mul
                 (sca-mul (int32_t t5829) (int32_t t5830))
                 (int32_t mat_a.extent.0))
                (sca-mul (int32_t t5830) (int32_t t6653)))))
             (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
             #f
             #f
             #f
             'int32))
           (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
           #f
           #f
           #f
           'int32)
          (cast ... #<load-data> 'int32 #f))
         (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
         #f
         #f
         #f
         'int32)
        (list (int32_t output_multiplier))
        #f
        #f
        #f
        'int64)
       (int64_t (bv #x000000000000001f 64))
       #t
       x?$2971
       #t)
      'int32
      #t)
     (int32_t output_shift)
     #t
     x?$3371
     #t)
    (broadcast ... (int32_t output_offset)))
   (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
   #f
   #f
   #f
   'int32)
  (broadcast ... (int32_t (bv #x000000ff 32))))
 (broadcast ... (int32_t (bv #x00000000 32))))
Ran bounds analysis for 32 ms
Ran bounds analysis for 37 ms
"Extended success?"
#t
(maximum
 ...
 (minimum
  ...
  (vs-mpy-add
   ...
   (combine
    (vs-shift-right
     ...
     (cast
      ...
      (vs-shift-right
       ...
       (vs-mpy-add
        ...
        (vs-mpy-add
         ...
         (combine
          (vs-mpy-add
           ...
           (combine
            (vs-mpy-add
             ...
             #<load-data>
             (list (int32_t t5829))
             #f
             #f
             #f
             'int32)
            (vs-mpy-add
             ...
             (combine
              #<load-data>
              (broadcast
               ...
               (sca-add
                (sca-mul
                 (sca-mul (int32_t t5829) (int32_t t5830))
                 (int32_t mat_a.extent.0))
                (sca-mul (int32_t t5830) (int32_t t6653)))))
             (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
             #f
             #f
             #f
             'int32))
           (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
           #f
           #f
           #f
           'int32)
          (cast ... #<load-data> 'int32 #f))
         (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
         #f
         #f
         #f
         'int32)
        (list (int32_t output_multiplier))
        #f
        #f
        #f
        'int64)
       (int64_t (bv #x000000000000001f 64))
       #t
       x?$2971
       #t)
      'int32
      #t)
     (int32_t output_shift)
     #t
     x?$3371
     #t)
    (broadcast ... (int32_t output_offset)))
   (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
   #f
   #f
   #f
   'int32)
  (broadcast ... (int32_t (bv #x000000ff 32))))
 (broadcast ... (int32_t (bv #x00000000 32))))
"Building Expr:"
(vec-cast
 (vec-max
  (vec-min
   (vec-add
    (vec-add
     (vec-shr
      (vec-cast
       (vec-max
        (vec-min
         (vec-add
          (vec-bwand
           (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
           (vec-div
            (vec-mul
             (vec-cast
              (vec-add
               (vec-add
                (vec-mul
                 (vec-cast
                  (load
                   (buffer column_sums_b 'uint32)
                   (ramp
                    (sca-add
                     (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                     16)
                    1
                    16)
                   (aligned 16 0))
                  'int32
                  16)
                 (sca-broadcast (int32_t t5829) 16))
                (vec-add
                 (load
                  (buffer bias 'int32)
                  (ramp (sca-mul output.s0.x.x 16) 1 16)
                  (aligned 16 0))
                 (sca-broadcast
                  (sca-add
                   (sca-mul
                    (sca-mul (int32_t t5829) (int32_t t5830))
                    (int32_t mat_a.extent.0))
                   (sca-mul (int32_t t5830) (int32_t t6653)))
                  16)))
               (vec-cast
                (load
                 (buffer multiplied_no_offsets 'uint32)
                 (ramp
                  (sca-add
                   (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
                   4)
                  1
                  16)
                 (aligned 4 0))
                'int32
                16))
              'int64
              16)
             (vec-cast
              (sca-broadcast (int32_t output_multiplier) 16)
              'int64
              16))
            (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
          (vec-div
           (vec-mul
            (vec-cast
             (vec-add
              (vec-add
               (vec-mul
                (vec-cast
                 (load
                  (buffer column_sums_b 'uint32)
                  (ramp
                   (sca-add
                    (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                    16)
                   1
                   16)
                  (aligned 16 0))
                 'int32
                 16)
                (sca-broadcast (int32_t t5829) 16))
               (vec-add
                (load
                 (buffer bias 'int32)
                 (ramp (sca-mul output.s0.x.x 16) 1 16)
                 (aligned 16 0))
                (sca-broadcast
                 (sca-add
                  (sca-mul
                   (sca-mul (int32_t t5829) (int32_t t5830))
                   (int32_t mat_a.extent.0))
                  (sca-mul (int32_t t5830) (int32_t t6653)))
                 16)))
              (vec-cast
               (load
                (buffer multiplied_no_offsets 'uint32)
                (ramp
                 (sca-add
                  (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
                  4)
                 1
                 16)
                (aligned 4 0))
               'int32
               16))
             'int64
             16)
            (vec-cast
             (sca-broadcast (int32_t output_multiplier) 16)
             'int64
             16))
           (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
         (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
        (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
       'int32
       16)
      (sca-broadcast (int32_t output_shift) 16))
     (vec-bwand
      (vec-if
       (sca-broadcast
        (sca-lt (int32_t (bv #x00000000 32)) (int32_t output_shift))
        16)
       (sca-broadcast (int32_t (bv #x00000001 32)) 16)
       (sca-broadcast (int32_t (bv #x00000000 32)) 16))
      (vec-shr
       (vec-cast
        (vec-max
         (vec-min
          (vec-add
           (vec-bwand
            (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
            (vec-div
             (vec-mul
              (vec-cast
               (vec-add
                (vec-add
                 (vec-mul
                  (vec-cast
                   (load
                    (buffer column_sums_b 'uint32)
                    (ramp
                     (sca-add
                      (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                      16)
                     1
                     16)
                    (aligned 16 0))
                   'int32
                   16)
                  (sca-broadcast (int32_t t5829) 16))
                 (vec-add
                  (load
                   (buffer bias 'int32)
                   (ramp (sca-mul output.s0.x.x 16) 1 16)
                   (aligned 16 0))
                  (sca-broadcast
                   (sca-add
                    (sca-mul
                     (sca-mul (int32_t t5829) (int32_t t5830))
                     (int32_t mat_a.extent.0))
                    (sca-mul (int32_t t5830) (int32_t t6653)))
                   16)))
                (vec-cast
                 (load
                  (buffer multiplied_no_offsets 'uint32)
                  (ramp
                   (sca-add
                    (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
                    4)
                   1
                   16)
                  (aligned 4 0))
                 'int32
                 16))
               'int64
               16)
              (vec-cast
               (sca-broadcast (int32_t output_multiplier) 16)
               'int64
               16))
             (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
           (vec-div
            (vec-mul
             (vec-cast
              (vec-add
               (vec-add
                (vec-mul
                 (vec-cast
                  (load
                   (buffer column_sums_b 'uint32)
                   (ramp
                    (sca-add
                     (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                     16)
                    1
                    16)
                   (aligned 16 0))
                  'int32
                  16)
                 (sca-broadcast (int32_t t5829) 16))
                (vec-add
                 (load
                  (buffer bias 'int32)
                  (ramp (sca-mul output.s0.x.x 16) 1 16)
                  (aligned 16 0))
                 (sca-broadcast
                  (sca-add
                   (sca-mul
                    (sca-mul (int32_t t5829) (int32_t t5830))
                    (int32_t mat_a.extent.0))
                   (sca-mul (int32_t t5830) (int32_t t6653)))
                  16)))
               (vec-cast
                (load
                 (buffer multiplied_no_offsets 'uint32)
                 (ramp
                  (sca-add
                   (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
                   4)
                  1
                  16)
                 (aligned 4 0))
                'int32
                16))
              'int64
              16)
             (vec-cast
              (sca-broadcast (int32_t output_multiplier) 16)
              'int64
              16))
            (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
          (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
         (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
        'int32
        16)
       (sca-broadcast
        (sca-add (int32_t output_shift) (int32_t (bv #xffffffff 32)))
        16))))
    (sca-broadcast (int32_t output_offset) 16))
   (sca-broadcast (int32_t (bv #x000000ff 32)) 16))
  (sca-broadcast (int32_t (bv #x00000000 32)) 16))
 'uint8
 16)
"Fold templates"
(list
 (vs-mpy-add
  ...
  (combine
   (vs-shift-right
    ...
    (cast
     ...
     (vs-shift-right
      ...
      (vs-mpy-add
       ...
       (vs-mpy-add
        ...
        (combine
         (vs-mpy-add
          ...
          (combine
           (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
           (vs-mpy-add
            ...
            (combine
             #<load-data>
             (broadcast
              ...
              (sca-add
               (sca-mul
                (sca-mul (int32_t t5829) (int32_t t5830))
                (int32_t mat_a.extent.0))
               (sca-mul (int32_t t5830) (int32_t t6653)))))
            (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
            #f
            #f
            #f
            'int32))
          (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
          #f
          #f
          #f
          'int32)
         (cast ... #<load-data> 'int32 #f))
        (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
        #f
        #f
        #f
        'int32)
       (list (int32_t output_multiplier))
       #f
       #f
       #f
       'int64)
      (int64_t (bv #x000000000000001f 64))
      #t
      x?$2971
      #t)
     'int32
     #t)
    (int32_t output_shift)
    #t
    x?$3371
    #t)
   (broadcast ... (int32_t output_offset)))
  (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
  x?$3596
  x?$3597
  x?$3598
  'int32))
here(#(struct:vs-mpy-add ... #<combine: #(struct:vs-shift-right ... #(struct:cast ... #(struct:vs-shift-right ... #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<load-data> (#(struct:int32_t t5829)) #f #f #f int32) #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-add #(struct:sca-mul #(struct:sca-mul #(struct:int32_t t5829) #(struct:int32_t t5830)) #(struct:int32_t mat_a.extent.0)) #(struct:sca-mul #(struct:int32_t t5830) #(struct:int32_t t6653))))> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32)> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32) #(struct:cast ... #<load-data> int32 #f)> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32) (#(struct:int32_t output_multiplier)) #f #f #f int64) #(struct:int64_t (bv #x000000000000001f 64)) #t x?$2971 #t) int32 #t) #(struct:int32_t output_shift) #t x?$3371 #t) #(struct:broadcast ... #(struct:int32_t output_offset))> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) x?$3596 x?$3597 x?$3598 int32))

"Replace templates"
(list
 (cast
  ...
  (vs-mpy-add
   ...
   (combine
    (vs-shift-right
     ...
     (cast
      ...
      (vs-shift-right
       ...
       (vs-mpy-add
        ...
        (vs-mpy-add
         ...
         (combine
          (vs-mpy-add
           ...
           (combine
            (vs-mpy-add
             ...
             #<load-data>
             (list (int32_t t5829))
             #f
             #f
             #f
             'int32)
            (vs-mpy-add
             ...
             (combine
              #<load-data>
              (broadcast
               ...
               (sca-add
                (sca-mul
                 (sca-mul (int32_t t5829) (int32_t t5830))
                 (int32_t mat_a.extent.0))
                (sca-mul (int32_t t5830) (int32_t t6653)))))
             (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
             #f
             #f
             #f
             'int32))
           (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
           #f
           #f
           #f
           'int32)
          (cast ... #<load-data> 'int32 #f))
         (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
         #f
         #f
         #f
         'int32)
        (list (int32_t output_multiplier))
        #f
        #f
        #f
        'int64)
       (int64_t (bv #x000000000000001f 64))
       #t
       x?$2971
       #t)
      'int32
      #t)
     (int32_t output_shift)
     #t
     x?$3371
     #t)
    (broadcast ... (int32_t output_offset)))
   (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
   #f
   #f
   #f
   'int32)
  'uint8
  #t)
 (cast ... (broadcast ... (int32_t (bv #x000000ff 32))) 'uint8 #t)
 (cast
  ...
  (minimum
   ...
   (vs-mpy-add
    ...
    (combine
     (vs-shift-right
      ...
      (cast
       ...
       (vs-shift-right
        ...
        (vs-mpy-add
         ...
         (vs-mpy-add
          ...
          (combine
           (vs-mpy-add
            ...
            (combine
             (vs-mpy-add
              ...
              #<load-data>
              (list (int32_t t5829))
              #f
              #f
              #f
              'int32)
             (vs-mpy-add
              ...
              (combine
               #<load-data>
               (broadcast
                ...
                (sca-add
                 (sca-mul
                  (sca-mul (int32_t t5829) (int32_t t5830))
                  (int32_t mat_a.extent.0))
                 (sca-mul (int32_t t5830) (int32_t t6653)))))
              (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
              #f
              #f
              #f
              'int32))
            (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
            #f
            #f
            #f
            'int32)
           (cast ... #<load-data> 'int32 #f))
          (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
          #f
          #f
          #f
          'int32)
         (list (int32_t output_multiplier))
         #f
         #f
         #f
         'int64)
        (int64_t (bv #x000000000000001f 64))
        #t
        x?$2971
        #t)
       'int32
       #t)
      (int32_t output_shift)
      #t
      x?$3371
      #t)
     (broadcast ... (int32_t output_offset)))
    (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
    #f
    #f
    #f
    'int32)
   (broadcast ... (int32_t (bv #x000000ff 32))))
  'uint8
  #t)
 (cast ... (broadcast ... (int32_t (bv #x00000000 32))) 'uint8 #t))
run-x86-synthesizer
halide-expr:
  (vec-cast
 (vec-max
  (vec-min
   (vec-add
    (vec-add
     (vec-shr
      (vec-cast
       (vec-max
        (vec-min
         (vec-add
          (vec-bwand
           (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
           (vec-div
            (vec-mul
             (vec-cast
              (vec-add
               (vec-add
                (vec-mul
                 (vec-cast
                  (load
                   (buffer column_sums_b 'uint32)
                   (ramp
                    (sca-add
                     (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                     16)
                    1
                    16)
                   (aligned 16 0))
                  'int32
                  16)
                 (sca-broadcast (int32_t t5829) 16))
                (vec-add
                 (load
                  (buffer bias 'int32)
                  (ramp (sca-mul output.s0.x.x 16) 1 16)
                  (aligned 16 0))
                 (sca-broadcast
                  (sca-add
                   (sca-mul
                    (sca-mul (int32_t t5829) (int32_t t5830))
                    (int32_t mat_a.extent.0))
                   (sca-mul (int32_t t5830) (int32_t t6653)))
                  16)))
               (vec-cast
                (load
                 (buffer multiplied_no_offsets 'uint32)
                 (ramp
                  (sca-add
                   (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
                   4)
                  1
                  16)
                 (aligned 4 0))
                'int32
                16))
              'int64
              16)
             (vec-cast
              (sca-broadcast (int32_t output_multiplier) 16)
              'int64
              16))
            (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
          (vec-div
           (vec-mul
            (vec-cast
             (vec-add
              (vec-add
               (vec-mul
                (vec-cast
                 (load
                  (buffer column_sums_b 'uint32)
                  (ramp
                   (sca-add
                    (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                    16)
                   1
                   16)
                  (aligned 16 0))
                 'int32
                 16)
                (sca-broadcast (int32_t t5829) 16))
               (vec-add
                (load
                 (buffer bias 'int32)
                 (ramp (sca-mul output.s0.x.x 16) 1 16)
                 (aligned 16 0))
                (sca-broadcast
                 (sca-add
                  (sca-mul
                   (sca-mul (int32_t t5829) (int32_t t5830))
                   (int32_t mat_a.extent.0))
                  (sca-mul (int32_t t5830) (int32_t t6653)))
                 16)))
              (vec-cast
               (load
                (buffer multiplied_no_offsets 'uint32)
                (ramp
                 (sca-add
                  (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
                  4)
                 1
                 16)
                (aligned 4 0))
               'int32
               16))
             'int64
             16)
            (vec-cast
             (sca-broadcast (int32_t output_multiplier) 16)
             'int64
             16))
           (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
         (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
        (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
       'int32
       16)
      (sca-broadcast (int32_t output_shift) 16))
     (vec-bwand
      (vec-if
       (sca-broadcast
        (sca-lt (int32_t (bv #x00000000 32)) (int32_t output_shift))
        16)
       (sca-broadcast (int32_t (bv #x00000001 32)) 16)
       (sca-broadcast (int32_t (bv #x00000000 32)) 16))
      (vec-shr
       (vec-cast
        (vec-max
         (vec-min
          (vec-add
           (vec-bwand
            (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
            (vec-div
             (vec-mul
              (vec-cast
               (vec-add
                (vec-add
                 (vec-mul
                  (vec-cast
                   (load
                    (buffer column_sums_b 'uint32)
                    (ramp
                     (sca-add
                      (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                      16)
                     1
                     16)
                    (aligned 16 0))
                   'int32
                   16)
                  (sca-broadcast (int32_t t5829) 16))
                 (vec-add
                  (load
                   (buffer bias 'int32)
                   (ramp (sca-mul output.s0.x.x 16) 1 16)
                   (aligned 16 0))
                  (sca-broadcast
                   (sca-add
                    (sca-mul
                     (sca-mul (int32_t t5829) (int32_t t5830))
                     (int32_t mat_a.extent.0))
                    (sca-mul (int32_t t5830) (int32_t t6653)))
                   16)))
                (vec-cast
                 (load
                  (buffer multiplied_no_offsets 'uint32)
                  (ramp
                   (sca-add
                    (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
                    4)
                   1
                   16)
                  (aligned 4 0))
                 'int32
                 16))
               'int64
               16)
              (vec-cast
               (sca-broadcast (int32_t output_multiplier) 16)
               'int64
               16))
             (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
           (vec-div
            (vec-mul
             (vec-cast
              (vec-add
               (vec-add
                (vec-mul
                 (vec-cast
                  (load
                   (buffer column_sums_b 'uint32)
                   (ramp
                    (sca-add
                     (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                     16)
                    1
                    16)
                   (aligned 16 0))
                  'int32
                  16)
                 (sca-broadcast (int32_t t5829) 16))
                (vec-add
                 (load
                  (buffer bias 'int32)
                  (ramp (sca-mul output.s0.x.x 16) 1 16)
                  (aligned 16 0))
                 (sca-broadcast
                  (sca-add
                   (sca-mul
                    (sca-mul (int32_t t5829) (int32_t t5830))
                    (int32_t mat_a.extent.0))
                   (sca-mul (int32_t t5830) (int32_t t6653)))
                  16)))
               (vec-cast
                (load
                 (buffer multiplied_no_offsets 'uint32)
                 (ramp
                  (sca-add
                   (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
                   4)
                  1
                  16)
                 (aligned 4 0))
                'int32
                16))
              'int64
              16)
             (vec-cast
              (sca-broadcast (int32_t output_multiplier) 16)
              'int64
              16))
            (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
          (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
         (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
        'int32
        16)
       (sca-broadcast
        (sca-add (int32_t output_shift) (int32_t (bv #xffffffff 32)))
        16))))
    (sca-broadcast (int32_t output_offset) 16))
   (sca-broadcast (int32_t (bv #x000000ff 32)) 16))
  (sca-broadcast (int32_t (bv #x00000000 32)) 16))
 'uint8
 16)
template:
  (cast ... (broadcast ... (int32_t (bv #x000000ff 32))) 'uint8 #t)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$3601 idx) (bv #x000000ff 32)) (bvsle (bv #x000000ff 32) (app abstr-vals$3601 idx)))))
optimized-halide-expr:
  (vec-cast
 (vec-max
  (vec-min
   (vec-add
    (vec-add
     (vec-shr
      (vec-cast
       (vec-max
        (vec-min
         (vec-add
          (vec-bwand
           (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
           (vec-div
            (vec-mul
             (vec-cast
              (vec-add
               (vec-add
                (vec-mul
                 (vec-cast
                  (load
                   (buffer column_sums_b 'uint32)
                   (ramp
                    (sca-add
                     (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                     16)
                    1
                    16)
                   (aligned 16 0))
                  'int32
                  16)
                 (sca-broadcast (int32_t t5829) 16))
                (vec-add
                 (load
                  (buffer bias 'int32)
                  (ramp (sca-mul output.s0.x.x 16) 1 16)
                  (aligned 16 0))
                 (sca-broadcast
                  (sca-add
                   (sca-mul
                    (sca-mul (int32_t t5829) (int32_t t5830))
                    (int32_t mat_a.extent.0))
                   (sca-mul (int32_t t5830) (int32_t t6653)))
                  16)))
               (vec-cast
                (load
                 (buffer multiplied_no_offsets 'uint32)
                 (ramp
                  (sca-add
                   (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
                   4)
                  1
                  16)
                 (aligned 4 0))
                'int32
                16))
              'int64
              16)
             (vec-cast
              (sca-broadcast (int32_t output_multiplier) 16)
              'int64
              16))
            (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
          (vec-div
           (vec-mul
            (vec-cast
             (vec-add
              (vec-add
               (vec-mul
                (vec-cast
                 (load
                  (buffer column_sums_b 'uint32)
                  (ramp
                   (sca-add
                    (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                    16)
                   1
                   16)
                  (aligned 16 0))
                 'int32
                 16)
                (sca-broadcast (int32_t t5829) 16))
               (vec-add
                (load
                 (buffer bias 'int32)
                 (ramp (sca-mul output.s0.x.x 16) 1 16)
                 (aligned 16 0))
                (sca-broadcast
                 (sca-add
                  (sca-mul
                   (sca-mul (int32_t t5829) (int32_t t5830))
                   (int32_t mat_a.extent.0))
                  (sca-mul (int32_t t5830) (int32_t t6653)))
                 16)))
              (vec-cast
               (load
                (buffer multiplied_no_offsets 'uint32)
                (ramp
                 (sca-add
                  (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
                  4)
                 1
                 16)
                (aligned 4 0))
               'int32
               16))
             'int64
             16)
            (vec-cast
             (sca-broadcast (int32_t output_multiplier) 16)
             'int64
             16))
           (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
         (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
        (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
       'int32
       16)
      (sca-broadcast (int32_t output_shift) 16))
     (vec-bwand
      (vec-if
       (sca-broadcast
        (sca-lt (int32_t (bv #x00000000 32)) (int32_t output_shift))
        16)
       (sca-broadcast (int32_t (bv #x00000001 32)) 16)
       (sca-broadcast (int32_t (bv #x00000000 32)) 16))
      (vec-shr
       (vec-cast
        (vec-max
         (vec-min
          (vec-add
           (vec-bwand
            (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
            (vec-div
             (vec-mul
              (vec-cast
               (vec-add
                (vec-add
                 (vec-mul
                  (vec-cast
                   (load
                    (buffer column_sums_b 'uint32)
                    (ramp
                     (sca-add
                      (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                      16)
                     1
                     16)
                    (aligned 16 0))
                   'int32
                   16)
                  (sca-broadcast (int32_t t5829) 16))
                 (vec-add
                  (load
                   (buffer bias 'int32)
                   (ramp (sca-mul output.s0.x.x 16) 1 16)
                   (aligned 16 0))
                  (sca-broadcast
                   (sca-add
                    (sca-mul
                     (sca-mul (int32_t t5829) (int32_t t5830))
                     (int32_t mat_a.extent.0))
                    (sca-mul (int32_t t5830) (int32_t t6653)))
                   16)))
                (vec-cast
                 (load
                  (buffer multiplied_no_offsets 'uint32)
                  (ramp
                   (sca-add
                    (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
                    4)
                   1
                   16)
                  (aligned 4 0))
                 'int32
                 16))
               'int64
               16)
              (vec-cast
               (sca-broadcast (int32_t output_multiplier) 16)
               'int64
               16))
             (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
           (vec-div
            (vec-mul
             (vec-cast
              (vec-add
               (vec-add
                (vec-mul
                 (vec-cast
                  (load
                   (buffer column_sums_b 'uint32)
                   (ramp
                    (sca-add
                     (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                     16)
                    1
                    16)
                   (aligned 16 0))
                  'int32
                  16)
                 (sca-broadcast (int32_t t5829) 16))
                (vec-add
                 (load
                  (buffer bias 'int32)
                  (ramp (sca-mul output.s0.x.x 16) 1 16)
                  (aligned 16 0))
                 (sca-broadcast
                  (sca-add
                   (sca-mul
                    (sca-mul (int32_t t5829) (int32_t t5830))
                    (int32_t mat_a.extent.0))
                   (sca-mul (int32_t t5830) (int32_t t6653)))
                  16)))
               (vec-cast
                (load
                 (buffer multiplied_no_offsets 'uint32)
                 (ramp
                  (sca-add
                   (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
                   4)
                  1
                  16)
                 (aligned 4 0))
                'int32
                16))
              'int64
              16)
             (vec-cast
              (sca-broadcast (int32_t output_multiplier) 16)
              'int64
              16))
            (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
          (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
         (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
        'int32
        16)
       (sca-broadcast
        (sca-add (int32_t output_shift) (int32_t (bv #xffffffff 32)))
        16))))
    (sca-broadcast (int32_t output_offset) 16))
   #<abstr-halide-expr>)
  (sca-broadcast (int32_t (bv #x00000000 32)) 16))
 'uint8
 16)
optimized-template:
  (cast ... #<abstr-expr> 'uint8 #t)
optimized Halide 0:
  (uint8_t
 (extract 7 0 (ite (bvsle (bv #x00000000 32) (ite (bvsle (bvadd output_offset (bvadd (bvashr (extract 31 0 (ite (bvsle (bv #xffffffff80000000 64) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64))) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bv #xffffffff80000000 64))) output_shift) (bvand (bvashr (extract 31 0 (ite (bvsle (bv #xffffffff80000000 64) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64))) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bv #xffffffff80000000 64))) (bvadd (bv #xffffffff 32) output_shift)) (ite (bvslt (bv #x00000000 32) output_shift) (bv #x00000001 32) (bv #x00000000 32))))) (app abstr-vals$3601 0)) (bvadd output_offset (bvadd (bvashr (extract 31 0 (ite (bvsle (bv #xffffffff80000000 64) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64))) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bv #xffffffff80000000 64))) output_shift) (bvand (bvashr (extract 31 0 (ite (bvsle (bv #xffffffff80000000 64) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64))) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bv #xffffffff80000000 64))) (bvadd (bv #xffffffff 32) output_shift)) (ite (bvslt (bv #x00000000 32) output_shift) (bv #x00000001 32) (bv #x00000000 32))))) (app abstr-vals$3601 0))) (ite (bvsle (bvadd output_offset (bvadd (bvashr (extract 31 0 (ite (bvsle (bv #xffffffff80000000 64) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64))) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bv #xffffffff80000000 64))) output_shift) (bvand (bvashr (extract 31 0 (ite (bvsle (bv #xffffffff80000000 64) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64))) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bv #xffffffff80000000 64))) (bvadd (bv #xffffffff 32) output_shift)) (ite (bvslt (bv #x00000000 32) output_shift) (bv #x00000001 32) (bv #x00000000 32))))) (app abstr-vals$3601 0)) (bvadd output_offset (bvadd (bvashr (extract 31 0 (ite (bvsle (bv #xffffffff80000000 64) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64))) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bv #xffffffff80000000 64))) output_shift) (bvand (bvashr (extract 31 0 (ite (bvsle (bv #xffffffff80000000 64) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64))) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bv #xffffffff80000000 64))) (bvadd (bv #xffffffff 32) output_shift)) (ite (bvslt (bv #x00000000 32) output_shift) (bv #x00000001 32) (bv #x00000000 32))))) (app abstr-vals$3601 0)) (bv #x00000000 32))))
optimized x86 0:
  (uint8_t
 (ite (bvslt (app abstr-vals$3601 0) (bv #x00000000 32)) (bv #x00 8) (ite (bvslt (bv #x000000ff 32) (app abstr-vals$3601 0)) (bv #xff 8) (extract 7 0 (app abstr-vals$3601 0)))))
run-x86-synthesizer
halide-expr:
  (vec-cast
 (vec-max
  (vec-min
   (vec-add
    (vec-add
     (vec-shr
      (vec-cast
       (vec-max
        (vec-min
         (vec-add
          (vec-bwand
           (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
           (vec-div
            (vec-mul
             (vec-cast
              (vec-add
               (vec-add
                (vec-mul
                 (vec-cast
                  (load
                   (buffer column_sums_b 'uint32)
                   (ramp
                    (sca-add
                     (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                     16)
                    1
                    16)
                   (aligned 16 0))
                  'int32
                  16)
                 (sca-broadcast (int32_t t5829) 16))
                (vec-add
                 (load
                  (buffer bias 'int32)
                  (ramp (sca-mul output.s0.x.x 16) 1 16)
                  (aligned 16 0))
                 (sca-broadcast
                  (sca-add
                   (sca-mul
                    (sca-mul (int32_t t5829) (int32_t t5830))
                    (int32_t mat_a.extent.0))
                   (sca-mul (int32_t t5830) (int32_t t6653)))
                  16)))
               (vec-cast
                (load
                 (buffer multiplied_no_offsets 'uint32)
                 (ramp
                  (sca-add
                   (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
                   4)
                  1
                  16)
                 (aligned 4 0))
                'int32
                16))
              'int64
              16)
             (vec-cast
              (sca-broadcast (int32_t output_multiplier) 16)
              'int64
              16))
            (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
          (vec-div
           (vec-mul
            (vec-cast
             (vec-add
              (vec-add
               (vec-mul
                (vec-cast
                 (load
                  (buffer column_sums_b 'uint32)
                  (ramp
                   (sca-add
                    (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                    16)
                   1
                   16)
                  (aligned 16 0))
                 'int32
                 16)
                (sca-broadcast (int32_t t5829) 16))
               (vec-add
                (load
                 (buffer bias 'int32)
                 (ramp (sca-mul output.s0.x.x 16) 1 16)
                 (aligned 16 0))
                (sca-broadcast
                 (sca-add
                  (sca-mul
                   (sca-mul (int32_t t5829) (int32_t t5830))
                   (int32_t mat_a.extent.0))
                  (sca-mul (int32_t t5830) (int32_t t6653)))
                 16)))
              (vec-cast
               (load
                (buffer multiplied_no_offsets 'uint32)
                (ramp
                 (sca-add
                  (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
                  4)
                 1
                 16)
                (aligned 4 0))
               'int32
               16))
             'int64
             16)
            (vec-cast
             (sca-broadcast (int32_t output_multiplier) 16)
             'int64
             16))
           (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
         (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
        (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
       'int32
       16)
      (sca-broadcast (int32_t output_shift) 16))
     (vec-bwand
      (vec-if
       (sca-broadcast
        (sca-lt (int32_t (bv #x00000000 32)) (int32_t output_shift))
        16)
       (sca-broadcast (int32_t (bv #x00000001 32)) 16)
       (sca-broadcast (int32_t (bv #x00000000 32)) 16))
      (vec-shr
       (vec-cast
        (vec-max
         (vec-min
          (vec-add
           (vec-bwand
            (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
            (vec-div
             (vec-mul
              (vec-cast
               (vec-add
                (vec-add
                 (vec-mul
                  (vec-cast
                   (load
                    (buffer column_sums_b 'uint32)
                    (ramp
                     (sca-add
                      (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                      16)
                     1
                     16)
                    (aligned 16 0))
                   'int32
                   16)
                  (sca-broadcast (int32_t t5829) 16))
                 (vec-add
                  (load
                   (buffer bias 'int32)
                   (ramp (sca-mul output.s0.x.x 16) 1 16)
                   (aligned 16 0))
                  (sca-broadcast
                   (sca-add
                    (sca-mul
                     (sca-mul (int32_t t5829) (int32_t t5830))
                     (int32_t mat_a.extent.0))
                    (sca-mul (int32_t t5830) (int32_t t6653)))
                   16)))
                (vec-cast
                 (load
                  (buffer multiplied_no_offsets 'uint32)
                  (ramp
                   (sca-add
                    (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
                    4)
                   1
                   16)
                  (aligned 4 0))
                 'int32
                 16))
               'int64
               16)
              (vec-cast
               (sca-broadcast (int32_t output_multiplier) 16)
               'int64
               16))
             (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
           (vec-div
            (vec-mul
             (vec-cast
              (vec-add
               (vec-add
                (vec-mul
                 (vec-cast
                  (load
                   (buffer column_sums_b 'uint32)
                   (ramp
                    (sca-add
                     (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                     16)
                    1
                    16)
                   (aligned 16 0))
                  'int32
                  16)
                 (sca-broadcast (int32_t t5829) 16))
                (vec-add
                 (load
                  (buffer bias 'int32)
                  (ramp (sca-mul output.s0.x.x 16) 1 16)
                  (aligned 16 0))
                 (sca-broadcast
                  (sca-add
                   (sca-mul
                    (sca-mul (int32_t t5829) (int32_t t5830))
                    (int32_t mat_a.extent.0))
                   (sca-mul (int32_t t5830) (int32_t t6653)))
                  16)))
               (vec-cast
                (load
                 (buffer multiplied_no_offsets 'uint32)
                 (ramp
                  (sca-add
                   (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
                   4)
                  1
                  16)
                 (aligned 4 0))
                'int32
                16))
              'int64
              16)
             (vec-cast
              (sca-broadcast (int32_t output_multiplier) 16)
              'int64
              16))
            (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
          (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
         (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
        'int32
        16)
       (sca-broadcast
        (sca-add (int32_t output_shift) (int32_t (bv #xffffffff 32)))
        16))))
    (sca-broadcast (int32_t output_offset) 16))
   (sca-broadcast (int32_t (bv #x000000ff 32)) 16))
  (sca-broadcast (int32_t (bv #x00000000 32)) 16))
 'uint8
 16)
template:
  (cast ... (broadcast ... (int32_t (bv #x00000000 32))) 'uint8 #t)
axioms:
  (list
 (forall (idx) (&& (bvsle (app abstr-vals$3602 idx) (bv #x00000000 32)) (bvsle (bv #x00000000 32) (app abstr-vals$3602 idx)))))
optimized-halide-expr:
  (vec-cast
 (vec-max
  (vec-min
   (vec-add
    (vec-add
     (vec-shr
      (vec-cast
       (vec-max
        (vec-min
         (vec-add
          (vec-bwand
           (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
           (vec-div
            (vec-mul
             (vec-cast
              (vec-add
               (vec-add
                (vec-mul
                 (vec-cast
                  (load
                   (buffer column_sums_b 'uint32)
                   (ramp
                    (sca-add
                     (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                     16)
                    1
                    16)
                   (aligned 16 0))
                  'int32
                  16)
                 (sca-broadcast (int32_t t5829) 16))
                (vec-add
                 (load
                  (buffer bias 'int32)
                  (ramp (sca-mul output.s0.x.x 16) 1 16)
                  (aligned 16 0))
                 (sca-broadcast
                  (sca-add
                   (sca-mul
                    (sca-mul (int32_t t5829) (int32_t t5830))
                    (int32_t mat_a.extent.0))
                   (sca-mul (int32_t t5830) (int32_t t6653)))
                  16)))
               (vec-cast
                (load
                 (buffer multiplied_no_offsets 'uint32)
                 (ramp
                  (sca-add
                   (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
                   4)
                  1
                  16)
                 (aligned 4 0))
                'int32
                16))
              'int64
              16)
             (vec-cast
              (sca-broadcast (int32_t output_multiplier) 16)
              'int64
              16))
            (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
          (vec-div
           (vec-mul
            (vec-cast
             (vec-add
              (vec-add
               (vec-mul
                (vec-cast
                 (load
                  (buffer column_sums_b 'uint32)
                  (ramp
                   (sca-add
                    (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                    16)
                   1
                   16)
                  (aligned 16 0))
                 'int32
                 16)
                (sca-broadcast (int32_t t5829) 16))
               (vec-add
                (load
                 (buffer bias 'int32)
                 (ramp (sca-mul output.s0.x.x 16) 1 16)
                 (aligned 16 0))
                (sca-broadcast
                 (sca-add
                  (sca-mul
                   (sca-mul (int32_t t5829) (int32_t t5830))
                   (int32_t mat_a.extent.0))
                  (sca-mul (int32_t t5830) (int32_t t6653)))
                 16)))
              (vec-cast
               (load
                (buffer multiplied_no_offsets 'uint32)
                (ramp
                 (sca-add
                  (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
                  4)
                 1
                 16)
                (aligned 4 0))
               'int32
               16))
             'int64
             16)
            (vec-cast
             (sca-broadcast (int32_t output_multiplier) 16)
             'int64
             16))
           (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
         (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
        (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
       'int32
       16)
      (sca-broadcast (int32_t output_shift) 16))
     (vec-bwand
      (vec-if
       (sca-broadcast
        (sca-lt (int32_t (bv #x00000000 32)) (int32_t output_shift))
        16)
       (sca-broadcast (int32_t (bv #x00000001 32)) 16)
       #<abstr-halide-expr>)
      (vec-shr
       (vec-cast
        (vec-max
         (vec-min
          (vec-add
           (vec-bwand
            (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
            (vec-div
             (vec-mul
              (vec-cast
               (vec-add
                (vec-add
                 (vec-mul
                  (vec-cast
                   (load
                    (buffer column_sums_b 'uint32)
                    (ramp
                     (sca-add
                      (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                      16)
                     1
                     16)
                    (aligned 16 0))
                   'int32
                   16)
                  (sca-broadcast (int32_t t5829) 16))
                 (vec-add
                  (load
                   (buffer bias 'int32)
                   (ramp (sca-mul output.s0.x.x 16) 1 16)
                   (aligned 16 0))
                  (sca-broadcast
                   (sca-add
                    (sca-mul
                     (sca-mul (int32_t t5829) (int32_t t5830))
                     (int32_t mat_a.extent.0))
                    (sca-mul (int32_t t5830) (int32_t t6653)))
                   16)))
                (vec-cast
                 (load
                  (buffer multiplied_no_offsets 'uint32)
                  (ramp
                   (sca-add
                    (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
                    4)
                   1
                   16)
                  (aligned 4 0))
                 'int32
                 16))
               'int64
               16)
              (vec-cast
               (sca-broadcast (int32_t output_multiplier) 16)
               'int64
               16))
             (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
           (vec-div
            (vec-mul
             (vec-cast
              (vec-add
               (vec-add
                (vec-mul
                 (vec-cast
                  (load
                   (buffer column_sums_b 'uint32)
                   (ramp
                    (sca-add
                     (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                     16)
                    1
                    16)
                   (aligned 16 0))
                  'int32
                  16)
                 (sca-broadcast (int32_t t5829) 16))
                (vec-add
                 (load
                  (buffer bias 'int32)
                  (ramp (sca-mul output.s0.x.x 16) 1 16)
                  (aligned 16 0))
                 (sca-broadcast
                  (sca-add
                   (sca-mul
                    (sca-mul (int32_t t5829) (int32_t t5830))
                    (int32_t mat_a.extent.0))
                   (sca-mul (int32_t t5830) (int32_t t6653)))
                  16)))
               (vec-cast
                (load
                 (buffer multiplied_no_offsets 'uint32)
                 (ramp
                  (sca-add
                   (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
                   4)
                  1
                  16)
                 (aligned 4 0))
                'int32
                16))
              'int64
              16)
             (vec-cast
              (sca-broadcast (int32_t output_multiplier) 16)
              'int64
              16))
            (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
          (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
         (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
        'int32
        16)
       (sca-broadcast
        (sca-add (int32_t output_shift) (int32_t (bv #xffffffff 32)))
        16))))
    (sca-broadcast (int32_t output_offset) 16))
   (sca-broadcast (int32_t (bv #x000000ff 32)) 16))
  #<abstr-halide-expr>)
 'uint8
 16)
optimized-template:
  (cast ... #<abstr-expr> 'uint8 #t)
optimized Halide 0:
  (uint8_t
 (extract 7 0 (ite (bvsle (app abstr-vals$3602 0) (ite (bvsle (bvadd output_offset (bvadd (bvashr (extract 31 0 (ite (bvsle (bv #xffffffff80000000 64) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64))) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bv #xffffffff80000000 64))) output_shift) (bvand (bvashr (extract 31 0 (ite (bvsle (bv #xffffffff80000000 64) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64))) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bv #xffffffff80000000 64))) (bvadd (bv #xffffffff 32) output_shift)) (ite (bvslt (bv #x00000000 32) output_shift) (bv #x00000001 32) (app abstr-vals$3602 0))))) (bv #x000000ff 32)) (bvadd output_offset (bvadd (bvashr (extract 31 0 (ite (bvsle (bv #xffffffff80000000 64) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64))) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bv #xffffffff80000000 64))) output_shift) (bvand (bvashr (extract 31 0 (ite (bvsle (bv #xffffffff80000000 64) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64))) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bv #xffffffff80000000 64))) (bvadd (bv #xffffffff 32) output_shift)) (ite (bvslt (bv #x00000000 32) output_shift) (bv #x00000001 32) (app abstr-vals$3602 0))))) (bv #x000000ff 32))) (ite (bvsle (bvadd output_offset (bvadd (bvashr (extract 31 0 (ite (bvsle (bv #xffffffff80000000 64) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64))) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bv #xffffffff80000000 64))) output_shift) (bvand (bvashr (extract 31 0 (ite (bvsle (bv #xffffffff80000000 64) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64))) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bv #xffffffff80000000 64))) (bvadd (bv #xffffffff 32) output_shift)) (ite (bvslt (bv #x00000000 32) output_shift) (bv #x00000001 32) (app abstr-vals$3602 0))))) (bv #x000000ff 32)) (bvadd output_offset (bvadd (bvashr (extract 31 0 (ite (bvsle (bv #xffffffff80000000 64) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64))) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bv #xffffffff80000000 64))) output_shift) (bvand (bvashr (extract 31 0 (ite (bvsle (bv #xffffffff80000000 64) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64))) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bv #xffffffff80000000 64))) (bvadd (bv #xffffffff 32) output_shift)) (ite (bvslt (bv #x00000000 32) output_shift) (bv #x00000001 32) (app abstr-vals$3602 0))))) (bv #x000000ff 32)) (app abstr-vals$3602 0))))
optimized x86 0:
  (uint8_t
 (ite (bvslt (app abstr-vals$3602 0) (bv #x00000000 32)) (bv #x00 8) (ite (bvslt (bv #x000000ff 32) (app abstr-vals$3602 0)) (bv #xff 8) (extract 7 0 (app abstr-vals$3602 0)))))
run-x86-synthesizer
halide-expr:
  (vec-cast
 (vec-max
  (vec-min
   (vec-add
    (vec-add
     (vec-shr
      (vec-cast
       (vec-max
        (vec-min
         (vec-add
          (vec-bwand
           (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
           (vec-div
            (vec-mul
             (vec-cast
              (vec-add
               (vec-add
                (vec-mul
                 (vec-cast
                  (load
                   (buffer column_sums_b 'uint32)
                   (ramp
                    (sca-add
                     (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                     16)
                    1
                    16)
                   (aligned 16 0))
                  'int32
                  16)
                 (sca-broadcast (int32_t t5829) 16))
                (vec-add
                 (load
                  (buffer bias 'int32)
                  (ramp (sca-mul output.s0.x.x 16) 1 16)
                  (aligned 16 0))
                 (sca-broadcast
                  (sca-add
                   (sca-mul
                    (sca-mul (int32_t t5829) (int32_t t5830))
                    (int32_t mat_a.extent.0))
                   (sca-mul (int32_t t5830) (int32_t t6653)))
                  16)))
               (vec-cast
                (load
                 (buffer multiplied_no_offsets 'uint32)
                 (ramp
                  (sca-add
                   (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
                   4)
                  1
                  16)
                 (aligned 4 0))
                'int32
                16))
              'int64
              16)
             (vec-cast
              (sca-broadcast (int32_t output_multiplier) 16)
              'int64
              16))
            (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
          (vec-div
           (vec-mul
            (vec-cast
             (vec-add
              (vec-add
               (vec-mul
                (vec-cast
                 (load
                  (buffer column_sums_b 'uint32)
                  (ramp
                   (sca-add
                    (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                    16)
                   1
                   16)
                  (aligned 16 0))
                 'int32
                 16)
                (sca-broadcast (int32_t t5829) 16))
               (vec-add
                (load
                 (buffer bias 'int32)
                 (ramp (sca-mul output.s0.x.x 16) 1 16)
                 (aligned 16 0))
                (sca-broadcast
                 (sca-add
                  (sca-mul
                   (sca-mul (int32_t t5829) (int32_t t5830))
                   (int32_t mat_a.extent.0))
                  (sca-mul (int32_t t5830) (int32_t t6653)))
                 16)))
              (vec-cast
               (load
                (buffer multiplied_no_offsets 'uint32)
                (ramp
                 (sca-add
                  (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
                  4)
                 1
                 16)
                (aligned 4 0))
               'int32
               16))
             'int64
             16)
            (vec-cast
             (sca-broadcast (int32_t output_multiplier) 16)
             'int64
             16))
           (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
         (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
        (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
       'int32
       16)
      (sca-broadcast (int32_t output_shift) 16))
     (vec-bwand
      (vec-if
       (sca-broadcast
        (sca-lt (int32_t (bv #x00000000 32)) (int32_t output_shift))
        16)
       (sca-broadcast (int32_t (bv #x00000001 32)) 16)
       (sca-broadcast (int32_t (bv #x00000000 32)) 16))
      (vec-shr
       (vec-cast
        (vec-max
         (vec-min
          (vec-add
           (vec-bwand
            (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
            (vec-div
             (vec-mul
              (vec-cast
               (vec-add
                (vec-add
                 (vec-mul
                  (vec-cast
                   (load
                    (buffer column_sums_b 'uint32)
                    (ramp
                     (sca-add
                      (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                      16)
                     1
                     16)
                    (aligned 16 0))
                   'int32
                   16)
                  (sca-broadcast (int32_t t5829) 16))
                 (vec-add
                  (load
                   (buffer bias 'int32)
                   (ramp (sca-mul output.s0.x.x 16) 1 16)
                   (aligned 16 0))
                  (sca-broadcast
                   (sca-add
                    (sca-mul
                     (sca-mul (int32_t t5829) (int32_t t5830))
                     (int32_t mat_a.extent.0))
                    (sca-mul (int32_t t5830) (int32_t t6653)))
                   16)))
                (vec-cast
                 (load
                  (buffer multiplied_no_offsets 'uint32)
                  (ramp
                   (sca-add
                    (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
                    4)
                   1
                   16)
                  (aligned 4 0))
                 'int32
                 16))
               'int64
               16)
              (vec-cast
               (sca-broadcast (int32_t output_multiplier) 16)
               'int64
               16))
             (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
           (vec-div
            (vec-mul
             (vec-cast
              (vec-add
               (vec-add
                (vec-mul
                 (vec-cast
                  (load
                   (buffer column_sums_b 'uint32)
                   (ramp
                    (sca-add
                     (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                     16)
                    1
                    16)
                   (aligned 16 0))
                  'int32
                  16)
                 (sca-broadcast (int32_t t5829) 16))
                (vec-add
                 (load
                  (buffer bias 'int32)
                  (ramp (sca-mul output.s0.x.x 16) 1 16)
                  (aligned 16 0))
                 (sca-broadcast
                  (sca-add
                   (sca-mul
                    (sca-mul (int32_t t5829) (int32_t t5830))
                    (int32_t mat_a.extent.0))
                   (sca-mul (int32_t t5830) (int32_t t6653)))
                  16)))
               (vec-cast
                (load
                 (buffer multiplied_no_offsets 'uint32)
                 (ramp
                  (sca-add
                   (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
                   4)
                  1
                  16)
                 (aligned 4 0))
                'int32
                16))
              'int64
              16)
             (vec-cast
              (sca-broadcast (int32_t output_multiplier) 16)
              'int64
              16))
            (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
          (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
         (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
        'int32
        16)
       (sca-broadcast
        (sca-add (int32_t output_shift) (int32_t (bv #xffffffff 32)))
        16))))
    (sca-broadcast (int32_t output_offset) 16))
   (sca-broadcast (int32_t (bv #x000000ff 32)) 16))
  (sca-broadcast (int32_t (bv #x00000000 32)) 16))
 'uint8
 16)
template:
  (vs-mpy-add
 ...
 (combine
  (vs-shift-right
   ...
   (cast
    ...
    (vs-shift-right
     ...
     (vs-mpy-add
      ...
      (vs-mpy-add
       ...
       (combine
        (vs-mpy-add
         ...
         (combine
          (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
          (vs-mpy-add
           ...
           (combine
            #<load-data>
            (broadcast
             ...
             (sca-add
              (sca-mul
               (sca-mul (int32_t t5829) (int32_t t5830))
               (int32_t mat_a.extent.0))
              (sca-mul (int32_t t5830) (int32_t t6653)))))
           (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
           #f
           #f
           #f
           'int32))
         (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
         #f
         #f
         #f
         'int32)
        (cast ... #<load-data> 'int32 #f))
       (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
       #f
       #f
       #f
       'int32)
      (list (int32_t output_multiplier))
      #f
      #f
      #f
      'int64)
     (int64_t (bv #x000000000000001f 64))
     #t
     x?$2971
     #t)
    'int32
    #t)
   (int32_t output_shift)
   #t
   x?$3371
   #t)
  (broadcast ... (int32_t output_offset)))
 (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
 x?$3596
 x?$3597
 x?$3598
 'int32)
axioms:
  (list (forall (idx) (bvsle (bv #x80000001 32) (app abstr-vals$3603 idx))) #t)
optimized-halide-expr:
  (vec-cast
 (vec-max
  (vec-min
   (vec-add #<abstr-halide-expr> #<abstr-halide-expr>)
   (sca-broadcast (int32_t (bv #x000000ff 32)) 16))
  (sca-broadcast (int32_t (bv #x00000000 32)) 16))
 'uint8
 16)
optimized-template:
  (vs-mpy-add
 ...
 (combine #<abstr-expr> #<abstr-expr>)
 (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
 x?$3596
 x?$3597
 x?$3598
 'int32)
optimized Halide 0:
  (uint8_t
 (extract 7 0 (ite (bvsle (bv #x00000000 32) (ite (bvsle (bvadd (app abstr-vals$3603 0) (app abstr-vals$3604 0)) (bv #x000000ff 32)) (bvadd (app abstr-vals$3603 0) (app abstr-vals$3604 0)) (bv #x000000ff 32))) (ite (bvsle (bvadd (app abstr-vals$3603 0) (app abstr-vals$3604 0)) (bv #x000000ff 32)) (bvadd (app abstr-vals$3603 0) (app abstr-vals$3604 0)) (bv #x000000ff 32)) (bv #x00000000 32))))
optimized x86 0:
  (int32_t
 (ite* (⊢ (&& (! x?$3598) (! (&& x?$3596 x?$3598))) (ite x?$3596 (bvadd (ite x?$3596 (bvadd (ite x?$3597 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (app abstr-vals$3603 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3597 (bv #x00000001 32) (bv #x00000000 32))))) (app abstr-vals$3603 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3597 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (app abstr-vals$3603 0) (ite x?$3597 (bv #x00000001 32) (bv #x00000000 32)))) (ite (bvsle (bvadd (bv #x80000000 32) (bvneg (ite (bvsle (ite x?$3596 (bvadd (ite x?$3597 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (app abstr-vals$3603 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3597 (bv #x00000001 32) (bv #x00000000 32))))) (app abstr-vals$3603 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3597 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (app abstr-vals$3603 0) (ite x?$3597 (bv #x00000001 32) (bv #x00000000 32)))) (bv #x00000000 32)) (ite x?$3596 (bvadd (ite x?$3597 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (app abstr-vals$3603 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3597 (bv #x00000001 32) (bv #x00000000 32))))) (app abstr-vals$3603 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3597 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (app abstr-vals$3603 0) (ite x?$3597 (bv #x00000001 32) (bv #x00000000 32)))) (bv #x00000000 32)))) (ite (bvsle (app abstr-vals$3604 0) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$3596 (bvadd (ite x?$3597 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (app abstr-vals$3603 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3597 (bv #x00000001 32) (bv #x00000000 32))))) (app abstr-vals$3603 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3597 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (app abstr-vals$3603 0) (ite x?$3597 (bv #x00000001 32) (bv #x00000000 32))))) (ite x?$3596 (bvadd (ite x?$3597 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (app abstr-vals$3603 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3597 (bv #x00000001 32) (bv #x00000000 32))))) (app abstr-vals$3603 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3597 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (app abstr-vals$3603 0) (ite x?$3597 (bv #x00000001 32) (bv #x00000000 32)))) (bv #x00000000 32))))) (app abstr-vals$3604 0) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$3596 (bvadd (ite x?$3597 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (app abstr-vals$3603 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3597 (bv #x00000001 32) (bv #x00000000 32))))) (app abstr-vals$3603 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3597 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (app abstr-vals$3603 0) (ite x?$3597 (bv #x00000001 32) (bv #x00000000 32))))) (ite x?$3596 (bvadd (ite x?$3597 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (app abstr-vals$3603 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3597 (bv #x00000001 32) (bv #x00000000 32))))) (app abstr-vals$3603 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3597 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (app abstr-vals$3603 0) (ite x?$3597 (bv #x00000001 32) (bv #x00000000 32)))) (bv #x00000000 32)))))) (ite (bvsle (app abstr-vals$3604 0) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$3596 (bvadd (ite x?$3597 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (app abstr-vals$3603 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3597 (bv #x00000001 32) (bv #x00000000 32))))) (app abstr-vals$3603 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3597 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (app abstr-vals$3603 0) (ite x?$3597 (bv #x00000001 32) (bv #x00000000 32))))) (ite x?$3596 (bvadd (ite x?$3597 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (app abstr-vals$3603 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3597 (bv #x00000001 32) (bv #x00000000 32))))) (app abstr-vals$3603 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3597 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (app abstr-vals$3603 0) (ite x?$3597 (bv #x00000001 32) (bv #x00000000 32)))) (bv #x00000000 32))))) (app abstr-vals$3604 0) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$3596 (bvadd (ite x?$3597 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (app abstr-vals$3603 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3597 (bv #x00000001 32) (bv #x00000000 32))))) (app abstr-vals$3603 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3597 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (app abstr-vals$3603 0) (ite x?$3597 (bv #x00000001 32) (bv #x00000000 32))))) (ite x?$3596 (bvadd (ite x?$3597 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (app abstr-vals$3603 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3597 (bv #x00000001 32) (bv #x00000000 32))))) (app abstr-vals$3603 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3597 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (app abstr-vals$3603 0) (ite x?$3597 (bv #x00000001 32) (bv #x00000000 32)))) (bv #x00000000 32))))) (bvadd (bv #x80000000 32) (bvneg (ite (bvsle (ite x?$3596 (bvadd (ite x?$3597 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (app abstr-vals$3603 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3597 (bv #x00000001 32) (bv #x00000000 32))))) (app abstr-vals$3603 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3597 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (app abstr-vals$3603 0) (ite x?$3597 (bv #x00000001 32) (bv #x00000000 32)))) (bv #x00000000 32)) (ite x?$3596 (bvadd (ite x?$3597 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (app abstr-vals$3603 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3597 (bv #x00000001 32) (bv #x00000000 32))))) (app abstr-vals$3603 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3597 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (app abstr-vals$3603 0) (ite x?$3597 (bv #x00000001 32) (bv #x00000000 32)))) (bv #x00000000 32)))))) (bvadd (app abstr-vals$3604 0) (ite x?$3596 (bvadd (ite x?$3597 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (app abstr-vals$3603 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3597 (bv #x00000001 32) (bv #x00000000 32))))) (app abstr-vals$3603 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3597 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (app abstr-vals$3603 0) (ite x?$3597 (bv #x00000001 32) (bv #x00000000 32))))))) (⊢ (|| (&& x?$3596 x?$3598) (&& x?$3598 (! (&& x?$3596 x?$3598)))) (bvashr (ite x?$3596 (bvadd (ite x?$3596 (bvadd (ite x?$3597 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (app abstr-vals$3603 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3597 (bv #x00000001 32) (bv #x00000000 32))))) (app abstr-vals$3603 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3597 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (app abstr-vals$3603 0) (ite x?$3597 (bv #x00000001 32) (bv #x00000000 32)))) (ite (bvsle (bvadd (bv #x80000000 32) (bvneg (ite (bvsle (ite x?$3596 (bvadd (ite x?$3597 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (app abstr-vals$3603 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3597 (bv #x00000001 32) (bv #x00000000 32))))) (app abstr-vals$3603 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3597 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (app abstr-vals$3603 0) (ite x?$3597 (bv #x00000001 32) (bv #x00000000 32)))) (bv #x00000000 32)) (ite x?$3596 (bvadd (ite x?$3597 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (app abstr-vals$3603 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3597 (bv #x00000001 32) (bv #x00000000 32))))) (app abstr-vals$3603 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3597 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (app abstr-vals$3603 0) (ite x?$3597 (bv #x00000001 32) (bv #x00000000 32)))) (bv #x00000000 32)))) (ite (bvsle (app abstr-vals$3604 0) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$3596 (bvadd (ite x?$3597 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (app abstr-vals$3603 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3597 (bv #x00000001 32) (bv #x00000000 32))))) (app abstr-vals$3603 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3597 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (app abstr-vals$3603 0) (ite x?$3597 (bv #x00000001 32) (bv #x00000000 32))))) (ite x?$3596 (bvadd (ite x?$3597 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (app abstr-vals$3603 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3597 (bv #x00000001 32) (bv #x00000000 32))))) (app abstr-vals$3603 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3597 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (app abstr-vals$3603 0) (ite x?$3597 (bv #x00000001 32) (bv #x00000000 32)))) (bv #x00000000 32))))) (app abstr-vals$3604 0) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$3596 (bvadd (ite x?$3597 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (app abstr-vals$3603 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3597 (bv #x00000001 32) (bv #x00000000 32))))) (app abstr-vals$3603 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3597 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (app abstr-vals$3603 0) (ite x?$3597 (bv #x00000001 32) (bv #x00000000 32))))) (ite x?$3596 (bvadd (ite x?$3597 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (app abstr-vals$3603 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3597 (bv #x00000001 32) (bv #x00000000 32))))) (app abstr-vals$3603 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3597 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (app abstr-vals$3603 0) (ite x?$3597 (bv #x00000001 32) (bv #x00000000 32)))) (bv #x00000000 32)))))) (ite (bvsle (app abstr-vals$3604 0) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$3596 (bvadd (ite x?$3597 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (app abstr-vals$3603 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3597 (bv #x00000001 32) (bv #x00000000 32))))) (app abstr-vals$3603 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3597 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (app abstr-vals$3603 0) (ite x?$3597 (bv #x00000001 32) (bv #x00000000 32))))) (ite x?$3596 (bvadd (ite x?$3597 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (app abstr-vals$3603 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3597 (bv #x00000001 32) (bv #x00000000 32))))) (app abstr-vals$3603 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3597 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (app abstr-vals$3603 0) (ite x?$3597 (bv #x00000001 32) (bv #x00000000 32)))) (bv #x00000000 32))))) (app abstr-vals$3604 0) (bvadd (bv #x7fffffff 32) (bvneg (ite (bvsle (bv #x00000000 32) (ite x?$3596 (bvadd (ite x?$3597 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (app abstr-vals$3603 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3597 (bv #x00000001 32) (bv #x00000000 32))))) (app abstr-vals$3603 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3597 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (app abstr-vals$3603 0) (ite x?$3597 (bv #x00000001 32) (bv #x00000000 32))))) (ite x?$3596 (bvadd (ite x?$3597 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (app abstr-vals$3603 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3597 (bv #x00000001 32) (bv #x00000000 32))))) (app abstr-vals$3603 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3597 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (app abstr-vals$3603 0) (ite x?$3597 (bv #x00000001 32) (bv #x00000000 32)))) (bv #x00000000 32))))) (bvadd (bv #x80000000 32) (bvneg (ite (bvsle (ite x?$3596 (bvadd (ite x?$3597 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (app abstr-vals$3603 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3597 (bv #x00000001 32) (bv #x00000000 32))))) (app abstr-vals$3603 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3597 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (app abstr-vals$3603 0) (ite x?$3597 (bv #x00000001 32) (bv #x00000000 32)))) (bv #x00000000 32)) (ite x?$3596 (bvadd (ite x?$3597 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (app abstr-vals$3603 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3597 (bv #x00000001 32) (bv #x00000000 32))))) (app abstr-vals$3603 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3597 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (app abstr-vals$3603 0) (ite x?$3597 (bv #x00000001 32) (bv #x00000000 32)))) (bv #x00000000 32)))))) (bvadd (app abstr-vals$3604 0) (ite x?$3596 (bvadd (ite x?$3597 (bv #x00000001 32) (bv #x00000000 32)) (ite (bvsle (app abstr-vals$3603 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3597 (bv #x00000001 32) (bv #x00000000 32))))) (app abstr-vals$3603 0) (bvadd (bv #x7fffffff 32) (bvneg (ite x?$3597 (bv #x00000001 32) (bv #x00000000 32)))))) (bvadd (app abstr-vals$3603 0) (ite x?$3597 (bv #x00000001 32) (bv #x00000000 32)))))) (bv #x00000001 32)))))
Ran synthesizer for 23 ms
(unsat)
run-x86-synthesizer
halide-expr:
  (vec-cast
 (vec-max
  (vec-min
   (vec-add
    (vec-add
     (vec-shr
      (vec-cast
       (vec-max
        (vec-min
         (vec-add
          (vec-bwand
           (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
           (vec-div
            (vec-mul
             (vec-cast
              (vec-add
               (vec-add
                (vec-mul
                 (vec-cast
                  (load
                   (buffer column_sums_b 'uint32)
                   (ramp
                    (sca-add
                     (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                     16)
                    1
                    16)
                   (aligned 16 0))
                  'int32
                  16)
                 (sca-broadcast (int32_t t5829) 16))
                (vec-add
                 (load
                  (buffer bias 'int32)
                  (ramp (sca-mul output.s0.x.x 16) 1 16)
                  (aligned 16 0))
                 (sca-broadcast
                  (sca-add
                   (sca-mul
                    (sca-mul (int32_t t5829) (int32_t t5830))
                    (int32_t mat_a.extent.0))
                   (sca-mul (int32_t t5830) (int32_t t6653)))
                  16)))
               (vec-cast
                (load
                 (buffer multiplied_no_offsets 'uint32)
                 (ramp
                  (sca-add
                   (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
                   4)
                  1
                  16)
                 (aligned 4 0))
                'int32
                16))
              'int64
              16)
             (vec-cast
              (sca-broadcast (int32_t output_multiplier) 16)
              'int64
              16))
            (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
          (vec-div
           (vec-mul
            (vec-cast
             (vec-add
              (vec-add
               (vec-mul
                (vec-cast
                 (load
                  (buffer column_sums_b 'uint32)
                  (ramp
                   (sca-add
                    (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                    16)
                   1
                   16)
                  (aligned 16 0))
                 'int32
                 16)
                (sca-broadcast (int32_t t5829) 16))
               (vec-add
                (load
                 (buffer bias 'int32)
                 (ramp (sca-mul output.s0.x.x 16) 1 16)
                 (aligned 16 0))
                (sca-broadcast
                 (sca-add
                  (sca-mul
                   (sca-mul (int32_t t5829) (int32_t t5830))
                   (int32_t mat_a.extent.0))
                  (sca-mul (int32_t t5830) (int32_t t6653)))
                 16)))
              (vec-cast
               (load
                (buffer multiplied_no_offsets 'uint32)
                (ramp
                 (sca-add
                  (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
                  4)
                 1
                 16)
                (aligned 4 0))
               'int32
               16))
             'int64
             16)
            (vec-cast
             (sca-broadcast (int32_t output_multiplier) 16)
             'int64
             16))
           (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
         (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
        (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
       'int32
       16)
      (sca-broadcast (int32_t output_shift) 16))
     (vec-bwand
      (vec-if
       (sca-broadcast
        (sca-lt (int32_t (bv #x00000000 32)) (int32_t output_shift))
        16)
       (sca-broadcast (int32_t (bv #x00000001 32)) 16)
       (sca-broadcast (int32_t (bv #x00000000 32)) 16))
      (vec-shr
       (vec-cast
        (vec-max
         (vec-min
          (vec-add
           (vec-bwand
            (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
            (vec-div
             (vec-mul
              (vec-cast
               (vec-add
                (vec-add
                 (vec-mul
                  (vec-cast
                   (load
                    (buffer column_sums_b 'uint32)
                    (ramp
                     (sca-add
                      (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                      16)
                     1
                     16)
                    (aligned 16 0))
                   'int32
                   16)
                  (sca-broadcast (int32_t t5829) 16))
                 (vec-add
                  (load
                   (buffer bias 'int32)
                   (ramp (sca-mul output.s0.x.x 16) 1 16)
                   (aligned 16 0))
                  (sca-broadcast
                   (sca-add
                    (sca-mul
                     (sca-mul (int32_t t5829) (int32_t t5830))
                     (int32_t mat_a.extent.0))
                    (sca-mul (int32_t t5830) (int32_t t6653)))
                   16)))
                (vec-cast
                 (load
                  (buffer multiplied_no_offsets 'uint32)
                  (ramp
                   (sca-add
                    (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
                    4)
                   1
                   16)
                  (aligned 4 0))
                 'int32
                 16))
               'int64
               16)
              (vec-cast
               (sca-broadcast (int32_t output_multiplier) 16)
               'int64
               16))
             (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
           (vec-div
            (vec-mul
             (vec-cast
              (vec-add
               (vec-add
                (vec-mul
                 (vec-cast
                  (load
                   (buffer column_sums_b 'uint32)
                   (ramp
                    (sca-add
                     (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                     16)
                    1
                    16)
                   (aligned 16 0))
                  'int32
                  16)
                 (sca-broadcast (int32_t t5829) 16))
                (vec-add
                 (load
                  (buffer bias 'int32)
                  (ramp (sca-mul output.s0.x.x 16) 1 16)
                  (aligned 16 0))
                 (sca-broadcast
                  (sca-add
                   (sca-mul
                    (sca-mul (int32_t t5829) (int32_t t5830))
                    (int32_t mat_a.extent.0))
                   (sca-mul (int32_t t5830) (int32_t t6653)))
                  16)))
               (vec-cast
                (load
                 (buffer multiplied_no_offsets 'uint32)
                 (ramp
                  (sca-add
                   (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
                   4)
                  1
                  16)
                 (aligned 4 0))
                'int32
                16))
              'int64
              16)
             (vec-cast
              (sca-broadcast (int32_t output_multiplier) 16)
              'int64
              16))
            (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
          (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
         (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
        'int32
        16)
       (sca-broadcast
        (sca-add (int32_t output_shift) (int32_t (bv #xffffffff 32)))
        16))))
    (sca-broadcast (int32_t output_offset) 16))
   (sca-broadcast (int32_t (bv #x000000ff 32)) 16))
  (sca-broadcast (int32_t (bv #x00000000 32)) 16))
 'uint8
 16)
template:
  (cast
 ...
 (vs-mpy-add
  ...
  (combine
   (vs-shift-right
    ...
    (cast
     ...
     (vs-shift-right
      ...
      (vs-mpy-add
       ...
       (vs-mpy-add
        ...
        (combine
         (vs-mpy-add
          ...
          (combine
           (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
           (vs-mpy-add
            ...
            (combine
             #<load-data>
             (broadcast
              ...
              (sca-add
               (sca-mul
                (sca-mul (int32_t t5829) (int32_t t5830))
                (int32_t mat_a.extent.0))
               (sca-mul (int32_t t5830) (int32_t t6653)))))
            (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
            #f
            #f
            #f
            'int32))
          (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
          #f
          #f
          #f
          'int32)
         (cast ... #<load-data> 'int32 #f))
        (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
        #f
        #f
        #f
        'int32)
       (list (int32_t output_multiplier))
       #f
       #f
       #f
       'int64)
      (int64_t (bv #x000000000000001f 64))
      #t
      x?$2971
      #t)
     'int32
     #t)
    (int32_t output_shift)
    #t
    x?$3371
    #t)
   (broadcast ... (int32_t output_offset)))
  (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
  #f
  #f
  #f
  'int32)
 'uint8
 #t)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-cast
 (vec-max
  (vec-min
   #<abstr-halide-expr>
   (sca-broadcast (int32_t (bv #x000000ff 32)) 16))
  (sca-broadcast (int32_t (bv #x00000000 32)) 16))
 'uint8
 16)
optimized-template:
  (cast ... #<abstr-expr> 'uint8 #t)
optimized Halide 0:
  (uint8_t
 (extract 7 0 (ite (bvsle (bv #x00000000 32) (ite (bvsle (app abstr-vals$3605 0) (bv #x000000ff 32)) (app abstr-vals$3605 0) (bv #x000000ff 32))) (ite (bvsle (app abstr-vals$3605 0) (bv #x000000ff 32)) (app abstr-vals$3605 0) (bv #x000000ff 32)) (bv #x00000000 32))))
optimized x86 0:
  (uint8_t
 (ite (bvslt (app abstr-vals$3605 0) (bv #x00000000 32)) (bv #x00 8) (ite (bvslt (bv #x000000ff 32) (app abstr-vals$3605 0)) (bv #xff 8) (extract 7 0 (app abstr-vals$3605 0)))))
Ran synthesizer for 61 ms
(model)
(vec-cast
 (vec-max
  (vec-min
   #<abstr-halide-expr>
   (sca-broadcast (int32_t (bv #x000000ff 32)) 16))
  (sca-broadcast (int32_t (bv #x00000000 32)) 16))
 'uint8
 16)
(cast
 ...
 (vs-mpy-add
  ...
  (combine
   (vs-shift-right
    ...
    (cast
     ...
     (vs-shift-right
      ...
      (vs-mpy-add
       ...
       (vs-mpy-add
        ...
        (combine
         (vs-mpy-add
          ...
          (combine
           (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
           (vs-mpy-add
            ...
            (combine
             #<load-data>
             (broadcast
              ...
              (sca-add
               (sca-mul
                (sca-mul (int32_t t5829) (int32_t t5830))
                (int32_t mat_a.extent.0))
               (sca-mul (int32_t t5830) (int32_t t6653)))))
            (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
            #f
            #f
            #f
            'int32))
          (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
          #f
          #f
          #f
          'int32)
         (cast ... #<load-data> 'int32 #f))
        (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
        #f
        #f
        #f
        'int32)
       (list (int32_t output_multiplier))
       #f
       #f
       #f
       'int64)
      (int64_t (bv #x000000000000001f 64))
      #t
      x?$2971
      #t)
     'int32
     #t)
    (int32_t output_shift)
    #t
    x?$3371
    #t)
   (broadcast ... (int32_t output_offset)))
  (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
  #f
  #f
  #f
  'int32)
 'uint8
 #t)
Ran bounds analysis for 25 ms
Ran bounds analysis for 13 ms
"Success?"
#t
(cast ... (vs-mpy-add ... (combine (vs-shift-right ... (cast ... (vs-shift-right ... (vs-mpy-add ... (vs-mpy-add ... (combine (vs-mpy-add ... (combine (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32) (vs-mpy-add ... (combine #<load-data> (broadcast ... (sca-add (sca-mul (sca-mul (int32_t t5829) (int32_t t5830)) (int32_t mat_a.extent.0)) (sca-mul (int32_t t5830) (int32_t t6653))))) (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8))) #f #f #f 'int32)) (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8))) #f #f #f 'int32) (cast ... #<load-data> 'int32 #f)) (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8))) #f #f #f 'int32) (list (int32_t output_multiplier)) #f #f #f 'int64) (int64_t (bv #x000000000000001f 64)) #t x?$2971 #t) 'int32 #t) (int32_t output_shift) #t x?$3371 #t) (broadcast ... (int32_t output_offset))) (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8))) #f #f #f 'int32) 'uint8 #t)
"Building Expr:"
(sca-broadcast (uint8_t output_max) 16)
"Fold templates"
'()
here()

"Replace templates"
'()
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (sca-broadcast (uint8_t output_max) 16)
template:
  (broadcast ... (uint8_t output_max))
axioms:
  '()
optimized-halide-expr:
  (sca-broadcast (uint8_t output_max) 16)
optimized-template:
  (broadcast ... (uint8_t output_max))
optimized Halide 0:
  (uint8_t output_max)
optimized x86 0:
  (uint8_t output_max)
Ran synthesizer for 22 ms
(model)
(sca-broadcast (uint8_t output_max) 16)
(broadcast ... (uint8_t output_max))
Ran bounds analysis for 24 ms
Ran bounds analysis for 15 ms
"Extended success?"
#t
(broadcast ... (uint8_t output_max))
"Building Expr:"
(vec-min
 (vec-cast
  (vec-max
   (vec-min
    (vec-add
     (vec-add
      (vec-shr
       (vec-cast
        (vec-max
         (vec-min
          (vec-add
           (vec-bwand
            (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
            (vec-div
             (vec-mul
              (vec-cast
               (vec-add
                (vec-add
                 (vec-mul
                  (vec-cast
                   (load
                    (buffer column_sums_b 'uint32)
                    (ramp
                     (sca-add
                      (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                      16)
                     1
                     16)
                    (aligned 16 0))
                   'int32
                   16)
                  (sca-broadcast (int32_t t5829) 16))
                 (vec-add
                  (load
                   (buffer bias 'int32)
                   (ramp (sca-mul output.s0.x.x 16) 1 16)
                   (aligned 16 0))
                  (sca-broadcast
                   (sca-add
                    (sca-mul
                     (sca-mul (int32_t t5829) (int32_t t5830))
                     (int32_t mat_a.extent.0))
                    (sca-mul (int32_t t5830) (int32_t t6653)))
                   16)))
                (vec-cast
                 (load
                  (buffer multiplied_no_offsets 'uint32)
                  (ramp
                   (sca-add
                    (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
                    4)
                   1
                   16)
                  (aligned 4 0))
                 'int32
                 16))
               'int64
               16)
              (vec-cast
               (sca-broadcast (int32_t output_multiplier) 16)
               'int64
               16))
             (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
           (vec-div
            (vec-mul
             (vec-cast
              (vec-add
               (vec-add
                (vec-mul
                 (vec-cast
                  (load
                   (buffer column_sums_b 'uint32)
                   (ramp
                    (sca-add
                     (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                     16)
                    1
                    16)
                   (aligned 16 0))
                  'int32
                  16)
                 (sca-broadcast (int32_t t5829) 16))
                (vec-add
                 (load
                  (buffer bias 'int32)
                  (ramp (sca-mul output.s0.x.x 16) 1 16)
                  (aligned 16 0))
                 (sca-broadcast
                  (sca-add
                   (sca-mul
                    (sca-mul (int32_t t5829) (int32_t t5830))
                    (int32_t mat_a.extent.0))
                   (sca-mul (int32_t t5830) (int32_t t6653)))
                  16)))
               (vec-cast
                (load
                 (buffer multiplied_no_offsets 'uint32)
                 (ramp
                  (sca-add
                   (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
                   4)
                  1
                  16)
                 (aligned 4 0))
                'int32
                16))
              'int64
              16)
             (vec-cast
              (sca-broadcast (int32_t output_multiplier) 16)
              'int64
              16))
            (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
          (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
         (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
        'int32
        16)
       (sca-broadcast (int32_t output_shift) 16))
      (vec-bwand
       (vec-if
        (sca-broadcast
         (sca-lt (int32_t (bv #x00000000 32)) (int32_t output_shift))
         16)
        (sca-broadcast (int32_t (bv #x00000001 32)) 16)
        (sca-broadcast (int32_t (bv #x00000000 32)) 16))
       (vec-shr
        (vec-cast
         (vec-max
          (vec-min
           (vec-add
            (vec-bwand
             (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
             (vec-div
              (vec-mul
               (vec-cast
                (vec-add
                 (vec-add
                  (vec-mul
                   (vec-cast
                    (load
                     (buffer column_sums_b 'uint32)
                     (ramp
                      (sca-add
                       (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                       16)
                      1
                      16)
                     (aligned 16 0))
                    'int32
                    16)
                   (sca-broadcast (int32_t t5829) 16))
                  (vec-add
                   (load
                    (buffer bias 'int32)
                    (ramp (sca-mul output.s0.x.x 16) 1 16)
                    (aligned 16 0))
                   (sca-broadcast
                    (sca-add
                     (sca-mul
                      (sca-mul (int32_t t5829) (int32_t t5830))
                      (int32_t mat_a.extent.0))
                     (sca-mul (int32_t t5830) (int32_t t6653)))
                    16)))
                 (vec-cast
                  (load
                   (buffer multiplied_no_offsets 'uint32)
                   (ramp
                    (sca-add
                     (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
                     4)
                    1
                    16)
                   (aligned 4 0))
                  'int32
                  16))
                'int64
                16)
               (vec-cast
                (sca-broadcast (int32_t output_multiplier) 16)
                'int64
                16))
              (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
            (vec-div
             (vec-mul
              (vec-cast
               (vec-add
                (vec-add
                 (vec-mul
                  (vec-cast
                   (load
                    (buffer column_sums_b 'uint32)
                    (ramp
                     (sca-add
                      (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                      16)
                     1
                     16)
                    (aligned 16 0))
                   'int32
                   16)
                  (sca-broadcast (int32_t t5829) 16))
                 (vec-add
                  (load
                   (buffer bias 'int32)
                   (ramp (sca-mul output.s0.x.x 16) 1 16)
                   (aligned 16 0))
                  (sca-broadcast
                   (sca-add
                    (sca-mul
                     (sca-mul (int32_t t5829) (int32_t t5830))
                     (int32_t mat_a.extent.0))
                    (sca-mul (int32_t t5830) (int32_t t6653)))
                   16)))
                (vec-cast
                 (load
                  (buffer multiplied_no_offsets 'uint32)
                  (ramp
                   (sca-add
                    (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
                    4)
                   1
                   16)
                  (aligned 4 0))
                 'int32
                 16))
               'int64
               16)
              (vec-cast
               (sca-broadcast (int32_t output_multiplier) 16)
               'int64
               16))
             (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
           (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
          (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
         'int32
         16)
        (sca-broadcast
         (sca-add (int32_t output_shift) (int32_t (bv #xffffffff 32)))
         16))))
     (sca-broadcast (int32_t output_offset) 16))
    (sca-broadcast (int32_t (bv #x000000ff 32)) 16))
   (sca-broadcast (int32_t (bv #x00000000 32)) 16))
  'uint8
  16)
 (sca-broadcast (uint8_t output_max) 16))
"Fold templates"
(list
 (cast
  ...
  (vs-mpy-add
   ...
   (combine
    (vs-shift-right
     ...
     (cast
      ...
      (vs-shift-right
       ...
       (vs-mpy-add
        ...
        (vs-mpy-add
         ...
         (combine
          (vs-mpy-add
           ...
           (combine
            (vs-mpy-add
             ...
             #<load-data>
             (list (int32_t t5829))
             #f
             #f
             #f
             'int32)
            (vs-mpy-add
             ...
             (combine
              #<load-data>
              (broadcast
               ...
               (sca-add
                (sca-mul
                 (sca-mul (int32_t t5829) (int32_t t5830))
                 (int32_t mat_a.extent.0))
                (sca-mul (int32_t t5830) (int32_t t6653)))))
             (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
             #f
             #f
             #f
             'int32))
           (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
           #f
           #f
           #f
           'int32)
          (cast ... #<load-data> 'int32 #f))
         (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
         #f
         #f
         #f
         'int32)
        (list (int32_t output_multiplier))
        #f
        #f
        #f
        'int64)
       (int64_t (bv #x000000000000001f 64))
       #t
       x?$2971
       #t)
      'int32
      #t)
     (int32_t output_shift)
     #t
     x?$3371
     #t)
    (broadcast ... (int32_t output_offset)))
   (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
   #f
   #f
   #f
   'int32)
  'uint8
  x?$3607))
here(#(struct:cast ... #(struct:vs-mpy-add ... #<combine: #(struct:vs-shift-right ... #(struct:cast ... #(struct:vs-shift-right ... #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<load-data> (#(struct:int32_t t5829)) #f #f #f int32) #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-add #(struct:sca-mul #(struct:sca-mul #(struct:int32_t t5829) #(struct:int32_t t5830)) #(struct:int32_t mat_a.extent.0)) #(struct:sca-mul #(struct:int32_t t5830) #(struct:int32_t t6653))))> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32)> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32) #(struct:cast ... #<load-data> int32 #f)> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32) (#(struct:int32_t output_multiplier)) #f #f #f int64) #(struct:int64_t (bv #x000000000000001f 64)) #t x?$2971 #t) int32 #t) #(struct:int32_t output_shift) #t x?$3371 #t) #(struct:broadcast ... #(struct:int32_t output_offset))> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32) uint8 x?$3607))

"Replace templates"
'()
run-x86-synthesizer
halide-expr:
  (vec-min
 (vec-cast
  (vec-max
   (vec-min
    (vec-add
     (vec-add
      (vec-shr
       (vec-cast
        (vec-max
         (vec-min
          (vec-add
           (vec-bwand
            (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
            (vec-div
             (vec-mul
              (vec-cast
               (vec-add
                (vec-add
                 (vec-mul
                  (vec-cast
                   (load
                    (buffer column_sums_b 'uint32)
                    (ramp
                     (sca-add
                      (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                      16)
                     1
                     16)
                    (aligned 16 0))
                   'int32
                   16)
                  (sca-broadcast (int32_t t5829) 16))
                 (vec-add
                  (load
                   (buffer bias 'int32)
                   (ramp (sca-mul output.s0.x.x 16) 1 16)
                   (aligned 16 0))
                  (sca-broadcast
                   (sca-add
                    (sca-mul
                     (sca-mul (int32_t t5829) (int32_t t5830))
                     (int32_t mat_a.extent.0))
                    (sca-mul (int32_t t5830) (int32_t t6653)))
                   16)))
                (vec-cast
                 (load
                  (buffer multiplied_no_offsets 'uint32)
                  (ramp
                   (sca-add
                    (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
                    4)
                   1
                   16)
                  (aligned 4 0))
                 'int32
                 16))
               'int64
               16)
              (vec-cast
               (sca-broadcast (int32_t output_multiplier) 16)
               'int64
               16))
             (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
           (vec-div
            (vec-mul
             (vec-cast
              (vec-add
               (vec-add
                (vec-mul
                 (vec-cast
                  (load
                   (buffer column_sums_b 'uint32)
                   (ramp
                    (sca-add
                     (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                     16)
                    1
                    16)
                   (aligned 16 0))
                  'int32
                  16)
                 (sca-broadcast (int32_t t5829) 16))
                (vec-add
                 (load
                  (buffer bias 'int32)
                  (ramp (sca-mul output.s0.x.x 16) 1 16)
                  (aligned 16 0))
                 (sca-broadcast
                  (sca-add
                   (sca-mul
                    (sca-mul (int32_t t5829) (int32_t t5830))
                    (int32_t mat_a.extent.0))
                   (sca-mul (int32_t t5830) (int32_t t6653)))
                  16)))
               (vec-cast
                (load
                 (buffer multiplied_no_offsets 'uint32)
                 (ramp
                  (sca-add
                   (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
                   4)
                  1
                  16)
                 (aligned 4 0))
                'int32
                16))
              'int64
              16)
             (vec-cast
              (sca-broadcast (int32_t output_multiplier) 16)
              'int64
              16))
            (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
          (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
         (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
        'int32
        16)
       (sca-broadcast (int32_t output_shift) 16))
      (vec-bwand
       (vec-if
        (sca-broadcast
         (sca-lt (int32_t (bv #x00000000 32)) (int32_t output_shift))
         16)
        (sca-broadcast (int32_t (bv #x00000001 32)) 16)
        (sca-broadcast (int32_t (bv #x00000000 32)) 16))
       (vec-shr
        (vec-cast
         (vec-max
          (vec-min
           (vec-add
            (vec-bwand
             (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
             (vec-div
              (vec-mul
               (vec-cast
                (vec-add
                 (vec-add
                  (vec-mul
                   (vec-cast
                    (load
                     (buffer column_sums_b 'uint32)
                     (ramp
                      (sca-add
                       (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                       16)
                      1
                      16)
                     (aligned 16 0))
                    'int32
                    16)
                   (sca-broadcast (int32_t t5829) 16))
                  (vec-add
                   (load
                    (buffer bias 'int32)
                    (ramp (sca-mul output.s0.x.x 16) 1 16)
                    (aligned 16 0))
                   (sca-broadcast
                    (sca-add
                     (sca-mul
                      (sca-mul (int32_t t5829) (int32_t t5830))
                      (int32_t mat_a.extent.0))
                     (sca-mul (int32_t t5830) (int32_t t6653)))
                    16)))
                 (vec-cast
                  (load
                   (buffer multiplied_no_offsets 'uint32)
                   (ramp
                    (sca-add
                     (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
                     4)
                    1
                    16)
                   (aligned 4 0))
                  'int32
                  16))
                'int64
                16)
               (vec-cast
                (sca-broadcast (int32_t output_multiplier) 16)
                'int64
                16))
              (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
            (vec-div
             (vec-mul
              (vec-cast
               (vec-add
                (vec-add
                 (vec-mul
                  (vec-cast
                   (load
                    (buffer column_sums_b 'uint32)
                    (ramp
                     (sca-add
                      (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                      16)
                     1
                     16)
                    (aligned 16 0))
                   'int32
                   16)
                  (sca-broadcast (int32_t t5829) 16))
                 (vec-add
                  (load
                   (buffer bias 'int32)
                   (ramp (sca-mul output.s0.x.x 16) 1 16)
                   (aligned 16 0))
                  (sca-broadcast
                   (sca-add
                    (sca-mul
                     (sca-mul (int32_t t5829) (int32_t t5830))
                     (int32_t mat_a.extent.0))
                    (sca-mul (int32_t t5830) (int32_t t6653)))
                   16)))
                (vec-cast
                 (load
                  (buffer multiplied_no_offsets 'uint32)
                  (ramp
                   (sca-add
                    (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
                    4)
                   1
                   16)
                  (aligned 4 0))
                 'int32
                 16))
               'int64
               16)
              (vec-cast
               (sca-broadcast (int32_t output_multiplier) 16)
               'int64
               16))
             (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
           (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
          (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
         'int32
         16)
        (sca-broadcast
         (sca-add (int32_t output_shift) (int32_t (bv #xffffffff 32)))
         16))))
     (sca-broadcast (int32_t output_offset) 16))
    (sca-broadcast (int32_t (bv #x000000ff 32)) 16))
   (sca-broadcast (int32_t (bv #x00000000 32)) 16))
  'uint8
  16)
 (sca-broadcast (uint8_t output_max) 16))
template:
  (cast
 ...
 (vs-mpy-add
  ...
  (combine
   (vs-shift-right
    ...
    (cast
     ...
     (vs-shift-right
      ...
      (vs-mpy-add
       ...
       (vs-mpy-add
        ...
        (combine
         (vs-mpy-add
          ...
          (combine
           (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
           (vs-mpy-add
            ...
            (combine
             #<load-data>
             (broadcast
              ...
              (sca-add
               (sca-mul
                (sca-mul (int32_t t5829) (int32_t t5830))
                (int32_t mat_a.extent.0))
               (sca-mul (int32_t t5830) (int32_t t6653)))))
            (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
            #f
            #f
            #f
            'int32))
          (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
          #f
          #f
          #f
          'int32)
         (cast ... #<load-data> 'int32 #f))
        (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
        #f
        #f
        #f
        'int32)
       (list (int32_t output_multiplier))
       #f
       #f
       #f
       'int64)
      (int64_t (bv #x000000000000001f 64))
      #t
      x?$2971
      #t)
     'int32
     #t)
    (int32_t output_shift)
    #t
    x?$3371
    #t)
   (broadcast ... (int32_t output_offset)))
  (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
  #f
  #f
  #f
  'int32)
 'uint8
 x?$3607)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-min
 (vec-cast
  (vec-max
   (vec-min
    #<abstr-halide-expr>
    (sca-broadcast (int32_t (bv #x000000ff 32)) 16))
   (sca-broadcast (int32_t (bv #x00000000 32)) 16))
  'uint8
  16)
 (sca-broadcast (uint8_t output_max) 16))
optimized-template:
  (cast ... #<abstr-expr> 'uint8 x?$3607)
optimized Halide 0:
  (uint8_t
 (ite (bvule (extract 7 0 (ite (bvsle (bv #x00000000 32) (ite (bvsle (app abstr-vals$3613 0) (bv #x000000ff 32)) (app abstr-vals$3613 0) (bv #x000000ff 32))) (ite (bvsle (app abstr-vals$3613 0) (bv #x000000ff 32)) (app abstr-vals$3613 0) (bv #x000000ff 32)) (bv #x00000000 32))) output_max) (extract 7 0 (ite (bvsle (bv #x00000000 32) (ite (bvsle (app abstr-vals$3613 0) (bv #x000000ff 32)) (app abstr-vals$3613 0) (bv #x000000ff 32))) (ite (bvsle (app abstr-vals$3613 0) (bv #x000000ff 32)) (app abstr-vals$3613 0) (bv #x000000ff 32)) (bv #x00000000 32))) output_max))
optimized x86 0:
  (uint8_t
 (ite x?$3607 (ite (bvslt (app abstr-vals$3613 0) (bv #x00000000 32)) (bv #x00 8) (ite (bvslt (bv #x000000ff 32) (app abstr-vals$3613 0)) (bv #xff 8) (extract 7 0 (app abstr-vals$3613 0)))) (extract 7 0 (app abstr-vals$3613 0))))
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (vec-min
 (vec-cast
  (vec-max
   (vec-min
    (vec-add
     (vec-add
      (vec-shr
       (vec-cast
        (vec-max
         (vec-min
          (vec-add
           (vec-bwand
            (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
            (vec-div
             (vec-mul
              (vec-cast
               (vec-add
                (vec-add
                 (vec-mul
                  (vec-cast
                   (load
                    (buffer column_sums_b 'uint32)
                    (ramp
                     (sca-add
                      (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                      16)
                     1
                     16)
                    (aligned 16 0))
                   'int32
                   16)
                  (sca-broadcast (int32_t t5829) 16))
                 (vec-add
                  (load
                   (buffer bias 'int32)
                   (ramp (sca-mul output.s0.x.x 16) 1 16)
                   (aligned 16 0))
                  (sca-broadcast
                   (sca-add
                    (sca-mul
                     (sca-mul (int32_t t5829) (int32_t t5830))
                     (int32_t mat_a.extent.0))
                    (sca-mul (int32_t t5830) (int32_t t6653)))
                   16)))
                (vec-cast
                 (load
                  (buffer multiplied_no_offsets 'uint32)
                  (ramp
                   (sca-add
                    (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
                    4)
                   1
                   16)
                  (aligned 4 0))
                 'int32
                 16))
               'int64
               16)
              (vec-cast
               (sca-broadcast (int32_t output_multiplier) 16)
               'int64
               16))
             (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
           (vec-div
            (vec-mul
             (vec-cast
              (vec-add
               (vec-add
                (vec-mul
                 (vec-cast
                  (load
                   (buffer column_sums_b 'uint32)
                   (ramp
                    (sca-add
                     (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                     16)
                    1
                    16)
                   (aligned 16 0))
                  'int32
                  16)
                 (sca-broadcast (int32_t t5829) 16))
                (vec-add
                 (load
                  (buffer bias 'int32)
                  (ramp (sca-mul output.s0.x.x 16) 1 16)
                  (aligned 16 0))
                 (sca-broadcast
                  (sca-add
                   (sca-mul
                    (sca-mul (int32_t t5829) (int32_t t5830))
                    (int32_t mat_a.extent.0))
                   (sca-mul (int32_t t5830) (int32_t t6653)))
                  16)))
               (vec-cast
                (load
                 (buffer multiplied_no_offsets 'uint32)
                 (ramp
                  (sca-add
                   (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
                   4)
                  1
                  16)
                 (aligned 4 0))
                'int32
                16))
              'int64
              16)
             (vec-cast
              (sca-broadcast (int32_t output_multiplier) 16)
              'int64
              16))
            (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
          (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
         (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
        'int32
        16)
       (sca-broadcast (int32_t output_shift) 16))
      (vec-bwand
       (vec-if
        (sca-broadcast
         (sca-lt (int32_t (bv #x00000000 32)) (int32_t output_shift))
         16)
        (sca-broadcast (int32_t (bv #x00000001 32)) 16)
        (sca-broadcast (int32_t (bv #x00000000 32)) 16))
       (vec-shr
        (vec-cast
         (vec-max
          (vec-min
           (vec-add
            (vec-bwand
             (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
             (vec-div
              (vec-mul
               (vec-cast
                (vec-add
                 (vec-add
                  (vec-mul
                   (vec-cast
                    (load
                     (buffer column_sums_b 'uint32)
                     (ramp
                      (sca-add
                       (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                       16)
                      1
                      16)
                     (aligned 16 0))
                    'int32
                    16)
                   (sca-broadcast (int32_t t5829) 16))
                  (vec-add
                   (load
                    (buffer bias 'int32)
                    (ramp (sca-mul output.s0.x.x 16) 1 16)
                    (aligned 16 0))
                   (sca-broadcast
                    (sca-add
                     (sca-mul
                      (sca-mul (int32_t t5829) (int32_t t5830))
                      (int32_t mat_a.extent.0))
                     (sca-mul (int32_t t5830) (int32_t t6653)))
                    16)))
                 (vec-cast
                  (load
                   (buffer multiplied_no_offsets 'uint32)
                   (ramp
                    (sca-add
                     (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
                     4)
                    1
                    16)
                   (aligned 4 0))
                  'int32
                  16))
                'int64
                16)
               (vec-cast
                (sca-broadcast (int32_t output_multiplier) 16)
                'int64
                16))
              (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
            (vec-div
             (vec-mul
              (vec-cast
               (vec-add
                (vec-add
                 (vec-mul
                  (vec-cast
                   (load
                    (buffer column_sums_b 'uint32)
                    (ramp
                     (sca-add
                      (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                      16)
                     1
                     16)
                    (aligned 16 0))
                   'int32
                   16)
                  (sca-broadcast (int32_t t5829) 16))
                 (vec-add
                  (load
                   (buffer bias 'int32)
                   (ramp (sca-mul output.s0.x.x 16) 1 16)
                   (aligned 16 0))
                  (sca-broadcast
                   (sca-add
                    (sca-mul
                     (sca-mul (int32_t t5829) (int32_t t5830))
                     (int32_t mat_a.extent.0))
                    (sca-mul (int32_t t5830) (int32_t t6653)))
                   16)))
                (vec-cast
                 (load
                  (buffer multiplied_no_offsets 'uint32)
                  (ramp
                   (sca-add
                    (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
                    4)
                   1
                   16)
                  (aligned 4 0))
                 'int32
                 16))
               'int64
               16)
              (vec-cast
               (sca-broadcast (int32_t output_multiplier) 16)
               'int64
               16))
             (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
           (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
          (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
         'int32
         16)
        (sca-broadcast
         (sca-add (int32_t output_shift) (int32_t (bv #xffffffff 32)))
         16))))
     (sca-broadcast (int32_t output_offset) 16))
    (sca-broadcast (int32_t (bv #x000000ff 32)) 16))
   (sca-broadcast (int32_t (bv #x00000000 32)) 16))
  'uint8
  16)
 (sca-broadcast (uint8_t output_max) 16))
template:
  (minimum
 ...
 (cast
  ...
  (vs-mpy-add
   ...
   (combine
    (vs-shift-right
     ...
     (cast
      ...
      (vs-shift-right
       ...
       (vs-mpy-add
        ...
        (vs-mpy-add
         ...
         (combine
          (vs-mpy-add
           ...
           (combine
            (vs-mpy-add
             ...
             #<load-data>
             (list (int32_t t5829))
             #f
             #f
             #f
             'int32)
            (vs-mpy-add
             ...
             (combine
              #<load-data>
              (broadcast
               ...
               (sca-add
                (sca-mul
                 (sca-mul (int32_t t5829) (int32_t t5830))
                 (int32_t mat_a.extent.0))
                (sca-mul (int32_t t5830) (int32_t t6653)))))
             (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
             #f
             #f
             #f
             'int32))
           (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
           #f
           #f
           #f
           'int32)
          (cast ... #<load-data> 'int32 #f))
         (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
         #f
         #f
         #f
         'int32)
        (list (int32_t output_multiplier))
        #f
        #f
        #f
        'int64)
       (int64_t (bv #x000000000000001f 64))
       #t
       x?$2971
       #t)
      'int32
      #t)
     (int32_t output_shift)
     #t
     x?$3371
     #t)
    (broadcast ... (int32_t output_offset)))
   (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
   #f
   #f
   #f
   'int32)
  'uint8
  #t)
 (broadcast ... (uint8_t output_max)))
axioms:
  '(#t #t)
optimized-halide-expr:
  (vec-min #<abstr-halide-expr> #<abstr-halide-expr>)
optimized-template:
  (minimum ... #<abstr-expr> #<abstr-expr>)
optimized Halide 0:
  (uint8_t
 (ite (bvule (app abstr-vals$3614 0) (app abstr-vals$3615 0)) (app abstr-vals$3614 0) (app abstr-vals$3615 0)))
optimized x86 0:
  (uint8_t
 (ite (bvule (app abstr-vals$3614 0) (app abstr-vals$3615 0)) (app abstr-vals$3614 0) (app abstr-vals$3615 0)))
Ran synthesizer for 22 ms
(model)
(vec-min #<abstr-halide-expr> #<abstr-halide-expr>)
(minimum
 ...
 (cast
  ...
  (vs-mpy-add
   ...
   (combine
    (vs-shift-right
     ...
     (cast
      ...
      (vs-shift-right
       ...
       (vs-mpy-add
        ...
        (vs-mpy-add
         ...
         (combine
          (vs-mpy-add
           ...
           (combine
            (vs-mpy-add
             ...
             #<load-data>
             (list (int32_t t5829))
             #f
             #f
             #f
             'int32)
            (vs-mpy-add
             ...
             (combine
              #<load-data>
              (broadcast
               ...
               (sca-add
                (sca-mul
                 (sca-mul (int32_t t5829) (int32_t t5830))
                 (int32_t mat_a.extent.0))
                (sca-mul (int32_t t5830) (int32_t t6653)))))
             (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
             #f
             #f
             #f
             'int32))
           (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
           #f
           #f
           #f
           'int32)
          (cast ... #<load-data> 'int32 #f))
         (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
         #f
         #f
         #f
         'int32)
        (list (int32_t output_multiplier))
        #f
        #f
        #f
        'int64)
       (int64_t (bv #x000000000000001f 64))
       #t
       x?$2971
       #t)
      'int32
      #t)
     (int32_t output_shift)
     #t
     x?$3371
     #t)
    (broadcast ... (int32_t output_offset)))
   (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
   #f
   #f
   #f
   'int32)
  'uint8
  #t)
 (broadcast ... (uint8_t output_max)))
Ran bounds analysis for 27 ms
Ran bounds analysis for 13 ms
"Extended success?"
#t
(minimum
 ...
 (cast
  ...
  (vs-mpy-add
   ...
   (combine
    (vs-shift-right
     ...
     (cast
      ...
      (vs-shift-right
       ...
       (vs-mpy-add
        ...
        (vs-mpy-add
         ...
         (combine
          (vs-mpy-add
           ...
           (combine
            (vs-mpy-add
             ...
             #<load-data>
             (list (int32_t t5829))
             #f
             #f
             #f
             'int32)
            (vs-mpy-add
             ...
             (combine
              #<load-data>
              (broadcast
               ...
               (sca-add
                (sca-mul
                 (sca-mul (int32_t t5829) (int32_t t5830))
                 (int32_t mat_a.extent.0))
                (sca-mul (int32_t t5830) (int32_t t6653)))))
             (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
             #f
             #f
             #f
             'int32))
           (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
           #f
           #f
           #f
           'int32)
          (cast ... #<load-data> 'int32 #f))
         (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
         #f
         #f
         #f
         'int32)
        (list (int32_t output_multiplier))
        #f
        #f
        #f
        'int64)
       (int64_t (bv #x000000000000001f 64))
       #t
       x?$2971
       #t)
      'int32
      #t)
     (int32_t output_shift)
     #t
     x?$3371
     #t)
    (broadcast ... (int32_t output_offset)))
   (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
   #f
   #f
   #f
   'int32)
  'uint8
  #t)
 (broadcast ... (uint8_t output_max)))
"Building Expr:"
(sca-broadcast (uint8_t output_min) 16)
"Fold templates"
'()
here()

"Replace templates"
'()
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (sca-broadcast (uint8_t output_min) 16)
template:
  (broadcast ... (uint8_t output_min))
axioms:
  '()
optimized-halide-expr:
  (sca-broadcast (uint8_t output_min) 16)
optimized-template:
  (broadcast ... (uint8_t output_min))
optimized Halide 0:
  (uint8_t output_min)
optimized x86 0:
  (uint8_t output_min)
Ran synthesizer for 21 ms
(model)
(sca-broadcast (uint8_t output_min) 16)
(broadcast ... (uint8_t output_min))
Ran bounds analysis for 24 ms
Ran bounds analysis for 14 ms
"Extended success?"
#t
(broadcast ... (uint8_t output_min))
"Building Expr:"
(vec-max
 (vec-min
  (vec-cast
   (vec-max
    (vec-min
     (vec-add
      (vec-add
       (vec-shr
        (vec-cast
         (vec-max
          (vec-min
           (vec-add
            (vec-bwand
             (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
             (vec-div
              (vec-mul
               (vec-cast
                (vec-add
                 (vec-add
                  (vec-mul
                   (vec-cast
                    (load
                     (buffer column_sums_b 'uint32)
                     (ramp
                      (sca-add
                       (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                       16)
                      1
                      16)
                     (aligned 16 0))
                    'int32
                    16)
                   (sca-broadcast (int32_t t5829) 16))
                  (vec-add
                   (load
                    (buffer bias 'int32)
                    (ramp (sca-mul output.s0.x.x 16) 1 16)
                    (aligned 16 0))
                   (sca-broadcast
                    (sca-add
                     (sca-mul
                      (sca-mul (int32_t t5829) (int32_t t5830))
                      (int32_t mat_a.extent.0))
                     (sca-mul (int32_t t5830) (int32_t t6653)))
                    16)))
                 (vec-cast
                  (load
                   (buffer multiplied_no_offsets 'uint32)
                   (ramp
                    (sca-add
                     (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
                     4)
                    1
                    16)
                   (aligned 4 0))
                  'int32
                  16))
                'int64
                16)
               (vec-cast
                (sca-broadcast (int32_t output_multiplier) 16)
                'int64
                16))
              (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
            (vec-div
             (vec-mul
              (vec-cast
               (vec-add
                (vec-add
                 (vec-mul
                  (vec-cast
                   (load
                    (buffer column_sums_b 'uint32)
                    (ramp
                     (sca-add
                      (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                      16)
                     1
                     16)
                    (aligned 16 0))
                   'int32
                   16)
                  (sca-broadcast (int32_t t5829) 16))
                 (vec-add
                  (load
                   (buffer bias 'int32)
                   (ramp (sca-mul output.s0.x.x 16) 1 16)
                   (aligned 16 0))
                  (sca-broadcast
                   (sca-add
                    (sca-mul
                     (sca-mul (int32_t t5829) (int32_t t5830))
                     (int32_t mat_a.extent.0))
                    (sca-mul (int32_t t5830) (int32_t t6653)))
                   16)))
                (vec-cast
                 (load
                  (buffer multiplied_no_offsets 'uint32)
                  (ramp
                   (sca-add
                    (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
                    4)
                   1
                   16)
                  (aligned 4 0))
                 'int32
                 16))
               'int64
               16)
              (vec-cast
               (sca-broadcast (int32_t output_multiplier) 16)
               'int64
               16))
             (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
           (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
          (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
         'int32
         16)
        (sca-broadcast (int32_t output_shift) 16))
       (vec-bwand
        (vec-if
         (sca-broadcast
          (sca-lt (int32_t (bv #x00000000 32)) (int32_t output_shift))
          16)
         (sca-broadcast (int32_t (bv #x00000001 32)) 16)
         (sca-broadcast (int32_t (bv #x00000000 32)) 16))
        (vec-shr
         (vec-cast
          (vec-max
           (vec-min
            (vec-add
             (vec-bwand
              (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
              (vec-div
               (vec-mul
                (vec-cast
                 (vec-add
                  (vec-add
                   (vec-mul
                    (vec-cast
                     (load
                      (buffer column_sums_b 'uint32)
                      (ramp
                       (sca-add
                        (sca-mul
                         (sca-sub output.s0.x.x (var-lookup 't6112))
                         16)
                        16)
                       1
                       16)
                      (aligned 16 0))
                     'int32
                     16)
                    (sca-broadcast (int32_t t5829) 16))
                   (vec-add
                    (load
                     (buffer bias 'int32)
                     (ramp (sca-mul output.s0.x.x 16) 1 16)
                     (aligned 16 0))
                    (sca-broadcast
                     (sca-add
                      (sca-mul
                       (sca-mul (int32_t t5829) (int32_t t5830))
                       (int32_t mat_a.extent.0))
                      (sca-mul (int32_t t5830) (int32_t t6653)))
                     16)))
                  (vec-cast
                   (load
                    (buffer multiplied_no_offsets 'uint32)
                    (ramp
                     (sca-add
                      (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
                      4)
                     1
                     16)
                    (aligned 4 0))
                   'int32
                   16))
                 'int64
                 16)
                (vec-cast
                 (sca-broadcast (int32_t output_multiplier) 16)
                 'int64
                 16))
               (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
             (vec-div
              (vec-mul
               (vec-cast
                (vec-add
                 (vec-add
                  (vec-mul
                   (vec-cast
                    (load
                     (buffer column_sums_b 'uint32)
                     (ramp
                      (sca-add
                       (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                       16)
                      1
                      16)
                     (aligned 16 0))
                    'int32
                    16)
                   (sca-broadcast (int32_t t5829) 16))
                  (vec-add
                   (load
                    (buffer bias 'int32)
                    (ramp (sca-mul output.s0.x.x 16) 1 16)
                    (aligned 16 0))
                   (sca-broadcast
                    (sca-add
                     (sca-mul
                      (sca-mul (int32_t t5829) (int32_t t5830))
                      (int32_t mat_a.extent.0))
                     (sca-mul (int32_t t5830) (int32_t t6653)))
                    16)))
                 (vec-cast
                  (load
                   (buffer multiplied_no_offsets 'uint32)
                   (ramp
                    (sca-add
                     (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
                     4)
                    1
                    16)
                   (aligned 4 0))
                  'int32
                  16))
                'int64
                16)
               (vec-cast
                (sca-broadcast (int32_t output_multiplier) 16)
                'int64
                16))
              (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
            (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
           (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
          'int32
          16)
         (sca-broadcast
          (sca-add (int32_t output_shift) (int32_t (bv #xffffffff 32)))
          16))))
      (sca-broadcast (int32_t output_offset) 16))
     (sca-broadcast (int32_t (bv #x000000ff 32)) 16))
    (sca-broadcast (int32_t (bv #x00000000 32)) 16))
   'uint8
   16)
  (sca-broadcast (uint8_t output_max) 16))
 (sca-broadcast (uint8_t output_min) 16))
"Fold templates"
(list
 (cast
  ...
  (vs-mpy-add
   ...
   (combine
    (vs-shift-right
     ...
     (cast
      ...
      (vs-shift-right
       ...
       (vs-mpy-add
        ...
        (vs-mpy-add
         ...
         (combine
          (vs-mpy-add
           ...
           (combine
            (vs-mpy-add
             ...
             #<load-data>
             (list (int32_t t5829))
             #f
             #f
             #f
             'int32)
            (vs-mpy-add
             ...
             (combine
              #<load-data>
              (broadcast
               ...
               (sca-add
                (sca-mul
                 (sca-mul (int32_t t5829) (int32_t t5830))
                 (int32_t mat_a.extent.0))
                (sca-mul (int32_t t5830) (int32_t t6653)))))
             (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
             #f
             #f
             #f
             'int32))
           (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
           #f
           #f
           #f
           'int32)
          (cast ... #<load-data> 'int32 #f))
         (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
         #f
         #f
         #f
         'int32)
        (list (int32_t output_multiplier))
        #f
        #f
        #f
        'int64)
       (int64_t (bv #x000000000000001f 64))
       #t
       x?$2971
       #t)
      'int32
      #t)
     (int32_t output_shift)
     #t
     x?$3371
     #t)
    (broadcast ... (int32_t output_offset)))
   (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
   #f
   #f
   #f
   'int32)
  'uint8
  x?$3618))
here(#(struct:cast ... #(struct:vs-mpy-add ... #<combine: #(struct:vs-shift-right ... #(struct:cast ... #(struct:vs-shift-right ... #(struct:vs-mpy-add ... #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<combine: #(struct:vs-mpy-add ... #<load-data> (#(struct:int32_t t5829)) #f #f #f int32) #(struct:vs-mpy-add ... #<combine: #<load-data> #(struct:broadcast ... #(struct:sca-add #(struct:sca-mul #(struct:sca-mul #(struct:int32_t t5829) #(struct:int32_t t5830)) #(struct:int32_t mat_a.extent.0)) #(struct:sca-mul #(struct:int32_t t5830) #(struct:int32_t t6653))))> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32)> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32) #(struct:cast ... #<load-data> int32 #f)> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32) (#(struct:int32_t output_multiplier)) #f #f #f int64) #(struct:int64_t (bv #x000000000000001f 64)) #t x?$2971 #t) int32 #t) #(struct:int32_t output_shift) #t x?$3371 #t) #(struct:broadcast ... #(struct:int32_t output_offset))> (#(struct:int8_t (bv #x01 8)) #(struct:int8_t (bv #x01 8))) #f #f #f int32) uint8 x?$3618))

"Replace templates"
(list
 (cast
  ...
  (cast
   ...
   (vs-mpy-add
    ...
    (combine
     (vs-shift-right
      ...
      (cast
       ...
       (vs-shift-right
        ...
        (vs-mpy-add
         ...
         (vs-mpy-add
          ...
          (combine
           (vs-mpy-add
            ...
            (combine
             (vs-mpy-add
              ...
              #<load-data>
              (list (int32_t t5829))
              #f
              #f
              #f
              'int32)
             (vs-mpy-add
              ...
              (combine
               #<load-data>
               (broadcast
                ...
                (sca-add
                 (sca-mul
                  (sca-mul (int32_t t5829) (int32_t t5830))
                  (int32_t mat_a.extent.0))
                 (sca-mul (int32_t t5830) (int32_t t6653)))))
              (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
              #f
              #f
              #f
              'int32))
            (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
            #f
            #f
            #f
            'int32)
           (cast ... #<load-data> 'int32 #f))
          (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
          #f
          #f
          #f
          'int32)
         (list (int32_t output_multiplier))
         #f
         #f
         #f
         'int64)
        (int64_t (bv #x000000000000001f 64))
        #t
        x?$2971
        #t)
       'int32
       #t)
      (int32_t output_shift)
      #t
      x?$3371
      #t)
     (broadcast ... (int32_t output_offset)))
    (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
    #f
    #f
    #f
    'int32)
   'uint8
   #t)
  'uint8
  #t)
 (cast ... (broadcast ... (uint8_t output_max)) 'uint8 #t))
run-x86-synthesizer
halide-expr:
  (vec-max
 (vec-min
  (vec-cast
   (vec-max
    (vec-min
     (vec-add
      (vec-add
       (vec-shr
        (vec-cast
         (vec-max
          (vec-min
           (vec-add
            (vec-bwand
             (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
             (vec-div
              (vec-mul
               (vec-cast
                (vec-add
                 (vec-add
                  (vec-mul
                   (vec-cast
                    (load
                     (buffer column_sums_b 'uint32)
                     (ramp
                      (sca-add
                       (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                       16)
                      1
                      16)
                     (aligned 16 0))
                    'int32
                    16)
                   (sca-broadcast (int32_t t5829) 16))
                  (vec-add
                   (load
                    (buffer bias 'int32)
                    (ramp (sca-mul output.s0.x.x 16) 1 16)
                    (aligned 16 0))
                   (sca-broadcast
                    (sca-add
                     (sca-mul
                      (sca-mul (int32_t t5829) (int32_t t5830))
                      (int32_t mat_a.extent.0))
                     (sca-mul (int32_t t5830) (int32_t t6653)))
                    16)))
                 (vec-cast
                  (load
                   (buffer multiplied_no_offsets 'uint32)
                   (ramp
                    (sca-add
                     (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
                     4)
                    1
                    16)
                   (aligned 4 0))
                  'int32
                  16))
                'int64
                16)
               (vec-cast
                (sca-broadcast (int32_t output_multiplier) 16)
                'int64
                16))
              (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
            (vec-div
             (vec-mul
              (vec-cast
               (vec-add
                (vec-add
                 (vec-mul
                  (vec-cast
                   (load
                    (buffer column_sums_b 'uint32)
                    (ramp
                     (sca-add
                      (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                      16)
                     1
                     16)
                    (aligned 16 0))
                   'int32
                   16)
                  (sca-broadcast (int32_t t5829) 16))
                 (vec-add
                  (load
                   (buffer bias 'int32)
                   (ramp (sca-mul output.s0.x.x 16) 1 16)
                   (aligned 16 0))
                  (sca-broadcast
                   (sca-add
                    (sca-mul
                     (sca-mul (int32_t t5829) (int32_t t5830))
                     (int32_t mat_a.extent.0))
                    (sca-mul (int32_t t5830) (int32_t t6653)))
                   16)))
                (vec-cast
                 (load
                  (buffer multiplied_no_offsets 'uint32)
                  (ramp
                   (sca-add
                    (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
                    4)
                   1
                   16)
                  (aligned 4 0))
                 'int32
                 16))
               'int64
               16)
              (vec-cast
               (sca-broadcast (int32_t output_multiplier) 16)
               'int64
               16))
             (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
           (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
          (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
         'int32
         16)
        (sca-broadcast (int32_t output_shift) 16))
       (vec-bwand
        (vec-if
         (sca-broadcast
          (sca-lt (int32_t (bv #x00000000 32)) (int32_t output_shift))
          16)
         (sca-broadcast (int32_t (bv #x00000001 32)) 16)
         (sca-broadcast (int32_t (bv #x00000000 32)) 16))
        (vec-shr
         (vec-cast
          (vec-max
           (vec-min
            (vec-add
             (vec-bwand
              (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
              (vec-div
               (vec-mul
                (vec-cast
                 (vec-add
                  (vec-add
                   (vec-mul
                    (vec-cast
                     (load
                      (buffer column_sums_b 'uint32)
                      (ramp
                       (sca-add
                        (sca-mul
                         (sca-sub output.s0.x.x (var-lookup 't6112))
                         16)
                        16)
                       1
                       16)
                      (aligned 16 0))
                     'int32
                     16)
                    (sca-broadcast (int32_t t5829) 16))
                   (vec-add
                    (load
                     (buffer bias 'int32)
                     (ramp (sca-mul output.s0.x.x 16) 1 16)
                     (aligned 16 0))
                    (sca-broadcast
                     (sca-add
                      (sca-mul
                       (sca-mul (int32_t t5829) (int32_t t5830))
                       (int32_t mat_a.extent.0))
                      (sca-mul (int32_t t5830) (int32_t t6653)))
                     16)))
                  (vec-cast
                   (load
                    (buffer multiplied_no_offsets 'uint32)
                    (ramp
                     (sca-add
                      (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
                      4)
                     1
                     16)
                    (aligned 4 0))
                   'int32
                   16))
                 'int64
                 16)
                (vec-cast
                 (sca-broadcast (int32_t output_multiplier) 16)
                 'int64
                 16))
               (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
             (vec-div
              (vec-mul
               (vec-cast
                (vec-add
                 (vec-add
                  (vec-mul
                   (vec-cast
                    (load
                     (buffer column_sums_b 'uint32)
                     (ramp
                      (sca-add
                       (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                       16)
                      1
                      16)
                     (aligned 16 0))
                    'int32
                    16)
                   (sca-broadcast (int32_t t5829) 16))
                  (vec-add
                   (load
                    (buffer bias 'int32)
                    (ramp (sca-mul output.s0.x.x 16) 1 16)
                    (aligned 16 0))
                   (sca-broadcast
                    (sca-add
                     (sca-mul
                      (sca-mul (int32_t t5829) (int32_t t5830))
                      (int32_t mat_a.extent.0))
                     (sca-mul (int32_t t5830) (int32_t t6653)))
                    16)))
                 (vec-cast
                  (load
                   (buffer multiplied_no_offsets 'uint32)
                   (ramp
                    (sca-add
                     (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
                     4)
                    1
                    16)
                   (aligned 4 0))
                  'int32
                  16))
                'int64
                16)
               (vec-cast
                (sca-broadcast (int32_t output_multiplier) 16)
                'int64
                16))
              (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
            (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
           (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
          'int32
          16)
         (sca-broadcast
          (sca-add (int32_t output_shift) (int32_t (bv #xffffffff 32)))
          16))))
      (sca-broadcast (int32_t output_offset) 16))
     (sca-broadcast (int32_t (bv #x000000ff 32)) 16))
    (sca-broadcast (int32_t (bv #x00000000 32)) 16))
   'uint8
   16)
  (sca-broadcast (uint8_t output_max) 16))
 (sca-broadcast (uint8_t output_min) 16))
template:
  (cast ... (broadcast ... (uint8_t output_max)) 'uint8 #t)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-max
 (vec-min
  (vec-cast
   (vec-max
    (vec-min
     (vec-add
      (vec-add
       (vec-shr
        (vec-cast
         (vec-max
          (vec-min
           (vec-add
            (vec-bwand
             (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
             (vec-div
              (vec-mul
               (vec-cast
                (vec-add
                 (vec-add
                  (vec-mul
                   (vec-cast
                    (load
                     (buffer column_sums_b 'uint32)
                     (ramp
                      (sca-add
                       (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                       16)
                      1
                      16)
                     (aligned 16 0))
                    'int32
                    16)
                   (sca-broadcast (int32_t t5829) 16))
                  (vec-add
                   (load
                    (buffer bias 'int32)
                    (ramp (sca-mul output.s0.x.x 16) 1 16)
                    (aligned 16 0))
                   (sca-broadcast
                    (sca-add
                     (sca-mul
                      (sca-mul (int32_t t5829) (int32_t t5830))
                      (int32_t mat_a.extent.0))
                     (sca-mul (int32_t t5830) (int32_t t6653)))
                    16)))
                 (vec-cast
                  (load
                   (buffer multiplied_no_offsets 'uint32)
                   (ramp
                    (sca-add
                     (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
                     4)
                    1
                    16)
                   (aligned 4 0))
                  'int32
                  16))
                'int64
                16)
               (vec-cast
                (sca-broadcast (int32_t output_multiplier) 16)
                'int64
                16))
              (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
            (vec-div
             (vec-mul
              (vec-cast
               (vec-add
                (vec-add
                 (vec-mul
                  (vec-cast
                   (load
                    (buffer column_sums_b 'uint32)
                    (ramp
                     (sca-add
                      (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                      16)
                     1
                     16)
                    (aligned 16 0))
                   'int32
                   16)
                  (sca-broadcast (int32_t t5829) 16))
                 (vec-add
                  (load
                   (buffer bias 'int32)
                   (ramp (sca-mul output.s0.x.x 16) 1 16)
                   (aligned 16 0))
                  (sca-broadcast
                   (sca-add
                    (sca-mul
                     (sca-mul (int32_t t5829) (int32_t t5830))
                     (int32_t mat_a.extent.0))
                    (sca-mul (int32_t t5830) (int32_t t6653)))
                   16)))
                (vec-cast
                 (load
                  (buffer multiplied_no_offsets 'uint32)
                  (ramp
                   (sca-add
                    (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
                    4)
                   1
                   16)
                  (aligned 4 0))
                 'int32
                 16))
               'int64
               16)
              (vec-cast
               (sca-broadcast (int32_t output_multiplier) 16)
               'int64
               16))
             (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
           (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
          (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
         'int32
         16)
        (sca-broadcast (int32_t output_shift) 16))
       (vec-bwand
        (vec-if
         (sca-broadcast
          (sca-lt (int32_t (bv #x00000000 32)) (int32_t output_shift))
          16)
         (sca-broadcast (int32_t (bv #x00000001 32)) 16)
         (sca-broadcast (int32_t (bv #x00000000 32)) 16))
        (vec-shr
         (vec-cast
          (vec-max
           (vec-min
            (vec-add
             (vec-bwand
              (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
              (vec-div
               (vec-mul
                (vec-cast
                 (vec-add
                  (vec-add
                   (vec-mul
                    (vec-cast
                     (load
                      (buffer column_sums_b 'uint32)
                      (ramp
                       (sca-add
                        (sca-mul
                         (sca-sub output.s0.x.x (var-lookup 't6112))
                         16)
                        16)
                       1
                       16)
                      (aligned 16 0))
                     'int32
                     16)
                    (sca-broadcast (int32_t t5829) 16))
                   (vec-add
                    (load
                     (buffer bias 'int32)
                     (ramp (sca-mul output.s0.x.x 16) 1 16)
                     (aligned 16 0))
                    (sca-broadcast
                     (sca-add
                      (sca-mul
                       (sca-mul (int32_t t5829) (int32_t t5830))
                       (int32_t mat_a.extent.0))
                      (sca-mul (int32_t t5830) (int32_t t6653)))
                     16)))
                  (vec-cast
                   (load
                    (buffer multiplied_no_offsets 'uint32)
                    (ramp
                     (sca-add
                      (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
                      4)
                     1
                     16)
                    (aligned 4 0))
                   'int32
                   16))
                 'int64
                 16)
                (vec-cast
                 (sca-broadcast (int32_t output_multiplier) 16)
                 'int64
                 16))
               (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
             (vec-div
              (vec-mul
               (vec-cast
                (vec-add
                 (vec-add
                  (vec-mul
                   (vec-cast
                    (load
                     (buffer column_sums_b 'uint32)
                     (ramp
                      (sca-add
                       (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                       16)
                      1
                      16)
                     (aligned 16 0))
                    'int32
                    16)
                   (sca-broadcast (int32_t t5829) 16))
                  (vec-add
                   (load
                    (buffer bias 'int32)
                    (ramp (sca-mul output.s0.x.x 16) 1 16)
                    (aligned 16 0))
                   (sca-broadcast
                    (sca-add
                     (sca-mul
                      (sca-mul (int32_t t5829) (int32_t t5830))
                      (int32_t mat_a.extent.0))
                     (sca-mul (int32_t t5830) (int32_t t6653)))
                    16)))
                 (vec-cast
                  (load
                   (buffer multiplied_no_offsets 'uint32)
                   (ramp
                    (sca-add
                     (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
                     4)
                    1
                    16)
                   (aligned 4 0))
                  'int32
                  16))
                'int64
                16)
               (vec-cast
                (sca-broadcast (int32_t output_multiplier) 16)
                'int64
                16))
              (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
            (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
           (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
          'int32
          16)
         (sca-broadcast
          (sca-add (int32_t output_shift) (int32_t (bv #xffffffff 32)))
          16))))
      (sca-broadcast (int32_t output_offset) 16))
     (sca-broadcast (int32_t (bv #x000000ff 32)) 16))
    (sca-broadcast (int32_t (bv #x00000000 32)) 16))
   'uint8
   16)
  #<abstr-halide-expr>)
 (sca-broadcast (uint8_t output_min) 16))
optimized-template:
  (cast ... #<abstr-expr> 'uint8 #t)
optimized Halide 0:
  (uint8_t
 (ite (bvule output_min (ite (bvule (extract 7 0 (ite (bvsle (bv #x00000000 32) (ite (bvsle (bvadd output_offset (bvadd (bvashr (extract 31 0 (ite (bvsle (bv #xffffffff80000000 64) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64))) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bv #xffffffff80000000 64))) output_shift) (bvand (bvashr (extract 31 0 (ite (bvsle (bv #xffffffff80000000 64) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64))) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bv #xffffffff80000000 64))) (bvadd (bv #xffffffff 32) output_shift)) (ite (bvslt (bv #x00000000 32) output_shift) (bv #x00000001 32) (bv #x00000000 32))))) (bv #x000000ff 32)) (bvadd output_offset (bvadd (bvashr (extract 31 0 (ite (bvsle (bv #xffffffff80000000 64) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64))) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bv #xffffffff80000000 64))) output_shift) (bvand (bvashr (extract 31 0 (ite (bvsle (bv #xffffffff80000000 64) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64))) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bv #xffffffff80000000 64))) (bvadd (bv #xffffffff 32) output_shift)) (ite (bvslt (bv #x00000000 32) output_shift) (bv #x00000001 32) (bv #x00000000 32))))) (bv #x000000ff 32))) (ite (bvsle (bvadd output_offset (bvadd (bvashr (extract 31 0 (ite (bvsle (bv #xffffffff80000000 64) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64))) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bv #xffffffff80000000 64))) output_shift) (bvand (bvashr (extract 31 0 (ite (bvsle (bv #xffffffff80000000 64) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64))) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bv #xffffffff80000000 64))) (bvadd (bv #xffffffff 32) output_shift)) (ite (bvslt (bv #x00000000 32) output_shift) (bv #x00000001 32) (bv #x00000000 32))))) (bv #x000000ff 32)) (bvadd output_offset (bvadd (bvashr (extract 31 0 (ite (bvsle (bv #xffffffff80000000 64) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64))) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bv #xffffffff80000000 64))) output_shift) (bvand (bvashr (extract 31 0 (ite (bvsle (bv #xffffffff80000000 64) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64))) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bv #xffffffff80000000 64))) (bvadd (bv #xffffffff 32) output_shift)) (ite (bvslt (bv #x00000000 32) output_shift) (bv #x00000001 32) (bv #x00000000 32))))) (bv #x000000ff 32)) (bv #x00000000 32))) (app abstr-vals$3624 0)) (extract 7 0 (ite (bvsle (bv #x00000000 32) (ite (bvsle (bvadd output_offset (bvadd (bvashr (extract 31 0 (ite (bvsle (bv #xffffffff80000000 64) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64))) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bv #xffffffff80000000 64))) output_shift) (bvand (bvashr (extract 31 0 (ite (bvsle (bv #xffffffff80000000 64) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64))) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bv #xffffffff80000000 64))) (bvadd (bv #xffffffff 32) output_shift)) (ite (bvslt (bv #x00000000 32) output_shift) (bv #x00000001 32) (bv #x00000000 32))))) (bv #x000000ff 32)) (bvadd output_offset (bvadd (bvashr (extract 31 0 (ite (bvsle (bv #xffffffff80000000 64) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64))) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bv #xffffffff80000000 64))) output_shift) (bvand (bvashr (extract 31 0 (ite (bvsle (bv #xffffffff80000000 64) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64))) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bv #xffffffff80000000 64))) (bvadd (bv #xffffffff 32) output_shift)) (ite (bvslt (bv #x00000000 32) output_shift) (bv #x00000001 32) (bv #x00000000 32))))) (bv #x000000ff 32))) (ite (bvsle (bvadd output_offset (bvadd (bvashr (extract 31 0 (ite (bvsle (bv #xffffffff80000000 64) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64))) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bv #xffffffff80000000 64))) output_shift) (bvand (bvashr (extract 31 0 (ite (bvsle (bv #xffffffff80000000 64) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64))) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bv #xffffffff80000000 64))) (bvadd (bv #xffffffff 32) output_shift)) (ite (bvslt (bv #x00000000 32) output_shift) (bv #x00000001 32) (bv #x00000000 32))))) (bv #x000000ff 32)) (bvadd output_offset (bvadd (bvashr (extract 31 0 (ite (bvsle (bv #xffffffff80000000 64) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64))) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bv #xffffffff80000000 64))) output_shift) (bvand (bvashr (extract 31 0 (ite (bvsle (bv #xffffffff80000000 64) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64))) (ite (bvsle (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bvadd (bvand (bv #x0000000000000001 64) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000040000000 64)))) (bvadd (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)) (bvsdiv (bvadd (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bvneg (bvashr (bvmul (sign-extend (bvadd (bvadd (bvmul t5829 (app column_sums_b (+ output.s0.x.x (- (ite (<= t6629 1) t6629 1))))) (bvadd (app bias (+ -16 output.s0.x.x)) (bvadd (bvmul mat_a.extent.0 (bvmul t5829 t5830)) (bvmul t5830 t6653)))) (app multiplied_no_offsets (+ 4 (+ (+ -16 output.s0.x.x) (+ t6638 (- (ite (<= (+ -16 t6629) 4) (+ -16 t6629) 4))))))) (bitvector 64)) (sign-extend output_multiplier (bitvector 64))) (bv #x000000000000003f 64)))) (bv #x0000000080000000 64)))) (bv #x000000007fffffff 64)) (bv #xffffffff80000000 64))) (bvadd (bv #xffffffff 32) output_shift)) (ite (bvslt (bv #x00000000 32) output_shift) (bv #x00000001 32) (bv #x00000000 32))))) (bv #x000000ff 32)) (bv #x00000000 32))) ...)) ...))
optimized x86 0:
  (uint8_t (app abstr-vals$3624 0))
run-x86-synthesizer
halide-expr:
  (vec-max
 (vec-min
  (vec-cast
   (vec-max
    (vec-min
     (vec-add
      (vec-add
       (vec-shr
        (vec-cast
         (vec-max
          (vec-min
           (vec-add
            (vec-bwand
             (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
             (vec-div
              (vec-mul
               (vec-cast
                (vec-add
                 (vec-add
                  (vec-mul
                   (vec-cast
                    (load
                     (buffer column_sums_b 'uint32)
                     (ramp
                      (sca-add
                       (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                       16)
                      1
                      16)
                     (aligned 16 0))
                    'int32
                    16)
                   (sca-broadcast (int32_t t5829) 16))
                  (vec-add
                   (load
                    (buffer bias 'int32)
                    (ramp (sca-mul output.s0.x.x 16) 1 16)
                    (aligned 16 0))
                   (sca-broadcast
                    (sca-add
                     (sca-mul
                      (sca-mul (int32_t t5829) (int32_t t5830))
                      (int32_t mat_a.extent.0))
                     (sca-mul (int32_t t5830) (int32_t t6653)))
                    16)))
                 (vec-cast
                  (load
                   (buffer multiplied_no_offsets 'uint32)
                   (ramp
                    (sca-add
                     (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
                     4)
                    1
                    16)
                   (aligned 4 0))
                  'int32
                  16))
                'int64
                16)
               (vec-cast
                (sca-broadcast (int32_t output_multiplier) 16)
                'int64
                16))
              (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
            (vec-div
             (vec-mul
              (vec-cast
               (vec-add
                (vec-add
                 (vec-mul
                  (vec-cast
                   (load
                    (buffer column_sums_b 'uint32)
                    (ramp
                     (sca-add
                      (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                      16)
                     1
                     16)
                    (aligned 16 0))
                   'int32
                   16)
                  (sca-broadcast (int32_t t5829) 16))
                 (vec-add
                  (load
                   (buffer bias 'int32)
                   (ramp (sca-mul output.s0.x.x 16) 1 16)
                   (aligned 16 0))
                  (sca-broadcast
                   (sca-add
                    (sca-mul
                     (sca-mul (int32_t t5829) (int32_t t5830))
                     (int32_t mat_a.extent.0))
                    (sca-mul (int32_t t5830) (int32_t t6653)))
                   16)))
                (vec-cast
                 (load
                  (buffer multiplied_no_offsets 'uint32)
                  (ramp
                   (sca-add
                    (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
                    4)
                   1
                   16)
                  (aligned 4 0))
                 'int32
                 16))
               'int64
               16)
              (vec-cast
               (sca-broadcast (int32_t output_multiplier) 16)
               'int64
               16))
             (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
           (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
          (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
         'int32
         16)
        (sca-broadcast (int32_t output_shift) 16))
       (vec-bwand
        (vec-if
         (sca-broadcast
          (sca-lt (int32_t (bv #x00000000 32)) (int32_t output_shift))
          16)
         (sca-broadcast (int32_t (bv #x00000001 32)) 16)
         (sca-broadcast (int32_t (bv #x00000000 32)) 16))
        (vec-shr
         (vec-cast
          (vec-max
           (vec-min
            (vec-add
             (vec-bwand
              (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
              (vec-div
               (vec-mul
                (vec-cast
                 (vec-add
                  (vec-add
                   (vec-mul
                    (vec-cast
                     (load
                      (buffer column_sums_b 'uint32)
                      (ramp
                       (sca-add
                        (sca-mul
                         (sca-sub output.s0.x.x (var-lookup 't6112))
                         16)
                        16)
                       1
                       16)
                      (aligned 16 0))
                     'int32
                     16)
                    (sca-broadcast (int32_t t5829) 16))
                   (vec-add
                    (load
                     (buffer bias 'int32)
                     (ramp (sca-mul output.s0.x.x 16) 1 16)
                     (aligned 16 0))
                    (sca-broadcast
                     (sca-add
                      (sca-mul
                       (sca-mul (int32_t t5829) (int32_t t5830))
                       (int32_t mat_a.extent.0))
                      (sca-mul (int32_t t5830) (int32_t t6653)))
                     16)))
                  (vec-cast
                   (load
                    (buffer multiplied_no_offsets 'uint32)
                    (ramp
                     (sca-add
                      (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
                      4)
                     1
                     16)
                    (aligned 4 0))
                   'int32
                   16))
                 'int64
                 16)
                (vec-cast
                 (sca-broadcast (int32_t output_multiplier) 16)
                 'int64
                 16))
               (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
             (vec-div
              (vec-mul
               (vec-cast
                (vec-add
                 (vec-add
                  (vec-mul
                   (vec-cast
                    (load
                     (buffer column_sums_b 'uint32)
                     (ramp
                      (sca-add
                       (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                       16)
                      1
                      16)
                     (aligned 16 0))
                    'int32
                    16)
                   (sca-broadcast (int32_t t5829) 16))
                  (vec-add
                   (load
                    (buffer bias 'int32)
                    (ramp (sca-mul output.s0.x.x 16) 1 16)
                    (aligned 16 0))
                   (sca-broadcast
                    (sca-add
                     (sca-mul
                      (sca-mul (int32_t t5829) (int32_t t5830))
                      (int32_t mat_a.extent.0))
                     (sca-mul (int32_t t5830) (int32_t t6653)))
                    16)))
                 (vec-cast
                  (load
                   (buffer multiplied_no_offsets 'uint32)
                   (ramp
                    (sca-add
                     (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
                     4)
                    1
                    16)
                   (aligned 4 0))
                  'int32
                  16))
                'int64
                16)
               (vec-cast
                (sca-broadcast (int32_t output_multiplier) 16)
                'int64
                16))
              (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
            (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
           (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
          'int32
          16)
         (sca-broadcast
          (sca-add (int32_t output_shift) (int32_t (bv #xffffffff 32)))
          16))))
      (sca-broadcast (int32_t output_offset) 16))
     (sca-broadcast (int32_t (bv #x000000ff 32)) 16))
    (sca-broadcast (int32_t (bv #x00000000 32)) 16))
   'uint8
   16)
  (sca-broadcast (uint8_t output_max) 16))
 (sca-broadcast (uint8_t output_min) 16))
template:
  (cast
 ...
 (vs-mpy-add
  ...
  (combine
   (vs-shift-right
    ...
    (cast
     ...
     (vs-shift-right
      ...
      (vs-mpy-add
       ...
       (vs-mpy-add
        ...
        (combine
         (vs-mpy-add
          ...
          (combine
           (vs-mpy-add ... #<load-data> (list (int32_t t5829)) #f #f #f 'int32)
           (vs-mpy-add
            ...
            (combine
             #<load-data>
             (broadcast
              ...
              (sca-add
               (sca-mul
                (sca-mul (int32_t t5829) (int32_t t5830))
                (int32_t mat_a.extent.0))
               (sca-mul (int32_t t5830) (int32_t t6653)))))
            (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
            #f
            #f
            #f
            'int32))
          (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
          #f
          #f
          #f
          'int32)
         (cast ... #<load-data> 'int32 #f))
        (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
        #f
        #f
        #f
        'int32)
       (list (int32_t output_multiplier))
       #f
       #f
       #f
       'int64)
      (int64_t (bv #x000000000000001f 64))
      #t
      x?$2971
      #t)
     'int32
     #t)
    (int32_t output_shift)
    #t
    x?$3371
    #t)
   (broadcast ... (int32_t output_offset)))
  (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
  #f
  #f
  #f
  'int32)
 'uint8
 x?$3618)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-max
 (vec-min
  (vec-cast
   (vec-max
    (vec-min
     #<abstr-halide-expr>
     (sca-broadcast (int32_t (bv #x000000ff 32)) 16))
    (sca-broadcast (int32_t (bv #x00000000 32)) 16))
   'uint8
   16)
  (sca-broadcast (uint8_t output_max) 16))
 (sca-broadcast (uint8_t output_min) 16))
optimized-template:
  (cast ... #<abstr-expr> 'uint8 x?$3618)
optimized Halide 0:
  (uint8_t
 (ite (bvule output_min (ite (bvule (extract 7 0 (ite (bvsle (bv #x00000000 32) (ite (bvsle (app abstr-vals$3625 0) (bv #x000000ff 32)) (app abstr-vals$3625 0) (bv #x000000ff 32))) (ite (bvsle (app abstr-vals$3625 0) (bv #x000000ff 32)) (app abstr-vals$3625 0) (bv #x000000ff 32)) (bv #x00000000 32))) output_max) (extract 7 0 (ite (bvsle (bv #x00000000 32) (ite (bvsle (app abstr-vals$3625 0) (bv #x000000ff 32)) (app abstr-vals$3625 0) (bv #x000000ff 32))) (ite (bvsle (app abstr-vals$3625 0) (bv #x000000ff 32)) (app abstr-vals$3625 0) (bv #x000000ff 32)) (bv #x00000000 32))) output_max)) (ite (bvule (extract 7 0 (ite (bvsle (bv #x00000000 32) (ite (bvsle (app abstr-vals$3625 0) (bv #x000000ff 32)) (app abstr-vals$3625 0) (bv #x000000ff 32))) (ite (bvsle (app abstr-vals$3625 0) (bv #x000000ff 32)) (app abstr-vals$3625 0) (bv #x000000ff 32)) (bv #x00000000 32))) output_max) (extract 7 0 (ite (bvsle (bv #x00000000 32) (ite (bvsle (app abstr-vals$3625 0) (bv #x000000ff 32)) (app abstr-vals$3625 0) (bv #x000000ff 32))) (ite (bvsle (app abstr-vals$3625 0) (bv #x000000ff 32)) (app abstr-vals$3625 0) (bv #x000000ff 32)) (bv #x00000000 32))) output_max) output_min))
optimized x86 0:
  (uint8_t
 (ite x?$3618 (ite (bvslt (app abstr-vals$3625 0) (bv #x00000000 32)) (bv #x00 8) (ite (bvslt (bv #x000000ff 32) (app abstr-vals$3625 0)) (bv #xff 8) (extract 7 0 (app abstr-vals$3625 0)))) (extract 7 0 (app abstr-vals$3625 0))))
run-x86-synthesizer
halide-expr:
  (vec-max
 (vec-min
  (vec-cast
   (vec-max
    (vec-min
     (vec-add
      (vec-add
       (vec-shr
        (vec-cast
         (vec-max
          (vec-min
           (vec-add
            (vec-bwand
             (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
             (vec-div
              (vec-mul
               (vec-cast
                (vec-add
                 (vec-add
                  (vec-mul
                   (vec-cast
                    (load
                     (buffer column_sums_b 'uint32)
                     (ramp
                      (sca-add
                       (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                       16)
                      1
                      16)
                     (aligned 16 0))
                    'int32
                    16)
                   (sca-broadcast (int32_t t5829) 16))
                  (vec-add
                   (load
                    (buffer bias 'int32)
                    (ramp (sca-mul output.s0.x.x 16) 1 16)
                    (aligned 16 0))
                   (sca-broadcast
                    (sca-add
                     (sca-mul
                      (sca-mul (int32_t t5829) (int32_t t5830))
                      (int32_t mat_a.extent.0))
                     (sca-mul (int32_t t5830) (int32_t t6653)))
                    16)))
                 (vec-cast
                  (load
                   (buffer multiplied_no_offsets 'uint32)
                   (ramp
                    (sca-add
                     (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
                     4)
                    1
                    16)
                   (aligned 4 0))
                  'int32
                  16))
                'int64
                16)
               (vec-cast
                (sca-broadcast (int32_t output_multiplier) 16)
                'int64
                16))
              (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
            (vec-div
             (vec-mul
              (vec-cast
               (vec-add
                (vec-add
                 (vec-mul
                  (vec-cast
                   (load
                    (buffer column_sums_b 'uint32)
                    (ramp
                     (sca-add
                      (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                      16)
                     1
                     16)
                    (aligned 16 0))
                   'int32
                   16)
                  (sca-broadcast (int32_t t5829) 16))
                 (vec-add
                  (load
                   (buffer bias 'int32)
                   (ramp (sca-mul output.s0.x.x 16) 1 16)
                   (aligned 16 0))
                  (sca-broadcast
                   (sca-add
                    (sca-mul
                     (sca-mul (int32_t t5829) (int32_t t5830))
                     (int32_t mat_a.extent.0))
                    (sca-mul (int32_t t5830) (int32_t t6653)))
                   16)))
                (vec-cast
                 (load
                  (buffer multiplied_no_offsets 'uint32)
                  (ramp
                   (sca-add
                    (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
                    4)
                   1
                   16)
                  (aligned 4 0))
                 'int32
                 16))
               'int64
               16)
              (vec-cast
               (sca-broadcast (int32_t output_multiplier) 16)
               'int64
               16))
             (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
           (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
          (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
         'int32
         16)
        (sca-broadcast (int32_t output_shift) 16))
       (vec-bwand
        (vec-if
         (sca-broadcast
          (sca-lt (int32_t (bv #x00000000 32)) (int32_t output_shift))
          16)
         (sca-broadcast (int32_t (bv #x00000001 32)) 16)
         (sca-broadcast (int32_t (bv #x00000000 32)) 16))
        (vec-shr
         (vec-cast
          (vec-max
           (vec-min
            (vec-add
             (vec-bwand
              (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
              (vec-div
               (vec-mul
                (vec-cast
                 (vec-add
                  (vec-add
                   (vec-mul
                    (vec-cast
                     (load
                      (buffer column_sums_b 'uint32)
                      (ramp
                       (sca-add
                        (sca-mul
                         (sca-sub output.s0.x.x (var-lookup 't6112))
                         16)
                        16)
                       1
                       16)
                      (aligned 16 0))
                     'int32
                     16)
                    (sca-broadcast (int32_t t5829) 16))
                   (vec-add
                    (load
                     (buffer bias 'int32)
                     (ramp (sca-mul output.s0.x.x 16) 1 16)
                     (aligned 16 0))
                    (sca-broadcast
                     (sca-add
                      (sca-mul
                       (sca-mul (int32_t t5829) (int32_t t5830))
                       (int32_t mat_a.extent.0))
                      (sca-mul (int32_t t5830) (int32_t t6653)))
                     16)))
                  (vec-cast
                   (load
                    (buffer multiplied_no_offsets 'uint32)
                    (ramp
                     (sca-add
                      (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
                      4)
                     1
                     16)
                    (aligned 4 0))
                   'int32
                   16))
                 'int64
                 16)
                (vec-cast
                 (sca-broadcast (int32_t output_multiplier) 16)
                 'int64
                 16))
               (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
             (vec-div
              (vec-mul
               (vec-cast
                (vec-add
                 (vec-add
                  (vec-mul
                   (vec-cast
                    (load
                     (buffer column_sums_b 'uint32)
                     (ramp
                      (sca-add
                       (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                       16)
                      1
                      16)
                     (aligned 16 0))
                    'int32
                    16)
                   (sca-broadcast (int32_t t5829) 16))
                  (vec-add
                   (load
                    (buffer bias 'int32)
                    (ramp (sca-mul output.s0.x.x 16) 1 16)
                    (aligned 16 0))
                   (sca-broadcast
                    (sca-add
                     (sca-mul
                      (sca-mul (int32_t t5829) (int32_t t5830))
                      (int32_t mat_a.extent.0))
                     (sca-mul (int32_t t5830) (int32_t t6653)))
                    16)))
                 (vec-cast
                  (load
                   (buffer multiplied_no_offsets 'uint32)
                   (ramp
                    (sca-add
                     (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
                     4)
                    1
                    16)
                   (aligned 4 0))
                  'int32
                  16))
                'int64
                16)
               (vec-cast
                (sca-broadcast (int32_t output_multiplier) 16)
                'int64
                16))
              (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
            (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
           (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
          'int32
          16)
         (sca-broadcast
          (sca-add (int32_t output_shift) (int32_t (bv #xffffffff 32)))
          16))))
      (sca-broadcast (int32_t output_offset) 16))
     (sca-broadcast (int32_t (bv #x000000ff 32)) 16))
    (sca-broadcast (int32_t (bv #x00000000 32)) 16))
   'uint8
   16)
  (sca-broadcast (uint8_t output_max) 16))
 (sca-broadcast (uint8_t output_min) 16))
template:
  (cast
 ...
 (cast
  ...
  (vs-mpy-add
   ...
   (combine
    (vs-shift-right
     ...
     (cast
      ...
      (vs-shift-right
       ...
       (vs-mpy-add
        ...
        (vs-mpy-add
         ...
         (combine
          (vs-mpy-add
           ...
           (combine
            (vs-mpy-add
             ...
             #<load-data>
             (list (int32_t t5829))
             #f
             #f
             #f
             'int32)
            (vs-mpy-add
             ...
             (combine
              #<load-data>
              (broadcast
               ...
               (sca-add
                (sca-mul
                 (sca-mul (int32_t t5829) (int32_t t5830))
                 (int32_t mat_a.extent.0))
                (sca-mul (int32_t t5830) (int32_t t6653)))))
             (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
             #f
             #f
             #f
             'int32))
           (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
           #f
           #f
           #f
           'int32)
          (cast ... #<load-data> 'int32 #f))
         (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
         #f
         #f
         #f
         'int32)
        (list (int32_t output_multiplier))
        #f
        #f
        #f
        'int64)
       (int64_t (bv #x000000000000001f 64))
       #t
       x?$2971
       #t)
      'int32
      #t)
     (int32_t output_shift)
     #t
     x?$3371
     #t)
    (broadcast ... (int32_t output_offset)))
   (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
   #f
   #f
   #f
   'int32)
  'uint8
  #t)
 'uint8
 #t)
axioms:
  '(#t)
optimized-halide-expr:
  (vec-max
 (vec-min #<abstr-halide-expr> (sca-broadcast (uint8_t output_max) 16))
 (sca-broadcast (uint8_t output_min) 16))
optimized-template:
  (cast ... #<abstr-expr> 'uint8 #t)
optimized Halide 0:
  (uint8_t
 (ite (bvule output_min (ite (bvule (app abstr-vals$3626 0) output_max) (app abstr-vals$3626 0) output_max)) (ite (bvule (app abstr-vals$3626 0) output_max) (app abstr-vals$3626 0) output_max) output_min))
optimized x86 0:
  (uint8_t (app abstr-vals$3626 0))
"Success?"
#f
#<void>
run-x86-synthesizer
halide-expr:
  (vec-max
 (vec-min
  (vec-cast
   (vec-max
    (vec-min
     (vec-add
      (vec-add
       (vec-shr
        (vec-cast
         (vec-max
          (vec-min
           (vec-add
            (vec-bwand
             (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
             (vec-div
              (vec-mul
               (vec-cast
                (vec-add
                 (vec-add
                  (vec-mul
                   (vec-cast
                    (load
                     (buffer column_sums_b 'uint32)
                     (ramp
                      (sca-add
                       (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                       16)
                      1
                      16)
                     (aligned 16 0))
                    'int32
                    16)
                   (sca-broadcast (int32_t t5829) 16))
                  (vec-add
                   (load
                    (buffer bias 'int32)
                    (ramp (sca-mul output.s0.x.x 16) 1 16)
                    (aligned 16 0))
                   (sca-broadcast
                    (sca-add
                     (sca-mul
                      (sca-mul (int32_t t5829) (int32_t t5830))
                      (int32_t mat_a.extent.0))
                     (sca-mul (int32_t t5830) (int32_t t6653)))
                    16)))
                 (vec-cast
                  (load
                   (buffer multiplied_no_offsets 'uint32)
                   (ramp
                    (sca-add
                     (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
                     4)
                    1
                    16)
                   (aligned 4 0))
                  'int32
                  16))
                'int64
                16)
               (vec-cast
                (sca-broadcast (int32_t output_multiplier) 16)
                'int64
                16))
              (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
            (vec-div
             (vec-mul
              (vec-cast
               (vec-add
                (vec-add
                 (vec-mul
                  (vec-cast
                   (load
                    (buffer column_sums_b 'uint32)
                    (ramp
                     (sca-add
                      (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                      16)
                     1
                     16)
                    (aligned 16 0))
                   'int32
                   16)
                  (sca-broadcast (int32_t t5829) 16))
                 (vec-add
                  (load
                   (buffer bias 'int32)
                   (ramp (sca-mul output.s0.x.x 16) 1 16)
                   (aligned 16 0))
                  (sca-broadcast
                   (sca-add
                    (sca-mul
                     (sca-mul (int32_t t5829) (int32_t t5830))
                     (int32_t mat_a.extent.0))
                    (sca-mul (int32_t t5830) (int32_t t6653)))
                   16)))
                (vec-cast
                 (load
                  (buffer multiplied_no_offsets 'uint32)
                  (ramp
                   (sca-add
                    (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
                    4)
                   1
                   16)
                  (aligned 4 0))
                 'int32
                 16))
               'int64
               16)
              (vec-cast
               (sca-broadcast (int32_t output_multiplier) 16)
               'int64
               16))
             (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
           (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
          (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
         'int32
         16)
        (sca-broadcast (int32_t output_shift) 16))
       (vec-bwand
        (vec-if
         (sca-broadcast
          (sca-lt (int32_t (bv #x00000000 32)) (int32_t output_shift))
          16)
         (sca-broadcast (int32_t (bv #x00000001 32)) 16)
         (sca-broadcast (int32_t (bv #x00000000 32)) 16))
        (vec-shr
         (vec-cast
          (vec-max
           (vec-min
            (vec-add
             (vec-bwand
              (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
              (vec-div
               (vec-mul
                (vec-cast
                 (vec-add
                  (vec-add
                   (vec-mul
                    (vec-cast
                     (load
                      (buffer column_sums_b 'uint32)
                      (ramp
                       (sca-add
                        (sca-mul
                         (sca-sub output.s0.x.x (var-lookup 't6112))
                         16)
                        16)
                       1
                       16)
                      (aligned 16 0))
                     'int32
                     16)
                    (sca-broadcast (int32_t t5829) 16))
                   (vec-add
                    (load
                     (buffer bias 'int32)
                     (ramp (sca-mul output.s0.x.x 16) 1 16)
                     (aligned 16 0))
                    (sca-broadcast
                     (sca-add
                      (sca-mul
                       (sca-mul (int32_t t5829) (int32_t t5830))
                       (int32_t mat_a.extent.0))
                      (sca-mul (int32_t t5830) (int32_t t6653)))
                     16)))
                  (vec-cast
                   (load
                    (buffer multiplied_no_offsets 'uint32)
                    (ramp
                     (sca-add
                      (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
                      4)
                     1
                     16)
                    (aligned 4 0))
                   'int32
                   16))
                 'int64
                 16)
                (vec-cast
                 (sca-broadcast (int32_t output_multiplier) 16)
                 'int64
                 16))
               (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
             (vec-div
              (vec-mul
               (vec-cast
                (vec-add
                 (vec-add
                  (vec-mul
                   (vec-cast
                    (load
                     (buffer column_sums_b 'uint32)
                     (ramp
                      (sca-add
                       (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                       16)
                      1
                      16)
                     (aligned 16 0))
                    'int32
                    16)
                   (sca-broadcast (int32_t t5829) 16))
                  (vec-add
                   (load
                    (buffer bias 'int32)
                    (ramp (sca-mul output.s0.x.x 16) 1 16)
                    (aligned 16 0))
                   (sca-broadcast
                    (sca-add
                     (sca-mul
                      (sca-mul (int32_t t5829) (int32_t t5830))
                      (int32_t mat_a.extent.0))
                     (sca-mul (int32_t t5830) (int32_t t6653)))
                    16)))
                 (vec-cast
                  (load
                   (buffer multiplied_no_offsets 'uint32)
                   (ramp
                    (sca-add
                     (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
                     4)
                    1
                    16)
                   (aligned 4 0))
                  'int32
                  16))
                'int64
                16)
               (vec-cast
                (sca-broadcast (int32_t output_multiplier) 16)
                'int64
                16))
              (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
            (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
           (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
          'int32
          16)
         (sca-broadcast
          (sca-add (int32_t output_shift) (int32_t (bv #xffffffff 32)))
          16))))
      (sca-broadcast (int32_t output_offset) 16))
     (sca-broadcast (int32_t (bv #x000000ff 32)) 16))
    (sca-broadcast (int32_t (bv #x00000000 32)) 16))
   'uint8
   16)
  (sca-broadcast (uint8_t output_max) 16))
 (sca-broadcast (uint8_t output_min) 16))
template:
  (maximum
 ...
 (minimum
  ...
  (cast
   ...
   (vs-mpy-add
    ...
    (combine
     (vs-shift-right
      ...
      (cast
       ...
       (vs-shift-right
        ...
        (vs-mpy-add
         ...
         (vs-mpy-add
          ...
          (combine
           (vs-mpy-add
            ...
            (combine
             (vs-mpy-add
              ...
              #<load-data>
              (list (int32_t t5829))
              #f
              #f
              #f
              'int32)
             (vs-mpy-add
              ...
              (combine
               #<load-data>
               (broadcast
                ...
                (sca-add
                 (sca-mul
                  (sca-mul (int32_t t5829) (int32_t t5830))
                  (int32_t mat_a.extent.0))
                 (sca-mul (int32_t t5830) (int32_t t6653)))))
              (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
              #f
              #f
              #f
              'int32))
            (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
            #f
            #f
            #f
            'int32)
           (cast ... #<load-data> 'int32 #f))
          (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
          #f
          #f
          #f
          'int32)
         (list (int32_t output_multiplier))
         #f
         #f
         #f
         'int64)
        (int64_t (bv #x000000000000001f 64))
        #t
        x?$2971
        #t)
       'int32
       #t)
      (int32_t output_shift)
      #t
      x?$3371
      #t)
     (broadcast ... (int32_t output_offset)))
    (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
    #f
    #f
    #f
    'int32)
   'uint8
   #t)
  (broadcast ... (uint8_t output_max)))
 (broadcast ... (uint8_t output_min)))
axioms:
  '(#t #t)
optimized-halide-expr:
  (vec-max #<abstr-halide-expr> #<abstr-halide-expr>)
optimized-template:
  (maximum ... #<abstr-expr> #<abstr-expr>)
optimized Halide 0:
  (uint8_t
 (ite (bvule (app abstr-vals$3628 0) (app abstr-vals$3627 0)) (app abstr-vals$3627 0) (app abstr-vals$3628 0)))
optimized x86 0:
  (uint8_t
 (ite (bvule (app abstr-vals$3628 0) (app abstr-vals$3627 0)) (app abstr-vals$3627 0) (app abstr-vals$3628 0)))
Ran synthesizer for 22 ms
(model)
(vec-max #<abstr-halide-expr> #<abstr-halide-expr>)
(maximum
 ...
 (minimum
  ...
  (cast
   ...
   (vs-mpy-add
    ...
    (combine
     (vs-shift-right
      ...
      (cast
       ...
       (vs-shift-right
        ...
        (vs-mpy-add
         ...
         (vs-mpy-add
          ...
          (combine
           (vs-mpy-add
            ...
            (combine
             (vs-mpy-add
              ...
              #<load-data>
              (list (int32_t t5829))
              #f
              #f
              #f
              'int32)
             (vs-mpy-add
              ...
              (combine
               #<load-data>
               (broadcast
                ...
                (sca-add
                 (sca-mul
                  (sca-mul (int32_t t5829) (int32_t t5830))
                  (int32_t mat_a.extent.0))
                 (sca-mul (int32_t t5830) (int32_t t6653)))))
              (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
              #f
              #f
              #f
              'int32))
            (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
            #f
            #f
            #f
            'int32)
           (cast ... #<load-data> 'int32 #f))
          (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
          #f
          #f
          #f
          'int32)
         (list (int32_t output_multiplier))
         #f
         #f
         #f
         'int64)
        (int64_t (bv #x000000000000001f 64))
        #t
        x?$2971
        #t)
       'int32
       #t)
      (int32_t output_shift)
      #t
      x?$3371
      #t)
     (broadcast ... (int32_t output_offset)))
    (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
    #f
    #f
    #f
    'int32)
   'uint8
   #t)
  (broadcast ... (uint8_t output_max)))
 (broadcast ... (uint8_t output_min)))
Ran bounds analysis for 26 ms
Ran bounds analysis for 14 ms
"Extended success?"
#t
(maximum
 ...
 (minimum
  ...
  (cast
   ...
   (vs-mpy-add
    ...
    (combine
     (vs-shift-right
      ...
      (cast
       ...
       (vs-shift-right
        ...
        (vs-mpy-add
         ...
         (vs-mpy-add
          ...
          (combine
           (vs-mpy-add
            ...
            (combine
             (vs-mpy-add
              ...
              #<load-data>
              (list (int32_t t5829))
              #f
              #f
              #f
              'int32)
             (vs-mpy-add
              ...
              (combine
               #<load-data>
               (broadcast
                ...
                (sca-add
                 (sca-mul
                  (sca-mul (int32_t t5829) (int32_t t5830))
                  (int32_t mat_a.extent.0))
                 (sca-mul (int32_t t5830) (int32_t t6653)))))
              (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
              #f
              #f
              #f
              'int32))
            (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
            #f
            #f
            #f
            'int32)
           (cast ... #<load-data> 'int32 #f))
          (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
          #f
          #f
          #f
          'int32)
         (list (int32_t output_multiplier))
         #f
         #f
         #f
         'int64)
        (int64_t (bv #x000000000000001f 64))
        #t
        x?$2971
        #t)
       'int32
       #t)
      (int32_t output_shift)
      #t
      x?$3371
      #t)
     (broadcast ... (int32_t output_offset)))
    (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
    #f
    #f
    #f
    'int32)
   'uint8
   #t)
  (broadcast ... (uint8_t output_max)))
 (broadcast ... (uint8_t output_min)))

(x86) Successfully found an equivalent IR expression.

(maximum
 ...
 (minimum
  ...
  (cast
   ...
   (vs-mpy-add
    ...
    (combine
     (vs-shift-right
      ...
      (cast
       ...
       (vs-shift-right
        ...
        (vs-mpy-add
         ...
         (vs-mpy-add
          ...
          (combine
           (vs-mpy-add
            ...
            (combine
             (vs-mpy-add
              ...
              #<load-data>
              (list (int32_t t5829))
              #f
              #f
              #f
              'int32)
             (vs-mpy-add
              ...
              (combine
               #<load-data>
               (broadcast
                ...
                (sca-add
                 (sca-mul
                  (sca-mul (int32_t t5829) (int32_t t5830))
                  (int32_t mat_a.extent.0))
                 (sca-mul (int32_t t5830) (int32_t t6653)))))
              (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
              #f
              #f
              #f
              'int32))
            (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
            #f
            #f
            #f
            'int32)
           (cast ... #<load-data> 'int32 #f))
          (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
          #f
          #f
          #f
          'int32)
         (list (int32_t output_multiplier))
         #f
         #f
         #f
         'int64)
        (int64_t (bv #x000000000000001f 64))
        #t
        x?$2971
        #t)
       'int32
       #t)
      (int32_t output_shift)
      #t
      x?$3371
      #t)
     (broadcast ... (int32_t output_offset)))
    (list (int8_t (bv #x01 8)) (int8_t (bv #x01 8)))
    #f
    #f
    #f
    'int32)
   'uint8
   #t)
  (broadcast ... (uint8_t output_max)))
 (broadcast ... (uint8_t output_min)))

Synthesis time: 112 seconds

Synthesizing x86 for:
(vec-max
 (vec-min
  (vec-cast
   (vec-max
    (vec-min
     (vec-add
      (vec-add
       (vec-shr
        (vec-cast
         (vec-max
          (vec-min
           (vec-add
            (vec-bwand
             (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
             (vec-div
              (vec-mul
               (vec-cast
                (vec-add
                 (vec-add
                  (vec-mul
                   (vec-cast
                    (load
                     (buffer column_sums_b 'uint32)
                     (ramp
                      (sca-add
                       (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                       16)
                      1
                      16)
                     (aligned 16 0))
                    'int32
                    16)
                   (sca-broadcast (int32_t t5829) 16))
                  (vec-add
                   (load
                    (buffer bias 'int32)
                    (ramp (sca-mul output.s0.x.x 16) 1 16)
                    (aligned 16 0))
                   (sca-broadcast
                    (sca-add
                     (sca-mul
                      (sca-mul (int32_t t5829) (int32_t t5830))
                      (int32_t mat_a.extent.0))
                     (sca-mul (int32_t t5830) (int32_t t6653)))
                    16)))
                 (vec-cast
                  (load
                   (buffer multiplied_no_offsets 'uint32)
                   (ramp
                    (sca-add
                     (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
                     4)
                    1
                    16)
                   (aligned 4 0))
                  'int32
                  16))
                'int64
                16)
               (vec-cast
                (sca-broadcast (int32_t output_multiplier) 16)
                'int64
                16))
              (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
            (vec-div
             (vec-mul
              (vec-cast
               (vec-add
                (vec-add
                 (vec-mul
                  (vec-cast
                   (load
                    (buffer column_sums_b 'uint32)
                    (ramp
                     (sca-add
                      (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                      16)
                     1
                     16)
                    (aligned 16 0))
                   'int32
                   16)
                  (sca-broadcast (int32_t t5829) 16))
                 (vec-add
                  (load
                   (buffer bias 'int32)
                   (ramp (sca-mul output.s0.x.x 16) 1 16)
                   (aligned 16 0))
                  (sca-broadcast
                   (sca-add
                    (sca-mul
                     (sca-mul (int32_t t5829) (int32_t t5830))
                     (int32_t mat_a.extent.0))
                    (sca-mul (int32_t t5830) (int32_t t6653)))
                   16)))
                (vec-cast
                 (load
                  (buffer multiplied_no_offsets 'uint32)
                  (ramp
                   (sca-add
                    (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
                    4)
                   1
                   16)
                  (aligned 4 0))
                 'int32
                 16))
               'int64
               16)
              (vec-cast
               (sca-broadcast (int32_t output_multiplier) 16)
               'int64
               16))
             (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
           (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
          (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
         'int32
         16)
        (sca-broadcast (int32_t output_shift) 16))
       (vec-bwand
        (vec-if
         (sca-broadcast
          (sca-lt (int32_t (bv #x00000000 32)) (int32_t output_shift))
          16)
         (sca-broadcast (int32_t (bv #x00000001 32)) 16)
         (sca-broadcast (int32_t (bv #x00000000 32)) 16))
        (vec-shr
         (vec-cast
          (vec-max
           (vec-min
            (vec-add
             (vec-bwand
              (sca-broadcast (int64_t (bv #x0000000000000001 64)) 16)
              (vec-div
               (vec-mul
                (vec-cast
                 (vec-add
                  (vec-add
                   (vec-mul
                    (vec-cast
                     (load
                      (buffer column_sums_b 'uint32)
                      (ramp
                       (sca-add
                        (sca-mul
                         (sca-sub output.s0.x.x (var-lookup 't6112))
                         16)
                        16)
                       1
                       16)
                      (aligned 16 0))
                     'int32
                     16)
                    (sca-broadcast (int32_t t5829) 16))
                   (vec-add
                    (load
                     (buffer bias 'int32)
                     (ramp (sca-mul output.s0.x.x 16) 1 16)
                     (aligned 16 0))
                    (sca-broadcast
                     (sca-add
                      (sca-mul
                       (sca-mul (int32_t t5829) (int32_t t5830))
                       (int32_t mat_a.extent.0))
                      (sca-mul (int32_t t5830) (int32_t t6653)))
                     16)))
                  (vec-cast
                   (load
                    (buffer multiplied_no_offsets 'uint32)
                    (ramp
                     (sca-add
                      (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
                      4)
                     1
                     16)
                    (aligned 4 0))
                   'int32
                   16))
                 'int64
                 16)
                (vec-cast
                 (sca-broadcast (int32_t output_multiplier) 16)
                 'int64
                 16))
               (sca-broadcast (int64_t (bv #x0000000040000000 64)) 16)))
             (vec-div
              (vec-mul
               (vec-cast
                (vec-add
                 (vec-add
                  (vec-mul
                   (vec-cast
                    (load
                     (buffer column_sums_b 'uint32)
                     (ramp
                      (sca-add
                       (sca-mul (sca-sub output.s0.x.x (var-lookup 't6112)) 16)
                       16)
                      1
                      16)
                     (aligned 16 0))
                    'int32
                    16)
                   (sca-broadcast (int32_t t5829) 16))
                  (vec-add
                   (load
                    (buffer bias 'int32)
                    (ramp (sca-mul output.s0.x.x 16) 1 16)
                    (aligned 16 0))
                   (sca-broadcast
                    (sca-add
                     (sca-mul
                      (sca-mul (int32_t t5829) (int32_t t5830))
                      (int32_t mat_a.extent.0))
                     (sca-mul (int32_t t5830) (int32_t t6653)))
                    16)))
                 (vec-cast
                  (load
                   (buffer multiplied_no_offsets 'uint32)
                   (ramp
                    (sca-add
                     (sca-add (sca-mul output.s0.x.x 16) (var-lookup 't6121))
                     4)
                    1
                    16)
                   (aligned 4 0))
                  'int32
                  16))
                'int64
                16)
               (vec-cast
                (sca-broadcast (int32_t output_multiplier) 16)
                'int64
                16))
              (sca-broadcast (int64_t (bv #x0000000080000000 64)) 16)))
            (sca-broadcast (int64_t (bv #x000000007fffffff 64)) 16))
           (sca-broadcast (int64_t (bv #xffffffff80000000 64)) 16))
          'int32
          16)
         (sca-broadcast
          (sca-add (int32_t output_shift) (int32_t (bv #xffffffff 32)))
          16))))
      (sca-broadcast (int32_t output_offset) 16))
     (sca-broadcast (int32_t (bv #x000000ff 32)) 16))
    (sca-broadcast (int32_t (bv #x00000000 32)) 16))
   'uint8
   16)
  (sca-broadcast (uint8_t output_max) 16))
 (sca-broadcast (uint8_t output_min) 16))


synthesize-x86 output:
#<void>
#f
